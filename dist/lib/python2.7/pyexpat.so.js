<<<<<<< HEAD
(function(g){function e(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h;e=a;f=b;h=_PyInt_FromLong(c);d=h==0?5:1;break;case 1:d=_PyObject_SetAttrString(e,f,h)==-1;var j=h;d=d?2:6;break;case 2:d=j!=0?3:5;break;case 3:HEAP[h]-=1;d=HEAP[h]==0?4:5;break;case 4:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);d=5;break;case 5:g=0;d=9;break;case 6:HEAP[h]=HEAP[j]-1;d=HEAP[h]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);d=8;break;case 8:g=
1;d=9;break;case 9:return a=g;default:assert(0,"bad label: "+d)}}function b(a,b){var c=STACKTOP;STACKTOP+=256;_memset(c,0,256);var d;for(d=-1;;)switch(d){case -1:var f,g,h;d=c;var j;f=a;g=b;j=HEAP[f+8];f=M(j);j=L(j);h=I(g);_sprintf(d,Hb,allocate([h,0,0,0,f,0,0,0,j,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0],ALLOC_STACK));h=_PyObject_CallFunction(HEAP[da],Jb,allocate([d,0,0,0],["i8*",0,0,0],ALLOC_STACK));d=h!=0?1:8;break;case 1:d=e(h,jb,g)!=0?2:5;break;case 2:d=e(h,bc,j)!=0?3:5;break;case 3:d=e(h,
Wb,f)!=0?4:5;break;case 4:_PyErr_SetObject(HEAP[da],h);d=5;break;case 5:d=h!=0?6:8;break;case 6:HEAP[h]-=1;d=HEAP[h]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);d=8;break;case 8:return STACKTOP=c,0;default:assert(0,"bad label: "+d)}}function a(a,b){return HEAP[HEAP[a+48]+4*b]!=0}function c(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f;d=a;e=b;c=d==0?1:2;break;case 1:HEAP[__Py_NoneStruct]+=1;f=__Py_NoneStruct;c=3;break;case 2:f=_PyUnicodeUCS2_DecodeUTF8(d,e,lb);c=3;break;case 3:return c=
f;default:assert(0,"bad label: "+c)}}function d(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f;d=a;e=b;c=d==0?1:2;break;case 1:HEAP[__Py_NoneStruct]+=1;f=__Py_NoneStruct;c=3;break;case 2:f=_PyString_FromStringAndSize(d,e);c=3;break;case 3:return c=f;default:assert(0,"bad label: "+c)}}function f(a){u(a,0);z(HEAP[a+8],g+2)}function h(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g;e=a;f=b;g=c;d=HEAP[Ib+e*20+12]==0?1:2;break;case 1:d=e;var h=_PyCode_NewEmpty(kb,f,g);HEAP[Ib+d*20+12]=h;d=2;break;
case 2:return a=HEAP[Ib+e*20+12];default:assert(0,"bad label: "+d)}}function j(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,k,l,m,n;f=a;g=b;h=c;j=d;n=0;e=HEAP[f+20]==0?2:1;break;case 1:e=HEAP[f+16]!=0?2:3;break;case 2:m=0;e=17;break;case 3:e=HEAP[f+24]!=0?4:10;break;case 4:HEAP[f+16]+=1;n=FUNCTION_TABLE[HEAP[f+24]](HEAP[f+32],g,h,j);e=HEAP[f+28]!=0?6:5;break;case 5:e=HEAP[f+24]!=0?6:7;break;case 6:l=1;e=8;break;case 7:l=0;e=8;break;case 8:HEAP[f+20]=l;HEAP[f+16]-=1;e=n!=0?9:10;break;case 9:m=
n;e=17;break;case 10:e=HEAP[f+28]!=0?11:16;break;case 11:HEAP[f+16]+=1;n=FUNCTION_TABLE[HEAP[f+28]](HEAP[f+36],g,h,j);e=HEAP[f+28]!=0?13:12;break;case 12:e=HEAP[f+24]!=0?13:14;break;case 13:k=1;e=15;break;case 14:k=0;e=15;break;case 15:HEAP[f+20]=k;HEAP[f+16]-=1;e=16;break;case 16:m=n;e=17;break;case 17:return a=m;default:assert(0,"bad label: "+e)}}function k(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,k,l,m,n,o;f=a;g=b;h=c;k=d;m=HEAP[__PyThreadState_Current];e=f==0?1:2;break;case 1:l=0;
e=19;break;case 2:n=_PyEval_GetGlobals();n=_PyFrame_New(m,f,n,0);e=n==0?3:4;break;case 3:l=0;e=19;break;case 4:HEAP[m+8]=n;e=j(m,n,0,__Py_NoneStruct)<0?5:6;break;case 5:l=0;e=19;break;case 6:o=_PyEval_CallObjectWithKeywords(g,h,0);var p=m;e=o==0?7:11;break;case 7:e=HEAP[p+48]==0?8:9;break;case 8:_PyTraceBack_Here(n);e=9;break;case 9:a:{e=HEAP[k+8];for(var q=void 0,q=-1;;)switch(q){case -1:var r,s;r=e;s=0;q=HEAP[r+480];q=q==2?4:q==3?1:5;break;case 1:var u=r,q=s!=0?2:3;break;case 2:HEAP[u+284]=33;q=
11;break;case 3:HEAP[u+480]=2;q=10;break;case 4:HEAP[r+284]=36;q=11;break;case 5:var t=r,q=s!=0?6:9;break;case 6:var B=r,q=HEAP[t+488]!=0?7:8;break;case 7:HEAP[B+284]=37;q=11;break;case 8:HEAP[B+480]=3;q=10;break;case 9:HEAP[t+480]=2;q=10;break;case 10:q=11;break;case 11:break a;default:assert(0,"bad label: "+q)}}a:{var q=m,P=n;e=STACKTOP;STACKTOP+=12;_memset(e,0,12);for(var v=void 0,v=-1;;)switch(v){case -1:var O,w,ea,T=e,x=e+4,H=e+8,za,ga;O=q;w=P;v=HEAP[O+28]==0?1:2;break;case 1:ea=0;v=20;break;
case 2:_PyErr_Fetch(T,x,H);v=HEAP[x]==0?3:4;break;case 3:HEAP[x]=__Py_NoneStruct;HEAP[HEAP[x]]+=1;v=4;break;case 4:za=v=_PyTuple_Pack(3,allocate([HEAP[T],0,0,0,HEAP[x],0,0,0,HEAP[H],0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));v=v==0?5:6;break;case 5:_PyErr_Restore(HEAP[T],HEAP[x],HEAP[H]);ea=0;v=20;break;case 6:ga=j(O,w,1,za);HEAP[za]-=1;v=HEAP[za]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[za+4]+24]](za);v=8;break;case 8:v=ga==0?9:10;break;
case 9:_PyErr_Restore(HEAP[T],HEAP[x],HEAP[H]);v=19;break;case 10:v=HEAP[T]!=0?11:13;break;case 11:v=HEAP[T];HEAP[v]-=1;v=HEAP[v]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[HEAP[T]+4]+24]](HEAP[T]);v=13;break;case 13:v=HEAP[x]!=0?14:16;break;case 14:v=HEAP[x];HEAP[v]-=1;v=HEAP[v]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[HEAP[x]+4]+24]](HEAP[x]);v=16;break;case 16:v=HEAP[H]!=0?17:19;break;case 17:v=HEAP[H];HEAP[v]-=1;v=HEAP[v]==0?18:19;break;case 18:FUNCTION_TABLE[HEAP[HEAP[HEAP[H]+4]+
24]](HEAP[H]);v=19;break;case 19:ea=ga;v=20;break;case 20:q=ea;STACKTOP=e;e=q;break a;default:assert(0,"bad label: "+v)}e=void 0}e=e<0?10:16;break;case 10:l=0;e=19;break;case 11:e=j(p,n,3,o)<0?12:16;break;case 12:e=o!=0?13:15;break;case 13:HEAP[o]-=1;e=HEAP[o]==0?14:15;break;case 14:FUNCTION_TABLE[HEAP[HEAP[o+4]+24]](o);e=15;break;case 15:o=0;e=16;break;case 16:HEAP[m+8]=HEAP[n+12];HEAP[n]-=1;e=HEAP[n]==0?17:18;break;case 17:FUNCTION_TABLE[HEAP[HEAP[n+4]+24]](n);e=18;break;case 18:l=o;e=19;break;
case 19:return a=l;default:assert(0,"bad label: "+e)}}function l(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,h,j,k;d=a;e=b;c=HEAP[d+12]!=0?1:2;break;case 1:h=g+4;c=3;break;case 2:h=g+6;c=3;break;case 3:j=c=FUNCTION_TABLE[h](e);c=c==0?4:5;break;case 4:f=j;c=14;break;case 5:c=HEAP[d+44]==0?6:7;break;case 6:f=j;c=14;break;case 7:k=_PyDict_GetItem(HEAP[d+44],j);c=k==0?8:11;break;case 8:c=_PyDict_SetItem(HEAP[d+44],j,j)==0?9:10;break;case 9:f=j;c=14;break;case 10:f=0;c=14;break;case 11:HEAP[k]+=
1;HEAP[j]-=1;c=HEAP[j]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);c=13;break;case 13:f=k;c=14;break;case 14:return d=f;default:assert(0,"bad label: "+c)}}function m(b,e,j){var l,m=null;for(l=-1;;)switch(l){case -1:var n,o,p,q,r,s;n=b;o=e;p=j;l=a(n,3)==0?1:2;break;case 1:q=-1;l=18;break;case 2:r=_PyTuple_New(1);l=r==0?3:4;break;case 3:q=-1;l=18;break;case 4:var u=o,t=p;l=HEAP[n+12]!=0?5:6;break;case 5:var B=c(u,t),m=5;l=7;break;case 6:var P=d(u,t),m=6;l=7;break;case 7:s=l=m==6?P:
B;var v=r;l=l==0?8:11;break;case 8:HEAP[r]=HEAP[v]-1;l=HEAP[r]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);l=10;break;case 10:f(n);y(HEAP[n+8],g+8);q=-1;l=18;break;case 11:HEAP[v+12]=s;HEAP[n+24]=1;s=HEAP[HEAP[n+48]+12];l=h(3,Lb,441);s=k(l,s,r,n);HEAP[n+24]=0;HEAP[r]-=1;l=HEAP[r]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);l=13;break;case 13:l=s==0?14:15;break;case 14:f(n);y(HEAP[n+8],g+8);q=-1;l=18;break;case 15:HEAP[s]-=1;l=HEAP[s]==0?16:17;break;case 16:FUNCTION_TABLE[HEAP[HEAP[s+
4]+24]](s);l=17;break;case 17:q=0;l=18;break;case 18:return b=q;default:assert(0,"bad label: "+l)}}function n(a){var b;for(b=-1;;)switch(b){case -1:var c,d;c=a;b=HEAP[c+32]==0?2:1;break;case 1:b=HEAP[c+40]==0?2:3;break;case 2:d=0;b=4;break;case 3:b=m(c,HEAP[c+32],HEAP[c+40]);HEAP[c+40]=0;d=b;b=4;break;case 4:return a=d;default:assert(0,"bad label: "+b)}}function o(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g,h,j,k;d=a;e=b;g=0;h=_PyTuple_New(HEAP[d+12]);c=h!=0?1:12;break;case 1:c=HEAP[d+12]>
2147483646?2:3;break;case 2:throw ___assert_fail(Tb,kb,694,oc),"Reached an unreachable!";case 3:j=0;c=10;break;case 4:k=o(HEAP[m+16]+20*j,e);var l=h;c=k==0?5:9;break;case 5:c=l!=0?6:8;break;case 6:HEAP[h]-=1;c=HEAP[h]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);c=8;break;case 8:f=0;c=13;break;case 9:HEAP[l+12+j*4]=k;j+=1;c=10;break;case 10:var m=d;c=HEAP[d+12]>j?4:11;break;case 11:g=_Py_BuildValue(Fb,allocate([HEAP[d],0,0,0,HEAP[d+4],0,0,0,e,0,0,0,HEAP[m+8],0,0,0,h,0,0,0],["i32",0,0,
0,"i32",0,0,0,"%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));c=12;break;case 12:f=g;c=13;break;case 13:return c=f;default:assert(0,"bad label: "+c)}}function p(a,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g;e=a;f=c;d=_PyErr_Occurred()!=0?1:2;break;case 1:g=0;d=7;break;case 2:var h=e;d=f==0?3:4;break;case 3:d=D(HEAP[h+8]);g=b(e,d);d=7;break;case 4:d=n(h)<0?5:6;break;case 5:g=0;d=7;break;case 6:g=_PyInt_FromLong(f);d=7;break;case 7:return e=g;default:assert(0,
"bad label: "+d)}}function q(a){var b;for(b=-1;;)switch(b){case -1:var c,d,e;c=a;e=0;b=4;break;case 1:b=_strcmp(c,HEAP[Ib+e*20]);var f=e;b=b==0?2:3;break;case 2:d=f;b=6;break;case 3:e=f+1;b=4;break;case 4:b=HEAP[Ib+e*20]!=0?1:5;break;case 5:d=-1;b=6;break;case 6:return a=d;default:assert(0,"bad label: "+b)}}function r(a){var b;for(b=-1;;)switch(b){case -1:var c;b=a!=0?1:2;break;case 1:c=__Py_TrueStruct;b=3;break;case 2:c=__Py_ZeroStruct;b=3;break;case 3:return a=c,HEAP[a]+=1,a;default:assert(0,"bad label: "+
b)}}function u(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g;d=a;e=b;f=0;c=HEAP[Ib+f*20]!=0?1:8;break;case 1:var h=HEAP[d+48]+4*f;c=e!=0?2:3;break;case 2:HEAP[h]=0;c=7;break;case 3:g=HEAP[h];HEAP[HEAP[d+48]+4*f]=0;c=g!=0?4:6;break;case 4:HEAP[g]-=1;c=HEAP[g]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);c=6;break;case 6:FUNCTION_TABLE[HEAP[Ib+f*20+4]](HEAP[d+8],0);c=7;break;case 7:f+=1;c=HEAP[Ib+f*20]!=0?1:8;break;case 8:return;default:assert(0,"bad label: "+c)}}function s(a,b,c){var d;
for(d=-1;;)switch(d){case -1:var e,f;f=t(a,b,c,0);d=f!=0?1:4;break;case 1:d=HEAP[f+236]!=0?2:4;break;case 2:d=Xa(f,jh)==0?3:4;break;case 3:w(f);e=0;d=5;break;case 4:e=f;d=5;break;case 5:return a=e;default:assert(0,"bad label: "+d)}}function t(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=d;e=j!=0?1:3;break;case 1:n=FUNCTION_TABLE[HEAP[j]](496);e=n!=0?2:5;break;case 2:e=n+12;HEAP[e]=HEAP[j];HEAP[e+4]=HEAP[j+4];HEAP[e+8]=HEAP[j+8];e=6;break;case 3:n=_malloc(496);e=
n!=0?4:5;break;case 4:e=n+12;HEAP[e]=g+42;HEAP[e+4]=g+44;HEAP[e+8]=g+46;e=6;break;case 5:var o=n,f=5;e=7;break;case 6:var p=n;n==0?(f=6,e=7):(f=6,e=8);break;case 7:m=f==5?o:p;e=23;break;case 8:HEAP[p+8]=0;HEAP[n+32]=0;HEAP[n+380]=16;var q=FUNCTION_TABLE[HEAP[n+12]](HEAP[n+380]*16);HEAP[n+392]=q;q=n+12;e=HEAP[n+392]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[q+8]](n);m=0;e=23;break;case 10:var r=FUNCTION_TABLE[HEAP[q]](1024);HEAP[n+44]=r;r=n;e=HEAP[n+44]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[r+
12+8]](HEAP[n+392]);FUNCTION_TABLE[HEAP[n+12+8]](n);m=0;e=23;break;case 12:HEAP[n+48]=HEAP[r+44]+1024;var s=n;e=l!=0?13:14;break;case 13:HEAP[s+356]=l;e=16;break;case 14:a:{e=s+12;for(var u=void 0,u=-1;;)switch(u){case -1:var t,B,P;t=e;var v=P=FUNCTION_TABLE[HEAP[t]](188),u=P==0?1:2;break;case 1:B=v;u=3;break;case 2:Ka(v+80,t);Ka(P+104,t);ma(P,t);ma(P+20,t);ma(P+40,t);ma(P+60,t);HEAP[P+131]=0;ma(P+132,t);HEAP[P+152]=0;HEAP[P+152+4]=0;HEAP[P+160]=0;HEAP[P+184]=0;HEAP[P+164]=0;HEAP[P+180]=0;HEAP[P+
172]=0;HEAP[P+176]=0;HEAP[P+168]=0;HEAP[P+128]=1;HEAP[P+129]=0;HEAP[P+130]=0;B=P;u=3;break;case 3:e=B;break a;default:assert(0,"bad label: "+u)}e=void 0}HEAP[n+356]=e;e=HEAP[n+356]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[n+12+8]](HEAP[n+44]);FUNCTION_TABLE[HEAP[n+12+8]](HEAP[n+392]);FUNCTION_TABLE[HEAP[n+12+8]](n);m=0;e=23;break;case 16:HEAP[n+376]=0;HEAP[n+368]=0;HEAP[n+304]=0;HEAP[n+468]=0;HEAP[n+464]=0;HEAP[n+124]=0;HEAP[n+248]=0;HEAP[n+472]=33;HEAP[n+236]=0;HEAP[n+237]=0;HEAP[n+396]=0;HEAP[n+
400]=0;HEAP[n+404]=0;Ka(n+416,n+12);Ka(n+440,n+12);a:{e=n;for(var u=h,O=void 0,O=-1;;)switch(O){case -1:var ea,T,x;ea=e;T=u;HEAP[ea+280]=g+48;O=ea+256;HEAP[O]=g+190;HEAP[O+16]=1;HEAP[O+12]=0;HEAP[O+20]=0;O=T!=0?1:2;break;case 1:x=ja(ea+416,T);O=3;break;case 2:x=0;O=3;break;case 3:HEAP[ea+232]=x;HEAP[ea+360]=0;pb(ea+148,ea+144,0);HEAP[ea]=0;HEAP[ea+4]=0;HEAP[ea+52]=0;HEAP[ea+56]=0;HEAP[ea+60]=0;HEAP[ea+64]=0;HEAP[ea+68]=0;HEAP[ea+72]=0;HEAP[ea+76]=0;HEAP[ea+80]=0;HEAP[ea+84]=0;HEAP[ea+88]=0;HEAP[ea+
92]=0;HEAP[ea+96]=0;HEAP[ea+100]=0;HEAP[ea+104]=0;HEAP[ea+108]=0;HEAP[ea+112]=0;HEAP[ea+116]=ea;HEAP[ea+120]=0;HEAP[ea+128]=0;HEAP[ea+132]=0;HEAP[ea+136]=0;HEAP[ea+140]=0;HEAP[ea+24]=HEAP[ea+8];HEAP[ea+28]=HEAP[ea+8];HEAP[ea+36]=0;HEAP[ea+40]=0;HEAP[ea+344]=0;HEAP[ea+348]=0;HEAP[ea+316]=0;HEAP[ea+320]=0;HEAP[ea+324]=0;HEAP[ea+328]=0;HEAP[ea+332]=0;HEAP[ea+336]=0;HEAP[ea+340]=0;HEAP[ea+352]=0;HEAP[ea+353]=0;_llvm_memset_p0i8_i32(ea+408,0,8,1,0);HEAP[ea+284]=0;HEAP[ea+288]=0;HEAP[ea+292]=0;HEAP[ea+
296]=0;HEAP[ea+300]=0;HEAP[ea+308]=1;HEAP[ea+312]=0;HEAP[ea+364]=0;HEAP[ea+372]=0;HEAP[ea+384]=0;HEAP[ea+240]=0;HEAP[ea+252]=0;HEAP[ea+244]=0;HEAP[ea+476]=0;HEAP[ea+480]=0;HEAP[ea+488]=0;HEAP[ea+489]=0;HEAP[ea+492]=0;break a;default:assert(0,"bad label: "+O)}}e=h!=0?17:19;break;case 17:e=HEAP[n+232]==0?18:19;break;case 18:w(n);m=0;e=23;break;case 19:e=k!=0?20:21;break;case 20:HEAP[n+236]=1;e=void 0;e=Mc;HEAP[n+228]=e;HEAP[n+472]=HEAP[k];e=22;break;case 21:e=void 0;e=od;HEAP[n+228]=e;e=22;break;case 22:m=
n;e=23;break;case 23:return a=m;default:assert(0,"bad label: "+e)}}function v(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e;d=b;e=a;c=a==0?2:1;break;case 1:c=HEAP[e+4];FUNCTION_TABLE[HEAP[d+12+8]](HEAP[e+16]);FUNCTION_TABLE[HEAP[d+12+8]](e);e=c;c=c==0?2:1;break;case 2:return;default:assert(0,"bad label: "+c)}}function w(a){var b,c=null;for(b=-1;;)switch(b){case -1:var d,e,f,g,h;d=a;b=d==0?17:1;break;case 1:var j=HEAP[d+364];e=j;c=1;b=2;break;case 2:b=(c==5?g:j)==0?3:5;break;case 3:var k=d;b=HEAP[d+
368]==0?6:4;break;case 4:e=HEAP[k+368];HEAP[d+368]=0;b=5;break;case 5:g=e;e=HEAP[e];FUNCTION_TABLE[HEAP[d+12+8]](HEAP[g+36]);v(HEAP[g+44],d);FUNCTION_TABLE[HEAP[d+12+8]](g);g=e;c=5;b=2;break;case 6:var l=HEAP[k+300];f=l;c=6;b=7;break;case 7:b=(c==10?h:l)==0?8:10;break;case 8:var m=d;b=HEAP[d+304]==0?11:9;break;case 9:f=HEAP[m+304];HEAP[d+304]=0;b=10;break;case 10:h=f;f=HEAP[f+8];FUNCTION_TABLE[HEAP[d+12+8]](h);h=f;c=10;b=7;break;case 11:v(HEAP[m+376],d);v(HEAP[d+372],d);$a(d+416);$a(d+440);b=HEAP[d+
488]==0?12:14;break;case 12:b=HEAP[d+356]!=0?13:14;break;case 13:a:{b=HEAP[d+356];var n=HEAP[d+476]==0&255,o=d+12,p=STACKTOP;STACKTOP+=8;_memset(p,0,8);for(var q=void 0,q=-1;;)switch(q){case -1:var r,s,u,t=p,B;r=b;s=n;u=o;La(t,r+20);B=q=Za(t);q=q==0?4:1;break;case 1:q=HEAP[B+16]!=0?2:3;break;case 2:FUNCTION_TABLE[HEAP[u+8]](HEAP[B+20]);q=3;break;case 3:B=q=Za(t);q=q==0?4:1;break;case 4:Fa(r);Fa(r+132);Fa(r+20);Fa(r+40);Fa(r+60);$a(r+80);$a(r+104);q=s!=0?5:6;break;case 5:FUNCTION_TABLE[HEAP[u+8]](HEAP[r+
184]);FUNCTION_TABLE[HEAP[u+8]](HEAP[r+164]);q=6;break;case 6:FUNCTION_TABLE[HEAP[u+8]](r);STACKTOP=p;break a;default:assert(0,"bad label: "+q)}}b=14;break;case 14:FUNCTION_TABLE[HEAP[d+12+8]](HEAP[d+392]);FUNCTION_TABLE[HEAP[d+12+8]](HEAP[d+464]);FUNCTION_TABLE[HEAP[d+12+8]](HEAP[d+8]);FUNCTION_TABLE[HEAP[d+12+8]](HEAP[d+44]);FUNCTION_TABLE[HEAP[d+12+8]](HEAP[d+396]);FUNCTION_TABLE[HEAP[d+12+8]](HEAP[d+240]);b=HEAP[d+252]!=0?15:16;break;case 15:FUNCTION_TABLE[HEAP[d+252]](HEAP[d+244]);b=16;break;
case 16:FUNCTION_TABLE[HEAP[d+12+8]](d);b=17;break;case 17:return;default:assert(0,"bad label: "+b)}}function x(a,b){var c;for(c=-1;;)switch(c){case -1:var d;d=a;c=HEAP[d+4]==HEAP[d];HEAP[d]=b;c=c?1:2;break;case 1:HEAP[d+4]=HEAP[d];c=2;break;case 2:return;default:assert(0,"bad label: "+c)}}function y(a,b){HEAP[a+60]=b}function z(a,b){HEAP[a+112]=b}function C(a,b,c){HEAP[a+124]=b;HEAP[a+248]=c}function A(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,h,j,k,l,m;f=a;h=b;j=c;k=d;e=HEAP[f+480];e=e==
2?2:e==3?1:3;break;case 1:HEAP[f+284]=33;l=0;e=15;break;case 2:HEAP[f+284]=36;l=0;e=15;break;case 3:HEAP[f+480]=1;e=j==0?4:12;break;case 4:HEAP[f+480+4]=k&255;e=k==0?5:6;break;case 5:l=1;e=15;break;case 6:HEAP[f+296]=HEAP[f+24];HEAP[f+40]=HEAP[f+28];var n=FUNCTION_TABLE[HEAP[f+280]](f,HEAP[f+24],HEAP[f+40],f+24);HEAP[f+284]=n;n=f;e=HEAP[f+284]==0?7:11;break;case 7:e=HEAP[n+480];e=e==0?9:e==1?9:e==3?8:10;break;case 8:FUNCTION_TABLE[HEAP[HEAP[f+144]+52]](HEAP[f+144],HEAP[f+296],HEAP[f+24],f+408);HEAP[f+
296]=HEAP[f+24];l=2;e=15;break;case 9:HEAP[f+480]=2;e=10;break;case 10:l=1;e=15;break;case 11:HEAP[f+292]=HEAP[n+288];HEAP[f+280]=g+54;l=0;e=15;break;case 12:m=E(f,j);e=m==0?13:14;break;case 13:l=0;e=15;break;case 14:_llvm_memcpy_p0i8_p0i8_i32(m,h,j,1,0);l=G(f,j,k);e=15;break;case 15:return a=l;default:assert(0,"bad label: "+e)}}function G(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,h,j,k,l;e=a;f=b;h=c;l=1;d=HEAP[e+480];d=d==2?2:d==3?1:3;break;case 1:HEAP[e+284]=33;j=0;d=10;break;case 2:HEAP[e+
284]=36;j=0;d=10;break;case 3:HEAP[e+480]=1;k=HEAP[e+24];HEAP[e+296]=k;HEAP[e+28]+=f;HEAP[e+40]=HEAP[e+28];HEAP[e+36]=f+HEAP[e+36];HEAP[e+480+4]=h&255;k=FUNCTION_TABLE[HEAP[e+280]](e,k,HEAP[e+40],e+24);HEAP[e+284]=k;k=e;d=HEAP[e+284]!=0?4:5;break;case 4:HEAP[e+292]=HEAP[k+288];HEAP[e+280]=g+54;j=0;d=10;break;case 5:d=HEAP[k+480];d=d==0?7:d==1?7:d==3?6:9;break;case 6:l=2;d=9;break;case 7:d=h!=0?8:9;break;case 8:HEAP[e+480]=2;j=l;d=10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[e+144]+52]](HEAP[e+144],HEAP[e+
296],HEAP[e+24],e+408);HEAP[e+296]=HEAP[e+24];j=l;d=10;break;case 10:return a=j;default:assert(0,"bad label: "+d)}}function E(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g,h,j,k,l;d=a;e=b;c=HEAP[d+480];c=c==2?2:c==3?1:3;break;case 1:HEAP[d+284]=33;f=0;c=20;break;case 2:HEAP[d+284]=36;f=0;c=20;break;case 3:c=HEAP[d+32]-HEAP[d+28]<e?4:19;break;case 4:g=e+HEAP[d+28]+(0-HEAP[d+24]);h=HEAP[d+24]-HEAP[d+8];c=h>1024?5:6;break;case 5:h=1024;c=6;break;case 6:g=h+g;var m=d;c=HEAP[d+32]-HEAP[d+8]>=g?7:
9;break;case 7:c=HEAP[m+24]-HEAP[d+8]>h?8:19;break;case 8:c=0-h+HEAP[d+24]+(0-HEAP[d+8]);_llvm_memmove_p0i8_p0i8_i32(HEAP[d+8],HEAP[d+8]+c,h+HEAP[d+28]+(0-HEAP[d+24]),1,0);HEAP[d+28]+=0-c;HEAP[d+24]+=0-c;c=19;break;case 9:k=HEAP[m+32]-HEAP[d+24];c=k==0?10:11;break;case 10:k=1024;c=11;break;case 11:k*=2;c=k<g?11:12;break;case 12:j=FUNCTION_TABLE[HEAP[d+12]](k);c=j==0?13:14;break;case 13:HEAP[d+284]=1;f=0;c=20;break;case 14:HEAP[d+32]=j+k;var n=d;c=HEAP[d+24]!=0?15:18;break;case 15:l=HEAP[n+24]-HEAP[d+
8];c=l>1024?16:17;break;case 16:l=1024;c=17;break;case 17:_llvm_memcpy_p0i8_p0i8_i32(j,HEAP[d+24]+(0-l),l+HEAP[d+28]+(0-HEAP[d+24]),1,0);FUNCTION_TABLE[HEAP[d+12+8]](HEAP[d+8]);HEAP[d+8]=j;HEAP[d+28]=HEAP[d+8]+(HEAP[d+28]-HEAP[d+24])+l;HEAP[d+24]=HEAP[d+8]+l;c=19;break;case 18:HEAP[d+28]=j+(HEAP[n+28]-HEAP[d+24]);HEAP[d+8]=j;HEAP[d+24]=HEAP[d+8];c=19;break;case 19:f=HEAP[d+28];c=20;break;case 20:return d=f;default:assert(0,"bad label: "+c)}}function D(a){return HEAP[a+284]}function R(a){var b;for(b=
-1;;)switch(b){case -1:var c,d;c=a;b=HEAP[c+288]!=0?1:2;break;case 1:d=0-HEAP[c+40]+HEAP[c+36]+(0-(0-HEAP[c+288]));b=3;break;case 2:d=-1;b=3;break;case 3:return a=d;default:assert(0,"bad label: "+b)}}function M(a){var b;for(b=-1;;)switch(b){case -1:var c;c=a;b=HEAP[c+288]!=0?1:3;break;case 1:b=HEAP[c+288]>=HEAP[c+296]?2:3;break;case 2:FUNCTION_TABLE[HEAP[HEAP[c+144]+52]](HEAP[c+144],HEAP[c+296],HEAP[c+288],c+408);HEAP[c+296]=HEAP[c+288];b=3;break;case 3:return a=HEAP[c+408]+1;default:assert(0,"bad label: "+
b)}}function L(a){var b;for(b=-1;;)switch(b){case -1:var c;c=a;b=HEAP[c+288]!=0?1:3;break;case 1:b=HEAP[c+288]>=HEAP[c+296]?2:3;break;case 2:FUNCTION_TABLE[HEAP[HEAP[c+144]+52]](HEAP[c+144],HEAP[c+296],HEAP[c+288],c+408);HEAP[c+296]=HEAP[c+288];b=3;break;case 3:return a=HEAP[c+408+4];default:assert(0,"bad label: "+b)}}function I(a){var b;for(b=-1;;)switch(b){case -1:var c,d;c=a;b=c!=0&c<=40?1:2;break;case 1:d=HEAP[Ac+c*4];b=3;break;case 2:d=0;b=3;break;case 3:return a=d;default:assert(0,"bad label: "+
b)}}function J(a){var b,c=null;for(b=-1;;)switch(b){case -1:var d,e,f,g,h,j,k;d=a;var l=HEAP[d+364];f=l;c=-1;b=11;break;case 1:h=HEAP[f+12+12]+1;j=HEAP[f+36]+h;b=HEAP[f+4]==j?12:2;break;case 2:g=h+HEAP[f+8];b=HEAP[f+40]-HEAP[f+36]<g?3:10;break;case 3:k=FUNCTION_TABLE[HEAP[d+12+4]](HEAP[f+36],g);b=k==0?4:5;break;case 4:e=0;b=13;break;case 5:b=HEAP[f+12]==HEAP[f+36]?6:7;break;case 6:HEAP[f+12]=k;b=7;break;case 7:b=HEAP[f+12+4]!=0?8:9;break;case 8:HEAP[f+12+4]=k+(HEAP[f+12+4]-HEAP[f+36]);b=9;break;case 9:HEAP[f+
36]=k;HEAP[f+40]=k+g;j=k+h;b=10;break;case 10:_llvm_memcpy_p0i8_p0i8_i32(j,HEAP[f+4],HEAP[f+8],1,0);HEAP[f+4]=j;var m=HEAP[f];f=m;c=10;b=11;break;case 11:b=(c==10?m:l)!=0?1:12;break;case 12:e=1;b=13;break;case 13:return a=e,a&255;default:assert(0,"bad label: "+b)}}function F(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h;f=a;h=K(f,0,HEAP[f+144],b,c,d,HEAP[f+480+4]==0&255);e=h==0?1:3;break;case 1:e=J(f)==0?2:3;break;case 2:g=1;e=4;break;case 3:g=h;e=4;break;case 4:return a=g;default:assert(0,
"bad label: "+e)}}function V(a,b,c,d){var e=STACKTOP;STACKTOP+=4;_memset(e,0,4);var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n=e;h=a;j=b;k=c;l=d;HEAP[n]=j;f=FUNCTION_TABLE[HEAP[HEAP[h+144]+4]](HEAP[h+144],j,k,n);f=f==-2?8:f==-1?5:f==14?1:11;break;case 1:f=HEAP[n]==k?2:4;break;case 2:f=HEAP[h+480+4]==0?3:4;break;case 3:HEAP[l]=HEAP[n];m=0;f=12;break;case 4:j=HEAP[n];f=11;break;case 5:f=HEAP[h+480+4]==0?6:7;break;case 6:HEAP[l]=j;m=0;f=12;break;case 7:HEAP[h+288]=j;m=5;f=12;break;case 8:f=HEAP[h+
480+4]==0?9:10;break;case 9:HEAP[l]=j;m=0;f=12;break;case 10:HEAP[h+288]=j;m=6;f=12;break;case 11:HEAP[h+280]=g+58;m=Q(h,j,k,l);f=12;break;case 12:return a=m,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function Q(a,b,c,d){var e=STACKTOP;STACKTOP+=4;_memset(e,0,4);var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n=e,o;h=a;j=b;k=c;l=d;HEAP[n]=j;HEAP[h+288]=j;f=FUNCTION_TABLE[HEAP[HEAP[h+144]+4]](HEAP[h+144],j,k,n);HEAP[h+292]=HEAP[n];f=f==-2?10:f==-1?7:f==12?1:13;break;case 1:o=Y(h,1,j,HEAP[n]);
f=o!=0?2:3;break;case 2:m=o;f=14;break;case 3:f=HEAP[h+480];f=f==2?5:f==3?4:6;break;case 4:HEAP[l]=HEAP[n];m=0;f=14;break;case 5:m=35;f=14;break;case 6:j=HEAP[n];f=13;break;case 7:f=HEAP[h+480+4]==0?8:9;break;case 8:HEAP[l]=j;m=0;f=14;break;case 9:m=5;f=14;break;case 10:f=HEAP[h+480+4]==0?11:12;break;case 11:HEAP[l]=j;m=0;f=14;break;case 12:m=6;f=14;break;case 13:HEAP[h+280]=g+60;HEAP[h+312]=1;m=Z(h,j,k,l);f=14;break;case 14:return a=m,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function Z(a,
b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h;f=a;h=K(f,1,HEAP[f+144],b,c,d,HEAP[f+480+4]==0&255);e=h==0?1:3;break;case 1:e=J(f)==0?2:3;break;case 2:g=1;e=4;break;case 3:g=h;e=4;break;case 4:return a=g;default:assert(0,"bad label: "+e)}}function K(a,b,c,d,e,f,h){var j=STACKTOP;STACKTOP+=59;_memset(j,0,59);var k;for(k=-1;;)switch(k){case -1:var l,m,n,o=j,p,q,r,s,u,t,B,P=j+4,v=j+8,O,ea,w=j+9,T,x,H,za,ga=j+10,U,X=j+14,y,F,xa,S,K=j+18,Q,va=j+22,z,W,qb,Aa,db,C,na,Oa,Sa,E=j+46,Ae=j+50,Qd,$=j+51,ca=
j+55;l=a;m=b;n=c;HEAP[o]=d;p=e;q=f;r=h;u=HEAP[l+356];var A=l;k=HEAP[l+144]==n?1:2;break;case 1:t=A+288;B=l+292;k=3;break;case 2:t=HEAP[A+300];B=HEAP[l+300]+4;k=3;break;case 3:HEAP[t]=HEAP[o];var cb=va,oa=va,G=va,Ma=E,ab=E;k=4;break;case 4:HEAP[P]=HEAP[o];k=FUNCTION_TABLE[HEAP[n+4]](n,HEAP[o],p,P);HEAP[B]=HEAP[P];k=k==-5?149:k==-4?16:k==-3?5:k==-2?27:k==-1?24:k==0?23:k==1?68:k==2?68:k==3?87:k==4?87:k==5?106:k==6?162:k==7?137:k==8?141:k==9?30:k==10?130:k==11?169:k==12?136:k==13?171:173;break;case 5:k=
r!=0?6:7;break;case 6:HEAP[q]=HEAP[o];s=0;k=178;break;case 7:HEAP[B]=p;k=HEAP[l+60]!=0?8:9;break;case 8:HEAP[v]=10;FUNCTION_TABLE[HEAP[l+60]](HEAP[l+4],v,1);k=11;break;case 9:k=HEAP[l+80]!=0?10:11;break;case 10:Ia(l,n,HEAP[o],p);k=11;break;case 11:k=m==0?12:13;break;case 12:s=3;k=178;break;case 13:k=HEAP[l+312]!=m?14:15;break;case 14:s=13;k=178;break;case 15:HEAP[q]=p;s=0;k=178;break;case 16:k=r!=0?17:18;break;case 17:HEAP[q]=HEAP[o];s=0;k=178;break;case 18:k=m>0?19:22;break;case 19:k=HEAP[l+312]!=
m?20:21;break;case 20:s=13;k=178;break;case 21:HEAP[q]=HEAP[o];s=0;k=178;break;case 22:s=3;k=178;break;case 23:HEAP[t]=HEAP[P];s=4;k=178;break;case 24:k=r!=0?25:26;break;case 25:HEAP[q]=HEAP[o];s=0;k=178;break;case 26:s=5;k=178;break;case 27:k=r!=0?28:29;break;case 28:HEAP[q]=HEAP[o];s=0;k=178;break;case 29:s=6;k=178;break;case 30:k=FUNCTION_TABLE[HEAP[n+48]](n,HEAP[o]+HEAP[n+68],HEAP[P]+(0-HEAP[n+68]))&255;HEAP[w]=k;k=HEAP[w]!=0?31:35;break;case 31:var Pb=l;k=HEAP[l+60]!=0?32:33;break;case 32:FUNCTION_TABLE[HEAP[Pb+
60]](HEAP[l+4],w,1);k=175;break;case 33:k=HEAP[Pb+80]!=0?34:175;break;case 34:Ia(l,n,HEAP[o],HEAP[P]);k=175;break;case 35:O=ua(u+80,n,HEAP[o]+HEAP[n+68],HEAP[P]+(0-HEAP[n+68]));k=O==0?36:37;break;case 36:s=1;k=178;break;case 37:ea=ka(u,O,0);HEAP[u+80+12]=HEAP[u+80+16];k=HEAP[u+129]==0?39:38;break;case 38:k=HEAP[u+130]!=0?39:43;break;case 39:k=ea==0?40:41;break;case 40:s=11;k=178;break;case 41:k=HEAP[ea+34]==0?42:48;break;case 42:s=24;k=178;break;case 43:k=ea==0?44:48;break;case 44:var Bc=l;k=HEAP[l+
120]!=0?45:46;break;case 45:FUNCTION_TABLE[HEAP[Bc+120]](HEAP[l+4],O,0);k=175;break;case 46:k=HEAP[Bc+80]!=0?47:175;break;case 47:Ia(l,n,HEAP[o],HEAP[P]);k=175;break;case 48:k=HEAP[ea+32]!=0?49:50;break;case 49:s=12;k=178;break;case 50:k=HEAP[ea+28]!=0?51:52;break;case 51:s=15;k=178;break;case 52:var D=l;k=HEAP[ea+4]!=0?53:60;break;case 53:var sa=l;k=HEAP[D+308]==0?54:58;break;case 54:var Bb=l;k=HEAP[sa+120]!=0?55:56;break;case 55:FUNCTION_TABLE[HEAP[Bb+120]](HEAP[l+4],HEAP[ea],0);k=175;break;case 56:k=
HEAP[Bb+80]!=0?57:175;break;case 57:Ia(l,n,HEAP[o],HEAP[P]);k=175;break;case 58:T=Na(sa,ea,0);k=T!=0?59:175;break;case 59:s=T;k=178;break;case 60:k=HEAP[D+112]!=0?61:66;break;case 61:HEAP[ea+32]=1;a:{k=l;x=STACKTOP;STACKTOP+=8;_memset(x,0,8);for(var I=void 0,I=-1;;)switch(I){case -1:var J,Y,Fb,pa=x,Eb,kb,zb,xb,ec,Ud,Ca,Sc,ib;J=k;Fb=HEAP[J+356];Eb=0;I=HEAP[Fb+152+4]!=0?1:13;break;case 1:I=HEAP[J+416+12]!=HEAP[J+416+8]?4:2;break;case 2:I=bb(J+416)!=0?4:3;break;case 3:Y=0;I=58;break;case 4:zb=HEAP[J+
416+12];HEAP[zb]=61;HEAP[J+416+12]=zb+1;zb=HEAP[HEAP[Fb+152+4]+20];I=HEAP[J+472]!=0?5:6;break;case 5:zb-=1;I=6;break;case 6:kb=0;I=11;break;case 7:I=HEAP[J+416+12]!=HEAP[J+416+8]?10:8;break;case 8:I=bb(J+416)!=0?10:9;break;case 9:Y=0;I=58;break;case 10:I=HEAP[J+416+12];HEAP[I]=HEAP[HEAP[HEAP[Fb+152+4]+16]+kb];HEAP[J+416+12]=I+1;kb+=1;I=11;break;case 11:I=kb<zb?7:12;break;case 12:Eb=1;I=13;break;case 13:La(pa,Fb+60);I=14;break;case 14:Ca=I=Za(pa);I=I==0?39:15;break;case 15:I=HEAP[Ca+4]==0?14:16;break;
case 16:I=Eb!=0?17:21;break;case 17:I=HEAP[J+416+12]!=HEAP[J+416+8]?19:18;break;case 18:I=bb(J+416)!=0?19:20;break;case 19:I=HEAP[J+416+12];HEAP[I]=12;HEAP[J+416+12]=I+1;I=21;break;case 20:Y=0;I=58;break;case 21:Ud=HEAP[Ca];I=26;break;case 22:I=gb?25:23;break;case 23:I=bb(J+416)!=0?25:24;break;case 24:Y=0;I=58;break;case 25:I=HEAP[J+416+12];HEAP[I]=HEAP[Ud];HEAP[J+416+12]=I+1;Ud+=1;I=26;break;case 26:var gb=HEAP[J+416+12]!=HEAP[J+416+8],I=HEAP[Ud]!=0?22:27;break;case 27:I=gb?30:28;break;case 28:I=
bb(J+416)!=0?30:29;break;case 29:Y=0;I=58;break;case 30:ec=HEAP[J+416+12];HEAP[ec]=61;HEAP[J+416+12]=ec+1;ec=HEAP[HEAP[Ca+4]+20];I=HEAP[J+472]!=0?31:32;break;case 31:ec-=1;I=32;break;case 32:xb=0;I=37;break;case 33:I=HEAP[J+416+12]!=HEAP[J+416+8]?36:34;break;case 34:I=bb(J+416)!=0?36:35;break;case 35:Y=0;I=58;break;case 36:I=HEAP[J+416+12];HEAP[I]=HEAP[HEAP[HEAP[Ca+4]+16]+xb];HEAP[J+416+12]=I+1;xb+=1;I=37;break;case 37:I=xb<ec?33:38;break;case 38:Eb=1;I=14;break;case 39:La(pa,Fb);I=40;break;case 40:ib=
I=Za(pa);I=I==0?54:41;break;case 41:I=HEAP[ib+32]==0?40:42;break;case 42:I=Eb!=0?43:47;break;case 43:I=HEAP[J+416+12]!=HEAP[J+416+8]?45:44;break;case 44:I=bb(J+416)!=0?45:46;break;case 45:I=HEAP[J+416+12];HEAP[I]=12;HEAP[J+416+12]=I+1;I=47;break;case 46:Y=0;I=58;break;case 47:Sc=HEAP[ib];I=52;break;case 48:I=HEAP[J+416+12]!=HEAP[J+416+8]?51:49;break;case 49:I=bb(J+416)!=0?51:50;break;case 50:Y=0;I=58;break;case 51:I=HEAP[J+416+12];HEAP[I]=HEAP[Sc];HEAP[J+416+12]=I+1;Sc+=1;I=52;break;case 52:I=HEAP[Sc]!=
0?48:53;break;case 53:Eb=1;I=40;break;case 54:I=HEAP[J+416+12]!=HEAP[J+416+8]?57:55;break;case 55:I=bb(J+416)!=0?57:56;break;case 56:Y=0;I=58;break;case 57:Y=HEAP[J+416+12];HEAP[Y]=0;HEAP[J+416+12]=Y+1;Y=HEAP[J+416+16];I=58;break;case 58:k=Y;STACKTOP=x;x=k;break a;default:assert(0,"bad label: "+I)}x=void 0}HEAP[ea+32]=0;k=x==0?62:63;break;case 62:s=1;k=178;break;case 63:k=FUNCTION_TABLE[HEAP[l+112]](HEAP[l+116],x,HEAP[ea+20],HEAP[ea+16],HEAP[ea+24])==0?64:65;break;case 64:s=21;k=178;break;case 65:HEAP[l+
416+12]=HEAP[l+416+16];k=175;break;case 66:k=HEAP[l+80]!=0?67:175;break;case 67:Ia(l,n,HEAP[o],HEAP[P]);k=175;break;case 68:var rb=l;k=HEAP[l+368]!=0?69:70;break;case 69:H=HEAP[rb+368];HEAP[l+368]=HEAP[HEAP[l+368]];k=75;break;case 70:H=FUNCTION_TABLE[HEAP[rb+12]](48);k=H==0?71:72;break;case 71:s=1;k=178;break;case 72:k=FUNCTION_TABLE[HEAP[l+12]](32);HEAP[H+36]=k;k=HEAP[H+36]==0?73:74;break;case 73:FUNCTION_TABLE[HEAP[l+12+8]](H);s=1;k=178;break;case 74:HEAP[H+40]=HEAP[H+36]+32;k=75;break;case 75:HEAP[H+
44]=0;HEAP[H]=HEAP[l+364];HEAP[l+364]=H;HEAP[H+12+4]=0;HEAP[H+12+8]=0;HEAP[H+4]=HEAP[o]+HEAP[n+68];U=FUNCTION_TABLE[HEAP[n+32]](n,HEAP[H+4]);HEAP[H+8]=U;HEAP[l+312]+=1;U=HEAP[H+4]+HEAP[H+8];HEAP[X]=HEAP[H+4];HEAP[ga]=HEAP[H+36];k=76;break;case 76:FUNCTION_TABLE[HEAP[n+60]](n,X,U,ga,HEAP[H+40]+-1);F=HEAP[ga]-HEAP[H+36];var Z=H;k=HEAP[X]==U?77:78;break;case 77:HEAP[Z+12+12]=F;HEAP[H+12]=HEAP[H+36];HEAP[HEAP[ga]]=0;za=N(l,n,HEAP[o],H+12,H+44);k=za!=0?81:82;break;case 78:y=HEAP[Z+40]-HEAP[H+36]<<1;xa=
FUNCTION_TABLE[HEAP[l+12+4]](HEAP[H+36],y);k=xa==0?79:80;break;case 79:s=1;k=178;break;case 80:HEAP[H+36]=xa;HEAP[H+40]=xa+y;HEAP[ga]=xa+F;k=76;break;case 81:s=za;k=178;break;case 82:var M=l;k=HEAP[l+52]!=0?83:84;break;case 83:FUNCTION_TABLE[HEAP[M+52]](HEAP[l+4],HEAP[H+12],HEAP[l+392]);k=86;break;case 84:k=HEAP[M+80]!=0?85:86;break;case 85:Ia(l,n,HEAP[o],HEAP[P]);k=86;break;case 86:Ra(l+416);k=175;break;case 87:k=HEAP[o]+HEAP[n+68];HEAP[K]=0;Q=1;I=FUNCTION_TABLE[HEAP[n+32]](n,k);k=ua(l+416,n,k,k+
I);HEAP[cb]=k;k=k==0?88:89;break;case 88:s=1;k=178;break;case 89:HEAP[l+416+16]=HEAP[l+416+12];S=N(l,n,HEAP[o],va,K);k=S!=0?90:91;break;case 90:s=S;k=178;break;case 91:HEAP[l+416+16]=HEAP[l+416+12];k=HEAP[l+52]!=0?92:93;break;case 92:FUNCTION_TABLE[HEAP[l+52]](HEAP[l+4],HEAP[oa],HEAP[l+392]);Q=0;k=93;break;case 93:k=HEAP[l+56]!=0?94:97;break;case 94:k=HEAP[l+52]!=0?95:96;break;case 95:HEAP[t]=HEAP[B];k=96;break;case 96:FUNCTION_TABLE[HEAP[l+56]](HEAP[l+4],HEAP[G]);Q=0;k=100;break;case 97:k=Q!=0?98:
100;break;case 98:k=HEAP[l+80]!=0?99:100;break;case 99:Ia(l,n,HEAP[o],HEAP[P]);k=100;break;case 100:Ra(l+416);k=HEAP[K]!=0?101:104;break;case 101:z=HEAP[K];k=HEAP[l+104]!=0?102:103;break;case 102:FUNCTION_TABLE[HEAP[l+104]](HEAP[l+4],HEAP[HEAP[z]]);k=103;break;case 103:HEAP[K]=HEAP[HEAP[K]+4];HEAP[z+4]=HEAP[l+376];HEAP[l+376]=z;HEAP[HEAP[z]+4]=HEAP[z+8];k=HEAP[K]!=0?101:104;break;case 104:k=HEAP[l+312]==0?105:175;break;case 105:s=Ua(l,HEAP[P],p,q);k=178;break;case 106:k=HEAP[l+312]==m?107:108;break;
case 107:s=13;k=178;break;case 108:Aa=HEAP[l+364];HEAP[l+364]=HEAP[Aa];HEAP[Aa]=HEAP[l+368];HEAP[l+368]=Aa;qb=HEAP[o]+HEAP[n+68]*2;W=FUNCTION_TABLE[HEAP[n+32]](n,qb);k=HEAP[Aa+8]!=W?110:109;break;case 109:k=_memcmp(HEAP[Aa+4],qb,W)!=0?110:111;break;case 110:HEAP[t]=qb;s=7;k=178;break;case 111:HEAP[l+312]-=1;k=HEAP[l+56]!=0?112:122;break;case 112:db=HEAP[Aa+12+4];k=HEAP[l+236]!=0?113:121;break;case 113:k=db!=0?114:121;break;case 114:na=HEAP[Aa+12]+HEAP[Aa+12+16];k=HEAP[db]!=0?115:116;break;case 115:HEAP[na]=
HEAP[db];na+=1;db+=1;k=HEAP[db]!=0?115:116;break;case 116:C=HEAP[Aa+12+8];k=HEAP[l+237]!=0?117:120;break;case 117:k=C!=0?118:120;break;case 118:HEAP[na]=HEAP[l+472];na+=1;k=HEAP[C]!=0?119:120;break;case 119:HEAP[na]=HEAP[C];na+=1;C+=1;k=HEAP[C]!=0?119:120;break;case 120:HEAP[na]=0;k=121;break;case 121:FUNCTION_TABLE[HEAP[l+56]](HEAP[l+4],HEAP[Aa+12]);k=124;break;case 122:k=HEAP[l+80]!=0?123:124;break;case 123:Ia(l,n,HEAP[o],HEAP[P]);k=124;break;case 124:k=HEAP[Aa+44]!=0?125:128;break;case 125:Oa=
HEAP[Aa+44];k=HEAP[l+104]!=0?126:127;break;case 126:FUNCTION_TABLE[HEAP[l+104]](HEAP[l+4],HEAP[HEAP[Oa]]);k=127;break;case 127:HEAP[Aa+44]=HEAP[HEAP[Aa+44]+4];HEAP[Oa+4]=HEAP[l+376];HEAP[l+376]=Oa;HEAP[HEAP[Oa]+4]=HEAP[Oa+8];k=HEAP[Aa+44]!=0?125:128;break;case 128:k=HEAP[l+312]==0?129:175;break;case 129:s=Ua(l,HEAP[P],p,q);k=178;break;case 130:Sa=FUNCTION_TABLE[HEAP[n+44]](n,HEAP[o]);k=Sa<0?131:132;break;case 131:s=14;k=178;break;case 132:var Cb=l;k=HEAP[l+60]!=0?133:134;break;case 133:k=HEAP[Cb+
60];I=Gb(Sa,Ma);FUNCTION_TABLE[k](HEAP[l+4],ab,I);k=175;break;case 134:k=HEAP[Cb+80]!=0?135:175;break;case 135:Ia(l,n,HEAP[o],HEAP[P]);k=175;break;case 136:s=17;k=178;break;case 137:k=HEAP[l+60]!=0?138:139;break;case 138:HEAP[Ae]=10;FUNCTION_TABLE[HEAP[l+60]](HEAP[l+4],Ae,1);k=175;break;case 139:k=HEAP[l+80]!=0?140:175;break;case 140:Ia(l,n,HEAP[o],HEAP[P]);k=175;break;case 141:var Ne=l;k=HEAP[l+72]!=0?142:143;break;case 142:FUNCTION_TABLE[HEAP[Ne+72]](HEAP[l+4]);k=145;break;case 143:k=HEAP[Ne+80]!=
0?144:145;break;case 144:Ia(l,n,HEAP[o],HEAP[P]);k=145;break;case 145:Qd=k=ba(l,n,P,p,q,r&255);k=k!=0?146:147;break;case 146:s=Qd;k=178;break;case 147:k=HEAP[P]==0?148:175;break;case 148:HEAP[l+280]=g+62;s=Qd;k=178;break;case 149:k=r!=0?150:151;break;case 150:HEAP[q]=HEAP[o];s=0;k=178;break;case 151:k=HEAP[l+60]!=0?152:155;break;case 152:var V=l;k=HEAP[n+72]==0?153:154;break;case 153:HEAP[$]=HEAP[V+44];FUNCTION_TABLE[HEAP[n+60]](n,o,p,$,HEAP[l+48]);FUNCTION_TABLE[HEAP[l+60]](HEAP[l+4],HEAP[l+44],
HEAP[$]-HEAP[l+44]);k=157;break;case 154:FUNCTION_TABLE[HEAP[V+60]](HEAP[l+4],HEAP[o],p-HEAP[o]);k=157;break;case 155:k=HEAP[l+80]!=0?156:157;break;case 156:Ia(l,n,HEAP[o],p);k=157;break;case 157:k=m==0?158:159;break;case 158:HEAP[t]=p;s=3;k=178;break;case 159:k=HEAP[l+312]!=m?160:161;break;case 160:HEAP[t]=p;s=13;k=178;break;case 161:HEAP[q]=p;s=0;k=178;break;case 162:k=HEAP[l+60]!=0?163:167;break;case 163:k=HEAP[n+72]==0?164:166;break;case 164:HEAP[ca]=HEAP[l+44];FUNCTION_TABLE[HEAP[n+60]](n,o,
HEAP[P],ca,HEAP[l+48]);HEAP[B]=HEAP[o];FUNCTION_TABLE[HEAP[l+60]](HEAP[l+4],HEAP[l+44],HEAP[ca]-HEAP[l+44]);k=HEAP[o]==HEAP[P]?175:165;break;case 165:HEAP[t]=HEAP[o];k=164;break;case 166:FUNCTION_TABLE[HEAP[l+60]](HEAP[l+4],HEAP[o],HEAP[P]-HEAP[o]);k=175;break;case 167:k=HEAP[l+80]!=0?168:175;break;case 168:Ia(l,n,HEAP[o],HEAP[P]);k=175;break;case 169:k=ta(l,n,HEAP[o],HEAP[P])==0?170:175;break;case 170:s=1;k=178;break;case 171:k=Va(l,n,HEAP[o],HEAP[P])==0?172:175;break;case 172:s=1;k=178;break;case 173:k=
HEAP[l+80]!=0?174:175;break;case 174:Ia(l,n,HEAP[o],HEAP[P]);k=175;break;case 175:HEAP[o]=HEAP[P];HEAP[t]=HEAP[o];k=HEAP[l+480];k=k==2?177:k==3?176:4;break;case 176:HEAP[q]=HEAP[P];s=0;k=178;break;case 177:s=35;k=178;break;case 178:return a=s,STACKTOP=j,a;default:assert(0,"bad label: "+k)}}function N(a,b,c,d,e){var pd;var f;for(f=-1;;)switch(f){case -1:var g,h,j,k,l,m,n,o,p,q,r,s,u,t,B,P,v,O,ea,w,T,x,za,ga,U,X,y,F,N,xa,S,K,Q,Aa,va,z,W,qb,db,C,I,na,Oa;g=a;h=b;j=c;k=d;l=e;n=HEAP[g+356];P=r=0;o=ka(n+
20,HEAP[k],0);f=o==0?1:8;break;case 1:ea=ja(n+80,HEAP[k]);f=ea==0?2:3;break;case 2:m=1;f=144;break;case 3:o=ka(n+20,ea,24);f=o==0?4:5;break;case 4:m=1;f=144;break;case 5:f=HEAP[g+236]!=0?6:8;break;case 6:f=ia(g,o)==0?7:8;break;case 7:m=1;f=144;break;case 8:p=HEAP[o+12];t=FUNCTION_TABLE[HEAP[h+40]](h,j,HEAP[g+380],HEAP[g+392]);f=p+t>HEAP[g+380]?9:13;break;case 9:w=HEAP[g+380];HEAP[g+380]=t+16+p;T=FUNCTION_TABLE[HEAP[g+12+4]](HEAP[g+392],HEAP[g+380]*16);f=T==0?10:11;break;case 10:m=1;f=144;break;case 11:HEAP[g+
392]=T;f=t>w?12:13;break;case 12:FUNCTION_TABLE[HEAP[h+40]](h,j,t,HEAP[g+392]);f=13;break;case 13:q=HEAP[g+392];u=0;f=41;break;case 14:x=HEAP[HEAP[Ae+392]+16*u];f=FUNCTION_TABLE[HEAP[h+32]](h,HEAP[HEAP[g+392]+16*u]);x=Ba(g,h,HEAP[HEAP[g+392]+16*u],x+f);f=x==0?15:16;break;case 15:m=1;f=144;break;case 16:f=HEAP[HEAP[x]+-1]!=0?17:20;break;case 17:f=HEAP[g+144]==h?18:19;break;case 18:HEAP[g+288]=HEAP[HEAP[g+392]+16*u];f=19;break;case 19:m=8;f=144;break;case 20:HEAP[HEAP[x]+-1]=1;HEAP[q+4*r]=HEAP[x];r+=
1;f=HEAP[HEAP[g+392]+16*u+12]==0?21:30;break;case 21:ga=1;f=HEAP[x+8]!=0?22:27;break;case 22:U=0;f=26;break;case 23:f=HEAP[HEAP[o+20]+12*U]==x?24:25;break;case 24:ga=HEAP[HEAP[o+20]+12*U+4];f=27;break;case 25:U+=1;f=26;break;case 26:f=U<p?23:27;break;case 27:za=f=Pa(g,h,ga&255,HEAP[HEAP[g+392]+16*u+4],HEAP[HEAP[g+392]+16*u+8],g+416);f=f!=0?28:29;break;case 28:m=za;f=144;break;case 29:HEAP[q+4*r]=HEAP[g+416+16];HEAP[g+416+16]=HEAP[g+416+12];f=33;break;case 30:f=ua(g+416,h,HEAP[HEAP[g+392]+16*u+4],
HEAP[HEAP[g+392]+16*u+8]);HEAP[q+4*r]=f;f=HEAP[q+4*r]==0?31:32;break;case 31:m=1;f=144;break;case 32:HEAP[g+416+16]=HEAP[g+416+12];f=33;break;case 33:f=HEAP[x+4]!=0?34:39;break;case 34:f=HEAP[x+9]!=0?35:38;break;case 35:X=H(g,HEAP[x+4],x,HEAP[q+4*r],l);f=X!=0?36:37;break;case 36:m=X;f=144;break;case 37:r-=1;f=40;break;case 38:r+=1;P+=1;HEAP[HEAP[x]+-1]=2;f=40;break;case 39:r+=1;f=40;break;case 40:u+=1;f=41;break;case 41:var Ae=g;f=u<t?14:42;break;case 42:HEAP[Ae+384]=r;f=HEAP[o+8]==0?49:43;break;
case 43:f=HEAP[HEAP[HEAP[o+8]]+-1]==0?49:44;break;case 44:u=0;f=48;break;case 45:f=HEAP[q+4*u]==HEAP[HEAP[o+8]]?46:47;break;case 46:HEAP[g+388]=u;f=50;break;case 47:u+=2;f=48;break;case 48:f=u<r?45:50;break;case 49:HEAP[g+388]=-1;f=50;break;case 50:u=0;f=60;break;case 51:y=HEAP[o+20]+12*u;f=HEAP[HEAP[HEAP[y]]+-1]==0?52:59;break;case 52:f=HEAP[y+8]!=0?53:59;break;case 53:var Qd=HEAP[y];f=HEAP[HEAP[y]+4]!=0?54:58;break;case 54:var Sa=y;f=HEAP[Qd+9]!=0?55:57;break;case 55:F=H(g,HEAP[HEAP[y]+4],HEAP[y],
HEAP[Sa+8],l);f=F!=0?56:59;break;case 56:m=F;f=144;break;case 57:HEAP[HEAP[HEAP[Sa]]+-1]=2;P+=1;HEAP[q+4*r]=HEAP[HEAP[y]];r+=1;HEAP[q+4*r]=HEAP[y+8];r+=1;f=59;break;case 58:HEAP[HEAP[Qd]+-1]=1;HEAP[q+4*r]=HEAP[HEAP[y]];r+=1;HEAP[q+4*r]=HEAP[y+8];r+=1;f=59;break;case 59:u+=1;f=60;break;case 60:f=u<p?51:61;break;case 61:u=HEAP[q+4*r]=0;f=P!=0?62:114;break;case 62:xa=HEAP[g+400];S=1<<HEAP[g+404];f=P<<1>>HEAP[g+404]!=0?63:69;break;case 63:f=P>>HEAP[g+404]!=0;HEAP[g+404]+=1;f=f!=0?63:64;break;case 64:f=
HEAP[g+404]<=2?65:66;break;case 65:HEAP[g+404]=3;f=66;break;case 66:S=1<<HEAP[g+404];K=f=FUNCTION_TABLE[HEAP[g+12+4]](HEAP[g+396],S*12);f=f==0?67:68;break;case 67:m=1;f=144;break;case 68:HEAP[g+396]=K;xa=0;f=70;break;case 69:f=xa==0?70:72;break;case 70:xa=-1;N=S;f=S!=0?71:72;break;case 71:f=HEAP[g+396];N-=1;HEAP[f+12*N]=xa;f=N!=0?71:72;break;case 72:xa-=1;HEAP[g+400]=xa;f=113;break;case 73:Q=HEAP[q+4*u];f=HEAP[Q+-1]==2?74:111;break;case 74:z=0;HEAP[Q+-1]=0;Aa=ka(n+40,Q,0);f=Aa==0?75:76;break;case 75:m=
1;f=144;break;case 76:va=HEAP[HEAP[Aa+4]+4];f=va==0?77:78;break;case 77:m=27;f=144;break;case 78:N=0;f=83;break;case 79:W=HEAP[HEAP[va+16]+N];f=HEAP[g+416+12]!=HEAP[g+416+8]?82:80;break;case 80:f=bb(g+416)!=0?82:81;break;case 81:m=1;f=144;break;case 82:f=HEAP[g+416+12];HEAP[f]=W;HEAP[g+416+12]=f+1;z=W^z*1000003;N+=1;f=83;break;case 83:f=HEAP[va+20]>N?79:84;break;case 84:f=HEAP[Q]!=58;Q+=1;f=f!=0?84:85;break;case 85:qb=HEAP[Q];f=HEAP[g+416+12]!=HEAP[g+416+8]?88:86;break;case 86:f=bb(g+416)!=0?88:87;
break;case 87:m=1;f=144;break;case 88:f=HEAP[g+416+12];HEAP[f]=HEAP[Q];HEAP[g+416+12]=f+1;z=qb^z*1000003;f=HEAP[Q]!=0;Q+=1;f=f!=0?85:89;break;case 89:db=0;C=S-1;N=C&z;f=102;break;case 90:f=HEAP[HEAP[$+396]+12*N+4]==z?91:97;break;case 91:I=HEAP[g+416+16];na=HEAP[HEAP[g+396]+12*N+8];f=93;break;case 92:I+=1;na+=1;f=93;break;case 93:f=HEAP[I]!=HEAP[na]?95:94;break;case 94:f=HEAP[I]!=0?92:95;break;case 95:f=HEAP[I]==0?96:97;break;case 96:m=8;f=144;break;case 97:f=db==0?98:99;break;case 98:db=(z&(C^-1))>>>
HEAP[g+404]-1&255&C>>>2&255|1;f=99;break;case 99:var E=db;f=db>N?100:101;break;case 100:N=S+(0-E)+N;f=102;break;case 101:N-=E;f=102;break;case 102:var $=g;f=HEAP[HEAP[g+396]+12*N]==xa?90:103;break;case 103:f=HEAP[$+237]!=0?104:109;break;case 104:HEAP[HEAP[g+416+12]+-1]=HEAP[g+472];Q=HEAP[HEAP[va]];f=105;break;case 105:f=HEAP[g+416+12]!=HEAP[g+416+8]?108:106;break;case 106:f=bb(g+416)!=0?108:107;break;case 107:m=1;f=144;break;case 108:f=HEAP[g+416+12];HEAP[f]=HEAP[Q];HEAP[g+416+12]=f+1;f=HEAP[Q]!=
0;Q+=1;f=f!=0?105:109;break;case 109:Q=HEAP[g+416+16];HEAP[g+416+16]=HEAP[g+416+12];HEAP[q+4*u]=Q;HEAP[HEAP[g+396]+12*N]=xa;HEAP[HEAP[g+396]+12*N+4]=z;HEAP[HEAP[g+396]+12*N+8]=Q;P=f=P-1;f=f==0?110:112;break;case 110:u+=2;f=114;break;case 111:HEAP[Q+-1]=0;f=112;break;case 112:u+=2;f=113;break;case 113:f=u<r?73:114;break;case 114:f=u<r?115:116;break;case 115:HEAP[HEAP[q+4*u]+-1]=0;u+=2;f=u<r?115:116;break;case 116:v=HEAP[l];f=HEAP[l]!=0?117:118;break;case 117:HEAP[HEAP[HEAP[v+12]]+-1]=0;v=f=HEAP[v+
4];f=f!=0?117:118;break;case 118:f=HEAP[g+236]==0?119:120;break;case 119:m=0;f=144;break;case 120:f=HEAP[o+4]!=0?121:125;break;case 121:v=HEAP[HEAP[o+4]+4];f=v==0?122:123;break;case 122:m=27;f=144;break;case 123:O=HEAP[k];f=124;break;case 124:f=HEAP[O]!=58;O+=1;f=f!=0?124:128;break;case 125:f=HEAP[n+152+4]!=0?126:127;break;case 126:v=HEAP[n+152+4];O=HEAP[k];f=128;break;case 127:m=0;f=144;break;case 128:s=0;f=HEAP[g+237]!=0?129:131;break;case 129:f=HEAP[HEAP[v]]!=0?130:131;break;case 130:f=HEAP[HEAP[HEAP[v]]+
s]!=0;s+=1;f=f!=0?130:131;break;case 131:HEAP[k+4]=O;HEAP[k+16]=HEAP[v+20];HEAP[k+8]=HEAP[HEAP[v]];HEAP[k+20]=s;u=0;f=132;break;case 132:f=HEAP[O+u]!=0;u+=1;f=f!=0?132:133;break;case 133:t=u+HEAP[v+20]+s;f=HEAP[v+24]<t?134:141;break;case 134:B=FUNCTION_TABLE[HEAP[g+12]](t+24);f=B==0?135:136;break;case 135:m=1;f=144;break;case 136:HEAP[v+24]=t+24;_llvm_memcpy_p0i8_p0i8_i32(B,HEAP[v+16],HEAP[v+20],1,0);Oa=HEAP[g+364];f=HEAP[g+364]!=0?137:140;break;case 137:f=HEAP[Oa+12]==HEAP[v+16]?138:139;break;case 138:HEAP[Oa+
12]=B;f=139;break;case 139:pd=f=HEAP[Oa],Oa=pd;f=f!=0?137:140;break;case 140:FUNCTION_TABLE[HEAP[g+12+8]](HEAP[v+16]);HEAP[v+16]=B;f=141;break;case 141:B=HEAP[v+16]+HEAP[v+20];_llvm_memcpy_p0i8_p0i8_i32(B,O,u,1,0);f=s!=0?142:143;break;case 142:B+=u-1;HEAP[B]=HEAP[g+472];_llvm_memcpy_p0i8_p0i8_i32(B+1,HEAP[HEAP[v]],s,1,0);f=143;break;case 143:HEAP[k]=HEAP[v+16];m=0;f=144;break;case 144:return a=m;default:assert(0,"bad label: "+f)}}function H(a,b,c,d,e){var f,g=null;for(f=-1;;)switch(f){case -1:var h,
j,k,l,m,n,o,p,q,r,s,u,t,B,P,v;h=a;j=b;k=c;l=d;m=e;s=0;t=u=1;f=HEAP[l]==0?1:3;break;case 1:f=HEAP[j]!=0?2:3;break;case 2:r=28;f=65;break;case 3:f=HEAP[j]!=0?4:13;break;case 4:f=HEAP[HEAP[j]]==120?5:13;break;case 5:f=HEAP[HEAP[j]+1]==109?6:13;break;case 6:f=HEAP[HEAP[j]+2]==108?7:13;break;case 7:f=HEAP[HEAP[j]+3]==110?8:11;break;case 8:f=HEAP[HEAP[j]+4]==115?9:11;break;case 9:f=HEAP[HEAP[j]+5]==0?10:11;break;case 10:r=39;f=65;break;case 11:f=HEAP[HEAP[j]+3]==0?12:13;break;case 12:s=1;f=13;break;case 13:P=
0;var O=u;HEAP[l+P]!=0?(g=13,f=14):(g=13,f=24);break;case 14:f=(g==23?ea:O)!=0?15:18;break;case 15:f=P>36?17:16;break;case 16:f=HEAP[l+P]!=HEAP[kh+P]?17:18;break;case 17:u=0;f=18;break;case 18:f=s==0?19:23;break;case 19:f=t!=0?20:23;break;case 20:f=P>29?22:21;break;case 21:f=HEAP[l+P]!=HEAP[lh+P]?22:23;break;case 22:t=0;f=23;break;case 23:P+=1;var ea=u;HEAP[l+P]!=0?(g=23,f=14):(g=23,f=24);break;case 24:f=(g==13?O:ea)==0?27:25;break;case 25:f=P!=36?27:26;break;case 26:q=1;f=28;break;case 27:q=0;f=
28;break;case 28:u=q&255;f=t==0?31:29;break;case 29:f=P!=29?31:30;break;case 30:p=1;f=32;break;case 31:p=0;f=32;break;case 32:t=p&255;f=s!=u?33:37;break;case 33:f=s!=0?34:35;break;case 34:o=38;f=36;break;case 35:o=40;f=36;break;case 36:r=o;f=65;break;case 37:f=t!=0?38:39;break;case 38:r=40;f=65;break;case 39:f=HEAP[h+472]!=0?40:41;break;case 40:P+=1;f=41;break;case 41:var w=h;f=HEAP[h+376]!=0?42:47;break;case 42:B=HEAP[w+376];f=HEAP[B+24]<P?43:46;break;case 43:v=FUNCTION_TABLE[HEAP[h+12+4]](HEAP[B+
16],P+24);f=v==0?44:45;break;case 44:r=1;f=65;break;case 45:HEAP[B+16]=v;HEAP[B+24]=P+24;f=46;break;case 46:HEAP[h+376]=HEAP[B+4];f=52;break;case 47:B=FUNCTION_TABLE[HEAP[w+12]](28);f=B==0?48:49;break;case 48:r=1;f=65;break;case 49:f=FUNCTION_TABLE[HEAP[h+12]](P+24);HEAP[B+16]=f;f=HEAP[B+16]==0?50:51;break;case 50:FUNCTION_TABLE[HEAP[h+12+8]](B);r=1;f=65;break;case 51:HEAP[B+24]=P+24;f=52;break;case 52:HEAP[B+20]=P;_llvm_memcpy_p0i8_p0i8_i32(HEAP[B+16],l,P,1,0);f=HEAP[h+472]!=0?53:54;break;case 53:HEAP[HEAP[B+
16]+(P-1)]=HEAP[h+472];f=54;break;case 54:HEAP[B]=j;HEAP[B+12]=k;HEAP[B+8]=HEAP[j+4];f=HEAP[l]!=0?57:55;break;case 55:f=HEAP[h+356]+152!=j?57:56;break;case 56:HEAP[j+4]=0;f=58;break;case 57:HEAP[j+4]=B;f=58;break;case 58:HEAP[B+4]=HEAP[m];HEAP[m]=B;f=k!=0?59:64;break;case 59:f=HEAP[h+100]!=0?60:64;break;case 60:var T=HEAP[h+100];f=HEAP[j+4]!=0?61:62;break;case 61:n=l;f=63;break;case 62:n=0;f=63;break;case 63:FUNCTION_TABLE[T](HEAP[h+4],HEAP[j],n);f=64;break;case 64:r=0;f=65;break;case 65:return a=
r;default:assert(0,"bad label: "+f)}}function ba(a,b,c,d,e,f){var g=STACKTOP;STACKTOP+=13;_memset(g,0,13);var h;for(h=-1;;)switch(h){case -1:var j,k,l,m,n,o,p,q=g,r,s,u=g+4,t=g+8,B=g+9;j=a;k=b;l=c;m=d;n=e;o=f;HEAP[q]=HEAP[l];var P=j;h=HEAP[j+144]==k?1:2;break;case 1:r=P+288;HEAP[r]=HEAP[q];s=j+292;h=3;break;case 2:r=HEAP[P+300];s=HEAP[j+300]+4;h=3;break;case 3:HEAP[r]=HEAP[q];HEAP[l]=0;h=4;break;case 4:h=FUNCTION_TABLE[HEAP[k+8]](k,HEAP[q],m,u);HEAP[s]=HEAP[u];h=h==-4?27:h==-2?24:h==-1?27:h==0?23:
h==6?16:h==7?12:h==40?5:30;break;case 5:var v=j;h=HEAP[j+76]!=0?6:7;break;case 6:FUNCTION_TABLE[HEAP[v+76]](HEAP[j+4]);h=9;break;case 7:h=HEAP[v+80]!=0?8:9;break;case 8:Ia(j,k,HEAP[q],HEAP[u]);h=9;break;case 9:HEAP[l]=HEAP[u];HEAP[n]=HEAP[u];h=HEAP[j+480]==2?10:11;break;case 10:p=35;h=34;break;case 11:p=0;h=34;break;case 12:h=HEAP[j+60]!=0?13:14;break;case 13:HEAP[t]=10;FUNCTION_TABLE[HEAP[j+60]](HEAP[j+4],t,1);h=31;break;case 14:h=HEAP[j+80]!=0?15:31;break;case 15:Ia(j,k,HEAP[q],HEAP[u]);h=31;break;
case 16:h=HEAP[j+60]!=0?17:21;break;case 17:h=HEAP[k+72]==0?18:20;break;case 18:HEAP[B]=HEAP[j+44];FUNCTION_TABLE[HEAP[k+60]](k,q,HEAP[u],B,HEAP[j+48]);HEAP[s]=HEAP[u];FUNCTION_TABLE[HEAP[j+60]](HEAP[j+4],HEAP[j+44],HEAP[B]-HEAP[j+44]);h=HEAP[q]==HEAP[u]?31:19;break;case 19:HEAP[r]=HEAP[q];h=18;break;case 20:FUNCTION_TABLE[HEAP[j+60]](HEAP[j+4],HEAP[q],HEAP[u]-HEAP[q]);h=31;break;case 21:h=HEAP[j+80]!=0?22:31;break;case 22:Ia(j,k,HEAP[q],HEAP[u]);h=31;break;case 23:HEAP[r]=HEAP[u];p=4;h=34;break;
case 24:h=o!=0?25:26;break;case 25:HEAP[n]=HEAP[q];p=0;h=34;break;case 26:p=6;h=34;break;case 27:h=o!=0?28:29;break;case 28:HEAP[n]=HEAP[q];p=0;h=34;break;case 29:p=20;h=34;break;case 30:HEAP[r]=HEAP[u];p=23;h=34;break;case 31:HEAP[q]=HEAP[u];HEAP[r]=HEAP[q];h=HEAP[j+480];h=h==2?33:h==3?32:4;break;case 32:HEAP[n]=HEAP[u];p=0;h=34;break;case 33:p=35;h=34;break;case 34:return a=p,STACKTOP=g,a;default:assert(0,"bad label: "+h)}}function W(a,b,c,d,e,f){var g=STACKTOP;STACKTOP+=4;_memset(g,0,4);var h;
for(h=-1;;)switch(h){case -1:var j,k,l,m,n,o,p,q=g,r,s,u;j=a;k=b;l=c;m=d;n=e;o=f;r=HEAP[l];var t=j;h=HEAP[j+144]==k?1:2;break;case 1:s=t+288;HEAP[s]=r;u=j+292;h=3;break;case 2:s=HEAP[t+300];u=HEAP[j+300]+4;h=3;break;case 3:HEAP[s]=r;HEAP[l]=0;h=FUNCTION_TABLE[HEAP[k+12]](k,r,m,q);HEAP[u]=HEAP[q];h=h==-4?13:h==-2?10:h==-1?13:h==0?9:h==42?4:16;break;case 4:h=HEAP[j+80]!=0?5:6;break;case 5:Ia(j,k,r,HEAP[q]);h=6;break;case 6:HEAP[l]=HEAP[q];HEAP[n]=HEAP[q];h=HEAP[j+480]==2?7:8;break;case 7:p=35;h=17;
break;case 8:p=0;h=17;break;case 9:HEAP[s]=HEAP[q];p=4;h=17;break;case 10:h=o!=0?11:12;break;case 11:HEAP[n]=r;p=0;h=17;break;case 12:p=6;h=17;break;case 13:h=o!=0?14:15;break;case 14:HEAP[n]=r;p=0;h=17;break;case 15:p=2;h=17;break;case 16:HEAP[s]=HEAP[q];p=23;h=17;break;case 17:return a=p,STACKTOP=g,a;default:assert(0,"bad label: "+h)}}function B(a){var b;for(b=-1;;)switch(b){case -1:var c,d,e,f;c=a;f=HEAP[c+232];b=HEAP[c+236]!=0?1:2;break;case 1:e=g+68;b=3;break;case 2:e=g+70;b=3;break;case 3:b=
FUNCTION_TABLE[e](c+148,c+144,f)!=0?4:5;break;case 4:d=0;b=6;break;case 5:d=fa(c,HEAP[c+232]);b=6;break;case 6:return a=d;default:assert(0,"bad label: "+b)}}function Y(a,b,c,d){var e=STACKTOP;STACKTOP+=20;_memset(e,0,20);var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n,o=e,p,q=e+4,r=e+8,s=e+12,u,t=e+16,B;h=a;j=b;k=c;l=d;p=HEAP[o]=0;HEAP[q]=0;u=HEAP[r]=0;HEAP[t]=-1;f=HEAP[h+236]!=0?1:2;break;case 1:n=g+72;f=3;break;case 2:n=g+74;f=3;break;case 3:f=FUNCTION_TABLE[n](j,HEAP[h+144],k,l,h+288,r,s,o,
q,t);var P=j;f=f==0?4:7;break;case 4:f=P!=0?5:6;break;case 5:m=31;f=38;break;case 6:m=30;f=38;break;case 7:f=P==0?8:11;break;case 8:f=HEAP[t]==1?9:11;break;case 9:HEAP[HEAP[h+356]+130]=1;f=HEAP[h+492]==1?10:11;break;case 10:HEAP[h+492]=0;f=11;break;case 11:f=HEAP[h+140]!=0?12:20;break;case 12:f=HEAP[o]!=0?13:16;break;case 13:p=HEAP[o];f=FUNCTION_TABLE[HEAP[HEAP[h+144]+32]](HEAP[h+144],HEAP[o]);p=ua(h+440,HEAP[h+144],HEAP[o],p+f);f=p==0?14:15;break;case 14:m=1;f=38;break;case 15:HEAP[h+440+16]=HEAP[h+
440+12];f=16;break;case 16:f=HEAP[r]!=0?17:19;break;case 17:u=ua(h+440,HEAP[h+144],HEAP[r],HEAP[s]+(0-HEAP[HEAP[h+144]+68]));f=u==0?18:19;break;case 18:m=1;f=38;break;case 19:FUNCTION_TABLE[HEAP[h+140]](HEAP[h+4],u,p,HEAP[t]);f=22;break;case 20:f=HEAP[h+80]!=0?21:22;break;case 21:Ia(h,HEAP[h+144],k,l);f=22;break;case 22:f=HEAP[h+232]==0?23:34;break;case 23:f=HEAP[q]!=0?24:27;break;case 24:f=HEAP[HEAP[q]+68]!=HEAP[HEAP[h+144]+68]?25:26;break;case 25:HEAP[h+288]=HEAP[o];m=19;f=38;break;case 26:HEAP[h+
144]=HEAP[q];f=34;break;case 27:f=HEAP[o]!=0?28:34;break;case 28:f=p==0?29:31;break;case 29:p=HEAP[o];f=FUNCTION_TABLE[HEAP[HEAP[h+144]+32]](HEAP[h+144],HEAP[o]);p=ua(h+440,HEAP[h+144],HEAP[o],p+f);f=p==0?30:31;break;case 30:m=1;f=38;break;case 31:B=fa(h,p);Ra(h+440);f=B==18?32:33;break;case 32:HEAP[h+288]=HEAP[o];f=33;break;case 33:m=B;f=38;break;case 34:f=p!=0?36:35;break;case 35:f=u!=0?36:37;break;case 36:Ra(h+440);f=37;break;case 37:m=0;f=38;break;case 38:return a=m,STACKTOP=e,a;default:assert(0,
"bad label: "+f)}}function fa(a,b){var c=STACKTOP;STACKTOP+=1036;_memset(c,0,1036);var d;for(d=-1;;)switch(d){case -1:var e,f,h,j,k=c,l,m;e=a;f=b;d=HEAP[e+124]!=0?1:15;break;case 1:l=0;var n=k;d=2;break;case 2:HEAP[n+l*4]=-1;l=d=l+1;d=d<=255?2:3;break;case 3:HEAP[k+1028]=0;HEAP[k+1024]=0;HEAP[k+1032]=0;d=FUNCTION_TABLE[HEAP[e+124]](HEAP[e+248],f,k)!=0?4:13;break;case 4:d=HEAP[e+12];var o=void 0,o=1912;d=FUNCTION_TABLE[d](o);HEAP[e+240]=d;d=HEAP[e+240]==0?5:8;break;case 5:d=HEAP[k+1032]!=0?6:7;break;
case 6:FUNCTION_TABLE[HEAP[k+1032]](HEAP[k+1024]);d=7;break;case 7:j=1;d=16;break;case 8:d=HEAP[e+236]!=0?9:10;break;case 9:h=g+76;d=11;break;case 10:h=g+78;d=11;break;case 11:m=d=FUNCTION_TABLE[h](HEAP[e+240],k,HEAP[k+1028],HEAP[k+1024]);d=d!=0?12:13;break;case 12:HEAP[e+244]=HEAP[k+1024];HEAP[e+252]=HEAP[k+1032];HEAP[e+144]=m;j=0;d=16;break;case 13:d=HEAP[k+1032]!=0?14:15;break;case 14:FUNCTION_TABLE[HEAP[k+1032]](HEAP[k+1024]);d=15;break;case 15:j=18;d=16;break;case 16:return e=j,STACKTOP=c,e;
default:assert(0,"bad label: "+d)}}function ha(a,b,c,d){var e=STACKTOP;STACKTOP+=4;_memset(e,0,4);var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n,o,p=e,q;h=a;j=b;k=c;l=d;o=j;HEAP[p]=o;HEAP[h+288]=o;f=1;break;case 1:n=FUNCTION_TABLE[HEAP[HEAP[h+144]]](HEAP[h+144],o,k,p);HEAP[h+292]=HEAP[p];f=n<=0?2:10;break;case 2:var r=n;f=HEAP[h+480+4]==0?3:5;break;case 3:f=r!=0?4:6;break;case 4:HEAP[l]=j;m=0;f=22;break;case 5:f=r==-2?8:r==-1?7:r==0?6:9;break;case 6:m=4;f=22;break;case 7:m=5;f=22;break;case 8:m=
6;f=22;break;case 9:m=Ya(h,HEAP[h+144],j,k);f=22;break;case 10:f=n==12?11:17;break;case 11:q=Y(h,0,o,HEAP[p]);f=q!=0?12:13;break;case 12:m=q;f=22;break;case 13:f=HEAP[h+480];f=f==2?15:f==3?14:16;break;case 14:HEAP[l]=HEAP[p];m=0;f=22;break;case 15:m=35;f=22;break;case 16:HEAP[l]=HEAP[p];HEAP[h+280]=g+84;m=ra(h,HEAP[p],k,l);f=22;break;case 17:f=n==14?18:21;break;case 18:f=HEAP[p]==k?19:21;break;case 19:f=HEAP[h+480+4]==0?20:21;break;case 20:HEAP[l]=HEAP[p];m=0;f=22;break;case 21:o=HEAP[p];HEAP[h+288]=
o;f=1;break;case 22:return a=m,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function la(a,b,c,d){var e=STACKTOP;STACKTOP+=4;_memset(e,0,4);var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n=e,o;h=a;j=b;k=c;l=d;HEAP[n]=j;o=FUNCTION_TABLE[HEAP[HEAP[h+144]]](HEAP[h+144],j,k,n);f=o<=0?1:8;break;case 1:var p=o;f=HEAP[h+480+4]==0?2:4;break;case 2:f=p!=0?3:5;break;case 3:HEAP[l]=j;m=0;f=11;break;case 4:f=p==-2?7:p==-1?6:p==0?5:10;break;case 5:m=4;f=11;break;case 6:m=5;f=11;break;case 7:m=6;f=11;break;
case 8:f=o==14?9:10;break;case 9:j=HEAP[n];o=FUNCTION_TABLE[HEAP[HEAP[h+144]]](HEAP[h+144],j,k,n);f=10;break;case 10:HEAP[h+280]=g+66;m=Da(h,HEAP[h+144],j,k,o,HEAP[n],l,HEAP[h+480+4]==0&255);f=11;break;case 11:return a=m,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function ra(a,b,c,d){var e=STACKTOP;STACKTOP+=4;_memset(e,0,4);var f,g=null;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n=e,o;h=a;j=b;k=c;l=d;f=j;HEAP[n]=j;o=HEAP[h+144];var p=FUNCTION_TABLE[HEAP[o]](o,f,k,n);p<=0?(g=-1,f=1):(g=-1,f=
9);break;case 1:var q=g==9?r:p;f=HEAP[h+480+4]==0?2:4;break;case 2:f=q!=0?3:5;break;case 3:HEAP[l]=j;m=0;f=10;break;case 4:f=q==-2?7:q==-1?6:q==0?5:8;break;case 5:m=4;f=10;break;case 6:m=5;f=10;break;case 7:m=6;f=10;break;case 8:m=Ya(h,o,j,k);f=10;break;case 9:f=HEAP[n];var r=FUNCTION_TABLE[HEAP[o]](o,f,k,n);r<=0?(g=9,f=1):f=g=9;break;case 10:return a=m,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function ya(a,b,c,d){var e=STACKTOP;STACKTOP+=4;_memset(e,0,4);HEAP[e]=b;var f=FUNCTION_TABLE[HEAP[HEAP[a+
144]]](HEAP[a+144],b,c,e),a=Da(a,HEAP[a+144],b,c,f,HEAP[e],d,HEAP[a+480+4]==0&255);STACKTOP=e;return a}function Da(a,b,c,d,e,f,h,j){var k=STACKTOP;STACKTOP+=4;_memset(k,0,4);var l;for(l=-1;;)switch(l){case -1:var m,n,o,p,q,r=k,s,u,t,B,v,O,ea,w,T,x,H,za,ga,U,X,y,N,xa,S,Q,K,z,va,Aa,qb,db,C,I,na,Oa,Sa,E,$,Ae,Qd,ca,A,cb,oa,J,G,Ma,ab;m=a;n=b;o=c;p=d;q=e;HEAP[r]=f;s=h;u=j;T=HEAP[m+356];var Pb=m;l=HEAP[m+144]==n?1:2;break;case 1:x=Pb+288;H=m+292;l=3;break;case 2:x=HEAP[Pb+300];H=HEAP[m+300]+4;l=3;break;
case 3:U=1;HEAP[x]=o;HEAP[H]=HEAP[r];l=q<=0?4:22;break;case 4:var Bc=q;l=u!=0?5:7;break;case 5:l=Bc!=0?6:8;break;case 6:HEAP[s]=o;w=0;l=380;break;case 7:l=Bc==-15?11:Bc==-4?12:Bc==-2?10:Bc==-1?9:Bc==0?8:21;break;case 8:HEAP[x]=HEAP[r];w=4;l=380;break;case 9:w=5;l=380;break;case 10:w=6;l=380;break;case 11:q=0-q;l=22;break;case 12:l=HEAP[m+144]!=n?13:15;break;case 13:l=HEAP[HEAP[m+300]+20]==0?14:15;break;case 14:HEAP[s]=o;w=0;l=380;break;case 15:l=HEAP[m+488]!=0?17:16;break;case 16:l=HEAP[m+144]!=n?
17:20;break;case 17:l=FUNCTION_TABLE[HEAP[m+256]](m+256,-4,p,p,n)==-1?18:19;break;case 18:w=29;l=380;break;case 19:HEAP[s]=o;w=0;l=380;break;case 20:w=3;l=380;break;case 21:q=0-q;HEAP[r]=p;l=22;break;case 22:ga=l=FUNCTION_TABLE[HEAP[m+256]](m+256,q,o,HEAP[r],n);l=l==-1?238:l==0?359:l==1?23:l==2?74:l==3?361:l==4?26:l==5?156:l==6?36:l==7?31:l==8?52:l==9?188:l==10?204:l==11?363:l==12?149:l==13?170:l==14?44:l==15?176:l==16?180:l==17?366:l==18?218:l==19?228:l==20?234:l==21?222:l==22?90:l==23?93:l==24?
94:l==25?95:l==26?96:l==27?97:l==28?98:l==29?99:l==30?100:l==31?104:l==32?104:l==33?368:l==34?88:l==35?117:l==36?117:l==37?132:l==38?132:l==39?371:l==40?308:l==41?312:l==42?312:l==43?321:l==44?248:l==45?340:l==46?342:l==47?341:l==48?343:l==49?268:l==50?263:l==51?324:l==52?326:l==53?325:l==54?327:l==55?353:l==56?356:l==57?33:l==58?242:l==59?276:l==60?276:373;break;case 23:X=Y(m,0,o,HEAP[r]);l=X!=0?24:25;break;case 24:w=X;l=380;break;case 25:n=HEAP[m+144];U=0;l=376;break;case 26:l=HEAP[m+84]!=0?27:
30;break;case 27:l=ua(m+416,n,o,HEAP[r]);HEAP[m+320]=l;l=HEAP[m+320]==0?28:29;break;case 28:w=1;l=380;break;case 29:HEAP[m+416+16]=HEAP[m+416+12];U=HEAP[m+328]=0;l=30;break;case 30:HEAP[m+324]=0;l=373;break;case 31:l=HEAP[m+84]!=0?32:373;break;case 32:FUNCTION_TABLE[HEAP[m+84]](HEAP[m+4],HEAP[m+320],HEAP[m+324],HEAP[m+328],1);HEAP[m+320]=0;Ra(m+416);U=0;l=376;break;case 33:y=Y(m,1,o,HEAP[r]);l=y!=0?34:35;break;case 34:w=y;l=380;break;case 35:n=HEAP[m+144];U=0;l=376;break;case 36:HEAP[m+489]=0;l=ka(T+
132,Uf,36);HEAP[m+316]=l;l=HEAP[m+316]==0?37:38;break;case 37:w=1;l=380;break;case 38:HEAP[T+129]=1;l=HEAP[m+84]!=0?39:44;break;case 39:l=FUNCTION_TABLE[HEAP[n+56]](n,o,HEAP[r],x)==0?40:41;break;case 40:w=32;l=380;break;case 41:l=ua(m+416,n,o+HEAP[n+68],HEAP[r]+(0-HEAP[n+68]));HEAP[m+328]=l;l=HEAP[m+328]==0?42:43;break;case 42:w=1;l=380;break;case 43:Ta(HEAP[m+328]);HEAP[m+416+16]=HEAP[m+416+12];U=0;l=46;break;case 44:l=FUNCTION_TABLE[HEAP[n+56]](n,o,HEAP[r],x)==0?45:46;break;case 45:w=32;l=380;break;
case 46:l=HEAP[T+128]!=0?47:373;break;case 47:l=HEAP[m+316]!=0?48:373;break;case 48:N=ua(T+80,n,o+HEAP[n+68],HEAP[r]+(0-HEAP[n+68]));l=N==0?49:50;break;case 49:w=1;l=380;break;case 50:Ta(N);HEAP[HEAP[m+316]+24]=N;HEAP[T+80+16]=HEAP[T+80+12];l=HEAP[m+136]!=0?51:373;break;case 51:U=0;l=376;break;case 52:l=HEAP[m+320]!=0?53:54;break;case 53:FUNCTION_TABLE[HEAP[m+84]](HEAP[m+4],HEAP[m+320],HEAP[m+324],HEAP[m+328],0);Ra(m+416);U=0;l=54;break;case 54:l=HEAP[m+324]!=0?56:55;break;case 55:l=HEAP[m+489]!=
0?56:72;break;case 56:xa=HEAP[T+129];HEAP[T+129]=1;l=HEAP[m+492]!=0?57:71;break;case 57:l=HEAP[m+112]!=0?58:71;break;case 58:S=ka(T+132,Uf,36);l=S==0?59:60;break;case 59:w=1;l=380;break;case 60:l=HEAP[m+489]!=0?61:62;break;case 61:HEAP[S+20]=HEAP[m+360];l=62;break;case 62:HEAP[T+131]=0;l=FUNCTION_TABLE[HEAP[m+112]](HEAP[m+116],0,HEAP[S+20],HEAP[S+16],HEAP[S+24])==0?63:64;break;case 63:w=21;l=380;break;case 64:l=HEAP[T+131]!=0?65:69;break;case 65:l=HEAP[T+130]==0?66:71;break;case 66:l=HEAP[m+108]!=
0?67:71;break;case 67:l=FUNCTION_TABLE[HEAP[m+108]](HEAP[m+4])==0?68:71;break;case 68:w=22;l=380;break;case 69:l=HEAP[m+324]==0?70:71;break;case 70:HEAP[T+129]=xa;l=71;break;case 71:HEAP[m+489]=0;l=72;break;case 72:l=HEAP[m+88]!=0?73:373;break;case 73:FUNCTION_TABLE[HEAP[m+88]](HEAP[m+4]);U=0;l=376;break;case 74:l=HEAP[m+489]!=0?75:87;break;case 75:Q=HEAP[T+129];HEAP[T+129]=1;l=HEAP[m+492]!=0?76:87;break;case 76:l=HEAP[m+112]!=0?77:87;break;case 77:K=ka(T+132,Uf,36);l=K==0?78:79;break;case 78:w=1;
l=380;break;case 79:HEAP[K+20]=HEAP[m+360];HEAP[T+131]=0;l=FUNCTION_TABLE[HEAP[m+112]](HEAP[m+116],0,HEAP[K+20],HEAP[K+16],HEAP[K+24])==0?80:81;break;case 80:w=21;l=380;break;case 81:var D=T;l=HEAP[T+131]!=0?82:86;break;case 82:l=HEAP[D+130]==0?83:87;break;case 83:l=HEAP[m+108]!=0?84:87;break;case 84:l=FUNCTION_TABLE[HEAP[m+108]](HEAP[m+4])==0?85:87;break;case 85:w=22;l=380;break;case 86:HEAP[D+129]=Q;l=87;break;case 87:HEAP[m+280]=g+64;w=F(m,o,p,s);l=380;break;case 88:l=hb(m,n,o,HEAP[r]);HEAP[m+
344]=l;l=HEAP[m+344]==0?89:101;break;case 89:w=1;l=380;break;case 90:l=Ba(m,n,o,HEAP[r]);HEAP[m+348]=l;l=HEAP[m+348]==0?91:92;break;case 91:w=1;l=380;break;case 92:HEAP[m+352]=0;HEAP[m+332]=0;HEAP[m+353]=0;l=101;break;case 93:HEAP[m+352]=1;HEAP[m+332]=mh;l=101;break;case 94:HEAP[m+353]=1;HEAP[m+332]=nh;l=101;break;case 95:HEAP[m+332]=oh;l=101;break;case 96:HEAP[m+332]=Kg;l=101;break;case 97:HEAP[m+332]=Lg;l=101;break;case 98:HEAP[m+332]=ph;l=101;break;case 99:HEAP[m+332]=qh;l=101;break;case 100:HEAP[m+
332]=rh;l=101;break;case 101:l=HEAP[T+128]!=0?102:373;break;case 102:l=HEAP[m+132]!=0?103:373;break;case 103:U=0;l=376;break;case 104:l=HEAP[T+128]!=0?105:373;break;case 105:l=HEAP[m+132]!=0?106:373;break;case 106:l=HEAP[m+332]!=0?107:108;break;case 107:z=Mg;l=112;break;case 108:l=ga==32?109:110;break;case 109:ea=sh;l=111;break;case 110:ea=th;l=111;break;case 111:z=ea;l=112;break;case 112:a:{l=m+416;for(var sa=z,Bb=void 0,Bb=-1;;)switch(Bb){case -1:var ba,Fb,pa;ba=l;Fb=sa;Bb=5;break;case 1:Bb=HEAP[Eb+
12]!=HEAP[ba+8]?4:2;break;case 2:Bb=bb(ba)!=0?4:3;break;case 3:pa=0;Bb=7;break;case 4:Bb=HEAP[ba+12];HEAP[Bb]=HEAP[Fb];HEAP[ba+12]=Bb+1;Fb+=1;Bb=5;break;case 5:var Eb=ba,Bb=HEAP[Fb]!=0?1:6;break;case 6:pa=HEAP[Eb+16];Bb=7;break;case 7:l=pa;break a;default:assert(0,"bad label: "+Bb)}l=void 0}l=l==0?113:114;break;case 113:w=1;l=380;break;case 114:l=Ja(m+416,n,o,HEAP[r])==0?115:116;break;case 115:w=1;l=380;break;case 116:HEAP[m+332]=HEAP[m+416+16];U=0;l=376;break;case 117:l=HEAP[T+128]!=0?118:373;break;
case 118:l=Wa(HEAP[m+344],HEAP[m+348],HEAP[m+352]&255,HEAP[m+353]&255,0,m)==0?119:120;break;case 119:w=1;l=380;break;case 120:l=HEAP[m+132]!=0?121:373;break;case 121:l=HEAP[m+332]!=0?122:373;break;case 122:l=HEAP[HEAP[m+332]]==40?125:123;break;case 123:l=HEAP[HEAP[m+332]]!=78?131:124;break;case 124:l=HEAP[HEAP[m+332]+1]==79?125:131;break;case 125:l=HEAP[m+416+12]!=HEAP[m+416+8]?127:126;break;case 126:l=bb(m+416)!=0?127:130;break;case 127:l=HEAP[m+416+12];HEAP[l]=41;HEAP[m+416+12]=l+1;l=HEAP[m+416+
12]!=HEAP[m+416+8]?129:128;break;case 128:l=bb(m+416)!=0?129:130;break;case 129:l=HEAP[m+416+12];HEAP[l]=0;HEAP[m+416+12]=l+1;HEAP[m+332]=HEAP[m+416+16];HEAP[m+416+16]=HEAP[m+416+12];l=131;break;case 130:w=1;l=380;break;case 131:HEAP[H]=o;FUNCTION_TABLE[HEAP[m+132]](HEAP[m+4],HEAP[HEAP[m+344]],HEAP[HEAP[m+348]],HEAP[m+332],0,ga==36);Ra(m+416);U=0;l=376;break;case 132:l=HEAP[T+128]!=0?133:373;break;case 133:Aa=Pa(m,n,HEAP[m+352]&255,o+HEAP[n+68],HEAP[r]+(0-HEAP[n+68]),T+80);l=Aa!=0?134:135;break;case 134:w=
Aa;l=380;break;case 135:va=HEAP[T+80+16];HEAP[T+80+16]=HEAP[T+80+12];l=Wa(HEAP[m+344],HEAP[m+348],HEAP[m+352]&255,0,va,m)==0?136:137;break;case 136:w=1;l=380;break;case 137:l=HEAP[m+132]!=0?138:373;break;case 138:l=HEAP[m+332]!=0?139:373;break;case 139:l=HEAP[HEAP[m+332]]==40?142:140;break;case 140:l=HEAP[HEAP[m+332]]!=78?148:141;break;case 141:l=HEAP[HEAP[m+332]+1]==79?142:148;break;case 142:l=HEAP[m+416+12]!=HEAP[m+416+8]?144:143;break;case 143:l=bb(m+416)!=0?144:147;break;case 144:l=HEAP[m+416+
12];HEAP[l]=41;HEAP[m+416+12]=l+1;l=HEAP[m+416+12]!=HEAP[m+416+8]?146:145;break;case 145:l=bb(m+416)!=0?146:147;break;case 146:l=HEAP[m+416+12];HEAP[l]=0;HEAP[m+416+12]=l+1;HEAP[m+332]=HEAP[m+416+16];HEAP[m+416+16]=HEAP[m+416+12];l=148;break;case 147:w=1;l=380;break;case 148:HEAP[H]=o;FUNCTION_TABLE[HEAP[m+132]](HEAP[m+4],HEAP[HEAP[m+344]],HEAP[HEAP[m+348]],HEAP[m+332],va,ga==38);Ra(m+416);U=0;l=376;break;case 149:l=HEAP[T+128]!=0?150:373;break;case 150:qb=Ya(m,n,o+HEAP[n+68],HEAP[r]+(0-HEAP[n+68]));
l=HEAP[m+316]!=0?151:153;break;case 151:HEAP[HEAP[m+316]+4]=HEAP[T+104+16];HEAP[HEAP[m+316]+8]=HEAP[T+104+12]-HEAP[T+104+16];HEAP[T+104+16]=HEAP[T+104+12];l=HEAP[m+136]!=0?152:154;break;case 152:HEAP[H]=o;FUNCTION_TABLE[HEAP[m+136]](HEAP[m+4],HEAP[HEAP[m+316]],HEAP[HEAP[m+316]+33],HEAP[HEAP[m+316]+4],HEAP[HEAP[m+316]+8],HEAP[m+360],0,0,0);U=0;l=154;break;case 153:HEAP[T+104+12]=HEAP[T+104+16];l=154;break;case 154:l=qb!=0?155:373;break;case 155:w=qb;l=380;break;case 156:HEAP[m+489]=0;HEAP[T+129]=1;
l=HEAP[m+84]!=0?157:160;break;case 157:l=ua(m+416,n,o+HEAP[n+68],HEAP[r]+(0-HEAP[n+68]));HEAP[m+324]=l;l=HEAP[m+324]==0?158:159;break;case 158:w=1;l=380;break;case 159:HEAP[m+416+16]=HEAP[m+416+12];U=0;l=161;break;case 160:HEAP[m+324]=Uf;l=161;break;case 161:l=HEAP[T+130]==0?162:166;break;case 162:l=HEAP[m+492]==0?163:166;break;case 163:l=HEAP[m+108]!=0?164:166;break;case 164:l=FUNCTION_TABLE[HEAP[m+108]](HEAP[m+4])==0?165:166;break;case 165:w=22;l=380;break;case 166:l=HEAP[m+316]==0?167:170;break;
case 167:l=ka(T+132,Uf,36);HEAP[m+316]=l;l=HEAP[m+316]==0?168:169;break;case 168:w=1;l=380;break;case 169:HEAP[HEAP[m+316]+24]=0;l=170;break;case 170:l=HEAP[T+128]!=0?171:373;break;case 171:l=HEAP[m+316]!=0?172:373;break;case 172:l=HEAP[m+316];sa=ua(T+80,n,o+HEAP[n+68],HEAP[r]+(0-HEAP[n+68]));HEAP[l+16]=sa;l=HEAP[HEAP[m+316]+16]==0?173:174;break;case 173:w=1;l=380;break;case 174:HEAP[HEAP[m+316]+20]=HEAP[m+360];HEAP[T+80+16]=HEAP[T+80+12];l=HEAP[m+136]!=0?175:373;break;case 175:U=0;l=376;break;case 176:l=
HEAP[T+128]!=0?177:373;break;case 177:l=HEAP[m+316]!=0?178:373;break;case 178:l=HEAP[m+136]!=0?179:373;break;case 179:HEAP[H]=o;FUNCTION_TABLE[HEAP[m+136]](HEAP[m+4],HEAP[HEAP[m+316]],HEAP[HEAP[m+316]+33],0,0,HEAP[HEAP[m+316]+20],HEAP[HEAP[m+316]+16],HEAP[HEAP[m+316]+24],0);U=0;l=376;break;case 180:l=HEAP[T+128]!=0?181:373;break;case 181:l=HEAP[m+316]!=0?182:373;break;case 182:l=HEAP[m+316];sa=ua(T+80,n,o,HEAP[r]);HEAP[l+28]=sa;l=HEAP[HEAP[m+316]+28]==0?183:184;break;case 183:w=1;l=380;break;case 184:HEAP[T+
80+16]=HEAP[T+80+12];l=HEAP[m+92]!=0?185:186;break;case 185:HEAP[H]=o;FUNCTION_TABLE[HEAP[m+92]](HEAP[m+4],HEAP[HEAP[m+316]],HEAP[HEAP[m+316]+20],HEAP[HEAP[m+316]+16],HEAP[HEAP[m+316]+24],HEAP[HEAP[m+316]+28]);U=0;l=376;break;case 186:l=HEAP[m+136]!=0?187:373;break;case 187:HEAP[H]=o;FUNCTION_TABLE[HEAP[m+136]](HEAP[m+4],HEAP[HEAP[m+316]],0,0,0,HEAP[HEAP[m+316]+20],HEAP[HEAP[m+316]+16],HEAP[HEAP[m+316]+24],HEAP[HEAP[m+316]+28]);U=0;l=376;break;case 188:l=FUNCTION_TABLE[HEAP[n+48]](n,o,HEAP[r])!=0?
189:190;break;case 189:HEAP[m+316]=0;l=373;break;case 190:l=HEAP[T+128]!=0?191:203;break;case 191:db=ua(T+80,n,o,HEAP[r]);l=db==0?192:193;break;case 192:w=1;l=380;break;case 193:l=ka(T,db,36);HEAP[m+316]=l;l=HEAP[m+316]==0?194:195;break;case 194:w=1;l=380;break;case 195:var kb=T+80;l=HEAP[HEAP[m+316]]!=db?196:197;break;case 196:HEAP[T+80+12]=HEAP[kb+16];HEAP[m+316]=0;l=373;break;case 197:HEAP[T+80+16]=HEAP[kb+12];HEAP[HEAP[m+316]+24]=0;HEAP[HEAP[m+316]+33]=0;var zb=HEAP[m+316];l=HEAP[m+476]!=0?200:
198;break;case 198:l=HEAP[m+300]!=0?200:199;break;case 199:O=1;l=201;break;case 200:O=0;l=201;break;case 201:HEAP[zb+34]=O&255;l=HEAP[m+136]!=0?202:373;break;case 202:U=0;l=376;break;case 203:HEAP[T+80+12]=HEAP[T+80+16];HEAP[m+316]=0;l=373;break;case 204:l=HEAP[T+128]!=0?205:217;break;case 205:C=ua(T+80,n,o,HEAP[r]);l=C==0?206:207;break;case 206:w=1;l=380;break;case 207:l=ka(T+132,C,36);HEAP[m+316]=l;l=HEAP[m+316]==0?208:209;break;case 208:w=1;l=380;break;case 209:var xb=T+80;l=HEAP[HEAP[m+316]]!=
C?210:211;break;case 210:HEAP[T+80+12]=HEAP[xb+16];HEAP[m+316]=0;l=373;break;case 211:HEAP[T+80+16]=HEAP[xb+12];HEAP[HEAP[m+316]+24]=0;HEAP[HEAP[m+316]+33]=1;var ec=HEAP[m+316];l=HEAP[m+476]!=0?214:212;break;case 212:l=HEAP[m+300]!=0?214:213;break;case 213:v=1;l=215;break;case 214:v=0;l=215;break;case 215:HEAP[ec+34]=v&255;l=HEAP[m+136]!=0?216:373;break;case 216:U=0;l=376;break;case 217:HEAP[T+80+12]=HEAP[T+80+16];HEAP[m+316]=0;l=373;break;case 218:HEAP[m+340]=0;HEAP[m+336]=0;l=HEAP[m+96]!=0?219:
373;break;case 219:l=ua(m+416,n,o,HEAP[r]);HEAP[m+336]=l;l=HEAP[m+336]==0?220:221;break;case 220:w=1;l=380;break;case 221:HEAP[m+416+16]=HEAP[m+416+12];U=0;l=376;break;case 222:l=FUNCTION_TABLE[HEAP[n+56]](n,o,HEAP[r],x)==0?223:224;break;case 223:w=32;l=380;break;case 224:l=HEAP[m+336]!=0?225:373;break;case 225:I=ua(m+416,n,o+HEAP[n+68],HEAP[r]+(0-HEAP[n+68]));l=I==0?226:227;break;case 226:w=1;l=380;break;case 227:Ta(I);HEAP[m+340]=I;HEAP[m+416+16]=HEAP[m+416+12];U=0;l=376;break;case 228:l=HEAP[m+
336]!=0?229:233;break;case 229:l=HEAP[m+96]!=0?230:233;break;case 230:na=ua(m+416,n,o+HEAP[n+68],HEAP[r]+(0-HEAP[n+68]));l=na==0?231:232;break;case 231:w=1;l=380;break;case 232:HEAP[H]=o;FUNCTION_TABLE[HEAP[m+96]](HEAP[m+4],HEAP[m+336],HEAP[m+360],na,HEAP[m+340]);U=0;l=233;break;case 233:Ra(m+416);l=373;break;case 234:l=HEAP[m+340]!=0?235:237;break;case 235:l=HEAP[m+96]!=0?236:237;break;case 236:HEAP[H]=o;FUNCTION_TABLE[HEAP[m+96]](HEAP[m+4],HEAP[m+336],HEAP[m+360],0,HEAP[m+340]);U=0;l=237;break;
case 237:Ra(m+416);l=373;break;case 238:l=q;l=l==12?240:l==28?239:241;break;case 239:w=10;l=380;break;case 240:w=17;l=380;break;case 241:w=2;l=380;break;case 242:l=HEAP[m+80]!=0?243:244;break;case 243:Ia(m,n,o,HEAP[r]);l=244;break;case 244:U=0;Oa=l=W(m,n,r,p,s,u&255);l=l!=0?245:246;break;case 245:w=Oa;l=380;break;case 246:l=HEAP[r]==0?247:373;break;case 247:HEAP[m+280]=g+86;w=Oa;l=380;break;case 248:l=HEAP[m+256+4]>=HEAP[m+468]?249:258;break;case 249:var Ud=m+12;l=HEAP[m+468]!=0?250:256;break;case 250:Sa=
HEAP[Ud+4];HEAP[m+468]*=2;Sa=FUNCTION_TABLE[Sa](HEAP[m+464],HEAP[m+468]);l=Sa==0?251:252;break;case 251:w=1;l=380;break;case 252:HEAP[m+464]=Sa;l=HEAP[T+184]!=0?253:258;break;case 253:E=FUNCTION_TABLE[HEAP[m+12+4]](HEAP[T+184],HEAP[m+468]*4);l=E==0?254:255;break;case 254:w=1;l=380;break;case 255:HEAP[T+184]=E;l=258;break;case 256:l=HEAP[Ud];HEAP[m+468]=32;l=FUNCTION_TABLE[l](HEAP[m+468]);HEAP[m+464]=l;l=HEAP[m+464]==0?257:258;break;case 257:w=1;l=380;break;case 258:HEAP[HEAP[m+464]+HEAP[m+256+4]]=
0;l=HEAP[T+160]!=0?259:373;break;case 259:$=qa(m);l=$<0?260:261;break;case 260:w=1;l=380;break;case 261:HEAP[HEAP[T+184]+4*HEAP[T+180]]=$;HEAP[T+180]+=1;HEAP[HEAP[T+164]+28*$]=6;l=HEAP[m+128]!=0?262:373;break;case 262:U=0;l=376;break;case 263:l=HEAP[HEAP[m+464]+HEAP[m+256+4]]==124?264:265;break;case 264:w=2;l=380;break;case 265:HEAP[HEAP[m+464]+HEAP[m+256+4]]=44;l=HEAP[T+160]!=0?266:373;break;case 266:l=HEAP[m+128]!=0?267:373;break;case 267:U=0;l=376;break;case 268:l=HEAP[HEAP[m+464]+HEAP[m+256+4]]==
44?269:270;break;case 269:w=2;l=380;break;case 270:l=HEAP[T+160]!=0?271:275;break;case 271:l=HEAP[HEAP[m+464]+HEAP[m+256+4]]==0?272:275;break;case 272:l=HEAP[HEAP[T+164]+28*HEAP[HEAP[T+184]+4*(HEAP[T+180]-1)]]!=3?273:275;break;case 273:HEAP[HEAP[T+164]+28*HEAP[HEAP[T+184]+4*(HEAP[T+180]-1)]]=5;l=HEAP[m+128]!=0?274:275;break;case 274:U=0;l=275;break;case 275:HEAP[HEAP[m+464]+HEAP[m+256+4]]=124;l=373;break;case 276:HEAP[T+129]=1;l=HEAP[m+492]==0?277:278;break;case 277:HEAP[T+128]=HEAP[T+130];l=304;
break;case 278:Ae=ua(T+80,n,o+HEAP[n+68],HEAP[r]+(0-HEAP[n+68]));l=Ae==0?279:280;break;case 279:w=1;l=380;break;case 280:Qd=ka(T+132,Ae,0);HEAP[T+80+12]=HEAP[T+80+16];l=HEAP[m+256+16]==0?288:281;break;case 281:l=HEAP[T+130]!=0?282:283;break;case 282:l=HEAP[m+300]!=0?288:284;break;case 283:l=HEAP[T+129]!=0?288:284;break;case 284:l=Qd==0?285:286;break;case 285:w=11;l=380;break;case 286:l=HEAP[Qd+34]==0?287:292;break;case 287:w=24;l=380;break;case 288:l=Qd==0?289:292;break;case 289:HEAP[T+128]=HEAP[T+
130];l=ga==60?290:373;break;case 290:l=HEAP[m+120]!=0?291:373;break;case 291:FUNCTION_TABLE[HEAP[m+120]](HEAP[m+4],Ae,1);U=0;l=376;break;case 292:l=HEAP[Qd+32]!=0?293:294;break;case 293:w=12;l=380;break;case 294:l=HEAP[Qd+4]!=0?295:298;break;case 295:ca=ga==60;ca=Na(m,Qd,ca&255);l=ca!=0?296:297;break;case 296:w=ca;l=380;break;case 297:U=0;l=376;break;case 298:var Ca=T;l=HEAP[m+112]!=0?299:303;break;case 299:HEAP[Ca+131]=0;HEAP[Qd+32]=1;l=FUNCTION_TABLE[HEAP[m+112]](HEAP[m+116],0,HEAP[Qd+20],HEAP[Qd+
16],HEAP[Qd+24])==0;HEAP[Qd+32]=0;l=l?300:301;break;case 300:w=21;l=380;break;case 301:U=0;l=HEAP[T+131]==0?302:304;break;case 302:HEAP[T+128]=HEAP[T+130];l=373;break;case 303:HEAP[T+128]=HEAP[Ca+130];l=373;break;case 304:l=HEAP[T+130]==0?305:373;break;case 305:l=HEAP[m+108]!=0?306:373;break;case 306:l=FUNCTION_TABLE[HEAP[m+108]](HEAP[m+4])==0?307:373;break;case 307:w=22;l=380;break;case 308:l=HEAP[m+128]!=0?309:373;break;case 309:l=hb(m,n,o,HEAP[r]);HEAP[m+344]=l;l=HEAP[m+344]==0?310:311;break;case 310:w=
1;l=380;break;case 311:HEAP[T+180]=0;HEAP[T+176]=0;HEAP[T+160]=1;U=0;l=376;break;case 312:l=HEAP[T+160]!=0?313:373;break;case 313:l=HEAP[m+128]!=0?314:320;break;case 314:A=FUNCTION_TABLE[HEAP[m+12]](20);l=A==0?315:316;break;case 315:w=1;l=380;break;case 316:HEAP[A+4]=0;HEAP[A+8]=0;HEAP[A+12]=0;HEAP[A+16]=0;l=ga==41?317:318;break;case 317:B=2;l=319;break;case 318:B=1;l=319;break;case 319:HEAP[A]=B;HEAP[H]=o;FUNCTION_TABLE[HEAP[m+128]](HEAP[m+4],HEAP[HEAP[m+344]],A);U=0;l=320;break;case 320:HEAP[T+
160]=0;l=373;break;case 321:l=HEAP[T+160]!=0?322:373;break;case 322:HEAP[HEAP[T+164]+28*HEAP[HEAP[T+184]+4*(HEAP[T+180]-1)]]=3;l=HEAP[m+128]!=0?323:373;break;case 323:U=0;l=376;break;case 324:za=0;l=328;break;case 325:za=1;l=328;break;case 326:za=2;l=328;break;case 327:za=3;l=328;break;case 328:l=HEAP[T+160]!=0?329:373;break;case 329:var Sc=HEAP[r];l=za!=0?330:331;break;case 330:t=Sc+(0-HEAP[n+68]);l=332;break;case 331:t=Sc;l=332;break;case 332:G=t;Ma=l=qa(m);l=l<0?333:334;break;case 333:w=1;l=380;
break;case 334:HEAP[HEAP[T+164]+28*Ma]=4;HEAP[HEAP[T+164]+28*Ma+4]=za;cb=hb(m,n,o,G);l=cb==0?335:336;break;case 335:w=1;l=380;break;case 336:oa=HEAP[cb];HEAP[HEAP[T+164]+28*Ma+8]=oa;J=0;l=337;break;case 337:l=HEAP[oa+J]!=0;J+=1;l=l!=0?337:338;break;case 338:HEAP[T+168]=J+HEAP[T+168];l=HEAP[m+128]!=0?339:373;break;case 339:U=0;l=376;break;case 340:za=0;l=344;break;case 341:za=1;l=344;break;case 342:za=2;l=344;break;case 343:za=3;l=344;break;case 344:l=HEAP[T+160]!=0?345:373;break;case 345:l=HEAP[m+
128]!=0?346:347;break;case 346:U=0;l=347;break;case 347:HEAP[T+180]-=1;HEAP[HEAP[T+164]+28*HEAP[HEAP[T+184]+4*HEAP[T+180]]+4]=za;l=HEAP[T+180]==0?348:373;break;case 348:l=U==0?349:352;break;case 349:a:{l=m;ab=STACKTOP;STACKTOP+=8;_memset(ab,0,8);sa=void 0;for(sa=-1;;)switch(sa){case -1:var ib,gb,rb,Z,M=ab,Cb=ab+4;ib=l;rb=HEAP[ib+356];Z=FUNCTION_TABLE[HEAP[ib+12]](HEAP[rb+168]+HEAP[rb+176]*20);sa=Z==0?1:2;break;case 1:gb=0;sa=3;break;case 2:HEAP[Cb]=Z+20*HEAP[rb+176];HEAP[M]=Z+20;P(ib,0,Z,M,Cb);gb=
Z;sa=3;break;case 3:l=gb;STACKTOP=ab;ab=l;break a;default:assert(0,"bad label: "+sa)}ab=void 0}l=ab==0?350:351;break;case 350:w=1;l=380;break;case 351:HEAP[H]=o;FUNCTION_TABLE[HEAP[m+128]](HEAP[m+4],HEAP[HEAP[m+344]],ab);l=352;break;case 352:HEAP[T+160]=0;HEAP[T+168]=0;l=373;break;case 353:l=ta(m,n,o,HEAP[r])==0?354:355;break;case 354:w=1;l=380;break;case 355:U=0;l=376;break;case 356:l=Va(m,n,o,HEAP[r])==0?357:358;break;case 357:w=1;l=380;break;case 358:U=0;l=376;break;case 359:l=q==14?360:373;break;
case 360:U=0;l=376;break;case 361:l=HEAP[m+84]!=0?362:373;break;case 362:U=0;l=376;break;case 363:l=HEAP[T+128]!=0?364:373;break;case 364:l=HEAP[m+136]!=0?365:373;break;case 365:U=0;l=376;break;case 366:l=HEAP[m+96]!=0?367:373;break;case 367:U=0;l=376;break;case 368:l=HEAP[T+128]!=0?369:373;break;case 369:l=HEAP[m+132]!=0?370:373;break;case 370:U=0;l=376;break;case 371:l=HEAP[m+128]!=0?372:373;break;case 372:U=0;l=376;break;case 373:l=U!=0?374:376;break;case 374:l=HEAP[m+80]!=0?375:376;break;case 375:Ia(m,
n,o,HEAP[r]);l=376;break;case 376:l=HEAP[m+480];l=l==2?378:l==3?377:379;break;case 377:HEAP[s]=HEAP[r];w=0;l=380;break;case 378:w=35;l=380;break;case 379:o=HEAP[r];q=FUNCTION_TABLE[HEAP[n]](n,o,p,r);l=3;break;case 380:return a=w,STACKTOP=k,a;default:assert(0,"bad label: "+l)}}function Ua(a,b,c,d){var e=STACKTOP;STACKTOP+=4;_memset(e,0,4);var f;for(f=-1;;)switch(f){case -1:var h,j,l,k,m,n=e;h=a;j=b;l=c;k=d;HEAP[h+280]=g+88;HEAP[h+288]=j;f=1;break;case 1:HEAP[n]=0;f=FUNCTION_TABLE[HEAP[HEAP[h+144]]](HEAP[h+
144],j,l,n);HEAP[h+292]=HEAP[n];f=f==-15?2:f==-4?6:f==-2?17:f==-1?14:f==0?13:f==11?9:f==13?11:f==15?7:20;break;case 2:f=HEAP[h+80]!=0?3:5;break;case 3:Ia(h,HEAP[h+144],j,HEAP[n]);f=HEAP[h+480]==2?4:5;break;case 4:m=35;f=24;break;case 5:HEAP[k]=HEAP[n];m=0;f=24;break;case 6:HEAP[k]=j;m=0;f=24;break;case 7:f=HEAP[h+80]!=0?8:21;break;case 8:Ia(h,HEAP[h+144],j,HEAP[n]);f=21;break;case 9:f=ta(h,HEAP[h+144],j,HEAP[n])==0?10:21;break;case 10:m=1;f=24;break;case 11:f=Va(h,HEAP[h+144],j,HEAP[n])==0?12:21;
break;case 12:m=1;f=24;break;case 13:HEAP[h+288]=HEAP[n];m=4;f=24;break;case 14:f=HEAP[h+480+4]==0?15:16;break;case 15:HEAP[k]=j;m=0;f=24;break;case 16:m=5;f=24;break;case 17:f=HEAP[h+480+4]==0?18:19;break;case 18:HEAP[k]=j;m=0;f=24;break;case 19:m=6;f=24;break;case 20:m=9;f=24;break;case 21:j=HEAP[n];HEAP[h+288]=j;f=HEAP[h+480];f=f==2?23:f==3?22:1;break;case 22:HEAP[k]=HEAP[n];m=0;f=24;break;case 23:m=35;f=24;break;case 24:return a=m,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function Na(a,
b,c){var d=STACKTOP;STACKTOP+=4;_memset(d,0,4);var e,f=null;for(e=-1;;)switch(e){case -1:var h,j,l,k,m,n,o=d,p,q;h=a;j=b;l=c;var r=h;e=HEAP[h+304]!=0?1:2;break;case 1:q=HEAP[r+304];HEAP[h+304]=HEAP[q+8];e=4;break;case 2:q=FUNCTION_TABLE[HEAP[r+12]](24);e=q==0?3:4;break;case 3:k=1;e=13;break;case 4:HEAP[j+32]=1;HEAP[j+12]=0;HEAP[q+8]=HEAP[h+300];HEAP[h+300]=q;HEAP[q+12]=j;HEAP[q+16]=HEAP[h+312];HEAP[q+20]=l;HEAP[q]=0;HEAP[q+4]=0;m=HEAP[j+4];n=HEAP[j+4]+HEAP[j+8];var s=HEAP[h+228];e=HEAP[j+33]!=0?5:
6;break;case 5:e=FUNCTION_TABLE[HEAP[s]](HEAP[h+228],m,n,o);var u=Da(h,HEAP[h+228],m,n,e,HEAP[o],o,0);p=u;f=5;e=7;break;case 6:var t=K(h,HEAP[h+312],s,m,n,o,0);p=t;f=6;e=7;break;case 7:e=(f==6?t:u)==0?8:12;break;case 8:e=n==HEAP[o]?11:9;break;case 9:e=HEAP[h+480]!=3?11:10;break;case 10:HEAP[j+12]=HEAP[o]-m;HEAP[h+280]=g+90;e=12;break;case 11:HEAP[j+32]=0;HEAP[h+300]=HEAP[q+8];HEAP[q+8]=HEAP[h+304];HEAP[h+304]=q;e=12;break;case 12:k=p;e=13;break;case 13:return a=k,STACKTOP=d,a;default:assert(0,"bad label: "+
e)}}function Pa(a,b,c,d,e,f){var g;for(g=-1;;)switch(g){case -1:var h,j,l,k,m,n;h=a;g=b;j=c;l=d;k=e;m=f;h=wa(h,g,j&255,l,k,m);g=h!=0?1:2;break;case 1:n=h;g=10;break;case 2:g=j==0?3:6;break;case 3:g=HEAP[m+12]!=HEAP[m+16]?4:6;break;case 4:g=HEAP[HEAP[m+12]+-1]==32?5:6;break;case 5:HEAP[m+12]+=-1;g=6;break;case 6:g=HEAP[m+12]!=HEAP[m+8]?9:7;break;case 7:g=bb(m)!=0?9:8;break;case 8:n=1;g=10;break;case 9:n=HEAP[m+12];HEAP[n]=0;HEAP[m+12]=n+1;n=0;g=10;break;case 10:return a=n;default:assert(0,"bad label: "+
g)}}function wa(a,b,c,d,e,f){var g=STACKTOP;STACKTOP+=8;_memset(g,0,8);var h,j=null;for(h=-1;;)switch(h){case -1:var l,k,m,n,o,p,q,r,s,u,t=g,B=g+4,P,v,O,ea,T,w;l=a;k=b;m=c;n=d;o=e;p=f;u=HEAP[l+356];var x=B;h=1;break;case 1:h=FUNCTION_TABLE[HEAP[k+16]](k,n,o,t);h=h==-4?2:h==-3?29:h==-1?6:h==0?3:h==6?27:h==7?30:h==9?37:h==10?9:h==39?30:77;break;case 2:s=0;h=81;break;case 3:h=HEAP[l+144]==k?4:5;break;case 4:HEAP[l+288]=HEAP[t];h=5;break;case 5:s=4;h=81;break;case 6:h=HEAP[l+144]==k?7:8;break;case 7:HEAP[l+
288]=n;h=8;break;case 8:s=4;h=81;break;case 9:v=FUNCTION_TABLE[HEAP[k+44]](k,n);h=v<0?10:13;break;case 10:h=HEAP[l+144]==k?11:12;break;case 11:HEAP[l+288]=n;h=12;break;case 12:s=14;h=81;break;case 13:h=m==0?14:17;break;case 14:h=v==32?15:17;break;case 15:h=HEAP[p+12]==HEAP[p+16]?80:16;break;case 16:h=HEAP[HEAP[p+12]+-1]==32?80:17;break;case 17:v=h=Gb(v,x);h=h==0?18:21;break;case 18:h=HEAP[l+144]==k?19:20;break;case 19:HEAP[l+288]=n;h=20;break;case 20:s=14;h=81;break;case 21:P=0;h=26;break;case 22:h=
HEAP[p+12]!=HEAP[p+8]?25:23;break;case 23:h=bb(p)!=0?25:24;break;case 24:s=1;h=81;break;case 25:h=HEAP[p+12];HEAP[h]=HEAP[B+P];HEAP[p+12]=h+1;P+=1;h=26;break;case 26:h=P<v?22:80;break;case 27:h=Ja(p,k,n,HEAP[t])==0?28:80;break;case 28:s=1;h=81;break;case 29:HEAP[t]=n+HEAP[k+68];h=30;break;case 30:h=m==0?31:33;break;case 31:h=HEAP[p+12]==HEAP[p+16]?80:32;break;case 32:h=HEAP[HEAP[p+12]+-1]==32?80:33;break;case 33:h=HEAP[p+12]!=HEAP[p+8]?35:34;break;case 34:h=bb(p)!=0?35:36;break;case 35:h=HEAP[p+12];
HEAP[h]=32;HEAP[p+12]=h+1;h=80;break;case 36:s=1;h=81;break;case 37:T=FUNCTION_TABLE[HEAP[k+48]](k,n+HEAP[k+68],HEAP[t]+(0-HEAP[k+68]))&255;h=T!=0?38:42;break;case 38:h=HEAP[p+12]!=HEAP[p+8]?40:39;break;case 39:h=bb(p)!=0?40:41;break;case 40:h=HEAP[p+12];HEAP[h]=T;HEAP[p+12]=h+1;h=80;break;case 41:s=1;h=81;break;case 42:O=ua(l+440,k,n+HEAP[k+68],HEAP[t]+(0-HEAP[k+68]));h=O==0?43:44;break;case 43:s=1;h=81;break;case 44:ea=ka(u,O,0);HEAP[l+440+12]=HEAP[l+440+16];h=u+80==p?45:52;break;case 45:h=HEAP[l+
256+16]==0?50:46;break;case 46:h=HEAP[u+130]!=0?47:48;break;case 47:h=HEAP[l+300]!=0?50:49;break;case 48:h=HEAP[u+129]!=0?50:49;break;case 49:r=1;h=51;break;case 50:r=0;h=51;break;case 51:var H=r&255,j=51;h=57;break;case 52:h=HEAP[u+129]==0?54:53;break;case 53:h=HEAP[u+130]!=0?54:55;break;case 54:q=1;h=56;break;case 55:q=0;h=56;break;case 56:var za=q&255,j=56;h=57;break;case 57:var ga=ea==0;h=(j==56?za:H)!=0?58:62;break;case 58:h=ga?59:60;break;case 59:s=11;h=81;break;case 60:h=HEAP[ea+34]==0?61:
63;break;case 61:s=24;h=81;break;case 62:h=ga?80:63;break;case 63:h=HEAP[ea+32]!=0?64:67;break;case 64:h=HEAP[l+144]==k?65:66;break;case 65:HEAP[l+288]=n;h=66;break;case 66:s=12;h=81;break;case 67:h=HEAP[ea+28]!=0?68:71;break;case 68:h=HEAP[l+144]==k?69:70;break;case 69:HEAP[l+288]=n;h=70;break;case 70:s=15;h=81;break;case 71:h=HEAP[ea+4]==0?72:75;break;case 72:h=HEAP[l+144]==k?73:74;break;case 73:HEAP[l+288]=n;h=74;break;case 74:s=16;h=81;break;case 75:w=HEAP[ea+4]+HEAP[ea+8];HEAP[ea+32]=1;w=wa(l,
HEAP[l+228],m&255,HEAP[ea+4],w,p);HEAP[ea+32]=0;h=w!=0?76:80;break;case 76:s=w;h=81;break;case 77:h=HEAP[l+144]==k?78:79;break;case 78:HEAP[l+288]=n;h=79;break;case 79:s=23;h=81;break;case 80:n=HEAP[t];h=1;break;case 81:return a=s,STACKTOP=g,a;default:assert(0,"bad label: "+h)}}function Ya(a,b,c,d){var e=STACKTOP;STACKTOP+=8;_memset(e,0,8);var f;for(f=-1;;)switch(f){case -1:var g,h,j,l,k,m,n,o,p,q=e,r,s,u=e+4,t,B;g=a;h=b;j=c;l=d;m=HEAP[g+356];n=m+104;o=0;p=HEAP[g+256+20];HEAP[g+256+20]=1;f=HEAP[n]==
0?1:2;break;case 1:f=bb(n)==0?3:2;break;case 2:var P=u;f=4;break;case 3:k=1;f=57;break;case 4:f=FUNCTION_TABLE[HEAP[h+16+4]](h,j,l,q);f=f==-4?24:f==-3?27:f==-1?46:f==0?49:f==6?25:f==7?28:f==9?25:f==10?32:f==28?5:52;break;case 5:f=HEAP[g+488]!=0?7:6;break;case 6:f=HEAP[g+144]!=h?7:23;break;case 7:r=f=ua(g+416,h,j+HEAP[h+68],HEAP[q]+(0-HEAP[h+68]));f=f==0?8:9;break;case 8:o=1;f=56;break;case 9:s=ka(m+132,r,0);HEAP[g+416+12]=HEAP[g+416+16];f=s==0?10:11;break;case 10:HEAP[m+128]=HEAP[m+130];f=56;break;
case 11:f=HEAP[s+32]!=0?12:15;break;case 12:f=HEAP[g+144]==h?13:14;break;case 13:HEAP[g+288]=j;f=14;break;case 14:o=12;f=56;break;case 15:f=HEAP[s+16]!=0?16:22;break;case 16:var v=m;f=HEAP[g+112]!=0?17:21;break;case 17:HEAP[v+131]=0;HEAP[s+32]=1;f=FUNCTION_TABLE[HEAP[g+112]](HEAP[g+116],0,HEAP[s+20],HEAP[s+16],HEAP[s+24])==0;HEAP[s+32]=0;f=f?18:19;break;case 18:o=21;f=56;break;case 19:f=HEAP[m+131]==0?20:55;break;case 20:HEAP[m+128]=HEAP[m+130];f=55;break;case 21:HEAP[m+128]=HEAP[v+130];f=55;break;
case 22:HEAP[s+32]=1;o=Ya(g,HEAP[g+228],HEAP[s+4],HEAP[s+4]+HEAP[s+8]);HEAP[s+32]=0;f=o!=0?56:55;break;case 23:HEAP[g+288]=j;o=10;f=56;break;case 24:o=0;f=56;break;case 25:f=Ja(n,h,j,HEAP[q])==0?26:55;break;case 26:o=1;f=56;break;case 27:HEAP[q]=j+HEAP[h+68];f=28;break;case 28:f=HEAP[n+8]==HEAP[n+12]?29:31;break;case 29:f=bb(n)==0?30:31;break;case 30:o=1;f=56;break;case 31:f=HEAP[n+12];HEAP[f]=10;HEAP[n+12]=f+1;f=55;break;case 32:B=FUNCTION_TABLE[HEAP[h+44]](h,j);f=B<0?33:36;break;case 33:f=HEAP[g+
144]==h?34:35;break;case 34:HEAP[g+288]=j;f=35;break;case 35:o=14;f=56;break;case 36:B=Gb(B,P);f=B==0?37:40;break;case 37:f=HEAP[g+144]==h?38:39;break;case 38:HEAP[g+288]=j;f=39;break;case 39:o=14;f=56;break;case 40:t=0;f=45;break;case 41:f=HEAP[n+8]==HEAP[n+12]?42:44;break;case 42:f=bb(n)==0?43:44;break;case 43:o=1;f=56;break;case 44:f=HEAP[n+12];HEAP[f]=HEAP[u+t];HEAP[n+12]=f+1;t+=1;f=45;break;case 45:f=t<B?41:55;break;case 46:f=HEAP[g+144]==h?47:48;break;case 47:HEAP[g+288]=j;f=48;break;case 48:o=
4;f=56;break;case 49:f=HEAP[g+144]==h?50:51;break;case 50:HEAP[g+288]=HEAP[q];f=51;break;case 51:o=4;f=56;break;case 52:f=HEAP[g+144]==h?53:54;break;case 53:HEAP[g+288]=j;f=54;break;case 54:o=23;f=56;break;case 55:j=HEAP[q];f=4;break;case 56:HEAP[g+256+20]=p;k=o;f=57;break;case 57:return a=k,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function Ha(a){var b;for(b=-1;;)switch(b){case -1:var c,d;c=a;b=1;break;case 1:b=HEAP[c]==0?11:2;break;case 2:var e=c;b=HEAP[c]==13?4:3;break;case 3:c=e+1;b=1;break;
case 4:d=e;b=5;break;case 5:b=HEAP[c]==13?6:8;break;case 6:HEAP[d]=10;d+=1;c+=1;b=HEAP[c]==10?7:9;break;case 7:c+=1;b=9;break;case 8:HEAP[d]=HEAP[c];d+=1;c+=1;b=9;break;case 9:b=HEAP[c]!=0?5:10;break;case 10:HEAP[d]=0;b=11;break;case 11:return;default:assert(0,"bad label: "+b)}}function ta(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,l,k,m,n;f=a;g=b;h=c;j=d;e=HEAP[f+64]==0?1:4;break;case 1:e=HEAP[f+80]!=0?2:3;break;case 2:Ia(f,g,h,j);e=3;break;case 3:l=1;e=9;break;case 4:h+=HEAP[g+68]*
2;k=FUNCTION_TABLE[HEAP[g+32]](g,h);n=h+k;k=ua(f+416,g,h,n);e=k==0?5:6;break;case 5:l=0;e=9;break;case 6:HEAP[f+416+16]=HEAP[f+416+12];m=j+HEAP[g+68]*-2;e=FUNCTION_TABLE[HEAP[g+36]](g,n);m=ua(f+416,g,e,m);e=m==0?7:8;break;case 7:l=0;e=9;break;case 8:Ha(m);FUNCTION_TABLE[HEAP[f+64]](HEAP[f+4],k,m);Ra(f+416);l=1;e=9;break;case 9:return a=l;default:assert(0,"bad label: "+e)}}function Va(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,l,k;f=a;g=b;h=c;j=d;e=HEAP[f+68]==0?1:4;break;case 1:e=HEAP[f+
80]!=0?2:3;break;case 2:Ia(f,g,h,j);e=3;break;case 3:l=1;e=7;break;case 4:k=ua(f+416,g,h+HEAP[g+68]*4,j+HEAP[g+68]*-3);e=k==0?5:6;break;case 5:l=0;e=7;break;case 6:Ha(k);FUNCTION_TABLE[HEAP[f+68]](HEAP[f+4],k);Ra(f+416);l=1;e=7;break;case 7:return a=l;default:assert(0,"bad label: "+e)}}function Ia(a,b,c,d){var e=STACKTOP;STACKTOP+=8;_memset(e,0,8);var f;for(f=-1;;)switch(f){case -1:var g,h,j=e,l,k,m,n=e+4;g=a;h=b;HEAP[j]=c;l=d;var o=g;f=HEAP[h+72]==0?1:5;break;case 1:var p=g;f=HEAP[o+144]==h?2:3;
break;case 2:k=p+288;m=g+292;f=4;break;case 3:k=HEAP[p+300];m=HEAP[g+300]+4;f=4;break;case 4:HEAP[n]=HEAP[g+44];FUNCTION_TABLE[HEAP[h+60]](h,j,l,n,HEAP[g+48]);HEAP[m]=HEAP[j];FUNCTION_TABLE[HEAP[g+80]](HEAP[g+4],HEAP[g+44],HEAP[n]-HEAP[g+44]);HEAP[k]=HEAP[j];f=HEAP[j]!=l?4:6;break;case 5:FUNCTION_TABLE[HEAP[o+80]](HEAP[g+4],HEAP[j],l-HEAP[j]);f=6;break;case 6:STACKTOP=e;return;default:assert(0,"bad label: "+f)}}function Wa(a,b,c,d,e,f){var g;for(g=-1;;)switch(g){case -1:var h,j,l,k,m,n,o,p,q,r;h=
a;j=b;l=c;k=d;m=e;n=f;g=m!=0?2:1;break;case 1:g=k!=0?2:11;break;case 2:p=0;g=6;break;case 3:g=HEAP[HEAP[h+20]+12*p]==j?4:5;break;case 4:o=1;g=21;break;case 5:p+=1;g=6;break;case 6:g=HEAP[h+12]>p?3:7;break;case 7:g=k!=0?8:11;break;case 8:g=HEAP[h+8]==0?9:11;break;case 9:g=HEAP[j+9]==0?10:11;break;case 10:HEAP[h+8]=j;g=11;break;case 11:g=HEAP[h+12]==HEAP[h+16]?12:18;break;case 12:var s=h+16;g=HEAP[h+16]==0?13:15;break;case 13:HEAP[s]=8;g=FUNCTION_TABLE[HEAP[n+12]](HEAP[h+16]*12);HEAP[h+20]=g;g=HEAP[h+
20]==0?14:18;break;case 14:o=0;g=21;break;case 15:r=HEAP[s]*2;q=FUNCTION_TABLE[HEAP[n+12+4]](HEAP[h+20],r*12);g=q==0?16:17;break;case 16:o=0;g=21;break;case 17:HEAP[h+16]=r;HEAP[h+20]=q;g=18;break;case 18:g=HEAP[h+20]+12*HEAP[h+12];HEAP[g]=j;HEAP[g+8]=m;HEAP[g+4]=l;g=l==0?19:20;break;case 19:HEAP[j+8]=1;g=20;break;case 20:HEAP[h+12]+=1;o=1;g=21;break;case 21:return a=o;default:assert(0,"bad label: "+g)}}function ia(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g,h,j;d=a;e=b;d=HEAP[d+356];g=HEAP[e];
c=18;break;case 1:c=HEAP[g]==58?2:17;break;case 2:j=HEAP[e];c=7;break;case 3:c=l?6:4;break;case 4:c=bb(d+80)!=0?6:5;break;case 5:f=0;c=20;break;case 6:c=HEAP[d+80+12];HEAP[c]=HEAP[j];HEAP[d+80+12]=c+1;j+=1;c=7;break;case 7:var l=HEAP[d+80+12]!=HEAP[d+80+8];c=j!=g?3:8;break;case 8:c=l?11:9;break;case 9:c=bb(d+80)!=0?11:10;break;case 10:f=0;c=20;break;case 11:h=HEAP[d+80+12];HEAP[h]=0;HEAP[d+80+12]=h+1;h=c=ka(d+60,HEAP[d+80+16],8);c=c==0?12:13;break;case 12:f=0;c=20;break;case 13:var k=d+80;c=HEAP[h]==
HEAP[d+80+16]?14:15;break;case 14:HEAP[d+80+16]=HEAP[k+12];c=16;break;case 15:HEAP[d+80+12]=HEAP[k+16];c=16;break;case 16:HEAP[e+4]=h;c=17;break;case 17:g+=1;c=18;break;case 18:c=HEAP[g]!=0?1:19;break;case 19:f=1;c=20;break;case 20:return e=f;default:assert(0,"bad label: "+c)}}function Ba(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,l,k,m,n,o,p;f=a;g=b;h=c;j=d;k=HEAP[f+356];e=HEAP[k+80+12]!=HEAP[k+80+8]?3:1;break;case 1:e=bb(k+80)!=0?3:2;break;case 2:l=0;e=40;break;case 3:n=HEAP[k+80+12];
HEAP[n]=0;HEAP[k+80+12]=n+1;n=e=ua(k+80,g,h,j);e=e==0?4:5;break;case 4:l=0;e=40;break;case 5:n+=1;m=ka(k+40,n,12);e=m==0?6:7;break;case 6:l=0;e=40;break;case 7:var q=k+80;e=HEAP[m]!=n?8:9;break;case 8:HEAP[k+80+12]=HEAP[q+16];e=39;break;case 9:HEAP[k+80+16]=HEAP[q+12];e=HEAP[f+236]!=0?10:39;break;case 10:e=HEAP[n]!=120?21:11;break;case 11:e=HEAP[n+1]!=109?21:12;break;case 12:e=HEAP[n+2]!=108?21:13;break;case 13:e=HEAP[n+3]!=110?21:14;break;case 14:e=HEAP[n+4]!=115?21:15;break;case 15:e=HEAP[n+5]==
0?17:16;break;case 16:e=HEAP[n+5]==58?17:21;break;case 17:e=HEAP[n+5]==0?18:19;break;case 18:HEAP[m+4]=k+152;e=20;break;case 19:e=ka(k+60,n+6,8);HEAP[m+4]=e;e=20;break;case 20:HEAP[m+9]=1;e=39;break;case 21:o=0;e=38;break;case 22:e=HEAP[n+o]==58?23:37;break;case 23:p=0;e=28;break;case 24:e=r?27:25;break;case 25:e=bb(k+80)!=0?27:26;break;case 26:l=0;e=40;break;case 27:e=HEAP[k+80+12];HEAP[e]=HEAP[n+p];HEAP[k+80+12]=e+1;p+=1;e=28;break;case 28:var r=HEAP[k+80+12]!=HEAP[k+80+8];e=p<o?24:29;break;case 29:e=
r?32:30;break;case 30:e=bb(k+80)!=0?32:31;break;case 31:l=0;e=40;break;case 32:e=HEAP[k+80+12];HEAP[e]=0;HEAP[k+80+12]=e+1;e=ka(k+60,HEAP[k+80+16],8);HEAP[m+4]=e;e=HEAP[m+4]==0?33:34;break;case 33:l=0;e=40;break;case 34:var s=k+80;e=HEAP[HEAP[m+4]]==HEAP[k+80+16]?35:36;break;case 35:HEAP[k+80+16]=HEAP[s+12];e=39;break;case 36:HEAP[k+80+12]=HEAP[s+16];e=39;break;case 37:o+=1;e=38;break;case 38:e=HEAP[n+o]!=0?22:39;break;case 39:l=m;e=40;break;case 40:return a=l;default:assert(0,"bad label: "+e)}}function Xa(a,
b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g,h,j,k;d=a;e=b;g=HEAP[d+356];h=e;c=42;break;case 1:c=HEAP[h]==12?3:2;break;case 2:c=HEAP[h]==0?3:11;break;case 3:c=HEAP[d+416+12]!=HEAP[d+416+8]?6:4;break;case 4:c=bb(d+416)!=0?6:5;break;case 5:f=0;c=44;break;case 6:j=HEAP[d+416+12];HEAP[j]=0;HEAP[d+416+12]=j+1;j=c=ka(g,HEAP[d+416+16],0);c=c!=0?7:8;break;case 7:HEAP[j+32]=1;c=8;break;case 8:c=HEAP[h]!=0?9:10;break;case 9:h+=1;c=10;break;case 10:e=h;HEAP[d+416+12]=HEAP[d+416+16];c=42;break;case 11:var l=
HEAP[d+416+12],m=d+416;c=HEAP[h]==61?12:38;break;case 12:c=l==HEAP[m+16]?13:14;break;case 13:k=g+152;c=23;break;case 14:c=HEAP[d+416+12]!=HEAP[d+416+8]?17:15;break;case 15:c=bb(d+416)!=0?17:16;break;case 16:f=0;c=44;break;case 17:k=HEAP[d+416+12];HEAP[k]=0;HEAP[d+416+12]=k+1;k=c=ka(g+60,HEAP[d+416+16],8);c=c==0?18:19;break;case 18:f=0;c=44;break;case 19:c=HEAP[k]==HEAP[d+416+16]?20:22;break;case 20:c=ja(g+80,HEAP[k]);HEAP[k]=c;c=HEAP[k]==0?21:22;break;case 21:f=0;c=44;break;case 22:HEAP[d+416+12]=
HEAP[d+416+16];c=23;break;case 23:e=h+1;c=28;break;case 24:c=HEAP[d+416+12]!=HEAP[d+416+8]?27:25;break;case 25:c=bb(d+416)!=0?27:26;break;case 26:f=0;c=44;break;case 27:c=HEAP[d+416+12];HEAP[c]=HEAP[e];HEAP[d+416+12]=c+1;e+=1;c=28;break;case 28:c=HEAP[e]==12?30:29;break;case 29:c=HEAP[e]!=0?24:30;break;case 30:c=HEAP[d+416+12]!=HEAP[d+416+8]?33:31;break;case 31:c=bb(d+416)!=0?33:32;break;case 32:f=0;c=44;break;case 33:c=HEAP[d+416+12];HEAP[c]=0;HEAP[d+416+12]=c+1;c=H(d,k,0,HEAP[d+416+16],d+372)!=
0?34:35;break;case 34:f=0;c=44;break;case 35:HEAP[d+416+12]=HEAP[d+416+16];c=HEAP[e]!=0?36:37;break;case 36:e+=1;c=37;break;case 37:h=e;c=42;break;case 38:c=l!=HEAP[m+8]?41:39;break;case 39:c=bb(d+416)!=0?41:40;break;case 40:f=0;c=44;break;case 41:c=HEAP[d+416+12];HEAP[c]=HEAP[h];HEAP[d+416+12]=c+1;h+=1;c=42;break;case 42:c=HEAP[e]!=0?1:43;break;case 43:f=1;c=44;break;case 44:return d=f,d&255;default:assert(0,"bad label: "+c)}}function Ta(a){var b;for(b=-1;;)switch(b){case -1:var c,d,e;e=d=c=a;b=
HEAP[e]!=0?1:7;break;case 1:b=HEAP[e];b=b==10?2:b==13?2:b==32?2:5;break;case 2:b=d!=c?3:6;break;case 3:b=HEAP[d+-1]!=32?4:6;break;case 4:HEAP[d]=32;d+=1;b=6;break;case 5:HEAP[d]=HEAP[e];d+=1;b=6;break;case 6:e+=1;b=HEAP[e]!=0?1:7;break;case 7:b=d!=c?8:10;break;case 8:b=HEAP[d+-1]==32?9:10;break;case 9:d+=-1;b=10;break;case 10:HEAP[d]=0;return;default:assert(0,"bad label: "+b)}}function Ea(a,b,c){var d=STACKTOP;STACKTOP+=8;_memset(d,0,8);var e;for(e=-1;;)switch(e){case -1:var f,g,h,j=d,k,l,m,n,o,p,
q,r;f=a;g=b;e=c;l=k=0;La(j,e);e=1;break;case 1:o=e=Za(j);e=e==0?27:2;break;case 2:n=ja(g,HEAP[o]);e=n==0?3:4;break;case 3:h=0;e=28;break;case 4:m=ka(f,n,36);e=m==0?5:6;break;case 5:h=0;e=28;break;case 6:var s=o;e=HEAP[o+16]!=0?7:19;break;case 7:p=ja(g,HEAP[s+16]);e=p==0?8:9;break;case 8:h=0;e=28;break;case 9:HEAP[m+16]=p;e=HEAP[o+20]!=0?10:15;break;case 10:e=HEAP[o+20]==k?11:12;break;case 11:HEAP[m+20]=l;e=15;break;case 12:k=HEAP[o+20];p=ja(g,k);e=p==0?13:14;break;case 13:h=0;e=28;break;case 14:HEAP[m+
20]=p;l=HEAP[m+20];e=15;break;case 15:e=HEAP[o+24]!=0?16:22;break;case 16:p=ja(g,HEAP[o+24]);e=p==0?17:18;break;case 17:h=0;e=28;break;case 18:HEAP[m+24]=p;e=22;break;case 19:a:{q=g;e=HEAP[o+4];for(var u=HEAP[s+8],t=void 0,B=null,t=-1;;)switch(t){case -1:var P,v,O,ea;P=q;v=e;O=u;HEAP[P+12]==0?(B=-1,t=1):(B=-1,t=8);break;case 1:t=bb(P)==0?2:7;break;case 2:ea=0;t=10;break;case 3:t=HEAP[x+12]!=HEAP[P+8]?6:4;break;case 4:t=bb(P)!=0?6:5;break;case 5:ea=0;t=10;break;case 6:var T=HEAP[P+12];HEAP[T]=HEAP[v];
HEAP[P+12]=T+1;O=T=O-1;v+=1;B=6;t=8;break;case 7:var w=O,B=7,t=8;break;case 8:var x=P,t=(B==6?T:B==7?w:u)>0?3:9;break;case 9:v=HEAP[x+16];HEAP[P+16]=HEAP[P+12];ea=v;t=10;break;case 10:q=ea;break a;default:assert(0,"bad label: "+t)}q=void 0}e=q==0?20:21;break;case 20:h=0;e=28;break;case 21:HEAP[m+4]=q;HEAP[m+8]=HEAP[o+8];e=22;break;case 22:e=HEAP[o+28]!=0?23:26;break;case 23:r=ja(g,HEAP[o+28]);e=r==0?24:25;break;case 24:h=0;e=28;break;case 25:HEAP[m+28]=r;e=26;break;case 26:HEAP[m+33]=HEAP[o+33];HEAP[m+
34]=HEAP[o+34];e=1;break;case 27:h=1;e=28;break;case 28:return a=h,STACKTOP=d,a;default:assert(0,"bad label: "+e)}}function Ga(a){var b,c=null;for(b=-1;;)switch(b){case -1:var d;d=a;var e=b=0;HEAP[d]!=0?(c=-1,b=1):(c=-1,b=2);break;case 1:b=HEAP[d]^(c==1?f:e)*1000003;d+=1;var f=b;HEAP[d]!=0?b=c=1:(c=1,b=2);break;case 2:return a=c==-1?e:f;default:assert(0,"bad label: "+b)}}function ka(a,b,c){var d,e=null;for(d=-1;;)switch(d){case -1:var f,g,h,j,k,l,m,n,o,p,q,r,s,u,t,B;f=a;g=b;h=c;d=HEAP[f+8]==0?1:6;
break;case 1:d=h==0?2:3;break;case 2:j=0;d=41;break;case 3:HEAP[f+4]=6;HEAP[f+8]=64;l=HEAP[f+8]*4;var P=FUNCTION_TABLE[HEAP[HEAP[f+16]]](l);HEAP[f]=P;P=f;d=HEAP[f]==0?4:5;break;case 4:j=HEAP[P+8]=0;d=41;break;case 5:_llvm_memset_p0i8_i32(HEAP[P],0,l,1,0);k=Ga(g);k&=HEAP[f+8]-1;d=38;break;case 6:m=Ga(g);n=HEAP[f+8]-1;o=0;k=n&m;d=14;break;case 7:a:{d=g;for(var v=HEAP[HEAP[HEAP[f]+4*k]],O=void 0,O=-1;;)switch(O){case -1:var ea,T,w;ea=d;T=v;O=4;break;case 1:O=HEAP[ea]==0?2:3;break;case 2:w=1;O=6;break;
case 3:ea+=1;T+=1;O=4;break;case 4:O=HEAP[ea]==HEAP[T]?1:5;break;case 5:w=0;O=6;break;case 6:d=w;d&=255;break a;default:assert(0,"bad label: "+O)}d=void 0}d=d!=0?8:9;break;case 8:j=HEAP[HEAP[f]+4*k];d=41;break;case 9:d=o==0?10:11;break;case 10:o=(m&(n^-1))>>>HEAP[f+4]-1&255&n>>>2&255|1;d=11;break;case 11:d=o>k?12:13;break;case 12:k=k+HEAP[f+8]+(0-o);d=14;break;case 13:k-=o;d=14;break;case 14:d=HEAP[HEAP[f]+4*k]!=0?7:15;break;case 15:d=h==0?16:17;break;case 16:j=0;d=41;break;case 17:d=HEAP[f+12]>>>
HEAP[f+4]-1!=0?18:38;break;case 18:p=HEAP[f+4]+1;q=1<<p;r=q-1;s=q*4;u=FUNCTION_TABLE[HEAP[HEAP[f+16]]](s);d=u==0?19:20;break;case 19:j=0;d=41;break;case 20:_llvm_memset_p0i8_i32(u,0,s,1,0);k=0;var x=f;HEAP[f+8]>k?(e=20,d=21):(e=20,d=31);break;case 21:d=HEAP[HEAP[e==30?za:x]+4*k]!=0?22:30;break;case 22:t=Ga(HEAP[HEAP[HEAP[f]+4*k]]);B=r&t;o=0;d=HEAP[u+4*B]!=0?23:29;break;case 23:d=o==0?24:25;break;case 24:o=(t&(r^-1))>>>p-1&255&r>>>2&255|1;d=25;break;case 25:var H=o;d=o>B?26:28;break;case 26:B=q+(0-
H)+B;d=27;break;case 27:d=HEAP[u+4*B]!=0?23:29;break;case 28:B-=H;d=27;break;case 29:HEAP[u+4*B]=HEAP[HEAP[f]+4*k];d=30;break;case 30:k+=1;var za=f;HEAP[f+8]>k?(e=30,d=21):(e=30,d=31);break;case 31:FUNCTION_TABLE[HEAP[HEAP[(e==20?x:za)+16]+8]](HEAP[f]);HEAP[f]=u;HEAP[f+4]=p;HEAP[f+8]=q;k=r&m;o=0;d=HEAP[HEAP[f]+4*k]!=0?32:38;break;case 32:d=o==0?33:34;break;case 33:o=(m&(r^-1))>>>p-1&255&r>>>2&255|1;d=34;break;case 34:var ga=o;d=o>k?35:37;break;case 35:k=q+(0-ga)+k;d=36;break;case 36:d=HEAP[HEAP[f]+
4*k]!=0?32:38;break;case 37:k-=ga;d=36;break;case 38:d=HEAP[f];v=FUNCTION_TABLE[HEAP[HEAP[f+16]]](h);HEAP[d+4*k]=v;d=HEAP[HEAP[f]+4*k]==0?39:40;break;case 39:j=0;d=41;break;case 40:_llvm_memset_p0i8_i32(HEAP[HEAP[f]+4*k],0,h,1,0);HEAP[HEAP[HEAP[f]+4*k]]=g;HEAP[f+12]+=1;j=HEAP[HEAP[f]+4*k];d=41;break;case 41:return a=j;default:assert(0,"bad label: "+d)}}function Fa(a){var b,c=null;for(b=-1;;)switch(b){case -1:var d,e;d=a;e=0;var f=HEAP[HEAP[d+16]+8],g=HEAP[d];HEAP[d+8]>e?(c=-1,b=1):(c=-1,b=2);break;
case 1:FUNCTION_TABLE[c==1?h:f](HEAP[(c==1?j:g)+4*e]);e+=1;var h=HEAP[HEAP[d+16]+8],j=HEAP[d];HEAP[d+8]>e?b=c=1:(c=1,b=2);break;case 2:FUNCTION_TABLE[c==-1?f:h](c==-1?g:j);return;default:assert(0,"bad label: "+b)}}function ma(a,b){HEAP[a+4]=0;HEAP[a+8]=0;HEAP[a+12]=0;HEAP[a]=0;HEAP[a+16]=b}function La(a,b){HEAP[a]=HEAP[b];HEAP[a+4]=HEAP[a]+4*HEAP[b+8]}function Za(a){var b;for(b=-1;;)switch(b){case -1:var c,d,e;c=a;b=3;break;case 1:b=HEAP[c];e=HEAP[b];HEAP[c]=b+4;b=e!=0?2:3;break;case 2:d=e;b=5;break;
case 3:b=HEAP[c]!=HEAP[c+4]?1:4;break;case 4:d=0;b=5;break;case 5:return a=d;default:assert(0,"bad label: "+b)}}function Ka(a,b){HEAP[a]=0;HEAP[a+4]=0;HEAP[a+16]=0;HEAP[a+12]=0;HEAP[a+8]=0;HEAP[a+20]=b}function Ra(a){var b;for(b=-1;;)switch(b){case -1:var c,d;c=a;var e=HEAP[c];b=HEAP[c+4]==0?1:2;break;case 1:HEAP[c+4]=e;b=4;break;case 2:d=e;b=e!=0?3:4;break;case 3:b=HEAP[d];HEAP[d]=HEAP[c+4];HEAP[c+4]=d;d=b;b=b!=0?3:4;break;case 4:HEAP[c]=0;HEAP[c+16]=0;HEAP[c+12]=0;HEAP[c+8]=0;return;default:assert(0,
"bad label: "+b)}}function $a(a){var b;for(b=-1;;)switch(b){case -1:var c,d;c=a;d=HEAP[c];b=HEAP[c]!=0?1:2;break;case 1:b=HEAP[d];FUNCTION_TABLE[HEAP[HEAP[c+20]+8]](d);d=b;b=b!=0?1:2;break;case 2:d=HEAP[c+4];b=HEAP[c+4]!=0?3:4;break;case 3:b=HEAP[d];FUNCTION_TABLE[HEAP[HEAP[c+20]+8]](d);d=b;b=b!=0?3:4;break;case 4:return;default:assert(0,"bad label: "+b)}}function Ja(a,b,c,d){var e=STACKTOP;STACKTOP+=4;_memset(e,0,4);var f;for(f=-1;;)switch(f){case -1:var g,h,j=e,k,l;g=a;h=b;HEAP[j]=c;k=d;f=HEAP[g+
12]==0?1:3;break;case 1:f=bb(g)==0?2:3;break;case 2:l=0;f=7;break;case 3:FUNCTION_TABLE[HEAP[h+60]](h,j,k,g+12,HEAP[g+8]);var m=g;f=HEAP[j]==k?6:4;break;case 4:f=bb(m)==0?5:3;break;case 5:l=0;f=7;break;case 6:l=HEAP[m+16];f=7;break;case 7:return a=l,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function ja(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f;d=a;e=b;c=1;break;case 1:c=HEAP[d+12]!=HEAP[d+8]?4:2;break;case 2:c=bb(d)!=0?4:3;break;case 3:f=0;c=6;break;case 4:c=HEAP[d+12];HEAP[c]=HEAP[e];
HEAP[d+12]=c+1;c=HEAP[e]!=0;e+=1;c=c!=0?1:5;break;case 5:e=HEAP[d+16];HEAP[d+16]=HEAP[d+12];f=e;c=6;break;case 6:return d=f;default:assert(0,"bad label: "+c)}}function ua(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g;f=a;e=Ja(f,b,c,d)==0?1:2;break;case 1:g=0;e=6;break;case 2:e=HEAP[f+12]==HEAP[f+8]?3:5;break;case 3:e=bb(f)==0?4:5;break;case 4:g=0;e=6;break;case 5:e=HEAP[f+12];HEAP[e]=0;HEAP[f+12]=e+1;g=HEAP[f+16];e=6;break;case 6:return a=g;default:assert(0,"bad label: "+e)}}function bb(a){var b;
for(b=-1;;)switch(b){case -1:var c,d,e,f,g;c=a;b=HEAP[c+4]!=0?1:5;break;case 1:var h=c;b=HEAP[c+16]==0?2:3;break;case 2:HEAP[c]=HEAP[h+4];HEAP[c+4]=HEAP[HEAP[c+4]];HEAP[HEAP[c]]=0;HEAP[c+16]=HEAP[c]+8;HEAP[c+8]=HEAP[c+16]+HEAP[HEAP[c]+4];HEAP[c+12]=HEAP[c+16];d=1;b=19;break;case 3:b=HEAP[h+8]-HEAP[c+16]<HEAP[HEAP[c+4]+4]?4:5;break;case 4:d=HEAP[HEAP[c+4]];HEAP[HEAP[c+4]]=HEAP[c];HEAP[c]=HEAP[c+4];HEAP[c+4]=d;_llvm_memcpy_p0i8_p0i8_i32(HEAP[c]+8,HEAP[c+16],HEAP[c+8]-HEAP[c+16],1,0);HEAP[c+12]=HEAP[c]+
8+(HEAP[c+12]-HEAP[c+16]);HEAP[c+16]=HEAP[c]+8;HEAP[c+8]=HEAP[c+16]+HEAP[HEAP[c]+4];d=1;b=19;break;case 5:b=HEAP[c]==0?10:6;break;case 6:b=HEAP[c+16]!=HEAP[c]+8?10:7;break;case 7:e=(HEAP[c+8]-HEAP[c+16])*2;b=FUNCTION_TABLE[HEAP[HEAP[c+20]+4]](HEAP[c],e+8);HEAP[c]=b;b=HEAP[c]==0?8:9;break;case 8:d=0;b=19;break;case 9:HEAP[HEAP[c]+4]=e;HEAP[c+12]=HEAP[c]+8+(HEAP[c+12]-HEAP[c+16]);HEAP[c+16]=HEAP[c]+8;HEAP[c+8]=HEAP[c+16]+e;b=18;break;case 10:g=HEAP[c+8]-HEAP[c+16];b=HEAP[c+8]-HEAP[c+16]<=1023?11:12;
break;case 11:g=1024;b=13;break;case 12:g*=2;b=13;break;case 13:f=b=FUNCTION_TABLE[HEAP[HEAP[c+20]]](g+8);b=b==0?14:15;break;case 14:d=0;b=19;break;case 15:HEAP[f+4]=g;HEAP[f]=HEAP[c];HEAP[c]=f;b=HEAP[c+12]!=HEAP[c+16]?16:17;break;case 16:_llvm_memcpy_p0i8_p0i8_i32(f+8,HEAP[c+16],HEAP[c+12]-HEAP[c+16],1,0);b=17;break;case 17:HEAP[c+12]=f+8+(HEAP[c+12]-HEAP[c+16]);HEAP[c+16]=f+8;HEAP[c+8]=f+8+g;b=18;break;case 18:d=1;b=19;break;case 19:return a=d,a&255;default:assert(0,"bad label: "+b)}}function qa(a){var b;
for(b=-1;;)switch(b){case -1:var c,d,e,f,g,h,j;c=a;e=HEAP[c+356];b=HEAP[e+184]==0?1:4;break;case 1:b=FUNCTION_TABLE[HEAP[c+12]](HEAP[c+468]*4);HEAP[e+184]=b;b=HEAP[e+184]==0?2:3;break;case 2:d=-1;b=20;break;case 3:HEAP[HEAP[e+184]]=0;b=4;break;case 4:b=HEAP[e+176]>=HEAP[e+172]?5:13;break;case 5:var k=c+12;b=HEAP[e+164]!=0?6:9;break;case 6:h=FUNCTION_TABLE[HEAP[k+4]](HEAP[e+164],HEAP[e+172]*56);b=h==0?7:8;break;case 7:d=-1;b=20;break;case 8:HEAP[e+172]*=2;b=12;break;case 9:h=FUNCTION_TABLE[HEAP[k]](896);
b=h==0?10:11;break;case 10:d=-1;b=20;break;case 11:HEAP[e+172]=32;b=12;break;case 12:HEAP[e+164]=h;b=13;break;case 13:g=HEAP[e+176];HEAP[e+176]+=1;f=HEAP[e+164]+28*g;b=HEAP[e+180]!=0?14:19;break;case 14:j=HEAP[e+164]+28*HEAP[HEAP[e+184]+4*(HEAP[e+180]-1)];b=HEAP[j+16]!=0?15:16;break;case 15:HEAP[HEAP[e+164]+28*HEAP[j+16]+24]=g;b=16;break;case 16:b=HEAP[j+20]==0?17:18;break;case 17:HEAP[j+12]=g;b=18;break;case 18:HEAP[j+16]=g;HEAP[j+20]+=1;b=19;break;case 19:HEAP[f+24]=0;HEAP[f+20]=HEAP[f+24];HEAP[f+
16]=HEAP[f+20];HEAP[f+12]=HEAP[f+16];d=g;b=20;break;case 20:return a=d;default:assert(0,"bad label: "+b)}}function P(a,b,c,d,e){var f,g=null;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n,o,p,q;h=a;j=b;k=c;l=d;m=e;n=HEAP[h+356];HEAP[k]=HEAP[HEAP[n+164]+28*j];HEAP[k+4]=HEAP[HEAP[n+164]+28*j+4];f=HEAP[k]==4?1:4;break;case 1:HEAP[k+8]=HEAP[m];o=HEAP[HEAP[n+164]+28*j+8];f=HEAP[m];HEAP[f]=HEAP[o];HEAP[m]=f+1;f=HEAP[o]==0?3:2;break;case 2:o+=1;f=HEAP[m];HEAP[f]=HEAP[o];HEAP[m]=f+1;f=HEAP[o]==0?3:2;break;
case 3:HEAP[k+12]=0;HEAP[k+16]=0;f=7;break;case 4:HEAP[k+12]=HEAP[HEAP[n+164]+28*j+20];HEAP[k+16]=HEAP[l];HEAP[l]+=20*HEAP[k+12];p=0;q=HEAP[HEAP[n+164]+28*j+12];var r=k;HEAP[k+12]>p?(g=4,f=5):(g=4,f=6);break;case 5:P(h,q,HEAP[(g==5?s:r)+16]+20*p,l,m);p+=1;q=HEAP[HEAP[n+164]+28*q+24];var s=k;HEAP[k+12]>p?f=g=5:(g=5,f=6);break;case 6:HEAP[(g==4?r:s)+8]=0;f=7;break;case 7:return;default:assert(0,"bad label: "+f)}}function hb(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,k,l;f=a;e=b;g=c;h=d;
k=HEAP[f+356];g=ua(k+80,e,g,h);e=g==0?1:2;break;case 1:j=0;e=9;break;case 2:l=ka(k+20,g,24);e=l==0?3:4;break;case 3:j=0;e=9;break;case 4:var m=k+80;e=HEAP[l]!=g?5:6;break;case 5:HEAP[k+80+12]=HEAP[m+16];e=8;break;case 6:HEAP[k+80+16]=HEAP[m+12];e=ia(f,l)==0?7:8;break;case 7:j=0;e=9;break;case 8:j=l;e=9;break;case 9:return a=j;default:assert(0,"bad label: "+e)}}function Qa(a,b,c,d,e){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=d;m=e;f=j;f=f==-4?14:f==11?10:f==13?11:f==15?1:f==
16?2:f==26?13:f==28?12:15;break;case 1:n=0;f=16;break;case 2:f=FUNCTION_TABLE[HEAP[m+28]](m,k+HEAP[m+68]*2,l,bg)!=0?3:4;break;case 3:HEAP[h]=g+110;n=11;f=16;break;case 4:f=FUNCTION_TABLE[HEAP[m+28]](m,k+HEAP[m+68]*2,l,uh)!=0?5:6;break;case 5:HEAP[h]=g+112;n=33;f=16;break;case 6:f=FUNCTION_TABLE[HEAP[m+28]](m,k+HEAP[m+68]*2,l,kg)!=0?7:8;break;case 7:HEAP[h]=g+114;n=39;f=16;break;case 8:f=FUNCTION_TABLE[HEAP[m+28]](m,k+HEAP[m+68]*2,l,vg)!=0?9:15;break;case 9:HEAP[h]=g+116;n=17;f=16;break;case 10:n=
55;f=16;break;case 11:n=56;f=16;break;case 12:n=60;f=16;break;case 13:HEAP[h]=g+118;n=3;f=16;break;case 14:n=0;f=16;break;case 15:n=S(h,j);f=16;break;case 16:return a=n;default:assert(0,"bad label: "+f)}}function mb(a,b,c,d,e){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=d;m=e;f=j;f=f==-4?5:f==15?4:f==26?8:f==33?1:f==34?2:7;break;case 1:HEAP[h]=g+122;n=0;f=9;break;case 2:f=HEAP[h+12]==0?8:3;break;case 3:HEAP[h+12]-=1;n=0;f=9;break;case 4:n=0;f=9;break;case 5:f=HEAP[h+12]!=0?8:
6;break;case 6:n=0;f=9;break;case 7:n=Qa(h,j,k,l,m);f=9;break;case 8:n=S(h,j);f=9;break;case 9:return a=n;default:assert(0,"bad label: "+f)}}function S(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f;d=a;e=b;c=HEAP[d+16]==0?1:3;break;case 1:c=e==28?2:3;break;case 2:f=59;c=4;break;case 3:HEAP[d]=g+96;f=-1;c=4;break;case 4:return c=f;default:assert(0,"bad label: "+c)}}function Ca(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,k;f=a;g=b;h=c;j=d;e=g!=h?1:31;break;case 1:e=HEAP[g]!=45?2:3;break;
case 2:HEAP[j]=g;k=0;e=32;break;case 3:g+=1;e=30;break;case 4:e=HEAP[f+76+HEAP[g]];e=e==0?20:e==1?20:e==5?5:e==6?10:e==7?15:e==8?20:e==27?21:29;break;case 5:e=h-g<=1?6:7;break;case 6:k=-2;e=32;break;case 7:e=FUNCTION_TABLE[HEAP[f+356]](f,g)!=0?8:9;break;case 8:HEAP[j]=g;k=0;e=32;break;case 9:g+=2;e=30;break;case 10:e=h-g<=2?11:12;break;case 11:k=-2;e=32;break;case 12:e=FUNCTION_TABLE[HEAP[f+360]](f,g)!=0?13:14;break;case 13:HEAP[j]=g;k=0;e=32;break;case 14:g+=3;e=30;break;case 15:e=h-g<=3?16:17;break;
case 16:k=-2;e=32;break;case 17:e=FUNCTION_TABLE[HEAP[f+364]](f,g)!=0?18:19;break;case 18:HEAP[j]=g;k=0;e=32;break;case 19:g+=4;e=30;break;case 20:HEAP[j]=g;k=0;e=32;break;case 21:g+=1;e=g==h?22:23;break;case 22:k=-1;e=32;break;case 23:e=HEAP[g]==45?24:30;break;case 24:g+=1;e=g==h?25:26;break;case 25:k=-1;e=32;break;case 26:e=HEAP[g]!=62?27:28;break;case 27:HEAP[j]=g;k=0;e=32;break;case 28:HEAP[j]=g+1;k=13;e=32;break;case 29:g+=1;e=30;break;case 30:e=g!=h?4:31;break;case 31:k=-1;e=32;break;case 32:return a=
k;default:assert(0,"bad label: "+e)}}function pa(a,b,c,d){for(a=-1;;)switch(a){case -1:var e,f,g,h;e=b;a=c;f=d;h=0;HEAP[f]=11;a=a-e!=3?1:2;break;case 1:g=1;a=14;break;case 2:a=HEAP[e];a=a==88?3:a==120?5:4;break;case 3:h=1;a=5;break;case 4:g=1;a=14;break;case 5:e+=1;a=HEAP[e];a=a==77?6:a==109?8:7;break;case 6:h=1;a=8;break;case 7:g=1;a=14;break;case 8:e+=1;a=HEAP[e];a=a==76?9:a==108?11:10;break;case 9:h=1;a=12;break;case 10:g=1;a=14;break;case 11:a=h!=0?12:13;break;case 12:g=0;a=14;break;case 13:HEAP[f]=
12;g=1;a=14;break;case 14:return b=g;default:assert(0,"bad label: "+a)}}function Aa(a,b,c,d){var e=STACKTOP;STACKTOP+=4;_memset(e,0,4);var f;for(f=-1;;)switch(f){case -1:var g,h,j,k,l,m=e,n;g=a;h=b;j=c;k=d;n=h;f=h==j?1:2;break;case 1:l=-1;f=75;break;case 2:f=HEAP[g+76+HEAP[h]];f=f==5?5:f==6?10:f==7?15:f==22?4:f==24?4:f==29?3:20;break;case 3:HEAP[k]=h;l=0;f=75;break;case 4:h+=1;f=73;break;case 5:f=j-h<=1?6:7;break;case 6:l=-2;f=75;break;case 7:f=FUNCTION_TABLE[HEAP[g+344]](g,h)==0?8:9;break;case 8:HEAP[k]=
h;l=0;f=75;break;case 9:h+=2;f=73;break;case 10:f=j-h<=2?11:12;break;case 11:l=-2;f=75;break;case 12:f=FUNCTION_TABLE[HEAP[g+348]](g,h)==0?13:14;break;case 13:HEAP[k]=h;l=0;f=75;break;case 14:h+=3;f=73;break;case 15:f=j-h<=3?16:17;break;case 16:l=-2;f=75;break;case 17:f=FUNCTION_TABLE[HEAP[g+352]](g,h)==0?18:19;break;case 18:HEAP[k]=h;l=0;f=75;break;case 19:h+=4;f=73;break;case 20:HEAP[k]=h;l=0;f=75;break;case 21:f=HEAP[g+76+HEAP[h]];f=f==5?24:f==6?29:f==7?34:f==9?39:f==10?39:f==15?66:f==21?39:f==
22?23:f==24?23:f==25?23:f==26?23:f==27?23:f==29?22:72;break;case 22:HEAP[k]=h;l=0;f=75;break;case 23:h+=1;f=73;break;case 24:f=j-h<=1?25:26;break;case 25:l=-2;f=75;break;case 26:f=FUNCTION_TABLE[HEAP[g+332]](g,h)==0?27:28;break;case 27:HEAP[k]=h;l=0;f=75;break;case 28:h+=2;f=73;break;case 29:f=j-h<=2?30:31;break;case 30:l=-2;f=75;break;case 31:f=FUNCTION_TABLE[HEAP[g+336]](g,h)==0?32:33;break;case 32:HEAP[k]=h;l=0;f=75;break;case 33:h+=3;f=73;break;case 34:f=j-h<=3?35:36;break;case 35:l=-2;f=75;break;
case 36:f=FUNCTION_TABLE[HEAP[g+340]](g,h)==0?37:38;break;case 37:HEAP[k]=h;l=0;f=75;break;case 38:h+=4;f=73;break;case 39:f=pa(g,n,h,m)==0?40:41;break;case 40:HEAP[k]=h;l=0;f=75;break;case 41:h+=1;f=64;break;case 42:f=HEAP[g+76+HEAP[h]];f=f==0?58:f==1?58:f==5?43:f==6?48:f==7?53:f==8?58:f==15?59:63;break;case 43:f=j-h<=1?44:45;break;case 44:l=-2;f=75;break;case 45:f=FUNCTION_TABLE[HEAP[g+356]](g,h)!=0?46:47;break;case 46:HEAP[k]=h;l=0;f=75;break;case 47:h+=2;f=64;break;case 48:f=j-h<=2?49:50;break;
case 49:l=-2;f=75;break;case 50:f=FUNCTION_TABLE[HEAP[g+360]](g,h)!=0?51:52;break;case 51:HEAP[k]=h;l=0;f=75;break;case 52:h+=3;f=64;break;case 53:f=j-h<=3?54:55;break;case 54:l=-2;f=75;break;case 55:f=FUNCTION_TABLE[HEAP[g+364]](g,h)!=0?56:57;break;case 56:HEAP[k]=h;l=0;f=75;break;case 57:h+=4;f=64;break;case 58:HEAP[k]=h;l=0;f=75;break;case 59:h+=1;f=h==j?60:61;break;case 60:l=-1;f=75;break;case 61:f=HEAP[h]==62?62:64;break;case 62:HEAP[k]=h+1;l=HEAP[m];f=75;break;case 63:h+=1;f=64;break;case 64:f=
h!=j?42:65;break;case 65:l=-1;f=75;break;case 66:f=pa(g,n,h,m)==0?67:68;break;case 67:HEAP[k]=h;l=0;f=75;break;case 68:h+=1;f=h==j?69:70;break;case 69:l=-1;f=75;break;case 70:f=HEAP[h]==62?71:72;break;case 71:HEAP[k]=h+1;l=HEAP[m];f=75;break;case 72:HEAP[k]=h;l=0;f=75;break;case 73:f=h!=j?21:74;break;case 74:l=-1;f=75;break;case 75:return a=l,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function ob(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,k;f=a;g=b;h=c;j=d;e=g==h?1:2;break;case 1:k=
-1;e=44;break;case 2:e=HEAP[f+76+HEAP[g]];e=e==5?5:e==6?10:e==7?15:e==19?20:e==22?4:e==24?4:e==29?3:21;break;case 3:HEAP[j]=g;k=0;e=44;break;case 4:g+=1;e=42;break;case 5:e=h-g<=1?6:7;break;case 6:k=-2;e=44;break;case 7:e=FUNCTION_TABLE[HEAP[f+344]](f,g)==0?8:9;break;case 8:HEAP[j]=g;k=0;e=44;break;case 9:g+=2;e=42;break;case 10:e=h-g<=2?11:12;break;case 11:k=-2;e=44;break;case 12:e=FUNCTION_TABLE[HEAP[f+348]](f,g)==0?13:14;break;case 13:HEAP[j]=g;k=0;e=44;break;case 14:g+=3;e=42;break;case 15:e=
h-g<=3?16:17;break;case 16:k=-2;e=44;break;case 17:e=FUNCTION_TABLE[HEAP[f+352]](f,g)==0?18:19;break;case 18:HEAP[j]=g;k=0;e=44;break;case 19:g+=4;e=42;break;case 20:a:{k=f;e=g+1;for(var l=h,m=j,n=void 0,n=-1;;)switch(n){case -1:var o,p,q,r,s;o=k;p=e;q=l;r=m;n=p!=q?1:11;break;case 1:n=HEAP[p]==120?2:3;break;case 2:b:{s=o;for(var n=p+1,u=q,t=r,B=void 0,B=-1;;)switch(B){case -1:var P,v,O,ea,T;P=s;v=n;O=u;ea=t;B=v!=O?1:9;break;case 1:B=HEAP[P+76+HEAP[v]]+-24<2?2:3;break;case 2:v+=1;B=8;break;case 3:HEAP[ea]=
v;T=0;B=10;break;case 4:B=HEAP[P+76+HEAP[v]];B=B==18?6:B==24?5:B==25?5:7;break;case 5:v+=1;B=8;break;case 6:HEAP[ea]=v+1;B=T=10;break;case 7:HEAP[ea]=v;T=0;B=10;break;case 8:B=v!=O?4:9;break;case 9:T=-1;B=10;break;case 10:s=T;break b;default:assert(0,"bad label: "+B)}s=void 0}n=12;break;case 3:n=HEAP[o+76+HEAP[p]]==25?4:5;break;case 4:p+=1;n=10;break;case 5:HEAP[r]=p;s=0;n=12;break;case 6:n=HEAP[o+76+HEAP[p]];n=n==18?8:n==25?7:9;break;case 7:p+=1;n=10;break;case 8:HEAP[r]=p+1;s=10;n=12;break;case 9:HEAP[r]=
p;s=0;n=12;break;case 10:n=p!=q?6:11;break;case 11:s=-1;n=12;break;case 12:k=s;break a;default:assert(0,"bad label: "+n)}k=void 0}e=44;break;case 21:HEAP[j]=g;k=0;e=44;break;case 22:e=HEAP[f+76+HEAP[g]];e=e==5?25:e==6?30:e==7?35:e==18?40:e==22?24:e==24?24:e==25?24:e==26?24:e==27?24:e==29?23:41;break;case 23:HEAP[j]=g;k=0;e=44;break;case 24:g+=1;e=42;break;case 25:e=h-g<=1?26:27;break;case 26:k=-2;e=44;break;case 27:e=FUNCTION_TABLE[HEAP[f+332]](f,g)==0?28:29;break;case 28:HEAP[j]=g;k=0;e=44;break;
case 29:g+=2;e=42;break;case 30:e=h-g<=2?31:32;break;case 31:k=-2;e=44;break;case 32:e=FUNCTION_TABLE[HEAP[f+336]](f,g)==0?33:34;break;case 33:HEAP[j]=g;k=0;e=44;break;case 34:g+=3;e=42;break;case 35:e=h-g<=3?36:37;break;case 36:k=-2;e=44;break;case 37:e=FUNCTION_TABLE[HEAP[f+340]](f,g)==0?38:39;break;case 38:HEAP[j]=g;k=0;e=44;break;case 39:g+=4;e=42;break;case 40:HEAP[j]=g+1;k=9;e=44;break;case 41:HEAP[j]=g;k=0;e=44;break;case 42:e=g!=h?22:43;break;case 43:k=-1;e=44;break;case 44:return a=k;default:assert(0,
"bad label: "+e)}}function ib(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,k;f=a;g=b;h=c;j=d;e=g==h?1:2;break;case 1:k=-22;e=44;break;case 2:e=HEAP[f+76+HEAP[g]];e=e==5?5:e==6?10:e==7?15:e==9?20:e==10?20:e==21?20:e==22?4:e==24?4:e==29?3:e==30?20:21;break;case 3:HEAP[j]=g;k=0;e=44;break;case 4:g+=1;e=42;break;case 5:e=h-g<=1?6:7;break;case 6:k=-2;e=44;break;case 7:e=FUNCTION_TABLE[HEAP[f+344]](f,g)==0?8:9;break;case 8:HEAP[j]=g;k=0;e=44;break;case 9:g+=2;e=42;break;case 10:e=h-g<=2?11:12;
break;case 11:k=-2;e=44;break;case 12:e=FUNCTION_TABLE[HEAP[f+348]](f,g)==0?13:14;break;case 13:HEAP[j]=g;k=0;e=44;break;case 14:g+=3;e=42;break;case 15:e=h-g<=3?16:17;break;case 16:k=-2;e=44;break;case 17:e=FUNCTION_TABLE[HEAP[f+352]](f,g)==0?18:19;break;case 18:HEAP[j]=g;k=0;e=44;break;case 19:g+=4;e=42;break;case 20:HEAP[j]=g;k=22;e=44;break;case 21:HEAP[j]=g;k=0;e=44;break;case 22:e=HEAP[f+76+HEAP[g]];e=e==5?25:e==6?30:e==7?35:e==18?40:e==22?24:e==24?24:e==25?24:e==26?24:e==27?24:e==29?23:41;
break;case 23:HEAP[j]=g;k=0;e=44;break;case 24:g+=1;e=42;break;case 25:e=h-g<=1?26:27;break;case 26:k=-2;e=44;break;case 27:e=FUNCTION_TABLE[HEAP[f+332]](f,g)==0?28:29;break;case 28:HEAP[j]=g;k=0;e=44;break;case 29:g+=2;e=42;break;case 30:e=h-g<=2?31:32;break;case 31:k=-2;e=44;break;case 32:e=FUNCTION_TABLE[HEAP[f+336]](f,g)==0?33:34;break;case 33:HEAP[j]=g;k=0;e=44;break;case 34:g+=3;e=42;break;case 35:e=h-g<=3?36:37;break;case 36:k=-2;e=44;break;case 37:e=FUNCTION_TABLE[HEAP[f+340]](f,g)==0?38:
39;break;case 38:HEAP[j]=g;k=0;e=44;break;case 39:g+=4;e=42;break;case 40:HEAP[j]=g+1;k=28;e=44;break;case 41:HEAP[j]=g;k=0;e=44;break;case 42:e=g!=h?22:43;break;case 43:k=-1;e=44;break;case 44:return a=k;default:assert(0,"bad label: "+e)}}function ca(a,b,c,d,e){var f;for(f=-1;;)switch(f){case -1:var g,h,j,k,l,m,n;g=a;h=b;j=c;k=d;l=e;f=25;break;case 1:f=n=HEAP[h+76+HEAP[j]];f=f==0?17:f==1?17:f==5?2:f==6?7:f==7?12:f==8?17:f==12?18:f==13?18:24;break;case 2:f=k-j<=1?3:4;break;case 3:m=-2;f=27;break;
case 4:f=FUNCTION_TABLE[HEAP[h+356]](h,j)!=0?5:6;break;case 5:HEAP[l]=j;m=0;f=27;break;case 6:j+=2;f=25;break;case 7:f=k-j<=2?8:9;break;case 8:m=-2;f=27;break;case 9:f=FUNCTION_TABLE[HEAP[h+360]](h,j)!=0?10:11;break;case 10:HEAP[l]=j;m=0;f=27;break;case 11:j+=3;f=25;break;case 12:f=k-j<=3?13:14;break;case 13:m=-2;f=27;break;case 14:f=FUNCTION_TABLE[HEAP[h+364]](h,j)!=0?15:16;break;case 15:HEAP[l]=j;m=0;f=27;break;case 16:j+=4;f=25;break;case 17:HEAP[l]=j;m=0;f=27;break;case 18:j+=1;f=n!=g?25:19;break;
case 19:f=j==k?20:21;break;case 20:m=-27;f=27;break;case 21:HEAP[l]=j;f=HEAP[h+76+HEAP[j]];f=f==9?22:f==10?22:f==11?22:f==20?22:f==21?22:f==30?22:23;break;case 22:f=m=27;break;case 23:m=0;f=27;break;case 24:j+=1;f=25;break;case 25:f=j!=k?1:26;break;case 26:m=-1;f=27;break;case 27:return a=m;default:assert(0,"bad label: "+f)}}function na(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j;f=a;g=b;h=c;j=d;e=g<h?1:12;break;case 1:e=HEAP[f+76+HEAP[g]];e=e==5?2:e==6?3:e==7?4:e==9?6:e==10?5:10;break;
case 2:g+=2;e=11;break;case 3:g+=3;e=11;break;case 4:g+=4;e=11;break;case 5:HEAP[j+4]=-1;HEAP[j]+=1;g+=1;e=11;break;case 6:HEAP[j]+=1;g+=1;e=g!=h?7:9;break;case 7:e=HEAP[f+76+HEAP[g]]==10?8:9;break;case 8:g+=1;e=9;break;case 9:HEAP[j+4]=-1;e=11;break;case 10:g+=1;e=11;break;case 11:HEAP[j+4]+=1;e=g<h?1:12;break;case 12:return;default:assert(0,"bad label: "+e)}}function O(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e;c=a;d=b;c=c==216?1:c==217?1:c==218?1:c==219?1:c==220?2:c==221?2:c==222?2:c==223?
2:c==255?3:5;break;case 1:e=7;c=6;break;case 2:e=8;c=6;break;case 3:c=d+-254<2?4:5;break;case 4:e=0;c=6;break;case 5:e=29;c=6;break;case 6:return d=e;default:assert(0,"bad label: "+c)}}function Ma(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j,k,l;g=a;h=b;j=c;k=d;e=h!=j?1:31;break;case 1:e=HEAP[h+1]!=0?3:2;break;case 2:e=HEAP[h]!=45?3:4;break;case 3:HEAP[k]=h;l=0;e=32;break;case 4:h+=2;e=30;break;case 5:e=HEAP[h+1]==0?6:7;break;case 6:var m=HEAP[g+76+HEAP[h]],f=6;e=8;break;case 7:var n=
O(HEAP[h+1]&255,HEAP[h]&255),f=7;e=8;break;case 8:e=f==7?n:m;e=e==0?18:e==1?18:e==5?9:e==6?12:e==7?15:e==8?18:e==27?19:29;break;case 9:e=j-h<=1?10:11;break;case 10:l=-2;e=32;break;case 11:h+=2;e=30;break;case 12:e=j-h<=2?13:14;break;case 13:l=-2;e=32;break;case 14:h+=3;e=30;break;case 15:e=j-h<=3?16:17;break;case 16:l=-2;e=32;break;case 17:h+=4;e=30;break;case 18:HEAP[k]=h;l=0;e=32;break;case 19:h+=2;e=h==j?20:21;break;case 20:l=-1;e=32;break;case 21:e=HEAP[h+1]==0?22:30;break;case 22:e=HEAP[h]==
45?23:30;break;case 23:h+=2;e=h==j?24:25;break;case 24:l=-1;e=32;break;case 25:e=HEAP[h+1]!=0?27:26;break;case 26:e=HEAP[h]!=62?27:28;break;case 27:HEAP[k]=h;l=0;e=32;break;case 28:HEAP[k]=h+2;l=13;e=32;break;case 29:h+=2;e=30;break;case 30:e=h!=j?5:31;break;case 31:l=-1;e=32;break;case 32:return a=l;default:assert(0,"bad label: "+e)}}function $(a,b,c,d){for(a=-1;;)switch(a){case -1:var e,f,g,h;e=b;a=c;f=d;h=0;HEAP[f]=11;a=a-e!=6?1:2;break;case 1:g=1;a=20;break;case 2:a=HEAP[e+1]==0?4:3;break;case 3:a=
6;break;case 4:a=HEAP[e];a=a==88?5:a==120?7:6;break;case 5:h=1;a=7;break;case 6:g=1;a=20;break;case 7:e+=2;a=HEAP[e+1]==0?9:8;break;case 8:a=11;break;case 9:a=HEAP[e];a=a==77?10:a==109?12:11;break;case 10:h=1;a=12;break;case 11:g=1;a=20;break;case 12:e+=2;a=HEAP[e+1]==0?14:13;break;case 13:a=16;break;case 14:a=HEAP[e];a=a==76?15:a==108?17:16;break;case 15:h=1;a=18;break;case 16:g=1;a=20;break;case 17:a=h!=0?18:19;break;case 18:g=0;a=20;break;case 19:HEAP[f]=12;g=1;a=20;break;case 20:return b=g;default:assert(0,
"bad label: "+a)}}function ga(a,b,c,d){var e=STACKTOP;STACKTOP+=4;_memset(e,0,4);var f,g=null;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n=e,o;h=a;j=b;k=c;l=d;o=j;f=j==k?1:2;break;case 1:m=-1;f=70;break;case 2:f=HEAP[j+1]==0?3:4;break;case 3:var p=HEAP[h+76+HEAP[j]],g=3;f=5;break;case 4:var q=O(HEAP[j+1]&255,HEAP[j]&255),g=4;f=5;break;case 5:f=g==4?q:p;f=f==5?9:f==6?12:f==7?15:f==22?8:f==24?8:f==29?6:18;break;case 6:f=(1<<(HEAP[j]&31)&HEAP[kc+((HEAP[j]>>>5)+HEAP[ud+HEAP[j+1]]*8)*4])==0?7:8;break;
case 7:HEAP[l]=j;m=0;f=70;break;case 8:j+=2;f=68;break;case 9:f=k-j<=1?10:11;break;case 10:m=-2;f=70;break;case 11:HEAP[l]=j;m=0;f=70;break;case 12:f=k-j<=2?13:14;break;case 13:m=-2;f=70;break;case 14:HEAP[l]=j;m=0;f=70;break;case 15:f=k-j<=3?16:17;break;case 16:m=-2;f=70;break;case 17:HEAP[l]=j;m=0;f=70;break;case 18:HEAP[l]=j;m=0;f=70;break;case 19:f=HEAP[j+1]==0?20:21;break;case 20:var r=HEAP[h+76+HEAP[j]],g=20;f=22;break;case 21:var s=O(HEAP[j+1]&255,HEAP[j]&255),g=21;f=22;break;case 22:f=g==
21?s:r;f=f==5?26:f==6?29:f==7?32:f==9?35:f==10?35:f==15?60:f==21?35:f==22?25:f==24?25:f==25?25:f==26?25:f==27?25:f==29?23:67;break;case 23:f=(1<<(HEAP[j]&31)&HEAP[kc+((HEAP[j]>>>5)+HEAP[Jd+HEAP[j+1]]*8)*4])==0?24:25;break;case 24:HEAP[l]=j;m=0;f=70;break;case 25:j+=2;f=68;break;case 26:f=k-j<=1?27:28;break;case 27:m=-2;f=70;break;case 28:HEAP[l]=j;m=0;f=70;break;case 29:f=k-j<=2?30:31;break;case 30:m=-2;f=70;break;case 31:HEAP[l]=j;m=0;f=70;break;case 32:f=k-j<=3?33:34;break;case 33:m=-2;f=70;break;
case 34:HEAP[l]=j;m=0;f=70;break;case 35:f=$(h,o,j,n)==0?36:37;break;case 36:HEAP[l]=j;m=0;f=70;break;case 37:j+=2;f=58;break;case 38:f=HEAP[j+1]==0?39:40;break;case 39:var u=HEAP[h+76+HEAP[j]],g=39;f=41;break;case 40:var t=O(HEAP[j+1]&255,HEAP[j]&255),g=40;f=41;break;case 41:f=g==40?t:u;f=f==0?51:f==1?51:f==5?42:f==6?45:f==7?48:f==8?51:f==15?52:57;break;case 42:f=k-j<=1?43:44;break;case 43:m=-2;f=70;break;case 44:j+=2;f=58;break;case 45:f=k-j<=2?46:47;break;case 46:m=-2;f=70;break;case 47:j+=3;f=
58;break;case 48:f=k-j<=3?49:50;break;case 49:m=-2;f=70;break;case 50:j+=4;f=58;break;case 51:HEAP[l]=j;m=0;f=70;break;case 52:j+=2;f=j==k?53:54;break;case 53:m=-1;f=70;break;case 54:f=HEAP[j+1]==0?55:58;break;case 55:f=HEAP[j]==62?56:58;break;case 56:HEAP[l]=j+2;m=HEAP[n];f=70;break;case 57:j+=2;f=58;break;case 58:f=j!=k?38:59;break;case 59:m=-1;f=70;break;case 60:f=$(h,o,j,n)==0?61:62;break;case 61:HEAP[l]=j;m=0;f=70;break;case 62:j+=2;f=j==k?63:64;break;case 63:m=-1;f=70;break;case 64:f=HEAP[j+
1]==0?65:67;break;case 65:f=HEAP[j]==62?66:67;break;case 66:HEAP[l]=j+2;m=HEAP[n];f=70;break;case 67:HEAP[l]=j;m=0;f=70;break;case 68:f=j!=k?19:69;break;case 69:m=-1;f=70;break;case 70:return a=m,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function Sa(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j,k,l;g=a;h=b;j=c;k=d;e=h==j?1:2;break;case 1:l=-1;e=40;break;case 2:e=HEAP[h+1]==0?3:4;break;case 3:var m=HEAP[g+76+HEAP[h]],f=3;e=5;break;case 4:var n=O(HEAP[h+1]&255,HEAP[h]&255),f=4;
e=5;break;case 5:e=f==4?n:m;e=e==5?9:e==6?12:e==7?15:e==19?18:e==22?8:e==24?8:e==29?6:19;break;case 6:e=(1<<(HEAP[h]&31)&HEAP[kc+((HEAP[h]>>>5)+HEAP[ud+HEAP[h+1]]*8)*4])==0?7:8;break;case 7:HEAP[k]=h;l=0;e=40;break;case 8:h+=2;e=38;break;case 9:e=j-h<=1?10:11;break;case 10:l=-2;e=40;break;case 11:HEAP[k]=h;l=0;e=40;break;case 12:e=j-h<=2?13:14;break;case 13:l=-2;e=40;break;case 14:HEAP[k]=h;l=0;e=40;break;case 15:e=j-h<=3?16:17;break;case 16:l=-2;e=40;break;case 17:HEAP[k]=h;l=0;e=40;break;case 18:a:{l=
g;e=h+2;for(var o=j,p=k,q=void 0,r=null,q=-1;;)switch(q){case -1:var s,u,t,B,P;s=l;u=e;t=o;B=p;q=u!=t?1:18;break;case 1:q=HEAP[u+1]==0?2:4;break;case 2:q=HEAP[u]==120?3:4;break;case 3:b:{P=s;for(var q=u+2,v=t,ea=B,T=void 0,w=null,T=-1;;)switch(T){case -1:var x,H,za,ga,U,X;x=P;H=q;za=v;ga=ea;T=H!=za?1:15;break;case 1:T=HEAP[H+1]==0?2:3;break;case 2:X=HEAP[x+76+HEAP[H]];T=4;break;case 3:X=O(HEAP[H+1]&255,HEAP[H]&255);T=4;break;case 4:T=X+-24<2?5:6;break;case 5:H+=2;T=14;break;case 6:HEAP[ga]=H;U=0;
T=16;break;case 7:T=HEAP[H+1]==0?8:9;break;case 8:var y=HEAP[x+76+HEAP[H]],w=8,T=10;break;case 9:var F=O(HEAP[H+1]&255,HEAP[H]&255),w=9,T=10;break;case 10:T=w==9?F:y;T=T==18?12:T==24?11:T==25?11:13;break;case 11:H+=2;T=14;break;case 12:HEAP[ga]=H+2;U=10;T=16;break;case 13:HEAP[ga]=H;U=0;T=16;break;case 14:T=H!=za?7:15;break;case 15:U=-1;T=16;break;case 16:P=U;break b;default:assert(0,"bad label: "+T)}P=void 0}q=19;break;case 4:q=HEAP[u+1]==0?5:6;break;case 5:var N=HEAP[s+76+HEAP[u]],r=5,q=7;break;
case 6:var xa=O(HEAP[u+1]&255,HEAP[u]&255),r=6,q=7;break;case 7:q=(r==6?xa:N)==25?8:9;break;case 8:u+=2;q=17;break;case 9:HEAP[B]=u;P=0;q=19;break;case 10:q=HEAP[u+1]==0?11:12;break;case 11:var S=HEAP[s+76+HEAP[u]],r=11,q=13;break;case 12:var K=O(HEAP[u+1]&255,HEAP[u]&255),r=12,q=13;break;case 13:q=r==12?K:S;q=q==18?15:q==25?14:16;break;case 14:u+=2;q=17;break;case 15:HEAP[B]=u+2;P=10;q=19;break;case 16:HEAP[B]=u;P=0;q=19;break;case 17:q=u!=t?10:18;break;case 18:P=-1;q=19;break;case 19:l=P;break a;
default:assert(0,"bad label: "+q)}l=void 0}e=40;break;case 19:HEAP[k]=h;l=0;e=40;break;case 20:e=HEAP[h+1]==0?21:22;break;case 21:var Q=HEAP[g+76+HEAP[h]],f=21;e=23;break;case 22:var z=O(HEAP[h+1]&255,HEAP[h]&255),f=22;e=23;break;case 23:e=f==22?z:Q;e=e==5?27:e==6?30:e==7?33:e==18?36:e==22?26:e==24?26:e==25?26:e==26?26:e==27?26:e==29?24:37;break;case 24:e=(1<<(HEAP[h]&31)&HEAP[kc+((HEAP[h]>>>5)+HEAP[Jd+HEAP[h+1]]*8)*4])==0?25:26;break;case 25:HEAP[k]=h;l=0;e=40;break;case 26:h+=2;e=38;break;case 27:e=
j-h<=1?28:29;break;case 28:l=-2;e=40;break;case 29:HEAP[k]=h;l=0;e=40;break;case 30:e=j-h<=2?31:32;break;case 31:l=-2;e=40;break;case 32:HEAP[k]=h;l=0;e=40;break;case 33:e=j-h<=3?34:35;break;case 34:l=-2;e=40;break;case 35:HEAP[k]=h;l=0;e=40;break;case 36:HEAP[k]=h+2;l=9;e=40;break;case 37:HEAP[k]=h;l=0;e=40;break;case 38:e=h!=j?20:39;break;case 39:l=-1;e=40;break;case 40:return a=l;default:assert(0,"bad label: "+e)}}function X(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j,k,l;g=a;
h=b;j=c;k=d;e=h==j?1:2;break;case 1:l=-22;e=40;break;case 2:e=HEAP[h+1]==0?3:4;break;case 3:var m=HEAP[g+76+HEAP[h]],f=3;e=5;break;case 4:var n=O(HEAP[h+1]&255,HEAP[h]&255),f=4;e=5;break;case 5:e=f==4?n:m;e=e==5?9:e==6?12:e==7?15:e==9?18:e==10?18:e==21?18:e==22?8:e==24?8:e==29?6:e==30?18:19;break;case 6:e=(1<<(HEAP[h]&31)&HEAP[kc+((HEAP[h]>>>5)+HEAP[ud+HEAP[h+1]]*8)*4])==0?7:8;break;case 7:HEAP[k]=h;l=0;e=40;break;case 8:h+=2;e=38;break;case 9:e=j-h<=1?10:11;break;case 10:l=-2;e=40;break;case 11:HEAP[k]=
h;l=0;e=40;break;case 12:e=j-h<=2?13:14;break;case 13:l=-2;e=40;break;case 14:HEAP[k]=h;l=0;e=40;break;case 15:e=j-h<=3?16:17;break;case 16:l=-2;e=40;break;case 17:HEAP[k]=h;l=0;e=40;break;case 18:HEAP[k]=h;l=22;e=40;break;case 19:HEAP[k]=h;l=0;e=40;break;case 20:e=HEAP[h+1]==0?21:22;break;case 21:var o=HEAP[g+76+HEAP[h]],f=21;e=23;break;case 22:var p=O(HEAP[h+1]&255,HEAP[h]&255),f=22;e=23;break;case 23:e=f==22?p:o;e=e==5?27:e==6?30:e==7?33:e==18?36:e==22?26:e==24?26:e==25?26:e==26?26:e==27?26:e==
29?24:37;break;case 24:e=(1<<(HEAP[h]&31)&HEAP[kc+((HEAP[h]>>>5)+HEAP[Jd+HEAP[h+1]]*8)*4])==0?25:26;break;case 25:HEAP[k]=h;l=0;e=40;break;case 26:h+=2;e=38;break;case 27:e=j-h<=1?28:29;break;case 28:l=-2;e=40;break;case 29:HEAP[k]=h;l=0;e=40;break;case 30:e=j-h<=2?31:32;break;case 31:l=-2;e=40;break;case 32:HEAP[k]=h;l=0;e=40;break;case 33:e=j-h<=3?34:35;break;case 34:l=-2;e=40;break;case 35:HEAP[k]=h;l=0;e=40;break;case 36:HEAP[k]=h+2;l=28;e=40;break;case 37:HEAP[k]=h;l=0;e=40;break;case 38:e=h!=
j?20:39;break;case 39:l=-1;e=40;break;case 40:return a=l;default:assert(0,"bad label: "+e)}}function oa(a,b,c,e,d){var f,g=null;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n,o;h=a;j=b;k=c;l=e;m=d;f=25;break;case 1:f=HEAP[k+1]==0?2:3;break;case 2:var p=HEAP[j+76+HEAP[k]],g=2;f=4;break;case 3:var q=O(HEAP[k+1]&255,HEAP[k]&255),g=3;f=4;break;case 4:o=f=g==3?q:p;f=f==0?14:f==1?14:f==5?5:f==6?8:f==7?11:f==8?14:f==12?15:f==13?15:24;break;case 5:f=l-k<=1?6:7;break;case 6:n=-2;f=27;break;case 7:k+=2;f=25;
break;case 8:f=l-k<=2?9:10;break;case 9:n=-2;f=27;break;case 10:k+=3;f=25;break;case 11:f=l-k<=3?12:13;break;case 12:n=-2;f=27;break;case 13:k+=4;f=25;break;case 14:HEAP[m]=k;n=0;f=27;break;case 15:k+=2;f=o!=h?25:16;break;case 16:f=k==l?17:18;break;case 17:n=-27;f=27;break;case 18:HEAP[m]=k;f=HEAP[k+1]==0?19:20;break;case 19:var r=HEAP[j+76+HEAP[k]],g=19;f=21;break;case 20:var s=O(HEAP[k+1]&255,HEAP[k]&255),g=20;f=21;break;case 21:f=g==20?s:r;f=f==9?22:f==10?22:f==11?22:f==20?22:f==21?22:f==30?22:
23;break;case 22:f=n=27;break;case 23:n=0;f=27;break;case 24:k+=2;f=25;break;case 25:f=k!=l?1:26;break;case 26:n=-1;f=27;break;case 27:return a=n;default:assert(0,"bad label: "+f)}}function ab(a,b,c,e){var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k,l;g=a;h=b;j=c;k=e;d=h!=j?1:31;break;case 1:d=HEAP[h]!=0?3:2;break;case 2:d=HEAP[h+1]!=45?3:4;break;case 3:HEAP[k]=h;l=0;d=32;break;case 4:h+=2;d=30;break;case 5:d=HEAP[h]==0?6:7;break;case 6:var m=HEAP[g+76+HEAP[h+1]],f=6;d=8;break;case 7:var n=
O(HEAP[h]&255,HEAP[h+1]&255),f=7;d=8;break;case 8:d=f==7?n:m;d=d==0?18:d==1?18:d==5?9:d==6?12:d==7?15:d==8?18:d==27?19:29;break;case 9:d=j-h<=1?10:11;break;case 10:l=-2;d=32;break;case 11:h+=2;d=30;break;case 12:d=j-h<=2?13:14;break;case 13:l=-2;d=32;break;case 14:h+=3;d=30;break;case 15:d=j-h<=3?16:17;break;case 16:l=-2;d=32;break;case 17:h+=4;d=30;break;case 18:HEAP[k]=h;l=0;d=32;break;case 19:h+=2;d=h==j?20:21;break;case 20:l=-1;d=32;break;case 21:d=HEAP[h]==0?22:30;break;case 22:d=HEAP[h+1]==
45?23:30;break;case 23:h+=2;d=h==j?24:25;break;case 24:l=-1;d=32;break;case 25:d=HEAP[h]!=0?27:26;break;case 26:d=HEAP[h+1]!=62?27:28;break;case 27:HEAP[k]=h;l=0;d=32;break;case 28:HEAP[k]=h+2;l=13;d=32;break;case 29:h+=2;d=30;break;case 30:d=h!=j?5:31;break;case 31:l=-1;d=32;break;case 32:return a=l;default:assert(0,"bad label: "+d)}}function Oa(a,b,c,d){for(a=-1;;)switch(a){case -1:var e,f,g,h;e=b;a=c;f=d;h=0;HEAP[f]=11;a=a-e!=6?1:2;break;case 1:g=1;a=20;break;case 2:a=HEAP[e]==0?4:3;break;case 3:a=
6;break;case 4:a=HEAP[e+1];a=a==88?5:a==120?7:6;break;case 5:h=1;a=7;break;case 6:g=1;a=20;break;case 7:e+=2;a=HEAP[e]==0?9:8;break;case 8:a=11;break;case 9:a=HEAP[e+1];a=a==77?10:a==109?12:11;break;case 10:h=1;a=12;break;case 11:g=1;a=20;break;case 12:e+=2;a=HEAP[e]==0?14:13;break;case 13:a=16;break;case 14:a=HEAP[e+1];a=a==76?15:a==108?17:16;break;case 15:h=1;a=18;break;case 16:g=1;a=20;break;case 17:a=h!=0?18:19;break;case 18:g=0;a=20;break;case 19:HEAP[f]=12;g=1;a=20;break;case 20:return b=g;
default:assert(0,"bad label: "+a)}}function va(a,b,c,d){var e=STACKTOP;STACKTOP+=4;_memset(e,0,4);var f,g=null;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n=e,o;h=a;j=b;k=c;l=d;o=j;f=j==k?1:2;break;case 1:m=-1;f=70;break;case 2:f=HEAP[j]==0?3:4;break;case 3:var p=HEAP[h+76+HEAP[j+1]],g=3;f=5;break;case 4:var q=O(HEAP[j]&255,HEAP[j+1]&255),g=4;f=5;break;case 5:f=g==4?q:p;f=f==5?9:f==6?12:f==7?15:f==22?8:f==24?8:f==29?6:18;break;case 6:f=(1<<(HEAP[j+1]&31)&HEAP[kc+((HEAP[j+1]>>>5)+HEAP[ud+HEAP[j]]*8)*
4])==0?7:8;break;case 7:HEAP[l]=j;m=0;f=70;break;case 8:j+=2;f=68;break;case 9:f=k-j<=1?10:11;break;case 10:m=-2;f=70;break;case 11:HEAP[l]=j;m=0;f=70;break;case 12:f=k-j<=2?13:14;break;case 13:m=-2;f=70;break;case 14:HEAP[l]=j;m=0;f=70;break;case 15:f=k-j<=3?16:17;break;case 16:m=-2;f=70;break;case 17:HEAP[l]=j;m=0;f=70;break;case 18:HEAP[l]=j;m=0;f=70;break;case 19:f=HEAP[j]==0?20:21;break;case 20:var r=HEAP[h+76+HEAP[j+1]],g=20;f=22;break;case 21:var s=O(HEAP[j]&255,HEAP[j+1]&255),g=21;f=22;break;
case 22:f=g==21?s:r;f=f==5?26:f==6?29:f==7?32:f==9?35:f==10?35:f==15?60:f==21?35:f==22?25:f==24?25:f==25?25:f==26?25:f==27?25:f==29?23:67;break;case 23:f=(1<<(HEAP[j+1]&31)&HEAP[kc+((HEAP[j+1]>>>5)+HEAP[Jd+HEAP[j]]*8)*4])==0?24:25;break;case 24:HEAP[l]=j;m=0;f=70;break;case 25:j+=2;f=68;break;case 26:f=k-j<=1?27:28;break;case 27:m=-2;f=70;break;case 28:HEAP[l]=j;m=0;f=70;break;case 29:f=k-j<=2?30:31;break;case 30:m=-2;f=70;break;case 31:HEAP[l]=j;m=0;f=70;break;case 32:f=k-j<=3?33:34;break;case 33:m=
-2;f=70;break;case 34:HEAP[l]=j;m=0;f=70;break;case 35:f=Oa(h,o,j,n)==0?36:37;break;case 36:HEAP[l]=j;m=0;f=70;break;case 37:j+=2;f=58;break;case 38:f=HEAP[j]==0?39:40;break;case 39:var u=HEAP[h+76+HEAP[j+1]],g=39;f=41;break;case 40:var t=O(HEAP[j]&255,HEAP[j+1]&255),g=40;f=41;break;case 41:f=g==40?t:u;f=f==0?51:f==1?51:f==5?42:f==6?45:f==7?48:f==8?51:f==15?52:57;break;case 42:f=k-j<=1?43:44;break;case 43:m=-2;f=70;break;case 44:j+=2;f=58;break;case 45:f=k-j<=2?46:47;break;case 46:m=-2;f=70;break;
case 47:j+=3;f=58;break;case 48:f=k-j<=3?49:50;break;case 49:m=-2;f=70;break;case 50:j+=4;f=58;break;case 51:HEAP[l]=j;m=0;f=70;break;case 52:j+=2;f=j==k?53:54;break;case 53:m=-1;f=70;break;case 54:f=HEAP[j]==0?55:58;break;case 55:f=HEAP[j+1]==62?56:58;break;case 56:HEAP[l]=j+2;m=HEAP[n];f=70;break;case 57:j+=2;f=58;break;case 58:f=j!=k?38:59;break;case 59:m=-1;f=70;break;case 60:f=Oa(h,o,j,n)==0?61:62;break;case 61:HEAP[l]=j;m=0;f=70;break;case 62:j+=2;f=j==k?63:64;break;case 63:m=-1;f=70;break;
case 64:f=HEAP[j]==0?65:67;break;case 65:f=HEAP[j+1]==62?66:67;break;case 66:HEAP[l]=j+2;m=HEAP[n];f=70;break;case 67:HEAP[l]=j;m=0;f=70;break;case 68:f=j!=k?19:69;break;case 69:m=-1;f=70;break;case 70:return a=m,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function U(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j,k,l;g=a;h=b;j=c;k=d;e=h==j?1:2;break;case 1:l=-1;e=40;break;case 2:e=HEAP[h]==0?3:4;break;case 3:var m=HEAP[g+76+HEAP[h+1]],f=3;e=5;break;case 4:var n=O(HEAP[h]&255,HEAP[h+
1]&255),f=4;e=5;break;case 5:e=f==4?n:m;e=e==5?9:e==6?12:e==7?15:e==19?18:e==22?8:e==24?8:e==29?6:19;break;case 6:e=(1<<(HEAP[h+1]&31)&HEAP[kc+((HEAP[h+1]>>>5)+HEAP[ud+HEAP[h]]*8)*4])==0?7:8;break;case 7:HEAP[k]=h;l=0;e=40;break;case 8:h+=2;e=38;break;case 9:e=j-h<=1?10:11;break;case 10:l=-2;e=40;break;case 11:HEAP[k]=h;l=0;e=40;break;case 12:e=j-h<=2?13:14;break;case 13:l=-2;e=40;break;case 14:HEAP[k]=h;l=0;e=40;break;case 15:e=j-h<=3?16:17;break;case 16:l=-2;e=40;break;case 17:HEAP[k]=h;l=0;e=40;
break;case 18:a:{l=g;e=h+2;for(var o=j,p=k,q=void 0,r=null,q=-1;;)switch(q){case -1:var s,u,t,B,P;s=l;u=e;t=o;B=p;q=u!=t?1:18;break;case 1:q=HEAP[u]==0?2:4;break;case 2:q=HEAP[u+1]==120?3:4;break;case 3:b:{P=s;for(var q=u+2,v=t,T=B,ea=void 0,w=null,ea=-1;;)switch(ea){case -1:var H,x,za,ga,U,X;H=P;x=q;za=v;ga=T;ea=x!=za?1:15;break;case 1:ea=HEAP[x]==0?2:3;break;case 2:X=HEAP[H+76+HEAP[x+1]];ea=4;break;case 3:X=O(HEAP[x]&255,HEAP[x+1]&255);ea=4;break;case 4:ea=X+-24<2?5:6;break;case 5:x+=2;ea=14;break;
case 6:HEAP[ga]=x;U=0;ea=16;break;case 7:ea=HEAP[x]==0?8:9;break;case 8:var y=HEAP[H+76+HEAP[x+1]],w=8,ea=10;break;case 9:var F=O(HEAP[x]&255,HEAP[x+1]&255),w=9,ea=10;break;case 10:ea=w==9?F:y;ea=ea==18?12:ea==24?11:ea==25?11:13;break;case 11:x+=2;ea=14;break;case 12:HEAP[ga]=x+2;U=10;ea=16;break;case 13:HEAP[ga]=x;U=0;ea=16;break;case 14:ea=x!=za?7:15;break;case 15:U=-1;ea=16;break;case 16:P=U;break b;default:assert(0,"bad label: "+ea)}P=void 0}q=19;break;case 4:q=HEAP[u]==0?5:6;break;case 5:var N=
HEAP[s+76+HEAP[u+1]],r=5,q=7;break;case 6:var xa=O(HEAP[u]&255,HEAP[u+1]&255),r=6,q=7;break;case 7:q=(r==6?xa:N)==25?8:9;break;case 8:u+=2;q=17;break;case 9:HEAP[B]=u;P=0;q=19;break;case 10:q=HEAP[u]==0?11:12;break;case 11:var S=HEAP[s+76+HEAP[u+1]],r=11,q=13;break;case 12:var K=O(HEAP[u]&255,HEAP[u+1]&255),r=12,q=13;break;case 13:q=r==12?K:S;q=q==18?15:q==25?14:16;break;case 14:u+=2;q=17;break;case 15:HEAP[B]=u+2;P=10;q=19;break;case 16:HEAP[B]=u;P=0;q=19;break;case 17:q=u!=t?10:18;break;case 18:P=
-1;q=19;break;case 19:l=P;break a;default:assert(0,"bad label: "+q)}l=void 0}e=40;break;case 19:HEAP[k]=h;l=0;e=40;break;case 20:e=HEAP[h]==0?21:22;break;case 21:var Q=HEAP[g+76+HEAP[h+1]],f=21;e=23;break;case 22:var z=O(HEAP[h]&255,HEAP[h+1]&255),f=22;e=23;break;case 23:e=f==22?z:Q;e=e==5?27:e==6?30:e==7?33:e==18?36:e==22?26:e==24?26:e==25?26:e==26?26:e==27?26:e==29?24:37;break;case 24:e=(1<<(HEAP[h+1]&31)&HEAP[kc+((HEAP[h+1]>>>5)+HEAP[Jd+HEAP[h]]*8)*4])==0?25:26;break;case 25:HEAP[k]=h;l=0;e=40;
break;case 26:h+=2;e=38;break;case 27:e=j-h<=1?28:29;break;case 28:l=-2;e=40;break;case 29:HEAP[k]=h;l=0;e=40;break;case 30:e=j-h<=2?31:32;break;case 31:l=-2;e=40;break;case 32:HEAP[k]=h;l=0;e=40;break;case 33:e=j-h<=3?34:35;break;case 34:l=-2;e=40;break;case 35:HEAP[k]=h;l=0;e=40;break;case 36:HEAP[k]=h+2;l=9;e=40;break;case 37:HEAP[k]=h;l=0;e=40;break;case 38:e=h!=j?20:39;break;case 39:l=-1;e=40;break;case 40:return a=l;default:assert(0,"bad label: "+e)}}function fb(a,b,c,e){var d,f=null;for(d=
-1;;)switch(d){case -1:var g,h,j,k,l;g=a;h=b;j=c;k=e;d=h==j?1:2;break;case 1:l=-22;d=40;break;case 2:d=HEAP[h]==0?3:4;break;case 3:var m=HEAP[g+76+HEAP[h+1]],f=3;d=5;break;case 4:var n=O(HEAP[h]&255,HEAP[h+1]&255),f=4;d=5;break;case 5:d=f==4?n:m;d=d==5?9:d==6?12:d==7?15:d==9?18:d==10?18:d==21?18:d==22?8:d==24?8:d==29?6:d==30?18:19;break;case 6:d=(1<<(HEAP[h+1]&31)&HEAP[kc+((HEAP[h+1]>>>5)+HEAP[ud+HEAP[h]]*8)*4])==0?7:8;break;case 7:HEAP[k]=h;l=0;d=40;break;case 8:h+=2;d=38;break;case 9:d=j-h<=1?10:
11;break;case 10:l=-2;d=40;break;case 11:HEAP[k]=h;l=0;d=40;break;case 12:d=j-h<=2?13:14;break;case 13:l=-2;d=40;break;case 14:HEAP[k]=h;l=0;d=40;break;case 15:d=j-h<=3?16:17;break;case 16:l=-2;d=40;break;case 17:HEAP[k]=h;l=0;d=40;break;case 18:HEAP[k]=h;l=22;d=40;break;case 19:HEAP[k]=h;l=0;d=40;break;case 20:d=HEAP[h]==0?21:22;break;case 21:var o=HEAP[g+76+HEAP[h+1]],f=21;d=23;break;case 22:var p=O(HEAP[h]&255,HEAP[h+1]&255),f=22;d=23;break;case 23:d=f==22?p:o;d=d==5?27:d==6?30:d==7?33:d==18?36:
d==22?26:d==24?26:d==25?26:d==26?26:d==27?26:d==29?24:37;break;case 24:d=(1<<(HEAP[h+1]&31)&HEAP[kc+((HEAP[h+1]>>>5)+HEAP[Jd+HEAP[h]]*8)*4])==0?25:26;break;case 25:HEAP[k]=h;l=0;d=40;break;case 26:h+=2;d=38;break;case 27:d=j-h<=1?28:29;break;case 28:l=-2;d=40;break;case 29:HEAP[k]=h;l=0;d=40;break;case 30:d=j-h<=2?31:32;break;case 31:l=-2;d=40;break;case 32:HEAP[k]=h;l=0;d=40;break;case 33:d=j-h<=3?34:35;break;case 34:l=-2;d=40;break;case 35:HEAP[k]=h;l=0;d=40;break;case 36:HEAP[k]=h+2;l=28;d=40;
break;case 37:HEAP[k]=h;l=0;d=40;break;case 38:d=h!=j?20:39;break;case 39:l=-1;d=40;break;case 40:return a=l;default:assert(0,"bad label: "+d)}}function Cb(a,b,c,d,e){var f,g=null;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n,o;h=a;j=b;k=c;l=d;m=e;f=25;break;case 1:f=HEAP[k]==0?2:3;break;case 2:var p=HEAP[j+76+HEAP[k+1]],g=2;f=4;break;case 3:var q=O(HEAP[k]&255,HEAP[k+1]&255),g=3;f=4;break;case 4:o=f=g==3?q:p;f=f==0?14:f==1?14:f==5?5:f==6?8:f==7?11:f==8?14:f==12?15:f==13?15:24;break;case 5:f=l-k<=
1?6:7;break;case 6:n=-2;f=27;break;case 7:k+=2;f=25;break;case 8:f=l-k<=2?9:10;break;case 9:n=-2;f=27;break;case 10:k+=3;f=25;break;case 11:f=l-k<=3?12:13;break;case 12:n=-2;f=27;break;case 13:k+=4;f=25;break;case 14:HEAP[m]=k;n=0;f=27;break;case 15:k+=2;f=o!=h?25:16;break;case 16:f=k==l?17:18;break;case 17:n=-27;f=27;break;case 18:HEAP[m]=k;f=HEAP[k]==0?19:20;break;case 19:var r=HEAP[j+76+HEAP[k+1]],g=19;f=21;break;case 20:var s=O(HEAP[k]&255,HEAP[k+1]&255),g=20;f=21;break;case 21:f=g==20?s:r;f=
f==9?22:f==10?22:f==11?22:f==20?22:f==21?22:f==30?22:23;break;case 22:f=n=27;break;case 23:n=0;f=27;break;case 24:k+=2;f=25;break;case 25:f=k!=l?1:26;break;case 26:n=-1;f=27;break;case 27:return a=n;default:assert(0,"bad label: "+f)}}function xb(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g,h;d=a;e=b;c=1;break;case 1:g=HEAP[d];d+=1;h=HEAP[e];e+=1;c=g>96&g<=122?2:3;break;case 2:g+=-32;c=3;break;case 3:c=h>96&h<=122?4:5;break;case 4:h+=-32;c=5;break;case 5:c=g!=h?6:7;break;case 6:f=0;c=9;break;
case 7:c=g==0?8:1;break;case 8:f=1;c=9;break;case 9:return c=f;default:assert(0,"bad label: "+c)}}function db(a,b,c){var d=STACKTOP;STACKTOP+=9;_memset(d,0,9);var e;for(e=-1;;)switch(e){case -1:var f=d,g,h,j=d+4,k=d+5;e=a;HEAP[f]=b;g=c;HEAP[k]=j;FUNCTION_TABLE[HEAP[e+60]](e,f,g,k,HEAP[k]+1);e=j==HEAP[k]?1:2;break;case 1:h=-1;e=3;break;case 2:h=HEAP[j];e=3;break;case 3:return a=h,STACKTOP=d,a;default:assert(0,"bad label: "+e)}}function gb(a){var b;for(b=-1;;)switch(b){case -1:var c;b=a;b=b==9?1:b==
10?1:b==13?1:b==32?1:2;break;case 1:c=1;b=3;break;case 2:c=0;b=3;break;case 3:return a=c;default:assert(0,"bad label: "+b)}}function rb(a,b,c,d,e,f,g){var h;for(h=-1;;)switch(h){case -1:var j,k,l,m,n,o,p,q,r,s;j=a;k=b;l=c;m=d;n=e;o=f;p=g;h=k==l?1:2;break;case 1:HEAP[m]=0;q=1;h=32;break;case 2:h=db(j,k,l);h=gb(h)==0?3:4;break;case 3:HEAP[p]=k;q=0;h=32;break;case 4:k+=HEAP[j+68];h=db(j,k,l);h=gb(h)!=0?4:5;break;case 5:var u=m;h=k==l?6:7;break;case 6:HEAP[u]=0;q=1;h=32;break;case 7:HEAP[u]=k;h=8;break;
case 8:r=h=db(j,k,l);h=h==-1?9:10;break;case 9:HEAP[p]=k;q=0;h=32;break;case 10:h=r==61?11:12;break;case 11:HEAP[n]=k;h=18;break;case 12:h=gb(r)!=0?13:17;break;case 13:HEAP[n]=k;h=14;break;case 14:k+=HEAP[j+68];r=db(j,k,l);h=gb(r)!=0?14:15;break;case 15:h=r!=61?16:18;break;case 16:HEAP[p]=k;q=0;h=32;break;case 17:k+=HEAP[j+68];h=8;break;case 18:h=HEAP[m]==k?19:20;break;case 19:HEAP[p]=k;q=0;h=32;break;case 20:k+=HEAP[j+68];r=db(j,k,l);h=gb(r)!=0?21:22;break;case 21:k+=HEAP[j+68];r=db(j,k,l);h=gb(r)!=
0?21:22;break;case 22:h=r!=34&r!=39?23:24;break;case 23:HEAP[p]=k;q=0;h=32;break;case 24:s=r&255;k+=HEAP[j+68];HEAP[o]=k;h=25;break;case 25:r=db(j,k,l);h=s==r?31:26;break;case 26:h=r<=96|r>122?27:30;break;case 27:h=r<=64|r>90?28:30;break;case 28:h=(r<=47|r>57)&r!=46&r!=45&r!=95?29:30;break;case 29:HEAP[p]=k;q=0;h=32;break;case 30:k+=HEAP[j+68];h=25;break;case 31:HEAP[p]=k+HEAP[j+68];q=1;h=32;break;case 32:return a=q;default:assert(0,"bad label: "+h)}}function sb(a,b,c,d,e,f,g,h,j,k,l){var m=STACKTOP;
STACKTOP+=16;_memset(m,0,16);var n,o=null;for(n=-1;;)switch(n){case -1:var p,q,r,s=m,u,t,B,P,v,O,ea,T,w=m+4,x=m+8,H=m+12,za;p=a;q=b;r=c;HEAP[s]=d;u=e;t=f;B=g;P=h;v=j;O=k;ea=l;HEAP[w]=0;HEAP[x]=0;HEAP[H]=0;HEAP[s]+=HEAP[r+68]*5;u+=HEAP[r+68]*-2;n=rb(r,HEAP[s],u,x,H,w,s)==0|HEAP[x]==0?1:2;break;case 1:HEAP[t]=HEAP[s];T=0;n=42;break;case 2:n=FUNCTION_TABLE[HEAP[r+28]](r,HEAP[x],HEAP[H],vh)==0?3:5;break;case 3:n=q==0?4:15;break;case 4:HEAP[t]=HEAP[x];T=0;n=42;break;case 5:n=B!=0?6:7;break;case 6:HEAP[B]=
HEAP[w];n=7;break;case 7:n=P!=0?8:9;break;case 8:HEAP[P]=HEAP[s];n=9;break;case 9:n=rb(r,HEAP[s],u,x,H,w,s)==0?10:11;break;case 10:HEAP[t]=HEAP[s];T=0;n=42;break;case 11:n=HEAP[x]==0?12:15;break;case 12:n=q!=0?13:14;break;case 13:HEAP[t]=HEAP[s];T=0;n=42;break;case 14:T=1;n=42;break;case 15:n=FUNCTION_TABLE[HEAP[r+28]](r,HEAP[x],HEAP[H],qe)!=0?16:27;break;case 16:za=db(r,HEAP[w],u);n=za<=96|za>122?17:19;break;case 17:n=za<=64|za>90?18:19;break;case 18:HEAP[t]=HEAP[w];T=0;n=42;break;case 19:n=v!=0?
20:21;break;case 20:HEAP[v]=HEAP[w];n=21;break;case 21:n=O!=0?22:23;break;case 22:n=FUNCTION_TABLE[p](r,HEAP[w],HEAP[s]+(0-HEAP[r+68]));HEAP[O]=n;n=23;break;case 23:n=rb(r,HEAP[s],u,x,H,w,s)==0?24:25;break;case 24:HEAP[t]=HEAP[s];T=0;n=42;break;case 25:n=HEAP[x]==0?26:27;break;case 26:T=1;n=42;break;case 27:n=FUNCTION_TABLE[HEAP[r+28]](r,HEAP[x],HEAP[H],wg)==0?29:28;break;case 28:n=q!=0?29:30;break;case 29:HEAP[t]=HEAP[x];T=0;n=42;break;case 30:n=FUNCTION_TABLE[HEAP[r+28]](r,HEAP[w],HEAP[s]+(0-HEAP[r+
68]),wh)!=0?31:34;break;case 31:n=ea!=0?32:33;break;case 32:HEAP[ea]=1;n=33;break;case 33:var ga=db(r,HEAP[s],u),o=gb(ga),ga=HEAP[s];o!=0?(o=33,n=38):(o=33,n=39);break;case 34:n=FUNCTION_TABLE[HEAP[r+28]](r,HEAP[w],HEAP[s]+(0-HEAP[r+68]),xg)!=0?35:37;break;case 35:n=ea!=0?36:33;break;case 36:HEAP[ea]=0;n=33;break;case 37:HEAP[t]=HEAP[w];T=0;n=42;break;case 38:HEAP[s]=(o==38?U:ga)+HEAP[r+68];var U=db(r,HEAP[s],u),o=gb(U),U=HEAP[s];o!=0?n=o=38:(o=38,n=39);break;case 39:n=(o==33?ga:U)!=u?40:41;break;
case 40:HEAP[t]=HEAP[s];T=0;n=42;break;case 41:T=1;n=42;break;case 42:return a=T,STACKTOP=m,a;default:assert(0,"bad label: "+n)}}function Kb(a){var b;for(b=-1;;)switch(b){case -1:var c,d;c=a;b=c>>8;b=b==0?2:b==216?1:b==217?1:b==218?1:b==219?1:b==220?1:b==221?1:b==222?1:b==223?1:b==255?4:6;break;case 1:d=-1;b=7;break;case 2:b=HEAP[Cd+76+c]==0?3:6;break;case 3:d=-1;b=7;break;case 4:b=c==65534|c==65535?5:6;break;case 5:d=-1;b=7;break;case 6:d=c;b=7;break;case 7:return a=d;default:assert(0,"bad label: "+
b)}}function Gb(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f;d=a;e=b;c=d<0?1:2;break;case 1:f=0;c=11;break;case 2:var g=d;c=d<=127?3:4;break;case 3:HEAP[e]=g&255;f=1;c=11;break;case 4:var h=d;c=g<=2047?5:6;break;case 5:HEAP[e]=h>>6&255|-64;HEAP[e+1]=d&63|-128;f=2;c=11;break;case 6:var j=d;c=h<=65535?7:8;break;case 7:HEAP[e]=j>>12&255|-32;HEAP[e+1]=d>>6&63|-128;HEAP[e+2]=d&63|-128;f=3;c=11;break;case 8:c=j<=1114111?9:10;break;case 9:HEAP[e]=d>>18&255|-16;HEAP[e+1]=d>>12&63|-128;HEAP[e+2]=d>>6&
63|-128;HEAP[e+3]=d&63|-128;f=4;c=11;break;case 10:f=0;c=11;break;case 11:return c=f;default:assert(0,"bad label: "+c)}}function Nb(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var h,j,k,l,m,n,o,p,q;h=a;j=b;k=c;l=d;p=h;o=0;e=1;break;case 1:HEAP[h+o]=HEAP[Cd+o];o=e=o+1;e=e<=367?1:2;break;case 2:o=0;f=2;e=8;break;case 3:e=HEAP[Cd+76+o]!=28?4:7;break;case 4:e=HEAP[Cd+76+o]!=0?5:7;break;case 5:e=HEAP[j+4*o]!=o?6:7;break;case 6:n=0;e=40;break;case 7:var r=o+1;o=r;f=7;e=8;break;case 8:e=(f==7?r:0)<=
127?3:9;break;case 9:o=0;f=9;e=36;break;case 10:q=HEAP[j+4*o];e=q==-1?11:12;break;case 11:HEAP[p+76+o]=1;HEAP[p+376+o*2]=-1;HEAP[p+888+o*4]=1;HEAP[p+888+o*4+1]=0;e=35;break;case 12:var s=q;e=q<0?13:16;break;case 13:e=s<-4?14:15;break;case 14:n=0;e=40;break;case 15:HEAP[p+76+o]=3-(q&255);HEAP[p+888+o*4]=0;HEAP[p+376+o*2]=0;e=35;break;case 16:var u=q;e=s<=127?17:25;break;case 17:e=HEAP[Cd+76+u]!=28?18:21;break;case 18:e=HEAP[Cd+76+q]!=0?19:21;break;case 19:e=q!=o?20:21;break;case 20:n=0;e=40;break;
case 21:HEAP[p+76+o]=HEAP[Cd+76+q];HEAP[p+888+o*4]=1;HEAP[p+888+o*4+1]=q&255;var t=o;e=q!=0?22:23;break;case 22:m=q&65535;e=24;break;case 23:m=-1;e=24;break;case 24:HEAP[p+376+t*2]=m;e=35;break;case 25:e=Kb(u)<0?26:27;break;case 26:HEAP[p+76+o]=0;HEAP[p+376+o*2]=-1;HEAP[p+888+o*4]=1;HEAP[p+888+o*4+1]=0;e=35;break;case 27:e=q>65535?28:29;break;case 28:n=0;e=40;break;case 29:e=(1<<(q&31)&HEAP[kc+(((q&255)>>5)+HEAP[ud+(q>>8)]*8)*4])!=0?30:31;break;case 30:HEAP[p+76+o]=22;e=34;break;case 31:var B=p+76+
o;e=(1<<(q&31)&HEAP[kc+(((q&255)>>5)+HEAP[Jd+(q>>8)]*8)*4])!=0?32:33;break;case 32:HEAP[B]=26;e=34;break;case 33:HEAP[B]=28;e=34;break;case 34:e=o;var P=Gb(q,p+888+o*4+1);HEAP[p+888+e*4]=P&255;HEAP[p+376+o*2]=q&65535;e=35;break;case 35:var v=o+1;o=v;f=35;e=36;break;case 36:e=(f==35?v:0)<=255?10:37;break;case 37:HEAP[p+372]=l;HEAP[p+368]=k;e=k!=0?38:39;break;case 38:HEAP[p+332]=g+194;HEAP[p+336]=g+194;HEAP[p+340]=g+194;HEAP[p+344]=g+196;HEAP[p+348]=g+196;HEAP[p+352]=g+196;HEAP[p+356]=g+198;HEAP[p+
360]=g+198;HEAP[p+364]=g+198;e=39;break;case 39:HEAP[p+60]=g+200;HEAP[p+64]=g+202;n=p;e=40;break;case 40:return a=n;default:assert(0,"bad label: "+e)}}function Ab(a){var b,c=null;for(b=-1;;)switch(b){case -1:var e,d,f;e=a;b=e==0?1:2;break;case 1:d=6;b=8;break;case 2:f=0;c=2;b=6;break;case 3:b=xb(e,HEAP[ef+f*4]);var g=f;b=b!=0?4:5;break;case 4:d=g;b=8;break;case 5:var h=g+1;f=h;c=5;b=6;break;case 6:b=(c==5?h:0)<=5?3:7;break;case 7:d=-1;b=8;break;case 8:return a=d;default:assert(0,"bad label: "+b)}}
function Sb(a,b,c,e,d,f){var g;for(g=-1;;)switch(g){case -1:var h,j,k,l,m,n,o,p;h=a;j=b;k=c;l=e;m=d;n=f;g=l==m?1:2;break;case 1:o=-4;g=34;break;case 2:p=HEAP[j+76];g=l+1==m?3:9;break;case 3:g=HEAP[j+73]+-3<3?4:5;break;case 4:o=-1;g=34;break;case 5:g=HEAP[l];g=g==0?8:g==60?8:g==239?6:g==254?6:g==255?6:33;break;case 6:g=HEAP[j+73]==0?7:8;break;case 7:g=k==1?33:8;break;case 8:o=-1;g=34;break;case 9:g=HEAP[l+1]|HEAP[l]<<8;g=g==15360?13:g==61371?20:g==65279?10:g==65534?17:26;break;case 10:g=HEAP[j+73]==
0?11:12;break;case 11:g=k==1?33:12;break;case 12:HEAP[n]=l+2;HEAP[p]=HEAP[h+16];o=14;g=34;break;case 13:g=HEAP[j+73]==4?15:14;break;case 14:g=HEAP[j+73]==3?15:16;break;case 15:g=k==1?33:16;break;case 16:HEAP[p]=HEAP[h+20];o=FUNCTION_TABLE[HEAP[HEAP[p]+k*4]](HEAP[p],l,m,n);g=34;break;case 17:g=HEAP[j+73]==0?18:19;break;case 18:g=k==1?33:19;break;case 19:HEAP[n]=l+2;HEAP[p]=HEAP[h+20];o=14;g=34;break;case 20:g=k==1?21:22;break;case 21:g=HEAP[j+73];g=g==0|g==4|g==5|g==3?33:22;break;case 22:g=l+2==m?
23:24;break;case 23:o=-1;g=34;break;case 24:g=HEAP[l+2]==-65?25:33;break;case 25:HEAP[n]=l+3;HEAP[p]=HEAP[h+8];o=14;g=34;break;case 26:g=HEAP[l]==0?27:30;break;case 27:g=k==1?28:29;break;case 28:g=HEAP[j+73]==5?33:29;break;case 29:HEAP[p]=HEAP[h+16];o=FUNCTION_TABLE[HEAP[HEAP[p]+k*4]](HEAP[p],l,m,n);g=34;break;case 30:g=HEAP[l+1]==0?31:33;break;case 31:g=k==1?33:32;break;case 32:HEAP[p]=HEAP[h+20];o=FUNCTION_TABLE[HEAP[HEAP[p]+k*4]](HEAP[p],l,m,n);g=34;break;case 33:HEAP[p]=HEAP[h+4*HEAP[j+73]];o=
FUNCTION_TABLE[HEAP[HEAP[p]+k*4]](HEAP[p],l,m,n);g=34;break;case 34:return a=o;default:assert(0,"bad label: "+g)}}function pb(a,b,c){var e;for(e=-1;;)switch(e){case -1:var d,f,h,j;d=a;f=b;j=Ab(c);e=j==-1?1:2;break;case 1:h=0;e=3;break;case 2:HEAP[d+73]=j&255;HEAP[d]=g+204;HEAP[d+4]=g+206;HEAP[d+52]=g+208;HEAP[d+76]=f;HEAP[f]=d;h=1;e=3;break;case 3:return a=h;default:assert(0,"bad label: "+e)}}function Mb(){Hb=allocate([37,46,50,48,48,115,58,32,108,105,110,101,32,37,105,44,32,99,111,108,117,109,110,
32,37,105,0],"i8",ALLOC_NORMAL);da=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Jb=allocate([115,0],"i8",ALLOC_NORMAL);jb=allocate([99,111,100,101,0],"i8",ALLOC_NORMAL);bc=allocate([111,102,102,115,101,116,0],"i8",ALLOC_NORMAL);Wb=allocate([108,105,110,101,110,111,0],"i8",ALLOC_NORMAL);lb=allocate([115,116,114,105,99,116,0],"i8",ALLOC_NORMAL);kb=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,112,121,101,120,112,97,116,46,99,0],"i8",ALLOC_NORMAL);Lb=allocate([67,104,
97,114,97,99,116,101,114,68,97,116,97,0],"i8",ALLOC_NORMAL);Eb=allocate([40,78,78,41,0],"i8",ALLOC_NORMAL);Yb=allocate([83,116,97,114,116,69,108,101,109,101,110,116,0],"i8",ALLOC_NORMAL);yb=allocate([40,78,41,0],"i8",ALLOC_NORMAL);fc=allocate([69,110,100,69,108,101,109,101,110,116,0],"i8",ALLOC_NORMAL);zb=allocate([40,78,79,38,41,0],"i8",ALLOC_NORMAL);jc=allocate([80,114,111,99,101,115,115,105,110,103,73,110,115,116,114,117,99,116,105,111,110,0],"i8",ALLOC_NORMAL);mc=allocate([40,78,78,78,78,78,41,
0],"i8",ALLOC_NORMAL);Xb=allocate([85,110,112,97,114,115,101,100,69,110,116,105,116,121,68,101,99,108,0],"i8",ALLOC_NORMAL);qc=allocate([78,105,78,78,78,78,78,0],"i8",ALLOC_NORMAL);tc=allocate([69,110,116,105,116,121,68,101,99,108,0],"i8",ALLOC_NORMAL);vb=allocate([40,79,38,79,38,105,41,0],"i8",ALLOC_NORMAL);eb=allocate([88,109,108,68,101,99,108,0],"i8",ALLOC_NORMAL);Tb=allocate([109,111,100,101,108,45,62,110,117,109,99,104,105,108,100,114,101,110,32,60,32,50,49,52,55,52,56,51,54,52,55,0],"i8",ALLOC_NORMAL);
oc=allocate([99,111,110,118,95,99,111,110,116,101,110,116,95,109,111,100,101,108,0],"i8",ALLOC_NORMAL);Fb=allocate([40,105,105,79,38,78,41,0],"i8",ALLOC_NORMAL);Pb=allocate([78,78,0],"i8",ALLOC_NORMAL);Vb=allocate([69,108,101,109,101,110,116,68,101,99,108,0],"i8",ALLOC_NORMAL);Dc=allocate([40,78,78,79,38,79,38,105,41,0],"i8",ALLOC_NORMAL);yc=allocate([65,116,116,108,105,115,116,68,101,99,108,0],"i8",ALLOC_NORMAL);Kc=allocate([78,105,0],"i8",ALLOC_NORMAL);sa=allocate([83,107,105,112,112,101,100,69,
110,116,105,116,121,0],"i8",ALLOC_NORMAL);Bb=allocate([40,78,78,78,78,41,0],"i8",ALLOC_NORMAL);cb=allocate([78,111,116,97,116,105,111,110,68,101,99,108,0],"i8",ALLOC_NORMAL);Nc=allocate([83,116,97,114,116,78,97,109,101,115,112,97,99,101,68,101,99,108,0],"i8",ALLOC_NORMAL);ic=allocate([69,110,100,78,97,109,101,115,112,97,99,101,68,101,99,108,0],"i8",ALLOC_NORMAL);$b=allocate([40,79,38,41,0],"i8",ALLOC_NORMAL);Qb=allocate([67,111,109,109,101,110,116,0],"i8",ALLOC_NORMAL);uc=allocate([40,41,0],"i8",
ALLOC_NORMAL);Gc=allocate([83,116,97,114,116,67,100,97,116,97,83,101,99,116,105,111,110,0],"i8",ALLOC_NORMAL);pc=allocate([69,110,100,67,100,97,116,97,83,101,99,116,105,111,110,0],"i8",ALLOC_NORMAL);Zb=allocate([68,101,102,97,117,108,116,0],"i8",ALLOC_NORMAL);wc=allocate([68,101,102,97,117,108,116,72,97,110,100,108,101,114,69,120,112,97,110,100,0],"i8",ALLOC_NORMAL);sc=allocate([78,111,116,83,116,97,110,100,97,108,111,110,101,0],"i8",ALLOC_NORMAL);Oc=allocate([40,79,38,78,78,78,41,0],"i8",ALLOC_NORMAL);
Zc=allocate([69,120,116,101,114,110,97,108,69,110,116,105,116,121,82,101,102,0],"i8",ALLOC_NORMAL);yd=allocate([40,78,78,78,105,41,0],"i8",ALLOC_NORMAL);Tc=allocate([83,116,97,114,116,68,111,99,116,121,112,101,68,101,99,108,0],"i8",ALLOC_NORMAL);sd=allocate([69,110,100,68,111,99,116,121,112,101,68,101,99,108,0],"i8",ALLOC_NORMAL);nd=allocate([80,97,114,115,101,40,100,97,116,97,91,44,32,105,115,102,105,110,97,108,93,41,10,80,97,114,115,101,32,88,77,76,32,100,97,116,97,46,32,32,96,105,115,102,105,110,
97,108,39,32,115,104,111,117,108,100,32,98,101,32,116,114,117,101,32,97,116,32,101,110,100,32,111,102,32,105,110,112,117,116,46,0],"i8",ALLOC_NORMAL);zc=allocate([115,35,124,105,58,80,97,114,115,101,0],"i8",ALLOC_NORMAL);Pc=allocate([114,101,97,100,40,41,32,100,105,100,32,110,111,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,111,98,106,101,99,116,32,40,116,121,112,101,61,37,46,52,48,48,115,41,0],"i8",ALLOC_NORMAL);Ec=allocate([114,101,97,100,40,41,32,114,101,116,117,114,110,101,
100,32,116,111,111,32,109,117,99,104,32,100,97,116,97,58,32,37,105,32,98,121,116,101,115,32,114,101,113,117,101,115,116,101,100,44,32,37,105,32,114,101,116,117,114,110,101,100,0],"i8",ALLOC_NORMAL);zd=allocate([80,97,114,115,101,70,105,108,101,40,102,105,108,101,41,10,80,97,114,115,101,32,88,77,76,32,100,97,116,97,32,102,114,111,109,32,102,105,108,101,45,108,105,107,101,32,111,98,106,101,99,116,46,0],"i8",ALLOC_NORMAL);Uc=allocate([114,101,97,100,0],"i8",ALLOC_NORMAL);ec=allocate([97,114,103,117,
109,101,110,116,32,109,117,115,116,32,104,97,118,101,32,39,114,101,97,100,39,32,97,116,116,114,105,98,117,116,101,0],"i8",ALLOC_NORMAL);xa=allocate([83,101,116,66,97,115,101,40,98,97,115,101,95,117,114,108,41,10,83,101,116,32,116,104,101,32,98,97,115,101,32,85,82,76,32,102,111,114,32,116,104,101,32,112,97,114,115,101,114,46,0],"i8",ALLOC_NORMAL);gc=allocate([115,58,83,101,116,66,97,115,101,0],"i8",ALLOC_NORMAL);Lc=allocate([71,101,116,66,97,115,101,40,41,32,45,62,32,117,114,108,10,82,101,116,117,
114,110,32,98,97,115,101,32,85,82,76,32,115,116,114,105,110,103,32,102,111,114,32,116,104,101,32,112,97,114,115,101,114,46,0],"i8",ALLOC_NORMAL);xc=allocate([122,0],"i8",ALLOC_NORMAL);cc=allocate([71,101,116,73,110,112,117,116,67,111,110,116,101,120,116,40,41,32,45,62,32,115,116,114,105,110,103,10,82,101,116,117,114,110,32,116,104,101,32,117,110,116,114,97,110,115,108,97,116,101,100,32,116,101,120,116,32,111,102,32,116,104,101,32,105,110,112,117,116,32,116,104,97,116,32,99,97,117,115,101,100,32,116,
104,101,32,99,117,114,114,101,110,116,32,101,118,101,110,116,46,10,73,102,32,116,104,101,32,101,118,101,110,116,32,119,97,115,32,103,101,110,101,114,97,116,101,100,32,98,121,32,97,32,108,97,114,103,101,32,97,109,111,117,110,116,32,111,102,32,116,101,120,116,32,40,115,117,99,104,32,97,115,32,97,32,115,116,97,114,116,32,116,97,103,10,102,111,114,32,97,110,32,101,108,101,109,101,110,116,32,119,105,116,104,32,109,97,110,121,32,97,116,116,114,105,98,117,116,101,115,41,44,32,110,111,116,32,97,108,108,32,
111,102,32,116,104,101,32,116,101,120,116,32,109,97,121,32,98,101,32,97,118,97,105,108,97,98,108,101,46,0],"i8",ALLOC_NORMAL);Ad=allocate([69,120,116,101,114,110,97,108,69,110,116,105,116,121,80,97,114,115,101,114,67,114,101,97,116,101,40,99,111,110,116,101,120,116,91,44,32,101,110,99,111,100,105,110,103,93,41,10,67,114,101,97,116,101,32,97,32,112,97,114,115,101,114,32,102,111,114,32,112,97,114,115,105,110,103,32,97,110,32,101,120,116,101,114,110,97,108,32,101,110,116,105,116,121,32,98,97,115,101,
100,32,111,110,32,116,104,101,10,105,110,102,111,114,109,97,116,105,111,110,32,112,97,115,115,101,100,32,116,111,32,116,104,101,32,69,120,116,101,114,110,97,108,69,110,116,105,116,121,82,101,102,72,97,110,100,108,101,114,46,0],"i8",ALLOC_NORMAL);Bd=allocate([122,124,115,58,69,120,116,101,114,110,97,108,69,110,116,105,116,121,80,97,114,115,101,114,67,114,101,97,116,101,0],"i8",ALLOC_NORMAL);nb=allocate([83,101,116,80,97,114,97,109,69,110,116,105,116,121,80,97,114,115,105,110,103,40,102,108,97,103,
41,32,45,62,32,115,117,99,99,101,115,115,10,67,111,110,116,114,111,108,115,32,112,97,114,115,105,110,103,32,111,102,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,105,101,115,32,40,105,110,99,108,117,100,105,110,103,32,116,104,101,32,101,120,116,101,114,110,97,108,32,68,84,68,10,115,117,98,115,101,116,41,46,32,80,111,115,115,105,98,108,101,32,102,108,97,103,32,118,97,108,117,101,115,32,97,114,101,32,88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,78,69,86,69,
82,44,10,88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,85,78,76,69,83,83,95,83,84,65,78,68,65,76,79,78,69,32,97,110,100,10,88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,65,76,87,65,89,83,46,32,82,101,116,117,114,110,115,32,116,114,117,101,32,105,102,32,115,101,116,116,105,110,103,32,116,104,101,32,102,108,97,103,10,119,97,115,32,115,117,99,99,101,115,115,102,117,108,46,0],"i8",ALLOC_NORMAL);Kd=allocate([105,0],"i8",ALLOC_NORMAL);Nd=allocate([85,
115,101,70,111,114,101,105,103,110,68,84,68,40,91,102,108,97,103,93,41,10,65,108,108,111,119,115,32,116,104,101,32,97,112,112,108,105,99,97,116,105,111,110,32,116,111,32,112,114,111,118,105,100,101,32,97,110,32,97,114,116,105,102,105,99,105,97,108,32,101,120,116,101,114,110,97,108,32,115,117,98,115,101,116,32,105,102,32,111,110,101,32,105,115,10,110,111,116,32,115,112,101,99,105,102,105,101,100,32,97,115,32,112,97,114,116,32,111,102,32,116,104,101,32,100,111,99,117,109,101,110,116,32,105,110,115,
116,97,110,99,101,46,32,32,84,104,105,115,32,114,101,97,100,105,108,121,32,97,108,108,111,119,115,32,116,104,101,10,117,115,101,32,111,102,32,97,32,39,100,101,102,97,117,108,116,39,32,100,111,99,117,109,101,110,116,32,116,121,112,101,32,99,111,110,116,114,111,108,108,101,100,32,98,121,32,116,104,101,32,97,112,112,108,105,99,97,116,105,111,110,44,32,119,104,105,108,101,32,115,116,105,108,108,10,103,101,116,116,105,110,103,32,116,104,101,32,97,100,118,97,110,116,97,103,101,32,111,102,32,112,114,111,
118,105,100,105,110,103,32,100,111,99,117,109,101,110,116,32,116,121,112,101,32,105,110,102,111,114,109,97,116,105,111,110,32,116,111,32,116,104,101,32,112,97,114,115,101,114,46,10,39,102,108,97,103,39,32,100,101,102,97,117,108,116,115,32,116,111,32,84,114,117,101,32,105,102,32,110,111,116,32,112,114,111,118,105,100,101,100,46,0],"i8",ALLOC_NORMAL);Gd=allocate([85,115,101,70,111,114,101,105,103,110,68,84,68,0],"i8",ALLOC_NORMAL);Je=allocate([80,97,114,115,101,0],"i8",ALLOC_NORMAL);Od=allocate([80,
97,114,115,101,70,105,108,101,0],"i8",ALLOC_NORMAL);fd=allocate([83,101,116,66,97,115,101,0],"i8",ALLOC_NORMAL);Ld=allocate([71,101,116,66,97,115,101,0],"i8",ALLOC_NORMAL);oe=allocate([69,120,116,101,114,110,97,108,69,110,116,105,116,121,80,97,114,115,101,114,67,114,101,97,116,101,0],"i8",ALLOC_NORMAL);Yd=allocate([83,101,116,80,97,114,97,109,69,110,116,105,116,121,80,97,114,115,105,110,103,0],"i8",ALLOC_NORMAL);Pd=allocate([71,101,116,73,110,112,117,116,67,111,110,116,101,120,116,0],"i8",ALLOC_NORMAL);
vc=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",
0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,
0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Md=allocate(257,"i8",ALLOC_NORMAL);Fe=allocate([114,101,112,108,97,99,101,0],"i8",ALLOC_NORMAL);ye=allocate([88,77,76,95,80,97,114,115,101,114,67,114,101,97,116,101,32,102,97,105,108,101,100,0],"i8",ALLOC_NORMAL);
Hd=allocate([69,114,114,111,114,67,111,100,101,0],"i8",ALLOC_NORMAL);ze=allocate([69,114,114,111,114,76,105,110,101,78,117,109,98,101,114,0],"i8",ALLOC_NORMAL);Id=allocate([69,114,114,111,114,67,111,108,117,109,110,78,117,109,98,101,114,0],"i8",ALLOC_NORMAL);de=allocate([69,114,114,111,114,66,121,116,101,73,110,100,101,120,0],"i8",ALLOC_NORMAL);ee=allocate([67,117,114,114,101,110,116,76,105,110,101,78,117,109,98,101,114,0],"i8",ALLOC_NORMAL);fe=allocate([67,117,114,114,101,110,116,67,111,108,117,
109,110,78,117,109,98,101,114,0],"i8",ALLOC_NORMAL);pe=allocate([67,117,114,114,101,110,116,66,121,116,101,73,110,100,101,120,0],"i8",ALLOC_NORMAL);Db=allocate([98,117,102,102,101,114,95,115,105,122,101,0],"i8",ALLOC_NORMAL);ge=allocate([98,117,102,102,101,114,95,116,101,120,116,0],"i8",ALLOC_NORMAL);Zd=allocate([98,117,102,102,101,114,95,117,115,101,100,0],"i8",ALLOC_NORMAL);$d=allocate([110,97,109,101,115,112,97,99,101,95,112,114,101,102,105,120,101,115,0],"i8",ALLOC_NORMAL);ie=allocate([111,114,
100,101,114,101,100,95,97,116,116,114,105,98,117,116,101,115,0],"i8",ALLOC_NORMAL);ad=allocate([114,101,116,117,114,110,115,95,117,110,105,99,111,100,101,0],"i8",ALLOC_NORMAL);Rd=allocate([115,112,101,99,105,102,105,101,100,95,97,116,116,114,105,98,117,116,101,115,0],"i8",ALLOC_NORMAL);vd=allocate([105,110,116,101,114,110,0],"i8",ALLOC_NORMAL);Qc=allocate([95,95,109,101,109,98,101,114,115,95,95,0],"i8",ALLOC_NORMAL);je=allocate([67,97,110,110,111,116,32,100,101,108,101,116,101,32,97,116,116,114,105,
98,117,116,101,0],"i8",ALLOC_NORMAL);re=allocate([98,117,102,102,101,114,95,115,105,122,101,32,109,117,115,116,32,98,101,32,97,110,32,105,110,116,101,103,101,114,0],"i8",ALLOC_NORMAL);se=allocate([98,117,102,102,101,114,95,115,105,122,101,32,109,117,115,116,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,122,101,114,111,0],"i8",ALLOC_NORMAL);Ob=allocate([67,104,97,114,97,99,116,101,114,68,97,116,97,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);Be=allocate([88,77,76,32,112,97,114,115,
101,114,0],"i8",ALLOC_NORMAL);te=allocate([112,121,101,120,112,97,116,46,120,109,108,112,97,114,115,101,114,0],"i8",ALLOC_NORMAL);wb=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147947,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",
0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);aa=allocate([80,97,114,115,101,114,67,114,101,
97,116,101,40,91,101,110,99,111,100,105,110,103,91,44,32,110,97,109,101,115,112,97,99,101,95,115,101,112,97,114,97,116,111,114,93,93,41,32,45,62,32,112,97,114,115,101,114,10,82,101,116,117,114,110,32,97,32,110,101,119,32,88,77,76,32,112,97,114,115,101,114,32,111,98,106,101,99,116,46,0],"i8",ALLOC_NORMAL);Hc=allocate([124,122,122,79,58,80,97,114,115,101,114,67,114,101,97,116,101,0],"i8",ALLOC_NORMAL);ae=allocate(16,"i8*",ALLOC_NORMAL);qe=allocate([101,110,99,111,100,105,110,103,0],"i8",ALLOC_NORMAL);
ue=allocate([110,97,109,101,115,112,97,99,101,95,115,101,112,97,114,97,116,111,114,0],"i8",ALLOC_NORMAL);wd=allocate([110,97,109,101,115,112,97,99,101,95,115,101,112,97,114,97,116,111,114,32,109,117,115,116,32,98,101,32,97,116,32,109,111,115,116,32,111,110,101,32,99,104,97,114,97,99,116,101,114,44,32,111,109,105,116,116,101,100,44,32,111,114,32,78,111,110,101,0],"i8",ALLOC_NORMAL);Vc=allocate([105,110,116,101,114,110,32,109,117,115,116,32,98,101,32,97,32,100,105,99,116,105,111,110,97,114,121,0],"i8",
ALLOC_NORMAL);Ke=allocate([69,114,114,111,114,83,116,114,105,110,103,40,101,114,114,110,111,41,32,45,62,32,115,116,114,105,110,103,10,82,101,116,117,114,110,115,32,115,116,114,105,110,103,32,101,114,114,111,114,32,102,111,114,32,103,105,118,101,110,32,110,117,109,98,101,114,46,0],"i8",ALLOC_NORMAL);Le=allocate([108,58,69,114,114,111,114,83,116,114,105,110,103,0],"i8",ALLOC_NORMAL);Wc=allocate([0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",
0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0],ALLOC_NORMAL);Ce=allocate([80,97,114,115,101,114,67,114,101,97,116,101,0],"i8",ALLOC_NORMAL);Fc=allocate([69,114,114,111,114,83,116,114,105,110,103,0],"i8",ALLOC_NORMAL);Dd=allocate([80,121,116,104,111,
110,32,119,114,97,112,112,101,114,32,102,111,114,32,69,120,112,97,116,32,112,97,114,115,101,114,46,0],"i8",ALLOC_NORMAL);De=allocate([112,121,101,120,112,97,116,46,101,114,114,111,114,115,0],"i8",ALLOC_NORMAL);xd=allocate([112,121,101,120,112,97,116,46,109,111,100,101,108,0],"i8",ALLOC_NORMAL);cd=allocate([112,121,101,120,112,97,116,0],"i8",ALLOC_NORMAL);Ed=allocate([120,109,108,46,112,97,114,115,101,114,115,46,101,120,112,97,116,46,69,120,112,97,116,69,114,114,111,114,0],"i8",ALLOC_NORMAL);Ge=allocate([101,
114,114,111,114,0],"i8",ALLOC_NORMAL);ub=allocate([69,120,112,97,116,69,114,114,111,114,0],"i8",ALLOC_NORMAL);gd=allocate([88,77,76,80,97,114,115,101,114,84,121,112,101,0],"i8",ALLOC_NORMAL);Rb=allocate([50,46,55,46,50,0],"i8",ALLOC_NORMAL);be=allocate([95,95,118,101,114,115,105,111,110,95,95,0],"i8",ALLOC_NORMAL);hd=allocate([69,88,80,65,84,95,86,69,82,83,73,79,78,0],"i8",ALLOC_NORMAL);dd=allocate([40,105,105,105,41,0],"i8",ALLOC_NORMAL);id=allocate([118,101,114,115,105,111,110,95,105,110,102,111,
0],"i8",ALLOC_NORMAL);jd=allocate([110,97,116,105,118,101,95,101,110,99,111,100,105,110,103,0],"i8",ALLOC_NORMAL);qd=allocate([85,84,70,45,56,0],"i8",ALLOC_NORMAL);Ic=allocate([109,111,100,117,108,101,115,0],"i8",ALLOC_NORMAL);nc=allocate([101,114,114,111,114,115,0],"i8",ALLOC_NORMAL);kd=allocate([109,111,100,101,108,0],"i8",ALLOC_NORMAL);Sd=allocate([115,105,0],"i8",ALLOC_NORMAL);$c=allocate([102,101,97,116,117,114,101,115,0],"i8",ALLOC_NORMAL);Ye=allocate([88,77,76,95,69,82,82,79,82,95,78,79,95,
77,69,77,79,82,89,0],"i8",ALLOC_NORMAL);Bc=allocate([88,77,76,95,69,82,82,79,82,95,83,89,78,84,65,88,0],"i8",ALLOC_NORMAL);Ze=allocate([88,77,76,95,69,82,82,79,82,95,78,79,95,69,76,69,77,69,78,84,83,0],"i8",ALLOC_NORMAL);Pe=allocate([88,77,76,95,69,82,82,79,82,95,73,78,86,65,76,73,68,95,84,79,75,69,78,0],"i8",ALLOC_NORMAL);nf=allocate([88,77,76,95,69,82,82,79,82,95,85,78,67,76,79,83,69,68,95,84,79,75,69,78,0],"i8",ALLOC_NORMAL);sf=allocate([88,77,76,95,69,82,82,79,82,95,80,65,82,84,73,65,76,95,67,
72,65,82,0],"i8",ALLOC_NORMAL);ce=allocate([88,77,76,95,69,82,82,79,82,95,84,65,71,95,77,73,83,77,65,84,67,72,0],"i8",ALLOC_NORMAL);Me=allocate([88,77,76,95,69,82,82,79,82,95,68,85,80,76,73,67,65,84,69,95,65,84,84,82,73,66,85,84,69,0],"i8",ALLOC_NORMAL);Qe=allocate([88,77,76,95,69,82,82,79,82,95,74,85,78,75,95,65,70,84,69,82,95,68,79,67,95,69,76,69,77,69,78,84,0],"i8",ALLOC_NORMAL);Td=allocate([88,77,76,95,69,82,82,79,82,95,80,65,82,65,77,95,69,78,84,73,84,89,95,82,69,70,0],"i8",ALLOC_NORMAL);$e=
allocate([88,77,76,95,69,82,82,79,82,95,85,78,68,69,70,73,78,69,68,95,69,78,84,73,84,89,0],"i8",ALLOC_NORMAL);ff=allocate([88,77,76,95,69,82,82,79,82,95,82,69,67,85,82,83,73,86,69,95,69,78,84,73,84,89,95,82,69,70,0],"i8",ALLOC_NORMAL);af=allocate([88,77,76,95,69,82,82,79,82,95,65,83,89,78,67,95,69,78,84,73,84,89,0],"i8",ALLOC_NORMAL);Ub=allocate([88,77,76,95,69,82,82,79,82,95,66,65,68,95,67,72,65,82,95,82,69,70,0],"i8",ALLOC_NORMAL);Se=allocate([88,77,76,95,69,82,82,79,82,95,66,73,78,65,82,89,95,
69,78,84,73,84,89,95,82,69,70,0],"i8",ALLOC_NORMAL);bd=allocate([88,77,76,95,69,82,82,79,82,95,65,84,84,82,73,66,85,84,69,95,69,88,84,69,82,78,65,76,95,69,78,84,73,84,89,95,82,69,70,0],"i8",ALLOC_NORMAL);ld=allocate([88,77,76,95,69,82,82,79,82,95,77,73,83,80,76,65,67,69,68,95,88,77,76,95,80,73,0],"i8",ALLOC_NORMAL);of=allocate([88,77,76,95,69,82,82,79,82,95,85,78,75,78,79,87,78,95,69,78,67,79,68,73,78,71,0],"i8",ALLOC_NORMAL);tf=allocate([88,77,76,95,69,82,82,79,82,95,73,78,67,79,82,82,69,67,84,95,
69,78,67,79,68,73,78,71,0],"i8",ALLOC_NORMAL);pf=allocate([88,77,76,95,69,82,82,79,82,95,85,78,67,76,79,83,69,68,95,67,68,65,84,65,95,83,69,67,84,73,79,78,0],"i8",ALLOC_NORMAL);xf=allocate([88,77,76,95,69,82,82,79,82,95,69,88,84,69,82,78,65,76,95,69,78,84,73,84,89,95,72,65,78,68,76,73,78,71,0],"i8",ALLOC_NORMAL);yf=allocate([88,77,76,95,69,82,82,79,82,95,78,79,84,95,83,84,65,78,68,65,76,79,78,69,0],"i8",ALLOC_NORMAL);zf=allocate([88,77,76,95,69,82,82,79,82,95,85,78,69,88,80,69,67,84,69,68,95,83,84,
65,84,69,0],"i8",ALLOC_NORMAL);Af=allocate([88,77,76,95,69,82,82,79,82,95,69,78,84,73,84,89,95,68,69,67,76,65,82,69,68,95,73,78,95,80,69,0],"i8",ALLOC_NORMAL);Bf=allocate([88,77,76,95,69,82,82,79,82,95,70,69,65,84,85,82,69,95,82,69,81,85,73,82,69,83,95,88,77,76,95,68,84,68,0],"i8",ALLOC_NORMAL);Cf=allocate([88,77,76,95,69,82,82,79,82,95,67,65,78,84,95,67,72,65,78,71,69,95,70,69,65,84,85,82,69,95,79,78,67,69,95,80,65,82,83,73,78,71,0],"i8",ALLOC_NORMAL);Df=allocate([88,77,76,95,69,82,82,79,82,95,85,
78,66,79,85,78,68,95,80,82,69,70,73,88,0],"i8",ALLOC_NORMAL);md=allocate([88,77,76,95,69,82,82,79,82,95,85,78,68,69,67,76,65,82,73,78,71,95,80,82,69,70,73,88,0],"i8",ALLOC_NORMAL);uf=allocate([88,77,76,95,69,82,82,79,82,95,73,78,67,79,77,80,76,69,84,69,95,80,69,0],"i8",ALLOC_NORMAL);Ef=allocate([88,77,76,95,69,82,82,79,82,95,88,77,76,95,68,69,67,76,0],"i8",ALLOC_NORMAL);hc=allocate([88,77,76,95,69,82,82,79,82,95,84,69,88,84,95,68,69,67,76,0],"i8",ALLOC_NORMAL);Ff=allocate([88,77,76,95,69,82,82,79,
82,95,80,85,66,76,73,67,73,68,0],"i8",ALLOC_NORMAL);lc=allocate([88,77,76,95,69,82,82,79,82,95,83,85,83,80,69,78,68,69,68,0],"i8",ALLOC_NORMAL);vf=allocate([88,77,76,95,69,82,82,79,82,95,78,79,84,95,83,85,83,80,69,78,68,69,68,0],"i8",ALLOC_NORMAL);Cc=allocate([88,77,76,95,69,82,82,79,82,95,65,66,79,82,84,69,68,0],"i8",ALLOC_NORMAL);Gf=allocate([88,77,76,95,69,82,82,79,82,95,70,73,78,73,83,72,69,68,0],"i8",ALLOC_NORMAL);Hf=allocate([88,77,76,95,69,82,82,79,82,95,83,85,83,80,69,78,68,95,80,69,0],"i8",
ALLOC_NORMAL);He=allocate([95,95,100,111,99,95,95,0],"i8",ALLOC_NORMAL);If=allocate([67,111,110,115,116,97,110,116,115,32,117,115,101,100,32,116,111,32,100,101,115,99,114,105,98,101,32,101,114,114,111,114,32,99,111,110,100,105,116,105,111,110,115,46,0],"i8",ALLOC_NORMAL);Rc=allocate([88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,78,69,86,69,82,0],"i8",ALLOC_NORMAL);Jf=allocate([88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,85,78,76,69,83,83,
95,83,84,65,78,68,65,76,79,78,69,0],"i8",ALLOC_NORMAL);Kf=allocate([88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,65,76,87,65,89,83,0],"i8",ALLOC_NORMAL);qf=allocate([67,111,110,115,116,97,110,116,115,32,117,115,101,100,32,116,111,32,105,110,116,101,114,112,114,101,116,32,99,111,110,116,101,110,116,32,109,111,100,101,108,32,105,110,102,111,114,109,97,116,105,111,110,46,0],"i8",ALLOC_NORMAL);Lf=allocate([88,77,76,95,67,84,89,80,69,95,69,77,80,84,89,0],"i8",ALLOC_NORMAL);
Mf=allocate([88,77,76,95,67,84,89,80,69,95,65,78,89,0],"i8",ALLOC_NORMAL);lg=allocate([88,77,76,95,67,84,89,80,69,95,77,73,88,69,68,0],"i8",ALLOC_NORMAL);za=allocate([88,77,76,95,67,84,89,80,69,95,78,65,77,69,0],"i8",ALLOC_NORMAL);Nf=allocate([88,77,76,95,67,84,89,80,69,95,67,72,79,73,67,69,0],"i8",ALLOC_NORMAL);Ne=allocate([88,77,76,95,67,84,89,80,69,95,83,69,81,0],"i8",ALLOC_NORMAL);cg=allocate([88,77,76,95,67,81,85,65,78,84,95,78,79,78,69,0],"i8",ALLOC_NORMAL);ve=allocate([88,77,76,95,67,81,85,
65,78,84,95,79,80,84,0],"i8",ALLOC_NORMAL);mg=allocate([88,77,76,95,67,81,85,65,78,84,95,82,69,80,0],"i8",ALLOC_NORMAL);gf=allocate([88,77,76,95,67,81,85,65,78,84,95,80,76,85,83,0],"i8",ALLOC_NORMAL);Jc=allocate(80,["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8* (i32)*",0,0,0,"i32 (%struct.XML_ParserStruct*)*",0,0,0,"i32 (%struct.XML_ParserStruct*)*",0,0,0,"i32 (%struct.XML_ParserStruct*)*",0,0,0,"i32 (%struct.XML_ParserStruct*, i8*, i32, i32)*",0,0,0,"%struct.XML_ParserStruct* (i8*, %struct.XML_Memory_Handling_Suite*, i8*)*",
0,0,0,"void (%struct.XML_ParserStruct*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i32)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i32)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i8**)*, void (i8*, i8*)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i8*)*, void (i8*, i8*)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i8*)*)*",0,0,0,"void (%struct.XML_ParserStruct*, i32 (i8*, i8*, %struct.XML_Encoding*)*, i8*)*",
0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0],ALLOC_NORMAL);Of=allocate([112,121,101,120,112,97,116,46,101,120,112,97,116,95,67,65,80,73,32,49,46,48,0],"i8",ALLOC_NORMAL);Pf=allocate([112,121,101,120,112,97,116,46,101,120,112,97,116,95,67,65,80,73,0],"i8",ALLOC_NORMAL);Qf=allocate([101,120,112,97,116,95,67,65,80,73,0],"i8",ALLOC_NORMAL);Rf=allocate([83,116,97,114,116,69,108,101,109,101,110,116,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);Re=allocate([69,110,100,69,108,101,109,101,110,116,
72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);hf=allocate([80,114,111,99,101,115,115,105,110,103,73,110,115,116,114,117,99,116,105,111,110,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);dg=allocate([85,110,112,97,114,115,101,100,69,110,116,105,116,121,68,101,99,108,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);eg=allocate([78,111,116,97,116,105,111,110,68,101,99,108,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);fg=allocate([83,116,97,114,116,78,97,109,101,115,112,97,99,101,68,101,99,108,72,
97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);gg=allocate([69,110,100,78,97,109,101,115,112,97,99,101,68,101,99,108,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);Vf=allocate([67,111,109,109,101,110,116,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);ng=allocate([83,116,97,114,116,67,100,97,116,97,83,101,99,116,105,111,110,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);Wf=allocate([69,110,100,67,100,97,116,97,83,101,99,116,105,111,110,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);og=allocate([68,
101,102,97,117,108,116,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);bf=allocate([78,111,116,83,116,97,110,100,97,108,111,110,101,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);cf=allocate([69,120,116,101,114,110,97,108,69,110,116,105,116,121,82,101,102,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);Ng=allocate([83,116,97,114,116,68,111,99,116,121,112,101,68,101,99,108,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);Ud=allocate([69,110,100,68,111,99,116,121,112,101,68,101,99,108,72,97,110,100,
108,101,114,0],"i8",ALLOC_NORMAL);ea=allocate([69,110,116,105,116,121,68,101,99,108,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);T=allocate([88,109,108,68,101,99,108,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);qb=allocate([69,108,101,109,101,110,116,68,101,99,108,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);Sc=allocate([65,116,116,108,105,115,116,68,101,99,108,72,97,110,100,108,101,114,0],"i8",ALLOC_NORMAL);Og=allocate([83,107,105,112,112,101,100,69,110,116,105,116,121,72,97,110,100,108,
101,114,0],"i8",ALLOC_NORMAL);Ib=allocate(1280,["i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,
0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,
0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",
0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8",
"i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,
0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",
0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",
0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,
"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,
0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",
0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8",
"i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,
0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",
0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",
0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);jh=allocate([120,109,108,61,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,88,77,76,47,49,57,57,56,47,110,97,109,101,115,112,97,99,101,0],"i8",ALLOC_NORMAL);allocate([115,116,97,116,117,115,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0],"i8",ALLOC_NORMAL);allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,101,120,112,97,116,47,120,109,108,112,97,114,115,101,46,99,0],"i8",ALLOC_NORMAL);allocate([80,
121,69,120,112,97,116,95,88,77,76,95,71,101,116,80,97,114,115,105,110,103,83,116,97,116,117,115,0],"i8",ALLOC_NORMAL);Ac=allocate(164,"i8*",ALLOC_NORMAL);xh=allocate([111,117,116,32,111,102,32,109,101,109,111,114,121,0],"i8",ALLOC_NORMAL);Pg=allocate([115,121,110,116,97,120,32,101,114,114,111,114,0],"i8",ALLOC_NORMAL);Qg=allocate([110,111,32,101,108,101,109,101,110,116,32,102,111,117,110,100,0],"i8",ALLOC_NORMAL);Rg=allocate([110,111,116,32,119,101,108,108,45,102,111,114,109,101,100,32,40,105,110,
118,97,108,105,100,32,116,111,107,101,110,41,0],"i8",ALLOC_NORMAL);yh=allocate([117,110,99,108,111,115,101,100,32,116,111,107,101,110,0],"i8",ALLOC_NORMAL);Fd=allocate([112,97,114,116,105,97,108,32,99,104,97,114,97,99,116,101,114,0],"i8",ALLOC_NORMAL);zh=allocate([109,105,115,109,97,116,99,104,101,100,32,116,97,103,0],"i8",ALLOC_NORMAL);Sg=allocate([100,117,112,108,105,99,97,116,101,32,97,116,116,114,105,98,117,116,101,0],"i8",ALLOC_NORMAL);Ah=allocate([106,117,110,107,32,97,102,116,101,114,32,100,
111,99,117,109,101,110,116,32,101,108,101,109,101,110,116,0],"i8",ALLOC_NORMAL);Xc=allocate([105,108,108,101,103,97,108,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,121,32,114,101,102,101,114,101,110,99,101,0],"i8",ALLOC_NORMAL);df=allocate([117,110,100,101,102,105,110,101,100,32,101,110,116,105,116,121,0],"i8",ALLOC_NORMAL);ac=allocate([114,101,99,117,114,115,105,118,101,32,101,110,116,105,116,121,32,114,101,102,101,114,101,110,99,101,0],"i8",ALLOC_NORMAL);Bh=allocate([97,115,121,
110,99,104,114,111,110,111,117,115,32,101,110,116,105,116,121,0],"i8",ALLOC_NORMAL);hg=allocate([114,101,102,101,114,101,110,99,101,32,116,111,32,105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,110,117,109,98,101,114,0],"i8",ALLOC_NORMAL);Ch=allocate([114,101,102,101,114,101,110,99,101,32,116,111,32,98,105,110,97,114,121,32,101,110,116,105,116,121,0],"i8",ALLOC_NORMAL);ke=allocate([114,101,102,101,114,101,110,99,101,32,116,111,32,101,120,116,101,114,110,97,108,32,101,110,116,105,
116,121,32,105,110,32,97,116,116,114,105,98,117,116,101,0],"i8",ALLOC_NORMAL);Tg=allocate([88,77,76,32,111,114,32,116,101,120,116,32,100,101,99,108,97,114,97,116,105,111,110,32,110,111,116,32,97,116,32,115,116,97,114,116,32,111,102,32,101,110,116,105,116,121,0],"i8",ALLOC_NORMAL);yg=allocate([117,110,107,110,111,119,110,32,101,110,99,111,100,105,110,103,0],"i8",ALLOC_NORMAL);Ug=allocate([101,110,99,111,100,105,110,103,32,115,112,101,99,105,102,105,101,100,32,105,110,32,88,77,76,32,100,101,99,108,
97,114,97,116,105,111,110,32,105,115,32,105,110,99,111,114,114,101,99,116,0],"i8",ALLOC_NORMAL);zg=allocate([117,110,99,108,111,115,101,100,32,67,68,65,84,65,32,115,101,99,116,105,111,110,0],"i8",ALLOC_NORMAL);Xf=allocate([101,114,114,111,114,32,105,110,32,112,114,111,99,101,115,115,105,110,103,32,101,120,116,101,114,110,97,108,32,101,110,116,105,116,121,32,114,101,102,101,114,101,110,99,101,0],"i8",ALLOC_NORMAL);Dh=allocate([100,111,99,117,109,101,110,116,32,105,115,32,110,111,116,32,115,116,97,
110,100,97,108,111,110,101,0],"i8",ALLOC_NORMAL);Te=allocate([117,110,101,120,112,101,99,116,101,100,32,112,97,114,115,101,114,32,115,116,97,116,101,32,45,32,112,108,101,97,115,101,32,115,101,110,100,32,97,32,98,117,103,32,114,101,112,111,114,116,0],"i8",ALLOC_NORMAL);pg=allocate([101,110,116,105,116,121,32,100,101,99,108,97,114,101,100,32,105,110,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,121,0],"i8",ALLOC_NORMAL);Ag=allocate([114,101,113,117,101,115,116,101,100,32,102,101,97,116,
117,114,101,32,114,101,113,117,105,114,101,115,32,88,77,76,95,68,84,68,32,115,117,112,112,111,114,116,32,105,110,32,69,120,112,97,116,0],"i8",ALLOC_NORMAL);Vg=allocate([99,97,110,110,111,116,32,99,104,97,110,103,101,32,115,101,116,116,105,110,103,32,111,110,99,101,32,112,97,114,115,105,110,103,32,104,97,115,32,98,101,103,117,110,0],"i8",ALLOC_NORMAL);Eh=allocate([117,110,98,111,117,110,100,32,112,114,101,102,105,120,0],"i8",ALLOC_NORMAL);Wg=allocate([109,117,115,116,32,110,111,116,32,117,110,100,
101,99,108,97,114,101,32,112,114,101,102,105,120,0],"i8",ALLOC_NORMAL);Bg=allocate([105,110,99,111,109,112,108,101,116,101,32,109,97,114,107,117,112,32,105,110,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,121,0],"i8",ALLOC_NORMAL);qg=allocate([88,77,76,32,100,101,99,108,97,114,97,116,105,111,110,32,110,111,116,32,119,101,108,108,45,102,111,114,109,101,100,0],"i8",ALLOC_NORMAL);Xg=allocate([116,101,120,116,32,100,101,99,108,97,114,97,116,105,111,110,32,110,111,116,32,119,101,108,108,
45,102,111,114,109,101,100,0],"i8",ALLOC_NORMAL);Fh=allocate([105,108,108,101,103,97,108,32,99,104,97,114,97,99,116,101,114,40,115,41,32,105,110,32,112,117,98,108,105,99,32,105,100,0],"i8",ALLOC_NORMAL);Ue=allocate([112,97,114,115,101,114,32,115,117,115,112,101,110,100,101,100,0],"i8",ALLOC_NORMAL);Yg=allocate([112,97,114,115,101,114,32,110,111,116,32,115,117,115,112,101,110,100,101,100,0],"i8",ALLOC_NORMAL);Gh=allocate([112,97,114,115,105,110,103,32,97,98,111,114,116,101,100,0],"i8",ALLOC_NORMAL);
Hh=allocate([112,97,114,115,105,110,103,32,102,105,110,105,115,104,101,100,0],"i8",ALLOC_NORMAL);Zg=allocate([99,97,110,110,111,116,32,115,117,115,112,101,110,100,32,105,110,32,101,120,116,101,114,110,97,108,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,121,0],"i8",ALLOC_NORMAL);Ih=allocate([114,101,115,101,114,118,101,100,32,112,114,101,102,105,120,32,40,120,109,108,41,32,109,117,115,116,32,110,111,116,32,98,101,32,117,110,100,101,99,108,97,114,101,100,32,111,114,32,98,111,117,110,
100,32,116,111,32,97,110,111,116,104,101,114,32,110,97,109,101,115,112,97,99,101,32,110,97,109,101,0],"i8",ALLOC_NORMAL);Jh=allocate([114,101,115,101,114,118,101,100,32,112,114,101,102,105,120,32,40,120,109,108,110,115,41,32,109,117,115,116,32,110,111,116,32,98,101,32,100,101,99,108,97,114,101,100,32,111,114,32,117,110,100,101,99,108,97,114,101,100,0],"i8",ALLOC_NORMAL);Kh=allocate([112,114,101,102,105,120,32,109,117,115,116,32,110,111,116,32,98,101,32,98,111,117,110,100,32,116,111,32,111,110,101,
32,111,102,32,116,104,101,32,114,101,115,101,114,118,101,100,32,110,97,109,101,115,112,97,99,101,32,110,97,109,101,115,0],"i8",ALLOC_NORMAL);$g=allocate([101,120,112,97,116,95,50,46,48,46,48,0],"i8",ALLOC_NORMAL);Yf=allocate([6,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1024,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",
0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],ALLOC_NORMAL);Lh=allocate([115,105,122,101,111,102,40,88,77,76,95,67,104,97,114,41,0],"i8",ALLOC_NORMAL);Mh=allocate([115,105,122,101,111,102,40,88,77,76,95,76,67,104,97,114,41,0],"i8",ALLOC_NORMAL);Cg=allocate([88,77,76,95,68,84,68,0],"i8",ALLOC_NORMAL);Nh=allocate([88,77,76,95,67,79,78,84,69,88,84,95,66,89,84,69,83,0],"i8",ALLOC_NORMAL);Dg=allocate([88,77,76,95,78,83,0],"i8",ALLOC_NORMAL);kh=allocate([104,
116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,88,77,76,47,49,57,57,56,47,110,97,109,101,115,112,97,99,101,0],"i8",ALLOC_NORMAL);lh=allocate([104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,50,48,48,48,47,120,109,108,110,115,47,0],"i8",ALLOC_NORMAL);Uf=allocate([35,0],"i8",ALLOC_NORMAL);mh=allocate([67,68,65,84,65,0],"i8",ALLOC_NORMAL);nh=allocate([73,68,0],"i8",ALLOC_NORMAL);oh=allocate([73,68,82,69,70,0],"i8",ALLOC_NORMAL);Kg=allocate([73,68,82,69,70,83,0],"i8",ALLOC_NORMAL);
Lg=allocate([69,78,84,73,84,89,0],"i8",ALLOC_NORMAL);ph=allocate([69,78,84,73,84,73,69,83,0],"i8",ALLOC_NORMAL);qh=allocate([78,77,84,79,75,69,78,0],"i8",ALLOC_NORMAL);rh=allocate([78,77,84,79,75,69,78,83,0],"i8",ALLOC_NORMAL);Mg=allocate([124,0],"i8",ALLOC_NORMAL);sh=allocate([78,79,84,65,84,73,79,78,40,0],"i8",ALLOC_NORMAL);th=allocate([40,0],"i8",ALLOC_NORMAL);Oh=allocate([65,78,89,0],"i8",ALLOC_NORMAL);uh=allocate([65,84,84,76,73,83,84,0],"i8",ALLOC_NORMAL);Ph=allocate([67,68,65,84,65,0],"i8",
ALLOC_NORMAL);Zf=allocate([68,79,67,84,89,80,69,0],"i8",ALLOC_NORMAL);kg=allocate([69,76,69,77,69,78,84,0],"i8",ALLOC_NORMAL);jf=allocate([69,77,80,84,89,0],"i8",ALLOC_NORMAL);Qh=allocate([69,78,84,73,84,73,69,83,0],"i8",ALLOC_NORMAL);bg=allocate([69,78,84,73,84,89,0],"i8",ALLOC_NORMAL);Rh=allocate([70,73,88,69,68,0],"i8",ALLOC_NORMAL);Sh=allocate([73,68,0],"i8",ALLOC_NORMAL);Th=allocate([73,68,82,69,70,0],"i8",ALLOC_NORMAL);dc=allocate([73,68,82,69,70,83,0],"i8",ALLOC_NORMAL);ah=allocate([73,71,
78,79,82,69,0],"i8",ALLOC_NORMAL);Eg=allocate([73,77,80,76,73,69,68,0],"i8",ALLOC_NORMAL);Uh=allocate([73,78,67,76,85,68,69,0],"i8",ALLOC_NORMAL);rc=allocate([78,68,65,84,65,0],"i8",ALLOC_NORMAL);Vh=allocate([78,77,84,79,75,69,78,0],"i8",ALLOC_NORMAL);Xe=allocate([78,77,84,79,75,69,78,83,0],"i8",ALLOC_NORMAL);vg=allocate([78,79,84,65,84,73,79,78,0],"i8",ALLOC_NORMAL);Wh=allocate([80,67,68,65,84,65,0],"i8",ALLOC_NORMAL);Sf=allocate([80,85,66,76,73,67,0],"i8",ALLOC_NORMAL);rg=allocate([82,69,81,85,
73,82,69,68,0],"i8",ALLOC_NORMAL);Tf=allocate([83,89,83,84,69,77,0],"i8",ALLOC_NORMAL);rf=allocate(32,"i8*",ALLOC_NORMAL);kc=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,67108864,0,0,0,-2013265922,0,0,0,134217726,0,0,0,0,0,0,0,0,0,0,0,-8388609,0,0,0,-8388609,0,0,0,-1,0,0,0,2146697215,0,0,0,-514,0,0,0,2147483647,0,0,0,-1,0,0,0,-1,0,0,0,-8177,0,0,0,-63832065,0,0,0,16777215,0,0,0,0,0,0,0,-65536,
0,0,0,-1,0,0,0,-1,0,0,0,-134217217,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10432,0,0,0,-5,0,0,0,1417641983,0,0,0,1048573,0,0,0,-8194,0,0,0,-1,0,0,0,-536936449,0,0,0,-1,0,0,0,-65533,0,0,0,-1,0,0,0,-58977,0,0,0,54513663,0,0,0,0,0,0,0,-131072,0,0,0,41943039,0,0,0,-2,0,0,0,127,0,0,0,0,0,0,0,-65536,0,0,0,460799,0,0,0,0,0,0,0,134217726,0,0,0,2046,0,0,0,-131072,0,0,0,-1,0,0,0,2097151999,0,0,0,3112959,0,0,0,96,0,0,0,-32,0,0,0,603979775,0,0,0,-16777216,0,0,0,3,0,0,0,-417824,0,0,0,63307263,0,
0,0,-1342177280,0,0,0,196611,0,0,0,-423968,0,0,0,57540095,0,0,0,1577058304,0,0,0,1835008,0,0,0,-282656,0,0,0,602799615,0,0,0,0,0,0,0,1,0,0,0,-417824,0,0,0,600702463,0,0,0,-1342177280,0,0,0,3,0,0,0,-700594208,0,0,0,62899992,0,0,0,0,0,0,0,0,0,0,0,-139296,0,0,0,66059775,0,0,0,0,0,0,0,3,0,0,0,-139296,0,0,0,66059775,0,0,0,1073741824,0,0,0,3,0,0,0,-139296,0,0,0,67108351,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,884735,0,0,0,63,0,0,0,0,0,0,0,-17816170,0,0,0,537750702,0,0,0,31,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-257,0,0,0,1023,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-65473,0,0,0,8388607,0,0,0,514797,0,0,0,1342177280,0,0,0,-2110697471,0,0,0,2908843,0,0,0,1073741824,0,0,0,-176109312,0,0,0,7,0,0,0,33622016,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,268435455,0,0,0,-1,0,0,0,-1,0,0,0,67108863,0,0,0,1061158911,0,0,0,-1,0,0,0,-1426112705,0,0,0,1073741823,0,0,0,-1,0,0,0,1608515583,0,0,0,265232348,0,0,0,534519807,0,0,0,0,0,0,0,19520,0,0,0,0,0,
0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,1022,0,0,0,-2,0,0,0,-1,0,0,0,2097151,0,0,0,-2,0,0,0,-1,0,0,0,134217727,0,0,0,-32,0,0,0,8191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134176768,0,0,0,-2013265922,0,0,0,134217726,0,0,0,0,0,0,0,8388608,0,0,0,-8388609,0,0,0,-8388609,0,0,0,16777215,0,0,0,0,0,0,0,-65536,0,0,0,-1,0,0,0,-1,0,0,
0,-134217217,0,0,0,196611,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,63,0,0,0,3,0,0,0,-10304,0,0,0,-5,0,0,0,1417641983,0,0,0,1048573,0,0,0,-8194,0,0,0,-1,0,0,0,-536936449,0,0,0,-1,0,0,0,-65413,0,0,0,-1,0,0,0,-58977,0,0,0,54513663,0,0,0,0,0,0,0,-131072,0,0,0,41943039,0,0,0,-2,0,0,0,-130945,0,0,0,-1140850693,0,0,0,-65514,0,0,0,460799,0,0,0,0,0,0,0,134217726,0,0,0,524287,0,0,0,-64513,0,0,0,-1,0,0,0,2097151999,0,0,0,-1081345,0,0,0,67059199,0,0,0,-18,0,0,0,-201326593,0,0,0,-14794753,0,0,0,65487,0,0,0,-417810,0,0,
0,-741999105,0,0,0,-1333773921,0,0,0,262095,0,0,0,-423964,0,0,0,-747766273,0,0,0,1577073031,0,0,0,2097088,0,0,0,-282642,0,0,0,-202506753,0,0,0,15295,0,0,0,65473,0,0,0,-417810,0,0,0,-204603905,0,0,0,-1329579633,0,0,0,65475,0,0,0,-700594196,0,0,0,-1010841832,0,0,0,8404423,0,0,0,65408,0,0,0,-139282,0,0,0,-1007682049,0,0,0,6307295,0,0,0,65475,0,0,0,-139284,0,0,0,-1007682049,0,0,0,1080049119,0,0,0,65475,0,0,0,-139284,0,0,0,-1006633473,0,0,0,8404431,0,0,0,65475,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,
0,0,0,134184959,0,0,0,67076095,0,0,0,0,0,0,0,-17816170,0,0,0,1006595246,0,0,0,67059551,0,0,0,0,0,0,0,50331648,0,0,0,-1029700609,0,0,0,-257,0,0,0,-130049,0,0,0,-21032993,0,0,0,50216959,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536805376,0,0,0,2,0,0,0,160,0,0,0,4128766,0,0,0,-2,0,0,0,-1,0,0,0,1713373183,0,0,0,-2,0,0,0,-1,0,0,0,2013265919,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,
0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],ALLOC_NORMAL);ud=allocate([2,3,4,5,6,7,8,0,0,9,10,11,12,13,14,15,16,17,0,0,0,0,0,0,0,0,0,0,0,0,18,19,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,23,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",ALLOC_NORMAL);Jd=allocate([25,3,26,27,28,29,30,0,0,31,32,33,34,35,36,37,16,17,0,0,0,0,0,0,0,0,0,0,0,0,18,19,38,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,23,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",ALLOC_NORMAL);Yc=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,
0,0,0,0,21,10,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,23,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,36,28,28,28,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",
0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",
0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0],ALLOC_NORMAL);ed=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,21,10,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,22,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,36,28,28,28,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0],ALLOC_NORMAL);Mc=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,21,10,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,23,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,36,28,28,28,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",
0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",
0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0],ALLOC_NORMAL);od=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,21,10,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,
25,25,25,25,25,25,22,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,36,28,28,28,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",
0,0,0],ALLOC_NORMAL);Vd=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,10,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,23,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,28,36,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,22,28,28,28,28,28,28,28,28,28,28,22,28,26,28,28,22,28,28,28,28,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);Cd=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,10,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,
12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,22,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,36,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,22,28,28,28,28,28,28,28,28,28,28,22,28,26,28,28,22,28,28,28,28,28,22,22,22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",
0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);le=
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,21,10,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,23,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,
36,28,28,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",
0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);me=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,21,10,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,22,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,36,28,28,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,
0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);Ee=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,21,10,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,
12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,23,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,36,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,22,28,28,28,28,28,28,28,28,28,28,22,28,26,28,28,22,28,28,28,28,28,22,22,22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",
0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);rd=
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,21,10,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,22,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,
36,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,22,28,28,28,28,28,28,28,28,28,28,22,28,26,28,28,22,28,28,28,28,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);Ie=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,21,10,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,
12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,23,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,36,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,22,28,28,28,28,28,28,28,28,28,28,22,28,26,28,28,22,28,28,28,28,28,22,22,22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",
0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);Wd=
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,21,10,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,22,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,
36,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,22,28,28,28,28,28,28,28,28,28,28,22,28,26,28,28,22,28,28,28,28,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);ig=allocate([67,68,65,84,65,91],"i8",ALLOC_NORMAL);we=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,
10,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,23,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,36,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,22,28,28,28,28,28,28,28,28,28,28,22,28,26,28,
28,22,28,28,28,28,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",
0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",
0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);Xd=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,10,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,16,12,19,28,30,3,13,31,32,33,34,35,27,26,17,25,25,25,25,25,25,25,25,25,25,22,18,2,14,11,15,28,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,28,4,28,22,28,24,24,24,24,24,24,22,22,22,22,
22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,36,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,22,28,28,28,28,28,28,28,28,28,28,22,28,26,28,28,22,28,28,28,28,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0],["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",
0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);vh=allocate([118,101,114,115,105,111,110,0],"i8",ALLOC_NORMAL);wg=allocate([115,116,97,110,100,97,108,111,110,101,0],"i8",ALLOC_NORMAL);wh=allocate([121,101,115,0],"i8",ALLOC_NORMAL);xg=allocate([110,111,
0],"i8",ALLOC_NORMAL);Xh=allocate([73,83,79,45,56,56,53,57,45,49,0],"i8",ALLOC_NORMAL);Fg=allocate([85,83,45,65,83,67,73,73,0],"i8",ALLOC_NORMAL);Gg=allocate([85,84,70,45,49,54,0],"i8",ALLOC_NORMAL);sg=allocate([85,84,70,45,49,54,66,69,0],"i8",ALLOC_NORMAL);Yh=allocate([85,84,70,45,49,54,76,69,0],"i8",ALLOC_NORMAL);ef=allocate(24,"i8*",ALLOC_NORMAL);kf=allocate(28,"%struct.ENCODING*",ALLOC_NORMAL);Oe=allocate(28,"%struct.ENCODING*",ALLOC_NORMAL);HEAP[vc]=Je;HEAP[vc+4]=g+218;HEAP[vc+12]=nd;HEAP[vc+
16]=Od;HEAP[vc+20]=g+220;HEAP[vc+28]=zd;HEAP[vc+32]=fd;HEAP[vc+36]=g+222;HEAP[vc+44]=xa;HEAP[vc+48]=Ld;HEAP[vc+52]=g+224;HEAP[vc+60]=Lc;HEAP[vc+64]=oe;HEAP[vc+68]=g+226;HEAP[vc+76]=Ad;HEAP[vc+80]=Yd;HEAP[vc+84]=g+228;HEAP[vc+92]=nb;HEAP[vc+96]=Pd;HEAP[vc+100]=g+230;HEAP[vc+108]=cc;HEAP[vc+112]=Gd;HEAP[vc+116]=g+232;HEAP[vc+124]=Nd;HEAP[wb+12]=te;HEAP[wb+24]=g+234;HEAP[wb+32]=g+236;HEAP[wb+36]=g+238;HEAP[wb+88]=Be;HEAP[wb+92]=g+240;HEAP[wb+96]=g+242;HEAP[ae]=qe;HEAP[ae+4]=ue;HEAP[ae+8]=vd;HEAP[Wc]=
Ce;HEAP[Wc+4]=g+244;HEAP[Wc+12]=aa;HEAP[Wc+16]=Fc;HEAP[Wc+20]=g+246;HEAP[Wc+28]=Ke;HEAP[Ib]=Rf;HEAP[Ib+4]=g+248;HEAP[Ib+8]=g+250;HEAP[Ib+20]=Re;HEAP[Ib+24]=g+252;HEAP[Ib+28]=g+254;HEAP[Ib+40]=hf;HEAP[Ib+44]=g+36;HEAP[Ib+48]=g+256;HEAP[Ib+60]=Ob;HEAP[Ib+64]=g+26;HEAP[Ib+68]=g+258;HEAP[Ib+80]=dg;HEAP[Ib+84]=g+260;HEAP[Ib+88]=g+262;HEAP[Ib+100]=eg;HEAP[Ib+104]=g+264;HEAP[Ib+108]=g+266;HEAP[Ib+120]=fg;HEAP[Ib+124]=g+268;HEAP[Ib+128]=g+270;HEAP[Ib+140]=gg;HEAP[Ib+144]=g+272;HEAP[Ib+148]=g+274;HEAP[Ib+
160]=Vf;HEAP[Ib+164]=g+28;HEAP[Ib+168]=g+276;HEAP[Ib+180]=ng;HEAP[Ib+184]=g+278;HEAP[Ib+188]=g+280;HEAP[Ib+200]=Wf;HEAP[Ib+204]=g+282;HEAP[Ib+208]=g+284;HEAP[Ib+220]=og;HEAP[Ib+224]=g+286;HEAP[Ib+228]=g+288;HEAP[Ib+240]=wc;HEAP[Ib+244]=g+30;HEAP[Ib+248]=g+290;HEAP[Ib+260]=bf;HEAP[Ib+264]=g+292;HEAP[Ib+268]=g+294;HEAP[Ib+280]=cf;HEAP[Ib+284]=g+296;HEAP[Ib+288]=g+298;HEAP[Ib+300]=Ng;HEAP[Ib+304]=g+300;HEAP[Ib+308]=g+302;HEAP[Ib+320]=Ud;HEAP[Ib+324]=g+304;HEAP[Ib+328]=g+306;HEAP[Ib+340]=ea;HEAP[Ib+344]=
g+308;HEAP[Ib+348]=g+310;HEAP[Ib+360]=T;HEAP[Ib+364]=g+312;HEAP[Ib+368]=g+314;HEAP[Ib+380]=qb;HEAP[Ib+384]=g+316;HEAP[Ib+388]=g+318;HEAP[Ib+400]=Sc;HEAP[Ib+404]=g+320;HEAP[Ib+408]=g+322;HEAP[Ib+420]=Og;HEAP[Ib+424]=g+324;HEAP[Ib+428]=g+326;HEAP[Ac+4]=xh;HEAP[Ac+8]=Pg;HEAP[Ac+12]=Qg;HEAP[Ac+16]=Rg;HEAP[Ac+20]=yh;HEAP[Ac+24]=Fd;HEAP[Ac+28]=zh;HEAP[Ac+32]=Sg;HEAP[Ac+36]=Ah;HEAP[Ac+40]=Xc;HEAP[Ac+44]=df;HEAP[Ac+48]=ac;HEAP[Ac+52]=Bh;HEAP[Ac+56]=hg;HEAP[Ac+60]=Ch;HEAP[Ac+64]=ke;HEAP[Ac+68]=Tg;HEAP[Ac+
72]=yg;HEAP[Ac+76]=Ug;HEAP[Ac+80]=zg;HEAP[Ac+84]=Xf;HEAP[Ac+88]=Dh;HEAP[Ac+92]=Te;HEAP[Ac+96]=pg;HEAP[Ac+100]=Ag;HEAP[Ac+104]=Vg;HEAP[Ac+108]=Eh;HEAP[Ac+112]=Wg;HEAP[Ac+116]=Bg;HEAP[Ac+120]=qg;HEAP[Ac+124]=Xg;HEAP[Ac+128]=Fh;HEAP[Ac+132]=Ue;HEAP[Ac+136]=Yg;HEAP[Ac+140]=Gh;HEAP[Ac+144]=Hh;HEAP[Ac+148]=Zg;HEAP[Ac+152]=Ih;HEAP[Ac+156]=Jh;HEAP[Ac+160]=Kh;HEAP[Yf+4]=Lh;HEAP[Yf+16]=Mh;HEAP[Yf+28]=Cg;HEAP[Yf+40]=Nh;HEAP[Yf+52]=Dg;HEAP[rf]=Ph;HEAP[rf+4]=Sh;HEAP[rf+8]=Th;HEAP[rf+12]=dc;HEAP[rf+16]=bg;HEAP[rf+
20]=Qh;HEAP[rf+24]=Vh;HEAP[rf+28]=Xe;HEAP[Yc]=g+328;HEAP[Yc+4]=g+330;HEAP[Yc+8]=g+332;HEAP[Yc+12]=g+334;HEAP[Yc+16]=g+336;HEAP[Yc+20]=g+338;HEAP[Yc+24]=g+340;HEAP[Yc+28]=g+342;HEAP[Yc+32]=g+344;HEAP[Yc+36]=g+346;HEAP[Yc+40]=g+348;HEAP[Yc+44]=g+350;HEAP[Yc+48]=g+352;HEAP[Yc+52]=g+354;HEAP[Yc+56]=g+356;HEAP[Yc+60]=g+358;HEAP[Yc+64]=g+360;HEAP[Yc+332]=g+362;HEAP[Yc+336]=g+364;HEAP[Yc+340]=g+366;HEAP[Yc+344]=g+368;HEAP[Yc+348]=g+370;HEAP[Yc+352]=g+366;HEAP[Yc+356]=g+372;HEAP[Yc+360]=g+374;HEAP[Yc+364]=
g+376;HEAP[ed]=g+328;HEAP[ed+4]=g+330;HEAP[ed+8]=g+332;HEAP[ed+12]=g+334;HEAP[ed+16]=g+336;HEAP[ed+20]=g+338;HEAP[ed+24]=g+340;HEAP[ed+28]=g+342;HEAP[ed+32]=g+344;HEAP[ed+36]=g+346;HEAP[ed+40]=g+348;HEAP[ed+44]=g+350;HEAP[ed+48]=g+352;HEAP[ed+52]=g+354;HEAP[ed+56]=g+356;HEAP[ed+60]=g+358;HEAP[ed+64]=g+360;HEAP[ed+332]=g+362;HEAP[ed+336]=g+364;HEAP[ed+340]=g+366;HEAP[ed+344]=g+368;HEAP[ed+348]=g+370;HEAP[ed+352]=g+366;HEAP[ed+356]=g+372;HEAP[ed+360]=g+374;HEAP[ed+364]=g+376;HEAP[Mc]=g+328;HEAP[Mc+
4]=g+330;HEAP[Mc+8]=g+332;HEAP[Mc+12]=g+334;HEAP[Mc+16]=g+336;HEAP[Mc+20]=g+338;HEAP[Mc+24]=g+340;HEAP[Mc+28]=g+342;HEAP[Mc+32]=g+344;HEAP[Mc+36]=g+346;HEAP[Mc+40]=g+348;HEAP[Mc+44]=g+350;HEAP[Mc+48]=g+352;HEAP[Mc+52]=g+354;HEAP[Mc+56]=g+356;HEAP[Mc+60]=g+358;HEAP[Mc+64]=g+360;HEAP[Mc+332]=g+362;HEAP[Mc+336]=g+364;HEAP[Mc+340]=g+366;HEAP[Mc+344]=g+368;HEAP[Mc+348]=g+370;HEAP[Mc+352]=g+366;HEAP[Mc+356]=g+372;HEAP[Mc+360]=g+374;HEAP[Mc+364]=g+376;HEAP[od]=g+328;HEAP[od+4]=g+330;HEAP[od+8]=g+332;HEAP[od+
12]=g+334;HEAP[od+16]=g+336;HEAP[od+20]=g+338;HEAP[od+24]=g+340;HEAP[od+28]=g+342;HEAP[od+32]=g+344;HEAP[od+36]=g+346;HEAP[od+40]=g+348;HEAP[od+44]=g+350;HEAP[od+48]=g+352;HEAP[od+52]=g+354;HEAP[od+56]=g+356;HEAP[od+60]=g+358;HEAP[od+64]=g+360;HEAP[od+332]=g+362;HEAP[od+336]=g+364;HEAP[od+340]=g+366;HEAP[od+344]=g+368;HEAP[od+348]=g+370;HEAP[od+352]=g+366;HEAP[od+356]=g+372;HEAP[od+360]=g+374;HEAP[od+364]=g+376;HEAP[Vd]=g+328;HEAP[Vd+4]=g+330;HEAP[Vd+8]=g+332;HEAP[Vd+12]=g+334;HEAP[Vd+16]=g+336;HEAP[Vd+
20]=g+338;HEAP[Vd+24]=g+340;HEAP[Vd+28]=g+342;HEAP[Vd+32]=g+344;HEAP[Vd+36]=g+346;HEAP[Vd+40]=g+348;HEAP[Vd+44]=g+350;HEAP[Vd+48]=g+352;HEAP[Vd+52]=g+354;HEAP[Vd+56]=g+356;HEAP[Vd+60]=g+378;HEAP[Vd+64]=g+380;HEAP[Cd]=g+328;HEAP[Cd+4]=g+330;HEAP[Cd+8]=g+332;HEAP[Cd+12]=g+334;HEAP[Cd+16]=g+336;HEAP[Cd+20]=g+338;HEAP[Cd+24]=g+340;HEAP[Cd+28]=g+342;HEAP[Cd+32]=g+344;HEAP[Cd+36]=g+346;HEAP[Cd+40]=g+348;HEAP[Cd+44]=g+350;HEAP[Cd+48]=g+352;HEAP[Cd+52]=g+354;HEAP[Cd+56]=g+356;HEAP[Cd+60]=g+378;HEAP[Cd+64]=
g+380;HEAP[le]=g+328;HEAP[le+4]=g+330;HEAP[le+8]=g+332;HEAP[le+12]=g+334;HEAP[le+16]=g+336;HEAP[le+20]=g+338;HEAP[le+24]=g+340;HEAP[le+28]=g+342;HEAP[le+32]=g+344;HEAP[le+36]=g+346;HEAP[le+40]=g+348;HEAP[le+44]=g+350;HEAP[le+48]=g+352;HEAP[le+52]=g+354;HEAP[le+56]=g+356;HEAP[le+60]=g+382;HEAP[le+64]=g+380;HEAP[me]=g+328;HEAP[me+4]=g+330;HEAP[me+8]=g+332;HEAP[me+12]=g+334;HEAP[me+16]=g+336;HEAP[me+20]=g+338;HEAP[me+24]=g+340;HEAP[me+28]=g+342;HEAP[me+32]=g+344;HEAP[me+36]=g+346;HEAP[me+40]=g+348;HEAP[me+
44]=g+350;HEAP[me+48]=g+352;HEAP[me+52]=g+354;HEAP[me+56]=g+356;HEAP[me+60]=g+382;HEAP[me+64]=g+380;HEAP[Ee]=g+384;HEAP[Ee+4]=g+386;HEAP[Ee+8]=g+388;HEAP[Ee+12]=g+390;HEAP[Ee+16]=g+392;HEAP[Ee+20]=g+394;HEAP[Ee+24]=g+396;HEAP[Ee+28]=g+398;HEAP[Ee+32]=g+400;HEAP[Ee+36]=g+402;HEAP[Ee+40]=g+404;HEAP[Ee+44]=g+406;HEAP[Ee+48]=g+408;HEAP[Ee+52]=g+410;HEAP[Ee+56]=g+412;HEAP[Ee+60]=g+414;HEAP[Ee+64]=g+416;HEAP[rd]=g+384;HEAP[rd+4]=g+386;HEAP[rd+8]=g+388;HEAP[rd+12]=g+390;HEAP[rd+16]=g+392;HEAP[rd+20]=g+394;
HEAP[rd+24]=g+396;HEAP[rd+28]=g+398;HEAP[rd+32]=g+400;HEAP[rd+36]=g+402;HEAP[rd+40]=g+404;HEAP[rd+44]=g+406;HEAP[rd+48]=g+408;HEAP[rd+52]=g+410;HEAP[rd+56]=g+412;HEAP[rd+60]=g+414;HEAP[rd+64]=g+416;HEAP[Ie]=g+384;HEAP[Ie+4]=g+386;HEAP[Ie+8]=g+388;HEAP[Ie+12]=g+390;HEAP[Ie+16]=g+392;HEAP[Ie+20]=g+394;HEAP[Ie+24]=g+396;HEAP[Ie+28]=g+398;HEAP[Ie+32]=g+400;HEAP[Ie+36]=g+402;HEAP[Ie+40]=g+404;HEAP[Ie+44]=g+406;HEAP[Ie+48]=g+408;HEAP[Ie+52]=g+410;HEAP[Ie+56]=g+412;HEAP[Ie+60]=g+414;HEAP[Ie+64]=g+416;HEAP[Wd]=
g+384;HEAP[Wd+4]=g+386;HEAP[Wd+8]=g+388;HEAP[Wd+12]=g+390;HEAP[Wd+16]=g+392;HEAP[Wd+20]=g+394;HEAP[Wd+24]=g+396;HEAP[Wd+28]=g+398;HEAP[Wd+32]=g+400;HEAP[Wd+36]=g+402;HEAP[Wd+40]=g+404;HEAP[Wd+44]=g+406;HEAP[Wd+48]=g+408;HEAP[Wd+52]=g+410;HEAP[Wd+56]=g+412;HEAP[Wd+60]=g+414;HEAP[Wd+64]=g+416;HEAP[we]=g+418;HEAP[we+4]=g+420;HEAP[we+8]=g+422;HEAP[we+12]=g+424;HEAP[we+16]=g+426;HEAP[we+20]=g+428;HEAP[we+24]=g+430;HEAP[we+28]=g+432;HEAP[we+32]=g+434;HEAP[we+36]=g+436;HEAP[we+40]=g+438;HEAP[we+44]=g+440;
HEAP[we+48]=g+442;HEAP[we+52]=g+444;HEAP[we+56]=g+446;HEAP[we+60]=g+448;HEAP[we+64]=g+450;HEAP[Xd]=g+418;HEAP[Xd+4]=g+420;HEAP[Xd+8]=g+422;HEAP[Xd+12]=g+424;HEAP[Xd+16]=g+426;HEAP[Xd+20]=g+428;HEAP[Xd+24]=g+430;HEAP[Xd+28]=g+432;HEAP[Xd+32]=g+434;HEAP[Xd+36]=g+436;HEAP[Xd+40]=g+438;HEAP[Xd+44]=g+440;HEAP[Xd+48]=g+442;HEAP[Xd+52]=g+444;HEAP[Xd+56]=g+446;HEAP[Xd+60]=g+448;HEAP[Xd+64]=g+450;HEAP[ef]=Xh;HEAP[ef+4]=Fg;HEAP[ef+8]=qd;HEAP[ef+12]=Gg;HEAP[ef+16]=sg;HEAP[ef+20]=Yh;HEAP[kf]=Cd;HEAP[kf+4]=me;
HEAP[kf+8]=ed;HEAP[kf+12]=Xd;HEAP[kf+16]=Xd;HEAP[kf+20]=rd;HEAP[kf+24]=ed;HEAP[Oe]=Vd;HEAP[Oe+4]=le;HEAP[Oe+8]=Yc;HEAP[Oe+12]=we;HEAP[Oe+16]=we;HEAP[Oe+20]=Ee;HEAP[Oe+24]=Yc}var tb={arguments:[]},Hb,da,Jb,jb,bc,Wb,lb,kb,Lb,Eb,Yb,yb,fc,zb,jc,mc,Xb,qc,tc,vb,eb,Tb,oc,Fb,Pb,Vb,Dc,yc,Kc,sa,Bb,cb,Nc,ic,$b,Qb,uc,Gc,pc,Zb,wc,sc,Oc,Zc,yd,Tc,sd,nd,zc,Pc,Ec,zd,Uc,ec,xa,gc,Lc,xc,cc,Ad,Bd,nb,Kd,Nd,Gd,Je,Od,fd,Ld,oe,Yd,Pd,vc,Md,Fe,ye,Hd,ze,Id,de,ee,fe,pe,Db,ge,Zd,$d,ie,ad,Rd,vd,Qc,je,re,se,Ob,Be,te,wb,aa,Hc,ae,
qe,ue,wd,Vc,Ke,Le,Wc,Ce,Fc,Dd,De,xd,cd,Ed,Ge,ub,gd,Rb,be,hd,dd,id,jd,qd,Ic,nc,kd,Sd,$c,Ye,Bc,Ze,Pe,nf,sf,ce,Me,Qe,Td,$e,ff,af,Ub,Se,bd,ld,of,tf,pf,xf,yf,zf,Af,Bf,Cf,Df,md,uf,Ef,hc,Ff,lc,vf,Cc,Gf,Hf,He,If,Rc,Jf,Kf,qf,Lf,Mf,lg,za,Nf,Ne,cg,ve,mg,gf,Jc,Of,Pf,Qf,Rf,Re,hf,dg,eg,fg,gg,Vf,ng,Wf,og,bf,cf,Ng,Ud,ea,T,qb,Sc,Og,Ib,jh,Ac,xh,Pg,Qg,Rg,yh,Fd,zh,Sg,Ah,Xc,df,ac,Bh,hg,Ch,ke,Tg,yg,Ug,zg,Xf,Dh,Te,pg,Ag,Vg,Eh,Wg,Bg,qg,Xg,Fh,Ue,Yg,Gh,Hh,Zg,Ih,Jh,Kh,$g,Yf,Lh,Mh,Cg,Nh,Dg,kh,lh,Uf,mh,nh,oh,Kg,Lg,ph,qh,rh,Mg,
sh,th,Oh,uh,Ph,Zf,kg,jf,Qh,bg,Rh,Sh,Th,dc,ah,Eg,Uh,rc,Vh,Xe,vg,Wh,Sf,rg,Tf,rf,kc,ud,Jd,Yc,ed,Mc,od,Vd,Cd,le,me,Ee,rd,Ie,Wd,ig,we,Xd,vh,wg,wh,xg,Xh,Fg,Gg,sg,Yh,ef,kf,Oe;tb._initpyexpat=function(){var a=STACKTOP;STACKTOP+=12;_memset(a,0,12);var b;for(b=-1;;)switch(b){case -1:var c,e,d,f,h,j,k,l,m,n=a,o,p,q,r,s;d=_PyString_FromString(De);b=d==0?35:1;break;case 1:h=_PyString_FromString(xd);b=h==0?35:2;break;case 2:HEAP[wb+4]=_PyType_Type;c=_Py_InitModule4(cd,Wc,Dd,0,1013);b=c==0?35:3;break;case 3:b=HEAP[da]==
0?4:5;break;case 4:b=_PyErr_NewException(Ed,0,0);HEAP[da]=b;b=HEAP[da]==0?35:5;break;case 5:HEAP[HEAP[da]]+=1;_PyModule_AddObject(c,Ge,HEAP[da]);HEAP[HEAP[da]]+=1;_PyModule_AddObject(c,ub,HEAP[da]);HEAP[wb]+=1;_PyModule_AddObject(c,gd,wb);l=b=_PyString_FromString(Rb);b=b==0?35:6;break;case 6:_PyModule_AddObject(c,be,l);e=void 0;e=$g;_PyModule_AddStringConstant(c,hd,e);e=n;f=STACKTOP;STACKTOP+=12;_memset(f,0,12);HEAP[f]=2;HEAP[f+4]=0;HEAP[f+8]=0;HEAP[e]=HEAP[f];HEAP[e+4]=HEAP[f+4];HEAP[e+8]=HEAP[f+
8];STACKTOP=f;e=_Py_BuildValue(dd,allocate([HEAP[n],0,0,0,HEAP[n+4],0,0,0,HEAP[n+8],0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0],ALLOC_STACK));_PyModule_AddObject(c,id,e);a:{e=void 0;for(e=-1;;)switch(e){case -1:var u;u=0;e=1;break;case 1:HEAP[Md+u]=u&255;u=e=u+1;e=e<=255?1:2;break;case 2:HEAP[Md+256]=0;break a;default:assert(0,"bad label: "+e)}}_PyModule_AddStringConstant(c,jd,qd);k=_PySys_GetObject(Ic);e=_PyModule_GetDict(c);f=_PyDict_GetItem(e,d);b=f==0?7:9;break;case 7:f=_PyModule_New(De);b=f!=
0?8:9;break;case 8:_PyDict_SetItem(k,d,f);_PyModule_AddObject(c,nc,f);b=9;break;case 9:HEAP[d]-=1;b=HEAP[d]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[d+4]+24]](d);b=11;break;case 11:j=b=_PyDict_GetItem(e,h);b=b==0?12:14;break;case 12:j=_PyModule_New(xd);b=j!=0?13:14;break;case 13:_PyDict_SetItem(k,h,j);_PyModule_AddObject(c,kd,j);b=14;break;case 14:HEAP[h]-=1;b=HEAP[h]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);b=16;break;case 16:b=f==0?35:17;break;case 17:b=j==0?35:18;break;
case 18:o=void 0;o=Yf;p=_PyList_New(0);b=p==0?19:20;break;case 19:_PyErr_Clear();b=33;break;case 20:q=0;b=30;break;case 21:s=_Py_BuildValue(Sd,allocate([HEAP[o+12*q+4],0,0,0,HEAP[o+12*q+8],0,0,0],["i8*",0,0,0,"i32",0,0,0],ALLOC_STACK));var t=p;b=s==0?22:25;break;case 22:HEAP[p]=HEAP[t]-1;b=HEAP[p]==0?23:24;break;case 23:FUNCTION_TABLE[HEAP[HEAP[p+4]+24]](p);b=24;break;case 24:p=0;b=33;break;case 25:r=_PyList_Append(t,s);HEAP[s]-=1;b=HEAP[s]==0?26:27;break;case 26:FUNCTION_TABLE[HEAP[HEAP[s+4]+24]](s);
b=27;break;case 27:b=r<0?28:29;break;case 28:_PyErr_Clear();b=31;break;case 29:q+=1;b=30;break;case 30:b=HEAP[o+12*q]!=0?21:31;break;case 31:b=p!=0?32:33;break;case 32:_PyModule_AddObject(c,$c,p);b=33;break;case 33:m=I(1);_PyModule_AddStringConstant(f,Ye,m);m=I(2);_PyModule_AddStringConstant(f,Bc,m);m=I(3);_PyModule_AddStringConstant(f,Ze,m);m=I(4);_PyModule_AddStringConstant(f,Pe,m);m=I(5);_PyModule_AddStringConstant(f,nf,m);m=I(6);_PyModule_AddStringConstant(f,sf,m);m=I(7);_PyModule_AddStringConstant(f,
ce,m);m=I(8);_PyModule_AddStringConstant(f,Me,m);m=I(9);_PyModule_AddStringConstant(f,Qe,m);m=I(10);_PyModule_AddStringConstant(f,Td,m);m=I(11);_PyModule_AddStringConstant(f,$e,m);m=I(12);_PyModule_AddStringConstant(f,ff,m);m=I(13);_PyModule_AddStringConstant(f,af,m);m=I(14);_PyModule_AddStringConstant(f,Ub,m);m=I(15);_PyModule_AddStringConstant(f,Se,m);m=I(16);_PyModule_AddStringConstant(f,bd,m);m=I(17);_PyModule_AddStringConstant(f,ld,m);m=I(18);_PyModule_AddStringConstant(f,of,m);m=I(19);_PyModule_AddStringConstant(f,
tf,m);m=I(20);_PyModule_AddStringConstant(f,pf,m);m=I(21);_PyModule_AddStringConstant(f,xf,m);m=I(22);_PyModule_AddStringConstant(f,yf,m);m=I(23);_PyModule_AddStringConstant(f,zf,m);m=I(24);_PyModule_AddStringConstant(f,Af,m);m=I(25);_PyModule_AddStringConstant(f,Bf,m);m=I(26);_PyModule_AddStringConstant(f,Cf,m);m=I(27);_PyModule_AddStringConstant(f,Df,m);m=I(28);_PyModule_AddStringConstant(f,md,m);m=I(29);_PyModule_AddStringConstant(f,uf,m);m=I(30);_PyModule_AddStringConstant(f,Ef,m);m=I(31);_PyModule_AddStringConstant(f,
hc,m);m=I(32);_PyModule_AddStringConstant(f,Ff,m);m=I(33);_PyModule_AddStringConstant(f,lc,m);m=I(34);_PyModule_AddStringConstant(f,vf,m);m=I(35);_PyModule_AddStringConstant(f,Cc,m);m=I(36);_PyModule_AddStringConstant(f,Gf,m);m=I(37);_PyModule_AddStringConstant(f,Hf,m);_PyModule_AddStringConstant(f,He,If);_PyModule_AddIntConstant(c,Rc,0);_PyModule_AddIntConstant(c,Jf,1);_PyModule_AddIntConstant(c,Kf,2);_PyModule_AddStringConstant(j,He,qf);_PyModule_AddIntConstant(j,Lf,1);_PyModule_AddIntConstant(j,
Mf,2);_PyModule_AddIntConstant(j,lg,3);_PyModule_AddIntConstant(j,za,4);_PyModule_AddIntConstant(j,Nf,5);_PyModule_AddIntConstant(j,Ne,6);_PyModule_AddIntConstant(j,cg,0);_PyModule_AddIntConstant(j,ve,1);_PyModule_AddIntConstant(j,mg,2);_PyModule_AddIntConstant(j,gf,3);HEAP[Jc+4]=80;HEAP[Jc]=Of;HEAP[Jc+8]=2;HEAP[Jc+12]=0;HEAP[Jc+16]=0;HEAP[Jc+20]=g+12;HEAP[Jc+24]=g+14;HEAP[Jc+28]=g+16;HEAP[Jc+32]=g+18;HEAP[Jc+36]=g+20;HEAP[Jc+40]=g+22;HEAP[Jc+44]=g+24;HEAP[Jc+48]=g+26;HEAP[Jc+52]=g+28;HEAP[Jc+56]=
g+30;HEAP[Jc+60]=g+32;HEAP[Jc+64]=g+34;HEAP[Jc+68]=g+36;HEAP[Jc+72]=g+38;HEAP[Jc+76]=g+40;m=b=_PyCapsule_New(Jc,Pf,0);b=b!=0?34:35;break;case 34:_PyModule_AddObject(c,Qf,m);b=35;break;case 35:STACKTOP=a;return;default:assert(0,"bad label: "+b)}};FUNCTION_TABLE=FUNCTION_TABLE.concat([0,0,function(){return 0},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c,e;c=a;b=c==0?1:2;break;case 1:HEAP[__Py_NoneStruct]+=1;e=__Py_NoneStruct;b=3;break;case 2:b=_strlen(c);e=_PyUnicodeUCS2_DecodeUTF8(c,b,lb);
b=3;break;case 3:return a=e;default:assert(0,"bad label: "+b)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c,e;c=a;b=c==0?1:2;break;case 1:HEAP[__Py_NoneStruct]+=1;e=__Py_NoneStruct;b=3;break;case 2:e=_PyString_FromString(c);b=3;break;case 3:return a=e;default:assert(0,"bad label: "+b)}},0,function(){},0,function(a,b,c){for(a=-1;;)switch(a){case -1:var e,d,f,g,h,j;e=b;d=c;g=0;e=_PyUnicodeUCS2_Decode(Md,256,e,Fe);a=e==0?1:2;break;case 1:f=g;a=10;break;case 2:h=0;a=3;break;case 3:j=HEAP[HEAP[e+
12]+2*h];var k=h,a=HEAP[HEAP[e+12]+2*h]==-3?4:5;break;case 4:HEAP[d+k*4]=-1;a=6;break;case 5:HEAP[d+k*4]=j;a=6;break;case 6:h=a=h+1;a=a<=255?3:7;break;case 7:HEAP[d+1024]=0;HEAP[d+1028]=0;HEAP[d+1032]=0;g=1;HEAP[e]-=1;a=HEAP[e]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[e+4]+24]](e);a=9;break;case 9:f=g;a=10;break;case 10:return b=f;default:assert(0,"bad label: "+a)}},0,I,0,D,0,L,0,M,0,A,0,s,0,w,0,y,0,function(a,b){HEAP[a+68]=b},0,function(a,b){HEAP[a+80]=b;HEAP[a+308]=1},0,function(a,b,c){HEAP[a+
52]=b;HEAP[a+56]=c},0,function(a,b,c){HEAP[a+100]=b;HEAP[a+104]=c},0,function(a,b){HEAP[a+64]=b},0,C,0,x,0,_malloc,0,_realloc,0,_free,0,function(a,b,c,e){var d;for(d=-1;;)switch(d){case -1:var f,h,j,k,l,m;f=a;h=b;j=c;k=e;m=B(f);d=m!=0?1:2;break;case 1:l=m;d=3;break;case 2:HEAP[f+280]=g+66;l=ya(f,h,j,k);d=3;break;case 3:return a=l;default:assert(0,"bad label: "+d)}},0,function(a,b,c,e){var d;for(d=-1;;)switch(d){case -1:var f,h,j,k,l,m;f=a;h=b;j=c;k=e;m=B(f);d=m!=0?1:2;break;case 1:l=m;d=3;break;case 2:HEAP[f+
280]=g+56;l=V(f,h,j,k);d=3;break;case 3:return a=l;default:assert(0,"bad label: "+d)}},0,function(a,b,c,e){var d;for(d=-1;;)switch(d){case -1:var f,h,j,k,l,m;f=a;h=b;j=c;k=e;m=B(f);d=m!=0?1:2;break;case 1:l=m;d=5;break;case 2:HEAP[HEAP[f+356]+131]=1;var n=f+280;d=HEAP[f+256+20]!=0?3:4;break;case 3:HEAP[n]=g+80;l=ha(f,h,j,k);d=5;break;case 4:HEAP[n]=g+82;l=la(f,h,j,k);d=5;break;case 5:return a=l;default:assert(0,"bad label: "+d)}},0,function(a){return HEAP[a+284]},0,V,0,Q,0,Z,0,function(a,b,c,e){var d=
STACKTOP;STACKTOP+=4;_memset(d,0,4);var f;for(f=-1;;)switch(f){case -1:var h,j=d,k,l,m,n;h=a;HEAP[j]=b;k=c;l=e;n=ba(h,HEAP[h+144],j,k,l,HEAP[h+480+4]==0&255);f=n!=0?1:2;break;case 1:m=n;f=7;break;case 2:f=HEAP[j]!=0?3:6;break;case 3:var o=h+280;f=HEAP[h+476]!=0?4:5;break;case 4:HEAP[o]=g+60;m=Z(h,HEAP[j],k,l);f=7;break;case 5:HEAP[o]=g+64;m=F(h,HEAP[j],k,l);f=7;break;case 6:m=n;f=7;break;case 7:return a=m,STACKTOP=d,a;default:assert(0,"bad label: "+f)}},0,F,0,ya,0,function(a,b,c){var e;for(e=-1;;)switch(e){case -1:var d,
f,h,j;d=a;f=b;j=Ab(c);e=j==-1?1:2;break;case 1:h=0;e=3;break;case 2:HEAP[d+73]=j&255;HEAP[d]=g+212;HEAP[d+4]=g+214;HEAP[d+52]=g+208;HEAP[d+76]=f;HEAP[f]=d;h=1;e=3;break;case 3:return a=h;default:assert(0,"bad label: "+e)}},0,pb,0,function(a,b,c,e,d,f,h,j,k,l){return sb(g+216,a,b,c,e,d,f,h,j,k,l)},0,function(a,b,c,e,d,f,h,j,k,l){return sb(g+210,a,b,c,e,d,f,h,j,k,l)},0,function(a,b,c,e){var d;for(d=-1;;)switch(d){case -1:var f;f=Nb(a,b,c,e);d=f!=0?1:2;break;case 1:HEAP[f+76+58]=23;d=2;break;case 2:return a=
f;default:assert(0,"bad label: "+d)}},0,Nb,0,ha,0,la,0,ra,0,function(a,b,c,e){var d=STACKTOP;STACKTOP+=4;_memset(d,0,4);var f;for(f=-1;;)switch(f){case -1:var h,j=d,k,l,m,n;h=a;HEAP[j]=b;k=c;l=e;n=W(h,HEAP[h+144],j,k,l,HEAP[h+480+4]==0&255);f=n!=0?1:2;break;case 1:m=n;f=5;break;case 2:f=HEAP[j]!=0?3:4;break;case 3:HEAP[h+280]=g+66;m=ya(h,HEAP[j],k,l);f=5;break;case 4:m=n;f=5;break;case 5:return a=m,STACKTOP=d,a;default:assert(0,"bad label: "+f)}},0,Ua,0,function(a,b,c,e){var d=STACKTOP;STACKTOP+=
4;_memset(d,0,4);var f,h=null;for(f=-1;;)switch(f){case -1:var j,k,l,m,n,o,p,q,r=d,s,u;j=a;k=b;l=c;m=e;u=HEAP[j+300];f=u==0?1:2;break;case 1:n=23;f=13;break;case 2:o=HEAP[u+12];p=HEAP[o+4]+HEAP[o+12];q=HEAP[o+4]+HEAP[o+8];var t=HEAP[j+228];f=HEAP[o+33]!=0?3:4;break;case 3:var h=FUNCTION_TABLE[HEAP[t]](HEAP[j+228],p,q,r),B=Da(j,HEAP[j+228],p,q,h,HEAP[r],r,0);s=B;h=3;f=5;break;case 4:var P=K(j,HEAP[u+16],t,p,q,r,0);s=P;h=4;f=5;break;case 5:f=(h==4?P:B)!=0?6:7;break;case 6:n=s;f=13;break;case 7:f=q==
HEAP[r]?10:8;break;case 8:f=HEAP[j+480]!=3?10:9;break;case 9:HEAP[o+12]=HEAP[r]-HEAP[o+4];n=s;f=13;break;case 10:HEAP[o+32]=0;HEAP[j+300]=HEAP[u+8];HEAP[u+8]=HEAP[j+304];HEAP[j+304]=u;var v=j+280;f=HEAP[o+33]!=0?11:12;break;case 11:HEAP[v]=g+66;n=FUNCTION_TABLE[HEAP[HEAP[j+144]]](HEAP[j+144],k,l,r);n=Da(j,HEAP[j+144],k,l,n,HEAP[r],m,HEAP[j+480+4]==0&255);f=13;break;case 12:HEAP[v]=g+64;n=K(j,HEAP[j+476]!=0,HEAP[j+144],k,l,m,HEAP[j+480+4]==0&255);f=13;break;case 13:return a=n,STACKTOP=d,a;default:assert(0,
"bad label: "+f)}},0,function(a,b,c,e,d){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=e;m=d;f=j;f=f==11?2:f==13?3:f==14?4:f==15?1:f==16?5:f==29?7:8;break;case 1:n=0;f=9;break;case 2:n=55;f=9;break;case 3:n=56;f=9;break;case 4:n=0;f=9;break;case 5:f=FUNCTION_TABLE[HEAP[m+28]](m,k+HEAP[m+68]*2,l,Zf)==0?8:6;break;case 6:HEAP[h]=g+94;n=3;f=9;break;case 7:HEAP[h]=g+96;n=2;f=9;break;case 8:n=S(h,j);f=9;break;case 9:return a=n;default:assert(0,"bad label: "+f)}},0,function(a,b){var c;
for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==18?2:c==41?2:3;break;case 1:f=3;c=4;break;case 2:HEAP[e]=g+98;c=f=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(){return 0},0,function(a,b,c,e,d){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=e;m=d;f=j;f=f==15?1:f==17?3:f==18?4:f==25?2:8;break;case 1:n=3;f=9;break;case 2:HEAP[h]=g+100;n=7;f=9;break;case 3:HEAP[h]=g+102;n=8;f=9;break;case 4:f=FUNCTION_TABLE[HEAP[m+28]](m,
k,l,Tf)!=0?5:6;break;case 5:HEAP[h]=g+104;n=3;f=9;break;case 6:f=FUNCTION_TABLE[HEAP[m+28]](m,k,l,Sf)!=0?7:8;break;case 7:HEAP[h]=g+106;n=3;f=9;break;case 8:n=S(h,j);f=9;break;case 9:return a=n;default:assert(0,"bad label: "+f)}},0,Qa,0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==11?2:c==13?3:c==15?1:c==29?4:5;break;case 1:f=0;c=6;break;case 2:f=55;c=6;break;case 3:f=56;c=6;break;case 4:HEAP[e]=g+96;f=2;c=6;break;case 5:f=S(e,d);c=6;break;case 6:return e=f;default:assert(0,
"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==27?2:3;break;case 1:f=3;c=4;break;case 2:HEAP[e]=g+108;f=5;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==27?2:3;break;case 1:f=3;c=4;break;case 2:HEAP[e]=g+104;f=6;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;
for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==17?3:c==25?2:4;break;case 1:f=3;c=5;break;case 2:HEAP[e]=g+100;f=7;c=5;break;case 3:HEAP[e]=g+102;f=8;c=5;break;case 4:f=S(e,d);c=5;break;case 5:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==18?3:c==22?2:4;break;case 1:f=11;c=5;break;case 2:HEAP[e]=g+124;f=11;c=5;break;case 3:HEAP[e]=g+126;f=9;c=5;break;case 4:f=S(e,d);c=5;break;case 5:return e=f;default:assert(0,
"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==18?2:c==41?2:3;break;case 1:f=33;c=4;break;case 2:HEAP[e]=g+154;f=34;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==18?2:c==41?2:3;break;case 1:f=39;c=4;break;case 2:HEAP[e]=g+172;f=40;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},
0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==18?2:3;break;case 1:f=17;c=4;break;case 2:HEAP[e]=g+146;f=18;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==17?2:3;break;case 1:f=3;c=4;break;case 2:HEAP[e]=g+102;f=8;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,mb,0,function(a,b,c,e,d){var f;
for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=e;m=d;f=j;f=f==15?1:f==18?2:6;break;case 1:n=0;f=7;break;case 2:f=FUNCTION_TABLE[HEAP[m+28]](m,k,l,Uh)!=0?3:4;break;case 3:HEAP[h]=g+186;n=0;f=7;break;case 4:f=FUNCTION_TABLE[HEAP[m+28]](m,k,l,ah)!=0?5:6;break;case 5:HEAP[h]=g+188;n=0;f=7;break;case 6:n=S(h,j);f=7;break;case 7:return a=n;default:assert(0,"bad label: "+f)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==18?2:3;break;case 1:f=11;c=4;break;
case 2:HEAP[e]=g+128;f=10;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b,c,e,d){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=e;m=d;f=j;f=f==15?1:f==18?2:f==27?6:7;break;case 1:n=11;f=8;break;case 2:f=FUNCTION_TABLE[HEAP[m+28]](m,k,l,Tf)!=0?3:4;break;case 3:HEAP[h]=g+130;n=11;f=8;break;case 4:f=FUNCTION_TABLE[HEAP[m+28]](m,k,l,Sf)!=0?5:7;break;case 5:HEAP[h]=g+132;n=11;f=8;break;case 6:HEAP[h]=g+134;HEAP[h+8]=11;n=12;f=8;
break;case 7:n=S(h,j);f=8;break;case 8:return a=n;default:assert(0,"bad label: "+f)}},0,function(a,b,c,e,d){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=e;m=d;f=j;f=f==15?1:f==18?2:f==27?6:7;break;case 1:n=11;f=8;break;case 2:f=FUNCTION_TABLE[HEAP[m+28]](m,k,l,Tf)!=0?3:4;break;case 3:HEAP[h]=g+140;n=11;f=8;break;case 4:f=FUNCTION_TABLE[HEAP[m+28]](m,k,l,Sf)!=0?5:7;break;case 5:HEAP[h]=g+142;n=11;f=8;break;case 6:HEAP[h]=g+134;HEAP[h+8]=11;n=12;f=8;break;case 7:n=S(h,j);f=8;break;
case 8:return a=n;default:assert(0,"bad label: "+f)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==27?2:3;break;case 1:f=11;c=4;break;case 2:HEAP[e]=g+136;f=13;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==27?2:3;break;case 1:f=11;c=4;break;case 2:HEAP[e]=g+130;f=14;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,
"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f,h;e=a;c=d=b;c=c==15?1:c==17?2:6;break;case 1:h=HEAP[e+8];c=7;break;case 2:c=HEAP[e+16]!=0?3:4;break;case 3:f=g+100;c=5;break;case 4:f=g+120;c=5;break;case 5:HEAP[e]=f;h=HEAP[e+8];c=7;break;case 6:h=S(e,d);c=7;break;case 7:return e=h;default:assert(0,"bad label: "+c)}},0,function(a,b,c,e,d){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n,o;h=a;j=b;k=c;l=e;m=d;f=j;f=f==15?1:f==17?2:f==18?6:8;break;case 1:o=11;f=9;break;
case 2:f=HEAP[h+16]!=0?3:4;break;case 3:n=g+100;f=5;break;case 4:n=g+120;f=5;break;case 5:HEAP[h]=n;o=15;f=9;break;case 6:f=FUNCTION_TABLE[HEAP[m+28]](m,k,l,rc)!=0?7:8;break;case 7:HEAP[h]=g+138;o=11;f=9;break;case 8:o=S(h,j);f=9;break;case 9:return a=o;default:assert(0,"bad label: "+f)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==18?2:3;break;case 1:f=11;c=4;break;case 2:HEAP[e]=g+134;HEAP[e+8]=11;f=16;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;
default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==27?2:3;break;case 1:f=11;c=4;break;case 2:HEAP[e]=g+144;f=13;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==27?2:3;break;case 1:f=11;c=4;break;case 2:HEAP[e]=g+140;f=14;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+
c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f,h;e=a;c=d=b;c=c==15?1:c==17?2:6;break;case 1:h=11;c=7;break;case 2:c=HEAP[e+16]!=0?3:4;break;case 3:f=g+100;c=5;break;case 4:f=g+120;c=5;break;case 5:HEAP[e]=f;h=15;c=7;break;case 6:h=S(e,d);c=7;break;case 7:return e=h;default:assert(0,"bad label: "+c)}},0,function(a,b,c,e,d){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=e;m=d;f=j;f=f==15?1:f==18?2:6;break;case 1:n=17;f=7;break;case 2:f=FUNCTION_TABLE[HEAP[m+28]](m,
k,l,Tf)!=0?3:4;break;case 3:HEAP[h]=g+148;n=17;f=7;break;case 4:f=FUNCTION_TABLE[HEAP[m+28]](m,k,l,Sf)!=0?5:6;break;case 5:HEAP[h]=g+150;n=17;f=7;break;case 6:n=S(h,j);f=7;break;case 7:return a=n;default:assert(0,"bad label: "+f)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==27?2:3;break;case 1:f=17;c=4;break;case 2:HEAP[e]=g+134;HEAP[e+8]=17;f=19;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;
for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==27?2:3;break;case 1:f=17;c=4;break;case 2:HEAP[e]=g+152;f=21;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f,h;e=a;c=d=b;c=c==15?1:c==17?3:c==27?2:7;break;case 1:h=17;c=8;break;case 2:HEAP[e]=g+134;HEAP[e+8]=17;h=19;c=8;break;case 3:c=HEAP[e+16]!=0?4:5;break;case 4:f=g+100;c=6;break;case 5:f=g+120;c=6;break;case 6:HEAP[e]=f;h=20;c=8;break;
case 7:h=S(e,d);c=8;break;case 8:return e=h;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f,h;e=a;c=d=b;c=c==15?1:c==17?2:c==18?6:c==41?6:7;break;case 1:h=33;c=8;break;case 2:c=HEAP[e+16]!=0?3:4;break;case 3:f=g+100;c=5;break;case 4:f=g+120;c=5;break;case 5:HEAP[e]=f;h=33;c=8;break;case 6:HEAP[e]=g+156;h=22;c=8;break;case 7:h=S(e,d);c=8;break;case 8:return e=h;default:assert(0,"bad label: "+c)}},0,function(a,b,c,e,d){var f,h=null;for(f=-1;;)switch(f){case -1:var j,
k,l,m,n,o,p;j=a;k=b;l=c;m=e;n=d;f=k;f=f==15?1:f==18?2:f==23?9:10;break;case 1:o=33;f=11;break;case 2:p=0;h=2;f=6;break;case 3:f=FUNCTION_TABLE[r](n,l,m,HEAP[rf+p*4])!=0?4:5;break;case 4:HEAP[j]=g+158;o=p+23;f=11;break;case 5:var q=p+1;p=q;h=5;f=6;break;case 6:var r=HEAP[n+28];f=(h==5?q:0)<=7?3:7;break;case 7:f=FUNCTION_TABLE[r](n,l,m,vg)!=0?8:10;break;case 8:HEAP[j]=g+160;o=33;f=11;break;case 9:HEAP[j]=g+162;o=33;f=11;break;case 10:o=S(j,k);f=11;break;case 11:return a=o;default:assert(0,"bad label: "+
f)}},0,function(a,b,c,e,d){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=e;m=d;f=j;f=f==15?1:f==20?2:f==27?8:9;break;case 1:n=33;f=10;break;case 2:f=FUNCTION_TABLE[HEAP[m+28]](m,k+HEAP[m+68],l,Eg)!=0?3:4;break;case 3:HEAP[h]=g+154;n=35;f=10;break;case 4:f=FUNCTION_TABLE[HEAP[m+28]](m,k+HEAP[m+68],l,rg)!=0?5:6;break;case 5:HEAP[h]=g+154;n=36;f=10;break;case 6:f=FUNCTION_TABLE[HEAP[m+28]](m,k+HEAP[m+68],l,Rh)!=0?7:9;break;case 7:HEAP[h]=g+170;n=33;f=10;break;case 8:HEAP[h]=g+154;
n=37;f=10;break;case 9:n=S(h,j);f=10;break;case 10:return a=n;default:assert(0,"bad label: "+f)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==23?2:3;break;case 1:f=33;c=4;break;case 2:HEAP[e]=g+166;f=33;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==18?2:c==19?2:c==41?2:3;break;case 1:f=33;c=4;break;case 2:HEAP[e]=g+164;f=31;c=4;break;
case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==21?3:c==24?2:4;break;case 1:f=33;c=5;break;case 2:HEAP[e]=g+158;f=33;c=5;break;case 3:HEAP[e]=g+162;f=33;c=5;break;case 4:f=S(e,d);c=5;break;case 5:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==18?2:3;break;case 1:f=33;c=4;break;case 2:HEAP[e]=g+168;f=
32;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==21?3:c==24?2:4;break;case 1:f=33;c=5;break;case 2:HEAP[e]=g+158;f=33;c=5;break;case 3:HEAP[e]=g+166;f=33;c=5;break;case 4:f=S(e,d);c=5;break;case 5:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==27?2:3;break;case 1:f=33;c=4;break;case 2:HEAP[e]=
g+154;f=38;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b,c,e,d){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=e;m=d;f=j;f=f==15?1:f==18?2:f==23?6:7;break;case 1:n=39;f=8;break;case 2:f=FUNCTION_TABLE[HEAP[m+28]](m,k,l,jf)!=0?3:4;break;case 3:HEAP[h]=g+134;HEAP[h+8]=39;n=42;f=8;break;case 4:f=FUNCTION_TABLE[HEAP[m+28]](m,k,l,Oh)!=0?5:7;break;case 5:HEAP[h]=g+134;HEAP[h+8]=39;n=41;f=8;break;case 6:HEAP[h]=g+174;HEAP[h+4]=
1;n=44;f=8;break;case 7:n=S(h,j);f=8;break;case 8:return a=n;default:assert(0,"bad label: "+f)}},0,function(a,b,c,e,d){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=e;m=d;f=j;f=f==15?1:f==18?5:f==20?2:f==23?4:f==30?6:f==31?7:f==32?8:f==41?5:9;break;case 1:n=39;f=10;break;case 2:f=FUNCTION_TABLE[HEAP[m+28]](m,k+HEAP[m+68],l,Wh)!=0?3:9;break;case 3:HEAP[h]=g+176;n=43;f=10;break;case 4:HEAP[h+4]=2;HEAP[h]=g+178;n=44;f=10;break;case 5:HEAP[h]=g+180;n=51;f=10;break;case 6:HEAP[h]=g+
180;n=53;f=10;break;case 7:HEAP[h]=g+180;n=52;f=10;break;case 8:HEAP[h]=g+180;n=54;f=10;break;case 9:n=S(h,j);f=10;break;case 10:return a=n;default:assert(0,"bad label: "+f)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==21?4:c==24?2:c==36?3:5;break;case 1:f=39;c=6;break;case 2:HEAP[e]=g+134;HEAP[e+8]=39;f=45;c=6;break;case 3:HEAP[e]=g+134;HEAP[e+8]=39;f=46;c=6;break;case 4:HEAP[e]=g+182;f=39;c=6;break;case 5:f=S(e,d);c=6;break;case 6:return e=f;default:assert(0,
"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==18?3:c==23?2:c==30?4:c==31?5:c==32?6:c==41?3:7;break;case 1:f=39;c=8;break;case 2:HEAP[e+4]+=1;f=44;c=8;break;case 3:HEAP[e]=g+180;f=51;c=8;break;case 4:HEAP[e]=g+180;f=53;c=8;break;case 5:HEAP[e]=g+180;f=52;c=8;break;case 6:HEAP[e]=g+180;f=54;c=8;break;case 7:f=S(e,d);c=8;break;case 8:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;
c=d=b;c=c==15?1:c==21?15:c==24?2:c==35?8:c==36?5:c==37?11:c==38?14:16;break;case 1:f=39;c=17;break;case 2:HEAP[e+4]-=1;c=HEAP[e+4]==0?3:4;break;case 3:HEAP[e]=g+134;HEAP[e+8]=39;c=4;break;case 4:f=45;c=17;break;case 5:HEAP[e+4]-=1;c=HEAP[e+4]==0?6:7;break;case 6:HEAP[e]=g+134;HEAP[e+8]=39;c=7;break;case 7:f=46;c=17;break;case 8:HEAP[e+4]-=1;c=HEAP[e+4]==0?9:10;break;case 9:HEAP[e]=g+134;HEAP[e+8]=39;c=10;break;case 10:f=47;c=17;break;case 11:HEAP[e+4]-=1;c=HEAP[e+4]==0?12:13;break;case 12:HEAP[e]=
g+134;HEAP[e+8]=39;c=13;break;case 13:f=48;c=17;break;case 14:HEAP[e]=g+178;f=50;c=17;break;case 15:HEAP[e]=g+178;f=49;c=17;break;case 16:f=S(e,d);c=17;break;case 17:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==18?2:c==41?2:3;break;case 1:f=39;c=4;break;case 2:HEAP[e]=g+184;f=51;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,
d,f;e=a;c=d=b;c=c==15?1:c==21?3:c==36?2:4;break;case 1:f=39;c=5;break;case 2:HEAP[e]=g+134;HEAP[e+8]=39;f=46;c=5;break;case 3:HEAP[e]=g+182;f=39;c=5;break;case 4:f=S(e,d);c=5;break;case 5:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==25?2:3;break;case 1:f=0;c=4;break;case 2:HEAP[e]=g+120;HEAP[e+12]+=1;f=0;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;
for(c=-1;;)switch(c){case -1:var e,d,f;e=a;c=d=b;c=c==15?1:c==25?2:3;break;case 1:f=0;c=4;break;case 2:HEAP[e]=g+120;f=58;c=4;break;case 3:f=S(e,d);c=4;break;case 4:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b,c,e,d){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=e;m=d;f=j;f=f==11?3:f==12?2:f==13?4:f==14?5:f==15?1:f==16?6:f==29?8:9;break;case 1:HEAP[h]=g+92;n=0;f=10;break;case 2:HEAP[h]=g+92;n=1;f=10;break;case 3:HEAP[h]=g+92;n=55;f=10;break;case 4:HEAP[h]=g+92;
n=56;f=10;break;case 5:n=0;f=10;break;case 6:f=FUNCTION_TABLE[HEAP[m+28]](m,k+HEAP[m+68]*2,l,Zf)==0?9:7;break;case 7:HEAP[h]=g+94;n=3;f=10;break;case 8:HEAP[h]=g+96;n=2;f=10;break;case 9:n=S(h,j);f=10;break;case 10:return a=n;default:assert(0,"bad label: "+f)}},0,function(a,b,c,e,d){var f;for(f=-1;;)switch(f){case -1:var h,j,k,l,m,n;h=a;j=b;k=c;l=e;m=d;HEAP[h]=g+120;f=j==12?1:2;break;case 1:n=57;f=3;break;case 2:n=mb(h,j,k,l,m);f=3;break;case 3:return a=n;default:assert(0,"bad label: "+f)}},0,function(a,
b){var c;for(c=-1;;)switch(c){case -1:var e,d;e=a;c=b;e=FUNCTION_TABLE[HEAP[e+368]](HEAP[e+372],c);c=(e&-65536)!=0?1:2;break;case 1:d=0;c=3;break;case 2:d=1<<(e&31)&HEAP[kc+(((e&255)>>5)+HEAP[Jd+(e>>8)]*8)*4];c=3;break;case 3:return d;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d;e=a;c=b;e=FUNCTION_TABLE[HEAP[e+368]](HEAP[e+372],c);c=(e&-65536)!=0?1:2;break;case 1:d=0;c=3;break;case 2:d=1<<(e&31)&HEAP[kc+(((e&255)>>5)+HEAP[ud+(e>>8)]*8)*4];c=3;break;
case 3:return d;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d;e=a;c=b;e=FUNCTION_TABLE[HEAP[e+368]](HEAP[e+372],c);c=(e&-65536)!=0?2:1;break;case 1:c=Kb(e)<0?2:3;break;case 2:d=1;c=4;break;case 3:d=0;c=4;break;case 4:return d;default:assert(0,"bad label: "+c)}},0,function(a,b,c,e,d){var f=STACKTOP;STACKTOP+=4;_memset(f,0,4);var g;for(g=-1;;)switch(g){case -1:var h,j,k,l,m,n,o=f,p,q;h=a;j=b;k=c;l=e;m=d;n=h;var r=o;g=1;break;case 1:g=HEAP[j]==k?8:2;break;
case 2:p=n+888+HEAP[HEAP[j]]*4;q=HEAP[p];p+=1;g=q==0?3:5;break;case 3:q=FUNCTION_TABLE[HEAP[n+368]](HEAP[n+372],HEAP[j]);q=Gb(q,r);g=m-HEAP[l]<q?8:4;break;case 4:p=o;HEAP[j]+=HEAP[h+76+HEAP[HEAP[j]]]-3;g=7;break;case 5:g=m-HEAP[l]<q?8:6;break;case 6:HEAP[j]+=1;g=7;break;case 7:g=HEAP[l];HEAP[g]=HEAP[p];HEAP[l]=g+1;p+=1;q=g=q-1;g=g!=0?7:1;break;case 8:STACKTOP=f;return;default:assert(0,"bad label: "+g)}},0,function(a,b,c,e,d){var f;for(f=-1;;)switch(f){case -1:var g,h,j,k,l,m,n;g=a;h=b;j=c;k=e;l=d;
m=g;f=5;break;case 1:n=HEAP[m+376+HEAP[HEAP[h]]*2];f=n==0?2:3;break;case 2:n=FUNCTION_TABLE[HEAP[m+368]](HEAP[m+372],HEAP[h])&65535;HEAP[h]+=HEAP[g+76+HEAP[HEAP[h]]]-3;f=4;break;case 3:HEAP[h]+=1;f=4;break;case 4:f=HEAP[k];HEAP[f]=n;HEAP[k]=f+2;f=5;break;case 5:f=HEAP[h]==j?7:6;break;case 6:f=HEAP[k]!=l?1:7;break;case 7:return;default:assert(0,"bad label: "+f)}},0,function(a,b,c,e){return Sb(kf,a,0,b,c,e)},0,function(a,b,c,e){return Sb(kf,a,1,b,c,e)},0,function(a,b,c,e){na(ed,b,c,e)},0,function(a,
b,c){var e=STACKTOP;STACKTOP+=136;_memset(e,0,136);var d;for(d=-1;;)switch(d){case -1:var f;d=e;var g,h,j=e+4,k=e+132,l;f=a;HEAP[d]=b;g=c;HEAP[k]=j;FUNCTION_TABLE[HEAP[f+60]](f,d,g,k,HEAP[k]+128+-1);d=HEAP[d]!=g?1:2;break;case 1:h=0;d=8;break;case 2:HEAP[HEAP[k]]=0;d=xb(j,Gg)!=0?3:5;break;case 3:d=HEAP[f+68]==2?4:5;break;case 4:h=f;d=8;break;case 5:l=d=Ab(j);d=d==-1?6:7;break;case 6:h=0;d=8;break;case 7:h=HEAP[kf+l*4];d=8;break;case 8:return a=h,STACKTOP=e,a;default:assert(0,"bad label: "+d)}},0,
function(a,b,c,e){return Sb(Oe,a,0,b,c,e)},0,function(a,b,c,e){return Sb(Oe,a,1,b,c,e)},0,function(a,b,c){var e=STACKTOP;STACKTOP+=136;_memset(e,0,136);var d;for(d=-1;;)switch(d){case -1:var f;d=e;var g,h,j=e+4,k=e+132,l;f=a;HEAP[d]=b;g=c;HEAP[k]=j;FUNCTION_TABLE[HEAP[f+60]](f,d,g,k,HEAP[k]+128+-1);d=HEAP[d]!=g?1:2;break;case 1:h=0;d=8;break;case 2:HEAP[HEAP[k]]=0;d=xb(j,Gg)!=0?3:5;break;case 3:d=HEAP[f+68]==2?4:5;break;case 4:h=f;d=8;break;case 5:l=d=Ab(j);d=d==-1?6:7;break;case 6:h=0;d=8;break;
case 7:h=HEAP[Oe+l*4];d=8;break;case 8:return a=h,STACKTOP=e,a;default:assert(0,"bad label: "+d)}},0,function(a,b){var c=STACKTOP;STACKTOP+=12;_memset(c,0,12);var e;for(e=-1;;)switch(e){case -1:var d,f,g=c,h=c+4,j=c+8;d=a;e=b;HEAP[j]=0;e=_PyArg_ParseTuple(e,zc,allocate([g,0,0,0,h,0,0,0,j,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=3;break;case 2:f=A(HEAP[d+8],HEAP[g],HEAP[h],HEAP[j]);f=p(d,f);e=3;break;case 3:return d=f,STACKTOP=c,d;default:assert(0,"bad label: "+
e)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,d,f,g,h,j;e=a;d=b;g=1;d=_PyObject_GetAttrString(d,Uc);c=d==0?1:2;break;case 1:_PyErr_SetString(HEAP[_PyExc_TypeError],ec);f=0;c=23;break;case 2:j=c=E(HEAP[e+8],2048);c=c==0?3:7;break;case 3:c=d!=0?4:6;break;case 4:HEAP[d]-=1;c=HEAP[d]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[d+4]+24]](d);c=6;break;case 6:f=_PyErr_NoMemory();c=23;break;case 7:a:{h=j;c=d;for(var k=void 0,k=-1;;)switch(k){case -1:var l,m,n,o,q,r,s;l=h;m=2048;n=c;r=o=0;
s=-1;q=_PyInt_FromLong(m);k=q==0?10:1;break;case 1:o=_PyTuple_New(1);k=o==0?2:4;break;case 2:HEAP[q]-=1;k=HEAP[q]==0?3:10;break;case 3:FUNCTION_TABLE[HEAP[HEAP[q+4]+24]](q);k=10;break;case 4:HEAP[o+12]=q;r=_PyObject_Call(n,o,0);k=r==0?10:5;break;case 5:var u=r,k=(HEAP[HEAP[r+4]+84]&134217728)==0?6:7;break;case 6:_PyErr_Format(HEAP[_PyExc_TypeError],Pc,allocate([HEAP[HEAP[u+4]+12],0,0,0],["i8*",0,0,0],ALLOC_STACK));k=10;break;case 7:s=HEAP[u+8];k=s>m?8:9;break;case 8:_PyErr_Format(HEAP[_PyExc_ValueError],
Ec,allocate([m,0,0,0,s,0,0,0],["i32",0,0,0,"i32",0,0,0],ALLOC_STACK));k=10;break;case 9:var k=s,t=_PyString_AsString(r);_llvm_memcpy_p0i8_p0i8_i32(l,t,k,1,0);k=10;break;case 10:k=o!=0?11:13;break;case 11:HEAP[o]-=1;k=HEAP[o]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[o+4]+24]](o);k=13;break;case 13:k=r!=0?14:16;break;case 14:HEAP[r]-=1;k=HEAP[r]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);k=16;break;case 16:h=s;break a;default:assert(0,"bad label: "+k)}h=void 0}c=h<0?8:12;break;
case 8:c=d!=0?9:11;break;case 9:HEAP[d]-=1;c=HEAP[d]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[d+4]+24]](d);c=11;break;case 11:f=0;c=23;break;case 12:g=G(HEAP[e+8],h,h==0);c=_PyErr_Occurred()!=0?13:17;break;case 13:c=d!=0?14:16;break;case 14:HEAP[d]-=1;c=HEAP[d]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[d+4]+24]](d);c=16;break;case 16:f=0;c=23;break;case 17:c=g==0?19:18;break;case 18:c=h==0?19:2;break;case 19:c=d!=0?20:22;break;case 20:HEAP[d]-=1;c=HEAP[d]==0?21:22;break;case 21:FUNCTION_TABLE[HEAP[HEAP[d+
4]+24]](d);c=22;break;case 22:f=p(e,g);c=23;break;case 23:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c=STACKTOP;STACKTOP+=4;_memset(c,0,4);var e;for(e=-1;;)switch(e){case -1:var d,f,g=c;d=a;e=_PyArg_ParseTuple(b,gc,allocate([g,0,0,0],["i8**",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=5;break;case 2:a:{e=HEAP[d+8];for(var h=HEAP[g],j=void 0,j=-1;;)switch(j){case -1:var k,l,m;k=e;l=h;var n=k,j=l!=0?1:4;break;case 1:l=ja(HEAP[n+356]+80,l);j=l==0?2:3;break;case 2:m=0;j=6;break;
case 3:HEAP[k+360]=l;j=5;break;case 4:HEAP[n+360]=0;j=5;break;case 5:m=1;j=6;break;case 6:e=m;break a;default:assert(0,"bad label: "+j)}e=void 0}e=e==0?3:4;break;case 3:f=_PyErr_NoMemory();e=5;break;case 4:HEAP[__Py_NoneStruct]+=1;f=__Py_NoneStruct;e=5;break;case 5:return d=f,STACKTOP=c,d;default:assert(0,"bad label: "+e)}},0,function(a){return _Py_BuildValue(xc,allocate([HEAP[HEAP[a+8]+360],0,0,0],["i8*",0,0,0],ALLOC_STACK))},0,function(a,b){var c=STACKTOP;STACKTOP+=8;_memset(c,0,8);var e,d=null;
for(e=-1;;)switch(e){case -1:var f,h,j=c,k=c+4,l,m,n;f=a;e=b;HEAP[k]=0;e=_PyArg_ParseTuple(e,Bd,allocate([j,0,0,0,k,0,0,0],["i8**",0,0,0,"i8**",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:h=0;e=25;break;case 2:l=__PyObject_GC_New(wb);e=l==0?3:4;break;case 3:h=0;e=25;break;case 4:HEAP[l+36]=HEAP[f+36];HEAP[l+40]=0;var o=l;e=HEAP[f+32]!=0?5:7;break;case 5:e=_malloc(HEAP[o+36]);HEAP[l+32]=e;e=HEAP[l+32]==0?6:8;break;case 6:_PyObject_GC_Del(l);h=_PyErr_NoMemory();e=25;break;case 7:HEAP[o+32]=0;e=8;break;
case 8:HEAP[l+12]=HEAP[f+12];HEAP[l+16]=HEAP[f+16];HEAP[l+20]=HEAP[f+20];HEAP[l+24]=0;HEAP[l+28]=HEAP[f+28];a:{var p=HEAP[f+8],q=HEAP[j],r=HEAP[k];e=STACKTOP;STACKTOP+=2;_memset(e,0,2);for(var s=void 0,B=null,s=-1;;)switch(s){case -1:var P,v,O,ea,T,H,za,ga,U,X,y,F,N,xa,S,K,Q,z,va,Aa,qb,W,db,C,I,na,Oa,Sa,E,$,ca,Ae,Qd,A,cb,oa=e;P=p;v=q;O=r;T=P;H=0;za=HEAP[T+356];ga=HEAP[T+52];U=HEAP[T+56];X=HEAP[T+60];y=HEAP[T+64];F=HEAP[T+68];N=HEAP[T+72];xa=HEAP[T+76];S=HEAP[T+80];K=HEAP[T+92];Q=HEAP[T+96];z=HEAP[T+
100];va=HEAP[T+104];Aa=HEAP[T+108];qb=HEAP[T+112];W=HEAP[T+120];db=HEAP[T+124];C=HEAP[T+128];I=HEAP[T+132];na=HEAP[T+136];Oa=HEAP[T+140];Sa=HEAP[T+344];E=HEAP[T];$=HEAP[T+4];ca=HEAP[T+308];Ae=HEAP[T+116];Qd=HEAP[T+492];A=HEAP[T+256+20];cb=HEAP[T+237];s=v==0?1:2;break;case 1:H=za;s=2;break;case 2:var J=T,s=HEAP[T+236]!=0?3:4;break;case 3:HEAP[oa]=HEAP[J+472];var ab=t(O,T+12,oa,H);T=ab;B=3;s=5;break;case 4:var Ma=t(O,J+12,0,H);T=Ma;B=4;s=5;break;case 5:s=(B==4?Ma:ab)==0?6:7;break;case 6:ea=0;s=19;break;
case 7:HEAP[T+52]=ga;HEAP[T+56]=U;HEAP[T+60]=X;HEAP[T+64]=y;HEAP[T+68]=F;HEAP[T+72]=N;HEAP[T+76]=xa;HEAP[T+80]=S;HEAP[T+92]=K;HEAP[T+96]=Q;HEAP[T+100]=z;HEAP[T+104]=va;HEAP[T+108]=Aa;HEAP[T+112]=qb;HEAP[T+120]=W;HEAP[T+124]=db;HEAP[T+128]=C;HEAP[T+132]=I;HEAP[T+136]=na;HEAP[T+140]=Oa;HEAP[T+344]=Sa;HEAP[T]=E;var G=T,s=E==$?8:9;break;case 8:HEAP[T+4]=HEAP[G];s=10;break;case 9:HEAP[G+4]=T;s=10;break;case 10:s=Ae!=P?11:12;break;case 11:HEAP[T+116]=Ae;s=12;break;case 12:HEAP[T+308]=ca;HEAP[T+237]=cb;
HEAP[T+476]=P;HEAP[T+492]=Qd;HEAP[T+256+20]=A;var Bb=T,s=v!=0?13:17;break;case 13:b:{var sa=HEAP[T+356],Pb=za,Bc=Bb+12,s=STACKTOP;STACKTOP+=8;_memset(s,0,8);for(var D=void 0,D=-1;;)switch(D){case -1:var ba,Y,Fb,pa,Eb=s,kb,zb,xb,ec,Ud,Ca,Sc,ib,gb;ba=sa;Y=Pb;Fb=Bc;La(Eb,Y+60);D=1;break;case 1:zb=D=Za(Eb);D=D==0?6:2;break;case 2:kb=ja(ba+80,HEAP[zb]);D=kb==0?3:4;break;case 3:pa=0;D=44;break;case 4:D=ka(ba+60,kb,8)==0?5:1;break;case 5:pa=0;D=44;break;case 6:La(Eb,Y+40);D=7;break;case 7:Ud=D=Za(Eb);D=
D==0?19:8;break;case 8:D=HEAP[ba+80+12]!=HEAP[ba+80+8]?11:9;break;case 9:D=bb(ba+80)!=0?11:10;break;case 10:pa=0;D=44;break;case 11:ec=HEAP[ba+80+12];HEAP[ec]=0;HEAP[ba+80+12]=ec+1;ec=D=ja(ba+80,HEAP[Ud]);D=D==0?12:13;break;case 12:pa=0;D=44;break;case 13:ec+=1;xb=ka(ba+40,ec,12);D=xb==0?14:15;break;case 14:pa=0;D=44;break;case 15:HEAP[xb+8]=HEAP[Ud+8];D=HEAP[Ud+4]!=0?16:7;break;case 16:HEAP[xb+9]=HEAP[Ud+9];D=HEAP[Ud+4]==Y+152?17:18;break;case 17:HEAP[xb+4]=ba+152;D=7;break;case 18:D=ka(ba+60,HEAP[HEAP[Ud+
4]],0);HEAP[xb+4]=D;D=7;break;case 19:La(Eb,Y+20);D=20;break;case 20:gb=D=Za(Eb);D=D==0?39:21;break;case 21:ib=ja(ba+80,HEAP[gb]);D=ib==0?22:23;break;case 22:pa=0;D=44;break;case 23:Sc=ka(ba+20,ib,24);D=Sc==0?24:25;break;case 24:pa=0;D=44;break;case 25:D=HEAP[gb+12]!=0?26:28;break;case 26:D=FUNCTION_TABLE[HEAP[Fb]](HEAP[gb+12]*12);HEAP[Sc+20]=D;D=HEAP[Sc+20]==0?27:28;break;case 27:FUNCTION_TABLE[HEAP[Fb+8]](Sc);pa=0;D=44;break;case 28:D=HEAP[gb+8]!=0?29:30;break;case 29:D=ka(ba+40,HEAP[HEAP[gb+8]],
0);HEAP[Sc+8]=D;D=30;break;case 30:HEAP[Sc+12]=HEAP[gb+12];HEAP[Sc+16]=HEAP[Sc+12];D=HEAP[gb+4]!=0?31:32;break;case 31:D=ka(ba+60,HEAP[HEAP[gb+4]],0);HEAP[Sc+4]=D;D=32;break;case 32:Ca=0;D=38;break;case 33:var rb=HEAP[Sc+20]+12*Ca,D=ka(ba+40,HEAP[HEAP[HEAP[gb+20]+12*Ca]],0);HEAP[rb]=D;HEAP[HEAP[Sc+20]+12*Ca+4]=HEAP[HEAP[gb+20]+12*Ca+4];rb=HEAP[Sc+20]+12*Ca;D=HEAP[HEAP[gb+20]+12*Ca+8]!=0?34:36;break;case 34:D=ja(ba+80,HEAP[HEAP[gb+20]+12*Ca+8]);HEAP[rb+8]=D;D=HEAP[HEAP[Sc+20]+12*Ca+8]==0?35:37;break;
case 35:pa=0;D=44;break;case 36:HEAP[rb+8]=0;D=37;break;case 37:Ca+=1;D=38;break;case 38:D=HEAP[Sc+12]>Ca?33:20;break;case 39:D=Ea(ba,ba+80,Y)==0?40:41;break;case 40:pa=0;D=44;break;case 41:D=Ea(ba+132,ba+80,Y+132)==0?42:43;break;case 42:pa=0;D=44;break;case 43:HEAP[ba+131]=HEAP[Y+131];HEAP[ba+128]=HEAP[Y+128];HEAP[ba+129]=HEAP[Y+129];HEAP[ba+130]=HEAP[Y+130];HEAP[ba+160]=HEAP[Y+160];HEAP[ba+164]=HEAP[Y+164];HEAP[ba+168]=HEAP[Y+168];HEAP[ba+172]=HEAP[Y+172];HEAP[ba+180]=HEAP[Y+180];HEAP[ba+184]=HEAP[Y+
184];pa=1;D=44;break;case 44:sa=pa;STACKTOP=s;s=sa;break b;default:assert(0,"bad label: "+D)}s=void 0}s=s==0?15:14;break;case 14:s=Xa(T,v)==0?15:16;break;case 15:w(T);ea=0;s=19;break;case 16:HEAP[T+280]=g+50;s=18;break;case 17:HEAP[Bb+488]=1;s=T+256;HEAP[s]=g+192;HEAP[s+16]=0;HEAP[s+12]=0;HEAP[T+280]=g+52;s=18;break;case 18:ea=T;s=19;break;case 19:p=ea;STACKTOP=e;e=p;break a;default:assert(0,"bad label: "+s)}e=void 0}HEAP[l+8]=e;HEAP[l+48]=0;HEAP[l+44]=HEAP[f+44];e=HEAP[l+44]!=0?9:10;break;case 9:HEAP[HEAP[l+
44]]+=1;e=10;break;case 10:_PyObject_GC_Track(l);var Z=l;e=HEAP[l+8]==0?11:14;break;case 11:HEAP[Z]-=1;e=HEAP[Z]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);e=13;break;case 13:h=_PyErr_NoMemory();e=25;break;case 14:x(HEAP[Z+8],l);var M=m=0;HEAP[Ib+m*20]!=0?(d=14,e=15):(d=14,e=16);break;case 15:var Cb=m=(d==15?Cb:M)+1;HEAP[Ib+m*20]!=0?e=d=15:(d=15,e=16);break;case 16:var Ne=_malloc((d==14?M:Cb)*4);HEAP[l+48]=Ne;Ne=l;e=HEAP[l+48]==0?17:20;break;case 17:HEAP[Ne]-=1;e=HEAP[Ne]==0?18:
19;break;case 18:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);e=19;break;case 19:h=_PyErr_NoMemory();e=25;break;case 20:u(Ne,1);m=0;e=HEAP[Ib+m*20]!=0?21:24;break;case 21:n=HEAP[HEAP[f+48]+4*m];e=HEAP[HEAP[f+48]+4*m]!=0?22:23;break;case 22:HEAP[n]+=1;HEAP[HEAP[l+48]+4*m]=n;FUNCTION_TABLE[HEAP[Ib+m*20+4]](HEAP[l+8],HEAP[Ib+m*20+8]);e=23;break;case 23:m+=1;e=HEAP[Ib+m*20]!=0?21:24;break;case 24:h=l;e=25;break;case 25:return d=h,STACKTOP=c,d;default:assert(0,"bad label: "+e)}},0,function(a,b){var c=STACKTOP;
STACKTOP+=4;_memset(c,0,4);var e;for(e=-1;;)switch(e){case -1:var d,f,g=c;d=a;e=_PyArg_ParseTuple(b,Kd,allocate([g,0,0,0],["i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=3;break;case 2:a:{e=HEAP[d+8];f=HEAP[g];for(var h=void 0,h=-1;;)switch(h){case -1:var j,k,l;j=e;k=f;h=HEAP[j+480]==1?2:1;break;case 1:h=HEAP[j+480]==3?2:3;break;case 2:l=0;h=4;break;case 3:HEAP[j+492]=k;l=1;h=4;break;case 4:e=l;break a;default:assert(0,"bad label: "+h)}e=void 0}HEAP[g]=e;f=_PyInt_FromLong(HEAP[g]);e=3;break;
case 3:return d=f,STACKTOP=c,d;default:assert(0,"bad label: "+e)}},0,function(a){var b=STACKTOP;STACKTOP+=8;_memset(b,0,8);var c;for(c=-1;;)switch(c){case -1:var e,d,f=b,g=b+4,h;e=a;c=HEAP[e+24]!=0?1:4;break;case 1:a:{c=HEAP[e+8];h=f;for(var j=g,k=void 0,k=-1;;)switch(k){case -1:var l,m,n,o;l=c;m=h;n=j;k=HEAP[l+288]!=0?1:3;break;case 1:k=HEAP[l+8]!=0?2:3;break;case 2:HEAP[m]=HEAP[l+288]-HEAP[l+8];HEAP[n]=HEAP[l+28]-HEAP[l+8];o=HEAP[l+8];k=4;break;case 3:o=0;k=4;break;case 4:h=c=o;break a;default:assert(0,
"bad label: "+k)}h=void 0}c=h!=0?2:3;break;case 2:d=_PyString_FromStringAndSize(h+HEAP[f],HEAP[g]-HEAP[f]);c=5;break;case 3:HEAP[__Py_NoneStruct]+=1;d=__Py_NoneStruct;c=5;break;case 4:HEAP[__Py_NoneStruct]+=1;d=__Py_NoneStruct;c=5;break;case 5:return a=d,STACKTOP=b,a;default:assert(0,"bad label: "+c)}},0,function(a,c){var e=STACKTOP;STACKTOP+=4;_memset(e,0,4);var d;for(d=-1;;)switch(d){case -1:var f,g,h=e,j,k;f=a;d=c;HEAP[h]=0;j=1;d=_PyArg_UnpackTuple(d,Gd,0,1,allocate([h,0,0,0],["%struct.PyObject**",
0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;d=7;break;case 2:d=HEAP[h]!=0?3:4;break;case 3:j=_PyObject_IsTrue(HEAP[h])!=0;d=4;break;case 4:a:{k=HEAP[f+8];d=j&255;for(var l=void 0,l=-1;;)switch(l){case -1:var m,n,o;m=k;n=d;l=HEAP[m+480]==1?2:1;break;case 1:l=HEAP[m+480]==3?2:3;break;case 2:o=26;l=4;break;case 3:HEAP[m+489]=n;o=0;l=4;break;case 4:d=k=o;break a;default:assert(0,"bad label: "+l)}d=void 0}k=d;d=d!=0?5:6;break;case 5:g=b(f,k);d=7;break;case 6:HEAP[__Py_NoneStruct]+=1;g=__Py_NoneStruct;
d=7;break;case 7:return f=g,STACKTOP=e,f;default:assert(0,"bad label: "+d)}},0,function(a){var b,c=null;for(b=-1;;)switch(b){case -1:var e,d,f;e=a;_PyObject_GC_UnTrack(e);b=HEAP[e+8]!=0?1:2;break;case 1:w(HEAP[e+8]);b=2;break;case 2:HEAP[e+8]=0;b=HEAP[e+48]!=0?3:9;break;case 3:d=0;var g=HEAP[e+48];HEAP[Ib+d*20]!=0?(c=3,b=4):(c=3,b=8);break;case 4:f=HEAP[(c==7?h:g)+4*d];HEAP[HEAP[e+48]+4*d]=0;b=f!=0?5:7;break;case 5:HEAP[f]-=1;b=HEAP[f]==0?6:7;break;case 6:FUNCTION_TABLE[HEAP[HEAP[f+4]+24]](f);b=7;
break;case 7:d+=1;var h=HEAP[e+48];HEAP[Ib+d*20]!=0?(c=7,b=4):(c=7,b=8);break;case 8:_free(c==3?g:h);HEAP[e+48]=0;b=9;break;case 9:b=HEAP[e+32]!=0?10:11;break;case 10:_free(HEAP[e+32]);HEAP[e+32]=0;b=11;break;case 11:b=HEAP[e+44]!=0?12:14;break;case 12:b=HEAP[e+44];HEAP[b]-=1;b=HEAP[b]==0?13:14;break;case 13:FUNCTION_TABLE[HEAP[HEAP[HEAP[e+44]+4]+24]](HEAP[e+44]);b=14;break;case 14:_PyObject_GC_Del(e);return;default:assert(0,"bad label: "+b)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var e,
d,f,g,h,j,k,l,m,n,o,p,s,u,t,B,P,v,T,O,ea,w,x;e=a;d=b;g=q(d);c=g!=-1?1:4;break;case 1:h=HEAP[HEAP[e+48]+4*g];c=h==0?2:3;break;case 2:h=__Py_NoneStruct;c=3;break;case 3:HEAP[h]+=1;f=h;c=110;break;case 4:c=HEAP[d]==69?5:13;break;case 5:c=_strcmp(d,Hd)==0?6:7;break;case 6:f=D(HEAP[e+8]);f=_PyInt_FromLong(f);c=110;break;case 7:c=_strcmp(d,ze)==0?8:9;break;case 8:f=M(HEAP[e+8]);f=_PyInt_FromLong(f);c=110;break;case 9:c=_strcmp(d,Id)==0?10:11;break;case 10:f=L(HEAP[e+8]);f=_PyInt_FromLong(f);c=110;break;
case 11:c=_strcmp(d,de)==0?12:13;break;case 12:f=R(HEAP[e+8]);f=_PyInt_FromLong(f);c=110;break;case 13:c=HEAP[d]==67?14:20;break;case 14:c=_strcmp(d,ee)==0?15:16;break;case 15:f=M(HEAP[e+8]);f=_PyInt_FromLong(f);c=110;break;case 16:c=_strcmp(d,fe)==0?17:18;break;case 17:f=L(HEAP[e+8]);f=_PyInt_FromLong(f);c=110;break;case 18:c=_strcmp(d,pe)==0?19:20;break;case 19:f=R(HEAP[e+8]);f=_PyInt_FromLong(f);c=110;break;case 20:c=HEAP[d]==98?21:27;break;case 21:c=_strcmp(d,Db)==0?22:23;break;case 22:f=_PyInt_FromLong(HEAP[e+
36]);c=110;break;case 23:c=_strcmp(d,ge)==0?24:25;break;case 24:f=r(HEAP[e+32]!=0);c=110;break;case 25:c=_strcmp(d,Zd)==0?26:27;break;case 26:f=_PyInt_FromLong(HEAP[e+40]);c=110;break;case 27:c=_strcmp(d,$d)==0?28:29;break;case 28:f=r(HEAP[e+28]);c=110;break;case 29:c=_strcmp(d,ie)==0?30:31;break;case 30:f=r(HEAP[e+16]);c=110;break;case 31:c=_strcmp(d,ad)==0?32:33;break;case 32:f=r(HEAP[e+12]);c=110;break;case 33:c=_strcmp(d,Rd)==0?34:35;break;case 34:f=r(HEAP[e+20]);c=110;break;case 35:c=_strcmp(d,
vd)==0?36:39;break;case 36:c=HEAP[e+44]==0?37:38;break;case 37:HEAP[__Py_NoneStruct]+=1;f=__Py_NoneStruct;c=110;break;case 38:HEAP[HEAP[e+44]]+=1;f=HEAP[e+44];c=110;break;case 39:c=_strcmp(d,Qc)==0?40:109;break;case 40:k=_PyList_New(0);c=k==0?41:42;break;case 41:f=0;c=110;break;case 42:j=0;c=HEAP[Ib+j*20]!=0?43:48;break;case 43:a:{l=Ib+j*20;c=void 0;for(c=-1;;)switch(c){case -1:var H,za;H=l;za=HEAP[H+16];c=za==0?1:2;break;case 1:za=_PyString_FromString(HEAP[H]);HEAP[H+16]=za;c=za!=0?2:3;break;case 2:HEAP[za]+=
1;c=3;break;case 3:c=l=za;break a;default:assert(0,"bad label: "+c)}c=void 0}l=c;c=c!=0?44:47;break;case 44:_PyList_Append(k,l);c=l!=0?45:47;break;case 45:HEAP[l]-=1;c=HEAP[l]==0?46:47;break;case 46:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);c=47;break;case 47:j+=1;c=HEAP[Ib+j*20]!=0?43:48;break;case 48:m=c=_PyString_FromString(Hd);c=c!=0?49:52;break;case 49:_PyList_Append(k,m);c=m!=0?50:52;break;case 50:HEAP[m]-=1;c=HEAP[m]==0?51:52;break;case 51:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);c=52;break;case 52:n=
c=_PyString_FromString(ze);c=c!=0?53:56;break;case 53:_PyList_Append(k,n);c=n!=0?54:56;break;case 54:HEAP[n]-=1;c=HEAP[n]==0?55:56;break;case 55:FUNCTION_TABLE[HEAP[HEAP[n+4]+24]](n);c=56;break;case 56:o=c=_PyString_FromString(Id);c=c!=0?57:60;break;case 57:_PyList_Append(k,o);c=o!=0?58:60;break;case 58:HEAP[o]-=1;c=HEAP[o]==0?59:60;break;case 59:FUNCTION_TABLE[HEAP[HEAP[o+4]+24]](o);c=60;break;case 60:p=c=_PyString_FromString(de);c=c!=0?61:64;break;case 61:_PyList_Append(k,p);c=p!=0?62:64;break;
case 62:HEAP[p]-=1;c=HEAP[p]==0?63:64;break;case 63:FUNCTION_TABLE[HEAP[HEAP[p+4]+24]](p);c=64;break;case 64:s=c=_PyString_FromString(ee);c=c!=0?65:68;break;case 65:_PyList_Append(k,s);c=s!=0?66:68;break;case 66:HEAP[s]-=1;c=HEAP[s]==0?67:68;break;case 67:FUNCTION_TABLE[HEAP[HEAP[s+4]+24]](s);c=68;break;case 68:u=c=_PyString_FromString(fe);c=c!=0?69:72;break;case 69:_PyList_Append(k,u);c=u!=0?70:72;break;case 70:HEAP[u]-=1;c=HEAP[u]==0?71:72;break;case 71:FUNCTION_TABLE[HEAP[HEAP[u+4]+24]](u);c=72;
break;case 72:t=c=_PyString_FromString(pe);c=c!=0?73:76;break;case 73:_PyList_Append(k,t);c=t!=0?74:76;break;case 74:HEAP[t]-=1;c=HEAP[t]==0?75:76;break;case 75:FUNCTION_TABLE[HEAP[HEAP[t+4]+24]](t);c=76;break;case 76:B=c=_PyString_FromString(Db);c=c!=0?77:80;break;case 77:_PyList_Append(k,B);c=B!=0?78:80;break;case 78:HEAP[B]-=1;c=HEAP[B]==0?79:80;break;case 79:FUNCTION_TABLE[HEAP[HEAP[B+4]+24]](B);c=80;break;case 80:P=c=_PyString_FromString(ge);c=c!=0?81:84;break;case 81:_PyList_Append(k,P);c=P!=
0?82:84;break;case 82:HEAP[P]-=1;c=HEAP[P]==0?83:84;break;case 83:FUNCTION_TABLE[HEAP[HEAP[P+4]+24]](P);c=84;break;case 84:v=c=_PyString_FromString(Zd);c=c!=0?85:88;break;case 85:_PyList_Append(k,v);c=v!=0?86:88;break;case 86:HEAP[v]-=1;c=HEAP[v]==0?87:88;break;case 87:FUNCTION_TABLE[HEAP[HEAP[v+4]+24]](v);c=88;break;case 88:T=c=_PyString_FromString($d);c=c!=0?89:92;break;case 89:_PyList_Append(k,T);c=T!=0?90:92;break;case 90:HEAP[T]-=1;c=HEAP[T]==0?91:92;break;case 91:FUNCTION_TABLE[HEAP[HEAP[T+
4]+24]](T);c=92;break;case 92:O=c=_PyString_FromString(ie);c=c!=0?93:96;break;case 93:_PyList_Append(k,O);c=O!=0?94:96;break;case 94:HEAP[O]-=1;c=HEAP[O]==0?95:96;break;case 95:FUNCTION_TABLE[HEAP[HEAP[O+4]+24]](O);c=96;break;case 96:ea=c=_PyString_FromString(ad);c=c!=0?97:100;break;case 97:_PyList_Append(k,ea);c=ea!=0?98:100;break;case 98:HEAP[ea]-=1;c=HEAP[ea]==0?99:100;break;case 99:FUNCTION_TABLE[HEAP[HEAP[ea+4]+24]](ea);c=100;break;case 100:w=c=_PyString_FromString(Rd);c=c!=0?101:104;break;case 101:_PyList_Append(k,
w);c=w!=0?102:104;break;case 102:HEAP[w]-=1;c=HEAP[w]==0?103:104;break;case 103:FUNCTION_TABLE[HEAP[HEAP[w+4]+24]](w);c=104;break;case 104:x=c=_PyString_FromString(vd);c=c!=0?105:108;break;case 105:_PyList_Append(k,x);c=x!=0?106:108;break;case 106:HEAP[x]-=1;c=HEAP[x]==0?107:108;break;case 107:FUNCTION_TABLE[HEAP[HEAP[x+4]+24]](x);c=108;break;case 108:f=k;c=110;break;case 109:f=_Py_FindMethod(vc,e,d);c=110;break;case 110:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b,c){var e;for(e=
-1;;)switch(e){case -1:var d,f,h,j,k;d=a;f=b;h=c;e=h==0?1:2;break;case 1:_PyErr_SetString(HEAP[_PyExc_RuntimeError],je);j=-1;e=53;break;case 2:e=_strcmp(f,ge)==0?3:13;break;case 3:e=_PyObject_IsTrue(h);var l=HEAP[d+32];e=e!=0?4:8;break;case 4:e=l==0?5:12;break;case 5:e=_malloc(HEAP[d+36]);HEAP[d+32]=e;e=HEAP[d+32]==0?6:7;break;case 6:_PyErr_NoMemory();j=-1;e=53;break;case 7:HEAP[d+40]=0;e=12;break;case 8:e=l!=0?9:12;break;case 9:e=n(d)<0?10:11;break;case 10:j=-1;e=53;break;case 11:_free(HEAP[d+32]);
HEAP[d+32]=0;e=12;break;case 12:j=0;e=53;break;case 13:e=_strcmp(f,$d)==0?14:18;break;case 14:e=_PyObject_IsTrue(h);var m=d+28;e=e!=0?15:16;break;case 15:HEAP[m]=1;e=17;break;case 16:HEAP[m]=0;e=17;break;case 17:a:{j=HEAP[d+8];e=HEAP[d+28];for(var o=void 0,o=-1;;)switch(o){case -1:var p,r;p=j;r=e;o=HEAP[p+480]==1?3:1;break;case 1:o=HEAP[p+480]==3?3:2;break;case 2:HEAP[p+237]=r!=0;o=3;break;case 3:break a;default:assert(0,"bad label: "+o)}}j=0;e=53;break;case 18:e=_strcmp(f,ie)==0?19:23;break;case 19:e=
_PyObject_IsTrue(h);var s=d+16;e=e!=0?20:21;break;case 20:HEAP[s]=1;e=22;break;case 21:HEAP[s]=0;e=22;break;case 22:j=0;e=53;break;case 23:e=_strcmp(f,ad)==0?24:28;break;case 24:e=_PyObject_IsTrue(h);var u=d+12;e=e!=0?25:26;break;case 25:HEAP[u]=1;e=27;break;case 26:HEAP[u]=0;e=27;break;case 27:j=0;e=53;break;case 28:e=_strcmp(f,Rd)==0?29:33;break;case 29:e=_PyObject_IsTrue(h);var t=d+20;e=e!=0?30:31;break;case 30:HEAP[t]=1;e=32;break;case 31:HEAP[t]=0;e=32;break;case 32:j=0;e=53;break;case 33:e=
_strcmp(f,Db)==0?34:47;break;case 34:e=(HEAP[HEAP[h+4]+84]&8388608)==0?35:36;break;case 35:_PyErr_SetString(HEAP[_PyExc_TypeError],re);j=-1;e=53;break;case 36:k=HEAP[h+8];e=HEAP[d+36]==k?37:38;break;case 37:j=0;e=53;break;case 38:e=k<=0?39:40;break;case 39:_PyErr_SetString(HEAP[_PyExc_ValueError],se);j=-1;e=53;break;case 40:e=HEAP[d+32]!=0?41:44;break;case 41:e=HEAP[d+40]!=0?42:43;break;case 42:n(d);e=43;break;case 43:_free(HEAP[d+32]);e=44;break;case 44:e=_malloc(k);HEAP[d+32]=e;e=HEAP[d+32]==0?
45:46;break;case 45:_PyErr_NoMemory();j=-1;e=53;break;case 46:HEAP[d+36]=k;j=0;e=53;break;case 47:e=_strcmp(f,Ob)==0?48:50;break;case 48:e=n(d)<0?49:50;break;case 49:j=-1;e=53;break;case 50:a:{e=d;for(var o=f,B=h,P=void 0,P=-1;;)switch(P){case -1:var v,T,O,ea,w,x;v=e;T=o;O=B;T=q(T);P=T>=0?1:12;break;case 1:w=0;x=HEAP[HEAP[v+48]+4*T];P=O==__Py_NoneStruct?2:6;break;case 2:P=T==3?3:5;break;case 3:P=HEAP[v+24]!=0?4:5;break;case 4:w=g+8;P=5;break;case 5:O=0;P=8;break;case 6:P=O!=0?7:8;break;case 7:HEAP[O]+=
1;w=HEAP[Ib+T*20+8];P=8;break;case 8:HEAP[HEAP[v+48]+4*T]=O;P=x!=0?9:11;break;case 9:HEAP[x]-=1;P=HEAP[x]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[x+4]+24]](x);P=11;break;case 11:FUNCTION_TABLE[HEAP[Ib+T*20+4]](HEAP[v+8],w);ea=1;P=13;break;case 12:ea=0;P=13;break;case 13:e=ea;break a;default:assert(0,"bad label: "+P)}e=void 0}e=e!=0?51:52;break;case 51:j=0;e=53;break;case 52:_PyErr_SetString(HEAP[_PyExc_AttributeError],f);j=-1;e=53;break;case 53:return a=j;default:assert(0,"bad label: "+e)}},
0,function(a,b,c){var e;for(e=-1;;)switch(e){case -1:var d,f,g,h,j,k;d=a;f=b;g=c;j=0;e=5;break;case 1:e=HEAP[HEAP[d+48]+4*j]!=0?2:4;break;case 2:k=FUNCTION_TABLE[f](HEAP[HEAP[d+48]+4*j],g);e=k!=0?3:4;break;case 3:h=k;e=7;break;case 4:j+=1;e=5;break;case 5:e=HEAP[Ib+j*20]!=0?1:6;break;case 6:h=0;e=7;break;case 7:return a=h;default:assert(0,"bad label: "+e)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c,e;c=a;u(c,0);b=HEAP[c+44]!=0?1:3;break;case 1:e=HEAP[c+44];HEAP[c+44]=0;HEAP[e]-=1;b=HEAP[e]==
0?2:3;break;case 2:FUNCTION_TABLE[HEAP[HEAP[e+4]+24]](e);b=3;break;case 3:return 0;default:assert(0,"bad label: "+b)}},0,function(a,b,c){a=STACKTOP;STACKTOP+=12;_memset(a,0,12);var e;for(e=-1;;)switch(e){case -1:var d,f,h=a,j=a+4,k=a+8,l,m;e=b;d=c;HEAP[h]=0;HEAP[j]=0;m=HEAP[k]=0;e=_PyArg_ParseTupleAndKeywords(e,d,Hc,ae,allocate([h,0,0,0,j,0,0,0,k,0,0,0],["i8**",0,0,0,"i8**",0,0,0,"%struct.PyObject**",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=17;break;case 2:e=HEAP[j]!=0?3:5;break;case 3:e=_strlen(HEAP[j])>
1?4:5;break;case 4:_PyErr_SetString(HEAP[_PyExc_ValueError],wd);f=0;e=17;break;case 5:e=HEAP[k]==__Py_NoneStruct?6:7;break;case 6:HEAP[k]=0;e=13;break;case 7:e=HEAP[k]==0?8:11;break;case 8:e=_PyDict_New();HEAP[k]=e;e=HEAP[k]==0?9:10;break;case 9:f=0;e=17;break;case 10:m=1;e=13;break;case 11:e=(HEAP[HEAP[HEAP[k]+4]+84]&536870912)==0?12:13;break;case 12:_PyErr_SetString(HEAP[_PyExc_TypeError],Vc);f=0;e=17;break;case 13:a:{l=HEAP[h];e=HEAP[j];d=HEAP[k];for(var n=void 0,o=null,n=-1;;)switch(n){case -1:var p,
q,r,t,B;p=l;q=e;r=d;B=__PyObject_GC_New(wb);n=B==0?1:2;break;case 1:t=0;n=18;break;case 2:HEAP[B+12]=1;HEAP[B+32]=0;HEAP[B+36]=8192;HEAP[B+40]=0;HEAP[B+16]=0;HEAP[B+20]=0;HEAP[B+24]=0;HEAP[B+28]=0;HEAP[B+48]=0;n=q!=0?3:4;break;case 3:var P=p,v=HEAP[q]&255,n=STACKTOP;STACKTOP+=2;_memset(n,0,2);HEAP[n]=v;P=s(P,0,n);STACKTOP=n;HEAP[B+8]=P;n=5;break;case 4:n=s(p,0,0);HEAP[B+8]=n;n=5;break;case 5:HEAP[B+44]=r;n=HEAP[B+44]!=0?6:7;break;case 6:HEAP[HEAP[B+44]]+=1;n=7;break;case 7:_PyObject_GC_Track(B);n=
HEAP[B+8]==0?8:11;break;case 8:_PyErr_SetString(HEAP[_PyExc_RuntimeError],ye);HEAP[B]-=1;n=HEAP[B]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[B+4]+24]](B);n=10;break;case 10:t=0;n=18;break;case 11:x(HEAP[B+8],B);C(HEAP[B+8],g+10,0);var T=o=0;HEAP[Ib+o*20]!=0?(o=11,n=12):(o=11,n=13);break;case 12:var O=o=(o==12?O:T)+1;HEAP[Ib+o*20]!=0?n=o=12:(o=12,n=13);break;case 13:var ea=_malloc((o==11?T:O)*4);HEAP[B+48]=ea;ea=B;n=HEAP[B+48]==0?14:17;break;case 14:HEAP[ea]-=1;n=HEAP[ea]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[B+
4]+24]](B);n=16;break;case 16:t=_PyErr_NoMemory();n=18;break;case 17:u(ea,1);t=B;n=18;break;case 18:l=t;break a;default:assert(0,"bad label: "+n)}l=void 0}e=m!=0?14:16;break;case 14:e=HEAP[k];HEAP[e]-=1;e=HEAP[e]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[HEAP[k]+4]+24]](HEAP[k]);e=16;break;case 16:f=l;e=17;break;case 17:return b=f,STACKTOP=a,b;default:assert(0,"bad label: "+e)}},0,function(a,b){var c=STACKTOP;STACKTOP+=4;_memset(c,0,4);var e;for(e=-1;;)switch(e){case -1:var d,f;d=c;e=b;HEAP[d]=
0;e=_PyArg_ParseTuple(e,Le,allocate([d,0,0,0],["i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=3;break;case 2:f=I(HEAP[d]);f=_Py_BuildValue(xc,allocate([f,0,0,0],["i8*",0,0,0],ALLOC_STACK));e=3;break;case 3:return d=f,STACKTOP=c,d;default:assert(0,"bad label: "+e)}},0,function(a,b){HEAP[a+52]=b},0,function(b,c,e){var d,j=null;for(d=-1;;)switch(d){case -1:var m,o,p,q,r,s,u,t,B,P,v;m=b;o=c;p=e;d=a(m,0)!=0?1:46;break;case 1:d=n(m)<0?46:2;break;case 2:d=HEAP[m+20]!=0?3:4;break;case 3:B=void 0;B=
HEAP[HEAP[m+8]+384];d=6;break;case 4:B=0;d=HEAP[p+4*B]!=0?5:6;break;case 5:B+=2;d=HEAP[p+4*B]!=0?5:6;break;case 6:d=HEAP[m+16]!=0?7:8;break;case 7:var T=_PyList_New(B);r=T;j=7;d=9;break;case 8:var O=_PyDict_New();r=O;j=8;d=9;break;case 9:d=(j==8?O:T)==0?10:11;break;case 10:f(m);d=46;break;case 11:t=0;d=35;break;case 12:P=l(m,HEAP[p+4*t]);var ea=m;d=P==0?13:15;break;case 13:f(ea);HEAP[r]-=1;d=HEAP[r]==0?14:46;break;case 14:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);d=46;break;case 15:d=HEAP[ea+12]!=0?16:
17;break;case 16:q=g+4;d=18;break;case 17:q=g+6;d=18;break;case 18:v=d=FUNCTION_TABLE[q](HEAP[p+4*(t+1)]);var w=m;d=d==0?19:23;break;case 19:f(w);HEAP[r]-=1;d=HEAP[r]==0?20:21;break;case 20:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);d=21;break;case 21:HEAP[P]-=1;d=HEAP[P]==0?22:46;break;case 22:FUNCTION_TABLE[HEAP[HEAP[P+4]+24]](P);d=46;break;case 23:var x=r;d=HEAP[w+16]!=0?24:25;break;case 24:HEAP[HEAP[x+12]+4*t]=P;HEAP[HEAP[r+12]+4*(t+1)]=v;d=34;break;case 25:d=_PyDict_SetItem(x,P,v)!=0?26:30;break;
case 26:f(m);HEAP[P]-=1;d=HEAP[P]==0?27:28;break;case 27:FUNCTION_TABLE[HEAP[HEAP[P+4]+24]](P);d=28;break;case 28:HEAP[v]-=1;d=HEAP[v]==0?29:46;break;case 29:FUNCTION_TABLE[HEAP[HEAP[v+4]+24]](v);d=46;break;case 30:HEAP[P]-=1;d=HEAP[P]==0?31:32;break;case 31:FUNCTION_TABLE[HEAP[HEAP[P+4]+24]](P);d=32;break;case 32:HEAP[v]-=1;d=HEAP[v]==0?33:34;break;case 33:FUNCTION_TABLE[HEAP[HEAP[v+4]+24]](v);d=34;break;case 34:t+=2;d=35;break;case 35:d=t<B?12:36;break;case 36:u=l(m,o);d=u!=0?37:38;break;case 37:u=
d=_Py_BuildValue(Eb,allocate([u,0,0,0,r,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));d=d==0?38:40;break;case 38:HEAP[r]-=1;d=HEAP[r]==0?39:46;break;case 39:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);d=46;break;case 40:HEAP[m+24]=1;s=HEAP[HEAP[m+48]];d=h(0,Yb,566);s=k(d,s,u,m);HEAP[m+24]=0;HEAP[u]-=1;d=HEAP[u]==0?41:42;break;case 41:FUNCTION_TABLE[HEAP[HEAP[u+4]+24]](u);d=42;break;case 42:d=s==0?43:44;break;case 43:f(m);d=46;break;case 44:HEAP[s]-=1;d=HEAP[s]==0?45:46;break;
case 45:FUNCTION_TABLE[HEAP[HEAP[s+4]+24]](s);d=46;break;case 46:return;default:assert(0,"bad label: "+d)}},0,function(a,b){HEAP[a+56]=b},0,function(b,c){var e;for(e=-1;;)switch(e){case -1:var d,g,j,m;d=b;g=c;m=j=0;e=a(d,1)!=0?1:10;break;case 1:e=n(d)<0?10:2;break;case 2:var o=l(d,g);j=_Py_BuildValue(yb,allocate([o,0,0,0],["%struct.PyObject*",0,0,0],ALLOC_STACK));o=d;e=j==0?3:4;break;case 3:f(o);e=10;break;case 4:HEAP[o+24]=1;m=HEAP[HEAP[d+48]+4];e=h(1,fc,618);m=k(e,m,j,d);HEAP[d+24]=0;HEAP[j]-=1;
e=HEAP[j]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);e=6;break;case 6:e=m==0?7:8;break;case 7:f(d);e=10;break;case 8:HEAP[m]-=1;e=HEAP[m]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);e=10;break;case 10:return;default:assert(0,"bad label: "+e)}},0,function(b,c,e){var d;for(d=-1;;)switch(d){case -1:var j,m,o,p,q,r;j=b;m=c;o=e;r=q=0;d=a(j,2)!=0?1:13;break;case 1:d=n(j)<0?13:2;break;case 2:d=HEAP[j+12]!=0?3:4;break;case 3:p=g+4;d=5;break;case 4:p=g+6;d=5;break;case 5:var s=
l(j,m);q=d=_Py_BuildValue(zb,allocate([s,0,0,0,p,0,0,0,o,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0],ALLOC_STACK));s=j;d=d==0?6:7;break;case 6:f(s);d=13;break;case 7:HEAP[s+24]=1;r=HEAP[HEAP[j+48]+8];d=h(2,jc,624);r=k(d,r,q,j);HEAP[j+24]=0;HEAP[q]-=1;d=HEAP[q]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[q+4]+24]](q);d=9;break;case 9:d=r==0?10:11;break;case 10:f(j);d=13;break;case 11:HEAP[r]-=1;d=HEAP[r]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);
d=13;break;case 13:return;default:assert(0,"bad label: "+d)}},0,function(b,c,e){var d;for(d=-1;;)switch(d){case -1:var f,g,h;d=b;f=c;g=e;var j=h=d;d=HEAP[h+32]==0?1:2;break;case 1:m(j,f,g);d=8;break;case 2:d=g+HEAP[j+40]>HEAP[h+36]?3:5;break;case 3:d=n(h)<0?8:4;break;case 4:d=a(h,3)==0?8:5;break;case 5:d=HEAP[h+36]<g?6:7;break;case 6:m(h,f,g);HEAP[h+40]=0;d=8;break;case 7:_llvm_memcpy_p0i8_p0i8_i32(HEAP[h+32]+HEAP[h+40],f,g,1,0);HEAP[h+40]=g+HEAP[h+40];d=8;break;case 8:return;default:assert(0,"bad label: "+
d)}},0,function(a,b){HEAP[a+92]=b},0,function(b,c,e,d,g,j){var m;for(m=-1;;)switch(m){case -1:var o,p,q,r,s,u,t,B;o=b;p=c;q=e;r=d;s=g;u=j;B=t=0;m=a(o,4)!=0?1:10;break;case 1:m=n(o)<0?10:2;break;case 2:var P=l(o,u);t=l(o,s);m=l(o,r);var v=l(o,q),T=l(o,p);t=_Py_BuildValue(mc,allocate([T,0,0,0,v,0,0,0,m,0,0,0,t,0,0,0,P,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));P=o;m=t==0?3:4;break;case 3:f(P);
m=10;break;case 4:HEAP[P+24]=1;B=HEAP[HEAP[o+48]+16];m=h(4,Xb,636);B=k(m,B,t,o);HEAP[o+24]=0;HEAP[t]-=1;m=HEAP[t]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[t+4]+24]](t);m=6;break;case 6:m=B==0?7:8;break;case 7:f(o);m=10;break;case 8:HEAP[B]-=1;m=HEAP[B]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[B+4]+24]](B);m=10;break;case 10:return;default:assert(0,"bad label: "+m)}},0,function(a,b){HEAP[a+96]=b},0,function(b,c,e,d,g){var j;for(j=-1;;)switch(j){case -1:var m,o,p,q,r,s,u;m=b;o=c;p=e;q=d;r=
g;u=s=0;j=a(m,5)!=0?1:10;break;case 1:j=n(m)<0?10:2;break;case 2:var t=l(m,r);s=l(m,q);j=l(m,p);var B=l(m,o);s=_Py_BuildValue(Bb,allocate([B,0,0,0,j,0,0,0,s,0,0,0,t,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));t=m;j=s==0?3:4;break;case 3:f(t);j=10;break;case 4:HEAP[t+24]=1;u=HEAP[HEAP[m+48]+20];j=h(5,cb,794);u=k(j,u,s,m);HEAP[m+24]=0;HEAP[s]-=1;j=HEAP[s]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[s+4]+24]](s);j=6;
break;case 6:j=u==0?7:8;break;case 7:f(m);j=10;break;case 8:HEAP[u]-=1;j=HEAP[u]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[u+4]+24]](u);j=10;break;case 10:return;default:assert(0,"bad label: "+j)}},0,function(a,b){HEAP[a+100]=b},0,function(b,c,e){var d;for(d=-1;;)switch(d){case -1:var g,j,m,o,p;g=b;j=c;m=e;p=o=0;d=a(g,6)!=0?1:10;break;case 1:d=n(g)<0?10:2;break;case 2:var q=l(g,m);o=l(g,j);o=_Py_BuildValue(Eb,allocate([o,0,0,0,q,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));
q=g;d=o==0?3:4;break;case 3:f(q);d=10;break;case 4:HEAP[q+24]=1;p=HEAP[HEAP[g+48]+24];d=h(6,Nc,801);p=k(d,p,o,g);HEAP[g+24]=0;HEAP[o]-=1;d=HEAP[o]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[o+4]+24]](o);d=6;break;case 6:d=p==0?7:8;break;case 7:f(g);d=10;break;case 8:HEAP[p]-=1;d=HEAP[p]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[p+4]+24]](p);d=10;break;case 10:return;default:assert(0,"bad label: "+d)}},0,function(a,b){HEAP[a+104]=b},0,function(b,c){var e;for(e=-1;;)switch(e){case -1:var d,g,
j,m;d=b;g=c;m=j=0;e=a(d,7)!=0?1:10;break;case 1:e=n(d)<0?10:2;break;case 2:var o=l(d,g);j=_Py_BuildValue(yb,allocate([o,0,0,0],["%struct.PyObject*",0,0,0],ALLOC_STACK));o=d;e=j==0?3:4;break;case 3:f(o);e=10;break;case 4:HEAP[o+24]=1;m=HEAP[HEAP[d+48]+28];e=h(7,ic,806);m=k(e,m,j,d);HEAP[d+24]=0;HEAP[j]-=1;e=HEAP[j]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);e=6;break;case 6:e=m==0?7:8;break;case 7:f(d);e=10;break;case 8:HEAP[m]-=1;e=HEAP[m]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[m+
4]+24]](m);e=10;break;case 10:return;default:assert(0,"bad label: "+e)}},0,function(b,c){var e;for(e=-1;;)switch(e){case -1:var d,j,l,m,o;d=b;j=c;o=m=0;e=a(d,8)!=0?1:13;break;case 1:e=n(d)<0?13:2;break;case 2:e=HEAP[d+12]!=0?3:4;break;case 3:l=g+4;e=5;break;case 4:l=g+6;e=5;break;case 5:m=e=_Py_BuildValue($b,allocate([l,0,0,0,j,0,0,0],["%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0],ALLOC_STACK));var p=d;e=e==0?6:7;break;case 6:f(p);e=13;break;case 7:HEAP[p+24]=1;o=HEAP[HEAP[d+48]+32];e=h(8,Qb,810);
o=k(e,o,m,d);HEAP[d+24]=0;HEAP[m]-=1;e=HEAP[m]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);e=9;break;case 9:e=o==0?10:11;break;case 10:f(d);e=13;break;case 11:HEAP[o]-=1;e=HEAP[o]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[o+4]+24]](o);e=13;break;case 13:return;default:assert(0,"bad label: "+e)}},0,function(a,b){HEAP[a+72]=b},0,function(b){var c;for(c=-1;;)switch(c){case -1:var e,d,g;e=b;g=d=0;c=a(e,9)!=0?1:10;break;case 1:c=n(e)<0?10:2;break;case 2:d=_Py_BuildValue(uc,allocate(1,
"i32",ALLOC_STACK));var j=e;c=d==0?3:4;break;case 3:f(j);c=10;break;case 4:HEAP[j+24]=1;c=HEAP[HEAP[e+48]+36];g=h(9,Gc,814);g=k(g,c,d,e);HEAP[e+24]=0;HEAP[d]-=1;c=HEAP[d]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[d+4]+24]](d);c=6;break;case 6:c=g==0?7:8;break;case 7:f(e);c=10;break;case 8:HEAP[g]-=1;c=HEAP[g]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);c=10;break;case 10:return;default:assert(0,"bad label: "+c)}},0,function(a,b){HEAP[a+76]=b},0,function(b){var c;for(c=-1;;)switch(c){case -1:var e,
d,g;e=b;g=d=0;c=a(e,10)!=0?1:10;break;case 1:c=n(e)<0?10:2;break;case 2:d=_Py_BuildValue(uc,allocate(1,"i32",ALLOC_STACK));var j=e;c=d==0?3:4;break;case 3:f(j);c=10;break;case 4:HEAP[j+24]=1;c=HEAP[HEAP[e+48]+40];g=h(10,pc,818);g=k(g,c,d,e);HEAP[e+24]=0;HEAP[d]-=1;c=HEAP[d]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[d+4]+24]](d);c=6;break;case 6:c=g==0?7:8;break;case 7:f(e);c=10;break;case 8:HEAP[g]-=1;c=HEAP[g]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);c=10;break;case 10:return;
default:assert(0,"bad label: "+c)}},0,function(a,b){HEAP[a+80]=b;HEAP[a+308]=0},0,function(b,e,g){var j;for(j=-1;;)switch(j){case -1:var l,m,o,p,q,r;l=b;m=e;o=g;r=q=0;j=a(l,11)!=0?1:13;break;case 1:j=n(l)<0?13:2;break;case 2:var s=m,u=o;j=HEAP[l+12]!=0?3:4;break;case 3:p=c(s,u);j=5;break;case 4:p=d(s,u);j=5;break;case 5:q=j=_Py_BuildValue(yb,allocate([p,0,0,0],["%struct.PyObject*",0,0,0],ALLOC_STACK));var t=l;j=j==0?6:7;break;case 6:f(t);j=13;break;case 7:HEAP[t+24]=1;r=HEAP[HEAP[l+48]+44];j=h(11,
Zb,833);r=k(j,r,q,l);HEAP[l+24]=0;HEAP[q]-=1;j=HEAP[q]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[q+4]+24]](q);j=9;break;case 9:j=r==0?10:11;break;case 10:f(l);j=13;break;case 11:HEAP[r]-=1;j=HEAP[r]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);j=13;break;case 13:return;default:assert(0,"bad label: "+j)}},0,function(b,e,g){var j;for(j=-1;;)switch(j){case -1:var l,m,o,p,q,r;l=b;m=e;o=g;r=q=0;j=a(l,12)!=0?1:13;break;case 1:j=n(l)<0?13:2;break;case 2:var s=m,u=o;j=HEAP[l+12]!=0?3:4;
break;case 3:p=c(s,u);j=5;break;case 4:p=d(s,u);j=5;break;case 5:q=j=_Py_BuildValue(yb,allocate([p,0,0,0],["%struct.PyObject*",0,0,0],ALLOC_STACK));var t=l;j=j==0?6:7;break;case 6:f(t);j=13;break;case 7:HEAP[t+24]=1;r=HEAP[HEAP[l+48]+48];j=h(12,wc,839);r=k(j,r,q,l);HEAP[l+24]=0;HEAP[q]-=1;j=HEAP[q]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[q+4]+24]](q);j=9;break;case 9:j=r==0?10:11;break;case 10:f(l);j=13;break;case 11:HEAP[r]-=1;j=HEAP[r]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);
j=13;break;case 13:return;default:assert(0,"bad label: "+j)}},0,function(a,b){HEAP[a+108]=b},0,function(b){var c;for(c=-1;;)switch(c){case -1:var e,d,g,j,l;d=b;l=j=g=0;c=a(d,13)!=0?1:11;break;case 1:c=n(d)<0?2:3;break;case 2:e=l;c=12;break;case 3:g=_Py_BuildValue(uc,allocate(1,"i32",ALLOC_STACK));var m=d;c=g==0?4:5;break;case 4:f(m);e=l;c=12;break;case 5:HEAP[m+24]=1;c=HEAP[HEAP[d+48]+52];j=h(13,sc,844);j=k(j,c,g,d);HEAP[d+24]=0;HEAP[g]-=1;c=HEAP[g]==0?6:7;break;case 6:FUNCTION_TABLE[HEAP[HEAP[g+
4]+24]](g);c=7;break;case 7:c=j==0?8:9;break;case 8:f(d);e=l;c=12;break;case 9:l=_PyInt_AsLong(j);HEAP[j]-=1;c=HEAP[j]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);c=11;break;case 11:e=l;c=12;break;case 12:return b=e;default:assert(0,"bad label: "+c)}},0,z,0,function(b,c,e,d,j){var m;for(m=-1;;)switch(m){case -1:var o,p,q,r,s,u,t,B,P,v;o=b;p=c;q=e;r=d;s=j;o=HEAP[o];v=P=B=0;m=a(o,14)!=0?1:14;break;case 1:m=n(o)<0?2:3;break;case 2:t=v;m=15;break;case 3:var T=l(o,s),O=l(o,r),ea=l(o,q);
m=HEAP[o+12]!=0?4:5;break;case 4:u=g+4;m=6;break;case 5:u=g+6;m=6;break;case 6:B=m=_Py_BuildValue(Oc,allocate([u,0,0,0,p,0,0,0,ea,0,0,0,O,0,0,0,T,0,0,0],["%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));var w=o;m=m==0?7:8;break;case 7:f(w);t=v;m=15;break;case 8:HEAP[w+24]=1;P=HEAP[HEAP[o+48]+56];m=h(14,Zc,857);P=k(m,P,B,o);HEAP[o+24]=0;HEAP[B]-=1;m=HEAP[B]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[B+4]+24]](B);
m=10;break;case 10:m=P==0?11:12;break;case 11:f(o);t=v;m=15;break;case 12:v=_PyInt_AsLong(P);HEAP[P]-=1;m=HEAP[P]==0?13:14;break;case 13:FUNCTION_TABLE[HEAP[HEAP[P+4]+24]](P);m=14;break;case 14:t=v;m=15;break;case 15:return b=t;default:assert(0,"bad label: "+m)}},0,function(a,b){HEAP[a+84]=b},0,function(b,c,e,d,g){var j;for(j=-1;;)switch(j){case -1:var m,o,p,q,r,s,u;m=b;o=c;p=e;q=d;r=g;u=s=0;j=a(m,15)!=0?1:10;break;case 1:j=n(m)<0?10:2;break;case 2:var t=l(m,q);s=l(m,p);j=l(m,o);s=_Py_BuildValue(yd,
allocate([j,0,0,0,s,0,0,0,t,0,0,0,r,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"i32",0,0,0],ALLOC_STACK));t=m;j=s==0?3:4;break;case 3:f(t);j=10;break;case 4:HEAP[t+24]=1;u=HEAP[HEAP[m+48]+60];j=h(15,Tc,867);u=k(j,u,s,m);HEAP[m+24]=0;HEAP[s]-=1;j=HEAP[s]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[s+4]+24]](s);j=6;break;case 6:j=u==0?7:8;break;case 7:f(m);j=10;break;case 8:HEAP[u]-=1;j=HEAP[u]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[u+4]+24]](u);j=
10;break;case 10:return;default:assert(0,"bad label: "+j)}},0,function(a,b){HEAP[a+88]=b},0,function(b){var c;for(c=-1;;)switch(c){case -1:var e,d,g;e=b;g=d=0;c=a(e,16)!=0?1:10;break;case 1:c=n(e)<0?10:2;break;case 2:d=_Py_BuildValue(uc,allocate(1,"i32",ALLOC_STACK));var j=e;c=d==0?3:4;break;case 3:f(j);c=10;break;case 4:HEAP[j+24]=1;c=HEAP[HEAP[e+48]+64];g=h(16,sd,869);g=k(g,c,d,e);HEAP[e+24]=0;HEAP[d]-=1;c=HEAP[d]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[d+4]+24]](d);c=6;break;case 6:c=g==0?
7:8;break;case 7:f(e);c=10;break;case 8:HEAP[g]-=1;c=HEAP[g]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);c=10;break;case 10:return;default:assert(0,"bad label: "+c)}},0,function(a,b){HEAP[a+136]=b},0,function(b,e,g,j,m,o,p,q,r){var s;for(s=-1;;)switch(s){case -1:var u,t,B,P,v,T,O,ea,w,x,H,za;u=b;t=e;B=g;P=j;v=m;T=o;O=p;ea=q;w=r;za=H=0;s=a(u,17)!=0?1:13;break;case 1:s=n(u)<0?13:2;break;case 2:var ga=l(u,w),U=l(u,ea),X=l(u,O),y=l(u,T),F=P,N=v;s=HEAP[u+12]!=0?3:4;break;case 3:x=c(F,N);
s=5;break;case 4:x=d(F,N);s=5;break;case 5:var xa=l(u,t);H=s=_Py_BuildValue(qc,allocate([xa,0,0,0,B,0,0,0,x,0,0,0,y,0,0,0,X,0,0,0,U,0,0,0,ga,0,0,0],["%struct.PyObject*",0,0,0,"i32",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));xa=u;s=s==0?6:7;break;case 6:f(xa);s=13;break;case 7:HEAP[xa+24]=1;za=HEAP[HEAP[u+48]+68];s=h(17,tc,673);za=k(s,za,H,u);HEAP[u+24]=0;HEAP[H]-=1;s=HEAP[H]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[H+
4]+24]](H);s=9;break;case 9:s=za==0?10:11;break;case 10:f(u);s=13;break;case 11:HEAP[za]-=1;s=HEAP[za]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[za+4]+24]](za);s=13;break;case 13:return;default:assert(0,"bad label: "+s)}},0,function(a,b){HEAP[a+140]=b},0,function(b,c,e,d){var j;for(j=-1;;)switch(j){case -1:var l,m,o,p,q,r,s,u;l=b;m=c;o=e;p=d;u=s=0;j=a(l,18)!=0?1:16;break;case 1:j=n(l)<0?16:2;break;case 2:j=HEAP[l+12]!=0?3:4;break;case 3:r=g+4;j=5;break;case 4:r=g+6;j=5;break;case 5:j=HEAP[l+
12]!=0?6:7;break;case 6:q=g+4;j=8;break;case 7:q=g+6;j=8;break;case 8:s=j=_Py_BuildValue(vb,allocate([q,0,0,0,m,0,0,0,r,0,0,0,o,0,0,0,p,0,0,0],["%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0,"i32",0,0,0],ALLOC_STACK));var t=l;j=j==0?9:10;break;case 9:f(t);j=16;break;case 10:HEAP[t+24]=1;u=HEAP[HEAP[l+48]+72];j=h(18,eb,683);u=k(j,u,s,l);HEAP[l+24]=0;HEAP[s]-=1;j=HEAP[s]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[s+4]+24]](s);j=12;break;case 12:j=u==0?
13:14;break;case 13:f(l);j=16;break;case 14:HEAP[u]-=1;j=HEAP[u]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[u+4]+24]](u);j=16;break;case 16:return;default:assert(0,"bad label: "+j)}},0,function(a,b){HEAP[a+128]=b},0,function(b,c,e){var d;for(d=-1;;)switch(d){case -1:var j,m,p,q,r,s,u,t;j=b;m=c;p=e;r=0;d=a(j,19)!=0?1:19;break;case 1:s=0;d=n(j)<0?19:2;break;case 2:d=HEAP[j+12]!=0?3:4;break;case 3:q=g+4;d=5;break;case 4:q=g+6;d=5;break;case 5:u=d=o(p,q);var B=j;d=d==0?6:7;break;case 6:f(B);d=19;
break;case 7:t=l(B,m);d=t==0?8:11;break;case 8:HEAP[u]-=1;d=HEAP[u]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[u+4]+24]](u);d=10;break;case 10:f(j);d=19;break;case 11:r=_Py_BuildValue(Pb,allocate([t,0,0,0,u,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));d=r==0?12:15;break;case 12:HEAP[u]-=1;d=HEAP[u]==0?13:14;break;case 13:FUNCTION_TABLE[HEAP[HEAP[u+4]+24]](u);d=14;break;case 14:f(j);d=19;break;case 15:HEAP[j+24]=1;s=HEAP[HEAP[j+48]+76];d=h(19,Vb,750);s=k(d,s,r,j);HEAP[j+
24]=0;d=s==0?16:17;break;case 16:f(j);d=19;break;case 17:HEAP[s]-=1;d=HEAP[s]==0?18:19;break;case 18:FUNCTION_TABLE[HEAP[HEAP[s+4]+24]](s);d=19;break;case 19:d=r!=0?20:22;break;case 20:HEAP[r]-=1;d=HEAP[r]==0?21:22;break;case 21:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);d=22;break;case 22:FUNCTION_TABLE[HEAP[HEAP[j+8]+12+8]](p);return;default:assert(0,"bad label: "+d)}},0,function(a,b){HEAP[a+132]=b},0,function(b,c,e,d,j,m){var o;for(o=-1;;)switch(o){case -1:var p,q,r,s,u,t,B,P,v,T;p=b;q=c;r=e;s=d;u=
j;t=m;T=v=0;o=a(p,20)!=0?1:16;break;case 1:o=n(p)<0?16:2;break;case 2:o=HEAP[p+12]!=0?3:4;break;case 3:P=g+4;o=5;break;case 4:P=g+6;o=5;break;case 5:o=HEAP[p+12]!=0?6:7;break;case 6:B=g+4;o=8;break;case 7:B=g+6;o=8;break;case 8:var O=l(p,r);v=l(p,q);v=o=_Py_BuildValue(Dc,allocate([v,0,0,0,O,0,0,0,B,0,0,0,s,0,0,0,P,0,0,0,u,0,0,0,t,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0,"i32",0,0,0],ALLOC_STACK));
O=p;o=o==0?9:10;break;case 9:f(O);o=16;break;case 10:HEAP[O+24]=1;T=HEAP[HEAP[p+48]+80];o=h(20,yc,775);T=k(o,T,v,p);HEAP[p+24]=0;HEAP[v]-=1;o=HEAP[v]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[v+4]+24]](v);o=12;break;case 12:o=T==0?13:14;break;case 13:f(p);o=16;break;case 14:HEAP[T]-=1;o=HEAP[T]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[T+4]+24]](T);o=16;break;case 16:return;default:assert(0,"bad label: "+o)}},0,function(a,b){HEAP[a+120]=b},0,function(b,c,e){var d;for(d=-1;;)switch(d){case -1:var g,
j,m,o,p;g=b;j=c;m=e;p=o=0;d=a(g,21)!=0?1:10;break;case 1:d=n(g)<0?10:2;break;case 2:var q=l(g,j);o=_Py_BuildValue(Kc,allocate([q,0,0,0,m,0,0,0],["%struct.PyObject*",0,0,0,"i32",0,0,0],ALLOC_STACK));q=g;d=o==0?3:4;break;case 3:f(q);d=10;break;case 4:HEAP[q+24]=1;p=HEAP[HEAP[g+48]+84];d=h(21,sa,783);p=k(d,p,o,g);HEAP[g+24]=0;HEAP[o]-=1;d=HEAP[o]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[o+4]+24]](o);d=6;break;case 6:d=p==0?7:8;break;case 7:f(g);d=10;break;case 8:HEAP[p]-=1;d=HEAP[p]==0?9:10;break;
case 9:FUNCTION_TABLE[HEAP[HEAP[p+4]+24]](p);d=10;break;case 10:return;default:assert(0,"bad label: "+d)}},0,function(a,b,c,e){var d;for(d=-1;;)switch(d){case -1:var f,g,h,j,k,l;f=a;g=b;h=c;j=e;d=g==h?1:2;break;case 1:k=-4;d=120;break;case 2:d=HEAP[f+76+HEAP[g]];d=d==2?5:d==4?22:d==5?42:d==6?49:d==7?56:d==9?12:d==10?14:d==11?40:d==12?3:d==13?4:d==19?41:d==20?21:d==21?14:d==22?63:d==23?64:d==24?63:d==25?64:d==26?64:d==27?64:d==30?19:d==31?30:d==32?31:d==35?20:d==36?39:65;break;case 3:k=ca(12,f,g+1,
h,j);d=120;break;case 4:k=ca(13,f,g+1,h,j);d=120;break;case 5:g+=1;d=g==h?6:7;break;case 6:k=-1;d=120;break;case 7:d=HEAP[f+76+HEAP[g]];d=d==5?10:d==6?10:d==7?10:d==15?9:d==16?8:d==22?10:d==24?10:d==29?10:11;break;case 8:a:{k=f;d=g+1;for(var m=h,n=j,o=void 0,o=-1;;)switch(o){case -1:var p,q,r,s,u;p=k;q=d;r=m;s=n;o=q==r?1:2;break;case 1:u=-1;o=17;break;case 2:o=HEAP[p+76+HEAP[q]];o=o==20?4:o==22?5:o==24?5:o==27?3:6;break;case 3:u=Ca(p,q+1,r,s);o=17;break;case 4:HEAP[s]=q+1;u=33;o=17;break;case 5:q+=
1;o=15;break;case 6:HEAP[s]=q;u=0;o=17;break;case 7:o=HEAP[p+76+HEAP[q]];o=o==9?12:o==10?12:o==21?12:o==22?13:o==24?13:o==30?8:14;break;case 8:o=q+1==r?9:10;break;case 9:u=-1;o=17;break;case 10:o=HEAP[p+76+HEAP[q+1]];o=o==9?11:o==10?11:o==21?11:o==30?11:12;break;case 11:HEAP[s]=q;u=0;o=17;break;case 12:HEAP[s]=q;u=16;o=17;break;case 13:q+=1;o=15;break;case 14:HEAP[s]=q;u=0;o=17;break;case 15:o=q!=r?7:16;break;case 16:u=-1;o=17;break;case 17:k=u;break a;default:assert(0,"bad label: "+o)}k=void 0}d=
120;break;case 9:k=Aa(f,g+1,h,j);d=120;break;case 10:HEAP[j]=g+-1;k=29;d=120;break;case 11:HEAP[j]=g;k=0;d=120;break;case 12:d=g+1==h?13:14;break;case 13:HEAP[j]=h;k=-15;d=120;break;case 14:g+=1;d=g==h?18:15;break;case 15:d=HEAP[f+76+HEAP[g]];d=d==9?16:d==10?14:d==21?14:17;break;case 16:d=g+1!=h?14:17;break;case 17:HEAP[j]=g;k=15;d=120;break;case 18:HEAP[j]=g;k=15;d=120;break;case 19:k=ib(f,g+1,h,j);d=120;break;case 20:HEAP[j]=g+1;k=38;d=120;break;case 21:HEAP[j]=g+1;k=25;d=120;break;case 22:g+=1;
d=g==h?23:24;break;case 23:k=-26;d=120;break;case 24:d=HEAP[g]==93?25:29;break;case 25:d=g+1==h?26:27;break;case 26:k=-1;d=120;break;case 27:d=HEAP[g+1]==62?28:29;break;case 28:HEAP[j]=g+2;k=34;d=120;break;case 29:HEAP[j]=g;k=26;d=120;break;case 30:HEAP[j]=g+1;k=23;d=120;break;case 31:g+=1;d=g==h?32:33;break;case 32:k=-24;d=120;break;case 33:d=HEAP[f+76+HEAP[g]];d=d==9?37:d==10?37:d==11?37:d==15?35:d==21?37:d==32?37:d==33?34:d==34?36:d==35?37:d==36?37:38;break;case 34:HEAP[j]=g+1;k=36;d=120;break;
case 35:HEAP[j]=g+1;k=35;d=120;break;case 36:HEAP[j]=g+1;k=37;d=120;break;case 37:HEAP[j]=g;k=24;d=120;break;case 38:HEAP[j]=g;k=0;d=120;break;case 39:HEAP[j]=g+1;k=21;d=120;break;case 40:HEAP[j]=g+1;k=17;d=120;break;case 41:a:{k=f;d=g+1;m=h;n=j;o=void 0;for(o=-1;;)switch(o){case -1:var t,B,P,v,T;t=k;B=d;P=m;v=n;o=B==P?1:2;break;case 1:T=-1;o=43;break;case 2:o=HEAP[t+76+HEAP[B]];o=o==5?5:o==6?10:o==7?15:o==22?4:o==24?4:o==29?3:20;break;case 3:HEAP[v]=B;T=0;o=43;break;case 4:B+=1;o=41;break;case 5:o=
P-B<=1?6:7;break;case 6:T=-2;o=43;break;case 7:o=FUNCTION_TABLE[HEAP[t+344]](t,B)==0?8:9;break;case 8:HEAP[v]=B;T=0;o=43;break;case 9:B+=2;o=41;break;case 10:o=P-B<=2?11:12;break;case 11:T=-2;o=43;break;case 12:o=FUNCTION_TABLE[HEAP[t+348]](t,B)==0?13:14;break;case 13:HEAP[v]=B;T=0;o=43;break;case 14:B+=3;o=41;break;case 15:o=P-B<=3?16:17;break;case 16:T=-2;o=43;break;case 17:o=FUNCTION_TABLE[HEAP[t+352]](t,B)==0?18:19;break;case 18:HEAP[v]=B;T=0;o=43;break;case 19:B+=4;o=41;break;case 20:HEAP[v]=
B;T=0;o=43;break;case 21:o=HEAP[t+76+HEAP[B]];o=o==5?24:o==6?29:o==7?34:o==9?39:o==10?39:o==11?39:o==21?39:o==22?23:o==24?23:o==25?23:o==26?23:o==27?23:o==29?22:o==30?39:o==32?39:o==36?39:40;break;case 22:HEAP[v]=B;T=0;o=43;break;case 23:B+=1;o=41;break;case 24:o=P-B<=1?25:26;break;case 25:T=-2;o=43;break;case 26:o=FUNCTION_TABLE[HEAP[t+332]](t,B)==0?27:28;break;case 27:HEAP[v]=B;T=0;o=43;break;case 28:B+=2;o=41;break;case 29:o=P-B<=2?30:31;break;case 30:T=-2;o=43;break;case 31:o=FUNCTION_TABLE[HEAP[t+
336]](t,B)==0?32:33;break;case 32:HEAP[v]=B;T=0;o=43;break;case 33:B+=3;o=41;break;case 34:o=P-B<=3?35:36;break;case 35:T=-2;o=43;break;case 36:o=FUNCTION_TABLE[HEAP[t+340]](t,B)==0?37:38;break;case 37:HEAP[v]=B;T=0;o=43;break;case 38:B+=4;o=41;break;case 39:HEAP[v]=B;T=20;o=43;break;case 40:HEAP[v]=B;T=0;o=43;break;case 41:o=B!=P?21:42;break;case 42:T=-20;o=43;break;case 43:k=T;break a;default:assert(0,"bad label: "+o)}k=void 0}d=120;break;case 42:d=h-g<=1?43:44;break;case 43:k=-2;d=120;break;case 44:d=
FUNCTION_TABLE[HEAP[f+344]](f,g)!=0?45:46;break;case 45:g+=2;l=18;d=118;break;case 46:d=FUNCTION_TABLE[HEAP[f+332]](f,g)!=0?47:48;break;case 47:g+=2;l=19;d=118;break;case 48:HEAP[j]=g;k=0;d=120;break;case 49:d=h-g<=2?50:51;break;case 50:k=-2;d=120;break;case 51:d=FUNCTION_TABLE[HEAP[f+348]](f,g)!=0?52:53;break;case 52:g+=3;l=18;d=118;break;case 53:d=FUNCTION_TABLE[HEAP[f+336]](f,g)!=0?54:55;break;case 54:g+=3;l=19;d=118;break;case 55:HEAP[j]=g;k=0;d=120;break;case 56:d=h-g<=3?57:58;break;case 57:k=
-2;d=120;break;case 58:d=FUNCTION_TABLE[HEAP[f+352]](f,g)!=0?59:60;break;case 59:g+=4;l=18;d=118;break;case 60:d=FUNCTION_TABLE[HEAP[f+340]](f,g)!=0?61:62;break;case 61:g+=4;l=19;d=118;break;case 62:HEAP[j]=g;k=0;d=120;break;case 63:l=18;g+=1;d=118;break;case 64:l=19;g+=1;d=118;break;case 65:HEAP[j]=g;k=0;d=120;break;case 66:d=HEAP[f+76+HEAP[g]];d=d==5?69:d==6?74:d==7?79:d==9?84:d==10?84:d==11?84:d==15?114:d==20?84:d==21?84:d==22?68:d==23?85:d==24?68:d==25?68:d==26?68:d==27?68:d==29?67:d==30?84:d==
32?84:d==33?111:d==34?108:d==35?84:d==36?84:117;break;case 67:HEAP[j]=g;k=0;d=120;break;case 68:g+=1;d=118;break;case 69:d=h-g<=1?70:71;break;case 70:k=-2;d=120;break;case 71:d=FUNCTION_TABLE[HEAP[f+332]](f,g)==0?72:73;break;case 72:HEAP[j]=g;k=0;d=120;break;case 73:g+=2;d=118;break;case 74:d=h-g<=2?75:76;break;case 75:k=-2;d=120;break;case 76:d=FUNCTION_TABLE[HEAP[f+336]](f,g)==0?77:78;break;case 77:HEAP[j]=g;k=0;d=120;break;case 78:g+=3;d=118;break;case 79:d=h-g<=3?80:81;break;case 80:k=-2;d=120;
break;case 81:d=FUNCTION_TABLE[HEAP[f+340]](f,g)==0?82:83;break;case 82:HEAP[j]=g;k=0;d=120;break;case 83:g+=4;d=118;break;case 84:HEAP[j]=g;k=l;d=120;break;case 85:g+=1;d=l;d=d==18?86:d==41?107:118;break;case 86:d=g==h?87:88;break;case 87:k=-1;d=120;break;case 88:l=41;d=HEAP[f+76+HEAP[g]];d=d==5?91:d==6?96:d==7?101:d==22?90:d==24?90:d==25?90:d==26?90:d==27?90:d==29?89:106;break;case 89:HEAP[j]=g;k=0;d=120;break;case 90:g+=1;d=118;break;case 91:d=h-g<=1?92:93;break;case 92:k=-2;d=120;break;case 93:d=
FUNCTION_TABLE[HEAP[f+332]](f,g)==0?94:95;break;case 94:HEAP[j]=g;k=0;d=120;break;case 95:g+=2;d=118;break;case 96:d=h-g<=2?97:98;break;case 97:k=-2;d=120;break;case 98:d=FUNCTION_TABLE[HEAP[f+336]](f,g)==0?99:100;break;case 99:HEAP[j]=g;k=0;d=120;break;case 100:g+=3;d=118;break;case 101:d=h-g<=3?102:103;break;case 102:k=-2;d=120;break;case 103:d=FUNCTION_TABLE[HEAP[f+340]](f,g)==0?104:105;break;case 104:HEAP[j]=g;k=0;d=120;break;case 105:g+=4;d=118;break;case 106:l=19;d=118;break;case 107:l=19;d=
118;break;case 108:d=l==19?109:110;break;case 109:HEAP[j]=g;k=0;d=120;break;case 110:HEAP[j]=g+1;k=32;d=120;break;case 111:d=l==19?112:113;break;case 112:HEAP[j]=g;k=0;d=120;break;case 113:HEAP[j]=g+1;k=31;d=120;break;case 114:d=l==19?115:116;break;case 115:HEAP[j]=g;k=0;d=120;break;case 116:HEAP[j]=g+1;k=30;d=120;break;case 117:HEAP[j]=g;k=0;d=120;break;case 118:d=g!=h?66:119;break;case 119:k=0-l;d=120;break;case 120:return a=k;default:assert(0,"bad label: "+d)}},0,function(a,b,c,d){var e;for(e=
-1;;)switch(e){case -1:var f,g,h,j,k;f=a;g=b;h=c;j=d;e=g==h?1:2;break;case 1:k=-4;e=60;break;case 2:e=HEAP[f+76+HEAP[g]];e=e==0?34:e==1?34:e==2?3:e==3?4:e==4?11:e==5?19:e==6?24:e==7?29:e==8?34:e==9?5:e==10?10:35;break;case 3:a:{k=f;e=g+1;for(var l=h,m=j,n=void 0,n=-1;;)switch(n){case -1:var o,p,q,r,s,u;o=k;p=e;q=l;r=m;n=p==q?1:2;break;case 1:s=-1;n=104;break;case 2:n=HEAP[o+76+HEAP[p]];n=n==5?5:n==6?10:n==7?15:n==15?26:n==16?20:n==17?27:n==22?4:n==24?4:n==29?3:28;break;case 3:HEAP[r]=p;s=0;n=104;
break;case 4:p+=1;n=29;break;case 5:n=q-p<=1?6:7;break;case 6:s=-2;n=104;break;case 7:n=FUNCTION_TABLE[HEAP[o+344]](o,p)==0?8:9;break;case 8:HEAP[r]=p;s=0;n=104;break;case 9:p+=2;n=29;break;case 10:n=q-p<=2?11:12;break;case 11:s=-2;n=104;break;case 12:n=FUNCTION_TABLE[HEAP[o+348]](o,p)==0?13:14;break;case 13:HEAP[r]=p;s=0;n=104;break;case 14:p+=3;n=29;break;case 15:n=q-p<=3?16:17;break;case 16:s=-2;n=104;break;case 17:n=FUNCTION_TABLE[HEAP[o+352]](o,p)==0?18:19;break;case 18:HEAP[r]=p;s=0;n=104;break;
case 19:p+=4;n=29;break;case 20:p+=1;n=p==q?21:22;break;case 21:s=-1;n=104;break;case 22:n=HEAP[o+76+HEAP[p]];n=n==20?24:n==27?23:25;break;case 23:s=Ca(o,p+1,q,r);n=104;break;case 24:b:{s=p+1;for(var n=q,t=r,B=void 0,P=null,B=-1;;)switch(B){case -1:var v,T,O,ea;v=s;B=n;T=t;B=B-v<=5?1:2;break;case 1:O=-1;B=8;break;case 2:ea=0;P=2;B=6;break;case 3:B=HEAP[v]!=HEAP[ig+ea]?4:5;break;case 4:HEAP[T]=v;O=0;B=8;break;case 5:var w=ea+1;ea=w;v+=1;P=5;B=6;break;case 6:B=(P==5?w:0)<=5?3:7;break;case 7:HEAP[T]=
v;B=O=8;break;case 8:s=O;break b;default:assert(0,"bad label: "+B)}s=void 0}n=104;break;case 25:HEAP[r]=p;s=0;n=104;break;case 26:s=Aa(o,p+1,q,r);n=104;break;case 27:b:{s=o;n=p+1;t=q;P=r;B=void 0;for(B=-1;;)switch(B){case -1:var x,H,za,ga,U;x=s;H=n;za=t;ga=P;B=H==za?1:2;break;case 1:U=-1;B=51;break;case 2:B=HEAP[x+76+HEAP[H]];B=B==5?5:B==6?10:B==7?15:B==22?4:B==24?4:B==29?3:20;break;case 3:HEAP[ga]=H;U=0;B=51;break;case 4:H+=1;B=49;break;case 5:B=za-H<=1?6:7;break;case 6:U=-2;B=51;break;case 7:B=
FUNCTION_TABLE[HEAP[x+344]](x,H)==0?8:9;break;case 8:HEAP[ga]=H;U=0;B=51;break;case 9:H+=2;B=49;break;case 10:B=za-H<=2?11:12;break;case 11:U=-2;B=51;break;case 12:B=FUNCTION_TABLE[HEAP[x+348]](x,H)==0?13:14;break;case 13:HEAP[ga]=H;U=0;B=51;break;case 14:H+=3;B=49;break;case 15:B=za-H<=3?16:17;break;case 16:U=-2;B=51;break;case 17:B=FUNCTION_TABLE[HEAP[x+352]](x,H)==0?18:19;break;case 18:HEAP[ga]=H;U=0;B=51;break;case 19:H+=4;B=49;break;case 20:HEAP[ga]=H;U=0;B=51;break;case 21:B=HEAP[x+76+HEAP[H]];
B=B==5?24:B==6?29:B==7?34:B==9?39:B==10?39:B==11?47:B==21?39:B==22?23:B==23?46:B==24?23:B==25?23:B==26?23:B==27?23:B==29?22:48;break;case 22:HEAP[ga]=H;U=0;B=51;break;case 23:H+=1;B=49;break;case 24:B=za-H<=1?25:26;break;case 25:U=-2;B=51;break;case 26:B=FUNCTION_TABLE[HEAP[x+332]](x,H)==0?27:28;break;case 27:HEAP[ga]=H;U=0;B=51;break;case 28:H+=2;B=49;break;case 29:B=za-H<=2?30:31;break;case 30:U=-2;B=51;break;case 31:B=FUNCTION_TABLE[HEAP[x+336]](x,H)==0?32:33;break;case 32:HEAP[ga]=H;U=0;B=51;
break;case 33:H+=3;B=49;break;case 34:B=za-H<=3?35:36;break;case 35:U=-2;B=51;break;case 36:B=FUNCTION_TABLE[HEAP[x+340]](x,H)==0?37:38;break;case 37:HEAP[ga]=H;U=0;B=51;break;case 38:H+=4;B=49;break;case 39:H+=1;B=44;break;case 40:B=HEAP[x+76+HEAP[H]];B=B==9?41:B==10?41:B==11?42:B==21?41:43;break;case 41:H+=1;B=44;break;case 42:HEAP[ga]=H+1;U=5;B=51;break;case 43:HEAP[ga]=H;U=0;B=51;break;case 44:B=H!=za?40:45;break;case 45:U=-1;B=51;break;case 46:H+=1;B=49;break;case 47:HEAP[ga]=H+1;U=5;B=51;break;
case 48:HEAP[ga]=H;U=0;B=51;break;case 49:B=H!=za?21:50;break;case 50:U=-1;B=51;break;case 51:s=U;break b;default:assert(0,"bad label: "+B)}s=void 0}n=104;break;case 28:HEAP[r]=p;s=0;n=104;break;case 29:u=0;n=102;break;case 30:n=HEAP[o+76+HEAP[p]];n=n==5?33:n==6?38:n==7?43:n==9?71:n==10?71:n==11?95:n==17?96:n==21?71:n==22?32:n==23?48:n==24?32:n==25?32:n==26?32:n==27?32:n==29?31:101;break;case 31:HEAP[r]=p;s=0;n=104;break;case 32:p+=1;n=102;break;case 33:n=q-p<=1?34:35;break;case 34:s=-2;n=104;break;
case 35:n=FUNCTION_TABLE[HEAP[o+332]](o,p)==0?36:37;break;case 36:HEAP[r]=p;s=0;n=104;break;case 37:p+=2;n=102;break;case 38:n=q-p<=2?39:40;break;case 39:s=-2;n=104;break;case 40:n=FUNCTION_TABLE[HEAP[o+336]](o,p)==0?41:42;break;case 41:HEAP[r]=p;s=0;n=104;break;case 42:p+=3;n=102;break;case 43:n=q-p<=3?44:45;break;case 44:s=-2;n=104;break;case 45:n=FUNCTION_TABLE[HEAP[o+340]](o,p)==0?46:47;break;case 46:HEAP[r]=p;s=0;n=104;break;case 47:p+=4;n=102;break;case 48:n=u!=0?49:50;break;case 49:HEAP[r]=
p;s=0;n=104;break;case 50:u=1;p+=1;n=p==q?51:52;break;case 51:s=-1;n=104;break;case 52:n=HEAP[o+76+HEAP[p]];n=n==5?55:n==6?60:n==7?65:n==22?54:n==24?54:n==29?53:70;break;case 53:HEAP[r]=p;s=0;n=104;break;case 54:p+=1;n=102;break;case 55:n=q-p<=1?56:57;break;case 56:s=-2;n=104;break;case 57:n=FUNCTION_TABLE[HEAP[o+344]](o,p)==0?58:59;break;case 58:HEAP[r]=p;s=0;n=104;break;case 59:p+=2;n=102;break;case 60:n=q-p<=2?61:62;break;case 61:s=-2;n=104;break;case 62:n=FUNCTION_TABLE[HEAP[o+348]](o,p)==0?63:
64;break;case 63:HEAP[r]=p;s=0;n=104;break;case 64:p+=3;n=102;break;case 65:n=q-p<=3?66:67;break;case 66:s=-2;n=104;break;case 67:n=FUNCTION_TABLE[HEAP[o+352]](o,p)==0?68:69;break;case 68:HEAP[r]=p;s=0;n=104;break;case 69:p+=4;n=102;break;case 70:HEAP[r]=p;s=0;n=104;break;case 71:p+=1;n=93;break;case 72:n=HEAP[o+76+HEAP[p]];n=n==5?75:n==6?80:n==7?85:n==9?90:n==10?90:n==11?95:n==17?96:n==21?90:n==22?74:n==24?74:n==29?73:91;break;case 73:HEAP[r]=p;s=0;n=104;break;case 74:p+=1;n=92;break;case 75:n=q-
p<=1?76:77;break;case 76:s=-2;n=104;break;case 77:n=FUNCTION_TABLE[HEAP[o+344]](o,p)==0?78:79;break;case 78:HEAP[r]=p;s=0;n=104;break;case 79:p+=2;n=92;break;case 80:n=q-p<=2?81:82;break;case 81:s=-2;n=104;break;case 82:n=FUNCTION_TABLE[HEAP[o+348]](o,p)==0?83:84;break;case 83:HEAP[r]=p;s=0;n=104;break;case 84:p+=3;n=92;break;case 85:n=q-p<=3?86:87;break;case 86:s=-2;n=104;break;case 87:n=FUNCTION_TABLE[HEAP[o+352]](o,p)==0?88:89;break;case 88:HEAP[r]=p;s=0;n=104;break;case 89:p+=4;n=92;break;case 90:p+=
1;n=93;break;case 91:HEAP[r]=p;s=0;n=104;break;case 92:b:{n=o;t=p;P=q;B=r;s=STACKTOP;STACKTOP+=4;_memset(s,0,4);for(var X=void 0,X=-1;;)switch(X){case -1:var y,F=s,N,xa,S,K,Q,z,va,qb;y=n;HEAP[F]=t;N=P;xa=B;K=0;X=112;break;case 1:X=HEAP[y+76+HEAP[HEAP[F]]];X=X==5?4:X==6?9:X==7?14:X==9?42:X==10?42:X==14?47:X==21?42:X==22?3:X==23?19:X==24?3:X==25?3:X==26?3:X==27?3:X==29?2:111;break;case 2:HEAP[xa]=HEAP[F];S=0;X=114;break;case 3:HEAP[F]+=1;X=112;break;case 4:X=N-HEAP[F]<=1?5:6;break;case 5:S=-2;X=114;
break;case 6:var X=FUNCTION_TABLE[HEAP[y+332]](y,HEAP[F]),W=HEAP[F],X=X==0?7:8;break;case 7:HEAP[xa]=W;S=0;X=114;break;case 8:HEAP[F]=W+2;X=112;break;case 9:X=N-HEAP[F]<=2?10:11;break;case 10:S=-2;X=114;break;case 11:var X=FUNCTION_TABLE[HEAP[y+336]](y,HEAP[F]),db=HEAP[F],X=X==0?12:13;break;case 12:HEAP[xa]=db;S=0;X=114;break;case 13:HEAP[F]=db+3;X=112;break;case 14:X=N-HEAP[F]<=3?15:16;break;case 15:S=-2;X=114;break;case 16:var X=FUNCTION_TABLE[HEAP[y+340]](y,HEAP[F]),C=HEAP[F],X=X==0?17:18;break;
case 17:HEAP[xa]=C;S=0;X=114;break;case 18:HEAP[F]=C+4;X=112;break;case 19:X=K!=0?20:21;break;case 20:HEAP[xa]=HEAP[F];S=0;X=114;break;case 21:K=1;HEAP[F]+=1;X=HEAP[F]==N?22:23;break;case 22:S=-1;X=114;break;case 23:X=HEAP[y+76+HEAP[HEAP[F]]];X=X==5?26:X==6?31:X==7?36:X==22?25:X==24?25:X==29?24:41;break;case 24:HEAP[xa]=HEAP[F];S=0;X=114;break;case 25:HEAP[F]+=1;X=112;break;case 26:X=N-HEAP[F]<=1?27:28;break;case 27:S=-2;X=114;break;case 28:var X=FUNCTION_TABLE[HEAP[y+344]](y,HEAP[F]),I=HEAP[F],X=
X==0?29:30;break;case 29:HEAP[xa]=I;S=0;X=114;break;case 30:HEAP[F]=I+2;X=112;break;case 31:X=N-HEAP[F]<=2?32:33;break;case 32:S=-2;X=114;break;case 33:var X=FUNCTION_TABLE[HEAP[y+348]](y,HEAP[F]),na=HEAP[F],X=X==0?34:35;break;case 34:HEAP[xa]=na;S=0;X=114;break;case 35:HEAP[F]=na+3;X=112;break;case 36:X=N-HEAP[F]<=3?37:38;break;case 37:S=-2;X=114;break;case 38:var X=FUNCTION_TABLE[HEAP[y+352]](y,HEAP[F]),Oa=HEAP[F],X=X==0?39:40;break;case 39:HEAP[xa]=Oa;S=0;X=114;break;case 40:HEAP[F]=Oa+4;X=112;
break;case 41:HEAP[xa]=HEAP[F];S=0;X=114;break;case 42:HEAP[F]+=1;X=HEAP[F]==N?43:44;break;case 43:S=-1;X=114;break;case 44:Q=HEAP[y+76+HEAP[HEAP[F]]];X=Q==14?47:45;break;case 45:X=Q;X=X==9?42:X==10?42:X==21?42:46;break;case 46:HEAP[xa]=HEAP[F];S=0;X=114;break;case 47:K=0;X=48;break;case 48:HEAP[F]+=1;X=HEAP[F]==N?49:50;break;case 49:S=-1;X=114;break;case 50:z=HEAP[y+76+HEAP[HEAP[F]]];X=z==12|z==13?53:51;break;case 51:X=z;X=X==9?48:X==10?48:X==21?48:52;break;case 52:HEAP[xa]=HEAP[F];S=0;X=114;break;
case 53:HEAP[F]+=1;X=54;break;case 54:X=HEAP[F]==N?55:56;break;case 55:S=-1;X=114;break;case 56:va=HEAP[y+76+HEAP[HEAP[F]]];X=va==z?80:57;break;case 57:X=va;X=X==0?73:X==1?73:X==2?78:X==3?74:X==5?58:X==6?63:X==7?68:X==8?73:79;break;case 58:X=N-HEAP[F]<=1?59:60;break;case 59:S=-2;X=114;break;case 60:var X=FUNCTION_TABLE[HEAP[y+356]](y,HEAP[F]),Ae=HEAP[F],X=X!=0?61:62;break;case 61:HEAP[xa]=Ae;S=0;X=114;break;case 62:HEAP[F]=Ae+2;X=54;break;case 63:X=N-HEAP[F]<=2?64:65;break;case 64:S=-2;X=114;break;
case 65:var X=FUNCTION_TABLE[HEAP[y+360]](y,HEAP[F]),Qd=HEAP[F],X=X!=0?66:67;break;case 66:HEAP[xa]=Qd;S=0;X=114;break;case 67:HEAP[F]=Qd+3;X=54;break;case 68:X=N-HEAP[F]<=3?69:70;break;case 69:S=-2;X=114;break;case 70:var X=FUNCTION_TABLE[HEAP[y+364]](y,HEAP[F]),Sa=HEAP[F],X=X!=0?71:72;break;case 71:HEAP[xa]=Sa;S=0;X=114;break;case 72:HEAP[F]=Sa+4;X=54;break;case 73:HEAP[xa]=HEAP[F];S=0;X=114;break;case 74:qb=ob(y,HEAP[F]+1,N,F);X=qb<=0?75:54;break;case 75:X=qb==0?76:77;break;case 76:HEAP[xa]=HEAP[F];
X=77;break;case 77:S=qb;X=114;break;case 78:HEAP[xa]=HEAP[F];S=0;X=114;break;case 79:HEAP[F]+=1;X=54;break;case 80:HEAP[F]+=1;X=HEAP[F]==N?81:82;break;case 81:S=-1;X=114;break;case 82:X=HEAP[y+76+HEAP[HEAP[F]]];X=X==9?84:X==10?84:X==11?104:X==17?105:X==21?84:83;break;case 83:HEAP[xa]=HEAP[F];S=0;X=114;break;case 84:HEAP[F]+=1;X=HEAP[F]==N?85:86;break;case 85:S=-1;X=114;break;case 86:X=HEAP[y+76+HEAP[HEAP[F]]];X=X==5?89:X==6?94:X==7?99:X==9?84:X==10?84:X==11?104:X==17?105:X==21?84:X==22?88:X==24?88:
X==29?87:110;break;case 87:HEAP[xa]=HEAP[F];S=0;X=114;break;case 88:HEAP[F]+=1;X=112;break;case 89:X=N-HEAP[F]<=1?90:91;break;case 90:S=-2;X=114;break;case 91:var X=FUNCTION_TABLE[HEAP[y+344]](y,HEAP[F]),D=HEAP[F],X=X==0?92:93;break;case 92:HEAP[xa]=D;S=0;X=114;break;case 93:HEAP[F]=D+2;X=112;break;case 94:X=N-HEAP[F]<=2?95:96;break;case 95:S=-2;X=114;break;case 96:var X=FUNCTION_TABLE[HEAP[y+348]](y,HEAP[F]),E=HEAP[F],X=X==0?97:98;break;case 97:HEAP[xa]=E;S=0;X=114;break;case 98:HEAP[F]=E+3;X=112;
break;case 99:X=N-HEAP[F]<=3?100:101;break;case 100:S=-2;X=114;break;case 101:var X=FUNCTION_TABLE[HEAP[y+352]](y,HEAP[F]),$=HEAP[F],X=X==0?102:103;break;case 102:HEAP[xa]=$;S=0;X=114;break;case 103:HEAP[F]=$+4;X=112;break;case 104:HEAP[xa]=HEAP[F]+1;S=1;X=114;break;case 105:HEAP[F]+=1;X=HEAP[F]==N?106:107;break;case 106:S=-1;X=114;break;case 107:var ca=HEAP[F],X=HEAP[HEAP[F]]!=62?108:109;break;case 108:HEAP[xa]=ca;S=0;X=114;break;case 109:HEAP[xa]=ca+1;S=3;X=114;break;case 110:HEAP[xa]=HEAP[F];S=
0;X=114;break;case 111:HEAP[xa]=HEAP[F];S=0;X=114;break;case 112:X=HEAP[F]!=N?1:113;break;case 113:S=-1;X=114;break;case 114:n=S;STACKTOP=s;s=n;break b;default:assert(0,"bad label: "+X)}s=void 0}n=104;break;case 93:n=p!=q?72:94;break;case 94:s=-1;n=104;break;case 95:HEAP[r]=p+1;s=2;n=104;break;case 96:p+=1;n=p==q?97:98;break;case 97:s=-1;n=104;break;case 98:n=HEAP[p]!=62?99:100;break;case 99:HEAP[r]=p;s=0;n=104;break;case 100:HEAP[r]=p+1;s=4;n=104;break;case 101:HEAP[r]=p;s=0;n=104;break;case 102:n=
p!=q?30:103;break;case 103:s=-1;n=104;break;case 104:k=s;break a;default:assert(0,"bad label: "+n)}k=void 0}e=60;break;case 4:k=ob(f,g+1,h,j);e=60;break;case 5:g+=1;e=g==h?6:7;break;case 6:k=-3;e=60;break;case 7:e=HEAP[f+76+HEAP[g]]==10?8:9;break;case 8:g+=1;e=9;break;case 9:HEAP[j]=g;k=7;e=60;break;case 10:HEAP[j]=g+1;k=7;e=60;break;case 11:g+=1;e=g==h?12:13;break;case 12:k=-5;e=60;break;case 13:e=HEAP[g]!=93?58:14;break;case 14:g+=1;e=g==h?15:16;break;case 15:k=-5;e=60;break;case 16:e=HEAP[g]!=
62?17:18;break;case 17:g+=-1;e=58;break;case 18:HEAP[j]=g;k=0;e=60;break;case 19:e=h-g<=1?20:21;break;case 20:k=-2;e=60;break;case 21:e=FUNCTION_TABLE[HEAP[f+356]](f,g)!=0?22:23;break;case 22:HEAP[j]=g;k=0;e=60;break;case 23:g+=2;e=58;break;case 24:e=h-g<=2?25:26;break;case 25:k=-2;e=60;break;case 26:e=FUNCTION_TABLE[HEAP[f+360]](f,g)!=0?27:28;break;case 27:HEAP[j]=g;k=0;e=60;break;case 28:g+=3;e=58;break;case 29:e=h-g<=3?30:31;break;case 30:k=-2;e=60;break;case 31:e=FUNCTION_TABLE[HEAP[f+364]](f,
g)!=0?32:33;break;case 32:HEAP[j]=g;k=0;e=60;break;case 33:g+=4;e=58;break;case 34:HEAP[j]=g;k=0;e=60;break;case 35:g+=1;e=58;break;case 36:e=HEAP[f+76+HEAP[g]];e=e==0?56:e==1?56:e==2?56:e==3?56:e==4?49:e==5?37:e==6?41:e==7?45:e==8?56:e==9?56:e==10?56:57;break;case 37:e=h-g<=1?39:38;break;case 38:e=FUNCTION_TABLE[HEAP[f+356]](f,g)!=0?39:40;break;case 39:HEAP[j]=g;k=6;e=60;break;case 40:g+=2;e=58;break;case 41:e=h-g<=2?43:42;break;case 42:e=FUNCTION_TABLE[HEAP[f+360]](f,g)!=0?43:44;break;case 43:HEAP[j]=
g;k=6;e=60;break;case 44:g+=3;e=58;break;case 45:e=h-g<=3?47:46;break;case 46:e=FUNCTION_TABLE[HEAP[f+364]](f,g)!=0?47:48;break;case 47:HEAP[j]=g;k=6;e=60;break;case 48:g+=4;e=58;break;case 49:e=g+1!=h?50:56;break;case 50:var A=g;e=HEAP[g+1]!=93?51:52;break;case 51:g=A+1;e=58;break;case 52:e=A+2!=h?53:56;break;case 53:var cb=g;e=HEAP[g+2]!=62?54:55;break;case 54:g=cb+1;e=58;break;case 55:HEAP[j]=cb+2;k=0;e=60;break;case 56:HEAP[j]=g;k=6;e=60;break;case 57:g+=1;e=58;break;case 58:e=g!=h?36:59;break;
case 59:HEAP[j]=g;k=6;e=60;break;case 60:return a=k;default:assert(0,"bad label: "+e)}},0,function(a,b,c,e){var d;for(d=-1;;)switch(d){case -1:var f,g,h,j,k;f=a;g=b;h=c;j=e;d=g==h?1:2;break;case 1:k=-4;d=51;break;case 2:d=HEAP[f+76+HEAP[g]];d=d==0?32:d==1?32:d==4?3:d==5?17:d==6?22:d==7?27:d==8?32:d==9?11:d==10?16:33;break;case 3:g+=1;d=g==h?4:5;break;case 4:k=-1;d=51;break;case 5:d=HEAP[g]!=93?49:6;break;case 6:g+=1;d=g==h?7:8;break;case 7:k=-1;d=51;break;case 8:var l=g;d=HEAP[g]!=62?9:10;break;case 9:g=
l+-1;d=49;break;case 10:HEAP[j]=l+1;k=40;d=51;break;case 11:g+=1;d=g==h?12:13;break;case 12:k=-1;d=51;break;case 13:d=HEAP[f+76+HEAP[g]]==10?14:15;break;case 14:g+=1;d=15;break;case 15:HEAP[j]=g;k=7;d=51;break;case 16:HEAP[j]=g+1;k=7;d=51;break;case 17:d=h-g<=1?18:19;break;case 18:k=-2;d=51;break;case 19:d=FUNCTION_TABLE[HEAP[f+356]](f,g)!=0?20:21;break;case 20:HEAP[j]=g;k=0;d=51;break;case 21:g+=2;d=49;break;case 22:d=h-g<=2?23:24;break;case 23:k=-2;d=51;break;case 24:d=FUNCTION_TABLE[HEAP[f+360]](f,
g)!=0?25:26;break;case 25:HEAP[j]=g;k=0;d=51;break;case 26:g+=3;d=49;break;case 27:d=h-g<=3?28:29;break;case 28:k=-2;d=51;break;case 29:d=FUNCTION_TABLE[HEAP[f+364]](f,g)!=0?30:31;break;case 30:HEAP[j]=g;k=0;d=51;break;case 31:g+=4;d=49;break;case 32:HEAP[j]=g;k=0;d=51;break;case 33:g+=1;d=49;break;case 34:d=HEAP[f+76+HEAP[g]];d=d==0?47:d==1?47:d==4?47:d==5?35:d==6?39:d==7?43:d==8?47:d==9?47:d==10?47:48;break;case 35:d=h-g<=1?37:36;break;case 36:d=FUNCTION_TABLE[HEAP[f+356]](f,g)!=0?37:38;break;case 37:HEAP[j]=
g;k=6;d=51;break;case 38:g+=2;d=49;break;case 39:d=h-g<=2?41:40;break;case 40:d=FUNCTION_TABLE[HEAP[f+360]](f,g)!=0?41:42;break;case 41:HEAP[j]=g;k=6;d=51;break;case 42:g+=3;d=49;break;case 43:d=h-g<=3?45:44;break;case 44:d=FUNCTION_TABLE[HEAP[f+364]](f,g)!=0?45:46;break;case 45:HEAP[j]=g;k=6;d=51;break;case 46:g+=4;d=49;break;case 47:HEAP[j]=g;k=6;d=51;break;case 48:g+=1;d=49;break;case 49:d=g!=h?34:50;break;case 50:HEAP[j]=g;k=6;d=51;break;case 51:return a=k;default:assert(0,"bad label: "+d)}},
0,function(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,k,l;f=a;g=b;h=c;j=d;l=0;e=35;break;case 1:e=HEAP[f+76+HEAP[g]];e=e==0?17:e==1?17:e==2?18:e==4?25:e==5?2:e==6?7:e==7?12:e==8?17:34;break;case 2:e=h-g<=1?3:4;break;case 3:k=-2;e=37;break;case 4:e=FUNCTION_TABLE[HEAP[f+356]](f,g)!=0?5:6;break;case 5:HEAP[j]=g;k=0;e=37;break;case 6:g+=2;e=35;break;case 7:e=h-g<=2?8:9;break;case 8:k=-2;e=37;break;case 9:e=FUNCTION_TABLE[HEAP[f+360]](f,g)!=0?10:11;break;case 10:HEAP[j]=g;k=0;e=37;break;
case 11:g+=3;e=35;break;case 12:e=h-g<=3?13:14;break;case 13:k=-2;e=37;break;case 14:e=FUNCTION_TABLE[HEAP[f+364]](f,g)!=0?15:16;break;case 15:HEAP[j]=g;k=0;e=37;break;case 16:g+=4;e=35;break;case 17:HEAP[j]=g;k=0;e=37;break;case 18:g+=1;e=g==h?19:20;break;case 19:k=-1;e=37;break;case 20:e=HEAP[g]==33?21:35;break;case 21:g+=1;e=g==h?22:23;break;case 22:k=-1;e=37;break;case 23:e=HEAP[g]==91?24:35;break;case 24:l+=1;g+=1;e=35;break;case 25:g+=1;e=g==h?26:27;break;case 26:k=-1;e=37;break;case 27:e=HEAP[g]==
93?28:35;break;case 28:g+=1;e=g==h?29:30;break;case 29:k=-1;e=37;break;case 30:e=HEAP[g]==62?31:35;break;case 31:g+=1;e=l==0?32:33;break;case 32:HEAP[j]=g;k=42;e=37;break;case 33:l-=1;e=35;break;case 34:g+=1;e=35;break;case 35:e=g!=h?1:36;break;case 36:k=-1;e=37;break;case 37:return a=k;default:assert(0,"bad label: "+e)}},0,function(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,k,l;f=a;g=b;h=c;j=d;e=g==h?1:2;break;case 1:k=-4;e=27;break;case 2:l=g;e=25;break;case 3:e=HEAP[f+76+HEAP[g]];
e=e==2?10:e==3?7:e==5?4:e==6?5:e==7?6:e==9?14:e==10?11:e==21?21:24;break;case 4:g+=2;e=25;break;case 5:g+=3;e=25;break;case 6:g+=4;e=25;break;case 7:e=g==l?8:9;break;case 8:k=ob(f,g+1,h,j);e=27;break;case 9:HEAP[j]=g;k=6;e=27;break;case 10:HEAP[j]=g;k=0;e=27;break;case 11:e=g==l?12:13;break;case 12:HEAP[j]=g+1;k=7;e=27;break;case 13:HEAP[j]=g;k=6;e=27;break;case 14:e=g==l?15:20;break;case 15:g+=1;e=g==h?16:17;break;case 16:k=-3;e=27;break;case 17:e=HEAP[f+76+HEAP[g]]==10?18:19;break;case 18:g+=1;
e=19;break;case 19:HEAP[j]=g;k=7;e=27;break;case 20:HEAP[j]=g;k=6;e=27;break;case 21:e=g==l?22:23;break;case 22:HEAP[j]=g+1;k=39;e=27;break;case 23:HEAP[j]=g;k=6;e=27;break;case 24:g+=1;e=25;break;case 25:e=g!=h?3:26;break;case 26:HEAP[j]=g;k=6;e=27;break;case 27:return a=k;default:assert(0,"bad label: "+e)}},0,function(a,b,c,e){var d;for(d=-1;;)switch(d){case -1:var f,g,h,j,k,l,m,n;f=a;g=b;h=c;j=e;d=g==h?1:2;break;case 1:l=-4;d=29;break;case 2:m=g;d=27;break;case 3:d=HEAP[f+76+HEAP[g]];d=d==3?7:
d==5?4:d==6?5:d==7?6:d==9?19:d==10?16:d==30?10:26;break;case 4:g+=2;d=27;break;case 5:g+=3;d=27;break;case 6:g+=4;d=27;break;case 7:d=g==m?8:9;break;case 8:l=ob(f,g+1,h,j);d=29;break;case 9:HEAP[j]=g;l=6;d=29;break;case 10:d=g==m?11:15;break;case 11:n=ib(f,g+1,h,j);d=n!=22?12:13;break;case 12:k=n;d=14;break;case 13:k=0;d=14;break;case 14:l=k;d=29;break;case 15:HEAP[j]=g;l=6;d=29;break;case 16:d=g==m?17:18;break;case 17:HEAP[j]=g+1;l=7;d=29;break;case 18:HEAP[j]=g;l=6;d=29;break;case 19:d=g==m?20:
25;break;case 20:g+=1;d=g==h?21:22;break;case 21:l=-3;d=29;break;case 22:d=HEAP[f+76+HEAP[g]]==10?23:24;break;case 23:g+=1;d=24;break;case 24:HEAP[j]=g;l=7;d=29;break;case 25:HEAP[j]=g;l=6;d=29;break;case 26:g+=1;d=27;break;case 27:d=g!=h?3:28;break;case 28:HEAP[j]=g;l=6;d=29;break;case 29:return a=l;default:assert(0,"bad label: "+d)}},0,function(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h;e=a;f=b;g=c;d=1;break;case 1:d=HEAP[e+76+HEAP[f]];d=d==5?6:d==6?4:d==7?2:d==22?10:d==23?10:d==24?10:
d==25?10:d==26?10:d==27?10:d==29?10:12;break;case 2:d=HEAP[f]!=HEAP[g];f+=1;g+=1;d=d!=0?3:4;break;case 3:h=0;d=17;break;case 4:d=HEAP[f]!=HEAP[g];f+=1;g+=1;d=d!=0?5:6;break;case 5:h=0;d=17;break;case 6:d=HEAP[f]!=HEAP[g];f+=1;g+=1;d=d!=0?7:8;break;case 7:h=0;d=17;break;case 8:d=HEAP[f]!=HEAP[g];f+=1;g+=1;d=d!=0?9:1;break;case 9:h=0;d=17;break;case 10:d=HEAP[g]!=HEAP[f];g+=1;f+=1;d=d!=0?11:1;break;case 11:h=0;d=17;break;case 12:d=HEAP[f]==HEAP[g]?13:14;break;case 13:h=1;d=17;break;case 14:d=HEAP[e+
76+HEAP[g]];d=d==5?15:d==6?15:d==7?15:d==22?15:d==23?15:d==24?15:d==25?15:d==26?15:d==27?15:d==29?15:16;break;case 15:h=0;d=17;break;case 16:h=1;d=17;break;case 17:return a=h;default:assert(0,"bad label: "+d)}},0,function(a,b,c,d){for(a=-1;;)switch(a){case -1:var e,f,g,h;e=b;f=c;g=d;a=6;break;case 1:a=j?2:3;break;case 2:h=0;a=8;break;case 3:a=HEAP[e]!=HEAP[g]?4:5;break;case 4:h=0;a=8;break;case 5:e+=1;g+=1;a=6;break;case 6:var j=e==f,a=HEAP[g]!=0?1:7;break;case 7:h=j;a=8;break;case 8:return b=h;default:assert(0,
"bad label: "+a)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f;d=a;f=e=b;c=1;break;case 1:c=HEAP[d+76+HEAP[e]];c=c==5?2:c==6?3:c==7?4:c==22?5:c==23?5:c==24?5:c==25?5:c==26?5:c==27?5:c==29?5:6;break;case 2:e+=2;c=1;break;case 3:e+=3;c=1;break;case 4:e+=4;c=1;break;case 5:e+=1;c=1;break;case 6:return d=e-f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e;d=a;e=b;c=1;break;case 1:c=HEAP[d+76+HEAP[e]];c=c==9?2:c==10?2:c==21?2:3;break;case 2:e+=
1;c=1;break;case 3:return d=e;default:assert(0,"bad label: "+c)}},0,function(a,b,c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,k,l,m;f=a;g=b;h=c;j=d;k=1;m=l=0;g+=1;e=1;break;case 1:e=HEAP[f+76+HEAP[g]];e=e==3?37:e==5?2:e==6?7:e==7?12:e==9?49:e==10?49:e==11?54:e==12?21:e==13?29:e==17?54:e==21?39:e==22?17:e==24?17:e==29?17:56;break;case 2:e=k==0?3:6;break;case 3:e=l<h?4:5;break;case 4:HEAP[j+16*l]=g;HEAP[j+16*l+12]=1;e=5;break;case 5:k=1;e=6;break;case 6:g+=1;e=56;break;case 7:e=k==0?8:11;break;
case 8:e=l<h?9:10;break;case 9:HEAP[j+16*l]=g;HEAP[j+16*l+12]=1;e=10;break;case 10:k=1;e=11;break;case 11:g+=2;e=56;break;case 12:e=k==0?13:16;break;case 13:e=l<h?14:15;break;case 14:HEAP[j+16*l]=g;HEAP[j+16*l+12]=1;e=15;break;case 15:k=1;e=16;break;case 16:g+=3;e=56;break;case 17:e=k==0?18:56;break;case 18:e=l<h?19:20;break;case 19:HEAP[j+16*l]=g;HEAP[j+16*l+12]=1;e=20;break;case 20:k=1;e=56;break;case 21:e=k!=2?22:25;break;case 22:e=l<h?23:24;break;case 23:HEAP[j+16*l+4]=g+1;e=24;break;case 24:k=
2;m=12;e=56;break;case 25:e=m==12?26:56;break;case 26:k=0;e=l<h?27:28;break;case 27:HEAP[j+16*l+8]=g;e=28;break;case 28:l+=1;e=56;break;case 29:e=k!=2?30:33;break;case 30:e=l<h?31:32;break;case 31:HEAP[j+16*l+4]=g+1;e=32;break;case 32:k=2;m=13;e=56;break;case 33:e=m==13?34:56;break;case 34:k=0;e=l<h?35:36;break;case 35:HEAP[j+16*l+8]=g;e=36;break;case 36:l+=1;e=56;break;case 37:e=l<h?38:56;break;case 38:HEAP[j+16*l+12]=0;e=56;break;case 39:e=k==1?40:41;break;case 40:k=0;e=56;break;case 41:e=k==2?
42:56;break;case 42:e=l<h?43:56;break;case 43:e=HEAP[j+16*l+12]!=0?44:56;break;case 44:e=HEAP[j+16*l+4]==g?48:45;break;case 45:e=HEAP[g]!=32?48:46;break;case 46:e=HEAP[g+1]==32?48:47;break;case 47:e=HEAP[f+76+HEAP[g+1]]==m?48:56;break;case 48:HEAP[j+16*l+12]=0;e=56;break;case 49:e=k==1?50:51;break;case 50:k=0;e=56;break;case 51:e=k==2?52:56;break;case 52:e=l<h?53:56;break;case 53:HEAP[j+16*l+12]=0;e=56;break;case 54:e=k!=2?55:56;break;case 55:return a=l;case 56:g+=1;e=1;break;default:assert(0,"bad label: "+
e)}},0,function(a,b){var c,e=null;for(c=-1;;)switch(c){case -1:var d,f,g,h;d=b;g=0;d+=2;c=HEAP[d]==120?1:14;break;case 1:d+=1;c=10;break;case 2:c=h=HEAP[d];c=c==48?3:c==49?3:c==50?3:c==51?3:c==52?3:c==53?3:c==54?3:c==55?3:c==56?3:c==57?3:c==65?4:c==66?4:c==67?4:c==68?4:c==69?4:c==70?4:c==97?5:c==98?5:c==99?5:c==100?5:c==101?5:c==102?5:6;break;case 3:g<<=4;var j=h-48|g;g=j;e=3;c=7;break;case 4:g<<=4;var k=h-55+g;g=k;e=4;c=7;break;case 5:g<<=4;var l=h-87+g;g=l;e=5;c=7;break;case 6:var m=g,e=6;c=7;break;
case 7:c=(e==6?m:e==5?l:e==4?k:j)>1114111?8:9;break;case 8:f=-1;c=16;break;case 9:d+=1;c=10;break;case 10:c=HEAP[d]!=59?2:15;break;case 11:c=HEAP[d];g*=10;g=c+-48+g;c=g>1114111?12:13;break;case 12:f=-1;c=16;break;case 13:d+=1;c=14;break;case 14:c=HEAP[d]!=59?11:15;break;case 15:f=Kb(g);c=16;break;case 16:return e=f;default:assert(0,"bad label: "+c)}},0,function(a,b,c){for(a=-1;;)switch(a){case -1:var e,d;e=b;a=c-e;a=a==2?1:a==3?5:a==4?9:18;break;case 1:a=HEAP[e+1]==116?2:18;break;case 2:a=HEAP[e];
a=a==103?4:a==108?3:18;break;case 3:d=60;a=19;break;case 4:d=62;a=19;break;case 5:a=HEAP[e]==97?6:18;break;case 6:e+=1;a=HEAP[e]==109?7:18;break;case 7:e+=1;a=HEAP[e]==112?8:18;break;case 8:d=38;a=19;break;case 9:a=HEAP[e];a=a==97?14:a==113?10:18;break;case 10:e+=1;a=HEAP[e]==117?11:18;break;case 11:e+=1;a=HEAP[e]==111?12:18;break;case 12:e+=1;a=HEAP[e]==116?13:18;break;case 13:d=34;a=19;break;case 14:e+=1;a=HEAP[e]==112?15:18;break;case 15:e+=1;a=HEAP[e]==111?16:18;break;case 16:e+=1;a=HEAP[e]==
115?17:18;break;case 17:d=39;a=19;break;case 18:d=0;a=19;break;case 19:return b=d;default:assert(0,"bad label: "+a)}},0,na,0,function(a,b,c,e){var d;for(d=-1;;)switch(d){case -1:var f,g,h,j,k;f=a;g=b;h=c;j=e;g+=1;h+=-1;d=8;break;case 1:d=HEAP[f+76+HEAP[g]];d=d==9?7:d==10?7:d==13?7:d==14?7:d==15?7:d==16?7:d==17?7:d==18?7:d==19?7:d==21?2:d==22?4:d==23?7:d==24?7:d==25?7:d==26?4:d==27?7:d==30?7:d==31?7:d==32?7:d==33?7:d==34?7:d==35?7:5;break;case 2:d=HEAP[g]==9?3:7;break;case 3:HEAP[j]=g;k=0;d=10;break;
case 4:d=HEAP[g]>=0?7:5;break;case 5:d=HEAP[g];d=d==36?7:d==64?7:6;break;case 6:HEAP[j]=g;k=0;d=10;break;case 7:g+=1;d=8;break;case 8:d=g!=h?1:9;break;case 9:k=1;d=10;break;case 10:return a=k;default:assert(0,"bad label: "+d)}},0,function(a,b,c,d,e){for(a=-1;;)switch(a){case -1:var f,g,h,j,k,l;f=b;g=c;h=d;j=e;a=g-HEAP[f]>j-HEAP[h]?1:5;break;case 1:g=HEAP[f]+(j-HEAP[h]);a=4;break;case 2:a=(HEAP[g+-1]&192)!=128?5:3;break;case 3:g+=-1;a=4;break;case 4:a=HEAP[f]<g?2:5;break;case 5:k=HEAP[h];l=HEAP[f];
a=l!=g?6:7;break;case 6:HEAP[k]=HEAP[l];l+=1;k+=1;a=l!=g?6:7;break;case 7:HEAP[f]=l;HEAP[h]=k;return;default:assert(0,"bad label: "+a)}},0,function(a,b,c,d,e){var f;for(f=-1;;)switch(f){case -1:var g,h,j,k,l,m,n;g=a;h=b;j=c;k=d;l=e;m=HEAP[k];n=HEAP[h];f=7;break;case 1:f=HEAP[g+76+HEAP[n]];f=f==5?2:f==6?3:f==7?4:6;break;case 2:HEAP[m]=(HEAP[n]&31)<<6&65535|HEAP[n+1]&63;m+=2;n+=2;f=7;break;case 3:HEAP[m]=HEAP[n+2]&63|(HEAP[n]&15)<<12&65535|(HEAP[n+1]&63)<<6&65535;m+=2;n+=3;f=7;break;case 4:f=m+2==l?
9:5;break;case 5:f=(HEAP[n+1]&63)<<12|(HEAP[n]&7)<<18|(HEAP[n+2]&63)<<6|HEAP[n+3]&63;f-=65536;HEAP[m]=f>>>10&65535|-10240;HEAP[m+2]=f&1023|-9216;m+=4;n+=4;f=7;break;case 6:HEAP[m]=HEAP[n];m+=2;n+=1;f=7;break;case 7:f=n==j?9:8;break;case 8:f=m!=l?1:9;break;case 9:HEAP[h]=n;HEAP[k]=m;return;default:assert(0,"bad label: "+f)}},0,function(a,b){return 1<<(HEAP[b+1]&31)&HEAP[kc+((HEAP[b]&3)*2+HEAP[Jd+(HEAP[b]>>>2&7)]*8+(HEAP[b+1]>>>5&1))*4]},0,function(a,b){return 1<<(HEAP[b+2]&31)&HEAP[kc+((HEAP[b+1]&
3)*2+HEAP[Jd+((HEAP[b+1]>>>2&15)+(HEAP[b]&15)*16)]*8+(HEAP[b+2]>>>5&1))*4]},0,function(){return 0},0,function(a,b){return 1<<(HEAP[b+1]&31)&HEAP[kc+((HEAP[b]&3)*2+HEAP[ud+(HEAP[b]>>>2&7)]*8+(HEAP[b+1]>>>5&1))*4]},0,function(a,b){return 1<<(HEAP[b+2]&31)&HEAP[kc+((HEAP[b+1]&3)*2+HEAP[ud+((HEAP[b+1]>>>2&15)+(HEAP[b]&15)*16)]*8+(HEAP[b+2]>>>5&1))*4]},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e;d=b;c=HEAP[d]<=193?3:1;break;case 1:c=HEAP[d+1]>=0?3:2;break;case 2:c=(HEAP[d+1]&192)==192?3:
4;break;case 3:e=1;c=5;break;case 4:e=0;c=5;break;case 5:return c=e;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g;d=b;c=HEAP[d+2]>=0?18:1;break;case 1:c=HEAP[d]!=-17?4:2;break;case 2:c=HEAP[d+1]!=-65?4:3;break;case 3:c=HEAP[d+2]>189?18:5;break;case 4:c=(HEAP[d+2]&192)==192?18:5;break;case 5:var h=HEAP[d+1];c=HEAP[d]==-32?6:11;break;case 6:c=h<=159?8:7;break;case 7:c=(HEAP[d+1]&192)==192?8:9;break;case 8:f=1;c=10;break;case 9:f=0;c=10;break;case 10:c=
(f&255)!=0?18:19;break;case 11:c=h>=0?15:12;break;case 12:var j=HEAP[d+1];c=HEAP[d]==-19?13:14;break;case 13:c=j>159?15:16;break;case 14:c=(j&192)==192?15:16;break;case 15:e=1;c=17;break;case 16:e=0;c=17;break;case 17:c=(e&255)!=0?18:19;break;case 18:g=1;c=20;break;case 19:g=0;c=20;break;case 20:return c=g;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g;d=b;c=HEAP[d+3]>=0?17:1;break;case 1:c=(HEAP[d+3]&192)==192?17:2;break;case 2:c=HEAP[d+2]>=0?17:
3;break;case 3:c=(HEAP[d+2]&192)==192?17:4;break;case 4:var h=HEAP[d+1];c=HEAP[d]==-16?5:10;break;case 5:c=h<=143?7:6;break;case 6:c=(HEAP[d+1]&192)==192?7:8;break;case 7:f=1;c=9;break;case 8:f=0;c=9;break;case 9:c=(f&255)!=0?17:18;break;case 10:c=h>=0?14:11;break;case 11:var j=HEAP[d+1];c=HEAP[d]==-12?12:13;break;case 12:c=j>143?14:15;break;case 13:c=(j&192)==192?14:15;break;case 14:e=1;c=16;break;case 15:e=0;c=16;break;case 16:c=(e&255)!=0?17:18;break;case 17:g=1;c=19;break;case 18:g=0;c=19;break;
case 19:return c=g;default:assert(0,"bad label: "+c)}},0,function(a,b,c,d,e){for(a=-1;;)switch(a){case -1:var f,g,h,j,k;f=b;g=c;h=d;j=e;a=1;break;case 1:a=HEAP[f]==g?7:2;break;case 2:k=HEAP[HEAP[f]];a=k<0?3:5;break;case 3:a=j-HEAP[h]<=1?7:4;break;case 4:a=HEAP[h];HEAP[a]=k>>>6|-64;HEAP[h]=a+1;a=HEAP[h];HEAP[a]=k&63|-128;HEAP[h]=a+1;HEAP[f]+=1;a=1;break;case 5:a=HEAP[h]==j?7:6;break;case 6:var a=HEAP[h],l=HEAP[f];HEAP[a]=HEAP[l];HEAP[h]=a+1;HEAP[f]=l+1;a=1;break;case 7:return;default:assert(0,"bad label: "+
a)}},0,function(a,b,c,d,e){for(a=-1;;)switch(a){case -1:var f,g,h,j;f=b;g=c;h=d;j=e;a=2;break;case 1:var a=HEAP[h],k=HEAP[f];HEAP[a]=HEAP[k];HEAP[h]=a+2;HEAP[f]=k+1;a=2;break;case 2:a=HEAP[f]==g?4:3;break;case 3:a=HEAP[h]!=j?1:4;break;case 4:return;default:assert(0,"bad label: "+a)}},0,function(a,b,c,d,e){for(a=-1;;)switch(a){case -1:var f,g,h,j;f=b;g=c;h=d;j=e;a=2;break;case 1:var a=HEAP[h],k=HEAP[f];HEAP[a]=HEAP[k];HEAP[h]=a+1;HEAP[f]=k+1;a=2;break;case 2:a=HEAP[f]==g?4:3;break;case 3:a=HEAP[h]!=
j?1:4;break;case 4:return;default:assert(0,"bad label: "+a)}},0,function(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j,k,l,m,n;g=a;h=b;j=c;k=d;e=h==j?1:2;break;case 1:l=-4;e=126;break;case 2:n=j-h;e=(n&1)!=0?3:6;break;case 3:n&=-2;e=n==0?4:5;break;case 4:l=-1;e=126;break;case 5:j=h+n;e=6;break;case 6:e=HEAP[h+1]==0?7:8;break;case 7:var o=HEAP[g+76+HEAP[h]],f=7;e=9;break;case 8:var p=O(HEAP[h+1]&255,HEAP[h]&255),f=8;e=9;break;case 9:e=f==8?p:o;e=e==2?12:e==4?35:e==5?60:e==6?63:e==7?
66:e==9?22:e==10?24:e==11?58:e==12?10:e==13?11:e==19?59:e==20?34:e==21?24:e==22?69:e==23?70:e==24?69:e==25?70:e==26?70:e==27?70:e==29?71:e==30?32:e==31?45:e==32?46:e==35?33:e==36?57:75;break;case 10:l=oa(12,g,h+2,j,k);e=126;break;case 11:l=oa(13,g,h+2,j,k);e=126;break;case 12:h+=2;e=h==j?13:14;break;case 13:l=-1;e=126;break;case 14:e=HEAP[h+1]==0?15:16;break;case 15:var q=HEAP[g+76+HEAP[h]],f=15;e=17;break;case 16:var r=O(HEAP[h+1]&255,HEAP[h]&255),f=16;e=17;break;case 17:e=f==16?r:q;e=e==5?20:e==
6?20:e==7?20:e==15?19:e==16?18:e==22?20:e==24?20:e==29?20:21;break;case 18:a:{l=g;e=h+2;for(var s=j,u=k,t=void 0,B=null,t=-1;;)switch(t){case -1:var P,v,T,ea,w;P=l;v=e;T=s;ea=u;t=v==T?1:2;break;case 1:w=-1;t=26;break;case 2:t=HEAP[v+1]==0?3:4;break;case 3:var H=HEAP[P+76+HEAP[v]],B=3,t=5;break;case 4:var x=O(HEAP[v+1]&255,HEAP[v]&255),B=4,t=5;break;case 5:t=B==4?x:H;t=t==20?7:t==22?8:t==24?8:t==27?6:9;break;case 6:w=Ma(P,v+2,T,ea);t=26;break;case 7:HEAP[ea]=v+2;w=33;t=26;break;case 8:v+=2;t=24;break;
case 9:HEAP[ea]=v;w=0;t=26;break;case 10:t=HEAP[v+1]==0?11:12;break;case 11:var za=HEAP[P+76+HEAP[v]],B=11,t=13;break;case 12:var U=O(HEAP[v+1]&255,HEAP[v]&255),B=12,t=13;break;case 13:t=B==12?U:za;t=t==9?21:t==10?21:t==21?21:t==22?22:t==24?22:t==30?14:23;break;case 14:t=v+2==T?15:16;break;case 15:w=-1;t=26;break;case 16:t=HEAP[v+2+1]==0?17:18;break;case 17:var F=HEAP[P+76+HEAP[v+2]],B=17,t=19;break;case 18:var y=O(HEAP[v+2+1]&255,HEAP[v+2]&255),B=18,t=19;break;case 19:t=B==18?y:F;t=t==9?20:t==10?
20:t==21?20:t==30?20:21;break;case 20:HEAP[ea]=v;w=0;t=26;break;case 21:HEAP[ea]=v;w=16;t=26;break;case 22:v+=2;t=24;break;case 23:HEAP[ea]=v;w=0;t=26;break;case 24:t=v!=T?10:25;break;case 25:w=-1;t=26;break;case 26:l=w;break a;default:assert(0,"bad label: "+t)}l=void 0}e=126;break;case 19:l=ga(g,h+2,j,k);e=126;break;case 20:HEAP[k]=h+-2;l=29;e=126;break;case 21:HEAP[k]=h;l=0;e=126;break;case 22:e=h+2==j?23:24;break;case 23:HEAP[k]=j;l=-15;e=126;break;case 24:h+=2;e=h==j?31:25;break;case 25:e=HEAP[h+
1]==0?26:27;break;case 26:var N=HEAP[g+76+HEAP[h]],f=26;e=28;break;case 27:var xa=O(HEAP[h+1]&255,HEAP[h]&255),f=27;e=28;break;case 28:e=f==27?xa:N;e=e==9?29:e==10?24:e==21?24:30;break;case 29:e=h+2!=j?24:30;break;case 30:HEAP[k]=h;l=15;e=126;break;case 31:HEAP[k]=h;l=15;e=126;break;case 32:l=X(g,h+2,j,k);e=126;break;case 33:HEAP[k]=h+2;l=38;e=126;break;case 34:HEAP[k]=h+2;l=25;e=126;break;case 35:h+=2;e=h==j?36:37;break;case 36:l=-26;e=126;break;case 37:e=HEAP[h+1]==0?38:44;break;case 38:e=HEAP[h]==
93?39:44;break;case 39:e=h+2==j?40:41;break;case 40:l=-1;e=126;break;case 41:e=HEAP[h+2+1]==0?42:44;break;case 42:e=HEAP[h+2]==62?43:44;break;case 43:HEAP[k]=h+4;l=34;e=126;break;case 44:HEAP[k]=h;l=26;e=126;break;case 45:HEAP[k]=h+2;l=23;e=126;break;case 46:h+=2;e=h==j?47:48;break;case 47:l=-24;e=126;break;case 48:e=HEAP[h+1]==0?49:50;break;case 49:var S=HEAP[g+76+HEAP[h]],f=49;e=51;break;case 50:var K=O(HEAP[h+1]&255,HEAP[h]&255),f=50;e=51;break;case 51:e=f==50?K:S;e=e==9?55:e==10?55:e==11?55:e==
15?53:e==21?55:e==32?55:e==33?52:e==34?54:e==35?55:e==36?55:56;break;case 52:HEAP[k]=h+2;l=36;e=126;break;case 53:HEAP[k]=h+2;l=35;e=126;break;case 54:HEAP[k]=h+2;l=37;e=126;break;case 55:HEAP[k]=h;l=24;e=126;break;case 56:HEAP[k]=h;l=0;e=126;break;case 57:HEAP[k]=h+2;l=21;e=126;break;case 58:HEAP[k]=h+2;l=17;e=126;break;case 59:a:{l=g;e=h+2;s=j;u=k;t=void 0;B=null;for(t=-1;;)switch(t){case -1:var Q,z,va,Aa,qb;Q=l;z=e;va=s;Aa=u;t=z==va?1:2;break;case 1:qb=-1;t=39;break;case 2:t=HEAP[z+1]==0?3:4;break;
case 3:var W=HEAP[Q+76+HEAP[z]],B=3,t=5;break;case 4:var db=O(HEAP[z+1]&255,HEAP[z]&255),B=4,t=5;break;case 5:t=B==4?db:W;t=t==5?9:t==6?12:t==7?15:t==22?8:t==24?8:t==29?6:18;break;case 6:t=(1<<(HEAP[z]&31)&HEAP[kc+((HEAP[z]>>>5)+HEAP[ud+HEAP[z+1]]*8)*4])==0?7:8;break;case 7:HEAP[Aa]=z;qb=0;t=39;break;case 8:z+=2;t=37;break;case 9:t=va-z<=1?10:11;break;case 10:qb=-2;t=39;break;case 11:HEAP[Aa]=z;qb=0;t=39;break;case 12:t=va-z<=2?13:14;break;case 13:qb=-2;t=39;break;case 14:HEAP[Aa]=z;qb=0;t=39;break;
case 15:t=va-z<=3?16:17;break;case 16:qb=-2;t=39;break;case 17:HEAP[Aa]=z;qb=0;t=39;break;case 18:HEAP[Aa]=z;qb=0;t=39;break;case 19:t=HEAP[z+1]==0?20:21;break;case 20:var C=HEAP[Q+76+HEAP[z]],B=20,t=22;break;case 21:var I=O(HEAP[z+1]&255,HEAP[z]&255),B=21,t=22;break;case 22:t=B==21?I:C;t=t==5?26:t==6?29:t==7?32:t==9?35:t==10?35:t==11?35:t==21?35:t==22?25:t==24?25:t==25?25:t==26?25:t==27?25:t==29?23:t==30?35:t==32?35:t==36?35:36;break;case 23:t=(1<<(HEAP[z]&31)&HEAP[kc+((HEAP[z]>>>5)+HEAP[Jd+HEAP[z+
1]]*8)*4])==0?24:25;break;case 24:HEAP[Aa]=z;qb=0;t=39;break;case 25:z+=2;t=37;break;case 26:t=va-z<=1?27:28;break;case 27:qb=-2;t=39;break;case 28:HEAP[Aa]=z;qb=0;t=39;break;case 29:t=va-z<=2?30:31;break;case 30:qb=-2;t=39;break;case 31:HEAP[Aa]=z;qb=0;t=39;break;case 32:t=va-z<=3?33:34;break;case 33:qb=-2;t=39;break;case 34:HEAP[Aa]=z;qb=0;t=39;break;case 35:HEAP[Aa]=z;qb=20;t=39;break;case 36:HEAP[Aa]=z;qb=0;t=39;break;case 37:t=z!=va?19:38;break;case 38:qb=-20;t=39;break;case 39:l=qb;break a;
default:assert(0,"bad label: "+t)}l=void 0}e=126;break;case 60:e=j-h<=1?61:62;break;case 61:l=-2;e=126;break;case 62:HEAP[k]=h;l=0;e=126;break;case 63:e=j-h<=2?64:65;break;case 64:l=-2;e=126;break;case 65:HEAP[k]=h;l=0;e=126;break;case 66:e=j-h<=3?67:68;break;case 67:l=-2;e=126;break;case 68:HEAP[k]=h;l=0;e=126;break;case 69:m=18;h+=2;e=124;break;case 70:m=19;h+=2;e=124;break;case 71:var na=h;e=(1<<(HEAP[h]&31)&HEAP[kc+((HEAP[h]>>>5)+HEAP[ud+HEAP[h+1]]*8)*4])!=0?72:73;break;case 72:h=na+2;m=18;e=
124;break;case 73:e=(1<<(HEAP[h]&31)&HEAP[kc+((HEAP[h]>>>5)+HEAP[Jd+HEAP[na+1]]*8)*4])!=0?74:75;break;case 74:h+=2;m=19;e=124;break;case 75:HEAP[k]=h;l=0;e=126;break;case 76:e=HEAP[h+1]==0?77:78;break;case 77:var Oa=HEAP[g+76+HEAP[h]],f=77;e=79;break;case 78:var Sa=O(HEAP[h+1]&255,HEAP[h]&255),f=78;e=79;break;case 79:e=f==78?Sa:Oa;e=e==5?83:e==6?86:e==7?89:e==9?92:e==10?92:e==11?92:e==15?120:e==20?92:e==21?92:e==22?82:e==23?93:e==24?82:e==25?82:e==26?82:e==27?82:e==29?80:e==30?92:e==32?92:e==33?117:
e==34?114:e==35?92:e==36?92:123;break;case 80:e=(1<<(HEAP[h]&31)&HEAP[kc+((HEAP[h]>>>5)+HEAP[Jd+HEAP[h+1]]*8)*4])==0?81:82;break;case 81:HEAP[k]=h;l=0;e=126;break;case 82:h+=2;e=124;break;case 83:e=j-h<=1?84:85;break;case 84:l=-2;e=126;break;case 85:HEAP[k]=h;l=0;e=126;break;case 86:e=j-h<=2?87:88;break;case 87:l=-2;e=126;break;case 88:HEAP[k]=h;l=0;e=126;break;case 89:e=j-h<=3?90:91;break;case 90:l=-2;e=126;break;case 91:HEAP[k]=h;l=0;e=126;break;case 92:HEAP[k]=h;l=m;e=126;break;case 93:h+=2;e=
m;e=e==18?94:e==41?113:124;break;case 94:e=h==j?95:96;break;case 95:l=-1;e=126;break;case 96:m=41;e=HEAP[h+1]==0?97:98;break;case 97:var D=HEAP[g+76+HEAP[h]],f=97;e=99;break;case 98:var Ae=O(HEAP[h+1]&255,HEAP[h]&255),f=98;e=99;break;case 99:e=f==98?Ae:D;e=e==5?103:e==6?106:e==7?109:e==22?102:e==24?102:e==25?102:e==26?102:e==27?102:e==29?100:112;break;case 100:e=(1<<(HEAP[h]&31)&HEAP[kc+((HEAP[h]>>>5)+HEAP[Jd+HEAP[h+1]]*8)*4])==0?101:102;break;case 101:HEAP[k]=h;l=0;e=126;break;case 102:h+=2;e=124;
break;case 103:e=j-h<=1?104:105;break;case 104:l=-2;e=126;break;case 105:HEAP[k]=h;l=0;e=126;break;case 106:e=j-h<=2?107:108;break;case 107:l=-2;e=126;break;case 108:HEAP[k]=h;l=0;e=126;break;case 109:e=j-h<=3?110:111;break;case 110:l=-2;e=126;break;case 111:HEAP[k]=h;l=0;e=126;break;case 112:m=19;e=124;break;case 113:m=19;e=124;break;case 114:e=m==19?115:116;break;case 115:HEAP[k]=h;l=0;e=126;break;case 116:HEAP[k]=h+2;l=32;e=126;break;case 117:e=m==19?118:119;break;case 118:HEAP[k]=h;l=0;e=126;
break;case 119:HEAP[k]=h+2;l=31;e=126;break;case 120:e=m==19?121:122;break;case 121:HEAP[k]=h;l=0;e=126;break;case 122:HEAP[k]=h+2;l=30;e=126;break;case 123:HEAP[k]=h;l=0;e=126;break;case 124:e=h!=j?76:125;break;case 125:l=0-m;e=126;break;case 126:return a=l;default:assert(0,"bad label: "+e)}},0,function(a,b,c,e){var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k,l,m;g=a;h=b;j=c;k=e;d=h==j?1:2;break;case 1:l=-4;d=68;break;case 2:m=j-h;d=(m&1)!=0?3:6;break;case 3:m&=-2;d=m==0?4:5;break;case 4:l=
-1;d=68;break;case 5:j=h+m;d=6;break;case 6:d=HEAP[h+1]==0?7:8;break;case 7:var n=HEAP[g+76+HEAP[h]],f=7;d=9;break;case 8:var o=O(HEAP[h+1]&255,HEAP[h]&255),f=8;d=9;break;case 9:d=f==8?o:n;d=d==0?40:d==1?40:d==2?10:d==3?11:d==4?21:d==5?31:d==6?34:d==7?37:d==8?40:d==9?12:d==10?20:41;break;case 10:a:{l=g;d=h+2;for(var p=j,q=k,r=void 0,s=null,r=-1;;)switch(r){case -1:var u,t,B,P,v,T;u=l;t=d;B=p;P=q;r=t==B?1:2;break;case 1:v=-1;r=98;break;case 2:r=HEAP[t+1]==0?3:4;break;case 3:var ea=HEAP[u+76+HEAP[t]],
s=3,r=5;break;case 4:var w=O(HEAP[t+1]&255,HEAP[t]&255),s=4,r=5;break;case 5:r=s==4?w:ea;r=r==5?9:r==6?12:r==7?15:r==15?27:r==16?18:r==17?28:r==22?8:r==24?8:r==29?6:29;break;case 6:r=(1<<(HEAP[t]&31)&HEAP[kc+((HEAP[t]>>>5)+HEAP[ud+HEAP[t+1]]*8)*4])==0?7:8;break;case 7:HEAP[P]=t;v=0;r=98;break;case 8:t+=2;T=0;r=96;break;case 9:r=B-t<=1?10:11;break;case 10:v=-2;r=98;break;case 11:HEAP[P]=t;v=0;r=98;break;case 12:r=B-t<=2?13:14;break;case 13:v=-2;r=98;break;case 14:HEAP[P]=t;v=0;r=98;break;case 15:r=
B-t<=3?16:17;break;case 16:v=-2;r=98;break;case 17:HEAP[P]=t;v=0;r=98;break;case 18:t+=2;r=t==B?19:20;break;case 19:v=-1;r=98;break;case 20:r=HEAP[t+1]==0?21:22;break;case 21:var H=HEAP[u+76+HEAP[t]],s=21,r=23;break;case 22:var x=O(HEAP[t+1]&255,HEAP[t]&255),s=22,r=23;break;case 23:r=s==22?x:H;r=r==20?25:r==27?24:26;break;case 24:v=Ma(u,t+2,B,P);r=98;break;case 25:b:{v=t+2;for(var r=B,za=P,U=void 0,X=null,U=-1;;)switch(U){case -1:var F,y,N,xa;F=v;U=r;y=za;U=U-F<=11?1:2;break;case 1:N=-1;U=9;break;
case 2:xa=0;X=2;U=7;break;case 3:U=HEAP[F+1]!=0?5:4;break;case 4:U=HEAP[F]!=HEAP[ig+xa]?5:6;break;case 5:HEAP[y]=F;N=0;U=9;break;case 6:var S=xa+1;xa=S;F+=2;X=6;U=7;break;case 7:U=(X==6?S:0)<=5?3:8;break;case 8:HEAP[y]=F;N=8;U=9;break;case 9:v=N;break b;default:assert(0,"bad label: "+U)}v=void 0}r=98;break;case 26:HEAP[P]=t;v=0;r=98;break;case 27:v=ga(u,t+2,B,P);r=98;break;case 28:b:{v=u;for(var r=t+2,za=B,X=P,z=void 0,U=null,z=-1;;)switch(z){case -1:var K,Q,qb,va,Aa;K=v;Q=r;qb=za;va=X;z=Q==qb?1:
2;break;case 1:Aa=-1;z=50;break;case 2:z=HEAP[Q+1]==0?3:4;break;case 3:var W=HEAP[K+76+HEAP[Q]],U=3,z=5;break;case 4:var db=O(HEAP[Q+1]&255,HEAP[Q]&255),U=4,z=5;break;case 5:z=U==4?db:W;z=z==5?9:z==6?12:z==7?15:z==22?8:z==24?8:z==29?6:18;break;case 6:z=(1<<(HEAP[Q]&31)&HEAP[kc+((HEAP[Q]>>>5)+HEAP[ud+HEAP[Q+1]]*8)*4])==0?7:8;break;case 7:HEAP[va]=Q;Aa=0;z=50;break;case 8:Q+=2;z=48;break;case 9:z=qb-Q<=1?10:11;break;case 10:Aa=-2;z=50;break;case 11:HEAP[va]=Q;Aa=0;z=50;break;case 12:z=qb-Q<=2?13:14;
break;case 13:Aa=-2;z=50;break;case 14:HEAP[va]=Q;Aa=0;z=50;break;case 15:z=qb-Q<=3?16:17;break;case 16:Aa=-2;z=50;break;case 17:HEAP[va]=Q;Aa=0;z=50;break;case 18:HEAP[va]=Q;Aa=0;z=50;break;case 19:z=HEAP[Q+1]==0?20:21;break;case 20:var C=HEAP[K+76+HEAP[Q]],U=20,z=22;break;case 21:var I=O(HEAP[Q+1]&255,HEAP[Q]&255),U=21,z=22;break;case 22:z=U==21?I:C;z=z==5?26:z==6?29:z==7?32:z==9?35:z==10?35:z==11?46:z==21?35:z==22?25:z==23?45:z==24?25:z==25?25:z==26?25:z==27?25:z==29?23:47;break;case 23:z=(1<<
(HEAP[Q]&31)&HEAP[kc+((HEAP[Q]>>>5)+HEAP[Jd+HEAP[Q+1]]*8)*4])==0?24:25;break;case 24:HEAP[va]=Q;Aa=0;z=50;break;case 25:Q+=2;z=48;break;case 26:z=qb-Q<=1?27:28;break;case 27:Aa=-2;z=50;break;case 28:HEAP[va]=Q;Aa=0;z=50;break;case 29:z=qb-Q<=2?30:31;break;case 30:Aa=-2;z=50;break;case 31:HEAP[va]=Q;Aa=0;z=50;break;case 32:z=qb-Q<=3?33:34;break;case 33:Aa=-2;z=50;break;case 34:HEAP[va]=Q;Aa=0;z=50;break;case 35:Q+=2;z=43;break;case 36:z=HEAP[Q+1]==0?37:38;break;case 37:var na=HEAP[K+76+HEAP[Q]],U=
37,z=39;break;case 38:var Oa=O(HEAP[Q+1]&255,HEAP[Q]&255),U=38,z=39;break;case 39:z=U==38?Oa:na;z=z==9?40:z==10?40:z==11?41:z==21?40:42;break;case 40:Q+=2;z=43;break;case 41:HEAP[va]=Q+2;Aa=5;z=50;break;case 42:HEAP[va]=Q;Aa=0;z=50;break;case 43:z=Q!=qb?36:44;break;case 44:Aa=-1;z=50;break;case 45:Q+=2;z=48;break;case 46:HEAP[va]=Q+2;Aa=5;z=50;break;case 47:HEAP[va]=Q;Aa=0;z=50;break;case 48:z=Q!=qb?19:49;break;case 49:Aa=-1;z=50;break;case 50:v=Aa;break b;default:assert(0,"bad label: "+z)}v=void 0}r=
98;break;case 29:HEAP[P]=t;v=0;r=98;break;case 30:r=HEAP[t+1]==0?31:32;break;case 31:var D=HEAP[u+76+HEAP[t]],s=31,r=33;break;case 32:var Ae=O(HEAP[t+1]&255,HEAP[t]&255),s=32,r=33;break;case 33:r=s==32?Ae:D;r=r==5?37:r==6?40:r==7?43:r==9?67:r==10?67:r==11?88:r==17?89:r==21?67:r==22?36:r==23?46:r==24?36:r==25?36:r==26?36:r==27?36:r==29?34:95;break;case 34:r=(1<<(HEAP[t]&31)&HEAP[kc+((HEAP[t]>>>5)+HEAP[Jd+HEAP[t+1]]*8)*4])==0?35:36;break;case 35:HEAP[P]=t;v=0;r=98;break;case 36:t+=2;r=96;break;case 37:r=
B-t<=1?38:39;break;case 38:v=-2;r=98;break;case 39:HEAP[P]=t;v=0;r=98;break;case 40:r=B-t<=2?41:42;break;case 41:v=-2;r=98;break;case 42:HEAP[P]=t;v=0;r=98;break;case 43:r=B-t<=3?44:45;break;case 44:v=-2;r=98;break;case 45:HEAP[P]=t;v=0;r=98;break;case 46:r=T!=0?47:48;break;case 47:HEAP[P]=t;v=0;r=98;break;case 48:T=1;t+=2;r=t==B?49:50;break;case 49:v=-1;r=98;break;case 50:r=HEAP[t+1]==0?51:52;break;case 51:var Qd=HEAP[u+76+HEAP[t]],s=51,r=53;break;case 52:var E=O(HEAP[t+1]&255,HEAP[t]&255),s=52,
r=53;break;case 53:r=s==52?E:Qd;r=r==5?57:r==6?60:r==7?63:r==22?56:r==24?56:r==29?54:66;break;case 54:r=(1<<(HEAP[t]&31)&HEAP[kc+((HEAP[t]>>>5)+HEAP[ud+HEAP[t+1]]*8)*4])==0?55:56;break;case 55:HEAP[P]=t;v=0;r=98;break;case 56:t+=2;r=96;break;case 57:r=B-t<=1?58:59;break;case 58:v=-2;r=98;break;case 59:HEAP[P]=t;v=0;r=98;break;case 60:r=B-t<=2?61:62;break;case 61:v=-2;r=98;break;case 62:HEAP[P]=t;v=0;r=98;break;case 63:r=B-t<=3?64:65;break;case 64:v=-2;r=98;break;case 65:HEAP[P]=t;v=0;r=98;break;case 66:HEAP[P]=
t;v=0;r=98;break;case 67:t+=2;r=86;break;case 68:r=HEAP[t+1]==0?69:70;break;case 69:var $=HEAP[u+76+HEAP[t]],s=69,r=71;break;case 70:var ca=O(HEAP[t+1]&255,HEAP[t]&255),s=70,r=71;break;case 71:r=s==70?ca:$;r=r==5?75:r==6?78:r==7?81:r==9?84:r==10?84:r==11?88:r==17?89:r==21?84:r==22?74:r==24?74:r==29?72:85;break;case 72:r=(1<<(HEAP[t]&31)&HEAP[kc+((HEAP[t]>>>5)+HEAP[ud+HEAP[t+1]]*8)*4])==0?73:74;break;case 73:HEAP[P]=t;v=0;r=98;break;case 74:t+=2;b:{r=u;za=t;X=B;U=P;v=STACKTOP;STACKTOP+=4;_memset(v,
0,4);for(var A=void 0,z=null,A=-1;;)switch(A){case -1:var cb,oa=v,J,ab,ba,G,sa,Bb,Pb,Bc,Y,Fb;cb=r;HEAP[oa]=za;J=X;ab=U;Bb=0;A=113;break;case 1:A=HEAP[HEAP[oa]+1]==0?2:3;break;case 2:var pa=HEAP[cb+76+HEAP[HEAP[oa]]],z=2,A=4;break;case 3:var Eb=O(HEAP[HEAP[oa]+1]&255,HEAP[HEAP[oa]]&255),z=3,A=4;break;case 4:A=z==3?Eb:pa;A=A==5?8:A==6?11:A==7?14:A==9?38:A==10?38:A==14?46:A==21?38:A==22?7:A==23?17:A==24?7:A==25?7:A==26?7:A==27?7:A==29?5:112;break;case 5:A=(1<<(HEAP[HEAP[oa]]&31)&HEAP[kc+((HEAP[HEAP[oa]]>>>
5)+HEAP[Jd+HEAP[HEAP[oa]+1]]*8)*4])==0?6:7;break;case 6:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 7:HEAP[oa]+=2;A=113;break;case 8:A=J-HEAP[oa]<=1?9:10;break;case 9:sa=-2;A=115;break;case 10:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 11:A=J-HEAP[oa]<=2?12:13;break;case 12:sa=-2;A=115;break;case 13:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 14:A=J-HEAP[oa]<=3?15:16;break;case 15:sa=-2;A=115;break;case 16:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 17:A=Bb!=0?18:19;break;case 18:HEAP[ab]=HEAP[oa];sa=0;A=115;break;
case 19:Bb=1;HEAP[oa]+=2;A=HEAP[oa]==J?20:21;break;case 20:sa=-1;A=115;break;case 21:A=HEAP[HEAP[oa]+1]==0?22:23;break;case 22:var kb=HEAP[cb+76+HEAP[HEAP[oa]]],z=22,A=24;break;case 23:var zb=O(HEAP[HEAP[oa]+1]&255,HEAP[HEAP[oa]]&255),z=23,A=24;break;case 24:A=z==23?zb:kb;A=A==5?28:A==6?31:A==7?34:A==22?27:A==24?27:A==29?25:37;break;case 25:A=(1<<(HEAP[HEAP[oa]]&31)&HEAP[kc+((HEAP[HEAP[oa]]>>>5)+HEAP[ud+HEAP[HEAP[oa]+1]]*8)*4])==0?26:27;break;case 26:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 27:HEAP[oa]+=
2;A=113;break;case 28:A=J-HEAP[oa]<=1?29:30;break;case 29:sa=-2;A=115;break;case 30:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 31:A=J-HEAP[oa]<=2?32:33;break;case 32:sa=-2;A=115;break;case 33:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 34:A=J-HEAP[oa]<=3?35:36;break;case 35:sa=-2;A=115;break;case 36:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 37:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 38:HEAP[oa]+=2;A=HEAP[oa]==J?39:40;break;case 39:sa=-1;A=115;break;case 40:A=HEAP[HEAP[oa]+1]==0?41:42;break;case 41:var xb=
HEAP[cb+76+HEAP[HEAP[oa]]],z=41,A=43;break;case 42:var ec=O(HEAP[HEAP[oa]+1]&255,HEAP[HEAP[oa]]&255),z=42,A=43;break;case 43:Pb=A=z==42?ec:xb;A=A==14?46:44;break;case 44:A=Pb;A=A==9?38:A==10?38:A==21?38:45;break;case 45:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 46:Bb=0;A=47;break;case 47:HEAP[oa]+=2;A=HEAP[oa]==J?48:49;break;case 48:sa=-1;A=115;break;case 49:A=HEAP[HEAP[oa]+1]==0?50:51;break;case 50:G=HEAP[cb+76+HEAP[HEAP[oa]]];A=52;break;case 51:G=O(HEAP[HEAP[oa]+1]&255,HEAP[HEAP[oa]]&255);A=52;break;
case 52:Bc=G;A=Bc==12|Bc==13?55:53;break;case 53:A=Bc;A=A==9?47:A==10?47:A==21?47:54;break;case 54:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 55:HEAP[oa]+=2;A=56;break;case 56:A=HEAP[oa]==J?57:58;break;case 57:sa=-1;A=115;break;case 58:A=HEAP[HEAP[oa]+1]==0?59:60;break;case 59:ba=HEAP[cb+76+HEAP[HEAP[oa]]];A=61;break;case 60:ba=O(HEAP[HEAP[oa]+1]&255,HEAP[HEAP[oa]]&255);A=61;break;case 61:Y=ba;A=Y==Bc?79:62;break;case 62:A=Y;A=A==0?72:A==1?72:A==2?77:A==3?73:A==5?63:A==6?66:A==7?69:A==8?72:78;break;
case 63:A=J-HEAP[oa]<=1?64:65;break;case 64:sa=-2;A=115;break;case 65:HEAP[oa]+=2;A=56;break;case 66:A=J-HEAP[oa]<=2?67:68;break;case 67:sa=-2;A=115;break;case 68:HEAP[oa]+=3;A=56;break;case 69:A=J-HEAP[oa]<=3?70:71;break;case 70:sa=-2;A=115;break;case 71:HEAP[oa]+=4;A=56;break;case 72:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 73:Fb=Sa(cb,HEAP[oa]+2,J,oa);A=Fb<=0?74:56;break;case 74:A=Fb==0?75:76;break;case 75:HEAP[ab]=HEAP[oa];A=76;break;case 76:sa=Fb;A=115;break;case 77:HEAP[ab]=HEAP[oa];sa=0;A=115;
break;case 78:HEAP[oa]+=2;A=56;break;case 79:HEAP[oa]+=2;A=HEAP[oa]==J?80:81;break;case 80:sa=-1;A=115;break;case 81:A=HEAP[HEAP[oa]+1]==0?82:83;break;case 82:var Ud=HEAP[cb+76+HEAP[HEAP[oa]]],z=82,A=84;break;case 83:var Ca=O(HEAP[HEAP[oa]+1]&255,HEAP[HEAP[oa]]&255),z=83,A=84;break;case 84:A=z==83?Ca:Ud;A=A==9?86:A==10?86:A==11?104:A==17?105:A==21?86:85;break;case 85:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 86:HEAP[oa]+=2;A=HEAP[oa]==J?87:88;break;case 87:sa=-1;A=115;break;case 88:A=HEAP[HEAP[oa]+
1]==0?89:90;break;case 89:var Sc=HEAP[cb+76+HEAP[HEAP[oa]]],z=89,A=91;break;case 90:var gb=O(HEAP[HEAP[oa]+1]&255,HEAP[HEAP[oa]]&255),z=90,A=91;break;case 91:A=z==90?gb:Sc;A=A==5?95:A==6?98:A==7?101:A==9?86:A==10?86:A==11?104:A==17?105:A==21?86:A==22?94:A==24?94:A==29?92:111;break;case 92:A=(1<<(HEAP[HEAP[oa]]&31)&HEAP[kc+((HEAP[HEAP[oa]]>>>5)+HEAP[ud+HEAP[HEAP[oa]+1]]*8)*4])==0?93:94;break;case 93:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 94:HEAP[oa]+=2;A=113;break;case 95:A=J-HEAP[oa]<=1?96:97;break;
case 96:sa=-2;A=115;break;case 97:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 98:A=J-HEAP[oa]<=2?99:100;break;case 99:sa=-2;A=115;break;case 100:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 101:A=J-HEAP[oa]<=3?102:103;break;case 102:sa=-2;A=115;break;case 103:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 104:HEAP[ab]=HEAP[oa]+2;sa=1;A=115;break;case 105:HEAP[oa]+=2;A=HEAP[oa]==J?106:107;break;case 106:sa=-1;A=115;break;case 107:A=HEAP[HEAP[oa]+1]!=0?109:108;break;case 108:A=HEAP[HEAP[oa]]!=62?109:110;break;case 109:HEAP[ab]=
HEAP[oa];sa=0;A=115;break;case 110:HEAP[ab]=HEAP[oa]+2;sa=3;A=115;break;case 111:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 112:HEAP[ab]=HEAP[oa];sa=0;A=115;break;case 113:A=HEAP[oa]!=J?1:114;break;case 114:sa=-1;A=115;break;case 115:r=sa;STACKTOP=v;v=r;break b;default:assert(0,"bad label: "+A)}v=void 0}r=98;break;case 75:r=B-t<=1?76:77;break;case 76:v=-2;r=98;break;case 77:HEAP[P]=t;v=0;r=98;break;case 78:r=B-t<=2?79:80;break;case 79:v=-2;r=98;break;case 80:HEAP[P]=t;v=0;r=98;break;case 81:r=B-t<=3?
82:83;break;case 82:v=-2;r=98;break;case 83:HEAP[P]=t;v=0;r=98;break;case 84:t+=2;r=86;break;case 85:HEAP[P]=t;v=0;r=98;break;case 86:r=t!=B?68:87;break;case 87:v=-1;r=98;break;case 88:HEAP[P]=t+2;v=2;r=98;break;case 89:t+=2;r=t==B?90:91;break;case 90:v=-1;r=98;break;case 91:r=HEAP[t+1]!=0?93:92;break;case 92:r=HEAP[t]!=62?93:94;break;case 93:HEAP[P]=t;v=0;r=98;break;case 94:HEAP[P]=t+2;v=4;r=98;break;case 95:HEAP[P]=t;v=0;r=98;break;case 96:r=t!=B?30:97;break;case 97:v=-1;r=98;break;case 98:l=v;
break a;default:assert(0,"bad label: "+r)}l=void 0}d=68;break;case 11:l=Sa(g,h+2,j,k);d=68;break;case 12:h+=2;d=h==j?13:14;break;case 13:l=-3;d=68;break;case 14:d=HEAP[h+1]==0?15:16;break;case 15:var ib=HEAP[g+76+HEAP[h]]==10,f=15;d=17;break;case 16:var rb=O(HEAP[h+1]&255,HEAP[h]&255)==10,f=16;d=17;break;case 17:d=(f==16?rb:ib)!=0?18:19;break;case 18:h+=2;d=19;break;case 19:HEAP[k]=h;l=7;d=68;break;case 20:HEAP[k]=h+2;l=7;d=68;break;case 21:h+=2;d=h==j?22:23;break;case 22:l=-5;d=68;break;case 23:d=
HEAP[h+1]!=0?66:24;break;case 24:d=HEAP[h]!=93?66:25;break;case 25:h+=2;d=h==j?26:27;break;case 26:l=-5;d=68;break;case 27:d=HEAP[h+1]!=0?29:28;break;case 28:d=HEAP[h]!=62?29:30;break;case 29:h+=-2;d=66;break;case 30:HEAP[k]=h;l=0;d=68;break;case 31:d=j-h<=1?32:33;break;case 32:l=-2;d=68;break;case 33:h+=2;d=66;break;case 34:d=j-h<=2?35:36;break;case 35:l=-2;d=68;break;case 36:h+=3;d=66;break;case 37:d=j-h<=3?38:39;break;case 38:l=-2;d=68;break;case 39:h+=4;d=66;break;case 40:HEAP[k]=h;l=0;d=68;break;
case 41:h+=2;d=66;break;case 42:d=HEAP[h+1]==0?43:44;break;case 43:var Z=HEAP[g+76+HEAP[h]],f=43;d=45;break;case 44:var M=O(HEAP[h+1]&255,HEAP[h]&255),f=44;d=45;break;case 45:d=f==44?M:Z;d=d==0?64:d==1?64:d==2?64:d==3?64:d==4?55:d==5?46:d==6?49:d==7?52:d==8?64:d==9?64:d==10?64:65;break;case 46:d=j-h<=1?47:48;break;case 47:HEAP[k]=h;l=6;d=68;break;case 48:h+=2;d=66;break;case 49:d=j-h<=2?50:51;break;case 50:HEAP[k]=h;l=6;d=68;break;case 51:h+=3;d=66;break;case 52:d=j-h<=3?53:54;break;case 53:HEAP[k]=
h;l=6;d=68;break;case 54:h+=4;d=66;break;case 55:d=h+2!=j?56:64;break;case 56:d=HEAP[h+2+1]!=0?58:57;break;case 57:d=HEAP[h+2]!=93?58:59;break;case 58:h+=2;d=66;break;case 59:d=h+4!=j?60:64;break;case 60:d=HEAP[h+4+1]!=0?62:61;break;case 61:d=HEAP[h+4]!=62?62:63;break;case 62:h+=2;d=66;break;case 63:HEAP[k]=h+4;l=0;d=68;break;case 64:HEAP[k]=h;l=6;d=68;break;case 65:h+=2;d=66;break;case 66:d=h!=j?42:67;break;case 67:HEAP[k]=h;l=6;d=68;break;case 68:return a=l;default:assert(0,"bad label: "+d)}},0,
function(a,b,c,e){var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k,l,m;g=a;h=b;j=c;k=e;d=h==j?1:2;break;case 1:l=-4;d=57;break;case 2:m=j-h;d=(m&1)!=0?3:6;break;case 3:m&=-2;d=m==0?4:5;break;case 4:l=-1;d=57;break;case 5:j=h+m;d=6;break;case 6:d=HEAP[h+1]==0?7:8;break;case 7:var n=HEAP[g+76+HEAP[h]],f=7;d=9;break;case 8:var o=O(HEAP[h+1]&255,HEAP[h]&255),f=8;d=9;break;case 9:d=f==8?o:n;d=d==0?38:d==1?38:d==4?10:d==5?29:d==6?32:d==7?35:d==8?38:d==9?20:d==10?28:39;break;case 10:h+=2;d=h==j?11:
12;break;case 11:l=-1;d=57;break;case 12:d=HEAP[h+1]!=0?55:13;break;case 13:d=HEAP[h]!=93?55:14;break;case 14:h+=2;d=h==j?15:16;break;case 15:l=-1;d=57;break;case 16:d=HEAP[h+1]!=0?18:17;break;case 17:d=HEAP[h]!=62?18:19;break;case 18:h+=-2;d=55;break;case 19:HEAP[k]=h+2;l=40;d=57;break;case 20:h+=2;d=h==j?21:22;break;case 21:l=-1;d=57;break;case 22:d=HEAP[h+1]==0?23:24;break;case 23:var p=HEAP[g+76+HEAP[h]]==10,f=23;d=25;break;case 24:var q=O(HEAP[h+1]&255,HEAP[h]&255)==10,f=24;d=25;break;case 25:d=
(f==24?q:p)!=0?26:27;break;case 26:h+=2;d=27;break;case 27:HEAP[k]=h;l=7;d=57;break;case 28:HEAP[k]=h+2;l=7;d=57;break;case 29:d=j-h<=1?30:31;break;case 30:l=-2;d=57;break;case 31:h+=2;d=55;break;case 32:d=j-h<=2?33:34;break;case 33:l=-2;d=57;break;case 34:h+=3;d=55;break;case 35:d=j-h<=3?36:37;break;case 36:l=-2;d=57;break;case 37:h+=4;d=55;break;case 38:HEAP[k]=h;l=0;d=57;break;case 39:h+=2;d=55;break;case 40:d=HEAP[h+1]==0?41:42;break;case 41:var r=HEAP[g+76+HEAP[h]],f=41;d=43;break;case 42:var s=
O(HEAP[h+1]&255,HEAP[h]&255),f=42;d=43;break;case 43:d=f==42?s:r;d=d==0?53:d==1?53:d==4?53:d==5?44:d==6?47:d==7?50:d==8?53:d==9?53:d==10?53:54;break;case 44:d=j-h<=1?45:46;break;case 45:HEAP[k]=h;l=6;d=57;break;case 46:h+=2;d=55;break;case 47:d=j-h<=2?48:49;break;case 48:HEAP[k]=h;l=6;d=57;break;case 49:h+=3;d=55;break;case 50:d=j-h<=3?51:52;break;case 51:HEAP[k]=h;l=6;d=57;break;case 52:h+=4;d=55;break;case 53:HEAP[k]=h;l=6;d=57;break;case 54:h+=2;d=55;break;case 55:d=h!=j?40:56;break;case 56:HEAP[k]=
h;l=6;d=57;break;case 57:return a=l;default:assert(0,"bad label: "+d)}},0,function(a,b,c,e){var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k,l,m,n;g=a;h=b;j=c;k=e;m=0;n=j-h;d=(n&1)!=0?1:37;break;case 1:n&=-2;j=h+n;d=37;break;case 2:d=HEAP[h+1]==0?3:4;break;case 3:var o=HEAP[g+76+HEAP[h]],f=3;d=5;break;case 4:var p=O(HEAP[h+1]&255,HEAP[h]&255),f=4;d=5;break;case 5:d=f==4?p:o;d=d==0?15:d==1?15:d==2?16:d==4?25:d==5?6:d==6?9:d==7?12:d==8?15:36;break;case 6:d=j-h<=1?7:8;break;case 7:l=-2;d=39;break;
case 8:h+=2;d=37;break;case 9:d=j-h<=2?10:11;break;case 10:l=-2;d=39;break;case 11:h+=3;d=37;break;case 12:d=j-h<=3?13:14;break;case 13:l=-2;d=39;break;case 14:h+=4;d=37;break;case 15:HEAP[k]=h;l=0;d=39;break;case 16:h+=2;d=h==j?17:18;break;case 17:l=-1;d=39;break;case 18:d=HEAP[h+1]==0?19:37;break;case 19:d=HEAP[h]==33?20:37;break;case 20:h+=2;d=h==j?21:22;break;case 21:l=-1;d=39;break;case 22:d=HEAP[h+1]==0?23:37;break;case 23:d=HEAP[h]==91?24:37;break;case 24:m+=1;h+=2;d=37;break;case 25:h+=2;
d=h==j?26:27;break;case 26:l=-1;d=39;break;case 27:d=HEAP[h+1]==0?28:37;break;case 28:d=HEAP[h]==93?29:37;break;case 29:h+=2;d=h==j?30:31;break;case 30:l=-1;d=39;break;case 31:d=HEAP[h+1]==0?32:37;break;case 32:d=HEAP[h]==62?33:37;break;case 33:h+=2;d=m==0?34:35;break;case 34:HEAP[k]=h;l=42;d=39;break;case 35:m-=1;d=37;break;case 36:h+=2;d=37;break;case 37:d=h!=j?2:38;break;case 38:l=-1;d=39;break;case 39:return a=l;default:assert(0,"bad label: "+d)}},0,function(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,
h,j,k,l,m;g=a;h=b;j=c;k=d;e=h==j?1:2;break;case 1:l=-4;e=33;break;case 2:m=h;e=31;break;case 3:e=HEAP[h+1]==0?4:5;break;case 4:var n=HEAP[g+76+HEAP[h]],f=4;e=6;break;case 5:var o=O(HEAP[h+1]&255,HEAP[h]&255),f=5;e=6;break;case 6:e=f==5?o:n;e=e==2?13:e==3?10:e==5?7:e==6?8:e==7?9:e==9?17:e==10?14:e==21?27:30;break;case 7:h+=2;e=31;break;case 8:h+=3;e=31;break;case 9:h+=4;e=31;break;case 10:e=h==m?11:12;break;case 11:l=Sa(g,h+2,j,k);e=33;break;case 12:HEAP[k]=h;l=6;e=33;break;case 13:HEAP[k]=h;l=0;e=
33;break;case 14:e=h==m?15:16;break;case 15:HEAP[k]=h+2;l=7;e=33;break;case 16:HEAP[k]=h;l=6;e=33;break;case 17:e=h==m?18:26;break;case 18:h+=2;e=h==j?19:20;break;case 19:l=-3;e=33;break;case 20:e=HEAP[h+1]==0?21:22;break;case 21:var p=HEAP[g+76+HEAP[h]]==10,f=21;e=23;break;case 22:var q=O(HEAP[h+1]&255,HEAP[h]&255)==10,f=22;e=23;break;case 23:e=(f==22?q:p)!=0?24:25;break;case 24:h+=2;e=25;break;case 25:HEAP[k]=h;l=7;e=33;break;case 26:HEAP[k]=h;l=6;e=33;break;case 27:e=h==m?28:29;break;case 28:HEAP[k]=
h+2;l=39;e=33;break;case 29:HEAP[k]=h;l=6;e=33;break;case 30:h+=2;e=31;break;case 31:e=h!=j?3:32;break;case 32:HEAP[k]=h;l=6;e=33;break;case 33:return a=l;default:assert(0,"bad label: "+e)}},0,function(a,b,c,e){var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k,l,m,n,o;g=a;h=b;j=c;k=e;d=h==j?1:2;break;case 1:m=-4;d=35;break;case 2:n=h;d=33;break;case 3:d=HEAP[h+1]==0?4:5;break;case 4:var p=HEAP[g+76+HEAP[h]],f=4;d=6;break;case 5:var q=O(HEAP[h+1]&255,HEAP[h]&255),f=5;d=6;break;case 6:d=f==5?q:
p;d=d==3?10:d==5?7:d==6?8:d==7?9:d==9?22:d==10?19:d==30?13:32;break;case 7:h+=2;d=33;break;case 8:h+=3;d=33;break;case 9:h+=4;d=33;break;case 10:d=h==n?11:12;break;case 11:m=Sa(g,h+2,j,k);d=35;break;case 12:HEAP[k]=h;m=6;d=35;break;case 13:d=h==n?14:18;break;case 14:o=X(g,h+2,j,k);d=o!=22?15:16;break;case 15:l=o;d=17;break;case 16:l=0;d=17;break;case 17:m=l;d=35;break;case 18:HEAP[k]=h;m=6;d=35;break;case 19:d=h==n?20:21;break;case 20:HEAP[k]=h+2;m=7;d=35;break;case 21:HEAP[k]=h;m=6;d=35;break;case 22:d=
h==n?23:31;break;case 23:h+=2;d=h==j?24:25;break;case 24:m=-3;d=35;break;case 25:d=HEAP[h+1]==0?26:27;break;case 26:var r=HEAP[g+76+HEAP[h]]==10,f=26;d=28;break;case 27:var s=O(HEAP[h+1]&255,HEAP[h]&255)==10,f=27;d=28;break;case 28:d=(f==27?s:r)!=0?29:30;break;case 29:h+=2;d=30;break;case 30:HEAP[k]=h;m=7;d=35;break;case 31:HEAP[k]=h;m=6;d=35;break;case 32:h+=2;d=33;break;case 33:d=h!=j?3:34;break;case 34:HEAP[k]=h;m=6;d=35;break;case 35:return a=m;default:assert(0,"bad label: "+d)}},0,function(a,
b,c){var d,e=null;for(d=-1;;)switch(d){case -1:var f,g,h,j;f=a;g=b;h=c;d=1;break;case 1:d=HEAP[g+1]==0?2:3;break;case 2:var k=HEAP[f+76+HEAP[g]],e=2;d=4;break;case 3:var l=O(HEAP[g+1]&255,HEAP[g]&255),e=3;d=4;break;case 4:d=e==3?l:k;d=d==5?9:d==6?7:d==7?5:d==22?13:d==23?13:d==24?13:d==25?13:d==26?13:d==27?13:d==29?13:17;break;case 5:d=HEAP[g]!=HEAP[h];g+=1;h+=1;d=d!=0?6:7;break;case 6:j=0;d=23;break;case 7:d=HEAP[g]!=HEAP[h];g+=1;h+=1;d=d!=0?8:9;break;case 8:j=0;d=23;break;case 9:d=HEAP[g]!=HEAP[h];
g+=1;h+=1;d=d!=0?10:11;break;case 10:j=0;d=23;break;case 11:d=HEAP[g]!=HEAP[h];g+=1;h+=1;d=d!=0?12:1;break;case 12:j=0;d=23;break;case 13:d=HEAP[h]!=HEAP[g];h+=1;g+=1;d=d!=0?14:15;break;case 14:j=0;d=23;break;case 15:d=HEAP[h]!=HEAP[g];h+=1;g+=1;d=d!=0?16:1;break;case 16:j=0;d=23;break;case 17:d=HEAP[h+1]==0?18:19;break;case 18:var m=HEAP[f+76+HEAP[h]],e=18;d=20;break;case 19:var n=O(HEAP[h+1]&255,HEAP[h]&255),e=19;d=20;break;case 20:d=e==19?n:m;d=d==5?21:d==6?21:d==7?21:d==22?21:d==23?21:d==24?21:
d==25?21:d==26?21:d==27?21:d==29?21:22;break;case 21:j=0;d=23;break;case 22:j=1;d=23;break;case 23:return a=j;default:assert(0,"bad label: "+d)}},0,function(a,b,c,d){for(a=-1;;)switch(a){case -1:var e,f,g,h;e=b;f=c;g=d;a=7;break;case 1:a=j?2:3;break;case 2:h=0;a=9;break;case 3:a=HEAP[e+1]!=0?5:4;break;case 4:a=HEAP[e]!=HEAP[g]?5:6;break;case 5:h=0;a=9;break;case 6:e+=2;g+=1;a=7;break;case 7:var j=e==f,a=HEAP[g]!=0?1:8;break;case 8:h=j;a=9;break;case 9:return b=h;default:assert(0,"bad label: "+a)}},
0,function(a,b){var c,d=null;for(c=-1;;)switch(c){case -1:var e,f,g;e=a;g=f=b;c=1;break;case 1:c=HEAP[f+1]==0?2:3;break;case 2:var h=HEAP[e+76+HEAP[f]],d=2;c=4;break;case 3:var j=O(HEAP[f+1]&255,HEAP[f]&255),d=3;c=4;break;case 4:c=d==3?j:h;c=c==5?5:c==6?6:c==7?7:c==22?8:c==23?8:c==24?8:c==25?8:c==26?8:c==27?8:c==29?8:9;break;case 5:f+=2;c=1;break;case 6:f+=3;c=1;break;case 7:f+=4;c=1;break;case 8:f+=2;c=1;break;case 9:return d=f-g;default:assert(0,"bad label: "+c)}},0,function(a,b){var c,d=null;for(c=
-1;;)switch(c){case -1:var e,f;e=a;f=b;c=1;break;case 1:c=HEAP[f+1]==0?2:3;break;case 2:var g=HEAP[e+76+HEAP[f]],d=2;c=4;break;case 3:var h=O(HEAP[f+1]&255,HEAP[f]&255),d=3;c=4;break;case 4:c=d==3?h:g;c=c==9?5:c==10?5:c==21?5:6;break;case 5:f+=2;c=1;break;case 6:return d=f;default:assert(0,"bad label: "+c)}},0,function(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j,k,l,m,n,o;g=a;h=b;j=c;k=d;m=1;o=n=0;h+=2;e=1;break;case 1:e=HEAP[h+1]==0?2:3;break;case 2:var p=HEAP[g+76+HEAP[h]],f=2;
e=4;break;case 3:var q=O(HEAP[h+1]&255,HEAP[h]&255),f=3;e=4;break;case 4:e=f==3?q:p;e=e==3?40:e==5?5:e==6?10:e==7?15:e==9?57:e==10?57:e==11?62:e==12?24:e==13?32:e==17?62:e==21?42:e==22?20:e==24?20:e==29?20:64;break;case 5:e=m==0?6:9;break;case 6:e=n<j?7:8;break;case 7:HEAP[k+16*n]=h;HEAP[k+16*n+12]=1;e=8;break;case 8:m=1;e=9;break;case 9:e=64;break;case 10:e=m==0?11:14;break;case 11:e=n<j?12:13;break;case 12:HEAP[k+16*n]=h;HEAP[k+16*n+12]=1;e=13;break;case 13:m=1;e=14;break;case 14:h+=1;e=64;break;
case 15:e=m==0?16:19;break;case 16:e=n<j?17:18;break;case 17:HEAP[k+16*n]=h;HEAP[k+16*n+12]=1;e=18;break;case 18:m=1;e=19;break;case 19:h+=2;e=64;break;case 20:e=m==0?21:64;break;case 21:e=n<j?22:23;break;case 22:HEAP[k+16*n]=h;HEAP[k+16*n+12]=1;e=23;break;case 23:m=1;e=64;break;case 24:e=m!=2?25:28;break;case 25:e=n<j?26:27;break;case 26:HEAP[k+16*n+4]=h+2;e=27;break;case 27:m=2;o=12;e=64;break;case 28:e=o==12?29:64;break;case 29:m=0;e=n<j?30:31;break;case 30:HEAP[k+16*n+8]=h;e=31;break;case 31:n+=
1;e=64;break;case 32:e=m!=2?33:36;break;case 33:e=n<j?34:35;break;case 34:HEAP[k+16*n+4]=h+2;e=35;break;case 35:m=2;o=13;e=64;break;case 36:e=o==13?37:64;break;case 37:m=0;e=n<j?38:39;break;case 38:HEAP[k+16*n+8]=h;e=39;break;case 39:n+=1;e=64;break;case 40:e=n<j?41:64;break;case 41:HEAP[k+16*n+12]=0;e=64;break;case 42:e=m==1?43:44;break;case 43:m=0;e=64;break;case 44:e=m==2?45:64;break;case 45:e=n<j?46:64;break;case 46:e=HEAP[k+16*n+12]!=0?47:64;break;case 47:e=HEAP[k+16*n+4]==h?56:48;break;case 48:e=
HEAP[h+1]!=0?56:49;break;case 49:e=HEAP[h]!=32?56:50;break;case 50:e=HEAP[h+2+1]!=0?52:51;break;case 51:e=HEAP[h+2]==32?56:52;break;case 52:e=HEAP[h+2+1]==0?53:54;break;case 53:l=HEAP[g+76+HEAP[h+2]];e=55;break;case 54:l=O(HEAP[h+2+1]&255,HEAP[h+2]&255);e=55;break;case 55:e=l==o?56:64;break;case 56:HEAP[k+16*n+12]=0;e=64;break;case 57:e=m==1?58:59;break;case 58:m=0;e=64;break;case 59:e=m==2?60:64;break;case 60:e=n<j?61:64;break;case 61:HEAP[k+16*n+12]=0;e=64;break;case 62:e=m!=2?63:64;break;case 63:return a=
n;case 64:h+=2;e=1;break;default:assert(0,"bad label: "+e)}},0,function(a,b){var c,d=null;for(c=-1;;)switch(c){case -1:var e,f,g,h,j;e=b;h=0;e+=4;c=HEAP[e+1]!=0?21:1;break;case 1:c=HEAP[e]!=120?21:2;break;case 2:e+=2;c=13;break;case 3:c=HEAP[e+1]==0?5:4;break;case 4:j=-1;c=9;break;case 5:j=c=HEAP[e];c=c==48?6:c==49?6:c==50?6:c==51?6:c==52?6:c==53?6:c==54?6:c==55?6:c==56?6:c==57?6:c==65?7:c==66?7:c==67?7:c==68?7:c==69?7:c==70?7:c==97?8:c==98?8:c==99?8:c==100?8:c==101?8:c==102?8:9;break;case 6:h<<=
4;var k=j-48|h;h=k;d=6;c=10;break;case 7:h<<=4;var l=j-55+h;h=l;d=7;c=10;break;case 8:h<<=4;var m=j-87+h;h=m;d=8;c=10;break;case 9:var n=h,d=9;c=10;break;case 10:c=(d==9?n:d==8?m:d==7?l:k)>1114111?11:12;break;case 11:g=-1;c=24;break;case 12:e+=2;c=13;break;case 13:c=HEAP[e+1]!=0?3:14;break;case 14:c=HEAP[e]!=59?3:23;break;case 15:c=HEAP[e+1]==0?16:17;break;case 16:f=HEAP[e];c=18;break;case 17:f=-1;c=18;break;case 18:c=f;h*=10;h=c=c-48+h;c=c>1114111?19:20;break;case 19:g=-1;c=24;break;case 20:e+=2;
c=21;break;case 21:c=HEAP[e+1]!=0?15:22;break;case 22:c=HEAP[e]!=59?15:23;break;case 23:g=Kb(h);c=24;break;case 24:return d=g;default:assert(0,"bad label: "+c)}},0,function(a,b,c){for(a=-1;;)switch(a){case -1:var e,d;e=b;a=(c-e)/2|0;a=a==2?1:a==3?8:a==4?15:32;break;case 1:a=HEAP[e+2+1]==0?2:32;break;case 2:a=HEAP[e+2]==116?3:32;break;case 3:a=HEAP[e+1]==0?5:4;break;case 4:a=32;break;case 5:a=HEAP[e];a=a==103?7:a==108?6:32;break;case 6:d=60;a=33;break;case 7:d=62;a=33;break;case 8:a=HEAP[e+1]==0?9:
32;break;case 9:a=HEAP[e]==97?10:32;break;case 10:e+=2;a=HEAP[e+1]==0?11:32;break;case 11:a=HEAP[e]==109?12:32;break;case 12:e+=2;a=HEAP[e+1]==0?13:32;break;case 13:a=HEAP[e]==112?14:32;break;case 14:d=38;a=33;break;case 15:a=HEAP[e+1]==0?17:16;break;case 16:a=32;break;case 17:a=HEAP[e];a=a==97?25:a==113?18:32;break;case 18:e+=2;a=HEAP[e+1]==0?19:32;break;case 19:a=HEAP[e]==117?20:32;break;case 20:e+=2;a=HEAP[e+1]==0?21:32;break;case 21:a=HEAP[e]==111?22:32;break;case 22:e+=2;a=HEAP[e+1]==0?23:32;
break;case 23:a=HEAP[e]==116?24:32;break;case 24:d=34;a=33;break;case 25:e+=2;a=HEAP[e+1]==0?26:32;break;case 26:a=HEAP[e]==112?27:32;break;case 27:e+=2;a=HEAP[e+1]==0?28:32;break;case 28:a=HEAP[e]==111?29:32;break;case 29:e+=2;a=HEAP[e+1]==0?30:32;break;case 30:a=HEAP[e]==115?31:32;break;case 31:d=39;a=33;break;case 32:d=0;a=33;break;case 33:return b=d;default:assert(0,"bad label: "+a)}},0,function(a,b,c,e){var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k;g=a;h=b;j=c;k=e;d=h<j?1:18;break;case 1:d=
HEAP[h+1]==0?2:3;break;case 2:var l=HEAP[g+76+HEAP[h]],f=2;d=4;break;case 3:var m=O(HEAP[h+1]&255,HEAP[h]&255),f=3;d=4;break;case 4:d=f==3?m:l;d=d==5?5:d==6?6:d==7?7:d==9?9:d==10?8:16;break;case 5:h+=2;d=17;break;case 6:h+=3;d=17;break;case 7:h+=4;d=17;break;case 8:HEAP[k+4]=-1;HEAP[k]+=1;h+=2;d=17;break;case 9:HEAP[k]+=1;h+=2;d=h!=j?10:15;break;case 10:d=HEAP[h+1]==0?11:12;break;case 11:var n=HEAP[g+76+HEAP[h]]==10,f=11;d=13;break;case 12:var o=O(HEAP[h+1]&255,HEAP[h]&255)==10,f=12;d=13;break;case 13:d=
(f==12?o:n)!=0?14:15;break;case 14:h+=2;d=15;break;case 15:HEAP[k+4]=-1;d=17;break;case 16:h+=2;d=17;break;case 17:HEAP[k+4]+=1;d=h<j?1:18;break;case 18:return;default:assert(0,"bad label: "+d)}},0,function(a,b,c,e){var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k,l;g=a;h=b;j=c;k=e;h+=2;j+=-2;d=15;break;case 1:d=HEAP[h+1]==0?2:3;break;case 2:var m=HEAP[g+76+HEAP[h]],f=2;d=4;break;case 3:var n=O(HEAP[h+1]&255,HEAP[h]&255),f=3;d=4;break;case 4:d=f==3?n:m;d=d==9?14:d==10?14:d==13?14:d==14?14:d==
15?14:d==16?14:d==17?14:d==18?14:d==19?14:d==21?5:d==22?8:d==23?14:d==24?14:d==25?14:d==26?8:d==27?14:d==30?14:d==31?14:d==32?14:d==33?14:d==34?14:d==35?14:10;break;case 5:d=HEAP[h+1]==0?6:14;break;case 6:d=HEAP[h]==9?7:14;break;case 7:HEAP[k]=h;l=0;d=17;break;case 8:d=HEAP[h+1]==0?9:10;break;case 9:d=(HEAP[h]&-128)==0?14:10;break;case 10:d=HEAP[h+1]==0?12:11;break;case 11:d=13;break;case 12:d=HEAP[h];d=d==36?14:d==64?14:13;break;case 13:HEAP[k]=h;l=0;d=17;break;case 14:h+=2;d=15;break;case 15:d=
h!=j?1:16;break;case 16:l=1;d=17;break;case 17:return a=l;default:assert(0,"bad label: "+d)}},0,function(a,b,c,d,e){for(a=-1;;)switch(a){case -1:var f,g,h,j,k,l,m;f=b;g=c;h=d;j=e;k=HEAP[f];a=16;break;case 1:l=HEAP[k];a=m=HEAP[k+1];a=a==0?2:a==1?6:a==2?6:a==3?6:a==4?6:a==5?6:a==6?6:a==7?6:a==216?12:a==217?12:a==218?12:a==219?12:9;break;case 2:a=l>=0?3:6;break;case 3:a=HEAP[h]==j?4:5;break;case 4:HEAP[f]=k;a=18;break;case 5:a=HEAP[h];HEAP[a]=l;HEAP[h]=a+1;a=15;break;case 6:a=j-HEAP[h]<=1?7:8;break;
case 7:HEAP[f]=k;a=18;break;case 8:a=HEAP[h];HEAP[a]=l>>>6|-64|m<<2&255;HEAP[h]=a+1;a=HEAP[h];HEAP[a]=l&63|-128;HEAP[h]=a+1;a=15;break;case 9:a=j-HEAP[h]<=2?10:11;break;case 10:HEAP[f]=k;a=18;break;case 11:a=HEAP[h];HEAP[a]=m>>>4|-32;HEAP[h]=a+1;a=HEAP[h];HEAP[a]=l>>>6|-128|(m&15)<<2&255;HEAP[h]=a+1;a=HEAP[h];HEAP[a]=l&63|-128;HEAP[h]=a+1;a=15;break;case 12:a=j-HEAP[h]<=3?13:14;break;case 13:HEAP[f]=k;a=18;break;case 14:var a=(l>>>6&3|(m&3)<<2)+1,n=HEAP[h];HEAP[n]=a>>2&255|-16;HEAP[h]=n+1;n=HEAP[h];
HEAP[n]=l>>>2&15|-128|(a&3)<<4&255;HEAP[h]=n+1;k+=2;a=HEAP[k];n=HEAP[h];HEAP[n]=a>>>6|-128|(l&3)<<4&255|(HEAP[k+1]&3)<<2&255;HEAP[h]=n+1;n=HEAP[h];HEAP[n]=a&63|-128;HEAP[h]=n+1;a=15;break;case 15:k+=2;a=16;break;case 16:a=k!=g?1:17;break;case 17:HEAP[f]=k;a=18;break;case 18:return;default:assert(0,"bad label: "+a)}},0,function(a,b,c,d,e){for(a=-1;;)switch(a){case -1:var f,g,h,j;f=b;g=c;h=d;j=e;a=g-HEAP[f]>((j-HEAP[h])/2|0)<<1?1:4;break;case 1:a=(HEAP[g+-2+1]&248)==216?2:4;break;case 2:g+=-2;a=4;break;
case 3:a=HEAP[h];HEAP[a]=HEAP[HEAP[f]]|HEAP[HEAP[f]+1]<<8&65535;HEAP[h]=a+2;HEAP[f]+=2;a=4;break;case 4:a=HEAP[f]==g?6:5;break;case 5:a=HEAP[h]!=j?3:6;break;case 6:return;default:assert(0,"bad label: "+a)}},0,function(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j,k,l,m,n;g=a;h=b;j=c;k=d;e=h==j?1:2;break;case 1:l=-4;e=126;break;case 2:n=j-h;e=(n&1)!=0?3:6;break;case 3:n&=-2;e=n==0?4:5;break;case 4:l=-1;e=126;break;case 5:j=h+n;e=6;break;case 6:e=HEAP[h]==0?7:8;break;case 7:var o=HEAP[g+
76+HEAP[h+1]],f=7;e=9;break;case 8:var p=O(HEAP[h]&255,HEAP[h+1]&255),f=8;e=9;break;case 9:e=f==8?p:o;e=e==2?12:e==4?35:e==5?60:e==6?63:e==7?66:e==9?22:e==10?24:e==11?58:e==12?10:e==13?11:e==19?59:e==20?34:e==21?24:e==22?69:e==23?70:e==24?69:e==25?70:e==26?70:e==27?70:e==29?71:e==30?32:e==31?45:e==32?46:e==35?33:e==36?57:75;break;case 10:l=Cb(12,g,h+2,j,k);e=126;break;case 11:l=Cb(13,g,h+2,j,k);e=126;break;case 12:h+=2;e=h==j?13:14;break;case 13:l=-1;e=126;break;case 14:e=HEAP[h]==0?15:16;break;case 15:var q=
HEAP[g+76+HEAP[h+1]],f=15;e=17;break;case 16:var r=O(HEAP[h]&255,HEAP[h+1]&255),f=16;e=17;break;case 17:e=f==16?r:q;e=e==5?20:e==6?20:e==7?20:e==15?19:e==16?18:e==22?20:e==24?20:e==29?20:21;break;case 18:a:{l=g;e=h+2;for(var s=j,u=k,t=void 0,B=null,t=-1;;)switch(t){case -1:var P,v,T,ea,w;P=l;v=e;T=s;ea=u;t=v==T?1:2;break;case 1:w=-1;t=26;break;case 2:t=HEAP[v]==0?3:4;break;case 3:var H=HEAP[P+76+HEAP[v+1]],B=3,t=5;break;case 4:var x=O(HEAP[v]&255,HEAP[v+1]&255),B=4,t=5;break;case 5:t=B==4?x:H;t=t==
20?7:t==22?8:t==24?8:t==27?6:9;break;case 6:w=ab(P,v+2,T,ea);t=26;break;case 7:HEAP[ea]=v+2;w=33;t=26;break;case 8:v+=2;t=24;break;case 9:HEAP[ea]=v;w=0;t=26;break;case 10:t=HEAP[v]==0?11:12;break;case 11:var za=HEAP[P+76+HEAP[v+1]],B=11,t=13;break;case 12:var U=O(HEAP[v]&255,HEAP[v+1]&255),B=12,t=13;break;case 13:t=B==12?U:za;t=t==9?21:t==10?21:t==21?21:t==22?22:t==24?22:t==30?14:23;break;case 14:t=v+2==T?15:16;break;case 15:w=-1;t=26;break;case 16:t=HEAP[v+2]==0?17:18;break;case 17:var ga=HEAP[P+
76+HEAP[v+2+1]],B=17,t=19;break;case 18:var X=O(HEAP[v+2]&255,HEAP[v+2+1]&255),B=18,t=19;break;case 19:t=B==18?X:ga;t=t==9?20:t==10?20:t==21?20:t==30?20:21;break;case 20:HEAP[ea]=v;w=0;t=26;break;case 21:HEAP[ea]=v;w=16;t=26;break;case 22:v+=2;t=24;break;case 23:HEAP[ea]=v;w=0;t=26;break;case 24:t=v!=T?10:25;break;case 25:w=-1;t=26;break;case 26:l=w;break a;default:assert(0,"bad label: "+t)}l=void 0}e=126;break;case 19:l=va(g,h+2,j,k);e=126;break;case 20:HEAP[k]=h+-2;l=29;e=126;break;case 21:HEAP[k]=
h;l=0;e=126;break;case 22:e=h+2==j?23:24;break;case 23:HEAP[k]=j;l=-15;e=126;break;case 24:h+=2;e=h==j?31:25;break;case 25:e=HEAP[h]==0?26:27;break;case 26:var F=HEAP[g+76+HEAP[h+1]],f=26;e=28;break;case 27:var y=O(HEAP[h]&255,HEAP[h+1]&255),f=27;e=28;break;case 28:e=f==27?y:F;e=e==9?29:e==10?24:e==21?24:30;break;case 29:e=h+2!=j?24:30;break;case 30:HEAP[k]=h;l=15;e=126;break;case 31:HEAP[k]=h;l=15;e=126;break;case 32:l=fb(g,h+2,j,k);e=126;break;case 33:HEAP[k]=h+2;l=38;e=126;break;case 34:HEAP[k]=
h+2;l=25;e=126;break;case 35:h+=2;e=h==j?36:37;break;case 36:l=-26;e=126;break;case 37:e=HEAP[h]==0?38:44;break;case 38:e=HEAP[h+1]==93?39:44;break;case 39:e=h+2==j?40:41;break;case 40:l=-1;e=126;break;case 41:e=HEAP[h+2]==0?42:44;break;case 42:e=HEAP[h+2+1]==62?43:44;break;case 43:HEAP[k]=h+4;l=34;e=126;break;case 44:HEAP[k]=h;l=26;e=126;break;case 45:HEAP[k]=h+2;l=23;e=126;break;case 46:h+=2;e=h==j?47:48;break;case 47:l=-24;e=126;break;case 48:e=HEAP[h]==0?49:50;break;case 49:var N=HEAP[g+76+HEAP[h+
1]],f=49;e=51;break;case 50:var xa=O(HEAP[h]&255,HEAP[h+1]&255),f=50;e=51;break;case 51:e=f==50?xa:N;e=e==9?55:e==10?55:e==11?55:e==15?53:e==21?55:e==32?55:e==33?52:e==34?54:e==35?55:e==36?55:56;break;case 52:HEAP[k]=h+2;l=36;e=126;break;case 53:HEAP[k]=h+2;l=35;e=126;break;case 54:HEAP[k]=h+2;l=37;e=126;break;case 55:HEAP[k]=h;l=24;e=126;break;case 56:HEAP[k]=h;l=0;e=126;break;case 57:HEAP[k]=h+2;l=21;e=126;break;case 58:HEAP[k]=h+2;l=17;e=126;break;case 59:a:{l=g;e=h+2;s=j;u=k;t=void 0;B=null;for(t=
-1;;)switch(t){case -1:var z,S,Q,A,K;z=l;S=e;Q=s;A=u;t=S==Q?1:2;break;case 1:K=-1;t=39;break;case 2:t=HEAP[S]==0?3:4;break;case 3:var Aa=HEAP[z+76+HEAP[S+1]],B=3,t=5;break;case 4:var qb=O(HEAP[S]&255,HEAP[S+1]&255),B=4,t=5;break;case 5:t=B==4?qb:Aa;t=t==5?9:t==6?12:t==7?15:t==22?8:t==24?8:t==29?6:18;break;case 6:t=(1<<(HEAP[S+1]&31)&HEAP[kc+((HEAP[S+1]>>>5)+HEAP[ud+HEAP[S]]*8)*4])==0?7:8;break;case 7:HEAP[A]=S;K=0;t=39;break;case 8:S+=2;t=37;break;case 9:t=Q-S<=1?10:11;break;case 10:K=-2;t=39;break;
case 11:HEAP[A]=S;K=0;t=39;break;case 12:t=Q-S<=2?13:14;break;case 13:K=-2;t=39;break;case 14:HEAP[A]=S;K=0;t=39;break;case 15:t=Q-S<=3?16:17;break;case 16:K=-2;t=39;break;case 17:HEAP[A]=S;K=0;t=39;break;case 18:HEAP[A]=S;K=0;t=39;break;case 19:t=HEAP[S]==0?20:21;break;case 20:var W=HEAP[z+76+HEAP[S+1]],B=20,t=22;break;case 21:var db=O(HEAP[S]&255,HEAP[S+1]&255),B=21,t=22;break;case 22:t=B==21?db:W;t=t==5?26:t==6?29:t==7?32:t==9?35:t==10?35:t==11?35:t==21?35:t==22?25:t==24?25:t==25?25:t==26?25:t==
27?25:t==29?23:t==30?35:t==32?35:t==36?35:36;break;case 23:t=(1<<(HEAP[S+1]&31)&HEAP[kc+((HEAP[S+1]>>>5)+HEAP[Jd+HEAP[S]]*8)*4])==0?24:25;break;case 24:HEAP[A]=S;K=0;t=39;break;case 25:S+=2;t=37;break;case 26:t=Q-S<=1?27:28;break;case 27:K=-2;t=39;break;case 28:HEAP[A]=S;K=0;t=39;break;case 29:t=Q-S<=2?30:31;break;case 30:K=-2;t=39;break;case 31:HEAP[A]=S;K=0;t=39;break;case 32:t=Q-S<=3?33:34;break;case 33:K=-2;t=39;break;case 34:HEAP[A]=S;K=0;t=39;break;case 35:HEAP[A]=S;K=20;t=39;break;case 36:HEAP[A]=
S;K=0;t=39;break;case 37:t=S!=Q?19:38;break;case 38:K=-20;t=39;break;case 39:l=K;break a;default:assert(0,"bad label: "+t)}l=void 0}e=126;break;case 60:e=j-h<=1?61:62;break;case 61:l=-2;e=126;break;case 62:HEAP[k]=h;l=0;e=126;break;case 63:e=j-h<=2?64:65;break;case 64:l=-2;e=126;break;case 65:HEAP[k]=h;l=0;e=126;break;case 66:e=j-h<=3?67:68;break;case 67:l=-2;e=126;break;case 68:HEAP[k]=h;l=0;e=126;break;case 69:m=18;h+=2;e=124;break;case 70:m=19;h+=2;e=124;break;case 71:var oa=h;e=(1<<(HEAP[h+1]&
31)&HEAP[kc+((HEAP[h+1]>>>5)+HEAP[ud+HEAP[h]]*8)*4])!=0?72:73;break;case 72:h=oa+2;m=18;e=124;break;case 73:e=(1<<(HEAP[h+1]&31)&HEAP[kc+((HEAP[h+1]>>>5)+HEAP[Jd+HEAP[oa]]*8)*4])!=0?74:75;break;case 74:h+=2;m=19;e=124;break;case 75:HEAP[k]=h;l=0;e=126;break;case 76:e=HEAP[h]==0?77:78;break;case 77:var C=HEAP[g+76+HEAP[h+1]],f=77;e=79;break;case 78:var I=O(HEAP[h]&255,HEAP[h+1]&255),f=78;e=79;break;case 79:e=f==78?I:C;e=e==5?83:e==6?86:e==7?89:e==9?92:e==10?92:e==11?92:e==15?120:e==20?92:e==21?92:
e==22?82:e==23?93:e==24?82:e==25?82:e==26?82:e==27?82:e==29?80:e==30?92:e==32?92:e==33?117:e==34?114:e==35?92:e==36?92:123;break;case 80:e=(1<<(HEAP[h+1]&31)&HEAP[kc+((HEAP[h+1]>>>5)+HEAP[Jd+HEAP[h]]*8)*4])==0?81:82;break;case 81:HEAP[k]=h;l=0;e=126;break;case 82:h+=2;e=124;break;case 83:e=j-h<=1?84:85;break;case 84:l=-2;e=126;break;case 85:HEAP[k]=h;l=0;e=126;break;case 86:e=j-h<=2?87:88;break;case 87:l=-2;e=126;break;case 88:HEAP[k]=h;l=0;e=126;break;case 89:e=j-h<=3?90:91;break;case 90:l=-2;e=
126;break;case 91:HEAP[k]=h;l=0;e=126;break;case 92:HEAP[k]=h;l=m;e=126;break;case 93:h+=2;e=m;e=e==18?94:e==41?113:124;break;case 94:e=h==j?95:96;break;case 95:l=-1;e=126;break;case 96:m=41;e=HEAP[h]==0?97:98;break;case 97:var na=HEAP[g+76+HEAP[h+1]],f=97;e=99;break;case 98:var Ae=O(HEAP[h]&255,HEAP[h+1]&255),f=98;e=99;break;case 99:e=f==98?Ae:na;e=e==5?103:e==6?106:e==7?109:e==22?102:e==24?102:e==25?102:e==26?102:e==27?102:e==29?100:112;break;case 100:e=(1<<(HEAP[h+1]&31)&HEAP[kc+((HEAP[h+1]>>>
5)+HEAP[Jd+HEAP[h]]*8)*4])==0?101:102;break;case 101:HEAP[k]=h;l=0;e=126;break;case 102:h+=2;e=124;break;case 103:e=j-h<=1?104:105;break;case 104:l=-2;e=126;break;case 105:HEAP[k]=h;l=0;e=126;break;case 106:e=j-h<=2?107:108;break;case 107:l=-2;e=126;break;case 108:HEAP[k]=h;l=0;e=126;break;case 109:e=j-h<=3?110:111;break;case 110:l=-2;e=126;break;case 111:HEAP[k]=h;l=0;e=126;break;case 112:m=19;e=124;break;case 113:m=19;e=124;break;case 114:e=m==19?115:116;break;case 115:HEAP[k]=h;l=0;e=126;break;
case 116:HEAP[k]=h+2;l=32;e=126;break;case 117:e=m==19?118:119;break;case 118:HEAP[k]=h;l=0;e=126;break;case 119:HEAP[k]=h+2;l=31;e=126;break;case 120:e=m==19?121:122;break;case 121:HEAP[k]=h;l=0;e=126;break;case 122:HEAP[k]=h+2;l=30;e=126;break;case 123:HEAP[k]=h;l=0;e=126;break;case 124:e=h!=j?76:125;break;case 125:l=0-m;e=126;break;case 126:return a=l;default:assert(0,"bad label: "+e)}},0,function(a,b,c,e){var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k,l,m;g=a;h=b;j=c;k=e;d=h==j?1:2;break;
case 1:l=-4;d=68;break;case 2:m=j-h;d=(m&1)!=0?3:6;break;case 3:m&=-2;d=m==0?4:5;break;case 4:l=-1;d=68;break;case 5:j=h+m;d=6;break;case 6:d=HEAP[h]==0?7:8;break;case 7:var n=HEAP[g+76+HEAP[h+1]],f=7;d=9;break;case 8:var o=O(HEAP[h]&255,HEAP[h+1]&255),f=8;d=9;break;case 9:d=f==8?o:n;d=d==0?40:d==1?40:d==2?10:d==3?11:d==4?21:d==5?31:d==6?34:d==7?37:d==8?40:d==9?12:d==10?20:41;break;case 10:a:{l=g;d=h+2;for(var p=j,q=k,r=void 0,s=null,r=-1;;)switch(r){case -1:var u,t,B,P,v,T;u=l;t=d;B=p;P=q;r=t==B?
1:2;break;case 1:v=-1;r=98;break;case 2:r=HEAP[t]==0?3:4;break;case 3:var ea=HEAP[u+76+HEAP[t+1]],s=3,r=5;break;case 4:var w=O(HEAP[t]&255,HEAP[t+1]&255),s=4,r=5;break;case 5:r=s==4?w:ea;r=r==5?9:r==6?12:r==7?15:r==15?27:r==16?18:r==17?28:r==22?8:r==24?8:r==29?6:29;break;case 6:r=(1<<(HEAP[t+1]&31)&HEAP[kc+((HEAP[t+1]>>>5)+HEAP[ud+HEAP[t]]*8)*4])==0?7:8;break;case 7:HEAP[P]=t;v=0;r=98;break;case 8:t+=2;T=0;r=96;break;case 9:r=B-t<=1?10:11;break;case 10:v=-2;r=98;break;case 11:HEAP[P]=t;v=0;r=98;break;
case 12:r=B-t<=2?13:14;break;case 13:v=-2;r=98;break;case 14:HEAP[P]=t;v=0;r=98;break;case 15:r=B-t<=3?16:17;break;case 16:v=-2;r=98;break;case 17:HEAP[P]=t;v=0;r=98;break;case 18:t+=2;r=t==B?19:20;break;case 19:v=-1;r=98;break;case 20:r=HEAP[t]==0?21:22;break;case 21:var H=HEAP[u+76+HEAP[t+1]],s=21,r=23;break;case 22:var x=O(HEAP[t]&255,HEAP[t+1]&255),s=22,r=23;break;case 23:r=s==22?x:H;r=r==20?25:r==27?24:26;break;case 24:v=ab(u,t+2,B,P);r=98;break;case 25:b:{v=t+2;for(var r=B,za=P,ga=void 0,X=
null,ga=-1;;)switch(ga){case -1:var F,y,N,xa;F=v;ga=r;y=za;ga=ga-F<=11?1:2;break;case 1:N=-1;ga=9;break;case 2:xa=0;X=2;ga=7;break;case 3:ga=HEAP[F]!=0?5:4;break;case 4:ga=HEAP[F+1]!=HEAP[ig+xa]?5:6;break;case 5:HEAP[y]=F;N=0;ga=9;break;case 6:var z=xa+1;xa=z;F+=2;X=6;ga=7;break;case 7:ga=(X==6?z:0)<=5?3:8;break;case 8:HEAP[y]=F;N=8;ga=9;break;case 9:v=N;break b;default:assert(0,"bad label: "+ga)}v=void 0}r=98;break;case 26:HEAP[P]=t;v=0;r=98;break;case 27:v=va(u,t+2,B,P);r=98;break;case 28:b:{v=
u;for(var r=t+2,za=B,X=P,S=void 0,ga=null,S=-1;;)switch(S){case -1:var Q,A,K,Aa,qb;Q=v;A=r;K=za;Aa=X;S=A==K?1:2;break;case 1:qb=-1;S=50;break;case 2:S=HEAP[A]==0?3:4;break;case 3:var W=HEAP[Q+76+HEAP[A+1]],ga=3,S=5;break;case 4:var db=O(HEAP[A]&255,HEAP[A+1]&255),ga=4,S=5;break;case 5:S=ga==4?db:W;S=S==5?9:S==6?12:S==7?15:S==22?8:S==24?8:S==29?6:18;break;case 6:S=(1<<(HEAP[A+1]&31)&HEAP[kc+((HEAP[A+1]>>>5)+HEAP[ud+HEAP[A]]*8)*4])==0?7:8;break;case 7:HEAP[Aa]=A;qb=0;S=50;break;case 8:A+=2;S=48;break;
case 9:S=K-A<=1?10:11;break;case 10:qb=-2;S=50;break;case 11:HEAP[Aa]=A;qb=0;S=50;break;case 12:S=K-A<=2?13:14;break;case 13:qb=-2;S=50;break;case 14:HEAP[Aa]=A;qb=0;S=50;break;case 15:S=K-A<=3?16:17;break;case 16:qb=-2;S=50;break;case 17:HEAP[Aa]=A;qb=0;S=50;break;case 18:HEAP[Aa]=A;qb=0;S=50;break;case 19:S=HEAP[A]==0?20:21;break;case 20:var oa=HEAP[Q+76+HEAP[A+1]],ga=20,S=22;break;case 21:var C=O(HEAP[A]&255,HEAP[A+1]&255),ga=21,S=22;break;case 22:S=ga==21?C:oa;S=S==5?26:S==6?29:S==7?32:S==9?35:
S==10?35:S==11?46:S==21?35:S==22?25:S==23?45:S==24?25:S==25?25:S==26?25:S==27?25:S==29?23:47;break;case 23:S=(1<<(HEAP[A+1]&31)&HEAP[kc+((HEAP[A+1]>>>5)+HEAP[Jd+HEAP[A]]*8)*4])==0?24:25;break;case 24:HEAP[Aa]=A;qb=0;S=50;break;case 25:A+=2;S=48;break;case 26:S=K-A<=1?27:28;break;case 27:qb=-2;S=50;break;case 28:HEAP[Aa]=A;qb=0;S=50;break;case 29:S=K-A<=2?30:31;break;case 30:qb=-2;S=50;break;case 31:HEAP[Aa]=A;qb=0;S=50;break;case 32:S=K-A<=3?33:34;break;case 33:qb=-2;S=50;break;case 34:HEAP[Aa]=A;
qb=0;S=50;break;case 35:A+=2;S=43;break;case 36:S=HEAP[A]==0?37:38;break;case 37:var I=HEAP[Q+76+HEAP[A+1]],ga=37,S=39;break;case 38:var na=O(HEAP[A]&255,HEAP[A+1]&255),ga=38,S=39;break;case 39:S=ga==38?na:I;S=S==9?40:S==10?40:S==11?41:S==21?40:42;break;case 40:A+=2;S=43;break;case 41:HEAP[Aa]=A+2;qb=5;S=50;break;case 42:HEAP[Aa]=A;qb=0;S=50;break;case 43:S=A!=K?36:44;break;case 44:qb=-1;S=50;break;case 45:A+=2;S=48;break;case 46:HEAP[Aa]=A+2;qb=5;S=50;break;case 47:HEAP[Aa]=A;qb=0;S=50;break;case 48:S=
A!=K?19:49;break;case 49:qb=-1;S=50;break;case 50:v=qb;break b;default:assert(0,"bad label: "+S)}v=void 0}r=98;break;case 29:HEAP[P]=t;v=0;r=98;break;case 30:r=HEAP[t]==0?31:32;break;case 31:var Oa=HEAP[u+76+HEAP[t+1]],s=31,r=33;break;case 32:var Ae=O(HEAP[t]&255,HEAP[t+1]&255),s=32,r=33;break;case 33:r=s==32?Ae:Oa;r=r==5?37:r==6?40:r==7?43:r==9?67:r==10?67:r==11?88:r==17?89:r==21?67:r==22?36:r==23?46:r==24?36:r==25?36:r==26?36:r==27?36:r==29?34:95;break;case 34:r=(1<<(HEAP[t+1]&31)&HEAP[kc+((HEAP[t+
1]>>>5)+HEAP[Jd+HEAP[t]]*8)*4])==0?35:36;break;case 35:HEAP[P]=t;v=0;r=98;break;case 36:t+=2;r=96;break;case 37:r=B-t<=1?38:39;break;case 38:v=-2;r=98;break;case 39:HEAP[P]=t;v=0;r=98;break;case 40:r=B-t<=2?41:42;break;case 41:v=-2;r=98;break;case 42:HEAP[P]=t;v=0;r=98;break;case 43:r=B-t<=3?44:45;break;case 44:v=-2;r=98;break;case 45:HEAP[P]=t;v=0;r=98;break;case 46:r=T!=0?47:48;break;case 47:HEAP[P]=t;v=0;r=98;break;case 48:T=1;t+=2;r=t==B?49:50;break;case 49:v=-1;r=98;break;case 50:r=HEAP[t]==
0?51:52;break;case 51:var Qd=HEAP[u+76+HEAP[t+1]],s=51,r=53;break;case 52:var Sa=O(HEAP[t]&255,HEAP[t+1]&255),s=52,r=53;break;case 53:r=s==52?Sa:Qd;r=r==5?57:r==6?60:r==7?63:r==22?56:r==24?56:r==29?54:66;break;case 54:r=(1<<(HEAP[t+1]&31)&HEAP[kc+((HEAP[t+1]>>>5)+HEAP[ud+HEAP[t]]*8)*4])==0?55:56;break;case 55:HEAP[P]=t;v=0;r=98;break;case 56:t+=2;r=96;break;case 57:r=B-t<=1?58:59;break;case 58:v=-2;r=98;break;case 59:HEAP[P]=t;v=0;r=98;break;case 60:r=B-t<=2?61:62;break;case 61:v=-2;r=98;break;case 62:HEAP[P]=
t;v=0;r=98;break;case 63:r=B-t<=3?64:65;break;case 64:v=-2;r=98;break;case 65:HEAP[P]=t;v=0;r=98;break;case 66:HEAP[P]=t;v=0;r=98;break;case 67:t+=2;r=86;break;case 68:r=HEAP[t]==0?69:70;break;case 69:var D=HEAP[u+76+HEAP[t+1]],s=69,r=71;break;case 70:var E=O(HEAP[t]&255,HEAP[t+1]&255),s=70,r=71;break;case 71:r=s==70?E:D;r=r==5?75:r==6?78:r==7?81:r==9?84:r==10?84:r==11?88:r==17?89:r==21?84:r==22?74:r==24?74:r==29?72:85;break;case 72:r=(1<<(HEAP[t+1]&31)&HEAP[kc+((HEAP[t+1]>>>5)+HEAP[ud+HEAP[t]]*8)*
4])==0?73:74;break;case 73:HEAP[P]=t;v=0;r=98;break;case 74:t+=2;b:{r=u;za=t;X=B;ga=P;v=STACKTOP;STACKTOP+=4;_memset(v,0,4);for(var $=void 0,S=null,$=-1;;)switch($){case -1:var sa,ca=v,J,cb,ba,G,Ma,Bb,Bc,Pb,Y,Fb;sa=r;HEAP[ca]=za;J=X;cb=ga;Bb=0;$=113;break;case 1:$=HEAP[HEAP[ca]]==0?2:3;break;case 2:var pa=HEAP[sa+76+HEAP[HEAP[ca]+1]],S=2,$=4;break;case 3:var Eb=O(HEAP[HEAP[ca]]&255,HEAP[HEAP[ca]+1]&255),S=3,$=4;break;case 4:$=S==3?Eb:pa;$=$==5?8:$==6?11:$==7?14:$==9?38:$==10?38:$==14?46:$==21?38:
$==22?7:$==23?17:$==24?7:$==25?7:$==26?7:$==27?7:$==29?5:112;break;case 5:$=(1<<(HEAP[HEAP[ca]+1]&31)&HEAP[kc+((HEAP[HEAP[ca]+1]>>>5)+HEAP[Jd+HEAP[HEAP[ca]]]*8)*4])==0?6:7;break;case 6:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 7:HEAP[ca]+=2;$=113;break;case 8:$=J-HEAP[ca]<=1?9:10;break;case 9:Ma=-2;$=115;break;case 10:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 11:$=J-HEAP[ca]<=2?12:13;break;case 12:Ma=-2;$=115;break;case 13:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 14:$=J-HEAP[ca]<=3?15:16;break;case 15:Ma=
-2;$=115;break;case 16:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 17:$=Bb!=0?18:19;break;case 18:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 19:Bb=1;HEAP[ca]+=2;$=HEAP[ca]==J?20:21;break;case 20:Ma=-1;$=115;break;case 21:$=HEAP[HEAP[ca]]==0?22:23;break;case 22:var kb=HEAP[sa+76+HEAP[HEAP[ca]+1]],S=22,$=24;break;case 23:var zb=O(HEAP[HEAP[ca]]&255,HEAP[HEAP[ca]+1]&255),S=23,$=24;break;case 24:$=S==23?zb:kb;$=$==5?28:$==6?31:$==7?34:$==22?27:$==24?27:$==29?25:37;break;case 25:$=(1<<(HEAP[HEAP[ca]+1]&31)&HEAP[kc+
((HEAP[HEAP[ca]+1]>>>5)+HEAP[ud+HEAP[HEAP[ca]]]*8)*4])==0?26:27;break;case 26:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 27:HEAP[ca]+=2;$=113;break;case 28:$=J-HEAP[ca]<=1?29:30;break;case 29:Ma=-2;$=115;break;case 30:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 31:$=J-HEAP[ca]<=2?32:33;break;case 32:Ma=-2;$=115;break;case 33:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 34:$=J-HEAP[ca]<=3?35:36;break;case 35:Ma=-2;$=115;break;case 36:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 37:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;
case 38:HEAP[ca]+=2;$=HEAP[ca]==J?39:40;break;case 39:Ma=-1;$=115;break;case 40:$=HEAP[HEAP[ca]]==0?41:42;break;case 41:var xb=HEAP[sa+76+HEAP[HEAP[ca]+1]],S=41,$=43;break;case 42:var ec=O(HEAP[HEAP[ca]]&255,HEAP[HEAP[ca]+1]&255),S=42,$=43;break;case 43:Bc=$=S==42?ec:xb;$=$==14?46:44;break;case 44:$=Bc;$=$==9?38:$==10?38:$==21?38:45;break;case 45:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 46:Bb=0;$=47;break;case 47:HEAP[ca]+=2;$=HEAP[ca]==J?48:49;break;case 48:Ma=-1;$=115;break;case 49:$=HEAP[HEAP[ca]]==
0?50:51;break;case 50:G=HEAP[sa+76+HEAP[HEAP[ca]+1]];$=52;break;case 51:G=O(HEAP[HEAP[ca]]&255,HEAP[HEAP[ca]+1]&255);$=52;break;case 52:Pb=G;$=Pb==12|Pb==13?55:53;break;case 53:$=Pb;$=$==9?47:$==10?47:$==21?47:54;break;case 54:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 55:HEAP[ca]+=2;$=56;break;case 56:$=HEAP[ca]==J?57:58;break;case 57:Ma=-1;$=115;break;case 58:$=HEAP[HEAP[ca]]==0?59:60;break;case 59:ba=HEAP[sa+76+HEAP[HEAP[ca]+1]];$=61;break;case 60:ba=O(HEAP[HEAP[ca]]&255,HEAP[HEAP[ca]+1]&255);$=61;
break;case 61:Y=ba;$=Y==Pb?79:62;break;case 62:$=Y;$=$==0?72:$==1?72:$==2?77:$==3?73:$==5?63:$==6?66:$==7?69:$==8?72:78;break;case 63:$=J-HEAP[ca]<=1?64:65;break;case 64:Ma=-2;$=115;break;case 65:HEAP[ca]+=2;$=56;break;case 66:$=J-HEAP[ca]<=2?67:68;break;case 67:Ma=-2;$=115;break;case 68:HEAP[ca]+=3;$=56;break;case 69:$=J-HEAP[ca]<=3?70:71;break;case 70:Ma=-2;$=115;break;case 71:HEAP[ca]+=4;$=56;break;case 72:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 73:Fb=U(sa,HEAP[ca]+2,J,ca);$=Fb<=0?74:56;break;
case 74:$=Fb==0?75:76;break;case 75:HEAP[cb]=HEAP[ca];$=76;break;case 76:Ma=Fb;$=115;break;case 77:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 78:HEAP[ca]+=2;$=56;break;case 79:HEAP[ca]+=2;$=HEAP[ca]==J?80:81;break;case 80:Ma=-1;$=115;break;case 81:$=HEAP[HEAP[ca]]==0?82:83;break;case 82:var Ud=HEAP[sa+76+HEAP[HEAP[ca]+1]],S=82,$=84;break;case 83:var Ca=O(HEAP[HEAP[ca]]&255,HEAP[HEAP[ca]+1]&255),S=83,$=84;break;case 84:$=S==83?Ca:Ud;$=$==9?86:$==10?86:$==11?104:$==17?105:$==21?86:85;break;case 85:HEAP[cb]=
HEAP[ca];Ma=0;$=115;break;case 86:HEAP[ca]+=2;$=HEAP[ca]==J?87:88;break;case 87:Ma=-1;$=115;break;case 88:$=HEAP[HEAP[ca]]==0?89:90;break;case 89:var Sc=HEAP[sa+76+HEAP[HEAP[ca]+1]],S=89,$=91;break;case 90:var gb=O(HEAP[HEAP[ca]]&255,HEAP[HEAP[ca]+1]&255),S=90,$=91;break;case 91:$=S==90?gb:Sc;$=$==5?95:$==6?98:$==7?101:$==9?86:$==10?86:$==11?104:$==17?105:$==21?86:$==22?94:$==24?94:$==29?92:111;break;case 92:$=(1<<(HEAP[HEAP[ca]+1]&31)&HEAP[kc+((HEAP[HEAP[ca]+1]>>>5)+HEAP[ud+HEAP[HEAP[ca]]]*8)*4])==
0?93:94;break;case 93:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 94:HEAP[ca]+=2;$=113;break;case 95:$=J-HEAP[ca]<=1?96:97;break;case 96:Ma=-2;$=115;break;case 97:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 98:$=J-HEAP[ca]<=2?99:100;break;case 99:Ma=-2;$=115;break;case 100:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 101:$=J-HEAP[ca]<=3?102:103;break;case 102:Ma=-2;$=115;break;case 103:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 104:HEAP[cb]=HEAP[ca]+2;Ma=1;$=115;break;case 105:HEAP[ca]+=2;$=HEAP[ca]==J?106:107;break;
case 106:Ma=-1;$=115;break;case 107:$=HEAP[HEAP[ca]]!=0?109:108;break;case 108:$=HEAP[HEAP[ca]+1]!=62?109:110;break;case 109:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 110:HEAP[cb]=HEAP[ca]+2;Ma=3;$=115;break;case 111:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 112:HEAP[cb]=HEAP[ca];Ma=0;$=115;break;case 113:$=HEAP[ca]!=J?1:114;break;case 114:Ma=-1;$=115;break;case 115:r=Ma;STACKTOP=v;v=r;break b;default:assert(0,"bad label: "+$)}v=void 0}r=98;break;case 75:r=B-t<=1?76:77;break;case 76:v=-2;r=98;break;case 77:HEAP[P]=
t;v=0;r=98;break;case 78:r=B-t<=2?79:80;break;case 79:v=-2;r=98;break;case 80:HEAP[P]=t;v=0;r=98;break;case 81:r=B-t<=3?82:83;break;case 82:v=-2;r=98;break;case 83:HEAP[P]=t;v=0;r=98;break;case 84:t+=2;r=86;break;case 85:HEAP[P]=t;v=0;r=98;break;case 86:r=t!=B?68:87;break;case 87:v=-1;r=98;break;case 88:HEAP[P]=t+2;v=2;r=98;break;case 89:t+=2;r=t==B?90:91;break;case 90:v=-1;r=98;break;case 91:r=HEAP[t]!=0?93:92;break;case 92:r=HEAP[t+1]!=62?93:94;break;case 93:HEAP[P]=t;v=0;r=98;break;case 94:HEAP[P]=
t+2;v=4;r=98;break;case 95:HEAP[P]=t;v=0;r=98;break;case 96:r=t!=B?30:97;break;case 97:v=-1;r=98;break;case 98:l=v;break a;default:assert(0,"bad label: "+r)}l=void 0}d=68;break;case 11:l=U(g,h+2,j,k);d=68;break;case 12:h+=2;d=h==j?13:14;break;case 13:l=-3;d=68;break;case 14:d=HEAP[h]==0?15:16;break;case 15:var ib=HEAP[g+76+HEAP[h+1]]==10,f=15;d=17;break;case 16:var rb=O(HEAP[h]&255,HEAP[h+1]&255)==10,f=16;d=17;break;case 17:d=(f==16?rb:ib)!=0?18:19;break;case 18:h+=2;d=19;break;case 19:HEAP[k]=h;
l=7;d=68;break;case 20:HEAP[k]=h+2;l=7;d=68;break;case 21:h+=2;d=h==j?22:23;break;case 22:l=-5;d=68;break;case 23:d=HEAP[h]!=0?66:24;break;case 24:d=HEAP[h+1]!=93?66:25;break;case 25:h+=2;d=h==j?26:27;break;case 26:l=-5;d=68;break;case 27:d=HEAP[h]!=0?29:28;break;case 28:d=HEAP[h+1]!=62?29:30;break;case 29:h+=-2;d=66;break;case 30:HEAP[k]=h;l=0;d=68;break;case 31:d=j-h<=1?32:33;break;case 32:l=-2;d=68;break;case 33:h+=2;d=66;break;case 34:d=j-h<=2?35:36;break;case 35:l=-2;d=68;break;case 36:h+=3;
d=66;break;case 37:d=j-h<=3?38:39;break;case 38:l=-2;d=68;break;case 39:h+=4;d=66;break;case 40:HEAP[k]=h;l=0;d=68;break;case 41:h+=2;d=66;break;case 42:d=HEAP[h]==0?43:44;break;case 43:var Z=HEAP[g+76+HEAP[h+1]],f=43;d=45;break;case 44:var M=O(HEAP[h]&255,HEAP[h+1]&255),f=44;d=45;break;case 45:d=f==44?M:Z;d=d==0?64:d==1?64:d==2?64:d==3?64:d==4?55:d==5?46:d==6?49:d==7?52:d==8?64:d==9?64:d==10?64:65;break;case 46:d=j-h<=1?47:48;break;case 47:HEAP[k]=h;l=6;d=68;break;case 48:h+=2;d=66;break;case 49:d=
j-h<=2?50:51;break;case 50:HEAP[k]=h;l=6;d=68;break;case 51:h+=3;d=66;break;case 52:d=j-h<=3?53:54;break;case 53:HEAP[k]=h;l=6;d=68;break;case 54:h+=4;d=66;break;case 55:d=h+2!=j?56:64;break;case 56:d=HEAP[h+2]!=0?58:57;break;case 57:d=HEAP[h+2+1]!=93?58:59;break;case 58:h+=2;d=66;break;case 59:d=h+4!=j?60:64;break;case 60:d=HEAP[h+4]!=0?62:61;break;case 61:d=HEAP[h+4+1]!=62?62:63;break;case 62:h+=2;d=66;break;case 63:HEAP[k]=h+4;l=0;d=68;break;case 64:HEAP[k]=h;l=6;d=68;break;case 65:h+=2;d=66;break;
case 66:d=h!=j?42:67;break;case 67:HEAP[k]=h;l=6;d=68;break;case 68:return a=l;default:assert(0,"bad label: "+d)}},0,function(a,b,c,e){var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k,l,m;g=a;h=b;j=c;k=e;d=h==j?1:2;break;case 1:l=-4;d=57;break;case 2:m=j-h;d=(m&1)!=0?3:6;break;case 3:m&=-2;d=m==0?4:5;break;case 4:l=-1;d=57;break;case 5:j=h+m;d=6;break;case 6:d=HEAP[h]==0?7:8;break;case 7:var n=HEAP[g+76+HEAP[h+1]],f=7;d=9;break;case 8:var o=O(HEAP[h]&255,HEAP[h+1]&255),f=8;d=9;break;case 9:d=
f==8?o:n;d=d==0?38:d==1?38:d==4?10:d==5?29:d==6?32:d==7?35:d==8?38:d==9?20:d==10?28:39;break;case 10:h+=2;d=h==j?11:12;break;case 11:l=-1;d=57;break;case 12:d=HEAP[h]!=0?55:13;break;case 13:d=HEAP[h+1]!=93?55:14;break;case 14:h+=2;d=h==j?15:16;break;case 15:l=-1;d=57;break;case 16:d=HEAP[h]!=0?18:17;break;case 17:d=HEAP[h+1]!=62?18:19;break;case 18:h+=-2;d=55;break;case 19:HEAP[k]=h+2;l=40;d=57;break;case 20:h+=2;d=h==j?21:22;break;case 21:l=-1;d=57;break;case 22:d=HEAP[h]==0?23:24;break;case 23:var p=
HEAP[g+76+HEAP[h+1]]==10,f=23;d=25;break;case 24:var q=O(HEAP[h]&255,HEAP[h+1]&255)==10,f=24;d=25;break;case 25:d=(f==24?q:p)!=0?26:27;break;case 26:h+=2;d=27;break;case 27:HEAP[k]=h;l=7;d=57;break;case 28:HEAP[k]=h+2;l=7;d=57;break;case 29:d=j-h<=1?30:31;break;case 30:l=-2;d=57;break;case 31:h+=2;d=55;break;case 32:d=j-h<=2?33:34;break;case 33:l=-2;d=57;break;case 34:h+=3;d=55;break;case 35:d=j-h<=3?36:37;break;case 36:l=-2;d=57;break;case 37:h+=4;d=55;break;case 38:HEAP[k]=h;l=0;d=57;break;case 39:h+=
2;d=55;break;case 40:d=HEAP[h]==0?41:42;break;case 41:var r=HEAP[g+76+HEAP[h+1]],f=41;d=43;break;case 42:var s=O(HEAP[h]&255,HEAP[h+1]&255),f=42;d=43;break;case 43:d=f==42?s:r;d=d==0?53:d==1?53:d==4?53:d==5?44:d==6?47:d==7?50:d==8?53:d==9?53:d==10?53:54;break;case 44:d=j-h<=1?45:46;break;case 45:HEAP[k]=h;l=6;d=57;break;case 46:h+=2;d=55;break;case 47:d=j-h<=2?48:49;break;case 48:HEAP[k]=h;l=6;d=57;break;case 49:h+=3;d=55;break;case 50:d=j-h<=3?51:52;break;case 51:HEAP[k]=h;l=6;d=57;break;case 52:h+=
4;d=55;break;case 53:HEAP[k]=h;l=6;d=57;break;case 54:h+=2;d=55;break;case 55:d=h!=j?40:56;break;case 56:HEAP[k]=h;l=6;d=57;break;case 57:return a=l;default:assert(0,"bad label: "+d)}},0,function(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j,k,l,m,n;g=a;h=b;j=c;k=d;m=0;n=j-h;e=(n&1)!=0?1:37;break;case 1:n&=-2;j=h+n;e=37;break;case 2:e=HEAP[h]==0?3:4;break;case 3:var o=HEAP[g+76+HEAP[h+1]],f=3;e=5;break;case 4:var p=O(HEAP[h]&255,HEAP[h+1]&255),f=4;e=5;break;case 5:e=f==4?p:o;e=e==0?
15:e==1?15:e==2?16:e==4?25:e==5?6:e==6?9:e==7?12:e==8?15:36;break;case 6:e=j-h<=1?7:8;break;case 7:l=-2;e=39;break;case 8:h+=2;e=37;break;case 9:e=j-h<=2?10:11;break;case 10:l=-2;e=39;break;case 11:h+=3;e=37;break;case 12:e=j-h<=3?13:14;break;case 13:l=-2;e=39;break;case 14:h+=4;e=37;break;case 15:HEAP[k]=h;l=0;e=39;break;case 16:h+=2;e=h==j?17:18;break;case 17:l=-1;e=39;break;case 18:e=HEAP[h]==0?19:37;break;case 19:e=HEAP[h+1]==33?20:37;break;case 20:h+=2;e=h==j?21:22;break;case 21:l=-1;e=39;break;
case 22:e=HEAP[h]==0?23:37;break;case 23:e=HEAP[h+1]==91?24:37;break;case 24:m+=1;h+=2;e=37;break;case 25:h+=2;e=h==j?26:27;break;case 26:l=-1;e=39;break;case 27:e=HEAP[h]==0?28:37;break;case 28:e=HEAP[h+1]==93?29:37;break;case 29:h+=2;e=h==j?30:31;break;case 30:l=-1;e=39;break;case 31:e=HEAP[h]==0?32:37;break;case 32:e=HEAP[h+1]==62?33:37;break;case 33:h+=2;e=m==0?34:35;break;case 34:HEAP[k]=h;l=42;e=39;break;case 35:m-=1;e=37;break;case 36:h+=2;e=37;break;case 37:e=h!=j?2:38;break;case 38:l=-1;
e=39;break;case 39:return a=l;default:assert(0,"bad label: "+e)}},0,function(a,b,c,e){var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k,l,m;g=a;h=b;j=c;k=e;d=h==j?1:2;break;case 1:l=-4;d=33;break;case 2:m=h;d=31;break;case 3:d=HEAP[h]==0?4:5;break;case 4:var n=HEAP[g+76+HEAP[h+1]],f=4;d=6;break;case 5:var o=O(HEAP[h]&255,HEAP[h+1]&255),f=5;d=6;break;case 6:d=f==5?o:n;d=d==2?13:d==3?10:d==5?7:d==6?8:d==7?9:d==9?17:d==10?14:d==21?27:30;break;case 7:h+=2;d=31;break;case 8:h+=3;d=31;break;case 9:h+=
4;d=31;break;case 10:d=h==m?11:12;break;case 11:l=U(g,h+2,j,k);d=33;break;case 12:HEAP[k]=h;l=6;d=33;break;case 13:HEAP[k]=h;l=0;d=33;break;case 14:d=h==m?15:16;break;case 15:HEAP[k]=h+2;l=7;d=33;break;case 16:HEAP[k]=h;l=6;d=33;break;case 17:d=h==m?18:26;break;case 18:h+=2;d=h==j?19:20;break;case 19:l=-3;d=33;break;case 20:d=HEAP[h]==0?21:22;break;case 21:var p=HEAP[g+76+HEAP[h+1]]==10,f=21;d=23;break;case 22:var q=O(HEAP[h]&255,HEAP[h+1]&255)==10,f=22;d=23;break;case 23:d=(f==22?q:p)!=0?24:25;break;
case 24:h+=2;d=25;break;case 25:HEAP[k]=h;l=7;d=33;break;case 26:HEAP[k]=h;l=6;d=33;break;case 27:d=h==m?28:29;break;case 28:HEAP[k]=h+2;l=39;d=33;break;case 29:HEAP[k]=h;l=6;d=33;break;case 30:h+=2;d=31;break;case 31:d=h!=j?3:32;break;case 32:HEAP[k]=h;l=6;d=33;break;case 33:return a=l;default:assert(0,"bad label: "+d)}},0,function(a,b,c,e){var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k,l,m,n,o;g=a;h=b;j=c;k=e;d=h==j?1:2;break;case 1:m=-4;d=35;break;case 2:n=h;d=33;break;case 3:d=HEAP[h]==
0?4:5;break;case 4:var p=HEAP[g+76+HEAP[h+1]],f=4;d=6;break;case 5:var q=O(HEAP[h]&255,HEAP[h+1]&255),f=5;d=6;break;case 6:d=f==5?q:p;d=d==3?10:d==5?7:d==6?8:d==7?9:d==9?22:d==10?19:d==30?13:32;break;case 7:h+=2;d=33;break;case 8:h+=3;d=33;break;case 9:h+=4;d=33;break;case 10:d=h==n?11:12;break;case 11:m=U(g,h+2,j,k);d=35;break;case 12:HEAP[k]=h;m=6;d=35;break;case 13:d=h==n?14:18;break;case 14:o=fb(g,h+2,j,k);d=o!=22?15:16;break;case 15:l=o;d=17;break;case 16:l=0;d=17;break;case 17:m=l;d=35;break;
case 18:HEAP[k]=h;m=6;d=35;break;case 19:d=h==n?20:21;break;case 20:HEAP[k]=h+2;m=7;d=35;break;case 21:HEAP[k]=h;m=6;d=35;break;case 22:d=h==n?23:31;break;case 23:h+=2;d=h==j?24:25;break;case 24:m=-3;d=35;break;case 25:d=HEAP[h]==0?26:27;break;case 26:var r=HEAP[g+76+HEAP[h+1]]==10,f=26;d=28;break;case 27:var s=O(HEAP[h]&255,HEAP[h+1]&255)==10,f=27;d=28;break;case 28:d=(f==27?s:r)!=0?29:30;break;case 29:h+=2;d=30;break;case 30:HEAP[k]=h;m=7;d=35;break;case 31:HEAP[k]=h;m=6;d=35;break;case 32:h+=2;
d=33;break;case 33:d=h!=j?3:34;break;case 34:HEAP[k]=h;m=6;d=35;break;case 35:return a=m;default:assert(0,"bad label: "+d)}},0,function(a,b,c){var d,e=null;for(d=-1;;)switch(d){case -1:var f,g,h,j;f=a;g=b;h=c;d=1;break;case 1:d=HEAP[g]==0?2:3;break;case 2:var k=HEAP[f+76+HEAP[g+1]],e=2;d=4;break;case 3:var l=O(HEAP[g]&255,HEAP[g+1]&255),e=3;d=4;break;case 4:d=e==3?l:k;d=d==5?9:d==6?7:d==7?5:d==22?13:d==23?13:d==24?13:d==25?13:d==26?13:d==27?13:d==29?13:17;break;case 5:d=HEAP[g]!=HEAP[h];g+=1;h+=1;
d=d!=0?6:7;break;case 6:j=0;d=23;break;case 7:d=HEAP[g]!=HEAP[h];g+=1;h+=1;d=d!=0?8:9;break;case 8:j=0;d=23;break;case 9:d=HEAP[g]!=HEAP[h];g+=1;h+=1;d=d!=0?10:11;break;case 10:j=0;d=23;break;case 11:d=HEAP[g]!=HEAP[h];g+=1;h+=1;d=d!=0?12:1;break;case 12:j=0;d=23;break;case 13:d=HEAP[h]!=HEAP[g];h+=1;g+=1;d=d!=0?14:15;break;case 14:j=0;d=23;break;case 15:d=HEAP[h]!=HEAP[g];h+=1;g+=1;d=d!=0?16:1;break;case 16:j=0;d=23;break;case 17:d=HEAP[h]==0?18:19;break;case 18:var m=HEAP[f+76+HEAP[h+1]],e=18;d=
20;break;case 19:var n=O(HEAP[h]&255,HEAP[h+1]&255),e=19;d=20;break;case 20:d=e==19?n:m;d=d==5?21:d==6?21:d==7?21:d==22?21:d==23?21:d==24?21:d==25?21:d==26?21:d==27?21:d==29?21:22;break;case 21:j=0;d=23;break;case 22:j=1;d=23;break;case 23:return a=j;default:assert(0,"bad label: "+d)}},0,function(a,b,c,d){for(a=-1;;)switch(a){case -1:var e,f,g,h;e=b;f=c;g=d;a=7;break;case 1:a=j?2:3;break;case 2:h=0;a=9;break;case 3:a=HEAP[e]!=0?5:4;break;case 4:a=HEAP[e+1]!=HEAP[g]?5:6;break;case 5:h=0;a=9;break;
case 6:e+=2;g+=1;a=7;break;case 7:var j=e==f,a=HEAP[g]!=0?1:8;break;case 8:h=j;a=9;break;case 9:return b=h;default:assert(0,"bad label: "+a)}},0,function(a,b){var c,d=null;for(c=-1;;)switch(c){case -1:var e,f,g;e=a;g=f=b;c=1;break;case 1:c=HEAP[f]==0?2:3;break;case 2:var h=HEAP[e+76+HEAP[f+1]],d=2;c=4;break;case 3:var j=O(HEAP[f]&255,HEAP[f+1]&255),d=3;c=4;break;case 4:c=d==3?j:h;c=c==5?5:c==6?6:c==7?7:c==22?8:c==23?8:c==24?8:c==25?8:c==26?8:c==27?8:c==29?8:9;break;case 5:f+=2;c=1;break;case 6:f+=
3;c=1;break;case 7:f+=4;c=1;break;case 8:f+=2;c=1;break;case 9:return d=f-g;default:assert(0,"bad label: "+c)}},0,function(a,b){var c,d=null;for(c=-1;;)switch(c){case -1:var e,f;e=a;f=b;c=1;break;case 1:c=HEAP[f]==0?2:3;break;case 2:var g=HEAP[e+76+HEAP[f+1]],d=2;c=4;break;case 3:var h=O(HEAP[f]&255,HEAP[f+1]&255),d=3;c=4;break;case 4:c=d==3?h:g;c=c==9?5:c==10?5:c==21?5:6;break;case 5:f+=2;c=1;break;case 6:return d=f;default:assert(0,"bad label: "+c)}},0,function(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,
h,j,k,l,m,n,o;g=a;h=b;j=c;k=d;m=1;o=n=0;h+=2;e=1;break;case 1:e=HEAP[h]==0?2:3;break;case 2:var p=HEAP[g+76+HEAP[h+1]],f=2;e=4;break;case 3:var q=O(HEAP[h]&255,HEAP[h+1]&255),f=3;e=4;break;case 4:e=f==3?q:p;e=e==3?40:e==5?5:e==6?10:e==7?15:e==9?57:e==10?57:e==11?62:e==12?24:e==13?32:e==17?62:e==21?42:e==22?20:e==24?20:e==29?20:64;break;case 5:e=m==0?6:9;break;case 6:e=n<j?7:8;break;case 7:HEAP[k+16*n]=h;HEAP[k+16*n+12]=1;e=8;break;case 8:m=1;e=9;break;case 9:e=64;break;case 10:e=m==0?11:14;break;
case 11:e=n<j?12:13;break;case 12:HEAP[k+16*n]=h;HEAP[k+16*n+12]=1;e=13;break;case 13:m=1;e=14;break;case 14:h+=1;e=64;break;case 15:e=m==0?16:19;break;case 16:e=n<j?17:18;break;case 17:HEAP[k+16*n]=h;HEAP[k+16*n+12]=1;e=18;break;case 18:m=1;e=19;break;case 19:h+=2;e=64;break;case 20:e=m==0?21:64;break;case 21:e=n<j?22:23;break;case 22:HEAP[k+16*n]=h;HEAP[k+16*n+12]=1;e=23;break;case 23:m=1;e=64;break;case 24:e=m!=2?25:28;break;case 25:e=n<j?26:27;break;case 26:HEAP[k+16*n+4]=h+2;e=27;break;case 27:m=
2;o=12;e=64;break;case 28:e=o==12?29:64;break;case 29:m=0;e=n<j?30:31;break;case 30:HEAP[k+16*n+8]=h;e=31;break;case 31:n+=1;e=64;break;case 32:e=m!=2?33:36;break;case 33:e=n<j?34:35;break;case 34:HEAP[k+16*n+4]=h+2;e=35;break;case 35:m=2;o=13;e=64;break;case 36:e=o==13?37:64;break;case 37:m=0;e=n<j?38:39;break;case 38:HEAP[k+16*n+8]=h;e=39;break;case 39:n+=1;e=64;break;case 40:e=n<j?41:64;break;case 41:HEAP[k+16*n+12]=0;e=64;break;case 42:e=m==1?43:44;break;case 43:m=0;e=64;break;case 44:e=m==2?
45:64;break;case 45:e=n<j?46:64;break;case 46:e=HEAP[k+16*n+12]!=0?47:64;break;case 47:e=HEAP[k+16*n+4]==h?56:48;break;case 48:e=HEAP[h]!=0?56:49;break;case 49:e=HEAP[h+1]!=32?56:50;break;case 50:e=HEAP[h+2]!=0?52:51;break;case 51:e=HEAP[h+2+1]==32?56:52;break;case 52:e=HEAP[h+2]==0?53:54;break;case 53:l=HEAP[g+76+HEAP[h+2+1]];e=55;break;case 54:l=O(HEAP[h+2]&255,HEAP[h+2+1]&255);e=55;break;case 55:e=l==o?56:64;break;case 56:HEAP[k+16*n+12]=0;e=64;break;case 57:e=m==1?58:59;break;case 58:m=0;e=64;
break;case 59:e=m==2?60:64;break;case 60:e=n<j?61:64;break;case 61:HEAP[k+16*n+12]=0;e=64;break;case 62:e=m!=2?63:64;break;case 63:return a=n;case 64:h+=2;e=1;break;default:assert(0,"bad label: "+e)}},0,function(a,b){var c,d=null;for(c=-1;;)switch(c){case -1:var e,f,g,h,j;e=b;h=0;e+=4;c=HEAP[e]!=0?21:1;break;case 1:c=HEAP[e+1]!=120?21:2;break;case 2:e+=2;c=13;break;case 3:c=HEAP[e]==0?5:4;break;case 4:j=-1;c=9;break;case 5:j=c=HEAP[e+1];c=c==48?6:c==49?6:c==50?6:c==51?6:c==52?6:c==53?6:c==54?6:c==
55?6:c==56?6:c==57?6:c==65?7:c==66?7:c==67?7:c==68?7:c==69?7:c==70?7:c==97?8:c==98?8:c==99?8:c==100?8:c==101?8:c==102?8:9;break;case 6:h<<=4;var k=j-48|h;h=k;d=6;c=10;break;case 7:h<<=4;var l=j-55+h;h=l;d=7;c=10;break;case 8:h<<=4;var m=j-87+h;h=m;d=8;c=10;break;case 9:var n=h,d=9;c=10;break;case 10:c=(d==9?n:d==8?m:d==7?l:k)>1114111?11:12;break;case 11:g=-1;c=24;break;case 12:e+=2;c=13;break;case 13:c=HEAP[e]!=0?3:14;break;case 14:c=HEAP[e+1]!=59?3:23;break;case 15:c=HEAP[e]==0?16:17;break;case 16:f=
HEAP[e+1];c=18;break;case 17:f=-1;c=18;break;case 18:c=f;h*=10;h=c=c-48+h;c=c>1114111?19:20;break;case 19:g=-1;c=24;break;case 20:e+=2;c=21;break;case 21:c=HEAP[e]!=0?15:22;break;case 22:c=HEAP[e+1]!=59?15:23;break;case 23:g=Kb(h);c=24;break;case 24:return d=g;default:assert(0,"bad label: "+c)}},0,function(a,b,c){for(a=-1;;)switch(a){case -1:var d,e;d=b;a=(c-d)/2|0;a=a==2?1:a==3?8:a==4?15:32;break;case 1:a=HEAP[d+2]==0?2:32;break;case 2:a=HEAP[d+2+1]==116?3:32;break;case 3:a=HEAP[d]==0?5:4;break;
case 4:a=32;break;case 5:a=HEAP[d+1];a=a==103?7:a==108?6:32;break;case 6:e=60;a=33;break;case 7:e=62;a=33;break;case 8:a=HEAP[d]==0?9:32;break;case 9:a=HEAP[d+1]==97?10:32;break;case 10:d+=2;a=HEAP[d]==0?11:32;break;case 11:a=HEAP[d+1]==109?12:32;break;case 12:d+=2;a=HEAP[d]==0?13:32;break;case 13:a=HEAP[d+1]==112?14:32;break;case 14:e=38;a=33;break;case 15:a=HEAP[d]==0?17:16;break;case 16:a=32;break;case 17:a=HEAP[d+1];a=a==97?25:a==113?18:32;break;case 18:d+=2;a=HEAP[d]==0?19:32;break;case 19:a=
HEAP[d+1]==117?20:32;break;case 20:d+=2;a=HEAP[d]==0?21:32;break;case 21:a=HEAP[d+1]==111?22:32;break;case 22:d+=2;a=HEAP[d]==0?23:32;break;case 23:a=HEAP[d+1]==116?24:32;break;case 24:e=34;a=33;break;case 25:d+=2;a=HEAP[d]==0?26:32;break;case 26:a=HEAP[d+1]==112?27:32;break;case 27:d+=2;a=HEAP[d]==0?28:32;break;case 28:a=HEAP[d+1]==111?29:32;break;case 29:d+=2;a=HEAP[d]==0?30:32;break;case 30:a=HEAP[d+1]==115?31:32;break;case 31:e=39;a=33;break;case 32:e=0;a=33;break;case 33:return b=e;default:assert(0,
"bad label: "+a)}},0,function(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j,k;g=a;h=b;j=c;k=d;e=h<j?1:18;break;case 1:e=HEAP[h]==0?2:3;break;case 2:var l=HEAP[g+76+HEAP[h+1]],f=2;e=4;break;case 3:var m=O(HEAP[h]&255,HEAP[h+1]&255),f=3;e=4;break;case 4:e=f==3?m:l;e=e==5?5:e==6?6:e==7?7:e==9?9:e==10?8:16;break;case 5:h+=2;e=17;break;case 6:h+=3;e=17;break;case 7:h+=4;e=17;break;case 8:HEAP[k+4]=-1;HEAP[k]+=1;h+=2;e=17;break;case 9:HEAP[k]+=1;h+=2;e=h!=j?10:15;break;case 10:e=HEAP[h]==
0?11:12;break;case 11:var n=HEAP[g+76+HEAP[h+1]]==10,f=11;e=13;break;case 12:var o=O(HEAP[h]&255,HEAP[h+1]&255)==10,f=12;e=13;break;case 13:e=(f==12?o:n)!=0?14:15;break;case 14:h+=2;e=15;break;case 15:HEAP[k+4]=-1;e=17;break;case 16:h+=2;e=17;break;case 17:HEAP[k+4]+=1;e=h<j?1:18;break;case 18:return;default:assert(0,"bad label: "+e)}},0,function(a,b,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j,k,l;g=a;h=b;j=c;k=d;h+=2;j+=-2;e=15;break;case 1:e=HEAP[h]==0?2:3;break;case 2:var m=HEAP[g+
76+HEAP[h+1]],f=2;e=4;break;case 3:var n=O(HEAP[h]&255,HEAP[h+1]&255),f=3;e=4;break;case 4:e=f==3?n:m;e=e==9?14:e==10?14:e==13?14:e==14?14:e==15?14:e==16?14:e==17?14:e==18?14:e==19?14:e==21?5:e==22?8:e==23?14:e==24?14:e==25?14:e==26?8:e==27?14:e==30?14:e==31?14:e==32?14:e==33?14:e==34?14:e==35?14:10;break;case 5:e=HEAP[h]==0?6:14;break;case 6:e=HEAP[h+1]==9?7:14;break;case 7:HEAP[k]=h;l=0;e=17;break;case 8:e=HEAP[h]==0?9:10;break;case 9:e=(HEAP[h+1]&-128)==0?14:10;break;case 10:e=HEAP[h]==0?12:11;
break;case 11:e=13;break;case 12:e=HEAP[h+1];e=e==36?14:e==64?14:13;break;case 13:HEAP[k]=h;l=0;e=17;break;case 14:h+=2;e=15;break;case 15:e=h!=j?1:16;break;case 16:l=1;e=17;break;case 17:return a=l;default:assert(0,"bad label: "+e)}},0,function(a,b,c,e,d){for(a=-1;;)switch(a){case -1:var f,g,h,j,k,l,m;f=b;g=c;h=e;j=d;k=HEAP[f];a=16;break;case 1:l=HEAP[k+1];a=m=HEAP[k];a=a==0?2:a==1?6:a==2?6:a==3?6:a==4?6:a==5?6:a==6?6:a==7?6:a==216?12:a==217?12:a==218?12:a==219?12:9;break;case 2:a=l>=0?3:6;break;
case 3:a=HEAP[h]==j?4:5;break;case 4:HEAP[f]=k;a=18;break;case 5:a=HEAP[h];HEAP[a]=l;HEAP[h]=a+1;a=15;break;case 6:a=j-HEAP[h]<=1?7:8;break;case 7:HEAP[f]=k;a=18;break;case 8:a=HEAP[h];HEAP[a]=l>>>6|-64|m<<2&255;HEAP[h]=a+1;a=HEAP[h];HEAP[a]=l&63|-128;HEAP[h]=a+1;a=15;break;case 9:a=j-HEAP[h]<=2?10:11;break;case 10:HEAP[f]=k;a=18;break;case 11:a=HEAP[h];HEAP[a]=m>>>4|-32;HEAP[h]=a+1;a=HEAP[h];HEAP[a]=l>>>6|-128|(m&15)<<2&255;HEAP[h]=a+1;a=HEAP[h];HEAP[a]=l&63|-128;HEAP[h]=a+1;a=15;break;case 12:a=
j-HEAP[h]<=3?13:14;break;case 13:HEAP[f]=k;a=18;break;case 14:var a=(l>>>6&3|(m&3)<<2)+1,n=HEAP[h];HEAP[n]=a>>2&255|-16;HEAP[h]=n+1;n=HEAP[h];HEAP[n]=l>>>2&15|-128|(a&3)<<4&255;HEAP[h]=n+1;k+=2;a=HEAP[k+1];n=HEAP[h];HEAP[n]=a>>>6|-128|(l&3)<<4&255|(HEAP[k]&3)<<2&255;HEAP[h]=n+1;n=HEAP[h];HEAP[n]=a&63|-128;HEAP[h]=n+1;a=15;break;case 15:k+=2;a=16;break;case 16:a=k!=g?1:17;break;case 17:HEAP[f]=k;a=18;break;case 18:return;default:assert(0,"bad label: "+a)}},0,function(a,b,c,e,d){for(a=-1;;)switch(a){case -1:var f,
g,h,j;f=b;g=c;h=e;j=d;a=g-HEAP[f]>((j-HEAP[h])/2|0)<<1?1:4;break;case 1:a=(HEAP[g+-2]&248)==216?2:4;break;case 2:g+=-2;a=4;break;case 3:a=HEAP[h];HEAP[a]=HEAP[HEAP[f]+1]|HEAP[HEAP[f]]<<8&65535;HEAP[h]=a+2;HEAP[f]+=2;a=4;break;case 4:a=HEAP[f]==g?6:5;break;case 5:a=HEAP[h]!=j?3:6;break;case 6:return;default:assert(0,"bad label: "+a)}},0]);tb.run=Mb;Mb();return tb});
=======
"use strict";

// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET) {
  var Module = {};
  var args = [];
  Module.arguments = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime essentials
//========================================

var __globalConstructor__ = function globalConstructor() {
}

// === Body ===



var $0___SIZE = 144; // %0
  
var $1___SIZE = 16; // %1
  
var $2___SIZE = 196; // %2
  
var $3___SIZE = 20; // %3
  
var $4___SIZE = 368; // %4
  var $4___FLATTENER = [0,76,332];
var $struct_ATTRIBUTE___SIZE = 16; // %struct.ATTRIBUTE
  
var $struct_BINDING___SIZE = 28; // %struct.BINDING
  
var $struct_BLOCK___SIZE = 12; // %struct.BLOCK
  
var $struct_CONTENT_SCAFFOLD___SIZE = 28; // %struct.CONTENT_SCAFFOLD
  
var $struct_DEFAULT_ATTRIBUTE___SIZE = 12; // %struct.DEFAULT_ATTRIBUTE
  
var $struct_DTD___SIZE = 188; // %struct.DTD
  var $struct_DTD___FLATTENER = [0,20,40,60,80,104,128,129,130,131,132,152,160,164,168,172,176,180,184];
var $struct_ELEMENT_TYPE___SIZE = 24; // %struct.ELEMENT_TYPE
  
var $struct_ENCODING___SIZE = 76; // %struct.ENCODING
  var $struct_ENCODING___FLATTENER = [0,16,24,28,32,36,40,44,48,52,56,60,64,68,72,73];
var $struct_ENTITY___SIZE = 36; // %struct.ENTITY
  var $struct_ENTITY___FLATTENER = [0,4,8,12,16,20,24,28,32,33,34];
var $struct_FILE___SIZE = 148; // %struct.FILE
  var $struct_FILE___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,70,71,72,76,84,88,92,96,100,104,108];
var $struct_HASH_TABLE___SIZE = 20; // %struct.HASH_TABLE
  
var $struct_HASH_TABLE_ITER___SIZE = 8; // %struct.HASH_TABLE_ITER
  
var $struct_HandlerInfo___SIZE = 20; // %struct.HandlerInfo
  
var $struct_INIT_ENCODING___SIZE = 80; // %struct.INIT_ENCODING
  
var $struct_NAMED___SIZE = 4; // %struct.NAMED
  
var $struct_NS_ATT___SIZE = 12; // %struct.NS_ATT
  
var $struct_OPEN_INTERNAL_ENTITY___SIZE = 24; // %struct.OPEN_INTERNAL_ENTITY
  
var $struct_POSITION___SIZE = 8; // %struct.POSITION
  
var $struct_PREFIX___SIZE = 8; // %struct.PREFIX
  
var $struct_PROLOG_STATE___SIZE = 24; // %struct.PROLOG_STATE
  
var $struct_PyBufferProcs___SIZE = 24; // %struct.PyBufferProcs
  
var $struct_PyCodeObject___SIZE = 72; // %struct.PyCodeObject
  
var $struct_PyExpat_CAPI___SIZE = 80; // %struct.PyExpat_CAPI
  
var $struct_PyGetSetDef___SIZE = 20; // %struct.PyGetSetDef
  
var $struct_PyIntObject___SIZE = 12; // %struct.PyIntObject
  
var $struct_PyInterpreterState___SIZE = 40; // %struct.PyInterpreterState
  
var $struct_PyListObject___SIZE = 20; // %struct.PyListObject
  
var $struct_PyMappingMethods___SIZE = 12; // %struct.PyMappingMethods
  
var $struct_PyMemberDef___SIZE = 0; // %struct.PyMemberDef
  var $struct_PyMemberDef___FLATTENER = [];
var $struct_PyMethodDef___SIZE = 16; // %struct.PyMethodDef
  
var $struct_PyNumberMethods___SIZE = 156; // %struct.PyNumberMethods
  
var $struct_PyObject___SIZE = 8; // %struct.PyObject
  
var $struct_PySequenceMethods___SIZE = 40; // %struct.PySequenceMethods
  
var $struct_PyThreadState___SIZE = 84; // %struct.PyThreadState
  
var $struct_PyTryBlock___SIZE = 12; // %struct.PyTryBlock
  
var $struct_PyTupleObject___SIZE = 16; // %struct.PyTupleObject
  
var $struct_PyUnicodeObject___SIZE = 24; // %struct.PyUnicodeObject
  
var $struct_Py_buffer___SIZE = 52; // %struct.Py_buffer
  var $struct_Py_buffer___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,48];
var $struct_STRING_POOL___SIZE = 24; // %struct.STRING_POOL
  
var $struct_TAG___SIZE = 48; // %struct.TAG
  var $struct_TAG___FLATTENER = [0,4,8,12,36,40,44];
var $struct_TAG_NAME___SIZE = 24; // %struct.TAG_NAME
  
var $struct_XML_Content___SIZE = 20; // %struct.XML_Content
  
var $struct_XML_Encoding___SIZE = 1036; // %struct.XML_Encoding
  var $struct_XML_Encoding___FLATTENER = [0,1024,1028,1032];
var $struct_XML_Feature___SIZE = 12; // %struct.XML_Feature
  
var $struct_XML_Memory_Handling_Suite___SIZE = 12; // %struct.XML_Memory_Handling_Suite
  
var $struct_XML_ParserStruct___SIZE = 496; // %struct.XML_ParserStruct
  var $struct_XML_ParserStruct___FLATTENER = [0,4,8,12,24,28,32,36,40,44,48,52,56,60,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124,128,132,136,140,144,148,228,232,236,237,240,244,248,252,256,280,284,288,292,296,300,304,308,312,316,320,324,328,332,336,340,344,348,352,353,356,360,364,368,372,376,380,384,388,392,396,400,404,408,416,440,464,468,472,476,480,488,489,492];
var $struct_XML_ParsingStatus___SIZE = 8; // %struct.XML_ParsingStatus
  
var $struct__IO_marker___SIZE = 12; // %struct._IO_marker
  
var $struct__frame___SIZE = 316; // %struct._frame
  var $struct__frame___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,312];
var $struct__typeobject___SIZE = 196; // %struct._typeobject
  
var $struct_attribute_id___SIZE = 12; // %struct.attribute_id
  var $struct_attribute_id___FLATTENER = [0,4,8,9];
var $struct_normal_encoding___SIZE = 368; // %struct.normal_encoding
  var $struct_normal_encoding___FLATTENER = [0,76,332,336,340,344,348,352,356,360,364];
var $struct_unknown_encoding___SIZE = 1912; // %struct.unknown_encoding
  var $struct_unknown_encoding___FLATTENER = [0,368,372,376,888];
var $struct_xmlparseobject___SIZE = 52; // %struct.xmlparseobject
  
var __str;
var _ErrorObject;
var __str1;
var __str2;
var __str3;
var __str4;

var __str5;
var __str6;

var __str7;
var __str8;
var __str9;
var __str10;
var __str11;
var __str12;
var __str13;
var __str14;
var __str15;
var __str16;
var __str17;
var __str18;
var __str19;
var __str20;
var ___PRETTY_FUNCTION___9747;
var __str21;
var __str22;
var __str23;
var __str24;
var __str25;
var __str26;
var __str27;
var __str28;
var __str29;
var __str30;
var __str31;
var __str32;
var __str33;
var __str34;
var __str35;
var __str36;
var __str37;
var __str38;
var __str39;
var __str40;
var __str41;
var __str42;
var __str43;
var __str44;
var _xmlparse_Parse__doc__;
var __str45;

var __str46;

var __str47;
var _xmlparse_ParseFile__doc__;
var __str48;
var __str49;
var _xmlparse_SetBase__doc__;
var __str50;
var _xmlparse_GetBase__doc__;
var __str51;
var _xmlparse_GetInputContext__doc__;
var _xmlparse_ExternalEntityParserCreate__doc__;
var __str52;
var _xmlparse_SetParamEntityParsing__doc__;
var __str53;
var _xmlparse_UseForeignDTD__doc__;
var __str54;
var __str55;
var __str56;
var __str57;
var __str58;
var __str59;
var __str60;
var __str61;
var _xmlparse_methods;
var _template_string;
var _template_buffer;
var __str62;

var __str63;


var __str64;
var __str65;
var __str66;
var __str67;
var __str68;
var __str69;
var __str70;
var __str71;
var __str72;
var __str73;
var __str74;
var __str75;
var __str76;
var __str77;
var __str78;
var __str79;
var __str80;
var __str81;
var __str82;
var __str83;

var _Xmlparsetype__doc__;
var __str84;
var _Xmlparsetype;
var _pyexpat_ParserCreate__doc__;
var __str85;
var _kwlist_11530;
var __str86;
var __str87;
var __str88;
var __str89;
var _pyexpat_ErrorString__doc__;
var __str90;
var _pyexpat_methods;
var __str91;
var __str92;
var _pyexpat_module_documentation;
var __str93;
var __str94;

var __str95;
var __str96;
var __str97;
var __str98;
var __str99;
var __str100;
var __str101;
var __str102;
var __str103;
var __str104;
var __str105;
var __str106;
var __str107;
var __str108;
var __str109;
var __str110;
var __str111;
var __str112;
var __str113;
var __str114;
var __str115;
var __str116;
var __str117;
var __str118;
var __str119;
var __str120;
var __str121;
var __str122;
var __str123;
var __str124;
var __str125;
var __str126;
var __str127;
var __str128;
var __str129;
var __str130;
var __str131;
var __str132;
var __str133;
var __str134;
var __str135;
var __str136;
var __str137;
var __str138;
var __str139;
var __str140;
var __str141;
var __str142;
var __str143;
var __str144;
var __str145;
var __str146;
var __str147;
var __str148;
var __str149;
var __str150;
var __str151;
var __str152;
var __str153;
var __str154;
var __str155;
var __str156;
var __str157;
var __str158;
var __str159;
var __str160;
var __str161;
var __str162;
var __str163;
var __str164;
var _capi_11609;
var __str165;
var __str166;
var __str167;
var __str168;
var __str169;
var __str170;
var __str171;
var __str172;
var __str173;
var __str174;
var __str175;
var __str176;
var __str177;
var __str178;
var __str179;
var __str180;
var __str181;
var __str182;
var __str183;
var __str184;
var __str185;
var __str186;
var __str187;
var _handler_info;
var _implicitContext;
var __str188;
var __str1189;
var ___PRETTY_FUNCTION___3819;
var _message_3967;
var __str2190;
var __str3191;
var __str4192;
var __str5193;
var __str6194;
var __str7195;
var __str8196;
var __str9197;
var __str10198;
var __str11199;
var __str12200;
var __str13201;
var __str14202;
var __str15203;
var __str16204;
var __str17205;
var __str18206;
var __str19207;
var __str20208;
var __str21209;
var __str22210;
var __str23211;
var __str24212;
var __str25213;
var __str26214;
var __str27215;
var __str28216;
var __str29217;
var __str30218;
var __str31219;
var __str32220;
var __str33221;
var __str34222;
var __str35223;
var __str36224;
var __str37225;
var __str38226;
var __str39227;
var __str40228;
var __str41229;
var __str42230;
var _features_3989;
var __str43231;
var __str44232;
var __str45233;
var __str46234;
var __str47235;
var _xmlNamespace_5259;
var _xmlnsNamespace_5261;
var _externalSubsetName_6003;
var _atypeCDATA_6004;
var _atypeID_6005;
var _atypeIDREF_6006;
var _atypeIDREFS_6007;
var _atypeENTITY_6008;
var _atypeENTITIES_6009;
var _atypeNMTOKEN_6010;
var _atypeNMTOKENS_6011;
var _enumValueSep_6013;
var _notationPrefix_6012;
var _enumValueStart_6014;
var _KW_ANY;
var _KW_ATTLIST;
var _KW_CDATA;
var _KW_DOCTYPE;
var _KW_ELEMENT;
var _KW_EMPTY;
var _KW_ENTITIES;
var _KW_ENTITY;
var _KW_FIXED;
var _KW_ID;
var _KW_IDREF;
var _KW_IDREFS;
var _KW_IGNORE;
var _KW_IMPLIED;
var _KW_INCLUDE;
var _KW_NDATA;
var _KW_NMTOKEN;
var _KW_NMTOKENS;
var _KW_NOTATION;
var _KW_PCDATA;
var _KW_PUBLIC;
var _KW_REQUIRED;
var _KW_SYSTEM;
var _types_1939;
var _namingBitmap;
var _nmstrtPages;
var _namePages;
var _utf8_encoding_ns;
var _utf8_encoding;
var _internal_utf8_encoding_ns;
var _internal_utf8_encoding;
var _latin1_encoding_ns;
var _latin1_encoding;
var _ascii_encoding_ns;
var _ascii_encoding;
var _little2_encoding_ns;
var _little2_encoding;
var _internal_little2_encoding_ns;
var _internal_little2_encoding;
var _CDATA_LSQB_9078;
var _big2_encoding_ns;
var _big2_encoding;
var _KW_version;
var _KW_standalone;
var _KW_yes;
var _KW_no;
var _KW_ISO_8859_1;
var _KW_US_ASCII;
var _KW_UTF_16;
var _KW_UTF_16BE;
var _KW_UTF_16LE;
var _encodingNames_12955;
var _encodings;
var _encodingsNS;


































































  function _set_error_attr($err, $name, $value) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $err_addr;
        var $name_addr;
        var $value_addr;
        var $retval;
        var $0;
        var $v;
        $err_addr=$err;
        $name_addr=$name;
        $value_addr=$value;
        var $1=$value_addr; //@line 107 "pyexpat.c"
        var $2=_PyInt_FromLong($1); //@line 107 "pyexpat.c"
        $v=$2; //@line 107 "pyexpat.c"
        var $3=$v; //@line 109 "pyexpat.c"
        var $4=($3)==0; //@line 109 "pyexpat.c"
        if ($4) { __label__ = 5; break; } else { __label__ = 1; break; } //@line 109 "pyexpat.c"
      case 1: // $bb
        var $5=$err_addr; //@line 109 "pyexpat.c"
        var $6=$name_addr; //@line 109 "pyexpat.c"
        var $7=$v; //@line 109 "pyexpat.c"
        var $8=_PyObject_SetAttrString($5, $6, $7); //@line 109 "pyexpat.c"
        var $9=($8)==-1; //@line 109 "pyexpat.c"
        var $_pr=$v;
        if ($9) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 109 "pyexpat.c"
      case 2: // $bb1
        var $10=($_pr)!=0; //@line 110 "pyexpat.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 110 "pyexpat.c"
      case 3: // $bb2
        var $11=$v; //@line 110 "pyexpat.c"
        var $12=$11; //@line 110 "pyexpat.c"
        var $13=HEAP[$12]; //@line 110 "pyexpat.c"
        var $14=($13) - 1; //@line 110 "pyexpat.c"
        var $15=$v; //@line 110 "pyexpat.c"
        var $16=$15; //@line 110 "pyexpat.c"
        HEAP[$16]=$14; //@line 110 "pyexpat.c"
        var $17=$v; //@line 110 "pyexpat.c"
        var $18=$17; //@line 110 "pyexpat.c"
        var $19=HEAP[$18]; //@line 110 "pyexpat.c"
        var $20=($19)==0; //@line 110 "pyexpat.c"
        if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 110 "pyexpat.c"
      case 4: // $bb3
        var $21=$v; //@line 110 "pyexpat.c"
        var $22=$21+4; //@line 110 "pyexpat.c"
        var $23=HEAP[$22]; //@line 110 "pyexpat.c"
        var $24=$23+24; //@line 110 "pyexpat.c"
        var $25=HEAP[$24]; //@line 110 "pyexpat.c"
        var $26=$v; //@line 110 "pyexpat.c"
        FUNCTION_TABLE[$25]($26); //@line 110 "pyexpat.c"
        __label__ = 5; break; //@line 110 "pyexpat.c"
      case 5: // $bb4
        $0=0; //@line 111 "pyexpat.c"
        __label__ = 9; break; //@line 111 "pyexpat.c"
      case 6: // $bb5
        var $27=$_pr; //@line 113 "pyexpat.c"
        var $28=HEAP[$27]; //@line 113 "pyexpat.c"
        var $29=($28) - 1; //@line 113 "pyexpat.c"
        var $30=$v; //@line 113 "pyexpat.c"
        var $31=$30; //@line 113 "pyexpat.c"
        HEAP[$31]=$29; //@line 113 "pyexpat.c"
        var $32=$v; //@line 113 "pyexpat.c"
        var $33=$32; //@line 113 "pyexpat.c"
        var $34=HEAP[$33]; //@line 113 "pyexpat.c"
        var $35=($34)==0; //@line 113 "pyexpat.c"
        if ($35) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 113 "pyexpat.c"
      case 7: // $bb6
        var $36=$v; //@line 113 "pyexpat.c"
        var $37=$36+4; //@line 113 "pyexpat.c"
        var $38=HEAP[$37]; //@line 113 "pyexpat.c"
        var $39=$38+24; //@line 113 "pyexpat.c"
        var $40=HEAP[$39]; //@line 113 "pyexpat.c"
        var $41=$v; //@line 113 "pyexpat.c"
        FUNCTION_TABLE[$40]($41); //@line 113 "pyexpat.c"
        __label__ = 8; break; //@line 113 "pyexpat.c"
      case 8: // $bb7
        $0=1; //@line 114 "pyexpat.c"
        __label__ = 9; break; //@line 114 "pyexpat.c"
      case 9: // $bb8
        var $42=$0; //@line 111 "pyexpat.c"
        $retval=$42; //@line 111 "pyexpat.c"
        var $retval9=$retval; //@line 111 "pyexpat.c"
        ;
        return $retval9; //@line 111 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _set_error($self, $code) {
    var __stackBase__  = STACKTOP; STACKTOP += 256; _memset(__stackBase__, 0, 256);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $code_addr;
        var $retval;
        var $0;
        var $err;
        var $buffer=__stackBase__;
        var $parser;
        var $lineno;
        var $column;
        $self_addr=$self;
        $code_addr=$code;
        var $1=$self_addr; //@line 125 "pyexpat.c"
        var $2=$1+8; //@line 125 "pyexpat.c"
        var $3=HEAP[$2]; //@line 125 "pyexpat.c"
        $parser=$3; //@line 125 "pyexpat.c"
        var $4=$parser; //@line 126 "pyexpat.c"
        var $5=_PyExpat_XML_GetCurrentLineNumber($4); //@line 126 "pyexpat.c"
        $lineno=$5; //@line 126 "pyexpat.c"
        var $6=$parser; //@line 127 "pyexpat.c"
        var $7=_PyExpat_XML_GetCurrentColumnNumber($6); //@line 127 "pyexpat.c"
        $column=$7; //@line 127 "pyexpat.c"
        var $8=$code_addr; //@line 131 "pyexpat.c"
        var $9=_PyExpat_XML_ErrorString($8); //@line 131 "pyexpat.c"
        var $buffer1=$buffer; //@line 131 "pyexpat.c"
        var $10=$lineno; //@line 131 "pyexpat.c"
        var $11=$column; //@line 131 "pyexpat.c"
        var $12=_sprintf($buffer1, __str, allocate([$9,0,0,0,$10,0,0,0,$11,0,0,0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 131 "pyexpat.c"
        var $13=HEAP[_ErrorObject]; //@line 133 "pyexpat.c"
        var $buffer2=$buffer; //@line 133 "pyexpat.c"
        var $14=_PyObject_CallFunction($13, __str1, allocate([$buffer2,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 133 "pyexpat.c"
        $err=$14; //@line 133 "pyexpat.c"
        var $15=$err; //@line 134 "pyexpat.c"
        var $16=($15)!=0; //@line 134 "pyexpat.c"
        if ($16) { __label__ = 1; break; } else { __label__ = 8; break; } //@line 134 "pyexpat.c"
      case 1: // $bb
        var $17=$code_addr; //@line 134 "pyexpat.c"
        var $18=$err; //@line 134 "pyexpat.c"
        var $19=_set_error_attr($18, __str2, $17); //@line 134 "pyexpat.c"
        var $20=($19)!=0; //@line 134 "pyexpat.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 134 "pyexpat.c"
      case 2: // $bb3
        var $21=$err; //@line 134 "pyexpat.c"
        var $22=$column; //@line 134 "pyexpat.c"
        var $23=_set_error_attr($21, __str3, $22); //@line 134 "pyexpat.c"
        var $24=($23)!=0; //@line 134 "pyexpat.c"
        if ($24) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 134 "pyexpat.c"
      case 3: // $bb4
        var $25=$err; //@line 134 "pyexpat.c"
        var $26=$lineno; //@line 134 "pyexpat.c"
        var $27=_set_error_attr($25, __str4, $26); //@line 134 "pyexpat.c"
        var $28=($27)!=0; //@line 134 "pyexpat.c"
        if ($28) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 134 "pyexpat.c"
      case 4: // $bb5
        var $29=HEAP[_ErrorObject]; //@line 138 "pyexpat.c"
        var $30=$err; //@line 138 "pyexpat.c"
        _PyErr_SetObject($29, $30); //@line 138 "pyexpat.c"
        __label__ = 5; break; //@line 138 "pyexpat.c"
      case 5: // $bb6
        var $_pr=$err;
        var $31=($_pr)!=0; //@line 140 "pyexpat.c"
        if ($31) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 140 "pyexpat.c"
      case 6: // $bb7
        var $32=$err; //@line 140 "pyexpat.c"
        var $33=$32; //@line 140 "pyexpat.c"
        var $34=HEAP[$33]; //@line 140 "pyexpat.c"
        var $35=($34) - 1; //@line 140 "pyexpat.c"
        var $36=$err; //@line 140 "pyexpat.c"
        var $37=$36; //@line 140 "pyexpat.c"
        HEAP[$37]=$35; //@line 140 "pyexpat.c"
        var $38=$err; //@line 140 "pyexpat.c"
        var $39=$38; //@line 140 "pyexpat.c"
        var $40=HEAP[$39]; //@line 140 "pyexpat.c"
        var $41=($40)==0; //@line 140 "pyexpat.c"
        if ($41) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 140 "pyexpat.c"
      case 7: // $bb8
        var $42=$err; //@line 140 "pyexpat.c"
        var $43=$42+4; //@line 140 "pyexpat.c"
        var $44=HEAP[$43]; //@line 140 "pyexpat.c"
        var $45=$44+24; //@line 140 "pyexpat.c"
        var $46=HEAP[$45]; //@line 140 "pyexpat.c"
        var $47=$err; //@line 140 "pyexpat.c"
        FUNCTION_TABLE[$46]($47); //@line 140 "pyexpat.c"
        __label__ = 8; break; //@line 140 "pyexpat.c"
      case 8: // $bb9
        $0=0; //@line 141 "pyexpat.c"
        var $48=$0; //@line 141 "pyexpat.c"
        $retval=$48; //@line 141 "pyexpat.c"
        var $retval10=$retval; //@line 141 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 141 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _have_handler($self, $type) {
    ;
    var __label__;
  
    var $self_addr;
    var $type_addr;
    var $retval;
    var $0;
    var $handler;
    $self_addr=$self;
    $type_addr=$type;
    var $1=$self_addr; //@line 147 "pyexpat.c"
    var $2=$1+48; //@line 147 "pyexpat.c"
    var $3=HEAP[$2]; //@line 147 "pyexpat.c"
    var $4=$type_addr; //@line 147 "pyexpat.c"
    var $5=$3+4*$4; //@line 147 "pyexpat.c"
    var $6=HEAP[$5]; //@line 147 "pyexpat.c"
    $handler=$6; //@line 147 "pyexpat.c"
    var $7=$handler; //@line 148 "pyexpat.c"
    var $8=($7)!=0; //@line 148 "pyexpat.c"
    var $9=($8); //@line 148 "pyexpat.c"
    $0=$9; //@line 148 "pyexpat.c"
    var $10=$0; //@line 148 "pyexpat.c"
    $retval=$10; //@line 148 "pyexpat.c"
    var $retval1=$retval; //@line 148 "pyexpat.c"
    ;
    return $retval1; //@line 148 "pyexpat.c"
  }
  

  function _get_handler_name($hinfo) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $hinfo_addr;
        var $retval;
        var $0;
        var $name;
        $hinfo_addr=$hinfo;
        var $1=$hinfo_addr; //@line 154 "pyexpat.c"
        var $2=$1+16; //@line 154 "pyexpat.c"
        var $3=HEAP[$2]; //@line 154 "pyexpat.c"
        $name=$3; //@line 154 "pyexpat.c"
        var $4=$name; //@line 155 "pyexpat.c"
        var $5=($4)==0; //@line 155 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 155 "pyexpat.c"
      case 1: // $bb1
        var $6=$hinfo_addr; //@line 156 "pyexpat.c"
        var $7=$6; //@line 156 "pyexpat.c"
        var $8=HEAP[$7]; //@line 156 "pyexpat.c"
        var $9=_PyString_FromString($8); //@line 156 "pyexpat.c"
        $name=$9; //@line 156 "pyexpat.c"
        var $10=$hinfo_addr; //@line 157 "pyexpat.c"
        var $11=$10+16; //@line 157 "pyexpat.c"
        var $12=$name; //@line 157 "pyexpat.c"
        HEAP[$11]=$12; //@line 157 "pyexpat.c"
        var $_pr=$name;
        var $13=($_pr)!=0; //@line 159 "pyexpat.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 159 "pyexpat.c"
      case 2: // $bb2
        var $14=$name; //@line 159 "pyexpat.c"
        var $15=$14; //@line 159 "pyexpat.c"
        var $16=HEAP[$15]; //@line 159 "pyexpat.c"
        var $17=($16) + 1; //@line 159 "pyexpat.c"
        var $18=$name; //@line 159 "pyexpat.c"
        var $19=$18; //@line 159 "pyexpat.c"
        HEAP[$19]=$17; //@line 159 "pyexpat.c"
        __label__ = 3; break; //@line 159 "pyexpat.c"
      case 3: // $bb3
        var $20=$name; //@line 160 "pyexpat.c"
        $0=$20; //@line 160 "pyexpat.c"
        var $21=$0; //@line 160 "pyexpat.c"
        $retval=$21; //@line 160 "pyexpat.c"
        var $retval4=$retval; //@line 160 "pyexpat.c"
        ;
        return $retval4; //@line 160 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _conv_string_to_unicode($str) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $str_addr;
        var $retval;
        var $0;
        $str_addr=$str;
        var $1=$str_addr; //@line 174 "pyexpat.c"
        var $2=($1)==0; //@line 174 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 174 "pyexpat.c"
      case 1: // $bb
        var $3=HEAP[__Py_NoneStruct]; //@line 175 "pyexpat.c"
        var $4=($3) + 1; //@line 175 "pyexpat.c"
        HEAP[__Py_NoneStruct]=$4; //@line 175 "pyexpat.c"
        $0=__Py_NoneStruct; //@line 176 "pyexpat.c"
        __label__ = 3; break; //@line 176 "pyexpat.c"
      case 2: // $bb1
        var $5=$str_addr; //@line 178 "pyexpat.c"
        var $6=_strlen($5); //@line 178 "pyexpat.c"
        var $7=$str_addr; //@line 178 "pyexpat.c"
        var $8=_PyUnicodeUCS2_DecodeUTF8($7, $6, __str5); //@line 178 "pyexpat.c"
        $0=$8; //@line 178 "pyexpat.c"
        __label__ = 3; break; //@line 178 "pyexpat.c"
      case 3: // $bb2
        var $9=$0; //@line 176 "pyexpat.c"
        $retval=$9; //@line 176 "pyexpat.c"
        var $retval3=$retval; //@line 176 "pyexpat.c"
        ;
        return $retval3; //@line 176 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _conv_string_len_to_unicode($str, $len) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $str_addr;
        var $len_addr;
        var $retval;
        var $0;
        $str_addr=$str;
        $len_addr=$len;
        var $1=$str_addr; //@line 187 "pyexpat.c"
        var $2=($1)==0; //@line 187 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 187 "pyexpat.c"
      case 1: // $bb
        var $3=HEAP[__Py_NoneStruct]; //@line 188 "pyexpat.c"
        var $4=($3) + 1; //@line 188 "pyexpat.c"
        HEAP[__Py_NoneStruct]=$4; //@line 188 "pyexpat.c"
        $0=__Py_NoneStruct; //@line 189 "pyexpat.c"
        __label__ = 3; break; //@line 189 "pyexpat.c"
      case 2: // $bb1
        var $5=$str_addr; //@line 191 "pyexpat.c"
        var $6=$len_addr; //@line 191 "pyexpat.c"
        var $7=_PyUnicodeUCS2_DecodeUTF8($5, $6, __str5); //@line 191 "pyexpat.c"
        $0=$7; //@line 191 "pyexpat.c"
        __label__ = 3; break; //@line 191 "pyexpat.c"
      case 3: // $bb2
        var $8=$0; //@line 189 "pyexpat.c"
        $retval=$8; //@line 189 "pyexpat.c"
        var $retval3=$retval; //@line 189 "pyexpat.c"
        ;
        return $retval3; //@line 189 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _conv_string_to_utf8($str) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $str_addr;
        var $retval;
        var $0;
        $str_addr=$str;
        var $1=$str_addr; //@line 204 "pyexpat.c"
        var $2=($1)==0; //@line 204 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 204 "pyexpat.c"
      case 1: // $bb
        var $3=HEAP[__Py_NoneStruct]; //@line 205 "pyexpat.c"
        var $4=($3) + 1; //@line 205 "pyexpat.c"
        HEAP[__Py_NoneStruct]=$4; //@line 205 "pyexpat.c"
        $0=__Py_NoneStruct; //@line 206 "pyexpat.c"
        __label__ = 3; break; //@line 206 "pyexpat.c"
      case 2: // $bb1
        var $5=$str_addr; //@line 208 "pyexpat.c"
        var $6=_PyString_FromString($5); //@line 208 "pyexpat.c"
        $0=$6; //@line 208 "pyexpat.c"
        __label__ = 3; break; //@line 208 "pyexpat.c"
      case 3: // $bb2
        var $7=$0; //@line 206 "pyexpat.c"
        $retval=$7; //@line 206 "pyexpat.c"
        var $retval3=$retval; //@line 206 "pyexpat.c"
        ;
        return $retval3; //@line 206 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _conv_string_len_to_utf8($str, $len) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $str_addr;
        var $len_addr;
        var $retval;
        var $0;
        $str_addr=$str;
        $len_addr=$len;
        var $1=$str_addr; //@line 217 "pyexpat.c"
        var $2=($1)==0; //@line 217 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 217 "pyexpat.c"
      case 1: // $bb
        var $3=HEAP[__Py_NoneStruct]; //@line 218 "pyexpat.c"
        var $4=($3) + 1; //@line 218 "pyexpat.c"
        HEAP[__Py_NoneStruct]=$4; //@line 218 "pyexpat.c"
        $0=__Py_NoneStruct; //@line 219 "pyexpat.c"
        __label__ = 3; break; //@line 219 "pyexpat.c"
      case 2: // $bb1
        var $5=$str_addr; //@line 221 "pyexpat.c"
        var $6=$len_addr; //@line 221 "pyexpat.c"
        var $7=_PyString_FromStringAndSize($5, $6); //@line 221 "pyexpat.c"
        $0=$7; //@line 221 "pyexpat.c"
        __label__ = 3; break; //@line 221 "pyexpat.c"
      case 3: // $bb2
        var $8=$0; //@line 219 "pyexpat.c"
        $retval=$8; //@line 219 "pyexpat.c"
        var $retval3=$retval; //@line 219 "pyexpat.c"
        ;
        return $retval3; //@line 219 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _error_external_entity_ref_handler($parser, $context, $base, $systemId, $publicId) {
    ;
    var __label__;
  
    var $parser_addr;
    var $context_addr;
    var $base_addr;
    var $systemId_addr;
    var $retval;
    var $0;
    $parser_addr=$parser;
    $context_addr=$context;
    $base_addr=$base;
    $systemId_addr=$systemId;
    $0=0; //@line 238 "pyexpat.c"
    var $1=$0; //@line 238 "pyexpat.c"
    $retval=$1; //@line 238 "pyexpat.c"
    var $retval1=$retval; //@line 238 "pyexpat.c"
    ;
    return $retval1; //@line 238 "pyexpat.c"
  }
  

  function _noop_character_data_handler($userData, $data, $len) {
    ;
    var __label__;
  
    var $userData_addr;
    var $data_addr;
    $userData_addr=$userData;
    $data_addr=$data;
    ;
    return; //@line 251 "pyexpat.c"
  }
  

  function _flag_error($self) {
    ;
    var __label__;
  
    var $self_addr;
    $self_addr=$self;
    var $0=$self_addr; //@line 256 "pyexpat.c"
    _clear_handlers($0, 0); //@line 256 "pyexpat.c"
    var $1=$self_addr; //@line 257 "pyexpat.c"
    var $2=$1+8; //@line 257 "pyexpat.c"
    var $3=HEAP[$2]; //@line 257 "pyexpat.c"
    _PyExpat_XML_SetExternalEntityRefHandler($3, (FUNCTION_TABLE_OFFSET + 2)); //@line 257 "pyexpat.c"
    ;
    return; //@line 259 "pyexpat.c"
  }
  

  function _getcode($slot, $func_name, $lineno) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $slot_addr;
        var $func_name_addr;
        var $lineno_addr;
        var $retval;
        var $0;
        $slot_addr=$slot;
        $func_name_addr=$func_name;
        $lineno_addr=$lineno;
        var $1=$slot_addr; //@line 264 "pyexpat.c"
        var $2=_handler_info+$1*20; //@line 264 "pyexpat.c"
        var $3=$2+12; //@line 264 "pyexpat.c"
        var $4=HEAP[$3]; //@line 264 "pyexpat.c"
        var $5=($4)==0; //@line 264 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 264 "pyexpat.c"
      case 1: // $bb
        var $6=$slot_addr; //@line 265 "pyexpat.c"
        var $7=$func_name_addr; //@line 265 "pyexpat.c"
        var $8=$lineno_addr; //@line 265 "pyexpat.c"
        var $9=_PyCode_NewEmpty(__str6, $7, $8); //@line 265 "pyexpat.c"
        var $10=_handler_info+$6*20; //@line 265 "pyexpat.c"
        var $11=$10+12; //@line 265 "pyexpat.c"
        HEAP[$11]=$9; //@line 265 "pyexpat.c"
        __label__ = 2; break; //@line 265 "pyexpat.c"
      case 2: // $bb1
        var $12=$slot_addr; //@line 268 "pyexpat.c"
        var $13=_handler_info+$12*20; //@line 268 "pyexpat.c"
        var $14=$13+12; //@line 268 "pyexpat.c"
        var $15=HEAP[$14]; //@line 268 "pyexpat.c"
        $0=$15; //@line 268 "pyexpat.c"
        var $16=$0; //@line 268 "pyexpat.c"
        $retval=$16; //@line 268 "pyexpat.c"
        var $retval2=$retval; //@line 268 "pyexpat.c"
        ;
        return $retval2; //@line 268 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _trace_frame($tstate, $f, $code, $val) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $tstate_addr;
        var $f_addr;
        var $code_addr;
        var $val_addr;
        var $retval;
        var $iftmp_11;
        var $iftmp_10;
        var $0;
        var $result;
        $tstate_addr=$tstate;
        $f_addr=$f;
        $code_addr=$code;
        $val_addr=$val;
        $result=0; //@line 275 "pyexpat.c"
        var $1=$tstate_addr; //@line 276 "pyexpat.c"
        var $2=$1+20; //@line 276 "pyexpat.c"
        var $3=HEAP[$2]; //@line 276 "pyexpat.c"
        var $4=($3)==0; //@line 276 "pyexpat.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 276 "pyexpat.c"
      case 1: // $bb
        var $5=$tstate_addr; //@line 276 "pyexpat.c"
        var $6=$5+16; //@line 276 "pyexpat.c"
        var $7=HEAP[$6]; //@line 276 "pyexpat.c"
        var $8=($7)!=0; //@line 276 "pyexpat.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 276 "pyexpat.c"
      case 2: // $bb1
        $0=0; //@line 277 "pyexpat.c"
        __label__ = 17; break; //@line 277 "pyexpat.c"
      case 3: // $bb2
        var $9=$tstate_addr; //@line 278 "pyexpat.c"
        var $10=$9+24; //@line 278 "pyexpat.c"
        var $11=HEAP[$10]; //@line 278 "pyexpat.c"
        var $12=($11)!=0; //@line 278 "pyexpat.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 10; break; } //@line 278 "pyexpat.c"
      case 4: // $bb3
        var $13=$tstate_addr; //@line 279 "pyexpat.c"
        var $14=$13+16; //@line 279 "pyexpat.c"
        var $15=HEAP[$14]; //@line 279 "pyexpat.c"
        var $16=($15) + 1; //@line 279 "pyexpat.c"
        var $17=$tstate_addr; //@line 279 "pyexpat.c"
        var $18=$17+16; //@line 279 "pyexpat.c"
        HEAP[$18]=$16; //@line 279 "pyexpat.c"
        var $19=$tstate_addr; //@line 280 "pyexpat.c"
        var $20=$19+24; //@line 280 "pyexpat.c"
        var $21=HEAP[$20]; //@line 280 "pyexpat.c"
        var $22=$tstate_addr; //@line 280 "pyexpat.c"
        var $23=$22+32; //@line 280 "pyexpat.c"
        var $24=HEAP[$23]; //@line 280 "pyexpat.c"
        var $25=$f_addr; //@line 280 "pyexpat.c"
        var $26=$code_addr; //@line 280 "pyexpat.c"
        var $27=$val_addr; //@line 280 "pyexpat.c"
        var $28=FUNCTION_TABLE[$21]($24, $25, $26, $27); //@line 280 "pyexpat.c"
        $result=$28; //@line 280 "pyexpat.c"
        var $29=$tstate_addr; //@line 282 "pyexpat.c"
        var $30=$29+28; //@line 282 "pyexpat.c"
        var $31=HEAP[$30]; //@line 282 "pyexpat.c"
        var $32=($31)!=0; //@line 282 "pyexpat.c"
        if ($32) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 282 "pyexpat.c"
      case 5: // $bb4
        var $33=$tstate_addr; //@line 282 "pyexpat.c"
        var $34=$33+24; //@line 282 "pyexpat.c"
        var $35=HEAP[$34]; //@line 282 "pyexpat.c"
        var $36=($35)!=0; //@line 282 "pyexpat.c"
        if ($36) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 282 "pyexpat.c"
      case 6: // $bb5
        $iftmp_10=1; //@line 282 "pyexpat.c"
        __label__ = 8; break; //@line 282 "pyexpat.c"
      case 7: // $bb6
        $iftmp_10=0; //@line 282 "pyexpat.c"
        __label__ = 8; break; //@line 282 "pyexpat.c"
      case 8: // $bb7
        var $37=$tstate_addr; //@line 282 "pyexpat.c"
        var $38=$37+20; //@line 282 "pyexpat.c"
        var $39=$iftmp_10; //@line 282 "pyexpat.c"
        HEAP[$38]=$39; //@line 282 "pyexpat.c"
        var $40=$tstate_addr; //@line 284 "pyexpat.c"
        var $41=$40+16; //@line 284 "pyexpat.c"
        var $42=HEAP[$41]; //@line 284 "pyexpat.c"
        var $43=($42) - 1; //@line 284 "pyexpat.c"
        var $44=$tstate_addr; //@line 284 "pyexpat.c"
        var $45=$44+16; //@line 284 "pyexpat.c"
        HEAP[$45]=$43; //@line 284 "pyexpat.c"
        var $46=$result; //@line 285 "pyexpat.c"
        var $47=($46)!=0; //@line 285 "pyexpat.c"
        if ($47) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 285 "pyexpat.c"
      case 9: // $bb8
        var $48=$result; //@line 286 "pyexpat.c"
        $0=$48; //@line 286 "pyexpat.c"
        __label__ = 17; break; //@line 286 "pyexpat.c"
      case 10: // $bb9
        var $49=$tstate_addr; //@line 288 "pyexpat.c"
        var $50=$49+28; //@line 288 "pyexpat.c"
        var $51=HEAP[$50]; //@line 288 "pyexpat.c"
        var $52=($51)!=0; //@line 288 "pyexpat.c"
        if ($52) { __label__ = 11; break; } else { __label__ = 16; break; } //@line 288 "pyexpat.c"
      case 11: // $bb10
        var $53=$tstate_addr; //@line 289 "pyexpat.c"
        var $54=$53+16; //@line 289 "pyexpat.c"
        var $55=HEAP[$54]; //@line 289 "pyexpat.c"
        var $56=($55) + 1; //@line 289 "pyexpat.c"
        var $57=$tstate_addr; //@line 289 "pyexpat.c"
        var $58=$57+16; //@line 289 "pyexpat.c"
        HEAP[$58]=$56; //@line 289 "pyexpat.c"
        var $59=$tstate_addr; //@line 290 "pyexpat.c"
        var $60=$59+28; //@line 290 "pyexpat.c"
        var $61=HEAP[$60]; //@line 290 "pyexpat.c"
        var $62=$tstate_addr; //@line 290 "pyexpat.c"
        var $63=$62+36; //@line 290 "pyexpat.c"
        var $64=HEAP[$63]; //@line 290 "pyexpat.c"
        var $65=$f_addr; //@line 290 "pyexpat.c"
        var $66=$code_addr; //@line 290 "pyexpat.c"
        var $67=$val_addr; //@line 290 "pyexpat.c"
        var $68=FUNCTION_TABLE[$61]($64, $65, $66, $67); //@line 290 "pyexpat.c"
        $result=$68; //@line 290 "pyexpat.c"
        var $69=$tstate_addr; //@line 292 "pyexpat.c"
        var $70=$69+28; //@line 292 "pyexpat.c"
        var $71=HEAP[$70]; //@line 292 "pyexpat.c"
        var $72=($71)!=0; //@line 292 "pyexpat.c"
        if ($72) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 292 "pyexpat.c"
      case 12: // $bb11
        var $73=$tstate_addr; //@line 292 "pyexpat.c"
        var $74=$73+24; //@line 292 "pyexpat.c"
        var $75=HEAP[$74]; //@line 292 "pyexpat.c"
        var $76=($75)!=0; //@line 292 "pyexpat.c"
        if ($76) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 292 "pyexpat.c"
      case 13: // $bb12
        $iftmp_11=1; //@line 292 "pyexpat.c"
        __label__ = 15; break; //@line 292 "pyexpat.c"
      case 14: // $bb13
        $iftmp_11=0; //@line 292 "pyexpat.c"
        __label__ = 15; break; //@line 292 "pyexpat.c"
      case 15: // $bb14
        var $77=$tstate_addr; //@line 292 "pyexpat.c"
        var $78=$77+20; //@line 292 "pyexpat.c"
        var $79=$iftmp_11; //@line 292 "pyexpat.c"
        HEAP[$78]=$79; //@line 292 "pyexpat.c"
        var $80=$tstate_addr; //@line 294 "pyexpat.c"
        var $81=$80+16; //@line 294 "pyexpat.c"
        var $82=HEAP[$81]; //@line 294 "pyexpat.c"
        var $83=($82) - 1; //@line 294 "pyexpat.c"
        var $84=$tstate_addr; //@line 294 "pyexpat.c"
        var $85=$84+16; //@line 294 "pyexpat.c"
        HEAP[$85]=$83; //@line 294 "pyexpat.c"
        __label__ = 16; break; //@line 294 "pyexpat.c"
      case 16: // $bb15
        var $86=$result; //@line 296 "pyexpat.c"
        $0=$86; //@line 296 "pyexpat.c"
        __label__ = 17; break; //@line 296 "pyexpat.c"
      case 17: // $bb16
        var $87=$0; //@line 277 "pyexpat.c"
        $retval=$87; //@line 277 "pyexpat.c"
        var $retval17=$retval; //@line 277 "pyexpat.c"
        ;
        return $retval17; //@line 277 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _trace_frame_exc($tstate, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $tstate_addr;
        var $f_addr;
        var $retval;
        var $0;
        var $type=__stackBase__;
        var $value=__stackBase__+4;
        var $traceback=__stackBase__+8;
        var $arg;
        var $err;
        $tstate_addr=$tstate;
        $f_addr=$f;
        var $1=$tstate_addr; //@line 305 "pyexpat.c"
        var $2=$1+28; //@line 305 "pyexpat.c"
        var $3=HEAP[$2]; //@line 305 "pyexpat.c"
        var $4=($3)==0; //@line 305 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 305 "pyexpat.c"
      case 1: // $bb
        $0=0; //@line 306 "pyexpat.c"
        __label__ = 20; break; //@line 306 "pyexpat.c"
      case 2: // $bb1
        _PyErr_Fetch($type, $value, $traceback); //@line 308 "pyexpat.c"
        var $5=HEAP[$value]; //@line 309 "pyexpat.c"
        var $6=($5)==0; //@line 309 "pyexpat.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 309 "pyexpat.c"
      case 3: // $bb2
        HEAP[$value]=__Py_NoneStruct; //@line 310 "pyexpat.c"
        var $7=HEAP[$value]; //@line 311 "pyexpat.c"
        var $8=$7; //@line 311 "pyexpat.c"
        var $9=HEAP[$8]; //@line 311 "pyexpat.c"
        var $10=($9) + 1; //@line 311 "pyexpat.c"
        var $11=$7; //@line 311 "pyexpat.c"
        HEAP[$11]=$10; //@line 311 "pyexpat.c"
        __label__ = 4; break; //@line 311 "pyexpat.c"
      case 4: // $bb3
        var $12=HEAP[$traceback]; //@line 316 "pyexpat.c"
        var $13=HEAP[$value]; //@line 316 "pyexpat.c"
        var $14=HEAP[$type]; //@line 316 "pyexpat.c"
        var $15=_PyTuple_Pack(3, allocate([$14,0,0,0,$13,0,0,0,$12,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 316 "pyexpat.c"
        $arg=$15; //@line 316 "pyexpat.c"
        var $16=($15)==0; //@line 318 "pyexpat.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 318 "pyexpat.c"
      case 5: // $bb4
        var $17=HEAP[$traceback]; //@line 319 "pyexpat.c"
        var $18=HEAP[$value]; //@line 319 "pyexpat.c"
        var $19=HEAP[$type]; //@line 319 "pyexpat.c"
        _PyErr_Restore($19, $18, $17); //@line 319 "pyexpat.c"
        $0=0; //@line 320 "pyexpat.c"
        __label__ = 20; break; //@line 320 "pyexpat.c"
      case 6: // $bb5
        var $20=$tstate_addr; //@line 322 "pyexpat.c"
        var $21=$f_addr; //@line 322 "pyexpat.c"
        var $22=$arg; //@line 322 "pyexpat.c"
        var $23=_trace_frame($20, $21, 1, $22); //@line 322 "pyexpat.c"
        $err=$23; //@line 322 "pyexpat.c"
        var $24=$arg; //@line 323 "pyexpat.c"
        var $25=$24; //@line 323 "pyexpat.c"
        var $26=HEAP[$25]; //@line 323 "pyexpat.c"
        var $27=($26) - 1; //@line 323 "pyexpat.c"
        var $28=$arg; //@line 323 "pyexpat.c"
        var $29=$28; //@line 323 "pyexpat.c"
        HEAP[$29]=$27; //@line 323 "pyexpat.c"
        var $30=$arg; //@line 323 "pyexpat.c"
        var $31=$30; //@line 323 "pyexpat.c"
        var $32=HEAP[$31]; //@line 323 "pyexpat.c"
        var $33=($32)==0; //@line 323 "pyexpat.c"
        if ($33) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 323 "pyexpat.c"
      case 7: // $bb6
        var $34=$arg; //@line 323 "pyexpat.c"
        var $35=$34+4; //@line 323 "pyexpat.c"
        var $36=HEAP[$35]; //@line 323 "pyexpat.c"
        var $37=$36+24; //@line 323 "pyexpat.c"
        var $38=HEAP[$37]; //@line 323 "pyexpat.c"
        var $39=$arg; //@line 323 "pyexpat.c"
        FUNCTION_TABLE[$38]($39); //@line 323 "pyexpat.c"
        __label__ = 8; break; //@line 323 "pyexpat.c"
      case 8: // $bb7
        var $40=$err; //@line 324 "pyexpat.c"
        var $41=($40)==0; //@line 324 "pyexpat.c"
        if ($41) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 324 "pyexpat.c"
      case 9: // $bb8
        var $42=HEAP[$traceback]; //@line 325 "pyexpat.c"
        var $43=HEAP[$value]; //@line 325 "pyexpat.c"
        var $44=HEAP[$type]; //@line 325 "pyexpat.c"
        _PyErr_Restore($44, $43, $42); //@line 325 "pyexpat.c"
        __label__ = 19; break; //@line 325 "pyexpat.c"
      case 10: // $bb9
        var $45=HEAP[$type]; //@line 327 "pyexpat.c"
        var $46=($45)!=0; //@line 327 "pyexpat.c"
        if ($46) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 327 "pyexpat.c"
      case 11: // $bb10
        var $47=HEAP[$type]; //@line 327 "pyexpat.c"
        var $48=$47; //@line 327 "pyexpat.c"
        var $49=HEAP[$48]; //@line 327 "pyexpat.c"
        var $50=($49) - 1; //@line 327 "pyexpat.c"
        var $51=$47; //@line 327 "pyexpat.c"
        HEAP[$51]=$50; //@line 327 "pyexpat.c"
        var $52=$47; //@line 327 "pyexpat.c"
        var $53=HEAP[$52]; //@line 327 "pyexpat.c"
        var $54=($53)==0; //@line 327 "pyexpat.c"
        if ($54) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 327 "pyexpat.c"
      case 12: // $bb11
        var $55=HEAP[$type]; //@line 327 "pyexpat.c"
        var $56=$55+4; //@line 327 "pyexpat.c"
        var $57=HEAP[$56]; //@line 327 "pyexpat.c"
        var $58=$57+24; //@line 327 "pyexpat.c"
        var $59=HEAP[$58]; //@line 327 "pyexpat.c"
        var $60=HEAP[$type]; //@line 327 "pyexpat.c"
        FUNCTION_TABLE[$59]($60); //@line 327 "pyexpat.c"
        __label__ = 13; break; //@line 327 "pyexpat.c"
      case 13: // $bb12
        var $61=HEAP[$value]; //@line 328 "pyexpat.c"
        var $62=($61)!=0; //@line 328 "pyexpat.c"
        if ($62) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 328 "pyexpat.c"
      case 14: // $bb13
        var $63=HEAP[$value]; //@line 328 "pyexpat.c"
        var $64=$63; //@line 328 "pyexpat.c"
        var $65=HEAP[$64]; //@line 328 "pyexpat.c"
        var $66=($65) - 1; //@line 328 "pyexpat.c"
        var $67=$63; //@line 328 "pyexpat.c"
        HEAP[$67]=$66; //@line 328 "pyexpat.c"
        var $68=$63; //@line 328 "pyexpat.c"
        var $69=HEAP[$68]; //@line 328 "pyexpat.c"
        var $70=($69)==0; //@line 328 "pyexpat.c"
        if ($70) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 328 "pyexpat.c"
      case 15: // $bb14
        var $71=HEAP[$value]; //@line 328 "pyexpat.c"
        var $72=$71+4; //@line 328 "pyexpat.c"
        var $73=HEAP[$72]; //@line 328 "pyexpat.c"
        var $74=$73+24; //@line 328 "pyexpat.c"
        var $75=HEAP[$74]; //@line 328 "pyexpat.c"
        var $76=HEAP[$value]; //@line 328 "pyexpat.c"
        FUNCTION_TABLE[$75]($76); //@line 328 "pyexpat.c"
        __label__ = 16; break; //@line 328 "pyexpat.c"
      case 16: // $bb15
        var $77=HEAP[$traceback]; //@line 329 "pyexpat.c"
        var $78=($77)!=0; //@line 329 "pyexpat.c"
        if ($78) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 329 "pyexpat.c"
      case 17: // $bb16
        var $79=HEAP[$traceback]; //@line 329 "pyexpat.c"
        var $80=$79; //@line 329 "pyexpat.c"
        var $81=HEAP[$80]; //@line 329 "pyexpat.c"
        var $82=($81) - 1; //@line 329 "pyexpat.c"
        var $83=$79; //@line 329 "pyexpat.c"
        HEAP[$83]=$82; //@line 329 "pyexpat.c"
        var $84=$79; //@line 329 "pyexpat.c"
        var $85=HEAP[$84]; //@line 329 "pyexpat.c"
        var $86=($85)==0; //@line 329 "pyexpat.c"
        if ($86) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 329 "pyexpat.c"
      case 18: // $bb17
        var $87=HEAP[$traceback]; //@line 329 "pyexpat.c"
        var $88=$87+4; //@line 329 "pyexpat.c"
        var $89=HEAP[$88]; //@line 329 "pyexpat.c"
        var $90=$89+24; //@line 329 "pyexpat.c"
        var $91=HEAP[$90]; //@line 329 "pyexpat.c"
        var $92=HEAP[$traceback]; //@line 329 "pyexpat.c"
        FUNCTION_TABLE[$91]($92); //@line 329 "pyexpat.c"
        __label__ = 19; break; //@line 329 "pyexpat.c"
      case 19: // $bb18
        var $93=$err; //@line 331 "pyexpat.c"
        $0=$93; //@line 331 "pyexpat.c"
        __label__ = 20; break; //@line 331 "pyexpat.c"
      case 20: // $bb19
        var $94=$0; //@line 306 "pyexpat.c"
        $retval=$94; //@line 306 "pyexpat.c"
        var $retval20=$retval; //@line 306 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval20; //@line 306 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _call_with_frame($c, $func, $args, $self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $c_addr;
        var $func_addr;
        var $args_addr;
        var $self_addr;
        var $retval;
        var $0;
        var $tstate;
        var $f;
        var $res;
        $c_addr=$c;
        $func_addr=$func;
        $args_addr=$args;
        $self_addr=$self;
        var $1=HEAP[__PyThreadState_Current]; //@line 339 "pyexpat.c"
        $tstate=$1; //@line 339 "pyexpat.c"
        var $2=$c_addr; //@line 343 "pyexpat.c"
        var $3=($2)==0; //@line 343 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 343 "pyexpat.c"
      case 1: // $bb
        $0=0; //@line 344 "pyexpat.c"
        __label__ = 19; break; //@line 344 "pyexpat.c"
      case 2: // $bb1
        var $4=_PyEval_GetGlobals(); //@line 346 "pyexpat.c"
        var $5=$tstate; //@line 346 "pyexpat.c"
        var $6=$c_addr; //@line 346 "pyexpat.c"
        var $7=_PyFrame_New($5, $6, $4, 0); //@line 346 "pyexpat.c"
        $f=$7; //@line 346 "pyexpat.c"
        var $8=$f; //@line 347 "pyexpat.c"
        var $9=($8)==0; //@line 347 "pyexpat.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 347 "pyexpat.c"
      case 3: // $bb2
        $0=0; //@line 348 "pyexpat.c"
        __label__ = 19; break; //@line 348 "pyexpat.c"
      case 4: // $bb3
        var $10=$tstate; //@line 349 "pyexpat.c"
        var $11=$10+8; //@line 349 "pyexpat.c"
        var $12=$f; //@line 349 "pyexpat.c"
        HEAP[$11]=$12; //@line 349 "pyexpat.c"
        var $13=$tstate; //@line 351 "pyexpat.c"
        var $14=$f; //@line 351 "pyexpat.c"
        var $15=_trace_frame($13, $14, 0, __Py_NoneStruct); //@line 351 "pyexpat.c"
        var $16=($15) < 0; //@line 351 "pyexpat.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 351 "pyexpat.c"
      case 5: // $bb4
        $0=0; //@line 352 "pyexpat.c"
        __label__ = 19; break; //@line 352 "pyexpat.c"
      case 6: // $bb5
        var $17=$func_addr; //@line 355 "pyexpat.c"
        var $18=$args_addr; //@line 355 "pyexpat.c"
        var $19=_PyEval_CallObjectWithKeywords($17, $18, 0); //@line 355 "pyexpat.c"
        $res=$19; //@line 355 "pyexpat.c"
        var $20=$res; //@line 356 "pyexpat.c"
        var $21=($20)==0; //@line 356 "pyexpat.c"
        var $22=$tstate; //@line 357 "pyexpat.c"
        if ($21) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 356 "pyexpat.c"
      case 7: // $bb6
        var $23=$22+48; //@line 357 "pyexpat.c"
        var $24=HEAP[$23]; //@line 357 "pyexpat.c"
        var $25=($24)==0; //@line 357 "pyexpat.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 357 "pyexpat.c"
      case 8: // $bb7
        var $26=$f; //@line 358 "pyexpat.c"
        var $27=_PyTraceBack_Here($26); //@line 358 "pyexpat.c"
        __label__ = 9; break; //@line 358 "pyexpat.c"
      case 9: // $bb8
        var $28=$self_addr; //@line 359 "pyexpat.c"
        var $29=$28+8; //@line 359 "pyexpat.c"
        var $30=HEAP[$29]; //@line 359 "pyexpat.c"
        var $31=_PyExpat_XML_StopParser($30, 0); //@line 359 "pyexpat.c"
        var $32=$tstate; //@line 361 "pyexpat.c"
        var $33=$f; //@line 361 "pyexpat.c"
        var $34=_trace_frame_exc($32, $33); //@line 361 "pyexpat.c"
        var $35=($34) < 0; //@line 361 "pyexpat.c"
        if ($35) { __label__ = 10; break; } else { __label__ = 16; break; } //@line 361 "pyexpat.c"
      case 10: // $bb9
        $0=0; //@line 362 "pyexpat.c"
        __label__ = 19; break; //@line 362 "pyexpat.c"
      case 11: // $bb11
        var $36=$f; //@line 366 "pyexpat.c"
        var $37=$res; //@line 366 "pyexpat.c"
        var $38=_trace_frame($22, $36, 3, $37); //@line 366 "pyexpat.c"
        var $39=($38) < 0; //@line 366 "pyexpat.c"
        if ($39) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 366 "pyexpat.c"
      case 12: // $bb12
        var $40=$res; //@line 367 "pyexpat.c"
        var $41=($40)!=0; //@line 367 "pyexpat.c"
        if ($41) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 367 "pyexpat.c"
      case 13: // $bb13
        var $42=$res; //@line 367 "pyexpat.c"
        var $43=$42; //@line 367 "pyexpat.c"
        var $44=HEAP[$43]; //@line 367 "pyexpat.c"
        var $45=($44) - 1; //@line 367 "pyexpat.c"
        var $46=$res; //@line 367 "pyexpat.c"
        var $47=$46; //@line 367 "pyexpat.c"
        HEAP[$47]=$45; //@line 367 "pyexpat.c"
        var $48=$res; //@line 367 "pyexpat.c"
        var $49=$48; //@line 367 "pyexpat.c"
        var $50=HEAP[$49]; //@line 367 "pyexpat.c"
        var $51=($50)==0; //@line 367 "pyexpat.c"
        if ($51) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 367 "pyexpat.c"
      case 14: // $bb14
        var $52=$res; //@line 367 "pyexpat.c"
        var $53=$52+4; //@line 367 "pyexpat.c"
        var $54=HEAP[$53]; //@line 367 "pyexpat.c"
        var $55=$54+24; //@line 367 "pyexpat.c"
        var $56=HEAP[$55]; //@line 367 "pyexpat.c"
        var $57=$res; //@line 367 "pyexpat.c"
        FUNCTION_TABLE[$56]($57); //@line 367 "pyexpat.c"
        __label__ = 15; break; //@line 367 "pyexpat.c"
      case 15: // $bb15
        $res=0; //@line 368 "pyexpat.c"
        __label__ = 16; break; //@line 368 "pyexpat.c"
      case 16: // $bb16
        var $58=$f; //@line 374 "pyexpat.c"
        var $59=$58+12; //@line 374 "pyexpat.c"
        var $60=HEAP[$59]; //@line 374 "pyexpat.c"
        var $61=$tstate; //@line 374 "pyexpat.c"
        var $62=$61+8; //@line 374 "pyexpat.c"
        HEAP[$62]=$60; //@line 374 "pyexpat.c"
        var $63=$f; //@line 375 "pyexpat.c"
        var $64=$63; //@line 375 "pyexpat.c"
        var $65=$64; //@line 375 "pyexpat.c"
        var $66=HEAP[$65]; //@line 375 "pyexpat.c"
        var $67=($66) - 1; //@line 375 "pyexpat.c"
        var $68=$64; //@line 375 "pyexpat.c"
        HEAP[$68]=$67; //@line 375 "pyexpat.c"
        var $69=$64; //@line 375 "pyexpat.c"
        var $70=HEAP[$69]; //@line 375 "pyexpat.c"
        var $71=($70)==0; //@line 375 "pyexpat.c"
        if ($71) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 375 "pyexpat.c"
      case 17: // $bb17
        var $72=$f; //@line 375 "pyexpat.c"
        var $73=$72; //@line 375 "pyexpat.c"
        var $74=$73+4; //@line 375 "pyexpat.c"
        var $75=HEAP[$74]; //@line 375 "pyexpat.c"
        var $76=$75+24; //@line 375 "pyexpat.c"
        var $77=HEAP[$76]; //@line 375 "pyexpat.c"
        var $78=$f; //@line 375 "pyexpat.c"
        var $79=$78; //@line 375 "pyexpat.c"
        FUNCTION_TABLE[$77]($79); //@line 375 "pyexpat.c"
        __label__ = 18; break; //@line 375 "pyexpat.c"
      case 18: // $bb18
        var $80=$res; //@line 376 "pyexpat.c"
        $0=$80; //@line 376 "pyexpat.c"
        __label__ = 19; break; //@line 376 "pyexpat.c"
      case 19: // $bb19
        var $81=$0; //@line 344 "pyexpat.c"
        $retval=$81; //@line 344 "pyexpat.c"
        var $retval20=$retval; //@line 344 "pyexpat.c"
        ;
        return $retval20; //@line 344 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _string_intern($self, $str) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $str_addr;
        var $retval;
        var $0;
        var $iftmp_38;
        var $result;
        var $value;
        $self_addr=$self;
        $str_addr=$str;
        var $1=$self_addr; //@line 390 "pyexpat.c"
        var $2=$1+12; //@line 390 "pyexpat.c"
        var $3=HEAP[$2]; //@line 390 "pyexpat.c"
        var $4=($3)!=0; //@line 390 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 390 "pyexpat.c"
      case 1: // $bb
        $iftmp_38=(FUNCTION_TABLE_OFFSET + 4); //@line 390 "pyexpat.c"
        __label__ = 3; break; //@line 390 "pyexpat.c"
      case 2: // $bb1
        $iftmp_38=(FUNCTION_TABLE_OFFSET + 6); //@line 390 "pyexpat.c"
        __label__ = 3; break; //@line 390 "pyexpat.c"
      case 3: // $bb2
        var $5=$iftmp_38; //@line 390 "pyexpat.c"
        var $6=$str_addr; //@line 390 "pyexpat.c"
        var $7=FUNCTION_TABLE[$5]($6); //@line 390 "pyexpat.c"
        $result=$7; //@line 390 "pyexpat.c"
        var $8=($7)==0; //@line 393 "pyexpat.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 393 "pyexpat.c"
      case 4: // $bb3
        var $9=$result; //@line 394 "pyexpat.c"
        $0=$9; //@line 394 "pyexpat.c"
        __label__ = 14; break; //@line 394 "pyexpat.c"
      case 5: // $bb4
        var $10=$self_addr; //@line 395 "pyexpat.c"
        var $11=$10+44; //@line 395 "pyexpat.c"
        var $12=HEAP[$11]; //@line 395 "pyexpat.c"
        var $13=($12)==0; //@line 395 "pyexpat.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 395 "pyexpat.c"
      case 6: // $bb5
        var $14=$result; //@line 396 "pyexpat.c"
        $0=$14; //@line 396 "pyexpat.c"
        __label__ = 14; break; //@line 396 "pyexpat.c"
      case 7: // $bb6
        var $15=$self_addr; //@line 397 "pyexpat.c"
        var $16=$15+44; //@line 397 "pyexpat.c"
        var $17=HEAP[$16]; //@line 397 "pyexpat.c"
        var $18=$result; //@line 397 "pyexpat.c"
        var $19=_PyDict_GetItem($17, $18); //@line 397 "pyexpat.c"
        $value=$19; //@line 397 "pyexpat.c"
        var $20=$value; //@line 398 "pyexpat.c"
        var $21=($20)==0; //@line 398 "pyexpat.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 398 "pyexpat.c"
      case 8: // $bb7
        var $22=$self_addr; //@line 399 "pyexpat.c"
        var $23=$22+44; //@line 399 "pyexpat.c"
        var $24=HEAP[$23]; //@line 399 "pyexpat.c"
        var $25=$result; //@line 399 "pyexpat.c"
        var $26=$result; //@line 399 "pyexpat.c"
        var $27=_PyDict_SetItem($24, $25, $26); //@line 399 "pyexpat.c"
        var $28=($27)==0; //@line 399 "pyexpat.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 399 "pyexpat.c"
      case 9: // $bb8
        var $29=$result; //@line 400 "pyexpat.c"
        $0=$29; //@line 400 "pyexpat.c"
        __label__ = 14; break; //@line 400 "pyexpat.c"
      case 10: // $bb9
        $0=0; //@line 402 "pyexpat.c"
        __label__ = 14; break; //@line 402 "pyexpat.c"
      case 11: // $bb10
        var $30=$value; //@line 404 "pyexpat.c"
        var $31=$30; //@line 404 "pyexpat.c"
        var $32=HEAP[$31]; //@line 404 "pyexpat.c"
        var $33=($32) + 1; //@line 404 "pyexpat.c"
        var $34=$value; //@line 404 "pyexpat.c"
        var $35=$34; //@line 404 "pyexpat.c"
        HEAP[$35]=$33; //@line 404 "pyexpat.c"
        var $36=$result; //@line 405 "pyexpat.c"
        var $37=$36; //@line 405 "pyexpat.c"
        var $38=HEAP[$37]; //@line 405 "pyexpat.c"
        var $39=($38) - 1; //@line 405 "pyexpat.c"
        var $40=$result; //@line 405 "pyexpat.c"
        var $41=$40; //@line 405 "pyexpat.c"
        HEAP[$41]=$39; //@line 405 "pyexpat.c"
        var $42=$result; //@line 405 "pyexpat.c"
        var $43=$42; //@line 405 "pyexpat.c"
        var $44=HEAP[$43]; //@line 405 "pyexpat.c"
        var $45=($44)==0; //@line 405 "pyexpat.c"
        if ($45) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 405 "pyexpat.c"
      case 12: // $bb11
        var $46=$result; //@line 405 "pyexpat.c"
        var $47=$46+4; //@line 405 "pyexpat.c"
        var $48=HEAP[$47]; //@line 405 "pyexpat.c"
        var $49=$48+24; //@line 405 "pyexpat.c"
        var $50=HEAP[$49]; //@line 405 "pyexpat.c"
        var $51=$result; //@line 405 "pyexpat.c"
        FUNCTION_TABLE[$50]($51); //@line 405 "pyexpat.c"
        __label__ = 13; break; //@line 405 "pyexpat.c"
      case 13: // $bb12
        var $52=$value; //@line 406 "pyexpat.c"
        $0=$52; //@line 406 "pyexpat.c"
        __label__ = 14; break; //@line 406 "pyexpat.c"
      case 14: // $bb13
        var $53=$0; //@line 394 "pyexpat.c"
        $retval=$53; //@line 394 "pyexpat.c"
        var $retval14=$retval; //@line 394 "pyexpat.c"
        ;
        return $retval14; //@line 394 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _call_character_handler($self, $buffer, $len) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $buffer_addr;
        var $len_addr;
        var $retval;
        var $iftmp_39;
        var $0;
        var $args;
        var $temp;
        $self_addr=$self;
        $buffer_addr=$buffer;
        $len_addr=$len;
        var $1=$self_addr; //@line 418 "pyexpat.c"
        var $2=_have_handler($1, 3); //@line 418 "pyexpat.c"
        var $3=($2)==0; //@line 418 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 418 "pyexpat.c"
      case 1: // $bb
        $0=-1; //@line 419 "pyexpat.c"
        __label__ = 18; break; //@line 419 "pyexpat.c"
      case 2: // $bb1
        var $4=_PyTuple_New(1); //@line 421 "pyexpat.c"
        $args=$4; //@line 421 "pyexpat.c"
        var $5=$args; //@line 422 "pyexpat.c"
        var $6=($5)==0; //@line 422 "pyexpat.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 422 "pyexpat.c"
      case 3: // $bb2
        $0=-1; //@line 423 "pyexpat.c"
        __label__ = 18; break; //@line 423 "pyexpat.c"
      case 4: // $bb3
        var $7=$self_addr; //@line 425 "pyexpat.c"
        var $8=$7+12; //@line 425 "pyexpat.c"
        var $9=HEAP[$8]; //@line 425 "pyexpat.c"
        var $10=($9)!=0; //@line 425 "pyexpat.c"
        var $11=$buffer_addr; //@line 425 "pyexpat.c"
        var $12=$len_addr; //@line 425 "pyexpat.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 425 "pyexpat.c"
      case 5: // $bb4
        var $13=_conv_string_len_to_unicode($11, $12); //@line 425 "pyexpat.c"
        $iftmp_39=$13; //@line 425 "pyexpat.c"
        __lastLabel__ = 5; __label__ = 7; break; //@line 425 "pyexpat.c"
      case 6: // $bb5
        var $14=_conv_string_len_to_utf8($11, $12); //@line 425 "pyexpat.c"
        $iftmp_39=$14; //@line 425 "pyexpat.c"
        __lastLabel__ = 6; __label__ = 7; break; //@line 425 "pyexpat.c"
      case 7: // $bb6
        var $15=__lastLabel__ == 6 ? $14 : ($13);
        $temp=$15; //@line 425 "pyexpat.c"
        var $16=($15)==0; //@line 431 "pyexpat.c"
        var $17=$args; //@line 432 "pyexpat.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 431 "pyexpat.c"
      case 8: // $bb7
        var $18=$17; //@line 432 "pyexpat.c"
        var $19=HEAP[$18]; //@line 432 "pyexpat.c"
        var $20=($19) - 1; //@line 432 "pyexpat.c"
        var $21=$args; //@line 432 "pyexpat.c"
        var $22=$21; //@line 432 "pyexpat.c"
        HEAP[$22]=$20; //@line 432 "pyexpat.c"
        var $23=$args; //@line 432 "pyexpat.c"
        var $24=$23; //@line 432 "pyexpat.c"
        var $25=HEAP[$24]; //@line 432 "pyexpat.c"
        var $26=($25)==0; //@line 432 "pyexpat.c"
        if ($26) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 432 "pyexpat.c"
      case 9: // $bb8
        var $27=$args; //@line 432 "pyexpat.c"
        var $28=$27+4; //@line 432 "pyexpat.c"
        var $29=HEAP[$28]; //@line 432 "pyexpat.c"
        var $30=$29+24; //@line 432 "pyexpat.c"
        var $31=HEAP[$30]; //@line 432 "pyexpat.c"
        var $32=$args; //@line 432 "pyexpat.c"
        FUNCTION_TABLE[$31]($32); //@line 432 "pyexpat.c"
        __label__ = 10; break; //@line 432 "pyexpat.c"
      case 10: // $bb9
        var $33=$self_addr; //@line 433 "pyexpat.c"
        _flag_error($33); //@line 433 "pyexpat.c"
        var $34=$self_addr; //@line 434 "pyexpat.c"
        var $35=$34+8; //@line 434 "pyexpat.c"
        var $36=HEAP[$35]; //@line 434 "pyexpat.c"
        _PyExpat_XML_SetCharacterDataHandler($36, (FUNCTION_TABLE_OFFSET + 8)); //@line 434 "pyexpat.c"
        $0=-1; //@line 436 "pyexpat.c"
        __label__ = 18; break; //@line 436 "pyexpat.c"
      case 11: // $bb10
        var $37=$17; //@line 438 "pyexpat.c"
        var $38=$37+12; //@line 438 "pyexpat.c"
        var $39=$38; //@line 438 "pyexpat.c"
        var $40=$temp; //@line 438 "pyexpat.c"
        HEAP[$39]=$40; //@line 438 "pyexpat.c"
        var $41=$self_addr; //@line 440 "pyexpat.c"
        var $42=$41+24; //@line 440 "pyexpat.c"
        HEAP[$42]=1; //@line 440 "pyexpat.c"
        var $43=$self_addr; //@line 441 "pyexpat.c"
        var $44=$43+48; //@line 441 "pyexpat.c"
        var $45=HEAP[$44]; //@line 441 "pyexpat.c"
        var $46=$45+12; //@line 441 "pyexpat.c"
        var $47=HEAP[$46]; //@line 441 "pyexpat.c"
        var $48=_getcode(3, __str7, 441); //@line 441 "pyexpat.c"
        var $49=$args; //@line 441 "pyexpat.c"
        var $50=$self_addr; //@line 441 "pyexpat.c"
        var $51=_call_with_frame($48, $47, $49, $50); //@line 441 "pyexpat.c"
        $temp=$51; //@line 441 "pyexpat.c"
        var $52=$self_addr; //@line 444 "pyexpat.c"
        var $53=$52+24; //@line 444 "pyexpat.c"
        HEAP[$53]=0; //@line 444 "pyexpat.c"
        var $54=$args; //@line 445 "pyexpat.c"
        var $55=$54; //@line 445 "pyexpat.c"
        var $56=HEAP[$55]; //@line 445 "pyexpat.c"
        var $57=($56) - 1; //@line 445 "pyexpat.c"
        var $58=$args; //@line 445 "pyexpat.c"
        var $59=$58; //@line 445 "pyexpat.c"
        HEAP[$59]=$57; //@line 445 "pyexpat.c"
        var $60=$args; //@line 445 "pyexpat.c"
        var $61=$60; //@line 445 "pyexpat.c"
        var $62=HEAP[$61]; //@line 445 "pyexpat.c"
        var $63=($62)==0; //@line 445 "pyexpat.c"
        if ($63) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 445 "pyexpat.c"
      case 12: // $bb11
        var $64=$args; //@line 445 "pyexpat.c"
        var $65=$64+4; //@line 445 "pyexpat.c"
        var $66=HEAP[$65]; //@line 445 "pyexpat.c"
        var $67=$66+24; //@line 445 "pyexpat.c"
        var $68=HEAP[$67]; //@line 445 "pyexpat.c"
        var $69=$args; //@line 445 "pyexpat.c"
        FUNCTION_TABLE[$68]($69); //@line 445 "pyexpat.c"
        __label__ = 13; break; //@line 445 "pyexpat.c"
      case 13: // $bb12
        var $70=$temp; //@line 446 "pyexpat.c"
        var $71=($70)==0; //@line 446 "pyexpat.c"
        if ($71) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 446 "pyexpat.c"
      case 14: // $bb13
        var $72=$self_addr; //@line 447 "pyexpat.c"
        _flag_error($72); //@line 447 "pyexpat.c"
        var $73=$self_addr; //@line 448 "pyexpat.c"
        var $74=$73+8; //@line 448 "pyexpat.c"
        var $75=HEAP[$74]; //@line 448 "pyexpat.c"
        _PyExpat_XML_SetCharacterDataHandler($75, (FUNCTION_TABLE_OFFSET + 8)); //@line 448 "pyexpat.c"
        $0=-1; //@line 450 "pyexpat.c"
        __label__ = 18; break; //@line 450 "pyexpat.c"
      case 15: // $bb14
        var $76=$temp; //@line 452 "pyexpat.c"
        var $77=$76; //@line 452 "pyexpat.c"
        var $78=HEAP[$77]; //@line 452 "pyexpat.c"
        var $79=($78) - 1; //@line 452 "pyexpat.c"
        var $80=$temp; //@line 452 "pyexpat.c"
        var $81=$80; //@line 452 "pyexpat.c"
        HEAP[$81]=$79; //@line 452 "pyexpat.c"
        var $82=$temp; //@line 452 "pyexpat.c"
        var $83=$82; //@line 452 "pyexpat.c"
        var $84=HEAP[$83]; //@line 452 "pyexpat.c"
        var $85=($84)==0; //@line 452 "pyexpat.c"
        if ($85) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 452 "pyexpat.c"
      case 16: // $bb15
        var $86=$temp; //@line 452 "pyexpat.c"
        var $87=$86+4; //@line 452 "pyexpat.c"
        var $88=HEAP[$87]; //@line 452 "pyexpat.c"
        var $89=$88+24; //@line 452 "pyexpat.c"
        var $90=HEAP[$89]; //@line 452 "pyexpat.c"
        var $91=$temp; //@line 452 "pyexpat.c"
        FUNCTION_TABLE[$90]($91); //@line 452 "pyexpat.c"
        __label__ = 17; break; //@line 452 "pyexpat.c"
      case 17: // $bb16
        $0=0; //@line 453 "pyexpat.c"
        __label__ = 18; break; //@line 453 "pyexpat.c"
      case 18: // $bb17
        var $92=$0; //@line 419 "pyexpat.c"
        $retval=$92; //@line 419 "pyexpat.c"
        var $retval18=$retval; //@line 419 "pyexpat.c"
        ;
        return $retval18; //@line 419 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _flush_character_buffer($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $rc;
        $self_addr=$self;
        var $1=$self_addr; //@line 460 "pyexpat.c"
        var $2=$1+32; //@line 460 "pyexpat.c"
        var $3=HEAP[$2]; //@line 460 "pyexpat.c"
        var $4=($3)==0; //@line 460 "pyexpat.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 460 "pyexpat.c"
      case 1: // $bb
        var $5=$self_addr; //@line 460 "pyexpat.c"
        var $6=$5+40; //@line 460 "pyexpat.c"
        var $7=HEAP[$6]; //@line 460 "pyexpat.c"
        var $8=($7)==0; //@line 460 "pyexpat.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 460 "pyexpat.c"
      case 2: // $bb1
        $0=0; //@line 461 "pyexpat.c"
        __label__ = 4; break; //@line 461 "pyexpat.c"
      case 3: // $bb2
        var $9=$self_addr; //@line 462 "pyexpat.c"
        var $10=$9+40; //@line 462 "pyexpat.c"
        var $11=HEAP[$10]; //@line 462 "pyexpat.c"
        var $12=$self_addr; //@line 462 "pyexpat.c"
        var $13=$12+32; //@line 462 "pyexpat.c"
        var $14=HEAP[$13]; //@line 462 "pyexpat.c"
        var $15=$self_addr; //@line 462 "pyexpat.c"
        var $16=_call_character_handler($15, $14, $11); //@line 462 "pyexpat.c"
        $rc=$16; //@line 462 "pyexpat.c"
        var $17=$self_addr; //@line 463 "pyexpat.c"
        var $18=$17+40; //@line 463 "pyexpat.c"
        HEAP[$18]=0; //@line 463 "pyexpat.c"
        var $19=$rc; //@line 464 "pyexpat.c"
        $0=$19; //@line 464 "pyexpat.c"
        __label__ = 4; break; //@line 464 "pyexpat.c"
      case 4: // $bb3
        var $20=$0; //@line 461 "pyexpat.c"
        $retval=$20; //@line 461 "pyexpat.c"
        var $retval4=$retval; //@line 461 "pyexpat.c"
        ;
        return $retval4; //@line 461 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_CharacterDataHandler($userData, $data, $len) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $data_addr;
        var $len_addr;
        var $self;
        $userData_addr=$userData;
        $data_addr=$data;
        $len_addr=$len;
        var $0=$userData_addr; //@line 470 "pyexpat.c"
        var $1=$0; //@line 470 "pyexpat.c"
        $self=$1; //@line 470 "pyexpat.c"
        var $2=$self; //@line 471 "pyexpat.c"
        var $3=$2+32; //@line 471 "pyexpat.c"
        var $4=HEAP[$3]; //@line 471 "pyexpat.c"
        var $5=($4)==0; //@line 471 "pyexpat.c"
        var $6=$self; //@line 472 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 471 "pyexpat.c"
      case 1: // $bb
        var $7=$data_addr; //@line 472 "pyexpat.c"
        var $8=$len_addr; //@line 472 "pyexpat.c"
        var $9=_call_character_handler($6, $7, $8); //@line 472 "pyexpat.c"
        __label__ = 8; break; //@line 472 "pyexpat.c"
      case 2: // $bb1
        var $10=$6+40; //@line 474 "pyexpat.c"
        var $11=HEAP[$10]; //@line 474 "pyexpat.c"
        var $12=$len_addr; //@line 474 "pyexpat.c"
        var $13=($12) + ($11); //@line 474 "pyexpat.c"
        var $14=$self; //@line 474 "pyexpat.c"
        var $15=$14+36; //@line 474 "pyexpat.c"
        var $16=HEAP[$15]; //@line 474 "pyexpat.c"
        var $17=($13) > ($16); //@line 474 "pyexpat.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 474 "pyexpat.c"
      case 3: // $bb2
        var $18=$self; //@line 475 "pyexpat.c"
        var $19=_flush_character_buffer($18); //@line 475 "pyexpat.c"
        var $20=($19) < 0; //@line 475 "pyexpat.c"
        if ($20) { __label__ = 8; break; } else { __label__ = 4; break; } //@line 475 "pyexpat.c"
      case 4: // $bb3
        var $21=$self; //@line 480 "pyexpat.c"
        var $22=_have_handler($21, 3); //@line 480 "pyexpat.c"
        var $23=($22)==0; //@line 480 "pyexpat.c"
        if ($23) { __label__ = 8; break; } else { __label__ = 5; break; } //@line 480 "pyexpat.c"
      case 5: // $bb4
        var $24=$self; //@line 483 "pyexpat.c"
        var $25=$24+36; //@line 483 "pyexpat.c"
        var $26=HEAP[$25]; //@line 483 "pyexpat.c"
        var $27=$len_addr; //@line 483 "pyexpat.c"
        var $28=($26) < ($27); //@line 483 "pyexpat.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 483 "pyexpat.c"
      case 6: // $bb5
        var $29=$self; //@line 484 "pyexpat.c"
        var $30=$data_addr; //@line 484 "pyexpat.c"
        var $31=$len_addr; //@line 484 "pyexpat.c"
        var $32=_call_character_handler($29, $30, $31); //@line 484 "pyexpat.c"
        var $33=$self; //@line 485 "pyexpat.c"
        var $34=$33+40; //@line 485 "pyexpat.c"
        HEAP[$34]=0; //@line 485 "pyexpat.c"
        __label__ = 8; break; //@line 485 "pyexpat.c"
      case 7: // $bb6
        var $35=$len_addr; //@line 488 "pyexpat.c"
        var $36=$self; //@line 488 "pyexpat.c"
        var $37=$36+32; //@line 488 "pyexpat.c"
        var $38=HEAP[$37]; //@line 488 "pyexpat.c"
        var $39=$self; //@line 488 "pyexpat.c"
        var $40=$39+40; //@line 488 "pyexpat.c"
        var $41=HEAP[$40]; //@line 488 "pyexpat.c"
        var $42=$38+$41; //@line 488 "pyexpat.c"
        var $43=$data_addr; //@line 488 "pyexpat.c"
        _llvm_memcpy_p0i8_p0i8_i32($42, $43, $35, 1, 0); //@line 488 "pyexpat.c"
        var $44=$self; //@line 490 "pyexpat.c"
        var $45=$44+40; //@line 490 "pyexpat.c"
        var $46=HEAP[$45]; //@line 490 "pyexpat.c"
        var $47=$len_addr; //@line 490 "pyexpat.c"
        var $48=($47) + ($46); //@line 490 "pyexpat.c"
        var $49=$self; //@line 490 "pyexpat.c"
        var $50=$49+40; //@line 490 "pyexpat.c"
        HEAP[$50]=$48; //@line 490 "pyexpat.c"
        __label__ = 8; break; //@line 490 "pyexpat.c"
      case 8: // $return
        ;
        return; //@line 476 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_StartElementHandler($userData, $name, $atts) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $name_addr;
        var $atts_addr;
        var $iftmp_42;
        var $self;
        var $container;
        var $rv;
        var $args;
        var $i;
        var $max;
        var $n;
        var $v;
        $userData_addr=$userData;
        $name_addr=$name;
        $atts_addr=$atts;
        var $0=$userData_addr; //@line 499 "pyexpat.c"
        var $1=$0; //@line 499 "pyexpat.c"
        $self=$1; //@line 499 "pyexpat.c"
        var $2=$self; //@line 501 "pyexpat.c"
        var $3=_have_handler($2, 0); //@line 501 "pyexpat.c"
        var $4=($3)!=0; //@line 501 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 46; break; } //@line 501 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 505 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 505 "pyexpat.c"
        var $7=($6) < 0; //@line 505 "pyexpat.c"
        if ($7) { __label__ = 46; break; } else { __label__ = 2; break; } //@line 505 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 510 "pyexpat.c"
        var $9=$8+20; //@line 510 "pyexpat.c"
        var $10=HEAP[$9]; //@line 510 "pyexpat.c"
        var $11=($10)!=0; //@line 510 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 510 "pyexpat.c"
      case 3: // $bb2
        var $12=$self; //@line 511 "pyexpat.c"
        var $13=$12+8; //@line 511 "pyexpat.c"
        var $14=HEAP[$13]; //@line 511 "pyexpat.c"
        var $15=_PyExpat_XML_GetSpecifiedAttributeCount($14); //@line 511 "pyexpat.c"
        $max=$15; //@line 511 "pyexpat.c"
        __label__ = 6; break; //@line 511 "pyexpat.c"
      case 4: // $bb3
        $max=0; //@line 514 "pyexpat.c"
        var $16=$atts_addr; //@line 515 "pyexpat.c"
        var $17=$max; //@line 515 "pyexpat.c"
        var $18=$16+4*$17; //@line 515 "pyexpat.c"
        var $19=HEAP[$18]; //@line 515 "pyexpat.c"
        var $20=($19)!=0; //@line 515 "pyexpat.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 515 "pyexpat.c"
      case 5: // $bb4
        var $21=$max; //@line 516 "pyexpat.c"
        var $22=($21) + 2; //@line 516 "pyexpat.c"
        $max=$22; //@line 516 "pyexpat.c"
        var $23=$atts_addr; //@line 515 "pyexpat.c"
        var $24=$max; //@line 515 "pyexpat.c"
        var $25=$23+4*$24; //@line 515 "pyexpat.c"
        var $26=HEAP[$25]; //@line 515 "pyexpat.c"
        var $27=($26)!=0; //@line 515 "pyexpat.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 515 "pyexpat.c"
      case 6: // $bb6
        var $28=$self; //@line 519 "pyexpat.c"
        var $29=$28+16; //@line 519 "pyexpat.c"
        var $30=HEAP[$29]; //@line 519 "pyexpat.c"
        var $31=($30)!=0; //@line 519 "pyexpat.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 519 "pyexpat.c"
      case 7: // $bb7
        var $32=$max; //@line 520 "pyexpat.c"
        var $33=_PyList_New($32); //@line 520 "pyexpat.c"
        $container=$33; //@line 520 "pyexpat.c"
        __lastLabel__ = 7; __label__ = 9; break; //@line 520 "pyexpat.c"
      case 8: // $bb8
        var $34=_PyDict_New(); //@line 522 "pyexpat.c"
        $container=$34; //@line 522 "pyexpat.c"
        __lastLabel__ = 8; __label__ = 9; break; //@line 522 "pyexpat.c"
      case 9: // $bb9
        var $35=__lastLabel__ == 8 ? $34 : ($33);
        var $36=($35)==0; //@line 523 "pyexpat.c"
        if ($36) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 523 "pyexpat.c"
      case 10: // $bb10
        var $37=$self; //@line 524 "pyexpat.c"
        _flag_error($37); //@line 524 "pyexpat.c"
        __label__ = 46; break; //@line 524 "pyexpat.c"
      case 11: // $bb11
        $i=0; //@line 527 "pyexpat.c"
        __label__ = 35; break; //@line 527 "pyexpat.c"
      case 12: // $bb12
        var $38=$atts_addr; //@line 528 "pyexpat.c"
        var $39=$i; //@line 528 "pyexpat.c"
        var $40=$38+4*$39; //@line 528 "pyexpat.c"
        var $41=HEAP[$40]; //@line 528 "pyexpat.c"
        var $42=$self; //@line 528 "pyexpat.c"
        var $43=_string_intern($42, $41); //@line 528 "pyexpat.c"
        $n=$43; //@line 528 "pyexpat.c"
        var $44=$n; //@line 530 "pyexpat.c"
        var $45=($44)==0; //@line 530 "pyexpat.c"
        var $46=$self; //@line 531 "pyexpat.c"
        if ($45) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 530 "pyexpat.c"
      case 13: // $bb13
        _flag_error($46); //@line 531 "pyexpat.c"
        var $47=$container; //@line 532 "pyexpat.c"
        var $48=$47; //@line 532 "pyexpat.c"
        var $49=HEAP[$48]; //@line 532 "pyexpat.c"
        var $50=($49) - 1; //@line 532 "pyexpat.c"
        var $51=$container; //@line 532 "pyexpat.c"
        var $52=$51; //@line 532 "pyexpat.c"
        HEAP[$52]=$50; //@line 532 "pyexpat.c"
        var $53=$container; //@line 532 "pyexpat.c"
        var $54=$53; //@line 532 "pyexpat.c"
        var $55=HEAP[$54]; //@line 532 "pyexpat.c"
        var $56=($55)==0; //@line 532 "pyexpat.c"
        if ($56) { __label__ = 14; break; } else { __label__ = 46; break; } //@line 532 "pyexpat.c"
      case 14: // $bb14
        var $57=$container; //@line 532 "pyexpat.c"
        var $58=$57+4; //@line 532 "pyexpat.c"
        var $59=HEAP[$58]; //@line 532 "pyexpat.c"
        var $60=$59+24; //@line 532 "pyexpat.c"
        var $61=HEAP[$60]; //@line 532 "pyexpat.c"
        var $62=$container; //@line 532 "pyexpat.c"
        FUNCTION_TABLE[$61]($62); //@line 532 "pyexpat.c"
        __label__ = 46; break; //@line 532 "pyexpat.c"
      case 15: // $bb16
        var $63=$46+12; //@line 535 "pyexpat.c"
        var $64=HEAP[$63]; //@line 535 "pyexpat.c"
        var $65=($64)!=0; //@line 535 "pyexpat.c"
        if ($65) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 535 "pyexpat.c"
      case 16: // $bb17
        $iftmp_42=(FUNCTION_TABLE_OFFSET + 4); //@line 535 "pyexpat.c"
        __label__ = 18; break; //@line 535 "pyexpat.c"
      case 17: // $bb18
        $iftmp_42=(FUNCTION_TABLE_OFFSET + 6); //@line 535 "pyexpat.c"
        __label__ = 18; break; //@line 535 "pyexpat.c"
      case 18: // $bb19
        var $66=$i; //@line 535 "pyexpat.c"
        var $67=($66) + 1; //@line 535 "pyexpat.c"
        var $68=$atts_addr; //@line 535 "pyexpat.c"
        var $69=$68+4*$67; //@line 535 "pyexpat.c"
        var $70=HEAP[$69]; //@line 535 "pyexpat.c"
        var $71=$iftmp_42; //@line 535 "pyexpat.c"
        var $72=FUNCTION_TABLE[$71]($70); //@line 535 "pyexpat.c"
        $v=$72; //@line 535 "pyexpat.c"
        var $73=($72)==0; //@line 536 "pyexpat.c"
        var $74=$self; //@line 537 "pyexpat.c"
        if ($73) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 536 "pyexpat.c"
      case 19: // $bb20
        _flag_error($74); //@line 537 "pyexpat.c"
        var $75=$container; //@line 538 "pyexpat.c"
        var $76=$75; //@line 538 "pyexpat.c"
        var $77=HEAP[$76]; //@line 538 "pyexpat.c"
        var $78=($77) - 1; //@line 538 "pyexpat.c"
        var $79=$container; //@line 538 "pyexpat.c"
        var $80=$79; //@line 538 "pyexpat.c"
        HEAP[$80]=$78; //@line 538 "pyexpat.c"
        var $81=$container; //@line 538 "pyexpat.c"
        var $82=$81; //@line 538 "pyexpat.c"
        var $83=HEAP[$82]; //@line 538 "pyexpat.c"
        var $84=($83)==0; //@line 538 "pyexpat.c"
        if ($84) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 538 "pyexpat.c"
      case 20: // $bb21
        var $85=$container; //@line 538 "pyexpat.c"
        var $86=$85+4; //@line 538 "pyexpat.c"
        var $87=HEAP[$86]; //@line 538 "pyexpat.c"
        var $88=$87+24; //@line 538 "pyexpat.c"
        var $89=HEAP[$88]; //@line 538 "pyexpat.c"
        var $90=$container; //@line 538 "pyexpat.c"
        FUNCTION_TABLE[$89]($90); //@line 538 "pyexpat.c"
        __label__ = 21; break; //@line 538 "pyexpat.c"
      case 21: // $bb22
        var $91=$n; //@line 539 "pyexpat.c"
        var $92=$91; //@line 539 "pyexpat.c"
        var $93=HEAP[$92]; //@line 539 "pyexpat.c"
        var $94=($93) - 1; //@line 539 "pyexpat.c"
        var $95=$n; //@line 539 "pyexpat.c"
        var $96=$95; //@line 539 "pyexpat.c"
        HEAP[$96]=$94; //@line 539 "pyexpat.c"
        var $97=$n; //@line 539 "pyexpat.c"
        var $98=$97; //@line 539 "pyexpat.c"
        var $99=HEAP[$98]; //@line 539 "pyexpat.c"
        var $100=($99)==0; //@line 539 "pyexpat.c"
        if ($100) { __label__ = 22; break; } else { __label__ = 46; break; } //@line 539 "pyexpat.c"
      case 22: // $bb23
        var $101=$n; //@line 539 "pyexpat.c"
        var $102=$101+4; //@line 539 "pyexpat.c"
        var $103=HEAP[$102]; //@line 539 "pyexpat.c"
        var $104=$103+24; //@line 539 "pyexpat.c"
        var $105=HEAP[$104]; //@line 539 "pyexpat.c"
        var $106=$n; //@line 539 "pyexpat.c"
        FUNCTION_TABLE[$105]($106); //@line 539 "pyexpat.c"
        __label__ = 46; break; //@line 539 "pyexpat.c"
      case 23: // $bb25
        var $107=$74+16; //@line 542 "pyexpat.c"
        var $108=HEAP[$107]; //@line 542 "pyexpat.c"
        var $109=($108)!=0; //@line 542 "pyexpat.c"
        var $110=$container; //@line 543 "pyexpat.c"
        if ($109) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 542 "pyexpat.c"
      case 24: // $bb26
        var $111=$110; //@line 543 "pyexpat.c"
        var $112=$111+12; //@line 543 "pyexpat.c"
        var $113=HEAP[$112]; //@line 543 "pyexpat.c"
        var $114=$i; //@line 543 "pyexpat.c"
        var $115=$113+4*$114; //@line 543 "pyexpat.c"
        var $116=$n; //@line 543 "pyexpat.c"
        HEAP[$115]=$116; //@line 543 "pyexpat.c"
        var $117=$container; //@line 544 "pyexpat.c"
        var $118=$117; //@line 544 "pyexpat.c"
        var $119=$118+12; //@line 544 "pyexpat.c"
        var $120=HEAP[$119]; //@line 544 "pyexpat.c"
        var $121=$i; //@line 544 "pyexpat.c"
        var $122=($121) + 1; //@line 544 "pyexpat.c"
        var $123=$120+4*$122; //@line 544 "pyexpat.c"
        var $124=$v; //@line 544 "pyexpat.c"
        HEAP[$123]=$124; //@line 544 "pyexpat.c"
        __label__ = 34; break; //@line 544 "pyexpat.c"
      case 25: // $bb27
        var $125=$n; //@line 546 "pyexpat.c"
        var $126=$v; //@line 546 "pyexpat.c"
        var $127=_PyDict_SetItem($110, $125, $126); //@line 546 "pyexpat.c"
        var $128=($127)!=0; //@line 546 "pyexpat.c"
        if ($128) { __label__ = 26; break; } else { __label__ = 30; break; } //@line 546 "pyexpat.c"
      case 26: // $bb28
        var $129=$self; //@line 547 "pyexpat.c"
        _flag_error($129); //@line 547 "pyexpat.c"
        var $130=$n; //@line 548 "pyexpat.c"
        var $131=$130; //@line 548 "pyexpat.c"
        var $132=HEAP[$131]; //@line 548 "pyexpat.c"
        var $133=($132) - 1; //@line 548 "pyexpat.c"
        var $134=$n; //@line 548 "pyexpat.c"
        var $135=$134; //@line 548 "pyexpat.c"
        HEAP[$135]=$133; //@line 548 "pyexpat.c"
        var $136=$n; //@line 548 "pyexpat.c"
        var $137=$136; //@line 548 "pyexpat.c"
        var $138=HEAP[$137]; //@line 548 "pyexpat.c"
        var $139=($138)==0; //@line 548 "pyexpat.c"
        if ($139) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 548 "pyexpat.c"
      case 27: // $bb29
        var $140=$n; //@line 548 "pyexpat.c"
        var $141=$140+4; //@line 548 "pyexpat.c"
        var $142=HEAP[$141]; //@line 548 "pyexpat.c"
        var $143=$142+24; //@line 548 "pyexpat.c"
        var $144=HEAP[$143]; //@line 548 "pyexpat.c"
        var $145=$n; //@line 548 "pyexpat.c"
        FUNCTION_TABLE[$144]($145); //@line 548 "pyexpat.c"
        __label__ = 28; break; //@line 548 "pyexpat.c"
      case 28: // $bb30
        var $146=$v; //@line 549 "pyexpat.c"
        var $147=$146; //@line 549 "pyexpat.c"
        var $148=HEAP[$147]; //@line 549 "pyexpat.c"
        var $149=($148) - 1; //@line 549 "pyexpat.c"
        var $150=$v; //@line 549 "pyexpat.c"
        var $151=$150; //@line 549 "pyexpat.c"
        HEAP[$151]=$149; //@line 549 "pyexpat.c"
        var $152=$v; //@line 549 "pyexpat.c"
        var $153=$152; //@line 549 "pyexpat.c"
        var $154=HEAP[$153]; //@line 549 "pyexpat.c"
        var $155=($154)==0; //@line 549 "pyexpat.c"
        if ($155) { __label__ = 29; break; } else { __label__ = 46; break; } //@line 549 "pyexpat.c"
      case 29: // $bb31
        var $156=$v; //@line 549 "pyexpat.c"
        var $157=$156+4; //@line 549 "pyexpat.c"
        var $158=HEAP[$157]; //@line 549 "pyexpat.c"
        var $159=$158+24; //@line 549 "pyexpat.c"
        var $160=HEAP[$159]; //@line 549 "pyexpat.c"
        var $161=$v; //@line 549 "pyexpat.c"
        FUNCTION_TABLE[$160]($161); //@line 549 "pyexpat.c"
        __label__ = 46; break; //@line 549 "pyexpat.c"
      case 30: // $bb33
        var $162=$n; //@line 553 "pyexpat.c"
        var $163=$162; //@line 553 "pyexpat.c"
        var $164=HEAP[$163]; //@line 553 "pyexpat.c"
        var $165=($164) - 1; //@line 553 "pyexpat.c"
        var $166=$n; //@line 553 "pyexpat.c"
        var $167=$166; //@line 553 "pyexpat.c"
        HEAP[$167]=$165; //@line 553 "pyexpat.c"
        var $168=$n; //@line 553 "pyexpat.c"
        var $169=$168; //@line 553 "pyexpat.c"
        var $170=HEAP[$169]; //@line 553 "pyexpat.c"
        var $171=($170)==0; //@line 553 "pyexpat.c"
        if ($171) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 553 "pyexpat.c"
      case 31: // $bb34
        var $172=$n; //@line 553 "pyexpat.c"
        var $173=$172+4; //@line 553 "pyexpat.c"
        var $174=HEAP[$173]; //@line 553 "pyexpat.c"
        var $175=$174+24; //@line 553 "pyexpat.c"
        var $176=HEAP[$175]; //@line 553 "pyexpat.c"
        var $177=$n; //@line 553 "pyexpat.c"
        FUNCTION_TABLE[$176]($177); //@line 553 "pyexpat.c"
        __label__ = 32; break; //@line 553 "pyexpat.c"
      case 32: // $bb35
        var $178=$v; //@line 554 "pyexpat.c"
        var $179=$178; //@line 554 "pyexpat.c"
        var $180=HEAP[$179]; //@line 554 "pyexpat.c"
        var $181=($180) - 1; //@line 554 "pyexpat.c"
        var $182=$v; //@line 554 "pyexpat.c"
        var $183=$182; //@line 554 "pyexpat.c"
        HEAP[$183]=$181; //@line 554 "pyexpat.c"
        var $184=$v; //@line 554 "pyexpat.c"
        var $185=$184; //@line 554 "pyexpat.c"
        var $186=HEAP[$185]; //@line 554 "pyexpat.c"
        var $187=($186)==0; //@line 554 "pyexpat.c"
        if ($187) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 554 "pyexpat.c"
      case 33: // $bb36
        var $188=$v; //@line 554 "pyexpat.c"
        var $189=$188+4; //@line 554 "pyexpat.c"
        var $190=HEAP[$189]; //@line 554 "pyexpat.c"
        var $191=$190+24; //@line 554 "pyexpat.c"
        var $192=HEAP[$191]; //@line 554 "pyexpat.c"
        var $193=$v; //@line 554 "pyexpat.c"
        FUNCTION_TABLE[$192]($193); //@line 554 "pyexpat.c"
        __label__ = 34; break; //@line 554 "pyexpat.c"
      case 34: // $bb37
        var $194=$i; //@line 527 "pyexpat.c"
        var $195=($194) + 2; //@line 527 "pyexpat.c"
        $i=$195; //@line 527 "pyexpat.c"
        __label__ = 35; break; //@line 527 "pyexpat.c"
      case 35: // $bb38
        var $196=$i; //@line 527 "pyexpat.c"
        var $197=$max; //@line 527 "pyexpat.c"
        var $198=($196) < ($197); //@line 527 "pyexpat.c"
        if ($198) { __label__ = 12; break; } else { __label__ = 36; break; } //@line 527 "pyexpat.c"
      case 36: // $bb39
        var $199=$self; //@line 557 "pyexpat.c"
        var $200=$name_addr; //@line 557 "pyexpat.c"
        var $201=_string_intern($199, $200); //@line 557 "pyexpat.c"
        $args=$201; //@line 557 "pyexpat.c"
        var $202=$args; //@line 558 "pyexpat.c"
        var $203=($202)!=0; //@line 558 "pyexpat.c"
        if ($203) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 558 "pyexpat.c"
      case 37: // $bb41
        var $204=$args; //@line 559 "pyexpat.c"
        var $205=$container; //@line 559 "pyexpat.c"
        var $206=_Py_BuildValue(__str8, allocate([$204,0,0,0,$205,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 559 "pyexpat.c"
        $args=$206; //@line 559 "pyexpat.c"
        var $207=($206)==0; //@line 560 "pyexpat.c"
        if ($207) { __label__ = 38; break; } else { __label__ = 40; break; } //@line 560 "pyexpat.c"
      case 38: // $bb42
        var $208=$container; //@line 561 "pyexpat.c"
        var $209=$208; //@line 561 "pyexpat.c"
        var $210=HEAP[$209]; //@line 561 "pyexpat.c"
        var $211=($210) - 1; //@line 561 "pyexpat.c"
        var $212=$container; //@line 561 "pyexpat.c"
        var $213=$212; //@line 561 "pyexpat.c"
        HEAP[$213]=$211; //@line 561 "pyexpat.c"
        var $214=$container; //@line 561 "pyexpat.c"
        var $215=$214; //@line 561 "pyexpat.c"
        var $216=HEAP[$215]; //@line 561 "pyexpat.c"
        var $217=($216)==0; //@line 561 "pyexpat.c"
        if ($217) { __label__ = 39; break; } else { __label__ = 46; break; } //@line 561 "pyexpat.c"
      case 39: // $bb43
        var $218=$container; //@line 561 "pyexpat.c"
        var $219=$218+4; //@line 561 "pyexpat.c"
        var $220=HEAP[$219]; //@line 561 "pyexpat.c"
        var $221=$220+24; //@line 561 "pyexpat.c"
        var $222=HEAP[$221]; //@line 561 "pyexpat.c"
        var $223=$container; //@line 561 "pyexpat.c"
        FUNCTION_TABLE[$222]($223); //@line 561 "pyexpat.c"
        __label__ = 46; break; //@line 561 "pyexpat.c"
      case 40: // $bb45
        var $224=$self; //@line 565 "pyexpat.c"
        var $225=$224+24; //@line 565 "pyexpat.c"
        HEAP[$225]=1; //@line 565 "pyexpat.c"
        var $226=$self; //@line 566 "pyexpat.c"
        var $227=$226+48; //@line 566 "pyexpat.c"
        var $228=HEAP[$227]; //@line 566 "pyexpat.c"
        var $229=$228; //@line 566 "pyexpat.c"
        var $230=HEAP[$229]; //@line 566 "pyexpat.c"
        var $231=_getcode(0, __str9, 566); //@line 566 "pyexpat.c"
        var $232=$args; //@line 566 "pyexpat.c"
        var $233=$self; //@line 566 "pyexpat.c"
        var $234=_call_with_frame($231, $230, $232, $233); //@line 566 "pyexpat.c"
        $rv=$234; //@line 566 "pyexpat.c"
        var $235=$self; //@line 568 "pyexpat.c"
        var $236=$235+24; //@line 568 "pyexpat.c"
        HEAP[$236]=0; //@line 568 "pyexpat.c"
        var $237=$args; //@line 569 "pyexpat.c"
        var $238=$237; //@line 569 "pyexpat.c"
        var $239=HEAP[$238]; //@line 569 "pyexpat.c"
        var $240=($239) - 1; //@line 569 "pyexpat.c"
        var $241=$args; //@line 569 "pyexpat.c"
        var $242=$241; //@line 569 "pyexpat.c"
        HEAP[$242]=$240; //@line 569 "pyexpat.c"
        var $243=$args; //@line 569 "pyexpat.c"
        var $244=$243; //@line 569 "pyexpat.c"
        var $245=HEAP[$244]; //@line 569 "pyexpat.c"
        var $246=($245)==0; //@line 569 "pyexpat.c"
        if ($246) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 569 "pyexpat.c"
      case 41: // $bb46
        var $247=$args; //@line 569 "pyexpat.c"
        var $248=$247+4; //@line 569 "pyexpat.c"
        var $249=HEAP[$248]; //@line 569 "pyexpat.c"
        var $250=$249+24; //@line 569 "pyexpat.c"
        var $251=HEAP[$250]; //@line 569 "pyexpat.c"
        var $252=$args; //@line 569 "pyexpat.c"
        FUNCTION_TABLE[$251]($252); //@line 569 "pyexpat.c"
        __label__ = 42; break; //@line 569 "pyexpat.c"
      case 42: // $bb47
        var $253=$rv; //@line 570 "pyexpat.c"
        var $254=($253)==0; //@line 570 "pyexpat.c"
        if ($254) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 570 "pyexpat.c"
      case 43: // $bb48
        var $255=$self; //@line 571 "pyexpat.c"
        _flag_error($255); //@line 571 "pyexpat.c"
        __label__ = 46; break; //@line 571 "pyexpat.c"
      case 44: // $bb49
        var $256=$rv; //@line 574 "pyexpat.c"
        var $257=$256; //@line 574 "pyexpat.c"
        var $258=HEAP[$257]; //@line 574 "pyexpat.c"
        var $259=($258) - 1; //@line 574 "pyexpat.c"
        var $260=$rv; //@line 574 "pyexpat.c"
        var $261=$260; //@line 574 "pyexpat.c"
        HEAP[$261]=$259; //@line 574 "pyexpat.c"
        var $262=$rv; //@line 574 "pyexpat.c"
        var $263=$262; //@line 574 "pyexpat.c"
        var $264=HEAP[$263]; //@line 574 "pyexpat.c"
        var $265=($264)==0; //@line 574 "pyexpat.c"
        if ($265) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 574 "pyexpat.c"
      case 45: // $bb50
        var $266=$rv; //@line 574 "pyexpat.c"
        var $267=$266+4; //@line 574 "pyexpat.c"
        var $268=HEAP[$267]; //@line 574 "pyexpat.c"
        var $269=$268+24; //@line 574 "pyexpat.c"
        var $270=HEAP[$269]; //@line 574 "pyexpat.c"
        var $271=$rv; //@line 574 "pyexpat.c"
        FUNCTION_TABLE[$270]($271); //@line 574 "pyexpat.c"
        __label__ = 46; break; //@line 574 "pyexpat.c"
      case 46: // $return
        ;
        return; //@line 506 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_EndElementHandler($userData, $name) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $name_addr;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $name_addr=$name;
        var $0=$userData_addr; //@line 616 "pyexpat.c"
        var $1=$0; //@line 616 "pyexpat.c"
        $self=$1; //@line 616 "pyexpat.c"
        $args=0; //@line 616 "pyexpat.c"
        $rv=0; //@line 616 "pyexpat.c"
        var $2=$self; //@line 616 "pyexpat.c"
        var $3=_have_handler($2, 1); //@line 616 "pyexpat.c"
        var $4=($3)!=0; //@line 616 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 616 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 616 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 616 "pyexpat.c"
        var $7=($6) < 0; //@line 616 "pyexpat.c"
        if ($7) { __label__ = 10; break; } else { __label__ = 2; break; } //@line 616 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 616 "pyexpat.c"
        var $9=$name_addr; //@line 616 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 616 "pyexpat.c"
        var $11=_Py_BuildValue(__str10, allocate([$10,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 616 "pyexpat.c"
        $args=$11; //@line 616 "pyexpat.c"
        var $12=$args; //@line 616 "pyexpat.c"
        var $13=($12)==0; //@line 616 "pyexpat.c"
        var $14=$self; //@line 616 "pyexpat.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 616 "pyexpat.c"
      case 3: // $bb2
        _flag_error($14); //@line 616 "pyexpat.c"
        __label__ = 10; break; //@line 616 "pyexpat.c"
      case 4: // $bb3
        var $15=$14+24; //@line 616 "pyexpat.c"
        HEAP[$15]=1; //@line 616 "pyexpat.c"
        var $16=$self; //@line 616 "pyexpat.c"
        var $17=$16+48; //@line 616 "pyexpat.c"
        var $18=HEAP[$17]; //@line 616 "pyexpat.c"
        var $19=$18+4; //@line 616 "pyexpat.c"
        var $20=HEAP[$19]; //@line 616 "pyexpat.c"
        var $21=_getcode(1, __str11, 618); //@line 616 "pyexpat.c"
        var $22=$args; //@line 616 "pyexpat.c"
        var $23=$self; //@line 616 "pyexpat.c"
        var $24=_call_with_frame($21, $20, $22, $23); //@line 616 "pyexpat.c"
        $rv=$24; //@line 616 "pyexpat.c"
        var $25=$self; //@line 616 "pyexpat.c"
        var $26=$25+24; //@line 616 "pyexpat.c"
        HEAP[$26]=0; //@line 616 "pyexpat.c"
        var $27=$args; //@line 616 "pyexpat.c"
        var $28=$27; //@line 616 "pyexpat.c"
        var $29=HEAP[$28]; //@line 616 "pyexpat.c"
        var $30=($29) - 1; //@line 616 "pyexpat.c"
        var $31=$args; //@line 616 "pyexpat.c"
        var $32=$31; //@line 616 "pyexpat.c"
        HEAP[$32]=$30; //@line 616 "pyexpat.c"
        var $33=$args; //@line 616 "pyexpat.c"
        var $34=$33; //@line 616 "pyexpat.c"
        var $35=HEAP[$34]; //@line 616 "pyexpat.c"
        var $36=($35)==0; //@line 616 "pyexpat.c"
        if ($36) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 616 "pyexpat.c"
      case 5: // $bb4
        var $37=$args; //@line 616 "pyexpat.c"
        var $38=$37+4; //@line 616 "pyexpat.c"
        var $39=HEAP[$38]; //@line 616 "pyexpat.c"
        var $40=$39+24; //@line 616 "pyexpat.c"
        var $41=HEAP[$40]; //@line 616 "pyexpat.c"
        var $42=$args; //@line 616 "pyexpat.c"
        FUNCTION_TABLE[$41]($42); //@line 616 "pyexpat.c"
        __label__ = 6; break; //@line 616 "pyexpat.c"
      case 6: // $bb5
        var $43=$rv; //@line 616 "pyexpat.c"
        var $44=($43)==0; //@line 616 "pyexpat.c"
        if ($44) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 616 "pyexpat.c"
      case 7: // $bb6
        var $45=$self; //@line 616 "pyexpat.c"
        _flag_error($45); //@line 616 "pyexpat.c"
        __label__ = 10; break; //@line 616 "pyexpat.c"
      case 8: // $bb7
        var $46=$rv; //@line 616 "pyexpat.c"
        var $47=$46; //@line 616 "pyexpat.c"
        var $48=HEAP[$47]; //@line 616 "pyexpat.c"
        var $49=($48) - 1; //@line 616 "pyexpat.c"
        var $50=$rv; //@line 616 "pyexpat.c"
        var $51=$50; //@line 616 "pyexpat.c"
        HEAP[$51]=$49; //@line 616 "pyexpat.c"
        var $52=$rv; //@line 616 "pyexpat.c"
        var $53=$52; //@line 616 "pyexpat.c"
        var $54=HEAP[$53]; //@line 616 "pyexpat.c"
        var $55=($54)==0; //@line 616 "pyexpat.c"
        if ($55) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 616 "pyexpat.c"
      case 9: // $bb8
        var $56=$rv; //@line 616 "pyexpat.c"
        var $57=$56+4; //@line 616 "pyexpat.c"
        var $58=HEAP[$57]; //@line 616 "pyexpat.c"
        var $59=$58+24; //@line 616 "pyexpat.c"
        var $60=HEAP[$59]; //@line 616 "pyexpat.c"
        var $61=$rv; //@line 616 "pyexpat.c"
        FUNCTION_TABLE[$60]($61); //@line 616 "pyexpat.c"
        __label__ = 10; break; //@line 616 "pyexpat.c"
      case 10: // $return
        ;
        return; //@line 616 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_ProcessingInstructionHandler($userData, $target, $data) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $target_addr;
        var $data_addr;
        var $iftmp_45;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $target_addr=$target;
        $data_addr=$data;
        var $0=$userData_addr; //@line 620 "pyexpat.c"
        var $1=$0; //@line 620 "pyexpat.c"
        $self=$1; //@line 620 "pyexpat.c"
        $args=0; //@line 620 "pyexpat.c"
        $rv=0; //@line 620 "pyexpat.c"
        var $2=$self; //@line 620 "pyexpat.c"
        var $3=_have_handler($2, 2); //@line 620 "pyexpat.c"
        var $4=($3)!=0; //@line 620 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 620 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 620 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 620 "pyexpat.c"
        var $7=($6) < 0; //@line 620 "pyexpat.c"
        if ($7) { __label__ = 13; break; } else { __label__ = 2; break; } //@line 620 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 620 "pyexpat.c"
        var $9=$8+12; //@line 620 "pyexpat.c"
        var $10=HEAP[$9]; //@line 620 "pyexpat.c"
        var $11=($10)!=0; //@line 620 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 620 "pyexpat.c"
      case 3: // $bb2
        $iftmp_45=(FUNCTION_TABLE_OFFSET + 4); //@line 620 "pyexpat.c"
        __label__ = 5; break; //@line 620 "pyexpat.c"
      case 4: // $bb3
        $iftmp_45=(FUNCTION_TABLE_OFFSET + 6); //@line 620 "pyexpat.c"
        __label__ = 5; break; //@line 620 "pyexpat.c"
      case 5: // $bb4
        var $12=$self; //@line 620 "pyexpat.c"
        var $13=$target_addr; //@line 620 "pyexpat.c"
        var $14=_string_intern($12, $13); //@line 620 "pyexpat.c"
        var $15=$iftmp_45; //@line 620 "pyexpat.c"
        var $16=$data_addr; //@line 620 "pyexpat.c"
        var $17=_Py_BuildValue(__str12, allocate([$14,0,0,0,$15,0,0,0,$16,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 620 "pyexpat.c"
        $args=$17; //@line 620 "pyexpat.c"
        var $18=($17)==0; //@line 620 "pyexpat.c"
        var $19=$self; //@line 620 "pyexpat.c"
        if ($18) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 620 "pyexpat.c"
      case 6: // $bb5
        _flag_error($19); //@line 620 "pyexpat.c"
        __label__ = 13; break; //@line 620 "pyexpat.c"
      case 7: // $bb6
        var $20=$19+24; //@line 620 "pyexpat.c"
        HEAP[$20]=1; //@line 620 "pyexpat.c"
        var $21=$self; //@line 620 "pyexpat.c"
        var $22=$21+48; //@line 620 "pyexpat.c"
        var $23=HEAP[$22]; //@line 620 "pyexpat.c"
        var $24=$23+8; //@line 620 "pyexpat.c"
        var $25=HEAP[$24]; //@line 620 "pyexpat.c"
        var $26=_getcode(2, __str13, 624); //@line 620 "pyexpat.c"
        var $27=$args; //@line 620 "pyexpat.c"
        var $28=$self; //@line 620 "pyexpat.c"
        var $29=_call_with_frame($26, $25, $27, $28); //@line 620 "pyexpat.c"
        $rv=$29; //@line 620 "pyexpat.c"
        var $30=$self; //@line 620 "pyexpat.c"
        var $31=$30+24; //@line 620 "pyexpat.c"
        HEAP[$31]=0; //@line 620 "pyexpat.c"
        var $32=$args; //@line 620 "pyexpat.c"
        var $33=$32; //@line 620 "pyexpat.c"
        var $34=HEAP[$33]; //@line 620 "pyexpat.c"
        var $35=($34) - 1; //@line 620 "pyexpat.c"
        var $36=$args; //@line 620 "pyexpat.c"
        var $37=$36; //@line 620 "pyexpat.c"
        HEAP[$37]=$35; //@line 620 "pyexpat.c"
        var $38=$args; //@line 620 "pyexpat.c"
        var $39=$38; //@line 620 "pyexpat.c"
        var $40=HEAP[$39]; //@line 620 "pyexpat.c"
        var $41=($40)==0; //@line 620 "pyexpat.c"
        if ($41) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 620 "pyexpat.c"
      case 8: // $bb7
        var $42=$args; //@line 620 "pyexpat.c"
        var $43=$42+4; //@line 620 "pyexpat.c"
        var $44=HEAP[$43]; //@line 620 "pyexpat.c"
        var $45=$44+24; //@line 620 "pyexpat.c"
        var $46=HEAP[$45]; //@line 620 "pyexpat.c"
        var $47=$args; //@line 620 "pyexpat.c"
        FUNCTION_TABLE[$46]($47); //@line 620 "pyexpat.c"
        __label__ = 9; break; //@line 620 "pyexpat.c"
      case 9: // $bb8
        var $48=$rv; //@line 620 "pyexpat.c"
        var $49=($48)==0; //@line 620 "pyexpat.c"
        if ($49) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 620 "pyexpat.c"
      case 10: // $bb9
        var $50=$self; //@line 620 "pyexpat.c"
        _flag_error($50); //@line 620 "pyexpat.c"
        __label__ = 13; break; //@line 620 "pyexpat.c"
      case 11: // $bb10
        var $51=$rv; //@line 620 "pyexpat.c"
        var $52=$51; //@line 620 "pyexpat.c"
        var $53=HEAP[$52]; //@line 620 "pyexpat.c"
        var $54=($53) - 1; //@line 620 "pyexpat.c"
        var $55=$rv; //@line 620 "pyexpat.c"
        var $56=$55; //@line 620 "pyexpat.c"
        HEAP[$56]=$54; //@line 620 "pyexpat.c"
        var $57=$rv; //@line 620 "pyexpat.c"
        var $58=$57; //@line 620 "pyexpat.c"
        var $59=HEAP[$58]; //@line 620 "pyexpat.c"
        var $60=($59)==0; //@line 620 "pyexpat.c"
        if ($60) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 620 "pyexpat.c"
      case 12: // $bb11
        var $61=$rv; //@line 620 "pyexpat.c"
        var $62=$61+4; //@line 620 "pyexpat.c"
        var $63=HEAP[$62]; //@line 620 "pyexpat.c"
        var $64=$63+24; //@line 620 "pyexpat.c"
        var $65=HEAP[$64]; //@line 620 "pyexpat.c"
        var $66=$rv; //@line 620 "pyexpat.c"
        FUNCTION_TABLE[$65]($66); //@line 620 "pyexpat.c"
        __label__ = 13; break; //@line 620 "pyexpat.c"
      case 13: // $return
        ;
        return; //@line 620 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_UnparsedEntityDeclHandler($userData, $entityName, $base, $systemId, $publicId, $notationName) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $entityName_addr;
        var $base_addr;
        var $systemId_addr;
        var $publicId_addr;
        var $notationName_addr;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $entityName_addr=$entityName;
        $base_addr=$base;
        $systemId_addr=$systemId;
        $publicId_addr=$publicId;
        $notationName_addr=$notationName;
        var $0=$userData_addr; //@line 626 "pyexpat.c"
        var $1=$0; //@line 626 "pyexpat.c"
        $self=$1; //@line 626 "pyexpat.c"
        $args=0; //@line 626 "pyexpat.c"
        $rv=0; //@line 626 "pyexpat.c"
        var $2=$self; //@line 626 "pyexpat.c"
        var $3=_have_handler($2, 4); //@line 626 "pyexpat.c"
        var $4=($3)!=0; //@line 626 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 626 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 626 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 626 "pyexpat.c"
        var $7=($6) < 0; //@line 626 "pyexpat.c"
        if ($7) { __label__ = 10; break; } else { __label__ = 2; break; } //@line 626 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 626 "pyexpat.c"
        var $9=$notationName_addr; //@line 626 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 626 "pyexpat.c"
        var $11=$self; //@line 626 "pyexpat.c"
        var $12=$publicId_addr; //@line 626 "pyexpat.c"
        var $13=_string_intern($11, $12); //@line 626 "pyexpat.c"
        var $14=$self; //@line 626 "pyexpat.c"
        var $15=$systemId_addr; //@line 626 "pyexpat.c"
        var $16=_string_intern($14, $15); //@line 626 "pyexpat.c"
        var $17=$self; //@line 626 "pyexpat.c"
        var $18=$base_addr; //@line 626 "pyexpat.c"
        var $19=_string_intern($17, $18); //@line 626 "pyexpat.c"
        var $20=$self; //@line 626 "pyexpat.c"
        var $21=$entityName_addr; //@line 626 "pyexpat.c"
        var $22=_string_intern($20, $21); //@line 626 "pyexpat.c"
        var $23=_Py_BuildValue(__str14, allocate([$22,0,0,0,$19,0,0,0,$16,0,0,0,$13,0,0,0,$10,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 626 "pyexpat.c"
        $args=$23; //@line 626 "pyexpat.c"
        var $24=$args; //@line 626 "pyexpat.c"
        var $25=($24)==0; //@line 626 "pyexpat.c"
        var $26=$self; //@line 626 "pyexpat.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 626 "pyexpat.c"
      case 3: // $bb2
        _flag_error($26); //@line 626 "pyexpat.c"
        __label__ = 10; break; //@line 626 "pyexpat.c"
      case 4: // $bb3
        var $27=$26+24; //@line 626 "pyexpat.c"
        HEAP[$27]=1; //@line 626 "pyexpat.c"
        var $28=$self; //@line 626 "pyexpat.c"
        var $29=$28+48; //@line 626 "pyexpat.c"
        var $30=HEAP[$29]; //@line 626 "pyexpat.c"
        var $31=$30+16; //@line 626 "pyexpat.c"
        var $32=HEAP[$31]; //@line 626 "pyexpat.c"
        var $33=_getcode(4, __str15, 636); //@line 626 "pyexpat.c"
        var $34=$args; //@line 626 "pyexpat.c"
        var $35=$self; //@line 626 "pyexpat.c"
        var $36=_call_with_frame($33, $32, $34, $35); //@line 626 "pyexpat.c"
        $rv=$36; //@line 626 "pyexpat.c"
        var $37=$self; //@line 626 "pyexpat.c"
        var $38=$37+24; //@line 626 "pyexpat.c"
        HEAP[$38]=0; //@line 626 "pyexpat.c"
        var $39=$args; //@line 626 "pyexpat.c"
        var $40=$39; //@line 626 "pyexpat.c"
        var $41=HEAP[$40]; //@line 626 "pyexpat.c"
        var $42=($41) - 1; //@line 626 "pyexpat.c"
        var $43=$args; //@line 626 "pyexpat.c"
        var $44=$43; //@line 626 "pyexpat.c"
        HEAP[$44]=$42; //@line 626 "pyexpat.c"
        var $45=$args; //@line 626 "pyexpat.c"
        var $46=$45; //@line 626 "pyexpat.c"
        var $47=HEAP[$46]; //@line 626 "pyexpat.c"
        var $48=($47)==0; //@line 626 "pyexpat.c"
        if ($48) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 626 "pyexpat.c"
      case 5: // $bb4
        var $49=$args; //@line 626 "pyexpat.c"
        var $50=$49+4; //@line 626 "pyexpat.c"
        var $51=HEAP[$50]; //@line 626 "pyexpat.c"
        var $52=$51+24; //@line 626 "pyexpat.c"
        var $53=HEAP[$52]; //@line 626 "pyexpat.c"
        var $54=$args; //@line 626 "pyexpat.c"
        FUNCTION_TABLE[$53]($54); //@line 626 "pyexpat.c"
        __label__ = 6; break; //@line 626 "pyexpat.c"
      case 6: // $bb5
        var $55=$rv; //@line 626 "pyexpat.c"
        var $56=($55)==0; //@line 626 "pyexpat.c"
        if ($56) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 626 "pyexpat.c"
      case 7: // $bb6
        var $57=$self; //@line 626 "pyexpat.c"
        _flag_error($57); //@line 626 "pyexpat.c"
        __label__ = 10; break; //@line 626 "pyexpat.c"
      case 8: // $bb7
        var $58=$rv; //@line 626 "pyexpat.c"
        var $59=$58; //@line 626 "pyexpat.c"
        var $60=HEAP[$59]; //@line 626 "pyexpat.c"
        var $61=($60) - 1; //@line 626 "pyexpat.c"
        var $62=$rv; //@line 626 "pyexpat.c"
        var $63=$62; //@line 626 "pyexpat.c"
        HEAP[$63]=$61; //@line 626 "pyexpat.c"
        var $64=$rv; //@line 626 "pyexpat.c"
        var $65=$64; //@line 626 "pyexpat.c"
        var $66=HEAP[$65]; //@line 626 "pyexpat.c"
        var $67=($66)==0; //@line 626 "pyexpat.c"
        if ($67) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 626 "pyexpat.c"
      case 9: // $bb8
        var $68=$rv; //@line 626 "pyexpat.c"
        var $69=$68+4; //@line 626 "pyexpat.c"
        var $70=HEAP[$69]; //@line 626 "pyexpat.c"
        var $71=$70+24; //@line 626 "pyexpat.c"
        var $72=HEAP[$71]; //@line 626 "pyexpat.c"
        var $73=$rv; //@line 626 "pyexpat.c"
        FUNCTION_TABLE[$72]($73); //@line 626 "pyexpat.c"
        __label__ = 10; break; //@line 626 "pyexpat.c"
      case 10: // $return
        ;
        return; //@line 626 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_EntityDeclHandler($userData, $entityName, $is_parameter_entity, $value, $value_length, $base, $systemId, $publicId, $notationName) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $entityName_addr;
        var $is_parameter_entity_addr;
        var $value_addr;
        var $value_length_addr;
        var $base_addr;
        var $systemId_addr;
        var $publicId_addr;
        var $notationName_addr;
        var $iftmp_46;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $entityName_addr=$entityName;
        $is_parameter_entity_addr=$is_parameter_entity;
        $value_addr=$value;
        $value_length_addr=$value_length;
        $base_addr=$base;
        $systemId_addr=$systemId;
        $publicId_addr=$publicId;
        $notationName_addr=$notationName;
        var $0=$userData_addr; //@line 656 "pyexpat.c"
        var $1=$0; //@line 656 "pyexpat.c"
        $self=$1; //@line 656 "pyexpat.c"
        $args=0; //@line 656 "pyexpat.c"
        $rv=0; //@line 656 "pyexpat.c"
        var $2=$self; //@line 656 "pyexpat.c"
        var $3=_have_handler($2, 17); //@line 656 "pyexpat.c"
        var $4=($3)!=0; //@line 656 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 656 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 656 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 656 "pyexpat.c"
        var $7=($6) < 0; //@line 656 "pyexpat.c"
        if ($7) { __label__ = 13; break; } else { __label__ = 2; break; } //@line 656 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 656 "pyexpat.c"
        var $9=$notationName_addr; //@line 656 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 656 "pyexpat.c"
        var $11=$self; //@line 656 "pyexpat.c"
        var $12=$publicId_addr; //@line 656 "pyexpat.c"
        var $13=_string_intern($11, $12); //@line 656 "pyexpat.c"
        var $14=$self; //@line 656 "pyexpat.c"
        var $15=$systemId_addr; //@line 656 "pyexpat.c"
        var $16=_string_intern($14, $15); //@line 656 "pyexpat.c"
        var $17=$self; //@line 656 "pyexpat.c"
        var $18=$base_addr; //@line 656 "pyexpat.c"
        var $19=_string_intern($17, $18); //@line 656 "pyexpat.c"
        var $20=$self; //@line 656 "pyexpat.c"
        var $21=$20+12; //@line 656 "pyexpat.c"
        var $22=HEAP[$21]; //@line 656 "pyexpat.c"
        var $23=($22)!=0; //@line 656 "pyexpat.c"
        var $24=$value_addr; //@line 656 "pyexpat.c"
        var $25=$value_length_addr; //@line 656 "pyexpat.c"
        if ($23) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 656 "pyexpat.c"
      case 3: // $bb2
        var $26=_conv_string_len_to_unicode($24, $25); //@line 656 "pyexpat.c"
        $iftmp_46=$26; //@line 656 "pyexpat.c"
        __label__ = 5; break; //@line 656 "pyexpat.c"
      case 4: // $bb3
        var $27=_conv_string_len_to_utf8($24, $25); //@line 656 "pyexpat.c"
        $iftmp_46=$27; //@line 656 "pyexpat.c"
        __label__ = 5; break; //@line 656 "pyexpat.c"
      case 5: // $bb4
        var $28=$self; //@line 656 "pyexpat.c"
        var $29=$entityName_addr; //@line 656 "pyexpat.c"
        var $30=_string_intern($28, $29); //@line 656 "pyexpat.c"
        var $31=$is_parameter_entity_addr; //@line 656 "pyexpat.c"
        var $32=$iftmp_46; //@line 656 "pyexpat.c"
        var $33=_Py_BuildValue(__str16, allocate([$30,0,0,0,$31,0,0,0,$32,0,0,0,$19,0,0,0,$16,0,0,0,$13,0,0,0,$10,0,0,0], ["%struct.PyObject*",0,0,0,"i32",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 656 "pyexpat.c"
        $args=$33; //@line 656 "pyexpat.c"
        var $34=($33)==0; //@line 656 "pyexpat.c"
        var $35=$self; //@line 656 "pyexpat.c"
        if ($34) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 656 "pyexpat.c"
      case 6: // $bb5
        _flag_error($35); //@line 656 "pyexpat.c"
        __label__ = 13; break; //@line 656 "pyexpat.c"
      case 7: // $bb6
        var $36=$35+24; //@line 656 "pyexpat.c"
        HEAP[$36]=1; //@line 656 "pyexpat.c"
        var $37=$self; //@line 656 "pyexpat.c"
        var $38=$37+48; //@line 656 "pyexpat.c"
        var $39=HEAP[$38]; //@line 656 "pyexpat.c"
        var $40=$39+68; //@line 656 "pyexpat.c"
        var $41=HEAP[$40]; //@line 656 "pyexpat.c"
        var $42=_getcode(17, __str17, 673); //@line 656 "pyexpat.c"
        var $43=$args; //@line 656 "pyexpat.c"
        var $44=$self; //@line 656 "pyexpat.c"
        var $45=_call_with_frame($42, $41, $43, $44); //@line 656 "pyexpat.c"
        $rv=$45; //@line 656 "pyexpat.c"
        var $46=$self; //@line 656 "pyexpat.c"
        var $47=$46+24; //@line 656 "pyexpat.c"
        HEAP[$47]=0; //@line 656 "pyexpat.c"
        var $48=$args; //@line 656 "pyexpat.c"
        var $49=$48; //@line 656 "pyexpat.c"
        var $50=HEAP[$49]; //@line 656 "pyexpat.c"
        var $51=($50) - 1; //@line 656 "pyexpat.c"
        var $52=$args; //@line 656 "pyexpat.c"
        var $53=$52; //@line 656 "pyexpat.c"
        HEAP[$53]=$51; //@line 656 "pyexpat.c"
        var $54=$args; //@line 656 "pyexpat.c"
        var $55=$54; //@line 656 "pyexpat.c"
        var $56=HEAP[$55]; //@line 656 "pyexpat.c"
        var $57=($56)==0; //@line 656 "pyexpat.c"
        if ($57) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 656 "pyexpat.c"
      case 8: // $bb7
        var $58=$args; //@line 656 "pyexpat.c"
        var $59=$58+4; //@line 656 "pyexpat.c"
        var $60=HEAP[$59]; //@line 656 "pyexpat.c"
        var $61=$60+24; //@line 656 "pyexpat.c"
        var $62=HEAP[$61]; //@line 656 "pyexpat.c"
        var $63=$args; //@line 656 "pyexpat.c"
        FUNCTION_TABLE[$62]($63); //@line 656 "pyexpat.c"
        __label__ = 9; break; //@line 656 "pyexpat.c"
      case 9: // $bb8
        var $64=$rv; //@line 656 "pyexpat.c"
        var $65=($64)==0; //@line 656 "pyexpat.c"
        if ($65) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 656 "pyexpat.c"
      case 10: // $bb9
        var $66=$self; //@line 656 "pyexpat.c"
        _flag_error($66); //@line 656 "pyexpat.c"
        __label__ = 13; break; //@line 656 "pyexpat.c"
      case 11: // $bb10
        var $67=$rv; //@line 656 "pyexpat.c"
        var $68=$67; //@line 656 "pyexpat.c"
        var $69=HEAP[$68]; //@line 656 "pyexpat.c"
        var $70=($69) - 1; //@line 656 "pyexpat.c"
        var $71=$rv; //@line 656 "pyexpat.c"
        var $72=$71; //@line 656 "pyexpat.c"
        HEAP[$72]=$70; //@line 656 "pyexpat.c"
        var $73=$rv; //@line 656 "pyexpat.c"
        var $74=$73; //@line 656 "pyexpat.c"
        var $75=HEAP[$74]; //@line 656 "pyexpat.c"
        var $76=($75)==0; //@line 656 "pyexpat.c"
        if ($76) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 656 "pyexpat.c"
      case 12: // $bb11
        var $77=$rv; //@line 656 "pyexpat.c"
        var $78=$77+4; //@line 656 "pyexpat.c"
        var $79=HEAP[$78]; //@line 656 "pyexpat.c"
        var $80=$79+24; //@line 656 "pyexpat.c"
        var $81=HEAP[$80]; //@line 656 "pyexpat.c"
        var $82=$rv; //@line 656 "pyexpat.c"
        FUNCTION_TABLE[$81]($82); //@line 656 "pyexpat.c"
        __label__ = 13; break; //@line 656 "pyexpat.c"
      case 13: // $return
        ;
        return; //@line 656 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_XmlDeclHandler($userData, $version, $encoding, $standalone) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $version_addr;
        var $encoding_addr;
        var $standalone_addr;
        var $iftmp_48;
        var $iftmp_47;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $version_addr=$version;
        $encoding_addr=$encoding;
        $standalone_addr=$standalone;
        var $0=$userData_addr; //@line 676 "pyexpat.c"
        var $1=$0; //@line 676 "pyexpat.c"
        $self=$1; //@line 676 "pyexpat.c"
        $args=0; //@line 676 "pyexpat.c"
        $rv=0; //@line 676 "pyexpat.c"
        var $2=$self; //@line 676 "pyexpat.c"
        var $3=_have_handler($2, 18); //@line 676 "pyexpat.c"
        var $4=($3)!=0; //@line 676 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 16; break; } //@line 676 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 676 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 676 "pyexpat.c"
        var $7=($6) < 0; //@line 676 "pyexpat.c"
        if ($7) { __label__ = 16; break; } else { __label__ = 2; break; } //@line 676 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 676 "pyexpat.c"
        var $9=$8+12; //@line 676 "pyexpat.c"
        var $10=HEAP[$9]; //@line 676 "pyexpat.c"
        var $11=($10)!=0; //@line 676 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 676 "pyexpat.c"
      case 3: // $bb2
        $iftmp_47=(FUNCTION_TABLE_OFFSET + 4); //@line 676 "pyexpat.c"
        __label__ = 5; break; //@line 676 "pyexpat.c"
      case 4: // $bb3
        $iftmp_47=(FUNCTION_TABLE_OFFSET + 6); //@line 676 "pyexpat.c"
        __label__ = 5; break; //@line 676 "pyexpat.c"
      case 5: // $bb4
        var $12=$self; //@line 676 "pyexpat.c"
        var $13=$12+12; //@line 676 "pyexpat.c"
        var $14=HEAP[$13]; //@line 676 "pyexpat.c"
        var $15=($14)!=0; //@line 676 "pyexpat.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 676 "pyexpat.c"
      case 6: // $bb5
        $iftmp_48=(FUNCTION_TABLE_OFFSET + 4); //@line 676 "pyexpat.c"
        __label__ = 8; break; //@line 676 "pyexpat.c"
      case 7: // $bb6
        $iftmp_48=(FUNCTION_TABLE_OFFSET + 6); //@line 676 "pyexpat.c"
        __label__ = 8; break; //@line 676 "pyexpat.c"
      case 8: // $bb7
        var $16=$iftmp_48; //@line 676 "pyexpat.c"
        var $17=$version_addr; //@line 676 "pyexpat.c"
        var $18=$iftmp_47; //@line 676 "pyexpat.c"
        var $19=$encoding_addr; //@line 676 "pyexpat.c"
        var $20=$standalone_addr; //@line 676 "pyexpat.c"
        var $21=_Py_BuildValue(__str18, allocate([$16,0,0,0,$17,0,0,0,$18,0,0,0,$19,0,0,0,$20,0,0,0], ["%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 676 "pyexpat.c"
        $args=$21; //@line 676 "pyexpat.c"
        var $22=($21)==0; //@line 676 "pyexpat.c"
        var $23=$self; //@line 676 "pyexpat.c"
        if ($22) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 676 "pyexpat.c"
      case 9: // $bb8
        _flag_error($23); //@line 676 "pyexpat.c"
        __label__ = 16; break; //@line 676 "pyexpat.c"
      case 10: // $bb9
        var $24=$23+24; //@line 676 "pyexpat.c"
        HEAP[$24]=1; //@line 676 "pyexpat.c"
        var $25=$self; //@line 676 "pyexpat.c"
        var $26=$25+48; //@line 676 "pyexpat.c"
        var $27=HEAP[$26]; //@line 676 "pyexpat.c"
        var $28=$27+72; //@line 676 "pyexpat.c"
        var $29=HEAP[$28]; //@line 676 "pyexpat.c"
        var $30=_getcode(18, __str19, 683); //@line 676 "pyexpat.c"
        var $31=$args; //@line 676 "pyexpat.c"
        var $32=$self; //@line 676 "pyexpat.c"
        var $33=_call_with_frame($30, $29, $31, $32); //@line 676 "pyexpat.c"
        $rv=$33; //@line 676 "pyexpat.c"
        var $34=$self; //@line 676 "pyexpat.c"
        var $35=$34+24; //@line 676 "pyexpat.c"
        HEAP[$35]=0; //@line 676 "pyexpat.c"
        var $36=$args; //@line 676 "pyexpat.c"
        var $37=$36; //@line 676 "pyexpat.c"
        var $38=HEAP[$37]; //@line 676 "pyexpat.c"
        var $39=($38) - 1; //@line 676 "pyexpat.c"
        var $40=$args; //@line 676 "pyexpat.c"
        var $41=$40; //@line 676 "pyexpat.c"
        HEAP[$41]=$39; //@line 676 "pyexpat.c"
        var $42=$args; //@line 676 "pyexpat.c"
        var $43=$42; //@line 676 "pyexpat.c"
        var $44=HEAP[$43]; //@line 676 "pyexpat.c"
        var $45=($44)==0; //@line 676 "pyexpat.c"
        if ($45) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 676 "pyexpat.c"
      case 11: // $bb10
        var $46=$args; //@line 676 "pyexpat.c"
        var $47=$46+4; //@line 676 "pyexpat.c"
        var $48=HEAP[$47]; //@line 676 "pyexpat.c"
        var $49=$48+24; //@line 676 "pyexpat.c"
        var $50=HEAP[$49]; //@line 676 "pyexpat.c"
        var $51=$args; //@line 676 "pyexpat.c"
        FUNCTION_TABLE[$50]($51); //@line 676 "pyexpat.c"
        __label__ = 12; break; //@line 676 "pyexpat.c"
      case 12: // $bb11
        var $52=$rv; //@line 676 "pyexpat.c"
        var $53=($52)==0; //@line 676 "pyexpat.c"
        if ($53) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 676 "pyexpat.c"
      case 13: // $bb12
        var $54=$self; //@line 676 "pyexpat.c"
        _flag_error($54); //@line 676 "pyexpat.c"
        __label__ = 16; break; //@line 676 "pyexpat.c"
      case 14: // $bb13
        var $55=$rv; //@line 676 "pyexpat.c"
        var $56=$55; //@line 676 "pyexpat.c"
        var $57=HEAP[$56]; //@line 676 "pyexpat.c"
        var $58=($57) - 1; //@line 676 "pyexpat.c"
        var $59=$rv; //@line 676 "pyexpat.c"
        var $60=$59; //@line 676 "pyexpat.c"
        HEAP[$60]=$58; //@line 676 "pyexpat.c"
        var $61=$rv; //@line 676 "pyexpat.c"
        var $62=$61; //@line 676 "pyexpat.c"
        var $63=HEAP[$62]; //@line 676 "pyexpat.c"
        var $64=($63)==0; //@line 676 "pyexpat.c"
        if ($64) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 676 "pyexpat.c"
      case 15: // $bb14
        var $65=$rv; //@line 676 "pyexpat.c"
        var $66=$65+4; //@line 676 "pyexpat.c"
        var $67=HEAP[$66]; //@line 676 "pyexpat.c"
        var $68=$67+24; //@line 676 "pyexpat.c"
        var $69=HEAP[$68]; //@line 676 "pyexpat.c"
        var $70=$rv; //@line 676 "pyexpat.c"
        FUNCTION_TABLE[$69]($70); //@line 676 "pyexpat.c"
        __label__ = 16; break; //@line 676 "pyexpat.c"
      case 16: // $return
        ;
        return; //@line 676 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _conv_content_model($model, $conv_string) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $model_addr;
        var $conv_string_addr;
        var $retval;
        var $0;
        var $result;
        var $children;
        var $i;
        var $child;
        $model_addr=$model;
        $conv_string_addr=$conv_string;
        $result=0; //@line 689 "pyexpat.c"
        var $1=$model_addr; //@line 690 "pyexpat.c"
        var $2=$1+12; //@line 690 "pyexpat.c"
        var $3=HEAP[$2]; //@line 690 "pyexpat.c"
        var $4=_PyTuple_New($3); //@line 690 "pyexpat.c"
        $children=$4; //@line 690 "pyexpat.c"
        var $5=$children; //@line 693 "pyexpat.c"
        var $6=($5)!=0; //@line 693 "pyexpat.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 693 "pyexpat.c"
      case 1: // $bb
        var $7=$model_addr; //@line 694 "pyexpat.c"
        var $8=$7+12; //@line 694 "pyexpat.c"
        var $9=HEAP[$8]; //@line 694 "pyexpat.c"
        var $10=($9) > 2147483646; //@line 694 "pyexpat.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 694 "pyexpat.c"
      case 2: // $bb1
        ___assert_fail(__str20, __str6, 694, ___PRETTY_FUNCTION___9747); //@line 694 "pyexpat.c"
        throw "Reached an unreachable!" //@line 694 "pyexpat.c"
      case 3: // $bb2
        $i=0; //@line 695 "pyexpat.c"
        __label__ = 10; break; //@line 695 "pyexpat.c"
      case 4: // $bb3
        var $11=$49+16; //@line 697 "pyexpat.c"
        var $12=HEAP[$11]; //@line 697 "pyexpat.c"
        var $13=$i; //@line 697 "pyexpat.c"
        var $14=$12+20*$13; //@line 697 "pyexpat.c"
        var $15=$conv_string_addr; //@line 697 "pyexpat.c"
        var $16=_conv_content_model($14, $15); //@line 697 "pyexpat.c"
        $child=$16; //@line 697 "pyexpat.c"
        var $17=$child; //@line 698 "pyexpat.c"
        var $18=($17)==0; //@line 698 "pyexpat.c"
        var $19=$children; //@line 699 "pyexpat.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 698 "pyexpat.c"
      case 5: // $bb4
        var $20=($19)!=0; //@line 699 "pyexpat.c"
        if ($20) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 699 "pyexpat.c"
      case 6: // $bb5
        var $21=$children; //@line 699 "pyexpat.c"
        var $22=$21; //@line 699 "pyexpat.c"
        var $23=HEAP[$22]; //@line 699 "pyexpat.c"
        var $24=($23) - 1; //@line 699 "pyexpat.c"
        var $25=$children; //@line 699 "pyexpat.c"
        var $26=$25; //@line 699 "pyexpat.c"
        HEAP[$26]=$24; //@line 699 "pyexpat.c"
        var $27=$children; //@line 699 "pyexpat.c"
        var $28=$27; //@line 699 "pyexpat.c"
        var $29=HEAP[$28]; //@line 699 "pyexpat.c"
        var $30=($29)==0; //@line 699 "pyexpat.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 699 "pyexpat.c"
      case 7: // $bb6
        var $31=$children; //@line 699 "pyexpat.c"
        var $32=$31+4; //@line 699 "pyexpat.c"
        var $33=HEAP[$32]; //@line 699 "pyexpat.c"
        var $34=$33+24; //@line 699 "pyexpat.c"
        var $35=HEAP[$34]; //@line 699 "pyexpat.c"
        var $36=$children; //@line 699 "pyexpat.c"
        FUNCTION_TABLE[$35]($36); //@line 699 "pyexpat.c"
        __label__ = 8; break; //@line 699 "pyexpat.c"
      case 8: // $bb7
        $0=0; //@line 700 "pyexpat.c"
        __label__ = 13; break; //@line 700 "pyexpat.c"
      case 9: // $bb8
        var $37=$19; //@line 702 "pyexpat.c"
        var $38=$i; //@line 702 "pyexpat.c"
        var $39=$37+12; //@line 702 "pyexpat.c"
        var $40=$39+$38*4; //@line 702 "pyexpat.c"
        var $41=$child; //@line 702 "pyexpat.c"
        HEAP[$40]=$41; //@line 702 "pyexpat.c"
        var $42=$i; //@line 695 "pyexpat.c"
        var $43=($42) + 1; //@line 695 "pyexpat.c"
        $i=$43; //@line 695 "pyexpat.c"
        __label__ = 10; break; //@line 695 "pyexpat.c"
      case 10: // $bb9
        var $44=$model_addr; //@line 695 "pyexpat.c"
        var $45=$44+12; //@line 695 "pyexpat.c"
        var $46=HEAP[$45]; //@line 695 "pyexpat.c"
        var $47=$i; //@line 695 "pyexpat.c"
        var $48=($46) > ($47); //@line 695 "pyexpat.c"
        var $49=$model_addr; //@line 697 "pyexpat.c"
        if ($48) { __label__ = 4; break; } else { __label__ = 11; break; } //@line 695 "pyexpat.c"
      case 11: // $bb10
        var $50=$49+8; //@line 704 "pyexpat.c"
        var $51=HEAP[$50]; //@line 704 "pyexpat.c"
        var $52=$model_addr; //@line 704 "pyexpat.c"
        var $53=$52+4; //@line 704 "pyexpat.c"
        var $54=HEAP[$53]; //@line 704 "pyexpat.c"
        var $55=$model_addr; //@line 704 "pyexpat.c"
        var $56=$55; //@line 704 "pyexpat.c"
        var $57=HEAP[$56]; //@line 704 "pyexpat.c"
        var $58=$conv_string_addr; //@line 704 "pyexpat.c"
        var $59=$children; //@line 704 "pyexpat.c"
        var $60=_Py_BuildValue(__str21, allocate([$57,0,0,0,$54,0,0,0,$58,0,0,0,$51,0,0,0,$59,0,0,0], ["i32",0,0,0,"i32",0,0,0,"%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 704 "pyexpat.c"
        $result=$60; //@line 704 "pyexpat.c"
        __label__ = 12; break; //@line 704 "pyexpat.c"
      case 12: // $bb11
        var $61=$result; //@line 708 "pyexpat.c"
        $0=$61; //@line 708 "pyexpat.c"
        __label__ = 13; break; //@line 708 "pyexpat.c"
      case 13: // $bb12
        var $62=$0; //@line 700 "pyexpat.c"
        $retval=$62; //@line 700 "pyexpat.c"
        var $retval13=$retval; //@line 700 "pyexpat.c"
        ;
        return $retval13; //@line 700 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_ElementDeclHandler($userData, $name, $model) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $name_addr;
        var $model_addr;
        var $iftmp_51;
        var $self;
        var $args;
        var $rv;
        var $modelobj;
        var $nameobj;
        $userData_addr=$userData;
        $name_addr=$name;
        $model_addr=$model;
        var $0=$userData_addr; //@line 716 "pyexpat.c"
        var $1=$0; //@line 716 "pyexpat.c"
        $self=$1; //@line 716 "pyexpat.c"
        $args=0; //@line 717 "pyexpat.c"
        var $2=$self; //@line 719 "pyexpat.c"
        var $3=_have_handler($2, 19); //@line 719 "pyexpat.c"
        var $4=($3)!=0; //@line 719 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 19; break; } //@line 719 "pyexpat.c"
      case 1: // $bb
        $rv=0; //@line 720 "pyexpat.c"
        var $5=$self; //@line 723 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 723 "pyexpat.c"
        var $7=($6) < 0; //@line 723 "pyexpat.c"
        if ($7) { __label__ = 19; break; } else { __label__ = 2; break; } //@line 723 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 726 "pyexpat.c"
        var $9=$8+12; //@line 726 "pyexpat.c"
        var $10=HEAP[$9]; //@line 726 "pyexpat.c"
        var $11=($10)!=0; //@line 726 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 726 "pyexpat.c"
      case 3: // $bb2
        $iftmp_51=(FUNCTION_TABLE_OFFSET + 4); //@line 726 "pyexpat.c"
        __label__ = 5; break; //@line 726 "pyexpat.c"
      case 4: // $bb3
        $iftmp_51=(FUNCTION_TABLE_OFFSET + 6); //@line 726 "pyexpat.c"
        __label__ = 5; break; //@line 726 "pyexpat.c"
      case 5: // $bb4
        var $12=$model_addr; //@line 726 "pyexpat.c"
        var $13=$iftmp_51; //@line 726 "pyexpat.c"
        var $14=_conv_content_model($12, $13); //@line 726 "pyexpat.c"
        $modelobj=$14; //@line 726 "pyexpat.c"
        var $15=($14)==0; //@line 733 "pyexpat.c"
        var $16=$self; //@line 734 "pyexpat.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 733 "pyexpat.c"
      case 6: // $bb5
        _flag_error($16); //@line 734 "pyexpat.c"
        __label__ = 19; break; //@line 734 "pyexpat.c"
      case 7: // $bb6
        var $17=$name_addr; //@line 737 "pyexpat.c"
        var $18=_string_intern($16, $17); //@line 737 "pyexpat.c"
        $nameobj=$18; //@line 737 "pyexpat.c"
        var $19=$nameobj; //@line 738 "pyexpat.c"
        var $20=($19)==0; //@line 738 "pyexpat.c"
        if ($20) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 738 "pyexpat.c"
      case 8: // $bb7
        var $21=$modelobj; //@line 739 "pyexpat.c"
        var $22=$21; //@line 739 "pyexpat.c"
        var $23=HEAP[$22]; //@line 739 "pyexpat.c"
        var $24=($23) - 1; //@line 739 "pyexpat.c"
        var $25=$modelobj; //@line 739 "pyexpat.c"
        var $26=$25; //@line 739 "pyexpat.c"
        HEAP[$26]=$24; //@line 739 "pyexpat.c"
        var $27=$modelobj; //@line 739 "pyexpat.c"
        var $28=$27; //@line 739 "pyexpat.c"
        var $29=HEAP[$28]; //@line 739 "pyexpat.c"
        var $30=($29)==0; //@line 739 "pyexpat.c"
        if ($30) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 739 "pyexpat.c"
      case 9: // $bb8
        var $31=$modelobj; //@line 739 "pyexpat.c"
        var $32=$31+4; //@line 739 "pyexpat.c"
        var $33=HEAP[$32]; //@line 739 "pyexpat.c"
        var $34=$33+24; //@line 739 "pyexpat.c"
        var $35=HEAP[$34]; //@line 739 "pyexpat.c"
        var $36=$modelobj; //@line 739 "pyexpat.c"
        FUNCTION_TABLE[$35]($36); //@line 739 "pyexpat.c"
        __label__ = 10; break; //@line 739 "pyexpat.c"
      case 10: // $bb9
        var $37=$self; //@line 740 "pyexpat.c"
        _flag_error($37); //@line 740 "pyexpat.c"
        __label__ = 19; break; //@line 740 "pyexpat.c"
      case 11: // $bb10
        var $38=$nameobj; //@line 743 "pyexpat.c"
        var $39=$modelobj; //@line 743 "pyexpat.c"
        var $40=_Py_BuildValue(__str22, allocate([$38,0,0,0,$39,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 743 "pyexpat.c"
        $args=$40; //@line 743 "pyexpat.c"
        var $41=$args; //@line 744 "pyexpat.c"
        var $42=($41)==0; //@line 744 "pyexpat.c"
        if ($42) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 744 "pyexpat.c"
      case 12: // $bb11
        var $43=$modelobj; //@line 745 "pyexpat.c"
        var $44=$43; //@line 745 "pyexpat.c"
        var $45=HEAP[$44]; //@line 745 "pyexpat.c"
        var $46=($45) - 1; //@line 745 "pyexpat.c"
        var $47=$modelobj; //@line 745 "pyexpat.c"
        var $48=$47; //@line 745 "pyexpat.c"
        HEAP[$48]=$46; //@line 745 "pyexpat.c"
        var $49=$modelobj; //@line 745 "pyexpat.c"
        var $50=$49; //@line 745 "pyexpat.c"
        var $51=HEAP[$50]; //@line 745 "pyexpat.c"
        var $52=($51)==0; //@line 745 "pyexpat.c"
        if ($52) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 745 "pyexpat.c"
      case 13: // $bb12
        var $53=$modelobj; //@line 745 "pyexpat.c"
        var $54=$53+4; //@line 745 "pyexpat.c"
        var $55=HEAP[$54]; //@line 745 "pyexpat.c"
        var $56=$55+24; //@line 745 "pyexpat.c"
        var $57=HEAP[$56]; //@line 745 "pyexpat.c"
        var $58=$modelobj; //@line 745 "pyexpat.c"
        FUNCTION_TABLE[$57]($58); //@line 745 "pyexpat.c"
        __label__ = 14; break; //@line 745 "pyexpat.c"
      case 14: // $bb13
        var $59=$self; //@line 746 "pyexpat.c"
        _flag_error($59); //@line 746 "pyexpat.c"
        __label__ = 19; break; //@line 746 "pyexpat.c"
      case 15: // $bb14
        var $60=$self; //@line 749 "pyexpat.c"
        var $61=$60+24; //@line 749 "pyexpat.c"
        HEAP[$61]=1; //@line 749 "pyexpat.c"
        var $62=$self; //@line 750 "pyexpat.c"
        var $63=$62+48; //@line 750 "pyexpat.c"
        var $64=HEAP[$63]; //@line 750 "pyexpat.c"
        var $65=$64+76; //@line 750 "pyexpat.c"
        var $66=HEAP[$65]; //@line 750 "pyexpat.c"
        var $67=_getcode(19, __str23, 750); //@line 750 "pyexpat.c"
        var $68=$args; //@line 750 "pyexpat.c"
        var $69=$self; //@line 750 "pyexpat.c"
        var $70=_call_with_frame($67, $66, $68, $69); //@line 750 "pyexpat.c"
        $rv=$70; //@line 750 "pyexpat.c"
        var $71=$self; //@line 752 "pyexpat.c"
        var $72=$71+24; //@line 752 "pyexpat.c"
        HEAP[$72]=0; //@line 752 "pyexpat.c"
        var $73=$rv; //@line 753 "pyexpat.c"
        var $74=($73)==0; //@line 753 "pyexpat.c"
        if ($74) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 753 "pyexpat.c"
      case 16: // $bb15
        var $75=$self; //@line 754 "pyexpat.c"
        _flag_error($75); //@line 754 "pyexpat.c"
        __label__ = 19; break; //@line 754 "pyexpat.c"
      case 17: // $bb16
        var $76=$rv; //@line 757 "pyexpat.c"
        var $77=$76; //@line 757 "pyexpat.c"
        var $78=HEAP[$77]; //@line 757 "pyexpat.c"
        var $79=($78) - 1; //@line 757 "pyexpat.c"
        var $80=$rv; //@line 757 "pyexpat.c"
        var $81=$80; //@line 757 "pyexpat.c"
        HEAP[$81]=$79; //@line 757 "pyexpat.c"
        var $82=$rv; //@line 757 "pyexpat.c"
        var $83=$82; //@line 757 "pyexpat.c"
        var $84=HEAP[$83]; //@line 757 "pyexpat.c"
        var $85=($84)==0; //@line 757 "pyexpat.c"
        if ($85) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 757 "pyexpat.c"
      case 18: // $bb17
        var $86=$rv; //@line 757 "pyexpat.c"
        var $87=$86+4; //@line 757 "pyexpat.c"
        var $88=HEAP[$87]; //@line 757 "pyexpat.c"
        var $89=$88+24; //@line 757 "pyexpat.c"
        var $90=HEAP[$89]; //@line 757 "pyexpat.c"
        var $91=$rv; //@line 757 "pyexpat.c"
        FUNCTION_TABLE[$90]($91); //@line 757 "pyexpat.c"
        __label__ = 19; break; //@line 759 "pyexpat.c"
      case 19: // $finally
        var $92=$args; //@line 760 "pyexpat.c"
        var $93=($92)!=0; //@line 760 "pyexpat.c"
        if ($93) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 760 "pyexpat.c"
      case 20: // $bb18
        var $94=$args; //@line 760 "pyexpat.c"
        var $95=$94; //@line 760 "pyexpat.c"
        var $96=HEAP[$95]; //@line 760 "pyexpat.c"
        var $97=($96) - 1; //@line 760 "pyexpat.c"
        var $98=$args; //@line 760 "pyexpat.c"
        var $99=$98; //@line 760 "pyexpat.c"
        HEAP[$99]=$97; //@line 760 "pyexpat.c"
        var $100=$args; //@line 760 "pyexpat.c"
        var $101=$100; //@line 760 "pyexpat.c"
        var $102=HEAP[$101]; //@line 760 "pyexpat.c"
        var $103=($102)==0; //@line 760 "pyexpat.c"
        if ($103) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 760 "pyexpat.c"
      case 21: // $bb19
        var $104=$args; //@line 760 "pyexpat.c"
        var $105=$104+4; //@line 760 "pyexpat.c"
        var $106=HEAP[$105]; //@line 760 "pyexpat.c"
        var $107=$106+24; //@line 760 "pyexpat.c"
        var $108=HEAP[$107]; //@line 760 "pyexpat.c"
        var $109=$args; //@line 760 "pyexpat.c"
        FUNCTION_TABLE[$108]($109); //@line 760 "pyexpat.c"
        __label__ = 22; break; //@line 760 "pyexpat.c"
      case 22: // $bb20
        var $110=$self; //@line 761 "pyexpat.c"
        var $111=$110+8; //@line 761 "pyexpat.c"
        var $112=HEAP[$111]; //@line 761 "pyexpat.c"
        var $113=$model_addr; //@line 761 "pyexpat.c"
        _PyExpat_XML_FreeContentModel($112, $113); //@line 761 "pyexpat.c"
        ;
        return; //@line 762 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_AttlistDeclHandler($userData, $elname, $attname, $att_type, $dflt, $isrequired) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $elname_addr;
        var $attname_addr;
        var $att_type_addr;
        var $dflt_addr;
        var $isrequired_addr;
        var $iftmp_53;
        var $iftmp_52;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $elname_addr=$elname;
        $attname_addr=$attname;
        $att_type_addr=$att_type;
        $dflt_addr=$dflt;
        $isrequired_addr=$isrequired;
        var $0=$userData_addr; //@line 765 "pyexpat.c"
        var $1=$0; //@line 765 "pyexpat.c"
        $self=$1; //@line 765 "pyexpat.c"
        $args=0; //@line 765 "pyexpat.c"
        $rv=0; //@line 765 "pyexpat.c"
        var $2=$self; //@line 765 "pyexpat.c"
        var $3=_have_handler($2, 20); //@line 765 "pyexpat.c"
        var $4=($3)!=0; //@line 765 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 16; break; } //@line 765 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 765 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 765 "pyexpat.c"
        var $7=($6) < 0; //@line 765 "pyexpat.c"
        if ($7) { __label__ = 16; break; } else { __label__ = 2; break; } //@line 765 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 765 "pyexpat.c"
        var $9=$8+12; //@line 765 "pyexpat.c"
        var $10=HEAP[$9]; //@line 765 "pyexpat.c"
        var $11=($10)!=0; //@line 765 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 765 "pyexpat.c"
      case 3: // $bb2
        $iftmp_52=(FUNCTION_TABLE_OFFSET + 4); //@line 765 "pyexpat.c"
        __label__ = 5; break; //@line 765 "pyexpat.c"
      case 4: // $bb3
        $iftmp_52=(FUNCTION_TABLE_OFFSET + 6); //@line 765 "pyexpat.c"
        __label__ = 5; break; //@line 765 "pyexpat.c"
      case 5: // $bb4
        var $12=$self; //@line 765 "pyexpat.c"
        var $13=$12+12; //@line 765 "pyexpat.c"
        var $14=HEAP[$13]; //@line 765 "pyexpat.c"
        var $15=($14)!=0; //@line 765 "pyexpat.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 765 "pyexpat.c"
      case 6: // $bb5
        $iftmp_53=(FUNCTION_TABLE_OFFSET + 4); //@line 765 "pyexpat.c"
        __label__ = 8; break; //@line 765 "pyexpat.c"
      case 7: // $bb6
        $iftmp_53=(FUNCTION_TABLE_OFFSET + 6); //@line 765 "pyexpat.c"
        __label__ = 8; break; //@line 765 "pyexpat.c"
      case 8: // $bb7
        var $16=$self; //@line 765 "pyexpat.c"
        var $17=$attname_addr; //@line 765 "pyexpat.c"
        var $18=_string_intern($16, $17); //@line 765 "pyexpat.c"
        var $19=$self; //@line 765 "pyexpat.c"
        var $20=$elname_addr; //@line 765 "pyexpat.c"
        var $21=_string_intern($19, $20); //@line 765 "pyexpat.c"
        var $22=$iftmp_53; //@line 765 "pyexpat.c"
        var $23=$att_type_addr; //@line 765 "pyexpat.c"
        var $24=$iftmp_52; //@line 765 "pyexpat.c"
        var $25=$dflt_addr; //@line 765 "pyexpat.c"
        var $26=$isrequired_addr; //@line 765 "pyexpat.c"
        var $27=_Py_BuildValue(__str24, allocate([$21,0,0,0,$18,0,0,0,$22,0,0,0,$23,0,0,0,$24,0,0,0,$25,0,0,0,$26,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 765 "pyexpat.c"
        $args=$27; //@line 765 "pyexpat.c"
        var $28=($27)==0; //@line 765 "pyexpat.c"
        var $29=$self; //@line 765 "pyexpat.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 765 "pyexpat.c"
      case 9: // $bb8
        _flag_error($29); //@line 765 "pyexpat.c"
        __label__ = 16; break; //@line 765 "pyexpat.c"
      case 10: // $bb9
        var $30=$29+24; //@line 765 "pyexpat.c"
        HEAP[$30]=1; //@line 765 "pyexpat.c"
        var $31=$self; //@line 765 "pyexpat.c"
        var $32=$31+48; //@line 765 "pyexpat.c"
        var $33=HEAP[$32]; //@line 765 "pyexpat.c"
        var $34=$33+80; //@line 765 "pyexpat.c"
        var $35=HEAP[$34]; //@line 765 "pyexpat.c"
        var $36=_getcode(20, __str25, 775); //@line 765 "pyexpat.c"
        var $37=$args; //@line 765 "pyexpat.c"
        var $38=$self; //@line 765 "pyexpat.c"
        var $39=_call_with_frame($36, $35, $37, $38); //@line 765 "pyexpat.c"
        $rv=$39; //@line 765 "pyexpat.c"
        var $40=$self; //@line 765 "pyexpat.c"
        var $41=$40+24; //@line 765 "pyexpat.c"
        HEAP[$41]=0; //@line 765 "pyexpat.c"
        var $42=$args; //@line 765 "pyexpat.c"
        var $43=$42; //@line 765 "pyexpat.c"
        var $44=HEAP[$43]; //@line 765 "pyexpat.c"
        var $45=($44) - 1; //@line 765 "pyexpat.c"
        var $46=$args; //@line 765 "pyexpat.c"
        var $47=$46; //@line 765 "pyexpat.c"
        HEAP[$47]=$45; //@line 765 "pyexpat.c"
        var $48=$args; //@line 765 "pyexpat.c"
        var $49=$48; //@line 765 "pyexpat.c"
        var $50=HEAP[$49]; //@line 765 "pyexpat.c"
        var $51=($50)==0; //@line 765 "pyexpat.c"
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 765 "pyexpat.c"
      case 11: // $bb10
        var $52=$args; //@line 765 "pyexpat.c"
        var $53=$52+4; //@line 765 "pyexpat.c"
        var $54=HEAP[$53]; //@line 765 "pyexpat.c"
        var $55=$54+24; //@line 765 "pyexpat.c"
        var $56=HEAP[$55]; //@line 765 "pyexpat.c"
        var $57=$args; //@line 765 "pyexpat.c"
        FUNCTION_TABLE[$56]($57); //@line 765 "pyexpat.c"
        __label__ = 12; break; //@line 765 "pyexpat.c"
      case 12: // $bb11
        var $58=$rv; //@line 765 "pyexpat.c"
        var $59=($58)==0; //@line 765 "pyexpat.c"
        if ($59) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 765 "pyexpat.c"
      case 13: // $bb12
        var $60=$self; //@line 765 "pyexpat.c"
        _flag_error($60); //@line 765 "pyexpat.c"
        __label__ = 16; break; //@line 765 "pyexpat.c"
      case 14: // $bb13
        var $61=$rv; //@line 765 "pyexpat.c"
        var $62=$61; //@line 765 "pyexpat.c"
        var $63=HEAP[$62]; //@line 765 "pyexpat.c"
        var $64=($63) - 1; //@line 765 "pyexpat.c"
        var $65=$rv; //@line 765 "pyexpat.c"
        var $66=$65; //@line 765 "pyexpat.c"
        HEAP[$66]=$64; //@line 765 "pyexpat.c"
        var $67=$rv; //@line 765 "pyexpat.c"
        var $68=$67; //@line 765 "pyexpat.c"
        var $69=HEAP[$68]; //@line 765 "pyexpat.c"
        var $70=($69)==0; //@line 765 "pyexpat.c"
        if ($70) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 765 "pyexpat.c"
      case 15: // $bb14
        var $71=$rv; //@line 765 "pyexpat.c"
        var $72=$71+4; //@line 765 "pyexpat.c"
        var $73=HEAP[$72]; //@line 765 "pyexpat.c"
        var $74=$73+24; //@line 765 "pyexpat.c"
        var $75=HEAP[$74]; //@line 765 "pyexpat.c"
        var $76=$rv; //@line 765 "pyexpat.c"
        FUNCTION_TABLE[$75]($76); //@line 765 "pyexpat.c"
        __label__ = 16; break; //@line 765 "pyexpat.c"
      case 16: // $return
        ;
        return; //@line 765 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_SkippedEntityHandler($userData, $entityName, $is_parameter_entity) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $entityName_addr;
        var $is_parameter_entity_addr;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $entityName_addr=$entityName;
        $is_parameter_entity_addr=$is_parameter_entity;
        var $0=$userData_addr; //@line 778 "pyexpat.c"
        var $1=$0; //@line 778 "pyexpat.c"
        $self=$1; //@line 778 "pyexpat.c"
        $args=0; //@line 778 "pyexpat.c"
        $rv=0; //@line 778 "pyexpat.c"
        var $2=$self; //@line 778 "pyexpat.c"
        var $3=_have_handler($2, 21); //@line 778 "pyexpat.c"
        var $4=($3)!=0; //@line 778 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 778 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 778 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 778 "pyexpat.c"
        var $7=($6) < 0; //@line 778 "pyexpat.c"
        if ($7) { __label__ = 10; break; } else { __label__ = 2; break; } //@line 778 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 778 "pyexpat.c"
        var $9=$entityName_addr; //@line 778 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 778 "pyexpat.c"
        var $11=$is_parameter_entity_addr; //@line 778 "pyexpat.c"
        var $12=_Py_BuildValue(__str26, allocate([$10,0,0,0,$11,0,0,0], ["%struct.PyObject*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 778 "pyexpat.c"
        $args=$12; //@line 778 "pyexpat.c"
        var $13=$args; //@line 778 "pyexpat.c"
        var $14=($13)==0; //@line 778 "pyexpat.c"
        var $15=$self; //@line 778 "pyexpat.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 778 "pyexpat.c"
      case 3: // $bb2
        _flag_error($15); //@line 778 "pyexpat.c"
        __label__ = 10; break; //@line 778 "pyexpat.c"
      case 4: // $bb3
        var $16=$15+24; //@line 778 "pyexpat.c"
        HEAP[$16]=1; //@line 778 "pyexpat.c"
        var $17=$self; //@line 778 "pyexpat.c"
        var $18=$17+48; //@line 778 "pyexpat.c"
        var $19=HEAP[$18]; //@line 778 "pyexpat.c"
        var $20=$19+84; //@line 778 "pyexpat.c"
        var $21=HEAP[$20]; //@line 778 "pyexpat.c"
        var $22=_getcode(21, __str27, 783); //@line 778 "pyexpat.c"
        var $23=$args; //@line 778 "pyexpat.c"
        var $24=$self; //@line 778 "pyexpat.c"
        var $25=_call_with_frame($22, $21, $23, $24); //@line 778 "pyexpat.c"
        $rv=$25; //@line 778 "pyexpat.c"
        var $26=$self; //@line 778 "pyexpat.c"
        var $27=$26+24; //@line 778 "pyexpat.c"
        HEAP[$27]=0; //@line 778 "pyexpat.c"
        var $28=$args; //@line 778 "pyexpat.c"
        var $29=$28; //@line 778 "pyexpat.c"
        var $30=HEAP[$29]; //@line 778 "pyexpat.c"
        var $31=($30) - 1; //@line 778 "pyexpat.c"
        var $32=$args; //@line 778 "pyexpat.c"
        var $33=$32; //@line 778 "pyexpat.c"
        HEAP[$33]=$31; //@line 778 "pyexpat.c"
        var $34=$args; //@line 778 "pyexpat.c"
        var $35=$34; //@line 778 "pyexpat.c"
        var $36=HEAP[$35]; //@line 778 "pyexpat.c"
        var $37=($36)==0; //@line 778 "pyexpat.c"
        if ($37) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 778 "pyexpat.c"
      case 5: // $bb4
        var $38=$args; //@line 778 "pyexpat.c"
        var $39=$38+4; //@line 778 "pyexpat.c"
        var $40=HEAP[$39]; //@line 778 "pyexpat.c"
        var $41=$40+24; //@line 778 "pyexpat.c"
        var $42=HEAP[$41]; //@line 778 "pyexpat.c"
        var $43=$args; //@line 778 "pyexpat.c"
        FUNCTION_TABLE[$42]($43); //@line 778 "pyexpat.c"
        __label__ = 6; break; //@line 778 "pyexpat.c"
      case 6: // $bb5
        var $44=$rv; //@line 778 "pyexpat.c"
        var $45=($44)==0; //@line 778 "pyexpat.c"
        if ($45) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 778 "pyexpat.c"
      case 7: // $bb6
        var $46=$self; //@line 778 "pyexpat.c"
        _flag_error($46); //@line 778 "pyexpat.c"
        __label__ = 10; break; //@line 778 "pyexpat.c"
      case 8: // $bb7
        var $47=$rv; //@line 778 "pyexpat.c"
        var $48=$47; //@line 778 "pyexpat.c"
        var $49=HEAP[$48]; //@line 778 "pyexpat.c"
        var $50=($49) - 1; //@line 778 "pyexpat.c"
        var $51=$rv; //@line 778 "pyexpat.c"
        var $52=$51; //@line 778 "pyexpat.c"
        HEAP[$52]=$50; //@line 778 "pyexpat.c"
        var $53=$rv; //@line 778 "pyexpat.c"
        var $54=$53; //@line 778 "pyexpat.c"
        var $55=HEAP[$54]; //@line 778 "pyexpat.c"
        var $56=($55)==0; //@line 778 "pyexpat.c"
        if ($56) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 778 "pyexpat.c"
      case 9: // $bb8
        var $57=$rv; //@line 778 "pyexpat.c"
        var $58=$57+4; //@line 778 "pyexpat.c"
        var $59=HEAP[$58]; //@line 778 "pyexpat.c"
        var $60=$59+24; //@line 778 "pyexpat.c"
        var $61=HEAP[$60]; //@line 778 "pyexpat.c"
        var $62=$rv; //@line 778 "pyexpat.c"
        FUNCTION_TABLE[$61]($62); //@line 778 "pyexpat.c"
        __label__ = 10; break; //@line 778 "pyexpat.c"
      case 10: // $return
        ;
        return; //@line 778 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_NotationDeclHandler($userData, $notationName, $base, $systemId, $publicId) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $notationName_addr;
        var $base_addr;
        var $systemId_addr;
        var $publicId_addr;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $notationName_addr=$notationName;
        $base_addr=$base;
        $systemId_addr=$systemId;
        $publicId_addr=$publicId;
        var $0=$userData_addr; //@line 786 "pyexpat.c"
        var $1=$0; //@line 786 "pyexpat.c"
        $self=$1; //@line 786 "pyexpat.c"
        $args=0; //@line 786 "pyexpat.c"
        $rv=0; //@line 786 "pyexpat.c"
        var $2=$self; //@line 786 "pyexpat.c"
        var $3=_have_handler($2, 5); //@line 786 "pyexpat.c"
        var $4=($3)!=0; //@line 786 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 786 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 786 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 786 "pyexpat.c"
        var $7=($6) < 0; //@line 786 "pyexpat.c"
        if ($7) { __label__ = 10; break; } else { __label__ = 2; break; } //@line 786 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 786 "pyexpat.c"
        var $9=$publicId_addr; //@line 786 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 786 "pyexpat.c"
        var $11=$self; //@line 786 "pyexpat.c"
        var $12=$systemId_addr; //@line 786 "pyexpat.c"
        var $13=_string_intern($11, $12); //@line 786 "pyexpat.c"
        var $14=$self; //@line 786 "pyexpat.c"
        var $15=$base_addr; //@line 786 "pyexpat.c"
        var $16=_string_intern($14, $15); //@line 786 "pyexpat.c"
        var $17=$self; //@line 786 "pyexpat.c"
        var $18=$notationName_addr; //@line 786 "pyexpat.c"
        var $19=_string_intern($17, $18); //@line 786 "pyexpat.c"
        var $20=_Py_BuildValue(__str28, allocate([$19,0,0,0,$16,0,0,0,$13,0,0,0,$10,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 786 "pyexpat.c"
        $args=$20; //@line 786 "pyexpat.c"
        var $21=$args; //@line 786 "pyexpat.c"
        var $22=($21)==0; //@line 786 "pyexpat.c"
        var $23=$self; //@line 786 "pyexpat.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 786 "pyexpat.c"
      case 3: // $bb2
        _flag_error($23); //@line 786 "pyexpat.c"
        __label__ = 10; break; //@line 786 "pyexpat.c"
      case 4: // $bb3
        var $24=$23+24; //@line 786 "pyexpat.c"
        HEAP[$24]=1; //@line 786 "pyexpat.c"
        var $25=$self; //@line 786 "pyexpat.c"
        var $26=$25+48; //@line 786 "pyexpat.c"
        var $27=HEAP[$26]; //@line 786 "pyexpat.c"
        var $28=$27+20; //@line 786 "pyexpat.c"
        var $29=HEAP[$28]; //@line 786 "pyexpat.c"
        var $30=_getcode(5, __str29, 794); //@line 786 "pyexpat.c"
        var $31=$args; //@line 786 "pyexpat.c"
        var $32=$self; //@line 786 "pyexpat.c"
        var $33=_call_with_frame($30, $29, $31, $32); //@line 786 "pyexpat.c"
        $rv=$33; //@line 786 "pyexpat.c"
        var $34=$self; //@line 786 "pyexpat.c"
        var $35=$34+24; //@line 786 "pyexpat.c"
        HEAP[$35]=0; //@line 786 "pyexpat.c"
        var $36=$args; //@line 786 "pyexpat.c"
        var $37=$36; //@line 786 "pyexpat.c"
        var $38=HEAP[$37]; //@line 786 "pyexpat.c"
        var $39=($38) - 1; //@line 786 "pyexpat.c"
        var $40=$args; //@line 786 "pyexpat.c"
        var $41=$40; //@line 786 "pyexpat.c"
        HEAP[$41]=$39; //@line 786 "pyexpat.c"
        var $42=$args; //@line 786 "pyexpat.c"
        var $43=$42; //@line 786 "pyexpat.c"
        var $44=HEAP[$43]; //@line 786 "pyexpat.c"
        var $45=($44)==0; //@line 786 "pyexpat.c"
        if ($45) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 786 "pyexpat.c"
      case 5: // $bb4
        var $46=$args; //@line 786 "pyexpat.c"
        var $47=$46+4; //@line 786 "pyexpat.c"
        var $48=HEAP[$47]; //@line 786 "pyexpat.c"
        var $49=$48+24; //@line 786 "pyexpat.c"
        var $50=HEAP[$49]; //@line 786 "pyexpat.c"
        var $51=$args; //@line 786 "pyexpat.c"
        FUNCTION_TABLE[$50]($51); //@line 786 "pyexpat.c"
        __label__ = 6; break; //@line 786 "pyexpat.c"
      case 6: // $bb5
        var $52=$rv; //@line 786 "pyexpat.c"
        var $53=($52)==0; //@line 786 "pyexpat.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 786 "pyexpat.c"
      case 7: // $bb6
        var $54=$self; //@line 786 "pyexpat.c"
        _flag_error($54); //@line 786 "pyexpat.c"
        __label__ = 10; break; //@line 786 "pyexpat.c"
      case 8: // $bb7
        var $55=$rv; //@line 786 "pyexpat.c"
        var $56=$55; //@line 786 "pyexpat.c"
        var $57=HEAP[$56]; //@line 786 "pyexpat.c"
        var $58=($57) - 1; //@line 786 "pyexpat.c"
        var $59=$rv; //@line 786 "pyexpat.c"
        var $60=$59; //@line 786 "pyexpat.c"
        HEAP[$60]=$58; //@line 786 "pyexpat.c"
        var $61=$rv; //@line 786 "pyexpat.c"
        var $62=$61; //@line 786 "pyexpat.c"
        var $63=HEAP[$62]; //@line 786 "pyexpat.c"
        var $64=($63)==0; //@line 786 "pyexpat.c"
        if ($64) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 786 "pyexpat.c"
      case 9: // $bb8
        var $65=$rv; //@line 786 "pyexpat.c"
        var $66=$65+4; //@line 786 "pyexpat.c"
        var $67=HEAP[$66]; //@line 786 "pyexpat.c"
        var $68=$67+24; //@line 786 "pyexpat.c"
        var $69=HEAP[$68]; //@line 786 "pyexpat.c"
        var $70=$rv; //@line 786 "pyexpat.c"
        FUNCTION_TABLE[$69]($70); //@line 786 "pyexpat.c"
        __label__ = 10; break; //@line 786 "pyexpat.c"
      case 10: // $return
        ;
        return; //@line 786 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_StartNamespaceDeclHandler($userData, $prefix, $uri) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $prefix_addr;
        var $uri_addr;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $prefix_addr=$prefix;
        $uri_addr=$uri;
        var $0=$userData_addr; //@line 796 "pyexpat.c"
        var $1=$0; //@line 796 "pyexpat.c"
        $self=$1; //@line 796 "pyexpat.c"
        $args=0; //@line 796 "pyexpat.c"
        $rv=0; //@line 796 "pyexpat.c"
        var $2=$self; //@line 796 "pyexpat.c"
        var $3=_have_handler($2, 6); //@line 796 "pyexpat.c"
        var $4=($3)!=0; //@line 796 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 796 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 796 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 796 "pyexpat.c"
        var $7=($6) < 0; //@line 796 "pyexpat.c"
        if ($7) { __label__ = 10; break; } else { __label__ = 2; break; } //@line 796 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 796 "pyexpat.c"
        var $9=$uri_addr; //@line 796 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 796 "pyexpat.c"
        var $11=$self; //@line 796 "pyexpat.c"
        var $12=$prefix_addr; //@line 796 "pyexpat.c"
        var $13=_string_intern($11, $12); //@line 796 "pyexpat.c"
        var $14=_Py_BuildValue(__str8, allocate([$13,0,0,0,$10,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 796 "pyexpat.c"
        $args=$14; //@line 796 "pyexpat.c"
        var $15=$args; //@line 796 "pyexpat.c"
        var $16=($15)==0; //@line 796 "pyexpat.c"
        var $17=$self; //@line 796 "pyexpat.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 796 "pyexpat.c"
      case 3: // $bb2
        _flag_error($17); //@line 796 "pyexpat.c"
        __label__ = 10; break; //@line 796 "pyexpat.c"
      case 4: // $bb3
        var $18=$17+24; //@line 796 "pyexpat.c"
        HEAP[$18]=1; //@line 796 "pyexpat.c"
        var $19=$self; //@line 796 "pyexpat.c"
        var $20=$19+48; //@line 796 "pyexpat.c"
        var $21=HEAP[$20]; //@line 796 "pyexpat.c"
        var $22=$21+24; //@line 796 "pyexpat.c"
        var $23=HEAP[$22]; //@line 796 "pyexpat.c"
        var $24=_getcode(6, __str30, 801); //@line 796 "pyexpat.c"
        var $25=$args; //@line 796 "pyexpat.c"
        var $26=$self; //@line 796 "pyexpat.c"
        var $27=_call_with_frame($24, $23, $25, $26); //@line 796 "pyexpat.c"
        $rv=$27; //@line 796 "pyexpat.c"
        var $28=$self; //@line 796 "pyexpat.c"
        var $29=$28+24; //@line 796 "pyexpat.c"
        HEAP[$29]=0; //@line 796 "pyexpat.c"
        var $30=$args; //@line 796 "pyexpat.c"
        var $31=$30; //@line 796 "pyexpat.c"
        var $32=HEAP[$31]; //@line 796 "pyexpat.c"
        var $33=($32) - 1; //@line 796 "pyexpat.c"
        var $34=$args; //@line 796 "pyexpat.c"
        var $35=$34; //@line 796 "pyexpat.c"
        HEAP[$35]=$33; //@line 796 "pyexpat.c"
        var $36=$args; //@line 796 "pyexpat.c"
        var $37=$36; //@line 796 "pyexpat.c"
        var $38=HEAP[$37]; //@line 796 "pyexpat.c"
        var $39=($38)==0; //@line 796 "pyexpat.c"
        if ($39) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 796 "pyexpat.c"
      case 5: // $bb4
        var $40=$args; //@line 796 "pyexpat.c"
        var $41=$40+4; //@line 796 "pyexpat.c"
        var $42=HEAP[$41]; //@line 796 "pyexpat.c"
        var $43=$42+24; //@line 796 "pyexpat.c"
        var $44=HEAP[$43]; //@line 796 "pyexpat.c"
        var $45=$args; //@line 796 "pyexpat.c"
        FUNCTION_TABLE[$44]($45); //@line 796 "pyexpat.c"
        __label__ = 6; break; //@line 796 "pyexpat.c"
      case 6: // $bb5
        var $46=$rv; //@line 796 "pyexpat.c"
        var $47=($46)==0; //@line 796 "pyexpat.c"
        if ($47) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 796 "pyexpat.c"
      case 7: // $bb6
        var $48=$self; //@line 796 "pyexpat.c"
        _flag_error($48); //@line 796 "pyexpat.c"
        __label__ = 10; break; //@line 796 "pyexpat.c"
      case 8: // $bb7
        var $49=$rv; //@line 796 "pyexpat.c"
        var $50=$49; //@line 796 "pyexpat.c"
        var $51=HEAP[$50]; //@line 796 "pyexpat.c"
        var $52=($51) - 1; //@line 796 "pyexpat.c"
        var $53=$rv; //@line 796 "pyexpat.c"
        var $54=$53; //@line 796 "pyexpat.c"
        HEAP[$54]=$52; //@line 796 "pyexpat.c"
        var $55=$rv; //@line 796 "pyexpat.c"
        var $56=$55; //@line 796 "pyexpat.c"
        var $57=HEAP[$56]; //@line 796 "pyexpat.c"
        var $58=($57)==0; //@line 796 "pyexpat.c"
        if ($58) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 796 "pyexpat.c"
      case 9: // $bb8
        var $59=$rv; //@line 796 "pyexpat.c"
        var $60=$59+4; //@line 796 "pyexpat.c"
        var $61=HEAP[$60]; //@line 796 "pyexpat.c"
        var $62=$61+24; //@line 796 "pyexpat.c"
        var $63=HEAP[$62]; //@line 796 "pyexpat.c"
        var $64=$rv; //@line 796 "pyexpat.c"
        FUNCTION_TABLE[$63]($64); //@line 796 "pyexpat.c"
        __label__ = 10; break; //@line 796 "pyexpat.c"
      case 10: // $return
        ;
        return; //@line 796 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_EndNamespaceDeclHandler($userData, $prefix) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $prefix_addr;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $prefix_addr=$prefix;
        var $0=$userData_addr; //@line 803 "pyexpat.c"
        var $1=$0; //@line 803 "pyexpat.c"
        $self=$1; //@line 803 "pyexpat.c"
        $args=0; //@line 803 "pyexpat.c"
        $rv=0; //@line 803 "pyexpat.c"
        var $2=$self; //@line 803 "pyexpat.c"
        var $3=_have_handler($2, 7); //@line 803 "pyexpat.c"
        var $4=($3)!=0; //@line 803 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 803 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 803 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 803 "pyexpat.c"
        var $7=($6) < 0; //@line 803 "pyexpat.c"
        if ($7) { __label__ = 10; break; } else { __label__ = 2; break; } //@line 803 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 803 "pyexpat.c"
        var $9=$prefix_addr; //@line 803 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 803 "pyexpat.c"
        var $11=_Py_BuildValue(__str10, allocate([$10,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 803 "pyexpat.c"
        $args=$11; //@line 803 "pyexpat.c"
        var $12=$args; //@line 803 "pyexpat.c"
        var $13=($12)==0; //@line 803 "pyexpat.c"
        var $14=$self; //@line 803 "pyexpat.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 803 "pyexpat.c"
      case 3: // $bb2
        _flag_error($14); //@line 803 "pyexpat.c"
        __label__ = 10; break; //@line 803 "pyexpat.c"
      case 4: // $bb3
        var $15=$14+24; //@line 803 "pyexpat.c"
        HEAP[$15]=1; //@line 803 "pyexpat.c"
        var $16=$self; //@line 803 "pyexpat.c"
        var $17=$16+48; //@line 803 "pyexpat.c"
        var $18=HEAP[$17]; //@line 803 "pyexpat.c"
        var $19=$18+28; //@line 803 "pyexpat.c"
        var $20=HEAP[$19]; //@line 803 "pyexpat.c"
        var $21=_getcode(7, __str31, 806); //@line 803 "pyexpat.c"
        var $22=$args; //@line 803 "pyexpat.c"
        var $23=$self; //@line 803 "pyexpat.c"
        var $24=_call_with_frame($21, $20, $22, $23); //@line 803 "pyexpat.c"
        $rv=$24; //@line 803 "pyexpat.c"
        var $25=$self; //@line 803 "pyexpat.c"
        var $26=$25+24; //@line 803 "pyexpat.c"
        HEAP[$26]=0; //@line 803 "pyexpat.c"
        var $27=$args; //@line 803 "pyexpat.c"
        var $28=$27; //@line 803 "pyexpat.c"
        var $29=HEAP[$28]; //@line 803 "pyexpat.c"
        var $30=($29) - 1; //@line 803 "pyexpat.c"
        var $31=$args; //@line 803 "pyexpat.c"
        var $32=$31; //@line 803 "pyexpat.c"
        HEAP[$32]=$30; //@line 803 "pyexpat.c"
        var $33=$args; //@line 803 "pyexpat.c"
        var $34=$33; //@line 803 "pyexpat.c"
        var $35=HEAP[$34]; //@line 803 "pyexpat.c"
        var $36=($35)==0; //@line 803 "pyexpat.c"
        if ($36) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 803 "pyexpat.c"
      case 5: // $bb4
        var $37=$args; //@line 803 "pyexpat.c"
        var $38=$37+4; //@line 803 "pyexpat.c"
        var $39=HEAP[$38]; //@line 803 "pyexpat.c"
        var $40=$39+24; //@line 803 "pyexpat.c"
        var $41=HEAP[$40]; //@line 803 "pyexpat.c"
        var $42=$args; //@line 803 "pyexpat.c"
        FUNCTION_TABLE[$41]($42); //@line 803 "pyexpat.c"
        __label__ = 6; break; //@line 803 "pyexpat.c"
      case 6: // $bb5
        var $43=$rv; //@line 803 "pyexpat.c"
        var $44=($43)==0; //@line 803 "pyexpat.c"
        if ($44) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 803 "pyexpat.c"
      case 7: // $bb6
        var $45=$self; //@line 803 "pyexpat.c"
        _flag_error($45); //@line 803 "pyexpat.c"
        __label__ = 10; break; //@line 803 "pyexpat.c"
      case 8: // $bb7
        var $46=$rv; //@line 803 "pyexpat.c"
        var $47=$46; //@line 803 "pyexpat.c"
        var $48=HEAP[$47]; //@line 803 "pyexpat.c"
        var $49=($48) - 1; //@line 803 "pyexpat.c"
        var $50=$rv; //@line 803 "pyexpat.c"
        var $51=$50; //@line 803 "pyexpat.c"
        HEAP[$51]=$49; //@line 803 "pyexpat.c"
        var $52=$rv; //@line 803 "pyexpat.c"
        var $53=$52; //@line 803 "pyexpat.c"
        var $54=HEAP[$53]; //@line 803 "pyexpat.c"
        var $55=($54)==0; //@line 803 "pyexpat.c"
        if ($55) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 803 "pyexpat.c"
      case 9: // $bb8
        var $56=$rv; //@line 803 "pyexpat.c"
        var $57=$56+4; //@line 803 "pyexpat.c"
        var $58=HEAP[$57]; //@line 803 "pyexpat.c"
        var $59=$58+24; //@line 803 "pyexpat.c"
        var $60=HEAP[$59]; //@line 803 "pyexpat.c"
        var $61=$rv; //@line 803 "pyexpat.c"
        FUNCTION_TABLE[$60]($61); //@line 803 "pyexpat.c"
        __label__ = 10; break; //@line 803 "pyexpat.c"
      case 10: // $return
        ;
        return; //@line 803 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_CommentHandler($userData, $data) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $data_addr;
        var $iftmp_54;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $data_addr=$data;
        var $0=$userData_addr; //@line 808 "pyexpat.c"
        var $1=$0; //@line 808 "pyexpat.c"
        $self=$1; //@line 808 "pyexpat.c"
        $args=0; //@line 808 "pyexpat.c"
        $rv=0; //@line 808 "pyexpat.c"
        var $2=$self; //@line 808 "pyexpat.c"
        var $3=_have_handler($2, 8); //@line 808 "pyexpat.c"
        var $4=($3)!=0; //@line 808 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 808 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 808 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 808 "pyexpat.c"
        var $7=($6) < 0; //@line 808 "pyexpat.c"
        if ($7) { __label__ = 13; break; } else { __label__ = 2; break; } //@line 808 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 808 "pyexpat.c"
        var $9=$8+12; //@line 808 "pyexpat.c"
        var $10=HEAP[$9]; //@line 808 "pyexpat.c"
        var $11=($10)!=0; //@line 808 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 808 "pyexpat.c"
      case 3: // $bb2
        $iftmp_54=(FUNCTION_TABLE_OFFSET + 4); //@line 808 "pyexpat.c"
        __label__ = 5; break; //@line 808 "pyexpat.c"
      case 4: // $bb3
        $iftmp_54=(FUNCTION_TABLE_OFFSET + 6); //@line 808 "pyexpat.c"
        __label__ = 5; break; //@line 808 "pyexpat.c"
      case 5: // $bb4
        var $12=$iftmp_54; //@line 808 "pyexpat.c"
        var $13=$data_addr; //@line 808 "pyexpat.c"
        var $14=_Py_BuildValue(__str32, allocate([$12,0,0,0,$13,0,0,0], ["%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 808 "pyexpat.c"
        $args=$14; //@line 808 "pyexpat.c"
        var $15=($14)==0; //@line 808 "pyexpat.c"
        var $16=$self; //@line 808 "pyexpat.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 808 "pyexpat.c"
      case 6: // $bb5
        _flag_error($16); //@line 808 "pyexpat.c"
        __label__ = 13; break; //@line 808 "pyexpat.c"
      case 7: // $bb6
        var $17=$16+24; //@line 808 "pyexpat.c"
        HEAP[$17]=1; //@line 808 "pyexpat.c"
        var $18=$self; //@line 808 "pyexpat.c"
        var $19=$18+48; //@line 808 "pyexpat.c"
        var $20=HEAP[$19]; //@line 808 "pyexpat.c"
        var $21=$20+32; //@line 808 "pyexpat.c"
        var $22=HEAP[$21]; //@line 808 "pyexpat.c"
        var $23=_getcode(8, __str33, 810); //@line 808 "pyexpat.c"
        var $24=$args; //@line 808 "pyexpat.c"
        var $25=$self; //@line 808 "pyexpat.c"
        var $26=_call_with_frame($23, $22, $24, $25); //@line 808 "pyexpat.c"
        $rv=$26; //@line 808 "pyexpat.c"
        var $27=$self; //@line 808 "pyexpat.c"
        var $28=$27+24; //@line 808 "pyexpat.c"
        HEAP[$28]=0; //@line 808 "pyexpat.c"
        var $29=$args; //@line 808 "pyexpat.c"
        var $30=$29; //@line 808 "pyexpat.c"
        var $31=HEAP[$30]; //@line 808 "pyexpat.c"
        var $32=($31) - 1; //@line 808 "pyexpat.c"
        var $33=$args; //@line 808 "pyexpat.c"
        var $34=$33; //@line 808 "pyexpat.c"
        HEAP[$34]=$32; //@line 808 "pyexpat.c"
        var $35=$args; //@line 808 "pyexpat.c"
        var $36=$35; //@line 808 "pyexpat.c"
        var $37=HEAP[$36]; //@line 808 "pyexpat.c"
        var $38=($37)==0; //@line 808 "pyexpat.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 808 "pyexpat.c"
      case 8: // $bb7
        var $39=$args; //@line 808 "pyexpat.c"
        var $40=$39+4; //@line 808 "pyexpat.c"
        var $41=HEAP[$40]; //@line 808 "pyexpat.c"
        var $42=$41+24; //@line 808 "pyexpat.c"
        var $43=HEAP[$42]; //@line 808 "pyexpat.c"
        var $44=$args; //@line 808 "pyexpat.c"
        FUNCTION_TABLE[$43]($44); //@line 808 "pyexpat.c"
        __label__ = 9; break; //@line 808 "pyexpat.c"
      case 9: // $bb8
        var $45=$rv; //@line 808 "pyexpat.c"
        var $46=($45)==0; //@line 808 "pyexpat.c"
        if ($46) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 808 "pyexpat.c"
      case 10: // $bb9
        var $47=$self; //@line 808 "pyexpat.c"
        _flag_error($47); //@line 808 "pyexpat.c"
        __label__ = 13; break; //@line 808 "pyexpat.c"
      case 11: // $bb10
        var $48=$rv; //@line 808 "pyexpat.c"
        var $49=$48; //@line 808 "pyexpat.c"
        var $50=HEAP[$49]; //@line 808 "pyexpat.c"
        var $51=($50) - 1; //@line 808 "pyexpat.c"
        var $52=$rv; //@line 808 "pyexpat.c"
        var $53=$52; //@line 808 "pyexpat.c"
        HEAP[$53]=$51; //@line 808 "pyexpat.c"
        var $54=$rv; //@line 808 "pyexpat.c"
        var $55=$54; //@line 808 "pyexpat.c"
        var $56=HEAP[$55]; //@line 808 "pyexpat.c"
        var $57=($56)==0; //@line 808 "pyexpat.c"
        if ($57) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 808 "pyexpat.c"
      case 12: // $bb11
        var $58=$rv; //@line 808 "pyexpat.c"
        var $59=$58+4; //@line 808 "pyexpat.c"
        var $60=HEAP[$59]; //@line 808 "pyexpat.c"
        var $61=$60+24; //@line 808 "pyexpat.c"
        var $62=HEAP[$61]; //@line 808 "pyexpat.c"
        var $63=$rv; //@line 808 "pyexpat.c"
        FUNCTION_TABLE[$62]($63); //@line 808 "pyexpat.c"
        __label__ = 13; break; //@line 808 "pyexpat.c"
      case 13: // $return
        ;
        return; //@line 808 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_StartCdataSectionHandler($userData) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        var $0=$userData_addr; //@line 812 "pyexpat.c"
        var $1=$0; //@line 812 "pyexpat.c"
        $self=$1; //@line 812 "pyexpat.c"
        $args=0; //@line 812 "pyexpat.c"
        $rv=0; //@line 812 "pyexpat.c"
        var $2=$self; //@line 812 "pyexpat.c"
        var $3=_have_handler($2, 9); //@line 812 "pyexpat.c"
        var $4=($3)!=0; //@line 812 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 812 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 812 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 812 "pyexpat.c"
        var $7=($6) < 0; //@line 812 "pyexpat.c"
        if ($7) { __label__ = 10; break; } else { __label__ = 2; break; } //@line 812 "pyexpat.c"
      case 2: // $bb1
        var $8=_Py_BuildValue(__str34, allocate(1, "i32", ALLOC_STACK)); //@line 812 "pyexpat.c"
        $args=$8; //@line 812 "pyexpat.c"
        var $9=$args; //@line 812 "pyexpat.c"
        var $10=($9)==0; //@line 812 "pyexpat.c"
        var $11=$self; //@line 812 "pyexpat.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 812 "pyexpat.c"
      case 3: // $bb2
        _flag_error($11); //@line 812 "pyexpat.c"
        __label__ = 10; break; //@line 812 "pyexpat.c"
      case 4: // $bb3
        var $12=$11+24; //@line 812 "pyexpat.c"
        HEAP[$12]=1; //@line 812 "pyexpat.c"
        var $13=$self; //@line 812 "pyexpat.c"
        var $14=$13+48; //@line 812 "pyexpat.c"
        var $15=HEAP[$14]; //@line 812 "pyexpat.c"
        var $16=$15+36; //@line 812 "pyexpat.c"
        var $17=HEAP[$16]; //@line 812 "pyexpat.c"
        var $18=_getcode(9, __str35, 814); //@line 812 "pyexpat.c"
        var $19=$args; //@line 812 "pyexpat.c"
        var $20=$self; //@line 812 "pyexpat.c"
        var $21=_call_with_frame($18, $17, $19, $20); //@line 812 "pyexpat.c"
        $rv=$21; //@line 812 "pyexpat.c"
        var $22=$self; //@line 812 "pyexpat.c"
        var $23=$22+24; //@line 812 "pyexpat.c"
        HEAP[$23]=0; //@line 812 "pyexpat.c"
        var $24=$args; //@line 812 "pyexpat.c"
        var $25=$24; //@line 812 "pyexpat.c"
        var $26=HEAP[$25]; //@line 812 "pyexpat.c"
        var $27=($26) - 1; //@line 812 "pyexpat.c"
        var $28=$args; //@line 812 "pyexpat.c"
        var $29=$28; //@line 812 "pyexpat.c"
        HEAP[$29]=$27; //@line 812 "pyexpat.c"
        var $30=$args; //@line 812 "pyexpat.c"
        var $31=$30; //@line 812 "pyexpat.c"
        var $32=HEAP[$31]; //@line 812 "pyexpat.c"
        var $33=($32)==0; //@line 812 "pyexpat.c"
        if ($33) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 812 "pyexpat.c"
      case 5: // $bb4
        var $34=$args; //@line 812 "pyexpat.c"
        var $35=$34+4; //@line 812 "pyexpat.c"
        var $36=HEAP[$35]; //@line 812 "pyexpat.c"
        var $37=$36+24; //@line 812 "pyexpat.c"
        var $38=HEAP[$37]; //@line 812 "pyexpat.c"
        var $39=$args; //@line 812 "pyexpat.c"
        FUNCTION_TABLE[$38]($39); //@line 812 "pyexpat.c"
        __label__ = 6; break; //@line 812 "pyexpat.c"
      case 6: // $bb5
        var $40=$rv; //@line 812 "pyexpat.c"
        var $41=($40)==0; //@line 812 "pyexpat.c"
        if ($41) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 812 "pyexpat.c"
      case 7: // $bb6
        var $42=$self; //@line 812 "pyexpat.c"
        _flag_error($42); //@line 812 "pyexpat.c"
        __label__ = 10; break; //@line 812 "pyexpat.c"
      case 8: // $bb7
        var $43=$rv; //@line 812 "pyexpat.c"
        var $44=$43; //@line 812 "pyexpat.c"
        var $45=HEAP[$44]; //@line 812 "pyexpat.c"
        var $46=($45) - 1; //@line 812 "pyexpat.c"
        var $47=$rv; //@line 812 "pyexpat.c"
        var $48=$47; //@line 812 "pyexpat.c"
        HEAP[$48]=$46; //@line 812 "pyexpat.c"
        var $49=$rv; //@line 812 "pyexpat.c"
        var $50=$49; //@line 812 "pyexpat.c"
        var $51=HEAP[$50]; //@line 812 "pyexpat.c"
        var $52=($51)==0; //@line 812 "pyexpat.c"
        if ($52) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 812 "pyexpat.c"
      case 9: // $bb8
        var $53=$rv; //@line 812 "pyexpat.c"
        var $54=$53+4; //@line 812 "pyexpat.c"
        var $55=HEAP[$54]; //@line 812 "pyexpat.c"
        var $56=$55+24; //@line 812 "pyexpat.c"
        var $57=HEAP[$56]; //@line 812 "pyexpat.c"
        var $58=$rv; //@line 812 "pyexpat.c"
        FUNCTION_TABLE[$57]($58); //@line 812 "pyexpat.c"
        __label__ = 10; break; //@line 812 "pyexpat.c"
      case 10: // $return
        ;
        return; //@line 812 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_EndCdataSectionHandler($userData) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        var $0=$userData_addr; //@line 816 "pyexpat.c"
        var $1=$0; //@line 816 "pyexpat.c"
        $self=$1; //@line 816 "pyexpat.c"
        $args=0; //@line 816 "pyexpat.c"
        $rv=0; //@line 816 "pyexpat.c"
        var $2=$self; //@line 816 "pyexpat.c"
        var $3=_have_handler($2, 10); //@line 816 "pyexpat.c"
        var $4=($3)!=0; //@line 816 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 816 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 816 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 816 "pyexpat.c"
        var $7=($6) < 0; //@line 816 "pyexpat.c"
        if ($7) { __label__ = 10; break; } else { __label__ = 2; break; } //@line 816 "pyexpat.c"
      case 2: // $bb1
        var $8=_Py_BuildValue(__str34, allocate(1, "i32", ALLOC_STACK)); //@line 816 "pyexpat.c"
        $args=$8; //@line 816 "pyexpat.c"
        var $9=$args; //@line 816 "pyexpat.c"
        var $10=($9)==0; //@line 816 "pyexpat.c"
        var $11=$self; //@line 816 "pyexpat.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 816 "pyexpat.c"
      case 3: // $bb2
        _flag_error($11); //@line 816 "pyexpat.c"
        __label__ = 10; break; //@line 816 "pyexpat.c"
      case 4: // $bb3
        var $12=$11+24; //@line 816 "pyexpat.c"
        HEAP[$12]=1; //@line 816 "pyexpat.c"
        var $13=$self; //@line 816 "pyexpat.c"
        var $14=$13+48; //@line 816 "pyexpat.c"
        var $15=HEAP[$14]; //@line 816 "pyexpat.c"
        var $16=$15+40; //@line 816 "pyexpat.c"
        var $17=HEAP[$16]; //@line 816 "pyexpat.c"
        var $18=_getcode(10, __str36, 818); //@line 816 "pyexpat.c"
        var $19=$args; //@line 816 "pyexpat.c"
        var $20=$self; //@line 816 "pyexpat.c"
        var $21=_call_with_frame($18, $17, $19, $20); //@line 816 "pyexpat.c"
        $rv=$21; //@line 816 "pyexpat.c"
        var $22=$self; //@line 816 "pyexpat.c"
        var $23=$22+24; //@line 816 "pyexpat.c"
        HEAP[$23]=0; //@line 816 "pyexpat.c"
        var $24=$args; //@line 816 "pyexpat.c"
        var $25=$24; //@line 816 "pyexpat.c"
        var $26=HEAP[$25]; //@line 816 "pyexpat.c"
        var $27=($26) - 1; //@line 816 "pyexpat.c"
        var $28=$args; //@line 816 "pyexpat.c"
        var $29=$28; //@line 816 "pyexpat.c"
        HEAP[$29]=$27; //@line 816 "pyexpat.c"
        var $30=$args; //@line 816 "pyexpat.c"
        var $31=$30; //@line 816 "pyexpat.c"
        var $32=HEAP[$31]; //@line 816 "pyexpat.c"
        var $33=($32)==0; //@line 816 "pyexpat.c"
        if ($33) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 816 "pyexpat.c"
      case 5: // $bb4
        var $34=$args; //@line 816 "pyexpat.c"
        var $35=$34+4; //@line 816 "pyexpat.c"
        var $36=HEAP[$35]; //@line 816 "pyexpat.c"
        var $37=$36+24; //@line 816 "pyexpat.c"
        var $38=HEAP[$37]; //@line 816 "pyexpat.c"
        var $39=$args; //@line 816 "pyexpat.c"
        FUNCTION_TABLE[$38]($39); //@line 816 "pyexpat.c"
        __label__ = 6; break; //@line 816 "pyexpat.c"
      case 6: // $bb5
        var $40=$rv; //@line 816 "pyexpat.c"
        var $41=($40)==0; //@line 816 "pyexpat.c"
        if ($41) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 816 "pyexpat.c"
      case 7: // $bb6
        var $42=$self; //@line 816 "pyexpat.c"
        _flag_error($42); //@line 816 "pyexpat.c"
        __label__ = 10; break; //@line 816 "pyexpat.c"
      case 8: // $bb7
        var $43=$rv; //@line 816 "pyexpat.c"
        var $44=$43; //@line 816 "pyexpat.c"
        var $45=HEAP[$44]; //@line 816 "pyexpat.c"
        var $46=($45) - 1; //@line 816 "pyexpat.c"
        var $47=$rv; //@line 816 "pyexpat.c"
        var $48=$47; //@line 816 "pyexpat.c"
        HEAP[$48]=$46; //@line 816 "pyexpat.c"
        var $49=$rv; //@line 816 "pyexpat.c"
        var $50=$49; //@line 816 "pyexpat.c"
        var $51=HEAP[$50]; //@line 816 "pyexpat.c"
        var $52=($51)==0; //@line 816 "pyexpat.c"
        if ($52) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 816 "pyexpat.c"
      case 9: // $bb8
        var $53=$rv; //@line 816 "pyexpat.c"
        var $54=$53+4; //@line 816 "pyexpat.c"
        var $55=HEAP[$54]; //@line 816 "pyexpat.c"
        var $56=$55+24; //@line 816 "pyexpat.c"
        var $57=HEAP[$56]; //@line 816 "pyexpat.c"
        var $58=$rv; //@line 816 "pyexpat.c"
        FUNCTION_TABLE[$57]($58); //@line 816 "pyexpat.c"
        __label__ = 10; break; //@line 816 "pyexpat.c"
      case 10: // $return
        ;
        return; //@line 816 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_DefaultHandler($userData, $s, $len) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $s_addr;
        var $len_addr;
        var $iftmp_55;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $s_addr=$s;
        $len_addr=$len;
        var $0=$userData_addr; //@line 829 "pyexpat.c"
        var $1=$0; //@line 829 "pyexpat.c"
        $self=$1; //@line 829 "pyexpat.c"
        $args=0; //@line 829 "pyexpat.c"
        $rv=0; //@line 829 "pyexpat.c"
        var $2=$self; //@line 829 "pyexpat.c"
        var $3=_have_handler($2, 11); //@line 829 "pyexpat.c"
        var $4=($3)!=0; //@line 829 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 829 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 829 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 829 "pyexpat.c"
        var $7=($6) < 0; //@line 829 "pyexpat.c"
        if ($7) { __label__ = 13; break; } else { __label__ = 2; break; } //@line 829 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 829 "pyexpat.c"
        var $9=$8+12; //@line 829 "pyexpat.c"
        var $10=HEAP[$9]; //@line 829 "pyexpat.c"
        var $11=($10)!=0; //@line 829 "pyexpat.c"
        var $12=$s_addr; //@line 829 "pyexpat.c"
        var $13=$len_addr; //@line 829 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 829 "pyexpat.c"
      case 3: // $bb2
        var $14=_conv_string_len_to_unicode($12, $13); //@line 829 "pyexpat.c"
        $iftmp_55=$14; //@line 829 "pyexpat.c"
        __label__ = 5; break; //@line 829 "pyexpat.c"
      case 4: // $bb3
        var $15=_conv_string_len_to_utf8($12, $13); //@line 829 "pyexpat.c"
        $iftmp_55=$15; //@line 829 "pyexpat.c"
        __label__ = 5; break; //@line 829 "pyexpat.c"
      case 5: // $bb4
        var $16=$iftmp_55; //@line 829 "pyexpat.c"
        var $17=_Py_BuildValue(__str10, allocate([$16,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 829 "pyexpat.c"
        $args=$17; //@line 829 "pyexpat.c"
        var $18=($17)==0; //@line 829 "pyexpat.c"
        var $19=$self; //@line 829 "pyexpat.c"
        if ($18) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 829 "pyexpat.c"
      case 6: // $bb5
        _flag_error($19); //@line 829 "pyexpat.c"
        __label__ = 13; break; //@line 829 "pyexpat.c"
      case 7: // $bb6
        var $20=$19+24; //@line 829 "pyexpat.c"
        HEAP[$20]=1; //@line 829 "pyexpat.c"
        var $21=$self; //@line 829 "pyexpat.c"
        var $22=$21+48; //@line 829 "pyexpat.c"
        var $23=HEAP[$22]; //@line 829 "pyexpat.c"
        var $24=$23+44; //@line 829 "pyexpat.c"
        var $25=HEAP[$24]; //@line 829 "pyexpat.c"
        var $26=_getcode(11, __str37, 833); //@line 829 "pyexpat.c"
        var $27=$args; //@line 829 "pyexpat.c"
        var $28=$self; //@line 829 "pyexpat.c"
        var $29=_call_with_frame($26, $25, $27, $28); //@line 829 "pyexpat.c"
        $rv=$29; //@line 829 "pyexpat.c"
        var $30=$self; //@line 829 "pyexpat.c"
        var $31=$30+24; //@line 829 "pyexpat.c"
        HEAP[$31]=0; //@line 829 "pyexpat.c"
        var $32=$args; //@line 829 "pyexpat.c"
        var $33=$32; //@line 829 "pyexpat.c"
        var $34=HEAP[$33]; //@line 829 "pyexpat.c"
        var $35=($34) - 1; //@line 829 "pyexpat.c"
        var $36=$args; //@line 829 "pyexpat.c"
        var $37=$36; //@line 829 "pyexpat.c"
        HEAP[$37]=$35; //@line 829 "pyexpat.c"
        var $38=$args; //@line 829 "pyexpat.c"
        var $39=$38; //@line 829 "pyexpat.c"
        var $40=HEAP[$39]; //@line 829 "pyexpat.c"
        var $41=($40)==0; //@line 829 "pyexpat.c"
        if ($41) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 829 "pyexpat.c"
      case 8: // $bb7
        var $42=$args; //@line 829 "pyexpat.c"
        var $43=$42+4; //@line 829 "pyexpat.c"
        var $44=HEAP[$43]; //@line 829 "pyexpat.c"
        var $45=$44+24; //@line 829 "pyexpat.c"
        var $46=HEAP[$45]; //@line 829 "pyexpat.c"
        var $47=$args; //@line 829 "pyexpat.c"
        FUNCTION_TABLE[$46]($47); //@line 829 "pyexpat.c"
        __label__ = 9; break; //@line 829 "pyexpat.c"
      case 9: // $bb8
        var $48=$rv; //@line 829 "pyexpat.c"
        var $49=($48)==0; //@line 829 "pyexpat.c"
        if ($49) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 829 "pyexpat.c"
      case 10: // $bb9
        var $50=$self; //@line 829 "pyexpat.c"
        _flag_error($50); //@line 829 "pyexpat.c"
        __label__ = 13; break; //@line 829 "pyexpat.c"
      case 11: // $bb10
        var $51=$rv; //@line 829 "pyexpat.c"
        var $52=$51; //@line 829 "pyexpat.c"
        var $53=HEAP[$52]; //@line 829 "pyexpat.c"
        var $54=($53) - 1; //@line 829 "pyexpat.c"
        var $55=$rv; //@line 829 "pyexpat.c"
        var $56=$55; //@line 829 "pyexpat.c"
        HEAP[$56]=$54; //@line 829 "pyexpat.c"
        var $57=$rv; //@line 829 "pyexpat.c"
        var $58=$57; //@line 829 "pyexpat.c"
        var $59=HEAP[$58]; //@line 829 "pyexpat.c"
        var $60=($59)==0; //@line 829 "pyexpat.c"
        if ($60) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 829 "pyexpat.c"
      case 12: // $bb11
        var $61=$rv; //@line 829 "pyexpat.c"
        var $62=$61+4; //@line 829 "pyexpat.c"
        var $63=HEAP[$62]; //@line 829 "pyexpat.c"
        var $64=$63+24; //@line 829 "pyexpat.c"
        var $65=HEAP[$64]; //@line 829 "pyexpat.c"
        var $66=$rv; //@line 829 "pyexpat.c"
        FUNCTION_TABLE[$65]($66); //@line 829 "pyexpat.c"
        __label__ = 13; break; //@line 829 "pyexpat.c"
      case 13: // $return
        ;
        return; //@line 829 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_DefaultHandlerExpandHandler($userData, $s, $len) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $s_addr;
        var $len_addr;
        var $iftmp_56;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $s_addr=$s;
        $len_addr=$len;
        var $0=$userData_addr; //@line 835 "pyexpat.c"
        var $1=$0; //@line 835 "pyexpat.c"
        $self=$1; //@line 835 "pyexpat.c"
        $args=0; //@line 835 "pyexpat.c"
        $rv=0; //@line 835 "pyexpat.c"
        var $2=$self; //@line 835 "pyexpat.c"
        var $3=_have_handler($2, 12); //@line 835 "pyexpat.c"
        var $4=($3)!=0; //@line 835 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 835 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 835 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 835 "pyexpat.c"
        var $7=($6) < 0; //@line 835 "pyexpat.c"
        if ($7) { __label__ = 13; break; } else { __label__ = 2; break; } //@line 835 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 835 "pyexpat.c"
        var $9=$8+12; //@line 835 "pyexpat.c"
        var $10=HEAP[$9]; //@line 835 "pyexpat.c"
        var $11=($10)!=0; //@line 835 "pyexpat.c"
        var $12=$s_addr; //@line 835 "pyexpat.c"
        var $13=$len_addr; //@line 835 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 835 "pyexpat.c"
      case 3: // $bb2
        var $14=_conv_string_len_to_unicode($12, $13); //@line 835 "pyexpat.c"
        $iftmp_56=$14; //@line 835 "pyexpat.c"
        __label__ = 5; break; //@line 835 "pyexpat.c"
      case 4: // $bb3
        var $15=_conv_string_len_to_utf8($12, $13); //@line 835 "pyexpat.c"
        $iftmp_56=$15; //@line 835 "pyexpat.c"
        __label__ = 5; break; //@line 835 "pyexpat.c"
      case 5: // $bb4
        var $16=$iftmp_56; //@line 835 "pyexpat.c"
        var $17=_Py_BuildValue(__str10, allocate([$16,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 835 "pyexpat.c"
        $args=$17; //@line 835 "pyexpat.c"
        var $18=($17)==0; //@line 835 "pyexpat.c"
        var $19=$self; //@line 835 "pyexpat.c"
        if ($18) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 835 "pyexpat.c"
      case 6: // $bb5
        _flag_error($19); //@line 835 "pyexpat.c"
        __label__ = 13; break; //@line 835 "pyexpat.c"
      case 7: // $bb6
        var $20=$19+24; //@line 835 "pyexpat.c"
        HEAP[$20]=1; //@line 835 "pyexpat.c"
        var $21=$self; //@line 835 "pyexpat.c"
        var $22=$21+48; //@line 835 "pyexpat.c"
        var $23=HEAP[$22]; //@line 835 "pyexpat.c"
        var $24=$23+48; //@line 835 "pyexpat.c"
        var $25=HEAP[$24]; //@line 835 "pyexpat.c"
        var $26=_getcode(12, __str38, 839); //@line 835 "pyexpat.c"
        var $27=$args; //@line 835 "pyexpat.c"
        var $28=$self; //@line 835 "pyexpat.c"
        var $29=_call_with_frame($26, $25, $27, $28); //@line 835 "pyexpat.c"
        $rv=$29; //@line 835 "pyexpat.c"
        var $30=$self; //@line 835 "pyexpat.c"
        var $31=$30+24; //@line 835 "pyexpat.c"
        HEAP[$31]=0; //@line 835 "pyexpat.c"
        var $32=$args; //@line 835 "pyexpat.c"
        var $33=$32; //@line 835 "pyexpat.c"
        var $34=HEAP[$33]; //@line 835 "pyexpat.c"
        var $35=($34) - 1; //@line 835 "pyexpat.c"
        var $36=$args; //@line 835 "pyexpat.c"
        var $37=$36; //@line 835 "pyexpat.c"
        HEAP[$37]=$35; //@line 835 "pyexpat.c"
        var $38=$args; //@line 835 "pyexpat.c"
        var $39=$38; //@line 835 "pyexpat.c"
        var $40=HEAP[$39]; //@line 835 "pyexpat.c"
        var $41=($40)==0; //@line 835 "pyexpat.c"
        if ($41) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 835 "pyexpat.c"
      case 8: // $bb7
        var $42=$args; //@line 835 "pyexpat.c"
        var $43=$42+4; //@line 835 "pyexpat.c"
        var $44=HEAP[$43]; //@line 835 "pyexpat.c"
        var $45=$44+24; //@line 835 "pyexpat.c"
        var $46=HEAP[$45]; //@line 835 "pyexpat.c"
        var $47=$args; //@line 835 "pyexpat.c"
        FUNCTION_TABLE[$46]($47); //@line 835 "pyexpat.c"
        __label__ = 9; break; //@line 835 "pyexpat.c"
      case 9: // $bb8
        var $48=$rv; //@line 835 "pyexpat.c"
        var $49=($48)==0; //@line 835 "pyexpat.c"
        if ($49) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 835 "pyexpat.c"
      case 10: // $bb9
        var $50=$self; //@line 835 "pyexpat.c"
        _flag_error($50); //@line 835 "pyexpat.c"
        __label__ = 13; break; //@line 835 "pyexpat.c"
      case 11: // $bb10
        var $51=$rv; //@line 835 "pyexpat.c"
        var $52=$51; //@line 835 "pyexpat.c"
        var $53=HEAP[$52]; //@line 835 "pyexpat.c"
        var $54=($53) - 1; //@line 835 "pyexpat.c"
        var $55=$rv; //@line 835 "pyexpat.c"
        var $56=$55; //@line 835 "pyexpat.c"
        HEAP[$56]=$54; //@line 835 "pyexpat.c"
        var $57=$rv; //@line 835 "pyexpat.c"
        var $58=$57; //@line 835 "pyexpat.c"
        var $59=HEAP[$58]; //@line 835 "pyexpat.c"
        var $60=($59)==0; //@line 835 "pyexpat.c"
        if ($60) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 835 "pyexpat.c"
      case 12: // $bb11
        var $61=$rv; //@line 835 "pyexpat.c"
        var $62=$61+4; //@line 835 "pyexpat.c"
        var $63=HEAP[$62]; //@line 835 "pyexpat.c"
        var $64=$63+24; //@line 835 "pyexpat.c"
        var $65=HEAP[$64]; //@line 835 "pyexpat.c"
        var $66=$rv; //@line 835 "pyexpat.c"
        FUNCTION_TABLE[$65]($66); //@line 835 "pyexpat.c"
        __label__ = 13; break; //@line 835 "pyexpat.c"
      case 13: // $return
        ;
        return; //@line 835 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_NotStandaloneHandler($userData) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $retval;
        var $0;
        var $self;
        var $args;
        var $rv;
        var $rc;
        $userData_addr=$userData;
        var $1=$userData_addr; //@line 842 "pyexpat.c"
        var $2=$1; //@line 842 "pyexpat.c"
        $self=$2; //@line 842 "pyexpat.c"
        $args=0; //@line 842 "pyexpat.c"
        $rv=0; //@line 842 "pyexpat.c"
        $rc=0; //@line 842 "pyexpat.c"
        var $3=$self; //@line 842 "pyexpat.c"
        var $4=_have_handler($3, 13); //@line 842 "pyexpat.c"
        var $5=($4)!=0; //@line 842 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 11; break; } //@line 842 "pyexpat.c"
      case 1: // $bb
        var $6=$self; //@line 842 "pyexpat.c"
        var $7=_flush_character_buffer($6); //@line 842 "pyexpat.c"
        var $8=($7) < 0; //@line 842 "pyexpat.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 842 "pyexpat.c"
      case 2: // $bb1
        var $9=$rc; //@line 842 "pyexpat.c"
        $0=$9; //@line 842 "pyexpat.c"
        __label__ = 12; break; //@line 842 "pyexpat.c"
      case 3: // $bb2
        var $10=_Py_BuildValue(__str34, allocate(1, "i32", ALLOC_STACK)); //@line 842 "pyexpat.c"
        $args=$10; //@line 842 "pyexpat.c"
        var $11=$args; //@line 842 "pyexpat.c"
        var $12=($11)==0; //@line 842 "pyexpat.c"
        var $13=$self; //@line 842 "pyexpat.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 842 "pyexpat.c"
      case 4: // $bb3
        _flag_error($13); //@line 842 "pyexpat.c"
        var $14=$rc; //@line 842 "pyexpat.c"
        $0=$14; //@line 842 "pyexpat.c"
        __label__ = 12; break; //@line 842 "pyexpat.c"
      case 5: // $bb4
        var $15=$13+24; //@line 842 "pyexpat.c"
        HEAP[$15]=1; //@line 842 "pyexpat.c"
        var $16=$self; //@line 842 "pyexpat.c"
        var $17=$16+48; //@line 842 "pyexpat.c"
        var $18=HEAP[$17]; //@line 842 "pyexpat.c"
        var $19=$18+52; //@line 842 "pyexpat.c"
        var $20=HEAP[$19]; //@line 842 "pyexpat.c"
        var $21=_getcode(13, __str39, 844); //@line 842 "pyexpat.c"
        var $22=$args; //@line 842 "pyexpat.c"
        var $23=$self; //@line 842 "pyexpat.c"
        var $24=_call_with_frame($21, $20, $22, $23); //@line 842 "pyexpat.c"
        $rv=$24; //@line 842 "pyexpat.c"
        var $25=$self; //@line 842 "pyexpat.c"
        var $26=$25+24; //@line 842 "pyexpat.c"
        HEAP[$26]=0; //@line 842 "pyexpat.c"
        var $27=$args; //@line 842 "pyexpat.c"
        var $28=$27; //@line 842 "pyexpat.c"
        var $29=HEAP[$28]; //@line 842 "pyexpat.c"
        var $30=($29) - 1; //@line 842 "pyexpat.c"
        var $31=$args; //@line 842 "pyexpat.c"
        var $32=$31; //@line 842 "pyexpat.c"
        HEAP[$32]=$30; //@line 842 "pyexpat.c"
        var $33=$args; //@line 842 "pyexpat.c"
        var $34=$33; //@line 842 "pyexpat.c"
        var $35=HEAP[$34]; //@line 842 "pyexpat.c"
        var $36=($35)==0; //@line 842 "pyexpat.c"
        if ($36) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 842 "pyexpat.c"
      case 6: // $bb5
        var $37=$args; //@line 842 "pyexpat.c"
        var $38=$37+4; //@line 842 "pyexpat.c"
        var $39=HEAP[$38]; //@line 842 "pyexpat.c"
        var $40=$39+24; //@line 842 "pyexpat.c"
        var $41=HEAP[$40]; //@line 842 "pyexpat.c"
        var $42=$args; //@line 842 "pyexpat.c"
        FUNCTION_TABLE[$41]($42); //@line 842 "pyexpat.c"
        __label__ = 7; break; //@line 842 "pyexpat.c"
      case 7: // $bb6
        var $43=$rv; //@line 842 "pyexpat.c"
        var $44=($43)==0; //@line 842 "pyexpat.c"
        if ($44) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 842 "pyexpat.c"
      case 8: // $bb7
        var $45=$self; //@line 842 "pyexpat.c"
        _flag_error($45); //@line 842 "pyexpat.c"
        var $46=$rc; //@line 842 "pyexpat.c"
        $0=$46; //@line 842 "pyexpat.c"
        __label__ = 12; break; //@line 842 "pyexpat.c"
      case 9: // $bb8
        var $47=$rv; //@line 842 "pyexpat.c"
        var $48=_PyInt_AsLong($47); //@line 842 "pyexpat.c"
        $rc=$48; //@line 842 "pyexpat.c"
        var $49=$rv; //@line 842 "pyexpat.c"
        var $50=$49; //@line 842 "pyexpat.c"
        var $51=HEAP[$50]; //@line 842 "pyexpat.c"
        var $52=($51) - 1; //@line 842 "pyexpat.c"
        var $53=$rv; //@line 842 "pyexpat.c"
        var $54=$53; //@line 842 "pyexpat.c"
        HEAP[$54]=$52; //@line 842 "pyexpat.c"
        var $55=$rv; //@line 842 "pyexpat.c"
        var $56=$55; //@line 842 "pyexpat.c"
        var $57=HEAP[$56]; //@line 842 "pyexpat.c"
        var $58=($57)==0; //@line 842 "pyexpat.c"
        if ($58) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 842 "pyexpat.c"
      case 10: // $bb9
        var $59=$rv; //@line 842 "pyexpat.c"
        var $60=$59+4; //@line 842 "pyexpat.c"
        var $61=HEAP[$60]; //@line 842 "pyexpat.c"
        var $62=$61+24; //@line 842 "pyexpat.c"
        var $63=HEAP[$62]; //@line 842 "pyexpat.c"
        var $64=$rv; //@line 842 "pyexpat.c"
        FUNCTION_TABLE[$63]($64); //@line 842 "pyexpat.c"
        __label__ = 11; break; //@line 842 "pyexpat.c"
      case 11: // $bb10
        var $65=$rc; //@line 842 "pyexpat.c"
        $0=$65; //@line 842 "pyexpat.c"
        __label__ = 12; break; //@line 842 "pyexpat.c"
      case 12: // $bb11
        var $66=$0; //@line 842 "pyexpat.c"
        $retval=$66; //@line 842 "pyexpat.c"
        var $retval12=$retval; //@line 842 "pyexpat.c"
        ;
        return $retval12; //@line 842 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_ExternalEntityRefHandler($parser, $context, $base, $systemId, $publicId) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $context_addr;
        var $base_addr;
        var $systemId_addr;
        var $publicId_addr;
        var $retval;
        var $iftmp_58;
        var $0;
        var $self;
        var $args;
        var $rv;
        var $rc;
        $parser_addr=$parser;
        $context_addr=$context;
        $base_addr=$base;
        $systemId_addr=$systemId;
        $publicId_addr=$publicId;
        var $1=$parser_addr; //@line 846 "pyexpat.c"
        var $2=$1; //@line 846 "pyexpat.c"
        var $3=HEAP[$2]; //@line 846 "pyexpat.c"
        var $4=$3; //@line 846 "pyexpat.c"
        $self=$4; //@line 846 "pyexpat.c"
        $args=0; //@line 846 "pyexpat.c"
        $rv=0; //@line 846 "pyexpat.c"
        $rc=0; //@line 846 "pyexpat.c"
        var $5=$self; //@line 846 "pyexpat.c"
        var $6=_have_handler($5, 14); //@line 846 "pyexpat.c"
        var $7=($6)!=0; //@line 846 "pyexpat.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 14; break; } //@line 846 "pyexpat.c"
      case 1: // $bb
        var $8=$self; //@line 846 "pyexpat.c"
        var $9=_flush_character_buffer($8); //@line 846 "pyexpat.c"
        var $10=($9) < 0; //@line 846 "pyexpat.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 846 "pyexpat.c"
      case 2: // $bb1
        var $11=$rc; //@line 846 "pyexpat.c"
        $0=$11; //@line 846 "pyexpat.c"
        __label__ = 15; break; //@line 846 "pyexpat.c"
      case 3: // $bb2
        var $12=$self; //@line 846 "pyexpat.c"
        var $13=$publicId_addr; //@line 846 "pyexpat.c"
        var $14=_string_intern($12, $13); //@line 846 "pyexpat.c"
        var $15=$self; //@line 846 "pyexpat.c"
        var $16=$systemId_addr; //@line 846 "pyexpat.c"
        var $17=_string_intern($15, $16); //@line 846 "pyexpat.c"
        var $18=$self; //@line 846 "pyexpat.c"
        var $19=$base_addr; //@line 846 "pyexpat.c"
        var $20=_string_intern($18, $19); //@line 846 "pyexpat.c"
        var $21=$self; //@line 846 "pyexpat.c"
        var $22=$21+12; //@line 846 "pyexpat.c"
        var $23=HEAP[$22]; //@line 846 "pyexpat.c"
        var $24=($23)!=0; //@line 846 "pyexpat.c"
        if ($24) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 846 "pyexpat.c"
      case 4: // $bb3
        $iftmp_58=(FUNCTION_TABLE_OFFSET + 4); //@line 846 "pyexpat.c"
        __label__ = 6; break; //@line 846 "pyexpat.c"
      case 5: // $bb4
        $iftmp_58=(FUNCTION_TABLE_OFFSET + 6); //@line 846 "pyexpat.c"
        __label__ = 6; break; //@line 846 "pyexpat.c"
      case 6: // $bb5
        var $25=$iftmp_58; //@line 846 "pyexpat.c"
        var $26=$context_addr; //@line 846 "pyexpat.c"
        var $27=_Py_BuildValue(__str40, allocate([$25,0,0,0,$26,0,0,0,$20,0,0,0,$17,0,0,0,$14,0,0,0], ["%struct.PyObject* (i8*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 846 "pyexpat.c"
        $args=$27; //@line 846 "pyexpat.c"
        var $28=($27)==0; //@line 846 "pyexpat.c"
        var $29=$self; //@line 846 "pyexpat.c"
        if ($28) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 846 "pyexpat.c"
      case 7: // $bb6
        _flag_error($29); //@line 846 "pyexpat.c"
        var $30=$rc; //@line 846 "pyexpat.c"
        $0=$30; //@line 846 "pyexpat.c"
        __label__ = 15; break; //@line 846 "pyexpat.c"
      case 8: // $bb7
        var $31=$29+24; //@line 846 "pyexpat.c"
        HEAP[$31]=1; //@line 846 "pyexpat.c"
        var $32=$self; //@line 846 "pyexpat.c"
        var $33=$32+48; //@line 846 "pyexpat.c"
        var $34=HEAP[$33]; //@line 846 "pyexpat.c"
        var $35=$34+56; //@line 846 "pyexpat.c"
        var $36=HEAP[$35]; //@line 846 "pyexpat.c"
        var $37=_getcode(14, __str41, 857); //@line 846 "pyexpat.c"
        var $38=$args; //@line 846 "pyexpat.c"
        var $39=$self; //@line 846 "pyexpat.c"
        var $40=_call_with_frame($37, $36, $38, $39); //@line 846 "pyexpat.c"
        $rv=$40; //@line 846 "pyexpat.c"
        var $41=$self; //@line 846 "pyexpat.c"
        var $42=$41+24; //@line 846 "pyexpat.c"
        HEAP[$42]=0; //@line 846 "pyexpat.c"
        var $43=$args; //@line 846 "pyexpat.c"
        var $44=$43; //@line 846 "pyexpat.c"
        var $45=HEAP[$44]; //@line 846 "pyexpat.c"
        var $46=($45) - 1; //@line 846 "pyexpat.c"
        var $47=$args; //@line 846 "pyexpat.c"
        var $48=$47; //@line 846 "pyexpat.c"
        HEAP[$48]=$46; //@line 846 "pyexpat.c"
        var $49=$args; //@line 846 "pyexpat.c"
        var $50=$49; //@line 846 "pyexpat.c"
        var $51=HEAP[$50]; //@line 846 "pyexpat.c"
        var $52=($51)==0; //@line 846 "pyexpat.c"
        if ($52) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 846 "pyexpat.c"
      case 9: // $bb8
        var $53=$args; //@line 846 "pyexpat.c"
        var $54=$53+4; //@line 846 "pyexpat.c"
        var $55=HEAP[$54]; //@line 846 "pyexpat.c"
        var $56=$55+24; //@line 846 "pyexpat.c"
        var $57=HEAP[$56]; //@line 846 "pyexpat.c"
        var $58=$args; //@line 846 "pyexpat.c"
        FUNCTION_TABLE[$57]($58); //@line 846 "pyexpat.c"
        __label__ = 10; break; //@line 846 "pyexpat.c"
      case 10: // $bb9
        var $59=$rv; //@line 846 "pyexpat.c"
        var $60=($59)==0; //@line 846 "pyexpat.c"
        if ($60) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 846 "pyexpat.c"
      case 11: // $bb10
        var $61=$self; //@line 846 "pyexpat.c"
        _flag_error($61); //@line 846 "pyexpat.c"
        var $62=$rc; //@line 846 "pyexpat.c"
        $0=$62; //@line 846 "pyexpat.c"
        __label__ = 15; break; //@line 846 "pyexpat.c"
      case 12: // $bb11
        var $63=$rv; //@line 846 "pyexpat.c"
        var $64=_PyInt_AsLong($63); //@line 846 "pyexpat.c"
        $rc=$64; //@line 846 "pyexpat.c"
        var $65=$rv; //@line 846 "pyexpat.c"
        var $66=$65; //@line 846 "pyexpat.c"
        var $67=HEAP[$66]; //@line 846 "pyexpat.c"
        var $68=($67) - 1; //@line 846 "pyexpat.c"
        var $69=$rv; //@line 846 "pyexpat.c"
        var $70=$69; //@line 846 "pyexpat.c"
        HEAP[$70]=$68; //@line 846 "pyexpat.c"
        var $71=$rv; //@line 846 "pyexpat.c"
        var $72=$71; //@line 846 "pyexpat.c"
        var $73=HEAP[$72]; //@line 846 "pyexpat.c"
        var $74=($73)==0; //@line 846 "pyexpat.c"
        if ($74) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 846 "pyexpat.c"
      case 13: // $bb12
        var $75=$rv; //@line 846 "pyexpat.c"
        var $76=$75+4; //@line 846 "pyexpat.c"
        var $77=HEAP[$76]; //@line 846 "pyexpat.c"
        var $78=$77+24; //@line 846 "pyexpat.c"
        var $79=HEAP[$78]; //@line 846 "pyexpat.c"
        var $80=$rv; //@line 846 "pyexpat.c"
        FUNCTION_TABLE[$79]($80); //@line 846 "pyexpat.c"
        __label__ = 14; break; //@line 846 "pyexpat.c"
      case 14: // $bb13
        var $81=$rc; //@line 846 "pyexpat.c"
        $0=$81; //@line 846 "pyexpat.c"
        __label__ = 15; break; //@line 846 "pyexpat.c"
      case 15: // $bb14
        var $82=$0; //@line 846 "pyexpat.c"
        $retval=$82; //@line 846 "pyexpat.c"
        var $retval15=$retval; //@line 846 "pyexpat.c"
        ;
        return $retval15; //@line 846 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_StartDoctypeDeclHandler($userData, $doctypeName, $sysid, $pubid, $has_internal_subset) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $doctypeName_addr;
        var $sysid_addr;
        var $pubid_addr;
        var $has_internal_subset_addr;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        $doctypeName_addr=$doctypeName;
        $sysid_addr=$sysid;
        $pubid_addr=$pubid;
        $has_internal_subset_addr=$has_internal_subset;
        var $0=$userData_addr; //@line 861 "pyexpat.c"
        var $1=$0; //@line 861 "pyexpat.c"
        $self=$1; //@line 861 "pyexpat.c"
        $args=0; //@line 861 "pyexpat.c"
        $rv=0; //@line 861 "pyexpat.c"
        var $2=$self; //@line 861 "pyexpat.c"
        var $3=_have_handler($2, 15); //@line 861 "pyexpat.c"
        var $4=($3)!=0; //@line 861 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 861 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 861 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 861 "pyexpat.c"
        var $7=($6) < 0; //@line 861 "pyexpat.c"
        if ($7) { __label__ = 10; break; } else { __label__ = 2; break; } //@line 861 "pyexpat.c"
      case 2: // $bb1
        var $8=$self; //@line 861 "pyexpat.c"
        var $9=$pubid_addr; //@line 861 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 861 "pyexpat.c"
        var $11=$self; //@line 861 "pyexpat.c"
        var $12=$sysid_addr; //@line 861 "pyexpat.c"
        var $13=_string_intern($11, $12); //@line 861 "pyexpat.c"
        var $14=$self; //@line 861 "pyexpat.c"
        var $15=$doctypeName_addr; //@line 861 "pyexpat.c"
        var $16=_string_intern($14, $15); //@line 861 "pyexpat.c"
        var $17=$has_internal_subset_addr; //@line 861 "pyexpat.c"
        var $18=_Py_BuildValue(__str42, allocate([$16,0,0,0,$13,0,0,0,$10,0,0,0,$17,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 861 "pyexpat.c"
        $args=$18; //@line 861 "pyexpat.c"
        var $19=$args; //@line 861 "pyexpat.c"
        var $20=($19)==0; //@line 861 "pyexpat.c"
        var $21=$self; //@line 861 "pyexpat.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 861 "pyexpat.c"
      case 3: // $bb2
        _flag_error($21); //@line 861 "pyexpat.c"
        __label__ = 10; break; //@line 861 "pyexpat.c"
      case 4: // $bb3
        var $22=$21+24; //@line 861 "pyexpat.c"
        HEAP[$22]=1; //@line 861 "pyexpat.c"
        var $23=$self; //@line 861 "pyexpat.c"
        var $24=$23+48; //@line 861 "pyexpat.c"
        var $25=HEAP[$24]; //@line 861 "pyexpat.c"
        var $26=$25+60; //@line 861 "pyexpat.c"
        var $27=HEAP[$26]; //@line 861 "pyexpat.c"
        var $28=_getcode(15, __str43, 867); //@line 861 "pyexpat.c"
        var $29=$args; //@line 861 "pyexpat.c"
        var $30=$self; //@line 861 "pyexpat.c"
        var $31=_call_with_frame($28, $27, $29, $30); //@line 861 "pyexpat.c"
        $rv=$31; //@line 861 "pyexpat.c"
        var $32=$self; //@line 861 "pyexpat.c"
        var $33=$32+24; //@line 861 "pyexpat.c"
        HEAP[$33]=0; //@line 861 "pyexpat.c"
        var $34=$args; //@line 861 "pyexpat.c"
        var $35=$34; //@line 861 "pyexpat.c"
        var $36=HEAP[$35]; //@line 861 "pyexpat.c"
        var $37=($36) - 1; //@line 861 "pyexpat.c"
        var $38=$args; //@line 861 "pyexpat.c"
        var $39=$38; //@line 861 "pyexpat.c"
        HEAP[$39]=$37; //@line 861 "pyexpat.c"
        var $40=$args; //@line 861 "pyexpat.c"
        var $41=$40; //@line 861 "pyexpat.c"
        var $42=HEAP[$41]; //@line 861 "pyexpat.c"
        var $43=($42)==0; //@line 861 "pyexpat.c"
        if ($43) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 861 "pyexpat.c"
      case 5: // $bb4
        var $44=$args; //@line 861 "pyexpat.c"
        var $45=$44+4; //@line 861 "pyexpat.c"
        var $46=HEAP[$45]; //@line 861 "pyexpat.c"
        var $47=$46+24; //@line 861 "pyexpat.c"
        var $48=HEAP[$47]; //@line 861 "pyexpat.c"
        var $49=$args; //@line 861 "pyexpat.c"
        FUNCTION_TABLE[$48]($49); //@line 861 "pyexpat.c"
        __label__ = 6; break; //@line 861 "pyexpat.c"
      case 6: // $bb5
        var $50=$rv; //@line 861 "pyexpat.c"
        var $51=($50)==0; //@line 861 "pyexpat.c"
        if ($51) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 861 "pyexpat.c"
      case 7: // $bb6
        var $52=$self; //@line 861 "pyexpat.c"
        _flag_error($52); //@line 861 "pyexpat.c"
        __label__ = 10; break; //@line 861 "pyexpat.c"
      case 8: // $bb7
        var $53=$rv; //@line 861 "pyexpat.c"
        var $54=$53; //@line 861 "pyexpat.c"
        var $55=HEAP[$54]; //@line 861 "pyexpat.c"
        var $56=($55) - 1; //@line 861 "pyexpat.c"
        var $57=$rv; //@line 861 "pyexpat.c"
        var $58=$57; //@line 861 "pyexpat.c"
        HEAP[$58]=$56; //@line 861 "pyexpat.c"
        var $59=$rv; //@line 861 "pyexpat.c"
        var $60=$59; //@line 861 "pyexpat.c"
        var $61=HEAP[$60]; //@line 861 "pyexpat.c"
        var $62=($61)==0; //@line 861 "pyexpat.c"
        if ($62) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 861 "pyexpat.c"
      case 9: // $bb8
        var $63=$rv; //@line 861 "pyexpat.c"
        var $64=$63+4; //@line 861 "pyexpat.c"
        var $65=HEAP[$64]; //@line 861 "pyexpat.c"
        var $66=$65+24; //@line 861 "pyexpat.c"
        var $67=HEAP[$66]; //@line 861 "pyexpat.c"
        var $68=$rv; //@line 861 "pyexpat.c"
        FUNCTION_TABLE[$67]($68); //@line 861 "pyexpat.c"
        __label__ = 10; break; //@line 861 "pyexpat.c"
      case 10: // $return
        ;
        return; //@line 861 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_EndDoctypeDeclHandler($userData) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr;
        var $self;
        var $args;
        var $rv;
        $userData_addr=$userData;
        var $0=$userData_addr; //@line 869 "pyexpat.c"
        var $1=$0; //@line 869 "pyexpat.c"
        $self=$1; //@line 869 "pyexpat.c"
        $args=0; //@line 869 "pyexpat.c"
        $rv=0; //@line 869 "pyexpat.c"
        var $2=$self; //@line 869 "pyexpat.c"
        var $3=_have_handler($2, 16); //@line 869 "pyexpat.c"
        var $4=($3)!=0; //@line 869 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 869 "pyexpat.c"
      case 1: // $bb
        var $5=$self; //@line 869 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 869 "pyexpat.c"
        var $7=($6) < 0; //@line 869 "pyexpat.c"
        if ($7) { __label__ = 10; break; } else { __label__ = 2; break; } //@line 869 "pyexpat.c"
      case 2: // $bb1
        var $8=_Py_BuildValue(__str34, allocate(1, "i32", ALLOC_STACK)); //@line 869 "pyexpat.c"
        $args=$8; //@line 869 "pyexpat.c"
        var $9=$args; //@line 869 "pyexpat.c"
        var $10=($9)==0; //@line 869 "pyexpat.c"
        var $11=$self; //@line 869 "pyexpat.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 869 "pyexpat.c"
      case 3: // $bb2
        _flag_error($11); //@line 869 "pyexpat.c"
        __label__ = 10; break; //@line 869 "pyexpat.c"
      case 4: // $bb3
        var $12=$11+24; //@line 869 "pyexpat.c"
        HEAP[$12]=1; //@line 869 "pyexpat.c"
        var $13=$self; //@line 869 "pyexpat.c"
        var $14=$13+48; //@line 869 "pyexpat.c"
        var $15=HEAP[$14]; //@line 869 "pyexpat.c"
        var $16=$15+64; //@line 869 "pyexpat.c"
        var $17=HEAP[$16]; //@line 869 "pyexpat.c"
        var $18=_getcode(16, __str44, 869); //@line 869 "pyexpat.c"
        var $19=$args; //@line 869 "pyexpat.c"
        var $20=$self; //@line 869 "pyexpat.c"
        var $21=_call_with_frame($18, $17, $19, $20); //@line 869 "pyexpat.c"
        $rv=$21; //@line 869 "pyexpat.c"
        var $22=$self; //@line 869 "pyexpat.c"
        var $23=$22+24; //@line 869 "pyexpat.c"
        HEAP[$23]=0; //@line 869 "pyexpat.c"
        var $24=$args; //@line 869 "pyexpat.c"
        var $25=$24; //@line 869 "pyexpat.c"
        var $26=HEAP[$25]; //@line 869 "pyexpat.c"
        var $27=($26) - 1; //@line 869 "pyexpat.c"
        var $28=$args; //@line 869 "pyexpat.c"
        var $29=$28; //@line 869 "pyexpat.c"
        HEAP[$29]=$27; //@line 869 "pyexpat.c"
        var $30=$args; //@line 869 "pyexpat.c"
        var $31=$30; //@line 869 "pyexpat.c"
        var $32=HEAP[$31]; //@line 869 "pyexpat.c"
        var $33=($32)==0; //@line 869 "pyexpat.c"
        if ($33) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 869 "pyexpat.c"
      case 5: // $bb4
        var $34=$args; //@line 869 "pyexpat.c"
        var $35=$34+4; //@line 869 "pyexpat.c"
        var $36=HEAP[$35]; //@line 869 "pyexpat.c"
        var $37=$36+24; //@line 869 "pyexpat.c"
        var $38=HEAP[$37]; //@line 869 "pyexpat.c"
        var $39=$args; //@line 869 "pyexpat.c"
        FUNCTION_TABLE[$38]($39); //@line 869 "pyexpat.c"
        __label__ = 6; break; //@line 869 "pyexpat.c"
      case 6: // $bb5
        var $40=$rv; //@line 869 "pyexpat.c"
        var $41=($40)==0; //@line 869 "pyexpat.c"
        if ($41) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 869 "pyexpat.c"
      case 7: // $bb6
        var $42=$self; //@line 869 "pyexpat.c"
        _flag_error($42); //@line 869 "pyexpat.c"
        __label__ = 10; break; //@line 869 "pyexpat.c"
      case 8: // $bb7
        var $43=$rv; //@line 869 "pyexpat.c"
        var $44=$43; //@line 869 "pyexpat.c"
        var $45=HEAP[$44]; //@line 869 "pyexpat.c"
        var $46=($45) - 1; //@line 869 "pyexpat.c"
        var $47=$rv; //@line 869 "pyexpat.c"
        var $48=$47; //@line 869 "pyexpat.c"
        HEAP[$48]=$46; //@line 869 "pyexpat.c"
        var $49=$rv; //@line 869 "pyexpat.c"
        var $50=$49; //@line 869 "pyexpat.c"
        var $51=HEAP[$50]; //@line 869 "pyexpat.c"
        var $52=($51)==0; //@line 869 "pyexpat.c"
        if ($52) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 869 "pyexpat.c"
      case 9: // $bb8
        var $53=$rv; //@line 869 "pyexpat.c"
        var $54=$53+4; //@line 869 "pyexpat.c"
        var $55=HEAP[$54]; //@line 869 "pyexpat.c"
        var $56=$55+24; //@line 869 "pyexpat.c"
        var $57=HEAP[$56]; //@line 869 "pyexpat.c"
        var $58=$rv; //@line 869 "pyexpat.c"
        FUNCTION_TABLE[$57]($58); //@line 869 "pyexpat.c"
        __label__ = 10; break; //@line 869 "pyexpat.c"
      case 10: // $return
        ;
        return; //@line 869 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_parse_result($self, $rv) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $rv_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $rv_addr=$rv;
        var $1=_PyErr_Occurred(); //@line 876 "pyexpat.c"
        var $2=($1)!=0; //@line 876 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 876 "pyexpat.c"
      case 1: // $bb
        $0=0; //@line 877 "pyexpat.c"
        __label__ = 7; break; //@line 877 "pyexpat.c"
      case 2: // $bb1
        var $3=$rv_addr; //@line 879 "pyexpat.c"
        var $4=($3)==0; //@line 879 "pyexpat.c"
        var $5=$self_addr; //@line 880 "pyexpat.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 879 "pyexpat.c"
      case 3: // $bb2
        var $6=$5+8; //@line 880 "pyexpat.c"
        var $7=HEAP[$6]; //@line 880 "pyexpat.c"
        var $8=_PyExpat_XML_GetErrorCode($7); //@line 880 "pyexpat.c"
        var $9=$self_addr; //@line 880 "pyexpat.c"
        var $10=_set_error($9, $8); //@line 880 "pyexpat.c"
        $0=$10; //@line 880 "pyexpat.c"
        __label__ = 7; break; //@line 880 "pyexpat.c"
      case 4: // $bb3
        var $11=_flush_character_buffer($5); //@line 882 "pyexpat.c"
        var $12=($11) < 0; //@line 882 "pyexpat.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 882 "pyexpat.c"
      case 5: // $bb4
        $0=0; //@line 883 "pyexpat.c"
        __label__ = 7; break; //@line 883 "pyexpat.c"
      case 6: // $bb5
        var $13=$rv_addr; //@line 885 "pyexpat.c"
        var $14=_PyInt_FromLong($13); //@line 885 "pyexpat.c"
        $0=$14; //@line 885 "pyexpat.c"
        __label__ = 7; break; //@line 885 "pyexpat.c"
      case 7: // $bb6
        var $15=$0; //@line 877 "pyexpat.c"
        $retval=$15; //@line 877 "pyexpat.c"
        var $retval7=$retval; //@line 877 "pyexpat.c"
        ;
        return $retval7; //@line 877 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_Parse($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $s=__stackBase__;
        var $slen=__stackBase__+4;
        var $isFinal=__stackBase__+8;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$isFinal]=0; //@line 897 "pyexpat.c"
        var $1=$args_addr; //@line 899 "pyexpat.c"
        var $2=_PyArg_ParseTuple($1, __str45, allocate([$s,0,0,0,$slen,0,0,0,$isFinal,0,0,0], ["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 899 "pyexpat.c"
        var $3=($2)==0; //@line 899 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 899 "pyexpat.c"
      case 1: // $bb
        $0=0; //@line 900 "pyexpat.c"
        __label__ = 3; break; //@line 900 "pyexpat.c"
      case 2: // $bb1
        var $4=HEAP[$isFinal]; //@line 902 "pyexpat.c"
        var $5=HEAP[$slen]; //@line 902 "pyexpat.c"
        var $6=HEAP[$s]; //@line 902 "pyexpat.c"
        var $7=$self_addr; //@line 902 "pyexpat.c"
        var $8=$7+8; //@line 902 "pyexpat.c"
        var $9=HEAP[$8]; //@line 902 "pyexpat.c"
        var $10=_PyExpat_XML_Parse($9, $6, $5, $4); //@line 902 "pyexpat.c"
        var $11=$self_addr; //@line 902 "pyexpat.c"
        var $12=_get_parse_result($11, $10); //@line 902 "pyexpat.c"
        $0=$12; //@line 902 "pyexpat.c"
        __label__ = 3; break; //@line 902 "pyexpat.c"
      case 3: // $bb2
        var $13=$0; //@line 900 "pyexpat.c"
        $retval=$13; //@line 900 "pyexpat.c"
        var $retval3=$retval; //@line 900 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 900 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _readinst($buf, $meth) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $buf_addr;
        var $buf_size_addr;
        var $meth_addr;
        var $retval;
        var $0;
        var $arg;
        var $bytes;
        var $str;
        var $len;
        $buf_addr=$buf;
        $buf_size_addr=2048;
        $meth_addr=$meth;
        $arg=0; //@line 912 "pyexpat.c"
        $bytes=0; //@line 913 "pyexpat.c"
        $str=0; //@line 914 "pyexpat.c"
        $len=-1; //@line 915 "pyexpat.c"
        var $1=$buf_size_addr; //@line 917 "pyexpat.c"
        var $2=_PyInt_FromLong($1); //@line 917 "pyexpat.c"
        $bytes=$2; //@line 917 "pyexpat.c"
        var $3=$bytes; //@line 917 "pyexpat.c"
        var $4=($3)==0; //@line 917 "pyexpat.c"
        if ($4) { __label__ = 10; break; } else { __label__ = 1; break; } //@line 917 "pyexpat.c"
      case 1: // $bb
        var $5=_PyTuple_New(1); //@line 920 "pyexpat.c"
        $arg=$5; //@line 920 "pyexpat.c"
        var $6=$arg; //@line 920 "pyexpat.c"
        var $7=($6)==0; //@line 920 "pyexpat.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 920 "pyexpat.c"
      case 2: // $bb1
        var $8=$bytes; //@line 921 "pyexpat.c"
        var $9=$8; //@line 921 "pyexpat.c"
        var $10=HEAP[$9]; //@line 921 "pyexpat.c"
        var $11=($10) - 1; //@line 921 "pyexpat.c"
        var $12=$bytes; //@line 921 "pyexpat.c"
        var $13=$12; //@line 921 "pyexpat.c"
        HEAP[$13]=$11; //@line 921 "pyexpat.c"
        var $14=$bytes; //@line 921 "pyexpat.c"
        var $15=$14; //@line 921 "pyexpat.c"
        var $16=HEAP[$15]; //@line 921 "pyexpat.c"
        var $17=($16)==0; //@line 921 "pyexpat.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 10; break; } //@line 921 "pyexpat.c"
      case 3: // $bb2
        var $18=$bytes; //@line 921 "pyexpat.c"
        var $19=$18+4; //@line 921 "pyexpat.c"
        var $20=HEAP[$19]; //@line 921 "pyexpat.c"
        var $21=$20+24; //@line 921 "pyexpat.c"
        var $22=HEAP[$21]; //@line 921 "pyexpat.c"
        var $23=$bytes; //@line 921 "pyexpat.c"
        FUNCTION_TABLE[$22]($23); //@line 921 "pyexpat.c"
        __label__ = 10; break; //@line 921 "pyexpat.c"
      case 4: // $bb4
        var $24=$arg; //@line 925 "pyexpat.c"
        var $25=$24; //@line 925 "pyexpat.c"
        var $26=$25+12; //@line 925 "pyexpat.c"
        var $27=$26; //@line 925 "pyexpat.c"
        var $28=$bytes; //@line 925 "pyexpat.c"
        HEAP[$27]=$28; //@line 925 "pyexpat.c"
        var $29=$meth_addr; //@line 930 "pyexpat.c"
        var $30=$arg; //@line 930 "pyexpat.c"
        var $31=_PyObject_Call($29, $30, 0); //@line 930 "pyexpat.c"
        $str=$31; //@line 930 "pyexpat.c"
        var $32=$str; //@line 932 "pyexpat.c"
        var $33=($32)==0; //@line 932 "pyexpat.c"
        if ($33) { __label__ = 10; break; } else { __label__ = 5; break; } //@line 932 "pyexpat.c"
      case 5: // $bb5
        var $34=$str; //@line 936 "pyexpat.c"
        var $35=$34+4; //@line 936 "pyexpat.c"
        var $36=HEAP[$35]; //@line 936 "pyexpat.c"
        var $37=$36+84; //@line 936 "pyexpat.c"
        var $38=HEAP[$37]; //@line 936 "pyexpat.c"
        var $39=($38) & 134217728; //@line 936 "pyexpat.c"
        var $40=($39)==0; //@line 936 "pyexpat.c"
        var $41=$str; //@line 937 "pyexpat.c"
        if ($40) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 936 "pyexpat.c"
      case 6: // $bb6
        var $42=$41+4; //@line 937 "pyexpat.c"
        var $43=HEAP[$42]; //@line 937 "pyexpat.c"
        var $44=$43+12; //@line 937 "pyexpat.c"
        var $45=HEAP[$44]; //@line 937 "pyexpat.c"
        var $46=HEAP[_PyExc_TypeError]; //@line 937 "pyexpat.c"
        var $47=_PyErr_Format($46, __str46, allocate([$45,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 937 "pyexpat.c"
        __label__ = 10; break; //@line 937 "pyexpat.c"
      case 7: // $bb7
        var $48=$41; //@line 942 "pyexpat.c"
        var $49=$48+8; //@line 942 "pyexpat.c"
        var $50=HEAP[$49]; //@line 942 "pyexpat.c"
        $len=$50; //@line 942 "pyexpat.c"
        var $51=$len; //@line 943 "pyexpat.c"
        var $52=$buf_size_addr; //@line 943 "pyexpat.c"
        var $53=($51) > ($52); //@line 943 "pyexpat.c"
        if ($53) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 943 "pyexpat.c"
      case 8: // $bb8
        var $54=HEAP[_PyExc_ValueError]; //@line 944 "pyexpat.c"
        var $55=$buf_size_addr; //@line 944 "pyexpat.c"
        var $56=$len; //@line 944 "pyexpat.c"
        var $57=_PyErr_Format($54, __str47, allocate([$55,0,0,0,$56,0,0,0], ["i32",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 944 "pyexpat.c"
        __label__ = 10; break; //@line 944 "pyexpat.c"
      case 9: // $bb9
        var $58=$len; //@line 950 "pyexpat.c"
        var $59=$str; //@line 950 "pyexpat.c"
        var $60=_PyString_AsString($59); //@line 950 "pyexpat.c"
        var $61=$buf_addr; //@line 950 "pyexpat.c"
        _llvm_memcpy_p0i8_p0i8_i32($61, $60, $58, 1, 0); //@line 950 "pyexpat.c"
        __label__ = 10; break; //@line 951 "pyexpat.c"
      case 10: // $finally
        var $62=$arg; //@line 952 "pyexpat.c"
        var $63=($62)!=0; //@line 952 "pyexpat.c"
        if ($63) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 952 "pyexpat.c"
      case 11: // $bb10
        var $64=$arg; //@line 952 "pyexpat.c"
        var $65=$64; //@line 952 "pyexpat.c"
        var $66=HEAP[$65]; //@line 952 "pyexpat.c"
        var $67=($66) - 1; //@line 952 "pyexpat.c"
        var $68=$arg; //@line 952 "pyexpat.c"
        var $69=$68; //@line 952 "pyexpat.c"
        HEAP[$69]=$67; //@line 952 "pyexpat.c"
        var $70=$arg; //@line 952 "pyexpat.c"
        var $71=$70; //@line 952 "pyexpat.c"
        var $72=HEAP[$71]; //@line 952 "pyexpat.c"
        var $73=($72)==0; //@line 952 "pyexpat.c"
        if ($73) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 952 "pyexpat.c"
      case 12: // $bb11
        var $74=$arg; //@line 952 "pyexpat.c"
        var $75=$74+4; //@line 952 "pyexpat.c"
        var $76=HEAP[$75]; //@line 952 "pyexpat.c"
        var $77=$76+24; //@line 952 "pyexpat.c"
        var $78=HEAP[$77]; //@line 952 "pyexpat.c"
        var $79=$arg; //@line 952 "pyexpat.c"
        FUNCTION_TABLE[$78]($79); //@line 952 "pyexpat.c"
        __label__ = 13; break; //@line 952 "pyexpat.c"
      case 13: // $bb12
        var $80=$str; //@line 953 "pyexpat.c"
        var $81=($80)!=0; //@line 953 "pyexpat.c"
        if ($81) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 953 "pyexpat.c"
      case 14: // $bb13
        var $82=$str; //@line 953 "pyexpat.c"
        var $83=$82; //@line 953 "pyexpat.c"
        var $84=HEAP[$83]; //@line 953 "pyexpat.c"
        var $85=($84) - 1; //@line 953 "pyexpat.c"
        var $86=$str; //@line 953 "pyexpat.c"
        var $87=$86; //@line 953 "pyexpat.c"
        HEAP[$87]=$85; //@line 953 "pyexpat.c"
        var $88=$str; //@line 953 "pyexpat.c"
        var $89=$88; //@line 953 "pyexpat.c"
        var $90=HEAP[$89]; //@line 953 "pyexpat.c"
        var $91=($90)==0; //@line 953 "pyexpat.c"
        if ($91) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 953 "pyexpat.c"
      case 15: // $bb14
        var $92=$str; //@line 953 "pyexpat.c"
        var $93=$92+4; //@line 953 "pyexpat.c"
        var $94=HEAP[$93]; //@line 953 "pyexpat.c"
        var $95=$94+24; //@line 953 "pyexpat.c"
        var $96=HEAP[$95]; //@line 953 "pyexpat.c"
        var $97=$str; //@line 953 "pyexpat.c"
        FUNCTION_TABLE[$96]($97); //@line 953 "pyexpat.c"
        __label__ = 16; break; //@line 953 "pyexpat.c"
      case 16: // $bb15
        var $98=$len; //@line 954 "pyexpat.c"
        $0=$98; //@line 954 "pyexpat.c"
        var $99=$0; //@line 954 "pyexpat.c"
        $retval=$99; //@line 954 "pyexpat.c"
        var $retval16=$retval; //@line 954 "pyexpat.c"
        ;
        return $retval16; //@line 954 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_ParseFile($self, $f) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $f_addr;
        var $retval;
        var $0;
        var $rv;
        var $readmethod;
        var $bytes_read;
        var $buf;
        $self_addr=$self;
        $f_addr=$f;
        $rv=1; //@line 964 "pyexpat.c"
        $readmethod=0; //@line 965 "pyexpat.c"
        var $1=$f_addr; //@line 967 "pyexpat.c"
        var $2=_PyObject_GetAttrString($1, __str48); //@line 967 "pyexpat.c"
        $readmethod=$2; //@line 967 "pyexpat.c"
        var $3=$readmethod; //@line 968 "pyexpat.c"
        var $4=($3)==0; //@line 968 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 968 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_TypeError]; //@line 969 "pyexpat.c"
        _PyErr_SetString($5, __str49); //@line 969 "pyexpat.c"
        $0=0; //@line 971 "pyexpat.c"
        __label__ = 23; break; //@line 971 "pyexpat.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 976 "pyexpat.c"
        var $7=$6+8; //@line 976 "pyexpat.c"
        var $8=HEAP[$7]; //@line 976 "pyexpat.c"
        var $9=_PyExpat_XML_GetBuffer($8, 2048); //@line 976 "pyexpat.c"
        $buf=$9; //@line 976 "pyexpat.c"
        var $10=($9)==0; //@line 977 "pyexpat.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 977 "pyexpat.c"
      case 3: // $bb2
        var $11=$readmethod; //@line 978 "pyexpat.c"
        var $12=($11)!=0; //@line 978 "pyexpat.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 978 "pyexpat.c"
      case 4: // $bb3
        var $13=$readmethod; //@line 978 "pyexpat.c"
        var $14=$13; //@line 978 "pyexpat.c"
        var $15=HEAP[$14]; //@line 978 "pyexpat.c"
        var $16=($15) - 1; //@line 978 "pyexpat.c"
        var $17=$readmethod; //@line 978 "pyexpat.c"
        var $18=$17; //@line 978 "pyexpat.c"
        HEAP[$18]=$16; //@line 978 "pyexpat.c"
        var $19=$readmethod; //@line 978 "pyexpat.c"
        var $20=$19; //@line 978 "pyexpat.c"
        var $21=HEAP[$20]; //@line 978 "pyexpat.c"
        var $22=($21)==0; //@line 978 "pyexpat.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 978 "pyexpat.c"
      case 5: // $bb4
        var $23=$readmethod; //@line 978 "pyexpat.c"
        var $24=$23+4; //@line 978 "pyexpat.c"
        var $25=HEAP[$24]; //@line 978 "pyexpat.c"
        var $26=$25+24; //@line 978 "pyexpat.c"
        var $27=HEAP[$26]; //@line 978 "pyexpat.c"
        var $28=$readmethod; //@line 978 "pyexpat.c"
        FUNCTION_TABLE[$27]($28); //@line 978 "pyexpat.c"
        __label__ = 6; break; //@line 978 "pyexpat.c"
      case 6: // $bb5
        var $29=_PyErr_NoMemory(); //@line 979 "pyexpat.c"
        $0=$29; //@line 979 "pyexpat.c"
        __label__ = 23; break; //@line 979 "pyexpat.c"
      case 7: // $bb6
        var $30=$buf; //@line 982 "pyexpat.c"
        var $31=$readmethod; //@line 982 "pyexpat.c"
        var $32=_readinst($30, $31); //@line 982 "pyexpat.c"
        $bytes_read=$32; //@line 982 "pyexpat.c"
        var $33=$bytes_read; //@line 983 "pyexpat.c"
        var $34=($33) < 0; //@line 983 "pyexpat.c"
        if ($34) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 983 "pyexpat.c"
      case 8: // $bb7
        var $35=$readmethod; //@line 984 "pyexpat.c"
        var $36=($35)!=0; //@line 984 "pyexpat.c"
        if ($36) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 984 "pyexpat.c"
      case 9: // $bb8
        var $37=$readmethod; //@line 984 "pyexpat.c"
        var $38=$37; //@line 984 "pyexpat.c"
        var $39=HEAP[$38]; //@line 984 "pyexpat.c"
        var $40=($39) - 1; //@line 984 "pyexpat.c"
        var $41=$readmethod; //@line 984 "pyexpat.c"
        var $42=$41; //@line 984 "pyexpat.c"
        HEAP[$42]=$40; //@line 984 "pyexpat.c"
        var $43=$readmethod; //@line 984 "pyexpat.c"
        var $44=$43; //@line 984 "pyexpat.c"
        var $45=HEAP[$44]; //@line 984 "pyexpat.c"
        var $46=($45)==0; //@line 984 "pyexpat.c"
        if ($46) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 984 "pyexpat.c"
      case 10: // $bb9
        var $47=$readmethod; //@line 984 "pyexpat.c"
        var $48=$47+4; //@line 984 "pyexpat.c"
        var $49=HEAP[$48]; //@line 984 "pyexpat.c"
        var $50=$49+24; //@line 984 "pyexpat.c"
        var $51=HEAP[$50]; //@line 984 "pyexpat.c"
        var $52=$readmethod; //@line 984 "pyexpat.c"
        FUNCTION_TABLE[$51]($52); //@line 984 "pyexpat.c"
        __label__ = 11; break; //@line 984 "pyexpat.c"
      case 11: // $bb10
        $0=0; //@line 985 "pyexpat.c"
        __label__ = 23; break; //@line 985 "pyexpat.c"
      case 12: // $bb11
        var $53=$bytes_read; //@line 988 "pyexpat.c"
        var $54=($53)==0; //@line 988 "pyexpat.c"
        var $55=($54); //@line 988 "pyexpat.c"
        var $56=$self_addr; //@line 988 "pyexpat.c"
        var $57=$56+8; //@line 988 "pyexpat.c"
        var $58=HEAP[$57]; //@line 988 "pyexpat.c"
        var $59=$bytes_read; //@line 988 "pyexpat.c"
        var $60=_PyExpat_XML_ParseBuffer($58, $59, $55); //@line 988 "pyexpat.c"
        $rv=$60; //@line 988 "pyexpat.c"
        var $61=_PyErr_Occurred(); //@line 989 "pyexpat.c"
        var $62=($61)!=0; //@line 989 "pyexpat.c"
        if ($62) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 989 "pyexpat.c"
      case 13: // $bb12
        var $63=$readmethod; //@line 990 "pyexpat.c"
        var $64=($63)!=0; //@line 990 "pyexpat.c"
        if ($64) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 990 "pyexpat.c"
      case 14: // $bb13
        var $65=$readmethod; //@line 990 "pyexpat.c"
        var $66=$65; //@line 990 "pyexpat.c"
        var $67=HEAP[$66]; //@line 990 "pyexpat.c"
        var $68=($67) - 1; //@line 990 "pyexpat.c"
        var $69=$readmethod; //@line 990 "pyexpat.c"
        var $70=$69; //@line 990 "pyexpat.c"
        HEAP[$70]=$68; //@line 990 "pyexpat.c"
        var $71=$readmethod; //@line 990 "pyexpat.c"
        var $72=$71; //@line 990 "pyexpat.c"
        var $73=HEAP[$72]; //@line 990 "pyexpat.c"
        var $74=($73)==0; //@line 990 "pyexpat.c"
        if ($74) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 990 "pyexpat.c"
      case 15: // $bb14
        var $75=$readmethod; //@line 990 "pyexpat.c"
        var $76=$75+4; //@line 990 "pyexpat.c"
        var $77=HEAP[$76]; //@line 990 "pyexpat.c"
        var $78=$77+24; //@line 990 "pyexpat.c"
        var $79=HEAP[$78]; //@line 990 "pyexpat.c"
        var $80=$readmethod; //@line 990 "pyexpat.c"
        FUNCTION_TABLE[$79]($80); //@line 990 "pyexpat.c"
        __label__ = 16; break; //@line 990 "pyexpat.c"
      case 16: // $bb15
        $0=0; //@line 991 "pyexpat.c"
        __label__ = 23; break; //@line 991 "pyexpat.c"
      case 17: // $bb16
        var $81=$rv; //@line 994 "pyexpat.c"
        var $82=($81)==0; //@line 994 "pyexpat.c"
        if ($82) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 994 "pyexpat.c"
      case 18: // $bb17
        var $83=$bytes_read; //@line 994 "pyexpat.c"
        var $84=($83)==0; //@line 994 "pyexpat.c"
        if ($84) { __label__ = 19; break; } else { __label__ = 2; break; } //@line 994 "pyexpat.c"
      case 19: // $bb19
        var $85=$readmethod; //@line 997 "pyexpat.c"
        var $86=($85)!=0; //@line 997 "pyexpat.c"
        if ($86) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 997 "pyexpat.c"
      case 20: // $bb20
        var $87=$readmethod; //@line 997 "pyexpat.c"
        var $88=$87; //@line 997 "pyexpat.c"
        var $89=HEAP[$88]; //@line 997 "pyexpat.c"
        var $90=($89) - 1; //@line 997 "pyexpat.c"
        var $91=$readmethod; //@line 997 "pyexpat.c"
        var $92=$91; //@line 997 "pyexpat.c"
        HEAP[$92]=$90; //@line 997 "pyexpat.c"
        var $93=$readmethod; //@line 997 "pyexpat.c"
        var $94=$93; //@line 997 "pyexpat.c"
        var $95=HEAP[$94]; //@line 997 "pyexpat.c"
        var $96=($95)==0; //@line 997 "pyexpat.c"
        if ($96) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 997 "pyexpat.c"
      case 21: // $bb21
        var $97=$readmethod; //@line 997 "pyexpat.c"
        var $98=$97+4; //@line 997 "pyexpat.c"
        var $99=HEAP[$98]; //@line 997 "pyexpat.c"
        var $100=$99+24; //@line 997 "pyexpat.c"
        var $101=HEAP[$100]; //@line 997 "pyexpat.c"
        var $102=$readmethod; //@line 997 "pyexpat.c"
        FUNCTION_TABLE[$101]($102); //@line 997 "pyexpat.c"
        __label__ = 22; break; //@line 997 "pyexpat.c"
      case 22: // $bb22
        var $103=$self_addr; //@line 998 "pyexpat.c"
        var $104=$rv; //@line 998 "pyexpat.c"
        var $105=_get_parse_result($103, $104); //@line 998 "pyexpat.c"
        $0=$105; //@line 998 "pyexpat.c"
        __label__ = 23; break; //@line 998 "pyexpat.c"
      case 23: // $bb23
        var $106=$0; //@line 971 "pyexpat.c"
        $retval=$106; //@line 971 "pyexpat.c"
        var $retval24=$retval; //@line 971 "pyexpat.c"
        ;
        return $retval24; //@line 971 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_SetBase($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $base=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$args_addr; //@line 1010 "pyexpat.c"
        var $2=_PyArg_ParseTuple($1, __str50, allocate([$base,0,0,0], ["i8**",0,0,0], ALLOC_STACK)); //@line 1010 "pyexpat.c"
        var $3=($2)==0; //@line 1010 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1010 "pyexpat.c"
      case 1: // $bb
        $0=0; //@line 1011 "pyexpat.c"
        __label__ = 5; break; //@line 1011 "pyexpat.c"
      case 2: // $bb1
        var $4=HEAP[$base]; //@line 1012 "pyexpat.c"
        var $5=$self_addr; //@line 1012 "pyexpat.c"
        var $6=$5+8; //@line 1012 "pyexpat.c"
        var $7=HEAP[$6]; //@line 1012 "pyexpat.c"
        var $8=_PyExpat_XML_SetBase($7, $4); //@line 1012 "pyexpat.c"
        var $9=($8)==0; //@line 1012 "pyexpat.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1012 "pyexpat.c"
      case 3: // $bb2
        var $10=_PyErr_NoMemory(); //@line 1013 "pyexpat.c"
        $0=$10; //@line 1013 "pyexpat.c"
        __label__ = 5; break; //@line 1013 "pyexpat.c"
      case 4: // $bb3
        var $11=HEAP[__Py_NoneStruct]; //@line 1015 "pyexpat.c"
        var $12=($11) + 1; //@line 1015 "pyexpat.c"
        HEAP[__Py_NoneStruct]=$12; //@line 1015 "pyexpat.c"
        $0=__Py_NoneStruct; //@line 1016 "pyexpat.c"
        __label__ = 5; break; //@line 1016 "pyexpat.c"
      case 5: // $bb4
        var $13=$0; //@line 1011 "pyexpat.c"
        $retval=$13; //@line 1011 "pyexpat.c"
        var $retval5=$retval; //@line 1011 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 1011 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_GetBase($self, $unused) {
    ;
    var __label__;
  
    var $self_addr;
    var $unused_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $unused_addr=$unused;
    var $1=$self_addr; //@line 1026 "pyexpat.c"
    var $2=$1+8; //@line 1026 "pyexpat.c"
    var $3=HEAP[$2]; //@line 1026 "pyexpat.c"
    var $4=_PyExpat_XML_GetBase($3); //@line 1026 "pyexpat.c"
    var $5=_Py_BuildValue(__str51, allocate([$4,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 1026 "pyexpat.c"
    $0=$5; //@line 1026 "pyexpat.c"
    var $6=$0; //@line 1026 "pyexpat.c"
    $retval=$6; //@line 1026 "pyexpat.c"
    var $retval1=$retval; //@line 1026 "pyexpat.c"
    ;
    return $retval1; //@line 1026 "pyexpat.c"
  }
  

  function _xmlparse_GetInputContext($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $unused_addr;
        var $retval;
        var $0;
        var $offset=__stackBase__;
        var $size=__stackBase__+4;
        var $buffer;
        $self_addr=$self;
        $unused_addr=$unused;
        var $1=$self_addr; //@line 1038 "pyexpat.c"
        var $2=$1+24; //@line 1038 "pyexpat.c"
        var $3=HEAP[$2]; //@line 1038 "pyexpat.c"
        var $4=($3)!=0; //@line 1038 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1038 "pyexpat.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1041 "pyexpat.c"
        var $6=$5+8; //@line 1041 "pyexpat.c"
        var $7=HEAP[$6]; //@line 1041 "pyexpat.c"
        var $8=_PyExpat_XML_GetInputContext($7, $offset, $size); //@line 1041 "pyexpat.c"
        $buffer=$8; //@line 1041 "pyexpat.c"
        var $9=$buffer; //@line 1043 "pyexpat.c"
        var $10=($9)!=0; //@line 1043 "pyexpat.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1043 "pyexpat.c"
      case 2: // $bb1
        var $11=HEAP[$size]; //@line 1044 "pyexpat.c"
        var $12=HEAP[$offset]; //@line 1044 "pyexpat.c"
        var $13=($11) - ($12); //@line 1044 "pyexpat.c"
        var $14=HEAP[$offset]; //@line 1044 "pyexpat.c"
        var $15=$buffer; //@line 1044 "pyexpat.c"
        var $16=$15+$14; //@line 1044 "pyexpat.c"
        var $17=_PyString_FromStringAndSize($16, $13); //@line 1044 "pyexpat.c"
        $0=$17; //@line 1044 "pyexpat.c"
        __label__ = 5; break; //@line 1044 "pyexpat.c"
      case 3: // $bb2
        var $18=HEAP[__Py_NoneStruct]; //@line 1047 "pyexpat.c"
        var $19=($18) + 1; //@line 1047 "pyexpat.c"
        HEAP[__Py_NoneStruct]=$19; //@line 1047 "pyexpat.c"
        $0=__Py_NoneStruct; //@line 1047 "pyexpat.c"
        __label__ = 5; break; //@line 1047 "pyexpat.c"
      case 4: // $bb3
        var $20=HEAP[__Py_NoneStruct]; //@line 1050 "pyexpat.c"
        var $21=($20) + 1; //@line 1050 "pyexpat.c"
        HEAP[__Py_NoneStruct]=$21; //@line 1050 "pyexpat.c"
        $0=__Py_NoneStruct; //@line 1050 "pyexpat.c"
        __label__ = 5; break; //@line 1050 "pyexpat.c"
      case 5: // $bb4
        var $22=$0; //@line 1044 "pyexpat.c"
        $retval=$22; //@line 1044 "pyexpat.c"
        var $retval5=$retval; //@line 1044 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 1044 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_ExternalEntityParserCreate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $context=__stackBase__;
        var $encoding=__stackBase__+4;
        var $new_parser;
        var $i;
        var $handler;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$encoding]=0; //@line 1062 "pyexpat.c"
        var $1=$args_addr; //@line 1066 "pyexpat.c"
        var $2=_PyArg_ParseTuple($1, __str52, allocate([$context,0,0,0,$encoding,0,0,0], ["i8**",0,0,0,"i8**",0,0,0], ALLOC_STACK)); //@line 1066 "pyexpat.c"
        var $3=($2)==0; //@line 1066 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1066 "pyexpat.c"
      case 1: // $bb
        $0=0; //@line 1068 "pyexpat.c"
        __label__ = 25; break; //@line 1068 "pyexpat.c"
      case 2: // $bb1
        var $4=__PyObject_GC_New(_Xmlparsetype); //@line 1076 "pyexpat.c"
        var $5=$4; //@line 1076 "pyexpat.c"
        $new_parser=$5; //@line 1076 "pyexpat.c"
        var $6=$new_parser; //@line 1079 "pyexpat.c"
        var $7=($6)==0; //@line 1079 "pyexpat.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1079 "pyexpat.c"
      case 3: // $bb2
        $0=0; //@line 1080 "pyexpat.c"
        __label__ = 25; break; //@line 1080 "pyexpat.c"
      case 4: // $bb3
        var $8=$self_addr; //@line 1081 "pyexpat.c"
        var $9=$8+36; //@line 1081 "pyexpat.c"
        var $10=HEAP[$9]; //@line 1081 "pyexpat.c"
        var $11=$new_parser; //@line 1081 "pyexpat.c"
        var $12=$11+36; //@line 1081 "pyexpat.c"
        HEAP[$12]=$10; //@line 1081 "pyexpat.c"
        var $13=$new_parser; //@line 1082 "pyexpat.c"
        var $14=$13+40; //@line 1082 "pyexpat.c"
        HEAP[$14]=0; //@line 1082 "pyexpat.c"
        var $15=$self_addr; //@line 1083 "pyexpat.c"
        var $16=$15+32; //@line 1083 "pyexpat.c"
        var $17=HEAP[$16]; //@line 1083 "pyexpat.c"
        var $18=($17)!=0; //@line 1083 "pyexpat.c"
        var $19=$new_parser; //@line 1084 "pyexpat.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 1083 "pyexpat.c"
      case 5: // $bb4
        var $20=$19+36; //@line 1084 "pyexpat.c"
        var $21=HEAP[$20]; //@line 1084 "pyexpat.c"
        var $22=_malloc($21); //@line 1084 "pyexpat.c"
        var $23=$new_parser; //@line 1084 "pyexpat.c"
        var $24=$23+32; //@line 1084 "pyexpat.c"
        HEAP[$24]=$22; //@line 1084 "pyexpat.c"
        var $25=$new_parser; //@line 1085 "pyexpat.c"
        var $26=$25+32; //@line 1085 "pyexpat.c"
        var $27=HEAP[$26]; //@line 1085 "pyexpat.c"
        var $28=($27)==0; //@line 1085 "pyexpat.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 1085 "pyexpat.c"
      case 6: // $bb5
        var $29=$new_parser; //@line 1091 "pyexpat.c"
        var $30=$29; //@line 1091 "pyexpat.c"
        _PyObject_GC_Del($30); //@line 1091 "pyexpat.c"
        var $31=_PyErr_NoMemory(); //@line 1093 "pyexpat.c"
        $0=$31; //@line 1093 "pyexpat.c"
        __label__ = 25; break; //@line 1093 "pyexpat.c"
      case 7: // $bb7
        var $32=$19+32; //@line 1097 "pyexpat.c"
        HEAP[$32]=0; //@line 1097 "pyexpat.c"
        __label__ = 8; break; //@line 1097 "pyexpat.c"
      case 8: // $bb8
        var $33=$self_addr; //@line 1098 "pyexpat.c"
        var $34=$33+12; //@line 1098 "pyexpat.c"
        var $35=HEAP[$34]; //@line 1098 "pyexpat.c"
        var $36=$new_parser; //@line 1098 "pyexpat.c"
        var $37=$36+12; //@line 1098 "pyexpat.c"
        HEAP[$37]=$35; //@line 1098 "pyexpat.c"
        var $38=$self_addr; //@line 1099 "pyexpat.c"
        var $39=$38+16; //@line 1099 "pyexpat.c"
        var $40=HEAP[$39]; //@line 1099 "pyexpat.c"
        var $41=$new_parser; //@line 1099 "pyexpat.c"
        var $42=$41+16; //@line 1099 "pyexpat.c"
        HEAP[$42]=$40; //@line 1099 "pyexpat.c"
        var $43=$self_addr; //@line 1100 "pyexpat.c"
        var $44=$43+20; //@line 1100 "pyexpat.c"
        var $45=HEAP[$44]; //@line 1100 "pyexpat.c"
        var $46=$new_parser; //@line 1100 "pyexpat.c"
        var $47=$46+20; //@line 1100 "pyexpat.c"
        HEAP[$47]=$45; //@line 1100 "pyexpat.c"
        var $48=$new_parser; //@line 1101 "pyexpat.c"
        var $49=$48+24; //@line 1101 "pyexpat.c"
        HEAP[$49]=0; //@line 1101 "pyexpat.c"
        var $50=$self_addr; //@line 1102 "pyexpat.c"
        var $51=$50+28; //@line 1102 "pyexpat.c"
        var $52=HEAP[$51]; //@line 1102 "pyexpat.c"
        var $53=$new_parser; //@line 1102 "pyexpat.c"
        var $54=$53+28; //@line 1102 "pyexpat.c"
        HEAP[$54]=$52; //@line 1102 "pyexpat.c"
        var $55=HEAP[$encoding]; //@line 1103 "pyexpat.c"
        var $56=HEAP[$context]; //@line 1103 "pyexpat.c"
        var $57=$self_addr; //@line 1103 "pyexpat.c"
        var $58=$57+8; //@line 1103 "pyexpat.c"
        var $59=HEAP[$58]; //@line 1103 "pyexpat.c"
        var $60=_PyExpat_XML_ExternalEntityParserCreate($59, $56, $55); //@line 1103 "pyexpat.c"
        var $61=$new_parser; //@line 1103 "pyexpat.c"
        var $62=$61+8; //@line 1103 "pyexpat.c"
        HEAP[$62]=$60; //@line 1103 "pyexpat.c"
        var $63=$new_parser; //@line 1105 "pyexpat.c"
        var $64=$63+48; //@line 1105 "pyexpat.c"
        HEAP[$64]=0; //@line 1105 "pyexpat.c"
        var $65=$self_addr; //@line 1106 "pyexpat.c"
        var $66=$65+44; //@line 1106 "pyexpat.c"
        var $67=HEAP[$66]; //@line 1106 "pyexpat.c"
        var $68=$new_parser; //@line 1106 "pyexpat.c"
        var $69=$68+44; //@line 1106 "pyexpat.c"
        HEAP[$69]=$67; //@line 1106 "pyexpat.c"
        var $70=$new_parser; //@line 1107 "pyexpat.c"
        var $71=$70+44; //@line 1107 "pyexpat.c"
        var $72=HEAP[$71]; //@line 1107 "pyexpat.c"
        var $73=($72)!=0; //@line 1107 "pyexpat.c"
        if ($73) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1107 "pyexpat.c"
      case 9: // $bb9
        var $74=$new_parser; //@line 1107 "pyexpat.c"
        var $75=$74+44; //@line 1107 "pyexpat.c"
        var $76=HEAP[$75]; //@line 1107 "pyexpat.c"
        var $77=$76; //@line 1107 "pyexpat.c"
        var $78=HEAP[$77]; //@line 1107 "pyexpat.c"
        var $79=($78) + 1; //@line 1107 "pyexpat.c"
        var $80=$76; //@line 1107 "pyexpat.c"
        HEAP[$80]=$79; //@line 1107 "pyexpat.c"
        __label__ = 10; break; //@line 1107 "pyexpat.c"
      case 10: // $bb10
        var $81=$new_parser; //@line 1109 "pyexpat.c"
        var $82=$81; //@line 1109 "pyexpat.c"
        _PyObject_GC_Track($82); //@line 1109 "pyexpat.c"
        var $83=$new_parser; //@line 1114 "pyexpat.c"
        var $84=$83+8; //@line 1114 "pyexpat.c"
        var $85=HEAP[$84]; //@line 1114 "pyexpat.c"
        var $86=($85)==0; //@line 1114 "pyexpat.c"
        var $87=$new_parser; //@line 1115 "pyexpat.c"
        if ($86) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 1114 "pyexpat.c"
      case 11: // $bb11
        var $88=$87; //@line 1115 "pyexpat.c"
        var $89=$88; //@line 1115 "pyexpat.c"
        var $90=HEAP[$89]; //@line 1115 "pyexpat.c"
        var $91=($90) - 1; //@line 1115 "pyexpat.c"
        var $92=$88; //@line 1115 "pyexpat.c"
        HEAP[$92]=$91; //@line 1115 "pyexpat.c"
        var $93=$88; //@line 1115 "pyexpat.c"
        var $94=HEAP[$93]; //@line 1115 "pyexpat.c"
        var $95=($94)==0; //@line 1115 "pyexpat.c"
        if ($95) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1115 "pyexpat.c"
      case 12: // $bb12
        var $96=$new_parser; //@line 1115 "pyexpat.c"
        var $97=$96; //@line 1115 "pyexpat.c"
        var $98=$97+4; //@line 1115 "pyexpat.c"
        var $99=HEAP[$98]; //@line 1115 "pyexpat.c"
        var $100=$99+24; //@line 1115 "pyexpat.c"
        var $101=HEAP[$100]; //@line 1115 "pyexpat.c"
        var $102=$new_parser; //@line 1115 "pyexpat.c"
        var $103=$102; //@line 1115 "pyexpat.c"
        FUNCTION_TABLE[$101]($103); //@line 1115 "pyexpat.c"
        __label__ = 13; break; //@line 1115 "pyexpat.c"
      case 13: // $bb13
        var $104=_PyErr_NoMemory(); //@line 1116 "pyexpat.c"
        $0=$104; //@line 1116 "pyexpat.c"
        __label__ = 25; break; //@line 1116 "pyexpat.c"
      case 14: // $bb14
        var $105=$87+8; //@line 1119 "pyexpat.c"
        var $106=HEAP[$105]; //@line 1119 "pyexpat.c"
        var $107=$new_parser; //@line 1119 "pyexpat.c"
        var $108=$107; //@line 1119 "pyexpat.c"
        _PyExpat_XML_SetUserData($106, $108); //@line 1119 "pyexpat.c"
        $i=0; //@line 1122 "pyexpat.c"
        var $109=$i; //@line 1122 "pyexpat.c"
        var $110=_handler_info+$109*20; //@line 1122 "pyexpat.c"
        var $111=$110; //@line 1122 "pyexpat.c"
        var $112=HEAP[$111]; //@line 1122 "pyexpat.c"
        var $113=($112)!=0; //@line 1122 "pyexpat.c"
        var $114=$i; //@line 1122 "pyexpat.c"
        if ($113) { __lastLabel__ = 14; __label__ = 15; break; } else { __lastLabel__ = 14; __label__ = 16; break; } //@line 1122 "pyexpat.c"
      case 15: // $bb15
        var $115=__lastLabel__ == 15 ? $122 : ($114);
        var $116=($115) + 1; //@line 1122 "pyexpat.c"
        $i=$116; //@line 1122 "pyexpat.c"
        var $117=$i; //@line 1122 "pyexpat.c"
        var $118=_handler_info+$117*20; //@line 1122 "pyexpat.c"
        var $119=$118; //@line 1122 "pyexpat.c"
        var $120=HEAP[$119]; //@line 1122 "pyexpat.c"
        var $121=($120)!=0; //@line 1122 "pyexpat.c"
        var $122=$i; //@line 1122 "pyexpat.c"
        if ($121) { __lastLabel__ = 15; __label__ = 15; break; } else { __lastLabel__ = 15; __label__ = 16; break; } //@line 1122 "pyexpat.c"
      case 16: // $bb17
        var $_lcssa=__lastLabel__ == 14 ? $114 : ($122);
        var $123=($_lcssa) * 4; //@line 1125 "pyexpat.c"
        var $124=_malloc($123); //@line 1125 "pyexpat.c"
        var $125=$124; //@line 1125 "pyexpat.c"
        var $126=$new_parser; //@line 1125 "pyexpat.c"
        var $127=$126+48; //@line 1125 "pyexpat.c"
        HEAP[$127]=$125; //@line 1125 "pyexpat.c"
        var $128=$new_parser; //@line 1126 "pyexpat.c"
        var $129=$128+48; //@line 1126 "pyexpat.c"
        var $130=HEAP[$129]; //@line 1126 "pyexpat.c"
        var $131=($130)==0; //@line 1126 "pyexpat.c"
        var $132=$new_parser; //@line 1127 "pyexpat.c"
        if ($131) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 1126 "pyexpat.c"
      case 17: // $bb18
        var $133=$132; //@line 1127 "pyexpat.c"
        var $134=$133; //@line 1127 "pyexpat.c"
        var $135=HEAP[$134]; //@line 1127 "pyexpat.c"
        var $136=($135) - 1; //@line 1127 "pyexpat.c"
        var $137=$133; //@line 1127 "pyexpat.c"
        HEAP[$137]=$136; //@line 1127 "pyexpat.c"
        var $138=$133; //@line 1127 "pyexpat.c"
        var $139=HEAP[$138]; //@line 1127 "pyexpat.c"
        var $140=($139)==0; //@line 1127 "pyexpat.c"
        if ($140) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1127 "pyexpat.c"
      case 18: // $bb19
        var $141=$new_parser; //@line 1127 "pyexpat.c"
        var $142=$141; //@line 1127 "pyexpat.c"
        var $143=$142+4; //@line 1127 "pyexpat.c"
        var $144=HEAP[$143]; //@line 1127 "pyexpat.c"
        var $145=$144+24; //@line 1127 "pyexpat.c"
        var $146=HEAP[$145]; //@line 1127 "pyexpat.c"
        var $147=$new_parser; //@line 1127 "pyexpat.c"
        var $148=$147; //@line 1127 "pyexpat.c"
        FUNCTION_TABLE[$146]($148); //@line 1127 "pyexpat.c"
        __label__ = 19; break; //@line 1127 "pyexpat.c"
      case 19: // $bb20
        var $149=_PyErr_NoMemory(); //@line 1128 "pyexpat.c"
        $0=$149; //@line 1128 "pyexpat.c"
        __label__ = 25; break; //@line 1128 "pyexpat.c"
      case 20: // $bb21
        _clear_handlers($132, 1); //@line 1130 "pyexpat.c"
        $i=0; //@line 1133 "pyexpat.c"
        var $150=$i; //@line 1133 "pyexpat.c"
        var $151=_handler_info+$150*20; //@line 1133 "pyexpat.c"
        var $152=$151; //@line 1133 "pyexpat.c"
        var $153=HEAP[$152]; //@line 1133 "pyexpat.c"
        var $154=($153)!=0; //@line 1133 "pyexpat.c"
        if ($154) { __label__ = 21; break; } else { __label__ = 24; break; } //@line 1133 "pyexpat.c"
      case 21: // $bb22
        var $155=$self_addr; //@line 1134 "pyexpat.c"
        var $156=$155+48; //@line 1134 "pyexpat.c"
        var $157=HEAP[$156]; //@line 1134 "pyexpat.c"
        var $158=$i; //@line 1134 "pyexpat.c"
        var $159=$157+4*$158; //@line 1134 "pyexpat.c"
        var $160=HEAP[$159]; //@line 1134 "pyexpat.c"
        $handler=$160; //@line 1134 "pyexpat.c"
        var $161=($160)!=0; //@line 1135 "pyexpat.c"
        if ($161) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1135 "pyexpat.c"
      case 22: // $bb23
        var $162=$handler; //@line 1136 "pyexpat.c"
        var $163=$162; //@line 1136 "pyexpat.c"
        var $164=HEAP[$163]; //@line 1136 "pyexpat.c"
        var $165=($164) + 1; //@line 1136 "pyexpat.c"
        var $166=$handler; //@line 1136 "pyexpat.c"
        var $167=$166; //@line 1136 "pyexpat.c"
        HEAP[$167]=$165; //@line 1136 "pyexpat.c"
        var $168=$new_parser; //@line 1137 "pyexpat.c"
        var $169=$168+48; //@line 1137 "pyexpat.c"
        var $170=HEAP[$169]; //@line 1137 "pyexpat.c"
        var $171=$i; //@line 1137 "pyexpat.c"
        var $172=$170+4*$171; //@line 1137 "pyexpat.c"
        var $173=$handler; //@line 1137 "pyexpat.c"
        HEAP[$172]=$173; //@line 1137 "pyexpat.c"
        var $174=$i; //@line 1138 "pyexpat.c"
        var $175=_handler_info+$174*20; //@line 1138 "pyexpat.c"
        var $176=$175+4; //@line 1138 "pyexpat.c"
        var $177=HEAP[$176]; //@line 1138 "pyexpat.c"
        var $178=$i; //@line 1138 "pyexpat.c"
        var $179=_handler_info+$178*20; //@line 1138 "pyexpat.c"
        var $180=$179+8; //@line 1138 "pyexpat.c"
        var $181=HEAP[$180]; //@line 1138 "pyexpat.c"
        var $182=$new_parser; //@line 1138 "pyexpat.c"
        var $183=$182+8; //@line 1138 "pyexpat.c"
        var $184=HEAP[$183]; //@line 1138 "pyexpat.c"
        FUNCTION_TABLE[$177]($184, $181); //@line 1138 "pyexpat.c"
        __label__ = 23; break; //@line 1138 "pyexpat.c"
      case 23: // $bb24
        var $185=$i; //@line 1133 "pyexpat.c"
        var $186=($185) + 1; //@line 1133 "pyexpat.c"
        $i=$186; //@line 1133 "pyexpat.c"
        var $187=$i; //@line 1133 "pyexpat.c"
        var $188=_handler_info+$187*20; //@line 1133 "pyexpat.c"
        var $189=$188; //@line 1133 "pyexpat.c"
        var $190=HEAP[$189]; //@line 1133 "pyexpat.c"
        var $191=($190)!=0; //@line 1133 "pyexpat.c"
        if ($191) { __label__ = 21; break; } else { __label__ = 24; break; } //@line 1133 "pyexpat.c"
      case 24: // $bb26
        var $192=$new_parser; //@line 1142 "pyexpat.c"
        var $193=$192; //@line 1142 "pyexpat.c"
        $0=$193; //@line 1142 "pyexpat.c"
        __label__ = 25; break; //@line 1142 "pyexpat.c"
      case 25: // $bb27
        var $194=$0; //@line 1068 "pyexpat.c"
        $retval=$194; //@line 1068 "pyexpat.c"
        var $retval28=$retval; //@line 1068 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval28; //@line 1068 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_SetParamEntityParsing($p, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $flag=__stackBase__;
        $p_addr=$p;
        $args_addr=$args;
        var $1=$args_addr; //@line 1157 "pyexpat.c"
        var $2=_PyArg_ParseTuple($1, __str53, allocate([$flag,0,0,0], ["i32*",0,0,0], ALLOC_STACK)); //@line 1157 "pyexpat.c"
        var $3=($2)==0; //@line 1157 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1157 "pyexpat.c"
      case 1: // $bb
        $0=0; //@line 1158 "pyexpat.c"
        __label__ = 3; break; //@line 1158 "pyexpat.c"
      case 2: // $bb1
        var $4=HEAP[$flag]; //@line 1159 "pyexpat.c"
        var $5=$p_addr; //@line 1159 "pyexpat.c"
        var $6=$5+8; //@line 1159 "pyexpat.c"
        var $7=HEAP[$6]; //@line 1159 "pyexpat.c"
        var $8=_PyExpat_XML_SetParamEntityParsing($7, $4); //@line 1159 "pyexpat.c"
        HEAP[$flag]=$8; //@line 1159 "pyexpat.c"
        var $9=HEAP[$flag]; //@line 1160 "pyexpat.c"
        var $10=_PyInt_FromLong($9); //@line 1160 "pyexpat.c"
        $0=$10; //@line 1160 "pyexpat.c"
        __label__ = 3; break; //@line 1160 "pyexpat.c"
      case 3: // $bb2
        var $11=$0; //@line 1158 "pyexpat.c"
        $retval=$11; //@line 1158 "pyexpat.c"
        var $retval3=$retval; //@line 1158 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1158 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_UseForeignDTD($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $flagobj=__stackBase__;
        var $flag;
        var $rc;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$flagobj]=0; //@line 1176 "pyexpat.c"
        $flag=1; //@line 1177 "pyexpat.c"
        var $1=$args_addr; //@line 1179 "pyexpat.c"
        var $2=_PyArg_UnpackTuple($1, __str54, 0, 1, allocate([$flagobj,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 1179 "pyexpat.c"
        var $3=($2)==0; //@line 1179 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1179 "pyexpat.c"
      case 1: // $bb
        $0=0; //@line 1180 "pyexpat.c"
        __label__ = 7; break; //@line 1180 "pyexpat.c"
      case 2: // $bb1
        var $4=HEAP[$flagobj]; //@line 1181 "pyexpat.c"
        var $5=($4)!=0; //@line 1181 "pyexpat.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1181 "pyexpat.c"
      case 3: // $bb2
        var $6=HEAP[$flagobj]; //@line 1182 "pyexpat.c"
        var $7=_PyObject_IsTrue($6); //@line 1182 "pyexpat.c"
        var $8=($7)!=0; //@line 1182 "pyexpat.c"
        var $9=($8); //@line 1182 "pyexpat.c"
        $flag=$9; //@line 1182 "pyexpat.c"
        __label__ = 4; break; //@line 1182 "pyexpat.c"
      case 4: // $bb3
        var $10=$flag; //@line 1183 "pyexpat.c"
        var $11=($10); //@line 1183 "pyexpat.c"
        var $12=$self_addr; //@line 1183 "pyexpat.c"
        var $13=$12+8; //@line 1183 "pyexpat.c"
        var $14=HEAP[$13]; //@line 1183 "pyexpat.c"
        var $15=((($11)) & 255); //@line 1183 "pyexpat.c"
        var $16=_PyExpat_XML_UseForeignDTD($14, $15); //@line 1183 "pyexpat.c"
        $rc=$16; //@line 1183 "pyexpat.c"
        var $17=($16)!=0; //@line 1184 "pyexpat.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1184 "pyexpat.c"
      case 5: // $bb4
        var $18=$self_addr; //@line 1185 "pyexpat.c"
        var $19=$rc; //@line 1185 "pyexpat.c"
        var $20=_set_error($18, $19); //@line 1185 "pyexpat.c"
        $0=$20; //@line 1185 "pyexpat.c"
        __label__ = 7; break; //@line 1185 "pyexpat.c"
      case 6: // $bb5
        var $21=HEAP[__Py_NoneStruct]; //@line 1187 "pyexpat.c"
        var $22=($21) + 1; //@line 1187 "pyexpat.c"
        HEAP[__Py_NoneStruct]=$22; //@line 1187 "pyexpat.c"
        $0=__Py_NoneStruct; //@line 1188 "pyexpat.c"
        __label__ = 7; break; //@line 1188 "pyexpat.c"
      case 7: // $bb6
        var $23=$0; //@line 1180 "pyexpat.c"
        $retval=$23; //@line 1180 "pyexpat.c"
        var $retval7=$retval; //@line 1180 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1180 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _init_template_buffer() {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $i;
        $i=0; //@line 1230 "pyexpat.c"
        __label__ = 1; break;
      case 1: // $bb
        var $0=$i; //@line 1231 "pyexpat.c"
        var $1=$i; //@line 1231 "pyexpat.c"
        var $2=((($1)) & 255); //@line 1231 "pyexpat.c"
        var $3=_template_buffer+$0; //@line 1231 "pyexpat.c"
        HEAP[$3]=$2; //@line 1231 "pyexpat.c"
        var $4=$i; //@line 1230 "pyexpat.c"
        var $5=($4) + 1; //@line 1230 "pyexpat.c"
        $i=$5; //@line 1230 "pyexpat.c"
        var $6=($5) <= 255; //@line 1230 "pyexpat.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1230 "pyexpat.c"
      case 2: // $bb2
        HEAP[_template_buffer+256]=0; //@line 1233 "pyexpat.c"
        ;
        return; //@line 1234 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyUnknownEncodingHandler($encodingHandlerData, $name, $info) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encodingHandlerData_addr;
        var $name_addr;
        var $info_addr;
        var $retval;
        var $0;
        var $_u_string;
        var $result;
        var $i;
        var $c;
        $encodingHandlerData_addr=$encodingHandlerData;
        $name_addr=$name;
        $info_addr=$info;
        $_u_string=0; //@line 1241 "pyexpat.c"
        $result=0; //@line 1242 "pyexpat.c"
        var $1=$name_addr; //@line 1246 "pyexpat.c"
        var $2=_PyUnicodeUCS2_Decode(_template_buffer, 256, $1, __str62); //@line 1246 "pyexpat.c"
        var $3=$2; //@line 1246 "pyexpat.c"
        $_u_string=$3; //@line 1246 "pyexpat.c"
        var $4=$_u_string; //@line 1249 "pyexpat.c"
        var $5=($4)==0; //@line 1249 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1249 "pyexpat.c"
      case 1: // $bb
        var $6=$result; //@line 1250 "pyexpat.c"
        $0=$6; //@line 1250 "pyexpat.c"
        __label__ = 10; break; //@line 1250 "pyexpat.c"
      case 2: // $bb1
        $i=0; //@line 1252 "pyexpat.c"
        __label__ = 3; break;
      case 3: // $bb2
        var $7=$_u_string; //@line 1254 "pyexpat.c"
        var $8=$7+12; //@line 1254 "pyexpat.c"
        var $9=HEAP[$8]; //@line 1254 "pyexpat.c"
        var $10=$i; //@line 1254 "pyexpat.c"
        var $11=$9+2*$10; //@line 1254 "pyexpat.c"
        var $12=HEAP[$11]; //@line 1254 "pyexpat.c"
        $c=$12; //@line 1254 "pyexpat.c"
        var $13=($12)==-3; //@line 1255 "pyexpat.c"
        var $14=$i; //@line 1256 "pyexpat.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1255 "pyexpat.c"
      case 4: // $bb3
        var $15=$info_addr; //@line 1256 "pyexpat.c"
        var $16=$15; //@line 1256 "pyexpat.c"
        var $17=$16+$14*4; //@line 1256 "pyexpat.c"
        HEAP[$17]=-1; //@line 1256 "pyexpat.c"
        __label__ = 6; break; //@line 1256 "pyexpat.c"
      case 5: // $bb4
        var $18=$c; //@line 1258 "pyexpat.c"
        var $19=($18); //@line 1258 "pyexpat.c"
        var $20=$info_addr; //@line 1258 "pyexpat.c"
        var $21=$20; //@line 1258 "pyexpat.c"
        var $22=$21+$14*4; //@line 1258 "pyexpat.c"
        HEAP[$22]=$19; //@line 1258 "pyexpat.c"
        __label__ = 6; break; //@line 1258 "pyexpat.c"
      case 6: // $bb5
        var $23=$i; //@line 1252 "pyexpat.c"
        var $24=($23) + 1; //@line 1252 "pyexpat.c"
        $i=$24; //@line 1252 "pyexpat.c"
        var $25=($24) <= 255; //@line 1252 "pyexpat.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 1252 "pyexpat.c"
      case 7: // $bb7
        var $26=$info_addr; //@line 1260 "pyexpat.c"
        var $27=$26+1024; //@line 1260 "pyexpat.c"
        HEAP[$27]=0; //@line 1260 "pyexpat.c"
        var $28=$info_addr; //@line 1261 "pyexpat.c"
        var $29=$28+1028; //@line 1261 "pyexpat.c"
        HEAP[$29]=0; //@line 1261 "pyexpat.c"
        var $30=$info_addr; //@line 1262 "pyexpat.c"
        var $31=$30+1032; //@line 1262 "pyexpat.c"
        HEAP[$31]=0; //@line 1262 "pyexpat.c"
        $result=1; //@line 1263 "pyexpat.c"
        var $32=$_u_string; //@line 1264 "pyexpat.c"
        var $33=$32; //@line 1264 "pyexpat.c"
        var $34=$33; //@line 1264 "pyexpat.c"
        var $35=HEAP[$34]; //@line 1264 "pyexpat.c"
        var $36=($35) - 1; //@line 1264 "pyexpat.c"
        var $37=$33; //@line 1264 "pyexpat.c"
        HEAP[$37]=$36; //@line 1264 "pyexpat.c"
        var $38=$33; //@line 1264 "pyexpat.c"
        var $39=HEAP[$38]; //@line 1264 "pyexpat.c"
        var $40=($39)==0; //@line 1264 "pyexpat.c"
        if ($40) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1264 "pyexpat.c"
      case 8: // $bb8
        var $41=$_u_string; //@line 1264 "pyexpat.c"
        var $42=$41; //@line 1264 "pyexpat.c"
        var $43=$42+4; //@line 1264 "pyexpat.c"
        var $44=HEAP[$43]; //@line 1264 "pyexpat.c"
        var $45=$44+24; //@line 1264 "pyexpat.c"
        var $46=HEAP[$45]; //@line 1264 "pyexpat.c"
        var $47=$_u_string; //@line 1264 "pyexpat.c"
        var $48=$47; //@line 1264 "pyexpat.c"
        FUNCTION_TABLE[$46]($48); //@line 1264 "pyexpat.c"
        __label__ = 9; break; //@line 1264 "pyexpat.c"
      case 9: // $bb9
        var $49=$result; //@line 1265 "pyexpat.c"
        $0=$49; //@line 1265 "pyexpat.c"
        __label__ = 10; break; //@line 1265 "pyexpat.c"
      case 10: // $bb10
        var $50=$0; //@line 1250 "pyexpat.c"
        $retval=$50; //@line 1250 "pyexpat.c"
        var $retval11=$retval; //@line 1250 "pyexpat.c"
        ;
        return $retval11; //@line 1250 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newxmlparseobject($encoding, $namespace_separator, $intern) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encoding_addr;
        var $namespace_separator_addr;
        var $intern_addr;
        var $retval;
        var $0;
        var $i;
        var $self;
        $encoding_addr=$encoding;
        $namespace_separator_addr=$namespace_separator;
        $intern_addr=$intern;
        var $1=__PyObject_GC_New(_Xmlparsetype); //@line 1278 "pyexpat.c"
        var $2=$1; //@line 1278 "pyexpat.c"
        $self=$2; //@line 1278 "pyexpat.c"
        var $3=$self; //@line 1282 "pyexpat.c"
        var $4=($3)==0; //@line 1282 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1282 "pyexpat.c"
      case 1: // $bb
        $0=0; //@line 1283 "pyexpat.c"
        __label__ = 18; break; //@line 1283 "pyexpat.c"
      case 2: // $bb1
        var $5=$self; //@line 1286 "pyexpat.c"
        var $6=$5+12; //@line 1286 "pyexpat.c"
        HEAP[$6]=1; //@line 1286 "pyexpat.c"
        var $7=$self; //@line 1291 "pyexpat.c"
        var $8=$7+32; //@line 1291 "pyexpat.c"
        HEAP[$8]=0; //@line 1291 "pyexpat.c"
        var $9=$self; //@line 1292 "pyexpat.c"
        var $10=$9+36; //@line 1292 "pyexpat.c"
        HEAP[$10]=8192; //@line 1292 "pyexpat.c"
        var $11=$self; //@line 1293 "pyexpat.c"
        var $12=$11+40; //@line 1293 "pyexpat.c"
        HEAP[$12]=0; //@line 1293 "pyexpat.c"
        var $13=$self; //@line 1294 "pyexpat.c"
        var $14=$13+16; //@line 1294 "pyexpat.c"
        HEAP[$14]=0; //@line 1294 "pyexpat.c"
        var $15=$self; //@line 1295 "pyexpat.c"
        var $16=$15+20; //@line 1295 "pyexpat.c"
        HEAP[$16]=0; //@line 1295 "pyexpat.c"
        var $17=$self; //@line 1296 "pyexpat.c"
        var $18=$17+24; //@line 1296 "pyexpat.c"
        HEAP[$18]=0; //@line 1296 "pyexpat.c"
        var $19=$self; //@line 1297 "pyexpat.c"
        var $20=$19+28; //@line 1297 "pyexpat.c"
        HEAP[$20]=0; //@line 1297 "pyexpat.c"
        var $21=$self; //@line 1298 "pyexpat.c"
        var $22=$21+48; //@line 1298 "pyexpat.c"
        HEAP[$22]=0; //@line 1298 "pyexpat.c"
        var $23=$namespace_separator_addr; //@line 1299 "pyexpat.c"
        var $24=($23)!=0; //@line 1299 "pyexpat.c"
        if ($24) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1299 "pyexpat.c"
      case 3: // $bb2
        var $25=$namespace_separator_addr; //@line 1300 "pyexpat.c"
        var $26=HEAP[$25]; //@line 1300 "pyexpat.c"
        var $27=($26); //@line 1300 "pyexpat.c"
        var $28=$encoding_addr; //@line 1300 "pyexpat.c"
        var $29=((($27)) & 255); //@line 1300 "pyexpat.c"
        var $30=_PyExpat_XML_ParserCreateNS($28, $29); //@line 1300 "pyexpat.c"
        var $31=$self; //@line 1300 "pyexpat.c"
        var $32=$31+8; //@line 1300 "pyexpat.c"
        HEAP[$32]=$30; //@line 1300 "pyexpat.c"
        __label__ = 5; break; //@line 1300 "pyexpat.c"
      case 4: // $bb3
        var $33=$encoding_addr; //@line 1303 "pyexpat.c"
        var $34=_PyExpat_XML_ParserCreate($33); //@line 1303 "pyexpat.c"
        var $35=$self; //@line 1303 "pyexpat.c"
        var $36=$35+8; //@line 1303 "pyexpat.c"
        HEAP[$36]=$34; //@line 1303 "pyexpat.c"
        __label__ = 5; break; //@line 1303 "pyexpat.c"
      case 5: // $bb4
        var $37=$self; //@line 1305 "pyexpat.c"
        var $38=$37+44; //@line 1305 "pyexpat.c"
        var $39=$intern_addr; //@line 1305 "pyexpat.c"
        HEAP[$38]=$39; //@line 1305 "pyexpat.c"
        var $40=$self; //@line 1306 "pyexpat.c"
        var $41=$40+44; //@line 1306 "pyexpat.c"
        var $42=HEAP[$41]; //@line 1306 "pyexpat.c"
        var $43=($42)!=0; //@line 1306 "pyexpat.c"
        if ($43) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1306 "pyexpat.c"
      case 6: // $bb5
        var $44=$self; //@line 1306 "pyexpat.c"
        var $45=$44+44; //@line 1306 "pyexpat.c"
        var $46=HEAP[$45]; //@line 1306 "pyexpat.c"
        var $47=$46; //@line 1306 "pyexpat.c"
        var $48=HEAP[$47]; //@line 1306 "pyexpat.c"
        var $49=($48) + 1; //@line 1306 "pyexpat.c"
        var $50=$46; //@line 1306 "pyexpat.c"
        HEAP[$50]=$49; //@line 1306 "pyexpat.c"
        __label__ = 7; break; //@line 1306 "pyexpat.c"
      case 7: // $bb6
        var $51=$self; //@line 1308 "pyexpat.c"
        var $52=$51; //@line 1308 "pyexpat.c"
        _PyObject_GC_Track($52); //@line 1308 "pyexpat.c"
        var $53=$self; //@line 1312 "pyexpat.c"
        var $54=$53+8; //@line 1312 "pyexpat.c"
        var $55=HEAP[$54]; //@line 1312 "pyexpat.c"
        var $56=($55)==0; //@line 1312 "pyexpat.c"
        if ($56) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 1312 "pyexpat.c"
      case 8: // $bb7
        var $57=HEAP[_PyExc_RuntimeError]; //@line 1313 "pyexpat.c"
        _PyErr_SetString($57, __str63); //@line 1313 "pyexpat.c"
        var $58=$self; //@line 1315 "pyexpat.c"
        var $59=$58; //@line 1315 "pyexpat.c"
        var $60=$59; //@line 1315 "pyexpat.c"
        var $61=HEAP[$60]; //@line 1315 "pyexpat.c"
        var $62=($61) - 1; //@line 1315 "pyexpat.c"
        var $63=$59; //@line 1315 "pyexpat.c"
        HEAP[$63]=$62; //@line 1315 "pyexpat.c"
        var $64=$59; //@line 1315 "pyexpat.c"
        var $65=HEAP[$64]; //@line 1315 "pyexpat.c"
        var $66=($65)==0; //@line 1315 "pyexpat.c"
        if ($66) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1315 "pyexpat.c"
      case 9: // $bb8
        var $67=$self; //@line 1315 "pyexpat.c"
        var $68=$67; //@line 1315 "pyexpat.c"
        var $69=$68+4; //@line 1315 "pyexpat.c"
        var $70=HEAP[$69]; //@line 1315 "pyexpat.c"
        var $71=$70+24; //@line 1315 "pyexpat.c"
        var $72=HEAP[$71]; //@line 1315 "pyexpat.c"
        var $73=$self; //@line 1315 "pyexpat.c"
        var $74=$73; //@line 1315 "pyexpat.c"
        FUNCTION_TABLE[$72]($74); //@line 1315 "pyexpat.c"
        __label__ = 10; break; //@line 1315 "pyexpat.c"
      case 10: // $bb9
        $0=0; //@line 1316 "pyexpat.c"
        __label__ = 18; break; //@line 1316 "pyexpat.c"
      case 11: // $bb10
        var $75=$self; //@line 1318 "pyexpat.c"
        var $76=$75+8; //@line 1318 "pyexpat.c"
        var $77=HEAP[$76]; //@line 1318 "pyexpat.c"
        var $78=$self; //@line 1318 "pyexpat.c"
        var $79=$78; //@line 1318 "pyexpat.c"
        _PyExpat_XML_SetUserData($77, $79); //@line 1318 "pyexpat.c"
        var $80=$self; //@line 1320 "pyexpat.c"
        var $81=$80+8; //@line 1320 "pyexpat.c"
        var $82=HEAP[$81]; //@line 1320 "pyexpat.c"
        _PyExpat_XML_SetUnknownEncodingHandler($82, (FUNCTION_TABLE_OFFSET + 10), 0); //@line 1320 "pyexpat.c"
        $i=0; //@line 1324 "pyexpat.c"
        var $83=$i; //@line 1324 "pyexpat.c"
        var $84=_handler_info+$83*20; //@line 1324 "pyexpat.c"
        var $85=$84; //@line 1324 "pyexpat.c"
        var $86=HEAP[$85]; //@line 1324 "pyexpat.c"
        var $87=($86)!=0; //@line 1324 "pyexpat.c"
        var $88=$i; //@line 1324 "pyexpat.c"
        if ($87) { __lastLabel__ = 11; __label__ = 12; break; } else { __lastLabel__ = 11; __label__ = 13; break; } //@line 1324 "pyexpat.c"
      case 12: // $bb11
        var $89=__lastLabel__ == 12 ? $96 : ($88);
        var $90=($89) + 1; //@line 1324 "pyexpat.c"
        $i=$90; //@line 1324 "pyexpat.c"
        var $91=$i; //@line 1324 "pyexpat.c"
        var $92=_handler_info+$91*20; //@line 1324 "pyexpat.c"
        var $93=$92; //@line 1324 "pyexpat.c"
        var $94=HEAP[$93]; //@line 1324 "pyexpat.c"
        var $95=($94)!=0; //@line 1324 "pyexpat.c"
        var $96=$i; //@line 1324 "pyexpat.c"
        if ($95) { __lastLabel__ = 12; __label__ = 12; break; } else { __lastLabel__ = 12; __label__ = 13; break; } //@line 1324 "pyexpat.c"
      case 13: // $bb13
        var $_lcssa=__lastLabel__ == 11 ? $88 : ($96);
        var $97=($_lcssa) * 4; //@line 1327 "pyexpat.c"
        var $98=_malloc($97); //@line 1327 "pyexpat.c"
        var $99=$98; //@line 1327 "pyexpat.c"
        var $100=$self; //@line 1327 "pyexpat.c"
        var $101=$100+48; //@line 1327 "pyexpat.c"
        HEAP[$101]=$99; //@line 1327 "pyexpat.c"
        var $102=$self; //@line 1328 "pyexpat.c"
        var $103=$102+48; //@line 1328 "pyexpat.c"
        var $104=HEAP[$103]; //@line 1328 "pyexpat.c"
        var $105=($104)==0; //@line 1328 "pyexpat.c"
        var $106=$self; //@line 1329 "pyexpat.c"
        if ($105) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 1328 "pyexpat.c"
      case 14: // $bb14
        var $107=$106; //@line 1329 "pyexpat.c"
        var $108=$107; //@line 1329 "pyexpat.c"
        var $109=HEAP[$108]; //@line 1329 "pyexpat.c"
        var $110=($109) - 1; //@line 1329 "pyexpat.c"
        var $111=$107; //@line 1329 "pyexpat.c"
        HEAP[$111]=$110; //@line 1329 "pyexpat.c"
        var $112=$107; //@line 1329 "pyexpat.c"
        var $113=HEAP[$112]; //@line 1329 "pyexpat.c"
        var $114=($113)==0; //@line 1329 "pyexpat.c"
        if ($114) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1329 "pyexpat.c"
      case 15: // $bb15
        var $115=$self; //@line 1329 "pyexpat.c"
        var $116=$115; //@line 1329 "pyexpat.c"
        var $117=$116+4; //@line 1329 "pyexpat.c"
        var $118=HEAP[$117]; //@line 1329 "pyexpat.c"
        var $119=$118+24; //@line 1329 "pyexpat.c"
        var $120=HEAP[$119]; //@line 1329 "pyexpat.c"
        var $121=$self; //@line 1329 "pyexpat.c"
        var $122=$121; //@line 1329 "pyexpat.c"
        FUNCTION_TABLE[$120]($122); //@line 1329 "pyexpat.c"
        __label__ = 16; break; //@line 1329 "pyexpat.c"
      case 16: // $bb16
        var $123=_PyErr_NoMemory(); //@line 1330 "pyexpat.c"
        $0=$123; //@line 1330 "pyexpat.c"
        __label__ = 18; break; //@line 1330 "pyexpat.c"
      case 17: // $bb17
        _clear_handlers($106, 1); //@line 1332 "pyexpat.c"
        var $124=$self; //@line 1334 "pyexpat.c"
        var $125=$124; //@line 1334 "pyexpat.c"
        $0=$125; //@line 1334 "pyexpat.c"
        __label__ = 18; break; //@line 1334 "pyexpat.c"
      case 18: // $bb18
        var $126=$0; //@line 1283 "pyexpat.c"
        $retval=$126; //@line 1283 "pyexpat.c"
        var $retval19=$retval; //@line 1283 "pyexpat.c"
        ;
        return $retval19; //@line 1283 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_dealloc($self) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $i;
        var $temp;
        $self_addr=$self;
        var $0=$self_addr; //@line 1343 "pyexpat.c"
        var $1=$0; //@line 1343 "pyexpat.c"
        _PyObject_GC_UnTrack($1); //@line 1343 "pyexpat.c"
        var $2=$self_addr; //@line 1347 "pyexpat.c"
        var $3=$2+8; //@line 1347 "pyexpat.c"
        var $4=HEAP[$3]; //@line 1347 "pyexpat.c"
        var $5=($4)!=0; //@line 1347 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1347 "pyexpat.c"
      case 1: // $bb
        var $6=$self_addr; //@line 1348 "pyexpat.c"
        var $7=$6+8; //@line 1348 "pyexpat.c"
        var $8=HEAP[$7]; //@line 1348 "pyexpat.c"
        _PyExpat_XML_ParserFree($8); //@line 1348 "pyexpat.c"
        __label__ = 2; break; //@line 1348 "pyexpat.c"
      case 2: // $bb1
        var $9=$self_addr; //@line 1349 "pyexpat.c"
        var $10=$9+8; //@line 1349 "pyexpat.c"
        HEAP[$10]=0; //@line 1349 "pyexpat.c"
        var $11=$self_addr; //@line 1351 "pyexpat.c"
        var $12=$11+48; //@line 1351 "pyexpat.c"
        var $13=HEAP[$12]; //@line 1351 "pyexpat.c"
        var $14=($13)!=0; //@line 1351 "pyexpat.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 1351 "pyexpat.c"
      case 3: // $bb2
        $i=0; //@line 1353 "pyexpat.c"
        var $15=$i; //@line 1353 "pyexpat.c"
        var $16=_handler_info+$15*20; //@line 1353 "pyexpat.c"
        var $17=$16; //@line 1353 "pyexpat.c"
        var $18=HEAP[$17]; //@line 1353 "pyexpat.c"
        var $19=($18)!=0; //@line 1353 "pyexpat.c"
        var $20=$self_addr; //@line 1354 "pyexpat.c"
        var $21=$20+48; //@line 1354 "pyexpat.c"
        var $22=HEAP[$21]; //@line 1354 "pyexpat.c"
        if ($19) { __lastLabel__ = 3; __label__ = 4; break; } else { __lastLabel__ = 3; __label__ = 8; break; } //@line 1353 "pyexpat.c"
      case 4: // $bb3
        var $23=__lastLabel__ == 7 ? $59 : ($22);
        var $24=$i; //@line 1354 "pyexpat.c"
        var $25=$23+4*$24; //@line 1354 "pyexpat.c"
        var $26=HEAP[$25]; //@line 1354 "pyexpat.c"
        $temp=$26; //@line 1354 "pyexpat.c"
        var $27=$self_addr; //@line 1355 "pyexpat.c"
        var $28=$27+48; //@line 1355 "pyexpat.c"
        var $29=HEAP[$28]; //@line 1355 "pyexpat.c"
        var $30=$i; //@line 1355 "pyexpat.c"
        var $31=$29+4*$30; //@line 1355 "pyexpat.c"
        HEAP[$31]=0; //@line 1355 "pyexpat.c"
        var $32=$temp; //@line 1356 "pyexpat.c"
        var $33=($32)!=0; //@line 1356 "pyexpat.c"
        if ($33) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 1356 "pyexpat.c"
      case 5: // $bb4
        var $34=$temp; //@line 1356 "pyexpat.c"
        var $35=$34; //@line 1356 "pyexpat.c"
        var $36=HEAP[$35]; //@line 1356 "pyexpat.c"
        var $37=($36) - 1; //@line 1356 "pyexpat.c"
        var $38=$temp; //@line 1356 "pyexpat.c"
        var $39=$38; //@line 1356 "pyexpat.c"
        HEAP[$39]=$37; //@line 1356 "pyexpat.c"
        var $40=$temp; //@line 1356 "pyexpat.c"
        var $41=$40; //@line 1356 "pyexpat.c"
        var $42=HEAP[$41]; //@line 1356 "pyexpat.c"
        var $43=($42)==0; //@line 1356 "pyexpat.c"
        if ($43) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1356 "pyexpat.c"
      case 6: // $bb5
        var $44=$temp; //@line 1356 "pyexpat.c"
        var $45=$44+4; //@line 1356 "pyexpat.c"
        var $46=HEAP[$45]; //@line 1356 "pyexpat.c"
        var $47=$46+24; //@line 1356 "pyexpat.c"
        var $48=HEAP[$47]; //@line 1356 "pyexpat.c"
        var $49=$temp; //@line 1356 "pyexpat.c"
        FUNCTION_TABLE[$48]($49); //@line 1356 "pyexpat.c"
        __label__ = 7; break; //@line 1356 "pyexpat.c"
      case 7: // $bb6
        var $50=$i; //@line 1353 "pyexpat.c"
        var $51=($50) + 1; //@line 1353 "pyexpat.c"
        $i=$51; //@line 1353 "pyexpat.c"
        var $52=$i; //@line 1353 "pyexpat.c"
        var $53=_handler_info+$52*20; //@line 1353 "pyexpat.c"
        var $54=$53; //@line 1353 "pyexpat.c"
        var $55=HEAP[$54]; //@line 1353 "pyexpat.c"
        var $56=($55)!=0; //@line 1353 "pyexpat.c"
        var $57=$self_addr; //@line 1354 "pyexpat.c"
        var $58=$57+48; //@line 1354 "pyexpat.c"
        var $59=HEAP[$58]; //@line 1354 "pyexpat.c"
        if ($56) { __lastLabel__ = 7; __label__ = 4; break; } else { __lastLabel__ = 7; __label__ = 8; break; } //@line 1353 "pyexpat.c"
      case 8: // $bb8
        var $_lcssa=__lastLabel__ == 3 ? $22 : ($59);
        var $60=$_lcssa; //@line 1358 "pyexpat.c"
        _free($60); //@line 1358 "pyexpat.c"
        var $61=$self_addr; //@line 1359 "pyexpat.c"
        var $62=$61+48; //@line 1359 "pyexpat.c"
        HEAP[$62]=0; //@line 1359 "pyexpat.c"
        __label__ = 9; break; //@line 1359 "pyexpat.c"
      case 9: // $bb9
        var $63=$self_addr; //@line 1361 "pyexpat.c"
        var $64=$63+32; //@line 1361 "pyexpat.c"
        var $65=HEAP[$64]; //@line 1361 "pyexpat.c"
        var $66=($65)!=0; //@line 1361 "pyexpat.c"
        if ($66) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1361 "pyexpat.c"
      case 10: // $bb10
        var $67=$self_addr; //@line 1362 "pyexpat.c"
        var $68=$67+32; //@line 1362 "pyexpat.c"
        var $69=HEAP[$68]; //@line 1362 "pyexpat.c"
        _free($69); //@line 1362 "pyexpat.c"
        var $70=$self_addr; //@line 1363 "pyexpat.c"
        var $71=$70+32; //@line 1363 "pyexpat.c"
        HEAP[$71]=0; //@line 1363 "pyexpat.c"
        __label__ = 11; break; //@line 1363 "pyexpat.c"
      case 11: // $bb11
        var $72=$self_addr; //@line 1365 "pyexpat.c"
        var $73=$72+44; //@line 1365 "pyexpat.c"
        var $74=HEAP[$73]; //@line 1365 "pyexpat.c"
        var $75=($74)!=0; //@line 1365 "pyexpat.c"
        if ($75) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 1365 "pyexpat.c"
      case 12: // $bb12
        var $76=$self_addr; //@line 1365 "pyexpat.c"
        var $77=$76+44; //@line 1365 "pyexpat.c"
        var $78=HEAP[$77]; //@line 1365 "pyexpat.c"
        var $79=$78; //@line 1365 "pyexpat.c"
        var $80=HEAP[$79]; //@line 1365 "pyexpat.c"
        var $81=($80) - 1; //@line 1365 "pyexpat.c"
        var $82=$78; //@line 1365 "pyexpat.c"
        HEAP[$82]=$81; //@line 1365 "pyexpat.c"
        var $83=$78; //@line 1365 "pyexpat.c"
        var $84=HEAP[$83]; //@line 1365 "pyexpat.c"
        var $85=($84)==0; //@line 1365 "pyexpat.c"
        if ($85) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1365 "pyexpat.c"
      case 13: // $bb13
        var $86=$self_addr; //@line 1365 "pyexpat.c"
        var $87=$86+44; //@line 1365 "pyexpat.c"
        var $88=HEAP[$87]; //@line 1365 "pyexpat.c"
        var $89=$88+4; //@line 1365 "pyexpat.c"
        var $90=HEAP[$89]; //@line 1365 "pyexpat.c"
        var $91=$90+24; //@line 1365 "pyexpat.c"
        var $92=HEAP[$91]; //@line 1365 "pyexpat.c"
        var $93=$self_addr; //@line 1365 "pyexpat.c"
        var $94=$93+44; //@line 1365 "pyexpat.c"
        var $95=HEAP[$94]; //@line 1365 "pyexpat.c"
        FUNCTION_TABLE[$92]($95); //@line 1365 "pyexpat.c"
        __label__ = 14; break; //@line 1365 "pyexpat.c"
      case 14: // $bb14
        var $96=$self_addr; //@line 1371 "pyexpat.c"
        var $97=$96; //@line 1371 "pyexpat.c"
        _PyObject_GC_Del($97); //@line 1371 "pyexpat.c"
        ;
        return; //@line 1373 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _handlername2int($name) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $name_addr;
        var $retval;
        var $0;
        var $i;
        $name_addr=$name;
        $i=0; //@line 1379 "pyexpat.c"
        __label__ = 4; break; //@line 1379 "pyexpat.c"
      case 1: // $bb
        var $1=$i; //@line 1380 "pyexpat.c"
        var $2=_handler_info+$1*20; //@line 1380 "pyexpat.c"
        var $3=$2; //@line 1380 "pyexpat.c"
        var $4=HEAP[$3]; //@line 1380 "pyexpat.c"
        var $5=$name_addr; //@line 1380 "pyexpat.c"
        var $6=_strcmp($5, $4); //@line 1380 "pyexpat.c"
        var $7=($6)==0; //@line 1380 "pyexpat.c"
        var $8=$i; //@line 1381 "pyexpat.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1380 "pyexpat.c"
      case 2: // $bb1
        $0=$8; //@line 1381 "pyexpat.c"
        __label__ = 6; break; //@line 1381 "pyexpat.c"
      case 3: // $bb2
        var $9=($8) + 1; //@line 1379 "pyexpat.c"
        $i=$9; //@line 1379 "pyexpat.c"
        __label__ = 4; break; //@line 1379 "pyexpat.c"
      case 4: // $bb3
        var $10=$i; //@line 1379 "pyexpat.c"
        var $11=_handler_info+$10*20; //@line 1379 "pyexpat.c"
        var $12=$11; //@line 1379 "pyexpat.c"
        var $13=HEAP[$12]; //@line 1379 "pyexpat.c"
        var $14=($13)!=0; //@line 1379 "pyexpat.c"
        if ($14) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1379 "pyexpat.c"
      case 5: // $bb4
        $0=-1; //@line 1384 "pyexpat.c"
        __label__ = 6; break; //@line 1384 "pyexpat.c"
      case 6: // $bb5
        var $15=$0; //@line 1381 "pyexpat.c"
        $retval=$15; //@line 1381 "pyexpat.c"
        var $retval6=$retval; //@line 1381 "pyexpat.c"
        ;
        return $retval6; //@line 1381 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_pybool($istrue) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $istrue_addr;
        var $retval;
        var $0;
        var $iftmp_110;
        var $result;
        $istrue_addr=$istrue;
        var $1=$istrue_addr; //@line 1390 "pyexpat.c"
        var $2=($1)!=0; //@line 1390 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1390 "pyexpat.c"
      case 1: // $bb
        $iftmp_110=__Py_TrueStruct; //@line 1390 "pyexpat.c"
        __label__ = 3; break; //@line 1390 "pyexpat.c"
      case 2: // $bb1
        $iftmp_110=__Py_ZeroStruct; //@line 1390 "pyexpat.c"
        __label__ = 3; break; //@line 1390 "pyexpat.c"
      case 3: // $bb2
        var $3=$iftmp_110; //@line 1390 "pyexpat.c"
        $result=$3; //@line 1390 "pyexpat.c"
        var $4=$result; //@line 1391 "pyexpat.c"
        var $5=$4; //@line 1391 "pyexpat.c"
        var $6=HEAP[$5]; //@line 1391 "pyexpat.c"
        var $7=($6) + 1; //@line 1391 "pyexpat.c"
        var $8=$result; //@line 1391 "pyexpat.c"
        var $9=$8; //@line 1391 "pyexpat.c"
        HEAP[$9]=$7; //@line 1391 "pyexpat.c"
        var $10=$result; //@line 1392 "pyexpat.c"
        $0=$10; //@line 1392 "pyexpat.c"
        var $11=$0; //@line 1392 "pyexpat.c"
        $retval=$11; //@line 1392 "pyexpat.c"
        var $retval3=$retval; //@line 1392 "pyexpat.c"
        ;
        return $retval3; //@line 1392 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_getattr($self, $name) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $name_addr;
        var $retval;
        var $0;
        var $handlernum;
        var $result;
        var $i;
        var $rc;
        var $o;
        var $o50;
        var $o56;
        var $o62;
        var $o68;
        var $o74;
        var $o80;
        var $o86;
        var $o92;
        var $o98;
        var $o104;
        var $o110;
        var $o116;
        var $o122;
        var $o128;
        var $o134;
        $self_addr=$self;
        $name_addr=$name;
        var $1=$name_addr; //@line 1398 "pyexpat.c"
        var $2=_handlername2int($1); //@line 1398 "pyexpat.c"
        $handlernum=$2; //@line 1398 "pyexpat.c"
        var $3=$handlernum; //@line 1400 "pyexpat.c"
        var $4=($3)!=-1; //@line 1400 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1400 "pyexpat.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1401 "pyexpat.c"
        var $6=$5+48; //@line 1401 "pyexpat.c"
        var $7=HEAP[$6]; //@line 1401 "pyexpat.c"
        var $8=$handlernum; //@line 1401 "pyexpat.c"
        var $9=$7+4*$8; //@line 1401 "pyexpat.c"
        var $10=HEAP[$9]; //@line 1401 "pyexpat.c"
        $result=$10; //@line 1401 "pyexpat.c"
        var $11=$result; //@line 1402 "pyexpat.c"
        var $12=($11)==0; //@line 1402 "pyexpat.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1402 "pyexpat.c"
      case 2: // $bb1
        $result=__Py_NoneStruct; //@line 1403 "pyexpat.c"
        __label__ = 3; break; //@line 1403 "pyexpat.c"
      case 3: // $bb2
        var $13=$result; //@line 1404 "pyexpat.c"
        var $14=$13; //@line 1404 "pyexpat.c"
        var $15=HEAP[$14]; //@line 1404 "pyexpat.c"
        var $16=($15) + 1; //@line 1404 "pyexpat.c"
        var $17=$result; //@line 1404 "pyexpat.c"
        var $18=$17; //@line 1404 "pyexpat.c"
        HEAP[$18]=$16; //@line 1404 "pyexpat.c"
        var $19=$result; //@line 1405 "pyexpat.c"
        $0=$19; //@line 1405 "pyexpat.c"
        __label__ = 110; break; //@line 1405 "pyexpat.c"
      case 4: // $bb3
        var $20=$name_addr; //@line 1407 "pyexpat.c"
        var $21=$20; //@line 1407 "pyexpat.c"
        var $22=HEAP[$21]; //@line 1407 "pyexpat.c"
        var $23=($22)==69; //@line 1407 "pyexpat.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 13; break; } //@line 1407 "pyexpat.c"
      case 5: // $bb4
        var $24=$name_addr; //@line 1408 "pyexpat.c"
        var $25=_strcmp($24, __str64); //@line 1408 "pyexpat.c"
        var $26=($25)==0; //@line 1408 "pyexpat.c"
        if ($26) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1408 "pyexpat.c"
      case 6: // $bb5
        var $27=$self_addr; //@line 1409 "pyexpat.c"
        var $28=$27+8; //@line 1409 "pyexpat.c"
        var $29=HEAP[$28]; //@line 1409 "pyexpat.c"
        var $30=_PyExpat_XML_GetErrorCode($29); //@line 1409 "pyexpat.c"
        var $31=_PyInt_FromLong($30); //@line 1409 "pyexpat.c"
        $0=$31; //@line 1409 "pyexpat.c"
        __label__ = 110; break; //@line 1409 "pyexpat.c"
      case 7: // $bb6
        var $32=$name_addr; //@line 1411 "pyexpat.c"
        var $33=_strcmp($32, __str65); //@line 1411 "pyexpat.c"
        var $34=($33)==0; //@line 1411 "pyexpat.c"
        if ($34) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1411 "pyexpat.c"
      case 8: // $bb7
        var $35=$self_addr; //@line 1412 "pyexpat.c"
        var $36=$35+8; //@line 1412 "pyexpat.c"
        var $37=HEAP[$36]; //@line 1412 "pyexpat.c"
        var $38=_PyExpat_XML_GetCurrentLineNumber($37); //@line 1412 "pyexpat.c"
        var $39=_PyInt_FromLong($38); //@line 1412 "pyexpat.c"
        $0=$39; //@line 1412 "pyexpat.c"
        __label__ = 110; break; //@line 1412 "pyexpat.c"
      case 9: // $bb8
        var $40=$name_addr; //@line 1414 "pyexpat.c"
        var $41=_strcmp($40, __str66); //@line 1414 "pyexpat.c"
        var $42=($41)==0; //@line 1414 "pyexpat.c"
        if ($42) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1414 "pyexpat.c"
      case 10: // $bb9
        var $43=$self_addr; //@line 1415 "pyexpat.c"
        var $44=$43+8; //@line 1415 "pyexpat.c"
        var $45=HEAP[$44]; //@line 1415 "pyexpat.c"
        var $46=_PyExpat_XML_GetCurrentColumnNumber($45); //@line 1415 "pyexpat.c"
        var $47=_PyInt_FromLong($46); //@line 1415 "pyexpat.c"
        $0=$47; //@line 1415 "pyexpat.c"
        __label__ = 110; break; //@line 1415 "pyexpat.c"
      case 11: // $bb10
        var $48=$name_addr; //@line 1417 "pyexpat.c"
        var $49=_strcmp($48, __str67); //@line 1417 "pyexpat.c"
        var $50=($49)==0; //@line 1417 "pyexpat.c"
        if ($50) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1417 "pyexpat.c"
      case 12: // $bb11
        var $51=$self_addr; //@line 1418 "pyexpat.c"
        var $52=$51+8; //@line 1418 "pyexpat.c"
        var $53=HEAP[$52]; //@line 1418 "pyexpat.c"
        var $54=_PyExpat_XML_GetCurrentByteIndex($53); //@line 1418 "pyexpat.c"
        var $55=_PyInt_FromLong($54); //@line 1418 "pyexpat.c"
        $0=$55; //@line 1418 "pyexpat.c"
        __label__ = 110; break; //@line 1418 "pyexpat.c"
      case 13: // $bb12
        var $56=$name_addr; //@line 1421 "pyexpat.c"
        var $57=$56; //@line 1421 "pyexpat.c"
        var $58=HEAP[$57]; //@line 1421 "pyexpat.c"
        var $59=($58)==67; //@line 1421 "pyexpat.c"
        if ($59) { __label__ = 14; break; } else { __label__ = 20; break; } //@line 1421 "pyexpat.c"
      case 14: // $bb13
        var $60=$name_addr; //@line 1422 "pyexpat.c"
        var $61=_strcmp($60, __str68); //@line 1422 "pyexpat.c"
        var $62=($61)==0; //@line 1422 "pyexpat.c"
        if ($62) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1422 "pyexpat.c"
      case 15: // $bb14
        var $63=$self_addr; //@line 1423 "pyexpat.c"
        var $64=$63+8; //@line 1423 "pyexpat.c"
        var $65=HEAP[$64]; //@line 1423 "pyexpat.c"
        var $66=_PyExpat_XML_GetCurrentLineNumber($65); //@line 1423 "pyexpat.c"
        var $67=_PyInt_FromLong($66); //@line 1423 "pyexpat.c"
        $0=$67; //@line 1423 "pyexpat.c"
        __label__ = 110; break; //@line 1423 "pyexpat.c"
      case 16: // $bb15
        var $68=$name_addr; //@line 1425 "pyexpat.c"
        var $69=_strcmp($68, __str69); //@line 1425 "pyexpat.c"
        var $70=($69)==0; //@line 1425 "pyexpat.c"
        if ($70) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1425 "pyexpat.c"
      case 17: // $bb16
        var $71=$self_addr; //@line 1426 "pyexpat.c"
        var $72=$71+8; //@line 1426 "pyexpat.c"
        var $73=HEAP[$72]; //@line 1426 "pyexpat.c"
        var $74=_PyExpat_XML_GetCurrentColumnNumber($73); //@line 1426 "pyexpat.c"
        var $75=_PyInt_FromLong($74); //@line 1426 "pyexpat.c"
        $0=$75; //@line 1426 "pyexpat.c"
        __label__ = 110; break; //@line 1426 "pyexpat.c"
      case 18: // $bb17
        var $76=$name_addr; //@line 1428 "pyexpat.c"
        var $77=_strcmp($76, __str70); //@line 1428 "pyexpat.c"
        var $78=($77)==0; //@line 1428 "pyexpat.c"
        if ($78) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1428 "pyexpat.c"
      case 19: // $bb18
        var $79=$self_addr; //@line 1429 "pyexpat.c"
        var $80=$79+8; //@line 1429 "pyexpat.c"
        var $81=HEAP[$80]; //@line 1429 "pyexpat.c"
        var $82=_PyExpat_XML_GetCurrentByteIndex($81); //@line 1429 "pyexpat.c"
        var $83=_PyInt_FromLong($82); //@line 1429 "pyexpat.c"
        $0=$83; //@line 1429 "pyexpat.c"
        __label__ = 110; break; //@line 1429 "pyexpat.c"
      case 20: // $bb19
        var $84=$name_addr; //@line 1432 "pyexpat.c"
        var $85=$84; //@line 1432 "pyexpat.c"
        var $86=HEAP[$85]; //@line 1432 "pyexpat.c"
        var $87=($86)==98; //@line 1432 "pyexpat.c"
        if ($87) { __label__ = 21; break; } else { __label__ = 27; break; } //@line 1432 "pyexpat.c"
      case 21: // $bb20
        var $88=$name_addr; //@line 1433 "pyexpat.c"
        var $89=_strcmp($88, __str71); //@line 1433 "pyexpat.c"
        var $90=($89)==0; //@line 1433 "pyexpat.c"
        if ($90) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1433 "pyexpat.c"
      case 22: // $bb21
        var $91=$self_addr; //@line 1434 "pyexpat.c"
        var $92=$91+36; //@line 1434 "pyexpat.c"
        var $93=HEAP[$92]; //@line 1434 "pyexpat.c"
        var $94=_PyInt_FromLong($93); //@line 1434 "pyexpat.c"
        $0=$94; //@line 1434 "pyexpat.c"
        __label__ = 110; break; //@line 1434 "pyexpat.c"
      case 23: // $bb22
        var $95=$name_addr; //@line 1435 "pyexpat.c"
        var $96=_strcmp($95, __str72); //@line 1435 "pyexpat.c"
        var $97=($96)==0; //@line 1435 "pyexpat.c"
        if ($97) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1435 "pyexpat.c"
      case 24: // $bb23
        var $98=$self_addr; //@line 1436 "pyexpat.c"
        var $99=$98+32; //@line 1436 "pyexpat.c"
        var $100=HEAP[$99]; //@line 1436 "pyexpat.c"
        var $101=($100)!=0; //@line 1436 "pyexpat.c"
        var $102=($101); //@line 1436 "pyexpat.c"
        var $103=_get_pybool($102); //@line 1436 "pyexpat.c"
        $0=$103; //@line 1436 "pyexpat.c"
        __label__ = 110; break; //@line 1436 "pyexpat.c"
      case 25: // $bb24
        var $104=$name_addr; //@line 1437 "pyexpat.c"
        var $105=_strcmp($104, __str73); //@line 1437 "pyexpat.c"
        var $106=($105)==0; //@line 1437 "pyexpat.c"
        if ($106) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1437 "pyexpat.c"
      case 26: // $bb25
        var $107=$self_addr; //@line 1438 "pyexpat.c"
        var $108=$107+40; //@line 1438 "pyexpat.c"
        var $109=HEAP[$108]; //@line 1438 "pyexpat.c"
        var $110=_PyInt_FromLong($109); //@line 1438 "pyexpat.c"
        $0=$110; //@line 1438 "pyexpat.c"
        __label__ = 110; break; //@line 1438 "pyexpat.c"
      case 27: // $bb26
        var $111=$name_addr; //@line 1440 "pyexpat.c"
        var $112=_strcmp($111, __str74); //@line 1440 "pyexpat.c"
        var $113=($112)==0; //@line 1440 "pyexpat.c"
        if ($113) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1440 "pyexpat.c"
      case 28: // $bb27
        var $114=$self_addr; //@line 1441 "pyexpat.c"
        var $115=$114+28; //@line 1441 "pyexpat.c"
        var $116=HEAP[$115]; //@line 1441 "pyexpat.c"
        var $117=_get_pybool($116); //@line 1441 "pyexpat.c"
        $0=$117; //@line 1441 "pyexpat.c"
        __label__ = 110; break; //@line 1441 "pyexpat.c"
      case 29: // $bb28
        var $118=$name_addr; //@line 1442 "pyexpat.c"
        var $119=_strcmp($118, __str75); //@line 1442 "pyexpat.c"
        var $120=($119)==0; //@line 1442 "pyexpat.c"
        if ($120) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1442 "pyexpat.c"
      case 30: // $bb29
        var $121=$self_addr; //@line 1443 "pyexpat.c"
        var $122=$121+16; //@line 1443 "pyexpat.c"
        var $123=HEAP[$122]; //@line 1443 "pyexpat.c"
        var $124=_get_pybool($123); //@line 1443 "pyexpat.c"
        $0=$124; //@line 1443 "pyexpat.c"
        __label__ = 110; break; //@line 1443 "pyexpat.c"
      case 31: // $bb30
        var $125=$name_addr; //@line 1444 "pyexpat.c"
        var $126=_strcmp($125, __str76); //@line 1444 "pyexpat.c"
        var $127=($126)==0; //@line 1444 "pyexpat.c"
        if ($127) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1444 "pyexpat.c"
      case 32: // $bb31
        var $128=$self_addr; //@line 1445 "pyexpat.c"
        var $129=$128+12; //@line 1445 "pyexpat.c"
        var $130=HEAP[$129]; //@line 1445 "pyexpat.c"
        var $131=_get_pybool($130); //@line 1445 "pyexpat.c"
        $0=$131; //@line 1445 "pyexpat.c"
        __label__ = 110; break; //@line 1445 "pyexpat.c"
      case 33: // $bb32
        var $132=$name_addr; //@line 1446 "pyexpat.c"
        var $133=_strcmp($132, __str77); //@line 1446 "pyexpat.c"
        var $134=($133)==0; //@line 1446 "pyexpat.c"
        if ($134) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1446 "pyexpat.c"
      case 34: // $bb33
        var $135=$self_addr; //@line 1447 "pyexpat.c"
        var $136=$135+20; //@line 1447 "pyexpat.c"
        var $137=HEAP[$136]; //@line 1447 "pyexpat.c"
        var $138=_get_pybool($137); //@line 1447 "pyexpat.c"
        $0=$138; //@line 1447 "pyexpat.c"
        __label__ = 110; break; //@line 1447 "pyexpat.c"
      case 35: // $bb34
        var $139=$name_addr; //@line 1448 "pyexpat.c"
        var $140=_strcmp($139, __str78); //@line 1448 "pyexpat.c"
        var $141=($140)==0; //@line 1448 "pyexpat.c"
        if ($141) { __label__ = 36; break; } else { __label__ = 39; break; } //@line 1448 "pyexpat.c"
      case 36: // $bb35
        var $142=$self_addr; //@line 1449 "pyexpat.c"
        var $143=$142+44; //@line 1449 "pyexpat.c"
        var $144=HEAP[$143]; //@line 1449 "pyexpat.c"
        var $145=($144)==0; //@line 1449 "pyexpat.c"
        if ($145) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 1449 "pyexpat.c"
      case 37: // $bb36
        var $146=HEAP[__Py_NoneStruct]; //@line 1450 "pyexpat.c"
        var $147=($146) + 1; //@line 1450 "pyexpat.c"
        HEAP[__Py_NoneStruct]=$147; //@line 1450 "pyexpat.c"
        $0=__Py_NoneStruct; //@line 1451 "pyexpat.c"
        __label__ = 110; break; //@line 1451 "pyexpat.c"
      case 38: // $bb37
        var $148=$self_addr; //@line 1454 "pyexpat.c"
        var $149=$148+44; //@line 1454 "pyexpat.c"
        var $150=HEAP[$149]; //@line 1454 "pyexpat.c"
        var $151=$150; //@line 1454 "pyexpat.c"
        var $152=HEAP[$151]; //@line 1454 "pyexpat.c"
        var $153=($152) + 1; //@line 1454 "pyexpat.c"
        var $154=$150; //@line 1454 "pyexpat.c"
        HEAP[$154]=$153; //@line 1454 "pyexpat.c"
        var $155=$self_addr; //@line 1455 "pyexpat.c"
        var $156=$155+44; //@line 1455 "pyexpat.c"
        var $157=HEAP[$156]; //@line 1455 "pyexpat.c"
        $0=$157; //@line 1455 "pyexpat.c"
        __label__ = 110; break; //@line 1455 "pyexpat.c"
      case 39: // $bb38
        var $158=$name_addr; //@line 1467 "pyexpat.c"
        var $159=_strcmp($158, __str79); //@line 1467 "pyexpat.c"
        var $160=($159)==0; //@line 1467 "pyexpat.c"
        if ($160) { __label__ = 40; break; } else { __label__ = 109; break; } //@line 1467 "pyexpat.c"
      case 40: // $bb39
        var $161=_PyList_New(0); //@line 1469 "pyexpat.c"
        $rc=$161; //@line 1469 "pyexpat.c"
        var $162=$rc; //@line 1470 "pyexpat.c"
        var $163=($162)==0; //@line 1470 "pyexpat.c"
        if ($163) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1470 "pyexpat.c"
      case 41: // $bb40
        $0=0; //@line 1471 "pyexpat.c"
        __label__ = 110; break; //@line 1471 "pyexpat.c"
      case 42: // $bb41
        $i=0; //@line 1472 "pyexpat.c"
        var $164=$i; //@line 1472 "pyexpat.c"
        var $165=_handler_info+$164*20; //@line 1472 "pyexpat.c"
        var $166=$165; //@line 1472 "pyexpat.c"
        var $167=HEAP[$166]; //@line 1472 "pyexpat.c"
        var $168=($167)!=0; //@line 1472 "pyexpat.c"
        if ($168) { __label__ = 43; break; } else { __label__ = 48; break; } //@line 1472 "pyexpat.c"
      case 43: // $bb42
        var $169=$i; //@line 1473 "pyexpat.c"
        var $170=_handler_info+$169*20; //@line 1473 "pyexpat.c"
        var $171=_get_handler_name($170); //@line 1473 "pyexpat.c"
        $o=$171; //@line 1473 "pyexpat.c"
        var $172=($171)!=0; //@line 1474 "pyexpat.c"
        if ($172) { __label__ = 44; break; } else { __label__ = 47; break; } //@line 1474 "pyexpat.c"
      case 44: // $bb44
        var $173=$rc; //@line 1475 "pyexpat.c"
        var $174=$o; //@line 1475 "pyexpat.c"
        var $175=_PyList_Append($173, $174); //@line 1475 "pyexpat.c"
        var $_pr=$o;
        var $176=($_pr)!=0; //@line 1476 "pyexpat.c"
        if ($176) { __label__ = 45; break; } else { __label__ = 47; break; } //@line 1476 "pyexpat.c"
      case 45: // $bb45
        var $177=$o; //@line 1476 "pyexpat.c"
        var $178=$177; //@line 1476 "pyexpat.c"
        var $179=HEAP[$178]; //@line 1476 "pyexpat.c"
        var $180=($179) - 1; //@line 1476 "pyexpat.c"
        var $181=$o; //@line 1476 "pyexpat.c"
        var $182=$181; //@line 1476 "pyexpat.c"
        HEAP[$182]=$180; //@line 1476 "pyexpat.c"
        var $183=$o; //@line 1476 "pyexpat.c"
        var $184=$183; //@line 1476 "pyexpat.c"
        var $185=HEAP[$184]; //@line 1476 "pyexpat.c"
        var $186=($185)==0; //@line 1476 "pyexpat.c"
        if ($186) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 1476 "pyexpat.c"
      case 46: // $bb46
        var $187=$o; //@line 1476 "pyexpat.c"
        var $188=$187+4; //@line 1476 "pyexpat.c"
        var $189=HEAP[$188]; //@line 1476 "pyexpat.c"
        var $190=$189+24; //@line 1476 "pyexpat.c"
        var $191=HEAP[$190]; //@line 1476 "pyexpat.c"
        var $192=$o; //@line 1476 "pyexpat.c"
        FUNCTION_TABLE[$191]($192); //@line 1476 "pyexpat.c"
        __label__ = 47; break; //@line 1476 "pyexpat.c"
      case 47: // $bb47
        var $193=$i; //@line 1472 "pyexpat.c"
        var $194=($193) + 1; //@line 1472 "pyexpat.c"
        $i=$194; //@line 1472 "pyexpat.c"
        var $195=$i; //@line 1472 "pyexpat.c"
        var $196=_handler_info+$195*20; //@line 1472 "pyexpat.c"
        var $197=$196; //@line 1472 "pyexpat.c"
        var $198=HEAP[$197]; //@line 1472 "pyexpat.c"
        var $199=($198)!=0; //@line 1472 "pyexpat.c"
        if ($199) { __label__ = 43; break; } else { __label__ = 48; break; } //@line 1472 "pyexpat.c"
      case 48: // $bb49
        var $200=_PyString_FromString(__str64); //@line 1478 "pyexpat.c"
        $o50=$200; //@line 1478 "pyexpat.c"
        var $201=($200)!=0; //@line 1478 "pyexpat.c"
        if ($201) { __label__ = 49; break; } else { __label__ = 52; break; } //@line 1478 "pyexpat.c"
      case 49: // $bb52
        var $202=$rc; //@line 1478 "pyexpat.c"
        var $203=$o50; //@line 1478 "pyexpat.c"
        var $204=_PyList_Append($202, $203); //@line 1478 "pyexpat.c"
        var $_pr1=$o50;
        var $205=($_pr1)!=0; //@line 1478 "pyexpat.c"
        if ($205) { __label__ = 50; break; } else { __label__ = 52; break; } //@line 1478 "pyexpat.c"
      case 50: // $bb53
        var $206=$o50; //@line 1478 "pyexpat.c"
        var $207=$206; //@line 1478 "pyexpat.c"
        var $208=HEAP[$207]; //@line 1478 "pyexpat.c"
        var $209=($208) - 1; //@line 1478 "pyexpat.c"
        var $210=$o50; //@line 1478 "pyexpat.c"
        var $211=$210; //@line 1478 "pyexpat.c"
        HEAP[$211]=$209; //@line 1478 "pyexpat.c"
        var $212=$o50; //@line 1478 "pyexpat.c"
        var $213=$212; //@line 1478 "pyexpat.c"
        var $214=HEAP[$213]; //@line 1478 "pyexpat.c"
        var $215=($214)==0; //@line 1478 "pyexpat.c"
        if ($215) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 1478 "pyexpat.c"
      case 51: // $bb54
        var $216=$o50; //@line 1478 "pyexpat.c"
        var $217=$216+4; //@line 1478 "pyexpat.c"
        var $218=HEAP[$217]; //@line 1478 "pyexpat.c"
        var $219=$218+24; //@line 1478 "pyexpat.c"
        var $220=HEAP[$219]; //@line 1478 "pyexpat.c"
        var $221=$o50; //@line 1478 "pyexpat.c"
        FUNCTION_TABLE[$220]($221); //@line 1478 "pyexpat.c"
        __label__ = 52; break; //@line 1478 "pyexpat.c"
      case 52: // $bb55
        var $222=_PyString_FromString(__str65); //@line 1479 "pyexpat.c"
        $o56=$222; //@line 1479 "pyexpat.c"
        var $223=($222)!=0; //@line 1479 "pyexpat.c"
        if ($223) { __label__ = 53; break; } else { __label__ = 56; break; } //@line 1479 "pyexpat.c"
      case 53: // $bb58
        var $224=$rc; //@line 1479 "pyexpat.c"
        var $225=$o56; //@line 1479 "pyexpat.c"
        var $226=_PyList_Append($224, $225); //@line 1479 "pyexpat.c"
        var $_pr2=$o56;
        var $227=($_pr2)!=0; //@line 1479 "pyexpat.c"
        if ($227) { __label__ = 54; break; } else { __label__ = 56; break; } //@line 1479 "pyexpat.c"
      case 54: // $bb59
        var $228=$o56; //@line 1479 "pyexpat.c"
        var $229=$228; //@line 1479 "pyexpat.c"
        var $230=HEAP[$229]; //@line 1479 "pyexpat.c"
        var $231=($230) - 1; //@line 1479 "pyexpat.c"
        var $232=$o56; //@line 1479 "pyexpat.c"
        var $233=$232; //@line 1479 "pyexpat.c"
        HEAP[$233]=$231; //@line 1479 "pyexpat.c"
        var $234=$o56; //@line 1479 "pyexpat.c"
        var $235=$234; //@line 1479 "pyexpat.c"
        var $236=HEAP[$235]; //@line 1479 "pyexpat.c"
        var $237=($236)==0; //@line 1479 "pyexpat.c"
        if ($237) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 1479 "pyexpat.c"
      case 55: // $bb60
        var $238=$o56; //@line 1479 "pyexpat.c"
        var $239=$238+4; //@line 1479 "pyexpat.c"
        var $240=HEAP[$239]; //@line 1479 "pyexpat.c"
        var $241=$240+24; //@line 1479 "pyexpat.c"
        var $242=HEAP[$241]; //@line 1479 "pyexpat.c"
        var $243=$o56; //@line 1479 "pyexpat.c"
        FUNCTION_TABLE[$242]($243); //@line 1479 "pyexpat.c"
        __label__ = 56; break; //@line 1479 "pyexpat.c"
      case 56: // $bb61
        var $244=_PyString_FromString(__str66); //@line 1480 "pyexpat.c"
        $o62=$244; //@line 1480 "pyexpat.c"
        var $245=($244)!=0; //@line 1480 "pyexpat.c"
        if ($245) { __label__ = 57; break; } else { __label__ = 60; break; } //@line 1480 "pyexpat.c"
      case 57: // $bb64
        var $246=$rc; //@line 1480 "pyexpat.c"
        var $247=$o62; //@line 1480 "pyexpat.c"
        var $248=_PyList_Append($246, $247); //@line 1480 "pyexpat.c"
        var $_pr3=$o62;
        var $249=($_pr3)!=0; //@line 1480 "pyexpat.c"
        if ($249) { __label__ = 58; break; } else { __label__ = 60; break; } //@line 1480 "pyexpat.c"
      case 58: // $bb65
        var $250=$o62; //@line 1480 "pyexpat.c"
        var $251=$250; //@line 1480 "pyexpat.c"
        var $252=HEAP[$251]; //@line 1480 "pyexpat.c"
        var $253=($252) - 1; //@line 1480 "pyexpat.c"
        var $254=$o62; //@line 1480 "pyexpat.c"
        var $255=$254; //@line 1480 "pyexpat.c"
        HEAP[$255]=$253; //@line 1480 "pyexpat.c"
        var $256=$o62; //@line 1480 "pyexpat.c"
        var $257=$256; //@line 1480 "pyexpat.c"
        var $258=HEAP[$257]; //@line 1480 "pyexpat.c"
        var $259=($258)==0; //@line 1480 "pyexpat.c"
        if ($259) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 1480 "pyexpat.c"
      case 59: // $bb66
        var $260=$o62; //@line 1480 "pyexpat.c"
        var $261=$260+4; //@line 1480 "pyexpat.c"
        var $262=HEAP[$261]; //@line 1480 "pyexpat.c"
        var $263=$262+24; //@line 1480 "pyexpat.c"
        var $264=HEAP[$263]; //@line 1480 "pyexpat.c"
        var $265=$o62; //@line 1480 "pyexpat.c"
        FUNCTION_TABLE[$264]($265); //@line 1480 "pyexpat.c"
        __label__ = 60; break; //@line 1480 "pyexpat.c"
      case 60: // $bb67
        var $266=_PyString_FromString(__str67); //@line 1481 "pyexpat.c"
        $o68=$266; //@line 1481 "pyexpat.c"
        var $267=($266)!=0; //@line 1481 "pyexpat.c"
        if ($267) { __label__ = 61; break; } else { __label__ = 64; break; } //@line 1481 "pyexpat.c"
      case 61: // $bb70
        var $268=$rc; //@line 1481 "pyexpat.c"
        var $269=$o68; //@line 1481 "pyexpat.c"
        var $270=_PyList_Append($268, $269); //@line 1481 "pyexpat.c"
        var $_pr4=$o68;
        var $271=($_pr4)!=0; //@line 1481 "pyexpat.c"
        if ($271) { __label__ = 62; break; } else { __label__ = 64; break; } //@line 1481 "pyexpat.c"
      case 62: // $bb71
        var $272=$o68; //@line 1481 "pyexpat.c"
        var $273=$272; //@line 1481 "pyexpat.c"
        var $274=HEAP[$273]; //@line 1481 "pyexpat.c"
        var $275=($274) - 1; //@line 1481 "pyexpat.c"
        var $276=$o68; //@line 1481 "pyexpat.c"
        var $277=$276; //@line 1481 "pyexpat.c"
        HEAP[$277]=$275; //@line 1481 "pyexpat.c"
        var $278=$o68; //@line 1481 "pyexpat.c"
        var $279=$278; //@line 1481 "pyexpat.c"
        var $280=HEAP[$279]; //@line 1481 "pyexpat.c"
        var $281=($280)==0; //@line 1481 "pyexpat.c"
        if ($281) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 1481 "pyexpat.c"
      case 63: // $bb72
        var $282=$o68; //@line 1481 "pyexpat.c"
        var $283=$282+4; //@line 1481 "pyexpat.c"
        var $284=HEAP[$283]; //@line 1481 "pyexpat.c"
        var $285=$284+24; //@line 1481 "pyexpat.c"
        var $286=HEAP[$285]; //@line 1481 "pyexpat.c"
        var $287=$o68; //@line 1481 "pyexpat.c"
        FUNCTION_TABLE[$286]($287); //@line 1481 "pyexpat.c"
        __label__ = 64; break; //@line 1481 "pyexpat.c"
      case 64: // $bb73
        var $288=_PyString_FromString(__str68); //@line 1482 "pyexpat.c"
        $o74=$288; //@line 1482 "pyexpat.c"
        var $289=($288)!=0; //@line 1482 "pyexpat.c"
        if ($289) { __label__ = 65; break; } else { __label__ = 68; break; } //@line 1482 "pyexpat.c"
      case 65: // $bb76
        var $290=$rc; //@line 1482 "pyexpat.c"
        var $291=$o74; //@line 1482 "pyexpat.c"
        var $292=_PyList_Append($290, $291); //@line 1482 "pyexpat.c"
        var $_pr5=$o74;
        var $293=($_pr5)!=0; //@line 1482 "pyexpat.c"
        if ($293) { __label__ = 66; break; } else { __label__ = 68; break; } //@line 1482 "pyexpat.c"
      case 66: // $bb77
        var $294=$o74; //@line 1482 "pyexpat.c"
        var $295=$294; //@line 1482 "pyexpat.c"
        var $296=HEAP[$295]; //@line 1482 "pyexpat.c"
        var $297=($296) - 1; //@line 1482 "pyexpat.c"
        var $298=$o74; //@line 1482 "pyexpat.c"
        var $299=$298; //@line 1482 "pyexpat.c"
        HEAP[$299]=$297; //@line 1482 "pyexpat.c"
        var $300=$o74; //@line 1482 "pyexpat.c"
        var $301=$300; //@line 1482 "pyexpat.c"
        var $302=HEAP[$301]; //@line 1482 "pyexpat.c"
        var $303=($302)==0; //@line 1482 "pyexpat.c"
        if ($303) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 1482 "pyexpat.c"
      case 67: // $bb78
        var $304=$o74; //@line 1482 "pyexpat.c"
        var $305=$304+4; //@line 1482 "pyexpat.c"
        var $306=HEAP[$305]; //@line 1482 "pyexpat.c"
        var $307=$306+24; //@line 1482 "pyexpat.c"
        var $308=HEAP[$307]; //@line 1482 "pyexpat.c"
        var $309=$o74; //@line 1482 "pyexpat.c"
        FUNCTION_TABLE[$308]($309); //@line 1482 "pyexpat.c"
        __label__ = 68; break; //@line 1482 "pyexpat.c"
      case 68: // $bb79
        var $310=_PyString_FromString(__str69); //@line 1483 "pyexpat.c"
        $o80=$310; //@line 1483 "pyexpat.c"
        var $311=($310)!=0; //@line 1483 "pyexpat.c"
        if ($311) { __label__ = 69; break; } else { __label__ = 72; break; } //@line 1483 "pyexpat.c"
      case 69: // $bb82
        var $312=$rc; //@line 1483 "pyexpat.c"
        var $313=$o80; //@line 1483 "pyexpat.c"
        var $314=_PyList_Append($312, $313); //@line 1483 "pyexpat.c"
        var $_pr6=$o80;
        var $315=($_pr6)!=0; //@line 1483 "pyexpat.c"
        if ($315) { __label__ = 70; break; } else { __label__ = 72; break; } //@line 1483 "pyexpat.c"
      case 70: // $bb83
        var $316=$o80; //@line 1483 "pyexpat.c"
        var $317=$316; //@line 1483 "pyexpat.c"
        var $318=HEAP[$317]; //@line 1483 "pyexpat.c"
        var $319=($318) - 1; //@line 1483 "pyexpat.c"
        var $320=$o80; //@line 1483 "pyexpat.c"
        var $321=$320; //@line 1483 "pyexpat.c"
        HEAP[$321]=$319; //@line 1483 "pyexpat.c"
        var $322=$o80; //@line 1483 "pyexpat.c"
        var $323=$322; //@line 1483 "pyexpat.c"
        var $324=HEAP[$323]; //@line 1483 "pyexpat.c"
        var $325=($324)==0; //@line 1483 "pyexpat.c"
        if ($325) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 1483 "pyexpat.c"
      case 71: // $bb84
        var $326=$o80; //@line 1483 "pyexpat.c"
        var $327=$326+4; //@line 1483 "pyexpat.c"
        var $328=HEAP[$327]; //@line 1483 "pyexpat.c"
        var $329=$328+24; //@line 1483 "pyexpat.c"
        var $330=HEAP[$329]; //@line 1483 "pyexpat.c"
        var $331=$o80; //@line 1483 "pyexpat.c"
        FUNCTION_TABLE[$330]($331); //@line 1483 "pyexpat.c"
        __label__ = 72; break; //@line 1483 "pyexpat.c"
      case 72: // $bb85
        var $332=_PyString_FromString(__str70); //@line 1484 "pyexpat.c"
        $o86=$332; //@line 1484 "pyexpat.c"
        var $333=($332)!=0; //@line 1484 "pyexpat.c"
        if ($333) { __label__ = 73; break; } else { __label__ = 76; break; } //@line 1484 "pyexpat.c"
      case 73: // $bb88
        var $334=$rc; //@line 1484 "pyexpat.c"
        var $335=$o86; //@line 1484 "pyexpat.c"
        var $336=_PyList_Append($334, $335); //@line 1484 "pyexpat.c"
        var $_pr7=$o86;
        var $337=($_pr7)!=0; //@line 1484 "pyexpat.c"
        if ($337) { __label__ = 74; break; } else { __label__ = 76; break; } //@line 1484 "pyexpat.c"
      case 74: // $bb89
        var $338=$o86; //@line 1484 "pyexpat.c"
        var $339=$338; //@line 1484 "pyexpat.c"
        var $340=HEAP[$339]; //@line 1484 "pyexpat.c"
        var $341=($340) - 1; //@line 1484 "pyexpat.c"
        var $342=$o86; //@line 1484 "pyexpat.c"
        var $343=$342; //@line 1484 "pyexpat.c"
        HEAP[$343]=$341; //@line 1484 "pyexpat.c"
        var $344=$o86; //@line 1484 "pyexpat.c"
        var $345=$344; //@line 1484 "pyexpat.c"
        var $346=HEAP[$345]; //@line 1484 "pyexpat.c"
        var $347=($346)==0; //@line 1484 "pyexpat.c"
        if ($347) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 1484 "pyexpat.c"
      case 75: // $bb90
        var $348=$o86; //@line 1484 "pyexpat.c"
        var $349=$348+4; //@line 1484 "pyexpat.c"
        var $350=HEAP[$349]; //@line 1484 "pyexpat.c"
        var $351=$350+24; //@line 1484 "pyexpat.c"
        var $352=HEAP[$351]; //@line 1484 "pyexpat.c"
        var $353=$o86; //@line 1484 "pyexpat.c"
        FUNCTION_TABLE[$352]($353); //@line 1484 "pyexpat.c"
        __label__ = 76; break; //@line 1484 "pyexpat.c"
      case 76: // $bb91
        var $354=_PyString_FromString(__str71); //@line 1485 "pyexpat.c"
        $o92=$354; //@line 1485 "pyexpat.c"
        var $355=($354)!=0; //@line 1485 "pyexpat.c"
        if ($355) { __label__ = 77; break; } else { __label__ = 80; break; } //@line 1485 "pyexpat.c"
      case 77: // $bb94
        var $356=$rc; //@line 1485 "pyexpat.c"
        var $357=$o92; //@line 1485 "pyexpat.c"
        var $358=_PyList_Append($356, $357); //@line 1485 "pyexpat.c"
        var $_pr8=$o92;
        var $359=($_pr8)!=0; //@line 1485 "pyexpat.c"
        if ($359) { __label__ = 78; break; } else { __label__ = 80; break; } //@line 1485 "pyexpat.c"
      case 78: // $bb95
        var $360=$o92; //@line 1485 "pyexpat.c"
        var $361=$360; //@line 1485 "pyexpat.c"
        var $362=HEAP[$361]; //@line 1485 "pyexpat.c"
        var $363=($362) - 1; //@line 1485 "pyexpat.c"
        var $364=$o92; //@line 1485 "pyexpat.c"
        var $365=$364; //@line 1485 "pyexpat.c"
        HEAP[$365]=$363; //@line 1485 "pyexpat.c"
        var $366=$o92; //@line 1485 "pyexpat.c"
        var $367=$366; //@line 1485 "pyexpat.c"
        var $368=HEAP[$367]; //@line 1485 "pyexpat.c"
        var $369=($368)==0; //@line 1485 "pyexpat.c"
        if ($369) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 1485 "pyexpat.c"
      case 79: // $bb96
        var $370=$o92; //@line 1485 "pyexpat.c"
        var $371=$370+4; //@line 1485 "pyexpat.c"
        var $372=HEAP[$371]; //@line 1485 "pyexpat.c"
        var $373=$372+24; //@line 1485 "pyexpat.c"
        var $374=HEAP[$373]; //@line 1485 "pyexpat.c"
        var $375=$o92; //@line 1485 "pyexpat.c"
        FUNCTION_TABLE[$374]($375); //@line 1485 "pyexpat.c"
        __label__ = 80; break; //@line 1485 "pyexpat.c"
      case 80: // $bb97
        var $376=_PyString_FromString(__str72); //@line 1486 "pyexpat.c"
        $o98=$376; //@line 1486 "pyexpat.c"
        var $377=($376)!=0; //@line 1486 "pyexpat.c"
        if ($377) { __label__ = 81; break; } else { __label__ = 84; break; } //@line 1486 "pyexpat.c"
      case 81: // $bb100
        var $378=$rc; //@line 1486 "pyexpat.c"
        var $379=$o98; //@line 1486 "pyexpat.c"
        var $380=_PyList_Append($378, $379); //@line 1486 "pyexpat.c"
        var $_pr9=$o98;
        var $381=($_pr9)!=0; //@line 1486 "pyexpat.c"
        if ($381) { __label__ = 82; break; } else { __label__ = 84; break; } //@line 1486 "pyexpat.c"
      case 82: // $bb101
        var $382=$o98; //@line 1486 "pyexpat.c"
        var $383=$382; //@line 1486 "pyexpat.c"
        var $384=HEAP[$383]; //@line 1486 "pyexpat.c"
        var $385=($384) - 1; //@line 1486 "pyexpat.c"
        var $386=$o98; //@line 1486 "pyexpat.c"
        var $387=$386; //@line 1486 "pyexpat.c"
        HEAP[$387]=$385; //@line 1486 "pyexpat.c"
        var $388=$o98; //@line 1486 "pyexpat.c"
        var $389=$388; //@line 1486 "pyexpat.c"
        var $390=HEAP[$389]; //@line 1486 "pyexpat.c"
        var $391=($390)==0; //@line 1486 "pyexpat.c"
        if ($391) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 1486 "pyexpat.c"
      case 83: // $bb102
        var $392=$o98; //@line 1486 "pyexpat.c"
        var $393=$392+4; //@line 1486 "pyexpat.c"
        var $394=HEAP[$393]; //@line 1486 "pyexpat.c"
        var $395=$394+24; //@line 1486 "pyexpat.c"
        var $396=HEAP[$395]; //@line 1486 "pyexpat.c"
        var $397=$o98; //@line 1486 "pyexpat.c"
        FUNCTION_TABLE[$396]($397); //@line 1486 "pyexpat.c"
        __label__ = 84; break; //@line 1486 "pyexpat.c"
      case 84: // $bb103
        var $398=_PyString_FromString(__str73); //@line 1487 "pyexpat.c"
        $o104=$398; //@line 1487 "pyexpat.c"
        var $399=($398)!=0; //@line 1487 "pyexpat.c"
        if ($399) { __label__ = 85; break; } else { __label__ = 88; break; } //@line 1487 "pyexpat.c"
      case 85: // $bb106
        var $400=$rc; //@line 1487 "pyexpat.c"
        var $401=$o104; //@line 1487 "pyexpat.c"
        var $402=_PyList_Append($400, $401); //@line 1487 "pyexpat.c"
        var $_pr10=$o104;
        var $403=($_pr10)!=0; //@line 1487 "pyexpat.c"
        if ($403) { __label__ = 86; break; } else { __label__ = 88; break; } //@line 1487 "pyexpat.c"
      case 86: // $bb107
        var $404=$o104; //@line 1487 "pyexpat.c"
        var $405=$404; //@line 1487 "pyexpat.c"
        var $406=HEAP[$405]; //@line 1487 "pyexpat.c"
        var $407=($406) - 1; //@line 1487 "pyexpat.c"
        var $408=$o104; //@line 1487 "pyexpat.c"
        var $409=$408; //@line 1487 "pyexpat.c"
        HEAP[$409]=$407; //@line 1487 "pyexpat.c"
        var $410=$o104; //@line 1487 "pyexpat.c"
        var $411=$410; //@line 1487 "pyexpat.c"
        var $412=HEAP[$411]; //@line 1487 "pyexpat.c"
        var $413=($412)==0; //@line 1487 "pyexpat.c"
        if ($413) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 1487 "pyexpat.c"
      case 87: // $bb108
        var $414=$o104; //@line 1487 "pyexpat.c"
        var $415=$414+4; //@line 1487 "pyexpat.c"
        var $416=HEAP[$415]; //@line 1487 "pyexpat.c"
        var $417=$416+24; //@line 1487 "pyexpat.c"
        var $418=HEAP[$417]; //@line 1487 "pyexpat.c"
        var $419=$o104; //@line 1487 "pyexpat.c"
        FUNCTION_TABLE[$418]($419); //@line 1487 "pyexpat.c"
        __label__ = 88; break; //@line 1487 "pyexpat.c"
      case 88: // $bb109
        var $420=_PyString_FromString(__str74); //@line 1488 "pyexpat.c"
        $o110=$420; //@line 1488 "pyexpat.c"
        var $421=($420)!=0; //@line 1488 "pyexpat.c"
        if ($421) { __label__ = 89; break; } else { __label__ = 92; break; } //@line 1488 "pyexpat.c"
      case 89: // $bb112
        var $422=$rc; //@line 1488 "pyexpat.c"
        var $423=$o110; //@line 1488 "pyexpat.c"
        var $424=_PyList_Append($422, $423); //@line 1488 "pyexpat.c"
        var $_pr11=$o110;
        var $425=($_pr11)!=0; //@line 1488 "pyexpat.c"
        if ($425) { __label__ = 90; break; } else { __label__ = 92; break; } //@line 1488 "pyexpat.c"
      case 90: // $bb113
        var $426=$o110; //@line 1488 "pyexpat.c"
        var $427=$426; //@line 1488 "pyexpat.c"
        var $428=HEAP[$427]; //@line 1488 "pyexpat.c"
        var $429=($428) - 1; //@line 1488 "pyexpat.c"
        var $430=$o110; //@line 1488 "pyexpat.c"
        var $431=$430; //@line 1488 "pyexpat.c"
        HEAP[$431]=$429; //@line 1488 "pyexpat.c"
        var $432=$o110; //@line 1488 "pyexpat.c"
        var $433=$432; //@line 1488 "pyexpat.c"
        var $434=HEAP[$433]; //@line 1488 "pyexpat.c"
        var $435=($434)==0; //@line 1488 "pyexpat.c"
        if ($435) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 1488 "pyexpat.c"
      case 91: // $bb114
        var $436=$o110; //@line 1488 "pyexpat.c"
        var $437=$436+4; //@line 1488 "pyexpat.c"
        var $438=HEAP[$437]; //@line 1488 "pyexpat.c"
        var $439=$438+24; //@line 1488 "pyexpat.c"
        var $440=HEAP[$439]; //@line 1488 "pyexpat.c"
        var $441=$o110; //@line 1488 "pyexpat.c"
        FUNCTION_TABLE[$440]($441); //@line 1488 "pyexpat.c"
        __label__ = 92; break; //@line 1488 "pyexpat.c"
      case 92: // $bb115
        var $442=_PyString_FromString(__str75); //@line 1489 "pyexpat.c"
        $o116=$442; //@line 1489 "pyexpat.c"
        var $443=($442)!=0; //@line 1489 "pyexpat.c"
        if ($443) { __label__ = 93; break; } else { __label__ = 96; break; } //@line 1489 "pyexpat.c"
      case 93: // $bb118
        var $444=$rc; //@line 1489 "pyexpat.c"
        var $445=$o116; //@line 1489 "pyexpat.c"
        var $446=_PyList_Append($444, $445); //@line 1489 "pyexpat.c"
        var $_pr12=$o116;
        var $447=($_pr12)!=0; //@line 1489 "pyexpat.c"
        if ($447) { __label__ = 94; break; } else { __label__ = 96; break; } //@line 1489 "pyexpat.c"
      case 94: // $bb119
        var $448=$o116; //@line 1489 "pyexpat.c"
        var $449=$448; //@line 1489 "pyexpat.c"
        var $450=HEAP[$449]; //@line 1489 "pyexpat.c"
        var $451=($450) - 1; //@line 1489 "pyexpat.c"
        var $452=$o116; //@line 1489 "pyexpat.c"
        var $453=$452; //@line 1489 "pyexpat.c"
        HEAP[$453]=$451; //@line 1489 "pyexpat.c"
        var $454=$o116; //@line 1489 "pyexpat.c"
        var $455=$454; //@line 1489 "pyexpat.c"
        var $456=HEAP[$455]; //@line 1489 "pyexpat.c"
        var $457=($456)==0; //@line 1489 "pyexpat.c"
        if ($457) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 1489 "pyexpat.c"
      case 95: // $bb120
        var $458=$o116; //@line 1489 "pyexpat.c"
        var $459=$458+4; //@line 1489 "pyexpat.c"
        var $460=HEAP[$459]; //@line 1489 "pyexpat.c"
        var $461=$460+24; //@line 1489 "pyexpat.c"
        var $462=HEAP[$461]; //@line 1489 "pyexpat.c"
        var $463=$o116; //@line 1489 "pyexpat.c"
        FUNCTION_TABLE[$462]($463); //@line 1489 "pyexpat.c"
        __label__ = 96; break; //@line 1489 "pyexpat.c"
      case 96: // $bb121
        var $464=_PyString_FromString(__str76); //@line 1490 "pyexpat.c"
        $o122=$464; //@line 1490 "pyexpat.c"
        var $465=($464)!=0; //@line 1490 "pyexpat.c"
        if ($465) { __label__ = 97; break; } else { __label__ = 100; break; } //@line 1490 "pyexpat.c"
      case 97: // $bb124
        var $466=$rc; //@line 1490 "pyexpat.c"
        var $467=$o122; //@line 1490 "pyexpat.c"
        var $468=_PyList_Append($466, $467); //@line 1490 "pyexpat.c"
        var $_pr13=$o122;
        var $469=($_pr13)!=0; //@line 1490 "pyexpat.c"
        if ($469) { __label__ = 98; break; } else { __label__ = 100; break; } //@line 1490 "pyexpat.c"
      case 98: // $bb125
        var $470=$o122; //@line 1490 "pyexpat.c"
        var $471=$470; //@line 1490 "pyexpat.c"
        var $472=HEAP[$471]; //@line 1490 "pyexpat.c"
        var $473=($472) - 1; //@line 1490 "pyexpat.c"
        var $474=$o122; //@line 1490 "pyexpat.c"
        var $475=$474; //@line 1490 "pyexpat.c"
        HEAP[$475]=$473; //@line 1490 "pyexpat.c"
        var $476=$o122; //@line 1490 "pyexpat.c"
        var $477=$476; //@line 1490 "pyexpat.c"
        var $478=HEAP[$477]; //@line 1490 "pyexpat.c"
        var $479=($478)==0; //@line 1490 "pyexpat.c"
        if ($479) { __label__ = 99; break; } else { __label__ = 100; break; } //@line 1490 "pyexpat.c"
      case 99: // $bb126
        var $480=$o122; //@line 1490 "pyexpat.c"
        var $481=$480+4; //@line 1490 "pyexpat.c"
        var $482=HEAP[$481]; //@line 1490 "pyexpat.c"
        var $483=$482+24; //@line 1490 "pyexpat.c"
        var $484=HEAP[$483]; //@line 1490 "pyexpat.c"
        var $485=$o122; //@line 1490 "pyexpat.c"
        FUNCTION_TABLE[$484]($485); //@line 1490 "pyexpat.c"
        __label__ = 100; break; //@line 1490 "pyexpat.c"
      case 100: // $bb127
        var $486=_PyString_FromString(__str77); //@line 1491 "pyexpat.c"
        $o128=$486; //@line 1491 "pyexpat.c"
        var $487=($486)!=0; //@line 1491 "pyexpat.c"
        if ($487) { __label__ = 101; break; } else { __label__ = 104; break; } //@line 1491 "pyexpat.c"
      case 101: // $bb130
        var $488=$rc; //@line 1491 "pyexpat.c"
        var $489=$o128; //@line 1491 "pyexpat.c"
        var $490=_PyList_Append($488, $489); //@line 1491 "pyexpat.c"
        var $_pr14=$o128;
        var $491=($_pr14)!=0; //@line 1491 "pyexpat.c"
        if ($491) { __label__ = 102; break; } else { __label__ = 104; break; } //@line 1491 "pyexpat.c"
      case 102: // $bb131
        var $492=$o128; //@line 1491 "pyexpat.c"
        var $493=$492; //@line 1491 "pyexpat.c"
        var $494=HEAP[$493]; //@line 1491 "pyexpat.c"
        var $495=($494) - 1; //@line 1491 "pyexpat.c"
        var $496=$o128; //@line 1491 "pyexpat.c"
        var $497=$496; //@line 1491 "pyexpat.c"
        HEAP[$497]=$495; //@line 1491 "pyexpat.c"
        var $498=$o128; //@line 1491 "pyexpat.c"
        var $499=$498; //@line 1491 "pyexpat.c"
        var $500=HEAP[$499]; //@line 1491 "pyexpat.c"
        var $501=($500)==0; //@line 1491 "pyexpat.c"
        if ($501) { __label__ = 103; break; } else { __label__ = 104; break; } //@line 1491 "pyexpat.c"
      case 103: // $bb132
        var $502=$o128; //@line 1491 "pyexpat.c"
        var $503=$502+4; //@line 1491 "pyexpat.c"
        var $504=HEAP[$503]; //@line 1491 "pyexpat.c"
        var $505=$504+24; //@line 1491 "pyexpat.c"
        var $506=HEAP[$505]; //@line 1491 "pyexpat.c"
        var $507=$o128; //@line 1491 "pyexpat.c"
        FUNCTION_TABLE[$506]($507); //@line 1491 "pyexpat.c"
        __label__ = 104; break; //@line 1491 "pyexpat.c"
      case 104: // $bb133
        var $508=_PyString_FromString(__str78); //@line 1492 "pyexpat.c"
        $o134=$508; //@line 1492 "pyexpat.c"
        var $509=($508)!=0; //@line 1492 "pyexpat.c"
        if ($509) { __label__ = 105; break; } else { __label__ = 108; break; } //@line 1492 "pyexpat.c"
      case 105: // $bb136
        var $510=$rc; //@line 1492 "pyexpat.c"
        var $511=$o134; //@line 1492 "pyexpat.c"
        var $512=_PyList_Append($510, $511); //@line 1492 "pyexpat.c"
        var $_pr15=$o134;
        var $513=($_pr15)!=0; //@line 1492 "pyexpat.c"
        if ($513) { __label__ = 106; break; } else { __label__ = 108; break; } //@line 1492 "pyexpat.c"
      case 106: // $bb137
        var $514=$o134; //@line 1492 "pyexpat.c"
        var $515=$514; //@line 1492 "pyexpat.c"
        var $516=HEAP[$515]; //@line 1492 "pyexpat.c"
        var $517=($516) - 1; //@line 1492 "pyexpat.c"
        var $518=$o134; //@line 1492 "pyexpat.c"
        var $519=$518; //@line 1492 "pyexpat.c"
        HEAP[$519]=$517; //@line 1492 "pyexpat.c"
        var $520=$o134; //@line 1492 "pyexpat.c"
        var $521=$520; //@line 1492 "pyexpat.c"
        var $522=HEAP[$521]; //@line 1492 "pyexpat.c"
        var $523=($522)==0; //@line 1492 "pyexpat.c"
        if ($523) { __label__ = 107; break; } else { __label__ = 108; break; } //@line 1492 "pyexpat.c"
      case 107: // $bb138
        var $524=$o134; //@line 1492 "pyexpat.c"
        var $525=$524+4; //@line 1492 "pyexpat.c"
        var $526=HEAP[$525]; //@line 1492 "pyexpat.c"
        var $527=$526+24; //@line 1492 "pyexpat.c"
        var $528=HEAP[$527]; //@line 1492 "pyexpat.c"
        var $529=$o134; //@line 1492 "pyexpat.c"
        FUNCTION_TABLE[$528]($529); //@line 1492 "pyexpat.c"
        __label__ = 108; break; //@line 1492 "pyexpat.c"
      case 108: // $bb139
        var $530=$rc; //@line 1495 "pyexpat.c"
        $0=$530; //@line 1495 "pyexpat.c"
        __label__ = 110; break; //@line 1495 "pyexpat.c"
      case 109: // $bb140
        var $531=$self_addr; //@line 1497 "pyexpat.c"
        var $532=$531; //@line 1497 "pyexpat.c"
        var $533=$name_addr; //@line 1497 "pyexpat.c"
        var $534=_Py_FindMethod(_xmlparse_methods, $532, $533); //@line 1497 "pyexpat.c"
        $0=$534; //@line 1497 "pyexpat.c"
        __label__ = 110; break; //@line 1497 "pyexpat.c"
      case 110: // $bb141
        var $535=$0; //@line 1405 "pyexpat.c"
        $retval=$535; //@line 1405 "pyexpat.c"
        var $retval142=$retval; //@line 1405 "pyexpat.c"
        ;
        return $retval142; //@line 1405 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _sethandler($self, $name, $v) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $name_addr;
        var $v_addr;
        var $retval;
        var $0;
        var $handlernum;
        var $c_handler;
        var $temp;
        $self_addr=$self;
        $name_addr=$name;
        $v_addr=$v;
        var $1=$name_addr; //@line 1503 "pyexpat.c"
        var $2=_handlername2int($1); //@line 1503 "pyexpat.c"
        $handlernum=$2; //@line 1503 "pyexpat.c"
        var $3=$handlernum; //@line 1504 "pyexpat.c"
        var $4=($3) >= 0; //@line 1504 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 1504 "pyexpat.c"
      case 1: // $bb
        $c_handler=0; //@line 1505 "pyexpat.c"
        var $5=$self_addr; //@line 1506 "pyexpat.c"
        var $6=$5+48; //@line 1506 "pyexpat.c"
        var $7=HEAP[$6]; //@line 1506 "pyexpat.c"
        var $8=$handlernum; //@line 1506 "pyexpat.c"
        var $9=$7+4*$8; //@line 1506 "pyexpat.c"
        var $10=HEAP[$9]; //@line 1506 "pyexpat.c"
        $temp=$10; //@line 1506 "pyexpat.c"
        var $11=$v_addr; //@line 1508 "pyexpat.c"
        var $12=($11)==(__Py_NoneStruct); //@line 1508 "pyexpat.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 1508 "pyexpat.c"
      case 2: // $bb1
        var $13=$handlernum; //@line 1520 "pyexpat.c"
        var $14=($13)==3; //@line 1520 "pyexpat.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1520 "pyexpat.c"
      case 3: // $bb2
        var $15=$self_addr; //@line 1520 "pyexpat.c"
        var $16=$15+24; //@line 1520 "pyexpat.c"
        var $17=HEAP[$16]; //@line 1520 "pyexpat.c"
        var $18=($17)!=0; //@line 1520 "pyexpat.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1520 "pyexpat.c"
      case 4: // $bb3
        $c_handler=(FUNCTION_TABLE_OFFSET + 8); //@line 1521 "pyexpat.c"
        __label__ = 5; break; //@line 1521 "pyexpat.c"
      case 5: // $bb4
        $v_addr=0; //@line 1522 "pyexpat.c"
        __label__ = 8; break; //@line 1522 "pyexpat.c"
      case 6: // $bb5
        var $19=$v_addr; //@line 1524 "pyexpat.c"
        var $20=($19)!=0; //@line 1524 "pyexpat.c"
        if ($20) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1524 "pyexpat.c"
      case 7: // $bb6
        var $21=$v_addr; //@line 1525 "pyexpat.c"
        var $22=$21; //@line 1525 "pyexpat.c"
        var $23=HEAP[$22]; //@line 1525 "pyexpat.c"
        var $24=($23) + 1; //@line 1525 "pyexpat.c"
        var $25=$v_addr; //@line 1525 "pyexpat.c"
        var $26=$25; //@line 1525 "pyexpat.c"
        HEAP[$26]=$24; //@line 1525 "pyexpat.c"
        var $27=$handlernum; //@line 1526 "pyexpat.c"
        var $28=_handler_info+$27*20; //@line 1526 "pyexpat.c"
        var $29=$28+8; //@line 1526 "pyexpat.c"
        var $30=HEAP[$29]; //@line 1526 "pyexpat.c"
        $c_handler=$30; //@line 1526 "pyexpat.c"
        __label__ = 8; break; //@line 1526 "pyexpat.c"
      case 8: // $bb7
        var $31=$self_addr; //@line 1528 "pyexpat.c"
        var $32=$31+48; //@line 1528 "pyexpat.c"
        var $33=HEAP[$32]; //@line 1528 "pyexpat.c"
        var $34=$handlernum; //@line 1528 "pyexpat.c"
        var $35=$33+4*$34; //@line 1528 "pyexpat.c"
        var $36=$v_addr; //@line 1528 "pyexpat.c"
        HEAP[$35]=$36; //@line 1528 "pyexpat.c"
        var $37=$temp; //@line 1529 "pyexpat.c"
        var $38=($37)!=0; //@line 1529 "pyexpat.c"
        if ($38) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 1529 "pyexpat.c"
      case 9: // $bb8
        var $39=$temp; //@line 1529 "pyexpat.c"
        var $40=$39; //@line 1529 "pyexpat.c"
        var $41=HEAP[$40]; //@line 1529 "pyexpat.c"
        var $42=($41) - 1; //@line 1529 "pyexpat.c"
        var $43=$temp; //@line 1529 "pyexpat.c"
        var $44=$43; //@line 1529 "pyexpat.c"
        HEAP[$44]=$42; //@line 1529 "pyexpat.c"
        var $45=$temp; //@line 1529 "pyexpat.c"
        var $46=$45; //@line 1529 "pyexpat.c"
        var $47=HEAP[$46]; //@line 1529 "pyexpat.c"
        var $48=($47)==0; //@line 1529 "pyexpat.c"
        if ($48) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1529 "pyexpat.c"
      case 10: // $bb9
        var $49=$temp; //@line 1529 "pyexpat.c"
        var $50=$49+4; //@line 1529 "pyexpat.c"
        var $51=HEAP[$50]; //@line 1529 "pyexpat.c"
        var $52=$51+24; //@line 1529 "pyexpat.c"
        var $53=HEAP[$52]; //@line 1529 "pyexpat.c"
        var $54=$temp; //@line 1529 "pyexpat.c"
        FUNCTION_TABLE[$53]($54); //@line 1529 "pyexpat.c"
        __label__ = 11; break; //@line 1529 "pyexpat.c"
      case 11: // $bb10
        var $55=$handlernum; //@line 1530 "pyexpat.c"
        var $56=_handler_info+$55*20; //@line 1530 "pyexpat.c"
        var $57=$56+4; //@line 1530 "pyexpat.c"
        var $58=HEAP[$57]; //@line 1530 "pyexpat.c"
        var $59=$self_addr; //@line 1530 "pyexpat.c"
        var $60=$59+8; //@line 1530 "pyexpat.c"
        var $61=HEAP[$60]; //@line 1530 "pyexpat.c"
        var $62=$c_handler; //@line 1530 "pyexpat.c"
        FUNCTION_TABLE[$58]($61, $62); //@line 1530 "pyexpat.c"
        $0=1; //@line 1531 "pyexpat.c"
        __label__ = 13; break; //@line 1531 "pyexpat.c"
      case 12: // $bb11
        $0=0; //@line 1533 "pyexpat.c"
        __label__ = 13; break; //@line 1533 "pyexpat.c"
      case 13: // $bb12
        var $63=$0; //@line 1531 "pyexpat.c"
        $retval=$63; //@line 1531 "pyexpat.c"
        var $retval13=$retval; //@line 1531 "pyexpat.c"
        ;
        return $retval13; //@line 1531 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_setattr($self, $name, $v) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $name_addr;
        var $v_addr;
        var $retval;
        var $0;
        var $new_buffer_size;
        $self_addr=$self;
        $name_addr=$name;
        $v_addr=$v;
        var $1=$v_addr; //@line 1540 "pyexpat.c"
        var $2=($1)==0; //@line 1540 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1540 "pyexpat.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_RuntimeError]; //@line 1541 "pyexpat.c"
        _PyErr_SetString($3, __str80); //@line 1541 "pyexpat.c"
        $0=-1; //@line 1542 "pyexpat.c"
        __label__ = 53; break; //@line 1542 "pyexpat.c"
      case 2: // $bb1
        var $4=$name_addr; //@line 1544 "pyexpat.c"
        var $5=_strcmp($4, __str72); //@line 1544 "pyexpat.c"
        var $6=($5)==0; //@line 1544 "pyexpat.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 13; break; } //@line 1544 "pyexpat.c"
      case 3: // $bb2
        var $7=$v_addr; //@line 1545 "pyexpat.c"
        var $8=_PyObject_IsTrue($7); //@line 1545 "pyexpat.c"
        var $9=($8)!=0; //@line 1545 "pyexpat.c"
        var $10=$self_addr; //@line 1546 "pyexpat.c"
        var $11=$10+32; //@line 1546 "pyexpat.c"
        var $12=HEAP[$11]; //@line 1546 "pyexpat.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 1545 "pyexpat.c"
      case 4: // $bb3
        var $13=($12)==0; //@line 1546 "pyexpat.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 12; break; } //@line 1546 "pyexpat.c"
      case 5: // $bb4
        var $14=$self_addr; //@line 1547 "pyexpat.c"
        var $15=$14+36; //@line 1547 "pyexpat.c"
        var $16=HEAP[$15]; //@line 1547 "pyexpat.c"
        var $17=_malloc($16); //@line 1547 "pyexpat.c"
        var $18=$self_addr; //@line 1547 "pyexpat.c"
        var $19=$18+32; //@line 1547 "pyexpat.c"
        HEAP[$19]=$17; //@line 1547 "pyexpat.c"
        var $20=$self_addr; //@line 1548 "pyexpat.c"
        var $21=$20+32; //@line 1548 "pyexpat.c"
        var $22=HEAP[$21]; //@line 1548 "pyexpat.c"
        var $23=($22)==0; //@line 1548 "pyexpat.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1548 "pyexpat.c"
      case 6: // $bb5
        var $24=_PyErr_NoMemory(); //@line 1549 "pyexpat.c"
        $0=-1; //@line 1550 "pyexpat.c"
        __label__ = 53; break; //@line 1550 "pyexpat.c"
      case 7: // $bb6
        var $25=$self_addr; //@line 1552 "pyexpat.c"
        var $26=$25+40; //@line 1552 "pyexpat.c"
        HEAP[$26]=0; //@line 1552 "pyexpat.c"
        __label__ = 12; break; //@line 1552 "pyexpat.c"
      case 8: // $bb8
        var $27=($12)!=0; //@line 1555 "pyexpat.c"
        if ($27) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 1555 "pyexpat.c"
      case 9: // $bb9
        var $28=$self_addr; //@line 1556 "pyexpat.c"
        var $29=_flush_character_buffer($28); //@line 1556 "pyexpat.c"
        var $30=($29) < 0; //@line 1556 "pyexpat.c"
        if ($30) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1556 "pyexpat.c"
      case 10: // $bb10
        $0=-1; //@line 1557 "pyexpat.c"
        __label__ = 53; break; //@line 1557 "pyexpat.c"
      case 11: // $bb11
        var $31=$self_addr; //@line 1558 "pyexpat.c"
        var $32=$31+32; //@line 1558 "pyexpat.c"
        var $33=HEAP[$32]; //@line 1558 "pyexpat.c"
        _free($33); //@line 1558 "pyexpat.c"
        var $34=$self_addr; //@line 1559 "pyexpat.c"
        var $35=$34+32; //@line 1559 "pyexpat.c"
        HEAP[$35]=0; //@line 1559 "pyexpat.c"
        __label__ = 12; break; //@line 1559 "pyexpat.c"
      case 12: // $bb12
        $0=0; //@line 1561 "pyexpat.c"
        __label__ = 53; break; //@line 1561 "pyexpat.c"
      case 13: // $bb13
        var $36=$name_addr; //@line 1563 "pyexpat.c"
        var $37=_strcmp($36, __str74); //@line 1563 "pyexpat.c"
        var $38=($37)==0; //@line 1563 "pyexpat.c"
        if ($38) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 1563 "pyexpat.c"
      case 14: // $bb14
        var $39=$v_addr; //@line 1564 "pyexpat.c"
        var $40=_PyObject_IsTrue($39); //@line 1564 "pyexpat.c"
        var $41=($40)!=0; //@line 1564 "pyexpat.c"
        var $42=$self_addr; //@line 1565 "pyexpat.c"
        var $43=$42+28; //@line 1565 "pyexpat.c"
        if ($41) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1564 "pyexpat.c"
      case 15: // $bb15
        HEAP[$43]=1; //@line 1565 "pyexpat.c"
        __label__ = 17; break; //@line 1565 "pyexpat.c"
      case 16: // $bb16
        HEAP[$43]=0; //@line 1567 "pyexpat.c"
        __label__ = 17; break; //@line 1567 "pyexpat.c"
      case 17: // $bb17
        var $44=$self_addr; //@line 1568 "pyexpat.c"
        var $45=$44+28; //@line 1568 "pyexpat.c"
        var $46=HEAP[$45]; //@line 1568 "pyexpat.c"
        var $47=$self_addr; //@line 1568 "pyexpat.c"
        var $48=$47+8; //@line 1568 "pyexpat.c"
        var $49=HEAP[$48]; //@line 1568 "pyexpat.c"
        _PyExpat_XML_SetReturnNSTriplet($49, $46); //@line 1568 "pyexpat.c"
        $0=0; //@line 1569 "pyexpat.c"
        __label__ = 53; break; //@line 1569 "pyexpat.c"
      case 18: // $bb18
        var $50=$name_addr; //@line 1571 "pyexpat.c"
        var $51=_strcmp($50, __str75); //@line 1571 "pyexpat.c"
        var $52=($51)==0; //@line 1571 "pyexpat.c"
        if ($52) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 1571 "pyexpat.c"
      case 19: // $bb19
        var $53=$v_addr; //@line 1572 "pyexpat.c"
        var $54=_PyObject_IsTrue($53); //@line 1572 "pyexpat.c"
        var $55=($54)!=0; //@line 1572 "pyexpat.c"
        var $56=$self_addr; //@line 1573 "pyexpat.c"
        var $57=$56+16; //@line 1573 "pyexpat.c"
        if ($55) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1572 "pyexpat.c"
      case 20: // $bb20
        HEAP[$57]=1; //@line 1573 "pyexpat.c"
        __label__ = 22; break; //@line 1573 "pyexpat.c"
      case 21: // $bb21
        HEAP[$57]=0; //@line 1575 "pyexpat.c"
        __label__ = 22; break; //@line 1575 "pyexpat.c"
      case 22: // $bb22
        $0=0; //@line 1576 "pyexpat.c"
        __label__ = 53; break; //@line 1576 "pyexpat.c"
      case 23: // $bb23
        var $58=$name_addr; //@line 1578 "pyexpat.c"
        var $59=_strcmp($58, __str76); //@line 1578 "pyexpat.c"
        var $60=($59)==0; //@line 1578 "pyexpat.c"
        if ($60) { __label__ = 24; break; } else { __label__ = 28; break; } //@line 1578 "pyexpat.c"
      case 24: // $bb24
        var $61=$v_addr; //@line 1579 "pyexpat.c"
        var $62=_PyObject_IsTrue($61); //@line 1579 "pyexpat.c"
        var $63=($62)!=0; //@line 1579 "pyexpat.c"
        var $64=$self_addr; //@line 1585 "pyexpat.c"
        var $65=$64+12; //@line 1585 "pyexpat.c"
        if ($63) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1579 "pyexpat.c"
      case 25: // $bb25
        HEAP[$65]=1; //@line 1585 "pyexpat.c"
        __label__ = 27; break; //@line 1585 "pyexpat.c"
      case 26: // $bb26
        HEAP[$65]=0; //@line 1589 "pyexpat.c"
        __label__ = 27; break; //@line 1589 "pyexpat.c"
      case 27: // $bb27
        $0=0; //@line 1590 "pyexpat.c"
        __label__ = 53; break; //@line 1590 "pyexpat.c"
      case 28: // $bb28
        var $66=$name_addr; //@line 1592 "pyexpat.c"
        var $67=_strcmp($66, __str77); //@line 1592 "pyexpat.c"
        var $68=($67)==0; //@line 1592 "pyexpat.c"
        if ($68) { __label__ = 29; break; } else { __label__ = 33; break; } //@line 1592 "pyexpat.c"
      case 29: // $bb29
        var $69=$v_addr; //@line 1593 "pyexpat.c"
        var $70=_PyObject_IsTrue($69); //@line 1593 "pyexpat.c"
        var $71=($70)!=0; //@line 1593 "pyexpat.c"
        var $72=$self_addr; //@line 1594 "pyexpat.c"
        var $73=$72+20; //@line 1594 "pyexpat.c"
        if ($71) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1593 "pyexpat.c"
      case 30: // $bb30
        HEAP[$73]=1; //@line 1594 "pyexpat.c"
        __label__ = 32; break; //@line 1594 "pyexpat.c"
      case 31: // $bb31
        HEAP[$73]=0; //@line 1596 "pyexpat.c"
        __label__ = 32; break; //@line 1596 "pyexpat.c"
      case 32: // $bb32
        $0=0; //@line 1597 "pyexpat.c"
        __label__ = 53; break; //@line 1597 "pyexpat.c"
      case 33: // $bb33
        var $74=$name_addr; //@line 1600 "pyexpat.c"
        var $75=_strcmp($74, __str71); //@line 1600 "pyexpat.c"
        var $76=($75)==0; //@line 1600 "pyexpat.c"
        if ($76) { __label__ = 34; break; } else { __label__ = 47; break; } //@line 1600 "pyexpat.c"
      case 34: // $bb34
        var $77=$v_addr; //@line 1602 "pyexpat.c"
        var $78=$77+4; //@line 1602 "pyexpat.c"
        var $79=HEAP[$78]; //@line 1602 "pyexpat.c"
        var $80=$79+84; //@line 1602 "pyexpat.c"
        var $81=HEAP[$80]; //@line 1602 "pyexpat.c"
        var $82=($81) & 8388608; //@line 1602 "pyexpat.c"
        var $83=($82)==0; //@line 1602 "pyexpat.c"
        if ($83) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 1602 "pyexpat.c"
      case 35: // $bb35
        var $84=HEAP[_PyExc_TypeError]; //@line 1603 "pyexpat.c"
        _PyErr_SetString($84, __str81); //@line 1603 "pyexpat.c"
        $0=-1; //@line 1604 "pyexpat.c"
        __label__ = 53; break; //@line 1604 "pyexpat.c"
      case 36: // $bb36
        var $85=$v_addr; //@line 1607 "pyexpat.c"
        var $86=$85; //@line 1607 "pyexpat.c"
        var $87=$86+8; //@line 1607 "pyexpat.c"
        var $88=HEAP[$87]; //@line 1607 "pyexpat.c"
        $new_buffer_size=$88; //@line 1607 "pyexpat.c"
        var $89=$self_addr; //@line 1609 "pyexpat.c"
        var $90=$89+36; //@line 1609 "pyexpat.c"
        var $91=HEAP[$90]; //@line 1609 "pyexpat.c"
        var $92=$new_buffer_size; //@line 1609 "pyexpat.c"
        var $93=($91)==($92); //@line 1609 "pyexpat.c"
        if ($93) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 1609 "pyexpat.c"
      case 37: // $bb37
        $0=0; //@line 1610 "pyexpat.c"
        __label__ = 53; break; //@line 1610 "pyexpat.c"
      case 38: // $bb38
        var $94=$new_buffer_size; //@line 1613 "pyexpat.c"
        var $95=($94) <= 0; //@line 1613 "pyexpat.c"
        if ($95) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 1613 "pyexpat.c"
      case 39: // $bb39
        var $96=HEAP[_PyExc_ValueError]; //@line 1614 "pyexpat.c"
        _PyErr_SetString($96, __str82); //@line 1614 "pyexpat.c"
        $0=-1; //@line 1615 "pyexpat.c"
        __label__ = 53; break; //@line 1615 "pyexpat.c"
      case 40: // $bb40
        var $97=$self_addr; //@line 1626 "pyexpat.c"
        var $98=$97+32; //@line 1626 "pyexpat.c"
        var $99=HEAP[$98]; //@line 1626 "pyexpat.c"
        var $100=($99)!=0; //@line 1626 "pyexpat.c"
        if ($100) { __label__ = 41; break; } else { __label__ = 44; break; } //@line 1626 "pyexpat.c"
      case 41: // $bb41
        var $101=$self_addr; //@line 1628 "pyexpat.c"
        var $102=$101+40; //@line 1628 "pyexpat.c"
        var $103=HEAP[$102]; //@line 1628 "pyexpat.c"
        var $104=($103)!=0; //@line 1628 "pyexpat.c"
        if ($104) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 1628 "pyexpat.c"
      case 42: // $bb42
        var $105=$self_addr; //@line 1629 "pyexpat.c"
        var $106=_flush_character_buffer($105); //@line 1629 "pyexpat.c"
        __label__ = 43; break; //@line 1629 "pyexpat.c"
      case 43: // $bb43
        var $107=$self_addr; //@line 1632 "pyexpat.c"
        var $108=$107+32; //@line 1632 "pyexpat.c"
        var $109=HEAP[$108]; //@line 1632 "pyexpat.c"
        _free($109); //@line 1632 "pyexpat.c"
        __label__ = 44; break; //@line 1632 "pyexpat.c"
      case 44: // $bb44
        var $110=$new_buffer_size; //@line 1634 "pyexpat.c"
        var $111=_malloc($110); //@line 1634 "pyexpat.c"
        var $112=$self_addr; //@line 1634 "pyexpat.c"
        var $113=$112+32; //@line 1634 "pyexpat.c"
        HEAP[$113]=$111; //@line 1634 "pyexpat.c"
        var $114=$self_addr; //@line 1635 "pyexpat.c"
        var $115=$114+32; //@line 1635 "pyexpat.c"
        var $116=HEAP[$115]; //@line 1635 "pyexpat.c"
        var $117=($116)==0; //@line 1635 "pyexpat.c"
        if ($117) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 1635 "pyexpat.c"
      case 45: // $bb45
        var $118=_PyErr_NoMemory(); //@line 1636 "pyexpat.c"
        $0=-1; //@line 1637 "pyexpat.c"
        __label__ = 53; break; //@line 1637 "pyexpat.c"
      case 46: // $bb46
        var $119=$self_addr; //@line 1639 "pyexpat.c"
        var $120=$119+36; //@line 1639 "pyexpat.c"
        var $121=$new_buffer_size; //@line 1639 "pyexpat.c"
        HEAP[$120]=$121; //@line 1639 "pyexpat.c"
        $0=0; //@line 1640 "pyexpat.c"
        __label__ = 53; break; //@line 1640 "pyexpat.c"
      case 47: // $bb47
        var $122=$name_addr; //@line 1643 "pyexpat.c"
        var $123=_strcmp($122, __str83); //@line 1643 "pyexpat.c"
        var $124=($123)==0; //@line 1643 "pyexpat.c"
        if ($124) { __label__ = 48; break; } else { __label__ = 50; break; } //@line 1643 "pyexpat.c"
      case 48: // $bb48
        var $125=$self_addr; //@line 1649 "pyexpat.c"
        var $126=_flush_character_buffer($125); //@line 1649 "pyexpat.c"
        var $127=($126) < 0; //@line 1649 "pyexpat.c"
        if ($127) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 1649 "pyexpat.c"
      case 49: // $bb49
        $0=-1; //@line 1650 "pyexpat.c"
        __label__ = 53; break; //@line 1650 "pyexpat.c"
      case 50: // $bb50
        var $128=$self_addr; //@line 1652 "pyexpat.c"
        var $129=$name_addr; //@line 1652 "pyexpat.c"
        var $130=$v_addr; //@line 1652 "pyexpat.c"
        var $131=_sethandler($128, $129, $130); //@line 1652 "pyexpat.c"
        var $132=($131)!=0; //@line 1652 "pyexpat.c"
        if ($132) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 1652 "pyexpat.c"
      case 51: // $bb51
        $0=0; //@line 1653 "pyexpat.c"
        __label__ = 53; break; //@line 1653 "pyexpat.c"
      case 52: // $bb52
        var $133=HEAP[_PyExc_AttributeError]; //@line 1655 "pyexpat.c"
        var $134=$name_addr; //@line 1655 "pyexpat.c"
        _PyErr_SetString($133, $134); //@line 1655 "pyexpat.c"
        $0=-1; //@line 1656 "pyexpat.c"
        __label__ = 53; break; //@line 1656 "pyexpat.c"
      case 53: // $bb53
        var $135=$0; //@line 1542 "pyexpat.c"
        $retval=$135; //@line 1542 "pyexpat.c"
        var $retval54=$retval; //@line 1542 "pyexpat.c"
        ;
        return $retval54; //@line 1542 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_traverse($op, $visit, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $op_addr;
        var $visit_addr;
        var $arg_addr;
        var $retval;
        var $0;
        var $i;
        var $vret;
        $op_addr=$op;
        $visit_addr=$visit;
        $arg_addr=$arg;
        $i=0; //@line 1664 "pyexpat.c"
        __label__ = 5; break; //@line 1664 "pyexpat.c"
      case 1: // $bb
        var $1=$op_addr; //@line 1665 "pyexpat.c"
        var $2=$1+48; //@line 1665 "pyexpat.c"
        var $3=HEAP[$2]; //@line 1665 "pyexpat.c"
        var $4=$i; //@line 1665 "pyexpat.c"
        var $5=$3+4*$4; //@line 1665 "pyexpat.c"
        var $6=HEAP[$5]; //@line 1665 "pyexpat.c"
        var $7=($6)!=0; //@line 1665 "pyexpat.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 1665 "pyexpat.c"
      case 2: // $bb1
        var $8=$op_addr; //@line 1665 "pyexpat.c"
        var $9=$8+48; //@line 1665 "pyexpat.c"
        var $10=HEAP[$9]; //@line 1665 "pyexpat.c"
        var $11=$i; //@line 1665 "pyexpat.c"
        var $12=$10+4*$11; //@line 1665 "pyexpat.c"
        var $13=HEAP[$12]; //@line 1665 "pyexpat.c"
        var $14=$visit_addr; //@line 1665 "pyexpat.c"
        var $15=$arg_addr; //@line 1665 "pyexpat.c"
        var $16=FUNCTION_TABLE[$14]($13, $15); //@line 1665 "pyexpat.c"
        $vret=$16; //@line 1665 "pyexpat.c"
        var $17=$vret; //@line 1665 "pyexpat.c"
        var $18=($17)!=0; //@line 1665 "pyexpat.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1665 "pyexpat.c"
      case 3: // $bb2
        var $19=$vret; //@line 1665 "pyexpat.c"
        $0=$19; //@line 1665 "pyexpat.c"
        __label__ = 7; break; //@line 1665 "pyexpat.c"
      case 4: // $bb3
        var $20=$i; //@line 1664 "pyexpat.c"
        var $21=($20) + 1; //@line 1664 "pyexpat.c"
        $i=$21; //@line 1664 "pyexpat.c"
        __label__ = 5; break; //@line 1664 "pyexpat.c"
      case 5: // $bb4
        var $22=$i; //@line 1664 "pyexpat.c"
        var $23=_handler_info+$22*20; //@line 1664 "pyexpat.c"
        var $24=$23; //@line 1664 "pyexpat.c"
        var $25=HEAP[$24]; //@line 1664 "pyexpat.c"
        var $26=($25)!=0; //@line 1664 "pyexpat.c"
        if ($26) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 1664 "pyexpat.c"
      case 6: // $bb5
        $0=0; //@line 1666 "pyexpat.c"
        __label__ = 7; break; //@line 1666 "pyexpat.c"
      case 7: // $bb6
        var $27=$0; //@line 1665 "pyexpat.c"
        $retval=$27; //@line 1665 "pyexpat.c"
        var $retval7=$retval; //@line 1665 "pyexpat.c"
        ;
        return $retval7; //@line 1665 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_clear($op) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $op_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        $op_addr=$op;
        var $1=$op_addr; //@line 1672 "pyexpat.c"
        _clear_handlers($1, 0); //@line 1672 "pyexpat.c"
        var $2=$op_addr; //@line 1673 "pyexpat.c"
        var $3=$2+44; //@line 1673 "pyexpat.c"
        var $4=HEAP[$3]; //@line 1673 "pyexpat.c"
        var $5=($4)!=0; //@line 1673 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1673 "pyexpat.c"
      case 1: // $bb
        var $6=$op_addr; //@line 1673 "pyexpat.c"
        var $7=$6+44; //@line 1673 "pyexpat.c"
        var $8=HEAP[$7]; //@line 1673 "pyexpat.c"
        $_py_tmp=$8; //@line 1673 "pyexpat.c"
        var $9=$op_addr; //@line 1673 "pyexpat.c"
        var $10=$9+44; //@line 1673 "pyexpat.c"
        HEAP[$10]=0; //@line 1673 "pyexpat.c"
        var $11=$_py_tmp; //@line 1673 "pyexpat.c"
        var $12=$11; //@line 1673 "pyexpat.c"
        var $13=HEAP[$12]; //@line 1673 "pyexpat.c"
        var $14=($13) - 1; //@line 1673 "pyexpat.c"
        var $15=$_py_tmp; //@line 1673 "pyexpat.c"
        var $16=$15; //@line 1673 "pyexpat.c"
        HEAP[$16]=$14; //@line 1673 "pyexpat.c"
        var $17=$_py_tmp; //@line 1673 "pyexpat.c"
        var $18=$17; //@line 1673 "pyexpat.c"
        var $19=HEAP[$18]; //@line 1673 "pyexpat.c"
        var $20=($19)==0; //@line 1673 "pyexpat.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1673 "pyexpat.c"
      case 2: // $bb1
        var $21=$_py_tmp; //@line 1673 "pyexpat.c"
        var $22=$21+4; //@line 1673 "pyexpat.c"
        var $23=HEAP[$22]; //@line 1673 "pyexpat.c"
        var $24=$23+24; //@line 1673 "pyexpat.c"
        var $25=HEAP[$24]; //@line 1673 "pyexpat.c"
        var $26=$_py_tmp; //@line 1673 "pyexpat.c"
        FUNCTION_TABLE[$25]($26); //@line 1673 "pyexpat.c"
        __label__ = 3; break; //@line 1673 "pyexpat.c"
      case 3: // $bb2
        $0=0; //@line 1674 "pyexpat.c"
        var $27=$0; //@line 1674 "pyexpat.c"
        $retval=$27; //@line 1674 "pyexpat.c"
        var $retval3=$retval; //@line 1674 "pyexpat.c"
        ;
        return $retval3; //@line 1674 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _pyexpat_ParserCreate($notused, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $notused_addr;
        var $args_addr;
        var $kw_addr;
        var $retval;
        var $0;
        var $encoding=__stackBase__;
        var $namespace_separator=__stackBase__+4;
        var $intern=__stackBase__+8;
        var $result;
        var $intern_decref;
        $notused_addr=$notused;
        $args_addr=$args;
        $kw_addr=$kw;
        HEAP[$encoding]=0; //@line 1725 "pyexpat.c"
        HEAP[$namespace_separator]=0; //@line 1726 "pyexpat.c"
        HEAP[$intern]=0; //@line 1727 "pyexpat.c"
        $intern_decref=0; //@line 1729 "pyexpat.c"
        var $1=$args_addr; //@line 1733 "pyexpat.c"
        var $2=$kw_addr; //@line 1733 "pyexpat.c"
        var $3=_PyArg_ParseTupleAndKeywords($1, $2, __str85, _kwlist_11530, allocate([$encoding,0,0,0,$namespace_separator,0,0,0,$intern,0,0,0], ["i8**",0,0,0,"i8**",0,0,0,"%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 1733 "pyexpat.c"
        var $4=($3)==0; //@line 1733 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1733 "pyexpat.c"
      case 1: // $bb
        $0=0; //@line 1735 "pyexpat.c"
        __label__ = 17; break; //@line 1735 "pyexpat.c"
      case 2: // $bb1
        var $5=HEAP[$namespace_separator]; //@line 1736 "pyexpat.c"
        var $6=($5)!=0; //@line 1736 "pyexpat.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1736 "pyexpat.c"
      case 3: // $bb2
        var $7=HEAP[$namespace_separator]; //@line 1736 "pyexpat.c"
        var $8=_strlen($7); //@line 1736 "pyexpat.c"
        var $9=($8) > 1; //@line 1736 "pyexpat.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1736 "pyexpat.c"
      case 4: // $bb3
        var $10=HEAP[_PyExc_ValueError]; //@line 1738 "pyexpat.c"
        _PyErr_SetString($10, __str88); //@line 1738 "pyexpat.c"
        $0=0; //@line 1741 "pyexpat.c"
        __label__ = 17; break; //@line 1741 "pyexpat.c"
      case 5: // $bb4
        var $11=HEAP[$intern]; //@line 1745 "pyexpat.c"
        var $12=($11)==(__Py_NoneStruct); //@line 1745 "pyexpat.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1745 "pyexpat.c"
      case 6: // $bb5
        HEAP[$intern]=0; //@line 1746 "pyexpat.c"
        __label__ = 13; break; //@line 1746 "pyexpat.c"
      case 7: // $bb6
        var $13=HEAP[$intern]; //@line 1747 "pyexpat.c"
        var $14=($13)==0; //@line 1747 "pyexpat.c"
        if ($14) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 1747 "pyexpat.c"
      case 8: // $bb7
        var $15=_PyDict_New(); //@line 1748 "pyexpat.c"
        HEAP[$intern]=$15; //@line 1748 "pyexpat.c"
        var $16=HEAP[$intern]; //@line 1749 "pyexpat.c"
        var $17=($16)==0; //@line 1749 "pyexpat.c"
        if ($17) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1749 "pyexpat.c"
      case 9: // $bb8
        $0=0; //@line 1750 "pyexpat.c"
        __label__ = 17; break; //@line 1750 "pyexpat.c"
      case 10: // $bb9
        $intern_decref=1; //@line 1751 "pyexpat.c"
        __label__ = 13; break; //@line 1751 "pyexpat.c"
      case 11: // $bb10
        var $18=HEAP[$intern]; //@line 1753 "pyexpat.c"
        var $19=$18+4; //@line 1753 "pyexpat.c"
        var $20=HEAP[$19]; //@line 1753 "pyexpat.c"
        var $21=$20+84; //@line 1753 "pyexpat.c"
        var $22=HEAP[$21]; //@line 1753 "pyexpat.c"
        var $23=($22) & 536870912; //@line 1753 "pyexpat.c"
        var $24=($23)==0; //@line 1753 "pyexpat.c"
        if ($24) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1753 "pyexpat.c"
      case 12: // $bb11
        var $25=HEAP[_PyExc_TypeError]; //@line 1754 "pyexpat.c"
        _PyErr_SetString($25, __str89); //@line 1754 "pyexpat.c"
        $0=0; //@line 1755 "pyexpat.c"
        __label__ = 17; break; //@line 1755 "pyexpat.c"
      case 13: // $bb12
        var $26=HEAP[$intern]; //@line 1758 "pyexpat.c"
        var $27=HEAP[$namespace_separator]; //@line 1758 "pyexpat.c"
        var $28=HEAP[$encoding]; //@line 1758 "pyexpat.c"
        var $29=_newxmlparseobject($28, $27, $26); //@line 1758 "pyexpat.c"
        $result=$29; //@line 1758 "pyexpat.c"
        var $30=$intern_decref; //@line 1759 "pyexpat.c"
        var $31=($30)!=0; //@line 1759 "pyexpat.c"
        if ($31) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 1759 "pyexpat.c"
      case 14: // $bb13
        var $32=HEAP[$intern]; //@line 1760 "pyexpat.c"
        var $33=$32; //@line 1760 "pyexpat.c"
        var $34=HEAP[$33]; //@line 1760 "pyexpat.c"
        var $35=($34) - 1; //@line 1760 "pyexpat.c"
        var $36=$32; //@line 1760 "pyexpat.c"
        HEAP[$36]=$35; //@line 1760 "pyexpat.c"
        var $37=$32; //@line 1760 "pyexpat.c"
        var $38=HEAP[$37]; //@line 1760 "pyexpat.c"
        var $39=($38)==0; //@line 1760 "pyexpat.c"
        if ($39) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1760 "pyexpat.c"
      case 15: // $bb14
        var $40=HEAP[$intern]; //@line 1760 "pyexpat.c"
        var $41=$40+4; //@line 1760 "pyexpat.c"
        var $42=HEAP[$41]; //@line 1760 "pyexpat.c"
        var $43=$42+24; //@line 1760 "pyexpat.c"
        var $44=HEAP[$43]; //@line 1760 "pyexpat.c"
        var $45=HEAP[$intern]; //@line 1760 "pyexpat.c"
        FUNCTION_TABLE[$44]($45); //@line 1760 "pyexpat.c"
        __label__ = 16; break; //@line 1760 "pyexpat.c"
      case 16: // $bb15
        var $46=$result; //@line 1762 "pyexpat.c"
        $0=$46; //@line 1762 "pyexpat.c"
        __label__ = 17; break; //@line 1762 "pyexpat.c"
      case 17: // $bb16
        var $47=$0; //@line 1735 "pyexpat.c"
        $retval=$47; //@line 1735 "pyexpat.c"
        var $retval17=$retval; //@line 1735 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 1735 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _pyexpat_ErrorString($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $code=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$code]=0; //@line 1772 "pyexpat.c"
        var $1=$args_addr; //@line 1774 "pyexpat.c"
        var $2=_PyArg_ParseTuple($1, __str90, allocate([$code,0,0,0], ["i32*",0,0,0], ALLOC_STACK)); //@line 1774 "pyexpat.c"
        var $3=($2)==0; //@line 1774 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1774 "pyexpat.c"
      case 1: // $bb
        $0=0; //@line 1775 "pyexpat.c"
        __label__ = 3; break; //@line 1775 "pyexpat.c"
      case 2: // $bb1
        var $4=HEAP[$code]; //@line 1776 "pyexpat.c"
        var $5=_PyExpat_XML_ErrorString($4); //@line 1776 "pyexpat.c"
        var $6=_Py_BuildValue(__str51, allocate([$5,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 1776 "pyexpat.c"
        $0=$6; //@line 1776 "pyexpat.c"
        __label__ = 3; break; //@line 1776 "pyexpat.c"
      case 3: // $bb2
        var $7=$0; //@line 1775 "pyexpat.c"
        $retval=$7; //@line 1775 "pyexpat.c"
        var $retval3=$retval; //@line 1775 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1775 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initpyexpat() {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $m;
        var $d;
        var $errmod_name;
        var $errors_module;
        var $modelmod_name;
        var $model_module;
        var $sys_modules;
        var $version;
        var $capi_object;
        var $info=__stackBase__;
        var $features;
        var $list;
        var $i;
        var $ok;
        var $item;
        var $0=_PyString_FromString(__str93); //@line 1819 "pyexpat.c"
        $errmod_name=$0; //@line 1819 "pyexpat.c"
        var $1=$errmod_name; //@line 1828 "pyexpat.c"
        var $2=($1)==0; //@line 1828 "pyexpat.c"
        if ($2) { __label__ = 35; break; } else { __label__ = 1; break; } //@line 1828 "pyexpat.c"
      case 1: // $bb
        var $3=_PyString_FromString(__str94); //@line 1830 "pyexpat.c"
        $modelmod_name=$3; //@line 1830 "pyexpat.c"
        var $4=$modelmod_name; //@line 1831 "pyexpat.c"
        var $5=($4)==0; //@line 1831 "pyexpat.c"
        if ($5) { __label__ = 35; break; } else { __label__ = 2; break; } //@line 1831 "pyexpat.c"
      case 2: // $bb1
        HEAP[_Xmlparsetype+4]=_PyType_Type; //@line 1834 "pyexpat.c"
        var $6=_Py_InitModule4(__str95, _pyexpat_methods, _pyexpat_module_documentation, 0, 1013); //@line 1837 "pyexpat.c"
        $m=$6; //@line 1837 "pyexpat.c"
        var $7=$m; //@line 1839 "pyexpat.c"
        var $8=($7)==0; //@line 1839 "pyexpat.c"
        if ($8) { __label__ = 35; break; } else { __label__ = 3; break; } //@line 1839 "pyexpat.c"
      case 3: // $bb2
        var $9=HEAP[_ErrorObject]; //@line 1843 "pyexpat.c"
        var $10=($9)==0; //@line 1843 "pyexpat.c"
        if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1843 "pyexpat.c"
      case 4: // $bb3
        var $11=_PyErr_NewException(__str96, 0, 0); //@line 1844 "pyexpat.c"
        HEAP[_ErrorObject]=$11; //@line 1844 "pyexpat.c"
        var $12=HEAP[_ErrorObject]; //@line 1846 "pyexpat.c"
        var $13=($12)==0; //@line 1846 "pyexpat.c"
        if ($13) { __label__ = 35; break; } else { __label__ = 5; break; } //@line 1846 "pyexpat.c"
      case 5: // $bb4
        var $14=HEAP[_ErrorObject]; //@line 1849 "pyexpat.c"
        var $15=$14; //@line 1849 "pyexpat.c"
        var $16=HEAP[$15]; //@line 1849 "pyexpat.c"
        var $17=($16) + 1; //@line 1849 "pyexpat.c"
        var $18=$14; //@line 1849 "pyexpat.c"
        HEAP[$18]=$17; //@line 1849 "pyexpat.c"
        var $19=HEAP[_ErrorObject]; //@line 1850 "pyexpat.c"
        var $20=$m; //@line 1850 "pyexpat.c"
        var $21=_PyModule_AddObject($20, __str97, $19); //@line 1850 "pyexpat.c"
        var $22=HEAP[_ErrorObject]; //@line 1851 "pyexpat.c"
        var $23=$22; //@line 1851 "pyexpat.c"
        var $24=HEAP[$23]; //@line 1851 "pyexpat.c"
        var $25=($24) + 1; //@line 1851 "pyexpat.c"
        var $26=$22; //@line 1851 "pyexpat.c"
        HEAP[$26]=$25; //@line 1851 "pyexpat.c"
        var $27=HEAP[_ErrorObject]; //@line 1852 "pyexpat.c"
        var $28=$m; //@line 1852 "pyexpat.c"
        var $29=_PyModule_AddObject($28, __str98, $27); //@line 1852 "pyexpat.c"
        var $30=HEAP[_Xmlparsetype]; //@line 1853 "pyexpat.c"
        var $31=($30) + 1; //@line 1853 "pyexpat.c"
        HEAP[_Xmlparsetype]=$31; //@line 1853 "pyexpat.c"
        var $32=$m; //@line 1854 "pyexpat.c"
        var $33=_PyModule_AddObject($32, __str99, _Xmlparsetype); //@line 1854 "pyexpat.c"
        var $34=_PyString_FromString(__str100); //@line 1856 "pyexpat.c"
        $version=$34; //@line 1856 "pyexpat.c"
        var $35=($34)==0; //@line 1857 "pyexpat.c"
        if ($35) { __label__ = 35; break; } else { __label__ = 6; break; } //@line 1857 "pyexpat.c"
      case 6: // $bb5
        var $36=$m; //@line 1859 "pyexpat.c"
        var $37=$version; //@line 1859 "pyexpat.c"
        var $38=_PyModule_AddObject($36, __str101, $37); //@line 1859 "pyexpat.c"
        var $39=_PyExpat_XML_ExpatVersion(); //@line 1860 "pyexpat.c"
        var $40=$m; //@line 1860 "pyexpat.c"
        var $41=_PyModule_AddStringConstant($40, __str102, $39); //@line 1860 "pyexpat.c"
        _PyExpat_XML_ExpatVersionInfo($info); //@line 1863 "pyexpat.c"
        var $42=$info+8; //@line 1864 "pyexpat.c"
        var $43=HEAP[$42]; //@line 1864 "pyexpat.c"
        var $44=$info+4; //@line 1864 "pyexpat.c"
        var $45=HEAP[$44]; //@line 1864 "pyexpat.c"
        var $46=$info; //@line 1864 "pyexpat.c"
        var $47=HEAP[$46]; //@line 1864 "pyexpat.c"
        var $48=_Py_BuildValue(__str103, allocate([$47,0,0,0,$45,0,0,0,$43,0,0,0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 1864 "pyexpat.c"
        var $49=$m; //@line 1864 "pyexpat.c"
        var $50=_PyModule_AddObject($49, __str104, $48); //@line 1864 "pyexpat.c"
        _init_template_buffer(); //@line 1869 "pyexpat.c"
        var $51=$m; //@line 1875 "pyexpat.c"
        var $52=_PyModule_AddStringConstant($51, __str105, __str106); //@line 1875 "pyexpat.c"
        var $53=_PySys_GetObject(__str107); //@line 1877 "pyexpat.c"
        $sys_modules=$53; //@line 1877 "pyexpat.c"
        var $54=$m; //@line 1878 "pyexpat.c"
        var $55=_PyModule_GetDict($54); //@line 1878 "pyexpat.c"
        $d=$55; //@line 1878 "pyexpat.c"
        var $56=$d; //@line 1879 "pyexpat.c"
        var $57=$errmod_name; //@line 1879 "pyexpat.c"
        var $58=_PyDict_GetItem($56, $57); //@line 1879 "pyexpat.c"
        $errors_module=$58; //@line 1879 "pyexpat.c"
        var $59=$errors_module; //@line 1880 "pyexpat.c"
        var $60=($59)==0; //@line 1880 "pyexpat.c"
        if ($60) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1880 "pyexpat.c"
      case 7: // $bb6
        var $61=_PyModule_New(__str93); //@line 1881 "pyexpat.c"
        $errors_module=$61; //@line 1881 "pyexpat.c"
        var $62=$errors_module; //@line 1882 "pyexpat.c"
        var $63=($62)!=0; //@line 1882 "pyexpat.c"
        if ($63) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1882 "pyexpat.c"
      case 8: // $bb7
        var $64=$sys_modules; //@line 1883 "pyexpat.c"
        var $65=$errmod_name; //@line 1883 "pyexpat.c"
        var $66=$errors_module; //@line 1883 "pyexpat.c"
        var $67=_PyDict_SetItem($64, $65, $66); //@line 1883 "pyexpat.c"
        var $68=$m; //@line 1885 "pyexpat.c"
        var $69=$errors_module; //@line 1885 "pyexpat.c"
        var $70=_PyModule_AddObject($68, __str108, $69); //@line 1885 "pyexpat.c"
        __label__ = 9; break; //@line 1885 "pyexpat.c"
      case 9: // $bb8
        var $71=$errmod_name; //@line 1888 "pyexpat.c"
        var $72=$71; //@line 1888 "pyexpat.c"
        var $73=HEAP[$72]; //@line 1888 "pyexpat.c"
        var $74=($73) - 1; //@line 1888 "pyexpat.c"
        var $75=$errmod_name; //@line 1888 "pyexpat.c"
        var $76=$75; //@line 1888 "pyexpat.c"
        HEAP[$76]=$74; //@line 1888 "pyexpat.c"
        var $77=$errmod_name; //@line 1888 "pyexpat.c"
        var $78=$77; //@line 1888 "pyexpat.c"
        var $79=HEAP[$78]; //@line 1888 "pyexpat.c"
        var $80=($79)==0; //@line 1888 "pyexpat.c"
        if ($80) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1888 "pyexpat.c"
      case 10: // $bb9
        var $81=$errmod_name; //@line 1888 "pyexpat.c"
        var $82=$81+4; //@line 1888 "pyexpat.c"
        var $83=HEAP[$82]; //@line 1888 "pyexpat.c"
        var $84=$83+24; //@line 1888 "pyexpat.c"
        var $85=HEAP[$84]; //@line 1888 "pyexpat.c"
        var $86=$errmod_name; //@line 1888 "pyexpat.c"
        FUNCTION_TABLE[$85]($86); //@line 1888 "pyexpat.c"
        __label__ = 11; break; //@line 1888 "pyexpat.c"
      case 11: // $bb10
        var $87=$d; //@line 1889 "pyexpat.c"
        var $88=$modelmod_name; //@line 1889 "pyexpat.c"
        var $89=_PyDict_GetItem($87, $88); //@line 1889 "pyexpat.c"
        $model_module=$89; //@line 1889 "pyexpat.c"
        var $90=($89)==0; //@line 1890 "pyexpat.c"
        if ($90) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 1890 "pyexpat.c"
      case 12: // $bb11
        var $91=_PyModule_New(__str94); //@line 1891 "pyexpat.c"
        $model_module=$91; //@line 1891 "pyexpat.c"
        var $92=$model_module; //@line 1892 "pyexpat.c"
        var $93=($92)!=0; //@line 1892 "pyexpat.c"
        if ($93) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1892 "pyexpat.c"
      case 13: // $bb12
        var $94=$sys_modules; //@line 1893 "pyexpat.c"
        var $95=$modelmod_name; //@line 1893 "pyexpat.c"
        var $96=$model_module; //@line 1893 "pyexpat.c"
        var $97=_PyDict_SetItem($94, $95, $96); //@line 1893 "pyexpat.c"
        var $98=$m; //@line 1895 "pyexpat.c"
        var $99=$model_module; //@line 1895 "pyexpat.c"
        var $100=_PyModule_AddObject($98, __str109, $99); //@line 1895 "pyexpat.c"
        __label__ = 14; break; //@line 1895 "pyexpat.c"
      case 14: // $bb13
        var $101=$modelmod_name; //@line 1898 "pyexpat.c"
        var $102=$101; //@line 1898 "pyexpat.c"
        var $103=HEAP[$102]; //@line 1898 "pyexpat.c"
        var $104=($103) - 1; //@line 1898 "pyexpat.c"
        var $105=$modelmod_name; //@line 1898 "pyexpat.c"
        var $106=$105; //@line 1898 "pyexpat.c"
        HEAP[$106]=$104; //@line 1898 "pyexpat.c"
        var $107=$modelmod_name; //@line 1898 "pyexpat.c"
        var $108=$107; //@line 1898 "pyexpat.c"
        var $109=HEAP[$108]; //@line 1898 "pyexpat.c"
        var $110=($109)==0; //@line 1898 "pyexpat.c"
        if ($110) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1898 "pyexpat.c"
      case 15: // $bb14
        var $111=$modelmod_name; //@line 1898 "pyexpat.c"
        var $112=$111+4; //@line 1898 "pyexpat.c"
        var $113=HEAP[$112]; //@line 1898 "pyexpat.c"
        var $114=$113+24; //@line 1898 "pyexpat.c"
        var $115=HEAP[$114]; //@line 1898 "pyexpat.c"
        var $116=$modelmod_name; //@line 1898 "pyexpat.c"
        FUNCTION_TABLE[$115]($116); //@line 1898 "pyexpat.c"
        __label__ = 16; break; //@line 1898 "pyexpat.c"
      case 16: // $bb15
        var $117=$errors_module; //@line 1899 "pyexpat.c"
        var $118=($117)==0; //@line 1899 "pyexpat.c"
        if ($118) { __label__ = 35; break; } else { __label__ = 17; break; } //@line 1899 "pyexpat.c"
      case 17: // $bb16
        var $119=$model_module; //@line 1899 "pyexpat.c"
        var $120=($119)==0; //@line 1899 "pyexpat.c"
        if ($120) { __label__ = 35; break; } else { __label__ = 18; break; } //@line 1899 "pyexpat.c"
      case 18: // $bb18
        var $121=_PyExpat_XML_GetFeatureList(); //@line 1905 "pyexpat.c"
        $features=$121; //@line 1905 "pyexpat.c"
        var $122=_PyList_New(0); //@line 1906 "pyexpat.c"
        $list=$122; //@line 1906 "pyexpat.c"
        var $123=$list; //@line 1907 "pyexpat.c"
        var $124=($123)==0; //@line 1907 "pyexpat.c"
        if ($124) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1907 "pyexpat.c"
      case 19: // $bb19
        _PyErr_Clear(); //@line 1909 "pyexpat.c"
        __label__ = 33; break; //@line 1909 "pyexpat.c"
      case 20: // $bb20
        $i=0; //@line 1911 "pyexpat.c"
        __label__ = 30; break; //@line 1911 "pyexpat.c"
      case 21: // $bb21
        var $125=$features; //@line 1915 "pyexpat.c"
        var $126=$i; //@line 1915 "pyexpat.c"
        var $127=$125+12*$126; //@line 1915 "pyexpat.c"
        var $128=$127+8; //@line 1915 "pyexpat.c"
        var $129=HEAP[$128]; //@line 1915 "pyexpat.c"
        var $130=$features; //@line 1915 "pyexpat.c"
        var $131=$i; //@line 1915 "pyexpat.c"
        var $132=$130+12*$131; //@line 1915 "pyexpat.c"
        var $133=$132+4; //@line 1915 "pyexpat.c"
        var $134=HEAP[$133]; //@line 1915 "pyexpat.c"
        var $135=_Py_BuildValue(__str110, allocate([$134,0,0,0,$129,0,0,0], ["i8*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 1915 "pyexpat.c"
        $item=$135; //@line 1915 "pyexpat.c"
        var $136=$item; //@line 1916 "pyexpat.c"
        var $137=($136)==0; //@line 1916 "pyexpat.c"
        var $138=$list; //@line 1917 "pyexpat.c"
        if ($137) { __label__ = 22; break; } else { __label__ = 25; break; } //@line 1916 "pyexpat.c"
      case 22: // $bb22
        var $139=$138; //@line 1917 "pyexpat.c"
        var $140=HEAP[$139]; //@line 1917 "pyexpat.c"
        var $141=($140) - 1; //@line 1917 "pyexpat.c"
        var $142=$list; //@line 1917 "pyexpat.c"
        var $143=$142; //@line 1917 "pyexpat.c"
        HEAP[$143]=$141; //@line 1917 "pyexpat.c"
        var $144=$list; //@line 1917 "pyexpat.c"
        var $145=$144; //@line 1917 "pyexpat.c"
        var $146=HEAP[$145]; //@line 1917 "pyexpat.c"
        var $147=($146)==0; //@line 1917 "pyexpat.c"
        if ($147) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1917 "pyexpat.c"
      case 23: // $bb23
        var $148=$list; //@line 1917 "pyexpat.c"
        var $149=$148+4; //@line 1917 "pyexpat.c"
        var $150=HEAP[$149]; //@line 1917 "pyexpat.c"
        var $151=$150+24; //@line 1917 "pyexpat.c"
        var $152=HEAP[$151]; //@line 1917 "pyexpat.c"
        var $153=$list; //@line 1917 "pyexpat.c"
        FUNCTION_TABLE[$152]($153); //@line 1917 "pyexpat.c"
        __label__ = 24; break; //@line 1917 "pyexpat.c"
      case 24: // $bb31_thread
        $list=0; //@line 1918 "pyexpat.c"
        __label__ = 33; break;
      case 25: // $bb25
        var $154=$item; //@line 1921 "pyexpat.c"
        var $155=_PyList_Append($138, $154); //@line 1921 "pyexpat.c"
        $ok=$155; //@line 1921 "pyexpat.c"
        var $156=$item; //@line 1922 "pyexpat.c"
        var $157=$156; //@line 1922 "pyexpat.c"
        var $158=HEAP[$157]; //@line 1922 "pyexpat.c"
        var $159=($158) - 1; //@line 1922 "pyexpat.c"
        var $160=$item; //@line 1922 "pyexpat.c"
        var $161=$160; //@line 1922 "pyexpat.c"
        HEAP[$161]=$159; //@line 1922 "pyexpat.c"
        var $162=$item; //@line 1922 "pyexpat.c"
        var $163=$162; //@line 1922 "pyexpat.c"
        var $164=HEAP[$163]; //@line 1922 "pyexpat.c"
        var $165=($164)==0; //@line 1922 "pyexpat.c"
        if ($165) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1922 "pyexpat.c"
      case 26: // $bb26
        var $166=$item; //@line 1922 "pyexpat.c"
        var $167=$166+4; //@line 1922 "pyexpat.c"
        var $168=HEAP[$167]; //@line 1922 "pyexpat.c"
        var $169=$168+24; //@line 1922 "pyexpat.c"
        var $170=HEAP[$169]; //@line 1922 "pyexpat.c"
        var $171=$item; //@line 1922 "pyexpat.c"
        FUNCTION_TABLE[$170]($171); //@line 1922 "pyexpat.c"
        __label__ = 27; break; //@line 1922 "pyexpat.c"
      case 27: // $bb27
        var $172=$ok; //@line 1923 "pyexpat.c"
        var $173=($172) < 0; //@line 1923 "pyexpat.c"
        if ($173) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1923 "pyexpat.c"
      case 28: // $bb28
        _PyErr_Clear(); //@line 1924 "pyexpat.c"
        __label__ = 31; break; //@line 1924 "pyexpat.c"
      case 29: // $bb29
        var $174=$i; //@line 1912 "pyexpat.c"
        var $175=($174) + 1; //@line 1912 "pyexpat.c"
        $i=$175; //@line 1912 "pyexpat.c"
        __label__ = 30; break; //@line 1912 "pyexpat.c"
      case 30: // $bb30
        var $176=$features; //@line 1912 "pyexpat.c"
        var $177=$i; //@line 1912 "pyexpat.c"
        var $178=$176+12*$177; //@line 1912 "pyexpat.c"
        var $179=$178; //@line 1912 "pyexpat.c"
        var $180=HEAP[$179]; //@line 1912 "pyexpat.c"
        var $181=($180)!=0; //@line 1912 "pyexpat.c"
        if ($181) { __label__ = 21; break; } else { __label__ = 31; break; } //@line 1912 "pyexpat.c"
      case 31: // $bb31
        var $_pr=$list;
        var $182=($_pr)!=0; //@line 1928 "pyexpat.c"
        if ($182) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1928 "pyexpat.c"
      case 32: // $bb32
        var $183=$m; //@line 1929 "pyexpat.c"
        var $184=$list; //@line 1929 "pyexpat.c"
        var $185=_PyModule_AddObject($183, __str111, $184); //@line 1929 "pyexpat.c"
        __label__ = 33; break; //@line 1929 "pyexpat.c"
      case 33: // $bb33
        var $186=_PyExpat_XML_ErrorString(1); //@line 1938 "pyexpat.c"
        var $187=$errors_module; //@line 1938 "pyexpat.c"
        var $188=_PyModule_AddStringConstant($187, __str112, $186); //@line 1938 "pyexpat.c"
        var $189=_PyExpat_XML_ErrorString(2); //@line 1939 "pyexpat.c"
        var $190=$errors_module; //@line 1939 "pyexpat.c"
        var $191=_PyModule_AddStringConstant($190, __str113, $189); //@line 1939 "pyexpat.c"
        var $192=_PyExpat_XML_ErrorString(3); //@line 1940 "pyexpat.c"
        var $193=$errors_module; //@line 1940 "pyexpat.c"
        var $194=_PyModule_AddStringConstant($193, __str114, $192); //@line 1940 "pyexpat.c"
        var $195=_PyExpat_XML_ErrorString(4); //@line 1941 "pyexpat.c"
        var $196=$errors_module; //@line 1941 "pyexpat.c"
        var $197=_PyModule_AddStringConstant($196, __str115, $195); //@line 1941 "pyexpat.c"
        var $198=_PyExpat_XML_ErrorString(5); //@line 1942 "pyexpat.c"
        var $199=$errors_module; //@line 1942 "pyexpat.c"
        var $200=_PyModule_AddStringConstant($199, __str116, $198); //@line 1942 "pyexpat.c"
        var $201=_PyExpat_XML_ErrorString(6); //@line 1943 "pyexpat.c"
        var $202=$errors_module; //@line 1943 "pyexpat.c"
        var $203=_PyModule_AddStringConstant($202, __str117, $201); //@line 1943 "pyexpat.c"
        var $204=_PyExpat_XML_ErrorString(7); //@line 1944 "pyexpat.c"
        var $205=$errors_module; //@line 1944 "pyexpat.c"
        var $206=_PyModule_AddStringConstant($205, __str118, $204); //@line 1944 "pyexpat.c"
        var $207=_PyExpat_XML_ErrorString(8); //@line 1945 "pyexpat.c"
        var $208=$errors_module; //@line 1945 "pyexpat.c"
        var $209=_PyModule_AddStringConstant($208, __str119, $207); //@line 1945 "pyexpat.c"
        var $210=_PyExpat_XML_ErrorString(9); //@line 1946 "pyexpat.c"
        var $211=$errors_module; //@line 1946 "pyexpat.c"
        var $212=_PyModule_AddStringConstant($211, __str120, $210); //@line 1946 "pyexpat.c"
        var $213=_PyExpat_XML_ErrorString(10); //@line 1947 "pyexpat.c"
        var $214=$errors_module; //@line 1947 "pyexpat.c"
        var $215=_PyModule_AddStringConstant($214, __str121, $213); //@line 1947 "pyexpat.c"
        var $216=_PyExpat_XML_ErrorString(11); //@line 1948 "pyexpat.c"
        var $217=$errors_module; //@line 1948 "pyexpat.c"
        var $218=_PyModule_AddStringConstant($217, __str122, $216); //@line 1948 "pyexpat.c"
        var $219=_PyExpat_XML_ErrorString(12); //@line 1949 "pyexpat.c"
        var $220=$errors_module; //@line 1949 "pyexpat.c"
        var $221=_PyModule_AddStringConstant($220, __str123, $219); //@line 1949 "pyexpat.c"
        var $222=_PyExpat_XML_ErrorString(13); //@line 1950 "pyexpat.c"
        var $223=$errors_module; //@line 1950 "pyexpat.c"
        var $224=_PyModule_AddStringConstant($223, __str124, $222); //@line 1950 "pyexpat.c"
        var $225=_PyExpat_XML_ErrorString(14); //@line 1951 "pyexpat.c"
        var $226=$errors_module; //@line 1951 "pyexpat.c"
        var $227=_PyModule_AddStringConstant($226, __str125, $225); //@line 1951 "pyexpat.c"
        var $228=_PyExpat_XML_ErrorString(15); //@line 1952 "pyexpat.c"
        var $229=$errors_module; //@line 1952 "pyexpat.c"
        var $230=_PyModule_AddStringConstant($229, __str126, $228); //@line 1952 "pyexpat.c"
        var $231=_PyExpat_XML_ErrorString(16); //@line 1953 "pyexpat.c"
        var $232=$errors_module; //@line 1953 "pyexpat.c"
        var $233=_PyModule_AddStringConstant($232, __str127, $231); //@line 1953 "pyexpat.c"
        var $234=_PyExpat_XML_ErrorString(17); //@line 1954 "pyexpat.c"
        var $235=$errors_module; //@line 1954 "pyexpat.c"
        var $236=_PyModule_AddStringConstant($235, __str128, $234); //@line 1954 "pyexpat.c"
        var $237=_PyExpat_XML_ErrorString(18); //@line 1955 "pyexpat.c"
        var $238=$errors_module; //@line 1955 "pyexpat.c"
        var $239=_PyModule_AddStringConstant($238, __str129, $237); //@line 1955 "pyexpat.c"
        var $240=_PyExpat_XML_ErrorString(19); //@line 1956 "pyexpat.c"
        var $241=$errors_module; //@line 1956 "pyexpat.c"
        var $242=_PyModule_AddStringConstant($241, __str130, $240); //@line 1956 "pyexpat.c"
        var $243=_PyExpat_XML_ErrorString(20); //@line 1957 "pyexpat.c"
        var $244=$errors_module; //@line 1957 "pyexpat.c"
        var $245=_PyModule_AddStringConstant($244, __str131, $243); //@line 1957 "pyexpat.c"
        var $246=_PyExpat_XML_ErrorString(21); //@line 1958 "pyexpat.c"
        var $247=$errors_module; //@line 1958 "pyexpat.c"
        var $248=_PyModule_AddStringConstant($247, __str132, $246); //@line 1958 "pyexpat.c"
        var $249=_PyExpat_XML_ErrorString(22); //@line 1959 "pyexpat.c"
        var $250=$errors_module; //@line 1959 "pyexpat.c"
        var $251=_PyModule_AddStringConstant($250, __str133, $249); //@line 1959 "pyexpat.c"
        var $252=_PyExpat_XML_ErrorString(23); //@line 1960 "pyexpat.c"
        var $253=$errors_module; //@line 1960 "pyexpat.c"
        var $254=_PyModule_AddStringConstant($253, __str134, $252); //@line 1960 "pyexpat.c"
        var $255=_PyExpat_XML_ErrorString(24); //@line 1961 "pyexpat.c"
        var $256=$errors_module; //@line 1961 "pyexpat.c"
        var $257=_PyModule_AddStringConstant($256, __str135, $255); //@line 1961 "pyexpat.c"
        var $258=_PyExpat_XML_ErrorString(25); //@line 1962 "pyexpat.c"
        var $259=$errors_module; //@line 1962 "pyexpat.c"
        var $260=_PyModule_AddStringConstant($259, __str136, $258); //@line 1962 "pyexpat.c"
        var $261=_PyExpat_XML_ErrorString(26); //@line 1963 "pyexpat.c"
        var $262=$errors_module; //@line 1963 "pyexpat.c"
        var $263=_PyModule_AddStringConstant($262, __str137, $261); //@line 1963 "pyexpat.c"
        var $264=_PyExpat_XML_ErrorString(27); //@line 1965 "pyexpat.c"
        var $265=$errors_module; //@line 1965 "pyexpat.c"
        var $266=_PyModule_AddStringConstant($265, __str138, $264); //@line 1965 "pyexpat.c"
        var $267=_PyExpat_XML_ErrorString(28); //@line 1967 "pyexpat.c"
        var $268=$errors_module; //@line 1967 "pyexpat.c"
        var $269=_PyModule_AddStringConstant($268, __str139, $267); //@line 1967 "pyexpat.c"
        var $270=_PyExpat_XML_ErrorString(29); //@line 1968 "pyexpat.c"
        var $271=$errors_module; //@line 1968 "pyexpat.c"
        var $272=_PyModule_AddStringConstant($271, __str140, $270); //@line 1968 "pyexpat.c"
        var $273=_PyExpat_XML_ErrorString(30); //@line 1969 "pyexpat.c"
        var $274=$errors_module; //@line 1969 "pyexpat.c"
        var $275=_PyModule_AddStringConstant($274, __str141, $273); //@line 1969 "pyexpat.c"
        var $276=_PyExpat_XML_ErrorString(31); //@line 1970 "pyexpat.c"
        var $277=$errors_module; //@line 1970 "pyexpat.c"
        var $278=_PyModule_AddStringConstant($277, __str142, $276); //@line 1970 "pyexpat.c"
        var $279=_PyExpat_XML_ErrorString(32); //@line 1971 "pyexpat.c"
        var $280=$errors_module; //@line 1971 "pyexpat.c"
        var $281=_PyModule_AddStringConstant($280, __str143, $279); //@line 1971 "pyexpat.c"
        var $282=_PyExpat_XML_ErrorString(33); //@line 1972 "pyexpat.c"
        var $283=$errors_module; //@line 1972 "pyexpat.c"
        var $284=_PyModule_AddStringConstant($283, __str144, $282); //@line 1972 "pyexpat.c"
        var $285=_PyExpat_XML_ErrorString(34); //@line 1973 "pyexpat.c"
        var $286=$errors_module; //@line 1973 "pyexpat.c"
        var $287=_PyModule_AddStringConstant($286, __str145, $285); //@line 1973 "pyexpat.c"
        var $288=_PyExpat_XML_ErrorString(35); //@line 1974 "pyexpat.c"
        var $289=$errors_module; //@line 1974 "pyexpat.c"
        var $290=_PyModule_AddStringConstant($289, __str146, $288); //@line 1974 "pyexpat.c"
        var $291=_PyExpat_XML_ErrorString(36); //@line 1975 "pyexpat.c"
        var $292=$errors_module; //@line 1975 "pyexpat.c"
        var $293=_PyModule_AddStringConstant($292, __str147, $291); //@line 1975 "pyexpat.c"
        var $294=_PyExpat_XML_ErrorString(37); //@line 1976 "pyexpat.c"
        var $295=$errors_module; //@line 1976 "pyexpat.c"
        var $296=_PyModule_AddStringConstant($295, __str148, $294); //@line 1976 "pyexpat.c"
        var $297=$errors_module; //@line 1978 "pyexpat.c"
        var $298=_PyModule_AddStringConstant($297, __str149, __str150); //@line 1978 "pyexpat.c"
        var $299=$m; //@line 1984 "pyexpat.c"
        var $300=_PyModule_AddIntConstant($299, __str151, 0); //@line 1984 "pyexpat.c"
        var $301=$m; //@line 1985 "pyexpat.c"
        var $302=_PyModule_AddIntConstant($301, __str152, 1); //@line 1985 "pyexpat.c"
        var $303=$m; //@line 1986 "pyexpat.c"
        var $304=_PyModule_AddIntConstant($303, __str153, 2); //@line 1986 "pyexpat.c"
        var $305=$model_module; //@line 1990 "pyexpat.c"
        var $306=_PyModule_AddStringConstant($305, __str149, __str154); //@line 1990 "pyexpat.c"
        var $307=$model_module; //@line 1993 "pyexpat.c"
        var $308=_PyModule_AddIntConstant($307, __str155, 1); //@line 1993 "pyexpat.c"
        var $309=$model_module; //@line 1994 "pyexpat.c"
        var $310=_PyModule_AddIntConstant($309, __str156, 2); //@line 1994 "pyexpat.c"
        var $311=$model_module; //@line 1995 "pyexpat.c"
        var $312=_PyModule_AddIntConstant($311, __str157, 3); //@line 1995 "pyexpat.c"
        var $313=$model_module; //@line 1996 "pyexpat.c"
        var $314=_PyModule_AddIntConstant($313, __str158, 4); //@line 1996 "pyexpat.c"
        var $315=$model_module; //@line 1997 "pyexpat.c"
        var $316=_PyModule_AddIntConstant($315, __str159, 5); //@line 1997 "pyexpat.c"
        var $317=$model_module; //@line 1998 "pyexpat.c"
        var $318=_PyModule_AddIntConstant($317, __str160, 6); //@line 1998 "pyexpat.c"
        var $319=$model_module; //@line 2000 "pyexpat.c"
        var $320=_PyModule_AddIntConstant($319, __str161, 0); //@line 2000 "pyexpat.c"
        var $321=$model_module; //@line 2001 "pyexpat.c"
        var $322=_PyModule_AddIntConstant($321, __str162, 1); //@line 2001 "pyexpat.c"
        var $323=$model_module; //@line 2002 "pyexpat.c"
        var $324=_PyModule_AddIntConstant($323, __str163, 2); //@line 2002 "pyexpat.c"
        var $325=$model_module; //@line 2003 "pyexpat.c"
        var $326=_PyModule_AddIntConstant($325, __str164, 3); //@line 2003 "pyexpat.c"
        HEAP[_capi_11609+4]=80; //@line 2007 "pyexpat.c"
        HEAP[_capi_11609]=__str165; //@line 2008 "pyexpat.c"
        HEAP[_capi_11609+8]=2; //@line 2009 "pyexpat.c"
        HEAP[_capi_11609+12]=0; //@line 2010 "pyexpat.c"
        HEAP[_capi_11609+16]=0; //@line 2011 "pyexpat.c"
        HEAP[_capi_11609+20]=(FUNCTION_TABLE_OFFSET + 12); //@line 2012 "pyexpat.c"
        HEAP[_capi_11609+24]=(FUNCTION_TABLE_OFFSET + 14); //@line 2013 "pyexpat.c"
        HEAP[_capi_11609+28]=(FUNCTION_TABLE_OFFSET + 16); //@line 2014 "pyexpat.c"
        HEAP[_capi_11609+32]=(FUNCTION_TABLE_OFFSET + 18); //@line 2015 "pyexpat.c"
        HEAP[_capi_11609+36]=(FUNCTION_TABLE_OFFSET + 20); //@line 2016 "pyexpat.c"
        HEAP[_capi_11609+40]=(FUNCTION_TABLE_OFFSET + 22); //@line 2017 "pyexpat.c"
        HEAP[_capi_11609+44]=(FUNCTION_TABLE_OFFSET + 24); //@line 2018 "pyexpat.c"
        HEAP[_capi_11609+48]=(FUNCTION_TABLE_OFFSET + 26); //@line 2019 "pyexpat.c"
        HEAP[_capi_11609+52]=(FUNCTION_TABLE_OFFSET + 28); //@line 2020 "pyexpat.c"
        HEAP[_capi_11609+56]=(FUNCTION_TABLE_OFFSET + 30); //@line 2021 "pyexpat.c"
        HEAP[_capi_11609+60]=(FUNCTION_TABLE_OFFSET + 32); //@line 2022 "pyexpat.c"
        HEAP[_capi_11609+64]=(FUNCTION_TABLE_OFFSET + 34); //@line 2023 "pyexpat.c"
        HEAP[_capi_11609+68]=(FUNCTION_TABLE_OFFSET + 36); //@line 2024 "pyexpat.c"
        HEAP[_capi_11609+72]=(FUNCTION_TABLE_OFFSET + 38); //@line 2025 "pyexpat.c"
        HEAP[_capi_11609+76]=(FUNCTION_TABLE_OFFSET + 40); //@line 2026 "pyexpat.c"
        var $327=_PyCapsule_New(_capi_11609, __str166, 0); //@line 2029 "pyexpat.c"
        $capi_object=$327; //@line 2029 "pyexpat.c"
        var $328=($327)!=0; //@line 2030 "pyexpat.c"
        if ($328) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 2030 "pyexpat.c"
      case 34: // $bb34
        var $329=$m; //@line 2031 "pyexpat.c"
        var $330=$capi_object; //@line 2031 "pyexpat.c"
        var $331=_PyModule_AddObject($329, __str167, $330); //@line 2031 "pyexpat.c"
        __label__ = 35; break; //@line 2031 "pyexpat.c"
      case 35: // $return
        STACKTOP = __stackBase__;
        return; //@line 1829 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  Module["_initpyexpat"] = _initpyexpat;

  function _clear_handlers($self, $initial) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $initial_addr;
        var $i;
        var $temp;
        $self_addr=$self;
        $initial_addr=$initial;
        $i=0; //@line 2037 "pyexpat.c"
        var $0=$i; //@line 2040 "pyexpat.c"
        var $1=_handler_info+$0*20; //@line 2040 "pyexpat.c"
        var $2=$1; //@line 2040 "pyexpat.c"
        var $3=HEAP[$2]; //@line 2040 "pyexpat.c"
        var $4=($3)!=0; //@line 2040 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 8; break; } //@line 2040 "pyexpat.c"
      case 1: // $bb
        var $5=$initial_addr; //@line 2041 "pyexpat.c"
        var $6=($5)!=0; //@line 2041 "pyexpat.c"
        var $7=$self_addr; //@line 2042 "pyexpat.c"
        var $8=$7+48; //@line 2042 "pyexpat.c"
        var $9=HEAP[$8]; //@line 2042 "pyexpat.c"
        var $10=$i; //@line 2042 "pyexpat.c"
        var $11=$9+4*$10; //@line 2042 "pyexpat.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2041 "pyexpat.c"
      case 2: // $bb1
        HEAP[$11]=0; //@line 2042 "pyexpat.c"
        __label__ = 7; break; //@line 2042 "pyexpat.c"
      case 3: // $bb2
        var $12=HEAP[$11]; //@line 2044 "pyexpat.c"
        $temp=$12; //@line 2044 "pyexpat.c"
        var $13=$self_addr; //@line 2045 "pyexpat.c"
        var $14=$13+48; //@line 2045 "pyexpat.c"
        var $15=HEAP[$14]; //@line 2045 "pyexpat.c"
        var $16=$i; //@line 2045 "pyexpat.c"
        var $17=$15+4*$16; //@line 2045 "pyexpat.c"
        HEAP[$17]=0; //@line 2045 "pyexpat.c"
        var $18=$temp; //@line 2046 "pyexpat.c"
        var $19=($18)!=0; //@line 2046 "pyexpat.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 2046 "pyexpat.c"
      case 4: // $bb3
        var $20=$temp; //@line 2046 "pyexpat.c"
        var $21=$20; //@line 2046 "pyexpat.c"
        var $22=HEAP[$21]; //@line 2046 "pyexpat.c"
        var $23=($22) - 1; //@line 2046 "pyexpat.c"
        var $24=$temp; //@line 2046 "pyexpat.c"
        var $25=$24; //@line 2046 "pyexpat.c"
        HEAP[$25]=$23; //@line 2046 "pyexpat.c"
        var $26=$temp; //@line 2046 "pyexpat.c"
        var $27=$26; //@line 2046 "pyexpat.c"
        var $28=HEAP[$27]; //@line 2046 "pyexpat.c"
        var $29=($28)==0; //@line 2046 "pyexpat.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2046 "pyexpat.c"
      case 5: // $bb4
        var $30=$temp; //@line 2046 "pyexpat.c"
        var $31=$30+4; //@line 2046 "pyexpat.c"
        var $32=HEAP[$31]; //@line 2046 "pyexpat.c"
        var $33=$32+24; //@line 2046 "pyexpat.c"
        var $34=HEAP[$33]; //@line 2046 "pyexpat.c"
        var $35=$temp; //@line 2046 "pyexpat.c"
        FUNCTION_TABLE[$34]($35); //@line 2046 "pyexpat.c"
        __label__ = 6; break; //@line 2046 "pyexpat.c"
      case 6: // $bb5
        var $36=$i; //@line 2047 "pyexpat.c"
        var $37=_handler_info+$36*20; //@line 2047 "pyexpat.c"
        var $38=$37+4; //@line 2047 "pyexpat.c"
        var $39=HEAP[$38]; //@line 2047 "pyexpat.c"
        var $40=$self_addr; //@line 2047 "pyexpat.c"
        var $41=$40+8; //@line 2047 "pyexpat.c"
        var $42=HEAP[$41]; //@line 2047 "pyexpat.c"
        FUNCTION_TABLE[$39]($42, 0); //@line 2047 "pyexpat.c"
        __label__ = 7; break; //@line 2047 "pyexpat.c"
      case 7: // $bb6
        var $43=$i; //@line 2040 "pyexpat.c"
        var $44=($43) + 1; //@line 2040 "pyexpat.c"
        $i=$44; //@line 2040 "pyexpat.c"
        var $45=$i; //@line 2040 "pyexpat.c"
        var $46=_handler_info+$45*20; //@line 2040 "pyexpat.c"
        var $47=$46; //@line 2040 "pyexpat.c"
        var $48=HEAP[$47]; //@line 2040 "pyexpat.c"
        var $49=($48)!=0; //@line 2040 "pyexpat.c"
        if ($49) { __label__ = 1; break; } else { __label__ = 8; break; } //@line 2040 "pyexpat.c"
      case 8: // $return
        ;
        return; //@line 2050 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ParserCreate($encodingName) {
    ;
    var __label__;
  
    var $encodingName_addr;
    var $retval;
    var $0;
    $encodingName_addr=$encodingName;
    var $1=$encodingName_addr; //@line 656 "xmlparse.c"
    var $2=_PyExpat_XML_ParserCreate_MM($1, 0, 0); //@line 656 "xmlparse.c"
    $0=$2; //@line 656 "xmlparse.c"
    var $3=$0; //@line 656 "xmlparse.c"
    $retval=$3; //@line 656 "xmlparse.c"
    var $retval1=$retval; //@line 656 "xmlparse.c"
    ;
    return $retval1; //@line 656 "xmlparse.c"
  }
  

  function _PyExpat_XML_ParserCreateNS($encodingName, $nsSep) {
    var __stackBase__  = STACKTOP; STACKTOP += 2; _memset(__stackBase__, 0, 2);
    var __label__;
  
    var $encodingName_addr;
    var $nsSep_addr;
    var $retval;
    var $0;
    var $tmp=__stackBase__;
    $encodingName_addr=$encodingName;
    $nsSep_addr=$nsSep;
    var $1=$tmp; //@line 663 "xmlparse.c"
    var $2=$nsSep_addr; //@line 663 "xmlparse.c"
    HEAP[$1]=$2; //@line 663 "xmlparse.c"
    var $3=$encodingName_addr; //@line 664 "xmlparse.c"
    var $tmp1=$tmp; //@line 664 "xmlparse.c"
    var $4=_PyExpat_XML_ParserCreate_MM($3, 0, $tmp1); //@line 664 "xmlparse.c"
    $0=$4; //@line 664 "xmlparse.c"
    var $5=$0; //@line 664 "xmlparse.c"
    $retval=$5; //@line 664 "xmlparse.c"
    var $retval2=$retval; //@line 664 "xmlparse.c"
    STACKTOP = __stackBase__;
    return $retval2; //@line 664 "xmlparse.c"
  }
  

  function _PyExpat_XML_ParserCreate_MM($encodingName, $memsuite, $nameSep) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encodingName_addr;
        var $memsuite_addr;
        var $nameSep_addr;
        var $retval;
        var $0;
        var $parser;
        $encodingName_addr=$encodingName;
        $memsuite_addr=$memsuite;
        $nameSep_addr=$nameSep;
        var $1=$encodingName_addr; //@line 679 "xmlparse.c"
        var $2=$memsuite_addr; //@line 679 "xmlparse.c"
        var $3=$nameSep_addr; //@line 679 "xmlparse.c"
        var $4=_parserCreate($1, $2, $3, 0); //@line 679 "xmlparse.c"
        $parser=$4; //@line 679 "xmlparse.c"
        var $5=$parser; //@line 680 "xmlparse.c"
        var $6=($5)!=0; //@line 680 "xmlparse.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 680 "xmlparse.c"
      case 1: // $bb
        var $7=$parser; //@line 680 "xmlparse.c"
        var $8=$7+236; //@line 680 "xmlparse.c"
        var $9=HEAP[$8]; //@line 680 "xmlparse.c"
        var $10=($9)!=0; //@line 680 "xmlparse.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 680 "xmlparse.c"
      case 2: // $bb1
        var $11=$parser; //@line 684 "xmlparse.c"
        var $12=_setContext($11, _implicitContext); //@line 684 "xmlparse.c"
        var $13=($12)==0; //@line 684 "xmlparse.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 684 "xmlparse.c"
      case 3: // $bb2
        var $14=$parser; //@line 685 "xmlparse.c"
        _PyExpat_XML_ParserFree($14); //@line 685 "xmlparse.c"
        $0=0; //@line 686 "xmlparse.c"
        __label__ = 5; break; //@line 686 "xmlparse.c"
      case 4: // $bb3
        var $15=$parser; //@line 689 "xmlparse.c"
        $0=$15; //@line 689 "xmlparse.c"
        __label__ = 5; break; //@line 689 "xmlparse.c"
      case 5: // $bb4
        var $16=$0; //@line 686 "xmlparse.c"
        $retval=$16; //@line 686 "xmlparse.c"
        var $retval5=$retval; //@line 686 "xmlparse.c"
        ;
        return $retval5; //@line 686 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _parserCreate($encodingName, $memsuite, $nameSep, $dtd) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encodingName_addr;
        var $memsuite_addr;
        var $nameSep_addr;
        var $dtd_addr;
        var $retval;
        var $0;
        var $parser;
        var $mtemp;
        var $mtemp4;
        $encodingName_addr=$encodingName;
        $memsuite_addr=$memsuite;
        $nameSep_addr=$nameSep;
        $dtd_addr=$dtd;
        var $1=$memsuite_addr; //@line 700 "xmlparse.c"
        var $2=($1)!=0; //@line 700 "xmlparse.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 700 "xmlparse.c"
      case 1: // $bb
        var $3=$memsuite_addr; //@line 702 "xmlparse.c"
        var $4=$3; //@line 702 "xmlparse.c"
        var $5=HEAP[$4]; //@line 702 "xmlparse.c"
        var $6=FUNCTION_TABLE[$5](496); //@line 702 "xmlparse.c"
        var $7=$6; //@line 702 "xmlparse.c"
        $parser=$7; //@line 702 "xmlparse.c"
        var $8=$parser; //@line 704 "xmlparse.c"
        var $9=($8)!=0; //@line 704 "xmlparse.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 704 "xmlparse.c"
      case 2: // $bb1
        var $10=$parser; //@line 705 "xmlparse.c"
        var $11=$10+12; //@line 705 "xmlparse.c"
        $mtemp=$11; //@line 705 "xmlparse.c"
        var $12=$memsuite_addr; //@line 706 "xmlparse.c"
        var $13=$12; //@line 706 "xmlparse.c"
        var $14=HEAP[$13]; //@line 706 "xmlparse.c"
        var $15=$mtemp; //@line 706 "xmlparse.c"
        var $16=$15; //@line 706 "xmlparse.c"
        HEAP[$16]=$14; //@line 706 "xmlparse.c"
        var $17=$memsuite_addr; //@line 707 "xmlparse.c"
        var $18=$17+4; //@line 707 "xmlparse.c"
        var $19=HEAP[$18]; //@line 707 "xmlparse.c"
        var $20=$mtemp; //@line 707 "xmlparse.c"
        var $21=$20+4; //@line 707 "xmlparse.c"
        HEAP[$21]=$19; //@line 707 "xmlparse.c"
        var $22=$memsuite_addr; //@line 708 "xmlparse.c"
        var $23=$22+8; //@line 708 "xmlparse.c"
        var $24=HEAP[$23]; //@line 708 "xmlparse.c"
        var $25=$mtemp; //@line 708 "xmlparse.c"
        var $26=$25+8; //@line 708 "xmlparse.c"
        HEAP[$26]=$24; //@line 708 "xmlparse.c"
        __label__ = 6; break; //@line 708 "xmlparse.c"
      case 3: // $bb3
        var $27=_malloc(496); //@line 713 "xmlparse.c"
        var $28=$27; //@line 713 "xmlparse.c"
        $parser=$28; //@line 713 "xmlparse.c"
        var $29=$parser; //@line 714 "xmlparse.c"
        var $30=($29)!=0; //@line 714 "xmlparse.c"
        if ($30) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 714 "xmlparse.c"
      case 4: // $bb5
        var $31=$parser; //@line 715 "xmlparse.c"
        var $32=$31+12; //@line 715 "xmlparse.c"
        $mtemp4=$32; //@line 715 "xmlparse.c"
        var $33=$mtemp4; //@line 716 "xmlparse.c"
        var $34=$33; //@line 716 "xmlparse.c"
        HEAP[$34]=(FUNCTION_TABLE_OFFSET + 42); //@line 716 "xmlparse.c"
        var $35=$mtemp4; //@line 717 "xmlparse.c"
        var $36=$35+4; //@line 717 "xmlparse.c"
        HEAP[$36]=(FUNCTION_TABLE_OFFSET + 44); //@line 717 "xmlparse.c"
        var $37=$mtemp4; //@line 718 "xmlparse.c"
        var $38=$37+8; //@line 718 "xmlparse.c"
        HEAP[$38]=(FUNCTION_TABLE_OFFSET + 46); //@line 718 "xmlparse.c"
        __label__ = 6; break; //@line 718 "xmlparse.c"
      case 5: // $bb6_thread
        var $39=$parser; //@line 723 "xmlparse.c"
        __lastLabel__ = 5; __label__ = 7; break;
      case 6: // $bb6
        var $_pr=$parser;
        var $40=($_pr)==0; //@line 722 "xmlparse.c"
        var $41=$parser; //@line 723 "xmlparse.c"
        if ($40) { __lastLabel__ = 6; __label__ = 7; break; } else { __lastLabel__ = 6; __label__ = 8; break; } //@line 722 "xmlparse.c"
      case 7: // $bb7
        var $42=__lastLabel__ == 5 ? $39 : ($41);
        $0=$42; //@line 723 "xmlparse.c"
        __label__ = 23; break; //@line 723 "xmlparse.c"
      case 8: // $bb8
        var $43=$41+8; //@line 725 "xmlparse.c"
        HEAP[$43]=0; //@line 725 "xmlparse.c"
        var $44=$parser; //@line 726 "xmlparse.c"
        var $45=$44+32; //@line 726 "xmlparse.c"
        HEAP[$45]=0; //@line 726 "xmlparse.c"
        var $46=$parser; //@line 728 "xmlparse.c"
        var $47=$46+380; //@line 728 "xmlparse.c"
        HEAP[$47]=16; //@line 728 "xmlparse.c"
        var $48=$parser; //@line 729 "xmlparse.c"
        var $49=$48+12; //@line 729 "xmlparse.c"
        var $50=$49; //@line 729 "xmlparse.c"
        var $51=HEAP[$50]; //@line 729 "xmlparse.c"
        var $52=$parser; //@line 729 "xmlparse.c"
        var $53=$52+380; //@line 729 "xmlparse.c"
        var $54=HEAP[$53]; //@line 729 "xmlparse.c"
        var $55=($54) * 16; //@line 729 "xmlparse.c"
        var $56=FUNCTION_TABLE[$51]($55); //@line 729 "xmlparse.c"
        var $57=$56; //@line 729 "xmlparse.c"
        var $58=$parser; //@line 729 "xmlparse.c"
        var $59=$58+392; //@line 729 "xmlparse.c"
        HEAP[$59]=$57; //@line 729 "xmlparse.c"
        var $60=$parser; //@line 730 "xmlparse.c"
        var $61=$60+392; //@line 730 "xmlparse.c"
        var $62=HEAP[$61]; //@line 730 "xmlparse.c"
        var $63=($62)==0; //@line 730 "xmlparse.c"
        var $64=$parser; //@line 731 "xmlparse.c"
        var $65=$64+12; //@line 731 "xmlparse.c"
        if ($63) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 730 "xmlparse.c"
      case 9: // $bb9
        var $66=$65+8; //@line 731 "xmlparse.c"
        var $67=HEAP[$66]; //@line 731 "xmlparse.c"
        var $68=$parser; //@line 731 "xmlparse.c"
        var $69=$68; //@line 731 "xmlparse.c"
        FUNCTION_TABLE[$67]($69); //@line 731 "xmlparse.c"
        $0=0; //@line 732 "xmlparse.c"
        __label__ = 23; break; //@line 732 "xmlparse.c"
      case 10: // $bb10
        var $70=$65; //@line 734 "xmlparse.c"
        var $71=HEAP[$70]; //@line 734 "xmlparse.c"
        var $72=FUNCTION_TABLE[$71](1024); //@line 734 "xmlparse.c"
        var $73=$parser; //@line 734 "xmlparse.c"
        var $74=$73+44; //@line 734 "xmlparse.c"
        HEAP[$74]=$72; //@line 734 "xmlparse.c"
        var $75=$parser; //@line 735 "xmlparse.c"
        var $76=$75+44; //@line 735 "xmlparse.c"
        var $77=HEAP[$76]; //@line 735 "xmlparse.c"
        var $78=($77)==0; //@line 735 "xmlparse.c"
        var $79=$parser; //@line 736 "xmlparse.c"
        if ($78) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 735 "xmlparse.c"
      case 11: // $bb11
        var $80=$79+12; //@line 736 "xmlparse.c"
        var $81=$80+8; //@line 736 "xmlparse.c"
        var $82=HEAP[$81]; //@line 736 "xmlparse.c"
        var $83=$parser; //@line 736 "xmlparse.c"
        var $84=$83+392; //@line 736 "xmlparse.c"
        var $85=HEAP[$84]; //@line 736 "xmlparse.c"
        var $86=$85; //@line 736 "xmlparse.c"
        FUNCTION_TABLE[$82]($86); //@line 736 "xmlparse.c"
        var $87=$parser; //@line 737 "xmlparse.c"
        var $88=$87+12; //@line 737 "xmlparse.c"
        var $89=$88+8; //@line 737 "xmlparse.c"
        var $90=HEAP[$89]; //@line 737 "xmlparse.c"
        var $91=$parser; //@line 737 "xmlparse.c"
        var $92=$91; //@line 737 "xmlparse.c"
        FUNCTION_TABLE[$90]($92); //@line 737 "xmlparse.c"
        $0=0; //@line 738 "xmlparse.c"
        __label__ = 23; break; //@line 738 "xmlparse.c"
      case 12: // $bb12
        var $93=$79+44; //@line 740 "xmlparse.c"
        var $94=HEAP[$93]; //@line 740 "xmlparse.c"
        var $95=$94+1024; //@line 740 "xmlparse.c"
        var $96=$parser; //@line 740 "xmlparse.c"
        var $97=$96+48; //@line 740 "xmlparse.c"
        HEAP[$97]=$95; //@line 740 "xmlparse.c"
        var $98=$dtd_addr; //@line 742 "xmlparse.c"
        var $99=($98)!=0; //@line 742 "xmlparse.c"
        var $100=$parser; //@line 743 "xmlparse.c"
        if ($99) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 742 "xmlparse.c"
      case 13: // $bb13
        var $101=$100+356; //@line 743 "xmlparse.c"
        var $102=$dtd_addr; //@line 743 "xmlparse.c"
        HEAP[$101]=$102; //@line 743 "xmlparse.c"
        __label__ = 16; break; //@line 743 "xmlparse.c"
      case 14: // $bb14
        var $103=$100+12; //@line 745 "xmlparse.c"
        var $104=_dtdCreate($103); //@line 745 "xmlparse.c"
        var $105=$parser; //@line 745 "xmlparse.c"
        var $106=$105+356; //@line 745 "xmlparse.c"
        HEAP[$106]=$104; //@line 745 "xmlparse.c"
        var $107=$parser; //@line 746 "xmlparse.c"
        var $108=$107+356; //@line 746 "xmlparse.c"
        var $109=HEAP[$108]; //@line 746 "xmlparse.c"
        var $110=($109)==0; //@line 746 "xmlparse.c"
        if ($110) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 746 "xmlparse.c"
      case 15: // $bb15
        var $111=$parser; //@line 747 "xmlparse.c"
        var $112=$111+12; //@line 747 "xmlparse.c"
        var $113=$112+8; //@line 747 "xmlparse.c"
        var $114=HEAP[$113]; //@line 747 "xmlparse.c"
        var $115=$parser; //@line 747 "xmlparse.c"
        var $116=$115+44; //@line 747 "xmlparse.c"
        var $117=HEAP[$116]; //@line 747 "xmlparse.c"
        FUNCTION_TABLE[$114]($117); //@line 747 "xmlparse.c"
        var $118=$parser; //@line 748 "xmlparse.c"
        var $119=$118+12; //@line 748 "xmlparse.c"
        var $120=$119+8; //@line 748 "xmlparse.c"
        var $121=HEAP[$120]; //@line 748 "xmlparse.c"
        var $122=$parser; //@line 748 "xmlparse.c"
        var $123=$122+392; //@line 748 "xmlparse.c"
        var $124=HEAP[$123]; //@line 748 "xmlparse.c"
        var $125=$124; //@line 748 "xmlparse.c"
        FUNCTION_TABLE[$121]($125); //@line 748 "xmlparse.c"
        var $126=$parser; //@line 749 "xmlparse.c"
        var $127=$126+12; //@line 749 "xmlparse.c"
        var $128=$127+8; //@line 749 "xmlparse.c"
        var $129=HEAP[$128]; //@line 749 "xmlparse.c"
        var $130=$parser; //@line 749 "xmlparse.c"
        var $131=$130; //@line 749 "xmlparse.c"
        FUNCTION_TABLE[$129]($131); //@line 749 "xmlparse.c"
        $0=0; //@line 750 "xmlparse.c"
        __label__ = 23; break; //@line 750 "xmlparse.c"
      case 16: // $bb16
        var $132=$parser; //@line 754 "xmlparse.c"
        var $133=$132+376; //@line 754 "xmlparse.c"
        HEAP[$133]=0; //@line 754 "xmlparse.c"
        var $134=$parser; //@line 755 "xmlparse.c"
        var $135=$134+368; //@line 755 "xmlparse.c"
        HEAP[$135]=0; //@line 755 "xmlparse.c"
        var $136=$parser; //@line 756 "xmlparse.c"
        var $137=$136+304; //@line 756 "xmlparse.c"
        HEAP[$137]=0; //@line 756 "xmlparse.c"
        var $138=$parser; //@line 758 "xmlparse.c"
        var $139=$138+468; //@line 758 "xmlparse.c"
        HEAP[$139]=0; //@line 758 "xmlparse.c"
        var $140=$parser; //@line 759 "xmlparse.c"
        var $141=$140+464; //@line 759 "xmlparse.c"
        HEAP[$141]=0; //@line 759 "xmlparse.c"
        var $142=$parser; //@line 761 "xmlparse.c"
        var $143=$142+124; //@line 761 "xmlparse.c"
        HEAP[$143]=0; //@line 761 "xmlparse.c"
        var $144=$parser; //@line 762 "xmlparse.c"
        var $145=$144+248; //@line 762 "xmlparse.c"
        HEAP[$145]=0; //@line 762 "xmlparse.c"
        var $146=$parser; //@line 764 "xmlparse.c"
        var $147=$146+472; //@line 764 "xmlparse.c"
        HEAP[$147]=33; //@line 764 "xmlparse.c"
        var $148=$parser; //@line 765 "xmlparse.c"
        var $149=$148+236; //@line 765 "xmlparse.c"
        HEAP[$149]=0; //@line 765 "xmlparse.c"
        var $150=$parser; //@line 766 "xmlparse.c"
        var $151=$150+237; //@line 766 "xmlparse.c"
        HEAP[$151]=0; //@line 766 "xmlparse.c"
        var $152=$parser; //@line 768 "xmlparse.c"
        var $153=$152+396; //@line 768 "xmlparse.c"
        HEAP[$153]=0; //@line 768 "xmlparse.c"
        var $154=$parser; //@line 769 "xmlparse.c"
        var $155=$154+400; //@line 769 "xmlparse.c"
        HEAP[$155]=0; //@line 769 "xmlparse.c"
        var $156=$parser; //@line 770 "xmlparse.c"
        var $157=$156+404; //@line 770 "xmlparse.c"
        HEAP[$157]=0; //@line 770 "xmlparse.c"
        var $158=$parser; //@line 772 "xmlparse.c"
        var $159=$158+12; //@line 772 "xmlparse.c"
        var $160=$parser; //@line 772 "xmlparse.c"
        var $161=$160+416; //@line 772 "xmlparse.c"
        _poolInit($161, $159); //@line 772 "xmlparse.c"
        var $162=$parser; //@line 773 "xmlparse.c"
        var $163=$162+12; //@line 773 "xmlparse.c"
        var $164=$parser; //@line 773 "xmlparse.c"
        var $165=$164+440; //@line 773 "xmlparse.c"
        _poolInit($165, $163); //@line 773 "xmlparse.c"
        var $166=$parser; //@line 774 "xmlparse.c"
        var $167=$encodingName_addr; //@line 774 "xmlparse.c"
        _parserInit($166, $167); //@line 774 "xmlparse.c"
        var $168=$encodingName_addr; //@line 776 "xmlparse.c"
        var $169=($168)!=0; //@line 776 "xmlparse.c"
        if ($169) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 776 "xmlparse.c"
      case 17: // $bb17
        var $170=$parser; //@line 776 "xmlparse.c"
        var $171=$170+232; //@line 776 "xmlparse.c"
        var $172=HEAP[$171]; //@line 776 "xmlparse.c"
        var $173=($172)==0; //@line 776 "xmlparse.c"
        if ($173) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 776 "xmlparse.c"
      case 18: // $bb18
        var $174=$parser; //@line 777 "xmlparse.c"
        _PyExpat_XML_ParserFree($174); //@line 777 "xmlparse.c"
        $0=0; //@line 778 "xmlparse.c"
        __label__ = 23; break; //@line 778 "xmlparse.c"
      case 19: // $bb19
        var $175=$nameSep_addr; //@line 781 "xmlparse.c"
        var $176=($175)!=0; //@line 781 "xmlparse.c"
        if ($176) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 781 "xmlparse.c"
      case 20: // $bb20
        var $177=$parser; //@line 782 "xmlparse.c"
        var $178=$177+236; //@line 782 "xmlparse.c"
        HEAP[$178]=1; //@line 782 "xmlparse.c"
        var $179=_PyExpat_XmlGetUtf8InternalEncodingNS(); //@line 783 "xmlparse.c"
        var $180=$parser; //@line 783 "xmlparse.c"
        var $181=$180+228; //@line 783 "xmlparse.c"
        HEAP[$181]=$179; //@line 783 "xmlparse.c"
        var $182=$nameSep_addr; //@line 784 "xmlparse.c"
        var $183=HEAP[$182]; //@line 784 "xmlparse.c"
        var $184=$parser; //@line 784 "xmlparse.c"
        var $185=$184+472; //@line 784 "xmlparse.c"
        HEAP[$185]=$183; //@line 784 "xmlparse.c"
        __label__ = 22; break; //@line 784 "xmlparse.c"
      case 21: // $bb21
        var $186=_PyExpat_XmlGetUtf8InternalEncoding(); //@line 787 "xmlparse.c"
        var $187=$parser; //@line 787 "xmlparse.c"
        var $188=$187+228; //@line 787 "xmlparse.c"
        HEAP[$188]=$186; //@line 787 "xmlparse.c"
        __label__ = 22; break; //@line 787 "xmlparse.c"
      case 22: // $bb22
        var $189=$parser; //@line 790 "xmlparse.c"
        $0=$189; //@line 790 "xmlparse.c"
        __label__ = 23; break; //@line 790 "xmlparse.c"
      case 23: // $bb23
        var $190=$0; //@line 723 "xmlparse.c"
        $retval=$190; //@line 723 "xmlparse.c"
        var $retval24=$retval; //@line 723 "xmlparse.c"
        ;
        return $retval24; //@line 723 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _parserInit($parser, $encodingName) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $encodingName_addr;
        var $iftmp_0;
        $parser_addr=$parser;
        $encodingName_addr=$encodingName;
        var $0=$parser_addr; //@line 796 "xmlparse.c"
        var $1=$0+280; //@line 796 "xmlparse.c"
        HEAP[$1]=(FUNCTION_TABLE_OFFSET + 48); //@line 796 "xmlparse.c"
        var $2=$parser_addr; //@line 797 "xmlparse.c"
        var $3=$2+256; //@line 797 "xmlparse.c"
        _PyExpat_XmlPrologStateInit($3); //@line 797 "xmlparse.c"
        var $4=$encodingName_addr; //@line 798 "xmlparse.c"
        var $5=($4)!=0; //@line 798 "xmlparse.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 798 "xmlparse.c"
      case 1: // $bb
        var $6=$parser_addr; //@line 798 "xmlparse.c"
        var $7=$6+416; //@line 798 "xmlparse.c"
        var $8=$encodingName_addr; //@line 798 "xmlparse.c"
        var $9=_poolCopyString($7, $8); //@line 798 "xmlparse.c"
        $iftmp_0=$9; //@line 798 "xmlparse.c"
        __label__ = 3; break; //@line 798 "xmlparse.c"
      case 2: // $bb1
        $iftmp_0=0; //@line 798 "xmlparse.c"
        __label__ = 3; break; //@line 798 "xmlparse.c"
      case 3: // $bb2
        var $10=$parser_addr; //@line 798 "xmlparse.c"
        var $11=$10+232; //@line 798 "xmlparse.c"
        var $12=$iftmp_0; //@line 798 "xmlparse.c"
        HEAP[$11]=$12; //@line 798 "xmlparse.c"
        var $13=$parser_addr; //@line 801 "xmlparse.c"
        var $14=$13+360; //@line 801 "xmlparse.c"
        HEAP[$14]=0; //@line 801 "xmlparse.c"
        var $15=$parser_addr; //@line 802 "xmlparse.c"
        var $16=$15+144; //@line 802 "xmlparse.c"
        var $17=$parser_addr; //@line 802 "xmlparse.c"
        var $18=$17+148; //@line 802 "xmlparse.c"
        var $19=_PyExpat_XmlInitEncoding($18, $16, 0); //@line 802 "xmlparse.c"
        var $20=$parser_addr; //@line 803 "xmlparse.c"
        var $21=$20; //@line 803 "xmlparse.c"
        HEAP[$21]=0; //@line 803 "xmlparse.c"
        var $22=$parser_addr; //@line 804 "xmlparse.c"
        var $23=$22+4; //@line 804 "xmlparse.c"
        HEAP[$23]=0; //@line 804 "xmlparse.c"
        var $24=$parser_addr; //@line 805 "xmlparse.c"
        var $25=$24+52; //@line 805 "xmlparse.c"
        HEAP[$25]=0; //@line 805 "xmlparse.c"
        var $26=$parser_addr; //@line 806 "xmlparse.c"
        var $27=$26+56; //@line 806 "xmlparse.c"
        HEAP[$27]=0; //@line 806 "xmlparse.c"
        var $28=$parser_addr; //@line 807 "xmlparse.c"
        var $29=$28+60; //@line 807 "xmlparse.c"
        HEAP[$29]=0; //@line 807 "xmlparse.c"
        var $30=$parser_addr; //@line 808 "xmlparse.c"
        var $31=$30+64; //@line 808 "xmlparse.c"
        HEAP[$31]=0; //@line 808 "xmlparse.c"
        var $32=$parser_addr; //@line 809 "xmlparse.c"
        var $33=$32+68; //@line 809 "xmlparse.c"
        HEAP[$33]=0; //@line 809 "xmlparse.c"
        var $34=$parser_addr; //@line 810 "xmlparse.c"
        var $35=$34+72; //@line 810 "xmlparse.c"
        HEAP[$35]=0; //@line 810 "xmlparse.c"
        var $36=$parser_addr; //@line 811 "xmlparse.c"
        var $37=$36+76; //@line 811 "xmlparse.c"
        HEAP[$37]=0; //@line 811 "xmlparse.c"
        var $38=$parser_addr; //@line 812 "xmlparse.c"
        var $39=$38+80; //@line 812 "xmlparse.c"
        HEAP[$39]=0; //@line 812 "xmlparse.c"
        var $40=$parser_addr; //@line 813 "xmlparse.c"
        var $41=$40+84; //@line 813 "xmlparse.c"
        HEAP[$41]=0; //@line 813 "xmlparse.c"
        var $42=$parser_addr; //@line 814 "xmlparse.c"
        var $43=$42+88; //@line 814 "xmlparse.c"
        HEAP[$43]=0; //@line 814 "xmlparse.c"
        var $44=$parser_addr; //@line 815 "xmlparse.c"
        var $45=$44+92; //@line 815 "xmlparse.c"
        HEAP[$45]=0; //@line 815 "xmlparse.c"
        var $46=$parser_addr; //@line 816 "xmlparse.c"
        var $47=$46+96; //@line 816 "xmlparse.c"
        HEAP[$47]=0; //@line 816 "xmlparse.c"
        var $48=$parser_addr; //@line 817 "xmlparse.c"
        var $49=$48+100; //@line 817 "xmlparse.c"
        HEAP[$49]=0; //@line 817 "xmlparse.c"
        var $50=$parser_addr; //@line 818 "xmlparse.c"
        var $51=$50+104; //@line 818 "xmlparse.c"
        HEAP[$51]=0; //@line 818 "xmlparse.c"
        var $52=$parser_addr; //@line 819 "xmlparse.c"
        var $53=$52+108; //@line 819 "xmlparse.c"
        HEAP[$53]=0; //@line 819 "xmlparse.c"
        var $54=$parser_addr; //@line 820 "xmlparse.c"
        var $55=$54+112; //@line 820 "xmlparse.c"
        HEAP[$55]=0; //@line 820 "xmlparse.c"
        var $56=$parser_addr; //@line 821 "xmlparse.c"
        var $57=$56+116; //@line 821 "xmlparse.c"
        var $58=$parser_addr; //@line 821 "xmlparse.c"
        HEAP[$57]=$58; //@line 821 "xmlparse.c"
        var $59=$parser_addr; //@line 822 "xmlparse.c"
        var $60=$59+120; //@line 822 "xmlparse.c"
        HEAP[$60]=0; //@line 822 "xmlparse.c"
        var $61=$parser_addr; //@line 823 "xmlparse.c"
        var $62=$61+128; //@line 823 "xmlparse.c"
        HEAP[$62]=0; //@line 823 "xmlparse.c"
        var $63=$parser_addr; //@line 824 "xmlparse.c"
        var $64=$63+132; //@line 824 "xmlparse.c"
        HEAP[$64]=0; //@line 824 "xmlparse.c"
        var $65=$parser_addr; //@line 825 "xmlparse.c"
        var $66=$65+136; //@line 825 "xmlparse.c"
        HEAP[$66]=0; //@line 825 "xmlparse.c"
        var $67=$parser_addr; //@line 826 "xmlparse.c"
        var $68=$67+140; //@line 826 "xmlparse.c"
        HEAP[$68]=0; //@line 826 "xmlparse.c"
        var $69=$parser_addr; //@line 827 "xmlparse.c"
        var $70=$69+8; //@line 827 "xmlparse.c"
        var $71=HEAP[$70]; //@line 827 "xmlparse.c"
        var $72=$parser_addr; //@line 827 "xmlparse.c"
        var $73=$72+24; //@line 827 "xmlparse.c"
        HEAP[$73]=$71; //@line 827 "xmlparse.c"
        var $74=$parser_addr; //@line 828 "xmlparse.c"
        var $75=$74+8; //@line 828 "xmlparse.c"
        var $76=HEAP[$75]; //@line 828 "xmlparse.c"
        var $77=$parser_addr; //@line 828 "xmlparse.c"
        var $78=$77+28; //@line 828 "xmlparse.c"
        HEAP[$78]=$76; //@line 828 "xmlparse.c"
        var $79=$parser_addr; //@line 829 "xmlparse.c"
        var $80=$79+36; //@line 829 "xmlparse.c"
        HEAP[$80]=0; //@line 829 "xmlparse.c"
        var $81=$parser_addr; //@line 830 "xmlparse.c"
        var $82=$81+40; //@line 830 "xmlparse.c"
        HEAP[$82]=0; //@line 830 "xmlparse.c"
        var $83=$parser_addr; //@line 831 "xmlparse.c"
        var $84=$83+344; //@line 831 "xmlparse.c"
        HEAP[$84]=0; //@line 831 "xmlparse.c"
        var $85=$parser_addr; //@line 832 "xmlparse.c"
        var $86=$85+348; //@line 832 "xmlparse.c"
        HEAP[$86]=0; //@line 832 "xmlparse.c"
        var $87=$parser_addr; //@line 833 "xmlparse.c"
        var $88=$87+316; //@line 833 "xmlparse.c"
        HEAP[$88]=0; //@line 833 "xmlparse.c"
        var $89=$parser_addr; //@line 834 "xmlparse.c"
        var $90=$89+320; //@line 834 "xmlparse.c"
        HEAP[$90]=0; //@line 834 "xmlparse.c"
        var $91=$parser_addr; //@line 835 "xmlparse.c"
        var $92=$91+324; //@line 835 "xmlparse.c"
        HEAP[$92]=0; //@line 835 "xmlparse.c"
        var $93=$parser_addr; //@line 836 "xmlparse.c"
        var $94=$93+328; //@line 836 "xmlparse.c"
        HEAP[$94]=0; //@line 836 "xmlparse.c"
        var $95=$parser_addr; //@line 837 "xmlparse.c"
        var $96=$95+332; //@line 837 "xmlparse.c"
        HEAP[$96]=0; //@line 837 "xmlparse.c"
        var $97=$parser_addr; //@line 838 "xmlparse.c"
        var $98=$97+336; //@line 838 "xmlparse.c"
        HEAP[$98]=0; //@line 838 "xmlparse.c"
        var $99=$parser_addr; //@line 839 "xmlparse.c"
        var $100=$99+340; //@line 839 "xmlparse.c"
        HEAP[$100]=0; //@line 839 "xmlparse.c"
        var $101=$parser_addr; //@line 840 "xmlparse.c"
        var $102=$101+352; //@line 840 "xmlparse.c"
        HEAP[$102]=0; //@line 840 "xmlparse.c"
        var $103=$parser_addr; //@line 841 "xmlparse.c"
        var $104=$103+353; //@line 841 "xmlparse.c"
        HEAP[$104]=0; //@line 841 "xmlparse.c"
        var $105=$parser_addr; //@line 842 "xmlparse.c"
        var $106=$105+408; //@line 842 "xmlparse.c"
        var $107=$106; //@line 842 "xmlparse.c"
        _llvm_memset_p0i8_i32($107, 0, 8, 1, 0); //@line 842 "xmlparse.c"
        var $108=$parser_addr; //@line 843 "xmlparse.c"
        var $109=$108+284; //@line 843 "xmlparse.c"
        HEAP[$109]=0; //@line 843 "xmlparse.c"
        var $110=$parser_addr; //@line 844 "xmlparse.c"
        var $111=$110+288; //@line 844 "xmlparse.c"
        HEAP[$111]=0; //@line 844 "xmlparse.c"
        var $112=$parser_addr; //@line 845 "xmlparse.c"
        var $113=$112+292; //@line 845 "xmlparse.c"
        HEAP[$113]=0; //@line 845 "xmlparse.c"
        var $114=$parser_addr; //@line 846 "xmlparse.c"
        var $115=$114+296; //@line 846 "xmlparse.c"
        HEAP[$115]=0; //@line 846 "xmlparse.c"
        var $116=$parser_addr; //@line 847 "xmlparse.c"
        var $117=$116+300; //@line 847 "xmlparse.c"
        HEAP[$117]=0; //@line 847 "xmlparse.c"
        var $118=$parser_addr; //@line 848 "xmlparse.c"
        var $119=$118+308; //@line 848 "xmlparse.c"
        HEAP[$119]=1; //@line 848 "xmlparse.c"
        var $120=$parser_addr; //@line 849 "xmlparse.c"
        var $121=$120+312; //@line 849 "xmlparse.c"
        HEAP[$121]=0; //@line 849 "xmlparse.c"
        var $122=$parser_addr; //@line 850 "xmlparse.c"
        var $123=$122+364; //@line 850 "xmlparse.c"
        HEAP[$123]=0; //@line 850 "xmlparse.c"
        var $124=$parser_addr; //@line 851 "xmlparse.c"
        var $125=$124+372; //@line 851 "xmlparse.c"
        HEAP[$125]=0; //@line 851 "xmlparse.c"
        var $126=$parser_addr; //@line 852 "xmlparse.c"
        var $127=$126+384; //@line 852 "xmlparse.c"
        HEAP[$127]=0; //@line 852 "xmlparse.c"
        var $128=$parser_addr; //@line 853 "xmlparse.c"
        var $129=$128+240; //@line 853 "xmlparse.c"
        HEAP[$129]=0; //@line 853 "xmlparse.c"
        var $130=$parser_addr; //@line 854 "xmlparse.c"
        var $131=$130+252; //@line 854 "xmlparse.c"
        HEAP[$131]=0; //@line 854 "xmlparse.c"
        var $132=$parser_addr; //@line 855 "xmlparse.c"
        var $133=$132+244; //@line 855 "xmlparse.c"
        HEAP[$133]=0; //@line 855 "xmlparse.c"
        var $134=$parser_addr; //@line 856 "xmlparse.c"
        var $135=$134+476; //@line 856 "xmlparse.c"
        HEAP[$135]=0; //@line 856 "xmlparse.c"
        var $136=$parser_addr; //@line 857 "xmlparse.c"
        var $137=$136+480; //@line 857 "xmlparse.c"
        var $138=$137; //@line 857 "xmlparse.c"
        HEAP[$138]=0; //@line 857 "xmlparse.c"
        var $139=$parser_addr; //@line 859 "xmlparse.c"
        var $140=$139+488; //@line 859 "xmlparse.c"
        HEAP[$140]=0; //@line 859 "xmlparse.c"
        var $141=$parser_addr; //@line 860 "xmlparse.c"
        var $142=$141+489; //@line 860 "xmlparse.c"
        HEAP[$142]=0; //@line 860 "xmlparse.c"
        var $143=$parser_addr; //@line 861 "xmlparse.c"
        var $144=$143+492; //@line 861 "xmlparse.c"
        HEAP[$144]=0; //@line 861 "xmlparse.c"
        ;
        return; //@line 863 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _moveToFreeBindingList($parser, $bindings) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $bindings_addr;
        var $b;
        $parser_addr=$parser;
        $bindings_addr=$bindings;
        var $0=($bindings)!=0; //@line 869 "xmlparse.c"
        if ($0) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 869 "xmlparse.c"
      case 1: // $bb
        var $1=$bindings_addr; //@line 870 "xmlparse.c"
        $b=$1; //@line 870 "xmlparse.c"
        var $2=$bindings_addr; //@line 871 "xmlparse.c"
        var $3=$2+4; //@line 871 "xmlparse.c"
        var $4=HEAP[$3]; //@line 871 "xmlparse.c"
        $bindings_addr=$4; //@line 871 "xmlparse.c"
        var $5=$parser_addr; //@line 872 "xmlparse.c"
        var $6=$5+376; //@line 872 "xmlparse.c"
        var $7=HEAP[$6]; //@line 872 "xmlparse.c"
        var $8=$b; //@line 872 "xmlparse.c"
        var $9=$8+4; //@line 872 "xmlparse.c"
        HEAP[$9]=$7; //@line 872 "xmlparse.c"
        var $10=$parser_addr; //@line 873 "xmlparse.c"
        var $11=$10+376; //@line 873 "xmlparse.c"
        var $12=$b; //@line 873 "xmlparse.c"
        HEAP[$11]=$12; //@line 873 "xmlparse.c"
        var $_pr=$bindings_addr;
        var $13=($_pr)!=0; //@line 869 "xmlparse.c"
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 869 "xmlparse.c"
      case 2: // $return
        ;
        return; //@line 875 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ParserReset($parser, $encodingName) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $encodingName_addr;
        var $retval;
        var $0;
        var $tStk;
        var $openEntityList;
        var $tag;
        var $openEntity;
        $parser_addr=$parser;
        $encodingName_addr=$encodingName;
        var $1=$parser_addr; //@line 882 "xmlparse.c"
        var $2=$1+476; //@line 882 "xmlparse.c"
        var $3=HEAP[$2]; //@line 882 "xmlparse.c"
        var $4=($3)!=0; //@line 882 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 882 "xmlparse.c"
      case 1: // $bb
        $0=0; //@line 883 "xmlparse.c"
        __label__ = 9; break; //@line 883 "xmlparse.c"
      case 2: // $bb1
        var $5=$parser_addr; //@line 885 "xmlparse.c"
        var $6=$5+364; //@line 885 "xmlparse.c"
        var $7=HEAP[$6]; //@line 885 "xmlparse.c"
        $tStk=$7; //@line 885 "xmlparse.c"
        var $8=($7)!=0; //@line 886 "xmlparse.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 886 "xmlparse.c"
      case 3: // $bb2
        var $9=$tStk; //@line 887 "xmlparse.c"
        $tag=$9; //@line 887 "xmlparse.c"
        var $10=$tStk; //@line 888 "xmlparse.c"
        var $11=$10; //@line 888 "xmlparse.c"
        var $12=HEAP[$11]; //@line 888 "xmlparse.c"
        $tStk=$12; //@line 888 "xmlparse.c"
        var $13=$parser_addr; //@line 889 "xmlparse.c"
        var $14=$13+368; //@line 889 "xmlparse.c"
        var $15=HEAP[$14]; //@line 889 "xmlparse.c"
        var $16=$tag; //@line 889 "xmlparse.c"
        var $17=$16; //@line 889 "xmlparse.c"
        HEAP[$17]=$15; //@line 889 "xmlparse.c"
        var $18=$tag; //@line 890 "xmlparse.c"
        var $19=$18+44; //@line 890 "xmlparse.c"
        var $20=HEAP[$19]; //@line 890 "xmlparse.c"
        var $21=$parser_addr; //@line 890 "xmlparse.c"
        _moveToFreeBindingList($21, $20); //@line 890 "xmlparse.c"
        var $22=$tag; //@line 891 "xmlparse.c"
        var $23=$22+44; //@line 891 "xmlparse.c"
        HEAP[$23]=0; //@line 891 "xmlparse.c"
        var $24=$parser_addr; //@line 892 "xmlparse.c"
        var $25=$24+368; //@line 892 "xmlparse.c"
        var $26=$tag; //@line 892 "xmlparse.c"
        HEAP[$25]=$26; //@line 892 "xmlparse.c"
        var $_pr=$tStk;
        var $27=($_pr)!=0; //@line 886 "xmlparse.c"
        if ($27) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 886 "xmlparse.c"
      case 4: // $bb4
        var $28=$parser_addr; //@line 895 "xmlparse.c"
        var $29=$28+300; //@line 895 "xmlparse.c"
        var $30=HEAP[$29]; //@line 895 "xmlparse.c"
        $openEntityList=$30; //@line 895 "xmlparse.c"
        var $31=($30)!=0; //@line 896 "xmlparse.c"
        if ($31) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 896 "xmlparse.c"
      case 5: // $bb5
        var $32=$openEntityList; //@line 897 "xmlparse.c"
        $openEntity=$32; //@line 897 "xmlparse.c"
        var $33=$openEntity; //@line 898 "xmlparse.c"
        var $34=$33+8; //@line 898 "xmlparse.c"
        var $35=HEAP[$34]; //@line 898 "xmlparse.c"
        $openEntityList=$35; //@line 898 "xmlparse.c"
        var $36=$parser_addr; //@line 899 "xmlparse.c"
        var $37=$36+304; //@line 899 "xmlparse.c"
        var $38=HEAP[$37]; //@line 899 "xmlparse.c"
        var $39=$openEntity; //@line 899 "xmlparse.c"
        var $40=$39+8; //@line 899 "xmlparse.c"
        HEAP[$40]=$38; //@line 899 "xmlparse.c"
        var $41=$parser_addr; //@line 900 "xmlparse.c"
        var $42=$41+304; //@line 900 "xmlparse.c"
        var $43=$openEntity; //@line 900 "xmlparse.c"
        HEAP[$42]=$43; //@line 900 "xmlparse.c"
        var $_pr1=$openEntityList;
        var $44=($_pr1)!=0; //@line 896 "xmlparse.c"
        if ($44) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 896 "xmlparse.c"
      case 6: // $bb7
        var $45=$parser_addr; //@line 902 "xmlparse.c"
        var $46=$45+372; //@line 902 "xmlparse.c"
        var $47=HEAP[$46]; //@line 902 "xmlparse.c"
        var $48=$parser_addr; //@line 902 "xmlparse.c"
        _moveToFreeBindingList($48, $47); //@line 902 "xmlparse.c"
        var $49=$parser_addr; //@line 903 "xmlparse.c"
        var $50=$49+12; //@line 903 "xmlparse.c"
        var $51=$50+8; //@line 903 "xmlparse.c"
        var $52=HEAP[$51]; //@line 903 "xmlparse.c"
        var $53=$parser_addr; //@line 903 "xmlparse.c"
        var $54=$53+240; //@line 903 "xmlparse.c"
        var $55=HEAP[$54]; //@line 903 "xmlparse.c"
        FUNCTION_TABLE[$52]($55); //@line 903 "xmlparse.c"
        var $56=$parser_addr; //@line 904 "xmlparse.c"
        var $57=$56+252; //@line 904 "xmlparse.c"
        var $58=HEAP[$57]; //@line 904 "xmlparse.c"
        var $59=($58)!=0; //@line 904 "xmlparse.c"
        if ($59) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 904 "xmlparse.c"
      case 7: // $bb8
        var $60=$parser_addr; //@line 905 "xmlparse.c"
        var $61=$60+252; //@line 905 "xmlparse.c"
        var $62=HEAP[$61]; //@line 905 "xmlparse.c"
        var $63=$parser_addr; //@line 905 "xmlparse.c"
        var $64=$63+244; //@line 905 "xmlparse.c"
        var $65=HEAP[$64]; //@line 905 "xmlparse.c"
        FUNCTION_TABLE[$62]($65); //@line 905 "xmlparse.c"
        __label__ = 8; break; //@line 905 "xmlparse.c"
      case 8: // $bb9
        var $66=$parser_addr; //@line 906 "xmlparse.c"
        var $67=$66+416; //@line 906 "xmlparse.c"
        _poolClear($67); //@line 906 "xmlparse.c"
        var $68=$parser_addr; //@line 907 "xmlparse.c"
        var $69=$68+440; //@line 907 "xmlparse.c"
        _poolClear($69); //@line 907 "xmlparse.c"
        var $70=$parser_addr; //@line 908 "xmlparse.c"
        var $71=$encodingName_addr; //@line 908 "xmlparse.c"
        _parserInit($70, $71); //@line 908 "xmlparse.c"
        var $72=$parser_addr; //@line 909 "xmlparse.c"
        var $73=$72+12; //@line 909 "xmlparse.c"
        var $74=$parser_addr; //@line 909 "xmlparse.c"
        var $75=$74+356; //@line 909 "xmlparse.c"
        var $76=HEAP[$75]; //@line 909 "xmlparse.c"
        _dtdReset($76, $73); //@line 909 "xmlparse.c"
        var $77=$parser_addr; //@line 910 "xmlparse.c"
        var $78=_setContext($77, _implicitContext); //@line 910 "xmlparse.c"
        var $79=($78); //@line 910 "xmlparse.c"
        $0=$79; //@line 910 "xmlparse.c"
        __label__ = 9; break; //@line 910 "xmlparse.c"
      case 9: // $bb10
        var $80=$0; //@line 883 "xmlparse.c"
        $retval=$80; //@line 883 "xmlparse.c"
        var $retval11=$retval; //@line 883 "xmlparse.c"
        var $retval1112=((($retval11)) & 255); //@line 883 "xmlparse.c"
        ;
        return $retval1112; //@line 883 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetEncoding($parser, $encodingName) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $encodingName_addr;
        var $retval;
        var $0;
        $parser_addr=$parser;
        $encodingName_addr=$encodingName;
        var $1=$parser_addr; //@line 920 "xmlparse.c"
        var $2=$1+480; //@line 920 "xmlparse.c"
        var $3=$2; //@line 920 "xmlparse.c"
        var $4=HEAP[$3]; //@line 920 "xmlparse.c"
        var $5=($4)==1; //@line 920 "xmlparse.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 920 "xmlparse.c"
      case 1: // $bb
        var $6=$parser_addr; //@line 920 "xmlparse.c"
        var $7=$6+480; //@line 920 "xmlparse.c"
        var $8=$7; //@line 920 "xmlparse.c"
        var $9=HEAP[$8]; //@line 920 "xmlparse.c"
        var $10=($9)==3; //@line 920 "xmlparse.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 920 "xmlparse.c"
      case 2: // $bb1
        $0=0; //@line 921 "xmlparse.c"
        __label__ = 8; break; //@line 921 "xmlparse.c"
      case 3: // $bb2
        var $11=$encodingName_addr; //@line 922 "xmlparse.c"
        var $12=($11)==0; //@line 922 "xmlparse.c"
        var $13=$parser_addr; //@line 923 "xmlparse.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 922 "xmlparse.c"
      case 4: // $bb3
        var $14=$13+232; //@line 923 "xmlparse.c"
        HEAP[$14]=0; //@line 923 "xmlparse.c"
        __label__ = 7; break; //@line 923 "xmlparse.c"
      case 5: // $bb4
        var $15=$13+416; //@line 925 "xmlparse.c"
        var $16=$encodingName_addr; //@line 925 "xmlparse.c"
        var $17=_poolCopyString($15, $16); //@line 925 "xmlparse.c"
        var $18=$parser_addr; //@line 925 "xmlparse.c"
        var $19=$18+232; //@line 925 "xmlparse.c"
        HEAP[$19]=$17; //@line 925 "xmlparse.c"
        var $20=$parser_addr; //@line 926 "xmlparse.c"
        var $21=$20+232; //@line 926 "xmlparse.c"
        var $22=HEAP[$21]; //@line 926 "xmlparse.c"
        var $23=($22)==0; //@line 926 "xmlparse.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 926 "xmlparse.c"
      case 6: // $bb5
        $0=0; //@line 927 "xmlparse.c"
        __label__ = 8; break; //@line 927 "xmlparse.c"
      case 7: // $bb6
        $0=1; //@line 929 "xmlparse.c"
        __label__ = 8; break; //@line 929 "xmlparse.c"
      case 8: // $bb7
        var $24=$0; //@line 921 "xmlparse.c"
        $retval=$24; //@line 921 "xmlparse.c"
        var $retval8=$retval; //@line 921 "xmlparse.c"
        ;
        return $retval8; //@line 921 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ExternalEntityParserCreate($oldParser, $context, $encodingName) {
    var __stackBase__  = STACKTOP; STACKTOP += 2; _memset(__stackBase__, 0, 2);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $oldParser_addr;
        var $context_addr;
        var $encodingName_addr;
        var $retval;
        var $0;
        var $parser;
        var $newDtd;
        var $oldDtd;
        var $oldStartElementHandler;
        var $oldEndElementHandler;
        var $oldCharacterDataHandler;
        var $oldProcessingInstructionHandler;
        var $oldCommentHandler;
        var $oldStartCdataSectionHandler;
        var $oldEndCdataSectionHandler;
        var $oldDefaultHandler;
        var $oldUnparsedEntityDeclHandler;
        var $oldNotationDeclHandler;
        var $oldStartNamespaceDeclHandler;
        var $oldEndNamespaceDeclHandler;
        var $oldNotStandaloneHandler;
        var $oldExternalEntityRefHandler;
        var $oldSkippedEntityHandler;
        var $oldUnknownEncodingHandler;
        var $oldElementDeclHandler;
        var $oldAttlistDeclHandler;
        var $oldEntityDeclHandler;
        var $oldXmlDeclHandler;
        var $oldDeclElementType;
        var $oldUserData;
        var $oldHandlerArg;
        var $oldDefaultExpandInternalEntities;
        var $oldExternalEntityRefHandlerArg;
        var $oldParamEntityParsing;
        var $oldInEntityValue;
        var $oldns_triplets;
        var $tmp=__stackBase__;
        $oldParser_addr=$oldParser;
        $context_addr=$context;
        $encodingName_addr=$encodingName;
        var $1=$oldParser_addr; //@line 937 "xmlparse.c"
        $parser=$1; //@line 937 "xmlparse.c"
        $newDtd=0; //@line 938 "xmlparse.c"
        var $2=$parser; //@line 939 "xmlparse.c"
        var $3=$2+356; //@line 939 "xmlparse.c"
        var $4=HEAP[$3]; //@line 939 "xmlparse.c"
        $oldDtd=$4; //@line 939 "xmlparse.c"
        var $5=$parser; //@line 940 "xmlparse.c"
        var $6=$5+52; //@line 940 "xmlparse.c"
        var $7=HEAP[$6]; //@line 940 "xmlparse.c"
        $oldStartElementHandler=$7; //@line 940 "xmlparse.c"
        var $8=$parser; //@line 941 "xmlparse.c"
        var $9=$8+56; //@line 941 "xmlparse.c"
        var $10=HEAP[$9]; //@line 941 "xmlparse.c"
        $oldEndElementHandler=$10; //@line 941 "xmlparse.c"
        var $11=$parser; //@line 942 "xmlparse.c"
        var $12=$11+60; //@line 942 "xmlparse.c"
        var $13=HEAP[$12]; //@line 942 "xmlparse.c"
        $oldCharacterDataHandler=$13; //@line 942 "xmlparse.c"
        var $14=$parser; //@line 944 "xmlparse.c"
        var $15=$14+64; //@line 944 "xmlparse.c"
        var $16=HEAP[$15]; //@line 944 "xmlparse.c"
        $oldProcessingInstructionHandler=$16; //@line 944 "xmlparse.c"
        var $17=$parser; //@line 945 "xmlparse.c"
        var $18=$17+68; //@line 945 "xmlparse.c"
        var $19=HEAP[$18]; //@line 945 "xmlparse.c"
        $oldCommentHandler=$19; //@line 945 "xmlparse.c"
        var $20=$parser; //@line 947 "xmlparse.c"
        var $21=$20+72; //@line 947 "xmlparse.c"
        var $22=HEAP[$21]; //@line 947 "xmlparse.c"
        $oldStartCdataSectionHandler=$22; //@line 947 "xmlparse.c"
        var $23=$parser; //@line 949 "xmlparse.c"
        var $24=$23+76; //@line 949 "xmlparse.c"
        var $25=HEAP[$24]; //@line 949 "xmlparse.c"
        $oldEndCdataSectionHandler=$25; //@line 949 "xmlparse.c"
        var $26=$parser; //@line 950 "xmlparse.c"
        var $27=$26+80; //@line 950 "xmlparse.c"
        var $28=HEAP[$27]; //@line 950 "xmlparse.c"
        $oldDefaultHandler=$28; //@line 950 "xmlparse.c"
        var $29=$parser; //@line 952 "xmlparse.c"
        var $30=$29+92; //@line 952 "xmlparse.c"
        var $31=HEAP[$30]; //@line 952 "xmlparse.c"
        $oldUnparsedEntityDeclHandler=$31; //@line 952 "xmlparse.c"
        var $32=$parser; //@line 953 "xmlparse.c"
        var $33=$32+96; //@line 953 "xmlparse.c"
        var $34=HEAP[$33]; //@line 953 "xmlparse.c"
        $oldNotationDeclHandler=$34; //@line 953 "xmlparse.c"
        var $35=$parser; //@line 955 "xmlparse.c"
        var $36=$35+100; //@line 955 "xmlparse.c"
        var $37=HEAP[$36]; //@line 955 "xmlparse.c"
        $oldStartNamespaceDeclHandler=$37; //@line 955 "xmlparse.c"
        var $38=$parser; //@line 957 "xmlparse.c"
        var $39=$38+104; //@line 957 "xmlparse.c"
        var $40=HEAP[$39]; //@line 957 "xmlparse.c"
        $oldEndNamespaceDeclHandler=$40; //@line 957 "xmlparse.c"
        var $41=$parser; //@line 958 "xmlparse.c"
        var $42=$41+108; //@line 958 "xmlparse.c"
        var $43=HEAP[$42]; //@line 958 "xmlparse.c"
        $oldNotStandaloneHandler=$43; //@line 958 "xmlparse.c"
        var $44=$parser; //@line 960 "xmlparse.c"
        var $45=$44+112; //@line 960 "xmlparse.c"
        var $46=HEAP[$45]; //@line 960 "xmlparse.c"
        $oldExternalEntityRefHandler=$46; //@line 960 "xmlparse.c"
        var $47=$parser; //@line 961 "xmlparse.c"
        var $48=$47+120; //@line 961 "xmlparse.c"
        var $49=HEAP[$48]; //@line 961 "xmlparse.c"
        $oldSkippedEntityHandler=$49; //@line 961 "xmlparse.c"
        var $50=$parser; //@line 963 "xmlparse.c"
        var $51=$50+124; //@line 963 "xmlparse.c"
        var $52=HEAP[$51]; //@line 963 "xmlparse.c"
        $oldUnknownEncodingHandler=$52; //@line 963 "xmlparse.c"
        var $53=$parser; //@line 964 "xmlparse.c"
        var $54=$53+128; //@line 964 "xmlparse.c"
        var $55=HEAP[$54]; //@line 964 "xmlparse.c"
        $oldElementDeclHandler=$55; //@line 964 "xmlparse.c"
        var $56=$parser; //@line 965 "xmlparse.c"
        var $57=$56+132; //@line 965 "xmlparse.c"
        var $58=HEAP[$57]; //@line 965 "xmlparse.c"
        $oldAttlistDeclHandler=$58; //@line 965 "xmlparse.c"
        var $59=$parser; //@line 966 "xmlparse.c"
        var $60=$59+136; //@line 966 "xmlparse.c"
        var $61=HEAP[$60]; //@line 966 "xmlparse.c"
        $oldEntityDeclHandler=$61; //@line 966 "xmlparse.c"
        var $62=$parser; //@line 967 "xmlparse.c"
        var $63=$62+140; //@line 967 "xmlparse.c"
        var $64=HEAP[$63]; //@line 967 "xmlparse.c"
        $oldXmlDeclHandler=$64; //@line 967 "xmlparse.c"
        var $65=$parser; //@line 968 "xmlparse.c"
        var $66=$65+344; //@line 968 "xmlparse.c"
        var $67=HEAP[$66]; //@line 968 "xmlparse.c"
        $oldDeclElementType=$67; //@line 968 "xmlparse.c"
        var $68=$parser; //@line 970 "xmlparse.c"
        var $69=$68; //@line 970 "xmlparse.c"
        var $70=HEAP[$69]; //@line 970 "xmlparse.c"
        $oldUserData=$70; //@line 970 "xmlparse.c"
        var $71=$parser; //@line 971 "xmlparse.c"
        var $72=$71+4; //@line 971 "xmlparse.c"
        var $73=HEAP[$72]; //@line 971 "xmlparse.c"
        $oldHandlerArg=$73; //@line 971 "xmlparse.c"
        var $74=$parser; //@line 972 "xmlparse.c"
        var $75=$74+308; //@line 972 "xmlparse.c"
        var $76=HEAP[$75]; //@line 972 "xmlparse.c"
        $oldDefaultExpandInternalEntities=$76; //@line 972 "xmlparse.c"
        var $77=$parser; //@line 973 "xmlparse.c"
        var $78=$77+116; //@line 973 "xmlparse.c"
        var $79=HEAP[$78]; //@line 973 "xmlparse.c"
        $oldExternalEntityRefHandlerArg=$79; //@line 973 "xmlparse.c"
        var $80=$parser; //@line 975 "xmlparse.c"
        var $81=$80+492; //@line 975 "xmlparse.c"
        var $82=HEAP[$81]; //@line 975 "xmlparse.c"
        $oldParamEntityParsing=$82; //@line 975 "xmlparse.c"
        var $83=$parser; //@line 976 "xmlparse.c"
        var $84=$83+256; //@line 976 "xmlparse.c"
        var $85=$84+20; //@line 976 "xmlparse.c"
        var $86=HEAP[$85]; //@line 976 "xmlparse.c"
        $oldInEntityValue=$86; //@line 976 "xmlparse.c"
        var $87=$parser; //@line 978 "xmlparse.c"
        var $88=$87+237; //@line 978 "xmlparse.c"
        var $89=HEAP[$88]; //@line 978 "xmlparse.c"
        $oldns_triplets=$89; //@line 978 "xmlparse.c"
        var $90=$context_addr; //@line 981 "xmlparse.c"
        var $91=($90)==0; //@line 981 "xmlparse.c"
        if ($91) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 981 "xmlparse.c"
      case 1: // $bb
        var $92=$oldDtd; //@line 982 "xmlparse.c"
        $newDtd=$92; //@line 982 "xmlparse.c"
        __label__ = 2; break; //@line 982 "xmlparse.c"
      case 2: // $bb1
        var $93=$parser; //@line 990 "xmlparse.c"
        var $94=$93+236; //@line 990 "xmlparse.c"
        var $95=HEAP[$94]; //@line 990 "xmlparse.c"
        var $96=($95)!=0; //@line 990 "xmlparse.c"
        var $97=$parser; //@line 992 "xmlparse.c"
        if ($96) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 990 "xmlparse.c"
      case 3: // $bb2
        var $98=$97+472; //@line 992 "xmlparse.c"
        var $99=HEAP[$98]; //@line 992 "xmlparse.c"
        var $100=$tmp; //@line 992 "xmlparse.c"
        HEAP[$100]=$99; //@line 992 "xmlparse.c"
        var $101=$parser; //@line 993 "xmlparse.c"
        var $102=$101+12; //@line 993 "xmlparse.c"
        var $103=$encodingName_addr; //@line 993 "xmlparse.c"
        var $tmp3=$tmp; //@line 993 "xmlparse.c"
        var $104=$newDtd; //@line 993 "xmlparse.c"
        var $105=_parserCreate($103, $102, $tmp3, $104); //@line 993 "xmlparse.c"
        $parser=$105; //@line 993 "xmlparse.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 993 "xmlparse.c"
      case 4: // $bb4
        var $106=$97+12; //@line 996 "xmlparse.c"
        var $107=$encodingName_addr; //@line 996 "xmlparse.c"
        var $108=$newDtd; //@line 996 "xmlparse.c"
        var $109=_parserCreate($107, $106, 0, $108); //@line 996 "xmlparse.c"
        $parser=$109; //@line 996 "xmlparse.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 996 "xmlparse.c"
      case 5: // $bb5
        var $110=__lastLabel__ == 4 ? $109 : ($105);
        var $111=($110)==0; //@line 999 "xmlparse.c"
        if ($111) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 999 "xmlparse.c"
      case 6: // $bb6
        $0=0; //@line 1000 "xmlparse.c"
        __label__ = 19; break; //@line 1000 "xmlparse.c"
      case 7: // $bb7
        var $112=$parser; //@line 1002 "xmlparse.c"
        var $113=$112+52; //@line 1002 "xmlparse.c"
        var $114=$oldStartElementHandler; //@line 1002 "xmlparse.c"
        HEAP[$113]=$114; //@line 1002 "xmlparse.c"
        var $115=$parser; //@line 1003 "xmlparse.c"
        var $116=$115+56; //@line 1003 "xmlparse.c"
        var $117=$oldEndElementHandler; //@line 1003 "xmlparse.c"
        HEAP[$116]=$117; //@line 1003 "xmlparse.c"
        var $118=$parser; //@line 1004 "xmlparse.c"
        var $119=$118+60; //@line 1004 "xmlparse.c"
        var $120=$oldCharacterDataHandler; //@line 1004 "xmlparse.c"
        HEAP[$119]=$120; //@line 1004 "xmlparse.c"
        var $121=$parser; //@line 1005 "xmlparse.c"
        var $122=$121+64; //@line 1005 "xmlparse.c"
        var $123=$oldProcessingInstructionHandler; //@line 1005 "xmlparse.c"
        HEAP[$122]=$123; //@line 1005 "xmlparse.c"
        var $124=$parser; //@line 1006 "xmlparse.c"
        var $125=$124+68; //@line 1006 "xmlparse.c"
        var $126=$oldCommentHandler; //@line 1006 "xmlparse.c"
        HEAP[$125]=$126; //@line 1006 "xmlparse.c"
        var $127=$parser; //@line 1007 "xmlparse.c"
        var $128=$127+72; //@line 1007 "xmlparse.c"
        var $129=$oldStartCdataSectionHandler; //@line 1007 "xmlparse.c"
        HEAP[$128]=$129; //@line 1007 "xmlparse.c"
        var $130=$parser; //@line 1008 "xmlparse.c"
        var $131=$130+76; //@line 1008 "xmlparse.c"
        var $132=$oldEndCdataSectionHandler; //@line 1008 "xmlparse.c"
        HEAP[$131]=$132; //@line 1008 "xmlparse.c"
        var $133=$parser; //@line 1009 "xmlparse.c"
        var $134=$133+80; //@line 1009 "xmlparse.c"
        var $135=$oldDefaultHandler; //@line 1009 "xmlparse.c"
        HEAP[$134]=$135; //@line 1009 "xmlparse.c"
        var $136=$parser; //@line 1010 "xmlparse.c"
        var $137=$136+92; //@line 1010 "xmlparse.c"
        var $138=$oldUnparsedEntityDeclHandler; //@line 1010 "xmlparse.c"
        HEAP[$137]=$138; //@line 1010 "xmlparse.c"
        var $139=$parser; //@line 1011 "xmlparse.c"
        var $140=$139+96; //@line 1011 "xmlparse.c"
        var $141=$oldNotationDeclHandler; //@line 1011 "xmlparse.c"
        HEAP[$140]=$141; //@line 1011 "xmlparse.c"
        var $142=$parser; //@line 1012 "xmlparse.c"
        var $143=$142+100; //@line 1012 "xmlparse.c"
        var $144=$oldStartNamespaceDeclHandler; //@line 1012 "xmlparse.c"
        HEAP[$143]=$144; //@line 1012 "xmlparse.c"
        var $145=$parser; //@line 1013 "xmlparse.c"
        var $146=$145+104; //@line 1013 "xmlparse.c"
        var $147=$oldEndNamespaceDeclHandler; //@line 1013 "xmlparse.c"
        HEAP[$146]=$147; //@line 1013 "xmlparse.c"
        var $148=$parser; //@line 1014 "xmlparse.c"
        var $149=$148+108; //@line 1014 "xmlparse.c"
        var $150=$oldNotStandaloneHandler; //@line 1014 "xmlparse.c"
        HEAP[$149]=$150; //@line 1014 "xmlparse.c"
        var $151=$parser; //@line 1015 "xmlparse.c"
        var $152=$151+112; //@line 1015 "xmlparse.c"
        var $153=$oldExternalEntityRefHandler; //@line 1015 "xmlparse.c"
        HEAP[$152]=$153; //@line 1015 "xmlparse.c"
        var $154=$parser; //@line 1016 "xmlparse.c"
        var $155=$154+120; //@line 1016 "xmlparse.c"
        var $156=$oldSkippedEntityHandler; //@line 1016 "xmlparse.c"
        HEAP[$155]=$156; //@line 1016 "xmlparse.c"
        var $157=$parser; //@line 1017 "xmlparse.c"
        var $158=$157+124; //@line 1017 "xmlparse.c"
        var $159=$oldUnknownEncodingHandler; //@line 1017 "xmlparse.c"
        HEAP[$158]=$159; //@line 1017 "xmlparse.c"
        var $160=$parser; //@line 1018 "xmlparse.c"
        var $161=$160+128; //@line 1018 "xmlparse.c"
        var $162=$oldElementDeclHandler; //@line 1018 "xmlparse.c"
        HEAP[$161]=$162; //@line 1018 "xmlparse.c"
        var $163=$parser; //@line 1019 "xmlparse.c"
        var $164=$163+132; //@line 1019 "xmlparse.c"
        var $165=$oldAttlistDeclHandler; //@line 1019 "xmlparse.c"
        HEAP[$164]=$165; //@line 1019 "xmlparse.c"
        var $166=$parser; //@line 1020 "xmlparse.c"
        var $167=$166+136; //@line 1020 "xmlparse.c"
        var $168=$oldEntityDeclHandler; //@line 1020 "xmlparse.c"
        HEAP[$167]=$168; //@line 1020 "xmlparse.c"
        var $169=$parser; //@line 1021 "xmlparse.c"
        var $170=$169+140; //@line 1021 "xmlparse.c"
        var $171=$oldXmlDeclHandler; //@line 1021 "xmlparse.c"
        HEAP[$170]=$171; //@line 1021 "xmlparse.c"
        var $172=$parser; //@line 1022 "xmlparse.c"
        var $173=$172+344; //@line 1022 "xmlparse.c"
        var $174=$oldDeclElementType; //@line 1022 "xmlparse.c"
        HEAP[$173]=$174; //@line 1022 "xmlparse.c"
        var $175=$parser; //@line 1023 "xmlparse.c"
        var $176=$175; //@line 1023 "xmlparse.c"
        var $177=$oldUserData; //@line 1023 "xmlparse.c"
        HEAP[$176]=$177; //@line 1023 "xmlparse.c"
        var $178=$oldUserData; //@line 1024 "xmlparse.c"
        var $179=$oldHandlerArg; //@line 1024 "xmlparse.c"
        var $180=($178)==($179); //@line 1024 "xmlparse.c"
        var $181=$parser; //@line 1025 "xmlparse.c"
        if ($180) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1024 "xmlparse.c"
      case 8: // $bb8
        var $182=$181; //@line 1025 "xmlparse.c"
        var $183=HEAP[$182]; //@line 1025 "xmlparse.c"
        var $184=$parser; //@line 1025 "xmlparse.c"
        var $185=$184+4; //@line 1025 "xmlparse.c"
        HEAP[$185]=$183; //@line 1025 "xmlparse.c"
        __label__ = 10; break; //@line 1025 "xmlparse.c"
      case 9: // $bb9
        var $186=$181+4; //@line 1027 "xmlparse.c"
        var $187=$parser; //@line 1027 "xmlparse.c"
        var $188=$187; //@line 1027 "xmlparse.c"
        HEAP[$186]=$188; //@line 1027 "xmlparse.c"
        __label__ = 10; break; //@line 1027 "xmlparse.c"
      case 10: // $bb10
        var $189=$oldExternalEntityRefHandlerArg; //@line 1028 "xmlparse.c"
        var $190=$oldParser_addr; //@line 1028 "xmlparse.c"
        var $191=($189)!=($190); //@line 1028 "xmlparse.c"
        if ($191) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1028 "xmlparse.c"
      case 11: // $bb11
        var $192=$parser; //@line 1029 "xmlparse.c"
        var $193=$192+116; //@line 1029 "xmlparse.c"
        var $194=$oldExternalEntityRefHandlerArg; //@line 1029 "xmlparse.c"
        HEAP[$193]=$194; //@line 1029 "xmlparse.c"
        __label__ = 12; break; //@line 1029 "xmlparse.c"
      case 12: // $bb12
        var $195=$parser; //@line 1030 "xmlparse.c"
        var $196=$195+308; //@line 1030 "xmlparse.c"
        var $197=$oldDefaultExpandInternalEntities; //@line 1030 "xmlparse.c"
        HEAP[$196]=$197; //@line 1030 "xmlparse.c"
        var $198=$parser; //@line 1031 "xmlparse.c"
        var $199=$198+237; //@line 1031 "xmlparse.c"
        var $200=$oldns_triplets; //@line 1031 "xmlparse.c"
        HEAP[$199]=$200; //@line 1031 "xmlparse.c"
        var $201=$parser; //@line 1032 "xmlparse.c"
        var $202=$201+476; //@line 1032 "xmlparse.c"
        var $203=$oldParser_addr; //@line 1032 "xmlparse.c"
        HEAP[$202]=$203; //@line 1032 "xmlparse.c"
        var $204=$parser; //@line 1034 "xmlparse.c"
        var $205=$204+492; //@line 1034 "xmlparse.c"
        var $206=$oldParamEntityParsing; //@line 1034 "xmlparse.c"
        HEAP[$205]=$206; //@line 1034 "xmlparse.c"
        var $207=$parser; //@line 1035 "xmlparse.c"
        var $208=$207+256; //@line 1035 "xmlparse.c"
        var $209=$208+20; //@line 1035 "xmlparse.c"
        var $210=$oldInEntityValue; //@line 1035 "xmlparse.c"
        HEAP[$209]=$210; //@line 1035 "xmlparse.c"
        var $211=$context_addr; //@line 1036 "xmlparse.c"
        var $212=($211)!=0; //@line 1036 "xmlparse.c"
        var $213=$parser; //@line 1038 "xmlparse.c"
        if ($212) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 1036 "xmlparse.c"
      case 13: // $bb13
        var $214=$213+12; //@line 1038 "xmlparse.c"
        var $215=$parser; //@line 1038 "xmlparse.c"
        var $216=$215+356; //@line 1038 "xmlparse.c"
        var $217=HEAP[$216]; //@line 1038 "xmlparse.c"
        var $218=$oldDtd; //@line 1038 "xmlparse.c"
        var $219=_dtdCopy($217, $218, $214); //@line 1038 "xmlparse.c"
        var $220=($219)==0; //@line 1038 "xmlparse.c"
        if ($220) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 1038 "xmlparse.c"
      case 14: // $bb14
        var $221=$parser; //@line 1038 "xmlparse.c"
        var $222=$context_addr; //@line 1038 "xmlparse.c"
        var $223=_setContext($221, $222); //@line 1038 "xmlparse.c"
        var $224=($223)==0; //@line 1038 "xmlparse.c"
        if ($224) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1038 "xmlparse.c"
      case 15: // $bb15
        var $225=$parser; //@line 1040 "xmlparse.c"
        _PyExpat_XML_ParserFree($225); //@line 1040 "xmlparse.c"
        $0=0; //@line 1041 "xmlparse.c"
        __label__ = 19; break; //@line 1041 "xmlparse.c"
      case 16: // $bb16
        var $226=$parser; //@line 1043 "xmlparse.c"
        var $227=$226+280; //@line 1043 "xmlparse.c"
        HEAP[$227]=(FUNCTION_TABLE_OFFSET + 50); //@line 1043 "xmlparse.c"
        __label__ = 18; break; //@line 1043 "xmlparse.c"
      case 17: // $bb17
        var $228=$213+488; //@line 1054 "xmlparse.c"
        HEAP[$228]=1; //@line 1054 "xmlparse.c"
        var $229=$parser; //@line 1055 "xmlparse.c"
        var $230=$229+256; //@line 1055 "xmlparse.c"
        _PyExpat_XmlPrologStateInitExternalEntity($230); //@line 1055 "xmlparse.c"
        var $231=$parser; //@line 1056 "xmlparse.c"
        var $232=$231+280; //@line 1056 "xmlparse.c"
        HEAP[$232]=(FUNCTION_TABLE_OFFSET + 52); //@line 1056 "xmlparse.c"
        __label__ = 18; break; //@line 1056 "xmlparse.c"
      case 18: // $bb18
        var $233=$parser; //@line 1059 "xmlparse.c"
        $0=$233; //@line 1059 "xmlparse.c"
        __label__ = 19; break; //@line 1059 "xmlparse.c"
      case 19: // $bb19
        var $234=$0; //@line 1000 "xmlparse.c"
        $retval=$234; //@line 1000 "xmlparse.c"
        var $retval20=$retval; //@line 1000 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval20; //@line 1000 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _destroyBindings($bindings, $parser) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $bindings_addr;
        var $parser_addr;
        var $b;
        $bindings_addr=$bindings;
        $parser_addr=$parser;
        $b=$bindings; //@line 1066 "xmlparse.c"
        var $0=($bindings)==0; //@line 1067 "xmlparse.c"
        if ($0) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1067 "xmlparse.c"
      case 1: // $bb1
        var $1=$b; //@line 1069 "xmlparse.c"
        var $2=$1+4; //@line 1069 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1069 "xmlparse.c"
        $bindings_addr=$3; //@line 1069 "xmlparse.c"
        var $4=$parser_addr; //@line 1070 "xmlparse.c"
        var $5=$4+12; //@line 1070 "xmlparse.c"
        var $6=$5+8; //@line 1070 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1070 "xmlparse.c"
        var $8=$b; //@line 1070 "xmlparse.c"
        var $9=$8+16; //@line 1070 "xmlparse.c"
        var $10=HEAP[$9]; //@line 1070 "xmlparse.c"
        FUNCTION_TABLE[$7]($10); //@line 1070 "xmlparse.c"
        var $11=$parser_addr; //@line 1071 "xmlparse.c"
        var $12=$11+12; //@line 1071 "xmlparse.c"
        var $13=$12+8; //@line 1071 "xmlparse.c"
        var $14=HEAP[$13]; //@line 1071 "xmlparse.c"
        var $15=$b; //@line 1071 "xmlparse.c"
        var $16=$15; //@line 1071 "xmlparse.c"
        FUNCTION_TABLE[$14]($16); //@line 1071 "xmlparse.c"
        var $_pr=$bindings_addr;
        $b=$_pr; //@line 1066 "xmlparse.c"
        var $17=($_pr)==0; //@line 1067 "xmlparse.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1067 "xmlparse.c"
      case 2: // $return
        ;
        return; //@line 1073 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ParserFree($parser) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $tagList;
        var $entityList;
        var $p;
        var $openEntity;
        $parser_addr=$parser;
        var $0=$parser_addr; //@line 1080 "xmlparse.c"
        var $1=($0)==0; //@line 1080 "xmlparse.c"
        if ($1) { __label__ = 17; break; } else { __label__ = 1; break; } //@line 1080 "xmlparse.c"
      case 1: // $bb
        var $2=$parser_addr; //@line 1083 "xmlparse.c"
        var $3=$2+364; //@line 1083 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1083 "xmlparse.c"
        $tagList=$4; //@line 1083 "xmlparse.c"
        __lastLabel__ = 1; __label__ = 2; break; //@line 1083 "xmlparse.c"
      case 2: // $bb1
        var $5=__lastLabel__ == 5 ? $_pr : ($4);
        var $6=($5)==0; //@line 1086 "xmlparse.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1086 "xmlparse.c"
      case 3: // $bb2
        var $7=$parser_addr; //@line 1087 "xmlparse.c"
        var $8=$7+368; //@line 1087 "xmlparse.c"
        var $9=HEAP[$8]; //@line 1087 "xmlparse.c"
        var $10=($9)==0; //@line 1087 "xmlparse.c"
        var $11=$parser_addr; //@line 1099 "xmlparse.c"
        if ($10) { __label__ = 6; break; } else { __label__ = 4; break; } //@line 1087 "xmlparse.c"
      case 4: // $bb3
        var $12=$11+368; //@line 1089 "xmlparse.c"
        var $13=HEAP[$12]; //@line 1089 "xmlparse.c"
        $tagList=$13; //@line 1089 "xmlparse.c"
        var $14=$parser_addr; //@line 1090 "xmlparse.c"
        var $15=$14+368; //@line 1090 "xmlparse.c"
        HEAP[$15]=0; //@line 1090 "xmlparse.c"
        __label__ = 5; break; //@line 1090 "xmlparse.c"
      case 5: // $bb4
        var $16=$tagList; //@line 1092 "xmlparse.c"
        $p=$16; //@line 1092 "xmlparse.c"
        var $17=$tagList; //@line 1093 "xmlparse.c"
        var $18=$17; //@line 1093 "xmlparse.c"
        var $19=HEAP[$18]; //@line 1093 "xmlparse.c"
        $tagList=$19; //@line 1093 "xmlparse.c"
        var $20=$parser_addr; //@line 1094 "xmlparse.c"
        var $21=$20+12; //@line 1094 "xmlparse.c"
        var $22=$21+8; //@line 1094 "xmlparse.c"
        var $23=HEAP[$22]; //@line 1094 "xmlparse.c"
        var $24=$p; //@line 1094 "xmlparse.c"
        var $25=$24+36; //@line 1094 "xmlparse.c"
        var $26=HEAP[$25]; //@line 1094 "xmlparse.c"
        FUNCTION_TABLE[$23]($26); //@line 1094 "xmlparse.c"
        var $27=$p; //@line 1095 "xmlparse.c"
        var $28=$27+44; //@line 1095 "xmlparse.c"
        var $29=HEAP[$28]; //@line 1095 "xmlparse.c"
        var $30=$parser_addr; //@line 1095 "xmlparse.c"
        _destroyBindings($29, $30); //@line 1095 "xmlparse.c"
        var $31=$parser_addr; //@line 1096 "xmlparse.c"
        var $32=$31+12; //@line 1096 "xmlparse.c"
        var $33=$32+8; //@line 1096 "xmlparse.c"
        var $34=HEAP[$33]; //@line 1096 "xmlparse.c"
        var $35=$p; //@line 1096 "xmlparse.c"
        var $36=$35; //@line 1096 "xmlparse.c"
        FUNCTION_TABLE[$34]($36); //@line 1096 "xmlparse.c"
        var $_pr=$tagList;
        __lastLabel__ = 5; __label__ = 2; break; //@line 1096 "xmlparse.c"
      case 6: // $bb5
        var $37=$11+300; //@line 1099 "xmlparse.c"
        var $38=HEAP[$37]; //@line 1099 "xmlparse.c"
        $entityList=$38; //@line 1099 "xmlparse.c"
        __lastLabel__ = 6; __label__ = 7; break; //@line 1099 "xmlparse.c"
      case 7: // $bb6
        var $39=__lastLabel__ == 10 ? $_pr1 : ($38);
        var $40=($39)==0; //@line 1102 "xmlparse.c"
        if ($40) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 1102 "xmlparse.c"
      case 8: // $bb7
        var $41=$parser_addr; //@line 1103 "xmlparse.c"
        var $42=$41+304; //@line 1103 "xmlparse.c"
        var $43=HEAP[$42]; //@line 1103 "xmlparse.c"
        var $44=($43)==0; //@line 1103 "xmlparse.c"
        var $45=$parser_addr; //@line 1113 "xmlparse.c"
        if ($44) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 1103 "xmlparse.c"
      case 9: // $bb8
        var $46=$45+304; //@line 1105 "xmlparse.c"
        var $47=HEAP[$46]; //@line 1105 "xmlparse.c"
        $entityList=$47; //@line 1105 "xmlparse.c"
        var $48=$parser_addr; //@line 1106 "xmlparse.c"
        var $49=$48+304; //@line 1106 "xmlparse.c"
        HEAP[$49]=0; //@line 1106 "xmlparse.c"
        __label__ = 10; break; //@line 1106 "xmlparse.c"
      case 10: // $bb9
        var $50=$entityList; //@line 1108 "xmlparse.c"
        $openEntity=$50; //@line 1108 "xmlparse.c"
        var $51=$entityList; //@line 1109 "xmlparse.c"
        var $52=$51+8; //@line 1109 "xmlparse.c"
        var $53=HEAP[$52]; //@line 1109 "xmlparse.c"
        $entityList=$53; //@line 1109 "xmlparse.c"
        var $54=$parser_addr; //@line 1110 "xmlparse.c"
        var $55=$54+12; //@line 1110 "xmlparse.c"
        var $56=$55+8; //@line 1110 "xmlparse.c"
        var $57=HEAP[$56]; //@line 1110 "xmlparse.c"
        var $58=$openEntity; //@line 1110 "xmlparse.c"
        var $59=$58; //@line 1110 "xmlparse.c"
        FUNCTION_TABLE[$57]($59); //@line 1110 "xmlparse.c"
        var $_pr1=$entityList;
        __lastLabel__ = 10; __label__ = 7; break; //@line 1110 "xmlparse.c"
      case 11: // $bb10
        var $60=$45+376; //@line 1113 "xmlparse.c"
        var $61=HEAP[$60]; //@line 1113 "xmlparse.c"
        var $62=$parser_addr; //@line 1113 "xmlparse.c"
        _destroyBindings($61, $62); //@line 1113 "xmlparse.c"
        var $63=$parser_addr; //@line 1114 "xmlparse.c"
        var $64=$63+372; //@line 1114 "xmlparse.c"
        var $65=HEAP[$64]; //@line 1114 "xmlparse.c"
        var $66=$parser_addr; //@line 1114 "xmlparse.c"
        _destroyBindings($65, $66); //@line 1114 "xmlparse.c"
        var $67=$parser_addr; //@line 1115 "xmlparse.c"
        var $68=$67+416; //@line 1115 "xmlparse.c"
        _poolDestroy($68); //@line 1115 "xmlparse.c"
        var $69=$parser_addr; //@line 1116 "xmlparse.c"
        var $70=$69+440; //@line 1116 "xmlparse.c"
        _poolDestroy($70); //@line 1116 "xmlparse.c"
        var $71=$parser_addr; //@line 1121 "xmlparse.c"
        var $72=$71+488; //@line 1121 "xmlparse.c"
        var $73=HEAP[$72]; //@line 1121 "xmlparse.c"
        var $74=($73)==0; //@line 1121 "xmlparse.c"
        if ($74) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 1121 "xmlparse.c"
      case 12: // $bb11
        var $75=$parser_addr; //@line 1121 "xmlparse.c"
        var $76=$75+356; //@line 1121 "xmlparse.c"
        var $77=HEAP[$76]; //@line 1121 "xmlparse.c"
        var $78=($77)!=0; //@line 1121 "xmlparse.c"
        if ($78) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1121 "xmlparse.c"
      case 13: // $bb12
        var $79=$parser_addr; //@line 1125 "xmlparse.c"
        var $80=$79+12; //@line 1125 "xmlparse.c"
        var $81=$parser_addr; //@line 1125 "xmlparse.c"
        var $82=$81+476; //@line 1125 "xmlparse.c"
        var $83=HEAP[$82]; //@line 1125 "xmlparse.c"
        var $84=($83)==0; //@line 1125 "xmlparse.c"
        var $85=($84); //@line 1125 "xmlparse.c"
        var $86=$parser_addr; //@line 1125 "xmlparse.c"
        var $87=$86+356; //@line 1125 "xmlparse.c"
        var $88=HEAP[$87]; //@line 1125 "xmlparse.c"
        var $89=((($85)) & 255); //@line 1125 "xmlparse.c"
        _dtdDestroy($88, $89, $80); //@line 1125 "xmlparse.c"
        __label__ = 14; break; //@line 1125 "xmlparse.c"
      case 14: // $bb13
        var $90=$parser_addr; //@line 1126 "xmlparse.c"
        var $91=$90+12; //@line 1126 "xmlparse.c"
        var $92=$91+8; //@line 1126 "xmlparse.c"
        var $93=HEAP[$92]; //@line 1126 "xmlparse.c"
        var $94=$parser_addr; //@line 1126 "xmlparse.c"
        var $95=$94+392; //@line 1126 "xmlparse.c"
        var $96=HEAP[$95]; //@line 1126 "xmlparse.c"
        var $97=$96; //@line 1126 "xmlparse.c"
        FUNCTION_TABLE[$93]($97); //@line 1126 "xmlparse.c"
        var $98=$parser_addr; //@line 1127 "xmlparse.c"
        var $99=$98+12; //@line 1127 "xmlparse.c"
        var $100=$99+8; //@line 1127 "xmlparse.c"
        var $101=HEAP[$100]; //@line 1127 "xmlparse.c"
        var $102=$parser_addr; //@line 1127 "xmlparse.c"
        var $103=$102+464; //@line 1127 "xmlparse.c"
        var $104=HEAP[$103]; //@line 1127 "xmlparse.c"
        FUNCTION_TABLE[$101]($104); //@line 1127 "xmlparse.c"
        var $105=$parser_addr; //@line 1128 "xmlparse.c"
        var $106=$105+12; //@line 1128 "xmlparse.c"
        var $107=$106+8; //@line 1128 "xmlparse.c"
        var $108=HEAP[$107]; //@line 1128 "xmlparse.c"
        var $109=$parser_addr; //@line 1128 "xmlparse.c"
        var $110=$109+8; //@line 1128 "xmlparse.c"
        var $111=HEAP[$110]; //@line 1128 "xmlparse.c"
        FUNCTION_TABLE[$108]($111); //@line 1128 "xmlparse.c"
        var $112=$parser_addr; //@line 1129 "xmlparse.c"
        var $113=$112+12; //@line 1129 "xmlparse.c"
        var $114=$113+8; //@line 1129 "xmlparse.c"
        var $115=HEAP[$114]; //@line 1129 "xmlparse.c"
        var $116=$parser_addr; //@line 1129 "xmlparse.c"
        var $117=$116+44; //@line 1129 "xmlparse.c"
        var $118=HEAP[$117]; //@line 1129 "xmlparse.c"
        FUNCTION_TABLE[$115]($118); //@line 1129 "xmlparse.c"
        var $119=$parser_addr; //@line 1130 "xmlparse.c"
        var $120=$119+12; //@line 1130 "xmlparse.c"
        var $121=$120+8; //@line 1130 "xmlparse.c"
        var $122=HEAP[$121]; //@line 1130 "xmlparse.c"
        var $123=$parser_addr; //@line 1130 "xmlparse.c"
        var $124=$123+396; //@line 1130 "xmlparse.c"
        var $125=HEAP[$124]; //@line 1130 "xmlparse.c"
        var $126=$125; //@line 1130 "xmlparse.c"
        FUNCTION_TABLE[$122]($126); //@line 1130 "xmlparse.c"
        var $127=$parser_addr; //@line 1131 "xmlparse.c"
        var $128=$127+12; //@line 1131 "xmlparse.c"
        var $129=$128+8; //@line 1131 "xmlparse.c"
        var $130=HEAP[$129]; //@line 1131 "xmlparse.c"
        var $131=$parser_addr; //@line 1131 "xmlparse.c"
        var $132=$131+240; //@line 1131 "xmlparse.c"
        var $133=HEAP[$132]; //@line 1131 "xmlparse.c"
        FUNCTION_TABLE[$130]($133); //@line 1131 "xmlparse.c"
        var $134=$parser_addr; //@line 1132 "xmlparse.c"
        var $135=$134+252; //@line 1132 "xmlparse.c"
        var $136=HEAP[$135]; //@line 1132 "xmlparse.c"
        var $137=($136)!=0; //@line 1132 "xmlparse.c"
        if ($137) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1132 "xmlparse.c"
      case 15: // $bb14
        var $138=$parser_addr; //@line 1133 "xmlparse.c"
        var $139=$138+252; //@line 1133 "xmlparse.c"
        var $140=HEAP[$139]; //@line 1133 "xmlparse.c"
        var $141=$parser_addr; //@line 1133 "xmlparse.c"
        var $142=$141+244; //@line 1133 "xmlparse.c"
        var $143=HEAP[$142]; //@line 1133 "xmlparse.c"
        FUNCTION_TABLE[$140]($143); //@line 1133 "xmlparse.c"
        __label__ = 16; break; //@line 1133 "xmlparse.c"
      case 16: // $bb15
        var $144=$parser_addr; //@line 1134 "xmlparse.c"
        var $145=$144+12; //@line 1134 "xmlparse.c"
        var $146=$145+8; //@line 1134 "xmlparse.c"
        var $147=HEAP[$146]; //@line 1134 "xmlparse.c"
        var $148=$parser_addr; //@line 1134 "xmlparse.c"
        var $149=$148; //@line 1134 "xmlparse.c"
        FUNCTION_TABLE[$147]($149); //@line 1134 "xmlparse.c"
        __label__ = 17; break; //@line 1134 "xmlparse.c"
      case 17: // $return
        ;
        return; //@line 1081 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_UseParserAsHandlerArg($parser) {
    ;
    var __label__;
  
    var $parser_addr;
    $parser_addr=$parser;
    var $0=$parser_addr; //@line 1140 "xmlparse.c"
    var $1=$0+4; //@line 1140 "xmlparse.c"
    var $2=$parser_addr; //@line 1140 "xmlparse.c"
    var $3=$2; //@line 1140 "xmlparse.c"
    HEAP[$1]=$3; //@line 1140 "xmlparse.c"
    ;
    return; //@line 1141 "xmlparse.c"
  }
  

  function _PyExpat_XML_UseForeignDTD($parser, $useDTD) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $useDTD_addr;
        var $retval;
        var $0;
        $parser_addr=$parser;
        $useDTD_addr=$useDTD;
        var $1=$parser_addr; //@line 1148 "xmlparse.c"
        var $2=$1+480; //@line 1148 "xmlparse.c"
        var $3=$2; //@line 1148 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1148 "xmlparse.c"
        var $5=($4)==1; //@line 1148 "xmlparse.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1148 "xmlparse.c"
      case 1: // $bb
        var $6=$parser_addr; //@line 1148 "xmlparse.c"
        var $7=$6+480; //@line 1148 "xmlparse.c"
        var $8=$7; //@line 1148 "xmlparse.c"
        var $9=HEAP[$8]; //@line 1148 "xmlparse.c"
        var $10=($9)==3; //@line 1148 "xmlparse.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1148 "xmlparse.c"
      case 2: // $bb1
        $0=26; //@line 1149 "xmlparse.c"
        __label__ = 4; break; //@line 1149 "xmlparse.c"
      case 3: // $bb2
        var $11=$parser_addr; //@line 1150 "xmlparse.c"
        var $12=$11+489; //@line 1150 "xmlparse.c"
        var $13=$useDTD_addr; //@line 1150 "xmlparse.c"
        HEAP[$12]=$13; //@line 1150 "xmlparse.c"
        $0=0; //@line 1151 "xmlparse.c"
        __label__ = 4; break; //@line 1151 "xmlparse.c"
      case 4: // $bb3
        var $14=$0; //@line 1149 "xmlparse.c"
        $retval=$14; //@line 1149 "xmlparse.c"
        var $retval4=$retval; //@line 1149 "xmlparse.c"
        ;
        return $retval4; //@line 1149 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetReturnNSTriplet($parser, $do_nst) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $do_nst_addr;
        $parser_addr=$parser;
        $do_nst_addr=$do_nst;
        var $0=$parser_addr; //@line 1161 "xmlparse.c"
        var $1=$0+480; //@line 1161 "xmlparse.c"
        var $2=$1; //@line 1161 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1161 "xmlparse.c"
        var $4=($3)==1; //@line 1161 "xmlparse.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 1161 "xmlparse.c"
      case 1: // $bb
        var $5=$parser_addr; //@line 1161 "xmlparse.c"
        var $6=$5+480; //@line 1161 "xmlparse.c"
        var $7=$6; //@line 1161 "xmlparse.c"
        var $8=HEAP[$7]; //@line 1161 "xmlparse.c"
        var $9=($8)==3; //@line 1161 "xmlparse.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 1161 "xmlparse.c"
      case 2: // $bb2
        var $10=$do_nst_addr; //@line 1163 "xmlparse.c"
        var $11=($10)!=0; //@line 1163 "xmlparse.c"
        var $12=($11); //@line 1163 "xmlparse.c"
        var $13=$parser_addr; //@line 1163 "xmlparse.c"
        var $14=$13+237; //@line 1163 "xmlparse.c"
        HEAP[$14]=$12; //@line 1163 "xmlparse.c"
        __label__ = 3; break; //@line 1163 "xmlparse.c"
      case 3: // $return
        ;
        return; //@line 1162 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetUserData($parser, $p) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $p_addr;
        $parser_addr=$parser;
        $p_addr=$p;
        var $0=$parser_addr; //@line 1169 "xmlparse.c"
        var $1=$0+4; //@line 1169 "xmlparse.c"
        var $2=HEAP[$1]; //@line 1169 "xmlparse.c"
        var $3=$parser_addr; //@line 1169 "xmlparse.c"
        var $4=$3; //@line 1169 "xmlparse.c"
        var $5=HEAP[$4]; //@line 1169 "xmlparse.c"
        var $6=($2)==($5); //@line 1169 "xmlparse.c"
        var $7=$parser_addr; //@line 1170 "xmlparse.c"
        var $8=$7; //@line 1170 "xmlparse.c"
        var $9=$p_addr; //@line 1170 "xmlparse.c"
        HEAP[$8]=$9; //@line 1170 "xmlparse.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1169 "xmlparse.c"
      case 1: // $bb
        var $10=$parser_addr; //@line 1170 "xmlparse.c"
        var $11=$10; //@line 1170 "xmlparse.c"
        var $12=HEAP[$11]; //@line 1170 "xmlparse.c"
        var $13=$parser_addr; //@line 1170 "xmlparse.c"
        var $14=$13+4; //@line 1170 "xmlparse.c"
        HEAP[$14]=$12; //@line 1170 "xmlparse.c"
        __label__ = 2; break; //@line 1170 "xmlparse.c"
      case 2: // $return
        ;
        return; //@line 1173 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetBase($parser, $p) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $p_addr;
        var $retval;
        var $0;
        $parser_addr=$parser;
        $p_addr=$p;
        var $1=$p_addr; //@line 1178 "xmlparse.c"
        var $2=($1)!=0; //@line 1178 "xmlparse.c"
        var $3=$parser_addr; //@line 1179 "xmlparse.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1178 "xmlparse.c"
      case 1: // $bb
        var $4=$3+356; //@line 1179 "xmlparse.c"
        var $5=HEAP[$4]; //@line 1179 "xmlparse.c"
        var $6=$5+80; //@line 1179 "xmlparse.c"
        var $7=$p_addr; //@line 1179 "xmlparse.c"
        var $8=_poolCopyString($6, $7); //@line 1179 "xmlparse.c"
        $p_addr=$8; //@line 1179 "xmlparse.c"
        var $9=$p_addr; //@line 1180 "xmlparse.c"
        var $10=($9)==0; //@line 1180 "xmlparse.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1180 "xmlparse.c"
      case 2: // $bb1
        $0=0; //@line 1181 "xmlparse.c"
        __label__ = 6; break; //@line 1181 "xmlparse.c"
      case 3: // $bb2
        var $11=$parser_addr; //@line 1182 "xmlparse.c"
        var $12=$11+360; //@line 1182 "xmlparse.c"
        var $13=$p_addr; //@line 1182 "xmlparse.c"
        HEAP[$12]=$13; //@line 1182 "xmlparse.c"
        __label__ = 5; break; //@line 1182 "xmlparse.c"
      case 4: // $bb3
        var $14=$3+360; //@line 1185 "xmlparse.c"
        HEAP[$14]=0; //@line 1185 "xmlparse.c"
        __label__ = 5; break; //@line 1185 "xmlparse.c"
      case 5: // $bb4
        $0=1; //@line 1186 "xmlparse.c"
        __label__ = 6; break; //@line 1186 "xmlparse.c"
      case 6: // $bb5
        var $15=$0; //@line 1181 "xmlparse.c"
        $retval=$15; //@line 1181 "xmlparse.c"
        var $retval6=$retval; //@line 1181 "xmlparse.c"
        ;
        return $retval6; //@line 1181 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetBase($parser) {
    ;
    var __label__;
  
    var $parser_addr;
    var $retval;
    var $0;
    $parser_addr=$parser;
    var $1=$parser_addr; //@line 1192 "xmlparse.c"
    var $2=$1+360; //@line 1192 "xmlparse.c"
    var $3=HEAP[$2]; //@line 1192 "xmlparse.c"
    $0=$3; //@line 1192 "xmlparse.c"
    var $4=$0; //@line 1192 "xmlparse.c"
    $retval=$4; //@line 1192 "xmlparse.c"
    var $retval1=$retval; //@line 1192 "xmlparse.c"
    ;
    return $retval1; //@line 1192 "xmlparse.c"
  }
  

  function _PyExpat_XML_GetSpecifiedAttributeCount($parser) {
    ;
    var __label__;
  
    var $parser_addr;
    var $retval;
    var $0;
    $parser_addr=$parser;
    var $1=$parser_addr; //@line 1198 "xmlparse.c"
    var $2=$1+384; //@line 1198 "xmlparse.c"
    var $3=HEAP[$2]; //@line 1198 "xmlparse.c"
    $0=$3; //@line 1198 "xmlparse.c"
    var $4=$0; //@line 1198 "xmlparse.c"
    $retval=$4; //@line 1198 "xmlparse.c"
    var $retval1=$retval; //@line 1198 "xmlparse.c"
    ;
    return $retval1; //@line 1198 "xmlparse.c"
  }
  

  function _PyExpat_XML_GetIdAttributeIndex($parser) {
    ;
    var __label__;
  
    var $parser_addr;
    var $retval;
    var $0;
    $parser_addr=$parser;
    var $1=$parser_addr; //@line 1204 "xmlparse.c"
    var $2=$1+388; //@line 1204 "xmlparse.c"
    var $3=HEAP[$2]; //@line 1204 "xmlparse.c"
    $0=$3; //@line 1204 "xmlparse.c"
    var $4=$0; //@line 1204 "xmlparse.c"
    $retval=$4; //@line 1204 "xmlparse.c"
    var $retval1=$retval; //@line 1204 "xmlparse.c"
    ;
    return $retval1; //@line 1204 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetElementHandler($parser, $start, $end) {
    ;
    var __label__;
  
    var $parser_addr;
    var $start_addr;
    var $end_addr;
    $parser_addr=$parser;
    $start_addr=$start;
    $end_addr=$end;
    var $0=$parser_addr; //@line 1212 "xmlparse.c"
    var $1=$0+52; //@line 1212 "xmlparse.c"
    var $2=$start_addr; //@line 1212 "xmlparse.c"
    HEAP[$1]=$2; //@line 1212 "xmlparse.c"
    var $3=$parser_addr; //@line 1213 "xmlparse.c"
    var $4=$3+56; //@line 1213 "xmlparse.c"
    var $5=$end_addr; //@line 1213 "xmlparse.c"
    HEAP[$4]=$5; //@line 1213 "xmlparse.c"
    ;
    return; //@line 1214 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetStartElementHandler($parser, $start) {
    ;
    var __label__;
  
    var $parser_addr;
    var $start_addr;
    $parser_addr=$parser;
    $start_addr=$start;
    var $0=$parser_addr; //@line 1219 "xmlparse.c"
    var $1=$0+52; //@line 1219 "xmlparse.c"
    var $2=$start_addr; //@line 1219 "xmlparse.c"
    HEAP[$1]=$2; //@line 1219 "xmlparse.c"
    ;
    return; //@line 1220 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetEndElementHandler($parser, $end) {
    ;
    var __label__;
  
    var $parser_addr;
    var $end_addr;
    $parser_addr=$parser;
    $end_addr=$end;
    var $0=$parser_addr; //@line 1225 "xmlparse.c"
    var $1=$0+56; //@line 1225 "xmlparse.c"
    var $2=$end_addr; //@line 1225 "xmlparse.c"
    HEAP[$1]=$2; //@line 1225 "xmlparse.c"
    ;
    return; //@line 1226 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetCharacterDataHandler($parser, $handler) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    var $0=$parser_addr; //@line 1232 "xmlparse.c"
    var $1=$0+60; //@line 1232 "xmlparse.c"
    var $2=$handler_addr; //@line 1232 "xmlparse.c"
    HEAP[$1]=$2; //@line 1232 "xmlparse.c"
    ;
    return; //@line 1233 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetProcessingInstructionHandler($parser, $handler) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    var $0=$parser_addr; //@line 1239 "xmlparse.c"
    var $1=$0+64; //@line 1239 "xmlparse.c"
    var $2=$handler_addr; //@line 1239 "xmlparse.c"
    HEAP[$1]=$2; //@line 1239 "xmlparse.c"
    ;
    return; //@line 1240 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetCommentHandler($parser, $handler) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    var $0=$parser_addr; //@line 1246 "xmlparse.c"
    var $1=$0+68; //@line 1246 "xmlparse.c"
    var $2=$handler_addr; //@line 1246 "xmlparse.c"
    HEAP[$1]=$2; //@line 1246 "xmlparse.c"
    ;
    return; //@line 1247 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetCdataSectionHandler($parser, $start, $end) {
    ;
    var __label__;
  
    var $parser_addr;
    var $start_addr;
    var $end_addr;
    $parser_addr=$parser;
    $start_addr=$start;
    $end_addr=$end;
    var $0=$parser_addr; //@line 1254 "xmlparse.c"
    var $1=$0+72; //@line 1254 "xmlparse.c"
    var $2=$start_addr; //@line 1254 "xmlparse.c"
    HEAP[$1]=$2; //@line 1254 "xmlparse.c"
    var $3=$parser_addr; //@line 1255 "xmlparse.c"
    var $4=$3+76; //@line 1255 "xmlparse.c"
    var $5=$end_addr; //@line 1255 "xmlparse.c"
    HEAP[$4]=$5; //@line 1255 "xmlparse.c"
    ;
    return; //@line 1256 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetStartCdataSectionHandler($parser, $start) {
    ;
    var __label__;
  
    var $parser_addr;
    var $start_addr;
    $parser_addr=$parser;
    $start_addr=$start;
    var $0=$parser_addr; //@line 1261 "xmlparse.c"
    var $1=$0+72; //@line 1261 "xmlparse.c"
    var $2=$start_addr; //@line 1261 "xmlparse.c"
    HEAP[$1]=$2; //@line 1261 "xmlparse.c"
    ;
    return; //@line 1262 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetEndCdataSectionHandler($parser, $end) {
    ;
    var __label__;
  
    var $parser_addr;
    var $end_addr;
    $parser_addr=$parser;
    $end_addr=$end;
    var $0=$parser_addr; //@line 1267 "xmlparse.c"
    var $1=$0+76; //@line 1267 "xmlparse.c"
    var $2=$end_addr; //@line 1267 "xmlparse.c"
    HEAP[$1]=$2; //@line 1267 "xmlparse.c"
    ;
    return; //@line 1268 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetDefaultHandler($parser, $handler) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    var $0=$parser_addr; //@line 1274 "xmlparse.c"
    var $1=$0+80; //@line 1274 "xmlparse.c"
    var $2=$handler_addr; //@line 1274 "xmlparse.c"
    HEAP[$1]=$2; //@line 1274 "xmlparse.c"
    var $3=$parser_addr; //@line 1275 "xmlparse.c"
    var $4=$3+308; //@line 1275 "xmlparse.c"
    HEAP[$4]=0; //@line 1275 "xmlparse.c"
    ;
    return; //@line 1276 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetDefaultHandlerExpand($parser, $handler) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    var $0=$parser_addr; //@line 1282 "xmlparse.c"
    var $1=$0+80; //@line 1282 "xmlparse.c"
    var $2=$handler_addr; //@line 1282 "xmlparse.c"
    HEAP[$1]=$2; //@line 1282 "xmlparse.c"
    var $3=$parser_addr; //@line 1283 "xmlparse.c"
    var $4=$3+308; //@line 1283 "xmlparse.c"
    HEAP[$4]=1; //@line 1283 "xmlparse.c"
    ;
    return; //@line 1284 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetDoctypeDeclHandler($parser, $start, $end) {
    ;
    var __label__;
  
    var $parser_addr;
    var $start_addr;
    var $end_addr;
    $parser_addr=$parser;
    $start_addr=$start;
    $end_addr=$end;
    var $0=$parser_addr; //@line 1291 "xmlparse.c"
    var $1=$0+84; //@line 1291 "xmlparse.c"
    var $2=$start_addr; //@line 1291 "xmlparse.c"
    HEAP[$1]=$2; //@line 1291 "xmlparse.c"
    var $3=$parser_addr; //@line 1292 "xmlparse.c"
    var $4=$3+88; //@line 1292 "xmlparse.c"
    var $5=$end_addr; //@line 1292 "xmlparse.c"
    HEAP[$4]=$5; //@line 1292 "xmlparse.c"
    ;
    return; //@line 1293 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetStartDoctypeDeclHandler($parser, $start) {
    ;
    var __label__;
  
    var $parser_addr;
    var $start_addr;
    $parser_addr=$parser;
    $start_addr=$start;
    var $0=$parser_addr; //@line 1298 "xmlparse.c"
    var $1=$0+84; //@line 1298 "xmlparse.c"
    var $2=$start_addr; //@line 1298 "xmlparse.c"
    HEAP[$1]=$2; //@line 1298 "xmlparse.c"
    ;
    return; //@line 1299 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetEndDoctypeDeclHandler($parser, $end) {
    ;
    var __label__;
  
    var $parser_addr;
    var $end_addr;
    $parser_addr=$parser;
    $end_addr=$end;
    var $0=$parser_addr; //@line 1304 "xmlparse.c"
    var $1=$0+88; //@line 1304 "xmlparse.c"
    var $2=$end_addr; //@line 1304 "xmlparse.c"
    HEAP[$1]=$2; //@line 1304 "xmlparse.c"
    ;
    return; //@line 1305 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetUnparsedEntityDeclHandler($parser, $handler) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    var $0=$parser_addr; //@line 1311 "xmlparse.c"
    var $1=$0+92; //@line 1311 "xmlparse.c"
    var $2=$handler_addr; //@line 1311 "xmlparse.c"
    HEAP[$1]=$2; //@line 1311 "xmlparse.c"
    ;
    return; //@line 1312 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetNotationDeclHandler($parser, $handler) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    var $0=$parser_addr; //@line 1318 "xmlparse.c"
    var $1=$0+96; //@line 1318 "xmlparse.c"
    var $2=$handler_addr; //@line 1318 "xmlparse.c"
    HEAP[$1]=$2; //@line 1318 "xmlparse.c"
    ;
    return; //@line 1319 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetNamespaceDeclHandler($parser, $start, $end) {
    ;
    var __label__;
  
    var $parser_addr;
    var $start_addr;
    var $end_addr;
    $parser_addr=$parser;
    $start_addr=$start;
    $end_addr=$end;
    var $0=$parser_addr; //@line 1326 "xmlparse.c"
    var $1=$0+100; //@line 1326 "xmlparse.c"
    var $2=$start_addr; //@line 1326 "xmlparse.c"
    HEAP[$1]=$2; //@line 1326 "xmlparse.c"
    var $3=$parser_addr; //@line 1327 "xmlparse.c"
    var $4=$3+104; //@line 1327 "xmlparse.c"
    var $5=$end_addr; //@line 1327 "xmlparse.c"
    HEAP[$4]=$5; //@line 1327 "xmlparse.c"
    ;
    return; //@line 1328 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetStartNamespaceDeclHandler($parser, $start) {
    ;
    var __label__;
  
    var $parser_addr;
    var $start_addr;
    $parser_addr=$parser;
    $start_addr=$start;
    var $0=$parser_addr; //@line 1333 "xmlparse.c"
    var $1=$0+100; //@line 1333 "xmlparse.c"
    var $2=$start_addr; //@line 1333 "xmlparse.c"
    HEAP[$1]=$2; //@line 1333 "xmlparse.c"
    ;
    return; //@line 1334 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetEndNamespaceDeclHandler($parser, $end) {
    ;
    var __label__;
  
    var $parser_addr;
    var $end_addr;
    $parser_addr=$parser;
    $end_addr=$end;
    var $0=$parser_addr; //@line 1339 "xmlparse.c"
    var $1=$0+104; //@line 1339 "xmlparse.c"
    var $2=$end_addr; //@line 1339 "xmlparse.c"
    HEAP[$1]=$2; //@line 1339 "xmlparse.c"
    ;
    return; //@line 1340 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetNotStandaloneHandler($parser, $handler) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    var $0=$parser_addr; //@line 1346 "xmlparse.c"
    var $1=$0+108; //@line 1346 "xmlparse.c"
    var $2=$handler_addr; //@line 1346 "xmlparse.c"
    HEAP[$1]=$2; //@line 1346 "xmlparse.c"
    ;
    return; //@line 1347 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetExternalEntityRefHandler($parser, $handler) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    var $0=$parser_addr; //@line 1353 "xmlparse.c"
    var $1=$0+112; //@line 1353 "xmlparse.c"
    var $2=$handler_addr; //@line 1353 "xmlparse.c"
    HEAP[$1]=$2; //@line 1353 "xmlparse.c"
    ;
    return; //@line 1354 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetExternalEntityRefHandlerArg($parser, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $arg_addr;
        $parser_addr=$parser;
        $arg_addr=$arg;
        var $0=$arg_addr; //@line 1359 "xmlparse.c"
        var $1=($0)!=0; //@line 1359 "xmlparse.c"
        if ($1) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1359 "xmlparse.c"
      case 1: // $bb
        var $2=$arg_addr; //@line 1360 "xmlparse.c"
        var $3=$2; //@line 1360 "xmlparse.c"
        var $4=$parser_addr; //@line 1360 "xmlparse.c"
        var $5=$4+116; //@line 1360 "xmlparse.c"
        HEAP[$5]=$3; //@line 1360 "xmlparse.c"
        __label__ = 3; break; //@line 1360 "xmlparse.c"
      case 2: // $bb1
        var $6=$parser_addr; //@line 1362 "xmlparse.c"
        var $7=$6+116; //@line 1362 "xmlparse.c"
        var $8=$parser_addr; //@line 1362 "xmlparse.c"
        HEAP[$7]=$8; //@line 1362 "xmlparse.c"
        __label__ = 3; break; //@line 1362 "xmlparse.c"
      case 3: // $return
        ;
        return; //@line 1363 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetSkippedEntityHandler($parser, $handler) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    var $0=$parser_addr; //@line 1369 "xmlparse.c"
    var $1=$0+120; //@line 1369 "xmlparse.c"
    var $2=$handler_addr; //@line 1369 "xmlparse.c"
    HEAP[$1]=$2; //@line 1369 "xmlparse.c"
    ;
    return; //@line 1370 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetUnknownEncodingHandler($parser, $handler, $data) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    var $data_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    $data_addr=$data;
    var $0=$parser_addr; //@line 1377 "xmlparse.c"
    var $1=$0+124; //@line 1377 "xmlparse.c"
    var $2=$handler_addr; //@line 1377 "xmlparse.c"
    HEAP[$1]=$2; //@line 1377 "xmlparse.c"
    var $3=$parser_addr; //@line 1378 "xmlparse.c"
    var $4=$3+248; //@line 1378 "xmlparse.c"
    var $5=$data_addr; //@line 1378 "xmlparse.c"
    HEAP[$4]=$5; //@line 1378 "xmlparse.c"
    ;
    return; //@line 1379 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetElementDeclHandler($parser, $eldecl) {
    ;
    var __label__;
  
    var $parser_addr;
    var $eldecl_addr;
    $parser_addr=$parser;
    $eldecl_addr=$eldecl;
    var $0=$parser_addr; //@line 1385 "xmlparse.c"
    var $1=$0+128; //@line 1385 "xmlparse.c"
    var $2=$eldecl_addr; //@line 1385 "xmlparse.c"
    HEAP[$1]=$2; //@line 1385 "xmlparse.c"
    ;
    return; //@line 1386 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetAttlistDeclHandler($parser, $attdecl) {
    ;
    var __label__;
  
    var $parser_addr;
    var $attdecl_addr;
    $parser_addr=$parser;
    $attdecl_addr=$attdecl;
    var $0=$parser_addr; //@line 1392 "xmlparse.c"
    var $1=$0+132; //@line 1392 "xmlparse.c"
    var $2=$attdecl_addr; //@line 1392 "xmlparse.c"
    HEAP[$1]=$2; //@line 1392 "xmlparse.c"
    ;
    return; //@line 1393 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetEntityDeclHandler($parser, $handler) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    var $0=$parser_addr; //@line 1399 "xmlparse.c"
    var $1=$0+136; //@line 1399 "xmlparse.c"
    var $2=$handler_addr; //@line 1399 "xmlparse.c"
    HEAP[$1]=$2; //@line 1399 "xmlparse.c"
    ;
    return; //@line 1400 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetXmlDeclHandler($parser, $handler) {
    ;
    var __label__;
  
    var $parser_addr;
    var $handler_addr;
    $parser_addr=$parser;
    $handler_addr=$handler;
    var $0=$parser_addr; //@line 1405 "xmlparse.c"
    var $1=$0+140; //@line 1405 "xmlparse.c"
    var $2=$handler_addr; //@line 1405 "xmlparse.c"
    HEAP[$1]=$2; //@line 1405 "xmlparse.c"
    ;
    return; //@line 1406 "xmlparse.c"
  }
  

  function _PyExpat_XML_SetParamEntityParsing($parser, $peParsing) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $peParsing_addr;
        var $retval;
        var $0;
        $parser_addr=$parser;
        $peParsing_addr=$peParsing;
        var $1=$parser_addr; //@line 1413 "xmlparse.c"
        var $2=$1+480; //@line 1413 "xmlparse.c"
        var $3=$2; //@line 1413 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1413 "xmlparse.c"
        var $5=($4)==1; //@line 1413 "xmlparse.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1413 "xmlparse.c"
      case 1: // $bb
        var $6=$parser_addr; //@line 1413 "xmlparse.c"
        var $7=$6+480; //@line 1413 "xmlparse.c"
        var $8=$7; //@line 1413 "xmlparse.c"
        var $9=HEAP[$8]; //@line 1413 "xmlparse.c"
        var $10=($9)==3; //@line 1413 "xmlparse.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1413 "xmlparse.c"
      case 2: // $bb1
        $0=0; //@line 1414 "xmlparse.c"
        __label__ = 4; break; //@line 1414 "xmlparse.c"
      case 3: // $bb2
        var $11=$parser_addr; //@line 1416 "xmlparse.c"
        var $12=$11+492; //@line 1416 "xmlparse.c"
        var $13=$peParsing_addr; //@line 1416 "xmlparse.c"
        HEAP[$12]=$13; //@line 1416 "xmlparse.c"
        $0=1; //@line 1417 "xmlparse.c"
        __label__ = 4; break; //@line 1417 "xmlparse.c"
      case 4: // $bb3
        var $14=$0; //@line 1414 "xmlparse.c"
        $retval=$14; //@line 1414 "xmlparse.c"
        var $retval4=$retval; //@line 1414 "xmlparse.c"
        ;
        return $retval4; //@line 1414 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_Parse($parser, $s, $len, $isFinal) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $s_addr;
        var $len_addr;
        var $isFinal_addr;
        var $retval;
        var $0;
        var $buff;
        $parser_addr=$parser;
        $s_addr=$s;
        $len_addr=$len;
        $isFinal_addr=$isFinal;
        var $1=$parser_addr; //@line 1426 "xmlparse.c"
        var $2=$1+480; //@line 1426 "xmlparse.c"
        var $3=$2; //@line 1426 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1426 "xmlparse.c"
        if ($4 == 2) {
          __label__ = 2; break;
        }
        else if ($4 == 3) {
          __label__ = 1; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        var $5=$parser_addr; //@line 1428 "xmlparse.c"
        var $6=$5+284; //@line 1428 "xmlparse.c"
        HEAP[$6]=33; //@line 1428 "xmlparse.c"
        $0=0; //@line 1429 "xmlparse.c"
        __label__ = 15; break; //@line 1429 "xmlparse.c"
      case 2: // $bb1
        var $7=$parser_addr; //@line 1431 "xmlparse.c"
        var $8=$7+284; //@line 1431 "xmlparse.c"
        HEAP[$8]=36; //@line 1431 "xmlparse.c"
        $0=0; //@line 1432 "xmlparse.c"
        __label__ = 15; break; //@line 1432 "xmlparse.c"
      case 3: // $bb2
        var $9=$parser_addr; //@line 1434 "xmlparse.c"
        var $10=$9+480; //@line 1434 "xmlparse.c"
        var $11=$10; //@line 1434 "xmlparse.c"
        HEAP[$11]=1; //@line 1434 "xmlparse.c"
        var $12=$len_addr; //@line 1437 "xmlparse.c"
        var $13=($12)==0; //@line 1437 "xmlparse.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 1437 "xmlparse.c"
      case 4: // $bb3
        var $14=$isFinal_addr; //@line 1438 "xmlparse.c"
        var $15=((($14)) & 255); //@line 1438 "xmlparse.c"
        var $16=$parser_addr; //@line 1438 "xmlparse.c"
        var $17=$16+480; //@line 1438 "xmlparse.c"
        var $18=$17+4; //@line 1438 "xmlparse.c"
        HEAP[$18]=$15; //@line 1438 "xmlparse.c"
        var $19=$isFinal_addr; //@line 1439 "xmlparse.c"
        var $20=($19)==0; //@line 1439 "xmlparse.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1439 "xmlparse.c"
      case 5: // $bb4
        $0=1; //@line 1440 "xmlparse.c"
        __label__ = 15; break; //@line 1440 "xmlparse.c"
      case 6: // $bb5
        var $21=$parser_addr; //@line 1441 "xmlparse.c"
        var $22=$21+24; //@line 1441 "xmlparse.c"
        var $23=HEAP[$22]; //@line 1441 "xmlparse.c"
        var $24=$parser_addr; //@line 1441 "xmlparse.c"
        var $25=$24+296; //@line 1441 "xmlparse.c"
        HEAP[$25]=$23; //@line 1441 "xmlparse.c"
        var $26=$parser_addr; //@line 1442 "xmlparse.c"
        var $27=$26+28; //@line 1442 "xmlparse.c"
        var $28=HEAP[$27]; //@line 1442 "xmlparse.c"
        var $29=$parser_addr; //@line 1442 "xmlparse.c"
        var $30=$29+40; //@line 1442 "xmlparse.c"
        HEAP[$30]=$28; //@line 1442 "xmlparse.c"
        var $31=$parser_addr; //@line 1448 "xmlparse.c"
        var $32=$31+280; //@line 1448 "xmlparse.c"
        var $33=HEAP[$32]; //@line 1448 "xmlparse.c"
        var $34=$parser_addr; //@line 1448 "xmlparse.c"
        var $35=$34+24; //@line 1448 "xmlparse.c"
        var $36=$parser_addr; //@line 1448 "xmlparse.c"
        var $37=$36+40; //@line 1448 "xmlparse.c"
        var $38=HEAP[$37]; //@line 1448 "xmlparse.c"
        var $39=$parser_addr; //@line 1448 "xmlparse.c"
        var $40=$39+24; //@line 1448 "xmlparse.c"
        var $41=HEAP[$40]; //@line 1448 "xmlparse.c"
        var $42=$parser_addr; //@line 1448 "xmlparse.c"
        var $43=FUNCTION_TABLE[$33]($42, $41, $38, $35); //@line 1448 "xmlparse.c"
        var $44=$parser_addr; //@line 1448 "xmlparse.c"
        var $45=$44+284; //@line 1448 "xmlparse.c"
        HEAP[$45]=$43; //@line 1448 "xmlparse.c"
        var $46=$parser_addr; //@line 1450 "xmlparse.c"
        var $47=$46+284; //@line 1450 "xmlparse.c"
        var $48=HEAP[$47]; //@line 1450 "xmlparse.c"
        var $49=($48)==0; //@line 1450 "xmlparse.c"
        var $50=$parser_addr; //@line 1451 "xmlparse.c"
        if ($49) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 1450 "xmlparse.c"
      case 7: // $bb6
        var $51=$50+480; //@line 1451 "xmlparse.c"
        var $52=$51; //@line 1451 "xmlparse.c"
        var $53=HEAP[$52]; //@line 1451 "xmlparse.c"
        if ($53 == 0) {
          __label__ = 9; break;
        }
        else if ($53 == 1) {
          __label__ = 9; break;
        }
        else if ($53 == 3) {
          __label__ = 8; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 8: // $bb7
        var $54=$parser_addr; //@line 1453 "xmlparse.c"
        var $55=$54+144; //@line 1453 "xmlparse.c"
        var $56=HEAP[$55]; //@line 1453 "xmlparse.c"
        var $57=$56+52; //@line 1453 "xmlparse.c"
        var $58=HEAP[$57]; //@line 1453 "xmlparse.c"
        var $59=$parser_addr; //@line 1453 "xmlparse.c"
        var $60=$59+408; //@line 1453 "xmlparse.c"
        var $61=$parser_addr; //@line 1453 "xmlparse.c"
        var $62=$61+24; //@line 1453 "xmlparse.c"
        var $63=HEAP[$62]; //@line 1453 "xmlparse.c"
        var $64=$parser_addr; //@line 1453 "xmlparse.c"
        var $65=$64+296; //@line 1453 "xmlparse.c"
        var $66=HEAP[$65]; //@line 1453 "xmlparse.c"
        var $67=$parser_addr; //@line 1453 "xmlparse.c"
        var $68=$67+144; //@line 1453 "xmlparse.c"
        var $69=HEAP[$68]; //@line 1453 "xmlparse.c"
        FUNCTION_TABLE[$58]($69, $66, $63, $60); //@line 1453 "xmlparse.c"
        var $70=$parser_addr; //@line 1454 "xmlparse.c"
        var $71=$70+24; //@line 1454 "xmlparse.c"
        var $72=HEAP[$71]; //@line 1454 "xmlparse.c"
        var $73=$parser_addr; //@line 1454 "xmlparse.c"
        var $74=$73+296; //@line 1454 "xmlparse.c"
        HEAP[$74]=$72; //@line 1454 "xmlparse.c"
        $0=2; //@line 1455 "xmlparse.c"
        __label__ = 15; break; //@line 1455 "xmlparse.c"
      case 9: // $bb8
        var $75=$parser_addr; //@line 1458 "xmlparse.c"
        var $76=$75+480; //@line 1458 "xmlparse.c"
        var $77=$76; //@line 1458 "xmlparse.c"
        HEAP[$77]=2; //@line 1458 "xmlparse.c"
        __label__ = 10; break; //@line 1458 "xmlparse.c"
      case 10: // $bb9
        $0=1; //@line 1461 "xmlparse.c"
        __label__ = 15; break; //@line 1461 "xmlparse.c"
      case 11: // $bb10
        var $78=$50+288; //@line 1464 "xmlparse.c"
        var $79=HEAP[$78]; //@line 1464 "xmlparse.c"
        var $80=$parser_addr; //@line 1464 "xmlparse.c"
        var $81=$80+292; //@line 1464 "xmlparse.c"
        HEAP[$81]=$79; //@line 1464 "xmlparse.c"
        var $82=$parser_addr; //@line 1465 "xmlparse.c"
        var $83=$82+280; //@line 1465 "xmlparse.c"
        HEAP[$83]=(FUNCTION_TABLE_OFFSET + 54); //@line 1465 "xmlparse.c"
        $0=0; //@line 1466 "xmlparse.c"
        __label__ = 15; break; //@line 1466 "xmlparse.c"
      case 12: // $bb11
        var $84=$parser_addr; //@line 1533 "xmlparse.c"
        var $85=$len_addr; //@line 1533 "xmlparse.c"
        var $86=_PyExpat_XML_GetBuffer($84, $85); //@line 1533 "xmlparse.c"
        $buff=$86; //@line 1533 "xmlparse.c"
        var $87=$buff; //@line 1534 "xmlparse.c"
        var $88=($87)==0; //@line 1534 "xmlparse.c"
        if ($88) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1534 "xmlparse.c"
      case 13: // $bb12
        $0=0; //@line 1535 "xmlparse.c"
        __label__ = 15; break; //@line 1535 "xmlparse.c"
      case 14: // $bb13
        var $89=$len_addr; //@line 1537 "xmlparse.c"
        var $90=$buff; //@line 1537 "xmlparse.c"
        var $91=$s_addr; //@line 1537 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($90, $91, $89, 1, 0); //@line 1537 "xmlparse.c"
        var $92=$parser_addr; //@line 1538 "xmlparse.c"
        var $93=$len_addr; //@line 1538 "xmlparse.c"
        var $94=$isFinal_addr; //@line 1538 "xmlparse.c"
        var $95=_PyExpat_XML_ParseBuffer($92, $93, $94); //@line 1538 "xmlparse.c"
        $0=$95; //@line 1538 "xmlparse.c"
        __label__ = 15; break; //@line 1538 "xmlparse.c"
      case 15: // $bb14
        var $96=$0; //@line 1429 "xmlparse.c"
        $retval=$96; //@line 1429 "xmlparse.c"
        var $retval15=$retval; //@line 1429 "xmlparse.c"
        ;
        return $retval15; //@line 1429 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ParseBuffer($parser, $len, $isFinal) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $len_addr;
        var $isFinal_addr;
        var $retval;
        var $0;
        var $start;
        var $result;
        $parser_addr=$parser;
        $len_addr=$len;
        $isFinal_addr=$isFinal;
        $result=1; //@line 1547 "xmlparse.c"
        var $1=$parser_addr; //@line 1549 "xmlparse.c"
        var $2=$1+480; //@line 1549 "xmlparse.c"
        var $3=$2; //@line 1549 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1549 "xmlparse.c"
        if ($4 == 2) {
          __label__ = 2; break;
        }
        else if ($4 == 3) {
          __label__ = 1; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        var $5=$parser_addr; //@line 1551 "xmlparse.c"
        var $6=$5+284; //@line 1551 "xmlparse.c"
        HEAP[$6]=33; //@line 1551 "xmlparse.c"
        $0=0; //@line 1552 "xmlparse.c"
        __label__ = 10; break; //@line 1552 "xmlparse.c"
      case 2: // $bb1
        var $7=$parser_addr; //@line 1554 "xmlparse.c"
        var $8=$7+284; //@line 1554 "xmlparse.c"
        HEAP[$8]=36; //@line 1554 "xmlparse.c"
        $0=0; //@line 1555 "xmlparse.c"
        __label__ = 10; break; //@line 1555 "xmlparse.c"
      case 3: // $bb2
        var $9=$parser_addr; //@line 1557 "xmlparse.c"
        var $10=$9+480; //@line 1557 "xmlparse.c"
        var $11=$10; //@line 1557 "xmlparse.c"
        HEAP[$11]=1; //@line 1557 "xmlparse.c"
        var $12=$parser_addr; //@line 1560 "xmlparse.c"
        var $13=$12+24; //@line 1560 "xmlparse.c"
        var $14=HEAP[$13]; //@line 1560 "xmlparse.c"
        $start=$14; //@line 1560 "xmlparse.c"
        var $15=$parser_addr; //@line 1561 "xmlparse.c"
        var $16=$15+296; //@line 1561 "xmlparse.c"
        var $17=$start; //@line 1561 "xmlparse.c"
        HEAP[$16]=$17; //@line 1561 "xmlparse.c"
        var $18=$parser_addr; //@line 1562 "xmlparse.c"
        var $19=$18+28; //@line 1562 "xmlparse.c"
        var $20=HEAP[$19]; //@line 1562 "xmlparse.c"
        var $21=$len_addr; //@line 1562 "xmlparse.c"
        var $22=$20+$21; //@line 1562 "xmlparse.c"
        var $23=$parser_addr; //@line 1562 "xmlparse.c"
        var $24=$23+28; //@line 1562 "xmlparse.c"
        HEAP[$24]=$22; //@line 1562 "xmlparse.c"
        var $25=$parser_addr; //@line 1563 "xmlparse.c"
        var $26=$25+28; //@line 1563 "xmlparse.c"
        var $27=HEAP[$26]; //@line 1563 "xmlparse.c"
        var $28=$parser_addr; //@line 1563 "xmlparse.c"
        var $29=$28+40; //@line 1563 "xmlparse.c"
        HEAP[$29]=$27; //@line 1563 "xmlparse.c"
        var $30=$parser_addr; //@line 1564 "xmlparse.c"
        var $31=$30+36; //@line 1564 "xmlparse.c"
        var $32=HEAP[$31]; //@line 1564 "xmlparse.c"
        var $33=$len_addr; //@line 1564 "xmlparse.c"
        var $34=($33) + ($32); //@line 1564 "xmlparse.c"
        var $35=$parser_addr; //@line 1564 "xmlparse.c"
        var $36=$35+36; //@line 1564 "xmlparse.c"
        HEAP[$36]=$34; //@line 1564 "xmlparse.c"
        var $37=$isFinal_addr; //@line 1565 "xmlparse.c"
        var $38=((($37)) & 255); //@line 1565 "xmlparse.c"
        var $39=$parser_addr; //@line 1565 "xmlparse.c"
        var $40=$39+480; //@line 1565 "xmlparse.c"
        var $41=$40+4; //@line 1565 "xmlparse.c"
        HEAP[$41]=$38; //@line 1565 "xmlparse.c"
        var $42=$parser_addr; //@line 1567 "xmlparse.c"
        var $43=$42+280; //@line 1567 "xmlparse.c"
        var $44=HEAP[$43]; //@line 1567 "xmlparse.c"
        var $45=$parser_addr; //@line 1567 "xmlparse.c"
        var $46=$45+24; //@line 1567 "xmlparse.c"
        var $47=$parser_addr; //@line 1567 "xmlparse.c"
        var $48=$47+40; //@line 1567 "xmlparse.c"
        var $49=HEAP[$48]; //@line 1567 "xmlparse.c"
        var $50=$parser_addr; //@line 1567 "xmlparse.c"
        var $51=$start; //@line 1567 "xmlparse.c"
        var $52=FUNCTION_TABLE[$44]($50, $51, $49, $46); //@line 1567 "xmlparse.c"
        var $53=$parser_addr; //@line 1567 "xmlparse.c"
        var $54=$53+284; //@line 1567 "xmlparse.c"
        HEAP[$54]=$52; //@line 1567 "xmlparse.c"
        var $55=$parser_addr; //@line 1569 "xmlparse.c"
        var $56=$55+284; //@line 1569 "xmlparse.c"
        var $57=HEAP[$56]; //@line 1569 "xmlparse.c"
        var $58=($57)!=0; //@line 1569 "xmlparse.c"
        var $59=$parser_addr; //@line 1570 "xmlparse.c"
        if ($58) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1569 "xmlparse.c"
      case 4: // $bb3
        var $60=$59+288; //@line 1570 "xmlparse.c"
        var $61=HEAP[$60]; //@line 1570 "xmlparse.c"
        var $62=$parser_addr; //@line 1570 "xmlparse.c"
        var $63=$62+292; //@line 1570 "xmlparse.c"
        HEAP[$63]=$61; //@line 1570 "xmlparse.c"
        var $64=$parser_addr; //@line 1571 "xmlparse.c"
        var $65=$64+280; //@line 1571 "xmlparse.c"
        HEAP[$65]=(FUNCTION_TABLE_OFFSET + 54); //@line 1571 "xmlparse.c"
        $0=0; //@line 1572 "xmlparse.c"
        __label__ = 10; break; //@line 1572 "xmlparse.c"
      case 5: // $bb4
        var $66=$59+480; //@line 1575 "xmlparse.c"
        var $67=$66; //@line 1575 "xmlparse.c"
        var $68=HEAP[$67]; //@line 1575 "xmlparse.c"
        if ($68 == 0) {
          __label__ = 7; break;
        }
        else if ($68 == 1) {
          __label__ = 7; break;
        }
        else if ($68 == 3) {
          __label__ = 6; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 6: // $bb5
        $result=2; //@line 1577 "xmlparse.c"
        __label__ = 9; break; //@line 1577 "xmlparse.c"
      case 7: // $bb6
        var $69=$isFinal_addr; //@line 1581 "xmlparse.c"
        var $70=($69)!=0; //@line 1581 "xmlparse.c"
        if ($70) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1581 "xmlparse.c"
      case 8: // $bb7
        var $71=$parser_addr; //@line 1582 "xmlparse.c"
        var $72=$71+480; //@line 1582 "xmlparse.c"
        var $73=$72; //@line 1582 "xmlparse.c"
        HEAP[$73]=2; //@line 1582 "xmlparse.c"
        var $74=$result; //@line 1583 "xmlparse.c"
        $0=$74; //@line 1583 "xmlparse.c"
        __label__ = 10; break; //@line 1583 "xmlparse.c"
      case 9: // $bb8
        var $75=$parser_addr; //@line 1589 "xmlparse.c"
        var $76=$75+144; //@line 1589 "xmlparse.c"
        var $77=HEAP[$76]; //@line 1589 "xmlparse.c"
        var $78=$77+52; //@line 1589 "xmlparse.c"
        var $79=HEAP[$78]; //@line 1589 "xmlparse.c"
        var $80=$parser_addr; //@line 1589 "xmlparse.c"
        var $81=$80+408; //@line 1589 "xmlparse.c"
        var $82=$parser_addr; //@line 1589 "xmlparse.c"
        var $83=$82+24; //@line 1589 "xmlparse.c"
        var $84=HEAP[$83]; //@line 1589 "xmlparse.c"
        var $85=$parser_addr; //@line 1589 "xmlparse.c"
        var $86=$85+296; //@line 1589 "xmlparse.c"
        var $87=HEAP[$86]; //@line 1589 "xmlparse.c"
        var $88=$parser_addr; //@line 1589 "xmlparse.c"
        var $89=$88+144; //@line 1589 "xmlparse.c"
        var $90=HEAP[$89]; //@line 1589 "xmlparse.c"
        FUNCTION_TABLE[$79]($90, $87, $84, $81); //@line 1589 "xmlparse.c"
        var $91=$parser_addr; //@line 1590 "xmlparse.c"
        var $92=$91+24; //@line 1590 "xmlparse.c"
        var $93=HEAP[$92]; //@line 1590 "xmlparse.c"
        var $94=$parser_addr; //@line 1590 "xmlparse.c"
        var $95=$94+296; //@line 1590 "xmlparse.c"
        HEAP[$95]=$93; //@line 1590 "xmlparse.c"
        var $96=$result; //@line 1591 "xmlparse.c"
        $0=$96; //@line 1591 "xmlparse.c"
        __label__ = 10; break; //@line 1591 "xmlparse.c"
      case 10: // $bb9
        var $97=$0; //@line 1552 "xmlparse.c"
        $retval=$97; //@line 1552 "xmlparse.c"
        var $retval10=$retval; //@line 1552 "xmlparse.c"
        ;
        return $retval10; //@line 1552 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetBuffer($parser, $len) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $len_addr;
        var $retval;
        var $0;
        var $neededSize;
        var $keep;
        var $offset;
        var $newBuf;
        var $bufferSize;
        var $keep16;
        $parser_addr=$parser;
        $len_addr=$len;
        var $1=$parser_addr; //@line 1597 "xmlparse.c"
        var $2=$1+480; //@line 1597 "xmlparse.c"
        var $3=$2; //@line 1597 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1597 "xmlparse.c"
        if ($4 == 2) {
          __label__ = 2; break;
        }
        else if ($4 == 3) {
          __label__ = 1; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        var $5=$parser_addr; //@line 1599 "xmlparse.c"
        var $6=$5+284; //@line 1599 "xmlparse.c"
        HEAP[$6]=33; //@line 1599 "xmlparse.c"
        $0=0; //@line 1600 "xmlparse.c"
        __label__ = 20; break; //@line 1600 "xmlparse.c"
      case 2: // $bb1
        var $7=$parser_addr; //@line 1602 "xmlparse.c"
        var $8=$7+284; //@line 1602 "xmlparse.c"
        HEAP[$8]=36; //@line 1602 "xmlparse.c"
        $0=0; //@line 1603 "xmlparse.c"
        __label__ = 20; break; //@line 1603 "xmlparse.c"
      case 3: // $bb2
        var $9=$parser_addr; //@line 1607 "xmlparse.c"
        var $10=$9+32; //@line 1607 "xmlparse.c"
        var $11=HEAP[$10]; //@line 1607 "xmlparse.c"
        var $12=($11); //@line 1607 "xmlparse.c"
        var $13=$parser_addr; //@line 1607 "xmlparse.c"
        var $14=$13+28; //@line 1607 "xmlparse.c"
        var $15=HEAP[$14]; //@line 1607 "xmlparse.c"
        var $16=($15); //@line 1607 "xmlparse.c"
        var $17=($12) - ($16); //@line 1607 "xmlparse.c"
        var $18=$len_addr; //@line 1607 "xmlparse.c"
        var $19=($17) < ($18); //@line 1607 "xmlparse.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 19; break; } //@line 1607 "xmlparse.c"
      case 4: // $bb3
        var $20=$parser_addr; //@line 1609 "xmlparse.c"
        var $21=$20+28; //@line 1609 "xmlparse.c"
        var $22=HEAP[$21]; //@line 1609 "xmlparse.c"
        var $23=($22); //@line 1609 "xmlparse.c"
        var $24=$parser_addr; //@line 1609 "xmlparse.c"
        var $25=$24+24; //@line 1609 "xmlparse.c"
        var $26=HEAP[$25]; //@line 1609 "xmlparse.c"
        var $27=($26); //@line 1609 "xmlparse.c"
        var $_neg=0 - ($27);
        var $28=$len_addr; //@line 1609 "xmlparse.c"
        var $29=($28) + ($23);
        var $30=($29) + ($_neg); //@line 1609 "xmlparse.c"
        $neededSize=$30; //@line 1609 "xmlparse.c"
        var $31=$parser_addr; //@line 1611 "xmlparse.c"
        var $32=$31+24; //@line 1611 "xmlparse.c"
        var $33=HEAP[$32]; //@line 1611 "xmlparse.c"
        var $34=($33); //@line 1611 "xmlparse.c"
        var $35=$parser_addr; //@line 1611 "xmlparse.c"
        var $36=$35+8; //@line 1611 "xmlparse.c"
        var $37=HEAP[$36]; //@line 1611 "xmlparse.c"
        var $38=($37); //@line 1611 "xmlparse.c"
        var $39=($34) - ($38); //@line 1611 "xmlparse.c"
        $keep=$39; //@line 1611 "xmlparse.c"
        var $40=$keep; //@line 1613 "xmlparse.c"
        var $41=($40) > 1024; //@line 1613 "xmlparse.c"
        if ($41) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1613 "xmlparse.c"
      case 5: // $bb4
        $keep=1024; //@line 1614 "xmlparse.c"
        __label__ = 6; break; //@line 1614 "xmlparse.c"
      case 6: // $bb5
        var $42=$neededSize; //@line 1615 "xmlparse.c"
        var $43=$keep; //@line 1615 "xmlparse.c"
        var $44=($43) + ($42); //@line 1615 "xmlparse.c"
        $neededSize=$44; //@line 1615 "xmlparse.c"
        var $45=$parser_addr; //@line 1617 "xmlparse.c"
        var $46=$45+32; //@line 1617 "xmlparse.c"
        var $47=HEAP[$46]; //@line 1617 "xmlparse.c"
        var $48=($47); //@line 1617 "xmlparse.c"
        var $49=$parser_addr; //@line 1617 "xmlparse.c"
        var $50=$49+8; //@line 1617 "xmlparse.c"
        var $51=HEAP[$50]; //@line 1617 "xmlparse.c"
        var $52=($51); //@line 1617 "xmlparse.c"
        var $53=($48) - ($52); //@line 1617 "xmlparse.c"
        var $54=$neededSize; //@line 1617 "xmlparse.c"
        var $55=($53) >= ($54); //@line 1617 "xmlparse.c"
        var $56=$parser_addr; //@line 1619 "xmlparse.c"
        if ($55) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1617 "xmlparse.c"
      case 7: // $bb6
        var $57=$56+24; //@line 1619 "xmlparse.c"
        var $58=HEAP[$57]; //@line 1619 "xmlparse.c"
        var $59=($58); //@line 1619 "xmlparse.c"
        var $60=$parser_addr; //@line 1619 "xmlparse.c"
        var $61=$60+8; //@line 1619 "xmlparse.c"
        var $62=HEAP[$61]; //@line 1619 "xmlparse.c"
        var $63=($62); //@line 1619 "xmlparse.c"
        var $64=($59) - ($63); //@line 1619 "xmlparse.c"
        var $65=$keep; //@line 1619 "xmlparse.c"
        var $66=($64) > ($65); //@line 1619 "xmlparse.c"
        if ($66) { __label__ = 8; break; } else { __label__ = 19; break; } //@line 1619 "xmlparse.c"
      case 8: // $bb7
        var $67=$parser_addr; //@line 1620 "xmlparse.c"
        var $68=$67+24; //@line 1620 "xmlparse.c"
        var $69=HEAP[$68]; //@line 1620 "xmlparse.c"
        var $70=($69); //@line 1620 "xmlparse.c"
        var $71=$parser_addr; //@line 1620 "xmlparse.c"
        var $72=$71+8; //@line 1620 "xmlparse.c"
        var $73=HEAP[$72]; //@line 1620 "xmlparse.c"
        var $74=($73); //@line 1620 "xmlparse.c"
        var $_neg1=0 - ($74);
        var $75=$keep; //@line 1620 "xmlparse.c"
        var $_neg2=0 - ($75);
        var $76=($_neg2) + ($70);
        var $77=($76) + ($_neg1);
        $offset=$77; //@line 1620 "xmlparse.c"
        var $78=$parser_addr; //@line 1621 "xmlparse.c"
        var $79=$78+28; //@line 1621 "xmlparse.c"
        var $80=HEAP[$79]; //@line 1621 "xmlparse.c"
        var $81=($80); //@line 1621 "xmlparse.c"
        var $82=$parser_addr; //@line 1621 "xmlparse.c"
        var $83=$82+24; //@line 1621 "xmlparse.c"
        var $84=HEAP[$83]; //@line 1621 "xmlparse.c"
        var $85=($84); //@line 1621 "xmlparse.c"
        var $_neg3=0 - ($85);
        var $86=$keep; //@line 1621 "xmlparse.c"
        var $87=($86) + ($81);
        var $88=($87) + ($_neg3); //@line 1621 "xmlparse.c"
        var $89=$parser_addr; //@line 1621 "xmlparse.c"
        var $90=$89+8; //@line 1621 "xmlparse.c"
        var $91=HEAP[$90]; //@line 1621 "xmlparse.c"
        var $92=$offset; //@line 1621 "xmlparse.c"
        var $93=$91+$92; //@line 1621 "xmlparse.c"
        var $94=$parser_addr; //@line 1621 "xmlparse.c"
        var $95=$94+8; //@line 1621 "xmlparse.c"
        var $96=HEAP[$95]; //@line 1621 "xmlparse.c"
        _llvm_memmove_p0i8_p0i8_i32($96, $93, $88, 1, 0); //@line 1621 "xmlparse.c"
        var $97=$parser_addr; //@line 1622 "xmlparse.c"
        var $98=$97+28; //@line 1622 "xmlparse.c"
        var $99=HEAP[$98]; //@line 1622 "xmlparse.c"
        var $100=$offset; //@line 1622 "xmlparse.c"
        var $101=0 - ($100); //@line 1622 "xmlparse.c"
        var $102=$99+$101; //@line 1622 "xmlparse.c"
        var $103=$parser_addr; //@line 1622 "xmlparse.c"
        var $104=$103+28; //@line 1622 "xmlparse.c"
        HEAP[$104]=$102; //@line 1622 "xmlparse.c"
        var $105=$parser_addr; //@line 1623 "xmlparse.c"
        var $106=$105+24; //@line 1623 "xmlparse.c"
        var $107=HEAP[$106]; //@line 1623 "xmlparse.c"
        var $108=$offset; //@line 1623 "xmlparse.c"
        var $109=0 - ($108); //@line 1623 "xmlparse.c"
        var $110=$107+$109; //@line 1623 "xmlparse.c"
        var $111=$parser_addr; //@line 1623 "xmlparse.c"
        var $112=$111+24; //@line 1623 "xmlparse.c"
        HEAP[$112]=$110; //@line 1623 "xmlparse.c"
        __label__ = 19; break; //@line 1623 "xmlparse.c"
      case 9: // $bb9
        var $113=$56+32; //@line 1633 "xmlparse.c"
        var $114=HEAP[$113]; //@line 1633 "xmlparse.c"
        var $115=($114); //@line 1633 "xmlparse.c"
        var $116=$parser_addr; //@line 1633 "xmlparse.c"
        var $117=$116+24; //@line 1633 "xmlparse.c"
        var $118=HEAP[$117]; //@line 1633 "xmlparse.c"
        var $119=($118); //@line 1633 "xmlparse.c"
        var $120=($115) - ($119); //@line 1633 "xmlparse.c"
        $bufferSize=$120; //@line 1633 "xmlparse.c"
        var $121=$bufferSize; //@line 1634 "xmlparse.c"
        var $122=($121)==0; //@line 1634 "xmlparse.c"
        if ($122) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1634 "xmlparse.c"
      case 10: // $bb10
        $bufferSize=1024; //@line 1635 "xmlparse.c"
        __label__ = 11; break; //@line 1635 "xmlparse.c"
      case 11: // $bb11
        var $123=$bufferSize; //@line 1637 "xmlparse.c"
        var $124=($123) * 2; //@line 1637 "xmlparse.c"
        $bufferSize=$124; //@line 1637 "xmlparse.c"
        var $125=$bufferSize; //@line 1638 "xmlparse.c"
        var $126=$neededSize; //@line 1638 "xmlparse.c"
        var $127=($125) < ($126); //@line 1638 "xmlparse.c"
        if ($127) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1638 "xmlparse.c"
      case 12: // $bb12
        var $128=$parser_addr; //@line 1639 "xmlparse.c"
        var $129=$128+12; //@line 1639 "xmlparse.c"
        var $130=$129; //@line 1639 "xmlparse.c"
        var $131=HEAP[$130]; //@line 1639 "xmlparse.c"
        var $132=$bufferSize; //@line 1639 "xmlparse.c"
        var $133=FUNCTION_TABLE[$131]($132); //@line 1639 "xmlparse.c"
        $newBuf=$133; //@line 1639 "xmlparse.c"
        var $134=$newBuf; //@line 1640 "xmlparse.c"
        var $135=($134)==0; //@line 1640 "xmlparse.c"
        if ($135) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1640 "xmlparse.c"
      case 13: // $bb13
        var $136=$parser_addr; //@line 1641 "xmlparse.c"
        var $137=$136+284; //@line 1641 "xmlparse.c"
        HEAP[$137]=1; //@line 1641 "xmlparse.c"
        $0=0; //@line 1642 "xmlparse.c"
        __label__ = 20; break; //@line 1642 "xmlparse.c"
      case 14: // $bb14
        var $138=$newBuf; //@line 1644 "xmlparse.c"
        var $139=$bufferSize; //@line 1644 "xmlparse.c"
        var $140=$138+$139; //@line 1644 "xmlparse.c"
        var $141=$parser_addr; //@line 1644 "xmlparse.c"
        var $142=$141+32; //@line 1644 "xmlparse.c"
        HEAP[$142]=$140; //@line 1644 "xmlparse.c"
        var $143=$parser_addr; //@line 1646 "xmlparse.c"
        var $144=$143+24; //@line 1646 "xmlparse.c"
        var $145=HEAP[$144]; //@line 1646 "xmlparse.c"
        var $146=($145)!=0; //@line 1646 "xmlparse.c"
        var $147=$parser_addr; //@line 1647 "xmlparse.c"
        if ($146) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 1646 "xmlparse.c"
      case 15: // $bb15
        var $148=$147+24; //@line 1647 "xmlparse.c"
        var $149=HEAP[$148]; //@line 1647 "xmlparse.c"
        var $150=($149); //@line 1647 "xmlparse.c"
        var $151=$parser_addr; //@line 1647 "xmlparse.c"
        var $152=$151+8; //@line 1647 "xmlparse.c"
        var $153=HEAP[$152]; //@line 1647 "xmlparse.c"
        var $154=($153); //@line 1647 "xmlparse.c"
        var $155=($150) - ($154); //@line 1647 "xmlparse.c"
        $keep16=$155; //@line 1647 "xmlparse.c"
        var $156=$keep16; //@line 1648 "xmlparse.c"
        var $157=($156) > 1024; //@line 1648 "xmlparse.c"
        if ($157) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1648 "xmlparse.c"
      case 16: // $bb17
        $keep16=1024; //@line 1649 "xmlparse.c"
        __label__ = 17; break; //@line 1649 "xmlparse.c"
      case 17: // $bb18
        var $158=$parser_addr; //@line 1650 "xmlparse.c"
        var $159=$158+28; //@line 1650 "xmlparse.c"
        var $160=HEAP[$159]; //@line 1650 "xmlparse.c"
        var $161=($160); //@line 1650 "xmlparse.c"
        var $162=$parser_addr; //@line 1650 "xmlparse.c"
        var $163=$162+24; //@line 1650 "xmlparse.c"
        var $164=HEAP[$163]; //@line 1650 "xmlparse.c"
        var $165=($164); //@line 1650 "xmlparse.c"
        var $_neg4=0 - ($165);
        var $166=$keep16; //@line 1650 "xmlparse.c"
        var $167=($166) + ($161);
        var $168=($167) + ($_neg4); //@line 1650 "xmlparse.c"
        var $169=$parser_addr; //@line 1650 "xmlparse.c"
        var $170=$169+24; //@line 1650 "xmlparse.c"
        var $171=HEAP[$170]; //@line 1650 "xmlparse.c"
        var $172=$keep16; //@line 1650 "xmlparse.c"
        var $173=0 - ($172); //@line 1650 "xmlparse.c"
        var $174=$171+$173; //@line 1650 "xmlparse.c"
        var $175=$newBuf; //@line 1650 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($175, $174, $168, 1, 0); //@line 1650 "xmlparse.c"
        var $176=$parser_addr; //@line 1651 "xmlparse.c"
        var $177=$176+12; //@line 1651 "xmlparse.c"
        var $178=$177+8; //@line 1651 "xmlparse.c"
        var $179=HEAP[$178]; //@line 1651 "xmlparse.c"
        var $180=$parser_addr; //@line 1651 "xmlparse.c"
        var $181=$180+8; //@line 1651 "xmlparse.c"
        var $182=HEAP[$181]; //@line 1651 "xmlparse.c"
        FUNCTION_TABLE[$179]($182); //@line 1651 "xmlparse.c"
        var $183=$parser_addr; //@line 1652 "xmlparse.c"
        var $184=$183+8; //@line 1652 "xmlparse.c"
        var $185=$newBuf; //@line 1652 "xmlparse.c"
        HEAP[$184]=$185; //@line 1652 "xmlparse.c"
        var $186=$parser_addr; //@line 1653 "xmlparse.c"
        var $187=$186+8; //@line 1653 "xmlparse.c"
        var $188=HEAP[$187]; //@line 1653 "xmlparse.c"
        var $189=$parser_addr; //@line 1653 "xmlparse.c"
        var $190=$189+28; //@line 1653 "xmlparse.c"
        var $191=HEAP[$190]; //@line 1653 "xmlparse.c"
        var $192=($191); //@line 1653 "xmlparse.c"
        var $193=$parser_addr; //@line 1653 "xmlparse.c"
        var $194=$193+24; //@line 1653 "xmlparse.c"
        var $195=HEAP[$194]; //@line 1653 "xmlparse.c"
        var $196=($195); //@line 1653 "xmlparse.c"
        var $197=($192) - ($196); //@line 1653 "xmlparse.c"
        var $198=$188+$197; //@line 1653 "xmlparse.c"
        var $199=$keep16; //@line 1653 "xmlparse.c"
        var $200=$198+$199; //@line 1653 "xmlparse.c"
        var $201=$parser_addr; //@line 1653 "xmlparse.c"
        var $202=$201+28; //@line 1653 "xmlparse.c"
        HEAP[$202]=$200; //@line 1653 "xmlparse.c"
        var $203=$parser_addr; //@line 1654 "xmlparse.c"
        var $204=$203+8; //@line 1654 "xmlparse.c"
        var $205=HEAP[$204]; //@line 1654 "xmlparse.c"
        var $206=$keep16; //@line 1654 "xmlparse.c"
        var $207=$205+$206; //@line 1654 "xmlparse.c"
        var $208=$parser_addr; //@line 1654 "xmlparse.c"
        var $209=$208+24; //@line 1654 "xmlparse.c"
        HEAP[$209]=$207; //@line 1654 "xmlparse.c"
        __label__ = 19; break; //@line 1654 "xmlparse.c"
      case 18: // $bb19
        var $210=$147+28; //@line 1657 "xmlparse.c"
        var $211=HEAP[$210]; //@line 1657 "xmlparse.c"
        var $212=($211); //@line 1657 "xmlparse.c"
        var $213=$parser_addr; //@line 1657 "xmlparse.c"
        var $214=$213+24; //@line 1657 "xmlparse.c"
        var $215=HEAP[$214]; //@line 1657 "xmlparse.c"
        var $216=($215); //@line 1657 "xmlparse.c"
        var $217=($212) - ($216); //@line 1657 "xmlparse.c"
        var $218=$newBuf; //@line 1657 "xmlparse.c"
        var $219=$218+$217; //@line 1657 "xmlparse.c"
        var $220=$parser_addr; //@line 1657 "xmlparse.c"
        var $221=$220+28; //@line 1657 "xmlparse.c"
        HEAP[$221]=$219; //@line 1657 "xmlparse.c"
        var $222=$parser_addr; //@line 1658 "xmlparse.c"
        var $223=$222+8; //@line 1658 "xmlparse.c"
        var $224=$newBuf; //@line 1658 "xmlparse.c"
        HEAP[$223]=$224; //@line 1658 "xmlparse.c"
        var $225=$parser_addr; //@line 1658 "xmlparse.c"
        var $226=$225+8; //@line 1658 "xmlparse.c"
        var $227=HEAP[$226]; //@line 1658 "xmlparse.c"
        var $228=$parser_addr; //@line 1658 "xmlparse.c"
        var $229=$228+24; //@line 1658 "xmlparse.c"
        HEAP[$229]=$227; //@line 1658 "xmlparse.c"
        __label__ = 19; break; //@line 1658 "xmlparse.c"
      case 19: // $bb20
        var $230=$parser_addr; //@line 1670 "xmlparse.c"
        var $231=$230+28; //@line 1670 "xmlparse.c"
        var $232=HEAP[$231]; //@line 1670 "xmlparse.c"
        $0=$232; //@line 1670 "xmlparse.c"
        __label__ = 20; break; //@line 1670 "xmlparse.c"
      case 20: // $bb21
        var $233=$0; //@line 1600 "xmlparse.c"
        $retval=$233; //@line 1600 "xmlparse.c"
        var $retval22=$retval; //@line 1600 "xmlparse.c"
        ;
        return $retval22; //@line 1600 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_StopParser($parser, $resumable) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $resumable_addr;
        var $retval;
        var $0;
        $parser_addr=$parser;
        $resumable_addr=$resumable;
        var $1=$parser_addr; //@line 1676 "xmlparse.c"
        var $2=$1+480; //@line 1676 "xmlparse.c"
        var $3=$2; //@line 1676 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1676 "xmlparse.c"
        if ($4 == 2) {
          __label__ = 4; break;
        }
        else if ($4 == 3) {
          __label__ = 1; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $bb
        var $5=$resumable_addr; //@line 1678 "xmlparse.c"
        var $6=($5)!=0; //@line 1678 "xmlparse.c"
        var $7=$parser_addr; //@line 1679 "xmlparse.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1678 "xmlparse.c"
      case 2: // $bb1
        var $8=$7+284; //@line 1679 "xmlparse.c"
        HEAP[$8]=33; //@line 1679 "xmlparse.c"
        $0=0; //@line 1680 "xmlparse.c"
        __label__ = 11; break; //@line 1680 "xmlparse.c"
      case 3: // $bb2
        var $9=$7+480; //@line 1682 "xmlparse.c"
        var $10=$9; //@line 1682 "xmlparse.c"
        HEAP[$10]=2; //@line 1682 "xmlparse.c"
        __label__ = 10; break; //@line 1682 "xmlparse.c"
      case 4: // $bb3
        var $11=$parser_addr; //@line 1685 "xmlparse.c"
        var $12=$11+284; //@line 1685 "xmlparse.c"
        HEAP[$12]=36; //@line 1685 "xmlparse.c"
        $0=0; //@line 1686 "xmlparse.c"
        __label__ = 11; break; //@line 1686 "xmlparse.c"
      case 5: // $bb4
        var $13=$resumable_addr; //@line 1688 "xmlparse.c"
        var $14=($13)!=0; //@line 1688 "xmlparse.c"
        var $15=$parser_addr; //@line 1690 "xmlparse.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 1688 "xmlparse.c"
      case 6: // $bb5
        var $16=$15+488; //@line 1690 "xmlparse.c"
        var $17=HEAP[$16]; //@line 1690 "xmlparse.c"
        var $18=($17)!=0; //@line 1690 "xmlparse.c"
        var $19=$parser_addr; //@line 1691 "xmlparse.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1690 "xmlparse.c"
      case 7: // $bb6
        var $20=$19+284; //@line 1691 "xmlparse.c"
        HEAP[$20]=37; //@line 1691 "xmlparse.c"
        $0=0; //@line 1692 "xmlparse.c"
        __label__ = 11; break; //@line 1692 "xmlparse.c"
      case 8: // $bb7
        var $21=$19+480; //@line 1695 "xmlparse.c"
        var $22=$21; //@line 1695 "xmlparse.c"
        HEAP[$22]=3; //@line 1695 "xmlparse.c"
        __label__ = 10; break; //@line 1695 "xmlparse.c"
      case 9: // $bb8
        var $23=$15+480; //@line 1698 "xmlparse.c"
        var $24=$23; //@line 1698 "xmlparse.c"
        HEAP[$24]=2; //@line 1698 "xmlparse.c"
        __label__ = 10; break; //@line 1698 "xmlparse.c"
      case 10: // $bb9
        $0=1; //@line 1700 "xmlparse.c"
        __label__ = 11; break; //@line 1700 "xmlparse.c"
      case 11: // $bb10
        var $25=$0; //@line 1680 "xmlparse.c"
        $retval=$25; //@line 1680 "xmlparse.c"
        var $retval11=$retval; //@line 1680 "xmlparse.c"
        ;
        return $retval11; //@line 1680 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ResumeParser($parser) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $retval;
        var $0;
        var $result;
        $parser_addr=$parser;
        $result=1; //@line 1706 "xmlparse.c"
        var $1=$parser_addr; //@line 1708 "xmlparse.c"
        var $2=$1+480; //@line 1708 "xmlparse.c"
        var $3=$2; //@line 1708 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1708 "xmlparse.c"
        var $5=($4)!=3; //@line 1708 "xmlparse.c"
        var $6=$parser_addr; //@line 1709 "xmlparse.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1708 "xmlparse.c"
      case 1: // $bb
        var $7=$6+284; //@line 1709 "xmlparse.c"
        HEAP[$7]=34; //@line 1709 "xmlparse.c"
        $0=0; //@line 1710 "xmlparse.c"
        __label__ = 9; break; //@line 1710 "xmlparse.c"
      case 2: // $bb1
        var $8=$6+480; //@line 1712 "xmlparse.c"
        var $9=$8; //@line 1712 "xmlparse.c"
        HEAP[$9]=1; //@line 1712 "xmlparse.c"
        var $10=$parser_addr; //@line 1714 "xmlparse.c"
        var $11=$10+280; //@line 1714 "xmlparse.c"
        var $12=HEAP[$11]; //@line 1714 "xmlparse.c"
        var $13=$parser_addr; //@line 1714 "xmlparse.c"
        var $14=$13+24; //@line 1714 "xmlparse.c"
        var $15=$parser_addr; //@line 1714 "xmlparse.c"
        var $16=$15+40; //@line 1714 "xmlparse.c"
        var $17=HEAP[$16]; //@line 1714 "xmlparse.c"
        var $18=$parser_addr; //@line 1714 "xmlparse.c"
        var $19=$18+24; //@line 1714 "xmlparse.c"
        var $20=HEAP[$19]; //@line 1714 "xmlparse.c"
        var $21=$parser_addr; //@line 1714 "xmlparse.c"
        var $22=FUNCTION_TABLE[$12]($21, $20, $17, $14); //@line 1714 "xmlparse.c"
        var $23=$parser_addr; //@line 1714 "xmlparse.c"
        var $24=$23+284; //@line 1714 "xmlparse.c"
        HEAP[$24]=$22; //@line 1714 "xmlparse.c"
        var $25=$parser_addr; //@line 1716 "xmlparse.c"
        var $26=$25+284; //@line 1716 "xmlparse.c"
        var $27=HEAP[$26]; //@line 1716 "xmlparse.c"
        var $28=($27)!=0; //@line 1716 "xmlparse.c"
        var $29=$parser_addr; //@line 1717 "xmlparse.c"
        if ($28) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1716 "xmlparse.c"
      case 3: // $bb2
        var $30=$29+288; //@line 1717 "xmlparse.c"
        var $31=HEAP[$30]; //@line 1717 "xmlparse.c"
        var $32=$parser_addr; //@line 1717 "xmlparse.c"
        var $33=$32+292; //@line 1717 "xmlparse.c"
        HEAP[$33]=$31; //@line 1717 "xmlparse.c"
        var $34=$parser_addr; //@line 1718 "xmlparse.c"
        var $35=$34+280; //@line 1718 "xmlparse.c"
        HEAP[$35]=(FUNCTION_TABLE_OFFSET + 54); //@line 1718 "xmlparse.c"
        $0=0; //@line 1719 "xmlparse.c"
        __label__ = 9; break; //@line 1719 "xmlparse.c"
      case 4: // $bb3
        var $36=$29+480; //@line 1722 "xmlparse.c"
        var $37=$36; //@line 1722 "xmlparse.c"
        var $38=HEAP[$37]; //@line 1722 "xmlparse.c"
        if ($38 == 0) {
          __label__ = 6; break;
        }
        else if ($38 == 1) {
          __label__ = 6; break;
        }
        else if ($38 == 3) {
          __label__ = 5; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 5: // $bb4
        $result=2; //@line 1724 "xmlparse.c"
        __label__ = 8; break; //@line 1724 "xmlparse.c"
      case 6: // $bb5
        var $39=$parser_addr; //@line 1728 "xmlparse.c"
        var $40=$39+480; //@line 1728 "xmlparse.c"
        var $41=$40+4; //@line 1728 "xmlparse.c"
        var $42=HEAP[$41]; //@line 1728 "xmlparse.c"
        var $43=($42)!=0; //@line 1728 "xmlparse.c"
        if ($43) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1728 "xmlparse.c"
      case 7: // $bb6
        var $44=$parser_addr; //@line 1729 "xmlparse.c"
        var $45=$44+480; //@line 1729 "xmlparse.c"
        var $46=$45; //@line 1729 "xmlparse.c"
        HEAP[$46]=2; //@line 1729 "xmlparse.c"
        var $47=$result; //@line 1730 "xmlparse.c"
        $0=$47; //@line 1730 "xmlparse.c"
        __label__ = 9; break; //@line 1730 "xmlparse.c"
      case 8: // $bb7
        var $48=$parser_addr; //@line 1736 "xmlparse.c"
        var $49=$48+144; //@line 1736 "xmlparse.c"
        var $50=HEAP[$49]; //@line 1736 "xmlparse.c"
        var $51=$50+52; //@line 1736 "xmlparse.c"
        var $52=HEAP[$51]; //@line 1736 "xmlparse.c"
        var $53=$parser_addr; //@line 1736 "xmlparse.c"
        var $54=$53+408; //@line 1736 "xmlparse.c"
        var $55=$parser_addr; //@line 1736 "xmlparse.c"
        var $56=$55+24; //@line 1736 "xmlparse.c"
        var $57=HEAP[$56]; //@line 1736 "xmlparse.c"
        var $58=$parser_addr; //@line 1736 "xmlparse.c"
        var $59=$58+296; //@line 1736 "xmlparse.c"
        var $60=HEAP[$59]; //@line 1736 "xmlparse.c"
        var $61=$parser_addr; //@line 1736 "xmlparse.c"
        var $62=$61+144; //@line 1736 "xmlparse.c"
        var $63=HEAP[$62]; //@line 1736 "xmlparse.c"
        FUNCTION_TABLE[$52]($63, $60, $57, $54); //@line 1736 "xmlparse.c"
        var $64=$parser_addr; //@line 1737 "xmlparse.c"
        var $65=$64+24; //@line 1737 "xmlparse.c"
        var $66=HEAP[$65]; //@line 1737 "xmlparse.c"
        var $67=$parser_addr; //@line 1737 "xmlparse.c"
        var $68=$67+296; //@line 1737 "xmlparse.c"
        HEAP[$68]=$66; //@line 1737 "xmlparse.c"
        var $69=$result; //@line 1738 "xmlparse.c"
        $0=$69; //@line 1738 "xmlparse.c"
        __label__ = 9; break; //@line 1738 "xmlparse.c"
      case 9: // $bb8
        var $70=$0; //@line 1710 "xmlparse.c"
        $retval=$70; //@line 1710 "xmlparse.c"
        var $retval9=$retval; //@line 1710 "xmlparse.c"
        ;
        return $retval9; //@line 1710 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetParsingStatus($parser, $status) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $status_addr;
        var $0=__stackBase__;
        $parser_addr=$parser;
        $status_addr=$status;
        var $1=$status_addr; //@line 1744 "xmlparse.c"
        var $2=($1)==0; //@line 1744 "xmlparse.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1744 "xmlparse.c"
      case 1: // $bb
        ___assert_fail(__str188, __str1189, 1744, ___PRETTY_FUNCTION___3819); //@line 1744 "xmlparse.c"
        throw "Reached an unreachable!" //@line 1744 "xmlparse.c"
      case 2: // $bb1
        var $3=$parser_addr; //@line 1745 "xmlparse.c"
        var $4=$3+480; //@line 1745 "xmlparse.c"
        var $5=$0; //@line 1745 "xmlparse.c"
        var $6=$4; //@line 1745 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1745 "xmlparse.c"
        HEAP[$5]=$7; //@line 1745 "xmlparse.c"
        var $8=$0+4; //@line 1745 "xmlparse.c"
        var $9=$4+4; //@line 1745 "xmlparse.c"
        var $10=HEAP[$9]; //@line 1745 "xmlparse.c"
        HEAP[$8]=$10; //@line 1745 "xmlparse.c"
        var $11=$status_addr; //@line 1745 "xmlparse.c"
        var $12=$11; //@line 1745 "xmlparse.c"
        var $13=$0; //@line 1745 "xmlparse.c"
        var $14=HEAP[$13]; //@line 1745 "xmlparse.c"
        HEAP[$12]=$14; //@line 1745 "xmlparse.c"
        var $15=$11+4; //@line 1745 "xmlparse.c"
        var $16=$0+4; //@line 1745 "xmlparse.c"
        var $17=HEAP[$16]; //@line 1745 "xmlparse.c"
        HEAP[$15]=$17; //@line 1745 "xmlparse.c"
        STACKTOP = __stackBase__;
        return; //@line 1746 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetErrorCode($parser) {
    ;
    var __label__;
  
    var $parser_addr;
    var $retval;
    var $0;
    $parser_addr=$parser;
    var $1=$parser_addr; //@line 1751 "xmlparse.c"
    var $2=$1+284; //@line 1751 "xmlparse.c"
    var $3=HEAP[$2]; //@line 1751 "xmlparse.c"
    $0=$3; //@line 1751 "xmlparse.c"
    var $4=$0; //@line 1751 "xmlparse.c"
    $retval=$4; //@line 1751 "xmlparse.c"
    var $retval1=$retval; //@line 1751 "xmlparse.c"
    ;
    return $retval1; //@line 1751 "xmlparse.c"
  }
  

  function _PyExpat_XML_GetCurrentByteIndex($parser) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $retval;
        var $0;
        $parser_addr=$parser;
        var $1=$parser_addr; //@line 1757 "xmlparse.c"
        var $2=$1+288; //@line 1757 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1757 "xmlparse.c"
        var $4=($3)!=0; //@line 1757 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1757 "xmlparse.c"
      case 1: // $bb
        var $5=$parser_addr; //@line 1758 "xmlparse.c"
        var $6=$5+36; //@line 1758 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1758 "xmlparse.c"
        var $8=$parser_addr; //@line 1758 "xmlparse.c"
        var $9=$8+40; //@line 1758 "xmlparse.c"
        var $10=HEAP[$9]; //@line 1758 "xmlparse.c"
        var $11=($10); //@line 1758 "xmlparse.c"
        var $12=$parser_addr; //@line 1758 "xmlparse.c"
        var $13=$12+288; //@line 1758 "xmlparse.c"
        var $14=HEAP[$13]; //@line 1758 "xmlparse.c"
        var $15=($14); //@line 1758 "xmlparse.c"
        var $_neg=0 - ($15);
        var $_neg1=0 - ($11);
        var $_neg_neg=0 - ($_neg);
        var $_neg2=($_neg1) + ($7);
        var $16=($_neg2) + ($_neg_neg);
        $0=$16; //@line 1758 "xmlparse.c"
        __label__ = 3; break; //@line 1758 "xmlparse.c"
      case 2: // $bb1
        $0=-1; //@line 1759 "xmlparse.c"
        __label__ = 3; break; //@line 1759 "xmlparse.c"
      case 3: // $bb2
        var $17=$0; //@line 1758 "xmlparse.c"
        $retval=$17; //@line 1758 "xmlparse.c"
        var $retval3=$retval; //@line 1758 "xmlparse.c"
        ;
        return $retval3; //@line 1758 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetCurrentByteCount($parser) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $retval;
        var $0;
        $parser_addr=$parser;
        var $1=$parser_addr; //@line 1765 "xmlparse.c"
        var $2=$1+292; //@line 1765 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1765 "xmlparse.c"
        var $4=($3)!=0; //@line 1765 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1765 "xmlparse.c"
      case 1: // $bb
        var $5=$parser_addr; //@line 1765 "xmlparse.c"
        var $6=$5+288; //@line 1765 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1765 "xmlparse.c"
        var $8=($7)!=0; //@line 1765 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1765 "xmlparse.c"
      case 2: // $bb1
        var $9=$parser_addr; //@line 1766 "xmlparse.c"
        var $10=$9+292; //@line 1766 "xmlparse.c"
        var $11=HEAP[$10]; //@line 1766 "xmlparse.c"
        var $12=($11); //@line 1766 "xmlparse.c"
        var $13=$parser_addr; //@line 1766 "xmlparse.c"
        var $14=$13+288; //@line 1766 "xmlparse.c"
        var $15=HEAP[$14]; //@line 1766 "xmlparse.c"
        var $16=($15); //@line 1766 "xmlparse.c"
        var $17=($12) - ($16); //@line 1766 "xmlparse.c"
        $0=$17; //@line 1766 "xmlparse.c"
        __label__ = 4; break; //@line 1766 "xmlparse.c"
      case 3: // $bb2
        $0=0; //@line 1767 "xmlparse.c"
        __label__ = 4; break; //@line 1767 "xmlparse.c"
      case 4: // $bb3
        var $18=$0; //@line 1766 "xmlparse.c"
        $retval=$18; //@line 1766 "xmlparse.c"
        var $retval4=$retval; //@line 1766 "xmlparse.c"
        ;
        return $retval4; //@line 1766 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetInputContext($parser, $offset, $size) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $offset_addr;
        var $size_addr;
        var $retval;
        var $0;
        $parser_addr=$parser;
        $offset_addr=$offset;
        $size_addr=$size;
        var $1=$parser_addr; //@line 1774 "xmlparse.c"
        var $2=$1+288; //@line 1774 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1774 "xmlparse.c"
        var $4=($3)!=0; //@line 1774 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1774 "xmlparse.c"
      case 1: // $bb
        var $5=$parser_addr; //@line 1774 "xmlparse.c"
        var $6=$5+8; //@line 1774 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1774 "xmlparse.c"
        var $8=($7)!=0; //@line 1774 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1774 "xmlparse.c"
      case 2: // $bb1
        var $9=$parser_addr; //@line 1775 "xmlparse.c"
        var $10=$9+288; //@line 1775 "xmlparse.c"
        var $11=HEAP[$10]; //@line 1775 "xmlparse.c"
        var $12=($11); //@line 1775 "xmlparse.c"
        var $13=$parser_addr; //@line 1775 "xmlparse.c"
        var $14=$13+8; //@line 1775 "xmlparse.c"
        var $15=HEAP[$14]; //@line 1775 "xmlparse.c"
        var $16=($15); //@line 1775 "xmlparse.c"
        var $17=($12) - ($16); //@line 1775 "xmlparse.c"
        var $18=$offset_addr; //@line 1775 "xmlparse.c"
        HEAP[$18]=$17; //@line 1775 "xmlparse.c"
        var $19=$parser_addr; //@line 1776 "xmlparse.c"
        var $20=$19+28; //@line 1776 "xmlparse.c"
        var $21=HEAP[$20]; //@line 1776 "xmlparse.c"
        var $22=($21); //@line 1776 "xmlparse.c"
        var $23=$parser_addr; //@line 1776 "xmlparse.c"
        var $24=$23+8; //@line 1776 "xmlparse.c"
        var $25=HEAP[$24]; //@line 1776 "xmlparse.c"
        var $26=($25); //@line 1776 "xmlparse.c"
        var $27=($22) - ($26); //@line 1776 "xmlparse.c"
        var $28=$size_addr; //@line 1776 "xmlparse.c"
        HEAP[$28]=$27; //@line 1776 "xmlparse.c"
        var $29=$parser_addr; //@line 1777 "xmlparse.c"
        var $30=$29+8; //@line 1777 "xmlparse.c"
        var $31=HEAP[$30]; //@line 1777 "xmlparse.c"
        $0=$31; //@line 1777 "xmlparse.c"
        __label__ = 4; break; //@line 1777 "xmlparse.c"
      case 3: // $bb2
        $0=0; //@line 1780 "xmlparse.c"
        __label__ = 4; break; //@line 1780 "xmlparse.c"
      case 4: // $bb3
        var $32=$0; //@line 1777 "xmlparse.c"
        $retval=$32; //@line 1777 "xmlparse.c"
        var $retval4=$retval; //@line 1777 "xmlparse.c"
        ;
        return $retval4; //@line 1777 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetCurrentLineNumber($parser) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $retval;
        var $0;
        $parser_addr=$parser;
        var $1=$parser_addr; //@line 1786 "xmlparse.c"
        var $2=$1+288; //@line 1786 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1786 "xmlparse.c"
        var $4=($3)!=0; //@line 1786 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1786 "xmlparse.c"
      case 1: // $bb
        var $5=$parser_addr; //@line 1786 "xmlparse.c"
        var $6=$5+288; //@line 1786 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1786 "xmlparse.c"
        var $8=$parser_addr; //@line 1786 "xmlparse.c"
        var $9=$8+296; //@line 1786 "xmlparse.c"
        var $10=HEAP[$9]; //@line 1786 "xmlparse.c"
        var $11=($7) >= ($10); //@line 1786 "xmlparse.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1786 "xmlparse.c"
      case 2: // $bb1
        var $12=$parser_addr; //@line 1787 "xmlparse.c"
        var $13=$12+144; //@line 1787 "xmlparse.c"
        var $14=HEAP[$13]; //@line 1787 "xmlparse.c"
        var $15=$14+52; //@line 1787 "xmlparse.c"
        var $16=HEAP[$15]; //@line 1787 "xmlparse.c"
        var $17=$parser_addr; //@line 1787 "xmlparse.c"
        var $18=$17+408; //@line 1787 "xmlparse.c"
        var $19=$parser_addr; //@line 1787 "xmlparse.c"
        var $20=$19+288; //@line 1787 "xmlparse.c"
        var $21=HEAP[$20]; //@line 1787 "xmlparse.c"
        var $22=$parser_addr; //@line 1787 "xmlparse.c"
        var $23=$22+296; //@line 1787 "xmlparse.c"
        var $24=HEAP[$23]; //@line 1787 "xmlparse.c"
        var $25=$parser_addr; //@line 1787 "xmlparse.c"
        var $26=$25+144; //@line 1787 "xmlparse.c"
        var $27=HEAP[$26]; //@line 1787 "xmlparse.c"
        FUNCTION_TABLE[$16]($27, $24, $21, $18); //@line 1787 "xmlparse.c"
        var $28=$parser_addr; //@line 1788 "xmlparse.c"
        var $29=$28+288; //@line 1788 "xmlparse.c"
        var $30=HEAP[$29]; //@line 1788 "xmlparse.c"
        var $31=$parser_addr; //@line 1788 "xmlparse.c"
        var $32=$31+296; //@line 1788 "xmlparse.c"
        HEAP[$32]=$30; //@line 1788 "xmlparse.c"
        __label__ = 3; break; //@line 1788 "xmlparse.c"
      case 3: // $bb2
        var $33=$parser_addr; //@line 1790 "xmlparse.c"
        var $34=$33+408; //@line 1790 "xmlparse.c"
        var $35=$34; //@line 1790 "xmlparse.c"
        var $36=HEAP[$35]; //@line 1790 "xmlparse.c"
        var $37=($36) + 1; //@line 1790 "xmlparse.c"
        $0=$37; //@line 1790 "xmlparse.c"
        var $38=$0; //@line 1790 "xmlparse.c"
        $retval=$38; //@line 1790 "xmlparse.c"
        var $retval3=$retval; //@line 1790 "xmlparse.c"
        ;
        return $retval3; //@line 1790 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetCurrentColumnNumber($parser) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $retval;
        var $0;
        $parser_addr=$parser;
        var $1=$parser_addr; //@line 1796 "xmlparse.c"
        var $2=$1+288; //@line 1796 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1796 "xmlparse.c"
        var $4=($3)!=0; //@line 1796 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1796 "xmlparse.c"
      case 1: // $bb
        var $5=$parser_addr; //@line 1796 "xmlparse.c"
        var $6=$5+288; //@line 1796 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1796 "xmlparse.c"
        var $8=$parser_addr; //@line 1796 "xmlparse.c"
        var $9=$8+296; //@line 1796 "xmlparse.c"
        var $10=HEAP[$9]; //@line 1796 "xmlparse.c"
        var $11=($7) >= ($10); //@line 1796 "xmlparse.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1796 "xmlparse.c"
      case 2: // $bb1
        var $12=$parser_addr; //@line 1797 "xmlparse.c"
        var $13=$12+144; //@line 1797 "xmlparse.c"
        var $14=HEAP[$13]; //@line 1797 "xmlparse.c"
        var $15=$14+52; //@line 1797 "xmlparse.c"
        var $16=HEAP[$15]; //@line 1797 "xmlparse.c"
        var $17=$parser_addr; //@line 1797 "xmlparse.c"
        var $18=$17+408; //@line 1797 "xmlparse.c"
        var $19=$parser_addr; //@line 1797 "xmlparse.c"
        var $20=$19+288; //@line 1797 "xmlparse.c"
        var $21=HEAP[$20]; //@line 1797 "xmlparse.c"
        var $22=$parser_addr; //@line 1797 "xmlparse.c"
        var $23=$22+296; //@line 1797 "xmlparse.c"
        var $24=HEAP[$23]; //@line 1797 "xmlparse.c"
        var $25=$parser_addr; //@line 1797 "xmlparse.c"
        var $26=$25+144; //@line 1797 "xmlparse.c"
        var $27=HEAP[$26]; //@line 1797 "xmlparse.c"
        FUNCTION_TABLE[$16]($27, $24, $21, $18); //@line 1797 "xmlparse.c"
        var $28=$parser_addr; //@line 1798 "xmlparse.c"
        var $29=$28+288; //@line 1798 "xmlparse.c"
        var $30=HEAP[$29]; //@line 1798 "xmlparse.c"
        var $31=$parser_addr; //@line 1798 "xmlparse.c"
        var $32=$31+296; //@line 1798 "xmlparse.c"
        HEAP[$32]=$30; //@line 1798 "xmlparse.c"
        __label__ = 3; break; //@line 1798 "xmlparse.c"
      case 3: // $bb2
        var $33=$parser_addr; //@line 1800 "xmlparse.c"
        var $34=$33+408; //@line 1800 "xmlparse.c"
        var $35=$34+4; //@line 1800 "xmlparse.c"
        var $36=HEAP[$35]; //@line 1800 "xmlparse.c"
        $0=$36; //@line 1800 "xmlparse.c"
        var $37=$0; //@line 1800 "xmlparse.c"
        $retval=$37; //@line 1800 "xmlparse.c"
        var $retval3=$retval; //@line 1800 "xmlparse.c"
        ;
        return $retval3; //@line 1800 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_FreeContentModel($parser, $model) {
    ;
    var __label__;
  
    var $parser_addr;
    var $model_addr;
    $parser_addr=$parser;
    $model_addr=$model;
    var $0=$parser_addr; //@line 1806 "xmlparse.c"
    var $1=$0+12; //@line 1806 "xmlparse.c"
    var $2=$1+8; //@line 1806 "xmlparse.c"
    var $3=HEAP[$2]; //@line 1806 "xmlparse.c"
    var $4=$model_addr; //@line 1806 "xmlparse.c"
    var $5=$4; //@line 1806 "xmlparse.c"
    FUNCTION_TABLE[$3]($5); //@line 1806 "xmlparse.c"
    ;
    return; //@line 1807 "xmlparse.c"
  }
  

  function _PyExpat_XML_MemMalloc($parser, $size) {
    ;
    var __label__;
  
    var $parser_addr;
    var $size_addr;
    var $retval;
    var $0;
    $parser_addr=$parser;
    $size_addr=$size;
    var $1=$parser_addr; //@line 1812 "xmlparse.c"
    var $2=$1+12; //@line 1812 "xmlparse.c"
    var $3=$2; //@line 1812 "xmlparse.c"
    var $4=HEAP[$3]; //@line 1812 "xmlparse.c"
    var $5=$size_addr; //@line 1812 "xmlparse.c"
    var $6=FUNCTION_TABLE[$4]($5); //@line 1812 "xmlparse.c"
    $0=$6; //@line 1812 "xmlparse.c"
    var $7=$0; //@line 1812 "xmlparse.c"
    $retval=$7; //@line 1812 "xmlparse.c"
    var $retval1=$retval; //@line 1812 "xmlparse.c"
    ;
    return $retval1; //@line 1812 "xmlparse.c"
  }
  

  function _PyExpat_XML_MemRealloc($parser, $ptr, $size) {
    ;
    var __label__;
  
    var $parser_addr;
    var $ptr_addr;
    var $size_addr;
    var $retval;
    var $0;
    $parser_addr=$parser;
    $ptr_addr=$ptr;
    $size_addr=$size;
    var $1=$parser_addr; //@line 1818 "xmlparse.c"
    var $2=$1+12; //@line 1818 "xmlparse.c"
    var $3=$2+4; //@line 1818 "xmlparse.c"
    var $4=HEAP[$3]; //@line 1818 "xmlparse.c"
    var $5=$ptr_addr; //@line 1818 "xmlparse.c"
    var $6=$size_addr; //@line 1818 "xmlparse.c"
    var $7=FUNCTION_TABLE[$4]($5, $6); //@line 1818 "xmlparse.c"
    $0=$7; //@line 1818 "xmlparse.c"
    var $8=$0; //@line 1818 "xmlparse.c"
    $retval=$8; //@line 1818 "xmlparse.c"
    var $retval1=$retval; //@line 1818 "xmlparse.c"
    ;
    return $retval1; //@line 1818 "xmlparse.c"
  }
  

  function _PyExpat_XML_MemFree($parser, $ptr) {
    ;
    var __label__;
  
    var $parser_addr;
    var $ptr_addr;
    $parser_addr=$parser;
    $ptr_addr=$ptr;
    var $0=$parser_addr; //@line 1824 "xmlparse.c"
    var $1=$0+12; //@line 1824 "xmlparse.c"
    var $2=$1+8; //@line 1824 "xmlparse.c"
    var $3=HEAP[$2]; //@line 1824 "xmlparse.c"
    var $4=$ptr_addr; //@line 1824 "xmlparse.c"
    FUNCTION_TABLE[$3]($4); //@line 1824 "xmlparse.c"
    ;
    return; //@line 1825 "xmlparse.c"
  }
  

  function _PyExpat_XML_DefaultCurrent($parser) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        $parser_addr=$parser;
        var $0=$parser_addr; //@line 1830 "xmlparse.c"
        var $1=$0+80; //@line 1830 "xmlparse.c"
        var $2=HEAP[$1]; //@line 1830 "xmlparse.c"
        var $3=($2)!=0; //@line 1830 "xmlparse.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1830 "xmlparse.c"
      case 1: // $bb
        var $4=$parser_addr; //@line 1831 "xmlparse.c"
        var $5=$4+300; //@line 1831 "xmlparse.c"
        var $6=HEAP[$5]; //@line 1831 "xmlparse.c"
        var $7=($6)!=0; //@line 1831 "xmlparse.c"
        var $8=$parser_addr; //@line 1832 "xmlparse.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1831 "xmlparse.c"
      case 2: // $bb1
        var $9=$8+300; //@line 1832 "xmlparse.c"
        var $10=HEAP[$9]; //@line 1832 "xmlparse.c"
        var $11=$10+4; //@line 1832 "xmlparse.c"
        var $12=HEAP[$11]; //@line 1832 "xmlparse.c"
        var $13=$parser_addr; //@line 1832 "xmlparse.c"
        var $14=$13+300; //@line 1832 "xmlparse.c"
        var $15=HEAP[$14]; //@line 1832 "xmlparse.c"
        var $16=$15; //@line 1832 "xmlparse.c"
        var $17=HEAP[$16]; //@line 1832 "xmlparse.c"
        var $18=$parser_addr; //@line 1832 "xmlparse.c"
        var $19=$18+228; //@line 1832 "xmlparse.c"
        var $20=HEAP[$19]; //@line 1832 "xmlparse.c"
        var $21=$parser_addr; //@line 1832 "xmlparse.c"
        _reportDefault($21, $20, $17, $12); //@line 1832 "xmlparse.c"
        __label__ = 4; break; //@line 1832 "xmlparse.c"
      case 3: // $bb2
        var $22=$8+292; //@line 1837 "xmlparse.c"
        var $23=HEAP[$22]; //@line 1837 "xmlparse.c"
        var $24=$parser_addr; //@line 1837 "xmlparse.c"
        var $25=$24+288; //@line 1837 "xmlparse.c"
        var $26=HEAP[$25]; //@line 1837 "xmlparse.c"
        var $27=$parser_addr; //@line 1837 "xmlparse.c"
        var $28=$27+144; //@line 1837 "xmlparse.c"
        var $29=HEAP[$28]; //@line 1837 "xmlparse.c"
        var $30=$parser_addr; //@line 1837 "xmlparse.c"
        _reportDefault($30, $29, $26, $23); //@line 1837 "xmlparse.c"
        __label__ = 4; break; //@line 1837 "xmlparse.c"
      case 4: // $return
        ;
        return; //@line 1839 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ErrorString($code) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $code_addr;
        var $retval;
        var $0;
        $code_addr=$code;
        var $1=$code_addr; //@line 1887 "xmlparse.c"
        var $2=($1)!=0; //@line 1887 "xmlparse.c"
        var $3=$code_addr; //@line 1887 "xmlparse.c"
        var $4=($3) <= 40; //@line 1887 "xmlparse.c"
        var $or_cond=($2) & ($4);
        if ($or_cond) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1887 "xmlparse.c"
      case 1: // $bb1
        var $5=$code_addr; //@line 1888 "xmlparse.c"
        var $6=_message_3967+$5*4; //@line 1888 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1888 "xmlparse.c"
        $0=$7; //@line 1888 "xmlparse.c"
        __label__ = 3; break; //@line 1888 "xmlparse.c"
      case 2: // $bb2
        $0=0; //@line 1889 "xmlparse.c"
        __label__ = 3; break; //@line 1889 "xmlparse.c"
      case 3: // $bb3
        var $8=$0; //@line 1888 "xmlparse.c"
        $retval=$8; //@line 1888 "xmlparse.c"
        var $retval4=$retval; //@line 1888 "xmlparse.c"
        ;
        return $retval4; //@line 1888 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ExpatVersion() {
    ;
    var __label__;
  
    var $retval;
    var $0;
    $0=__str42230; //@line 1906 "xmlparse.c"
    var $1=$0; //@line 1906 "xmlparse.c"
    $retval=$1; //@line 1906 "xmlparse.c"
    var $retval1=$retval; //@line 1906 "xmlparse.c"
    ;
    return $retval1; //@line 1906 "xmlparse.c"
  }
  

  function _PyExpat_XML_ExpatVersionInfo($agg_result) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
  
    var $version=__stackBase__;
    var $0=$version; //@line 1917 "xmlparse.c"
    HEAP[$0]=2; //@line 1917 "xmlparse.c"
    var $1=$version+4; //@line 1918 "xmlparse.c"
    HEAP[$1]=0; //@line 1918 "xmlparse.c"
    var $2=$version+8; //@line 1919 "xmlparse.c"
    HEAP[$2]=0; //@line 1919 "xmlparse.c"
    var $3=$agg_result; //@line 1921 "xmlparse.c"
    var $4=$version; //@line 1921 "xmlparse.c"
    var $5=HEAP[$4]; //@line 1921 "xmlparse.c"
    HEAP[$3]=$5; //@line 1921 "xmlparse.c"
    var $6=$agg_result+4; //@line 1921 "xmlparse.c"
    var $7=$version+4; //@line 1921 "xmlparse.c"
    var $8=HEAP[$7]; //@line 1921 "xmlparse.c"
    HEAP[$6]=$8; //@line 1921 "xmlparse.c"
    var $9=$agg_result+8; //@line 1921 "xmlparse.c"
    var $10=$version+8; //@line 1921 "xmlparse.c"
    var $11=HEAP[$10]; //@line 1921 "xmlparse.c"
    HEAP[$9]=$11; //@line 1921 "xmlparse.c"
    STACKTOP = __stackBase__;
    return; //@line 1921 "xmlparse.c"
  }
  

  function _PyExpat_XML_GetFeatureList() {
    ;
    var __label__;
  
    var $retval;
    var $0;
    $0=_features_3989; //@line 1954 "xmlparse.c"
    var $1=$0; //@line 1954 "xmlparse.c"
    $retval=$1; //@line 1954 "xmlparse.c"
    var $retval1=$retval; //@line 1954 "xmlparse.c"
    ;
    return $retval1; //@line 1954 "xmlparse.c"
  }
  

  function _storeRawNames($parser) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $retval;
        var $0;
        var $tag;
        var $bufSize;
        var $nameLen;
        var $rawNameBuf;
        var $temp;
        $parser_addr=$parser;
        var $1=$parser_addr; //@line 1965 "xmlparse.c"
        var $2=$1+364; //@line 1965 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1965 "xmlparse.c"
        $tag=$3; //@line 1965 "xmlparse.c"
        __lastLabel__ = -1; __label__ = 11; break; //@line 1965 "xmlparse.c"
      case 1: // $bb
        var $4=$tag; //@line 1968 "xmlparse.c"
        var $5=$4+12; //@line 1968 "xmlparse.c"
        var $6=$5+12; //@line 1968 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1968 "xmlparse.c"
        var $8=($7) + 1; //@line 1968 "xmlparse.c"
        $nameLen=$8; //@line 1968 "xmlparse.c"
        var $9=$tag; //@line 1969 "xmlparse.c"
        var $10=$9+36; //@line 1969 "xmlparse.c"
        var $11=HEAP[$10]; //@line 1969 "xmlparse.c"
        var $12=$nameLen; //@line 1969 "xmlparse.c"
        var $13=$11+$12; //@line 1969 "xmlparse.c"
        $rawNameBuf=$13; //@line 1969 "xmlparse.c"
        var $14=$tag; //@line 1975 "xmlparse.c"
        var $15=$14+4; //@line 1975 "xmlparse.c"
        var $16=HEAP[$15]; //@line 1975 "xmlparse.c"
        var $17=$rawNameBuf; //@line 1975 "xmlparse.c"
        var $18=($16)==($17); //@line 1975 "xmlparse.c"
        if ($18) { __label__ = 12; break; } else { __label__ = 2; break; } //@line 1975 "xmlparse.c"
      case 2: // $bb1
        var $19=$tag; //@line 1980 "xmlparse.c"
        var $20=$19+8; //@line 1980 "xmlparse.c"
        var $21=HEAP[$20]; //@line 1980 "xmlparse.c"
        var $22=$nameLen; //@line 1980 "xmlparse.c"
        var $23=($22) + ($21); //@line 1980 "xmlparse.c"
        $bufSize=$23; //@line 1980 "xmlparse.c"
        var $24=$tag; //@line 1981 "xmlparse.c"
        var $25=$24+40; //@line 1981 "xmlparse.c"
        var $26=HEAP[$25]; //@line 1981 "xmlparse.c"
        var $27=($26); //@line 1981 "xmlparse.c"
        var $28=$tag; //@line 1981 "xmlparse.c"
        var $29=$28+36; //@line 1981 "xmlparse.c"
        var $30=HEAP[$29]; //@line 1981 "xmlparse.c"
        var $31=($30); //@line 1981 "xmlparse.c"
        var $32=($27) - ($31); //@line 1981 "xmlparse.c"
        var $33=$bufSize; //@line 1981 "xmlparse.c"
        var $34=($32) < ($33); //@line 1981 "xmlparse.c"
        if ($34) { __label__ = 3; break; } else { __label__ = 10; break; } //@line 1981 "xmlparse.c"
      case 3: // $bb2
        var $35=$parser_addr; //@line 1982 "xmlparse.c"
        var $36=$35+12; //@line 1982 "xmlparse.c"
        var $37=$36+4; //@line 1982 "xmlparse.c"
        var $38=HEAP[$37]; //@line 1982 "xmlparse.c"
        var $39=$bufSize; //@line 1982 "xmlparse.c"
        var $40=$tag; //@line 1982 "xmlparse.c"
        var $41=$40+36; //@line 1982 "xmlparse.c"
        var $42=HEAP[$41]; //@line 1982 "xmlparse.c"
        var $43=FUNCTION_TABLE[$38]($42, $39); //@line 1982 "xmlparse.c"
        $temp=$43; //@line 1982 "xmlparse.c"
        var $44=$temp; //@line 1983 "xmlparse.c"
        var $45=($44)==0; //@line 1983 "xmlparse.c"
        if ($45) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1983 "xmlparse.c"
      case 4: // $bb3
        $0=0; //@line 1984 "xmlparse.c"
        __label__ = 13; break; //@line 1984 "xmlparse.c"
      case 5: // $bb4
        var $46=$tag; //@line 1988 "xmlparse.c"
        var $47=$46+12; //@line 1988 "xmlparse.c"
        var $48=$47; //@line 1988 "xmlparse.c"
        var $49=HEAP[$48]; //@line 1988 "xmlparse.c"
        var $50=$tag; //@line 1988 "xmlparse.c"
        var $51=$50+36; //@line 1988 "xmlparse.c"
        var $52=HEAP[$51]; //@line 1988 "xmlparse.c"
        var $53=($49)==($52); //@line 1988 "xmlparse.c"
        if ($53) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1988 "xmlparse.c"
      case 6: // $bb5
        var $54=$tag; //@line 1989 "xmlparse.c"
        var $55=$54+12; //@line 1989 "xmlparse.c"
        var $56=$55; //@line 1989 "xmlparse.c"
        var $57=$temp; //@line 1989 "xmlparse.c"
        HEAP[$56]=$57; //@line 1989 "xmlparse.c"
        __label__ = 7; break; //@line 1989 "xmlparse.c"
      case 7: // $bb6
        var $58=$tag; //@line 1993 "xmlparse.c"
        var $59=$58+12; //@line 1993 "xmlparse.c"
        var $60=$59+4; //@line 1993 "xmlparse.c"
        var $61=HEAP[$60]; //@line 1993 "xmlparse.c"
        var $62=($61)!=0; //@line 1993 "xmlparse.c"
        if ($62) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1993 "xmlparse.c"
      case 8: // $bb7
        var $63=$tag; //@line 1994 "xmlparse.c"
        var $64=$63+12; //@line 1994 "xmlparse.c"
        var $65=$64+4; //@line 1994 "xmlparse.c"
        var $66=HEAP[$65]; //@line 1994 "xmlparse.c"
        var $67=($66); //@line 1994 "xmlparse.c"
        var $68=$tag; //@line 1994 "xmlparse.c"
        var $69=$68+36; //@line 1994 "xmlparse.c"
        var $70=HEAP[$69]; //@line 1994 "xmlparse.c"
        var $71=($70); //@line 1994 "xmlparse.c"
        var $72=($67) - ($71); //@line 1994 "xmlparse.c"
        var $73=$temp; //@line 1994 "xmlparse.c"
        var $74=$73+$72; //@line 1994 "xmlparse.c"
        var $75=$tag; //@line 1994 "xmlparse.c"
        var $76=$75+12; //@line 1994 "xmlparse.c"
        var $77=$76+4; //@line 1994 "xmlparse.c"
        HEAP[$77]=$74; //@line 1994 "xmlparse.c"
        __label__ = 9; break; //@line 1994 "xmlparse.c"
      case 9: // $bb8
        var $78=$tag; //@line 1996 "xmlparse.c"
        var $79=$78+36; //@line 1996 "xmlparse.c"
        var $80=$temp; //@line 1996 "xmlparse.c"
        HEAP[$79]=$80; //@line 1996 "xmlparse.c"
        var $81=$temp; //@line 1997 "xmlparse.c"
        var $82=$bufSize; //@line 1997 "xmlparse.c"
        var $83=$81+$82; //@line 1997 "xmlparse.c"
        var $84=$tag; //@line 1997 "xmlparse.c"
        var $85=$84+40; //@line 1997 "xmlparse.c"
        HEAP[$85]=$83; //@line 1997 "xmlparse.c"
        var $86=$temp; //@line 1998 "xmlparse.c"
        var $87=$nameLen; //@line 1998 "xmlparse.c"
        var $88=$86+$87; //@line 1998 "xmlparse.c"
        $rawNameBuf=$88; //@line 1998 "xmlparse.c"
        __label__ = 10; break; //@line 1998 "xmlparse.c"
      case 10: // $bb9
        var $89=$tag; //@line 2000 "xmlparse.c"
        var $90=$89+8; //@line 2000 "xmlparse.c"
        var $91=HEAP[$90]; //@line 2000 "xmlparse.c"
        var $92=$tag; //@line 2000 "xmlparse.c"
        var $93=$92+4; //@line 2000 "xmlparse.c"
        var $94=HEAP[$93]; //@line 2000 "xmlparse.c"
        var $95=$rawNameBuf; //@line 2000 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($95, $94, $91, 1, 0); //@line 2000 "xmlparse.c"
        var $96=$tag; //@line 2001 "xmlparse.c"
        var $97=$96+4; //@line 2001 "xmlparse.c"
        var $98=$rawNameBuf; //@line 2001 "xmlparse.c"
        HEAP[$97]=$98; //@line 2001 "xmlparse.c"
        var $99=$tag; //@line 2002 "xmlparse.c"
        var $100=$99; //@line 2002 "xmlparse.c"
        var $101=HEAP[$100]; //@line 2002 "xmlparse.c"
        $tag=$101; //@line 2002 "xmlparse.c"
        __lastLabel__ = 10; __label__ = 11; break; //@line 2002 "xmlparse.c"
      case 11: // $bb10
        var $102=__lastLabel__ == 10 ? $101 : ($3);
        var $103=($102)!=0; //@line 1966 "xmlparse.c"
        if ($103) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 1966 "xmlparse.c"
      case 12: // $bb11
        $0=1; //@line 2004 "xmlparse.c"
        __label__ = 13; break; //@line 2004 "xmlparse.c"
      case 13: // $bb12
        var $104=$0; //@line 1984 "xmlparse.c"
        $retval=$104; //@line 1984 "xmlparse.c"
        var $retval13=$retval; //@line 1984 "xmlparse.c"
        var $retval1314=((($retval13)) & 255); //@line 1984 "xmlparse.c"
        ;
        return $retval1314; //@line 1984 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _contentProcessor($parser, $start, $end, $endPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $start_addr;
        var $end_addr;
        var $endPtr_addr;
        var $retval;
        var $0;
        var $result;
        $parser_addr=$parser;
        $start_addr=$start;
        $end_addr=$end;
        $endPtr_addr=$endPtr;
        var $1=$parser_addr; //@line 2014 "xmlparse.c"
        var $2=$1+480; //@line 2014 "xmlparse.c"
        var $3=$2+4; //@line 2014 "xmlparse.c"
        var $4=HEAP[$3]; //@line 2014 "xmlparse.c"
        var $5=($4)==0; //@line 2014 "xmlparse.c"
        var $6=($5); //@line 2014 "xmlparse.c"
        var $7=$parser_addr; //@line 2014 "xmlparse.c"
        var $8=$7+144; //@line 2014 "xmlparse.c"
        var $9=HEAP[$8]; //@line 2014 "xmlparse.c"
        var $10=$parser_addr; //@line 2014 "xmlparse.c"
        var $11=$start_addr; //@line 2014 "xmlparse.c"
        var $12=$end_addr; //@line 2014 "xmlparse.c"
        var $13=$endPtr_addr; //@line 2014 "xmlparse.c"
        var $14=((($6)) & 255); //@line 2014 "xmlparse.c"
        var $15=_doContent($10, 0, $9, $11, $12, $13, $14); //@line 2014 "xmlparse.c"
        $result=$15; //@line 2014 "xmlparse.c"
        var $16=$result; //@line 2015 "xmlparse.c"
        var $17=($16)==0; //@line 2015 "xmlparse.c"
        if ($17) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2015 "xmlparse.c"
      case 1: // $bb
        var $18=$parser_addr; //@line 2016 "xmlparse.c"
        var $19=_storeRawNames($18); //@line 2016 "xmlparse.c"
        var $20=($19)==0; //@line 2016 "xmlparse.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2016 "xmlparse.c"
      case 2: // $bb1
        $0=1; //@line 2017 "xmlparse.c"
        __label__ = 4; break; //@line 2017 "xmlparse.c"
      case 3: // $bb2
        var $21=$result; //@line 2019 "xmlparse.c"
        $0=$21; //@line 2019 "xmlparse.c"
        __label__ = 4; break; //@line 2019 "xmlparse.c"
      case 4: // $bb3
        var $22=$0; //@line 2017 "xmlparse.c"
        $retval=$22; //@line 2017 "xmlparse.c"
        var $retval4=$retval; //@line 2017 "xmlparse.c"
        ;
        return $retval4; //@line 2017 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _externalEntityInitProcessor($parser, $start, $end, $endPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $start_addr;
        var $end_addr;
        var $endPtr_addr;
        var $retval;
        var $0;
        var $result;
        $parser_addr=$parser;
        $start_addr=$start;
        $end_addr=$end;
        $endPtr_addr=$endPtr;
        var $1=$parser_addr; //@line 2028 "xmlparse.c"
        var $2=_initializeEncoding($1); //@line 2028 "xmlparse.c"
        $result=$2; //@line 2028 "xmlparse.c"
        var $3=$result; //@line 2029 "xmlparse.c"
        var $4=($3)!=0; //@line 2029 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2029 "xmlparse.c"
      case 1: // $bb
        var $5=$result; //@line 2030 "xmlparse.c"
        $0=$5; //@line 2030 "xmlparse.c"
        __label__ = 3; break; //@line 2030 "xmlparse.c"
      case 2: // $bb1
        var $6=$parser_addr; //@line 2031 "xmlparse.c"
        var $7=$6+280; //@line 2031 "xmlparse.c"
        HEAP[$7]=(FUNCTION_TABLE_OFFSET + 56); //@line 2031 "xmlparse.c"
        var $8=$parser_addr; //@line 2032 "xmlparse.c"
        var $9=$start_addr; //@line 2032 "xmlparse.c"
        var $10=$end_addr; //@line 2032 "xmlparse.c"
        var $11=$endPtr_addr; //@line 2032 "xmlparse.c"
        var $12=_externalEntityInitProcessor2($8, $9, $10, $11); //@line 2032 "xmlparse.c"
        $0=$12; //@line 2032 "xmlparse.c"
        __label__ = 3; break; //@line 2032 "xmlparse.c"
      case 3: // $bb2
        var $13=$0; //@line 2030 "xmlparse.c"
        $retval=$13; //@line 2030 "xmlparse.c"
        var $retval3=$retval; //@line 2030 "xmlparse.c"
        ;
        return $retval3; //@line 2030 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _externalEntityInitProcessor2($parser, $start, $end, $endPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $start_addr;
        var $end_addr;
        var $endPtr_addr;
        var $retval;
        var $0;
        var $next=__stackBase__;
        var $tok;
        $parser_addr=$parser;
        $start_addr=$start;
        $end_addr=$end;
        $endPtr_addr=$endPtr;
        var $1=$start_addr; //@line 2041 "xmlparse.c"
        HEAP[$next]=$1; //@line 2041 "xmlparse.c"
        var $2=$parser_addr; //@line 2042 "xmlparse.c"
        var $3=$2+144; //@line 2042 "xmlparse.c"
        var $4=HEAP[$3]; //@line 2042 "xmlparse.c"
        var $5=$4; //@line 2042 "xmlparse.c"
        var $6=$5+4; //@line 2042 "xmlparse.c"
        var $7=HEAP[$6]; //@line 2042 "xmlparse.c"
        var $8=$parser_addr; //@line 2042 "xmlparse.c"
        var $9=$8+144; //@line 2042 "xmlparse.c"
        var $10=HEAP[$9]; //@line 2042 "xmlparse.c"
        var $11=$start_addr; //@line 2042 "xmlparse.c"
        var $12=$end_addr; //@line 2042 "xmlparse.c"
        var $13=FUNCTION_TABLE[$7]($10, $11, $12, $next); //@line 2042 "xmlparse.c"
        $tok=$13; //@line 2042 "xmlparse.c"
        var $14=$tok; //@line 2043 "xmlparse.c"
        if ($14 == -2) {
          __label__ = 8; break;
        }
        else if ($14 == -1) {
          __label__ = 5; break;
        }
        else if ($14 == 14) {
          __label__ = 1; break;
        }
        else {
        __label__ = 11; break;
        }
        
      case 1: // $bb
        var $15=HEAP[$next]; //@line 2050 "xmlparse.c"
        var $16=$end_addr; //@line 2050 "xmlparse.c"
        var $17=($15)==($16); //@line 2050 "xmlparse.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 2050 "xmlparse.c"
      case 2: // $bb1
        var $18=$parser_addr; //@line 2050 "xmlparse.c"
        var $19=$18+480; //@line 2050 "xmlparse.c"
        var $20=$19+4; //@line 2050 "xmlparse.c"
        var $21=HEAP[$20]; //@line 2050 "xmlparse.c"
        var $22=($21)==0; //@line 2050 "xmlparse.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2050 "xmlparse.c"
      case 3: // $bb2
        var $23=HEAP[$next]; //@line 2051 "xmlparse.c"
        var $24=$endPtr_addr; //@line 2051 "xmlparse.c"
        HEAP[$24]=$23; //@line 2051 "xmlparse.c"
        $0=0; //@line 2052 "xmlparse.c"
        __label__ = 12; break; //@line 2052 "xmlparse.c"
      case 4: // $bb3
        var $25=HEAP[$next]; //@line 2054 "xmlparse.c"
        $start_addr=$25; //@line 2054 "xmlparse.c"
        __label__ = 11; break; //@line 2054 "xmlparse.c"
      case 5: // $bb4
        var $26=$parser_addr; //@line 2057 "xmlparse.c"
        var $27=$26+480; //@line 2057 "xmlparse.c"
        var $28=$27+4; //@line 2057 "xmlparse.c"
        var $29=HEAP[$28]; //@line 2057 "xmlparse.c"
        var $30=($29)==0; //@line 2057 "xmlparse.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2057 "xmlparse.c"
      case 6: // $bb5
        var $31=$endPtr_addr; //@line 2058 "xmlparse.c"
        var $32=$start_addr; //@line 2058 "xmlparse.c"
        HEAP[$31]=$32; //@line 2058 "xmlparse.c"
        $0=0; //@line 2059 "xmlparse.c"
        __label__ = 12; break; //@line 2059 "xmlparse.c"
      case 7: // $bb6
        var $33=$parser_addr; //@line 2061 "xmlparse.c"
        var $34=$33+288; //@line 2061 "xmlparse.c"
        var $35=$start_addr; //@line 2061 "xmlparse.c"
        HEAP[$34]=$35; //@line 2061 "xmlparse.c"
        $0=5; //@line 2062 "xmlparse.c"
        __label__ = 12; break; //@line 2062 "xmlparse.c"
      case 8: // $bb7
        var $36=$parser_addr; //@line 2064 "xmlparse.c"
        var $37=$36+480; //@line 2064 "xmlparse.c"
        var $38=$37+4; //@line 2064 "xmlparse.c"
        var $39=HEAP[$38]; //@line 2064 "xmlparse.c"
        var $40=($39)==0; //@line 2064 "xmlparse.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2064 "xmlparse.c"
      case 9: // $bb8
        var $41=$endPtr_addr; //@line 2065 "xmlparse.c"
        var $42=$start_addr; //@line 2065 "xmlparse.c"
        HEAP[$41]=$42; //@line 2065 "xmlparse.c"
        $0=0; //@line 2066 "xmlparse.c"
        __label__ = 12; break; //@line 2066 "xmlparse.c"
      case 10: // $bb9
        var $43=$parser_addr; //@line 2068 "xmlparse.c"
        var $44=$43+288; //@line 2068 "xmlparse.c"
        var $45=$start_addr; //@line 2068 "xmlparse.c"
        HEAP[$44]=$45; //@line 2068 "xmlparse.c"
        $0=6; //@line 2069 "xmlparse.c"
        __label__ = 12; break; //@line 2069 "xmlparse.c"
      case 11: // $bb10
        var $46=$parser_addr; //@line 2071 "xmlparse.c"
        var $47=$46+280; //@line 2071 "xmlparse.c"
        HEAP[$47]=(FUNCTION_TABLE_OFFSET + 58); //@line 2071 "xmlparse.c"
        var $48=$parser_addr; //@line 2072 "xmlparse.c"
        var $49=$start_addr; //@line 2072 "xmlparse.c"
        var $50=$end_addr; //@line 2072 "xmlparse.c"
        var $51=$endPtr_addr; //@line 2072 "xmlparse.c"
        var $52=_externalEntityInitProcessor3($48, $49, $50, $51); //@line 2072 "xmlparse.c"
        $0=$52; //@line 2072 "xmlparse.c"
        __label__ = 12; break; //@line 2072 "xmlparse.c"
      case 12: // $bb11
        var $53=$0; //@line 2052 "xmlparse.c"
        $retval=$53; //@line 2052 "xmlparse.c"
        var $retval12=$retval; //@line 2052 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 2052 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _externalEntityInitProcessor3($parser, $start, $end, $endPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $start_addr;
        var $end_addr;
        var $endPtr_addr;
        var $retval;
        var $0;
        var $tok;
        var $next=__stackBase__;
        var $result;
        $parser_addr=$parser;
        $start_addr=$start;
        $end_addr=$end;
        $endPtr_addr=$endPtr;
        var $1=$start_addr; //@line 2082 "xmlparse.c"
        HEAP[$next]=$1; //@line 2082 "xmlparse.c"
        var $2=$parser_addr; //@line 2083 "xmlparse.c"
        var $3=$2+288; //@line 2083 "xmlparse.c"
        var $4=$start_addr; //@line 2083 "xmlparse.c"
        HEAP[$3]=$4; //@line 2083 "xmlparse.c"
        var $5=$parser_addr; //@line 2084 "xmlparse.c"
        var $6=$5+144; //@line 2084 "xmlparse.c"
        var $7=HEAP[$6]; //@line 2084 "xmlparse.c"
        var $8=$7; //@line 2084 "xmlparse.c"
        var $9=$8+4; //@line 2084 "xmlparse.c"
        var $10=HEAP[$9]; //@line 2084 "xmlparse.c"
        var $11=$parser_addr; //@line 2084 "xmlparse.c"
        var $12=$11+144; //@line 2084 "xmlparse.c"
        var $13=HEAP[$12]; //@line 2084 "xmlparse.c"
        var $14=$start_addr; //@line 2084 "xmlparse.c"
        var $15=$end_addr; //@line 2084 "xmlparse.c"
        var $16=FUNCTION_TABLE[$10]($13, $14, $15, $next); //@line 2084 "xmlparse.c"
        $tok=$16; //@line 2084 "xmlparse.c"
        var $17=HEAP[$next]; //@line 2085 "xmlparse.c"
        var $18=$parser_addr; //@line 2085 "xmlparse.c"
        var $19=$18+292; //@line 2085 "xmlparse.c"
        HEAP[$19]=$17; //@line 2085 "xmlparse.c"
        var $20=$tok; //@line 2087 "xmlparse.c"
        if ($20 == -2) {
          __label__ = 10; break;
        }
        else if ($20 == -1) {
          __label__ = 7; break;
        }
        else if ($20 == 12) {
          __label__ = 1; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 1: // $bb
        var $21=HEAP[$next]; //@line 2091 "xmlparse.c"
        var $22=$parser_addr; //@line 2091 "xmlparse.c"
        var $23=$start_addr; //@line 2091 "xmlparse.c"
        var $24=_processXmlDecl($22, 1, $23, $21); //@line 2091 "xmlparse.c"
        $result=$24; //@line 2091 "xmlparse.c"
        var $25=$result; //@line 2092 "xmlparse.c"
        var $26=($25)!=0; //@line 2092 "xmlparse.c"
        if ($26) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2092 "xmlparse.c"
      case 2: // $bb1
        var $27=$result; //@line 2093 "xmlparse.c"
        $0=$27; //@line 2093 "xmlparse.c"
        __label__ = 14; break; //@line 2093 "xmlparse.c"
      case 3: // $bb2
        var $28=$parser_addr; //@line 2094 "xmlparse.c"
        var $29=$28+480; //@line 2094 "xmlparse.c"
        var $30=$29; //@line 2094 "xmlparse.c"
        var $31=HEAP[$30]; //@line 2094 "xmlparse.c"
        if ($31 == 2) {
          __label__ = 5; break;
        }
        else if ($31 == 3) {
          __label__ = 4; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 4: // $bb3
        var $32=HEAP[$next]; //@line 2096 "xmlparse.c"
        var $33=$endPtr_addr; //@line 2096 "xmlparse.c"
        HEAP[$33]=$32; //@line 2096 "xmlparse.c"
        $0=0; //@line 2097 "xmlparse.c"
        __label__ = 14; break; //@line 2097 "xmlparse.c"
      case 5: // $bb4
        $0=35; //@line 2099 "xmlparse.c"
        __label__ = 14; break; //@line 2099 "xmlparse.c"
      case 6: // $bb5
        var $34=HEAP[$next]; //@line 2101 "xmlparse.c"
        $start_addr=$34; //@line 2101 "xmlparse.c"
        __label__ = 13; break; //@line 2101 "xmlparse.c"
      case 7: // $bb6
        var $35=$parser_addr; //@line 2106 "xmlparse.c"
        var $36=$35+480; //@line 2106 "xmlparse.c"
        var $37=$36+4; //@line 2106 "xmlparse.c"
        var $38=HEAP[$37]; //@line 2106 "xmlparse.c"
        var $39=($38)==0; //@line 2106 "xmlparse.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2106 "xmlparse.c"
      case 8: // $bb7
        var $40=$endPtr_addr; //@line 2107 "xmlparse.c"
        var $41=$start_addr; //@line 2107 "xmlparse.c"
        HEAP[$40]=$41; //@line 2107 "xmlparse.c"
        $0=0; //@line 2108 "xmlparse.c"
        __label__ = 14; break; //@line 2108 "xmlparse.c"
      case 9: // $bb8
        $0=5; //@line 2110 "xmlparse.c"
        __label__ = 14; break; //@line 2110 "xmlparse.c"
      case 10: // $bb9
        var $42=$parser_addr; //@line 2112 "xmlparse.c"
        var $43=$42+480; //@line 2112 "xmlparse.c"
        var $44=$43+4; //@line 2112 "xmlparse.c"
        var $45=HEAP[$44]; //@line 2112 "xmlparse.c"
        var $46=($45)==0; //@line 2112 "xmlparse.c"
        if ($46) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 2112 "xmlparse.c"
      case 11: // $bb10
        var $47=$endPtr_addr; //@line 2113 "xmlparse.c"
        var $48=$start_addr; //@line 2113 "xmlparse.c"
        HEAP[$47]=$48; //@line 2113 "xmlparse.c"
        $0=0; //@line 2114 "xmlparse.c"
        __label__ = 14; break; //@line 2114 "xmlparse.c"
      case 12: // $bb11
        $0=6; //@line 2116 "xmlparse.c"
        __label__ = 14; break; //@line 2116 "xmlparse.c"
      case 13: // $bb12
        var $49=$parser_addr; //@line 2118 "xmlparse.c"
        var $50=$49+280; //@line 2118 "xmlparse.c"
        HEAP[$50]=(FUNCTION_TABLE_OFFSET + 60); //@line 2118 "xmlparse.c"
        var $51=$parser_addr; //@line 2119 "xmlparse.c"
        var $52=$51+312; //@line 2119 "xmlparse.c"
        HEAP[$52]=1; //@line 2119 "xmlparse.c"
        var $53=$parser_addr; //@line 2120 "xmlparse.c"
        var $54=$start_addr; //@line 2120 "xmlparse.c"
        var $55=$end_addr; //@line 2120 "xmlparse.c"
        var $56=$endPtr_addr; //@line 2120 "xmlparse.c"
        var $57=_externalEntityContentProcessor($53, $54, $55, $56); //@line 2120 "xmlparse.c"
        $0=$57; //@line 2120 "xmlparse.c"
        __label__ = 14; break; //@line 2120 "xmlparse.c"
      case 14: // $bb13
        var $58=$0; //@line 2093 "xmlparse.c"
        $retval=$58; //@line 2093 "xmlparse.c"
        var $retval14=$retval; //@line 2093 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 2093 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _externalEntityContentProcessor($parser, $start, $end, $endPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $start_addr;
        var $end_addr;
        var $endPtr_addr;
        var $retval;
        var $0;
        var $result;
        $parser_addr=$parser;
        $start_addr=$start;
        $end_addr=$end;
        $endPtr_addr=$endPtr;
        var $1=$parser_addr; //@line 2130 "xmlparse.c"
        var $2=$1+480; //@line 2130 "xmlparse.c"
        var $3=$2+4; //@line 2130 "xmlparse.c"
        var $4=HEAP[$3]; //@line 2130 "xmlparse.c"
        var $5=($4)==0; //@line 2130 "xmlparse.c"
        var $6=($5); //@line 2130 "xmlparse.c"
        var $7=$parser_addr; //@line 2130 "xmlparse.c"
        var $8=$7+144; //@line 2130 "xmlparse.c"
        var $9=HEAP[$8]; //@line 2130 "xmlparse.c"
        var $10=$parser_addr; //@line 2130 "xmlparse.c"
        var $11=$start_addr; //@line 2130 "xmlparse.c"
        var $12=$end_addr; //@line 2130 "xmlparse.c"
        var $13=$endPtr_addr; //@line 2130 "xmlparse.c"
        var $14=((($6)) & 255); //@line 2130 "xmlparse.c"
        var $15=_doContent($10, 1, $9, $11, $12, $13, $14); //@line 2130 "xmlparse.c"
        $result=$15; //@line 2130 "xmlparse.c"
        var $16=$result; //@line 2131 "xmlparse.c"
        var $17=($16)==0; //@line 2131 "xmlparse.c"
        if ($17) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2131 "xmlparse.c"
      case 1: // $bb
        var $18=$parser_addr; //@line 2132 "xmlparse.c"
        var $19=_storeRawNames($18); //@line 2132 "xmlparse.c"
        var $20=($19)==0; //@line 2132 "xmlparse.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2132 "xmlparse.c"
      case 2: // $bb1
        $0=1; //@line 2133 "xmlparse.c"
        __label__ = 4; break; //@line 2133 "xmlparse.c"
      case 3: // $bb2
        var $21=$result; //@line 2135 "xmlparse.c"
        $0=$21; //@line 2135 "xmlparse.c"
        __label__ = 4; break; //@line 2135 "xmlparse.c"
      case 4: // $bb3
        var $22=$0; //@line 2133 "xmlparse.c"
        $retval=$22; //@line 2133 "xmlparse.c"
        var $retval4=$retval; //@line 2133 "xmlparse.c"
        ;
        return $retval4; //@line 2133 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doContent($parser, $startTagLevel, $enc, $s, $end, $nextPtr, $haveMore) {
    var __stackBase__  = STACKTOP; STACKTOP += 59; _memset(__stackBase__, 0, 59);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $startTagLevel_addr;
        var $enc_addr;
        var $s_addr=__stackBase__;
        var $end_addr;
        var $nextPtr_addr;
        var $haveMore_addr;
        var $retval;
        var $0;
        var $dtd;
        var $eventPP;
        var $eventEndPP;
        var $next=__stackBase__+4;
        var $tok;
        var $c=__stackBase__+8;
        var $name;
        var $entity;
        var $ch=__stackBase__+9;
        var $result;
        var $context;
        var $tag;
        var $result74;
        var $toPtr=__stackBase__+10;
        var $rawNameEnd;
        var $fromPtr=__stackBase__+14;
        var $bufSize;
        var $convLen;
        var $temp;
        var $rawName;
        var $result94;
        var $bindings=__stackBase__+18;
        var $noElmHandlers;
        var $name95=__stackBase__+22;
        var $b;
        var $len;
        var $rawName119;
        var $tag120;
        var $localPart;
        var $prefix;
        var $uri;
        var $b140;
        var $n;
        var $buf=__stackBase__+46;
        var $c159=__stackBase__+50;
        var $result164;
        var $dataPtr=__stackBase__+51;
        var $dataPtr190=__stackBase__+55;
        $parser_addr=$parser;
        $startTagLevel_addr=$startTagLevel;
        $enc_addr=$enc;
        HEAP[$s_addr]=$s;
        $end_addr=$end;
        $nextPtr_addr=$nextPtr;
        $haveMore_addr=$haveMore;
        var $1=$parser_addr; //@line 2148 "xmlparse.c"
        var $2=$1+356; //@line 2148 "xmlparse.c"
        var $3=HEAP[$2]; //@line 2148 "xmlparse.c"
        $dtd=$3; //@line 2148 "xmlparse.c"
        var $4=$parser_addr; //@line 2152 "xmlparse.c"
        var $5=$4+144; //@line 2152 "xmlparse.c"
        var $6=HEAP[$5]; //@line 2152 "xmlparse.c"
        var $7=$enc_addr; //@line 2152 "xmlparse.c"
        var $8=($6)==($7); //@line 2152 "xmlparse.c"
        var $9=$parser_addr; //@line 2153 "xmlparse.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2152 "xmlparse.c"
      case 1: // $bb
        var $10=$9+288; //@line 2153 "xmlparse.c"
        $eventPP=$10; //@line 2153 "xmlparse.c"
        var $11=$parser_addr; //@line 2154 "xmlparse.c"
        var $12=$11+292; //@line 2154 "xmlparse.c"
        $eventEndPP=$12; //@line 2154 "xmlparse.c"
        __label__ = 3; break; //@line 2154 "xmlparse.c"
      case 2: // $bb1
        var $13=$9+300; //@line 2157 "xmlparse.c"
        var $14=HEAP[$13]; //@line 2157 "xmlparse.c"
        var $15=$14; //@line 2157 "xmlparse.c"
        $eventPP=$15; //@line 2157 "xmlparse.c"
        var $16=$parser_addr; //@line 2158 "xmlparse.c"
        var $17=$16+300; //@line 2158 "xmlparse.c"
        var $18=HEAP[$17]; //@line 2158 "xmlparse.c"
        var $19=$18+4; //@line 2158 "xmlparse.c"
        $eventEndPP=$19; //@line 2158 "xmlparse.c"
        __label__ = 3; break; //@line 2158 "xmlparse.c"
      case 3: // $bb2
        var $20=HEAP[$s_addr]; //@line 2160 "xmlparse.c"
        var $21=$eventPP; //@line 2160 "xmlparse.c"
        HEAP[$21]=$20; //@line 2160 "xmlparse.c"
        var $22=$name95; //@line 2367 "xmlparse.c"
        var $23=$name95; //@line 2377 "xmlparse.c"
        var $24=$name95; //@line 2383 "xmlparse.c"
        var $buf151=$buf; //@line 2464 "xmlparse.c"
        var $buf152=$buf; //@line 2464 "xmlparse.c"
        __label__ = 4; break; //@line 2160 "xmlparse.c"
      case 4: // $bb3
        var $25=HEAP[$s_addr]; //@line 2163 "xmlparse.c"
        HEAP[$next]=$25; //@line 2163 "xmlparse.c"
        var $26=$enc_addr; //@line 2164 "xmlparse.c"
        var $27=$26; //@line 2164 "xmlparse.c"
        var $28=$27+4; //@line 2164 "xmlparse.c"
        var $29=HEAP[$28]; //@line 2164 "xmlparse.c"
        var $30=HEAP[$s_addr]; //@line 2164 "xmlparse.c"
        var $31=$enc_addr; //@line 2164 "xmlparse.c"
        var $32=$end_addr; //@line 2164 "xmlparse.c"
        var $33=FUNCTION_TABLE[$29]($31, $30, $32, $next); //@line 2164 "xmlparse.c"
        $tok=$33; //@line 2164 "xmlparse.c"
        var $34=HEAP[$next]; //@line 2165 "xmlparse.c"
        var $35=$eventEndPP; //@line 2165 "xmlparse.c"
        HEAP[$35]=$34; //@line 2165 "xmlparse.c"
        var $36=$tok; //@line 2166 "xmlparse.c"
        if ($36 == -5) {
          __label__ = 149; break;
        }
        else if ($36 == -4) {
          __label__ = 16; break;
        }
        else if ($36 == -3) {
          __label__ = 5; break;
        }
        else if ($36 == -2) {
          __label__ = 27; break;
        }
        else if ($36 == -1) {
          __label__ = 24; break;
        }
        else if ($36 == 0) {
          __label__ = 23; break;
        }
        else if ($36 == 1) {
          __label__ = 68; break;
        }
        else if ($36 == 2) {
          __label__ = 68; break;
        }
        else if ($36 == 3) {
          __label__ = 87; break;
        }
        else if ($36 == 4) {
          __label__ = 87; break;
        }
        else if ($36 == 5) {
          __label__ = 106; break;
        }
        else if ($36 == 6) {
          __label__ = 162; break;
        }
        else if ($36 == 7) {
          __label__ = 137; break;
        }
        else if ($36 == 8) {
          __label__ = 141; break;
        }
        else if ($36 == 9) {
          __label__ = 30; break;
        }
        else if ($36 == 10) {
          __label__ = 130; break;
        }
        else if ($36 == 11) {
          __label__ = 169; break;
        }
        else if ($36 == 12) {
          __label__ = 136; break;
        }
        else if ($36 == 13) {
          __label__ = 171; break;
        }
        else {
        __label__ = 173; break;
        }
        
      case 5: // $bb4
        var $37=$haveMore_addr; //@line 2168 "xmlparse.c"
        var $38=($37)!=0; //@line 2168 "xmlparse.c"
        if ($38) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2168 "xmlparse.c"
      case 6: // $bb5
        var $39=HEAP[$s_addr]; //@line 2169 "xmlparse.c"
        var $40=$nextPtr_addr; //@line 2169 "xmlparse.c"
        HEAP[$40]=$39; //@line 2169 "xmlparse.c"
        $0=0; //@line 2170 "xmlparse.c"
        __label__ = 178; break; //@line 2170 "xmlparse.c"
      case 7: // $bb6
        var $41=$eventEndPP; //@line 2172 "xmlparse.c"
        var $42=$end_addr; //@line 2172 "xmlparse.c"
        HEAP[$41]=$42; //@line 2172 "xmlparse.c"
        var $43=$parser_addr; //@line 2173 "xmlparse.c"
        var $44=$43+60; //@line 2173 "xmlparse.c"
        var $45=HEAP[$44]; //@line 2173 "xmlparse.c"
        var $46=($45)!=0; //@line 2173 "xmlparse.c"
        if ($46) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2173 "xmlparse.c"
      case 8: // $bb7
        HEAP[$c]=10; //@line 2174 "xmlparse.c"
        var $47=$parser_addr; //@line 2175 "xmlparse.c"
        var $48=$47+60; //@line 2175 "xmlparse.c"
        var $49=HEAP[$48]; //@line 2175 "xmlparse.c"
        var $50=$parser_addr; //@line 2175 "xmlparse.c"
        var $51=$50+4; //@line 2175 "xmlparse.c"
        var $52=HEAP[$51]; //@line 2175 "xmlparse.c"
        FUNCTION_TABLE[$49]($52, $c, 1); //@line 2175 "xmlparse.c"
        __label__ = 11; break; //@line 2175 "xmlparse.c"
      case 9: // $bb8
        var $53=$parser_addr; //@line 2177 "xmlparse.c"
        var $54=$53+80; //@line 2177 "xmlparse.c"
        var $55=HEAP[$54]; //@line 2177 "xmlparse.c"
        var $56=($55)!=0; //@line 2177 "xmlparse.c"
        if ($56) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2177 "xmlparse.c"
      case 10: // $bb9
        var $57=HEAP[$s_addr]; //@line 2178 "xmlparse.c"
        var $58=$parser_addr; //@line 2178 "xmlparse.c"
        var $59=$enc_addr; //@line 2178 "xmlparse.c"
        var $60=$end_addr; //@line 2178 "xmlparse.c"
        _reportDefault($58, $59, $57, $60); //@line 2178 "xmlparse.c"
        __label__ = 11; break; //@line 2178 "xmlparse.c"
      case 11: // $bb10
        var $61=$startTagLevel_addr; //@line 2182 "xmlparse.c"
        var $62=($61)==0; //@line 2182 "xmlparse.c"
        if ($62) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2182 "xmlparse.c"
      case 12: // $bb11
        $0=3; //@line 2183 "xmlparse.c"
        __label__ = 178; break; //@line 2183 "xmlparse.c"
      case 13: // $bb12
        var $63=$parser_addr; //@line 2184 "xmlparse.c"
        var $64=$63+312; //@line 2184 "xmlparse.c"
        var $65=HEAP[$64]; //@line 2184 "xmlparse.c"
        var $66=$startTagLevel_addr; //@line 2184 "xmlparse.c"
        var $67=($65)!=($66); //@line 2184 "xmlparse.c"
        if ($67) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 2184 "xmlparse.c"
      case 14: // $bb13
        $0=13; //@line 2185 "xmlparse.c"
        __label__ = 178; break; //@line 2185 "xmlparse.c"
      case 15: // $bb14
        var $68=$nextPtr_addr; //@line 2186 "xmlparse.c"
        var $69=$end_addr; //@line 2186 "xmlparse.c"
        HEAP[$68]=$69; //@line 2186 "xmlparse.c"
        $0=0; //@line 2187 "xmlparse.c"
        __label__ = 178; break; //@line 2187 "xmlparse.c"
      case 16: // $bb15
        var $70=$haveMore_addr; //@line 2189 "xmlparse.c"
        var $71=($70)!=0; //@line 2189 "xmlparse.c"
        if ($71) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 2189 "xmlparse.c"
      case 17: // $bb16
        var $72=HEAP[$s_addr]; //@line 2190 "xmlparse.c"
        var $73=$nextPtr_addr; //@line 2190 "xmlparse.c"
        HEAP[$73]=$72; //@line 2190 "xmlparse.c"
        $0=0; //@line 2191 "xmlparse.c"
        __label__ = 178; break; //@line 2191 "xmlparse.c"
      case 18: // $bb17
        var $74=$startTagLevel_addr; //@line 2193 "xmlparse.c"
        var $75=($74) > 0; //@line 2193 "xmlparse.c"
        if ($75) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 2193 "xmlparse.c"
      case 19: // $bb18
        var $76=$parser_addr; //@line 2194 "xmlparse.c"
        var $77=$76+312; //@line 2194 "xmlparse.c"
        var $78=HEAP[$77]; //@line 2194 "xmlparse.c"
        var $79=$startTagLevel_addr; //@line 2194 "xmlparse.c"
        var $80=($78)!=($79); //@line 2194 "xmlparse.c"
        if ($80) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 2194 "xmlparse.c"
      case 20: // $bb19
        $0=13; //@line 2195 "xmlparse.c"
        __label__ = 178; break; //@line 2195 "xmlparse.c"
      case 21: // $bb20
        var $81=HEAP[$s_addr]; //@line 2196 "xmlparse.c"
        var $82=$nextPtr_addr; //@line 2196 "xmlparse.c"
        HEAP[$82]=$81; //@line 2196 "xmlparse.c"
        $0=0; //@line 2197 "xmlparse.c"
        __label__ = 178; break; //@line 2197 "xmlparse.c"
      case 22: // $bb21
        $0=3; //@line 2199 "xmlparse.c"
        __label__ = 178; break; //@line 2199 "xmlparse.c"
      case 23: // $bb22
        var $83=HEAP[$next]; //@line 2201 "xmlparse.c"
        var $84=$eventPP; //@line 2201 "xmlparse.c"
        HEAP[$84]=$83; //@line 2201 "xmlparse.c"
        $0=4; //@line 2202 "xmlparse.c"
        __label__ = 178; break; //@line 2202 "xmlparse.c"
      case 24: // $bb23
        var $85=$haveMore_addr; //@line 2204 "xmlparse.c"
        var $86=($85)!=0; //@line 2204 "xmlparse.c"
        if ($86) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 2204 "xmlparse.c"
      case 25: // $bb24
        var $87=HEAP[$s_addr]; //@line 2205 "xmlparse.c"
        var $88=$nextPtr_addr; //@line 2205 "xmlparse.c"
        HEAP[$88]=$87; //@line 2205 "xmlparse.c"
        $0=0; //@line 2206 "xmlparse.c"
        __label__ = 178; break; //@line 2206 "xmlparse.c"
      case 26: // $bb25
        $0=5; //@line 2208 "xmlparse.c"
        __label__ = 178; break; //@line 2208 "xmlparse.c"
      case 27: // $bb26
        var $89=$haveMore_addr; //@line 2210 "xmlparse.c"
        var $90=($89)!=0; //@line 2210 "xmlparse.c"
        if ($90) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 2210 "xmlparse.c"
      case 28: // $bb27
        var $91=HEAP[$s_addr]; //@line 2211 "xmlparse.c"
        var $92=$nextPtr_addr; //@line 2211 "xmlparse.c"
        HEAP[$92]=$91; //@line 2211 "xmlparse.c"
        $0=0; //@line 2212 "xmlparse.c"
        __label__ = 178; break; //@line 2212 "xmlparse.c"
      case 29: // $bb28
        $0=6; //@line 2214 "xmlparse.c"
        __label__ = 178; break; //@line 2214 "xmlparse.c"
      case 30: // $bb29
        var $93=$enc_addr; //@line 2219 "xmlparse.c"
        var $94=$93+48; //@line 2219 "xmlparse.c"
        var $95=HEAP[$94]; //@line 2219 "xmlparse.c"
        var $96=HEAP[$next]; //@line 2219 "xmlparse.c"
        var $97=$enc_addr; //@line 2219 "xmlparse.c"
        var $98=$97+68; //@line 2219 "xmlparse.c"
        var $99=HEAP[$98]; //@line 2219 "xmlparse.c"
        var $100=0 - ($99); //@line 2219 "xmlparse.c"
        var $101=$96+$100; //@line 2219 "xmlparse.c"
        var $102=HEAP[$s_addr]; //@line 2219 "xmlparse.c"
        var $103=$enc_addr; //@line 2219 "xmlparse.c"
        var $104=$103+68; //@line 2219 "xmlparse.c"
        var $105=HEAP[$104]; //@line 2219 "xmlparse.c"
        var $106=$102+$105; //@line 2219 "xmlparse.c"
        var $107=$enc_addr; //@line 2219 "xmlparse.c"
        var $108=FUNCTION_TABLE[$95]($107, $106, $101); //@line 2219 "xmlparse.c"
        var $109=((($108)) & 255); //@line 2219 "xmlparse.c"
        HEAP[$ch]=$109; //@line 2219 "xmlparse.c"
        var $110=HEAP[$ch]; //@line 2222 "xmlparse.c"
        var $111=($110)!=0; //@line 2222 "xmlparse.c"
        if ($111) { __label__ = 31; break; } else { __label__ = 35; break; } //@line 2222 "xmlparse.c"
      case 31: // $bb30
        var $112=$parser_addr; //@line 2223 "xmlparse.c"
        var $113=$112+60; //@line 2223 "xmlparse.c"
        var $114=HEAP[$113]; //@line 2223 "xmlparse.c"
        var $115=($114)!=0; //@line 2223 "xmlparse.c"
        var $116=$parser_addr; //@line 2224 "xmlparse.c"
        if ($115) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 2223 "xmlparse.c"
      case 32: // $bb31
        var $117=$116+60; //@line 2224 "xmlparse.c"
        var $118=HEAP[$117]; //@line 2224 "xmlparse.c"
        var $119=$parser_addr; //@line 2224 "xmlparse.c"
        var $120=$119+4; //@line 2224 "xmlparse.c"
        var $121=HEAP[$120]; //@line 2224 "xmlparse.c"
        FUNCTION_TABLE[$118]($121, $ch, 1); //@line 2224 "xmlparse.c"
        __label__ = 175; break; //@line 2224 "xmlparse.c"
      case 33: // $bb32
        var $122=$116+80; //@line 2225 "xmlparse.c"
        var $123=HEAP[$122]; //@line 2225 "xmlparse.c"
        var $124=($123)!=0; //@line 2225 "xmlparse.c"
        if ($124) { __label__ = 34; break; } else { __label__ = 175; break; } //@line 2225 "xmlparse.c"
      case 34: // $bb33
        var $125=HEAP[$next]; //@line 2226 "xmlparse.c"
        var $126=HEAP[$s_addr]; //@line 2226 "xmlparse.c"
        var $127=$parser_addr; //@line 2226 "xmlparse.c"
        var $128=$enc_addr; //@line 2226 "xmlparse.c"
        _reportDefault($127, $128, $126, $125); //@line 2226 "xmlparse.c"
        __label__ = 175; break; //@line 2226 "xmlparse.c"
      case 35: // $bb35
        var $129=HEAP[$next]; //@line 2229 "xmlparse.c"
        var $130=$enc_addr; //@line 2229 "xmlparse.c"
        var $131=$130+68; //@line 2229 "xmlparse.c"
        var $132=HEAP[$131]; //@line 2229 "xmlparse.c"
        var $133=0 - ($132); //@line 2229 "xmlparse.c"
        var $134=$129+$133; //@line 2229 "xmlparse.c"
        var $135=HEAP[$s_addr]; //@line 2229 "xmlparse.c"
        var $136=$enc_addr; //@line 2229 "xmlparse.c"
        var $137=$136+68; //@line 2229 "xmlparse.c"
        var $138=HEAP[$137]; //@line 2229 "xmlparse.c"
        var $139=$135+$138; //@line 2229 "xmlparse.c"
        var $140=$dtd; //@line 2229 "xmlparse.c"
        var $141=$140+80; //@line 2229 "xmlparse.c"
        var $142=$enc_addr; //@line 2229 "xmlparse.c"
        var $143=_poolStoreString($141, $142, $139, $134); //@line 2229 "xmlparse.c"
        $name=$143; //@line 2229 "xmlparse.c"
        var $144=$name; //@line 2232 "xmlparse.c"
        var $145=($144)==0; //@line 2232 "xmlparse.c"
        if ($145) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 2232 "xmlparse.c"
      case 36: // $bb36
        $0=1; //@line 2233 "xmlparse.c"
        __label__ = 178; break; //@line 2233 "xmlparse.c"
      case 37: // $bb37
        var $146=$dtd; //@line 2234 "xmlparse.c"
        var $147=$146; //@line 2234 "xmlparse.c"
        var $148=$name; //@line 2234 "xmlparse.c"
        var $149=_lookup($147, $148, 0); //@line 2234 "xmlparse.c"
        var $150=$149; //@line 2234 "xmlparse.c"
        $entity=$150; //@line 2234 "xmlparse.c"
        var $151=$dtd; //@line 2235 "xmlparse.c"
        var $152=$151+80; //@line 2235 "xmlparse.c"
        var $153=$152+16; //@line 2235 "xmlparse.c"
        var $154=HEAP[$153]; //@line 2235 "xmlparse.c"
        var $155=$dtd; //@line 2235 "xmlparse.c"
        var $156=$155+80; //@line 2235 "xmlparse.c"
        var $157=$156+12; //@line 2235 "xmlparse.c"
        HEAP[$157]=$154; //@line 2235 "xmlparse.c"
        var $158=$dtd; //@line 2240 "xmlparse.c"
        var $159=$158+129; //@line 2240 "xmlparse.c"
        var $160=HEAP[$159]; //@line 2240 "xmlparse.c"
        var $161=($160)==0; //@line 2240 "xmlparse.c"
        if ($161) { __label__ = 39; break; } else { __label__ = 38; break; } //@line 2240 "xmlparse.c"
      case 38: // $bb38
        var $162=$dtd; //@line 2240 "xmlparse.c"
        var $163=$162+130; //@line 2240 "xmlparse.c"
        var $164=HEAP[$163]; //@line 2240 "xmlparse.c"
        var $165=($164)!=0; //@line 2240 "xmlparse.c"
        if ($165) { __label__ = 39; break; } else { __label__ = 43; break; } //@line 2240 "xmlparse.c"
      case 39: // $bb39
        var $166=$entity; //@line 2241 "xmlparse.c"
        var $167=($166)==0; //@line 2241 "xmlparse.c"
        if ($167) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 2241 "xmlparse.c"
      case 40: // $bb40
        $0=11; //@line 2242 "xmlparse.c"
        __label__ = 178; break; //@line 2242 "xmlparse.c"
      case 41: // $bb41
        var $168=$entity; //@line 2243 "xmlparse.c"
        var $169=$168+34; //@line 2243 "xmlparse.c"
        var $170=HEAP[$169]; //@line 2243 "xmlparse.c"
        var $171=($170)==0; //@line 2243 "xmlparse.c"
        if ($171) { __label__ = 42; break; } else { __label__ = 48; break; } //@line 2243 "xmlparse.c"
      case 42: // $bb42
        $0=24; //@line 2244 "xmlparse.c"
        __label__ = 178; break; //@line 2244 "xmlparse.c"
      case 43: // $bb44
        var $172=$entity; //@line 2246 "xmlparse.c"
        var $173=($172)==0; //@line 2246 "xmlparse.c"
        if ($173) { __label__ = 44; break; } else { __label__ = 48; break; } //@line 2246 "xmlparse.c"
      case 44: // $bb45
        var $174=$parser_addr; //@line 2247 "xmlparse.c"
        var $175=$174+120; //@line 2247 "xmlparse.c"
        var $176=HEAP[$175]; //@line 2247 "xmlparse.c"
        var $177=($176)!=0; //@line 2247 "xmlparse.c"
        var $178=$parser_addr; //@line 2248 "xmlparse.c"
        if ($177) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 2247 "xmlparse.c"
      case 45: // $bb46
        var $179=$178+120; //@line 2248 "xmlparse.c"
        var $180=HEAP[$179]; //@line 2248 "xmlparse.c"
        var $181=$parser_addr; //@line 2248 "xmlparse.c"
        var $182=$181+4; //@line 2248 "xmlparse.c"
        var $183=HEAP[$182]; //@line 2248 "xmlparse.c"
        var $184=$name; //@line 2248 "xmlparse.c"
        FUNCTION_TABLE[$180]($183, $184, 0); //@line 2248 "xmlparse.c"
        __label__ = 175; break; //@line 2248 "xmlparse.c"
      case 46: // $bb47
        var $185=$178+80; //@line 2249 "xmlparse.c"
        var $186=HEAP[$185]; //@line 2249 "xmlparse.c"
        var $187=($186)!=0; //@line 2249 "xmlparse.c"
        if ($187) { __label__ = 47; break; } else { __label__ = 175; break; } //@line 2249 "xmlparse.c"
      case 47: // $bb48
        var $188=HEAP[$next]; //@line 2250 "xmlparse.c"
        var $189=HEAP[$s_addr]; //@line 2250 "xmlparse.c"
        var $190=$parser_addr; //@line 2250 "xmlparse.c"
        var $191=$enc_addr; //@line 2250 "xmlparse.c"
        _reportDefault($190, $191, $189, $188); //@line 2250 "xmlparse.c"
        __label__ = 175; break; //@line 2250 "xmlparse.c"
      case 48: // $bb50
        var $192=$entity; //@line 2253 "xmlparse.c"
        var $193=$192+32; //@line 2253 "xmlparse.c"
        var $194=HEAP[$193]; //@line 2253 "xmlparse.c"
        var $195=($194)!=0; //@line 2253 "xmlparse.c"
        if ($195) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 2253 "xmlparse.c"
      case 49: // $bb51
        $0=12; //@line 2254 "xmlparse.c"
        __label__ = 178; break; //@line 2254 "xmlparse.c"
      case 50: // $bb52
        var $196=$entity; //@line 2255 "xmlparse.c"
        var $197=$196+28; //@line 2255 "xmlparse.c"
        var $198=HEAP[$197]; //@line 2255 "xmlparse.c"
        var $199=($198)!=0; //@line 2255 "xmlparse.c"
        if ($199) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 2255 "xmlparse.c"
      case 51: // $bb53
        $0=15; //@line 2256 "xmlparse.c"
        __label__ = 178; break; //@line 2256 "xmlparse.c"
      case 52: // $bb54
        var $200=$entity; //@line 2257 "xmlparse.c"
        var $201=$200+4; //@line 2257 "xmlparse.c"
        var $202=HEAP[$201]; //@line 2257 "xmlparse.c"
        var $203=($202)!=0; //@line 2257 "xmlparse.c"
        var $204=$parser_addr; //@line 2259 "xmlparse.c"
        if ($203) { __label__ = 53; break; } else { __label__ = 60; break; } //@line 2257 "xmlparse.c"
      case 53: // $bb55
        var $205=$204+308; //@line 2259 "xmlparse.c"
        var $206=HEAP[$205]; //@line 2259 "xmlparse.c"
        var $207=($206)==0; //@line 2259 "xmlparse.c"
        var $208=$parser_addr; //@line 2260 "xmlparse.c"
        if ($207) { __label__ = 54; break; } else { __label__ = 58; break; } //@line 2259 "xmlparse.c"
      case 54: // $bb56
        var $209=$208+120; //@line 2260 "xmlparse.c"
        var $210=HEAP[$209]; //@line 2260 "xmlparse.c"
        var $211=($210)!=0; //@line 2260 "xmlparse.c"
        var $212=$parser_addr; //@line 2261 "xmlparse.c"
        if ($211) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 2260 "xmlparse.c"
      case 55: // $bb57
        var $213=$212+120; //@line 2261 "xmlparse.c"
        var $214=HEAP[$213]; //@line 2261 "xmlparse.c"
        var $215=$entity; //@line 2261 "xmlparse.c"
        var $216=$215; //@line 2261 "xmlparse.c"
        var $217=HEAP[$216]; //@line 2261 "xmlparse.c"
        var $218=$parser_addr; //@line 2261 "xmlparse.c"
        var $219=$218+4; //@line 2261 "xmlparse.c"
        var $220=HEAP[$219]; //@line 2261 "xmlparse.c"
        FUNCTION_TABLE[$214]($220, $217, 0); //@line 2261 "xmlparse.c"
        __label__ = 175; break; //@line 2261 "xmlparse.c"
      case 56: // $bb58
        var $221=$212+80; //@line 2262 "xmlparse.c"
        var $222=HEAP[$221]; //@line 2262 "xmlparse.c"
        var $223=($222)!=0; //@line 2262 "xmlparse.c"
        if ($223) { __label__ = 57; break; } else { __label__ = 175; break; } //@line 2262 "xmlparse.c"
      case 57: // $bb59
        var $224=HEAP[$next]; //@line 2263 "xmlparse.c"
        var $225=HEAP[$s_addr]; //@line 2263 "xmlparse.c"
        var $226=$parser_addr; //@line 2263 "xmlparse.c"
        var $227=$enc_addr; //@line 2263 "xmlparse.c"
        _reportDefault($226, $227, $225, $224); //@line 2263 "xmlparse.c"
        __label__ = 175; break; //@line 2263 "xmlparse.c"
      case 58: // $bb61
        var $228=$entity; //@line 2266 "xmlparse.c"
        var $229=_processInternalEntity($208, $228, 0); //@line 2266 "xmlparse.c"
        $result=$229; //@line 2266 "xmlparse.c"
        var $230=$result; //@line 2267 "xmlparse.c"
        var $231=($230)!=0; //@line 2267 "xmlparse.c"
        if ($231) { __label__ = 59; break; } else { __label__ = 175; break; } //@line 2267 "xmlparse.c"
      case 59: // $bb62
        var $232=$result; //@line 2268 "xmlparse.c"
        $0=$232; //@line 2268 "xmlparse.c"
        __label__ = 178; break; //@line 2268 "xmlparse.c"
      case 60: // $bb64
        var $233=$204+112; //@line 2270 "xmlparse.c"
        var $234=HEAP[$233]; //@line 2270 "xmlparse.c"
        var $235=($234)!=0; //@line 2270 "xmlparse.c"
        if ($235) { __label__ = 61; break; } else { __label__ = 66; break; } //@line 2270 "xmlparse.c"
      case 61: // $bb65
        var $236=$entity; //@line 2272 "xmlparse.c"
        var $237=$236+32; //@line 2272 "xmlparse.c"
        HEAP[$237]=1; //@line 2272 "xmlparse.c"
        var $238=$parser_addr; //@line 2273 "xmlparse.c"
        var $239=_getContext($238); //@line 2273 "xmlparse.c"
        $context=$239; //@line 2273 "xmlparse.c"
        var $240=$entity; //@line 2274 "xmlparse.c"
        var $241=$240+32; //@line 2274 "xmlparse.c"
        HEAP[$241]=0; //@line 2274 "xmlparse.c"
        var $242=$context; //@line 2275 "xmlparse.c"
        var $243=($242)==0; //@line 2275 "xmlparse.c"
        if ($243) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 2275 "xmlparse.c"
      case 62: // $bb66
        $0=1; //@line 2276 "xmlparse.c"
        __label__ = 178; break; //@line 2276 "xmlparse.c"
      case 63: // $bb67
        var $244=$parser_addr; //@line 2277 "xmlparse.c"
        var $245=$244+112; //@line 2277 "xmlparse.c"
        var $246=HEAP[$245]; //@line 2277 "xmlparse.c"
        var $247=$entity; //@line 2277 "xmlparse.c"
        var $248=$247+24; //@line 2277 "xmlparse.c"
        var $249=HEAP[$248]; //@line 2277 "xmlparse.c"
        var $250=$entity; //@line 2277 "xmlparse.c"
        var $251=$250+16; //@line 2277 "xmlparse.c"
        var $252=HEAP[$251]; //@line 2277 "xmlparse.c"
        var $253=$entity; //@line 2277 "xmlparse.c"
        var $254=$253+20; //@line 2277 "xmlparse.c"
        var $255=HEAP[$254]; //@line 2277 "xmlparse.c"
        var $256=$parser_addr; //@line 2277 "xmlparse.c"
        var $257=$256+116; //@line 2277 "xmlparse.c"
        var $258=HEAP[$257]; //@line 2277 "xmlparse.c"
        var $259=$context; //@line 2277 "xmlparse.c"
        var $260=FUNCTION_TABLE[$246]($258, $259, $255, $252, $249); //@line 2277 "xmlparse.c"
        var $261=($260)==0; //@line 2277 "xmlparse.c"
        if ($261) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 2277 "xmlparse.c"
      case 64: // $bb68
        $0=21; //@line 2282 "xmlparse.c"
        __label__ = 178; break; //@line 2282 "xmlparse.c"
      case 65: // $bb69
        var $262=$parser_addr; //@line 2283 "xmlparse.c"
        var $263=$262+416; //@line 2283 "xmlparse.c"
        var $264=$263+16; //@line 2283 "xmlparse.c"
        var $265=HEAP[$264]; //@line 2283 "xmlparse.c"
        var $266=$parser_addr; //@line 2283 "xmlparse.c"
        var $267=$266+416; //@line 2283 "xmlparse.c"
        var $268=$267+12; //@line 2283 "xmlparse.c"
        HEAP[$268]=$265; //@line 2283 "xmlparse.c"
        __label__ = 175; break; //@line 2283 "xmlparse.c"
      case 66: // $bb70
        var $269=$parser_addr; //@line 2285 "xmlparse.c"
        var $270=$269+80; //@line 2285 "xmlparse.c"
        var $271=HEAP[$270]; //@line 2285 "xmlparse.c"
        var $272=($271)!=0; //@line 2285 "xmlparse.c"
        if ($272) { __label__ = 67; break; } else { __label__ = 175; break; } //@line 2285 "xmlparse.c"
      case 67: // $bb71
        var $273=HEAP[$next]; //@line 2286 "xmlparse.c"
        var $274=HEAP[$s_addr]; //@line 2286 "xmlparse.c"
        var $275=$parser_addr; //@line 2286 "xmlparse.c"
        var $276=$enc_addr; //@line 2286 "xmlparse.c"
        _reportDefault($275, $276, $274, $273); //@line 2286 "xmlparse.c"
        __label__ = 175; break; //@line 2286 "xmlparse.c"
      case 68: // $bb73
        var $277=$parser_addr; //@line 2296 "xmlparse.c"
        var $278=$277+368; //@line 2296 "xmlparse.c"
        var $279=HEAP[$278]; //@line 2296 "xmlparse.c"
        var $280=($279)!=0; //@line 2296 "xmlparse.c"
        var $281=$parser_addr; //@line 2297 "xmlparse.c"
        if ($280) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 2296 "xmlparse.c"
      case 69: // $bb75
        var $282=$281+368; //@line 2297 "xmlparse.c"
        var $283=HEAP[$282]; //@line 2297 "xmlparse.c"
        $tag=$283; //@line 2297 "xmlparse.c"
        var $284=$parser_addr; //@line 2298 "xmlparse.c"
        var $285=$284+368; //@line 2298 "xmlparse.c"
        var $286=HEAP[$285]; //@line 2298 "xmlparse.c"
        var $287=$286; //@line 2298 "xmlparse.c"
        var $288=HEAP[$287]; //@line 2298 "xmlparse.c"
        var $289=$parser_addr; //@line 2298 "xmlparse.c"
        var $290=$289+368; //@line 2298 "xmlparse.c"
        HEAP[$290]=$288; //@line 2298 "xmlparse.c"
        __label__ = 75; break; //@line 2298 "xmlparse.c"
      case 70: // $bb76
        var $291=$281+12; //@line 2301 "xmlparse.c"
        var $292=$291; //@line 2301 "xmlparse.c"
        var $293=HEAP[$292]; //@line 2301 "xmlparse.c"
        var $294=FUNCTION_TABLE[$293](48); //@line 2301 "xmlparse.c"
        var $295=$294; //@line 2301 "xmlparse.c"
        $tag=$295; //@line 2301 "xmlparse.c"
        var $296=$tag; //@line 2302 "xmlparse.c"
        var $297=($296)==0; //@line 2302 "xmlparse.c"
        if ($297) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 2302 "xmlparse.c"
      case 71: // $bb77
        $0=1; //@line 2303 "xmlparse.c"
        __label__ = 178; break; //@line 2303 "xmlparse.c"
      case 72: // $bb78
        var $298=$parser_addr; //@line 2304 "xmlparse.c"
        var $299=$298+12; //@line 2304 "xmlparse.c"
        var $300=$299; //@line 2304 "xmlparse.c"
        var $301=HEAP[$300]; //@line 2304 "xmlparse.c"
        var $302=FUNCTION_TABLE[$301](32); //@line 2304 "xmlparse.c"
        var $303=$tag; //@line 2304 "xmlparse.c"
        var $304=$303+36; //@line 2304 "xmlparse.c"
        HEAP[$304]=$302; //@line 2304 "xmlparse.c"
        var $305=$tag; //@line 2305 "xmlparse.c"
        var $306=$305+36; //@line 2305 "xmlparse.c"
        var $307=HEAP[$306]; //@line 2305 "xmlparse.c"
        var $308=($307)==0; //@line 2305 "xmlparse.c"
        if ($308) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 2305 "xmlparse.c"
      case 73: // $bb79
        var $309=$parser_addr; //@line 2306 "xmlparse.c"
        var $310=$309+12; //@line 2306 "xmlparse.c"
        var $311=$310+8; //@line 2306 "xmlparse.c"
        var $312=HEAP[$311]; //@line 2306 "xmlparse.c"
        var $313=$tag; //@line 2306 "xmlparse.c"
        var $314=$313; //@line 2306 "xmlparse.c"
        FUNCTION_TABLE[$312]($314); //@line 2306 "xmlparse.c"
        $0=1; //@line 2307 "xmlparse.c"
        __label__ = 178; break; //@line 2307 "xmlparse.c"
      case 74: // $bb80
        var $315=$tag; //@line 2309 "xmlparse.c"
        var $316=$315+36; //@line 2309 "xmlparse.c"
        var $317=HEAP[$316]; //@line 2309 "xmlparse.c"
        var $318=$317+32; //@line 2309 "xmlparse.c"
        var $319=$tag; //@line 2309 "xmlparse.c"
        var $320=$319+40; //@line 2309 "xmlparse.c"
        HEAP[$320]=$318; //@line 2309 "xmlparse.c"
        __label__ = 75; break; //@line 2309 "xmlparse.c"
      case 75: // $bb81
        var $321=$tag; //@line 2311 "xmlparse.c"
        var $322=$321+44; //@line 2311 "xmlparse.c"
        HEAP[$322]=0; //@line 2311 "xmlparse.c"
        var $323=$parser_addr; //@line 2312 "xmlparse.c"
        var $324=$323+364; //@line 2312 "xmlparse.c"
        var $325=HEAP[$324]; //@line 2312 "xmlparse.c"
        var $326=$tag; //@line 2312 "xmlparse.c"
        var $327=$326; //@line 2312 "xmlparse.c"
        HEAP[$327]=$325; //@line 2312 "xmlparse.c"
        var $328=$parser_addr; //@line 2313 "xmlparse.c"
        var $329=$328+364; //@line 2313 "xmlparse.c"
        var $330=$tag; //@line 2313 "xmlparse.c"
        HEAP[$329]=$330; //@line 2313 "xmlparse.c"
        var $331=$tag; //@line 2314 "xmlparse.c"
        var $332=$331+12; //@line 2314 "xmlparse.c"
        var $333=$332+4; //@line 2314 "xmlparse.c"
        HEAP[$333]=0; //@line 2314 "xmlparse.c"
        var $334=$tag; //@line 2315 "xmlparse.c"
        var $335=$334+12; //@line 2315 "xmlparse.c"
        var $336=$335+8; //@line 2315 "xmlparse.c"
        HEAP[$336]=0; //@line 2315 "xmlparse.c"
        var $337=HEAP[$s_addr]; //@line 2316 "xmlparse.c"
        var $338=$enc_addr; //@line 2316 "xmlparse.c"
        var $339=$338+68; //@line 2316 "xmlparse.c"
        var $340=HEAP[$339]; //@line 2316 "xmlparse.c"
        var $341=$337+$340; //@line 2316 "xmlparse.c"
        var $342=$tag; //@line 2316 "xmlparse.c"
        var $343=$342+4; //@line 2316 "xmlparse.c"
        HEAP[$343]=$341; //@line 2316 "xmlparse.c"
        var $344=$enc_addr; //@line 2317 "xmlparse.c"
        var $345=$344+32; //@line 2317 "xmlparse.c"
        var $346=HEAP[$345]; //@line 2317 "xmlparse.c"
        var $347=$tag; //@line 2317 "xmlparse.c"
        var $348=$347+4; //@line 2317 "xmlparse.c"
        var $349=HEAP[$348]; //@line 2317 "xmlparse.c"
        var $350=$enc_addr; //@line 2317 "xmlparse.c"
        var $351=FUNCTION_TABLE[$346]($350, $349); //@line 2317 "xmlparse.c"
        var $352=$tag; //@line 2317 "xmlparse.c"
        var $353=$352+8; //@line 2317 "xmlparse.c"
        HEAP[$353]=$351; //@line 2317 "xmlparse.c"
        var $354=$parser_addr; //@line 2318 "xmlparse.c"
        var $355=$354+312; //@line 2318 "xmlparse.c"
        var $356=HEAP[$355]; //@line 2318 "xmlparse.c"
        var $357=($356) + 1; //@line 2318 "xmlparse.c"
        var $358=$parser_addr; //@line 2318 "xmlparse.c"
        var $359=$358+312; //@line 2318 "xmlparse.c"
        HEAP[$359]=$357; //@line 2318 "xmlparse.c"
        var $360=$tag; //@line 2320 "xmlparse.c"
        var $361=$360+4; //@line 2320 "xmlparse.c"
        var $362=HEAP[$361]; //@line 2320 "xmlparse.c"
        var $363=$tag; //@line 2320 "xmlparse.c"
        var $364=$363+8; //@line 2320 "xmlparse.c"
        var $365=HEAP[$364]; //@line 2320 "xmlparse.c"
        var $366=$362+$365; //@line 2320 "xmlparse.c"
        $rawNameEnd=$366; //@line 2320 "xmlparse.c"
        var $367=$tag; //@line 2321 "xmlparse.c"
        var $368=$367+4; //@line 2321 "xmlparse.c"
        var $369=HEAP[$368]; //@line 2321 "xmlparse.c"
        HEAP[$fromPtr]=$369; //@line 2321 "xmlparse.c"
        var $370=$tag; //@line 2322 "xmlparse.c"
        var $371=$370+36; //@line 2322 "xmlparse.c"
        var $372=HEAP[$371]; //@line 2322 "xmlparse.c"
        HEAP[$toPtr]=$372; //@line 2322 "xmlparse.c"
        __label__ = 76; break; //@line 2322 "xmlparse.c"
      case 76: // $bb82
        var $373=$enc_addr; //@line 2326 "xmlparse.c"
        var $374=$373+60; //@line 2326 "xmlparse.c"
        var $375=HEAP[$374]; //@line 2326 "xmlparse.c"
        var $376=$tag; //@line 2326 "xmlparse.c"
        var $377=$376+40; //@line 2326 "xmlparse.c"
        var $378=HEAP[$377]; //@line 2326 "xmlparse.c"
        var $379=$378+-1; //@line 2326 "xmlparse.c"
        var $380=$enc_addr; //@line 2326 "xmlparse.c"
        var $381=$rawNameEnd; //@line 2326 "xmlparse.c"
        FUNCTION_TABLE[$375]($380, $fromPtr, $381, $toPtr, $379); //@line 2326 "xmlparse.c"
        var $382=HEAP[$toPtr]; //@line 2329 "xmlparse.c"
        var $383=($382); //@line 2329 "xmlparse.c"
        var $384=$tag; //@line 2329 "xmlparse.c"
        var $385=$384+36; //@line 2329 "xmlparse.c"
        var $386=HEAP[$385]; //@line 2329 "xmlparse.c"
        var $387=($386); //@line 2329 "xmlparse.c"
        var $388=($383) - ($387); //@line 2329 "xmlparse.c"
        $convLen=$388; //@line 2329 "xmlparse.c"
        var $389=HEAP[$fromPtr]; //@line 2330 "xmlparse.c"
        var $390=$rawNameEnd; //@line 2330 "xmlparse.c"
        var $391=($389)==($390); //@line 2330 "xmlparse.c"
        var $392=$tag; //@line 2331 "xmlparse.c"
        if ($391) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 2330 "xmlparse.c"
      case 77: // $bb83
        var $393=$392+12; //@line 2331 "xmlparse.c"
        var $394=$393+12; //@line 2331 "xmlparse.c"
        var $395=$convLen; //@line 2331 "xmlparse.c"
        HEAP[$394]=$395; //@line 2331 "xmlparse.c"
        var $396=$tag; //@line 2345 "xmlparse.c"
        var $397=$396+36; //@line 2345 "xmlparse.c"
        var $398=HEAP[$397]; //@line 2345 "xmlparse.c"
        var $399=$tag; //@line 2345 "xmlparse.c"
        var $400=$399+12; //@line 2345 "xmlparse.c"
        var $401=$400; //@line 2345 "xmlparse.c"
        HEAP[$401]=$398; //@line 2345 "xmlparse.c"
        var $402=HEAP[$toPtr]; //@line 2346 "xmlparse.c"
        HEAP[$402]=0; //@line 2346 "xmlparse.c"
        var $403=$tag; //@line 2347 "xmlparse.c"
        var $404=$403+44; //@line 2347 "xmlparse.c"
        var $405=$tag; //@line 2347 "xmlparse.c"
        var $406=$405+12; //@line 2347 "xmlparse.c"
        var $407=HEAP[$s_addr]; //@line 2347 "xmlparse.c"
        var $408=$parser_addr; //@line 2347 "xmlparse.c"
        var $409=$enc_addr; //@line 2347 "xmlparse.c"
        var $410=_storeAtts($408, $409, $407, $406, $404); //@line 2347 "xmlparse.c"
        $result74=$410; //@line 2347 "xmlparse.c"
        var $411=$result74; //@line 2348 "xmlparse.c"
        var $412=($411)!=0; //@line 2348 "xmlparse.c"
        if ($412) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 2348 "xmlparse.c"
      case 78: // $bb84
        var $413=$392+40; //@line 2334 "xmlparse.c"
        var $414=HEAP[$413]; //@line 2334 "xmlparse.c"
        var $415=($414); //@line 2334 "xmlparse.c"
        var $416=$tag; //@line 2334 "xmlparse.c"
        var $417=$416+36; //@line 2334 "xmlparse.c"
        var $418=HEAP[$417]; //@line 2334 "xmlparse.c"
        var $419=($418); //@line 2334 "xmlparse.c"
        var $420=($415) - ($419); //@line 2334 "xmlparse.c"
        var $421=($420) << 1; //@line 2334 "xmlparse.c"
        $bufSize=$421; //@line 2334 "xmlparse.c"
        var $422=$parser_addr; //@line 2336 "xmlparse.c"
        var $423=$422+12; //@line 2336 "xmlparse.c"
        var $424=$423+4; //@line 2336 "xmlparse.c"
        var $425=HEAP[$424]; //@line 2336 "xmlparse.c"
        var $426=$bufSize; //@line 2336 "xmlparse.c"
        var $427=$tag; //@line 2336 "xmlparse.c"
        var $428=$427+36; //@line 2336 "xmlparse.c"
        var $429=HEAP[$428]; //@line 2336 "xmlparse.c"
        var $430=FUNCTION_TABLE[$425]($429, $426); //@line 2336 "xmlparse.c"
        $temp=$430; //@line 2336 "xmlparse.c"
        var $431=$temp; //@line 2337 "xmlparse.c"
        var $432=($431)==0; //@line 2337 "xmlparse.c"
        if ($432) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 2337 "xmlparse.c"
      case 79: // $bb85
        $0=1; //@line 2338 "xmlparse.c"
        __label__ = 178; break; //@line 2338 "xmlparse.c"
      case 80: // $bb86
        var $433=$tag; //@line 2339 "xmlparse.c"
        var $434=$433+36; //@line 2339 "xmlparse.c"
        var $435=$temp; //@line 2339 "xmlparse.c"
        HEAP[$434]=$435; //@line 2339 "xmlparse.c"
        var $436=$temp; //@line 2340 "xmlparse.c"
        var $437=$bufSize; //@line 2340 "xmlparse.c"
        var $438=$436+$437; //@line 2340 "xmlparse.c"
        var $439=$tag; //@line 2340 "xmlparse.c"
        var $440=$439+40; //@line 2340 "xmlparse.c"
        HEAP[$440]=$438; //@line 2340 "xmlparse.c"
        var $441=$temp; //@line 2341 "xmlparse.c"
        var $442=$convLen; //@line 2341 "xmlparse.c"
        var $443=$441+$442; //@line 2341 "xmlparse.c"
        HEAP[$toPtr]=$443; //@line 2341 "xmlparse.c"
        __label__ = 76; break; //@line 2341 "xmlparse.c"
      case 81: // $bb87
        var $444=$result74; //@line 2349 "xmlparse.c"
        $0=$444; //@line 2349 "xmlparse.c"
        __label__ = 178; break; //@line 2349 "xmlparse.c"
      case 82: // $bb88
        var $445=$parser_addr; //@line 2350 "xmlparse.c"
        var $446=$445+52; //@line 2350 "xmlparse.c"
        var $447=HEAP[$446]; //@line 2350 "xmlparse.c"
        var $448=($447)!=0; //@line 2350 "xmlparse.c"
        var $449=$parser_addr; //@line 2351 "xmlparse.c"
        if ($448) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 2350 "xmlparse.c"
      case 83: // $bb89
        var $450=$449+52; //@line 2351 "xmlparse.c"
        var $451=HEAP[$450]; //@line 2351 "xmlparse.c"
        var $452=$parser_addr; //@line 2351 "xmlparse.c"
        var $453=$452+392; //@line 2351 "xmlparse.c"
        var $454=HEAP[$453]; //@line 2351 "xmlparse.c"
        var $455=$454; //@line 2351 "xmlparse.c"
        var $456=$tag; //@line 2351 "xmlparse.c"
        var $457=$456+12; //@line 2351 "xmlparse.c"
        var $458=$457; //@line 2351 "xmlparse.c"
        var $459=HEAP[$458]; //@line 2351 "xmlparse.c"
        var $460=$parser_addr; //@line 2351 "xmlparse.c"
        var $461=$460+4; //@line 2351 "xmlparse.c"
        var $462=HEAP[$461]; //@line 2351 "xmlparse.c"
        FUNCTION_TABLE[$451]($462, $459, $455); //@line 2351 "xmlparse.c"
        __label__ = 86; break; //@line 2351 "xmlparse.c"
      case 84: // $bb90
        var $463=$449+80; //@line 2353 "xmlparse.c"
        var $464=HEAP[$463]; //@line 2353 "xmlparse.c"
        var $465=($464)!=0; //@line 2353 "xmlparse.c"
        if ($465) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 2353 "xmlparse.c"
      case 85: // $bb91
        var $466=HEAP[$next]; //@line 2354 "xmlparse.c"
        var $467=HEAP[$s_addr]; //@line 2354 "xmlparse.c"
        var $468=$parser_addr; //@line 2354 "xmlparse.c"
        var $469=$enc_addr; //@line 2354 "xmlparse.c"
        _reportDefault($468, $469, $467, $466); //@line 2354 "xmlparse.c"
        __label__ = 86; break; //@line 2354 "xmlparse.c"
      case 86: // $bb92
        var $470=$parser_addr; //@line 2355 "xmlparse.c"
        var $471=$470+416; //@line 2355 "xmlparse.c"
        _poolClear($471); //@line 2355 "xmlparse.c"
        __label__ = 175; break; //@line 2355 "xmlparse.c"
      case 87: // $bb93
        var $472=HEAP[$s_addr]; //@line 2362 "xmlparse.c"
        var $473=$enc_addr; //@line 2362 "xmlparse.c"
        var $474=$473+68; //@line 2362 "xmlparse.c"
        var $475=HEAP[$474]; //@line 2362 "xmlparse.c"
        var $476=$472+$475; //@line 2362 "xmlparse.c"
        $rawName=$476; //@line 2362 "xmlparse.c"
        HEAP[$bindings]=0; //@line 2364 "xmlparse.c"
        $noElmHandlers=1; //@line 2365 "xmlparse.c"
        var $477=$enc_addr; //@line 2367 "xmlparse.c"
        var $478=$477+32; //@line 2367 "xmlparse.c"
        var $479=HEAP[$478]; //@line 2367 "xmlparse.c"
        var $480=$enc_addr; //@line 2367 "xmlparse.c"
        var $481=$rawName; //@line 2367 "xmlparse.c"
        var $482=FUNCTION_TABLE[$479]($480, $481); //@line 2367 "xmlparse.c"
        var $483=$rawName; //@line 2367 "xmlparse.c"
        var $484=$483+$482; //@line 2367 "xmlparse.c"
        var $485=$parser_addr; //@line 2367 "xmlparse.c"
        var $486=$485+416; //@line 2367 "xmlparse.c"
        var $487=$enc_addr; //@line 2367 "xmlparse.c"
        var $488=$rawName; //@line 2367 "xmlparse.c"
        var $489=_poolStoreString($486, $487, $488, $484); //@line 2367 "xmlparse.c"
        HEAP[$22]=$489; //@line 2367 "xmlparse.c"
        var $490=($489)==0; //@line 2369 "xmlparse.c"
        if ($490) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 2369 "xmlparse.c"
      case 88: // $bb96
        $0=1; //@line 2370 "xmlparse.c"
        __label__ = 178; break; //@line 2370 "xmlparse.c"
      case 89: // $bb97
        var $491=$parser_addr; //@line 2371 "xmlparse.c"
        var $492=$491+416; //@line 2371 "xmlparse.c"
        var $493=$492+12; //@line 2371 "xmlparse.c"
        var $494=HEAP[$493]; //@line 2371 "xmlparse.c"
        var $495=$parser_addr; //@line 2371 "xmlparse.c"
        var $496=$495+416; //@line 2371 "xmlparse.c"
        var $497=$496+16; //@line 2371 "xmlparse.c"
        HEAP[$497]=$494; //@line 2371 "xmlparse.c"
        var $498=HEAP[$s_addr]; //@line 2372 "xmlparse.c"
        var $499=$parser_addr; //@line 2372 "xmlparse.c"
        var $500=$enc_addr; //@line 2372 "xmlparse.c"
        var $501=_storeAtts($499, $500, $498, $name95, $bindings); //@line 2372 "xmlparse.c"
        $result94=$501; //@line 2372 "xmlparse.c"
        var $502=$result94; //@line 2373 "xmlparse.c"
        var $503=($502)!=0; //@line 2373 "xmlparse.c"
        if ($503) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 2373 "xmlparse.c"
      case 90: // $bb98
        var $504=$result94; //@line 2374 "xmlparse.c"
        $0=$504; //@line 2374 "xmlparse.c"
        __label__ = 178; break; //@line 2374 "xmlparse.c"
      case 91: // $bb99
        var $505=$parser_addr; //@line 2375 "xmlparse.c"
        var $506=$505+416; //@line 2375 "xmlparse.c"
        var $507=$506+12; //@line 2375 "xmlparse.c"
        var $508=HEAP[$507]; //@line 2375 "xmlparse.c"
        var $509=$parser_addr; //@line 2375 "xmlparse.c"
        var $510=$509+416; //@line 2375 "xmlparse.c"
        var $511=$510+16; //@line 2375 "xmlparse.c"
        HEAP[$511]=$508; //@line 2375 "xmlparse.c"
        var $512=$parser_addr; //@line 2376 "xmlparse.c"
        var $513=$512+52; //@line 2376 "xmlparse.c"
        var $514=HEAP[$513]; //@line 2376 "xmlparse.c"
        var $515=($514)!=0; //@line 2376 "xmlparse.c"
        if ($515) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 2376 "xmlparse.c"
      case 92: // $bb100
        var $516=$parser_addr; //@line 2377 "xmlparse.c"
        var $517=$516+52; //@line 2377 "xmlparse.c"
        var $518=HEAP[$517]; //@line 2377 "xmlparse.c"
        var $519=$parser_addr; //@line 2377 "xmlparse.c"
        var $520=$519+392; //@line 2377 "xmlparse.c"
        var $521=HEAP[$520]; //@line 2377 "xmlparse.c"
        var $522=$521; //@line 2377 "xmlparse.c"
        var $523=HEAP[$23]; //@line 2377 "xmlparse.c"
        var $524=$parser_addr; //@line 2377 "xmlparse.c"
        var $525=$524+4; //@line 2377 "xmlparse.c"
        var $526=HEAP[$525]; //@line 2377 "xmlparse.c"
        FUNCTION_TABLE[$518]($526, $523, $522); //@line 2377 "xmlparse.c"
        $noElmHandlers=0; //@line 2378 "xmlparse.c"
        __label__ = 93; break; //@line 2378 "xmlparse.c"
      case 93: // $bb101
        var $527=$parser_addr; //@line 2380 "xmlparse.c"
        var $528=$527+56; //@line 2380 "xmlparse.c"
        var $529=HEAP[$528]; //@line 2380 "xmlparse.c"
        var $530=($529)!=0; //@line 2380 "xmlparse.c"
        if ($530) { __label__ = 94; break; } else { __label__ = 97; break; } //@line 2380 "xmlparse.c"
      case 94: // $bb102
        var $531=$parser_addr; //@line 2381 "xmlparse.c"
        var $532=$531+52; //@line 2381 "xmlparse.c"
        var $533=HEAP[$532]; //@line 2381 "xmlparse.c"
        var $534=($533)!=0; //@line 2381 "xmlparse.c"
        if ($534) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 2381 "xmlparse.c"
      case 95: // $bb103
        var $535=$eventEndPP; //@line 2382 "xmlparse.c"
        var $536=HEAP[$535]; //@line 2382 "xmlparse.c"
        var $537=$eventPP; //@line 2382 "xmlparse.c"
        HEAP[$537]=$536; //@line 2382 "xmlparse.c"
        __label__ = 96; break; //@line 2382 "xmlparse.c"
      case 96: // $bb105_thread
        var $538=$parser_addr; //@line 2383 "xmlparse.c"
        var $539=$538+56; //@line 2383 "xmlparse.c"
        var $540=HEAP[$539]; //@line 2383 "xmlparse.c"
        var $541=HEAP[$24]; //@line 2383 "xmlparse.c"
        var $542=$parser_addr; //@line 2383 "xmlparse.c"
        var $543=$542+4; //@line 2383 "xmlparse.c"
        var $544=HEAP[$543]; //@line 2383 "xmlparse.c"
        FUNCTION_TABLE[$540]($544, $541); //@line 2383 "xmlparse.c"
        $noElmHandlers=0; //@line 2384 "xmlparse.c"
        __label__ = 100; break;
      case 97: // $bb105
        var $_pr=$noElmHandlers;
        var $545=($_pr)!=0; //@line 2386 "xmlparse.c"
        if ($545) { __label__ = 98; break; } else { __label__ = 100; break; } //@line 2386 "xmlparse.c"
      case 98: // $bb106
        var $546=$parser_addr; //@line 2386 "xmlparse.c"
        var $547=$546+80; //@line 2386 "xmlparse.c"
        var $548=HEAP[$547]; //@line 2386 "xmlparse.c"
        var $549=($548)!=0; //@line 2386 "xmlparse.c"
        if ($549) { __label__ = 99; break; } else { __label__ = 100; break; } //@line 2386 "xmlparse.c"
      case 99: // $bb107
        var $550=HEAP[$next]; //@line 2387 "xmlparse.c"
        var $551=HEAP[$s_addr]; //@line 2387 "xmlparse.c"
        var $552=$parser_addr; //@line 2387 "xmlparse.c"
        var $553=$enc_addr; //@line 2387 "xmlparse.c"
        _reportDefault($552, $553, $551, $550); //@line 2387 "xmlparse.c"
        __label__ = 100; break; //@line 2387 "xmlparse.c"
      case 100: // $bb108
        var $554=$parser_addr; //@line 2388 "xmlparse.c"
        var $555=$554+416; //@line 2388 "xmlparse.c"
        _poolClear($555); //@line 2388 "xmlparse.c"
        var $556=HEAP[$bindings]; //@line 2389 "xmlparse.c"
        var $557=($556)!=0; //@line 2389 "xmlparse.c"
        if ($557) { __label__ = 101; break; } else { __label__ = 104; break; } //@line 2389 "xmlparse.c"
      case 101: // $bb109
        var $558=HEAP[$bindings]; //@line 2390 "xmlparse.c"
        $b=$558; //@line 2390 "xmlparse.c"
        var $559=$parser_addr; //@line 2391 "xmlparse.c"
        var $560=$559+104; //@line 2391 "xmlparse.c"
        var $561=HEAP[$560]; //@line 2391 "xmlparse.c"
        var $562=($561)!=0; //@line 2391 "xmlparse.c"
        if ($562) { __label__ = 102; break; } else { __label__ = 103; break; } //@line 2391 "xmlparse.c"
      case 102: // $bb110
        var $563=$parser_addr; //@line 2392 "xmlparse.c"
        var $564=$563+104; //@line 2392 "xmlparse.c"
        var $565=HEAP[$564]; //@line 2392 "xmlparse.c"
        var $566=$b; //@line 2392 "xmlparse.c"
        var $567=$566; //@line 2392 "xmlparse.c"
        var $568=HEAP[$567]; //@line 2392 "xmlparse.c"
        var $569=$568; //@line 2392 "xmlparse.c"
        var $570=HEAP[$569]; //@line 2392 "xmlparse.c"
        var $571=$parser_addr; //@line 2392 "xmlparse.c"
        var $572=$571+4; //@line 2392 "xmlparse.c"
        var $573=HEAP[$572]; //@line 2392 "xmlparse.c"
        FUNCTION_TABLE[$565]($573, $570); //@line 2392 "xmlparse.c"
        __label__ = 103; break; //@line 2392 "xmlparse.c"
      case 103: // $bb111
        var $574=HEAP[$bindings]; //@line 2393 "xmlparse.c"
        var $575=$574+4; //@line 2393 "xmlparse.c"
        var $576=HEAP[$575]; //@line 2393 "xmlparse.c"
        HEAP[$bindings]=$576; //@line 2393 "xmlparse.c"
        var $577=$parser_addr; //@line 2394 "xmlparse.c"
        var $578=$577+376; //@line 2394 "xmlparse.c"
        var $579=HEAP[$578]; //@line 2394 "xmlparse.c"
        var $580=$b; //@line 2394 "xmlparse.c"
        var $581=$580+4; //@line 2394 "xmlparse.c"
        HEAP[$581]=$579; //@line 2394 "xmlparse.c"
        var $582=$parser_addr; //@line 2395 "xmlparse.c"
        var $583=$582+376; //@line 2395 "xmlparse.c"
        var $584=$b; //@line 2395 "xmlparse.c"
        HEAP[$583]=$584; //@line 2395 "xmlparse.c"
        var $585=$b; //@line 2396 "xmlparse.c"
        var $586=$585; //@line 2396 "xmlparse.c"
        var $587=HEAP[$586]; //@line 2396 "xmlparse.c"
        var $588=$b; //@line 2396 "xmlparse.c"
        var $589=$588+8; //@line 2396 "xmlparse.c"
        var $590=HEAP[$589]; //@line 2396 "xmlparse.c"
        var $591=$587+4; //@line 2396 "xmlparse.c"
        HEAP[$591]=$590; //@line 2396 "xmlparse.c"
        var $592=HEAP[$bindings]; //@line 2389 "xmlparse.c"
        var $593=($592)!=0; //@line 2389 "xmlparse.c"
        if ($593) { __label__ = 101; break; } else { __label__ = 104; break; } //@line 2389 "xmlparse.c"
      case 104: // $bb113
        var $594=$parser_addr; //@line 2399 "xmlparse.c"
        var $595=$594+312; //@line 2399 "xmlparse.c"
        var $596=HEAP[$595]; //@line 2399 "xmlparse.c"
        var $597=($596)==0; //@line 2399 "xmlparse.c"
        if ($597) { __label__ = 105; break; } else { __label__ = 175; break; } //@line 2399 "xmlparse.c"
      case 105: // $bb114
        var $598=HEAP[$next]; //@line 2400 "xmlparse.c"
        var $599=$parser_addr; //@line 2400 "xmlparse.c"
        var $600=$end_addr; //@line 2400 "xmlparse.c"
        var $601=$nextPtr_addr; //@line 2400 "xmlparse.c"
        var $602=_epilogProcessor($599, $598, $600, $601); //@line 2400 "xmlparse.c"
        $0=$602; //@line 2400 "xmlparse.c"
        __label__ = 178; break; //@line 2400 "xmlparse.c"
      case 106: // $bb116
        var $603=$parser_addr; //@line 2403 "xmlparse.c"
        var $604=$603+312; //@line 2403 "xmlparse.c"
        var $605=HEAP[$604]; //@line 2403 "xmlparse.c"
        var $606=$startTagLevel_addr; //@line 2403 "xmlparse.c"
        var $607=($605)==($606); //@line 2403 "xmlparse.c"
        if ($607) { __label__ = 107; break; } else { __label__ = 108; break; } //@line 2403 "xmlparse.c"
      case 107: // $bb117
        $0=13; //@line 2404 "xmlparse.c"
        __label__ = 178; break; //@line 2404 "xmlparse.c"
      case 108: // $bb118
        var $608=$parser_addr; //@line 2408 "xmlparse.c"
        var $609=$608+364; //@line 2408 "xmlparse.c"
        var $610=HEAP[$609]; //@line 2408 "xmlparse.c"
        $tag120=$610; //@line 2408 "xmlparse.c"
        var $611=$tag120; //@line 2409 "xmlparse.c"
        var $612=$611; //@line 2409 "xmlparse.c"
        var $613=HEAP[$612]; //@line 2409 "xmlparse.c"
        var $614=$parser_addr; //@line 2409 "xmlparse.c"
        var $615=$614+364; //@line 2409 "xmlparse.c"
        HEAP[$615]=$613; //@line 2409 "xmlparse.c"
        var $616=$parser_addr; //@line 2410 "xmlparse.c"
        var $617=$616+368; //@line 2410 "xmlparse.c"
        var $618=HEAP[$617]; //@line 2410 "xmlparse.c"
        var $619=$tag120; //@line 2410 "xmlparse.c"
        var $620=$619; //@line 2410 "xmlparse.c"
        HEAP[$620]=$618; //@line 2410 "xmlparse.c"
        var $621=$parser_addr; //@line 2411 "xmlparse.c"
        var $622=$621+368; //@line 2411 "xmlparse.c"
        var $623=$tag120; //@line 2411 "xmlparse.c"
        HEAP[$622]=$623; //@line 2411 "xmlparse.c"
        var $624=HEAP[$s_addr]; //@line 2412 "xmlparse.c"
        var $625=$enc_addr; //@line 2412 "xmlparse.c"
        var $626=$625+68; //@line 2412 "xmlparse.c"
        var $627=HEAP[$626]; //@line 2412 "xmlparse.c"
        var $628=($627) * 2; //@line 2412 "xmlparse.c"
        var $629=$624+$628; //@line 2412 "xmlparse.c"
        $rawName119=$629; //@line 2412 "xmlparse.c"
        var $630=$enc_addr; //@line 2413 "xmlparse.c"
        var $631=$630+32; //@line 2413 "xmlparse.c"
        var $632=HEAP[$631]; //@line 2413 "xmlparse.c"
        var $633=$enc_addr; //@line 2413 "xmlparse.c"
        var $634=$rawName119; //@line 2413 "xmlparse.c"
        var $635=FUNCTION_TABLE[$632]($633, $634); //@line 2413 "xmlparse.c"
        $len=$635; //@line 2413 "xmlparse.c"
        var $636=$tag120; //@line 2414 "xmlparse.c"
        var $637=$636+8; //@line 2414 "xmlparse.c"
        var $638=HEAP[$637]; //@line 2414 "xmlparse.c"
        var $639=$len; //@line 2414 "xmlparse.c"
        var $640=($638)!=($639); //@line 2414 "xmlparse.c"
        if ($640) { __label__ = 110; break; } else { __label__ = 109; break; } //@line 2414 "xmlparse.c"
      case 109: // $bb121
        var $641=$len; //@line 2414 "xmlparse.c"
        var $642=$tag120; //@line 2414 "xmlparse.c"
        var $643=$642+4; //@line 2414 "xmlparse.c"
        var $644=HEAP[$643]; //@line 2414 "xmlparse.c"
        var $645=$rawName119; //@line 2414 "xmlparse.c"
        var $646=_memcmp($644, $645, $641); //@line 2414 "xmlparse.c"
        var $647=($646)!=0; //@line 2414 "xmlparse.c"
        if ($647) { __label__ = 110; break; } else { __label__ = 111; break; } //@line 2414 "xmlparse.c"
      case 110: // $bb122
        var $648=$eventPP; //@line 2416 "xmlparse.c"
        var $649=$rawName119; //@line 2416 "xmlparse.c"
        HEAP[$648]=$649; //@line 2416 "xmlparse.c"
        $0=7; //@line 2417 "xmlparse.c"
        __label__ = 178; break; //@line 2417 "xmlparse.c"
      case 111: // $bb123
        var $650=$parser_addr; //@line 2419 "xmlparse.c"
        var $651=$650+312; //@line 2419 "xmlparse.c"
        var $652=HEAP[$651]; //@line 2419 "xmlparse.c"
        var $653=($652) - 1; //@line 2419 "xmlparse.c"
        var $654=$parser_addr; //@line 2419 "xmlparse.c"
        var $655=$654+312; //@line 2419 "xmlparse.c"
        HEAP[$655]=$653; //@line 2419 "xmlparse.c"
        var $656=$parser_addr; //@line 2420 "xmlparse.c"
        var $657=$656+56; //@line 2420 "xmlparse.c"
        var $658=HEAP[$657]; //@line 2420 "xmlparse.c"
        var $659=($658)!=0; //@line 2420 "xmlparse.c"
        if ($659) { __label__ = 112; break; } else { __label__ = 122; break; } //@line 2420 "xmlparse.c"
      case 112: // $bb124
        var $660=$tag120; //@line 2424 "xmlparse.c"
        var $661=$660+12; //@line 2424 "xmlparse.c"
        var $662=$661+4; //@line 2424 "xmlparse.c"
        var $663=HEAP[$662]; //@line 2424 "xmlparse.c"
        $localPart=$663; //@line 2424 "xmlparse.c"
        var $664=$parser_addr; //@line 2425 "xmlparse.c"
        var $665=$664+236; //@line 2425 "xmlparse.c"
        var $666=HEAP[$665]; //@line 2425 "xmlparse.c"
        var $667=($666)!=0; //@line 2425 "xmlparse.c"
        if ($667) { __label__ = 113; break; } else { __label__ = 121; break; } //@line 2425 "xmlparse.c"
      case 113: // $bb125
        var $668=$localPart; //@line 2425 "xmlparse.c"
        var $669=($668)!=0; //@line 2425 "xmlparse.c"
        if ($669) { __label__ = 114; break; } else { __label__ = 121; break; } //@line 2425 "xmlparse.c"
      case 114: // $bb126
        var $670=$tag120; //@line 2430 "xmlparse.c"
        var $671=$670+12; //@line 2430 "xmlparse.c"
        var $672=$671; //@line 2430 "xmlparse.c"
        var $673=HEAP[$672]; //@line 2430 "xmlparse.c"
        var $674=$tag120; //@line 2430 "xmlparse.c"
        var $675=$674+12; //@line 2430 "xmlparse.c"
        var $676=$675+16; //@line 2430 "xmlparse.c"
        var $677=HEAP[$676]; //@line 2430 "xmlparse.c"
        var $678=$673+$677; //@line 2430 "xmlparse.c"
        $uri=$678; //@line 2430 "xmlparse.c"
        var $679=$localPart; //@line 2432 "xmlparse.c"
        var $680=HEAP[$679]; //@line 2432 "xmlparse.c"
        var $681=($680)!=0; //@line 2432 "xmlparse.c"
        if ($681) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 2432 "xmlparse.c"
      case 115: // $bb127
        var $682=$localPart; //@line 2432 "xmlparse.c"
        var $683=HEAP[$682]; //@line 2432 "xmlparse.c"
        var $684=$uri; //@line 2432 "xmlparse.c"
        HEAP[$684]=$683; //@line 2432 "xmlparse.c"
        var $685=$uri; //@line 2432 "xmlparse.c"
        var $686=$685+1; //@line 2432 "xmlparse.c"
        $uri=$686; //@line 2432 "xmlparse.c"
        var $687=$localPart; //@line 2432 "xmlparse.c"
        var $688=$687+1; //@line 2432 "xmlparse.c"
        $localPart=$688; //@line 2432 "xmlparse.c"
        var $689=$localPart; //@line 2432 "xmlparse.c"
        var $690=HEAP[$689]; //@line 2432 "xmlparse.c"
        var $691=($690)!=0; //@line 2432 "xmlparse.c"
        if ($691) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 2432 "xmlparse.c"
      case 116: // $bb129
        var $692=$tag120; //@line 2433 "xmlparse.c"
        var $693=$692+12; //@line 2433 "xmlparse.c"
        var $694=$693+8; //@line 2433 "xmlparse.c"
        var $695=HEAP[$694]; //@line 2433 "xmlparse.c"
        $prefix=$695; //@line 2433 "xmlparse.c"
        var $696=$parser_addr; //@line 2434 "xmlparse.c"
        var $697=$696+237; //@line 2434 "xmlparse.c"
        var $698=HEAP[$697]; //@line 2434 "xmlparse.c"
        var $699=($698)!=0; //@line 2434 "xmlparse.c"
        if ($699) { __label__ = 117; break; } else { __label__ = 120; break; } //@line 2434 "xmlparse.c"
      case 117: // $bb130
        var $700=$prefix; //@line 2434 "xmlparse.c"
        var $701=($700)!=0; //@line 2434 "xmlparse.c"
        if ($701) { __label__ = 118; break; } else { __label__ = 120; break; } //@line 2434 "xmlparse.c"
      case 118: // $bb131
        var $702=$parser_addr; //@line 2435 "xmlparse.c"
        var $703=$702+472; //@line 2435 "xmlparse.c"
        var $704=HEAP[$703]; //@line 2435 "xmlparse.c"
        var $705=$uri; //@line 2435 "xmlparse.c"
        HEAP[$705]=$704; //@line 2435 "xmlparse.c"
        var $706=$uri; //@line 2435 "xmlparse.c"
        var $707=$706+1; //@line 2435 "xmlparse.c"
        $uri=$707; //@line 2435 "xmlparse.c"
        var $708=$prefix; //@line 2436 "xmlparse.c"
        var $709=HEAP[$708]; //@line 2436 "xmlparse.c"
        var $710=($709)!=0; //@line 2436 "xmlparse.c"
        if ($710) { __label__ = 119; break; } else { __label__ = 120; break; } //@line 2436 "xmlparse.c"
      case 119: // $bb132
        var $711=$prefix; //@line 2436 "xmlparse.c"
        var $712=HEAP[$711]; //@line 2436 "xmlparse.c"
        var $713=$uri; //@line 2436 "xmlparse.c"
        HEAP[$713]=$712; //@line 2436 "xmlparse.c"
        var $714=$uri; //@line 2436 "xmlparse.c"
        var $715=$714+1; //@line 2436 "xmlparse.c"
        $uri=$715; //@line 2436 "xmlparse.c"
        var $716=$prefix; //@line 2436 "xmlparse.c"
        var $717=$716+1; //@line 2436 "xmlparse.c"
        $prefix=$717; //@line 2436 "xmlparse.c"
        var $718=$prefix; //@line 2436 "xmlparse.c"
        var $719=HEAP[$718]; //@line 2436 "xmlparse.c"
        var $720=($719)!=0; //@line 2436 "xmlparse.c"
        if ($720) { __label__ = 119; break; } else { __label__ = 120; break; } //@line 2436 "xmlparse.c"
      case 120: // $bb134
        var $721=$uri; //@line 2438 "xmlparse.c"
        HEAP[$721]=0; //@line 2438 "xmlparse.c"
        __label__ = 121; break; //@line 2438 "xmlparse.c"
      case 121: // $bb135
        var $722=$parser_addr; //@line 2440 "xmlparse.c"
        var $723=$722+56; //@line 2440 "xmlparse.c"
        var $724=HEAP[$723]; //@line 2440 "xmlparse.c"
        var $725=$tag120; //@line 2440 "xmlparse.c"
        var $726=$725+12; //@line 2440 "xmlparse.c"
        var $727=$726; //@line 2440 "xmlparse.c"
        var $728=HEAP[$727]; //@line 2440 "xmlparse.c"
        var $729=$parser_addr; //@line 2440 "xmlparse.c"
        var $730=$729+4; //@line 2440 "xmlparse.c"
        var $731=HEAP[$730]; //@line 2440 "xmlparse.c"
        FUNCTION_TABLE[$724]($731, $728); //@line 2440 "xmlparse.c"
        __label__ = 124; break; //@line 2440 "xmlparse.c"
      case 122: // $bb136
        var $732=$parser_addr; //@line 2442 "xmlparse.c"
        var $733=$732+80; //@line 2442 "xmlparse.c"
        var $734=HEAP[$733]; //@line 2442 "xmlparse.c"
        var $735=($734)!=0; //@line 2442 "xmlparse.c"
        if ($735) { __label__ = 123; break; } else { __label__ = 124; break; } //@line 2442 "xmlparse.c"
      case 123: // $bb137
        var $736=HEAP[$next]; //@line 2443 "xmlparse.c"
        var $737=HEAP[$s_addr]; //@line 2443 "xmlparse.c"
        var $738=$parser_addr; //@line 2443 "xmlparse.c"
        var $739=$enc_addr; //@line 2443 "xmlparse.c"
        _reportDefault($738, $739, $737, $736); //@line 2443 "xmlparse.c"
        __label__ = 124; break; //@line 2443 "xmlparse.c"
      case 124: // $bb143_preheader
        var $740=$tag120; //@line 2444 "xmlparse.c"
        var $741=$740+44; //@line 2444 "xmlparse.c"
        var $742=HEAP[$741]; //@line 2444 "xmlparse.c"
        var $743=($742)!=0; //@line 2444 "xmlparse.c"
        if ($743) { __label__ = 125; break; } else { __label__ = 128; break; } //@line 2444 "xmlparse.c"
      case 125: // $bb139
        var $744=$tag120; //@line 2445 "xmlparse.c"
        var $745=$744+44; //@line 2445 "xmlparse.c"
        var $746=HEAP[$745]; //@line 2445 "xmlparse.c"
        $b140=$746; //@line 2445 "xmlparse.c"
        var $747=$parser_addr; //@line 2446 "xmlparse.c"
        var $748=$747+104; //@line 2446 "xmlparse.c"
        var $749=HEAP[$748]; //@line 2446 "xmlparse.c"
        var $750=($749)!=0; //@line 2446 "xmlparse.c"
        if ($750) { __label__ = 126; break; } else { __label__ = 127; break; } //@line 2446 "xmlparse.c"
      case 126: // $bb141
        var $751=$parser_addr; //@line 2447 "xmlparse.c"
        var $752=$751+104; //@line 2447 "xmlparse.c"
        var $753=HEAP[$752]; //@line 2447 "xmlparse.c"
        var $754=$b140; //@line 2447 "xmlparse.c"
        var $755=$754; //@line 2447 "xmlparse.c"
        var $756=HEAP[$755]; //@line 2447 "xmlparse.c"
        var $757=$756; //@line 2447 "xmlparse.c"
        var $758=HEAP[$757]; //@line 2447 "xmlparse.c"
        var $759=$parser_addr; //@line 2447 "xmlparse.c"
        var $760=$759+4; //@line 2447 "xmlparse.c"
        var $761=HEAP[$760]; //@line 2447 "xmlparse.c"
        FUNCTION_TABLE[$753]($761, $758); //@line 2447 "xmlparse.c"
        __label__ = 127; break; //@line 2447 "xmlparse.c"
      case 127: // $bb142
        var $762=$tag120; //@line 2448 "xmlparse.c"
        var $763=$762+44; //@line 2448 "xmlparse.c"
        var $764=HEAP[$763]; //@line 2448 "xmlparse.c"
        var $765=$764+4; //@line 2448 "xmlparse.c"
        var $766=HEAP[$765]; //@line 2448 "xmlparse.c"
        var $767=$tag120; //@line 2448 "xmlparse.c"
        var $768=$767+44; //@line 2448 "xmlparse.c"
        HEAP[$768]=$766; //@line 2448 "xmlparse.c"
        var $769=$parser_addr; //@line 2449 "xmlparse.c"
        var $770=$769+376; //@line 2449 "xmlparse.c"
        var $771=HEAP[$770]; //@line 2449 "xmlparse.c"
        var $772=$b140; //@line 2449 "xmlparse.c"
        var $773=$772+4; //@line 2449 "xmlparse.c"
        HEAP[$773]=$771; //@line 2449 "xmlparse.c"
        var $774=$parser_addr; //@line 2450 "xmlparse.c"
        var $775=$774+376; //@line 2450 "xmlparse.c"
        var $776=$b140; //@line 2450 "xmlparse.c"
        HEAP[$775]=$776; //@line 2450 "xmlparse.c"
        var $777=$b140; //@line 2451 "xmlparse.c"
        var $778=$777; //@line 2451 "xmlparse.c"
        var $779=HEAP[$778]; //@line 2451 "xmlparse.c"
        var $780=$b140; //@line 2451 "xmlparse.c"
        var $781=$780+8; //@line 2451 "xmlparse.c"
        var $782=HEAP[$781]; //@line 2451 "xmlparse.c"
        var $783=$779+4; //@line 2451 "xmlparse.c"
        HEAP[$783]=$782; //@line 2451 "xmlparse.c"
        var $784=$tag120; //@line 2444 "xmlparse.c"
        var $785=$784+44; //@line 2444 "xmlparse.c"
        var $786=HEAP[$785]; //@line 2444 "xmlparse.c"
        var $787=($786)!=0; //@line 2444 "xmlparse.c"
        if ($787) { __label__ = 125; break; } else { __label__ = 128; break; } //@line 2444 "xmlparse.c"
      case 128: // $bb144
        var $788=$parser_addr; //@line 2453 "xmlparse.c"
        var $789=$788+312; //@line 2453 "xmlparse.c"
        var $790=HEAP[$789]; //@line 2453 "xmlparse.c"
        var $791=($790)==0; //@line 2453 "xmlparse.c"
        if ($791) { __label__ = 129; break; } else { __label__ = 175; break; } //@line 2453 "xmlparse.c"
      case 129: // $bb145
        var $792=HEAP[$next]; //@line 2454 "xmlparse.c"
        var $793=$parser_addr; //@line 2454 "xmlparse.c"
        var $794=$end_addr; //@line 2454 "xmlparse.c"
        var $795=$nextPtr_addr; //@line 2454 "xmlparse.c"
        var $796=_epilogProcessor($793, $792, $794, $795); //@line 2454 "xmlparse.c"
        $0=$796; //@line 2454 "xmlparse.c"
        __label__ = 178; break; //@line 2454 "xmlparse.c"
      case 130: // $bb147
        var $797=$enc_addr; //@line 2459 "xmlparse.c"
        var $798=$797+44; //@line 2459 "xmlparse.c"
        var $799=HEAP[$798]; //@line 2459 "xmlparse.c"
        var $800=HEAP[$s_addr]; //@line 2459 "xmlparse.c"
        var $801=$enc_addr; //@line 2459 "xmlparse.c"
        var $802=FUNCTION_TABLE[$799]($801, $800); //@line 2459 "xmlparse.c"
        $n=$802; //@line 2459 "xmlparse.c"
        var $803=$n; //@line 2460 "xmlparse.c"
        var $804=($803) < 0; //@line 2460 "xmlparse.c"
        if ($804) { __label__ = 131; break; } else { __label__ = 132; break; } //@line 2460 "xmlparse.c"
      case 131: // $bb148
        $0=14; //@line 2461 "xmlparse.c"
        __label__ = 178; break; //@line 2461 "xmlparse.c"
      case 132: // $bb149
        var $805=$parser_addr; //@line 2462 "xmlparse.c"
        var $806=$805+60; //@line 2462 "xmlparse.c"
        var $807=HEAP[$806]; //@line 2462 "xmlparse.c"
        var $808=($807)!=0; //@line 2462 "xmlparse.c"
        var $809=$parser_addr; //@line 2464 "xmlparse.c"
        if ($808) { __label__ = 133; break; } else { __label__ = 134; break; } //@line 2462 "xmlparse.c"
      case 133: // $bb150
        var $810=$809+60; //@line 2464 "xmlparse.c"
        var $811=HEAP[$810]; //@line 2464 "xmlparse.c"
        var $812=$n; //@line 2464 "xmlparse.c"
        var $813=_PyExpat_XmlUtf8Encode($812, $buf151); //@line 2464 "xmlparse.c"
        var $814=$parser_addr; //@line 2464 "xmlparse.c"
        var $815=$814+4; //@line 2464 "xmlparse.c"
        var $816=HEAP[$815]; //@line 2464 "xmlparse.c"
        FUNCTION_TABLE[$811]($816, $buf152, $813); //@line 2464 "xmlparse.c"
        __label__ = 175; break; //@line 2464 "xmlparse.c"
      case 134: // $bb153
        var $817=$809+80; //@line 2466 "xmlparse.c"
        var $818=HEAP[$817]; //@line 2466 "xmlparse.c"
        var $819=($818)!=0; //@line 2466 "xmlparse.c"
        if ($819) { __label__ = 135; break; } else { __label__ = 175; break; } //@line 2466 "xmlparse.c"
      case 135: // $bb154
        var $820=HEAP[$next]; //@line 2467 "xmlparse.c"
        var $821=HEAP[$s_addr]; //@line 2467 "xmlparse.c"
        var $822=$parser_addr; //@line 2467 "xmlparse.c"
        var $823=$enc_addr; //@line 2467 "xmlparse.c"
        _reportDefault($822, $823, $821, $820); //@line 2467 "xmlparse.c"
        __label__ = 175; break; //@line 2467 "xmlparse.c"
      case 136: // $bb156
        $0=17; //@line 2471 "xmlparse.c"
        __label__ = 178; break; //@line 2471 "xmlparse.c"
      case 137: // $bb157
        var $824=$parser_addr; //@line 2473 "xmlparse.c"
        var $825=$824+60; //@line 2473 "xmlparse.c"
        var $826=HEAP[$825]; //@line 2473 "xmlparse.c"
        var $827=($826)!=0; //@line 2473 "xmlparse.c"
        if ($827) { __label__ = 138; break; } else { __label__ = 139; break; } //@line 2473 "xmlparse.c"
      case 138: // $bb158
        HEAP[$c159]=10; //@line 2474 "xmlparse.c"
        var $828=$parser_addr; //@line 2475 "xmlparse.c"
        var $829=$828+60; //@line 2475 "xmlparse.c"
        var $830=HEAP[$829]; //@line 2475 "xmlparse.c"
        var $831=$parser_addr; //@line 2475 "xmlparse.c"
        var $832=$831+4; //@line 2475 "xmlparse.c"
        var $833=HEAP[$832]; //@line 2475 "xmlparse.c"
        FUNCTION_TABLE[$830]($833, $c159, 1); //@line 2475 "xmlparse.c"
        __label__ = 175; break; //@line 2475 "xmlparse.c"
      case 139: // $bb160
        var $834=$parser_addr; //@line 2477 "xmlparse.c"
        var $835=$834+80; //@line 2477 "xmlparse.c"
        var $836=HEAP[$835]; //@line 2477 "xmlparse.c"
        var $837=($836)!=0; //@line 2477 "xmlparse.c"
        if ($837) { __label__ = 140; break; } else { __label__ = 175; break; } //@line 2477 "xmlparse.c"
      case 140: // $bb161
        var $838=HEAP[$next]; //@line 2478 "xmlparse.c"
        var $839=HEAP[$s_addr]; //@line 2478 "xmlparse.c"
        var $840=$parser_addr; //@line 2478 "xmlparse.c"
        var $841=$enc_addr; //@line 2478 "xmlparse.c"
        _reportDefault($840, $841, $839, $838); //@line 2478 "xmlparse.c"
        __label__ = 175; break; //@line 2478 "xmlparse.c"
      case 141: // $bb163
        var $842=$parser_addr; //@line 2483 "xmlparse.c"
        var $843=$842+72; //@line 2483 "xmlparse.c"
        var $844=HEAP[$843]; //@line 2483 "xmlparse.c"
        var $845=($844)!=0; //@line 2483 "xmlparse.c"
        var $846=$parser_addr; //@line 2484 "xmlparse.c"
        if ($845) { __label__ = 142; break; } else { __label__ = 143; break; } //@line 2483 "xmlparse.c"
      case 142: // $bb165
        var $847=$846+72; //@line 2484 "xmlparse.c"
        var $848=HEAP[$847]; //@line 2484 "xmlparse.c"
        var $849=$parser_addr; //@line 2484 "xmlparse.c"
        var $850=$849+4; //@line 2484 "xmlparse.c"
        var $851=HEAP[$850]; //@line 2484 "xmlparse.c"
        FUNCTION_TABLE[$848]($851); //@line 2484 "xmlparse.c"
        __label__ = 145; break; //@line 2484 "xmlparse.c"
      case 143: // $bb166
        var $852=$846+80; //@line 2501 "xmlparse.c"
        var $853=HEAP[$852]; //@line 2501 "xmlparse.c"
        var $854=($853)!=0; //@line 2501 "xmlparse.c"
        if ($854) { __label__ = 144; break; } else { __label__ = 145; break; } //@line 2501 "xmlparse.c"
      case 144: // $bb167
        var $855=HEAP[$next]; //@line 2502 "xmlparse.c"
        var $856=HEAP[$s_addr]; //@line 2502 "xmlparse.c"
        var $857=$parser_addr; //@line 2502 "xmlparse.c"
        var $858=$enc_addr; //@line 2502 "xmlparse.c"
        _reportDefault($857, $858, $856, $855); //@line 2502 "xmlparse.c"
        __label__ = 145; break; //@line 2502 "xmlparse.c"
      case 145: // $bb168
        var $859=$haveMore_addr; //@line 2503 "xmlparse.c"
        var $860=($859); //@line 2503 "xmlparse.c"
        var $861=$parser_addr; //@line 2503 "xmlparse.c"
        var $862=$enc_addr; //@line 2503 "xmlparse.c"
        var $863=$end_addr; //@line 2503 "xmlparse.c"
        var $864=$nextPtr_addr; //@line 2503 "xmlparse.c"
        var $865=((($860)) & 255); //@line 2503 "xmlparse.c"
        var $866=_doCdataSection($861, $862, $next, $863, $864, $865); //@line 2503 "xmlparse.c"
        $result164=$866; //@line 2503 "xmlparse.c"
        var $867=($866)!=0; //@line 2504 "xmlparse.c"
        if ($867) { __label__ = 146; break; } else { __label__ = 147; break; } //@line 2504 "xmlparse.c"
      case 146: // $bb169
        var $868=$result164; //@line 2505 "xmlparse.c"
        $0=$868; //@line 2505 "xmlparse.c"
        __label__ = 178; break; //@line 2505 "xmlparse.c"
      case 147: // $bb170
        var $869=HEAP[$next]; //@line 2506 "xmlparse.c"
        var $870=($869)==0; //@line 2506 "xmlparse.c"
        if ($870) { __label__ = 148; break; } else { __label__ = 175; break; } //@line 2506 "xmlparse.c"
      case 148: // $bb171
        var $871=$parser_addr; //@line 2507 "xmlparse.c"
        var $872=$871+280; //@line 2507 "xmlparse.c"
        HEAP[$872]=(FUNCTION_TABLE_OFFSET + 62); //@line 2507 "xmlparse.c"
        var $873=$result164; //@line 2508 "xmlparse.c"
        $0=$873; //@line 2508 "xmlparse.c"
        __label__ = 178; break; //@line 2508 "xmlparse.c"
      case 149: // $bb173
        var $874=$haveMore_addr; //@line 2513 "xmlparse.c"
        var $875=($874)!=0; //@line 2513 "xmlparse.c"
        if ($875) { __label__ = 150; break; } else { __label__ = 151; break; } //@line 2513 "xmlparse.c"
      case 150: // $bb174
        var $876=HEAP[$s_addr]; //@line 2514 "xmlparse.c"
        var $877=$nextPtr_addr; //@line 2514 "xmlparse.c"
        HEAP[$877]=$876; //@line 2514 "xmlparse.c"
        $0=0; //@line 2515 "xmlparse.c"
        __label__ = 178; break; //@line 2515 "xmlparse.c"
      case 151: // $bb175
        var $878=$parser_addr; //@line 2517 "xmlparse.c"
        var $879=$878+60; //@line 2517 "xmlparse.c"
        var $880=HEAP[$879]; //@line 2517 "xmlparse.c"
        var $881=($880)!=0; //@line 2517 "xmlparse.c"
        if ($881) { __label__ = 152; break; } else { __label__ = 155; break; } //@line 2517 "xmlparse.c"
      case 152: // $bb176
        var $882=$enc_addr; //@line 2518 "xmlparse.c"
        var $883=$882+72; //@line 2518 "xmlparse.c"
        var $884=HEAP[$883]; //@line 2518 "xmlparse.c"
        var $885=($884)==0; //@line 2518 "xmlparse.c"
        var $886=$parser_addr; //@line 2519 "xmlparse.c"
        if ($885) { __label__ = 153; break; } else { __label__ = 154; break; } //@line 2518 "xmlparse.c"
      case 153: // $bb177
        var $887=$886+44; //@line 2519 "xmlparse.c"
        var $888=HEAP[$887]; //@line 2519 "xmlparse.c"
        HEAP[$dataPtr]=$888; //@line 2519 "xmlparse.c"
        var $889=$enc_addr; //@line 2520 "xmlparse.c"
        var $890=$889+60; //@line 2520 "xmlparse.c"
        var $891=HEAP[$890]; //@line 2520 "xmlparse.c"
        var $892=$parser_addr; //@line 2520 "xmlparse.c"
        var $893=$892+48; //@line 2520 "xmlparse.c"
        var $894=HEAP[$893]; //@line 2520 "xmlparse.c"
        var $895=$enc_addr; //@line 2520 "xmlparse.c"
        var $896=$end_addr; //@line 2520 "xmlparse.c"
        FUNCTION_TABLE[$891]($895, $s_addr, $896, $dataPtr, $894); //@line 2520 "xmlparse.c"
        var $897=$parser_addr; //@line 2521 "xmlparse.c"
        var $898=$897+60; //@line 2521 "xmlparse.c"
        var $899=HEAP[$898]; //@line 2521 "xmlparse.c"
        var $900=HEAP[$dataPtr]; //@line 2521 "xmlparse.c"
        var $901=($900); //@line 2521 "xmlparse.c"
        var $902=$parser_addr; //@line 2521 "xmlparse.c"
        var $903=$902+44; //@line 2521 "xmlparse.c"
        var $904=HEAP[$903]; //@line 2521 "xmlparse.c"
        var $905=($904); //@line 2521 "xmlparse.c"
        var $906=($901) - ($905); //@line 2521 "xmlparse.c"
        var $907=$parser_addr; //@line 2521 "xmlparse.c"
        var $908=$907+44; //@line 2521 "xmlparse.c"
        var $909=HEAP[$908]; //@line 2521 "xmlparse.c"
        var $910=$parser_addr; //@line 2521 "xmlparse.c"
        var $911=$910+4; //@line 2521 "xmlparse.c"
        var $912=HEAP[$911]; //@line 2521 "xmlparse.c"
        FUNCTION_TABLE[$899]($912, $909, $906); //@line 2521 "xmlparse.c"
        __label__ = 157; break; //@line 2521 "xmlparse.c"
      case 154: // $bb178
        var $913=$886+60; //@line 2525 "xmlparse.c"
        var $914=HEAP[$913]; //@line 2525 "xmlparse.c"
        var $915=$end_addr; //@line 2525 "xmlparse.c"
        var $916=($915); //@line 2525 "xmlparse.c"
        var $917=HEAP[$s_addr]; //@line 2525 "xmlparse.c"
        var $918=($917); //@line 2525 "xmlparse.c"
        var $919=($916) - ($918); //@line 2525 "xmlparse.c"
        var $920=HEAP[$s_addr]; //@line 2525 "xmlparse.c"
        var $921=$parser_addr; //@line 2525 "xmlparse.c"
        var $922=$921+4; //@line 2525 "xmlparse.c"
        var $923=HEAP[$922]; //@line 2525 "xmlparse.c"
        FUNCTION_TABLE[$914]($923, $920, $919); //@line 2525 "xmlparse.c"
        __label__ = 157; break; //@line 2525 "xmlparse.c"
      case 155: // $bb180
        var $924=$parser_addr; //@line 2529 "xmlparse.c"
        var $925=$924+80; //@line 2529 "xmlparse.c"
        var $926=HEAP[$925]; //@line 2529 "xmlparse.c"
        var $927=($926)!=0; //@line 2529 "xmlparse.c"
        if ($927) { __label__ = 156; break; } else { __label__ = 157; break; } //@line 2529 "xmlparse.c"
      case 156: // $bb181
        var $928=HEAP[$s_addr]; //@line 2530 "xmlparse.c"
        var $929=$parser_addr; //@line 2530 "xmlparse.c"
        var $930=$enc_addr; //@line 2530 "xmlparse.c"
        var $931=$end_addr; //@line 2530 "xmlparse.c"
        _reportDefault($929, $930, $928, $931); //@line 2530 "xmlparse.c"
        __label__ = 157; break; //@line 2530 "xmlparse.c"
      case 157: // $bb182
        var $932=$startTagLevel_addr; //@line 2534 "xmlparse.c"
        var $933=($932)==0; //@line 2534 "xmlparse.c"
        if ($933) { __label__ = 158; break; } else { __label__ = 159; break; } //@line 2534 "xmlparse.c"
      case 158: // $bb183
        var $934=$eventPP; //@line 2535 "xmlparse.c"
        var $935=$end_addr; //@line 2535 "xmlparse.c"
        HEAP[$934]=$935; //@line 2535 "xmlparse.c"
        $0=3; //@line 2536 "xmlparse.c"
        __label__ = 178; break; //@line 2536 "xmlparse.c"
      case 159: // $bb184
        var $936=$parser_addr; //@line 2538 "xmlparse.c"
        var $937=$936+312; //@line 2538 "xmlparse.c"
        var $938=HEAP[$937]; //@line 2538 "xmlparse.c"
        var $939=$startTagLevel_addr; //@line 2538 "xmlparse.c"
        var $940=($938)!=($939); //@line 2538 "xmlparse.c"
        if ($940) { __label__ = 160; break; } else { __label__ = 161; break; } //@line 2538 "xmlparse.c"
      case 160: // $bb185
        var $941=$eventPP; //@line 2539 "xmlparse.c"
        var $942=$end_addr; //@line 2539 "xmlparse.c"
        HEAP[$941]=$942; //@line 2539 "xmlparse.c"
        $0=13; //@line 2540 "xmlparse.c"
        __label__ = 178; break; //@line 2540 "xmlparse.c"
      case 161: // $bb186
        var $943=$nextPtr_addr; //@line 2542 "xmlparse.c"
        var $944=$end_addr; //@line 2542 "xmlparse.c"
        HEAP[$943]=$944; //@line 2542 "xmlparse.c"
        $0=0; //@line 2543 "xmlparse.c"
        __label__ = 178; break; //@line 2543 "xmlparse.c"
      case 162: // $bb187
        var $945=$parser_addr; //@line 2545 "xmlparse.c"
        var $946=$945+60; //@line 2545 "xmlparse.c"
        var $947=HEAP[$946]; //@line 2545 "xmlparse.c"
        var $948=($947)!=0; //@line 2545 "xmlparse.c"
        if ($948) { __label__ = 163; break; } else { __label__ = 167; break; } //@line 2545 "xmlparse.c"
      case 163: // $bb188
        var $949=$enc_addr; //@line 2546 "xmlparse.c"
        var $950=$949+72; //@line 2546 "xmlparse.c"
        var $951=HEAP[$950]; //@line 2546 "xmlparse.c"
        var $952=($951)==0; //@line 2546 "xmlparse.c"
        if ($952) { __label__ = 164; break; } else { __label__ = 166; break; } //@line 2546 "xmlparse.c"
      case 164: // $bb189
        var $953=$parser_addr; //@line 2548 "xmlparse.c"
        var $954=$953+44; //@line 2548 "xmlparse.c"
        var $955=HEAP[$954]; //@line 2548 "xmlparse.c"
        HEAP[$dataPtr190]=$955; //@line 2548 "xmlparse.c"
        var $956=$enc_addr; //@line 2549 "xmlparse.c"
        var $957=$956+60; //@line 2549 "xmlparse.c"
        var $958=HEAP[$957]; //@line 2549 "xmlparse.c"
        var $959=$parser_addr; //@line 2549 "xmlparse.c"
        var $960=$959+48; //@line 2549 "xmlparse.c"
        var $961=HEAP[$960]; //@line 2549 "xmlparse.c"
        var $962=HEAP[$next]; //@line 2549 "xmlparse.c"
        var $963=$enc_addr; //@line 2549 "xmlparse.c"
        FUNCTION_TABLE[$958]($963, $s_addr, $962, $dataPtr190, $961); //@line 2549 "xmlparse.c"
        var $964=HEAP[$s_addr]; //@line 2550 "xmlparse.c"
        var $965=$eventEndPP; //@line 2550 "xmlparse.c"
        HEAP[$965]=$964; //@line 2550 "xmlparse.c"
        var $966=$parser_addr; //@line 2551 "xmlparse.c"
        var $967=$966+60; //@line 2551 "xmlparse.c"
        var $968=HEAP[$967]; //@line 2551 "xmlparse.c"
        var $969=HEAP[$dataPtr190]; //@line 2551 "xmlparse.c"
        var $970=($969); //@line 2551 "xmlparse.c"
        var $971=$parser_addr; //@line 2551 "xmlparse.c"
        var $972=$971+44; //@line 2551 "xmlparse.c"
        var $973=HEAP[$972]; //@line 2551 "xmlparse.c"
        var $974=($973); //@line 2551 "xmlparse.c"
        var $975=($970) - ($974); //@line 2551 "xmlparse.c"
        var $976=$parser_addr; //@line 2551 "xmlparse.c"
        var $977=$976+44; //@line 2551 "xmlparse.c"
        var $978=HEAP[$977]; //@line 2551 "xmlparse.c"
        var $979=$parser_addr; //@line 2551 "xmlparse.c"
        var $980=$979+4; //@line 2551 "xmlparse.c"
        var $981=HEAP[$980]; //@line 2551 "xmlparse.c"
        FUNCTION_TABLE[$968]($981, $978, $975); //@line 2551 "xmlparse.c"
        var $982=HEAP[$s_addr]; //@line 2553 "xmlparse.c"
        var $983=HEAP[$next]; //@line 2553 "xmlparse.c"
        var $984=($982)==($983); //@line 2553 "xmlparse.c"
        if ($984) { __label__ = 175; break; } else { __label__ = 165; break; } //@line 2553 "xmlparse.c"
      case 165: // $bb191
        var $985=HEAP[$s_addr]; //@line 2555 "xmlparse.c"
        var $986=$eventPP; //@line 2555 "xmlparse.c"
        HEAP[$986]=$985; //@line 2555 "xmlparse.c"
        __label__ = 164; break; //@line 2555 "xmlparse.c"
      case 166: // $bb193
        var $987=$parser_addr; //@line 2559 "xmlparse.c"
        var $988=$987+60; //@line 2559 "xmlparse.c"
        var $989=HEAP[$988]; //@line 2559 "xmlparse.c"
        var $990=HEAP[$next]; //@line 2559 "xmlparse.c"
        var $991=($990); //@line 2559 "xmlparse.c"
        var $992=HEAP[$s_addr]; //@line 2559 "xmlparse.c"
        var $993=($992); //@line 2559 "xmlparse.c"
        var $994=($991) - ($993); //@line 2559 "xmlparse.c"
        var $995=HEAP[$s_addr]; //@line 2559 "xmlparse.c"
        var $996=$parser_addr; //@line 2559 "xmlparse.c"
        var $997=$996+4; //@line 2559 "xmlparse.c"
        var $998=HEAP[$997]; //@line 2559 "xmlparse.c"
        FUNCTION_TABLE[$989]($998, $995, $994); //@line 2559 "xmlparse.c"
        __label__ = 175; break; //@line 2559 "xmlparse.c"
      case 167: // $bb195
        var $999=$parser_addr; //@line 2563 "xmlparse.c"
        var $1000=$999+80; //@line 2563 "xmlparse.c"
        var $1001=HEAP[$1000]; //@line 2563 "xmlparse.c"
        var $1002=($1001)!=0; //@line 2563 "xmlparse.c"
        if ($1002) { __label__ = 168; break; } else { __label__ = 175; break; } //@line 2563 "xmlparse.c"
      case 168: // $bb196
        var $1003=HEAP[$next]; //@line 2564 "xmlparse.c"
        var $1004=HEAP[$s_addr]; //@line 2564 "xmlparse.c"
        var $1005=$parser_addr; //@line 2564 "xmlparse.c"
        var $1006=$enc_addr; //@line 2564 "xmlparse.c"
        _reportDefault($1005, $1006, $1004, $1003); //@line 2564 "xmlparse.c"
        __label__ = 175; break; //@line 2564 "xmlparse.c"
      case 169: // $bb198
        var $1007=HEAP[$next]; //@line 2567 "xmlparse.c"
        var $1008=HEAP[$s_addr]; //@line 2567 "xmlparse.c"
        var $1009=$parser_addr; //@line 2567 "xmlparse.c"
        var $1010=$enc_addr; //@line 2567 "xmlparse.c"
        var $1011=_reportProcessingInstruction($1009, $1010, $1008, $1007); //@line 2567 "xmlparse.c"
        var $1012=($1011)==0; //@line 2567 "xmlparse.c"
        if ($1012) { __label__ = 170; break; } else { __label__ = 175; break; } //@line 2567 "xmlparse.c"
      case 170: // $bb199
        $0=1; //@line 2568 "xmlparse.c"
        __label__ = 178; break; //@line 2568 "xmlparse.c"
      case 171: // $bb201
        var $1013=HEAP[$next]; //@line 2571 "xmlparse.c"
        var $1014=HEAP[$s_addr]; //@line 2571 "xmlparse.c"
        var $1015=$parser_addr; //@line 2571 "xmlparse.c"
        var $1016=$enc_addr; //@line 2571 "xmlparse.c"
        var $1017=_reportComment($1015, $1016, $1014, $1013); //@line 2571 "xmlparse.c"
        var $1018=($1017)==0; //@line 2571 "xmlparse.c"
        if ($1018) { __label__ = 172; break; } else { __label__ = 175; break; } //@line 2571 "xmlparse.c"
      case 172: // $bb202
        $0=1; //@line 2572 "xmlparse.c"
        __label__ = 178; break; //@line 2572 "xmlparse.c"
      case 173: // $bb204
        var $1019=$parser_addr; //@line 2575 "xmlparse.c"
        var $1020=$1019+80; //@line 2575 "xmlparse.c"
        var $1021=HEAP[$1020]; //@line 2575 "xmlparse.c"
        var $1022=($1021)!=0; //@line 2575 "xmlparse.c"
        if ($1022) { __label__ = 174; break; } else { __label__ = 175; break; } //@line 2575 "xmlparse.c"
      case 174: // $bb205
        var $1023=HEAP[$next]; //@line 2576 "xmlparse.c"
        var $1024=HEAP[$s_addr]; //@line 2576 "xmlparse.c"
        var $1025=$parser_addr; //@line 2576 "xmlparse.c"
        var $1026=$enc_addr; //@line 2576 "xmlparse.c"
        _reportDefault($1025, $1026, $1024, $1023); //@line 2576 "xmlparse.c"
        __label__ = 175; break; //@line 2576 "xmlparse.c"
      case 175: // $bb206
        var $1027=HEAP[$next]; //@line 2579 "xmlparse.c"
        HEAP[$s_addr]=$1027; //@line 2579 "xmlparse.c"
        var $1028=HEAP[$s_addr]; //@line 2579 "xmlparse.c"
        var $1029=$eventPP; //@line 2579 "xmlparse.c"
        HEAP[$1029]=$1028; //@line 2579 "xmlparse.c"
        var $1030=$parser_addr; //@line 2580 "xmlparse.c"
        var $1031=$1030+480; //@line 2580 "xmlparse.c"
        var $1032=$1031; //@line 2580 "xmlparse.c"
        var $1033=HEAP[$1032]; //@line 2580 "xmlparse.c"
        if ($1033 == 2) {
          __label__ = 177; break;
        }
        else if ($1033 == 3) {
          __label__ = 176; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 176: // $bb207
        var $1034=HEAP[$next]; //@line 2582 "xmlparse.c"
        var $1035=$nextPtr_addr; //@line 2582 "xmlparse.c"
        HEAP[$1035]=$1034; //@line 2582 "xmlparse.c"
        $0=0; //@line 2583 "xmlparse.c"
        __label__ = 178; break; //@line 2583 "xmlparse.c"
      case 177: // $bb208
        $0=35; //@line 2585 "xmlparse.c"
        __label__ = 178; break; //@line 2585 "xmlparse.c"
      case 178: // $bb210
        var $1036=$0; //@line 2170 "xmlparse.c"
        $retval=$1036; //@line 2170 "xmlparse.c"
        var $retval211=$retval; //@line 2170 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval211; //@line 2170 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _storeAtts($parser, $enc, $attStr, $tagNamePtr, $bindingsPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $enc_addr;
        var $attStr_addr;
        var $tagNamePtr_addr;
        var $bindingsPtr_addr;
        var $retval;
        var $iftmp_105;
        var $iftmp_104;
        var $iftmp_102;
        var $iftmp_100;
        var $0;
        var $dtd;
        var $elementType;
        var $nDefaultAtts;
        var $appAtts;
        var $attIndex;
        var $prefixLen;
        var $i;
        var $n;
        var $uri;
        var $nPrefixes;
        var $binding;
        var $localPart;
        var $name;
        var $oldAttsSize;
        var $temp;
        var $attId;
        var $result;
        var $isCdata;
        var $j;
        var $result35;
        var $da;
        var $result58;
        var $j68;
        var $version;
        var $nsAttsSize;
        var $temp70;
        var $s;
        var $id;
        var $b;
        var $uriHash;
        var $c;
        var $c99;
        var $step;
        var $mask;
        var $s1;
        var $s2;
        var $p;
        $parser_addr=$parser;
        $enc_addr=$enc;
        $attStr_addr=$attStr;
        $tagNamePtr_addr=$tagNamePtr;
        $bindingsPtr_addr=$bindingsPtr;
        var $1=$parser_addr; //@line 2607 "xmlparse.c"
        var $2=$1+356; //@line 2607 "xmlparse.c"
        var $3=HEAP[$2]; //@line 2607 "xmlparse.c"
        $dtd=$3; //@line 2607 "xmlparse.c"
        $attIndex=0; //@line 2611 "xmlparse.c"
        $nPrefixes=0; //@line 2616 "xmlparse.c"
        var $4=$tagNamePtr_addr; //@line 2621 "xmlparse.c"
        var $5=$4; //@line 2621 "xmlparse.c"
        var $6=HEAP[$5]; //@line 2621 "xmlparse.c"
        var $7=$dtd; //@line 2621 "xmlparse.c"
        var $8=$7+20; //@line 2621 "xmlparse.c"
        var $9=_lookup($8, $6, 0); //@line 2621 "xmlparse.c"
        var $10=$9; //@line 2621 "xmlparse.c"
        $elementType=$10; //@line 2621 "xmlparse.c"
        var $11=$elementType; //@line 2622 "xmlparse.c"
        var $12=($11)==0; //@line 2622 "xmlparse.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 8; break; } //@line 2622 "xmlparse.c"
      case 1: // $bb
        var $13=$tagNamePtr_addr; //@line 2623 "xmlparse.c"
        var $14=$13; //@line 2623 "xmlparse.c"
        var $15=HEAP[$14]; //@line 2623 "xmlparse.c"
        var $16=$dtd; //@line 2623 "xmlparse.c"
        var $17=$16+80; //@line 2623 "xmlparse.c"
        var $18=_poolCopyString($17, $15); //@line 2623 "xmlparse.c"
        $name=$18; //@line 2623 "xmlparse.c"
        var $19=$name; //@line 2624 "xmlparse.c"
        var $20=($19)==0; //@line 2624 "xmlparse.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2624 "xmlparse.c"
      case 2: // $bb1
        $0=1; //@line 2625 "xmlparse.c"
        __label__ = 144; break; //@line 2625 "xmlparse.c"
      case 3: // $bb2
        var $21=$dtd; //@line 2626 "xmlparse.c"
        var $22=$21+20; //@line 2626 "xmlparse.c"
        var $23=$name; //@line 2626 "xmlparse.c"
        var $24=_lookup($22, $23, 24); //@line 2626 "xmlparse.c"
        var $25=$24; //@line 2626 "xmlparse.c"
        $elementType=$25; //@line 2626 "xmlparse.c"
        var $26=$elementType; //@line 2628 "xmlparse.c"
        var $27=($26)==0; //@line 2628 "xmlparse.c"
        if ($27) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2628 "xmlparse.c"
      case 4: // $bb3
        $0=1; //@line 2629 "xmlparse.c"
        __label__ = 144; break; //@line 2629 "xmlparse.c"
      case 5: // $bb4
        var $28=$parser_addr; //@line 2630 "xmlparse.c"
        var $29=$28+236; //@line 2630 "xmlparse.c"
        var $30=HEAP[$29]; //@line 2630 "xmlparse.c"
        var $31=($30)!=0; //@line 2630 "xmlparse.c"
        if ($31) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 2630 "xmlparse.c"
      case 6: // $bb5
        var $32=$parser_addr; //@line 2630 "xmlparse.c"
        var $33=$elementType; //@line 2630 "xmlparse.c"
        var $34=_setElementTypePrefix($32, $33); //@line 2630 "xmlparse.c"
        var $35=($34)==0; //@line 2630 "xmlparse.c"
        if ($35) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2630 "xmlparse.c"
      case 7: // $bb6
        $0=1; //@line 2631 "xmlparse.c"
        __label__ = 144; break; //@line 2631 "xmlparse.c"
      case 8: // $bb7
        var $36=$elementType; //@line 2633 "xmlparse.c"
        var $37=$36+12; //@line 2633 "xmlparse.c"
        var $38=HEAP[$37]; //@line 2633 "xmlparse.c"
        $nDefaultAtts=$38; //@line 2633 "xmlparse.c"
        var $39=$enc_addr; //@line 2636 "xmlparse.c"
        var $40=$39+40; //@line 2636 "xmlparse.c"
        var $41=HEAP[$40]; //@line 2636 "xmlparse.c"
        var $42=$parser_addr; //@line 2636 "xmlparse.c"
        var $43=$42+392; //@line 2636 "xmlparse.c"
        var $44=HEAP[$43]; //@line 2636 "xmlparse.c"
        var $45=$parser_addr; //@line 2636 "xmlparse.c"
        var $46=$45+380; //@line 2636 "xmlparse.c"
        var $47=HEAP[$46]; //@line 2636 "xmlparse.c"
        var $48=$enc_addr; //@line 2636 "xmlparse.c"
        var $49=$attStr_addr; //@line 2636 "xmlparse.c"
        var $50=FUNCTION_TABLE[$41]($48, $49, $47, $44); //@line 2636 "xmlparse.c"
        $n=$50; //@line 2636 "xmlparse.c"
        var $51=$n; //@line 2637 "xmlparse.c"
        var $52=$nDefaultAtts; //@line 2637 "xmlparse.c"
        var $53=($52) + ($51); //@line 2637 "xmlparse.c"
        var $54=$parser_addr; //@line 2637 "xmlparse.c"
        var $55=$54+380; //@line 2637 "xmlparse.c"
        var $56=HEAP[$55]; //@line 2637 "xmlparse.c"
        var $57=($53) > ($56); //@line 2637 "xmlparse.c"
        if ($57) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 2637 "xmlparse.c"
      case 9: // $bb8
        var $58=$parser_addr; //@line 2638 "xmlparse.c"
        var $59=$58+380; //@line 2638 "xmlparse.c"
        var $60=HEAP[$59]; //@line 2638 "xmlparse.c"
        $oldAttsSize=$60; //@line 2638 "xmlparse.c"
        var $61=$n; //@line 2640 "xmlparse.c"
        var $62=$nDefaultAtts; //@line 2640 "xmlparse.c"
        var $63=($61) + 16; //@line 2640 "xmlparse.c"
        var $64=($63) + ($62); //@line 2640 "xmlparse.c"
        var $65=$parser_addr; //@line 2640 "xmlparse.c"
        var $66=$65+380; //@line 2640 "xmlparse.c"
        HEAP[$66]=$64; //@line 2640 "xmlparse.c"
        var $67=$parser_addr; //@line 2641 "xmlparse.c"
        var $68=$67+12; //@line 2641 "xmlparse.c"
        var $69=$68+4; //@line 2641 "xmlparse.c"
        var $70=HEAP[$69]; //@line 2641 "xmlparse.c"
        var $71=$parser_addr; //@line 2641 "xmlparse.c"
        var $72=$71+380; //@line 2641 "xmlparse.c"
        var $73=HEAP[$72]; //@line 2641 "xmlparse.c"
        var $74=($73) * 16; //@line 2641 "xmlparse.c"
        var $75=$parser_addr; //@line 2641 "xmlparse.c"
        var $76=$75+392; //@line 2641 "xmlparse.c"
        var $77=HEAP[$76]; //@line 2641 "xmlparse.c"
        var $78=$77; //@line 2641 "xmlparse.c"
        var $79=FUNCTION_TABLE[$70]($78, $74); //@line 2641 "xmlparse.c"
        var $80=$79; //@line 2641 "xmlparse.c"
        $temp=$80; //@line 2641 "xmlparse.c"
        var $81=$temp; //@line 2642 "xmlparse.c"
        var $82=($81)==0; //@line 2642 "xmlparse.c"
        if ($82) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2642 "xmlparse.c"
      case 10: // $bb9
        $0=1; //@line 2643 "xmlparse.c"
        __label__ = 144; break; //@line 2643 "xmlparse.c"
      case 11: // $bb10
        var $83=$parser_addr; //@line 2644 "xmlparse.c"
        var $84=$83+392; //@line 2644 "xmlparse.c"
        var $85=$temp; //@line 2644 "xmlparse.c"
        HEAP[$84]=$85; //@line 2644 "xmlparse.c"
        var $86=$n; //@line 2645 "xmlparse.c"
        var $87=$oldAttsSize; //@line 2645 "xmlparse.c"
        var $88=($86) > ($87); //@line 2645 "xmlparse.c"
        if ($88) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2645 "xmlparse.c"
      case 12: // $bb11
        var $89=$enc_addr; //@line 2646 "xmlparse.c"
        var $90=$89+40; //@line 2646 "xmlparse.c"
        var $91=HEAP[$90]; //@line 2646 "xmlparse.c"
        var $92=$parser_addr; //@line 2646 "xmlparse.c"
        var $93=$92+392; //@line 2646 "xmlparse.c"
        var $94=HEAP[$93]; //@line 2646 "xmlparse.c"
        var $95=$enc_addr; //@line 2646 "xmlparse.c"
        var $96=$attStr_addr; //@line 2646 "xmlparse.c"
        var $97=$n; //@line 2646 "xmlparse.c"
        var $98=FUNCTION_TABLE[$91]($95, $96, $97, $94); //@line 2646 "xmlparse.c"
        __label__ = 13; break; //@line 2646 "xmlparse.c"
      case 13: // $bb12
        var $99=$parser_addr; //@line 2649 "xmlparse.c"
        var $100=$99+392; //@line 2649 "xmlparse.c"
        var $101=HEAP[$100]; //@line 2649 "xmlparse.c"
        var $102=$101; //@line 2649 "xmlparse.c"
        $appAtts=$102; //@line 2649 "xmlparse.c"
        $i=0; //@line 2650 "xmlparse.c"
        __label__ = 41; break; //@line 2650 "xmlparse.c"
      case 14: // $bb13
        var $103=$309+392; //@line 2654 "xmlparse.c"
        var $104=HEAP[$103]; //@line 2654 "xmlparse.c"
        var $105=$i; //@line 2654 "xmlparse.c"
        var $106=$104+16*$105; //@line 2654 "xmlparse.c"
        var $107=$106; //@line 2654 "xmlparse.c"
        var $108=HEAP[$107]; //@line 2654 "xmlparse.c"
        var $109=$enc_addr; //@line 2654 "xmlparse.c"
        var $110=$109+32; //@line 2654 "xmlparse.c"
        var $111=HEAP[$110]; //@line 2654 "xmlparse.c"
        var $112=$parser_addr; //@line 2654 "xmlparse.c"
        var $113=$112+392; //@line 2654 "xmlparse.c"
        var $114=HEAP[$113]; //@line 2654 "xmlparse.c"
        var $115=$i; //@line 2654 "xmlparse.c"
        var $116=$114+16*$115; //@line 2654 "xmlparse.c"
        var $117=$116; //@line 2654 "xmlparse.c"
        var $118=HEAP[$117]; //@line 2654 "xmlparse.c"
        var $119=$enc_addr; //@line 2654 "xmlparse.c"
        var $120=FUNCTION_TABLE[$111]($119, $118); //@line 2654 "xmlparse.c"
        var $121=$108+$120; //@line 2654 "xmlparse.c"
        var $122=$parser_addr; //@line 2654 "xmlparse.c"
        var $123=$122+392; //@line 2654 "xmlparse.c"
        var $124=HEAP[$123]; //@line 2654 "xmlparse.c"
        var $125=$i; //@line 2654 "xmlparse.c"
        var $126=$124+16*$125; //@line 2654 "xmlparse.c"
        var $127=$126; //@line 2654 "xmlparse.c"
        var $128=HEAP[$127]; //@line 2654 "xmlparse.c"
        var $129=$parser_addr; //@line 2654 "xmlparse.c"
        var $130=$enc_addr; //@line 2654 "xmlparse.c"
        var $131=_getAttributeId($129, $130, $128, $121); //@line 2654 "xmlparse.c"
        $attId=$131; //@line 2654 "xmlparse.c"
        var $132=$attId; //@line 2655 "xmlparse.c"
        var $133=($132)==0; //@line 2655 "xmlparse.c"
        if ($133) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2655 "xmlparse.c"
      case 15: // $bb14
        $0=1; //@line 2656 "xmlparse.c"
        __label__ = 144; break; //@line 2656 "xmlparse.c"
      case 16: // $bb15
        var $134=$attId; //@line 2661 "xmlparse.c"
        var $135=$134; //@line 2661 "xmlparse.c"
        var $136=HEAP[$135]; //@line 2661 "xmlparse.c"
        var $137=$136+-1; //@line 2661 "xmlparse.c"
        var $138=HEAP[$137]; //@line 2661 "xmlparse.c"
        var $139=($138)!=0; //@line 2661 "xmlparse.c"
        if ($139) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 2661 "xmlparse.c"
      case 17: // $bb16
        var $140=$parser_addr; //@line 2662 "xmlparse.c"
        var $141=$140+144; //@line 2662 "xmlparse.c"
        var $142=HEAP[$141]; //@line 2662 "xmlparse.c"
        var $143=$enc_addr; //@line 2662 "xmlparse.c"
        var $144=($142)==($143); //@line 2662 "xmlparse.c"
        if ($144) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 2662 "xmlparse.c"
      case 18: // $bb17
        var $145=$parser_addr; //@line 2663 "xmlparse.c"
        var $146=$145+392; //@line 2663 "xmlparse.c"
        var $147=HEAP[$146]; //@line 2663 "xmlparse.c"
        var $148=$i; //@line 2663 "xmlparse.c"
        var $149=$147+16*$148; //@line 2663 "xmlparse.c"
        var $150=$149; //@line 2663 "xmlparse.c"
        var $151=HEAP[$150]; //@line 2663 "xmlparse.c"
        var $152=$parser_addr; //@line 2663 "xmlparse.c"
        var $153=$152+288; //@line 2663 "xmlparse.c"
        HEAP[$153]=$151; //@line 2663 "xmlparse.c"
        __label__ = 19; break; //@line 2663 "xmlparse.c"
      case 19: // $bb18
        $0=8; //@line 2664 "xmlparse.c"
        __label__ = 144; break; //@line 2664 "xmlparse.c"
      case 20: // $bb19
        var $154=$attId; //@line 2666 "xmlparse.c"
        var $155=$154; //@line 2666 "xmlparse.c"
        var $156=HEAP[$155]; //@line 2666 "xmlparse.c"
        var $157=$156+-1; //@line 2666 "xmlparse.c"
        HEAP[$157]=1; //@line 2666 "xmlparse.c"
        var $158=$attId; //@line 2667 "xmlparse.c"
        var $159=$158; //@line 2667 "xmlparse.c"
        var $160=HEAP[$159]; //@line 2667 "xmlparse.c"
        var $161=$appAtts; //@line 2667 "xmlparse.c"
        var $162=$attIndex; //@line 2667 "xmlparse.c"
        var $163=$161+4*$162; //@line 2667 "xmlparse.c"
        HEAP[$163]=$160; //@line 2667 "xmlparse.c"
        var $164=$attIndex; //@line 2667 "xmlparse.c"
        var $165=($164) + 1; //@line 2667 "xmlparse.c"
        $attIndex=$165; //@line 2667 "xmlparse.c"
        var $166=$parser_addr; //@line 2668 "xmlparse.c"
        var $167=$166+392; //@line 2668 "xmlparse.c"
        var $168=HEAP[$167]; //@line 2668 "xmlparse.c"
        var $169=$i; //@line 2668 "xmlparse.c"
        var $170=$168+16*$169; //@line 2668 "xmlparse.c"
        var $171=$170+12; //@line 2668 "xmlparse.c"
        var $172=HEAP[$171]; //@line 2668 "xmlparse.c"
        var $173=($172)==0; //@line 2668 "xmlparse.c"
        if ($173) { __label__ = 21; break; } else { __label__ = 30; break; } //@line 2668 "xmlparse.c"
      case 21: // $bb20
        $isCdata=1; //@line 2670 "xmlparse.c"
        var $174=$attId; //@line 2673 "xmlparse.c"
        var $175=$174+8; //@line 2673 "xmlparse.c"
        var $176=HEAP[$175]; //@line 2673 "xmlparse.c"
        var $177=($176)!=0; //@line 2673 "xmlparse.c"
        if ($177) { __label__ = 22; break; } else { __label__ = 27; break; } //@line 2673 "xmlparse.c"
      case 22: // $bb21
        $j=0; //@line 2675 "xmlparse.c"
        __label__ = 26; break; //@line 2675 "xmlparse.c"
      case 23: // $bb22
        var $178=$elementType; //@line 2676 "xmlparse.c"
        var $179=$178+20; //@line 2676 "xmlparse.c"
        var $180=HEAP[$179]; //@line 2676 "xmlparse.c"
        var $181=$j; //@line 2676 "xmlparse.c"
        var $182=$180+12*$181; //@line 2676 "xmlparse.c"
        var $183=$182; //@line 2676 "xmlparse.c"
        var $184=HEAP[$183]; //@line 2676 "xmlparse.c"
        var $185=$attId; //@line 2676 "xmlparse.c"
        var $186=($184)==($185); //@line 2676 "xmlparse.c"
        if ($186) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 2676 "xmlparse.c"
      case 24: // $bb23
        var $187=$elementType; //@line 2677 "xmlparse.c"
        var $188=$187+20; //@line 2677 "xmlparse.c"
        var $189=HEAP[$188]; //@line 2677 "xmlparse.c"
        var $190=$j; //@line 2677 "xmlparse.c"
        var $191=$189+12*$190; //@line 2677 "xmlparse.c"
        var $192=$191+4; //@line 2677 "xmlparse.c"
        var $193=HEAP[$192]; //@line 2677 "xmlparse.c"
        $isCdata=$193; //@line 2677 "xmlparse.c"
        __label__ = 27; break; //@line 2677 "xmlparse.c"
      case 25: // $bb24
        var $194=$j; //@line 2675 "xmlparse.c"
        var $195=($194) + 1; //@line 2675 "xmlparse.c"
        $j=$195; //@line 2675 "xmlparse.c"
        __label__ = 26; break; //@line 2675 "xmlparse.c"
      case 26: // $bb25
        var $196=$j; //@line 2675 "xmlparse.c"
        var $197=$nDefaultAtts; //@line 2675 "xmlparse.c"
        var $198=($196) < ($197); //@line 2675 "xmlparse.c"
        if ($198) { __label__ = 23; break; } else { __label__ = 27; break; } //@line 2675 "xmlparse.c"
      case 27: // $bb26
        var $199=$parser_addr; //@line 2684 "xmlparse.c"
        var $200=$199+416; //@line 2684 "xmlparse.c"
        var $201=$parser_addr; //@line 2684 "xmlparse.c"
        var $202=$201+392; //@line 2684 "xmlparse.c"
        var $203=HEAP[$202]; //@line 2684 "xmlparse.c"
        var $204=$i; //@line 2684 "xmlparse.c"
        var $205=$203+16*$204; //@line 2684 "xmlparse.c"
        var $206=$205+8; //@line 2684 "xmlparse.c"
        var $207=HEAP[$206]; //@line 2684 "xmlparse.c"
        var $208=$parser_addr; //@line 2684 "xmlparse.c"
        var $209=$208+392; //@line 2684 "xmlparse.c"
        var $210=HEAP[$209]; //@line 2684 "xmlparse.c"
        var $211=$i; //@line 2684 "xmlparse.c"
        var $212=$210+16*$211; //@line 2684 "xmlparse.c"
        var $213=$212+4; //@line 2684 "xmlparse.c"
        var $214=HEAP[$213]; //@line 2684 "xmlparse.c"
        var $215=$isCdata; //@line 2684 "xmlparse.c"
        var $216=($215); //@line 2684 "xmlparse.c"
        var $217=$parser_addr; //@line 2684 "xmlparse.c"
        var $218=$enc_addr; //@line 2684 "xmlparse.c"
        var $219=((($216)) & 255); //@line 2684 "xmlparse.c"
        var $220=_storeAttributeValue($217, $218, $219, $214, $207, $200); //@line 2684 "xmlparse.c"
        $result=$220; //@line 2684 "xmlparse.c"
        var $221=($220)!=0; //@line 2687 "xmlparse.c"
        if ($221) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 2687 "xmlparse.c"
      case 28: // $bb27
        var $222=$result; //@line 2688 "xmlparse.c"
        $0=$222; //@line 2688 "xmlparse.c"
        __label__ = 144; break; //@line 2688 "xmlparse.c"
      case 29: // $bb28
        var $223=$parser_addr; //@line 2689 "xmlparse.c"
        var $224=$223+416; //@line 2689 "xmlparse.c"
        var $225=$224+16; //@line 2689 "xmlparse.c"
        var $226=HEAP[$225]; //@line 2689 "xmlparse.c"
        var $227=$appAtts; //@line 2689 "xmlparse.c"
        var $228=$attIndex; //@line 2689 "xmlparse.c"
        var $229=$227+4*$228; //@line 2689 "xmlparse.c"
        HEAP[$229]=$226; //@line 2689 "xmlparse.c"
        var $230=$parser_addr; //@line 2690 "xmlparse.c"
        var $231=$230+416; //@line 2690 "xmlparse.c"
        var $232=$231+12; //@line 2690 "xmlparse.c"
        var $233=HEAP[$232]; //@line 2690 "xmlparse.c"
        var $234=$parser_addr; //@line 2690 "xmlparse.c"
        var $235=$234+416; //@line 2690 "xmlparse.c"
        var $236=$235+16; //@line 2690 "xmlparse.c"
        HEAP[$236]=$233; //@line 2690 "xmlparse.c"
        __label__ = 33; break; //@line 2690 "xmlparse.c"
      case 30: // $bb29
        var $237=$parser_addr; //@line 2694 "xmlparse.c"
        var $238=$237+392; //@line 2694 "xmlparse.c"
        var $239=HEAP[$238]; //@line 2694 "xmlparse.c"
        var $240=$i; //@line 2694 "xmlparse.c"
        var $241=$239+16*$240; //@line 2694 "xmlparse.c"
        var $242=$241+8; //@line 2694 "xmlparse.c"
        var $243=HEAP[$242]; //@line 2694 "xmlparse.c"
        var $244=$parser_addr; //@line 2694 "xmlparse.c"
        var $245=$244+392; //@line 2694 "xmlparse.c"
        var $246=HEAP[$245]; //@line 2694 "xmlparse.c"
        var $247=$i; //@line 2694 "xmlparse.c"
        var $248=$246+16*$247; //@line 2694 "xmlparse.c"
        var $249=$248+4; //@line 2694 "xmlparse.c"
        var $250=HEAP[$249]; //@line 2694 "xmlparse.c"
        var $251=$parser_addr; //@line 2694 "xmlparse.c"
        var $252=$251+416; //@line 2694 "xmlparse.c"
        var $253=$enc_addr; //@line 2694 "xmlparse.c"
        var $254=_poolStoreString($252, $253, $250, $243); //@line 2694 "xmlparse.c"
        var $255=$appAtts; //@line 2694 "xmlparse.c"
        var $256=$attIndex; //@line 2694 "xmlparse.c"
        var $257=$255+4*$256; //@line 2694 "xmlparse.c"
        HEAP[$257]=$254; //@line 2694 "xmlparse.c"
        var $258=$appAtts; //@line 2696 "xmlparse.c"
        var $259=$attIndex; //@line 2696 "xmlparse.c"
        var $260=$258+4*$259; //@line 2696 "xmlparse.c"
        var $261=HEAP[$260]; //@line 2696 "xmlparse.c"
        var $262=($261)==0; //@line 2696 "xmlparse.c"
        if ($262) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 2696 "xmlparse.c"
      case 31: // $bb30
        $0=1; //@line 2697 "xmlparse.c"
        __label__ = 144; break; //@line 2697 "xmlparse.c"
      case 32: // $bb31
        var $263=$parser_addr; //@line 2698 "xmlparse.c"
        var $264=$263+416; //@line 2698 "xmlparse.c"
        var $265=$264+12; //@line 2698 "xmlparse.c"
        var $266=HEAP[$265]; //@line 2698 "xmlparse.c"
        var $267=$parser_addr; //@line 2698 "xmlparse.c"
        var $268=$267+416; //@line 2698 "xmlparse.c"
        var $269=$268+16; //@line 2698 "xmlparse.c"
        HEAP[$269]=$266; //@line 2698 "xmlparse.c"
        __label__ = 33; break; //@line 2698 "xmlparse.c"
      case 33: // $bb32
        var $270=$attId; //@line 2701 "xmlparse.c"
        var $271=$270+4; //@line 2701 "xmlparse.c"
        var $272=HEAP[$271]; //@line 2701 "xmlparse.c"
        var $273=($272)!=0; //@line 2701 "xmlparse.c"
        if ($273) { __label__ = 34; break; } else { __label__ = 39; break; } //@line 2701 "xmlparse.c"
      case 34: // $bb33
        var $274=$attId; //@line 2702 "xmlparse.c"
        var $275=$274+9; //@line 2702 "xmlparse.c"
        var $276=HEAP[$275]; //@line 2702 "xmlparse.c"
        var $277=($276)!=0; //@line 2702 "xmlparse.c"
        if ($277) { __label__ = 35; break; } else { __label__ = 38; break; } //@line 2702 "xmlparse.c"
      case 35: // $bb34
        var $278=$appAtts; //@line 2705 "xmlparse.c"
        var $279=$attIndex; //@line 2705 "xmlparse.c"
        var $280=$278+4*$279; //@line 2705 "xmlparse.c"
        var $281=HEAP[$280]; //@line 2705 "xmlparse.c"
        var $282=$attId; //@line 2705 "xmlparse.c"
        var $283=$282+4; //@line 2705 "xmlparse.c"
        var $284=HEAP[$283]; //@line 2705 "xmlparse.c"
        var $285=$parser_addr; //@line 2705 "xmlparse.c"
        var $286=$attId; //@line 2705 "xmlparse.c"
        var $287=$bindingsPtr_addr; //@line 2705 "xmlparse.c"
        var $288=_addBinding($285, $284, $286, $281, $287); //@line 2705 "xmlparse.c"
        $result35=$288; //@line 2705 "xmlparse.c"
        var $289=$result35; //@line 2706 "xmlparse.c"
        var $290=($289)!=0; //@line 2706 "xmlparse.c"
        if ($290) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 2706 "xmlparse.c"
      case 36: // $bb36
        var $291=$result35; //@line 2707 "xmlparse.c"
        $0=$291; //@line 2707 "xmlparse.c"
        __label__ = 144; break; //@line 2707 "xmlparse.c"
      case 37: // $bb37
        var $292=$attIndex; //@line 2708 "xmlparse.c"
        var $293=($292) - 1; //@line 2708 "xmlparse.c"
        $attIndex=$293; //@line 2708 "xmlparse.c"
        __label__ = 40; break; //@line 2708 "xmlparse.c"
      case 38: // $bb38
        var $294=$attIndex; //@line 2712 "xmlparse.c"
        var $295=($294) + 1; //@line 2712 "xmlparse.c"
        $attIndex=$295; //@line 2712 "xmlparse.c"
        var $296=$nPrefixes; //@line 2713 "xmlparse.c"
        var $297=($296) + 1; //@line 2713 "xmlparse.c"
        $nPrefixes=$297; //@line 2713 "xmlparse.c"
        var $298=$attId; //@line 2714 "xmlparse.c"
        var $299=$298; //@line 2714 "xmlparse.c"
        var $300=HEAP[$299]; //@line 2714 "xmlparse.c"
        var $301=$300+-1; //@line 2714 "xmlparse.c"
        HEAP[$301]=2; //@line 2714 "xmlparse.c"
        __label__ = 40; break; //@line 2714 "xmlparse.c"
      case 39: // $bb40
        var $302=$attIndex; //@line 2718 "xmlparse.c"
        var $303=($302) + 1; //@line 2718 "xmlparse.c"
        $attIndex=$303; //@line 2718 "xmlparse.c"
        __label__ = 40; break; //@line 2718 "xmlparse.c"
      case 40: // $bb41
        var $304=$i; //@line 2650 "xmlparse.c"
        var $305=($304) + 1; //@line 2650 "xmlparse.c"
        $i=$305; //@line 2650 "xmlparse.c"
        __label__ = 41; break; //@line 2650 "xmlparse.c"
      case 41: // $bb42
        var $306=$i; //@line 2650 "xmlparse.c"
        var $307=$n; //@line 2650 "xmlparse.c"
        var $308=($306) < ($307); //@line 2650 "xmlparse.c"
        var $309=$parser_addr; //@line 2654 "xmlparse.c"
        if ($308) { __label__ = 14; break; } else { __label__ = 42; break; } //@line 2650 "xmlparse.c"
      case 42: // $bb43
        var $310=$309+384; //@line 2722 "xmlparse.c"
        var $311=$attIndex; //@line 2722 "xmlparse.c"
        HEAP[$310]=$311; //@line 2722 "xmlparse.c"
        var $312=$elementType; //@line 2723 "xmlparse.c"
        var $313=$312+8; //@line 2723 "xmlparse.c"
        var $314=HEAP[$313]; //@line 2723 "xmlparse.c"
        var $315=($314)==0; //@line 2723 "xmlparse.c"
        if ($315) { __label__ = 49; break; } else { __label__ = 43; break; } //@line 2723 "xmlparse.c"
      case 43: // $bb44
        var $316=$elementType; //@line 2723 "xmlparse.c"
        var $317=$316+8; //@line 2723 "xmlparse.c"
        var $318=HEAP[$317]; //@line 2723 "xmlparse.c"
        var $319=$318; //@line 2723 "xmlparse.c"
        var $320=HEAP[$319]; //@line 2723 "xmlparse.c"
        var $321=$320+-1; //@line 2723 "xmlparse.c"
        var $322=HEAP[$321]; //@line 2723 "xmlparse.c"
        var $323=($322)==0; //@line 2723 "xmlparse.c"
        if ($323) { __label__ = 49; break; } else { __label__ = 44; break; } //@line 2723 "xmlparse.c"
      case 44: // $bb45
        $i=0; //@line 2724 "xmlparse.c"
        __label__ = 48; break; //@line 2724 "xmlparse.c"
      case 45: // $bb46
        var $324=$appAtts; //@line 2725 "xmlparse.c"
        var $325=$i; //@line 2725 "xmlparse.c"
        var $326=$324+4*$325; //@line 2725 "xmlparse.c"
        var $327=HEAP[$326]; //@line 2725 "xmlparse.c"
        var $328=$elementType; //@line 2725 "xmlparse.c"
        var $329=$328+8; //@line 2725 "xmlparse.c"
        var $330=HEAP[$329]; //@line 2725 "xmlparse.c"
        var $331=$330; //@line 2725 "xmlparse.c"
        var $332=HEAP[$331]; //@line 2725 "xmlparse.c"
        var $333=($327)==($332); //@line 2725 "xmlparse.c"
        if ($333) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 2725 "xmlparse.c"
      case 46: // $bb47
        var $334=$parser_addr; //@line 2726 "xmlparse.c"
        var $335=$334+388; //@line 2726 "xmlparse.c"
        var $336=$i; //@line 2726 "xmlparse.c"
        HEAP[$335]=$336; //@line 2726 "xmlparse.c"
        __label__ = 50; break; //@line 2726 "xmlparse.c"
      case 47: // $bb48
        var $337=$i; //@line 2724 "xmlparse.c"
        var $338=($337) + 2; //@line 2724 "xmlparse.c"
        $i=$338; //@line 2724 "xmlparse.c"
        __label__ = 48; break; //@line 2724 "xmlparse.c"
      case 48: // $bb49
        var $339=$i; //@line 2724 "xmlparse.c"
        var $340=$attIndex; //@line 2724 "xmlparse.c"
        var $341=($339) < ($340); //@line 2724 "xmlparse.c"
        if ($341) { __label__ = 45; break; } else { __label__ = 50; break; } //@line 2724 "xmlparse.c"
      case 49: // $bb51
        var $342=$parser_addr; //@line 2731 "xmlparse.c"
        var $343=$342+388; //@line 2731 "xmlparse.c"
        HEAP[$343]=-1; //@line 2731 "xmlparse.c"
        __label__ = 50; break; //@line 2731 "xmlparse.c"
      case 50: // $bb52
        $i=0; //@line 2734 "xmlparse.c"
        __label__ = 60; break; //@line 2734 "xmlparse.c"
      case 51: // $bb53
        var $344=$elementType; //@line 2735 "xmlparse.c"
        var $345=$344+20; //@line 2735 "xmlparse.c"
        var $346=HEAP[$345]; //@line 2735 "xmlparse.c"
        var $347=$i; //@line 2735 "xmlparse.c"
        var $348=$346+12*$347; //@line 2735 "xmlparse.c"
        $da=$348; //@line 2735 "xmlparse.c"
        var $349=$da; //@line 2736 "xmlparse.c"
        var $350=$349; //@line 2736 "xmlparse.c"
        var $351=HEAP[$350]; //@line 2736 "xmlparse.c"
        var $352=$351; //@line 2736 "xmlparse.c"
        var $353=HEAP[$352]; //@line 2736 "xmlparse.c"
        var $354=$353+-1; //@line 2736 "xmlparse.c"
        var $355=HEAP[$354]; //@line 2736 "xmlparse.c"
        var $356=($355)==0; //@line 2736 "xmlparse.c"
        if ($356) { __label__ = 52; break; } else { __label__ = 59; break; } //@line 2736 "xmlparse.c"
      case 52: // $bb54
        var $357=$da; //@line 2736 "xmlparse.c"
        var $358=$357+8; //@line 2736 "xmlparse.c"
        var $359=HEAP[$358]; //@line 2736 "xmlparse.c"
        var $360=($359)!=0; //@line 2736 "xmlparse.c"
        if ($360) { __label__ = 53; break; } else { __label__ = 59; break; } //@line 2736 "xmlparse.c"
      case 53: // $bb55
        var $361=$da; //@line 2737 "xmlparse.c"
        var $362=$361; //@line 2737 "xmlparse.c"
        var $363=HEAP[$362]; //@line 2737 "xmlparse.c"
        var $364=$363+4; //@line 2737 "xmlparse.c"
        var $365=HEAP[$364]; //@line 2737 "xmlparse.c"
        var $366=($365)!=0; //@line 2737 "xmlparse.c"
        var $367=$da; //@line 2738 "xmlparse.c"
        var $368=$367; //@line 2738 "xmlparse.c"
        var $369=HEAP[$368]; //@line 2738 "xmlparse.c"
        if ($366) { __label__ = 54; break; } else { __label__ = 58; break; } //@line 2737 "xmlparse.c"
      case 54: // $bb56
        var $370=$369+9; //@line 2738 "xmlparse.c"
        var $371=HEAP[$370]; //@line 2738 "xmlparse.c"
        var $372=($371)!=0; //@line 2738 "xmlparse.c"
        var $373=$da; //@line 2740 "xmlparse.c"
        if ($372) { __label__ = 55; break; } else { __label__ = 57; break; } //@line 2738 "xmlparse.c"
      case 55: // $bb57
        var $374=$373+8; //@line 2740 "xmlparse.c"
        var $375=HEAP[$374]; //@line 2740 "xmlparse.c"
        var $376=$da; //@line 2740 "xmlparse.c"
        var $377=$376; //@line 2740 "xmlparse.c"
        var $378=HEAP[$377]; //@line 2740 "xmlparse.c"
        var $379=$da; //@line 2740 "xmlparse.c"
        var $380=$379; //@line 2740 "xmlparse.c"
        var $381=HEAP[$380]; //@line 2740 "xmlparse.c"
        var $382=$381+4; //@line 2740 "xmlparse.c"
        var $383=HEAP[$382]; //@line 2740 "xmlparse.c"
        var $384=$parser_addr; //@line 2740 "xmlparse.c"
        var $385=$bindingsPtr_addr; //@line 2740 "xmlparse.c"
        var $386=_addBinding($384, $383, $378, $375, $385); //@line 2740 "xmlparse.c"
        $result58=$386; //@line 2740 "xmlparse.c"
        var $387=$result58; //@line 2741 "xmlparse.c"
        var $388=($387)!=0; //@line 2741 "xmlparse.c"
        if ($388) { __label__ = 56; break; } else { __label__ = 59; break; } //@line 2741 "xmlparse.c"
      case 56: // $bb59
        var $389=$result58; //@line 2742 "xmlparse.c"
        $0=$389; //@line 2742 "xmlparse.c"
        __label__ = 144; break; //@line 2742 "xmlparse.c"
      case 57: // $bb61
        var $390=$373; //@line 2745 "xmlparse.c"
        var $391=HEAP[$390]; //@line 2745 "xmlparse.c"
        var $392=$391; //@line 2745 "xmlparse.c"
        var $393=HEAP[$392]; //@line 2745 "xmlparse.c"
        var $394=$393+-1; //@line 2745 "xmlparse.c"
        HEAP[$394]=2; //@line 2745 "xmlparse.c"
        var $395=$nPrefixes; //@line 2746 "xmlparse.c"
        var $396=($395) + 1; //@line 2746 "xmlparse.c"
        $nPrefixes=$396; //@line 2746 "xmlparse.c"
        var $397=$da; //@line 2747 "xmlparse.c"
        var $398=$397; //@line 2747 "xmlparse.c"
        var $399=HEAP[$398]; //@line 2747 "xmlparse.c"
        var $400=$399; //@line 2747 "xmlparse.c"
        var $401=HEAP[$400]; //@line 2747 "xmlparse.c"
        var $402=$appAtts; //@line 2747 "xmlparse.c"
        var $403=$attIndex; //@line 2747 "xmlparse.c"
        var $404=$402+4*$403; //@line 2747 "xmlparse.c"
        HEAP[$404]=$401; //@line 2747 "xmlparse.c"
        var $405=$attIndex; //@line 2747 "xmlparse.c"
        var $406=($405) + 1; //@line 2747 "xmlparse.c"
        $attIndex=$406; //@line 2747 "xmlparse.c"
        var $407=$da; //@line 2748 "xmlparse.c"
        var $408=$407+8; //@line 2748 "xmlparse.c"
        var $409=HEAP[$408]; //@line 2748 "xmlparse.c"
        var $410=$appAtts; //@line 2748 "xmlparse.c"
        var $411=$attIndex; //@line 2748 "xmlparse.c"
        var $412=$410+4*$411; //@line 2748 "xmlparse.c"
        HEAP[$412]=$409; //@line 2748 "xmlparse.c"
        var $413=$attIndex; //@line 2748 "xmlparse.c"
        var $414=($413) + 1; //@line 2748 "xmlparse.c"
        $attIndex=$414; //@line 2748 "xmlparse.c"
        __label__ = 59; break; //@line 2748 "xmlparse.c"
      case 58: // $bb63
        var $415=$369; //@line 2752 "xmlparse.c"
        var $416=HEAP[$415]; //@line 2752 "xmlparse.c"
        var $417=$416+-1; //@line 2752 "xmlparse.c"
        HEAP[$417]=1; //@line 2752 "xmlparse.c"
        var $418=$da; //@line 2753 "xmlparse.c"
        var $419=$418; //@line 2753 "xmlparse.c"
        var $420=HEAP[$419]; //@line 2753 "xmlparse.c"
        var $421=$420; //@line 2753 "xmlparse.c"
        var $422=HEAP[$421]; //@line 2753 "xmlparse.c"
        var $423=$appAtts; //@line 2753 "xmlparse.c"
        var $424=$attIndex; //@line 2753 "xmlparse.c"
        var $425=$423+4*$424; //@line 2753 "xmlparse.c"
        HEAP[$425]=$422; //@line 2753 "xmlparse.c"
        var $426=$attIndex; //@line 2753 "xmlparse.c"
        var $427=($426) + 1; //@line 2753 "xmlparse.c"
        $attIndex=$427; //@line 2753 "xmlparse.c"
        var $428=$da; //@line 2754 "xmlparse.c"
        var $429=$428+8; //@line 2754 "xmlparse.c"
        var $430=HEAP[$429]; //@line 2754 "xmlparse.c"
        var $431=$appAtts; //@line 2754 "xmlparse.c"
        var $432=$attIndex; //@line 2754 "xmlparse.c"
        var $433=$431+4*$432; //@line 2754 "xmlparse.c"
        HEAP[$433]=$430; //@line 2754 "xmlparse.c"
        var $434=$attIndex; //@line 2754 "xmlparse.c"
        var $435=($434) + 1; //@line 2754 "xmlparse.c"
        $attIndex=$435; //@line 2754 "xmlparse.c"
        __label__ = 59; break; //@line 2754 "xmlparse.c"
      case 59: // $bb64
        var $436=$i; //@line 2734 "xmlparse.c"
        var $437=($436) + 1; //@line 2734 "xmlparse.c"
        $i=$437; //@line 2734 "xmlparse.c"
        __label__ = 60; break; //@line 2734 "xmlparse.c"
      case 60: // $bb65
        var $438=$i; //@line 2734 "xmlparse.c"
        var $439=$nDefaultAtts; //@line 2734 "xmlparse.c"
        var $440=($438) < ($439); //@line 2734 "xmlparse.c"
        if ($440) { __label__ = 51; break; } else { __label__ = 61; break; } //@line 2734 "xmlparse.c"
      case 61: // $bb66
        var $441=$appAtts; //@line 2758 "xmlparse.c"
        var $442=$attIndex; //@line 2758 "xmlparse.c"
        var $443=$441+4*$442; //@line 2758 "xmlparse.c"
        HEAP[$443]=0; //@line 2758 "xmlparse.c"
        $i=0; //@line 2762 "xmlparse.c"
        var $444=$nPrefixes; //@line 2763 "xmlparse.c"
        var $445=($444)!=0; //@line 2763 "xmlparse.c"
        if ($445) { __label__ = 62; break; } else { __label__ = 114; break; } //@line 2763 "xmlparse.c"
      case 62: // $bb67
        var $446=$parser_addr; //@line 2765 "xmlparse.c"
        var $447=$446+400; //@line 2765 "xmlparse.c"
        var $448=HEAP[$447]; //@line 2765 "xmlparse.c"
        $version=$448; //@line 2765 "xmlparse.c"
        var $449=$parser_addr; //@line 2766 "xmlparse.c"
        var $450=$449+404; //@line 2766 "xmlparse.c"
        var $451=HEAP[$450]; //@line 2766 "xmlparse.c"
        var $452=($451); //@line 2766 "xmlparse.c"
        var $453=1 << ($452); //@line 2766 "xmlparse.c"
        $nsAttsSize=$453; //@line 2766 "xmlparse.c"
        var $454=$nPrefixes; //@line 2768 "xmlparse.c"
        var $455=($454) << 1; //@line 2768 "xmlparse.c"
        var $456=$parser_addr; //@line 2768 "xmlparse.c"
        var $457=$456+404; //@line 2768 "xmlparse.c"
        var $458=HEAP[$457]; //@line 2768 "xmlparse.c"
        var $459=($458); //@line 2768 "xmlparse.c"
        var $460=($455) >> ($459); //@line 2768 "xmlparse.c"
        var $461=($460)!=0; //@line 2768 "xmlparse.c"
        if ($461) { __label__ = 63; break; } else { __label__ = 69; break; } //@line 2768 "xmlparse.c"
      case 63: // $bb69
        var $462=$parser_addr; //@line 2771 "xmlparse.c"
        var $463=$462+404; //@line 2771 "xmlparse.c"
        var $464=HEAP[$463]; //@line 2771 "xmlparse.c"
        var $465=($464); //@line 2771 "xmlparse.c"
        var $466=$nPrefixes; //@line 2771 "xmlparse.c"
        var $467=($466) >> ($465); //@line 2771 "xmlparse.c"
        var $468=($467)!=0; //@line 2771 "xmlparse.c"
        var $469=($468); //@line 2771 "xmlparse.c"
        var $470=($464) + 1; //@line 2771 "xmlparse.c"
        var $471=$parser_addr; //@line 2771 "xmlparse.c"
        var $472=$471+404; //@line 2771 "xmlparse.c"
        HEAP[$472]=$470; //@line 2771 "xmlparse.c"
        var $toBool=($469)!=0; //@line 2771 "xmlparse.c"
        if ($toBool) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 2771 "xmlparse.c"
      case 64: // $bb71
        var $473=$parser_addr; //@line 2772 "xmlparse.c"
        var $474=$473+404; //@line 2772 "xmlparse.c"
        var $475=HEAP[$474]; //@line 2772 "xmlparse.c"
        var $476=($475) <= 2; //@line 2772 "xmlparse.c"
        if ($476) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 2772 "xmlparse.c"
      case 65: // $bb72
        var $477=$parser_addr; //@line 2773 "xmlparse.c"
        var $478=$477+404; //@line 2773 "xmlparse.c"
        HEAP[$478]=3; //@line 2773 "xmlparse.c"
        __label__ = 66; break; //@line 2773 "xmlparse.c"
      case 66: // $bb73
        var $479=$parser_addr; //@line 2774 "xmlparse.c"
        var $480=$479+404; //@line 2774 "xmlparse.c"
        var $481=HEAP[$480]; //@line 2774 "xmlparse.c"
        var $482=($481); //@line 2774 "xmlparse.c"
        var $483=1 << ($482); //@line 2774 "xmlparse.c"
        $nsAttsSize=$483; //@line 2774 "xmlparse.c"
        var $484=$parser_addr; //@line 2775 "xmlparse.c"
        var $485=$484+12; //@line 2775 "xmlparse.c"
        var $486=$485+4; //@line 2775 "xmlparse.c"
        var $487=HEAP[$486]; //@line 2775 "xmlparse.c"
        var $488=$nsAttsSize; //@line 2775 "xmlparse.c"
        var $489=($488) * 12; //@line 2775 "xmlparse.c"
        var $490=$parser_addr; //@line 2775 "xmlparse.c"
        var $491=$490+396; //@line 2775 "xmlparse.c"
        var $492=HEAP[$491]; //@line 2775 "xmlparse.c"
        var $493=$492; //@line 2775 "xmlparse.c"
        var $494=FUNCTION_TABLE[$487]($493, $489); //@line 2775 "xmlparse.c"
        var $495=$494; //@line 2775 "xmlparse.c"
        $temp70=$495; //@line 2775 "xmlparse.c"
        var $496=($495)==0; //@line 2776 "xmlparse.c"
        if ($496) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 2776 "xmlparse.c"
      case 67: // $bb74
        $0=1; //@line 2777 "xmlparse.c"
        __label__ = 144; break; //@line 2777 "xmlparse.c"
      case 68: // $bb76_thread
        var $497=$parser_addr; //@line 2778 "xmlparse.c"
        var $498=$497+396; //@line 2778 "xmlparse.c"
        var $499=$temp70; //@line 2778 "xmlparse.c"
        HEAP[$498]=$499; //@line 2778 "xmlparse.c"
        $version=0; //@line 2779 "xmlparse.c"
        __label__ = 70; break;
      case 69: // $bb76
        var $_pr=$version;
        var $500=($_pr)==0; //@line 2782 "xmlparse.c"
        if ($500) { __label__ = 70; break; } else { __label__ = 72; break; } //@line 2782 "xmlparse.c"
      case 70: // $bb77
        $version=-1; //@line 2783 "xmlparse.c"
        var $501=$nsAttsSize; //@line 2784 "xmlparse.c"
        $j68=$501; //@line 2784 "xmlparse.c"
        var $502=($501)!=0; //@line 2784 "xmlparse.c"
        if ($502) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 2784 "xmlparse.c"
      case 71: // $bb78
        var $503=$parser_addr; //@line 2785 "xmlparse.c"
        var $504=$503+396; //@line 2785 "xmlparse.c"
        var $505=HEAP[$504]; //@line 2785 "xmlparse.c"
        var $506=$j68; //@line 2785 "xmlparse.c"
        var $507=($506) - 1; //@line 2785 "xmlparse.c"
        $j68=$507; //@line 2785 "xmlparse.c"
        var $508=$j68; //@line 2785 "xmlparse.c"
        var $509=$505+12*$508; //@line 2785 "xmlparse.c"
        var $510=$509; //@line 2785 "xmlparse.c"
        var $511=$version; //@line 2785 "xmlparse.c"
        HEAP[$510]=$511; //@line 2785 "xmlparse.c"
        var $_pr1=$j68;
        var $512=($_pr1)!=0; //@line 2784 "xmlparse.c"
        if ($512) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 2784 "xmlparse.c"
      case 72: // $bb80
        var $513=$version; //@line 2787 "xmlparse.c"
        var $514=($513) - 1; //@line 2787 "xmlparse.c"
        $version=$514; //@line 2787 "xmlparse.c"
        var $515=$parser_addr; //@line 2787 "xmlparse.c"
        var $516=$515+400; //@line 2787 "xmlparse.c"
        var $517=$version; //@line 2787 "xmlparse.c"
        HEAP[$516]=$517; //@line 2787 "xmlparse.c"
        __label__ = 113; break; //@line 2787 "xmlparse.c"
      case 73: // $bb81
        var $518=$appAtts; //@line 2791 "xmlparse.c"
        var $519=$i; //@line 2791 "xmlparse.c"
        var $520=$518+4*$519; //@line 2791 "xmlparse.c"
        var $521=HEAP[$520]; //@line 2791 "xmlparse.c"
        $s=$521; //@line 2791 "xmlparse.c"
        var $522=$s; //@line 2792 "xmlparse.c"
        var $523=$522+-1; //@line 2792 "xmlparse.c"
        var $524=HEAP[$523]; //@line 2792 "xmlparse.c"
        var $525=($524)==2; //@line 2792 "xmlparse.c"
        if ($525) { __label__ = 74; break; } else { __label__ = 111; break; } //@line 2792 "xmlparse.c"
      case 74: // $bb82
        $uriHash=0; //@line 2795 "xmlparse.c"
        var $526=$s; //@line 2796 "xmlparse.c"
        var $527=$526+-1; //@line 2796 "xmlparse.c"
        HEAP[$527]=0; //@line 2796 "xmlparse.c"
        var $528=$dtd; //@line 2797 "xmlparse.c"
        var $529=$528+40; //@line 2797 "xmlparse.c"
        var $530=$s; //@line 2797 "xmlparse.c"
        var $531=_lookup($529, $530, 0); //@line 2797 "xmlparse.c"
        var $532=$531; //@line 2797 "xmlparse.c"
        $id=$532; //@line 2797 "xmlparse.c"
        var $533=$id; //@line 2798 "xmlparse.c"
        var $534=($533)==0; //@line 2798 "xmlparse.c"
        if ($534) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 2798 "xmlparse.c"
      case 75: // $bb83
        $0=1; //@line 2799 "xmlparse.c"
        __label__ = 144; break; //@line 2799 "xmlparse.c"
      case 76: // $bb84
        var $535=$id; //@line 2800 "xmlparse.c"
        var $536=$535+4; //@line 2800 "xmlparse.c"
        var $537=HEAP[$536]; //@line 2800 "xmlparse.c"
        var $538=$537+4; //@line 2800 "xmlparse.c"
        var $539=HEAP[$538]; //@line 2800 "xmlparse.c"
        $b=$539; //@line 2800 "xmlparse.c"
        var $540=$b; //@line 2801 "xmlparse.c"
        var $541=($540)==0; //@line 2801 "xmlparse.c"
        if ($541) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 2801 "xmlparse.c"
      case 77: // $bb85
        $0=27; //@line 2802 "xmlparse.c"
        __label__ = 144; break; //@line 2802 "xmlparse.c"
      case 78: // $bb86
        $j68=0; //@line 2805 "xmlparse.c"
        __label__ = 83; break; //@line 2805 "xmlparse.c"
      case 79: // $bb87
        var $542=$b; //@line 2806 "xmlparse.c"
        var $543=$542+16; //@line 2806 "xmlparse.c"
        var $544=HEAP[$543]; //@line 2806 "xmlparse.c"
        var $545=$j68; //@line 2806 "xmlparse.c"
        var $546=$544+$545; //@line 2806 "xmlparse.c"
        var $547=HEAP[$546]; //@line 2806 "xmlparse.c"
        $c=$547; //@line 2806 "xmlparse.c"
        var $548=$parser_addr; //@line 2807 "xmlparse.c"
        var $549=$548+416; //@line 2807 "xmlparse.c"
        var $550=$549+12; //@line 2807 "xmlparse.c"
        var $551=HEAP[$550]; //@line 2807 "xmlparse.c"
        var $552=$parser_addr; //@line 2807 "xmlparse.c"
        var $553=$552+416; //@line 2807 "xmlparse.c"
        var $554=$553+8; //@line 2807 "xmlparse.c"
        var $555=HEAP[$554]; //@line 2807 "xmlparse.c"
        var $556=($551)!=($555); //@line 2807 "xmlparse.c"
        if ($556) { __label__ = 82; break; } else { __label__ = 80; break; } //@line 2807 "xmlparse.c"
      case 80: // $bb88
        var $557=$parser_addr; //@line 2807 "xmlparse.c"
        var $558=$557+416; //@line 2807 "xmlparse.c"
        var $559=_poolGrow($558); //@line 2807 "xmlparse.c"
        var $560=($559)!=0; //@line 2807 "xmlparse.c"
        if ($560) { __label__ = 82; break; } else { __label__ = 81; break; } //@line 2807 "xmlparse.c"
      case 81: // $bb93
        $iftmp_100=1; //@line 2807 "xmlparse.c"
        $0=1; //@line 2808 "xmlparse.c"
        __label__ = 144; break; //@line 2808 "xmlparse.c"
      case 82: // $bb94
        var $561=$parser_addr; //@line 2807 "xmlparse.c"
        var $562=$561+416; //@line 2807 "xmlparse.c"
        var $563=$562+12; //@line 2807 "xmlparse.c"
        var $564=HEAP[$563]; //@line 2807 "xmlparse.c"
        var $565=$c; //@line 2807 "xmlparse.c"
        HEAP[$564]=$565; //@line 2807 "xmlparse.c"
        var $566=$564+1; //@line 2807 "xmlparse.c"
        var $567=$parser_addr; //@line 2807 "xmlparse.c"
        var $568=$567+416; //@line 2807 "xmlparse.c"
        var $569=$568+12; //@line 2807 "xmlparse.c"
        HEAP[$569]=$566; //@line 2807 "xmlparse.c"
        $iftmp_100=0; //@line 2807 "xmlparse.c"
        var $570=$uriHash; //@line 2809 "xmlparse.c"
        var $571=($570) * 1000003; //@line 2809 "xmlparse.c"
        var $572=$c; //@line 2809 "xmlparse.c"
        var $573=($572); //@line 2809 "xmlparse.c"
        var $574=($573) ^ ($571); //@line 2809 "xmlparse.c"
        $uriHash=$574; //@line 2809 "xmlparse.c"
        var $575=$j68; //@line 2805 "xmlparse.c"
        var $576=($575) + 1; //@line 2805 "xmlparse.c"
        $j68=$576; //@line 2805 "xmlparse.c"
        __label__ = 83; break; //@line 2805 "xmlparse.c"
      case 83: // $bb95
        var $577=$b; //@line 2805 "xmlparse.c"
        var $578=$577+20; //@line 2805 "xmlparse.c"
        var $579=HEAP[$578]; //@line 2805 "xmlparse.c"
        var $580=$j68; //@line 2805 "xmlparse.c"
        var $581=($579) > ($580); //@line 2805 "xmlparse.c"
        if ($581) { __label__ = 79; break; } else { __label__ = 84; break; } //@line 2805 "xmlparse.c"
      case 84: // $bb96
        var $582=$s; //@line 2811 "xmlparse.c"
        var $583=HEAP[$582]; //@line 2811 "xmlparse.c"
        var $584=($583)!=58; //@line 2811 "xmlparse.c"
        var $585=($584); //@line 2811 "xmlparse.c"
        var $586=$s; //@line 2811 "xmlparse.c"
        var $587=$586+1; //@line 2811 "xmlparse.c"
        $s=$587; //@line 2811 "xmlparse.c"
        var $toBool97=($585)!=0; //@line 2811 "xmlparse.c"
        if ($toBool97) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 2811 "xmlparse.c"
      case 85: // $bb98
        var $588=$s; //@line 2814 "xmlparse.c"
        var $589=HEAP[$588]; //@line 2814 "xmlparse.c"
        $c99=$589; //@line 2814 "xmlparse.c"
        var $590=$parser_addr; //@line 2815 "xmlparse.c"
        var $591=$590+416; //@line 2815 "xmlparse.c"
        var $592=$591+12; //@line 2815 "xmlparse.c"
        var $593=HEAP[$592]; //@line 2815 "xmlparse.c"
        var $594=$parser_addr; //@line 2815 "xmlparse.c"
        var $595=$594+416; //@line 2815 "xmlparse.c"
        var $596=$595+8; //@line 2815 "xmlparse.c"
        var $597=HEAP[$596]; //@line 2815 "xmlparse.c"
        var $598=($593)!=($597); //@line 2815 "xmlparse.c"
        if ($598) { __label__ = 88; break; } else { __label__ = 86; break; } //@line 2815 "xmlparse.c"
      case 86: // $bb100
        var $599=$parser_addr; //@line 2815 "xmlparse.c"
        var $600=$599+416; //@line 2815 "xmlparse.c"
        var $601=_poolGrow($600); //@line 2815 "xmlparse.c"
        var $602=($601)!=0; //@line 2815 "xmlparse.c"
        if ($602) { __label__ = 88; break; } else { __label__ = 87; break; } //@line 2815 "xmlparse.c"
      case 87: // $bb105
        $iftmp_102=1; //@line 2815 "xmlparse.c"
        $0=1; //@line 2816 "xmlparse.c"
        __label__ = 144; break; //@line 2816 "xmlparse.c"
      case 88: // $bb106
        var $603=$parser_addr; //@line 2815 "xmlparse.c"
        var $604=$603+416; //@line 2815 "xmlparse.c"
        var $605=$604+12; //@line 2815 "xmlparse.c"
        var $606=HEAP[$605]; //@line 2815 "xmlparse.c"
        var $607=$s; //@line 2815 "xmlparse.c"
        var $608=HEAP[$607]; //@line 2815 "xmlparse.c"
        HEAP[$606]=$608; //@line 2815 "xmlparse.c"
        var $609=$606+1; //@line 2815 "xmlparse.c"
        var $610=$parser_addr; //@line 2815 "xmlparse.c"
        var $611=$610+416; //@line 2815 "xmlparse.c"
        var $612=$611+12; //@line 2815 "xmlparse.c"
        HEAP[$612]=$609; //@line 2815 "xmlparse.c"
        $iftmp_102=0; //@line 2815 "xmlparse.c"
        var $613=$uriHash; //@line 2817 "xmlparse.c"
        var $614=($613) * 1000003; //@line 2817 "xmlparse.c"
        var $615=$c99; //@line 2817 "xmlparse.c"
        var $616=($615); //@line 2817 "xmlparse.c"
        var $617=($616) ^ ($614); //@line 2817 "xmlparse.c"
        $uriHash=$617; //@line 2817 "xmlparse.c"
        var $618=$s; //@line 2818 "xmlparse.c"
        var $619=HEAP[$618]; //@line 2818 "xmlparse.c"
        var $620=($619)!=0; //@line 2818 "xmlparse.c"
        var $621=($620); //@line 2818 "xmlparse.c"
        var $622=$s; //@line 2818 "xmlparse.c"
        var $623=$622+1; //@line 2818 "xmlparse.c"
        $s=$623; //@line 2818 "xmlparse.c"
        var $toBool107=($621)!=0; //@line 2818 "xmlparse.c"
        if ($toBool107) { __label__ = 85; break; } else { __label__ = 89; break; } //@line 2818 "xmlparse.c"
      case 89: // $bb108
        $step=0; //@line 2823 "xmlparse.c"
        var $624=$nsAttsSize; //@line 2824 "xmlparse.c"
        var $625=($624) - 1; //@line 2824 "xmlparse.c"
        $mask=$625; //@line 2824 "xmlparse.c"
        var $626=$uriHash; //@line 2825 "xmlparse.c"
        var $627=$mask; //@line 2825 "xmlparse.c"
        var $628=($627) & ($626); //@line 2825 "xmlparse.c"
        $j68=$628; //@line 2825 "xmlparse.c"
        __label__ = 102; break; //@line 2825 "xmlparse.c"
      case 90: // $bb109
        var $629=$703+396; //@line 2828 "xmlparse.c"
        var $630=HEAP[$629]; //@line 2828 "xmlparse.c"
        var $631=$j68; //@line 2828 "xmlparse.c"
        var $632=$630+12*$631; //@line 2828 "xmlparse.c"
        var $633=$632+4; //@line 2828 "xmlparse.c"
        var $634=HEAP[$633]; //@line 2828 "xmlparse.c"
        var $635=$uriHash; //@line 2828 "xmlparse.c"
        var $636=($634)==($635); //@line 2828 "xmlparse.c"
        if ($636) { __label__ = 91; break; } else { __label__ = 97; break; } //@line 2828 "xmlparse.c"
      case 91: // $bb110
        var $637=$parser_addr; //@line 2829 "xmlparse.c"
        var $638=$637+416; //@line 2829 "xmlparse.c"
        var $639=$638+16; //@line 2829 "xmlparse.c"
        var $640=HEAP[$639]; //@line 2829 "xmlparse.c"
        $s1=$640; //@line 2829 "xmlparse.c"
        var $641=$parser_addr; //@line 2830 "xmlparse.c"
        var $642=$641+396; //@line 2830 "xmlparse.c"
        var $643=HEAP[$642]; //@line 2830 "xmlparse.c"
        var $644=$j68; //@line 2830 "xmlparse.c"
        var $645=$643+12*$644; //@line 2830 "xmlparse.c"
        var $646=$645+8; //@line 2830 "xmlparse.c"
        var $647=HEAP[$646]; //@line 2830 "xmlparse.c"
        $s2=$647; //@line 2830 "xmlparse.c"
        __label__ = 93; break; //@line 2830 "xmlparse.c"
      case 92: // $bb111
        var $648=$s1; //@line 2832 "xmlparse.c"
        var $649=$648+1; //@line 2832 "xmlparse.c"
        $s1=$649; //@line 2832 "xmlparse.c"
        var $650=$s2; //@line 2832 "xmlparse.c"
        var $651=$650+1; //@line 2832 "xmlparse.c"
        $s2=$651; //@line 2832 "xmlparse.c"
        __label__ = 93; break; //@line 2832 "xmlparse.c"
      case 93: // $bb112
        var $652=$s1; //@line 2832 "xmlparse.c"
        var $653=HEAP[$652]; //@line 2832 "xmlparse.c"
        var $654=$s2; //@line 2832 "xmlparse.c"
        var $655=HEAP[$654]; //@line 2832 "xmlparse.c"
        var $656=($653)!=($655); //@line 2832 "xmlparse.c"
        if ($656) { __label__ = 95; break; } else { __label__ = 94; break; } //@line 2832 "xmlparse.c"
      case 94: // $bb113
        var $657=$s1; //@line 2832 "xmlparse.c"
        var $658=HEAP[$657]; //@line 2832 "xmlparse.c"
        var $659=($658)!=0; //@line 2832 "xmlparse.c"
        if ($659) { __label__ = 92; break; } else { __label__ = 95; break; } //@line 2832 "xmlparse.c"
      case 95: // $bb114
        var $660=$s1; //@line 2833 "xmlparse.c"
        var $661=HEAP[$660]; //@line 2833 "xmlparse.c"
        var $662=($661)==0; //@line 2833 "xmlparse.c"
        if ($662) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 2833 "xmlparse.c"
      case 96: // $bb115
        $0=8; //@line 2834 "xmlparse.c"
        __label__ = 144; break; //@line 2834 "xmlparse.c"
      case 97: // $bb116
        var $663=$step; //@line 2836 "xmlparse.c"
        var $664=($663)==0; //@line 2836 "xmlparse.c"
        if ($664) { __label__ = 98; break; } else { __label__ = 99; break; } //@line 2836 "xmlparse.c"
      case 98: // $bb117
        var $665=$mask; //@line 2837 "xmlparse.c"
        var $not=($665) ^ -1; //@line 2837 "xmlparse.c"
        var $666=$uriHash; //@line 2837 "xmlparse.c"
        var $667=($666) & ($not); //@line 2837 "xmlparse.c"
        var $668=$parser_addr; //@line 2837 "xmlparse.c"
        var $669=$668+404; //@line 2837 "xmlparse.c"
        var $670=HEAP[$669]; //@line 2837 "xmlparse.c"
        var $671=($670); //@line 2837 "xmlparse.c"
        var $672=($671) - 1; //@line 2837 "xmlparse.c"
        var $673=($667) >>> ($672); //@line 2837 "xmlparse.c"
        var $674=((($673)) & 255); //@line 2837 "xmlparse.c"
        var $675=$mask; //@line 2837 "xmlparse.c"
        var $676=($675) >>> 2; //@line 2837 "xmlparse.c"
        var $677=((($676)) & 255); //@line 2837 "xmlparse.c"
        var $678=($674) & ($677); //@line 2837 "xmlparse.c"
        var $679=($678) | 1; //@line 2837 "xmlparse.c"
        $step=$679; //@line 2837 "xmlparse.c"
        __label__ = 99; break; //@line 2837 "xmlparse.c"
      case 99: // $bb119
        var $680=$step; //@line 2838 "xmlparse.c"
        var $681=($680); //@line 2838 "xmlparse.c"
        var $682=$j68; //@line 2838 "xmlparse.c"
        var $683=($681) > ($682); //@line 2838 "xmlparse.c"
        var $684=$step; //@line 2838 "xmlparse.c"
        var $685=($684); //@line 2838 "xmlparse.c"
        if ($683) { __label__ = 100; break; } else { __label__ = 101; break; } //@line 2838 "xmlparse.c"
      case 100: // $bb120
        var $686=$nsAttsSize; //@line 2838 "xmlparse.c"
        var $_neg=0 - ($685);
        var $687=$j68; //@line 2838 "xmlparse.c"
        var $688=($686) + ($_neg);
        var $689=($688) + ($687); //@line 2838 "xmlparse.c"
        $j68=$689; //@line 2838 "xmlparse.c"
        var $690=$j68; //@line 2838 "xmlparse.c"
        $iftmp_104=$690; //@line 2838 "xmlparse.c"
        __label__ = 102; break; //@line 2838 "xmlparse.c"
      case 101: // $bb121
        var $691=$j68; //@line 2838 "xmlparse.c"
        var $692=($691) - ($685); //@line 2838 "xmlparse.c"
        $j68=$692; //@line 2838 "xmlparse.c"
        var $693=$j68; //@line 2838 "xmlparse.c"
        $iftmp_104=$693; //@line 2838 "xmlparse.c"
        __label__ = 102; break; //@line 2838 "xmlparse.c"
      case 102: // $bb122
        var $694=$parser_addr; //@line 2826 "xmlparse.c"
        var $695=$694+396; //@line 2826 "xmlparse.c"
        var $696=HEAP[$695]; //@line 2826 "xmlparse.c"
        var $697=$j68; //@line 2826 "xmlparse.c"
        var $698=$696+12*$697; //@line 2826 "xmlparse.c"
        var $699=$698; //@line 2826 "xmlparse.c"
        var $700=HEAP[$699]; //@line 2826 "xmlparse.c"
        var $701=$version; //@line 2826 "xmlparse.c"
        var $702=($700)==($701); //@line 2826 "xmlparse.c"
        var $703=$parser_addr; //@line 2828 "xmlparse.c"
        if ($702) { __label__ = 90; break; } else { __label__ = 103; break; } //@line 2826 "xmlparse.c"
      case 103: // $bb123
        var $704=$703+237; //@line 2842 "xmlparse.c"
        var $705=HEAP[$704]; //@line 2842 "xmlparse.c"
        var $706=($705)!=0; //@line 2842 "xmlparse.c"
        if ($706) { __label__ = 104; break; } else { __label__ = 109; break; } //@line 2842 "xmlparse.c"
      case 104: // $bb124
        var $707=$parser_addr; //@line 2843 "xmlparse.c"
        var $708=$707+416; //@line 2843 "xmlparse.c"
        var $709=$708+12; //@line 2843 "xmlparse.c"
        var $710=HEAP[$709]; //@line 2843 "xmlparse.c"
        var $711=$parser_addr; //@line 2843 "xmlparse.c"
        var $712=$711+472; //@line 2843 "xmlparse.c"
        var $713=HEAP[$712]; //@line 2843 "xmlparse.c"
        var $714=$710+-1; //@line 2843 "xmlparse.c"
        HEAP[$714]=$713; //@line 2843 "xmlparse.c"
        var $715=$b; //@line 2844 "xmlparse.c"
        var $716=$715; //@line 2844 "xmlparse.c"
        var $717=HEAP[$716]; //@line 2844 "xmlparse.c"
        var $718=$717; //@line 2844 "xmlparse.c"
        var $719=HEAP[$718]; //@line 2844 "xmlparse.c"
        $s=$719; //@line 2844 "xmlparse.c"
        __label__ = 105; break; //@line 2844 "xmlparse.c"
      case 105: // $bb125
        var $720=$parser_addr; //@line 2846 "xmlparse.c"
        var $721=$720+416; //@line 2846 "xmlparse.c"
        var $722=$721+12; //@line 2846 "xmlparse.c"
        var $723=HEAP[$722]; //@line 2846 "xmlparse.c"
        var $724=$parser_addr; //@line 2846 "xmlparse.c"
        var $725=$724+416; //@line 2846 "xmlparse.c"
        var $726=$725+8; //@line 2846 "xmlparse.c"
        var $727=HEAP[$726]; //@line 2846 "xmlparse.c"
        var $728=($723)!=($727); //@line 2846 "xmlparse.c"
        if ($728) { __label__ = 108; break; } else { __label__ = 106; break; } //@line 2846 "xmlparse.c"
      case 106: // $bb126
        var $729=$parser_addr; //@line 2846 "xmlparse.c"
        var $730=$729+416; //@line 2846 "xmlparse.c"
        var $731=_poolGrow($730); //@line 2846 "xmlparse.c"
        var $732=($731)!=0; //@line 2846 "xmlparse.c"
        if ($732) { __label__ = 108; break; } else { __label__ = 107; break; } //@line 2846 "xmlparse.c"
      case 107: // $bb131
        $iftmp_105=1; //@line 2846 "xmlparse.c"
        $0=1; //@line 2847 "xmlparse.c"
        __label__ = 144; break; //@line 2847 "xmlparse.c"
      case 108: // $bb132
        var $733=$parser_addr; //@line 2846 "xmlparse.c"
        var $734=$733+416; //@line 2846 "xmlparse.c"
        var $735=$734+12; //@line 2846 "xmlparse.c"
        var $736=HEAP[$735]; //@line 2846 "xmlparse.c"
        var $737=$s; //@line 2846 "xmlparse.c"
        var $738=HEAP[$737]; //@line 2846 "xmlparse.c"
        HEAP[$736]=$738; //@line 2846 "xmlparse.c"
        var $739=$736+1; //@line 2846 "xmlparse.c"
        var $740=$parser_addr; //@line 2846 "xmlparse.c"
        var $741=$740+416; //@line 2846 "xmlparse.c"
        var $742=$741+12; //@line 2846 "xmlparse.c"
        HEAP[$742]=$739; //@line 2846 "xmlparse.c"
        $iftmp_105=0; //@line 2846 "xmlparse.c"
        var $743=$s; //@line 2848 "xmlparse.c"
        var $744=HEAP[$743]; //@line 2848 "xmlparse.c"
        var $745=($744)!=0; //@line 2848 "xmlparse.c"
        var $746=($745); //@line 2848 "xmlparse.c"
        var $747=$s; //@line 2848 "xmlparse.c"
        var $748=$747+1; //@line 2848 "xmlparse.c"
        $s=$748; //@line 2848 "xmlparse.c"
        var $toBool133=($746)!=0; //@line 2848 "xmlparse.c"
        if ($toBool133) { __label__ = 105; break; } else { __label__ = 109; break; } //@line 2848 "xmlparse.c"
      case 109: // $bb134
        var $749=$parser_addr; //@line 2852 "xmlparse.c"
        var $750=$749+416; //@line 2852 "xmlparse.c"
        var $751=$750+16; //@line 2852 "xmlparse.c"
        var $752=HEAP[$751]; //@line 2852 "xmlparse.c"
        $s=$752; //@line 2852 "xmlparse.c"
        var $753=$parser_addr; //@line 2853 "xmlparse.c"
        var $754=$753+416; //@line 2853 "xmlparse.c"
        var $755=$754+12; //@line 2853 "xmlparse.c"
        var $756=HEAP[$755]; //@line 2853 "xmlparse.c"
        var $757=$parser_addr; //@line 2853 "xmlparse.c"
        var $758=$757+416; //@line 2853 "xmlparse.c"
        var $759=$758+16; //@line 2853 "xmlparse.c"
        HEAP[$759]=$756; //@line 2853 "xmlparse.c"
        var $760=$appAtts; //@line 2854 "xmlparse.c"
        var $761=$i; //@line 2854 "xmlparse.c"
        var $762=$760+4*$761; //@line 2854 "xmlparse.c"
        var $763=$s; //@line 2854 "xmlparse.c"
        HEAP[$762]=$763; //@line 2854 "xmlparse.c"
        var $764=$parser_addr; //@line 2857 "xmlparse.c"
        var $765=$764+396; //@line 2857 "xmlparse.c"
        var $766=HEAP[$765]; //@line 2857 "xmlparse.c"
        var $767=$j68; //@line 2857 "xmlparse.c"
        var $768=$766+12*$767; //@line 2857 "xmlparse.c"
        var $769=$768; //@line 2857 "xmlparse.c"
        var $770=$version; //@line 2857 "xmlparse.c"
        HEAP[$769]=$770; //@line 2857 "xmlparse.c"
        var $771=$parser_addr; //@line 2858 "xmlparse.c"
        var $772=$771+396; //@line 2858 "xmlparse.c"
        var $773=HEAP[$772]; //@line 2858 "xmlparse.c"
        var $774=$j68; //@line 2858 "xmlparse.c"
        var $775=$773+12*$774; //@line 2858 "xmlparse.c"
        var $776=$775+4; //@line 2858 "xmlparse.c"
        var $777=$uriHash; //@line 2858 "xmlparse.c"
        HEAP[$776]=$777; //@line 2858 "xmlparse.c"
        var $778=$parser_addr; //@line 2859 "xmlparse.c"
        var $779=$778+396; //@line 2859 "xmlparse.c"
        var $780=HEAP[$779]; //@line 2859 "xmlparse.c"
        var $781=$j68; //@line 2859 "xmlparse.c"
        var $782=$780+12*$781; //@line 2859 "xmlparse.c"
        var $783=$782+8; //@line 2859 "xmlparse.c"
        var $784=$s; //@line 2859 "xmlparse.c"
        HEAP[$783]=$784; //@line 2859 "xmlparse.c"
        var $785=$nPrefixes; //@line 2861 "xmlparse.c"
        var $786=($785) - 1; //@line 2861 "xmlparse.c"
        $nPrefixes=$786; //@line 2861 "xmlparse.c"
        var $787=($786)==0; //@line 2861 "xmlparse.c"
        if ($787) { __label__ = 110; break; } else { __label__ = 112; break; } //@line 2861 "xmlparse.c"
      case 110: // $bb135
        var $788=$i; //@line 2862 "xmlparse.c"
        var $789=($788) + 2; //@line 2862 "xmlparse.c"
        $i=$789; //@line 2862 "xmlparse.c"
        __label__ = 114; break; //@line 2862 "xmlparse.c"
      case 111: // $bb137
        var $790=$s; //@line 2867 "xmlparse.c"
        var $791=$790+-1; //@line 2867 "xmlparse.c"
        HEAP[$791]=0; //@line 2867 "xmlparse.c"
        __label__ = 112; break; //@line 2867 "xmlparse.c"
      case 112: // $bb138
        var $792=$i; //@line 2790 "xmlparse.c"
        var $793=($792) + 2; //@line 2790 "xmlparse.c"
        $i=$793; //@line 2790 "xmlparse.c"
        __label__ = 113; break; //@line 2790 "xmlparse.c"
      case 113: // $bb139
        var $794=$i; //@line 2790 "xmlparse.c"
        var $795=$attIndex; //@line 2790 "xmlparse.c"
        var $796=($794) < ($795); //@line 2790 "xmlparse.c"
        if ($796) { __label__ = 73; break; } else { __label__ = 114; break; } //@line 2790 "xmlparse.c"
      case 114: // $bb142_preheader
        var $797=$i; //@line 2871 "xmlparse.c"
        var $798=$attIndex; //@line 2871 "xmlparse.c"
        var $799=($797) < ($798); //@line 2871 "xmlparse.c"
        if ($799) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 2871 "xmlparse.c"
      case 115: // $bb141
        var $800=$appAtts; //@line 2872 "xmlparse.c"
        var $801=$i; //@line 2872 "xmlparse.c"
        var $802=$800+4*$801; //@line 2872 "xmlparse.c"
        var $803=HEAP[$802]; //@line 2872 "xmlparse.c"
        var $804=$803+-1; //@line 2872 "xmlparse.c"
        HEAP[$804]=0; //@line 2872 "xmlparse.c"
        var $805=$i; //@line 2871 "xmlparse.c"
        var $806=($805) + 2; //@line 2871 "xmlparse.c"
        $i=$806; //@line 2871 "xmlparse.c"
        var $807=$i; //@line 2871 "xmlparse.c"
        var $808=$attIndex; //@line 2871 "xmlparse.c"
        var $809=($807) < ($808); //@line 2871 "xmlparse.c"
        if ($809) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 2871 "xmlparse.c"
      case 116: // $bb143
        var $810=$bindingsPtr_addr; //@line 2873 "xmlparse.c"
        var $811=HEAP[$810]; //@line 2873 "xmlparse.c"
        $binding=$811; //@line 2873 "xmlparse.c"
        var $812=($811)!=0; //@line 2873 "xmlparse.c"
        if ($812) { __label__ = 117; break; } else { __label__ = 118; break; } //@line 2873 "xmlparse.c"
      case 117: // $bb144
        var $813=$binding; //@line 2874 "xmlparse.c"
        var $814=$813+12; //@line 2874 "xmlparse.c"
        var $815=HEAP[$814]; //@line 2874 "xmlparse.c"
        var $816=$815; //@line 2874 "xmlparse.c"
        var $817=HEAP[$816]; //@line 2874 "xmlparse.c"
        var $818=$817+-1; //@line 2874 "xmlparse.c"
        HEAP[$818]=0; //@line 2874 "xmlparse.c"
        var $819=$binding; //@line 2873 "xmlparse.c"
        var $820=$819+4; //@line 2873 "xmlparse.c"
        var $821=HEAP[$820]; //@line 2873 "xmlparse.c"
        $binding=$821; //@line 2873 "xmlparse.c"
        var $822=($821)!=0; //@line 2873 "xmlparse.c"
        if ($822) { __label__ = 117; break; } else { __label__ = 118; break; } //@line 2873 "xmlparse.c"
      case 118: // $bb146
        var $823=$parser_addr; //@line 2876 "xmlparse.c"
        var $824=$823+236; //@line 2876 "xmlparse.c"
        var $825=HEAP[$824]; //@line 2876 "xmlparse.c"
        var $826=($825)==0; //@line 2876 "xmlparse.c"
        if ($826) { __label__ = 119; break; } else { __label__ = 120; break; } //@line 2876 "xmlparse.c"
      case 119: // $bb147
        $0=0; //@line 2877 "xmlparse.c"
        __label__ = 144; break; //@line 2877 "xmlparse.c"
      case 120: // $bb148
        var $827=$elementType; //@line 2880 "xmlparse.c"
        var $828=$827+4; //@line 2880 "xmlparse.c"
        var $829=HEAP[$828]; //@line 2880 "xmlparse.c"
        var $830=($829)!=0; //@line 2880 "xmlparse.c"
        if ($830) { __label__ = 121; break; } else { __label__ = 125; break; } //@line 2880 "xmlparse.c"
      case 121: // $bb149
        var $831=$elementType; //@line 2881 "xmlparse.c"
        var $832=$831+4; //@line 2881 "xmlparse.c"
        var $833=HEAP[$832]; //@line 2881 "xmlparse.c"
        var $834=$833+4; //@line 2881 "xmlparse.c"
        var $835=HEAP[$834]; //@line 2881 "xmlparse.c"
        $binding=$835; //@line 2881 "xmlparse.c"
        var $836=$binding; //@line 2882 "xmlparse.c"
        var $837=($836)==0; //@line 2882 "xmlparse.c"
        if ($837) { __label__ = 122; break; } else { __label__ = 123; break; } //@line 2882 "xmlparse.c"
      case 122: // $bb150
        $0=27; //@line 2883 "xmlparse.c"
        __label__ = 144; break; //@line 2883 "xmlparse.c"
      case 123: // $bb151
        var $838=$tagNamePtr_addr; //@line 2884 "xmlparse.c"
        var $839=$838; //@line 2884 "xmlparse.c"
        var $840=HEAP[$839]; //@line 2884 "xmlparse.c"
        $localPart=$840; //@line 2884 "xmlparse.c"
        __label__ = 124; break; //@line 2884 "xmlparse.c"
      case 124: // $bb152
        var $841=$localPart; //@line 2885 "xmlparse.c"
        var $842=HEAP[$841]; //@line 2885 "xmlparse.c"
        var $843=($842)!=58; //@line 2885 "xmlparse.c"
        var $844=($843); //@line 2885 "xmlparse.c"
        var $845=$localPart; //@line 2885 "xmlparse.c"
        var $846=$845+1; //@line 2885 "xmlparse.c"
        $localPart=$846; //@line 2885 "xmlparse.c"
        var $toBool153=($844)!=0; //@line 2885 "xmlparse.c"
        if ($toBool153) { __label__ = 124; break; } else { __label__ = 128; break; } //@line 2885 "xmlparse.c"
      case 125: // $bb155
        var $847=$dtd; //@line 2888 "xmlparse.c"
        var $848=$847+152; //@line 2888 "xmlparse.c"
        var $849=$848+4; //@line 2888 "xmlparse.c"
        var $850=HEAP[$849]; //@line 2888 "xmlparse.c"
        var $851=($850)!=0; //@line 2888 "xmlparse.c"
        if ($851) { __label__ = 126; break; } else { __label__ = 127; break; } //@line 2888 "xmlparse.c"
      case 126: // $bb156
        var $852=$dtd; //@line 2889 "xmlparse.c"
        var $853=$852+152; //@line 2889 "xmlparse.c"
        var $854=$853+4; //@line 2889 "xmlparse.c"
        var $855=HEAP[$854]; //@line 2889 "xmlparse.c"
        $binding=$855; //@line 2889 "xmlparse.c"
        var $856=$tagNamePtr_addr; //@line 2890 "xmlparse.c"
        var $857=$856; //@line 2890 "xmlparse.c"
        var $858=HEAP[$857]; //@line 2890 "xmlparse.c"
        $localPart=$858; //@line 2890 "xmlparse.c"
        __label__ = 128; break; //@line 2890 "xmlparse.c"
      case 127: // $bb157
        $0=0; //@line 2893 "xmlparse.c"
        __label__ = 144; break; //@line 2893 "xmlparse.c"
      case 128: // $bb158
        $prefixLen=0; //@line 2894 "xmlparse.c"
        var $859=$parser_addr; //@line 2895 "xmlparse.c"
        var $860=$859+237; //@line 2895 "xmlparse.c"
        var $861=HEAP[$860]; //@line 2895 "xmlparse.c"
        var $862=($861)!=0; //@line 2895 "xmlparse.c"
        if ($862) { __label__ = 129; break; } else { __label__ = 131; break; } //@line 2895 "xmlparse.c"
      case 129: // $bb159
        var $863=$binding; //@line 2895 "xmlparse.c"
        var $864=$863; //@line 2895 "xmlparse.c"
        var $865=HEAP[$864]; //@line 2895 "xmlparse.c"
        var $866=$865; //@line 2895 "xmlparse.c"
        var $867=HEAP[$866]; //@line 2895 "xmlparse.c"
        var $868=($867)!=0; //@line 2895 "xmlparse.c"
        if ($868) { __label__ = 130; break; } else { __label__ = 131; break; } //@line 2895 "xmlparse.c"
      case 130: // $bb160
        var $869=$binding; //@line 2896 "xmlparse.c"
        var $870=$869; //@line 2896 "xmlparse.c"
        var $871=HEAP[$870]; //@line 2896 "xmlparse.c"
        var $872=$871; //@line 2896 "xmlparse.c"
        var $873=HEAP[$872]; //@line 2896 "xmlparse.c"
        var $874=$prefixLen; //@line 2896 "xmlparse.c"
        var $875=$873+$874; //@line 2896 "xmlparse.c"
        var $876=HEAP[$875]; //@line 2896 "xmlparse.c"
        var $877=($876)!=0; //@line 2896 "xmlparse.c"
        var $878=($877); //@line 2896 "xmlparse.c"
        var $879=$prefixLen; //@line 2896 "xmlparse.c"
        var $880=($879) + 1; //@line 2896 "xmlparse.c"
        $prefixLen=$880; //@line 2896 "xmlparse.c"
        var $toBool161=($878)!=0; //@line 2896 "xmlparse.c"
        if ($toBool161) { __label__ = 130; break; } else { __label__ = 131; break; } //@line 2896 "xmlparse.c"
      case 131: // $bb162
        var $881=$tagNamePtr_addr; //@line 2899 "xmlparse.c"
        var $882=$881+4; //@line 2899 "xmlparse.c"
        var $883=$localPart; //@line 2899 "xmlparse.c"
        HEAP[$882]=$883; //@line 2899 "xmlparse.c"
        var $884=$binding; //@line 2900 "xmlparse.c"
        var $885=$884+20; //@line 2900 "xmlparse.c"
        var $886=HEAP[$885]; //@line 2900 "xmlparse.c"
        var $887=$tagNamePtr_addr; //@line 2900 "xmlparse.c"
        var $888=$887+16; //@line 2900 "xmlparse.c"
        HEAP[$888]=$886; //@line 2900 "xmlparse.c"
        var $889=$binding; //@line 2901 "xmlparse.c"
        var $890=$889; //@line 2901 "xmlparse.c"
        var $891=HEAP[$890]; //@line 2901 "xmlparse.c"
        var $892=$891; //@line 2901 "xmlparse.c"
        var $893=HEAP[$892]; //@line 2901 "xmlparse.c"
        var $894=$tagNamePtr_addr; //@line 2901 "xmlparse.c"
        var $895=$894+8; //@line 2901 "xmlparse.c"
        HEAP[$895]=$893; //@line 2901 "xmlparse.c"
        var $896=$tagNamePtr_addr; //@line 2902 "xmlparse.c"
        var $897=$896+20; //@line 2902 "xmlparse.c"
        var $898=$prefixLen; //@line 2902 "xmlparse.c"
        HEAP[$897]=$898; //@line 2902 "xmlparse.c"
        $i=0; //@line 2903 "xmlparse.c"
        __label__ = 132; break; //@line 2903 "xmlparse.c"
      case 132: // $bb163
        var $899=$localPart; //@line 2903 "xmlparse.c"
        var $900=$i; //@line 2903 "xmlparse.c"
        var $901=$899+$900; //@line 2903 "xmlparse.c"
        var $902=HEAP[$901]; //@line 2903 "xmlparse.c"
        var $903=($902)!=0; //@line 2903 "xmlparse.c"
        var $904=($903); //@line 2903 "xmlparse.c"
        var $905=$i; //@line 2903 "xmlparse.c"
        var $906=($905) + 1; //@line 2903 "xmlparse.c"
        $i=$906; //@line 2903 "xmlparse.c"
        var $toBool164=($904)!=0; //@line 2903 "xmlparse.c"
        if ($toBool164) { __label__ = 132; break; } else { __label__ = 133; break; } //@line 2903 "xmlparse.c"
      case 133: // $bb165
        var $907=$binding; //@line 2905 "xmlparse.c"
        var $908=$907+20; //@line 2905 "xmlparse.c"
        var $909=HEAP[$908]; //@line 2905 "xmlparse.c"
        var $910=$i; //@line 2905 "xmlparse.c"
        var $911=$prefixLen; //@line 2905 "xmlparse.c"
        var $912=($910) + ($909); //@line 2905 "xmlparse.c"
        var $913=($912) + ($911); //@line 2905 "xmlparse.c"
        $n=$913; //@line 2905 "xmlparse.c"
        var $914=$binding; //@line 2906 "xmlparse.c"
        var $915=$914+24; //@line 2906 "xmlparse.c"
        var $916=HEAP[$915]; //@line 2906 "xmlparse.c"
        var $917=$n; //@line 2906 "xmlparse.c"
        var $918=($916) < ($917); //@line 2906 "xmlparse.c"
        if ($918) { __label__ = 134; break; } else { __label__ = 141; break; } //@line 2906 "xmlparse.c"
      case 134: // $bb166
        var $919=$parser_addr; //@line 2908 "xmlparse.c"
        var $920=$919+12; //@line 2908 "xmlparse.c"
        var $921=$920; //@line 2908 "xmlparse.c"
        var $922=HEAP[$921]; //@line 2908 "xmlparse.c"
        var $923=$n; //@line 2908 "xmlparse.c"
        var $924=($923) + 24; //@line 2908 "xmlparse.c"
        var $925=FUNCTION_TABLE[$922]($924); //@line 2908 "xmlparse.c"
        $uri=$925; //@line 2908 "xmlparse.c"
        var $926=$uri; //@line 2909 "xmlparse.c"
        var $927=($926)==0; //@line 2909 "xmlparse.c"
        if ($927) { __label__ = 135; break; } else { __label__ = 136; break; } //@line 2909 "xmlparse.c"
      case 135: // $bb167
        $0=1; //@line 2910 "xmlparse.c"
        __label__ = 144; break; //@line 2910 "xmlparse.c"
      case 136: // $bb168
        var $928=$n; //@line 2911 "xmlparse.c"
        var $929=($928) + 24; //@line 2911 "xmlparse.c"
        var $930=$binding; //@line 2911 "xmlparse.c"
        var $931=$930+24; //@line 2911 "xmlparse.c"
        HEAP[$931]=$929; //@line 2911 "xmlparse.c"
        var $932=$binding; //@line 2912 "xmlparse.c"
        var $933=$932+20; //@line 2912 "xmlparse.c"
        var $934=HEAP[$933]; //@line 2912 "xmlparse.c"
        var $935=$binding; //@line 2912 "xmlparse.c"
        var $936=$935+16; //@line 2912 "xmlparse.c"
        var $937=HEAP[$936]; //@line 2912 "xmlparse.c"
        var $938=$uri; //@line 2912 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($938, $937, $934, 1, 0); //@line 2912 "xmlparse.c"
        var $939=$parser_addr; //@line 2913 "xmlparse.c"
        var $940=$939+364; //@line 2913 "xmlparse.c"
        var $941=HEAP[$940]; //@line 2913 "xmlparse.c"
        $p=$941; //@line 2913 "xmlparse.c"
        var $942=($941)!=0; //@line 2913 "xmlparse.c"
        if ($942) { __label__ = 137; break; } else { __label__ = 140; break; } //@line 2913 "xmlparse.c"
      case 137: // $bb169
        var $943=$p; //@line 2914 "xmlparse.c"
        var $944=$943+12; //@line 2914 "xmlparse.c"
        var $945=$944; //@line 2914 "xmlparse.c"
        var $946=HEAP[$945]; //@line 2914 "xmlparse.c"
        var $947=$binding; //@line 2914 "xmlparse.c"
        var $948=$947+16; //@line 2914 "xmlparse.c"
        var $949=HEAP[$948]; //@line 2914 "xmlparse.c"
        var $950=($946)==($949); //@line 2914 "xmlparse.c"
        if ($950) { __label__ = 138; break; } else { __label__ = 139; break; } //@line 2914 "xmlparse.c"
      case 138: // $bb170
        var $951=$p; //@line 2915 "xmlparse.c"
        var $952=$951+12; //@line 2915 "xmlparse.c"
        var $953=$952; //@line 2915 "xmlparse.c"
        var $954=$uri; //@line 2915 "xmlparse.c"
        HEAP[$953]=$954; //@line 2915 "xmlparse.c"
        __label__ = 139; break; //@line 2915 "xmlparse.c"
      case 139: // $bb171
        var $955=$p; //@line 2913 "xmlparse.c"
        var $956=$955; //@line 2913 "xmlparse.c"
        var $957=HEAP[$956]; //@line 2913 "xmlparse.c"
        $p=$957; //@line 2913 "xmlparse.c"
        var $958=($957)!=0; //@line 2913 "xmlparse.c"
        if ($958) { __label__ = 137; break; } else { __label__ = 140; break; } //@line 2913 "xmlparse.c"
      case 140: // $bb173
        var $959=$parser_addr; //@line 2916 "xmlparse.c"
        var $960=$959+12; //@line 2916 "xmlparse.c"
        var $961=$960+8; //@line 2916 "xmlparse.c"
        var $962=HEAP[$961]; //@line 2916 "xmlparse.c"
        var $963=$binding; //@line 2916 "xmlparse.c"
        var $964=$963+16; //@line 2916 "xmlparse.c"
        var $965=HEAP[$964]; //@line 2916 "xmlparse.c"
        FUNCTION_TABLE[$962]($965); //@line 2916 "xmlparse.c"
        var $966=$binding; //@line 2917 "xmlparse.c"
        var $967=$966+16; //@line 2917 "xmlparse.c"
        var $968=$uri; //@line 2917 "xmlparse.c"
        HEAP[$967]=$968; //@line 2917 "xmlparse.c"
        __label__ = 141; break; //@line 2917 "xmlparse.c"
      case 141: // $bb174
        var $969=$binding; //@line 2920 "xmlparse.c"
        var $970=$969+16; //@line 2920 "xmlparse.c"
        var $971=HEAP[$970]; //@line 2920 "xmlparse.c"
        var $972=$binding; //@line 2920 "xmlparse.c"
        var $973=$972+20; //@line 2920 "xmlparse.c"
        var $974=HEAP[$973]; //@line 2920 "xmlparse.c"
        var $975=$971+$974; //@line 2920 "xmlparse.c"
        $uri=$975; //@line 2920 "xmlparse.c"
        var $976=$i; //@line 2921 "xmlparse.c"
        var $977=$uri; //@line 2921 "xmlparse.c"
        var $978=$localPart; //@line 2921 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($977, $978, $976, 1, 0); //@line 2921 "xmlparse.c"
        var $979=$prefixLen; //@line 2923 "xmlparse.c"
        var $980=($979)!=0; //@line 2923 "xmlparse.c"
        if ($980) { __label__ = 142; break; } else { __label__ = 143; break; } //@line 2923 "xmlparse.c"
      case 142: // $bb175
        var $981=$i; //@line 2924 "xmlparse.c"
        var $982=($981) - 1; //@line 2924 "xmlparse.c"
        var $983=$uri; //@line 2924 "xmlparse.c"
        var $984=$983+$982; //@line 2924 "xmlparse.c"
        $uri=$984; //@line 2924 "xmlparse.c"
        var $985=$parser_addr; //@line 2925 "xmlparse.c"
        var $986=$985+472; //@line 2925 "xmlparse.c"
        var $987=HEAP[$986]; //@line 2925 "xmlparse.c"
        var $988=$uri; //@line 2925 "xmlparse.c"
        HEAP[$988]=$987; //@line 2925 "xmlparse.c"
        var $989=$prefixLen; //@line 2926 "xmlparse.c"
        var $990=$binding; //@line 2926 "xmlparse.c"
        var $991=$990; //@line 2926 "xmlparse.c"
        var $992=HEAP[$991]; //@line 2926 "xmlparse.c"
        var $993=$992; //@line 2926 "xmlparse.c"
        var $994=HEAP[$993]; //@line 2926 "xmlparse.c"
        var $995=$uri; //@line 2926 "xmlparse.c"
        var $996=$995+1; //@line 2926 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($996, $994, $989, 1, 0); //@line 2926 "xmlparse.c"
        __label__ = 143; break; //@line 2926 "xmlparse.c"
      case 143: // $bb176
        var $997=$binding; //@line 2928 "xmlparse.c"
        var $998=$997+16; //@line 2928 "xmlparse.c"
        var $999=HEAP[$998]; //@line 2928 "xmlparse.c"
        var $1000=$tagNamePtr_addr; //@line 2928 "xmlparse.c"
        var $1001=$1000; //@line 2928 "xmlparse.c"
        HEAP[$1001]=$999; //@line 2928 "xmlparse.c"
        $0=0; //@line 2929 "xmlparse.c"
        __label__ = 144; break; //@line 2929 "xmlparse.c"
      case 144: // $bb177
        var $1002=$0; //@line 2625 "xmlparse.c"
        $retval=$1002; //@line 2625 "xmlparse.c"
        var $retval178=$retval; //@line 2625 "xmlparse.c"
        ;
        return $retval178; //@line 2625 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _addBinding($parser, $prefix, $attId, $uri, $bindingsPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $prefix_addr;
        var $attId_addr;
        var $uri_addr;
        var $bindingsPtr_addr;
        var $retval;
        var $iftmp_119;
        var $iftmp_117;
        var $iftmp_115;
        var $iftmp_113;
        var $0;
        var $mustBeXML;
        var $isXML;
        var $isXMLNS;
        var $b;
        var $len;
        var $temp;
        $parser_addr=$parser;
        $prefix_addr=$prefix;
        $attId_addr=$attId;
        $uri_addr=$uri;
        $bindingsPtr_addr=$bindingsPtr;
        $mustBeXML=0; //@line 2955 "xmlparse.c"
        $isXML=1; //@line 2956 "xmlparse.c"
        $isXMLNS=1; //@line 2957 "xmlparse.c"
        var $1=$uri_addr; //@line 2963 "xmlparse.c"
        var $2=HEAP[$1]; //@line 2963 "xmlparse.c"
        var $3=($2)==0; //@line 2963 "xmlparse.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2963 "xmlparse.c"
      case 1: // $bb
        var $4=$prefix_addr; //@line 2963 "xmlparse.c"
        var $5=$4; //@line 2963 "xmlparse.c"
        var $6=HEAP[$5]; //@line 2963 "xmlparse.c"
        var $7=($6)!=0; //@line 2963 "xmlparse.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2963 "xmlparse.c"
      case 2: // $bb1
        $0=28; //@line 2964 "xmlparse.c"
        __label__ = 65; break; //@line 2964 "xmlparse.c"
      case 3: // $bb2
        var $8=$prefix_addr; //@line 2966 "xmlparse.c"
        var $9=$8; //@line 2966 "xmlparse.c"
        var $10=HEAP[$9]; //@line 2966 "xmlparse.c"
        var $11=($10)!=0; //@line 2966 "xmlparse.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 13; break; } //@line 2966 "xmlparse.c"
      case 4: // $bb3
        var $12=$prefix_addr; //@line 2966 "xmlparse.c"
        var $13=$12; //@line 2966 "xmlparse.c"
        var $14=HEAP[$13]; //@line 2966 "xmlparse.c"
        var $15=$14; //@line 2966 "xmlparse.c"
        var $16=HEAP[$15]; //@line 2966 "xmlparse.c"
        var $17=($16)==120; //@line 2966 "xmlparse.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 13; break; } //@line 2966 "xmlparse.c"
      case 5: // $bb4
        var $18=$prefix_addr; //@line 2966 "xmlparse.c"
        var $19=$18; //@line 2966 "xmlparse.c"
        var $20=HEAP[$19]; //@line 2966 "xmlparse.c"
        var $21=$20+1; //@line 2966 "xmlparse.c"
        var $22=HEAP[$21]; //@line 2966 "xmlparse.c"
        var $23=($22)==109; //@line 2966 "xmlparse.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 13; break; } //@line 2966 "xmlparse.c"
      case 6: // $bb5
        var $24=$prefix_addr; //@line 2966 "xmlparse.c"
        var $25=$24; //@line 2966 "xmlparse.c"
        var $26=HEAP[$25]; //@line 2966 "xmlparse.c"
        var $27=$26+2; //@line 2966 "xmlparse.c"
        var $28=HEAP[$27]; //@line 2966 "xmlparse.c"
        var $29=($28)==108; //@line 2966 "xmlparse.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 13; break; } //@line 2966 "xmlparse.c"
      case 7: // $bb6
        var $30=$prefix_addr; //@line 2972 "xmlparse.c"
        var $31=$30; //@line 2972 "xmlparse.c"
        var $32=HEAP[$31]; //@line 2972 "xmlparse.c"
        var $33=$32+3; //@line 2972 "xmlparse.c"
        var $34=HEAP[$33]; //@line 2972 "xmlparse.c"
        var $35=($34)==110; //@line 2972 "xmlparse.c"
        if ($35) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 2972 "xmlparse.c"
      case 8: // $bb7
        var $36=$prefix_addr; //@line 2972 "xmlparse.c"
        var $37=$36; //@line 2972 "xmlparse.c"
        var $38=HEAP[$37]; //@line 2972 "xmlparse.c"
        var $39=$38+4; //@line 2972 "xmlparse.c"
        var $40=HEAP[$39]; //@line 2972 "xmlparse.c"
        var $41=($40)==115; //@line 2972 "xmlparse.c"
        if ($41) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 2972 "xmlparse.c"
      case 9: // $bb8
        var $42=$prefix_addr; //@line 2972 "xmlparse.c"
        var $43=$42; //@line 2972 "xmlparse.c"
        var $44=HEAP[$43]; //@line 2972 "xmlparse.c"
        var $45=$44+5; //@line 2972 "xmlparse.c"
        var $46=HEAP[$45]; //@line 2972 "xmlparse.c"
        var $47=($46)==0; //@line 2972 "xmlparse.c"
        if ($47) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2972 "xmlparse.c"
      case 10: // $bb9
        $0=39; //@line 2975 "xmlparse.c"
        __label__ = 65; break; //@line 2975 "xmlparse.c"
      case 11: // $bb10
        var $48=$prefix_addr; //@line 2977 "xmlparse.c"
        var $49=$48; //@line 2977 "xmlparse.c"
        var $50=HEAP[$49]; //@line 2977 "xmlparse.c"
        var $51=$50+3; //@line 2977 "xmlparse.c"
        var $52=HEAP[$51]; //@line 2977 "xmlparse.c"
        var $53=($52)==0; //@line 2977 "xmlparse.c"
        if ($53) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2977 "xmlparse.c"
      case 12: // $bb11
        $mustBeXML=1; //@line 2978 "xmlparse.c"
        __label__ = 13; break; //@line 2978 "xmlparse.c"
      case 13: // $bb12
        $len=0; //@line 2981 "xmlparse.c"
        var $54=$uri_addr; //@line 2981 "xmlparse.c"
        var $55=$len; //@line 2981 "xmlparse.c"
        var $56=$54+$55; //@line 2981 "xmlparse.c"
        var $57=HEAP[$56]; //@line 2981 "xmlparse.c"
        var $58=($57)!=0; //@line 2981 "xmlparse.c"
        var $59=$isXML; //@line 2982 "xmlparse.c"
        if ($58) { __lastLabel__ = 13; __label__ = 14; break; } else { __lastLabel__ = 13; __label__ = 24; break; } //@line 2981 "xmlparse.c"
      case 14: // $bb13
        var $60=__lastLabel__ == 23 ? $93 : ($59);
        var $61=($60)!=0; //@line 2982 "xmlparse.c"
        if ($61) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 2982 "xmlparse.c"
      case 15: // $bb14
        var $62=$len; //@line 2982 "xmlparse.c"
        var $63=($62) > 36; //@line 2982 "xmlparse.c"
        if ($63) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 2982 "xmlparse.c"
      case 16: // $bb15
        var $64=$uri_addr; //@line 2982 "xmlparse.c"
        var $65=$len; //@line 2982 "xmlparse.c"
        var $66=$64+$65; //@line 2982 "xmlparse.c"
        var $67=HEAP[$66]; //@line 2982 "xmlparse.c"
        var $68=$len; //@line 2982 "xmlparse.c"
        var $69=_xmlNamespace_5259+$68; //@line 2982 "xmlparse.c"
        var $70=HEAP[$69]; //@line 2982 "xmlparse.c"
        var $71=($67)!=($70); //@line 2982 "xmlparse.c"
        if ($71) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 2982 "xmlparse.c"
      case 17: // $bb16
        $isXML=0; //@line 2983 "xmlparse.c"
        __label__ = 18; break; //@line 2983 "xmlparse.c"
      case 18: // $bb17
        var $72=$mustBeXML; //@line 2985 "xmlparse.c"
        var $73=($72)==0; //@line 2985 "xmlparse.c"
        if ($73) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 2985 "xmlparse.c"
      case 19: // $bb18
        var $74=$isXMLNS; //@line 2985 "xmlparse.c"
        var $75=($74)!=0; //@line 2985 "xmlparse.c"
        if ($75) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 2985 "xmlparse.c"
      case 20: // $bb19
        var $76=$len; //@line 2985 "xmlparse.c"
        var $77=($76) > 29; //@line 2985 "xmlparse.c"
        if ($77) { __label__ = 22; break; } else { __label__ = 21; break; } //@line 2985 "xmlparse.c"
      case 21: // $bb20
        var $78=$uri_addr; //@line 2985 "xmlparse.c"
        var $79=$len; //@line 2985 "xmlparse.c"
        var $80=$78+$79; //@line 2985 "xmlparse.c"
        var $81=HEAP[$80]; //@line 2985 "xmlparse.c"
        var $82=$len; //@line 2985 "xmlparse.c"
        var $83=_xmlnsNamespace_5261+$82; //@line 2985 "xmlparse.c"
        var $84=HEAP[$83]; //@line 2985 "xmlparse.c"
        var $85=($81)!=($84); //@line 2985 "xmlparse.c"
        if ($85) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 2985 "xmlparse.c"
      case 22: // $bb21
        $isXMLNS=0; //@line 2987 "xmlparse.c"
        __label__ = 23; break; //@line 2987 "xmlparse.c"
      case 23: // $bb22
        var $86=$len; //@line 2981 "xmlparse.c"
        var $87=($86) + 1; //@line 2981 "xmlparse.c"
        $len=$87; //@line 2981 "xmlparse.c"
        var $88=$uri_addr; //@line 2981 "xmlparse.c"
        var $89=$len; //@line 2981 "xmlparse.c"
        var $90=$88+$89; //@line 2981 "xmlparse.c"
        var $91=HEAP[$90]; //@line 2981 "xmlparse.c"
        var $92=($91)!=0; //@line 2981 "xmlparse.c"
        var $93=$isXML; //@line 2982 "xmlparse.c"
        if ($92) { __lastLabel__ = 23; __label__ = 14; break; } else { __lastLabel__ = 23; __label__ = 24; break; } //@line 2981 "xmlparse.c"
      case 24: // $bb24
        var $_lcssa=__lastLabel__ == 13 ? $59 : ($93);
        var $94=($_lcssa)==0; //@line 2989 "xmlparse.c"
        if ($94) { __label__ = 27; break; } else { __label__ = 25; break; } //@line 2989 "xmlparse.c"
      case 25: // $bb25
        var $95=$len; //@line 2989 "xmlparse.c"
        var $96=($95)!=36; //@line 2989 "xmlparse.c"
        if ($96) { __label__ = 27; break; } else { __label__ = 26; break; } //@line 2989 "xmlparse.c"
      case 26: // $bb26
        $iftmp_113=1; //@line 2989 "xmlparse.c"
        __label__ = 28; break; //@line 2989 "xmlparse.c"
      case 27: // $bb27
        $iftmp_113=0; //@line 2989 "xmlparse.c"
        __label__ = 28; break; //@line 2989 "xmlparse.c"
      case 28: // $bb28
        var $97=$iftmp_113; //@line 2989 "xmlparse.c"
        var $98=((($97)) & 255); //@line 2989 "xmlparse.c"
        $isXML=$98; //@line 2989 "xmlparse.c"
        var $99=$isXMLNS; //@line 2990 "xmlparse.c"
        var $100=($99)==0; //@line 2990 "xmlparse.c"
        if ($100) { __label__ = 31; break; } else { __label__ = 29; break; } //@line 2990 "xmlparse.c"
      case 29: // $bb29
        var $101=$len; //@line 2990 "xmlparse.c"
        var $102=($101)!=29; //@line 2990 "xmlparse.c"
        if ($102) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 2990 "xmlparse.c"
      case 30: // $bb30
        $iftmp_115=1; //@line 2990 "xmlparse.c"
        __label__ = 32; break; //@line 2990 "xmlparse.c"
      case 31: // $bb31
        $iftmp_115=0; //@line 2990 "xmlparse.c"
        __label__ = 32; break; //@line 2990 "xmlparse.c"
      case 32: // $bb32
        var $103=$iftmp_115; //@line 2990 "xmlparse.c"
        var $104=((($103)) & 255); //@line 2990 "xmlparse.c"
        $isXMLNS=$104; //@line 2990 "xmlparse.c"
        var $105=$mustBeXML; //@line 2992 "xmlparse.c"
        var $106=$isXML; //@line 2992 "xmlparse.c"
        var $107=($105)!=($106); //@line 2992 "xmlparse.c"
        if ($107) { __label__ = 33; break; } else { __label__ = 37; break; } //@line 2992 "xmlparse.c"
      case 33: // $bb33
        var $108=$mustBeXML; //@line 2993 "xmlparse.c"
        var $109=($108)!=0; //@line 2993 "xmlparse.c"
        if ($109) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 2993 "xmlparse.c"
      case 34: // $bb34
        $iftmp_117=38; //@line 2993 "xmlparse.c"
        __label__ = 36; break; //@line 2993 "xmlparse.c"
      case 35: // $bb35
        $iftmp_117=40; //@line 2993 "xmlparse.c"
        __label__ = 36; break; //@line 2993 "xmlparse.c"
      case 36: // $bb36
        var $110=$iftmp_117; //@line 2993 "xmlparse.c"
        $0=$110; //@line 2993 "xmlparse.c"
        __label__ = 65; break; //@line 2993 "xmlparse.c"
      case 37: // $bb37
        var $111=$isXMLNS; //@line 2996 "xmlparse.c"
        var $112=($111)!=0; //@line 2996 "xmlparse.c"
        if ($112) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 2996 "xmlparse.c"
      case 38: // $bb38
        $0=40; //@line 2997 "xmlparse.c"
        __label__ = 65; break; //@line 2997 "xmlparse.c"
      case 39: // $bb39
        var $113=$parser_addr; //@line 2999 "xmlparse.c"
        var $114=$113+472; //@line 2999 "xmlparse.c"
        var $115=HEAP[$114]; //@line 2999 "xmlparse.c"
        var $116=($115)!=0; //@line 2999 "xmlparse.c"
        if ($116) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 2999 "xmlparse.c"
      case 40: // $bb40
        var $117=$len; //@line 3000 "xmlparse.c"
        var $118=($117) + 1; //@line 3000 "xmlparse.c"
        $len=$118; //@line 3000 "xmlparse.c"
        __label__ = 41; break; //@line 3000 "xmlparse.c"
      case 41: // $bb41
        var $119=$parser_addr; //@line 3001 "xmlparse.c"
        var $120=$119+376; //@line 3001 "xmlparse.c"
        var $121=HEAP[$120]; //@line 3001 "xmlparse.c"
        var $122=($121)!=0; //@line 3001 "xmlparse.c"
        var $123=$parser_addr; //@line 3002 "xmlparse.c"
        if ($122) { __label__ = 42; break; } else { __label__ = 47; break; } //@line 3001 "xmlparse.c"
      case 42: // $bb42
        var $124=$123+376; //@line 3002 "xmlparse.c"
        var $125=HEAP[$124]; //@line 3002 "xmlparse.c"
        $b=$125; //@line 3002 "xmlparse.c"
        var $126=$b; //@line 3003 "xmlparse.c"
        var $127=$126+24; //@line 3003 "xmlparse.c"
        var $128=HEAP[$127]; //@line 3003 "xmlparse.c"
        var $129=$len; //@line 3003 "xmlparse.c"
        var $130=($128) < ($129); //@line 3003 "xmlparse.c"
        if ($130) { __label__ = 43; break; } else { __label__ = 46; break; } //@line 3003 "xmlparse.c"
      case 43: // $bb43
        var $131=$parser_addr; //@line 3004 "xmlparse.c"
        var $132=$131+12; //@line 3004 "xmlparse.c"
        var $133=$132+4; //@line 3004 "xmlparse.c"
        var $134=HEAP[$133]; //@line 3004 "xmlparse.c"
        var $135=$len; //@line 3004 "xmlparse.c"
        var $136=($135) + 24; //@line 3004 "xmlparse.c"
        var $137=$b; //@line 3004 "xmlparse.c"
        var $138=$137+16; //@line 3004 "xmlparse.c"
        var $139=HEAP[$138]; //@line 3004 "xmlparse.c"
        var $140=FUNCTION_TABLE[$134]($139, $136); //@line 3004 "xmlparse.c"
        $temp=$140; //@line 3004 "xmlparse.c"
        var $141=$temp; //@line 3006 "xmlparse.c"
        var $142=($141)==0; //@line 3006 "xmlparse.c"
        if ($142) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 3006 "xmlparse.c"
      case 44: // $bb44
        $0=1; //@line 3007 "xmlparse.c"
        __label__ = 65; break; //@line 3007 "xmlparse.c"
      case 45: // $bb45
        var $143=$b; //@line 3008 "xmlparse.c"
        var $144=$143+16; //@line 3008 "xmlparse.c"
        var $145=$temp; //@line 3008 "xmlparse.c"
        HEAP[$144]=$145; //@line 3008 "xmlparse.c"
        var $146=$len; //@line 3009 "xmlparse.c"
        var $147=($146) + 24; //@line 3009 "xmlparse.c"
        var $148=$b; //@line 3009 "xmlparse.c"
        var $149=$148+24; //@line 3009 "xmlparse.c"
        HEAP[$149]=$147; //@line 3009 "xmlparse.c"
        __label__ = 46; break; //@line 3009 "xmlparse.c"
      case 46: // $bb46
        var $150=$b; //@line 3011 "xmlparse.c"
        var $151=$150+4; //@line 3011 "xmlparse.c"
        var $152=HEAP[$151]; //@line 3011 "xmlparse.c"
        var $153=$parser_addr; //@line 3011 "xmlparse.c"
        var $154=$153+376; //@line 3011 "xmlparse.c"
        HEAP[$154]=$152; //@line 3011 "xmlparse.c"
        __label__ = 52; break; //@line 3011 "xmlparse.c"
      case 47: // $bb47
        var $155=$123+12; //@line 3014 "xmlparse.c"
        var $156=$155; //@line 3014 "xmlparse.c"
        var $157=HEAP[$156]; //@line 3014 "xmlparse.c"
        var $158=FUNCTION_TABLE[$157](28); //@line 3014 "xmlparse.c"
        var $159=$158; //@line 3014 "xmlparse.c"
        $b=$159; //@line 3014 "xmlparse.c"
        var $160=$b; //@line 3015 "xmlparse.c"
        var $161=($160)==0; //@line 3015 "xmlparse.c"
        if ($161) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 3015 "xmlparse.c"
      case 48: // $bb48
        $0=1; //@line 3016 "xmlparse.c"
        __label__ = 65; break; //@line 3016 "xmlparse.c"
      case 49: // $bb49
        var $162=$parser_addr; //@line 3017 "xmlparse.c"
        var $163=$162+12; //@line 3017 "xmlparse.c"
        var $164=$163; //@line 3017 "xmlparse.c"
        var $165=HEAP[$164]; //@line 3017 "xmlparse.c"
        var $166=$len; //@line 3017 "xmlparse.c"
        var $167=($166) + 24; //@line 3017 "xmlparse.c"
        var $168=FUNCTION_TABLE[$165]($167); //@line 3017 "xmlparse.c"
        var $169=$b; //@line 3017 "xmlparse.c"
        var $170=$169+16; //@line 3017 "xmlparse.c"
        HEAP[$170]=$168; //@line 3017 "xmlparse.c"
        var $171=$b; //@line 3018 "xmlparse.c"
        var $172=$171+16; //@line 3018 "xmlparse.c"
        var $173=HEAP[$172]; //@line 3018 "xmlparse.c"
        var $174=($173)==0; //@line 3018 "xmlparse.c"
        if ($174) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 3018 "xmlparse.c"
      case 50: // $bb50
        var $175=$parser_addr; //@line 3019 "xmlparse.c"
        var $176=$175+12; //@line 3019 "xmlparse.c"
        var $177=$176+8; //@line 3019 "xmlparse.c"
        var $178=HEAP[$177]; //@line 3019 "xmlparse.c"
        var $179=$b; //@line 3019 "xmlparse.c"
        var $180=$179; //@line 3019 "xmlparse.c"
        FUNCTION_TABLE[$178]($180); //@line 3019 "xmlparse.c"
        $0=1; //@line 3020 "xmlparse.c"
        __label__ = 65; break; //@line 3020 "xmlparse.c"
      case 51: // $bb51
        var $181=$len; //@line 3022 "xmlparse.c"
        var $182=($181) + 24; //@line 3022 "xmlparse.c"
        var $183=$b; //@line 3022 "xmlparse.c"
        var $184=$183+24; //@line 3022 "xmlparse.c"
        HEAP[$184]=$182; //@line 3022 "xmlparse.c"
        __label__ = 52; break; //@line 3022 "xmlparse.c"
      case 52: // $bb52
        var $185=$b; //@line 3024 "xmlparse.c"
        var $186=$185+20; //@line 3024 "xmlparse.c"
        var $187=$len; //@line 3024 "xmlparse.c"
        HEAP[$186]=$187; //@line 3024 "xmlparse.c"
        var $188=$len; //@line 3025 "xmlparse.c"
        var $189=$b; //@line 3025 "xmlparse.c"
        var $190=$189+16; //@line 3025 "xmlparse.c"
        var $191=HEAP[$190]; //@line 3025 "xmlparse.c"
        var $192=$uri_addr; //@line 3025 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($191, $192, $188, 1, 0); //@line 3025 "xmlparse.c"
        var $193=$parser_addr; //@line 3026 "xmlparse.c"
        var $194=$193+472; //@line 3026 "xmlparse.c"
        var $195=HEAP[$194]; //@line 3026 "xmlparse.c"
        var $196=($195)!=0; //@line 3026 "xmlparse.c"
        if ($196) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 3026 "xmlparse.c"
      case 53: // $bb53
        var $197=$b; //@line 3027 "xmlparse.c"
        var $198=$197+16; //@line 3027 "xmlparse.c"
        var $199=HEAP[$198]; //@line 3027 "xmlparse.c"
        var $200=$len; //@line 3027 "xmlparse.c"
        var $201=($200) - 1; //@line 3027 "xmlparse.c"
        var $202=$parser_addr; //@line 3027 "xmlparse.c"
        var $203=$202+472; //@line 3027 "xmlparse.c"
        var $204=HEAP[$203]; //@line 3027 "xmlparse.c"
        var $205=$199+$201; //@line 3027 "xmlparse.c"
        HEAP[$205]=$204; //@line 3027 "xmlparse.c"
        __label__ = 54; break; //@line 3027 "xmlparse.c"
      case 54: // $bb54
        var $206=$b; //@line 3028 "xmlparse.c"
        var $207=$206; //@line 3028 "xmlparse.c"
        var $208=$prefix_addr; //@line 3028 "xmlparse.c"
        HEAP[$207]=$208; //@line 3028 "xmlparse.c"
        var $209=$b; //@line 3029 "xmlparse.c"
        var $210=$209+12; //@line 3029 "xmlparse.c"
        var $211=$attId_addr; //@line 3029 "xmlparse.c"
        HEAP[$210]=$211; //@line 3029 "xmlparse.c"
        var $212=$prefix_addr; //@line 3030 "xmlparse.c"
        var $213=$212+4; //@line 3030 "xmlparse.c"
        var $214=HEAP[$213]; //@line 3030 "xmlparse.c"
        var $215=$b; //@line 3030 "xmlparse.c"
        var $216=$215+8; //@line 3030 "xmlparse.c"
        HEAP[$216]=$214; //@line 3030 "xmlparse.c"
        var $217=$uri_addr; //@line 3032 "xmlparse.c"
        var $218=HEAP[$217]; //@line 3032 "xmlparse.c"
        var $219=($218)!=0; //@line 3032 "xmlparse.c"
        if ($219) { __label__ = 57; break; } else { __label__ = 55; break; } //@line 3032 "xmlparse.c"
      case 55: // $bb55
        var $220=$parser_addr; //@line 3032 "xmlparse.c"
        var $221=$220+356; //@line 3032 "xmlparse.c"
        var $222=HEAP[$221]; //@line 3032 "xmlparse.c"
        var $223=$222+152; //@line 3032 "xmlparse.c"
        var $224=$prefix_addr; //@line 3032 "xmlparse.c"
        var $225=($223)!=($224); //@line 3032 "xmlparse.c"
        if ($225) { __label__ = 57; break; } else { __label__ = 56; break; } //@line 3032 "xmlparse.c"
      case 56: // $bb56
        var $226=$prefix_addr; //@line 3033 "xmlparse.c"
        var $227=$226+4; //@line 3033 "xmlparse.c"
        HEAP[$227]=0; //@line 3033 "xmlparse.c"
        __label__ = 58; break; //@line 3033 "xmlparse.c"
      case 57: // $bb57
        var $228=$prefix_addr; //@line 3035 "xmlparse.c"
        var $229=$228+4; //@line 3035 "xmlparse.c"
        var $230=$b; //@line 3035 "xmlparse.c"
        HEAP[$229]=$230; //@line 3035 "xmlparse.c"
        __label__ = 58; break; //@line 3035 "xmlparse.c"
      case 58: // $bb58
        var $231=$bindingsPtr_addr; //@line 3036 "xmlparse.c"
        var $232=HEAP[$231]; //@line 3036 "xmlparse.c"
        var $233=$b; //@line 3036 "xmlparse.c"
        var $234=$233+4; //@line 3036 "xmlparse.c"
        HEAP[$234]=$232; //@line 3036 "xmlparse.c"
        var $235=$bindingsPtr_addr; //@line 3037 "xmlparse.c"
        var $236=$b; //@line 3037 "xmlparse.c"
        HEAP[$235]=$236; //@line 3037 "xmlparse.c"
        var $237=$attId_addr; //@line 3039 "xmlparse.c"
        var $238=($237)!=0; //@line 3039 "xmlparse.c"
        if ($238) { __label__ = 59; break; } else { __label__ = 64; break; } //@line 3039 "xmlparse.c"
      case 59: // $bb59
        var $239=$parser_addr; //@line 3039 "xmlparse.c"
        var $240=$239+100; //@line 3039 "xmlparse.c"
        var $241=HEAP[$240]; //@line 3039 "xmlparse.c"
        var $242=($241)!=0; //@line 3039 "xmlparse.c"
        if ($242) { __label__ = 60; break; } else { __label__ = 64; break; } //@line 3039 "xmlparse.c"
      case 60: // $bb60
        var $243=$parser_addr; //@line 3040 "xmlparse.c"
        var $244=$243+100; //@line 3040 "xmlparse.c"
        var $245=HEAP[$244]; //@line 3040 "xmlparse.c"
        var $246=$prefix_addr; //@line 3040 "xmlparse.c"
        var $247=$246+4; //@line 3040 "xmlparse.c"
        var $248=HEAP[$247]; //@line 3040 "xmlparse.c"
        var $249=($248)!=0; //@line 3040 "xmlparse.c"
        if ($249) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 3040 "xmlparse.c"
      case 61: // $bb61
        var $250=$uri_addr; //@line 3040 "xmlparse.c"
        $iftmp_119=$250; //@line 3040 "xmlparse.c"
        __label__ = 63; break; //@line 3040 "xmlparse.c"
      case 62: // $bb62
        $iftmp_119=0; //@line 3040 "xmlparse.c"
        __label__ = 63; break; //@line 3040 "xmlparse.c"
      case 63: // $bb63
        var $251=$prefix_addr; //@line 3040 "xmlparse.c"
        var $252=$251; //@line 3040 "xmlparse.c"
        var $253=HEAP[$252]; //@line 3040 "xmlparse.c"
        var $254=$parser_addr; //@line 3040 "xmlparse.c"
        var $255=$254+4; //@line 3040 "xmlparse.c"
        var $256=HEAP[$255]; //@line 3040 "xmlparse.c"
        var $257=$iftmp_119; //@line 3040 "xmlparse.c"
        FUNCTION_TABLE[$245]($256, $253, $257); //@line 3040 "xmlparse.c"
        __label__ = 64; break; //@line 3040 "xmlparse.c"
      case 64: // $bb64
        $0=0; //@line 3042 "xmlparse.c"
        __label__ = 65; break; //@line 3042 "xmlparse.c"
      case 65: // $bb65
        var $258=$0; //@line 2964 "xmlparse.c"
        $retval=$258; //@line 2964 "xmlparse.c"
        var $retval66=$retval; //@line 2964 "xmlparse.c"
        ;
        return $retval66; //@line 2964 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cdataSectionProcessor($parser, $start, $end, $endPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $start_addr=__stackBase__;
        var $end_addr;
        var $endPtr_addr;
        var $retval;
        var $0;
        var $result;
        $parser_addr=$parser;
        HEAP[$start_addr]=$start;
        $end_addr=$end;
        $endPtr_addr=$endPtr;
        var $1=$parser_addr; //@line 3055 "xmlparse.c"
        var $2=$1+480; //@line 3055 "xmlparse.c"
        var $3=$2+4; //@line 3055 "xmlparse.c"
        var $4=HEAP[$3]; //@line 3055 "xmlparse.c"
        var $5=($4)==0; //@line 3055 "xmlparse.c"
        var $6=($5); //@line 3055 "xmlparse.c"
        var $7=$parser_addr; //@line 3055 "xmlparse.c"
        var $8=$7+144; //@line 3055 "xmlparse.c"
        var $9=HEAP[$8]; //@line 3055 "xmlparse.c"
        var $10=$parser_addr; //@line 3055 "xmlparse.c"
        var $11=$end_addr; //@line 3055 "xmlparse.c"
        var $12=$endPtr_addr; //@line 3055 "xmlparse.c"
        var $13=((($6)) & 255); //@line 3055 "xmlparse.c"
        var $14=_doCdataSection($10, $9, $start_addr, $11, $12, $13); //@line 3055 "xmlparse.c"
        $result=$14; //@line 3055 "xmlparse.c"
        var $15=$result; //@line 3056 "xmlparse.c"
        var $16=($15)!=0; //@line 3056 "xmlparse.c"
        if ($16) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3056 "xmlparse.c"
      case 1: // $bb
        var $17=$result; //@line 3057 "xmlparse.c"
        $0=$17; //@line 3057 "xmlparse.c"
        __label__ = 7; break; //@line 3057 "xmlparse.c"
      case 2: // $bb1
        var $18=HEAP[$start_addr]; //@line 3058 "xmlparse.c"
        var $19=($18)!=0; //@line 3058 "xmlparse.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 3058 "xmlparse.c"
      case 3: // $bb2
        var $20=$parser_addr; //@line 3059 "xmlparse.c"
        var $21=$20+476; //@line 3059 "xmlparse.c"
        var $22=HEAP[$21]; //@line 3059 "xmlparse.c"
        var $23=($22)!=0; //@line 3059 "xmlparse.c"
        var $24=$parser_addr; //@line 3060 "xmlparse.c"
        var $25=$24+280; //@line 3060 "xmlparse.c"
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3059 "xmlparse.c"
      case 4: // $bb3
        HEAP[$25]=(FUNCTION_TABLE_OFFSET + 60); //@line 3060 "xmlparse.c"
        var $26=HEAP[$start_addr]; //@line 3061 "xmlparse.c"
        var $27=$parser_addr; //@line 3061 "xmlparse.c"
        var $28=$end_addr; //@line 3061 "xmlparse.c"
        var $29=$endPtr_addr; //@line 3061 "xmlparse.c"
        var $30=_externalEntityContentProcessor($27, $26, $28, $29); //@line 3061 "xmlparse.c"
        $0=$30; //@line 3061 "xmlparse.c"
        __label__ = 7; break; //@line 3061 "xmlparse.c"
      case 5: // $bb4
        HEAP[$25]=(FUNCTION_TABLE_OFFSET + 64); //@line 3064 "xmlparse.c"
        var $31=HEAP[$start_addr]; //@line 3065 "xmlparse.c"
        var $32=$parser_addr; //@line 3065 "xmlparse.c"
        var $33=$end_addr; //@line 3065 "xmlparse.c"
        var $34=$endPtr_addr; //@line 3065 "xmlparse.c"
        var $35=_contentProcessor($32, $31, $33, $34); //@line 3065 "xmlparse.c"
        $0=$35; //@line 3065 "xmlparse.c"
        __label__ = 7; break; //@line 3065 "xmlparse.c"
      case 6: // $bb5
        var $36=$result; //@line 3068 "xmlparse.c"
        $0=$36; //@line 3068 "xmlparse.c"
        __label__ = 7; break; //@line 3068 "xmlparse.c"
      case 7: // $bb6
        var $37=$0; //@line 3057 "xmlparse.c"
        $retval=$37; //@line 3057 "xmlparse.c"
        var $retval7=$retval; //@line 3057 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 3057 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doCdataSection($parser, $enc, $startPtr, $end, $nextPtr, $haveMore) {
    var __stackBase__  = STACKTOP; STACKTOP += 13; _memset(__stackBase__, 0, 13);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $enc_addr;
        var $startPtr_addr;
        var $end_addr;
        var $nextPtr_addr;
        var $haveMore_addr;
        var $retval;
        var $0;
        var $s=__stackBase__;
        var $eventPP;
        var $eventEndPP;
        var $next=__stackBase__+4;
        var $tok;
        var $c=__stackBase__+8;
        var $dataPtr=__stackBase__+9;
        $parser_addr=$parser;
        $enc_addr=$enc;
        $startPtr_addr=$startPtr;
        $end_addr=$end;
        $nextPtr_addr=$nextPtr;
        $haveMore_addr=$haveMore;
        var $1=$startPtr_addr; //@line 3082 "xmlparse.c"
        var $2=HEAP[$1]; //@line 3082 "xmlparse.c"
        HEAP[$s]=$2; //@line 3082 "xmlparse.c"
        var $3=$parser_addr; //@line 3085 "xmlparse.c"
        var $4=$3+144; //@line 3085 "xmlparse.c"
        var $5=HEAP[$4]; //@line 3085 "xmlparse.c"
        var $6=$enc_addr; //@line 3085 "xmlparse.c"
        var $7=($5)==($6); //@line 3085 "xmlparse.c"
        var $8=$parser_addr; //@line 3086 "xmlparse.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3085 "xmlparse.c"
      case 1: // $bb
        var $9=$8+288; //@line 3086 "xmlparse.c"
        $eventPP=$9; //@line 3086 "xmlparse.c"
        var $10=HEAP[$s]; //@line 3087 "xmlparse.c"
        var $11=$eventPP; //@line 3087 "xmlparse.c"
        HEAP[$11]=$10; //@line 3087 "xmlparse.c"
        var $12=$parser_addr; //@line 3088 "xmlparse.c"
        var $13=$12+292; //@line 3088 "xmlparse.c"
        $eventEndPP=$13; //@line 3088 "xmlparse.c"
        __label__ = 3; break; //@line 3088 "xmlparse.c"
      case 2: // $bb1
        var $14=$8+300; //@line 3091 "xmlparse.c"
        var $15=HEAP[$14]; //@line 3091 "xmlparse.c"
        var $16=$15; //@line 3091 "xmlparse.c"
        $eventPP=$16; //@line 3091 "xmlparse.c"
        var $17=$parser_addr; //@line 3092 "xmlparse.c"
        var $18=$17+300; //@line 3092 "xmlparse.c"
        var $19=HEAP[$18]; //@line 3092 "xmlparse.c"
        var $20=$19+4; //@line 3092 "xmlparse.c"
        $eventEndPP=$20; //@line 3092 "xmlparse.c"
        __label__ = 3; break; //@line 3092 "xmlparse.c"
      case 3: // $bb2
        var $21=HEAP[$s]; //@line 3094 "xmlparse.c"
        var $22=$eventPP; //@line 3094 "xmlparse.c"
        HEAP[$22]=$21; //@line 3094 "xmlparse.c"
        var $23=$startPtr_addr; //@line 3095 "xmlparse.c"
        HEAP[$23]=0; //@line 3095 "xmlparse.c"
        __label__ = 4; break; //@line 3095 "xmlparse.c"
      case 4: // $bb3
        var $24=$enc_addr; //@line 3099 "xmlparse.c"
        var $25=$24; //@line 3099 "xmlparse.c"
        var $26=$25+8; //@line 3099 "xmlparse.c"
        var $27=HEAP[$26]; //@line 3099 "xmlparse.c"
        var $28=HEAP[$s]; //@line 3099 "xmlparse.c"
        var $29=$enc_addr; //@line 3099 "xmlparse.c"
        var $30=$end_addr; //@line 3099 "xmlparse.c"
        var $31=FUNCTION_TABLE[$27]($29, $28, $30, $next); //@line 3099 "xmlparse.c"
        $tok=$31; //@line 3099 "xmlparse.c"
        var $32=HEAP[$next]; //@line 3100 "xmlparse.c"
        var $33=$eventEndPP; //@line 3100 "xmlparse.c"
        HEAP[$33]=$32; //@line 3100 "xmlparse.c"
        var $34=$tok; //@line 3101 "xmlparse.c"
        if ($34 == -4) {
          __label__ = 27; break;
        }
        else if ($34 == -2) {
          __label__ = 24; break;
        }
        else if ($34 == -1) {
          __label__ = 27; break;
        }
        else if ($34 == 0) {
          __label__ = 23; break;
        }
        else if ($34 == 6) {
          __label__ = 16; break;
        }
        else if ($34 == 7) {
          __label__ = 12; break;
        }
        else if ($34 == 40) {
          __label__ = 5; break;
        }
        else {
        __label__ = 30; break;
        }
        
      case 5: // $bb4
        var $35=$parser_addr; //@line 3103 "xmlparse.c"
        var $36=$35+76; //@line 3103 "xmlparse.c"
        var $37=HEAP[$36]; //@line 3103 "xmlparse.c"
        var $38=($37)!=0; //@line 3103 "xmlparse.c"
        var $39=$parser_addr; //@line 3104 "xmlparse.c"
        if ($38) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3103 "xmlparse.c"
      case 6: // $bb5
        var $40=$39+76; //@line 3104 "xmlparse.c"
        var $41=HEAP[$40]; //@line 3104 "xmlparse.c"
        var $42=$parser_addr; //@line 3104 "xmlparse.c"
        var $43=$42+4; //@line 3104 "xmlparse.c"
        var $44=HEAP[$43]; //@line 3104 "xmlparse.c"
        FUNCTION_TABLE[$41]($44); //@line 3104 "xmlparse.c"
        __label__ = 9; break; //@line 3104 "xmlparse.c"
      case 7: // $bb6
        var $45=$39+80; //@line 3110 "xmlparse.c"
        var $46=HEAP[$45]; //@line 3110 "xmlparse.c"
        var $47=($46)!=0; //@line 3110 "xmlparse.c"
        if ($47) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3110 "xmlparse.c"
      case 8: // $bb7
        var $48=HEAP[$next]; //@line 3111 "xmlparse.c"
        var $49=HEAP[$s]; //@line 3111 "xmlparse.c"
        var $50=$parser_addr; //@line 3111 "xmlparse.c"
        var $51=$enc_addr; //@line 3111 "xmlparse.c"
        _reportDefault($50, $51, $49, $48); //@line 3111 "xmlparse.c"
        __label__ = 9; break; //@line 3111 "xmlparse.c"
      case 9: // $bb8
        var $52=HEAP[$next]; //@line 3112 "xmlparse.c"
        var $53=$startPtr_addr; //@line 3112 "xmlparse.c"
        HEAP[$53]=$52; //@line 3112 "xmlparse.c"
        var $54=HEAP[$next]; //@line 3113 "xmlparse.c"
        var $55=$nextPtr_addr; //@line 3113 "xmlparse.c"
        HEAP[$55]=$54; //@line 3113 "xmlparse.c"
        var $56=$parser_addr; //@line 3114 "xmlparse.c"
        var $57=$56+480; //@line 3114 "xmlparse.c"
        var $58=$57; //@line 3114 "xmlparse.c"
        var $59=HEAP[$58]; //@line 3114 "xmlparse.c"
        var $60=($59)==2; //@line 3114 "xmlparse.c"
        if ($60) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3114 "xmlparse.c"
      case 10: // $bb9
        $0=35; //@line 3115 "xmlparse.c"
        __label__ = 34; break; //@line 3115 "xmlparse.c"
      case 11: // $bb10
        $0=0; //@line 3117 "xmlparse.c"
        __label__ = 34; break; //@line 3117 "xmlparse.c"
      case 12: // $bb11
        var $61=$parser_addr; //@line 3119 "xmlparse.c"
        var $62=$61+60; //@line 3119 "xmlparse.c"
        var $63=HEAP[$62]; //@line 3119 "xmlparse.c"
        var $64=($63)!=0; //@line 3119 "xmlparse.c"
        if ($64) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3119 "xmlparse.c"
      case 13: // $bb12
        HEAP[$c]=10; //@line 3120 "xmlparse.c"
        var $65=$parser_addr; //@line 3121 "xmlparse.c"
        var $66=$65+60; //@line 3121 "xmlparse.c"
        var $67=HEAP[$66]; //@line 3121 "xmlparse.c"
        var $68=$parser_addr; //@line 3121 "xmlparse.c"
        var $69=$68+4; //@line 3121 "xmlparse.c"
        var $70=HEAP[$69]; //@line 3121 "xmlparse.c"
        FUNCTION_TABLE[$67]($70, $c, 1); //@line 3121 "xmlparse.c"
        __label__ = 31; break; //@line 3121 "xmlparse.c"
      case 14: // $bb13
        var $71=$parser_addr; //@line 3123 "xmlparse.c"
        var $72=$71+80; //@line 3123 "xmlparse.c"
        var $73=HEAP[$72]; //@line 3123 "xmlparse.c"
        var $74=($73)!=0; //@line 3123 "xmlparse.c"
        if ($74) { __label__ = 15; break; } else { __label__ = 31; break; } //@line 3123 "xmlparse.c"
      case 15: // $bb14
        var $75=HEAP[$next]; //@line 3124 "xmlparse.c"
        var $76=HEAP[$s]; //@line 3124 "xmlparse.c"
        var $77=$parser_addr; //@line 3124 "xmlparse.c"
        var $78=$enc_addr; //@line 3124 "xmlparse.c"
        _reportDefault($77, $78, $76, $75); //@line 3124 "xmlparse.c"
        __label__ = 31; break; //@line 3124 "xmlparse.c"
      case 16: // $bb16
        var $79=$parser_addr; //@line 3127 "xmlparse.c"
        var $80=$79+60; //@line 3127 "xmlparse.c"
        var $81=HEAP[$80]; //@line 3127 "xmlparse.c"
        var $82=($81)!=0; //@line 3127 "xmlparse.c"
        if ($82) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 3127 "xmlparse.c"
      case 17: // $bb17
        var $83=$enc_addr; //@line 3128 "xmlparse.c"
        var $84=$83+72; //@line 3128 "xmlparse.c"
        var $85=HEAP[$84]; //@line 3128 "xmlparse.c"
        var $86=($85)==0; //@line 3128 "xmlparse.c"
        if ($86) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 3128 "xmlparse.c"
      case 18: // $bb18
        var $87=$parser_addr; //@line 3130 "xmlparse.c"
        var $88=$87+44; //@line 3130 "xmlparse.c"
        var $89=HEAP[$88]; //@line 3130 "xmlparse.c"
        HEAP[$dataPtr]=$89; //@line 3130 "xmlparse.c"
        var $90=$enc_addr; //@line 3131 "xmlparse.c"
        var $91=$90+60; //@line 3131 "xmlparse.c"
        var $92=HEAP[$91]; //@line 3131 "xmlparse.c"
        var $93=$parser_addr; //@line 3131 "xmlparse.c"
        var $94=$93+48; //@line 3131 "xmlparse.c"
        var $95=HEAP[$94]; //@line 3131 "xmlparse.c"
        var $96=HEAP[$next]; //@line 3131 "xmlparse.c"
        var $97=$enc_addr; //@line 3131 "xmlparse.c"
        FUNCTION_TABLE[$92]($97, $s, $96, $dataPtr, $95); //@line 3131 "xmlparse.c"
        var $98=HEAP[$next]; //@line 3132 "xmlparse.c"
        var $99=$eventEndPP; //@line 3132 "xmlparse.c"
        HEAP[$99]=$98; //@line 3132 "xmlparse.c"
        var $100=$parser_addr; //@line 3133 "xmlparse.c"
        var $101=$100+60; //@line 3133 "xmlparse.c"
        var $102=HEAP[$101]; //@line 3133 "xmlparse.c"
        var $103=HEAP[$dataPtr]; //@line 3133 "xmlparse.c"
        var $104=($103); //@line 3133 "xmlparse.c"
        var $105=$parser_addr; //@line 3133 "xmlparse.c"
        var $106=$105+44; //@line 3133 "xmlparse.c"
        var $107=HEAP[$106]; //@line 3133 "xmlparse.c"
        var $108=($107); //@line 3133 "xmlparse.c"
        var $109=($104) - ($108); //@line 3133 "xmlparse.c"
        var $110=$parser_addr; //@line 3133 "xmlparse.c"
        var $111=$110+44; //@line 3133 "xmlparse.c"
        var $112=HEAP[$111]; //@line 3133 "xmlparse.c"
        var $113=$parser_addr; //@line 3133 "xmlparse.c"
        var $114=$113+4; //@line 3133 "xmlparse.c"
        var $115=HEAP[$114]; //@line 3133 "xmlparse.c"
        FUNCTION_TABLE[$102]($115, $112, $109); //@line 3133 "xmlparse.c"
        var $116=HEAP[$s]; //@line 3135 "xmlparse.c"
        var $117=HEAP[$next]; //@line 3135 "xmlparse.c"
        var $118=($116)==($117); //@line 3135 "xmlparse.c"
        if ($118) { __label__ = 31; break; } else { __label__ = 19; break; } //@line 3135 "xmlparse.c"
      case 19: // $bb19
        var $119=HEAP[$s]; //@line 3137 "xmlparse.c"
        var $120=$eventPP; //@line 3137 "xmlparse.c"
        HEAP[$120]=$119; //@line 3137 "xmlparse.c"
        __label__ = 18; break; //@line 3137 "xmlparse.c"
      case 20: // $bb21
        var $121=$parser_addr; //@line 3141 "xmlparse.c"
        var $122=$121+60; //@line 3141 "xmlparse.c"
        var $123=HEAP[$122]; //@line 3141 "xmlparse.c"
        var $124=HEAP[$next]; //@line 3141 "xmlparse.c"
        var $125=($124); //@line 3141 "xmlparse.c"
        var $126=HEAP[$s]; //@line 3141 "xmlparse.c"
        var $127=($126); //@line 3141 "xmlparse.c"
        var $128=($125) - ($127); //@line 3141 "xmlparse.c"
        var $129=HEAP[$s]; //@line 3141 "xmlparse.c"
        var $130=$parser_addr; //@line 3141 "xmlparse.c"
        var $131=$130+4; //@line 3141 "xmlparse.c"
        var $132=HEAP[$131]; //@line 3141 "xmlparse.c"
        FUNCTION_TABLE[$123]($132, $129, $128); //@line 3141 "xmlparse.c"
        __label__ = 31; break; //@line 3141 "xmlparse.c"
      case 21: // $bb23
        var $133=$parser_addr; //@line 3145 "xmlparse.c"
        var $134=$133+80; //@line 3145 "xmlparse.c"
        var $135=HEAP[$134]; //@line 3145 "xmlparse.c"
        var $136=($135)!=0; //@line 3145 "xmlparse.c"
        if ($136) { __label__ = 22; break; } else { __label__ = 31; break; } //@line 3145 "xmlparse.c"
      case 22: // $bb24
        var $137=HEAP[$next]; //@line 3146 "xmlparse.c"
        var $138=HEAP[$s]; //@line 3146 "xmlparse.c"
        var $139=$parser_addr; //@line 3146 "xmlparse.c"
        var $140=$enc_addr; //@line 3146 "xmlparse.c"
        _reportDefault($139, $140, $138, $137); //@line 3146 "xmlparse.c"
        __label__ = 31; break; //@line 3146 "xmlparse.c"
      case 23: // $bb26
        var $141=HEAP[$next]; //@line 3149 "xmlparse.c"
        var $142=$eventPP; //@line 3149 "xmlparse.c"
        HEAP[$142]=$141; //@line 3149 "xmlparse.c"
        $0=4; //@line 3150 "xmlparse.c"
        __label__ = 34; break; //@line 3150 "xmlparse.c"
      case 24: // $bb27
        var $143=$haveMore_addr; //@line 3152 "xmlparse.c"
        var $144=($143)!=0; //@line 3152 "xmlparse.c"
        if ($144) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 3152 "xmlparse.c"
      case 25: // $bb28
        var $145=HEAP[$s]; //@line 3153 "xmlparse.c"
        var $146=$nextPtr_addr; //@line 3153 "xmlparse.c"
        HEAP[$146]=$145; //@line 3153 "xmlparse.c"
        $0=0; //@line 3154 "xmlparse.c"
        __label__ = 34; break; //@line 3154 "xmlparse.c"
      case 26: // $bb29
        $0=6; //@line 3156 "xmlparse.c"
        __label__ = 34; break; //@line 3156 "xmlparse.c"
      case 27: // $bb30
        var $147=$haveMore_addr; //@line 3159 "xmlparse.c"
        var $148=($147)!=0; //@line 3159 "xmlparse.c"
        if ($148) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 3159 "xmlparse.c"
      case 28: // $bb31
        var $149=HEAP[$s]; //@line 3160 "xmlparse.c"
        var $150=$nextPtr_addr; //@line 3160 "xmlparse.c"
        HEAP[$150]=$149; //@line 3160 "xmlparse.c"
        $0=0; //@line 3161 "xmlparse.c"
        __label__ = 34; break; //@line 3161 "xmlparse.c"
      case 29: // $bb32
        $0=20; //@line 3163 "xmlparse.c"
        __label__ = 34; break; //@line 3163 "xmlparse.c"
      case 30: // $bb33
        var $151=HEAP[$next]; //@line 3165 "xmlparse.c"
        var $152=$eventPP; //@line 3165 "xmlparse.c"
        HEAP[$152]=$151; //@line 3165 "xmlparse.c"
        $0=23; //@line 3166 "xmlparse.c"
        __label__ = 34; break; //@line 3166 "xmlparse.c"
      case 31: // $bb34
        var $153=HEAP[$next]; //@line 3169 "xmlparse.c"
        HEAP[$s]=$153; //@line 3169 "xmlparse.c"
        var $154=HEAP[$s]; //@line 3169 "xmlparse.c"
        var $155=$eventPP; //@line 3169 "xmlparse.c"
        HEAP[$155]=$154; //@line 3169 "xmlparse.c"
        var $156=$parser_addr; //@line 3170 "xmlparse.c"
        var $157=$156+480; //@line 3170 "xmlparse.c"
        var $158=$157; //@line 3170 "xmlparse.c"
        var $159=HEAP[$158]; //@line 3170 "xmlparse.c"
        if ($159 == 2) {
          __label__ = 33; break;
        }
        else if ($159 == 3) {
          __label__ = 32; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 32: // $bb35
        var $160=HEAP[$next]; //@line 3172 "xmlparse.c"
        var $161=$nextPtr_addr; //@line 3172 "xmlparse.c"
        HEAP[$161]=$160; //@line 3172 "xmlparse.c"
        $0=0; //@line 3173 "xmlparse.c"
        __label__ = 34; break; //@line 3173 "xmlparse.c"
      case 33: // $bb36
        $0=35; //@line 3175 "xmlparse.c"
        __label__ = 34; break; //@line 3175 "xmlparse.c"
      case 34: // $bb38
        var $162=$0; //@line 3115 "xmlparse.c"
        $retval=$162; //@line 3115 "xmlparse.c"
        var $retval39=$retval; //@line 3115 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval39; //@line 3115 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ignoreSectionProcessor($parser, $start, $end, $endPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $start_addr=__stackBase__;
        var $end_addr;
        var $endPtr_addr;
        var $retval;
        var $0;
        var $result;
        $parser_addr=$parser;
        HEAP[$start_addr]=$start;
        $end_addr=$end;
        $endPtr_addr=$endPtr;
        var $1=$parser_addr; //@line 3194 "xmlparse.c"
        var $2=$1+480; //@line 3194 "xmlparse.c"
        var $3=$2+4; //@line 3194 "xmlparse.c"
        var $4=HEAP[$3]; //@line 3194 "xmlparse.c"
        var $5=($4)==0; //@line 3194 "xmlparse.c"
        var $6=($5); //@line 3194 "xmlparse.c"
        var $7=$parser_addr; //@line 3194 "xmlparse.c"
        var $8=$7+144; //@line 3194 "xmlparse.c"
        var $9=HEAP[$8]; //@line 3194 "xmlparse.c"
        var $10=$parser_addr; //@line 3194 "xmlparse.c"
        var $11=$end_addr; //@line 3194 "xmlparse.c"
        var $12=$endPtr_addr; //@line 3194 "xmlparse.c"
        var $13=((($6)) & 255); //@line 3194 "xmlparse.c"
        var $14=_doIgnoreSection($10, $9, $start_addr, $11, $12, $13); //@line 3194 "xmlparse.c"
        $result=$14; //@line 3194 "xmlparse.c"
        var $15=$result; //@line 3195 "xmlparse.c"
        var $16=($15)!=0; //@line 3195 "xmlparse.c"
        if ($16) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3195 "xmlparse.c"
      case 1: // $bb
        var $17=$result; //@line 3196 "xmlparse.c"
        $0=$17; //@line 3196 "xmlparse.c"
        __label__ = 5; break; //@line 3196 "xmlparse.c"
      case 2: // $bb1
        var $18=HEAP[$start_addr]; //@line 3197 "xmlparse.c"
        var $19=($18)!=0; //@line 3197 "xmlparse.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3197 "xmlparse.c"
      case 3: // $bb2
        var $20=$parser_addr; //@line 3198 "xmlparse.c"
        var $21=$20+280; //@line 3198 "xmlparse.c"
        HEAP[$21]=(FUNCTION_TABLE_OFFSET + 66); //@line 3198 "xmlparse.c"
        var $22=HEAP[$start_addr]; //@line 3199 "xmlparse.c"
        var $23=$parser_addr; //@line 3199 "xmlparse.c"
        var $24=$end_addr; //@line 3199 "xmlparse.c"
        var $25=$endPtr_addr; //@line 3199 "xmlparse.c"
        var $26=_prologProcessor($23, $22, $24, $25); //@line 3199 "xmlparse.c"
        $0=$26; //@line 3199 "xmlparse.c"
        __label__ = 5; break; //@line 3199 "xmlparse.c"
      case 4: // $bb3
        var $27=$result; //@line 3201 "xmlparse.c"
        $0=$27; //@line 3201 "xmlparse.c"
        __label__ = 5; break; //@line 3201 "xmlparse.c"
      case 5: // $bb4
        var $28=$0; //@line 3196 "xmlparse.c"
        $retval=$28; //@line 3196 "xmlparse.c"
        var $retval5=$retval; //@line 3196 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 3196 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doIgnoreSection($parser, $enc, $startPtr, $end, $nextPtr, $haveMore) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $enc_addr;
        var $startPtr_addr;
        var $end_addr;
        var $nextPtr_addr;
        var $haveMore_addr;
        var $retval;
        var $0;
        var $next=__stackBase__;
        var $tok;
        var $s;
        var $eventPP;
        var $eventEndPP;
        $parser_addr=$parser;
        $enc_addr=$enc;
        $startPtr_addr=$startPtr;
        $end_addr=$end;
        $nextPtr_addr=$nextPtr;
        $haveMore_addr=$haveMore;
        var $1=$startPtr_addr; //@line 3217 "xmlparse.c"
        var $2=HEAP[$1]; //@line 3217 "xmlparse.c"
        $s=$2; //@line 3217 "xmlparse.c"
        var $3=$parser_addr; //@line 3220 "xmlparse.c"
        var $4=$3+144; //@line 3220 "xmlparse.c"
        var $5=HEAP[$4]; //@line 3220 "xmlparse.c"
        var $6=$enc_addr; //@line 3220 "xmlparse.c"
        var $7=($5)==($6); //@line 3220 "xmlparse.c"
        var $8=$parser_addr; //@line 3221 "xmlparse.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3220 "xmlparse.c"
      case 1: // $bb
        var $9=$8+288; //@line 3221 "xmlparse.c"
        $eventPP=$9; //@line 3221 "xmlparse.c"
        var $10=$eventPP; //@line 3222 "xmlparse.c"
        var $11=$s; //@line 3222 "xmlparse.c"
        HEAP[$10]=$11; //@line 3222 "xmlparse.c"
        var $12=$parser_addr; //@line 3223 "xmlparse.c"
        var $13=$12+292; //@line 3223 "xmlparse.c"
        $eventEndPP=$13; //@line 3223 "xmlparse.c"
        __label__ = 3; break; //@line 3223 "xmlparse.c"
      case 2: // $bb1
        var $14=$8+300; //@line 3226 "xmlparse.c"
        var $15=HEAP[$14]; //@line 3226 "xmlparse.c"
        var $16=$15; //@line 3226 "xmlparse.c"
        $eventPP=$16; //@line 3226 "xmlparse.c"
        var $17=$parser_addr; //@line 3227 "xmlparse.c"
        var $18=$17+300; //@line 3227 "xmlparse.c"
        var $19=HEAP[$18]; //@line 3227 "xmlparse.c"
        var $20=$19+4; //@line 3227 "xmlparse.c"
        $eventEndPP=$20; //@line 3227 "xmlparse.c"
        __label__ = 3; break; //@line 3227 "xmlparse.c"
      case 3: // $bb2
        var $21=$eventPP; //@line 3229 "xmlparse.c"
        var $22=$s; //@line 3229 "xmlparse.c"
        HEAP[$21]=$22; //@line 3229 "xmlparse.c"
        var $23=$startPtr_addr; //@line 3230 "xmlparse.c"
        HEAP[$23]=0; //@line 3230 "xmlparse.c"
        var $24=$enc_addr; //@line 3231 "xmlparse.c"
        var $25=$24; //@line 3231 "xmlparse.c"
        var $26=$25+12; //@line 3231 "xmlparse.c"
        var $27=HEAP[$26]; //@line 3231 "xmlparse.c"
        var $28=$enc_addr; //@line 3231 "xmlparse.c"
        var $29=$s; //@line 3231 "xmlparse.c"
        var $30=$end_addr; //@line 3231 "xmlparse.c"
        var $31=FUNCTION_TABLE[$27]($28, $29, $30, $next); //@line 3231 "xmlparse.c"
        $tok=$31; //@line 3231 "xmlparse.c"
        var $32=HEAP[$next]; //@line 3232 "xmlparse.c"
        var $33=$eventEndPP; //@line 3232 "xmlparse.c"
        HEAP[$33]=$32; //@line 3232 "xmlparse.c"
        var $34=$tok; //@line 3233 "xmlparse.c"
        if ($34 == -4) {
          __label__ = 13; break;
        }
        else if ($34 == -2) {
          __label__ = 10; break;
        }
        else if ($34 == -1) {
          __label__ = 13; break;
        }
        else if ($34 == 0) {
          __label__ = 9; break;
        }
        else if ($34 == 42) {
          __label__ = 4; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 4: // $bb3
        var $35=$parser_addr; //@line 3235 "xmlparse.c"
        var $36=$35+80; //@line 3235 "xmlparse.c"
        var $37=HEAP[$36]; //@line 3235 "xmlparse.c"
        var $38=($37)!=0; //@line 3235 "xmlparse.c"
        if ($38) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3235 "xmlparse.c"
      case 5: // $bb4
        var $39=HEAP[$next]; //@line 3236 "xmlparse.c"
        var $40=$parser_addr; //@line 3236 "xmlparse.c"
        var $41=$enc_addr; //@line 3236 "xmlparse.c"
        var $42=$s; //@line 3236 "xmlparse.c"
        _reportDefault($40, $41, $42, $39); //@line 3236 "xmlparse.c"
        __label__ = 6; break; //@line 3236 "xmlparse.c"
      case 6: // $bb5
        var $43=HEAP[$next]; //@line 3237 "xmlparse.c"
        var $44=$startPtr_addr; //@line 3237 "xmlparse.c"
        HEAP[$44]=$43; //@line 3237 "xmlparse.c"
        var $45=HEAP[$next]; //@line 3238 "xmlparse.c"
        var $46=$nextPtr_addr; //@line 3238 "xmlparse.c"
        HEAP[$46]=$45; //@line 3238 "xmlparse.c"
        var $47=$parser_addr; //@line 3239 "xmlparse.c"
        var $48=$47+480; //@line 3239 "xmlparse.c"
        var $49=$48; //@line 3239 "xmlparse.c"
        var $50=HEAP[$49]; //@line 3239 "xmlparse.c"
        var $51=($50)==2; //@line 3239 "xmlparse.c"
        if ($51) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3239 "xmlparse.c"
      case 7: // $bb6
        $0=35; //@line 3240 "xmlparse.c"
        __label__ = 17; break; //@line 3240 "xmlparse.c"
      case 8: // $bb7
        $0=0; //@line 3242 "xmlparse.c"
        __label__ = 17; break; //@line 3242 "xmlparse.c"
      case 9: // $bb8
        var $52=HEAP[$next]; //@line 3244 "xmlparse.c"
        var $53=$eventPP; //@line 3244 "xmlparse.c"
        HEAP[$53]=$52; //@line 3244 "xmlparse.c"
        $0=4; //@line 3245 "xmlparse.c"
        __label__ = 17; break; //@line 3245 "xmlparse.c"
      case 10: // $bb9
        var $54=$haveMore_addr; //@line 3247 "xmlparse.c"
        var $55=($54)!=0; //@line 3247 "xmlparse.c"
        if ($55) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3247 "xmlparse.c"
      case 11: // $bb10
        var $56=$nextPtr_addr; //@line 3248 "xmlparse.c"
        var $57=$s; //@line 3248 "xmlparse.c"
        HEAP[$56]=$57; //@line 3248 "xmlparse.c"
        $0=0; //@line 3249 "xmlparse.c"
        __label__ = 17; break; //@line 3249 "xmlparse.c"
      case 12: // $bb11
        $0=6; //@line 3251 "xmlparse.c"
        __label__ = 17; break; //@line 3251 "xmlparse.c"
      case 13: // $bb12
        var $58=$haveMore_addr; //@line 3254 "xmlparse.c"
        var $59=($58)!=0; //@line 3254 "xmlparse.c"
        if ($59) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3254 "xmlparse.c"
      case 14: // $bb13
        var $60=$nextPtr_addr; //@line 3255 "xmlparse.c"
        var $61=$s; //@line 3255 "xmlparse.c"
        HEAP[$60]=$61; //@line 3255 "xmlparse.c"
        $0=0; //@line 3256 "xmlparse.c"
        __label__ = 17; break; //@line 3256 "xmlparse.c"
      case 15: // $bb14
        $0=2; //@line 3258 "xmlparse.c"
        __label__ = 17; break; //@line 3258 "xmlparse.c"
      case 16: // $bb15
        var $62=HEAP[$next]; //@line 3260 "xmlparse.c"
        var $63=$eventPP; //@line 3260 "xmlparse.c"
        HEAP[$63]=$62; //@line 3260 "xmlparse.c"
        $0=23; //@line 3261 "xmlparse.c"
        __label__ = 17; break; //@line 3261 "xmlparse.c"
      case 17: // $bb16
        var $64=$0; //@line 3240 "xmlparse.c"
        $retval=$64; //@line 3240 "xmlparse.c"
        var $retval17=$retval; //@line 3240 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 3240 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initializeEncoding($parser) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $retval;
        var $0;
        var $iftmp_162;
        var $s;
        $parser_addr=$parser;
        var $1=$parser_addr; //@line 3290 "xmlparse.c"
        var $2=$1+232; //@line 3290 "xmlparse.c"
        var $3=HEAP[$2]; //@line 3290 "xmlparse.c"
        $s=$3; //@line 3290 "xmlparse.c"
        var $4=$parser_addr; //@line 3292 "xmlparse.c"
        var $5=$4+236; //@line 3292 "xmlparse.c"
        var $6=HEAP[$5]; //@line 3292 "xmlparse.c"
        var $7=($6)!=0; //@line 3292 "xmlparse.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3292 "xmlparse.c"
      case 1: // $bb
        $iftmp_162=(FUNCTION_TABLE_OFFSET + 68); //@line 3292 "xmlparse.c"
        __label__ = 3; break; //@line 3292 "xmlparse.c"
      case 2: // $bb1
        $iftmp_162=(FUNCTION_TABLE_OFFSET + 70); //@line 3292 "xmlparse.c"
        __label__ = 3; break; //@line 3292 "xmlparse.c"
      case 3: // $bb2
        var $8=$parser_addr; //@line 3292 "xmlparse.c"
        var $9=$8+144; //@line 3292 "xmlparse.c"
        var $10=$parser_addr; //@line 3292 "xmlparse.c"
        var $11=$10+148; //@line 3292 "xmlparse.c"
        var $12=$iftmp_162; //@line 3292 "xmlparse.c"
        var $13=$s; //@line 3292 "xmlparse.c"
        var $14=FUNCTION_TABLE[$12]($11, $9, $13); //@line 3292 "xmlparse.c"
        var $15=($14)!=0; //@line 3292 "xmlparse.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3292 "xmlparse.c"
      case 4: // $bb3
        $0=0; //@line 3293 "xmlparse.c"
        __label__ = 6; break; //@line 3293 "xmlparse.c"
      case 5: // $bb4
        var $16=$parser_addr; //@line 3294 "xmlparse.c"
        var $17=$16+232; //@line 3294 "xmlparse.c"
        var $18=HEAP[$17]; //@line 3294 "xmlparse.c"
        var $19=$parser_addr; //@line 3294 "xmlparse.c"
        var $20=_handleUnknownEncoding($19, $18); //@line 3294 "xmlparse.c"
        $0=$20; //@line 3294 "xmlparse.c"
        __label__ = 6; break; //@line 3294 "xmlparse.c"
      case 6: // $bb5
        var $21=$0; //@line 3293 "xmlparse.c"
        $retval=$21; //@line 3293 "xmlparse.c"
        var $retval6=$retval; //@line 3293 "xmlparse.c"
        ;
        return $retval6; //@line 3293 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _processXmlDecl($parser, $isGeneralTextEntity, $s, $next) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $isGeneralTextEntity_addr;
        var $s_addr;
        var $next_addr;
        var $retval;
        var $0;
        var $iftmp_163;
        var $encodingName=__stackBase__;
        var $storedEncName;
        var $newEncoding=__stackBase__+4;
        var $version=__stackBase__+8;
        var $versionend=__stackBase__+12;
        var $storedversion;
        var $standalone=__stackBase__+16;
        var $result;
        $parser_addr=$parser;
        $isGeneralTextEntity_addr=$isGeneralTextEntity;
        $s_addr=$s;
        $next_addr=$next;
        HEAP[$encodingName]=0; //@line 3301 "xmlparse.c"
        $storedEncName=0; //@line 3302 "xmlparse.c"
        HEAP[$newEncoding]=0; //@line 3303 "xmlparse.c"
        HEAP[$version]=0; //@line 3304 "xmlparse.c"
        $storedversion=0; //@line 3306 "xmlparse.c"
        HEAP[$standalone]=-1; //@line 3307 "xmlparse.c"
        var $1=$parser_addr; //@line 3308 "xmlparse.c"
        var $2=$1+236; //@line 3308 "xmlparse.c"
        var $3=HEAP[$2]; //@line 3308 "xmlparse.c"
        var $4=($3)!=0; //@line 3308 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3308 "xmlparse.c"
      case 1: // $bb
        $iftmp_163=(FUNCTION_TABLE_OFFSET + 72); //@line 3308 "xmlparse.c"
        __label__ = 3; break; //@line 3308 "xmlparse.c"
      case 2: // $bb1
        $iftmp_163=(FUNCTION_TABLE_OFFSET + 74); //@line 3308 "xmlparse.c"
        __label__ = 3; break; //@line 3308 "xmlparse.c"
      case 3: // $bb2
        var $5=$parser_addr; //@line 3308 "xmlparse.c"
        var $6=$5+288; //@line 3308 "xmlparse.c"
        var $7=$parser_addr; //@line 3308 "xmlparse.c"
        var $8=$7+144; //@line 3308 "xmlparse.c"
        var $9=HEAP[$8]; //@line 3308 "xmlparse.c"
        var $10=$iftmp_163; //@line 3308 "xmlparse.c"
        var $11=$isGeneralTextEntity_addr; //@line 3308 "xmlparse.c"
        var $12=$s_addr; //@line 3308 "xmlparse.c"
        var $13=$next_addr; //@line 3308 "xmlparse.c"
        var $14=FUNCTION_TABLE[$10]($11, $9, $12, $13, $6, $version, $versionend, $encodingName, $newEncoding, $standalone); //@line 3308 "xmlparse.c"
        var $15=($14)==0; //@line 3308 "xmlparse.c"
        var $16=$isGeneralTextEntity_addr; //@line 3320 "xmlparse.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 3308 "xmlparse.c"
      case 4: // $bb3
        var $17=($16)!=0; //@line 3320 "xmlparse.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3320 "xmlparse.c"
      case 5: // $bb4
        $0=31; //@line 3321 "xmlparse.c"
        __label__ = 38; break; //@line 3321 "xmlparse.c"
      case 6: // $bb5
        $0=30; //@line 3323 "xmlparse.c"
        __label__ = 38; break; //@line 3323 "xmlparse.c"
      case 7: // $bb6
        var $18=($16)==0; //@line 3325 "xmlparse.c"
        if ($18) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 3325 "xmlparse.c"
      case 8: // $bb7
        var $19=HEAP[$standalone]; //@line 3325 "xmlparse.c"
        var $20=($19)==1; //@line 3325 "xmlparse.c"
        if ($20) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 3325 "xmlparse.c"
      case 9: // $bb8
        var $21=$parser_addr; //@line 3326 "xmlparse.c"
        var $22=$21+356; //@line 3326 "xmlparse.c"
        var $23=HEAP[$22]; //@line 3326 "xmlparse.c"
        var $24=$23+130; //@line 3326 "xmlparse.c"
        HEAP[$24]=1; //@line 3326 "xmlparse.c"
        var $25=$parser_addr; //@line 3328 "xmlparse.c"
        var $26=$25+492; //@line 3328 "xmlparse.c"
        var $27=HEAP[$26]; //@line 3328 "xmlparse.c"
        var $28=($27)==1; //@line 3328 "xmlparse.c"
        if ($28) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3328 "xmlparse.c"
      case 10: // $bb9
        var $29=$parser_addr; //@line 3329 "xmlparse.c"
        var $30=$29+492; //@line 3329 "xmlparse.c"
        HEAP[$30]=0; //@line 3329 "xmlparse.c"
        __label__ = 11; break; //@line 3329 "xmlparse.c"
      case 11: // $bb10
        var $31=$parser_addr; //@line 3332 "xmlparse.c"
        var $32=$31+140; //@line 3332 "xmlparse.c"
        var $33=HEAP[$32]; //@line 3332 "xmlparse.c"
        var $34=($33)!=0; //@line 3332 "xmlparse.c"
        if ($34) { __label__ = 12; break; } else { __label__ = 20; break; } //@line 3332 "xmlparse.c"
      case 12: // $bb11
        var $35=HEAP[$encodingName]; //@line 3333 "xmlparse.c"
        var $36=($35)!=0; //@line 3333 "xmlparse.c"
        if ($36) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 3333 "xmlparse.c"
      case 13: // $bb12
        var $37=HEAP[$encodingName]; //@line 3334 "xmlparse.c"
        var $38=$parser_addr; //@line 3334 "xmlparse.c"
        var $39=$38+144; //@line 3334 "xmlparse.c"
        var $40=HEAP[$39]; //@line 3334 "xmlparse.c"
        var $41=$40+32; //@line 3334 "xmlparse.c"
        var $42=HEAP[$41]; //@line 3334 "xmlparse.c"
        var $43=HEAP[$encodingName]; //@line 3334 "xmlparse.c"
        var $44=$parser_addr; //@line 3334 "xmlparse.c"
        var $45=$44+144; //@line 3334 "xmlparse.c"
        var $46=HEAP[$45]; //@line 3334 "xmlparse.c"
        var $47=FUNCTION_TABLE[$42]($46, $43); //@line 3334 "xmlparse.c"
        var $48=$37+$47; //@line 3334 "xmlparse.c"
        var $49=HEAP[$encodingName]; //@line 3334 "xmlparse.c"
        var $50=$parser_addr; //@line 3334 "xmlparse.c"
        var $51=$50+144; //@line 3334 "xmlparse.c"
        var $52=HEAP[$51]; //@line 3334 "xmlparse.c"
        var $53=$parser_addr; //@line 3334 "xmlparse.c"
        var $54=$53+440; //@line 3334 "xmlparse.c"
        var $55=_poolStoreString($54, $52, $49, $48); //@line 3334 "xmlparse.c"
        $storedEncName=$55; //@line 3334 "xmlparse.c"
        var $56=$storedEncName; //@line 3339 "xmlparse.c"
        var $57=($56)==0; //@line 3339 "xmlparse.c"
        if ($57) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3339 "xmlparse.c"
      case 14: // $bb13
        $0=1; //@line 3340 "xmlparse.c"
        __label__ = 38; break; //@line 3340 "xmlparse.c"
      case 15: // $bb14
        var $58=$parser_addr; //@line 3341 "xmlparse.c"
        var $59=$58+440; //@line 3341 "xmlparse.c"
        var $60=$59+12; //@line 3341 "xmlparse.c"
        var $61=HEAP[$60]; //@line 3341 "xmlparse.c"
        var $62=$parser_addr; //@line 3341 "xmlparse.c"
        var $63=$62+440; //@line 3341 "xmlparse.c"
        var $64=$63+16; //@line 3341 "xmlparse.c"
        HEAP[$64]=$61; //@line 3341 "xmlparse.c"
        __label__ = 16; break; //@line 3341 "xmlparse.c"
      case 16: // $bb15
        var $65=HEAP[$version]; //@line 3343 "xmlparse.c"
        var $66=($65)!=0; //@line 3343 "xmlparse.c"
        if ($66) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 3343 "xmlparse.c"
      case 17: // $bb16
        var $67=HEAP[$versionend]; //@line 3344 "xmlparse.c"
        var $68=$parser_addr; //@line 3344 "xmlparse.c"
        var $69=$68+144; //@line 3344 "xmlparse.c"
        var $70=HEAP[$69]; //@line 3344 "xmlparse.c"
        var $71=$70+68; //@line 3344 "xmlparse.c"
        var $72=HEAP[$71]; //@line 3344 "xmlparse.c"
        var $73=0 - ($72); //@line 3344 "xmlparse.c"
        var $74=$67+$73; //@line 3344 "xmlparse.c"
        var $75=HEAP[$version]; //@line 3344 "xmlparse.c"
        var $76=$parser_addr; //@line 3344 "xmlparse.c"
        var $77=$76+144; //@line 3344 "xmlparse.c"
        var $78=HEAP[$77]; //@line 3344 "xmlparse.c"
        var $79=$parser_addr; //@line 3344 "xmlparse.c"
        var $80=$79+440; //@line 3344 "xmlparse.c"
        var $81=_poolStoreString($80, $78, $75, $74); //@line 3344 "xmlparse.c"
        $storedversion=$81; //@line 3344 "xmlparse.c"
        var $82=$storedversion; //@line 3348 "xmlparse.c"
        var $83=($82)==0; //@line 3348 "xmlparse.c"
        if ($83) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3348 "xmlparse.c"
      case 18: // $bb17
        $0=1; //@line 3349 "xmlparse.c"
        __label__ = 38; break; //@line 3349 "xmlparse.c"
      case 19: // $bb18
        var $84=$parser_addr; //@line 3351 "xmlparse.c"
        var $85=$84+140; //@line 3351 "xmlparse.c"
        var $86=HEAP[$85]; //@line 3351 "xmlparse.c"
        var $87=HEAP[$standalone]; //@line 3351 "xmlparse.c"
        var $88=$parser_addr; //@line 3351 "xmlparse.c"
        var $89=$88+4; //@line 3351 "xmlparse.c"
        var $90=HEAP[$89]; //@line 3351 "xmlparse.c"
        var $91=$storedversion; //@line 3351 "xmlparse.c"
        var $92=$storedEncName; //@line 3351 "xmlparse.c"
        FUNCTION_TABLE[$86]($90, $91, $92, $87); //@line 3351 "xmlparse.c"
        __label__ = 22; break; //@line 3351 "xmlparse.c"
      case 20: // $bb19
        var $93=$parser_addr; //@line 3353 "xmlparse.c"
        var $94=$93+80; //@line 3353 "xmlparse.c"
        var $95=HEAP[$94]; //@line 3353 "xmlparse.c"
        var $96=($95)!=0; //@line 3353 "xmlparse.c"
        if ($96) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 3353 "xmlparse.c"
      case 21: // $bb20
        var $97=$parser_addr; //@line 3354 "xmlparse.c"
        var $98=$97+144; //@line 3354 "xmlparse.c"
        var $99=HEAP[$98]; //@line 3354 "xmlparse.c"
        var $100=$parser_addr; //@line 3354 "xmlparse.c"
        var $101=$s_addr; //@line 3354 "xmlparse.c"
        var $102=$next_addr; //@line 3354 "xmlparse.c"
        _reportDefault($100, $99, $101, $102); //@line 3354 "xmlparse.c"
        __label__ = 22; break; //@line 3354 "xmlparse.c"
      case 22: // $bb21
        var $103=$parser_addr; //@line 3355 "xmlparse.c"
        var $104=$103+232; //@line 3355 "xmlparse.c"
        var $105=HEAP[$104]; //@line 3355 "xmlparse.c"
        var $106=($105)==0; //@line 3355 "xmlparse.c"
        if ($106) { __label__ = 23; break; } else { __label__ = 34; break; } //@line 3355 "xmlparse.c"
      case 23: // $bb22
        var $107=HEAP[$newEncoding]; //@line 3356 "xmlparse.c"
        var $108=($107)!=0; //@line 3356 "xmlparse.c"
        if ($108) { __label__ = 24; break; } else { __label__ = 27; break; } //@line 3356 "xmlparse.c"
      case 24: // $bb23
        var $109=HEAP[$newEncoding]; //@line 3357 "xmlparse.c"
        var $110=$109+68; //@line 3357 "xmlparse.c"
        var $111=HEAP[$110]; //@line 3357 "xmlparse.c"
        var $112=$parser_addr; //@line 3357 "xmlparse.c"
        var $113=$112+144; //@line 3357 "xmlparse.c"
        var $114=HEAP[$113]; //@line 3357 "xmlparse.c"
        var $115=$114+68; //@line 3357 "xmlparse.c"
        var $116=HEAP[$115]; //@line 3357 "xmlparse.c"
        var $117=($111)!=($116); //@line 3357 "xmlparse.c"
        if ($117) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 3357 "xmlparse.c"
      case 25: // $bb24
        var $118=HEAP[$encodingName]; //@line 3358 "xmlparse.c"
        var $119=$parser_addr; //@line 3358 "xmlparse.c"
        var $120=$119+288; //@line 3358 "xmlparse.c"
        HEAP[$120]=$118; //@line 3358 "xmlparse.c"
        $0=19; //@line 3359 "xmlparse.c"
        __label__ = 38; break; //@line 3359 "xmlparse.c"
      case 26: // $bb25
        var $121=HEAP[$newEncoding]; //@line 3361 "xmlparse.c"
        var $122=$parser_addr; //@line 3361 "xmlparse.c"
        var $123=$122+144; //@line 3361 "xmlparse.c"
        HEAP[$123]=$121; //@line 3361 "xmlparse.c"
        __label__ = 34; break; //@line 3361 "xmlparse.c"
      case 27: // $bb26
        var $124=HEAP[$encodingName]; //@line 3363 "xmlparse.c"
        var $125=($124)!=0; //@line 3363 "xmlparse.c"
        if ($125) { __label__ = 28; break; } else { __label__ = 34; break; } //@line 3363 "xmlparse.c"
      case 28: // $bb27
        var $126=$storedEncName; //@line 3365 "xmlparse.c"
        var $127=($126)==0; //@line 3365 "xmlparse.c"
        if ($127) { __label__ = 29; break; } else { __label__ = 31; break; } //@line 3365 "xmlparse.c"
      case 29: // $bb28
        var $128=HEAP[$encodingName]; //@line 3366 "xmlparse.c"
        var $129=$parser_addr; //@line 3366 "xmlparse.c"
        var $130=$129+144; //@line 3366 "xmlparse.c"
        var $131=HEAP[$130]; //@line 3366 "xmlparse.c"
        var $132=$131+32; //@line 3366 "xmlparse.c"
        var $133=HEAP[$132]; //@line 3366 "xmlparse.c"
        var $134=HEAP[$encodingName]; //@line 3366 "xmlparse.c"
        var $135=$parser_addr; //@line 3366 "xmlparse.c"
        var $136=$135+144; //@line 3366 "xmlparse.c"
        var $137=HEAP[$136]; //@line 3366 "xmlparse.c"
        var $138=FUNCTION_TABLE[$133]($137, $134); //@line 3366 "xmlparse.c"
        var $139=$128+$138; //@line 3366 "xmlparse.c"
        var $140=HEAP[$encodingName]; //@line 3366 "xmlparse.c"
        var $141=$parser_addr; //@line 3366 "xmlparse.c"
        var $142=$141+144; //@line 3366 "xmlparse.c"
        var $143=HEAP[$142]; //@line 3366 "xmlparse.c"
        var $144=$parser_addr; //@line 3366 "xmlparse.c"
        var $145=$144+440; //@line 3366 "xmlparse.c"
        var $146=_poolStoreString($145, $143, $140, $139); //@line 3366 "xmlparse.c"
        $storedEncName=$146; //@line 3366 "xmlparse.c"
        var $147=$storedEncName; //@line 3369 "xmlparse.c"
        var $148=($147)==0; //@line 3369 "xmlparse.c"
        if ($148) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 3369 "xmlparse.c"
      case 30: // $bb29
        $0=1; //@line 3370 "xmlparse.c"
        __label__ = 38; break; //@line 3370 "xmlparse.c"
      case 31: // $bb30
        var $149=$parser_addr; //@line 3372 "xmlparse.c"
        var $150=$storedEncName; //@line 3372 "xmlparse.c"
        var $151=_handleUnknownEncoding($149, $150); //@line 3372 "xmlparse.c"
        $result=$151; //@line 3372 "xmlparse.c"
        var $152=$parser_addr; //@line 3373 "xmlparse.c"
        var $153=$152+440; //@line 3373 "xmlparse.c"
        _poolClear($153); //@line 3373 "xmlparse.c"
        var $154=$result; //@line 3374 "xmlparse.c"
        var $155=($154)==18; //@line 3374 "xmlparse.c"
        if ($155) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 3374 "xmlparse.c"
      case 32: // $bb31
        var $156=HEAP[$encodingName]; //@line 3375 "xmlparse.c"
        var $157=$parser_addr; //@line 3375 "xmlparse.c"
        var $158=$157+288; //@line 3375 "xmlparse.c"
        HEAP[$158]=$156; //@line 3375 "xmlparse.c"
        __label__ = 33; break; //@line 3375 "xmlparse.c"
      case 33: // $bb32
        var $159=$result; //@line 3376 "xmlparse.c"
        $0=$159; //@line 3376 "xmlparse.c"
        __label__ = 38; break; //@line 3376 "xmlparse.c"
      case 34: // $bb33
        var $160=$storedEncName; //@line 3380 "xmlparse.c"
        var $161=($160)!=0; //@line 3380 "xmlparse.c"
        if ($161) { __label__ = 36; break; } else { __label__ = 35; break; } //@line 3380 "xmlparse.c"
      case 35: // $bb34
        var $162=$storedversion; //@line 3380 "xmlparse.c"
        var $163=($162)!=0; //@line 3380 "xmlparse.c"
        if ($163) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 3380 "xmlparse.c"
      case 36: // $bb35
        var $164=$parser_addr; //@line 3381 "xmlparse.c"
        var $165=$164+440; //@line 3381 "xmlparse.c"
        _poolClear($165); //@line 3381 "xmlparse.c"
        __label__ = 37; break; //@line 3381 "xmlparse.c"
      case 37: // $bb36
        $0=0; //@line 3383 "xmlparse.c"
        __label__ = 38; break; //@line 3383 "xmlparse.c"
      case 38: // $bb37
        var $166=$0; //@line 3321 "xmlparse.c"
        $retval=$166; //@line 3321 "xmlparse.c"
        var $retval38=$retval; //@line 3321 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval38; //@line 3321 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _handleUnknownEncoding($parser, $encodingName) {
    var __stackBase__  = STACKTOP; STACKTOP += 1036; _memset(__stackBase__, 0, 1036);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $encodingName_addr;
        var $retval;
        var $iftmp_184;
        var $0;
        var $info=__stackBase__;
        var $i;
        var $enc;
        $parser_addr=$parser;
        $encodingName_addr=$encodingName;
        var $1=$parser_addr; //@line 3389 "xmlparse.c"
        var $2=$1+124; //@line 3389 "xmlparse.c"
        var $3=HEAP[$2]; //@line 3389 "xmlparse.c"
        var $4=($3)!=0; //@line 3389 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 15; break; } //@line 3389 "xmlparse.c"
      case 1: // $bb
        $i=0; //@line 3392 "xmlparse.c"
        var $5=$info; //@line 3393 "xmlparse.c"
        __label__ = 2; break;
      case 2: // $bb1
        var $6=$i; //@line 3393 "xmlparse.c"
        var $7=$5+$6*4; //@line 3393 "xmlparse.c"
        HEAP[$7]=-1; //@line 3393 "xmlparse.c"
        var $8=$i; //@line 3392 "xmlparse.c"
        var $9=($8) + 1; //@line 3392 "xmlparse.c"
        $i=$9; //@line 3392 "xmlparse.c"
        var $10=($9) <= 255; //@line 3392 "xmlparse.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3392 "xmlparse.c"
      case 3: // $bb3
        var $11=$info+1028; //@line 3394 "xmlparse.c"
        HEAP[$11]=0; //@line 3394 "xmlparse.c"
        var $12=$info+1024; //@line 3395 "xmlparse.c"
        HEAP[$12]=0; //@line 3395 "xmlparse.c"
        var $13=$info+1032; //@line 3396 "xmlparse.c"
        HEAP[$13]=0; //@line 3396 "xmlparse.c"
        var $14=$parser_addr; //@line 3397 "xmlparse.c"
        var $15=$14+124; //@line 3397 "xmlparse.c"
        var $16=HEAP[$15]; //@line 3397 "xmlparse.c"
        var $17=$parser_addr; //@line 3397 "xmlparse.c"
        var $18=$17+248; //@line 3397 "xmlparse.c"
        var $19=HEAP[$18]; //@line 3397 "xmlparse.c"
        var $20=$encodingName_addr; //@line 3397 "xmlparse.c"
        var $21=FUNCTION_TABLE[$16]($19, $20, $info); //@line 3397 "xmlparse.c"
        var $22=($21)!=0; //@line 3397 "xmlparse.c"
        if ($22) { __label__ = 4; break; } else { __label__ = 13; break; } //@line 3397 "xmlparse.c"
      case 4: // $bb4
        var $23=$parser_addr; //@line 3400 "xmlparse.c"
        var $24=$23+12; //@line 3400 "xmlparse.c"
        var $25=$24; //@line 3400 "xmlparse.c"
        var $26=HEAP[$25]; //@line 3400 "xmlparse.c"
        var $27=_PyExpat_XmlSizeOfUnknownEncoding(); //@line 3400 "xmlparse.c"
        var $28=FUNCTION_TABLE[$26]($27); //@line 3400 "xmlparse.c"
        var $29=$parser_addr; //@line 3400 "xmlparse.c"
        var $30=$29+240; //@line 3400 "xmlparse.c"
        HEAP[$30]=$28; //@line 3400 "xmlparse.c"
        var $31=$parser_addr; //@line 3401 "xmlparse.c"
        var $32=$31+240; //@line 3401 "xmlparse.c"
        var $33=HEAP[$32]; //@line 3401 "xmlparse.c"
        var $34=($33)==0; //@line 3401 "xmlparse.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 3401 "xmlparse.c"
      case 5: // $bb5
        var $35=$info+1032; //@line 3402 "xmlparse.c"
        var $36=HEAP[$35]; //@line 3402 "xmlparse.c"
        var $37=($36)!=0; //@line 3402 "xmlparse.c"
        if ($37) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3402 "xmlparse.c"
      case 6: // $bb6
        var $38=$info+1032; //@line 3403 "xmlparse.c"
        var $39=HEAP[$38]; //@line 3403 "xmlparse.c"
        var $40=$info+1024; //@line 3403 "xmlparse.c"
        var $41=HEAP[$40]; //@line 3403 "xmlparse.c"
        FUNCTION_TABLE[$39]($41); //@line 3403 "xmlparse.c"
        __label__ = 7; break; //@line 3403 "xmlparse.c"
      case 7: // $bb7
        $0=1; //@line 3404 "xmlparse.c"
        __label__ = 16; break; //@line 3404 "xmlparse.c"
      case 8: // $bb8
        var $42=$parser_addr; //@line 3406 "xmlparse.c"
        var $43=$42+236; //@line 3406 "xmlparse.c"
        var $44=HEAP[$43]; //@line 3406 "xmlparse.c"
        var $45=($44)!=0; //@line 3406 "xmlparse.c"
        if ($45) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3406 "xmlparse.c"
      case 9: // $bb9
        $iftmp_184=(FUNCTION_TABLE_OFFSET + 76); //@line 3406 "xmlparse.c"
        __label__ = 11; break; //@line 3406 "xmlparse.c"
      case 10: // $bb10
        $iftmp_184=(FUNCTION_TABLE_OFFSET + 78); //@line 3406 "xmlparse.c"
        __label__ = 11; break; //@line 3406 "xmlparse.c"
      case 11: // $bb11
        var $46=$info+1024; //@line 3406 "xmlparse.c"
        var $47=HEAP[$46]; //@line 3406 "xmlparse.c"
        var $48=$info+1028; //@line 3406 "xmlparse.c"
        var $49=HEAP[$48]; //@line 3406 "xmlparse.c"
        var $50=$parser_addr; //@line 3406 "xmlparse.c"
        var $51=$50+240; //@line 3406 "xmlparse.c"
        var $52=HEAP[$51]; //@line 3406 "xmlparse.c"
        var $53=$iftmp_184; //@line 3406 "xmlparse.c"
        var $54=$info; //@line 3406 "xmlparse.c"
        var $55=$54; //@line 3406 "xmlparse.c"
        var $56=FUNCTION_TABLE[$53]($52, $55, $49, $47); //@line 3406 "xmlparse.c"
        $enc=$56; //@line 3406 "xmlparse.c"
        var $57=($56)!=0; //@line 3412 "xmlparse.c"
        if ($57) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 3412 "xmlparse.c"
      case 12: // $bb12
        var $58=$info+1024; //@line 3413 "xmlparse.c"
        var $59=HEAP[$58]; //@line 3413 "xmlparse.c"
        var $60=$parser_addr; //@line 3413 "xmlparse.c"
        var $61=$60+244; //@line 3413 "xmlparse.c"
        HEAP[$61]=$59; //@line 3413 "xmlparse.c"
        var $62=$info+1032; //@line 3414 "xmlparse.c"
        var $63=HEAP[$62]; //@line 3414 "xmlparse.c"
        var $64=$parser_addr; //@line 3414 "xmlparse.c"
        var $65=$64+252; //@line 3414 "xmlparse.c"
        HEAP[$65]=$63; //@line 3414 "xmlparse.c"
        var $66=$parser_addr; //@line 3415 "xmlparse.c"
        var $67=$66+144; //@line 3415 "xmlparse.c"
        var $68=$enc; //@line 3415 "xmlparse.c"
        HEAP[$67]=$68; //@line 3415 "xmlparse.c"
        $0=0; //@line 3416 "xmlparse.c"
        __label__ = 16; break; //@line 3416 "xmlparse.c"
      case 13: // $bb13
        var $69=$info+1032; //@line 3419 "xmlparse.c"
        var $70=HEAP[$69]; //@line 3419 "xmlparse.c"
        var $71=($70)!=0; //@line 3419 "xmlparse.c"
        if ($71) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3419 "xmlparse.c"
      case 14: // $bb14
        var $72=$info+1032; //@line 3420 "xmlparse.c"
        var $73=HEAP[$72]; //@line 3420 "xmlparse.c"
        var $74=$info+1024; //@line 3420 "xmlparse.c"
        var $75=HEAP[$74]; //@line 3420 "xmlparse.c"
        FUNCTION_TABLE[$73]($75); //@line 3420 "xmlparse.c"
        __label__ = 15; break; //@line 3420 "xmlparse.c"
      case 15: // $bb15
        $0=18; //@line 3422 "xmlparse.c"
        __label__ = 16; break; //@line 3422 "xmlparse.c"
      case 16: // $bb16
        var $76=$0; //@line 3404 "xmlparse.c"
        $retval=$76; //@line 3404 "xmlparse.c"
        var $retval17=$retval; //@line 3404 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 3404 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _prologInitProcessor($parser, $s, $end, $nextPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $s_addr;
        var $end_addr;
        var $nextPtr_addr;
        var $retval;
        var $0;
        var $result;
        $parser_addr=$parser;
        $s_addr=$s;
        $end_addr=$end;
        $nextPtr_addr=$nextPtr;
        var $1=$parser_addr; //@line 3431 "xmlparse.c"
        var $2=_initializeEncoding($1); //@line 3431 "xmlparse.c"
        $result=$2; //@line 3431 "xmlparse.c"
        var $3=$result; //@line 3432 "xmlparse.c"
        var $4=($3)!=0; //@line 3432 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3432 "xmlparse.c"
      case 1: // $bb
        var $5=$result; //@line 3433 "xmlparse.c"
        $0=$5; //@line 3433 "xmlparse.c"
        __label__ = 3; break; //@line 3433 "xmlparse.c"
      case 2: // $bb1
        var $6=$parser_addr; //@line 3434 "xmlparse.c"
        var $7=$6+280; //@line 3434 "xmlparse.c"
        HEAP[$7]=(FUNCTION_TABLE_OFFSET + 66); //@line 3434 "xmlparse.c"
        var $8=$parser_addr; //@line 3435 "xmlparse.c"
        var $9=$s_addr; //@line 3435 "xmlparse.c"
        var $10=$end_addr; //@line 3435 "xmlparse.c"
        var $11=$nextPtr_addr; //@line 3435 "xmlparse.c"
        var $12=_prologProcessor($8, $9, $10, $11); //@line 3435 "xmlparse.c"
        $0=$12; //@line 3435 "xmlparse.c"
        __label__ = 3; break; //@line 3435 "xmlparse.c"
      case 3: // $bb2
        var $13=$0; //@line 3433 "xmlparse.c"
        $retval=$13; //@line 3433 "xmlparse.c"
        var $retval3=$retval; //@line 3433 "xmlparse.c"
        ;
        return $retval3; //@line 3433 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _externalParEntInitProcessor($parser, $s, $end, $nextPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $s_addr;
        var $end_addr;
        var $nextPtr_addr;
        var $retval;
        var $0;
        var $result;
        $parser_addr=$parser;
        $s_addr=$s;
        $end_addr=$end;
        $nextPtr_addr=$nextPtr;
        var $1=$parser_addr; //@line 3446 "xmlparse.c"
        var $2=_initializeEncoding($1); //@line 3446 "xmlparse.c"
        $result=$2; //@line 3446 "xmlparse.c"
        var $3=$result; //@line 3447 "xmlparse.c"
        var $4=($3)!=0; //@line 3447 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3447 "xmlparse.c"
      case 1: // $bb
        var $5=$result; //@line 3448 "xmlparse.c"
        $0=$5; //@line 3448 "xmlparse.c"
        __label__ = 5; break; //@line 3448 "xmlparse.c"
      case 2: // $bb1
        var $6=$parser_addr; //@line 3452 "xmlparse.c"
        var $7=$6+356; //@line 3452 "xmlparse.c"
        var $8=HEAP[$7]; //@line 3452 "xmlparse.c"
        var $9=$8+131; //@line 3452 "xmlparse.c"
        HEAP[$9]=1; //@line 3452 "xmlparse.c"
        var $10=$parser_addr; //@line 3454 "xmlparse.c"
        var $11=$10+256; //@line 3454 "xmlparse.c"
        var $12=$11+20; //@line 3454 "xmlparse.c"
        var $13=HEAP[$12]; //@line 3454 "xmlparse.c"
        var $14=($13)!=0; //@line 3454 "xmlparse.c"
        var $15=$parser_addr; //@line 3455 "xmlparse.c"
        var $16=$15+280; //@line 3455 "xmlparse.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3454 "xmlparse.c"
      case 3: // $bb2
        HEAP[$16]=(FUNCTION_TABLE_OFFSET + 80); //@line 3455 "xmlparse.c"
        var $17=$parser_addr; //@line 3456 "xmlparse.c"
        var $18=$s_addr; //@line 3456 "xmlparse.c"
        var $19=$end_addr; //@line 3456 "xmlparse.c"
        var $20=$nextPtr_addr; //@line 3456 "xmlparse.c"
        var $21=_entityValueInitProcessor($17, $18, $19, $20); //@line 3456 "xmlparse.c"
        $0=$21; //@line 3456 "xmlparse.c"
        __label__ = 5; break; //@line 3456 "xmlparse.c"
      case 4: // $bb3
        HEAP[$16]=(FUNCTION_TABLE_OFFSET + 82); //@line 3459 "xmlparse.c"
        var $22=$parser_addr; //@line 3460 "xmlparse.c"
        var $23=$s_addr; //@line 3460 "xmlparse.c"
        var $24=$end_addr; //@line 3460 "xmlparse.c"
        var $25=$nextPtr_addr; //@line 3460 "xmlparse.c"
        var $26=_externalParEntProcessor($22, $23, $24, $25); //@line 3460 "xmlparse.c"
        $0=$26; //@line 3460 "xmlparse.c"
        __label__ = 5; break; //@line 3460 "xmlparse.c"
      case 5: // $bb4
        var $27=$0; //@line 3448 "xmlparse.c"
        $retval=$27; //@line 3448 "xmlparse.c"
        var $retval5=$retval; //@line 3448 "xmlparse.c"
        ;
        return $retval5; //@line 3448 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entityValueInitProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $s_addr;
        var $end_addr;
        var $nextPtr_addr;
        var $retval;
        var $0;
        var $tok;
        var $start;
        var $next=__stackBase__;
        var $result;
        $parser_addr=$parser;
        $s_addr=$s;
        $end_addr=$end;
        $nextPtr_addr=$nextPtr;
        var $1=$s_addr; //@line 3471 "xmlparse.c"
        $start=$1; //@line 3471 "xmlparse.c"
        var $2=$start; //@line 3472 "xmlparse.c"
        HEAP[$next]=$2; //@line 3472 "xmlparse.c"
        var $3=$parser_addr; //@line 3473 "xmlparse.c"
        var $4=$3+288; //@line 3473 "xmlparse.c"
        var $5=$start; //@line 3473 "xmlparse.c"
        HEAP[$4]=$5; //@line 3473 "xmlparse.c"
        __label__ = 1; break; //@line 3473 "xmlparse.c"
      case 1: // $bb
        var $6=$parser_addr; //@line 3476 "xmlparse.c"
        var $7=$6+144; //@line 3476 "xmlparse.c"
        var $8=HEAP[$7]; //@line 3476 "xmlparse.c"
        var $9=$8; //@line 3476 "xmlparse.c"
        var $10=$9; //@line 3476 "xmlparse.c"
        var $11=HEAP[$10]; //@line 3476 "xmlparse.c"
        var $12=$parser_addr; //@line 3476 "xmlparse.c"
        var $13=$12+144; //@line 3476 "xmlparse.c"
        var $14=HEAP[$13]; //@line 3476 "xmlparse.c"
        var $15=$start; //@line 3476 "xmlparse.c"
        var $16=$end_addr; //@line 3476 "xmlparse.c"
        var $17=FUNCTION_TABLE[$11]($14, $15, $16, $next); //@line 3476 "xmlparse.c"
        $tok=$17; //@line 3476 "xmlparse.c"
        var $18=HEAP[$next]; //@line 3477 "xmlparse.c"
        var $19=$parser_addr; //@line 3477 "xmlparse.c"
        var $20=$19+292; //@line 3477 "xmlparse.c"
        HEAP[$20]=$18; //@line 3477 "xmlparse.c"
        var $21=$tok; //@line 3478 "xmlparse.c"
        var $22=($21) <= 0; //@line 3478 "xmlparse.c"
        if ($22) { __label__ = 2; break; } else { __label__ = 10; break; } //@line 3478 "xmlparse.c"
      case 2: // $bb1
        var $23=$parser_addr; //@line 3479 "xmlparse.c"
        var $24=$23+480; //@line 3479 "xmlparse.c"
        var $25=$24+4; //@line 3479 "xmlparse.c"
        var $26=HEAP[$25]; //@line 3479 "xmlparse.c"
        var $27=($26)==0; //@line 3479 "xmlparse.c"
        var $28=$tok; //@line 3479 "xmlparse.c"
        if ($27) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3479 "xmlparse.c"
      case 3: // $bb2
        var $29=($28)!=0; //@line 3479 "xmlparse.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3479 "xmlparse.c"
      case 4: // $bb3
        var $30=$nextPtr_addr; //@line 3480 "xmlparse.c"
        var $31=$s_addr; //@line 3480 "xmlparse.c"
        HEAP[$30]=$31; //@line 3480 "xmlparse.c"
        $0=0; //@line 3481 "xmlparse.c"
        __label__ = 22; break; //@line 3481 "xmlparse.c"
      case 5: // $bb4
        if ($28 == -2) {
          __label__ = 8; break;
        }
        else if ($28 == -1) {
          __label__ = 7; break;
        }
        else if ($28 == 0) {
          __label__ = 6; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 6: // $bb5
        $0=4; //@line 3485 "xmlparse.c"
        __label__ = 22; break; //@line 3485 "xmlparse.c"
      case 7: // $bb6
        $0=5; //@line 3487 "xmlparse.c"
        __label__ = 22; break; //@line 3487 "xmlparse.c"
      case 8: // $bb7
        $0=6; //@line 3489 "xmlparse.c"
        __label__ = 22; break; //@line 3489 "xmlparse.c"
      case 9: // $bb8
        var $32=$parser_addr; //@line 3495 "xmlparse.c"
        var $33=$32+144; //@line 3495 "xmlparse.c"
        var $34=HEAP[$33]; //@line 3495 "xmlparse.c"
        var $35=$parser_addr; //@line 3495 "xmlparse.c"
        var $36=$s_addr; //@line 3495 "xmlparse.c"
        var $37=$end_addr; //@line 3495 "xmlparse.c"
        var $38=_storeEntityValue($35, $34, $36, $37); //@line 3495 "xmlparse.c"
        $0=$38; //@line 3495 "xmlparse.c"
        __label__ = 22; break; //@line 3495 "xmlparse.c"
      case 10: // $bb9
        var $39=$tok; //@line 3497 "xmlparse.c"
        var $40=($39)==12; //@line 3497 "xmlparse.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 17; break; } //@line 3497 "xmlparse.c"
      case 11: // $bb10
        var $41=HEAP[$next]; //@line 3499 "xmlparse.c"
        var $42=$parser_addr; //@line 3499 "xmlparse.c"
        var $43=$start; //@line 3499 "xmlparse.c"
        var $44=_processXmlDecl($42, 0, $43, $41); //@line 3499 "xmlparse.c"
        $result=$44; //@line 3499 "xmlparse.c"
        var $45=$result; //@line 3500 "xmlparse.c"
        var $46=($45)!=0; //@line 3500 "xmlparse.c"
        if ($46) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 3500 "xmlparse.c"
      case 12: // $bb11
        var $47=$result; //@line 3501 "xmlparse.c"
        $0=$47; //@line 3501 "xmlparse.c"
        __label__ = 22; break; //@line 3501 "xmlparse.c"
      case 13: // $bb12
        var $48=$parser_addr; //@line 3502 "xmlparse.c"
        var $49=$48+480; //@line 3502 "xmlparse.c"
        var $50=$49; //@line 3502 "xmlparse.c"
        var $51=HEAP[$50]; //@line 3502 "xmlparse.c"
        if ($51 == 2) {
          __label__ = 15; break;
        }
        else if ($51 == 3) {
          __label__ = 14; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 14: // $bb13
        var $52=HEAP[$next]; //@line 3504 "xmlparse.c"
        var $53=$nextPtr_addr; //@line 3504 "xmlparse.c"
        HEAP[$53]=$52; //@line 3504 "xmlparse.c"
        $0=0; //@line 3505 "xmlparse.c"
        __label__ = 22; break; //@line 3505 "xmlparse.c"
      case 15: // $bb14
        $0=35; //@line 3507 "xmlparse.c"
        __label__ = 22; break; //@line 3507 "xmlparse.c"
      case 16: // $bb15
        var $54=HEAP[$next]; //@line 3509 "xmlparse.c"
        var $55=$nextPtr_addr; //@line 3509 "xmlparse.c"
        HEAP[$55]=$54; //@line 3509 "xmlparse.c"
        var $56=$parser_addr; //@line 3512 "xmlparse.c"
        var $57=$56+280; //@line 3512 "xmlparse.c"
        HEAP[$57]=(FUNCTION_TABLE_OFFSET + 84); //@line 3512 "xmlparse.c"
        var $58=HEAP[$next]; //@line 3513 "xmlparse.c"
        var $59=$parser_addr; //@line 3513 "xmlparse.c"
        var $60=$end_addr; //@line 3513 "xmlparse.c"
        var $61=$nextPtr_addr; //@line 3513 "xmlparse.c"
        var $62=_entityValueProcessor($59, $58, $60, $61); //@line 3513 "xmlparse.c"
        $0=$62; //@line 3513 "xmlparse.c"
        __label__ = 22; break; //@line 3513 "xmlparse.c"
      case 17: // $bb16
        var $63=$tok; //@line 3522 "xmlparse.c"
        var $64=($63)==14; //@line 3522 "xmlparse.c"
        if ($64) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 3522 "xmlparse.c"
      case 18: // $bb17
        var $65=HEAP[$next]; //@line 3522 "xmlparse.c"
        var $66=$end_addr; //@line 3522 "xmlparse.c"
        var $67=($65)==($66); //@line 3522 "xmlparse.c"
        if ($67) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3522 "xmlparse.c"
      case 19: // $bb18
        var $68=$parser_addr; //@line 3522 "xmlparse.c"
        var $69=$68+480; //@line 3522 "xmlparse.c"
        var $70=$69+4; //@line 3522 "xmlparse.c"
        var $71=HEAP[$70]; //@line 3522 "xmlparse.c"
        var $72=($71)==0; //@line 3522 "xmlparse.c"
        if ($72) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3522 "xmlparse.c"
      case 20: // $bb19
        var $73=HEAP[$next]; //@line 3523 "xmlparse.c"
        var $74=$nextPtr_addr; //@line 3523 "xmlparse.c"
        HEAP[$74]=$73; //@line 3523 "xmlparse.c"
        $0=0; //@line 3524 "xmlparse.c"
        __label__ = 22; break; //@line 3524 "xmlparse.c"
      case 21: // $bb20
        var $75=HEAP[$next]; //@line 3526 "xmlparse.c"
        $start=$75; //@line 3526 "xmlparse.c"
        var $76=$parser_addr; //@line 3527 "xmlparse.c"
        var $77=$76+288; //@line 3527 "xmlparse.c"
        var $78=$start; //@line 3527 "xmlparse.c"
        HEAP[$77]=$78; //@line 3527 "xmlparse.c"
        __label__ = 1; break; //@line 3527 "xmlparse.c"
      case 22: // $bb21
        var $79=$0; //@line 3481 "xmlparse.c"
        $retval=$79; //@line 3481 "xmlparse.c"
        var $retval22=$retval; //@line 3481 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval22; //@line 3481 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _externalParEntProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $s_addr;
        var $end_addr;
        var $nextPtr_addr;
        var $retval;
        var $0;
        var $next=__stackBase__;
        var $tok;
        $parser_addr=$parser;
        $s_addr=$s;
        $end_addr=$end;
        $nextPtr_addr=$nextPtr;
        var $1=$s_addr; //@line 3537 "xmlparse.c"
        HEAP[$next]=$1; //@line 3537 "xmlparse.c"
        var $2=$parser_addr; //@line 3540 "xmlparse.c"
        var $3=$2+144; //@line 3540 "xmlparse.c"
        var $4=HEAP[$3]; //@line 3540 "xmlparse.c"
        var $5=$4; //@line 3540 "xmlparse.c"
        var $6=$5; //@line 3540 "xmlparse.c"
        var $7=HEAP[$6]; //@line 3540 "xmlparse.c"
        var $8=$parser_addr; //@line 3540 "xmlparse.c"
        var $9=$8+144; //@line 3540 "xmlparse.c"
        var $10=HEAP[$9]; //@line 3540 "xmlparse.c"
        var $11=$s_addr; //@line 3540 "xmlparse.c"
        var $12=$end_addr; //@line 3540 "xmlparse.c"
        var $13=FUNCTION_TABLE[$7]($10, $11, $12, $next); //@line 3540 "xmlparse.c"
        $tok=$13; //@line 3540 "xmlparse.c"
        var $14=$tok; //@line 3541 "xmlparse.c"
        var $15=($14) <= 0; //@line 3541 "xmlparse.c"
        if ($15) { __label__ = 1; break; } else { __label__ = 8; break; } //@line 3541 "xmlparse.c"
      case 1: // $bb
        var $16=$parser_addr; //@line 3542 "xmlparse.c"
        var $17=$16+480; //@line 3542 "xmlparse.c"
        var $18=$17+4; //@line 3542 "xmlparse.c"
        var $19=HEAP[$18]; //@line 3542 "xmlparse.c"
        var $20=($19)==0; //@line 3542 "xmlparse.c"
        var $21=$tok; //@line 3542 "xmlparse.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 3542 "xmlparse.c"
      case 2: // $bb1
        var $22=($21)!=0; //@line 3542 "xmlparse.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3542 "xmlparse.c"
      case 3: // $bb2
        var $23=$nextPtr_addr; //@line 3543 "xmlparse.c"
        var $24=$s_addr; //@line 3543 "xmlparse.c"
        HEAP[$23]=$24; //@line 3543 "xmlparse.c"
        $0=0; //@line 3544 "xmlparse.c"
        __label__ = 11; break; //@line 3544 "xmlparse.c"
      case 4: // $bb3
        if ($21 == -2) {
          __label__ = 7; break;
        }
        else if ($21 == -1) {
          __label__ = 6; break;
        }
        else if ($21 == 0) {
          __label__ = 5; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 5: // $bb4
        $0=4; //@line 3548 "xmlparse.c"
        __label__ = 11; break; //@line 3548 "xmlparse.c"
      case 6: // $bb5
        $0=5; //@line 3550 "xmlparse.c"
        __label__ = 11; break; //@line 3550 "xmlparse.c"
      case 7: // $bb6
        $0=6; //@line 3552 "xmlparse.c"
        __label__ = 11; break; //@line 3552 "xmlparse.c"
      case 8: // $bb8
        var $25=$tok; //@line 3562 "xmlparse.c"
        var $26=($25)==14; //@line 3562 "xmlparse.c"
        if ($26) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3562 "xmlparse.c"
      case 9: // $bb9
        var $27=HEAP[$next]; //@line 3563 "xmlparse.c"
        $s_addr=$27; //@line 3563 "xmlparse.c"
        var $28=$parser_addr; //@line 3564 "xmlparse.c"
        var $29=$28+144; //@line 3564 "xmlparse.c"
        var $30=HEAP[$29]; //@line 3564 "xmlparse.c"
        var $31=$30; //@line 3564 "xmlparse.c"
        var $32=$31; //@line 3564 "xmlparse.c"
        var $33=HEAP[$32]; //@line 3564 "xmlparse.c"
        var $34=$parser_addr; //@line 3564 "xmlparse.c"
        var $35=$34+144; //@line 3564 "xmlparse.c"
        var $36=HEAP[$35]; //@line 3564 "xmlparse.c"
        var $37=$s_addr; //@line 3564 "xmlparse.c"
        var $38=$end_addr; //@line 3564 "xmlparse.c"
        var $39=FUNCTION_TABLE[$33]($36, $37, $38, $next); //@line 3564 "xmlparse.c"
        $tok=$39; //@line 3564 "xmlparse.c"
        __label__ = 10; break; //@line 3564 "xmlparse.c"
      case 10: // $bb10
        var $40=$parser_addr; //@line 3567 "xmlparse.c"
        var $41=$40+280; //@line 3567 "xmlparse.c"
        HEAP[$41]=(FUNCTION_TABLE_OFFSET + 66); //@line 3567 "xmlparse.c"
        var $42=$parser_addr; //@line 3568 "xmlparse.c"
        var $43=$42+480; //@line 3568 "xmlparse.c"
        var $44=$43+4; //@line 3568 "xmlparse.c"
        var $45=HEAP[$44]; //@line 3568 "xmlparse.c"
        var $46=($45)==0; //@line 3568 "xmlparse.c"
        var $47=($46); //@line 3568 "xmlparse.c"
        var $48=HEAP[$next]; //@line 3568 "xmlparse.c"
        var $49=$parser_addr; //@line 3568 "xmlparse.c"
        var $50=$49+144; //@line 3568 "xmlparse.c"
        var $51=HEAP[$50]; //@line 3568 "xmlparse.c"
        var $52=$parser_addr; //@line 3568 "xmlparse.c"
        var $53=$s_addr; //@line 3568 "xmlparse.c"
        var $54=$end_addr; //@line 3568 "xmlparse.c"
        var $55=$tok; //@line 3568 "xmlparse.c"
        var $56=$nextPtr_addr; //@line 3568 "xmlparse.c"
        var $57=((($47)) & 255); //@line 3568 "xmlparse.c"
        var $58=_doProlog($52, $51, $53, $54, $55, $48, $56, $57); //@line 3568 "xmlparse.c"
        $0=$58; //@line 3568 "xmlparse.c"
        __label__ = 11; break; //@line 3568 "xmlparse.c"
      case 11: // $bb11
        var $59=$0; //@line 3544 "xmlparse.c"
        $retval=$59; //@line 3544 "xmlparse.c"
        var $retval12=$retval; //@line 3544 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 3544 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entityValueProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $s_addr;
        var $end_addr;
        var $nextPtr_addr;
        var $retval;
        var $0;
        var $start;
        var $next=__stackBase__;
        var $enc;
        var $tok;
        $parser_addr=$parser;
        $s_addr=$s;
        $end_addr=$end;
        $nextPtr_addr=$nextPtr;
        var $1=$s_addr; //@line 3578 "xmlparse.c"
        $start=$1; //@line 3578 "xmlparse.c"
        var $2=$s_addr; //@line 3579 "xmlparse.c"
        HEAP[$next]=$2; //@line 3579 "xmlparse.c"
        var $3=$parser_addr; //@line 3580 "xmlparse.c"
        var $4=$3+144; //@line 3580 "xmlparse.c"
        var $5=HEAP[$4]; //@line 3580 "xmlparse.c"
        $enc=$5; //@line 3580 "xmlparse.c"
        var $6=$enc; //@line 3584 "xmlparse.c"
        var $7=$6; //@line 3584 "xmlparse.c"
        var $8=$7; //@line 3584 "xmlparse.c"
        var $9=HEAP[$8]; //@line 3584 "xmlparse.c"
        var $10=$enc; //@line 3584 "xmlparse.c"
        var $11=$start; //@line 3584 "xmlparse.c"
        var $12=$end_addr; //@line 3584 "xmlparse.c"
        var $13=FUNCTION_TABLE[$9]($10, $11, $12, $next); //@line 3584 "xmlparse.c"
        $tok=$13; //@line 3584 "xmlparse.c"
        var $14=($13) <= 0; //@line 3585 "xmlparse.c"
        if ($14) { __lastLabel__ = -1; __label__ = 1; break; } else { __lastLabel__ = -1; __label__ = 9; break; } //@line 3585 "xmlparse.c"
      case 1: // $bb1
        var $15=__lastLabel__ == 9 ? $37 : ($13);
        var $16=$parser_addr; //@line 3586 "xmlparse.c"
        var $17=$16+480; //@line 3586 "xmlparse.c"
        var $18=$17+4; //@line 3586 "xmlparse.c"
        var $19=HEAP[$18]; //@line 3586 "xmlparse.c"
        var $20=($19)==0; //@line 3586 "xmlparse.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 3586 "xmlparse.c"
      case 2: // $bb2
        var $21=($15)!=0; //@line 3586 "xmlparse.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3586 "xmlparse.c"
      case 3: // $bb3
        var $22=$nextPtr_addr; //@line 3587 "xmlparse.c"
        var $23=$s_addr; //@line 3587 "xmlparse.c"
        HEAP[$22]=$23; //@line 3587 "xmlparse.c"
        $0=0; //@line 3588 "xmlparse.c"
        __label__ = 10; break; //@line 3588 "xmlparse.c"
      case 4: // $bb4
        if ($15 == -2) {
          __label__ = 7; break;
        }
        else if ($15 == -1) {
          __label__ = 6; break;
        }
        else if ($15 == 0) {
          __label__ = 5; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 5: // $bb5
        $0=4; //@line 3592 "xmlparse.c"
        __label__ = 10; break; //@line 3592 "xmlparse.c"
      case 6: // $bb6
        $0=5; //@line 3594 "xmlparse.c"
        __label__ = 10; break; //@line 3594 "xmlparse.c"
      case 7: // $bb7
        $0=6; //@line 3596 "xmlparse.c"
        __label__ = 10; break; //@line 3596 "xmlparse.c"
      case 8: // $bb8
        var $24=$parser_addr; //@line 3602 "xmlparse.c"
        var $25=$enc; //@line 3602 "xmlparse.c"
        var $26=$s_addr; //@line 3602 "xmlparse.c"
        var $27=$end_addr; //@line 3602 "xmlparse.c"
        var $28=_storeEntityValue($24, $25, $26, $27); //@line 3602 "xmlparse.c"
        $0=$28; //@line 3602 "xmlparse.c"
        __label__ = 10; break; //@line 3602 "xmlparse.c"
      case 9: // $bb9
        var $29=HEAP[$next]; //@line 3604 "xmlparse.c"
        $start=$29; //@line 3604 "xmlparse.c"
        var $30=$enc; //@line 3584 "xmlparse.c"
        var $31=$30; //@line 3584 "xmlparse.c"
        var $32=$31; //@line 3584 "xmlparse.c"
        var $33=HEAP[$32]; //@line 3584 "xmlparse.c"
        var $34=$enc; //@line 3584 "xmlparse.c"
        var $35=$start; //@line 3584 "xmlparse.c"
        var $36=$end_addr; //@line 3584 "xmlparse.c"
        var $37=FUNCTION_TABLE[$33]($34, $35, $36, $next); //@line 3584 "xmlparse.c"
        $tok=$37; //@line 3584 "xmlparse.c"
        var $38=($37) <= 0; //@line 3585 "xmlparse.c"
        if ($38) { __lastLabel__ = 9; __label__ = 1; break; } else { __lastLabel__ = 9; __label__ = 9; break; } //@line 3585 "xmlparse.c"
      case 10: // $bb10
        var $39=$0; //@line 3588 "xmlparse.c"
        $retval=$39; //@line 3588 "xmlparse.c"
        var $retval11=$retval; //@line 3588 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 3588 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _prologProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
  
    var $parser_addr;
    var $s_addr;
    var $end_addr;
    var $nextPtr_addr;
    var $retval;
    var $0;
    var $next=__stackBase__;
    var $tok;
    $parser_addr=$parser;
    $s_addr=$s;
    $end_addr=$end;
    $nextPtr_addr=$nextPtr;
    var $1=$s_addr; //@line 3616 "xmlparse.c"
    HEAP[$next]=$1; //@line 3616 "xmlparse.c"
    var $2=$parser_addr; //@line 3617 "xmlparse.c"
    var $3=$2+144; //@line 3617 "xmlparse.c"
    var $4=HEAP[$3]; //@line 3617 "xmlparse.c"
    var $5=$4; //@line 3617 "xmlparse.c"
    var $6=$5; //@line 3617 "xmlparse.c"
    var $7=HEAP[$6]; //@line 3617 "xmlparse.c"
    var $8=$parser_addr; //@line 3617 "xmlparse.c"
    var $9=$8+144; //@line 3617 "xmlparse.c"
    var $10=HEAP[$9]; //@line 3617 "xmlparse.c"
    var $11=$s_addr; //@line 3617 "xmlparse.c"
    var $12=$end_addr; //@line 3617 "xmlparse.c"
    var $13=FUNCTION_TABLE[$7]($10, $11, $12, $next); //@line 3617 "xmlparse.c"
    $tok=$13; //@line 3617 "xmlparse.c"
    var $14=$parser_addr; //@line 3618 "xmlparse.c"
    var $15=$14+480; //@line 3618 "xmlparse.c"
    var $16=$15+4; //@line 3618 "xmlparse.c"
    var $17=HEAP[$16]; //@line 3618 "xmlparse.c"
    var $18=($17)==0; //@line 3618 "xmlparse.c"
    var $19=($18); //@line 3618 "xmlparse.c"
    var $20=HEAP[$next]; //@line 3618 "xmlparse.c"
    var $21=$parser_addr; //@line 3618 "xmlparse.c"
    var $22=$21+144; //@line 3618 "xmlparse.c"
    var $23=HEAP[$22]; //@line 3618 "xmlparse.c"
    var $24=$parser_addr; //@line 3618 "xmlparse.c"
    var $25=$s_addr; //@line 3618 "xmlparse.c"
    var $26=$end_addr; //@line 3618 "xmlparse.c"
    var $27=$tok; //@line 3618 "xmlparse.c"
    var $28=$nextPtr_addr; //@line 3618 "xmlparse.c"
    var $29=((($19)) & 255); //@line 3618 "xmlparse.c"
    var $30=_doProlog($24, $23, $25, $26, $27, $20, $28, $29); //@line 3618 "xmlparse.c"
    $0=$30; //@line 3618 "xmlparse.c"
    var $31=$0; //@line 3618 "xmlparse.c"
    $retval=$31; //@line 3618 "xmlparse.c"
    var $retval1=$retval; //@line 3618 "xmlparse.c"
    STACKTOP = __stackBase__;
    return $retval1; //@line 3618 "xmlparse.c"
  }
  

  function _doProlog($parser, $enc, $s, $end, $tok, $next, $nextPtr, $haveMore) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $enc_addr;
        var $s_addr;
        var $end_addr;
        var $tok_addr;
        var $next_addr=__stackBase__;
        var $nextPtr_addr;
        var $haveMore_addr;
        var $retval;
        var $iftmp_227;
        var $iftmp_226;
        var $iftmp_217;
        var $iftmp_215;
        var $iftmp_206;
        var $0;
        var $dtd;
        var $eventPP;
        var $eventEndPP;
        var $quant;
        var $role;
        var $handleDefault;
        var $result;
        var $result34;
        var $tem;
        var $hadParamEntityRefs;
        var $entity;
        var $hadParamEntityRefs79;
        var $entity82;
        var $prefix;
        var $attVal;
        var $result144;
        var $result164;
        var $name;
        var $name227;
        var $tem251;
        var $systemId;
        var $result270;
        var $temp;
        var $temp283;
        var $myindex;
        var $name312;
        var $entity313;
        var $result334;
        var $betweenDecl;
        var $content;
        var $el;
        var $name373;
        var $nameLen;
        var $nxt;
        var $myindex374;
        var $model;
        $parser_addr=$parser;
        $enc_addr=$enc;
        $s_addr=$s;
        $end_addr=$end;
        $tok_addr=$tok;
        HEAP[$next_addr]=$next;
        $nextPtr_addr=$nextPtr;
        $haveMore_addr=$haveMore;
        var $1=$parser_addr; //@line 3652 "xmlparse.c"
        var $2=$1+356; //@line 3652 "xmlparse.c"
        var $3=HEAP[$2]; //@line 3652 "xmlparse.c"
        $dtd=$3; //@line 3652 "xmlparse.c"
        var $4=$parser_addr; //@line 3658 "xmlparse.c"
        var $5=$4+144; //@line 3658 "xmlparse.c"
        var $6=HEAP[$5]; //@line 3658 "xmlparse.c"
        var $7=$enc_addr; //@line 3658 "xmlparse.c"
        var $8=($6)==($7); //@line 3658 "xmlparse.c"
        var $9=$parser_addr; //@line 3659 "xmlparse.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3658 "xmlparse.c"
      case 1: // $bb
        var $10=$9+288; //@line 3659 "xmlparse.c"
        $eventPP=$10; //@line 3659 "xmlparse.c"
        var $11=$parser_addr; //@line 3660 "xmlparse.c"
        var $12=$11+292; //@line 3660 "xmlparse.c"
        $eventEndPP=$12; //@line 3660 "xmlparse.c"
        __label__ = 3; break; //@line 3660 "xmlparse.c"
      case 2: // $bb1
        var $13=$9+300; //@line 3663 "xmlparse.c"
        var $14=HEAP[$13]; //@line 3663 "xmlparse.c"
        var $15=$14; //@line 3663 "xmlparse.c"
        $eventPP=$15; //@line 3663 "xmlparse.c"
        var $16=$parser_addr; //@line 3664 "xmlparse.c"
        var $17=$16+300; //@line 3664 "xmlparse.c"
        var $18=HEAP[$17]; //@line 3664 "xmlparse.c"
        var $19=$18+4; //@line 3664 "xmlparse.c"
        $eventEndPP=$19; //@line 3664 "xmlparse.c"
        __label__ = 3; break; //@line 3664 "xmlparse.c"
      case 3: // $bb2
        $handleDefault=1; //@line 3669 "xmlparse.c"
        var $20=$eventPP; //@line 3670 "xmlparse.c"
        var $21=$s_addr; //@line 3670 "xmlparse.c"
        HEAP[$20]=$21; //@line 3670 "xmlparse.c"
        var $22=HEAP[$next_addr]; //@line 3671 "xmlparse.c"
        var $23=$eventEndPP; //@line 3671 "xmlparse.c"
        HEAP[$23]=$22; //@line 3671 "xmlparse.c"
        var $24=$tok_addr; //@line 3672 "xmlparse.c"
        var $25=($24) <= 0; //@line 3672 "xmlparse.c"
        if ($25) { __label__ = 4; break; } else { __label__ = 22; break; } //@line 3672 "xmlparse.c"
      case 4: // $bb3
        var $26=$haveMore_addr; //@line 3673 "xmlparse.c"
        var $27=($26)!=0; //@line 3673 "xmlparse.c"
        var $28=$tok_addr; //@line 3673 "xmlparse.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 3673 "xmlparse.c"
      case 5: // $bb4
        var $29=($28)!=0; //@line 3673 "xmlparse.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 3673 "xmlparse.c"
      case 6: // $bb5
        var $30=$nextPtr_addr; //@line 3674 "xmlparse.c"
        var $31=$s_addr; //@line 3674 "xmlparse.c"
        HEAP[$30]=$31; //@line 3674 "xmlparse.c"
        $0=0; //@line 3675 "xmlparse.c"
        __label__ = 380; break; //@line 3675 "xmlparse.c"
      case 7: // $bb6
        if ($28 == -15) {
          __label__ = 11; break;
        }
        else if ($28 == -4) {
          __label__ = 12; break;
        }
        else if ($28 == -2) {
          __label__ = 10; break;
        }
        else if ($28 == -1) {
          __label__ = 9; break;
        }
        else if ($28 == 0) {
          __label__ = 8; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 8: // $bb7
        var $32=HEAP[$next_addr]; //@line 3679 "xmlparse.c"
        var $33=$eventPP; //@line 3679 "xmlparse.c"
        HEAP[$33]=$32; //@line 3679 "xmlparse.c"
        $0=4; //@line 3680 "xmlparse.c"
        __label__ = 380; break; //@line 3680 "xmlparse.c"
      case 9: // $bb8
        $0=5; //@line 3682 "xmlparse.c"
        __label__ = 380; break; //@line 3682 "xmlparse.c"
      case 10: // $bb9
        $0=6; //@line 3684 "xmlparse.c"
        __label__ = 380; break; //@line 3684 "xmlparse.c"
      case 11: // $bb10
        var $34=$tok_addr; //@line 3686 "xmlparse.c"
        var $35=0 - ($34); //@line 3686 "xmlparse.c"
        $tok_addr=$35; //@line 3686 "xmlparse.c"
        __label__ = 22; break; //@line 3686 "xmlparse.c"
      case 12: // $bb11
        var $36=$parser_addr; //@line 3691 "xmlparse.c"
        var $37=$36+144; //@line 3691 "xmlparse.c"
        var $38=HEAP[$37]; //@line 3691 "xmlparse.c"
        var $39=$enc_addr; //@line 3691 "xmlparse.c"
        var $40=($38)!=($39); //@line 3691 "xmlparse.c"
        if ($40) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 3691 "xmlparse.c"
      case 13: // $bb12
        var $41=$parser_addr; //@line 3691 "xmlparse.c"
        var $42=$41+300; //@line 3691 "xmlparse.c"
        var $43=HEAP[$42]; //@line 3691 "xmlparse.c"
        var $44=$43+20; //@line 3691 "xmlparse.c"
        var $45=HEAP[$44]; //@line 3691 "xmlparse.c"
        var $46=($45)==0; //@line 3691 "xmlparse.c"
        if ($46) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3691 "xmlparse.c"
      case 14: // $bb13
        var $47=$nextPtr_addr; //@line 3692 "xmlparse.c"
        var $48=$s_addr; //@line 3692 "xmlparse.c"
        HEAP[$47]=$48; //@line 3692 "xmlparse.c"
        $0=0; //@line 3693 "xmlparse.c"
        __label__ = 380; break; //@line 3693 "xmlparse.c"
      case 15: // $bb14
        var $49=$parser_addr; //@line 3699 "xmlparse.c"
        var $50=$49+488; //@line 3699 "xmlparse.c"
        var $51=HEAP[$50]; //@line 3699 "xmlparse.c"
        var $52=($51)!=0; //@line 3699 "xmlparse.c"
        if ($52) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 3699 "xmlparse.c"
      case 16: // $bb15
        var $53=$parser_addr; //@line 3699 "xmlparse.c"
        var $54=$53+144; //@line 3699 "xmlparse.c"
        var $55=HEAP[$54]; //@line 3699 "xmlparse.c"
        var $56=$enc_addr; //@line 3699 "xmlparse.c"
        var $57=($55)!=($56); //@line 3699 "xmlparse.c"
        if ($57) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 3699 "xmlparse.c"
      case 17: // $bb16
        var $58=$parser_addr; //@line 3700 "xmlparse.c"
        var $59=$58+256; //@line 3700 "xmlparse.c"
        var $60=$59; //@line 3700 "xmlparse.c"
        var $61=HEAP[$60]; //@line 3700 "xmlparse.c"
        var $62=$parser_addr; //@line 3700 "xmlparse.c"
        var $63=$62+256; //@line 3700 "xmlparse.c"
        var $64=$end_addr; //@line 3700 "xmlparse.c"
        var $65=$end_addr; //@line 3700 "xmlparse.c"
        var $66=$enc_addr; //@line 3700 "xmlparse.c"
        var $67=FUNCTION_TABLE[$61]($63, -4, $64, $65, $66); //@line 3700 "xmlparse.c"
        var $68=($67)==-1; //@line 3700 "xmlparse.c"
        if ($68) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3700 "xmlparse.c"
      case 18: // $bb17
        $0=29; //@line 3702 "xmlparse.c"
        __label__ = 380; break; //@line 3702 "xmlparse.c"
      case 19: // $bb18
        var $69=$nextPtr_addr; //@line 3703 "xmlparse.c"
        var $70=$s_addr; //@line 3703 "xmlparse.c"
        HEAP[$69]=$70; //@line 3703 "xmlparse.c"
        $0=0; //@line 3704 "xmlparse.c"
        __label__ = 380; break; //@line 3704 "xmlparse.c"
      case 20: // $bb19
        $0=3; //@line 3707 "xmlparse.c"
        __label__ = 380; break; //@line 3707 "xmlparse.c"
      case 21: // $bb20
        var $71=$tok_addr; //@line 3709 "xmlparse.c"
        var $72=0 - ($71); //@line 3709 "xmlparse.c"
        $tok_addr=$72; //@line 3709 "xmlparse.c"
        var $73=$end_addr; //@line 3710 "xmlparse.c"
        HEAP[$next_addr]=$73; //@line 3710 "xmlparse.c"
        __label__ = 22; break; //@line 3710 "xmlparse.c"
      case 22: // $bb21
        var $74=$parser_addr; //@line 3714 "xmlparse.c"
        var $75=$74+256; //@line 3714 "xmlparse.c"
        var $76=$75; //@line 3714 "xmlparse.c"
        var $77=HEAP[$76]; //@line 3714 "xmlparse.c"
        var $78=HEAP[$next_addr]; //@line 3714 "xmlparse.c"
        var $79=$parser_addr; //@line 3714 "xmlparse.c"
        var $80=$79+256; //@line 3714 "xmlparse.c"
        var $81=$tok_addr; //@line 3714 "xmlparse.c"
        var $82=$s_addr; //@line 3714 "xmlparse.c"
        var $83=$enc_addr; //@line 3714 "xmlparse.c"
        var $84=FUNCTION_TABLE[$77]($80, $81, $82, $78, $83); //@line 3714 "xmlparse.c"
        $role=$84; //@line 3714 "xmlparse.c"
        if ($84 == -1) {
          __label__ = 238; break;
        }
        else if ($84 == 0) {
          __label__ = 359; break;
        }
        else if ($84 == 1) {
          __label__ = 23; break;
        }
        else if ($84 == 2) {
          __label__ = 74; break;
        }
        else if ($84 == 3) {
          __label__ = 361; break;
        }
        else if ($84 == 4) {
          __label__ = 26; break;
        }
        else if ($84 == 5) {
          __label__ = 156; break;
        }
        else if ($84 == 6) {
          __label__ = 36; break;
        }
        else if ($84 == 7) {
          __label__ = 31; break;
        }
        else if ($84 == 8) {
          __label__ = 52; break;
        }
        else if ($84 == 9) {
          __label__ = 188; break;
        }
        else if ($84 == 10) {
          __label__ = 204; break;
        }
        else if ($84 == 11) {
          __label__ = 363; break;
        }
        else if ($84 == 12) {
          __label__ = 149; break;
        }
        else if ($84 == 13) {
          __label__ = 170; break;
        }
        else if ($84 == 14) {
          __label__ = 44; break;
        }
        else if ($84 == 15) {
          __label__ = 176; break;
        }
        else if ($84 == 16) {
          __label__ = 180; break;
        }
        else if ($84 == 17) {
          __label__ = 366; break;
        }
        else if ($84 == 18) {
          __label__ = 218; break;
        }
        else if ($84 == 19) {
          __label__ = 228; break;
        }
        else if ($84 == 20) {
          __label__ = 234; break;
        }
        else if ($84 == 21) {
          __label__ = 222; break;
        }
        else if ($84 == 22) {
          __label__ = 90; break;
        }
        else if ($84 == 23) {
          __label__ = 93; break;
        }
        else if ($84 == 24) {
          __label__ = 94; break;
        }
        else if ($84 == 25) {
          __label__ = 95; break;
        }
        else if ($84 == 26) {
          __label__ = 96; break;
        }
        else if ($84 == 27) {
          __label__ = 97; break;
        }
        else if ($84 == 28) {
          __label__ = 98; break;
        }
        else if ($84 == 29) {
          __label__ = 99; break;
        }
        else if ($84 == 30) {
          __label__ = 100; break;
        }
        else if ($84 == 31) {
          __label__ = 104; break;
        }
        else if ($84 == 32) {
          __label__ = 104; break;
        }
        else if ($84 == 33) {
          __label__ = 368; break;
        }
        else if ($84 == 34) {
          __label__ = 88; break;
        }
        else if ($84 == 35) {
          __label__ = 117; break;
        }
        else if ($84 == 36) {
          __label__ = 117; break;
        }
        else if ($84 == 37) {
          __label__ = 132; break;
        }
        else if ($84 == 38) {
          __label__ = 132; break;
        }
        else if ($84 == 39) {
          __label__ = 371; break;
        }
        else if ($84 == 40) {
          __label__ = 308; break;
        }
        else if ($84 == 41) {
          __label__ = 312; break;
        }
        else if ($84 == 42) {
          __label__ = 312; break;
        }
        else if ($84 == 43) {
          __label__ = 321; break;
        }
        else if ($84 == 44) {
          __label__ = 248; break;
        }
        else if ($84 == 45) {
          __label__ = 340; break;
        }
        else if ($84 == 46) {
          __label__ = 342; break;
        }
        else if ($84 == 47) {
          __label__ = 341; break;
        }
        else if ($84 == 48) {
          __label__ = 343; break;
        }
        else if ($84 == 49) {
          __label__ = 268; break;
        }
        else if ($84 == 50) {
          __label__ = 263; break;
        }
        else if ($84 == 51) {
          __label__ = 324; break;
        }
        else if ($84 == 52) {
          __label__ = 326; break;
        }
        else if ($84 == 53) {
          __label__ = 325; break;
        }
        else if ($84 == 54) {
          __label__ = 327; break;
        }
        else if ($84 == 55) {
          __label__ = 353; break;
        }
        else if ($84 == 56) {
          __label__ = 356; break;
        }
        else if ($84 == 57) {
          __label__ = 33; break;
        }
        else if ($84 == 58) {
          __label__ = 242; break;
        }
        else if ($84 == 59) {
          __label__ = 276; break;
        }
        else if ($84 == 60) {
          __label__ = 276; break;
        }
        else {
        __label__ = 373; break;
        }
        
      case 23: // $bb22
        var $85=HEAP[$next_addr]; //@line 3718 "xmlparse.c"
        var $86=$parser_addr; //@line 3718 "xmlparse.c"
        var $87=$s_addr; //@line 3718 "xmlparse.c"
        var $88=_processXmlDecl($86, 0, $87, $85); //@line 3718 "xmlparse.c"
        $result=$88; //@line 3718 "xmlparse.c"
        var $89=$result; //@line 3719 "xmlparse.c"
        var $90=($89)!=0; //@line 3719 "xmlparse.c"
        if ($90) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 3719 "xmlparse.c"
      case 24: // $bb23
        var $91=$result; //@line 3720 "xmlparse.c"
        $0=$91; //@line 3720 "xmlparse.c"
        __label__ = 380; break; //@line 3720 "xmlparse.c"
      case 25: // $bb24
        var $92=$parser_addr; //@line 3721 "xmlparse.c"
        var $93=$92+144; //@line 3721 "xmlparse.c"
        var $94=HEAP[$93]; //@line 3721 "xmlparse.c"
        $enc_addr=$94; //@line 3721 "xmlparse.c"
        $handleDefault=0; //@line 3722 "xmlparse.c"
        __label__ = 376; break; //@line 3722 "xmlparse.c"
      case 26: // $bb25
        var $95=$parser_addr; //@line 3726 "xmlparse.c"
        var $96=$95+84; //@line 3726 "xmlparse.c"
        var $97=HEAP[$96]; //@line 3726 "xmlparse.c"
        var $98=($97)!=0; //@line 3726 "xmlparse.c"
        if ($98) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 3726 "xmlparse.c"
      case 27: // $bb26
        var $99=HEAP[$next_addr]; //@line 3727 "xmlparse.c"
        var $100=$parser_addr; //@line 3727 "xmlparse.c"
        var $101=$100+416; //@line 3727 "xmlparse.c"
        var $102=$enc_addr; //@line 3727 "xmlparse.c"
        var $103=$s_addr; //@line 3727 "xmlparse.c"
        var $104=_poolStoreString($101, $102, $103, $99); //@line 3727 "xmlparse.c"
        var $105=$parser_addr; //@line 3727 "xmlparse.c"
        var $106=$105+320; //@line 3727 "xmlparse.c"
        HEAP[$106]=$104; //@line 3727 "xmlparse.c"
        var $107=$parser_addr; //@line 3728 "xmlparse.c"
        var $108=$107+320; //@line 3728 "xmlparse.c"
        var $109=HEAP[$108]; //@line 3728 "xmlparse.c"
        var $110=($109)==0; //@line 3728 "xmlparse.c"
        if ($110) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 3728 "xmlparse.c"
      case 28: // $bb27
        $0=1; //@line 3729 "xmlparse.c"
        __label__ = 380; break; //@line 3729 "xmlparse.c"
      case 29: // $bb28
        var $111=$parser_addr; //@line 3730 "xmlparse.c"
        var $112=$111+416; //@line 3730 "xmlparse.c"
        var $113=$112+12; //@line 3730 "xmlparse.c"
        var $114=HEAP[$113]; //@line 3730 "xmlparse.c"
        var $115=$parser_addr; //@line 3730 "xmlparse.c"
        var $116=$115+416; //@line 3730 "xmlparse.c"
        var $117=$116+16; //@line 3730 "xmlparse.c"
        HEAP[$117]=$114; //@line 3730 "xmlparse.c"
        var $118=$parser_addr; //@line 3731 "xmlparse.c"
        var $119=$118+328; //@line 3731 "xmlparse.c"
        HEAP[$119]=0; //@line 3731 "xmlparse.c"
        $handleDefault=0; //@line 3732 "xmlparse.c"
        __label__ = 30; break; //@line 3732 "xmlparse.c"
      case 30: // $bb29
        var $120=$parser_addr; //@line 3734 "xmlparse.c"
        var $121=$120+324; //@line 3734 "xmlparse.c"
        HEAP[$121]=0; //@line 3734 "xmlparse.c"
        __label__ = 373; break; //@line 3734 "xmlparse.c"
      case 31: // $bb30
        var $122=$parser_addr; //@line 3737 "xmlparse.c"
        var $123=$122+84; //@line 3737 "xmlparse.c"
        var $124=HEAP[$123]; //@line 3737 "xmlparse.c"
        var $125=($124)!=0; //@line 3737 "xmlparse.c"
        if ($125) { __label__ = 32; break; } else { __label__ = 373; break; } //@line 3737 "xmlparse.c"
      case 32: // $bb31
        var $126=$parser_addr; //@line 3738 "xmlparse.c"
        var $127=$126+84; //@line 3738 "xmlparse.c"
        var $128=HEAP[$127]; //@line 3738 "xmlparse.c"
        var $129=$parser_addr; //@line 3738 "xmlparse.c"
        var $130=$129+328; //@line 3738 "xmlparse.c"
        var $131=HEAP[$130]; //@line 3738 "xmlparse.c"
        var $132=$parser_addr; //@line 3738 "xmlparse.c"
        var $133=$132+324; //@line 3738 "xmlparse.c"
        var $134=HEAP[$133]; //@line 3738 "xmlparse.c"
        var $135=$parser_addr; //@line 3738 "xmlparse.c"
        var $136=$135+320; //@line 3738 "xmlparse.c"
        var $137=HEAP[$136]; //@line 3738 "xmlparse.c"
        var $138=$parser_addr; //@line 3738 "xmlparse.c"
        var $139=$138+4; //@line 3738 "xmlparse.c"
        var $140=HEAP[$139]; //@line 3738 "xmlparse.c"
        FUNCTION_TABLE[$128]($140, $137, $134, $131, 1); //@line 3738 "xmlparse.c"
        var $141=$parser_addr; //@line 3740 "xmlparse.c"
        var $142=$141+320; //@line 3740 "xmlparse.c"
        HEAP[$142]=0; //@line 3740 "xmlparse.c"
        var $143=$parser_addr; //@line 3741 "xmlparse.c"
        var $144=$143+416; //@line 3741 "xmlparse.c"
        _poolClear($144); //@line 3741 "xmlparse.c"
        $handleDefault=0; //@line 3742 "xmlparse.c"
        __label__ = 376; break; //@line 3742 "xmlparse.c"
      case 33: // $bb33
        var $145=HEAP[$next_addr]; //@line 3748 "xmlparse.c"
        var $146=$parser_addr; //@line 3748 "xmlparse.c"
        var $147=$s_addr; //@line 3748 "xmlparse.c"
        var $148=_processXmlDecl($146, 1, $147, $145); //@line 3748 "xmlparse.c"
        $result34=$148; //@line 3748 "xmlparse.c"
        var $149=$result34; //@line 3749 "xmlparse.c"
        var $150=($149)!=0; //@line 3749 "xmlparse.c"
        if ($150) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 3749 "xmlparse.c"
      case 34: // $bb35
        var $151=$result34; //@line 3750 "xmlparse.c"
        $0=$151; //@line 3750 "xmlparse.c"
        __label__ = 380; break; //@line 3750 "xmlparse.c"
      case 35: // $bb36
        var $152=$parser_addr; //@line 3751 "xmlparse.c"
        var $153=$152+144; //@line 3751 "xmlparse.c"
        var $154=HEAP[$153]; //@line 3751 "xmlparse.c"
        $enc_addr=$154; //@line 3751 "xmlparse.c"
        $handleDefault=0; //@line 3752 "xmlparse.c"
        __label__ = 376; break; //@line 3752 "xmlparse.c"
      case 36: // $bb37
        var $155=$parser_addr; //@line 3758 "xmlparse.c"
        var $156=$155+489; //@line 3758 "xmlparse.c"
        HEAP[$156]=0; //@line 3758 "xmlparse.c"
        var $157=$dtd; //@line 3759 "xmlparse.c"
        var $158=$157+132; //@line 3759 "xmlparse.c"
        var $159=_lookup($158, _externalSubsetName_6003, 36); //@line 3759 "xmlparse.c"
        var $160=$159; //@line 3759 "xmlparse.c"
        var $161=$parser_addr; //@line 3759 "xmlparse.c"
        var $162=$161+316; //@line 3759 "xmlparse.c"
        HEAP[$162]=$160; //@line 3759 "xmlparse.c"
        var $163=$parser_addr; //@line 3762 "xmlparse.c"
        var $164=$163+316; //@line 3762 "xmlparse.c"
        var $165=HEAP[$164]; //@line 3762 "xmlparse.c"
        var $166=($165)==0; //@line 3762 "xmlparse.c"
        if ($166) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 3762 "xmlparse.c"
      case 37: // $bb38
        $0=1; //@line 3763 "xmlparse.c"
        __label__ = 380; break; //@line 3763 "xmlparse.c"
      case 38: // $bb39
        var $167=$dtd; //@line 3765 "xmlparse.c"
        var $168=$167+129; //@line 3765 "xmlparse.c"
        HEAP[$168]=1; //@line 3765 "xmlparse.c"
        var $169=$parser_addr; //@line 3766 "xmlparse.c"
        var $170=$169+84; //@line 3766 "xmlparse.c"
        var $171=HEAP[$170]; //@line 3766 "xmlparse.c"
        var $172=($171)!=0; //@line 3766 "xmlparse.c"
        if ($172) { __label__ = 39; break; } else { __label__ = 44; break; } //@line 3766 "xmlparse.c"
      case 39: // $bb40
        var $173=$enc_addr; //@line 3767 "xmlparse.c"
        var $174=$173+56; //@line 3767 "xmlparse.c"
        var $175=HEAP[$174]; //@line 3767 "xmlparse.c"
        var $176=HEAP[$next_addr]; //@line 3767 "xmlparse.c"
        var $177=$enc_addr; //@line 3767 "xmlparse.c"
        var $178=$s_addr; //@line 3767 "xmlparse.c"
        var $179=$eventPP; //@line 3767 "xmlparse.c"
        var $180=FUNCTION_TABLE[$175]($177, $178, $176, $179); //@line 3767 "xmlparse.c"
        var $181=($180)==0; //@line 3767 "xmlparse.c"
        if ($181) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 3767 "xmlparse.c"
      case 40: // $bb41
        $0=32; //@line 3768 "xmlparse.c"
        __label__ = 380; break; //@line 3768 "xmlparse.c"
      case 41: // $bb42
        var $182=HEAP[$next_addr]; //@line 3769 "xmlparse.c"
        var $183=$enc_addr; //@line 3769 "xmlparse.c"
        var $184=$183+68; //@line 3769 "xmlparse.c"
        var $185=HEAP[$184]; //@line 3769 "xmlparse.c"
        var $186=0 - ($185); //@line 3769 "xmlparse.c"
        var $187=$182+$186; //@line 3769 "xmlparse.c"
        var $188=$enc_addr; //@line 3769 "xmlparse.c"
        var $189=$188+68; //@line 3769 "xmlparse.c"
        var $190=HEAP[$189]; //@line 3769 "xmlparse.c"
        var $191=$s_addr; //@line 3769 "xmlparse.c"
        var $192=$191+$190; //@line 3769 "xmlparse.c"
        var $193=$parser_addr; //@line 3769 "xmlparse.c"
        var $194=$193+416; //@line 3769 "xmlparse.c"
        var $195=$enc_addr; //@line 3769 "xmlparse.c"
        var $196=_poolStoreString($194, $195, $192, $187); //@line 3769 "xmlparse.c"
        var $197=$parser_addr; //@line 3769 "xmlparse.c"
        var $198=$197+328; //@line 3769 "xmlparse.c"
        HEAP[$198]=$196; //@line 3769 "xmlparse.c"
        var $199=$parser_addr; //@line 3772 "xmlparse.c"
        var $200=$199+328; //@line 3772 "xmlparse.c"
        var $201=HEAP[$200]; //@line 3772 "xmlparse.c"
        var $202=($201)==0; //@line 3772 "xmlparse.c"
        if ($202) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 3772 "xmlparse.c"
      case 42: // $bb43
        $0=1; //@line 3773 "xmlparse.c"
        __label__ = 380; break; //@line 3773 "xmlparse.c"
      case 43: // $bb44
        var $203=$parser_addr; //@line 3774 "xmlparse.c"
        var $204=$203+328; //@line 3774 "xmlparse.c"
        var $205=HEAP[$204]; //@line 3774 "xmlparse.c"
        _normalizePublicId($205); //@line 3774 "xmlparse.c"
        var $206=$parser_addr; //@line 3775 "xmlparse.c"
        var $207=$206+416; //@line 3775 "xmlparse.c"
        var $208=$207+12; //@line 3775 "xmlparse.c"
        var $209=HEAP[$208]; //@line 3775 "xmlparse.c"
        var $210=$parser_addr; //@line 3775 "xmlparse.c"
        var $211=$210+416; //@line 3775 "xmlparse.c"
        var $212=$211+16; //@line 3775 "xmlparse.c"
        HEAP[$212]=$209; //@line 3775 "xmlparse.c"
        $handleDefault=0; //@line 3776 "xmlparse.c"
        __label__ = 46; break; //@line 3776 "xmlparse.c"
      case 44: // $bb45
        var $213=$enc_addr; //@line 3781 "xmlparse.c"
        var $214=$213+56; //@line 3781 "xmlparse.c"
        var $215=HEAP[$214]; //@line 3781 "xmlparse.c"
        var $216=HEAP[$next_addr]; //@line 3781 "xmlparse.c"
        var $217=$enc_addr; //@line 3781 "xmlparse.c"
        var $218=$s_addr; //@line 3781 "xmlparse.c"
        var $219=$eventPP; //@line 3781 "xmlparse.c"
        var $220=FUNCTION_TABLE[$215]($217, $218, $216, $219); //@line 3781 "xmlparse.c"
        var $221=($220)==0; //@line 3781 "xmlparse.c"
        if ($221) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 3781 "xmlparse.c"
      case 45: // $bb46
        $0=32; //@line 3782 "xmlparse.c"
        __label__ = 380; break; //@line 3782 "xmlparse.c"
      case 46: // $alreadyChecked
        var $222=$dtd; //@line 3784 "xmlparse.c"
        var $223=$222+128; //@line 3784 "xmlparse.c"
        var $224=HEAP[$223]; //@line 3784 "xmlparse.c"
        var $225=($224)!=0; //@line 3784 "xmlparse.c"
        if ($225) { __label__ = 47; break; } else { __label__ = 373; break; } //@line 3784 "xmlparse.c"
      case 47: // $bb47
        var $226=$parser_addr; //@line 3784 "xmlparse.c"
        var $227=$226+316; //@line 3784 "xmlparse.c"
        var $228=HEAP[$227]; //@line 3784 "xmlparse.c"
        var $229=($228)!=0; //@line 3784 "xmlparse.c"
        if ($229) { __label__ = 48; break; } else { __label__ = 373; break; } //@line 3784 "xmlparse.c"
      case 48: // $bb48
        var $230=HEAP[$next_addr]; //@line 3788 "xmlparse.c"
        var $231=$enc_addr; //@line 3788 "xmlparse.c"
        var $232=$231+68; //@line 3788 "xmlparse.c"
        var $233=HEAP[$232]; //@line 3788 "xmlparse.c"
        var $234=0 - ($233); //@line 3788 "xmlparse.c"
        var $235=$230+$234; //@line 3788 "xmlparse.c"
        var $236=$enc_addr; //@line 3788 "xmlparse.c"
        var $237=$236+68; //@line 3788 "xmlparse.c"
        var $238=HEAP[$237]; //@line 3788 "xmlparse.c"
        var $239=$s_addr; //@line 3788 "xmlparse.c"
        var $240=$239+$238; //@line 3788 "xmlparse.c"
        var $241=$dtd; //@line 3788 "xmlparse.c"
        var $242=$241+80; //@line 3788 "xmlparse.c"
        var $243=$enc_addr; //@line 3788 "xmlparse.c"
        var $244=_poolStoreString($242, $243, $240, $235); //@line 3788 "xmlparse.c"
        $tem=$244; //@line 3788 "xmlparse.c"
        var $245=$tem; //@line 3789 "xmlparse.c"
        var $246=($245)==0; //@line 3789 "xmlparse.c"
        if ($246) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 3789 "xmlparse.c"
      case 49: // $bb49
        $0=1; //@line 3790 "xmlparse.c"
        __label__ = 380; break; //@line 3790 "xmlparse.c"
      case 50: // $bb50
        var $247=$tem; //@line 3791 "xmlparse.c"
        _normalizePublicId($247); //@line 3791 "xmlparse.c"
        var $248=$parser_addr; //@line 3792 "xmlparse.c"
        var $249=$248+316; //@line 3792 "xmlparse.c"
        var $250=HEAP[$249]; //@line 3792 "xmlparse.c"
        var $251=$250+24; //@line 3792 "xmlparse.c"
        var $252=$tem; //@line 3792 "xmlparse.c"
        HEAP[$251]=$252; //@line 3792 "xmlparse.c"
        var $253=$dtd; //@line 3793 "xmlparse.c"
        var $254=$253+80; //@line 3793 "xmlparse.c"
        var $255=$254+12; //@line 3793 "xmlparse.c"
        var $256=HEAP[$255]; //@line 3793 "xmlparse.c"
        var $257=$dtd; //@line 3793 "xmlparse.c"
        var $258=$257+80; //@line 3793 "xmlparse.c"
        var $259=$258+16; //@line 3793 "xmlparse.c"
        HEAP[$259]=$256; //@line 3793 "xmlparse.c"
        var $260=$parser_addr; //@line 3794 "xmlparse.c"
        var $261=$260+136; //@line 3794 "xmlparse.c"
        var $262=HEAP[$261]; //@line 3794 "xmlparse.c"
        var $263=($262)!=0; //@line 3794 "xmlparse.c"
        if ($263) { __label__ = 51; break; } else { __label__ = 373; break; } //@line 3794 "xmlparse.c"
      case 51: // $bb51
        $handleDefault=0; //@line 3795 "xmlparse.c"
        __label__ = 376; break; //@line 3795 "xmlparse.c"
      case 52: // $bb53
        var $264=$parser_addr; //@line 3799 "xmlparse.c"
        var $265=$264+320; //@line 3799 "xmlparse.c"
        var $266=HEAP[$265]; //@line 3799 "xmlparse.c"
        var $267=($266)!=0; //@line 3799 "xmlparse.c"
        if ($267) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 3799 "xmlparse.c"
      case 53: // $bb54
        var $268=$parser_addr; //@line 3800 "xmlparse.c"
        var $269=$268+84; //@line 3800 "xmlparse.c"
        var $270=HEAP[$269]; //@line 3800 "xmlparse.c"
        var $271=$parser_addr; //@line 3800 "xmlparse.c"
        var $272=$271+328; //@line 3800 "xmlparse.c"
        var $273=HEAP[$272]; //@line 3800 "xmlparse.c"
        var $274=$parser_addr; //@line 3800 "xmlparse.c"
        var $275=$274+324; //@line 3800 "xmlparse.c"
        var $276=HEAP[$275]; //@line 3800 "xmlparse.c"
        var $277=$parser_addr; //@line 3800 "xmlparse.c"
        var $278=$277+320; //@line 3800 "xmlparse.c"
        var $279=HEAP[$278]; //@line 3800 "xmlparse.c"
        var $280=$parser_addr; //@line 3800 "xmlparse.c"
        var $281=$280+4; //@line 3800 "xmlparse.c"
        var $282=HEAP[$281]; //@line 3800 "xmlparse.c"
        FUNCTION_TABLE[$270]($282, $279, $276, $273, 0); //@line 3800 "xmlparse.c"
        var $283=$parser_addr; //@line 3802 "xmlparse.c"
        var $284=$283+416; //@line 3802 "xmlparse.c"
        _poolClear($284); //@line 3802 "xmlparse.c"
        $handleDefault=0; //@line 3803 "xmlparse.c"
        __label__ = 54; break; //@line 3803 "xmlparse.c"
      case 54: // $bb55
        var $285=$parser_addr; //@line 3810 "xmlparse.c"
        var $286=$285+324; //@line 3810 "xmlparse.c"
        var $287=HEAP[$286]; //@line 3810 "xmlparse.c"
        var $288=($287)!=0; //@line 3810 "xmlparse.c"
        if ($288) { __label__ = 56; break; } else { __label__ = 55; break; } //@line 3810 "xmlparse.c"
      case 55: // $bb56
        var $289=$parser_addr; //@line 3810 "xmlparse.c"
        var $290=$289+489; //@line 3810 "xmlparse.c"
        var $291=HEAP[$290]; //@line 3810 "xmlparse.c"
        var $292=($291)!=0; //@line 3810 "xmlparse.c"
        if ($292) { __label__ = 56; break; } else { __label__ = 72; break; } //@line 3810 "xmlparse.c"
      case 56: // $bb57
        var $293=$dtd; //@line 3811 "xmlparse.c"
        var $294=$293+129; //@line 3811 "xmlparse.c"
        var $295=HEAP[$294]; //@line 3811 "xmlparse.c"
        $hadParamEntityRefs=$295; //@line 3811 "xmlparse.c"
        var $296=$dtd; //@line 3812 "xmlparse.c"
        var $297=$296+129; //@line 3812 "xmlparse.c"
        HEAP[$297]=1; //@line 3812 "xmlparse.c"
        var $298=$parser_addr; //@line 3813 "xmlparse.c"
        var $299=$298+492; //@line 3813 "xmlparse.c"
        var $300=HEAP[$299]; //@line 3813 "xmlparse.c"
        var $301=($300)!=0; //@line 3813 "xmlparse.c"
        if ($301) { __label__ = 57; break; } else { __label__ = 71; break; } //@line 3813 "xmlparse.c"
      case 57: // $bb58
        var $302=$parser_addr; //@line 3813 "xmlparse.c"
        var $303=$302+112; //@line 3813 "xmlparse.c"
        var $304=HEAP[$303]; //@line 3813 "xmlparse.c"
        var $305=($304)!=0; //@line 3813 "xmlparse.c"
        if ($305) { __label__ = 58; break; } else { __label__ = 71; break; } //@line 3813 "xmlparse.c"
      case 58: // $bb59
        var $306=$dtd; //@line 3816 "xmlparse.c"
        var $307=$306+132; //@line 3816 "xmlparse.c"
        var $308=_lookup($307, _externalSubsetName_6003, 36); //@line 3816 "xmlparse.c"
        var $309=$308; //@line 3816 "xmlparse.c"
        $entity=$309; //@line 3816 "xmlparse.c"
        var $310=$entity; //@line 3817 "xmlparse.c"
        var $311=($310)==0; //@line 3817 "xmlparse.c"
        if ($311) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 3817 "xmlparse.c"
      case 59: // $bb60
        $0=1; //@line 3818 "xmlparse.c"
        __label__ = 380; break; //@line 3818 "xmlparse.c"
      case 60: // $bb61
        var $312=$parser_addr; //@line 3819 "xmlparse.c"
        var $313=$312+489; //@line 3819 "xmlparse.c"
        var $314=HEAP[$313]; //@line 3819 "xmlparse.c"
        var $315=($314)!=0; //@line 3819 "xmlparse.c"
        if ($315) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 3819 "xmlparse.c"
      case 61: // $bb62
        var $316=$parser_addr; //@line 3820 "xmlparse.c"
        var $317=$316+360; //@line 3820 "xmlparse.c"
        var $318=HEAP[$317]; //@line 3820 "xmlparse.c"
        var $319=$entity; //@line 3820 "xmlparse.c"
        var $320=$319+20; //@line 3820 "xmlparse.c"
        HEAP[$320]=$318; //@line 3820 "xmlparse.c"
        __label__ = 62; break; //@line 3820 "xmlparse.c"
      case 62: // $bb63
        var $321=$dtd; //@line 3821 "xmlparse.c"
        var $322=$321+131; //@line 3821 "xmlparse.c"
        HEAP[$322]=0; //@line 3821 "xmlparse.c"
        var $323=$parser_addr; //@line 3822 "xmlparse.c"
        var $324=$323+112; //@line 3822 "xmlparse.c"
        var $325=HEAP[$324]; //@line 3822 "xmlparse.c"
        var $326=$entity; //@line 3822 "xmlparse.c"
        var $327=$326+24; //@line 3822 "xmlparse.c"
        var $328=HEAP[$327]; //@line 3822 "xmlparse.c"
        var $329=$entity; //@line 3822 "xmlparse.c"
        var $330=$329+16; //@line 3822 "xmlparse.c"
        var $331=HEAP[$330]; //@line 3822 "xmlparse.c"
        var $332=$entity; //@line 3822 "xmlparse.c"
        var $333=$332+20; //@line 3822 "xmlparse.c"
        var $334=HEAP[$333]; //@line 3822 "xmlparse.c"
        var $335=$parser_addr; //@line 3822 "xmlparse.c"
        var $336=$335+116; //@line 3822 "xmlparse.c"
        var $337=HEAP[$336]; //@line 3822 "xmlparse.c"
        var $338=FUNCTION_TABLE[$325]($337, 0, $334, $331, $328); //@line 3822 "xmlparse.c"
        var $339=($338)==0; //@line 3822 "xmlparse.c"
        if ($339) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 3822 "xmlparse.c"
      case 63: // $bb64
        $0=21; //@line 3827 "xmlparse.c"
        __label__ = 380; break; //@line 3827 "xmlparse.c"
      case 64: // $bb65
        var $340=$dtd; //@line 3828 "xmlparse.c"
        var $341=$340+131; //@line 3828 "xmlparse.c"
        var $342=HEAP[$341]; //@line 3828 "xmlparse.c"
        var $343=($342)!=0; //@line 3828 "xmlparse.c"
        if ($343) { __label__ = 65; break; } else { __label__ = 69; break; } //@line 3828 "xmlparse.c"
      case 65: // $bb66
        var $344=$dtd; //@line 3829 "xmlparse.c"
        var $345=$344+130; //@line 3829 "xmlparse.c"
        var $346=HEAP[$345]; //@line 3829 "xmlparse.c"
        var $347=($346)==0; //@line 3829 "xmlparse.c"
        if ($347) { __label__ = 66; break; } else { __label__ = 71; break; } //@line 3829 "xmlparse.c"
      case 66: // $bb67
        var $348=$parser_addr; //@line 3829 "xmlparse.c"
        var $349=$348+108; //@line 3829 "xmlparse.c"
        var $350=HEAP[$349]; //@line 3829 "xmlparse.c"
        var $351=($350)!=0; //@line 3829 "xmlparse.c"
        if ($351) { __label__ = 67; break; } else { __label__ = 71; break; } //@line 3829 "xmlparse.c"
      case 67: // $bb68
        var $352=$parser_addr; //@line 3829 "xmlparse.c"
        var $353=$352+108; //@line 3829 "xmlparse.c"
        var $354=HEAP[$353]; //@line 3829 "xmlparse.c"
        var $355=$parser_addr; //@line 3829 "xmlparse.c"
        var $356=$355+4; //@line 3829 "xmlparse.c"
        var $357=HEAP[$356]; //@line 3829 "xmlparse.c"
        var $358=FUNCTION_TABLE[$354]($357); //@line 3829 "xmlparse.c"
        var $359=($358)==0; //@line 3829 "xmlparse.c"
        if ($359) { __label__ = 68; break; } else { __label__ = 71; break; } //@line 3829 "xmlparse.c"
      case 68: // $bb69
        $0=22; //@line 3832 "xmlparse.c"
        __label__ = 380; break; //@line 3832 "xmlparse.c"
      case 69: // $bb71
        var $360=$parser_addr; //@line 3837 "xmlparse.c"
        var $361=$360+324; //@line 3837 "xmlparse.c"
        var $362=HEAP[$361]; //@line 3837 "xmlparse.c"
        var $363=($362)==0; //@line 3837 "xmlparse.c"
        if ($363) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 3837 "xmlparse.c"
      case 70: // $bb72
        var $364=$dtd; //@line 3838 "xmlparse.c"
        var $365=$364+129; //@line 3838 "xmlparse.c"
        var $366=$hadParamEntityRefs; //@line 3838 "xmlparse.c"
        HEAP[$365]=$366; //@line 3838 "xmlparse.c"
        __label__ = 71; break; //@line 3838 "xmlparse.c"
      case 71: // $bb73
        var $367=$parser_addr; //@line 3841 "xmlparse.c"
        var $368=$367+489; //@line 3841 "xmlparse.c"
        HEAP[$368]=0; //@line 3841 "xmlparse.c"
        __label__ = 72; break; //@line 3841 "xmlparse.c"
      case 72: // $bb74
        var $369=$parser_addr; //@line 3844 "xmlparse.c"
        var $370=$369+88; //@line 3844 "xmlparse.c"
        var $371=HEAP[$370]; //@line 3844 "xmlparse.c"
        var $372=($371)!=0; //@line 3844 "xmlparse.c"
        if ($372) { __label__ = 73; break; } else { __label__ = 373; break; } //@line 3844 "xmlparse.c"
      case 73: // $bb75
        var $373=$parser_addr; //@line 3845 "xmlparse.c"
        var $374=$373+88; //@line 3845 "xmlparse.c"
        var $375=HEAP[$374]; //@line 3845 "xmlparse.c"
        var $376=$parser_addr; //@line 3845 "xmlparse.c"
        var $377=$376+4; //@line 3845 "xmlparse.c"
        var $378=HEAP[$377]; //@line 3845 "xmlparse.c"
        FUNCTION_TABLE[$375]($378); //@line 3845 "xmlparse.c"
        $handleDefault=0; //@line 3846 "xmlparse.c"
        __label__ = 376; break; //@line 3846 "xmlparse.c"
      case 74: // $bb77
        var $379=$parser_addr; //@line 3854 "xmlparse.c"
        var $380=$379+489; //@line 3854 "xmlparse.c"
        var $381=HEAP[$380]; //@line 3854 "xmlparse.c"
        var $382=($381)!=0; //@line 3854 "xmlparse.c"
        if ($382) { __label__ = 75; break; } else { __label__ = 87; break; } //@line 3854 "xmlparse.c"
      case 75: // $bb78
        var $383=$dtd; //@line 3855 "xmlparse.c"
        var $384=$383+129; //@line 3855 "xmlparse.c"
        var $385=HEAP[$384]; //@line 3855 "xmlparse.c"
        $hadParamEntityRefs79=$385; //@line 3855 "xmlparse.c"
        var $386=$dtd; //@line 3856 "xmlparse.c"
        var $387=$386+129; //@line 3856 "xmlparse.c"
        HEAP[$387]=1; //@line 3856 "xmlparse.c"
        var $388=$parser_addr; //@line 3857 "xmlparse.c"
        var $389=$388+492; //@line 3857 "xmlparse.c"
        var $390=HEAP[$389]; //@line 3857 "xmlparse.c"
        var $391=($390)!=0; //@line 3857 "xmlparse.c"
        if ($391) { __label__ = 76; break; } else { __label__ = 87; break; } //@line 3857 "xmlparse.c"
      case 76: // $bb80
        var $392=$parser_addr; //@line 3857 "xmlparse.c"
        var $393=$392+112; //@line 3857 "xmlparse.c"
        var $394=HEAP[$393]; //@line 3857 "xmlparse.c"
        var $395=($394)!=0; //@line 3857 "xmlparse.c"
        if ($395) { __label__ = 77; break; } else { __label__ = 87; break; } //@line 3857 "xmlparse.c"
      case 77: // $bb81
        var $396=$dtd; //@line 3860 "xmlparse.c"
        var $397=$396+132; //@line 3860 "xmlparse.c"
        var $398=_lookup($397, _externalSubsetName_6003, 36); //@line 3860 "xmlparse.c"
        var $399=$398; //@line 3860 "xmlparse.c"
        $entity82=$399; //@line 3860 "xmlparse.c"
        var $400=$entity82; //@line 3861 "xmlparse.c"
        var $401=($400)==0; //@line 3861 "xmlparse.c"
        if ($401) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 3861 "xmlparse.c"
      case 78: // $bb83
        $0=1; //@line 3862 "xmlparse.c"
        __label__ = 380; break; //@line 3862 "xmlparse.c"
      case 79: // $bb84
        var $402=$parser_addr; //@line 3863 "xmlparse.c"
        var $403=$402+360; //@line 3863 "xmlparse.c"
        var $404=HEAP[$403]; //@line 3863 "xmlparse.c"
        var $405=$entity82; //@line 3863 "xmlparse.c"
        var $406=$405+20; //@line 3863 "xmlparse.c"
        HEAP[$406]=$404; //@line 3863 "xmlparse.c"
        var $407=$dtd; //@line 3864 "xmlparse.c"
        var $408=$407+131; //@line 3864 "xmlparse.c"
        HEAP[$408]=0; //@line 3864 "xmlparse.c"
        var $409=$parser_addr; //@line 3865 "xmlparse.c"
        var $410=$409+112; //@line 3865 "xmlparse.c"
        var $411=HEAP[$410]; //@line 3865 "xmlparse.c"
        var $412=$entity82; //@line 3865 "xmlparse.c"
        var $413=$412+24; //@line 3865 "xmlparse.c"
        var $414=HEAP[$413]; //@line 3865 "xmlparse.c"
        var $415=$entity82; //@line 3865 "xmlparse.c"
        var $416=$415+16; //@line 3865 "xmlparse.c"
        var $417=HEAP[$416]; //@line 3865 "xmlparse.c"
        var $418=$entity82; //@line 3865 "xmlparse.c"
        var $419=$418+20; //@line 3865 "xmlparse.c"
        var $420=HEAP[$419]; //@line 3865 "xmlparse.c"
        var $421=$parser_addr; //@line 3865 "xmlparse.c"
        var $422=$421+116; //@line 3865 "xmlparse.c"
        var $423=HEAP[$422]; //@line 3865 "xmlparse.c"
        var $424=FUNCTION_TABLE[$411]($423, 0, $420, $417, $414); //@line 3865 "xmlparse.c"
        var $425=($424)==0; //@line 3865 "xmlparse.c"
        if ($425) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 3865 "xmlparse.c"
      case 80: // $bb85
        $0=21; //@line 3870 "xmlparse.c"
        __label__ = 380; break; //@line 3870 "xmlparse.c"
      case 81: // $bb86
        var $426=$dtd; //@line 3871 "xmlparse.c"
        var $427=$426+131; //@line 3871 "xmlparse.c"
        var $428=HEAP[$427]; //@line 3871 "xmlparse.c"
        var $429=($428)!=0; //@line 3871 "xmlparse.c"
        var $430=$dtd; //@line 3872 "xmlparse.c"
        if ($429) { __label__ = 82; break; } else { __label__ = 86; break; } //@line 3871 "xmlparse.c"
      case 82: // $bb87
        var $431=$430+130; //@line 3872 "xmlparse.c"
        var $432=HEAP[$431]; //@line 3872 "xmlparse.c"
        var $433=($432)==0; //@line 3872 "xmlparse.c"
        if ($433) { __label__ = 83; break; } else { __label__ = 87; break; } //@line 3872 "xmlparse.c"
      case 83: // $bb88
        var $434=$parser_addr; //@line 3872 "xmlparse.c"
        var $435=$434+108; //@line 3872 "xmlparse.c"
        var $436=HEAP[$435]; //@line 3872 "xmlparse.c"
        var $437=($436)!=0; //@line 3872 "xmlparse.c"
        if ($437) { __label__ = 84; break; } else { __label__ = 87; break; } //@line 3872 "xmlparse.c"
      case 84: // $bb89
        var $438=$parser_addr; //@line 3872 "xmlparse.c"
        var $439=$438+108; //@line 3872 "xmlparse.c"
        var $440=HEAP[$439]; //@line 3872 "xmlparse.c"
        var $441=$parser_addr; //@line 3872 "xmlparse.c"
        var $442=$441+4; //@line 3872 "xmlparse.c"
        var $443=HEAP[$442]; //@line 3872 "xmlparse.c"
        var $444=FUNCTION_TABLE[$440]($443); //@line 3872 "xmlparse.c"
        var $445=($444)==0; //@line 3872 "xmlparse.c"
        if ($445) { __label__ = 85; break; } else { __label__ = 87; break; } //@line 3872 "xmlparse.c"
      case 85: // $bb90
        $0=22; //@line 3875 "xmlparse.c"
        __label__ = 380; break; //@line 3875 "xmlparse.c"
      case 86: // $bb92
        var $446=$430+129; //@line 3881 "xmlparse.c"
        var $447=$hadParamEntityRefs79; //@line 3881 "xmlparse.c"
        HEAP[$446]=$447; //@line 3881 "xmlparse.c"
        __label__ = 87; break; //@line 3881 "xmlparse.c"
      case 87: // $bb93
        var $448=$parser_addr; //@line 3886 "xmlparse.c"
        var $449=$448+280; //@line 3886 "xmlparse.c"
        HEAP[$449]=(FUNCTION_TABLE_OFFSET + 64); //@line 3886 "xmlparse.c"
        var $450=$parser_addr; //@line 3887 "xmlparse.c"
        var $451=$s_addr; //@line 3887 "xmlparse.c"
        var $452=$end_addr; //@line 3887 "xmlparse.c"
        var $453=$nextPtr_addr; //@line 3887 "xmlparse.c"
        var $454=_contentProcessor($450, $451, $452, $453); //@line 3887 "xmlparse.c"
        $0=$454; //@line 3887 "xmlparse.c"
        __label__ = 380; break; //@line 3887 "xmlparse.c"
      case 88: // $bb94
        var $455=HEAP[$next_addr]; //@line 3889 "xmlparse.c"
        var $456=$parser_addr; //@line 3889 "xmlparse.c"
        var $457=$enc_addr; //@line 3889 "xmlparse.c"
        var $458=$s_addr; //@line 3889 "xmlparse.c"
        var $459=_getElementType($456, $457, $458, $455); //@line 3889 "xmlparse.c"
        var $460=$parser_addr; //@line 3889 "xmlparse.c"
        var $461=$460+344; //@line 3889 "xmlparse.c"
        HEAP[$461]=$459; //@line 3889 "xmlparse.c"
        var $462=$parser_addr; //@line 3890 "xmlparse.c"
        var $463=$462+344; //@line 3890 "xmlparse.c"
        var $464=HEAP[$463]; //@line 3890 "xmlparse.c"
        var $465=($464)==0; //@line 3890 "xmlparse.c"
        if ($465) { __label__ = 89; break; } else { __label__ = 101; break; } //@line 3890 "xmlparse.c"
      case 89: // $bb95
        $0=1; //@line 3891 "xmlparse.c"
        __label__ = 380; break; //@line 3891 "xmlparse.c"
      case 90: // $bb97
        var $466=HEAP[$next_addr]; //@line 3894 "xmlparse.c"
        var $467=$parser_addr; //@line 3894 "xmlparse.c"
        var $468=$enc_addr; //@line 3894 "xmlparse.c"
        var $469=$s_addr; //@line 3894 "xmlparse.c"
        var $470=_getAttributeId($467, $468, $469, $466); //@line 3894 "xmlparse.c"
        var $471=$parser_addr; //@line 3894 "xmlparse.c"
        var $472=$471+348; //@line 3894 "xmlparse.c"
        HEAP[$472]=$470; //@line 3894 "xmlparse.c"
        var $473=$parser_addr; //@line 3895 "xmlparse.c"
        var $474=$473+348; //@line 3895 "xmlparse.c"
        var $475=HEAP[$474]; //@line 3895 "xmlparse.c"
        var $476=($475)==0; //@line 3895 "xmlparse.c"
        if ($476) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 3895 "xmlparse.c"
      case 91: // $bb98
        $0=1; //@line 3896 "xmlparse.c"
        __label__ = 380; break; //@line 3896 "xmlparse.c"
      case 92: // $bb99
        var $477=$parser_addr; //@line 3897 "xmlparse.c"
        var $478=$477+352; //@line 3897 "xmlparse.c"
        HEAP[$478]=0; //@line 3897 "xmlparse.c"
        var $479=$parser_addr; //@line 3898 "xmlparse.c"
        var $480=$479+332; //@line 3898 "xmlparse.c"
        HEAP[$480]=0; //@line 3898 "xmlparse.c"
        var $481=$parser_addr; //@line 3899 "xmlparse.c"
        var $482=$481+353; //@line 3899 "xmlparse.c"
        HEAP[$482]=0; //@line 3899 "xmlparse.c"
        __label__ = 101; break; //@line 3899 "xmlparse.c"
      case 93: // $bb100
        var $483=$parser_addr; //@line 3902 "xmlparse.c"
        var $484=$483+352; //@line 3902 "xmlparse.c"
        HEAP[$484]=1; //@line 3902 "xmlparse.c"
        var $485=$parser_addr; //@line 3903 "xmlparse.c"
        var $486=$485+332; //@line 3903 "xmlparse.c"
        HEAP[$486]=_atypeCDATA_6004; //@line 3903 "xmlparse.c"
        __label__ = 101; break; //@line 3903 "xmlparse.c"
      case 94: // $bb101
        var $487=$parser_addr; //@line 3906 "xmlparse.c"
        var $488=$487+353; //@line 3906 "xmlparse.c"
        HEAP[$488]=1; //@line 3906 "xmlparse.c"
        var $489=$parser_addr; //@line 3907 "xmlparse.c"
        var $490=$489+332; //@line 3907 "xmlparse.c"
        HEAP[$490]=_atypeID_6005; //@line 3907 "xmlparse.c"
        __label__ = 101; break; //@line 3907 "xmlparse.c"
      case 95: // $bb102
        var $491=$parser_addr; //@line 3910 "xmlparse.c"
        var $492=$491+332; //@line 3910 "xmlparse.c"
        HEAP[$492]=_atypeIDREF_6006; //@line 3910 "xmlparse.c"
        __label__ = 101; break; //@line 3910 "xmlparse.c"
      case 96: // $bb103
        var $493=$parser_addr; //@line 3913 "xmlparse.c"
        var $494=$493+332; //@line 3913 "xmlparse.c"
        HEAP[$494]=_atypeIDREFS_6007; //@line 3913 "xmlparse.c"
        __label__ = 101; break; //@line 3913 "xmlparse.c"
      case 97: // $bb104
        var $495=$parser_addr; //@line 3916 "xmlparse.c"
        var $496=$495+332; //@line 3916 "xmlparse.c"
        HEAP[$496]=_atypeENTITY_6008; //@line 3916 "xmlparse.c"
        __label__ = 101; break; //@line 3916 "xmlparse.c"
      case 98: // $bb105
        var $497=$parser_addr; //@line 3919 "xmlparse.c"
        var $498=$497+332; //@line 3919 "xmlparse.c"
        HEAP[$498]=_atypeENTITIES_6009; //@line 3919 "xmlparse.c"
        __label__ = 101; break; //@line 3919 "xmlparse.c"
      case 99: // $bb106
        var $499=$parser_addr; //@line 3922 "xmlparse.c"
        var $500=$499+332; //@line 3922 "xmlparse.c"
        HEAP[$500]=_atypeNMTOKEN_6010; //@line 3922 "xmlparse.c"
        __label__ = 101; break; //@line 3922 "xmlparse.c"
      case 100: // $bb107
        var $501=$parser_addr; //@line 3925 "xmlparse.c"
        var $502=$501+332; //@line 3925 "xmlparse.c"
        HEAP[$502]=_atypeNMTOKENS_6011; //@line 3925 "xmlparse.c"
        __label__ = 101; break; //@line 3926 "xmlparse.c"
      case 101: // $checkAttListDeclHandler
        var $503=$dtd; //@line 3927 "xmlparse.c"
        var $504=$503+128; //@line 3927 "xmlparse.c"
        var $505=HEAP[$504]; //@line 3927 "xmlparse.c"
        var $506=($505)!=0; //@line 3927 "xmlparse.c"
        if ($506) { __label__ = 102; break; } else { __label__ = 373; break; } //@line 3927 "xmlparse.c"
      case 102: // $bb108
        var $507=$parser_addr; //@line 3927 "xmlparse.c"
        var $508=$507+132; //@line 3927 "xmlparse.c"
        var $509=HEAP[$508]; //@line 3927 "xmlparse.c"
        var $510=($509)!=0; //@line 3927 "xmlparse.c"
        if ($510) { __label__ = 103; break; } else { __label__ = 373; break; } //@line 3927 "xmlparse.c"
      case 103: // $bb109
        $handleDefault=0; //@line 3928 "xmlparse.c"
        __label__ = 376; break; //@line 3928 "xmlparse.c"
      case 104: // $bb111
        var $511=$dtd; //@line 3932 "xmlparse.c"
        var $512=$511+128; //@line 3932 "xmlparse.c"
        var $513=HEAP[$512]; //@line 3932 "xmlparse.c"
        var $514=($513)!=0; //@line 3932 "xmlparse.c"
        if ($514) { __label__ = 105; break; } else { __label__ = 373; break; } //@line 3932 "xmlparse.c"
      case 105: // $bb112
        var $515=$parser_addr; //@line 3932 "xmlparse.c"
        var $516=$515+132; //@line 3932 "xmlparse.c"
        var $517=HEAP[$516]; //@line 3932 "xmlparse.c"
        var $518=($517)!=0; //@line 3932 "xmlparse.c"
        if ($518) { __label__ = 106; break; } else { __label__ = 373; break; } //@line 3932 "xmlparse.c"
      case 106: // $bb113
        var $519=$parser_addr; //@line 3934 "xmlparse.c"
        var $520=$519+332; //@line 3934 "xmlparse.c"
        var $521=HEAP[$520]; //@line 3934 "xmlparse.c"
        var $522=($521)!=0; //@line 3934 "xmlparse.c"
        if ($522) { __label__ = 107; break; } else { __label__ = 108; break; } //@line 3934 "xmlparse.c"
      case 107: // $bb114
        $prefix=_enumValueSep_6013; //@line 3935 "xmlparse.c"
        __label__ = 112; break; //@line 3935 "xmlparse.c"
      case 108: // $bb115
        var $523=$role; //@line 3938 "xmlparse.c"
        var $524=($523)==32; //@line 3938 "xmlparse.c"
        if ($524) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 3938 "xmlparse.c"
      case 109: // $bb116
        $iftmp_206=_notationPrefix_6012; //@line 3938 "xmlparse.c"
        __label__ = 111; break; //@line 3938 "xmlparse.c"
      case 110: // $bb117
        $iftmp_206=_enumValueStart_6014; //@line 3938 "xmlparse.c"
        __label__ = 111; break; //@line 3938 "xmlparse.c"
      case 111: // $bb118
        var $525=$iftmp_206; //@line 3938 "xmlparse.c"
        $prefix=$525; //@line 3938 "xmlparse.c"
        __label__ = 112; break; //@line 3938 "xmlparse.c"
      case 112: // $bb119
        var $526=$parser_addr; //@line 3942 "xmlparse.c"
        var $527=$526+416; //@line 3942 "xmlparse.c"
        var $528=$prefix; //@line 3942 "xmlparse.c"
        var $529=_poolAppendString($527, $528); //@line 3942 "xmlparse.c"
        var $530=($529)==0; //@line 3942 "xmlparse.c"
        if ($530) { __label__ = 113; break; } else { __label__ = 114; break; } //@line 3942 "xmlparse.c"
      case 113: // $bb120
        $0=1; //@line 3943 "xmlparse.c"
        __label__ = 380; break; //@line 3943 "xmlparse.c"
      case 114: // $bb121
        var $531=HEAP[$next_addr]; //@line 3944 "xmlparse.c"
        var $532=$parser_addr; //@line 3944 "xmlparse.c"
        var $533=$532+416; //@line 3944 "xmlparse.c"
        var $534=$enc_addr; //@line 3944 "xmlparse.c"
        var $535=$s_addr; //@line 3944 "xmlparse.c"
        var $536=_poolAppend($533, $534, $535, $531); //@line 3944 "xmlparse.c"
        var $537=($536)==0; //@line 3944 "xmlparse.c"
        if ($537) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 3944 "xmlparse.c"
      case 115: // $bb122
        $0=1; //@line 3945 "xmlparse.c"
        __label__ = 380; break; //@line 3945 "xmlparse.c"
      case 116: // $bb123
        var $538=$parser_addr; //@line 3946 "xmlparse.c"
        var $539=$538+416; //@line 3946 "xmlparse.c"
        var $540=$539+16; //@line 3946 "xmlparse.c"
        var $541=HEAP[$540]; //@line 3946 "xmlparse.c"
        var $542=$parser_addr; //@line 3946 "xmlparse.c"
        var $543=$542+332; //@line 3946 "xmlparse.c"
        HEAP[$543]=$541; //@line 3946 "xmlparse.c"
        $handleDefault=0; //@line 3947 "xmlparse.c"
        __label__ = 376; break; //@line 3947 "xmlparse.c"
      case 117: // $bb125
        var $544=$dtd; //@line 3952 "xmlparse.c"
        var $545=$544+128; //@line 3952 "xmlparse.c"
        var $546=HEAP[$545]; //@line 3952 "xmlparse.c"
        var $547=($546)!=0; //@line 3952 "xmlparse.c"
        if ($547) { __label__ = 118; break; } else { __label__ = 373; break; } //@line 3952 "xmlparse.c"
      case 118: // $bb126
        var $548=$parser_addr; //@line 3953 "xmlparse.c"
        var $549=$548+353; //@line 3953 "xmlparse.c"
        var $550=HEAP[$549]; //@line 3953 "xmlparse.c"
        var $551=($550); //@line 3953 "xmlparse.c"
        var $552=$parser_addr; //@line 3953 "xmlparse.c"
        var $553=$552+352; //@line 3953 "xmlparse.c"
        var $554=HEAP[$553]; //@line 3953 "xmlparse.c"
        var $555=($554); //@line 3953 "xmlparse.c"
        var $556=$parser_addr; //@line 3953 "xmlparse.c"
        var $557=$556+348; //@line 3953 "xmlparse.c"
        var $558=HEAP[$557]; //@line 3953 "xmlparse.c"
        var $559=$parser_addr; //@line 3953 "xmlparse.c"
        var $560=$559+344; //@line 3953 "xmlparse.c"
        var $561=HEAP[$560]; //@line 3953 "xmlparse.c"
        var $562=((($555)) & 255); //@line 3953 "xmlparse.c"
        var $563=((($551)) & 255); //@line 3953 "xmlparse.c"
        var $564=$parser_addr; //@line 3953 "xmlparse.c"
        var $565=_defineAttribute($561, $558, $562, $563, 0, $564); //@line 3953 "xmlparse.c"
        var $566=($565)==0; //@line 3953 "xmlparse.c"
        if ($566) { __label__ = 119; break; } else { __label__ = 120; break; } //@line 3953 "xmlparse.c"
      case 119: // $bb127
        $0=1; //@line 3956 "xmlparse.c"
        __label__ = 380; break; //@line 3956 "xmlparse.c"
      case 120: // $bb128
        var $567=$parser_addr; //@line 3957 "xmlparse.c"
        var $568=$567+132; //@line 3957 "xmlparse.c"
        var $569=HEAP[$568]; //@line 3957 "xmlparse.c"
        var $570=($569)!=0; //@line 3957 "xmlparse.c"
        if ($570) { __label__ = 121; break; } else { __label__ = 373; break; } //@line 3957 "xmlparse.c"
      case 121: // $bb129
        var $571=$parser_addr; //@line 3957 "xmlparse.c"
        var $572=$571+332; //@line 3957 "xmlparse.c"
        var $573=HEAP[$572]; //@line 3957 "xmlparse.c"
        var $574=($573)!=0; //@line 3957 "xmlparse.c"
        if ($574) { __label__ = 122; break; } else { __label__ = 373; break; } //@line 3957 "xmlparse.c"
      case 122: // $bb130
        var $575=$parser_addr; //@line 3958 "xmlparse.c"
        var $576=$575+332; //@line 3958 "xmlparse.c"
        var $577=HEAP[$576]; //@line 3958 "xmlparse.c"
        var $578=HEAP[$577]; //@line 3958 "xmlparse.c"
        var $579=($578)==40; //@line 3958 "xmlparse.c"
        if ($579) { __label__ = 125; break; } else { __label__ = 123; break; } //@line 3958 "xmlparse.c"
      case 123: // $bb131
        var $580=$parser_addr; //@line 3958 "xmlparse.c"
        var $581=$580+332; //@line 3958 "xmlparse.c"
        var $582=HEAP[$581]; //@line 3958 "xmlparse.c"
        var $583=HEAP[$582]; //@line 3958 "xmlparse.c"
        var $584=($583)!=78; //@line 3958 "xmlparse.c"
        if ($584) { __label__ = 131; break; } else { __label__ = 124; break; } //@line 3958 "xmlparse.c"
      case 124: // $bb132
        var $585=$parser_addr; //@line 3958 "xmlparse.c"
        var $586=$585+332; //@line 3958 "xmlparse.c"
        var $587=HEAP[$586]; //@line 3958 "xmlparse.c"
        var $588=$587+1; //@line 3958 "xmlparse.c"
        var $589=HEAP[$588]; //@line 3958 "xmlparse.c"
        var $590=($589)==79; //@line 3958 "xmlparse.c"
        if ($590) { __label__ = 125; break; } else { __label__ = 131; break; } //@line 3958 "xmlparse.c"
      case 125: // $bb133
        var $591=$parser_addr; //@line 3962 "xmlparse.c"
        var $592=$591+416; //@line 3962 "xmlparse.c"
        var $593=$592+12; //@line 3962 "xmlparse.c"
        var $594=HEAP[$593]; //@line 3962 "xmlparse.c"
        var $595=$parser_addr; //@line 3962 "xmlparse.c"
        var $596=$595+416; //@line 3962 "xmlparse.c"
        var $597=$596+8; //@line 3962 "xmlparse.c"
        var $598=HEAP[$597]; //@line 3962 "xmlparse.c"
        var $599=($594)!=($598); //@line 3962 "xmlparse.c"
        if ($599) { __label__ = 127; break; } else { __label__ = 126; break; } //@line 3962 "xmlparse.c"
      case 126: // $bb134
        var $600=$parser_addr; //@line 3962 "xmlparse.c"
        var $601=$600+416; //@line 3962 "xmlparse.c"
        var $602=_poolGrow($601); //@line 3962 "xmlparse.c"
        var $603=($602)!=0; //@line 3962 "xmlparse.c"
        if ($603) { __label__ = 127; break; } else { __label__ = 130; break; } //@line 3962 "xmlparse.c"
      case 127: // $bb135
        var $604=$parser_addr; //@line 3962 "xmlparse.c"
        var $605=$604+416; //@line 3962 "xmlparse.c"
        var $606=$605+12; //@line 3962 "xmlparse.c"
        var $607=HEAP[$606]; //@line 3962 "xmlparse.c"
        HEAP[$607]=41; //@line 3962 "xmlparse.c"
        var $608=$607+1; //@line 3962 "xmlparse.c"
        var $609=$parser_addr; //@line 3962 "xmlparse.c"
        var $610=$609+416; //@line 3962 "xmlparse.c"
        var $611=$610+12; //@line 3962 "xmlparse.c"
        HEAP[$611]=$608; //@line 3962 "xmlparse.c"
        var $612=$parser_addr; //@line 3962 "xmlparse.c"
        var $613=$612+416; //@line 3962 "xmlparse.c"
        var $614=$613+12; //@line 3962 "xmlparse.c"
        var $615=HEAP[$614]; //@line 3962 "xmlparse.c"
        var $616=$parser_addr; //@line 3962 "xmlparse.c"
        var $617=$616+416; //@line 3962 "xmlparse.c"
        var $618=$617+8; //@line 3962 "xmlparse.c"
        var $619=HEAP[$618]; //@line 3962 "xmlparse.c"
        var $620=($615)!=($619); //@line 3962 "xmlparse.c"
        if ($620) { __label__ = 129; break; } else { __label__ = 128; break; } //@line 3962 "xmlparse.c"
      case 128: // $bb137
        var $621=$parser_addr; //@line 3962 "xmlparse.c"
        var $622=$621+416; //@line 3962 "xmlparse.c"
        var $623=_poolGrow($622); //@line 3962 "xmlparse.c"
        var $624=($623)!=0; //@line 3962 "xmlparse.c"
        if ($624) { __label__ = 129; break; } else { __label__ = 130; break; } //@line 3962 "xmlparse.c"
      case 129: // $bb138
        var $625=$parser_addr; //@line 3962 "xmlparse.c"
        var $626=$625+416; //@line 3962 "xmlparse.c"
        var $627=$626+12; //@line 3962 "xmlparse.c"
        var $628=HEAP[$627]; //@line 3962 "xmlparse.c"
        HEAP[$628]=0; //@line 3962 "xmlparse.c"
        var $629=$628+1; //@line 3962 "xmlparse.c"
        var $630=$parser_addr; //@line 3962 "xmlparse.c"
        var $631=$630+416; //@line 3962 "xmlparse.c"
        var $632=$631+12; //@line 3962 "xmlparse.c"
        HEAP[$632]=$629; //@line 3962 "xmlparse.c"
        var $633=$parser_addr; //@line 3965 "xmlparse.c"
        var $634=$633+416; //@line 3965 "xmlparse.c"
        var $635=$634+16; //@line 3965 "xmlparse.c"
        var $636=HEAP[$635]; //@line 3965 "xmlparse.c"
        var $637=$parser_addr; //@line 3965 "xmlparse.c"
        var $638=$637+332; //@line 3965 "xmlparse.c"
        HEAP[$638]=$636; //@line 3965 "xmlparse.c"
        var $639=$parser_addr; //@line 3966 "xmlparse.c"
        var $640=$639+416; //@line 3966 "xmlparse.c"
        var $641=$640+12; //@line 3966 "xmlparse.c"
        var $642=HEAP[$641]; //@line 3966 "xmlparse.c"
        var $643=$parser_addr; //@line 3966 "xmlparse.c"
        var $644=$643+416; //@line 3966 "xmlparse.c"
        var $645=$644+16; //@line 3966 "xmlparse.c"
        HEAP[$645]=$642; //@line 3966 "xmlparse.c"
        __label__ = 131; break; //@line 3966 "xmlparse.c"
      case 130: // $bb139
        $0=1; //@line 3964 "xmlparse.c"
        __label__ = 380; break; //@line 3964 "xmlparse.c"
      case 131: // $bb140
        var $646=$eventEndPP; //@line 3968 "xmlparse.c"
        var $647=$s_addr; //@line 3968 "xmlparse.c"
        HEAP[$646]=$647; //@line 3968 "xmlparse.c"
        var $648=$parser_addr; //@line 3969 "xmlparse.c"
        var $649=$648+132; //@line 3969 "xmlparse.c"
        var $650=HEAP[$649]; //@line 3969 "xmlparse.c"
        var $651=$role; //@line 3969 "xmlparse.c"
        var $652=($651)==36; //@line 3969 "xmlparse.c"
        var $653=($652); //@line 3969 "xmlparse.c"
        var $654=$parser_addr; //@line 3969 "xmlparse.c"
        var $655=$654+332; //@line 3969 "xmlparse.c"
        var $656=HEAP[$655]; //@line 3969 "xmlparse.c"
        var $657=$parser_addr; //@line 3969 "xmlparse.c"
        var $658=$657+348; //@line 3969 "xmlparse.c"
        var $659=HEAP[$658]; //@line 3969 "xmlparse.c"
        var $660=$659; //@line 3969 "xmlparse.c"
        var $661=HEAP[$660]; //@line 3969 "xmlparse.c"
        var $662=$parser_addr; //@line 3969 "xmlparse.c"
        var $663=$662+344; //@line 3969 "xmlparse.c"
        var $664=HEAP[$663]; //@line 3969 "xmlparse.c"
        var $665=$664; //@line 3969 "xmlparse.c"
        var $666=HEAP[$665]; //@line 3969 "xmlparse.c"
        var $667=$parser_addr; //@line 3969 "xmlparse.c"
        var $668=$667+4; //@line 3969 "xmlparse.c"
        var $669=HEAP[$668]; //@line 3969 "xmlparse.c"
        FUNCTION_TABLE[$650]($669, $666, $661, $656, 0, $653); //@line 3969 "xmlparse.c"
        var $670=$parser_addr; //@line 3972 "xmlparse.c"
        var $671=$670+416; //@line 3972 "xmlparse.c"
        _poolClear($671); //@line 3972 "xmlparse.c"
        $handleDefault=0; //@line 3973 "xmlparse.c"
        __label__ = 376; break; //@line 3973 "xmlparse.c"
      case 132: // $bb142
        var $672=$dtd; //@line 3979 "xmlparse.c"
        var $673=$672+128; //@line 3979 "xmlparse.c"
        var $674=HEAP[$673]; //@line 3979 "xmlparse.c"
        var $675=($674)!=0; //@line 3979 "xmlparse.c"
        if ($675) { __label__ = 133; break; } else { __label__ = 373; break; } //@line 3979 "xmlparse.c"
      case 133: // $bb143
        var $676=$dtd; //@line 3985 "xmlparse.c"
        var $677=$676+80; //@line 3985 "xmlparse.c"
        var $678=HEAP[$next_addr]; //@line 3985 "xmlparse.c"
        var $679=$enc_addr; //@line 3985 "xmlparse.c"
        var $680=$679+68; //@line 3985 "xmlparse.c"
        var $681=HEAP[$680]; //@line 3985 "xmlparse.c"
        var $682=0 - ($681); //@line 3985 "xmlparse.c"
        var $683=$678+$682; //@line 3985 "xmlparse.c"
        var $684=$enc_addr; //@line 3985 "xmlparse.c"
        var $685=$684+68; //@line 3985 "xmlparse.c"
        var $686=HEAP[$685]; //@line 3985 "xmlparse.c"
        var $687=$s_addr; //@line 3985 "xmlparse.c"
        var $688=$687+$686; //@line 3985 "xmlparse.c"
        var $689=$parser_addr; //@line 3985 "xmlparse.c"
        var $690=$689+352; //@line 3985 "xmlparse.c"
        var $691=HEAP[$690]; //@line 3985 "xmlparse.c"
        var $692=($691); //@line 3985 "xmlparse.c"
        var $693=$parser_addr; //@line 3985 "xmlparse.c"
        var $694=$enc_addr; //@line 3985 "xmlparse.c"
        var $695=((($692)) & 255); //@line 3985 "xmlparse.c"
        var $696=_storeAttributeValue($693, $694, $695, $688, $683, $677); //@line 3985 "xmlparse.c"
        $result144=$696; //@line 3985 "xmlparse.c"
        var $697=$result144; //@line 3986 "xmlparse.c"
        var $698=($697)!=0; //@line 3986 "xmlparse.c"
        if ($698) { __label__ = 134; break; } else { __label__ = 135; break; } //@line 3986 "xmlparse.c"
      case 134: // $bb145
        var $699=$result144; //@line 3987 "xmlparse.c"
        $0=$699; //@line 3987 "xmlparse.c"
        __label__ = 380; break; //@line 3987 "xmlparse.c"
      case 135: // $bb146
        var $700=$dtd; //@line 3988 "xmlparse.c"
        var $701=$700+80; //@line 3988 "xmlparse.c"
        var $702=$701+16; //@line 3988 "xmlparse.c"
        var $703=HEAP[$702]; //@line 3988 "xmlparse.c"
        $attVal=$703; //@line 3988 "xmlparse.c"
        var $704=$dtd; //@line 3989 "xmlparse.c"
        var $705=$704+80; //@line 3989 "xmlparse.c"
        var $706=$705+12; //@line 3989 "xmlparse.c"
        var $707=HEAP[$706]; //@line 3989 "xmlparse.c"
        var $708=$dtd; //@line 3989 "xmlparse.c"
        var $709=$708+80; //@line 3989 "xmlparse.c"
        var $710=$709+16; //@line 3989 "xmlparse.c"
        HEAP[$710]=$707; //@line 3989 "xmlparse.c"
        var $711=$parser_addr; //@line 3991 "xmlparse.c"
        var $712=$711+352; //@line 3991 "xmlparse.c"
        var $713=HEAP[$712]; //@line 3991 "xmlparse.c"
        var $714=($713); //@line 3991 "xmlparse.c"
        var $715=$parser_addr; //@line 3991 "xmlparse.c"
        var $716=$715+348; //@line 3991 "xmlparse.c"
        var $717=HEAP[$716]; //@line 3991 "xmlparse.c"
        var $718=$parser_addr; //@line 3991 "xmlparse.c"
        var $719=$718+344; //@line 3991 "xmlparse.c"
        var $720=HEAP[$719]; //@line 3991 "xmlparse.c"
        var $721=((($714)) & 255); //@line 3991 "xmlparse.c"
        var $722=$attVal; //@line 3991 "xmlparse.c"
        var $723=$parser_addr; //@line 3991 "xmlparse.c"
        var $724=_defineAttribute($720, $717, $721, 0, $722, $723); //@line 3991 "xmlparse.c"
        var $725=($724)==0; //@line 3991 "xmlparse.c"
        if ($725) { __label__ = 136; break; } else { __label__ = 137; break; } //@line 3991 "xmlparse.c"
      case 136: // $bb147
        $0=1; //@line 3993 "xmlparse.c"
        __label__ = 380; break; //@line 3993 "xmlparse.c"
      case 137: // $bb148
        var $726=$parser_addr; //@line 3994 "xmlparse.c"
        var $727=$726+132; //@line 3994 "xmlparse.c"
        var $728=HEAP[$727]; //@line 3994 "xmlparse.c"
        var $729=($728)!=0; //@line 3994 "xmlparse.c"
        if ($729) { __label__ = 138; break; } else { __label__ = 373; break; } //@line 3994 "xmlparse.c"
      case 138: // $bb149
        var $730=$parser_addr; //@line 3994 "xmlparse.c"
        var $731=$730+332; //@line 3994 "xmlparse.c"
        var $732=HEAP[$731]; //@line 3994 "xmlparse.c"
        var $733=($732)!=0; //@line 3994 "xmlparse.c"
        if ($733) { __label__ = 139; break; } else { __label__ = 373; break; } //@line 3994 "xmlparse.c"
      case 139: // $bb150
        var $734=$parser_addr; //@line 3995 "xmlparse.c"
        var $735=$734+332; //@line 3995 "xmlparse.c"
        var $736=HEAP[$735]; //@line 3995 "xmlparse.c"
        var $737=HEAP[$736]; //@line 3995 "xmlparse.c"
        var $738=($737)==40; //@line 3995 "xmlparse.c"
        if ($738) { __label__ = 142; break; } else { __label__ = 140; break; } //@line 3995 "xmlparse.c"
      case 140: // $bb151
        var $739=$parser_addr; //@line 3995 "xmlparse.c"
        var $740=$739+332; //@line 3995 "xmlparse.c"
        var $741=HEAP[$740]; //@line 3995 "xmlparse.c"
        var $742=HEAP[$741]; //@line 3995 "xmlparse.c"
        var $743=($742)!=78; //@line 3995 "xmlparse.c"
        if ($743) { __label__ = 148; break; } else { __label__ = 141; break; } //@line 3995 "xmlparse.c"
      case 141: // $bb152
        var $744=$parser_addr; //@line 3995 "xmlparse.c"
        var $745=$744+332; //@line 3995 "xmlparse.c"
        var $746=HEAP[$745]; //@line 3995 "xmlparse.c"
        var $747=$746+1; //@line 3995 "xmlparse.c"
        var $748=HEAP[$747]; //@line 3995 "xmlparse.c"
        var $749=($748)==79; //@line 3995 "xmlparse.c"
        if ($749) { __label__ = 142; break; } else { __label__ = 148; break; } //@line 3995 "xmlparse.c"
      case 142: // $bb153
        var $750=$parser_addr; //@line 3999 "xmlparse.c"
        var $751=$750+416; //@line 3999 "xmlparse.c"
        var $752=$751+12; //@line 3999 "xmlparse.c"
        var $753=HEAP[$752]; //@line 3999 "xmlparse.c"
        var $754=$parser_addr; //@line 3999 "xmlparse.c"
        var $755=$754+416; //@line 3999 "xmlparse.c"
        var $756=$755+8; //@line 3999 "xmlparse.c"
        var $757=HEAP[$756]; //@line 3999 "xmlparse.c"
        var $758=($753)!=($757); //@line 3999 "xmlparse.c"
        if ($758) { __label__ = 144; break; } else { __label__ = 143; break; } //@line 3999 "xmlparse.c"
      case 143: // $bb154
        var $759=$parser_addr; //@line 3999 "xmlparse.c"
        var $760=$759+416; //@line 3999 "xmlparse.c"
        var $761=_poolGrow($760); //@line 3999 "xmlparse.c"
        var $762=($761)!=0; //@line 3999 "xmlparse.c"
        if ($762) { __label__ = 144; break; } else { __label__ = 147; break; } //@line 3999 "xmlparse.c"
      case 144: // $bb155
        var $763=$parser_addr; //@line 3999 "xmlparse.c"
        var $764=$763+416; //@line 3999 "xmlparse.c"
        var $765=$764+12; //@line 3999 "xmlparse.c"
        var $766=HEAP[$765]; //@line 3999 "xmlparse.c"
        HEAP[$766]=41; //@line 3999 "xmlparse.c"
        var $767=$766+1; //@line 3999 "xmlparse.c"
        var $768=$parser_addr; //@line 3999 "xmlparse.c"
        var $769=$768+416; //@line 3999 "xmlparse.c"
        var $770=$769+12; //@line 3999 "xmlparse.c"
        HEAP[$770]=$767; //@line 3999 "xmlparse.c"
        var $771=$parser_addr; //@line 3999 "xmlparse.c"
        var $772=$771+416; //@line 3999 "xmlparse.c"
        var $773=$772+12; //@line 3999 "xmlparse.c"
        var $774=HEAP[$773]; //@line 3999 "xmlparse.c"
        var $775=$parser_addr; //@line 3999 "xmlparse.c"
        var $776=$775+416; //@line 3999 "xmlparse.c"
        var $777=$776+8; //@line 3999 "xmlparse.c"
        var $778=HEAP[$777]; //@line 3999 "xmlparse.c"
        var $779=($774)!=($778); //@line 3999 "xmlparse.c"
        if ($779) { __label__ = 146; break; } else { __label__ = 145; break; } //@line 3999 "xmlparse.c"
      case 145: // $bb157
        var $780=$parser_addr; //@line 3999 "xmlparse.c"
        var $781=$780+416; //@line 3999 "xmlparse.c"
        var $782=_poolGrow($781); //@line 3999 "xmlparse.c"
        var $783=($782)!=0; //@line 3999 "xmlparse.c"
        if ($783) { __label__ = 146; break; } else { __label__ = 147; break; } //@line 3999 "xmlparse.c"
      case 146: // $bb158
        var $784=$parser_addr; //@line 3999 "xmlparse.c"
        var $785=$784+416; //@line 3999 "xmlparse.c"
        var $786=$785+12; //@line 3999 "xmlparse.c"
        var $787=HEAP[$786]; //@line 3999 "xmlparse.c"
        HEAP[$787]=0; //@line 3999 "xmlparse.c"
        var $788=$787+1; //@line 3999 "xmlparse.c"
        var $789=$parser_addr; //@line 3999 "xmlparse.c"
        var $790=$789+416; //@line 3999 "xmlparse.c"
        var $791=$790+12; //@line 3999 "xmlparse.c"
        HEAP[$791]=$788; //@line 3999 "xmlparse.c"
        var $792=$parser_addr; //@line 4002 "xmlparse.c"
        var $793=$792+416; //@line 4002 "xmlparse.c"
        var $794=$793+16; //@line 4002 "xmlparse.c"
        var $795=HEAP[$794]; //@line 4002 "xmlparse.c"
        var $796=$parser_addr; //@line 4002 "xmlparse.c"
        var $797=$796+332; //@line 4002 "xmlparse.c"
        HEAP[$797]=$795; //@line 4002 "xmlparse.c"
        var $798=$parser_addr; //@line 4003 "xmlparse.c"
        var $799=$798+416; //@line 4003 "xmlparse.c"
        var $800=$799+12; //@line 4003 "xmlparse.c"
        var $801=HEAP[$800]; //@line 4003 "xmlparse.c"
        var $802=$parser_addr; //@line 4003 "xmlparse.c"
        var $803=$802+416; //@line 4003 "xmlparse.c"
        var $804=$803+16; //@line 4003 "xmlparse.c"
        HEAP[$804]=$801; //@line 4003 "xmlparse.c"
        __label__ = 148; break; //@line 4003 "xmlparse.c"
      case 147: // $bb159
        $0=1; //@line 4001 "xmlparse.c"
        __label__ = 380; break; //@line 4001 "xmlparse.c"
      case 148: // $bb160
        var $805=$eventEndPP; //@line 4005 "xmlparse.c"
        var $806=$s_addr; //@line 4005 "xmlparse.c"
        HEAP[$805]=$806; //@line 4005 "xmlparse.c"
        var $807=$parser_addr; //@line 4006 "xmlparse.c"
        var $808=$807+132; //@line 4006 "xmlparse.c"
        var $809=HEAP[$808]; //@line 4006 "xmlparse.c"
        var $810=$role; //@line 4006 "xmlparse.c"
        var $811=($810)==38; //@line 4006 "xmlparse.c"
        var $812=($811); //@line 4006 "xmlparse.c"
        var $813=$parser_addr; //@line 4006 "xmlparse.c"
        var $814=$813+332; //@line 4006 "xmlparse.c"
        var $815=HEAP[$814]; //@line 4006 "xmlparse.c"
        var $816=$parser_addr; //@line 4006 "xmlparse.c"
        var $817=$816+348; //@line 4006 "xmlparse.c"
        var $818=HEAP[$817]; //@line 4006 "xmlparse.c"
        var $819=$818; //@line 4006 "xmlparse.c"
        var $820=HEAP[$819]; //@line 4006 "xmlparse.c"
        var $821=$parser_addr; //@line 4006 "xmlparse.c"
        var $822=$821+344; //@line 4006 "xmlparse.c"
        var $823=HEAP[$822]; //@line 4006 "xmlparse.c"
        var $824=$823; //@line 4006 "xmlparse.c"
        var $825=HEAP[$824]; //@line 4006 "xmlparse.c"
        var $826=$parser_addr; //@line 4006 "xmlparse.c"
        var $827=$826+4; //@line 4006 "xmlparse.c"
        var $828=HEAP[$827]; //@line 4006 "xmlparse.c"
        var $829=$attVal; //@line 4006 "xmlparse.c"
        FUNCTION_TABLE[$809]($828, $825, $820, $815, $829, $812); //@line 4006 "xmlparse.c"
        var $830=$parser_addr; //@line 4010 "xmlparse.c"
        var $831=$830+416; //@line 4010 "xmlparse.c"
        _poolClear($831); //@line 4010 "xmlparse.c"
        $handleDefault=0; //@line 4011 "xmlparse.c"
        __label__ = 376; break; //@line 4011 "xmlparse.c"
      case 149: // $bb162
        var $832=$dtd; //@line 4016 "xmlparse.c"
        var $833=$832+128; //@line 4016 "xmlparse.c"
        var $834=HEAP[$833]; //@line 4016 "xmlparse.c"
        var $835=($834)!=0; //@line 4016 "xmlparse.c"
        if ($835) { __label__ = 150; break; } else { __label__ = 373; break; } //@line 4016 "xmlparse.c"
      case 150: // $bb163
        var $836=HEAP[$next_addr]; //@line 4019 "xmlparse.c"
        var $837=$enc_addr; //@line 4019 "xmlparse.c"
        var $838=$837+68; //@line 4019 "xmlparse.c"
        var $839=HEAP[$838]; //@line 4019 "xmlparse.c"
        var $840=0 - ($839); //@line 4019 "xmlparse.c"
        var $841=$836+$840; //@line 4019 "xmlparse.c"
        var $842=$enc_addr; //@line 4019 "xmlparse.c"
        var $843=$842+68; //@line 4019 "xmlparse.c"
        var $844=HEAP[$843]; //@line 4019 "xmlparse.c"
        var $845=$s_addr; //@line 4019 "xmlparse.c"
        var $846=$845+$844; //@line 4019 "xmlparse.c"
        var $847=$parser_addr; //@line 4019 "xmlparse.c"
        var $848=$enc_addr; //@line 4019 "xmlparse.c"
        var $849=_storeEntityValue($847, $848, $846, $841); //@line 4019 "xmlparse.c"
        $result164=$849; //@line 4019 "xmlparse.c"
        var $850=$parser_addr; //@line 4020 "xmlparse.c"
        var $851=$850+316; //@line 4020 "xmlparse.c"
        var $852=HEAP[$851]; //@line 4020 "xmlparse.c"
        var $853=($852)!=0; //@line 4020 "xmlparse.c"
        if ($853) { __label__ = 151; break; } else { __label__ = 153; break; } //@line 4020 "xmlparse.c"
      case 151: // $bb165
        var $854=$parser_addr; //@line 4021 "xmlparse.c"
        var $855=$854+316; //@line 4021 "xmlparse.c"
        var $856=HEAP[$855]; //@line 4021 "xmlparse.c"
        var $857=$dtd; //@line 4021 "xmlparse.c"
        var $858=$857+104; //@line 4021 "xmlparse.c"
        var $859=$858+16; //@line 4021 "xmlparse.c"
        var $860=HEAP[$859]; //@line 4021 "xmlparse.c"
        var $861=$856+4; //@line 4021 "xmlparse.c"
        HEAP[$861]=$860; //@line 4021 "xmlparse.c"
        var $862=$parser_addr; //@line 4022 "xmlparse.c"
        var $863=$862+316; //@line 4022 "xmlparse.c"
        var $864=HEAP[$863]; //@line 4022 "xmlparse.c"
        var $865=$dtd; //@line 4022 "xmlparse.c"
        var $866=$865+104; //@line 4022 "xmlparse.c"
        var $867=$866+12; //@line 4022 "xmlparse.c"
        var $868=HEAP[$867]; //@line 4022 "xmlparse.c"
        var $869=($868); //@line 4022 "xmlparse.c"
        var $870=$dtd; //@line 4022 "xmlparse.c"
        var $871=$870+104; //@line 4022 "xmlparse.c"
        var $872=$871+16; //@line 4022 "xmlparse.c"
        var $873=HEAP[$872]; //@line 4022 "xmlparse.c"
        var $874=($873); //@line 4022 "xmlparse.c"
        var $875=($869) - ($874); //@line 4022 "xmlparse.c"
        var $876=$864+8; //@line 4022 "xmlparse.c"
        HEAP[$876]=$875; //@line 4022 "xmlparse.c"
        var $877=$dtd; //@line 4023 "xmlparse.c"
        var $878=$877+104; //@line 4023 "xmlparse.c"
        var $879=$878+12; //@line 4023 "xmlparse.c"
        var $880=HEAP[$879]; //@line 4023 "xmlparse.c"
        var $881=$dtd; //@line 4023 "xmlparse.c"
        var $882=$881+104; //@line 4023 "xmlparse.c"
        var $883=$882+16; //@line 4023 "xmlparse.c"
        HEAP[$883]=$880; //@line 4023 "xmlparse.c"
        var $884=$parser_addr; //@line 4024 "xmlparse.c"
        var $885=$884+136; //@line 4024 "xmlparse.c"
        var $886=HEAP[$885]; //@line 4024 "xmlparse.c"
        var $887=($886)!=0; //@line 4024 "xmlparse.c"
        if ($887) { __label__ = 152; break; } else { __label__ = 154; break; } //@line 4024 "xmlparse.c"
      case 152: // $bb166
        var $888=$eventEndPP; //@line 4025 "xmlparse.c"
        var $889=$s_addr; //@line 4025 "xmlparse.c"
        HEAP[$888]=$889; //@line 4025 "xmlparse.c"
        var $890=$parser_addr; //@line 4026 "xmlparse.c"
        var $891=$890+136; //@line 4026 "xmlparse.c"
        var $892=HEAP[$891]; //@line 4026 "xmlparse.c"
        var $893=$parser_addr; //@line 4026 "xmlparse.c"
        var $894=$893+360; //@line 4026 "xmlparse.c"
        var $895=HEAP[$894]; //@line 4026 "xmlparse.c"
        var $896=$parser_addr; //@line 4026 "xmlparse.c"
        var $897=$896+316; //@line 4026 "xmlparse.c"
        var $898=HEAP[$897]; //@line 4026 "xmlparse.c"
        var $899=$898+8; //@line 4026 "xmlparse.c"
        var $900=HEAP[$899]; //@line 4026 "xmlparse.c"
        var $901=$parser_addr; //@line 4026 "xmlparse.c"
        var $902=$901+316; //@line 4026 "xmlparse.c"
        var $903=HEAP[$902]; //@line 4026 "xmlparse.c"
        var $904=$903+4; //@line 4026 "xmlparse.c"
        var $905=HEAP[$904]; //@line 4026 "xmlparse.c"
        var $906=$parser_addr; //@line 4026 "xmlparse.c"
        var $907=$906+316; //@line 4026 "xmlparse.c"
        var $908=HEAP[$907]; //@line 4026 "xmlparse.c"
        var $909=$908+33; //@line 4026 "xmlparse.c"
        var $910=HEAP[$909]; //@line 4026 "xmlparse.c"
        var $911=($910); //@line 4026 "xmlparse.c"
        var $912=$parser_addr; //@line 4026 "xmlparse.c"
        var $913=$912+316; //@line 4026 "xmlparse.c"
        var $914=HEAP[$913]; //@line 4026 "xmlparse.c"
        var $915=$914; //@line 4026 "xmlparse.c"
        var $916=HEAP[$915]; //@line 4026 "xmlparse.c"
        var $917=$parser_addr; //@line 4026 "xmlparse.c"
        var $918=$917+4; //@line 4026 "xmlparse.c"
        var $919=HEAP[$918]; //@line 4026 "xmlparse.c"
        FUNCTION_TABLE[$892]($919, $916, $911, $905, $900, $895, 0, 0, 0); //@line 4026 "xmlparse.c"
        $handleDefault=0; //@line 4032 "xmlparse.c"
        __label__ = 154; break; //@line 4032 "xmlparse.c"
      case 153: // $bb168
        var $920=$dtd; //@line 4036 "xmlparse.c"
        var $921=$920+104; //@line 4036 "xmlparse.c"
        var $922=$921+16; //@line 4036 "xmlparse.c"
        var $923=HEAP[$922]; //@line 4036 "xmlparse.c"
        var $924=$dtd; //@line 4036 "xmlparse.c"
        var $925=$924+104; //@line 4036 "xmlparse.c"
        var $926=$925+12; //@line 4036 "xmlparse.c"
        HEAP[$926]=$923; //@line 4036 "xmlparse.c"
        __label__ = 154; break; //@line 4036 "xmlparse.c"
      case 154: // $bb169
        var $927=$result164; //@line 4037 "xmlparse.c"
        var $928=($927)!=0; //@line 4037 "xmlparse.c"
        if ($928) { __label__ = 155; break; } else { __label__ = 373; break; } //@line 4037 "xmlparse.c"
      case 155: // $bb170
        var $929=$result164; //@line 4038 "xmlparse.c"
        $0=$929; //@line 4038 "xmlparse.c"
        __label__ = 380; break; //@line 4038 "xmlparse.c"
      case 156: // $bb172
        var $930=$parser_addr; //@line 4043 "xmlparse.c"
        var $931=$930+489; //@line 4043 "xmlparse.c"
        HEAP[$931]=0; //@line 4043 "xmlparse.c"
        var $932=$dtd; //@line 4045 "xmlparse.c"
        var $933=$932+129; //@line 4045 "xmlparse.c"
        HEAP[$933]=1; //@line 4045 "xmlparse.c"
        var $934=$parser_addr; //@line 4046 "xmlparse.c"
        var $935=$934+84; //@line 4046 "xmlparse.c"
        var $936=HEAP[$935]; //@line 4046 "xmlparse.c"
        var $937=($936)!=0; //@line 4046 "xmlparse.c"
        if ($937) { __label__ = 157; break; } else { __label__ = 160; break; } //@line 4046 "xmlparse.c"
      case 157: // $bb173
        var $938=HEAP[$next_addr]; //@line 4047 "xmlparse.c"
        var $939=$enc_addr; //@line 4047 "xmlparse.c"
        var $940=$939+68; //@line 4047 "xmlparse.c"
        var $941=HEAP[$940]; //@line 4047 "xmlparse.c"
        var $942=0 - ($941); //@line 4047 "xmlparse.c"
        var $943=$938+$942; //@line 4047 "xmlparse.c"
        var $944=$enc_addr; //@line 4047 "xmlparse.c"
        var $945=$944+68; //@line 4047 "xmlparse.c"
        var $946=HEAP[$945]; //@line 4047 "xmlparse.c"
        var $947=$s_addr; //@line 4047 "xmlparse.c"
        var $948=$947+$946; //@line 4047 "xmlparse.c"
        var $949=$parser_addr; //@line 4047 "xmlparse.c"
        var $950=$949+416; //@line 4047 "xmlparse.c"
        var $951=$enc_addr; //@line 4047 "xmlparse.c"
        var $952=_poolStoreString($950, $951, $948, $943); //@line 4047 "xmlparse.c"
        var $953=$parser_addr; //@line 4047 "xmlparse.c"
        var $954=$953+324; //@line 4047 "xmlparse.c"
        HEAP[$954]=$952; //@line 4047 "xmlparse.c"
        var $955=$parser_addr; //@line 4050 "xmlparse.c"
        var $956=$955+324; //@line 4050 "xmlparse.c"
        var $957=HEAP[$956]; //@line 4050 "xmlparse.c"
        var $958=($957)==0; //@line 4050 "xmlparse.c"
        if ($958) { __label__ = 158; break; } else { __label__ = 159; break; } //@line 4050 "xmlparse.c"
      case 158: // $bb174
        $0=1; //@line 4051 "xmlparse.c"
        __label__ = 380; break; //@line 4051 "xmlparse.c"
      case 159: // $bb175
        var $959=$parser_addr; //@line 4052 "xmlparse.c"
        var $960=$959+416; //@line 4052 "xmlparse.c"
        var $961=$960+12; //@line 4052 "xmlparse.c"
        var $962=HEAP[$961]; //@line 4052 "xmlparse.c"
        var $963=$parser_addr; //@line 4052 "xmlparse.c"
        var $964=$963+416; //@line 4052 "xmlparse.c"
        var $965=$964+16; //@line 4052 "xmlparse.c"
        HEAP[$965]=$962; //@line 4052 "xmlparse.c"
        $handleDefault=0; //@line 4053 "xmlparse.c"
        __label__ = 161; break; //@line 4053 "xmlparse.c"
      case 160: // $bb176
        var $966=$parser_addr; //@line 4059 "xmlparse.c"
        var $967=$966+324; //@line 4059 "xmlparse.c"
        HEAP[$967]=_externalSubsetName_6003; //@line 4059 "xmlparse.c"
        __label__ = 161; break; //@line 4059 "xmlparse.c"
      case 161: // $bb177
        var $968=$dtd; //@line 4061 "xmlparse.c"
        var $969=$968+130; //@line 4061 "xmlparse.c"
        var $970=HEAP[$969]; //@line 4061 "xmlparse.c"
        var $971=($970)==0; //@line 4061 "xmlparse.c"
        if ($971) { __label__ = 162; break; } else { __label__ = 166; break; } //@line 4061 "xmlparse.c"
      case 162: // $bb178
        var $972=$parser_addr; //@line 4061 "xmlparse.c"
        var $973=$972+492; //@line 4061 "xmlparse.c"
        var $974=HEAP[$973]; //@line 4061 "xmlparse.c"
        var $975=($974)==0; //@line 4061 "xmlparse.c"
        if ($975) { __label__ = 163; break; } else { __label__ = 166; break; } //@line 4061 "xmlparse.c"
      case 163: // $bb179
        var $976=$parser_addr; //@line 4061 "xmlparse.c"
        var $977=$976+108; //@line 4061 "xmlparse.c"
        var $978=HEAP[$977]; //@line 4061 "xmlparse.c"
        var $979=($978)!=0; //@line 4061 "xmlparse.c"
        if ($979) { __label__ = 164; break; } else { __label__ = 166; break; } //@line 4061 "xmlparse.c"
      case 164: // $bb180
        var $980=$parser_addr; //@line 4061 "xmlparse.c"
        var $981=$980+108; //@line 4061 "xmlparse.c"
        var $982=HEAP[$981]; //@line 4061 "xmlparse.c"
        var $983=$parser_addr; //@line 4061 "xmlparse.c"
        var $984=$983+4; //@line 4061 "xmlparse.c"
        var $985=HEAP[$984]; //@line 4061 "xmlparse.c"
        var $986=FUNCTION_TABLE[$982]($985); //@line 4061 "xmlparse.c"
        var $987=($986)==0; //@line 4061 "xmlparse.c"
        if ($987) { __label__ = 165; break; } else { __label__ = 166; break; } //@line 4061 "xmlparse.c"
      case 165: // $bb181
        $0=22; //@line 4067 "xmlparse.c"
        __label__ = 380; break; //@line 4067 "xmlparse.c"
      case 166: // $bb182
        var $988=$parser_addr; //@line 4071 "xmlparse.c"
        var $989=$988+316; //@line 4071 "xmlparse.c"
        var $990=HEAP[$989]; //@line 4071 "xmlparse.c"
        var $991=($990)==0; //@line 4071 "xmlparse.c"
        if ($991) { __label__ = 167; break; } else { __label__ = 170; break; } //@line 4071 "xmlparse.c"
      case 167: // $bb183
        var $992=$dtd; //@line 4072 "xmlparse.c"
        var $993=$992+132; //@line 4072 "xmlparse.c"
        var $994=_lookup($993, _externalSubsetName_6003, 36); //@line 4072 "xmlparse.c"
        var $995=$994; //@line 4072 "xmlparse.c"
        var $996=$parser_addr; //@line 4072 "xmlparse.c"
        var $997=$996+316; //@line 4072 "xmlparse.c"
        HEAP[$997]=$995; //@line 4072 "xmlparse.c"
        var $998=$parser_addr; //@line 4075 "xmlparse.c"
        var $999=$998+316; //@line 4075 "xmlparse.c"
        var $1000=HEAP[$999]; //@line 4075 "xmlparse.c"
        var $1001=($1000)==0; //@line 4075 "xmlparse.c"
        if ($1001) { __label__ = 168; break; } else { __label__ = 169; break; } //@line 4075 "xmlparse.c"
      case 168: // $bb184
        $0=1; //@line 4076 "xmlparse.c"
        __label__ = 380; break; //@line 4076 "xmlparse.c"
      case 169: // $bb185
        var $1002=$parser_addr; //@line 4077 "xmlparse.c"
        var $1003=$1002+316; //@line 4077 "xmlparse.c"
        var $1004=HEAP[$1003]; //@line 4077 "xmlparse.c"
        var $1005=$1004+24; //@line 4077 "xmlparse.c"
        HEAP[$1005]=0; //@line 4077 "xmlparse.c"
        __label__ = 170; break; //@line 4077 "xmlparse.c"
      case 170: // $bb186
        var $1006=$dtd; //@line 4082 "xmlparse.c"
        var $1007=$1006+128; //@line 4082 "xmlparse.c"
        var $1008=HEAP[$1007]; //@line 4082 "xmlparse.c"
        var $1009=($1008)!=0; //@line 4082 "xmlparse.c"
        if ($1009) { __label__ = 171; break; } else { __label__ = 373; break; } //@line 4082 "xmlparse.c"
      case 171: // $bb187
        var $1010=$parser_addr; //@line 4082 "xmlparse.c"
        var $1011=$1010+316; //@line 4082 "xmlparse.c"
        var $1012=HEAP[$1011]; //@line 4082 "xmlparse.c"
        var $1013=($1012)!=0; //@line 4082 "xmlparse.c"
        if ($1013) { __label__ = 172; break; } else { __label__ = 373; break; } //@line 4082 "xmlparse.c"
      case 172: // $bb188
        var $1014=$parser_addr; //@line 4083 "xmlparse.c"
        var $1015=$1014+316; //@line 4083 "xmlparse.c"
        var $1016=HEAP[$1015]; //@line 4083 "xmlparse.c"
        var $1017=HEAP[$next_addr]; //@line 4083 "xmlparse.c"
        var $1018=$enc_addr; //@line 4083 "xmlparse.c"
        var $1019=$1018+68; //@line 4083 "xmlparse.c"
        var $1020=HEAP[$1019]; //@line 4083 "xmlparse.c"
        var $1021=0 - ($1020); //@line 4083 "xmlparse.c"
        var $1022=$1017+$1021; //@line 4083 "xmlparse.c"
        var $1023=$enc_addr; //@line 4083 "xmlparse.c"
        var $1024=$1023+68; //@line 4083 "xmlparse.c"
        var $1025=HEAP[$1024]; //@line 4083 "xmlparse.c"
        var $1026=$s_addr; //@line 4083 "xmlparse.c"
        var $1027=$1026+$1025; //@line 4083 "xmlparse.c"
        var $1028=$dtd; //@line 4083 "xmlparse.c"
        var $1029=$1028+80; //@line 4083 "xmlparse.c"
        var $1030=$enc_addr; //@line 4083 "xmlparse.c"
        var $1031=_poolStoreString($1029, $1030, $1027, $1022); //@line 4083 "xmlparse.c"
        var $1032=$1016+16; //@line 4083 "xmlparse.c"
        HEAP[$1032]=$1031; //@line 4083 "xmlparse.c"
        var $1033=$parser_addr; //@line 4086 "xmlparse.c"
        var $1034=$1033+316; //@line 4086 "xmlparse.c"
        var $1035=HEAP[$1034]; //@line 4086 "xmlparse.c"
        var $1036=$1035+16; //@line 4086 "xmlparse.c"
        var $1037=HEAP[$1036]; //@line 4086 "xmlparse.c"
        var $1038=($1037)==0; //@line 4086 "xmlparse.c"
        if ($1038) { __label__ = 173; break; } else { __label__ = 174; break; } //@line 4086 "xmlparse.c"
      case 173: // $bb189
        $0=1; //@line 4087 "xmlparse.c"
        __label__ = 380; break; //@line 4087 "xmlparse.c"
      case 174: // $bb190
        var $1039=$parser_addr; //@line 4088 "xmlparse.c"
        var $1040=$1039+316; //@line 4088 "xmlparse.c"
        var $1041=HEAP[$1040]; //@line 4088 "xmlparse.c"
        var $1042=$parser_addr; //@line 4088 "xmlparse.c"
        var $1043=$1042+360; //@line 4088 "xmlparse.c"
        var $1044=HEAP[$1043]; //@line 4088 "xmlparse.c"
        var $1045=$1041+20; //@line 4088 "xmlparse.c"
        HEAP[$1045]=$1044; //@line 4088 "xmlparse.c"
        var $1046=$dtd; //@line 4089 "xmlparse.c"
        var $1047=$1046+80; //@line 4089 "xmlparse.c"
        var $1048=$1047+12; //@line 4089 "xmlparse.c"
        var $1049=HEAP[$1048]; //@line 4089 "xmlparse.c"
        var $1050=$dtd; //@line 4089 "xmlparse.c"
        var $1051=$1050+80; //@line 4089 "xmlparse.c"
        var $1052=$1051+16; //@line 4089 "xmlparse.c"
        HEAP[$1052]=$1049; //@line 4089 "xmlparse.c"
        var $1053=$parser_addr; //@line 4090 "xmlparse.c"
        var $1054=$1053+136; //@line 4090 "xmlparse.c"
        var $1055=HEAP[$1054]; //@line 4090 "xmlparse.c"
        var $1056=($1055)!=0; //@line 4090 "xmlparse.c"
        if ($1056) { __label__ = 175; break; } else { __label__ = 373; break; } //@line 4090 "xmlparse.c"
      case 175: // $bb191
        $handleDefault=0; //@line 4091 "xmlparse.c"
        __label__ = 376; break; //@line 4091 "xmlparse.c"
      case 176: // $bb193
        var $1057=$dtd; //@line 4095 "xmlparse.c"
        var $1058=$1057+128; //@line 4095 "xmlparse.c"
        var $1059=HEAP[$1058]; //@line 4095 "xmlparse.c"
        var $1060=($1059)!=0; //@line 4095 "xmlparse.c"
        if ($1060) { __label__ = 177; break; } else { __label__ = 373; break; } //@line 4095 "xmlparse.c"
      case 177: // $bb194
        var $1061=$parser_addr; //@line 4095 "xmlparse.c"
        var $1062=$1061+316; //@line 4095 "xmlparse.c"
        var $1063=HEAP[$1062]; //@line 4095 "xmlparse.c"
        var $1064=($1063)!=0; //@line 4095 "xmlparse.c"
        if ($1064) { __label__ = 178; break; } else { __label__ = 373; break; } //@line 4095 "xmlparse.c"
      case 178: // $bb195
        var $1065=$parser_addr; //@line 4095 "xmlparse.c"
        var $1066=$1065+136; //@line 4095 "xmlparse.c"
        var $1067=HEAP[$1066]; //@line 4095 "xmlparse.c"
        var $1068=($1067)!=0; //@line 4095 "xmlparse.c"
        if ($1068) { __label__ = 179; break; } else { __label__ = 373; break; } //@line 4095 "xmlparse.c"
      case 179: // $bb196
        var $1069=$eventEndPP; //@line 4096 "xmlparse.c"
        var $1070=$s_addr; //@line 4096 "xmlparse.c"
        HEAP[$1069]=$1070; //@line 4096 "xmlparse.c"
        var $1071=$parser_addr; //@line 4097 "xmlparse.c"
        var $1072=$1071+136; //@line 4097 "xmlparse.c"
        var $1073=HEAP[$1072]; //@line 4097 "xmlparse.c"
        var $1074=$parser_addr; //@line 4097 "xmlparse.c"
        var $1075=$1074+316; //@line 4097 "xmlparse.c"
        var $1076=HEAP[$1075]; //@line 4097 "xmlparse.c"
        var $1077=$1076+24; //@line 4097 "xmlparse.c"
        var $1078=HEAP[$1077]; //@line 4097 "xmlparse.c"
        var $1079=$parser_addr; //@line 4097 "xmlparse.c"
        var $1080=$1079+316; //@line 4097 "xmlparse.c"
        var $1081=HEAP[$1080]; //@line 4097 "xmlparse.c"
        var $1082=$1081+16; //@line 4097 "xmlparse.c"
        var $1083=HEAP[$1082]; //@line 4097 "xmlparse.c"
        var $1084=$parser_addr; //@line 4097 "xmlparse.c"
        var $1085=$1084+316; //@line 4097 "xmlparse.c"
        var $1086=HEAP[$1085]; //@line 4097 "xmlparse.c"
        var $1087=$1086+20; //@line 4097 "xmlparse.c"
        var $1088=HEAP[$1087]; //@line 4097 "xmlparse.c"
        var $1089=$parser_addr; //@line 4097 "xmlparse.c"
        var $1090=$1089+316; //@line 4097 "xmlparse.c"
        var $1091=HEAP[$1090]; //@line 4097 "xmlparse.c"
        var $1092=$1091+33; //@line 4097 "xmlparse.c"
        var $1093=HEAP[$1092]; //@line 4097 "xmlparse.c"
        var $1094=($1093); //@line 4097 "xmlparse.c"
        var $1095=$parser_addr; //@line 4097 "xmlparse.c"
        var $1096=$1095+316; //@line 4097 "xmlparse.c"
        var $1097=HEAP[$1096]; //@line 4097 "xmlparse.c"
        var $1098=$1097; //@line 4097 "xmlparse.c"
        var $1099=HEAP[$1098]; //@line 4097 "xmlparse.c"
        var $1100=$parser_addr; //@line 4097 "xmlparse.c"
        var $1101=$1100+4; //@line 4097 "xmlparse.c"
        var $1102=HEAP[$1101]; //@line 4097 "xmlparse.c"
        FUNCTION_TABLE[$1073]($1102, $1099, $1094, 0, 0, $1088, $1083, $1078, 0); //@line 4097 "xmlparse.c"
        $handleDefault=0; //@line 4105 "xmlparse.c"
        __label__ = 376; break; //@line 4105 "xmlparse.c"
      case 180: // $bb198
        var $1103=$dtd; //@line 4109 "xmlparse.c"
        var $1104=$1103+128; //@line 4109 "xmlparse.c"
        var $1105=HEAP[$1104]; //@line 4109 "xmlparse.c"
        var $1106=($1105)!=0; //@line 4109 "xmlparse.c"
        if ($1106) { __label__ = 181; break; } else { __label__ = 373; break; } //@line 4109 "xmlparse.c"
      case 181: // $bb199
        var $1107=$parser_addr; //@line 4109 "xmlparse.c"
        var $1108=$1107+316; //@line 4109 "xmlparse.c"
        var $1109=HEAP[$1108]; //@line 4109 "xmlparse.c"
        var $1110=($1109)!=0; //@line 4109 "xmlparse.c"
        if ($1110) { __label__ = 182; break; } else { __label__ = 373; break; } //@line 4109 "xmlparse.c"
      case 182: // $bb200
        var $1111=$parser_addr; //@line 4110 "xmlparse.c"
        var $1112=$1111+316; //@line 4110 "xmlparse.c"
        var $1113=HEAP[$1112]; //@line 4110 "xmlparse.c"
        var $1114=HEAP[$next_addr]; //@line 4110 "xmlparse.c"
        var $1115=$dtd; //@line 4110 "xmlparse.c"
        var $1116=$1115+80; //@line 4110 "xmlparse.c"
        var $1117=$enc_addr; //@line 4110 "xmlparse.c"
        var $1118=$s_addr; //@line 4110 "xmlparse.c"
        var $1119=_poolStoreString($1116, $1117, $1118, $1114); //@line 4110 "xmlparse.c"
        var $1120=$1113+28; //@line 4110 "xmlparse.c"
        HEAP[$1120]=$1119; //@line 4110 "xmlparse.c"
        var $1121=$parser_addr; //@line 4111 "xmlparse.c"
        var $1122=$1121+316; //@line 4111 "xmlparse.c"
        var $1123=HEAP[$1122]; //@line 4111 "xmlparse.c"
        var $1124=$1123+28; //@line 4111 "xmlparse.c"
        var $1125=HEAP[$1124]; //@line 4111 "xmlparse.c"
        var $1126=($1125)==0; //@line 4111 "xmlparse.c"
        if ($1126) { __label__ = 183; break; } else { __label__ = 184; break; } //@line 4111 "xmlparse.c"
      case 183: // $bb201
        $0=1; //@line 4112 "xmlparse.c"
        __label__ = 380; break; //@line 4112 "xmlparse.c"
      case 184: // $bb202
        var $1127=$dtd; //@line 4113 "xmlparse.c"
        var $1128=$1127+80; //@line 4113 "xmlparse.c"
        var $1129=$1128+12; //@line 4113 "xmlparse.c"
        var $1130=HEAP[$1129]; //@line 4113 "xmlparse.c"
        var $1131=$dtd; //@line 4113 "xmlparse.c"
        var $1132=$1131+80; //@line 4113 "xmlparse.c"
        var $1133=$1132+16; //@line 4113 "xmlparse.c"
        HEAP[$1133]=$1130; //@line 4113 "xmlparse.c"
        var $1134=$parser_addr; //@line 4114 "xmlparse.c"
        var $1135=$1134+92; //@line 4114 "xmlparse.c"
        var $1136=HEAP[$1135]; //@line 4114 "xmlparse.c"
        var $1137=($1136)!=0; //@line 4114 "xmlparse.c"
        if ($1137) { __label__ = 185; break; } else { __label__ = 186; break; } //@line 4114 "xmlparse.c"
      case 185: // $bb203
        var $1138=$eventEndPP; //@line 4115 "xmlparse.c"
        var $1139=$s_addr; //@line 4115 "xmlparse.c"
        HEAP[$1138]=$1139; //@line 4115 "xmlparse.c"
        var $1140=$parser_addr; //@line 4116 "xmlparse.c"
        var $1141=$1140+92; //@line 4116 "xmlparse.c"
        var $1142=HEAP[$1141]; //@line 4116 "xmlparse.c"
        var $1143=$parser_addr; //@line 4116 "xmlparse.c"
        var $1144=$1143+316; //@line 4116 "xmlparse.c"
        var $1145=HEAP[$1144]; //@line 4116 "xmlparse.c"
        var $1146=$1145+28; //@line 4116 "xmlparse.c"
        var $1147=HEAP[$1146]; //@line 4116 "xmlparse.c"
        var $1148=$parser_addr; //@line 4116 "xmlparse.c"
        var $1149=$1148+316; //@line 4116 "xmlparse.c"
        var $1150=HEAP[$1149]; //@line 4116 "xmlparse.c"
        var $1151=$1150+24; //@line 4116 "xmlparse.c"
        var $1152=HEAP[$1151]; //@line 4116 "xmlparse.c"
        var $1153=$parser_addr; //@line 4116 "xmlparse.c"
        var $1154=$1153+316; //@line 4116 "xmlparse.c"
        var $1155=HEAP[$1154]; //@line 4116 "xmlparse.c"
        var $1156=$1155+16; //@line 4116 "xmlparse.c"
        var $1157=HEAP[$1156]; //@line 4116 "xmlparse.c"
        var $1158=$parser_addr; //@line 4116 "xmlparse.c"
        var $1159=$1158+316; //@line 4116 "xmlparse.c"
        var $1160=HEAP[$1159]; //@line 4116 "xmlparse.c"
        var $1161=$1160+20; //@line 4116 "xmlparse.c"
        var $1162=HEAP[$1161]; //@line 4116 "xmlparse.c"
        var $1163=$parser_addr; //@line 4116 "xmlparse.c"
        var $1164=$1163+316; //@line 4116 "xmlparse.c"
        var $1165=HEAP[$1164]; //@line 4116 "xmlparse.c"
        var $1166=$1165; //@line 4116 "xmlparse.c"
        var $1167=HEAP[$1166]; //@line 4116 "xmlparse.c"
        var $1168=$parser_addr; //@line 4116 "xmlparse.c"
        var $1169=$1168+4; //@line 4116 "xmlparse.c"
        var $1170=HEAP[$1169]; //@line 4116 "xmlparse.c"
        FUNCTION_TABLE[$1142]($1170, $1167, $1162, $1157, $1152, $1147); //@line 4116 "xmlparse.c"
        $handleDefault=0; //@line 4122 "xmlparse.c"
        __label__ = 376; break; //@line 4122 "xmlparse.c"
      case 186: // $bb204
        var $1171=$parser_addr; //@line 4124 "xmlparse.c"
        var $1172=$1171+136; //@line 4124 "xmlparse.c"
        var $1173=HEAP[$1172]; //@line 4124 "xmlparse.c"
        var $1174=($1173)!=0; //@line 4124 "xmlparse.c"
        if ($1174) { __label__ = 187; break; } else { __label__ = 373; break; } //@line 4124 "xmlparse.c"
      case 187: // $bb205
        var $1175=$eventEndPP; //@line 4125 "xmlparse.c"
        var $1176=$s_addr; //@line 4125 "xmlparse.c"
        HEAP[$1175]=$1176; //@line 4125 "xmlparse.c"
        var $1177=$parser_addr; //@line 4126 "xmlparse.c"
        var $1178=$1177+136; //@line 4126 "xmlparse.c"
        var $1179=HEAP[$1178]; //@line 4126 "xmlparse.c"
        var $1180=$parser_addr; //@line 4126 "xmlparse.c"
        var $1181=$1180+316; //@line 4126 "xmlparse.c"
        var $1182=HEAP[$1181]; //@line 4126 "xmlparse.c"
        var $1183=$1182+28; //@line 4126 "xmlparse.c"
        var $1184=HEAP[$1183]; //@line 4126 "xmlparse.c"
        var $1185=$parser_addr; //@line 4126 "xmlparse.c"
        var $1186=$1185+316; //@line 4126 "xmlparse.c"
        var $1187=HEAP[$1186]; //@line 4126 "xmlparse.c"
        var $1188=$1187+24; //@line 4126 "xmlparse.c"
        var $1189=HEAP[$1188]; //@line 4126 "xmlparse.c"
        var $1190=$parser_addr; //@line 4126 "xmlparse.c"
        var $1191=$1190+316; //@line 4126 "xmlparse.c"
        var $1192=HEAP[$1191]; //@line 4126 "xmlparse.c"
        var $1193=$1192+16; //@line 4126 "xmlparse.c"
        var $1194=HEAP[$1193]; //@line 4126 "xmlparse.c"
        var $1195=$parser_addr; //@line 4126 "xmlparse.c"
        var $1196=$1195+316; //@line 4126 "xmlparse.c"
        var $1197=HEAP[$1196]; //@line 4126 "xmlparse.c"
        var $1198=$1197+20; //@line 4126 "xmlparse.c"
        var $1199=HEAP[$1198]; //@line 4126 "xmlparse.c"
        var $1200=$parser_addr; //@line 4126 "xmlparse.c"
        var $1201=$1200+316; //@line 4126 "xmlparse.c"
        var $1202=HEAP[$1201]; //@line 4126 "xmlparse.c"
        var $1203=$1202; //@line 4126 "xmlparse.c"
        var $1204=HEAP[$1203]; //@line 4126 "xmlparse.c"
        var $1205=$parser_addr; //@line 4126 "xmlparse.c"
        var $1206=$1205+4; //@line 4126 "xmlparse.c"
        var $1207=HEAP[$1206]; //@line 4126 "xmlparse.c"
        FUNCTION_TABLE[$1179]($1207, $1204, 0, 0, 0, $1199, $1194, $1189, $1184); //@line 4126 "xmlparse.c"
        $handleDefault=0; //@line 4133 "xmlparse.c"
        __label__ = 376; break; //@line 4133 "xmlparse.c"
      case 188: // $bb207
        var $1208=$enc_addr; //@line 4139 "xmlparse.c"
        var $1209=$1208+48; //@line 4139 "xmlparse.c"
        var $1210=HEAP[$1209]; //@line 4139 "xmlparse.c"
        var $1211=HEAP[$next_addr]; //@line 4139 "xmlparse.c"
        var $1212=$enc_addr; //@line 4139 "xmlparse.c"
        var $1213=$s_addr; //@line 4139 "xmlparse.c"
        var $1214=FUNCTION_TABLE[$1210]($1212, $1213, $1211); //@line 4139 "xmlparse.c"
        var $1215=($1214)!=0; //@line 4139 "xmlparse.c"
        if ($1215) { __label__ = 189; break; } else { __label__ = 190; break; } //@line 4139 "xmlparse.c"
      case 189: // $bb208
        var $1216=$parser_addr; //@line 4140 "xmlparse.c"
        var $1217=$1216+316; //@line 4140 "xmlparse.c"
        HEAP[$1217]=0; //@line 4140 "xmlparse.c"
        __label__ = 373; break; //@line 4140 "xmlparse.c"
      case 190: // $bb209
        var $1218=$dtd; //@line 4143 "xmlparse.c"
        var $1219=$1218+128; //@line 4143 "xmlparse.c"
        var $1220=HEAP[$1219]; //@line 4143 "xmlparse.c"
        var $1221=($1220)!=0; //@line 4143 "xmlparse.c"
        if ($1221) { __label__ = 191; break; } else { __label__ = 203; break; } //@line 4143 "xmlparse.c"
      case 191: // $bb210
        var $1222=HEAP[$next_addr]; //@line 4144 "xmlparse.c"
        var $1223=$dtd; //@line 4144 "xmlparse.c"
        var $1224=$1223+80; //@line 4144 "xmlparse.c"
        var $1225=$enc_addr; //@line 4144 "xmlparse.c"
        var $1226=$s_addr; //@line 4144 "xmlparse.c"
        var $1227=_poolStoreString($1224, $1225, $1226, $1222); //@line 4144 "xmlparse.c"
        $name=$1227; //@line 4144 "xmlparse.c"
        var $1228=$name; //@line 4145 "xmlparse.c"
        var $1229=($1228)==0; //@line 4145 "xmlparse.c"
        if ($1229) { __label__ = 192; break; } else { __label__ = 193; break; } //@line 4145 "xmlparse.c"
      case 192: // $bb211
        $0=1; //@line 4146 "xmlparse.c"
        __label__ = 380; break; //@line 4146 "xmlparse.c"
      case 193: // $bb212
        var $1230=$dtd; //@line 4147 "xmlparse.c"
        var $1231=$1230; //@line 4147 "xmlparse.c"
        var $1232=$name; //@line 4147 "xmlparse.c"
        var $1233=_lookup($1231, $1232, 36); //@line 4147 "xmlparse.c"
        var $1234=$1233; //@line 4147 "xmlparse.c"
        var $1235=$parser_addr; //@line 4147 "xmlparse.c"
        var $1236=$1235+316; //@line 4147 "xmlparse.c"
        HEAP[$1236]=$1234; //@line 4147 "xmlparse.c"
        var $1237=$parser_addr; //@line 4149 "xmlparse.c"
        var $1238=$1237+316; //@line 4149 "xmlparse.c"
        var $1239=HEAP[$1238]; //@line 4149 "xmlparse.c"
        var $1240=($1239)==0; //@line 4149 "xmlparse.c"
        if ($1240) { __label__ = 194; break; } else { __label__ = 195; break; } //@line 4149 "xmlparse.c"
      case 194: // $bb213
        $0=1; //@line 4150 "xmlparse.c"
        __label__ = 380; break; //@line 4150 "xmlparse.c"
      case 195: // $bb214
        var $1241=$parser_addr; //@line 4151 "xmlparse.c"
        var $1242=$1241+316; //@line 4151 "xmlparse.c"
        var $1243=HEAP[$1242]; //@line 4151 "xmlparse.c"
        var $1244=$1243; //@line 4151 "xmlparse.c"
        var $1245=HEAP[$1244]; //@line 4151 "xmlparse.c"
        var $1246=$name; //@line 4151 "xmlparse.c"
        var $1247=($1245)!=($1246); //@line 4151 "xmlparse.c"
        var $1248=$dtd; //@line 4152 "xmlparse.c"
        var $1249=$1248+80; //@line 4152 "xmlparse.c"
        if ($1247) { __label__ = 196; break; } else { __label__ = 197; break; } //@line 4151 "xmlparse.c"
      case 196: // $bb215
        var $1250=$1249+16; //@line 4152 "xmlparse.c"
        var $1251=HEAP[$1250]; //@line 4152 "xmlparse.c"
        var $1252=$dtd; //@line 4152 "xmlparse.c"
        var $1253=$1252+80; //@line 4152 "xmlparse.c"
        var $1254=$1253+12; //@line 4152 "xmlparse.c"
        HEAP[$1254]=$1251; //@line 4152 "xmlparse.c"
        var $1255=$parser_addr; //@line 4153 "xmlparse.c"
        var $1256=$1255+316; //@line 4153 "xmlparse.c"
        HEAP[$1256]=0; //@line 4153 "xmlparse.c"
        __label__ = 373; break; //@line 4153 "xmlparse.c"
      case 197: // $bb216
        var $1257=$1249+12; //@line 4156 "xmlparse.c"
        var $1258=HEAP[$1257]; //@line 4156 "xmlparse.c"
        var $1259=$dtd; //@line 4156 "xmlparse.c"
        var $1260=$1259+80; //@line 4156 "xmlparse.c"
        var $1261=$1260+16; //@line 4156 "xmlparse.c"
        HEAP[$1261]=$1258; //@line 4156 "xmlparse.c"
        var $1262=$parser_addr; //@line 4157 "xmlparse.c"
        var $1263=$1262+316; //@line 4157 "xmlparse.c"
        var $1264=HEAP[$1263]; //@line 4157 "xmlparse.c"
        var $1265=$1264+24; //@line 4157 "xmlparse.c"
        HEAP[$1265]=0; //@line 4157 "xmlparse.c"
        var $1266=$parser_addr; //@line 4158 "xmlparse.c"
        var $1267=$1266+316; //@line 4158 "xmlparse.c"
        var $1268=HEAP[$1267]; //@line 4158 "xmlparse.c"
        var $1269=$1268+33; //@line 4158 "xmlparse.c"
        HEAP[$1269]=0; //@line 4158 "xmlparse.c"
        var $1270=$parser_addr; //@line 4162 "xmlparse.c"
        var $1271=$1270+316; //@line 4162 "xmlparse.c"
        var $1272=HEAP[$1271]; //@line 4162 "xmlparse.c"
        var $1273=$parser_addr; //@line 4162 "xmlparse.c"
        var $1274=$1273+476; //@line 4162 "xmlparse.c"
        var $1275=HEAP[$1274]; //@line 4162 "xmlparse.c"
        var $1276=($1275)!=0; //@line 4162 "xmlparse.c"
        if ($1276) { __label__ = 200; break; } else { __label__ = 198; break; } //@line 4162 "xmlparse.c"
      case 198: // $bb217
        var $1277=$parser_addr; //@line 4162 "xmlparse.c"
        var $1278=$1277+300; //@line 4162 "xmlparse.c"
        var $1279=HEAP[$1278]; //@line 4162 "xmlparse.c"
        var $1280=($1279)!=0; //@line 4162 "xmlparse.c"
        if ($1280) { __label__ = 200; break; } else { __label__ = 199; break; } //@line 4162 "xmlparse.c"
      case 199: // $bb218
        $iftmp_215=1; //@line 4162 "xmlparse.c"
        __label__ = 201; break; //@line 4162 "xmlparse.c"
      case 200: // $bb219
        $iftmp_215=0; //@line 4162 "xmlparse.c"
        __label__ = 201; break; //@line 4162 "xmlparse.c"
      case 201: // $bb220
        var $1281=$iftmp_215; //@line 4162 "xmlparse.c"
        var $1282=((($1281)) & 255); //@line 4162 "xmlparse.c"
        var $1283=$1272+34; //@line 4162 "xmlparse.c"
        HEAP[$1283]=$1282; //@line 4162 "xmlparse.c"
        var $1284=$parser_addr; //@line 4163 "xmlparse.c"
        var $1285=$1284+136; //@line 4163 "xmlparse.c"
        var $1286=HEAP[$1285]; //@line 4163 "xmlparse.c"
        var $1287=($1286)!=0; //@line 4163 "xmlparse.c"
        if ($1287) { __label__ = 202; break; } else { __label__ = 373; break; } //@line 4163 "xmlparse.c"
      case 202: // $bb221
        $handleDefault=0; //@line 4164 "xmlparse.c"
        __label__ = 376; break; //@line 4164 "xmlparse.c"
      case 203: // $bb223
        var $1288=$dtd; //@line 4168 "xmlparse.c"
        var $1289=$1288+80; //@line 4168 "xmlparse.c"
        var $1290=$1289+16; //@line 4168 "xmlparse.c"
        var $1291=HEAP[$1290]; //@line 4168 "xmlparse.c"
        var $1292=$dtd; //@line 4168 "xmlparse.c"
        var $1293=$1292+80; //@line 4168 "xmlparse.c"
        var $1294=$1293+12; //@line 4168 "xmlparse.c"
        HEAP[$1294]=$1291; //@line 4168 "xmlparse.c"
        var $1295=$parser_addr; //@line 4169 "xmlparse.c"
        var $1296=$1295+316; //@line 4169 "xmlparse.c"
        HEAP[$1296]=0; //@line 4169 "xmlparse.c"
        __label__ = 373; break; //@line 4169 "xmlparse.c"
      case 204: // $bb225
        var $1297=$dtd; //@line 4175 "xmlparse.c"
        var $1298=$1297+128; //@line 4175 "xmlparse.c"
        var $1299=HEAP[$1298]; //@line 4175 "xmlparse.c"
        var $1300=($1299)!=0; //@line 4175 "xmlparse.c"
        if ($1300) { __label__ = 205; break; } else { __label__ = 217; break; } //@line 4175 "xmlparse.c"
      case 205: // $bb226
        var $1301=HEAP[$next_addr]; //@line 4176 "xmlparse.c"
        var $1302=$dtd; //@line 4176 "xmlparse.c"
        var $1303=$1302+80; //@line 4176 "xmlparse.c"
        var $1304=$enc_addr; //@line 4176 "xmlparse.c"
        var $1305=$s_addr; //@line 4176 "xmlparse.c"
        var $1306=_poolStoreString($1303, $1304, $1305, $1301); //@line 4176 "xmlparse.c"
        $name227=$1306; //@line 4176 "xmlparse.c"
        var $1307=$name227; //@line 4177 "xmlparse.c"
        var $1308=($1307)==0; //@line 4177 "xmlparse.c"
        if ($1308) { __label__ = 206; break; } else { __label__ = 207; break; } //@line 4177 "xmlparse.c"
      case 206: // $bb228
        $0=1; //@line 4178 "xmlparse.c"
        __label__ = 380; break; //@line 4178 "xmlparse.c"
      case 207: // $bb229
        var $1309=$dtd; //@line 4179 "xmlparse.c"
        var $1310=$1309+132; //@line 4179 "xmlparse.c"
        var $1311=$name227; //@line 4179 "xmlparse.c"
        var $1312=_lookup($1310, $1311, 36); //@line 4179 "xmlparse.c"
        var $1313=$1312; //@line 4179 "xmlparse.c"
        var $1314=$parser_addr; //@line 4179 "xmlparse.c"
        var $1315=$1314+316; //@line 4179 "xmlparse.c"
        HEAP[$1315]=$1313; //@line 4179 "xmlparse.c"
        var $1316=$parser_addr; //@line 4181 "xmlparse.c"
        var $1317=$1316+316; //@line 4181 "xmlparse.c"
        var $1318=HEAP[$1317]; //@line 4181 "xmlparse.c"
        var $1319=($1318)==0; //@line 4181 "xmlparse.c"
        if ($1319) { __label__ = 208; break; } else { __label__ = 209; break; } //@line 4181 "xmlparse.c"
      case 208: // $bb230
        $0=1; //@line 4182 "xmlparse.c"
        __label__ = 380; break; //@line 4182 "xmlparse.c"
      case 209: // $bb231
        var $1320=$parser_addr; //@line 4183 "xmlparse.c"
        var $1321=$1320+316; //@line 4183 "xmlparse.c"
        var $1322=HEAP[$1321]; //@line 4183 "xmlparse.c"
        var $1323=$1322; //@line 4183 "xmlparse.c"
        var $1324=HEAP[$1323]; //@line 4183 "xmlparse.c"
        var $1325=$name227; //@line 4183 "xmlparse.c"
        var $1326=($1324)!=($1325); //@line 4183 "xmlparse.c"
        var $1327=$dtd; //@line 4184 "xmlparse.c"
        var $1328=$1327+80; //@line 4184 "xmlparse.c"
        if ($1326) { __label__ = 210; break; } else { __label__ = 211; break; } //@line 4183 "xmlparse.c"
      case 210: // $bb232
        var $1329=$1328+16; //@line 4184 "xmlparse.c"
        var $1330=HEAP[$1329]; //@line 4184 "xmlparse.c"
        var $1331=$dtd; //@line 4184 "xmlparse.c"
        var $1332=$1331+80; //@line 4184 "xmlparse.c"
        var $1333=$1332+12; //@line 4184 "xmlparse.c"
        HEAP[$1333]=$1330; //@line 4184 "xmlparse.c"
        var $1334=$parser_addr; //@line 4185 "xmlparse.c"
        var $1335=$1334+316; //@line 4185 "xmlparse.c"
        HEAP[$1335]=0; //@line 4185 "xmlparse.c"
        __label__ = 373; break; //@line 4185 "xmlparse.c"
      case 211: // $bb233
        var $1336=$1328+12; //@line 4188 "xmlparse.c"
        var $1337=HEAP[$1336]; //@line 4188 "xmlparse.c"
        var $1338=$dtd; //@line 4188 "xmlparse.c"
        var $1339=$1338+80; //@line 4188 "xmlparse.c"
        var $1340=$1339+16; //@line 4188 "xmlparse.c"
        HEAP[$1340]=$1337; //@line 4188 "xmlparse.c"
        var $1341=$parser_addr; //@line 4189 "xmlparse.c"
        var $1342=$1341+316; //@line 4189 "xmlparse.c"
        var $1343=HEAP[$1342]; //@line 4189 "xmlparse.c"
        var $1344=$1343+24; //@line 4189 "xmlparse.c"
        HEAP[$1344]=0; //@line 4189 "xmlparse.c"
        var $1345=$parser_addr; //@line 4190 "xmlparse.c"
        var $1346=$1345+316; //@line 4190 "xmlparse.c"
        var $1347=HEAP[$1346]; //@line 4190 "xmlparse.c"
        var $1348=$1347+33; //@line 4190 "xmlparse.c"
        HEAP[$1348]=1; //@line 4190 "xmlparse.c"
        var $1349=$parser_addr; //@line 4194 "xmlparse.c"
        var $1350=$1349+316; //@line 4194 "xmlparse.c"
        var $1351=HEAP[$1350]; //@line 4194 "xmlparse.c"
        var $1352=$parser_addr; //@line 4194 "xmlparse.c"
        var $1353=$1352+476; //@line 4194 "xmlparse.c"
        var $1354=HEAP[$1353]; //@line 4194 "xmlparse.c"
        var $1355=($1354)!=0; //@line 4194 "xmlparse.c"
        if ($1355) { __label__ = 214; break; } else { __label__ = 212; break; } //@line 4194 "xmlparse.c"
      case 212: // $bb234
        var $1356=$parser_addr; //@line 4194 "xmlparse.c"
        var $1357=$1356+300; //@line 4194 "xmlparse.c"
        var $1358=HEAP[$1357]; //@line 4194 "xmlparse.c"
        var $1359=($1358)!=0; //@line 4194 "xmlparse.c"
        if ($1359) { __label__ = 214; break; } else { __label__ = 213; break; } //@line 4194 "xmlparse.c"
      case 213: // $bb235
        $iftmp_217=1; //@line 4194 "xmlparse.c"
        __label__ = 215; break; //@line 4194 "xmlparse.c"
      case 214: // $bb236
        $iftmp_217=0; //@line 4194 "xmlparse.c"
        __label__ = 215; break; //@line 4194 "xmlparse.c"
      case 215: // $bb237
        var $1360=$iftmp_217; //@line 4194 "xmlparse.c"
        var $1361=((($1360)) & 255); //@line 4194 "xmlparse.c"
        var $1362=$1351+34; //@line 4194 "xmlparse.c"
        HEAP[$1362]=$1361; //@line 4194 "xmlparse.c"
        var $1363=$parser_addr; //@line 4195 "xmlparse.c"
        var $1364=$1363+136; //@line 4195 "xmlparse.c"
        var $1365=HEAP[$1364]; //@line 4195 "xmlparse.c"
        var $1366=($1365)!=0; //@line 4195 "xmlparse.c"
        if ($1366) { __label__ = 216; break; } else { __label__ = 373; break; } //@line 4195 "xmlparse.c"
      case 216: // $bb238
        $handleDefault=0; //@line 4196 "xmlparse.c"
        __label__ = 376; break; //@line 4196 "xmlparse.c"
      case 217: // $bb240
        var $1367=$dtd; //@line 4200 "xmlparse.c"
        var $1368=$1367+80; //@line 4200 "xmlparse.c"
        var $1369=$1368+16; //@line 4200 "xmlparse.c"
        var $1370=HEAP[$1369]; //@line 4200 "xmlparse.c"
        var $1371=$dtd; //@line 4200 "xmlparse.c"
        var $1372=$1371+80; //@line 4200 "xmlparse.c"
        var $1373=$1372+12; //@line 4200 "xmlparse.c"
        HEAP[$1373]=$1370; //@line 4200 "xmlparse.c"
        var $1374=$parser_addr; //@line 4201 "xmlparse.c"
        var $1375=$1374+316; //@line 4201 "xmlparse.c"
        HEAP[$1375]=0; //@line 4201 "xmlparse.c"
        __label__ = 373; break; //@line 4201 "xmlparse.c"
      case 218: // $bb242
        var $1376=$parser_addr; //@line 4208 "xmlparse.c"
        var $1377=$1376+340; //@line 4208 "xmlparse.c"
        HEAP[$1377]=0; //@line 4208 "xmlparse.c"
        var $1378=$parser_addr; //@line 4209 "xmlparse.c"
        var $1379=$1378+336; //@line 4209 "xmlparse.c"
        HEAP[$1379]=0; //@line 4209 "xmlparse.c"
        var $1380=$parser_addr; //@line 4210 "xmlparse.c"
        var $1381=$1380+96; //@line 4210 "xmlparse.c"
        var $1382=HEAP[$1381]; //@line 4210 "xmlparse.c"
        var $1383=($1382)!=0; //@line 4210 "xmlparse.c"
        if ($1383) { __label__ = 219; break; } else { __label__ = 373; break; } //@line 4210 "xmlparse.c"
      case 219: // $bb243
        var $1384=HEAP[$next_addr]; //@line 4211 "xmlparse.c"
        var $1385=$parser_addr; //@line 4211 "xmlparse.c"
        var $1386=$1385+416; //@line 4211 "xmlparse.c"
        var $1387=$enc_addr; //@line 4211 "xmlparse.c"
        var $1388=$s_addr; //@line 4211 "xmlparse.c"
        var $1389=_poolStoreString($1386, $1387, $1388, $1384); //@line 4211 "xmlparse.c"
        var $1390=$parser_addr; //@line 4211 "xmlparse.c"
        var $1391=$1390+336; //@line 4211 "xmlparse.c"
        HEAP[$1391]=$1389; //@line 4211 "xmlparse.c"
        var $1392=$parser_addr; //@line 4212 "xmlparse.c"
        var $1393=$1392+336; //@line 4212 "xmlparse.c"
        var $1394=HEAP[$1393]; //@line 4212 "xmlparse.c"
        var $1395=($1394)==0; //@line 4212 "xmlparse.c"
        if ($1395) { __label__ = 220; break; } else { __label__ = 221; break; } //@line 4212 "xmlparse.c"
      case 220: // $bb244
        $0=1; //@line 4213 "xmlparse.c"
        __label__ = 380; break; //@line 4213 "xmlparse.c"
      case 221: // $bb245
        var $1396=$parser_addr; //@line 4214 "xmlparse.c"
        var $1397=$1396+416; //@line 4214 "xmlparse.c"
        var $1398=$1397+12; //@line 4214 "xmlparse.c"
        var $1399=HEAP[$1398]; //@line 4214 "xmlparse.c"
        var $1400=$parser_addr; //@line 4214 "xmlparse.c"
        var $1401=$1400+416; //@line 4214 "xmlparse.c"
        var $1402=$1401+16; //@line 4214 "xmlparse.c"
        HEAP[$1402]=$1399; //@line 4214 "xmlparse.c"
        $handleDefault=0; //@line 4215 "xmlparse.c"
        __label__ = 376; break; //@line 4215 "xmlparse.c"
      case 222: // $bb247
        var $1403=$enc_addr; //@line 4219 "xmlparse.c"
        var $1404=$1403+56; //@line 4219 "xmlparse.c"
        var $1405=HEAP[$1404]; //@line 4219 "xmlparse.c"
        var $1406=HEAP[$next_addr]; //@line 4219 "xmlparse.c"
        var $1407=$enc_addr; //@line 4219 "xmlparse.c"
        var $1408=$s_addr; //@line 4219 "xmlparse.c"
        var $1409=$eventPP; //@line 4219 "xmlparse.c"
        var $1410=FUNCTION_TABLE[$1405]($1407, $1408, $1406, $1409); //@line 4219 "xmlparse.c"
        var $1411=($1410)==0; //@line 4219 "xmlparse.c"
        if ($1411) { __label__ = 223; break; } else { __label__ = 224; break; } //@line 4219 "xmlparse.c"
      case 223: // $bb248
        $0=32; //@line 4220 "xmlparse.c"
        __label__ = 380; break; //@line 4220 "xmlparse.c"
      case 224: // $bb249
        var $1412=$parser_addr; //@line 4221 "xmlparse.c"
        var $1413=$1412+336; //@line 4221 "xmlparse.c"
        var $1414=HEAP[$1413]; //@line 4221 "xmlparse.c"
        var $1415=($1414)!=0; //@line 4221 "xmlparse.c"
        if ($1415) { __label__ = 225; break; } else { __label__ = 373; break; } //@line 4221 "xmlparse.c"
      case 225: // $bb250
        var $1416=HEAP[$next_addr]; //@line 4225 "xmlparse.c"
        var $1417=$enc_addr; //@line 4225 "xmlparse.c"
        var $1418=$1417+68; //@line 4225 "xmlparse.c"
        var $1419=HEAP[$1418]; //@line 4225 "xmlparse.c"
        var $1420=0 - ($1419); //@line 4225 "xmlparse.c"
        var $1421=$1416+$1420; //@line 4225 "xmlparse.c"
        var $1422=$enc_addr; //@line 4225 "xmlparse.c"
        var $1423=$1422+68; //@line 4225 "xmlparse.c"
        var $1424=HEAP[$1423]; //@line 4225 "xmlparse.c"
        var $1425=$s_addr; //@line 4225 "xmlparse.c"
        var $1426=$1425+$1424; //@line 4225 "xmlparse.c"
        var $1427=$parser_addr; //@line 4225 "xmlparse.c"
        var $1428=$1427+416; //@line 4225 "xmlparse.c"
        var $1429=$enc_addr; //@line 4225 "xmlparse.c"
        var $1430=_poolStoreString($1428, $1429, $1426, $1421); //@line 4225 "xmlparse.c"
        $tem251=$1430; //@line 4225 "xmlparse.c"
        var $1431=$tem251; //@line 4226 "xmlparse.c"
        var $1432=($1431)==0; //@line 4226 "xmlparse.c"
        if ($1432) { __label__ = 226; break; } else { __label__ = 227; break; } //@line 4226 "xmlparse.c"
      case 226: // $bb252
        $0=1; //@line 4227 "xmlparse.c"
        __label__ = 380; break; //@line 4227 "xmlparse.c"
      case 227: // $bb253
        var $1433=$tem251; //@line 4228 "xmlparse.c"
        _normalizePublicId($1433); //@line 4228 "xmlparse.c"
        var $1434=$parser_addr; //@line 4229 "xmlparse.c"
        var $1435=$1434+340; //@line 4229 "xmlparse.c"
        var $1436=$tem251; //@line 4229 "xmlparse.c"
        HEAP[$1435]=$1436; //@line 4229 "xmlparse.c"
        var $1437=$parser_addr; //@line 4230 "xmlparse.c"
        var $1438=$1437+416; //@line 4230 "xmlparse.c"
        var $1439=$1438+12; //@line 4230 "xmlparse.c"
        var $1440=HEAP[$1439]; //@line 4230 "xmlparse.c"
        var $1441=$parser_addr; //@line 4230 "xmlparse.c"
        var $1442=$1441+416; //@line 4230 "xmlparse.c"
        var $1443=$1442+16; //@line 4230 "xmlparse.c"
        HEAP[$1443]=$1440; //@line 4230 "xmlparse.c"
        $handleDefault=0; //@line 4231 "xmlparse.c"
        __label__ = 376; break; //@line 4231 "xmlparse.c"
      case 228: // $bb255
        var $1444=$parser_addr; //@line 4235 "xmlparse.c"
        var $1445=$1444+336; //@line 4235 "xmlparse.c"
        var $1446=HEAP[$1445]; //@line 4235 "xmlparse.c"
        var $1447=($1446)!=0; //@line 4235 "xmlparse.c"
        if ($1447) { __label__ = 229; break; } else { __label__ = 233; break; } //@line 4235 "xmlparse.c"
      case 229: // $bb256
        var $1448=$parser_addr; //@line 4235 "xmlparse.c"
        var $1449=$1448+96; //@line 4235 "xmlparse.c"
        var $1450=HEAP[$1449]; //@line 4235 "xmlparse.c"
        var $1451=($1450)!=0; //@line 4235 "xmlparse.c"
        if ($1451) { __label__ = 230; break; } else { __label__ = 233; break; } //@line 4235 "xmlparse.c"
      case 230: // $bb257
        var $1452=HEAP[$next_addr]; //@line 4239 "xmlparse.c"
        var $1453=$enc_addr; //@line 4239 "xmlparse.c"
        var $1454=$1453+68; //@line 4239 "xmlparse.c"
        var $1455=HEAP[$1454]; //@line 4239 "xmlparse.c"
        var $1456=0 - ($1455); //@line 4239 "xmlparse.c"
        var $1457=$1452+$1456; //@line 4239 "xmlparse.c"
        var $1458=$enc_addr; //@line 4239 "xmlparse.c"
        var $1459=$1458+68; //@line 4239 "xmlparse.c"
        var $1460=HEAP[$1459]; //@line 4239 "xmlparse.c"
        var $1461=$s_addr; //@line 4239 "xmlparse.c"
        var $1462=$1461+$1460; //@line 4239 "xmlparse.c"
        var $1463=$parser_addr; //@line 4239 "xmlparse.c"
        var $1464=$1463+416; //@line 4239 "xmlparse.c"
        var $1465=$enc_addr; //@line 4239 "xmlparse.c"
        var $1466=_poolStoreString($1464, $1465, $1462, $1457); //@line 4239 "xmlparse.c"
        $systemId=$1466; //@line 4239 "xmlparse.c"
        var $1467=$systemId; //@line 4240 "xmlparse.c"
        var $1468=($1467)==0; //@line 4240 "xmlparse.c"
        if ($1468) { __label__ = 231; break; } else { __label__ = 232; break; } //@line 4240 "xmlparse.c"
      case 231: // $bb258
        $0=1; //@line 4241 "xmlparse.c"
        __label__ = 380; break; //@line 4241 "xmlparse.c"
      case 232: // $bb259
        var $1469=$eventEndPP; //@line 4242 "xmlparse.c"
        var $1470=$s_addr; //@line 4242 "xmlparse.c"
        HEAP[$1469]=$1470; //@line 4242 "xmlparse.c"
        var $1471=$parser_addr; //@line 4243 "xmlparse.c"
        var $1472=$1471+96; //@line 4243 "xmlparse.c"
        var $1473=HEAP[$1472]; //@line 4243 "xmlparse.c"
        var $1474=$parser_addr; //@line 4243 "xmlparse.c"
        var $1475=$1474+340; //@line 4243 "xmlparse.c"
        var $1476=HEAP[$1475]; //@line 4243 "xmlparse.c"
        var $1477=$parser_addr; //@line 4243 "xmlparse.c"
        var $1478=$1477+360; //@line 4243 "xmlparse.c"
        var $1479=HEAP[$1478]; //@line 4243 "xmlparse.c"
        var $1480=$parser_addr; //@line 4243 "xmlparse.c"
        var $1481=$1480+336; //@line 4243 "xmlparse.c"
        var $1482=HEAP[$1481]; //@line 4243 "xmlparse.c"
        var $1483=$parser_addr; //@line 4243 "xmlparse.c"
        var $1484=$1483+4; //@line 4243 "xmlparse.c"
        var $1485=HEAP[$1484]; //@line 4243 "xmlparse.c"
        var $1486=$systemId; //@line 4243 "xmlparse.c"
        FUNCTION_TABLE[$1473]($1485, $1482, $1479, $1486, $1476); //@line 4243 "xmlparse.c"
        $handleDefault=0; //@line 4248 "xmlparse.c"
        __label__ = 233; break; //@line 4248 "xmlparse.c"
      case 233: // $bb260
        var $1487=$parser_addr; //@line 4250 "xmlparse.c"
        var $1488=$1487+416; //@line 4250 "xmlparse.c"
        _poolClear($1488); //@line 4250 "xmlparse.c"
        __label__ = 373; break; //@line 4250 "xmlparse.c"
      case 234: // $bb261
        var $1489=$parser_addr; //@line 4253 "xmlparse.c"
        var $1490=$1489+340; //@line 4253 "xmlparse.c"
        var $1491=HEAP[$1490]; //@line 4253 "xmlparse.c"
        var $1492=($1491)!=0; //@line 4253 "xmlparse.c"
        if ($1492) { __label__ = 235; break; } else { __label__ = 237; break; } //@line 4253 "xmlparse.c"
      case 235: // $bb262
        var $1493=$parser_addr; //@line 4253 "xmlparse.c"
        var $1494=$1493+96; //@line 4253 "xmlparse.c"
        var $1495=HEAP[$1494]; //@line 4253 "xmlparse.c"
        var $1496=($1495)!=0; //@line 4253 "xmlparse.c"
        if ($1496) { __label__ = 236; break; } else { __label__ = 237; break; } //@line 4253 "xmlparse.c"
      case 236: // $bb263
        var $1497=$eventEndPP; //@line 4254 "xmlparse.c"
        var $1498=$s_addr; //@line 4254 "xmlparse.c"
        HEAP[$1497]=$1498; //@line 4254 "xmlparse.c"
        var $1499=$parser_addr; //@line 4255 "xmlparse.c"
        var $1500=$1499+96; //@line 4255 "xmlparse.c"
        var $1501=HEAP[$1500]; //@line 4255 "xmlparse.c"
        var $1502=$parser_addr; //@line 4255 "xmlparse.c"
        var $1503=$1502+340; //@line 4255 "xmlparse.c"
        var $1504=HEAP[$1503]; //@line 4255 "xmlparse.c"
        var $1505=$parser_addr; //@line 4255 "xmlparse.c"
        var $1506=$1505+360; //@line 4255 "xmlparse.c"
        var $1507=HEAP[$1506]; //@line 4255 "xmlparse.c"
        var $1508=$parser_addr; //@line 4255 "xmlparse.c"
        var $1509=$1508+336; //@line 4255 "xmlparse.c"
        var $1510=HEAP[$1509]; //@line 4255 "xmlparse.c"
        var $1511=$parser_addr; //@line 4255 "xmlparse.c"
        var $1512=$1511+4; //@line 4255 "xmlparse.c"
        var $1513=HEAP[$1512]; //@line 4255 "xmlparse.c"
        FUNCTION_TABLE[$1501]($1513, $1510, $1507, 0, $1504); //@line 4255 "xmlparse.c"
        $handleDefault=0; //@line 4260 "xmlparse.c"
        __label__ = 237; break; //@line 4260 "xmlparse.c"
      case 237: // $bb264
        var $1514=$parser_addr; //@line 4262 "xmlparse.c"
        var $1515=$1514+416; //@line 4262 "xmlparse.c"
        _poolClear($1515); //@line 4262 "xmlparse.c"
        __label__ = 373; break; //@line 4262 "xmlparse.c"
      case 238: // $bb265
        var $1516=$tok_addr; //@line 4265 "xmlparse.c"
        if ($1516 == 12) {
          __label__ = 240; break;
        }
        else if ($1516 == 28) {
          __label__ = 239; break;
        }
        else {
        __label__ = 241; break;
        }
        
      case 239: // $bb266
        $0=10; //@line 4269 "xmlparse.c"
        __label__ = 380; break; //@line 4269 "xmlparse.c"
      case 240: // $bb267
        $0=17; //@line 4271 "xmlparse.c"
        __label__ = 380; break; //@line 4271 "xmlparse.c"
      case 241: // $bb268
        $0=2; //@line 4273 "xmlparse.c"
        __label__ = 380; break; //@line 4273 "xmlparse.c"
      case 242: // $bb269
        var $1517=$parser_addr; //@line 4279 "xmlparse.c"
        var $1518=$1517+80; //@line 4279 "xmlparse.c"
        var $1519=HEAP[$1518]; //@line 4279 "xmlparse.c"
        var $1520=($1519)!=0; //@line 4279 "xmlparse.c"
        if ($1520) { __label__ = 243; break; } else { __label__ = 244; break; } //@line 4279 "xmlparse.c"
      case 243: // $bb271
        var $1521=HEAP[$next_addr]; //@line 4280 "xmlparse.c"
        var $1522=$parser_addr; //@line 4280 "xmlparse.c"
        var $1523=$enc_addr; //@line 4280 "xmlparse.c"
        var $1524=$s_addr; //@line 4280 "xmlparse.c"
        _reportDefault($1522, $1523, $1524, $1521); //@line 4280 "xmlparse.c"
        __label__ = 244; break; //@line 4280 "xmlparse.c"
      case 244: // $bb272
        $handleDefault=0; //@line 4281 "xmlparse.c"
        var $1525=$haveMore_addr; //@line 4282 "xmlparse.c"
        var $1526=($1525); //@line 4282 "xmlparse.c"
        var $1527=$parser_addr; //@line 4282 "xmlparse.c"
        var $1528=$enc_addr; //@line 4282 "xmlparse.c"
        var $1529=$end_addr; //@line 4282 "xmlparse.c"
        var $1530=$nextPtr_addr; //@line 4282 "xmlparse.c"
        var $1531=((($1526)) & 255); //@line 4282 "xmlparse.c"
        var $1532=_doIgnoreSection($1527, $1528, $next_addr, $1529, $1530, $1531); //@line 4282 "xmlparse.c"
        $result270=$1532; //@line 4282 "xmlparse.c"
        var $1533=($1532)!=0; //@line 4283 "xmlparse.c"
        if ($1533) { __label__ = 245; break; } else { __label__ = 246; break; } //@line 4283 "xmlparse.c"
      case 245: // $bb273
        var $1534=$result270; //@line 4284 "xmlparse.c"
        $0=$1534; //@line 4284 "xmlparse.c"
        __label__ = 380; break; //@line 4284 "xmlparse.c"
      case 246: // $bb274
        var $1535=HEAP[$next_addr]; //@line 4285 "xmlparse.c"
        var $1536=($1535)==0; //@line 4285 "xmlparse.c"
        if ($1536) { __label__ = 247; break; } else { __label__ = 373; break; } //@line 4285 "xmlparse.c"
      case 247: // $bb275
        var $1537=$parser_addr; //@line 4286 "xmlparse.c"
        var $1538=$1537+280; //@line 4286 "xmlparse.c"
        HEAP[$1538]=(FUNCTION_TABLE_OFFSET + 86); //@line 4286 "xmlparse.c"
        var $1539=$result270; //@line 4287 "xmlparse.c"
        $0=$1539; //@line 4287 "xmlparse.c"
        __label__ = 380; break; //@line 4287 "xmlparse.c"
      case 248: // $bb277
        var $1540=$parser_addr; //@line 4293 "xmlparse.c"
        var $1541=$1540+256; //@line 4293 "xmlparse.c"
        var $1542=$1541+4; //@line 4293 "xmlparse.c"
        var $1543=HEAP[$1542]; //@line 4293 "xmlparse.c"
        var $1544=$parser_addr; //@line 4293 "xmlparse.c"
        var $1545=$1544+468; //@line 4293 "xmlparse.c"
        var $1546=HEAP[$1545]; //@line 4293 "xmlparse.c"
        var $1547=($1543) >= ($1546); //@line 4293 "xmlparse.c"
        if ($1547) { __label__ = 249; break; } else { __label__ = 258; break; } //@line 4293 "xmlparse.c"
      case 249: // $bb278
        var $1548=$parser_addr; //@line 4294 "xmlparse.c"
        var $1549=$1548+468; //@line 4294 "xmlparse.c"
        var $1550=HEAP[$1549]; //@line 4294 "xmlparse.c"
        var $1551=($1550)!=0; //@line 4294 "xmlparse.c"
        var $1552=$parser_addr; //@line 4295 "xmlparse.c"
        var $1553=$1552+12; //@line 4295 "xmlparse.c"
        if ($1551) { __label__ = 250; break; } else { __label__ = 256; break; } //@line 4294 "xmlparse.c"
      case 250: // $bb279
        var $1554=$1553+4; //@line 4295 "xmlparse.c"
        var $1555=HEAP[$1554]; //@line 4295 "xmlparse.c"
        var $1556=$parser_addr; //@line 4295 "xmlparse.c"
        var $1557=$1556+468; //@line 4295 "xmlparse.c"
        var $1558=HEAP[$1557]; //@line 4295 "xmlparse.c"
        var $1559=($1558) * 2; //@line 4295 "xmlparse.c"
        var $1560=$parser_addr; //@line 4295 "xmlparse.c"
        var $1561=$1560+468; //@line 4295 "xmlparse.c"
        HEAP[$1561]=$1559; //@line 4295 "xmlparse.c"
        var $1562=$parser_addr; //@line 4295 "xmlparse.c"
        var $1563=$1562+468; //@line 4295 "xmlparse.c"
        var $1564=HEAP[$1563]; //@line 4295 "xmlparse.c"
        var $1565=$parser_addr; //@line 4295 "xmlparse.c"
        var $1566=$1565+464; //@line 4295 "xmlparse.c"
        var $1567=HEAP[$1566]; //@line 4295 "xmlparse.c"
        var $1568=FUNCTION_TABLE[$1555]($1567, $1564); //@line 4295 "xmlparse.c"
        $temp=$1568; //@line 4295 "xmlparse.c"
        var $1569=$temp; //@line 4296 "xmlparse.c"
        var $1570=($1569)==0; //@line 4296 "xmlparse.c"
        if ($1570) { __label__ = 251; break; } else { __label__ = 252; break; } //@line 4296 "xmlparse.c"
      case 251: // $bb280
        $0=1; //@line 4297 "xmlparse.c"
        __label__ = 380; break; //@line 4297 "xmlparse.c"
      case 252: // $bb281
        var $1571=$parser_addr; //@line 4298 "xmlparse.c"
        var $1572=$1571+464; //@line 4298 "xmlparse.c"
        var $1573=$temp; //@line 4298 "xmlparse.c"
        HEAP[$1572]=$1573; //@line 4298 "xmlparse.c"
        var $1574=$dtd; //@line 4299 "xmlparse.c"
        var $1575=$1574+184; //@line 4299 "xmlparse.c"
        var $1576=HEAP[$1575]; //@line 4299 "xmlparse.c"
        var $1577=($1576)!=0; //@line 4299 "xmlparse.c"
        if ($1577) { __label__ = 253; break; } else { __label__ = 258; break; } //@line 4299 "xmlparse.c"
      case 253: // $bb282
        var $1578=$parser_addr; //@line 4300 "xmlparse.c"
        var $1579=$1578+12; //@line 4300 "xmlparse.c"
        var $1580=$1579+4; //@line 4300 "xmlparse.c"
        var $1581=HEAP[$1580]; //@line 4300 "xmlparse.c"
        var $1582=$parser_addr; //@line 4300 "xmlparse.c"
        var $1583=$1582+468; //@line 4300 "xmlparse.c"
        var $1584=HEAP[$1583]; //@line 4300 "xmlparse.c"
        var $1585=($1584) * 4; //@line 4300 "xmlparse.c"
        var $1586=$dtd; //@line 4300 "xmlparse.c"
        var $1587=$1586+184; //@line 4300 "xmlparse.c"
        var $1588=HEAP[$1587]; //@line 4300 "xmlparse.c"
        var $1589=$1588; //@line 4300 "xmlparse.c"
        var $1590=FUNCTION_TABLE[$1581]($1589, $1585); //@line 4300 "xmlparse.c"
        var $1591=$1590; //@line 4300 "xmlparse.c"
        $temp283=$1591; //@line 4300 "xmlparse.c"
        var $1592=$temp283; //@line 4302 "xmlparse.c"
        var $1593=($1592)==0; //@line 4302 "xmlparse.c"
        if ($1593) { __label__ = 254; break; } else { __label__ = 255; break; } //@line 4302 "xmlparse.c"
      case 254: // $bb284
        $0=1; //@line 4303 "xmlparse.c"
        __label__ = 380; break; //@line 4303 "xmlparse.c"
      case 255: // $bb285
        var $1594=$dtd; //@line 4304 "xmlparse.c"
        var $1595=$1594+184; //@line 4304 "xmlparse.c"
        var $1596=$temp283; //@line 4304 "xmlparse.c"
        HEAP[$1595]=$1596; //@line 4304 "xmlparse.c"
        __label__ = 258; break; //@line 4304 "xmlparse.c"
      case 256: // $bb287
        var $1597=$1553; //@line 4308 "xmlparse.c"
        var $1598=HEAP[$1597]; //@line 4308 "xmlparse.c"
        var $1599=$parser_addr; //@line 4308 "xmlparse.c"
        var $1600=$1599+468; //@line 4308 "xmlparse.c"
        HEAP[$1600]=32; //@line 4308 "xmlparse.c"
        var $1601=$parser_addr; //@line 4308 "xmlparse.c"
        var $1602=$1601+468; //@line 4308 "xmlparse.c"
        var $1603=HEAP[$1602]; //@line 4308 "xmlparse.c"
        var $1604=FUNCTION_TABLE[$1598]($1603); //@line 4308 "xmlparse.c"
        var $1605=$parser_addr; //@line 4308 "xmlparse.c"
        var $1606=$1605+464; //@line 4308 "xmlparse.c"
        HEAP[$1606]=$1604; //@line 4308 "xmlparse.c"
        var $1607=$parser_addr; //@line 4309 "xmlparse.c"
        var $1608=$1607+464; //@line 4309 "xmlparse.c"
        var $1609=HEAP[$1608]; //@line 4309 "xmlparse.c"
        var $1610=($1609)==0; //@line 4309 "xmlparse.c"
        if ($1610) { __label__ = 257; break; } else { __label__ = 258; break; } //@line 4309 "xmlparse.c"
      case 257: // $bb288
        $0=1; //@line 4310 "xmlparse.c"
        __label__ = 380; break; //@line 4310 "xmlparse.c"
      case 258: // $bb289
        var $1611=$parser_addr; //@line 4313 "xmlparse.c"
        var $1612=$1611+464; //@line 4313 "xmlparse.c"
        var $1613=HEAP[$1612]; //@line 4313 "xmlparse.c"
        var $1614=$parser_addr; //@line 4313 "xmlparse.c"
        var $1615=$1614+256; //@line 4313 "xmlparse.c"
        var $1616=$1615+4; //@line 4313 "xmlparse.c"
        var $1617=HEAP[$1616]; //@line 4313 "xmlparse.c"
        var $1618=$1613+$1617; //@line 4313 "xmlparse.c"
        HEAP[$1618]=0; //@line 4313 "xmlparse.c"
        var $1619=$dtd; //@line 4314 "xmlparse.c"
        var $1620=$1619+160; //@line 4314 "xmlparse.c"
        var $1621=HEAP[$1620]; //@line 4314 "xmlparse.c"
        var $1622=($1621)!=0; //@line 4314 "xmlparse.c"
        if ($1622) { __label__ = 259; break; } else { __label__ = 373; break; } //@line 4314 "xmlparse.c"
      case 259: // $bb290
        var $1623=$parser_addr; //@line 4315 "xmlparse.c"
        var $1624=_nextScaffoldPart($1623); //@line 4315 "xmlparse.c"
        $myindex=$1624; //@line 4315 "xmlparse.c"
        var $1625=$myindex; //@line 4316 "xmlparse.c"
        var $1626=($1625) < 0; //@line 4316 "xmlparse.c"
        if ($1626) { __label__ = 260; break; } else { __label__ = 261; break; } //@line 4316 "xmlparse.c"
      case 260: // $bb291
        $0=1; //@line 4317 "xmlparse.c"
        __label__ = 380; break; //@line 4317 "xmlparse.c"
      case 261: // $bb292
        var $1627=$dtd; //@line 4318 "xmlparse.c"
        var $1628=$1627+184; //@line 4318 "xmlparse.c"
        var $1629=HEAP[$1628]; //@line 4318 "xmlparse.c"
        var $1630=$dtd; //@line 4318 "xmlparse.c"
        var $1631=$1630+180; //@line 4318 "xmlparse.c"
        var $1632=HEAP[$1631]; //@line 4318 "xmlparse.c"
        var $1633=$1629+4*$1632; //@line 4318 "xmlparse.c"
        var $1634=$myindex; //@line 4318 "xmlparse.c"
        HEAP[$1633]=$1634; //@line 4318 "xmlparse.c"
        var $1635=$dtd; //@line 4319 "xmlparse.c"
        var $1636=$1635+180; //@line 4319 "xmlparse.c"
        var $1637=HEAP[$1636]; //@line 4319 "xmlparse.c"
        var $1638=($1637) + 1; //@line 4319 "xmlparse.c"
        var $1639=$dtd; //@line 4319 "xmlparse.c"
        var $1640=$1639+180; //@line 4319 "xmlparse.c"
        HEAP[$1640]=$1638; //@line 4319 "xmlparse.c"
        var $1641=$dtd; //@line 4320 "xmlparse.c"
        var $1642=$1641+164; //@line 4320 "xmlparse.c"
        var $1643=HEAP[$1642]; //@line 4320 "xmlparse.c"
        var $1644=$myindex; //@line 4320 "xmlparse.c"
        var $1645=$1643+28*$1644; //@line 4320 "xmlparse.c"
        var $1646=$1645; //@line 4320 "xmlparse.c"
        HEAP[$1646]=6; //@line 4320 "xmlparse.c"
        var $1647=$parser_addr; //@line 4321 "xmlparse.c"
        var $1648=$1647+128; //@line 4321 "xmlparse.c"
        var $1649=HEAP[$1648]; //@line 4321 "xmlparse.c"
        var $1650=($1649)!=0; //@line 4321 "xmlparse.c"
        if ($1650) { __label__ = 262; break; } else { __label__ = 373; break; } //@line 4321 "xmlparse.c"
      case 262: // $bb293
        $handleDefault=0; //@line 4322 "xmlparse.c"
        __label__ = 376; break; //@line 4322 "xmlparse.c"
      case 263: // $bb295
        var $1651=$parser_addr; //@line 4326 "xmlparse.c"
        var $1652=$1651+464; //@line 4326 "xmlparse.c"
        var $1653=HEAP[$1652]; //@line 4326 "xmlparse.c"
        var $1654=$parser_addr; //@line 4326 "xmlparse.c"
        var $1655=$1654+256; //@line 4326 "xmlparse.c"
        var $1656=$1655+4; //@line 4326 "xmlparse.c"
        var $1657=HEAP[$1656]; //@line 4326 "xmlparse.c"
        var $1658=$1653+$1657; //@line 4326 "xmlparse.c"
        var $1659=HEAP[$1658]; //@line 4326 "xmlparse.c"
        var $1660=($1659)==124; //@line 4326 "xmlparse.c"
        if ($1660) { __label__ = 264; break; } else { __label__ = 265; break; } //@line 4326 "xmlparse.c"
      case 264: // $bb296
        $0=2; //@line 4327 "xmlparse.c"
        __label__ = 380; break; //@line 4327 "xmlparse.c"
      case 265: // $bb297
        var $1661=$parser_addr; //@line 4328 "xmlparse.c"
        var $1662=$1661+464; //@line 4328 "xmlparse.c"
        var $1663=HEAP[$1662]; //@line 4328 "xmlparse.c"
        var $1664=$parser_addr; //@line 4328 "xmlparse.c"
        var $1665=$1664+256; //@line 4328 "xmlparse.c"
        var $1666=$1665+4; //@line 4328 "xmlparse.c"
        var $1667=HEAP[$1666]; //@line 4328 "xmlparse.c"
        var $1668=$1663+$1667; //@line 4328 "xmlparse.c"
        HEAP[$1668]=44; //@line 4328 "xmlparse.c"
        var $1669=$dtd; //@line 4329 "xmlparse.c"
        var $1670=$1669+160; //@line 4329 "xmlparse.c"
        var $1671=HEAP[$1670]; //@line 4329 "xmlparse.c"
        var $1672=($1671)!=0; //@line 4329 "xmlparse.c"
        if ($1672) { __label__ = 266; break; } else { __label__ = 373; break; } //@line 4329 "xmlparse.c"
      case 266: // $bb298
        var $1673=$parser_addr; //@line 4329 "xmlparse.c"
        var $1674=$1673+128; //@line 4329 "xmlparse.c"
        var $1675=HEAP[$1674]; //@line 4329 "xmlparse.c"
        var $1676=($1675)!=0; //@line 4329 "xmlparse.c"
        if ($1676) { __label__ = 267; break; } else { __label__ = 373; break; } //@line 4329 "xmlparse.c"
      case 267: // $bb299
        $handleDefault=0; //@line 4330 "xmlparse.c"
        __label__ = 376; break; //@line 4330 "xmlparse.c"
      case 268: // $bb301
        var $1677=$parser_addr; //@line 4333 "xmlparse.c"
        var $1678=$1677+464; //@line 4333 "xmlparse.c"
        var $1679=HEAP[$1678]; //@line 4333 "xmlparse.c"
        var $1680=$parser_addr; //@line 4333 "xmlparse.c"
        var $1681=$1680+256; //@line 4333 "xmlparse.c"
        var $1682=$1681+4; //@line 4333 "xmlparse.c"
        var $1683=HEAP[$1682]; //@line 4333 "xmlparse.c"
        var $1684=$1679+$1683; //@line 4333 "xmlparse.c"
        var $1685=HEAP[$1684]; //@line 4333 "xmlparse.c"
        var $1686=($1685)==44; //@line 4333 "xmlparse.c"
        if ($1686) { __label__ = 269; break; } else { __label__ = 270; break; } //@line 4333 "xmlparse.c"
      case 269: // $bb302
        $0=2; //@line 4334 "xmlparse.c"
        __label__ = 380; break; //@line 4334 "xmlparse.c"
      case 270: // $bb303
        var $1687=$dtd; //@line 4335 "xmlparse.c"
        var $1688=$1687+160; //@line 4335 "xmlparse.c"
        var $1689=HEAP[$1688]; //@line 4335 "xmlparse.c"
        var $1690=($1689)!=0; //@line 4335 "xmlparse.c"
        if ($1690) { __label__ = 271; break; } else { __label__ = 275; break; } //@line 4335 "xmlparse.c"
      case 271: // $bb304
        var $1691=$parser_addr; //@line 4335 "xmlparse.c"
        var $1692=$1691+464; //@line 4335 "xmlparse.c"
        var $1693=HEAP[$1692]; //@line 4335 "xmlparse.c"
        var $1694=$parser_addr; //@line 4335 "xmlparse.c"
        var $1695=$1694+256; //@line 4335 "xmlparse.c"
        var $1696=$1695+4; //@line 4335 "xmlparse.c"
        var $1697=HEAP[$1696]; //@line 4335 "xmlparse.c"
        var $1698=$1693+$1697; //@line 4335 "xmlparse.c"
        var $1699=HEAP[$1698]; //@line 4335 "xmlparse.c"
        var $1700=($1699)==0; //@line 4335 "xmlparse.c"
        if ($1700) { __label__ = 272; break; } else { __label__ = 275; break; } //@line 4335 "xmlparse.c"
      case 272: // $bb305
        var $1701=$dtd; //@line 4335 "xmlparse.c"
        var $1702=$1701+164; //@line 4335 "xmlparse.c"
        var $1703=HEAP[$1702]; //@line 4335 "xmlparse.c"
        var $1704=$dtd; //@line 4335 "xmlparse.c"
        var $1705=$1704+184; //@line 4335 "xmlparse.c"
        var $1706=HEAP[$1705]; //@line 4335 "xmlparse.c"
        var $1707=$dtd; //@line 4335 "xmlparse.c"
        var $1708=$1707+180; //@line 4335 "xmlparse.c"
        var $1709=HEAP[$1708]; //@line 4335 "xmlparse.c"
        var $1710=($1709) - 1; //@line 4335 "xmlparse.c"
        var $1711=$1706+4*$1710; //@line 4335 "xmlparse.c"
        var $1712=HEAP[$1711]; //@line 4335 "xmlparse.c"
        var $1713=$1703+28*$1712; //@line 4335 "xmlparse.c"
        var $1714=$1713; //@line 4335 "xmlparse.c"
        var $1715=HEAP[$1714]; //@line 4335 "xmlparse.c"
        var $1716=($1715)!=3; //@line 4335 "xmlparse.c"
        if ($1716) { __label__ = 273; break; } else { __label__ = 275; break; } //@line 4335 "xmlparse.c"
      case 273: // $bb306
        var $1717=$dtd; //@line 4340 "xmlparse.c"
        var $1718=$1717+164; //@line 4340 "xmlparse.c"
        var $1719=HEAP[$1718]; //@line 4340 "xmlparse.c"
        var $1720=$dtd; //@line 4340 "xmlparse.c"
        var $1721=$1720+184; //@line 4340 "xmlparse.c"
        var $1722=HEAP[$1721]; //@line 4340 "xmlparse.c"
        var $1723=$dtd; //@line 4340 "xmlparse.c"
        var $1724=$1723+180; //@line 4340 "xmlparse.c"
        var $1725=HEAP[$1724]; //@line 4340 "xmlparse.c"
        var $1726=($1725) - 1; //@line 4340 "xmlparse.c"
        var $1727=$1722+4*$1726; //@line 4340 "xmlparse.c"
        var $1728=HEAP[$1727]; //@line 4340 "xmlparse.c"
        var $1729=$1719+28*$1728; //@line 4340 "xmlparse.c"
        var $1730=$1729; //@line 4340 "xmlparse.c"
        HEAP[$1730]=5; //@line 4340 "xmlparse.c"
        var $1731=$parser_addr; //@line 4342 "xmlparse.c"
        var $1732=$1731+128; //@line 4342 "xmlparse.c"
        var $1733=HEAP[$1732]; //@line 4342 "xmlparse.c"
        var $1734=($1733)!=0; //@line 4342 "xmlparse.c"
        if ($1734) { __label__ = 274; break; } else { __label__ = 275; break; } //@line 4342 "xmlparse.c"
      case 274: // $bb307
        $handleDefault=0; //@line 4343 "xmlparse.c"
        __label__ = 275; break; //@line 4343 "xmlparse.c"
      case 275: // $bb308
        var $1735=$parser_addr; //@line 4345 "xmlparse.c"
        var $1736=$1735+464; //@line 4345 "xmlparse.c"
        var $1737=HEAP[$1736]; //@line 4345 "xmlparse.c"
        var $1738=$parser_addr; //@line 4345 "xmlparse.c"
        var $1739=$1738+256; //@line 4345 "xmlparse.c"
        var $1740=$1739+4; //@line 4345 "xmlparse.c"
        var $1741=HEAP[$1740]; //@line 4345 "xmlparse.c"
        var $1742=$1737+$1741; //@line 4345 "xmlparse.c"
        HEAP[$1742]=124; //@line 4345 "xmlparse.c"
        __label__ = 373; break; //@line 4345 "xmlparse.c"
      case 276: // $bb309
        var $1743=$dtd; //@line 4350 "xmlparse.c"
        var $1744=$1743+129; //@line 4350 "xmlparse.c"
        HEAP[$1744]=1; //@line 4350 "xmlparse.c"
        var $1745=$parser_addr; //@line 4351 "xmlparse.c"
        var $1746=$1745+492; //@line 4351 "xmlparse.c"
        var $1747=HEAP[$1746]; //@line 4351 "xmlparse.c"
        var $1748=($1747)==0; //@line 4351 "xmlparse.c"
        if ($1748) { __label__ = 277; break; } else { __label__ = 278; break; } //@line 4351 "xmlparse.c"
      case 277: // $bb310
        var $1749=$dtd; //@line 4352 "xmlparse.c"
        var $1750=$1749+130; //@line 4352 "xmlparse.c"
        var $1751=HEAP[$1750]; //@line 4352 "xmlparse.c"
        var $1752=$dtd; //@line 4352 "xmlparse.c"
        var $1753=$1752+128; //@line 4352 "xmlparse.c"
        HEAP[$1753]=$1751; //@line 4352 "xmlparse.c"
        __label__ = 304; break; //@line 4352 "xmlparse.c"
      case 278: // $bb311
        var $1754=HEAP[$next_addr]; //@line 4356 "xmlparse.c"
        var $1755=$enc_addr; //@line 4356 "xmlparse.c"
        var $1756=$1755+68; //@line 4356 "xmlparse.c"
        var $1757=HEAP[$1756]; //@line 4356 "xmlparse.c"
        var $1758=0 - ($1757); //@line 4356 "xmlparse.c"
        var $1759=$1754+$1758; //@line 4356 "xmlparse.c"
        var $1760=$enc_addr; //@line 4356 "xmlparse.c"
        var $1761=$1760+68; //@line 4356 "xmlparse.c"
        var $1762=HEAP[$1761]; //@line 4356 "xmlparse.c"
        var $1763=$s_addr; //@line 4356 "xmlparse.c"
        var $1764=$1763+$1762; //@line 4356 "xmlparse.c"
        var $1765=$dtd; //@line 4356 "xmlparse.c"
        var $1766=$1765+80; //@line 4356 "xmlparse.c"
        var $1767=$enc_addr; //@line 4356 "xmlparse.c"
        var $1768=_poolStoreString($1766, $1767, $1764, $1759); //@line 4356 "xmlparse.c"
        $name312=$1768; //@line 4356 "xmlparse.c"
        var $1769=$name312; //@line 4359 "xmlparse.c"
        var $1770=($1769)==0; //@line 4359 "xmlparse.c"
        if ($1770) { __label__ = 279; break; } else { __label__ = 280; break; } //@line 4359 "xmlparse.c"
      case 279: // $bb314
        $0=1; //@line 4360 "xmlparse.c"
        __label__ = 380; break; //@line 4360 "xmlparse.c"
      case 280: // $bb315
        var $1771=$dtd; //@line 4361 "xmlparse.c"
        var $1772=$1771+132; //@line 4361 "xmlparse.c"
        var $1773=$name312; //@line 4361 "xmlparse.c"
        var $1774=_lookup($1772, $1773, 0); //@line 4361 "xmlparse.c"
        var $1775=$1774; //@line 4361 "xmlparse.c"
        $entity313=$1775; //@line 4361 "xmlparse.c"
        var $1776=$dtd; //@line 4362 "xmlparse.c"
        var $1777=$1776+80; //@line 4362 "xmlparse.c"
        var $1778=$1777+16; //@line 4362 "xmlparse.c"
        var $1779=HEAP[$1778]; //@line 4362 "xmlparse.c"
        var $1780=$dtd; //@line 4362 "xmlparse.c"
        var $1781=$1780+80; //@line 4362 "xmlparse.c"
        var $1782=$1781+12; //@line 4362 "xmlparse.c"
        HEAP[$1782]=$1779; //@line 4362 "xmlparse.c"
        var $1783=$parser_addr; //@line 4367 "xmlparse.c"
        var $1784=$1783+256; //@line 4367 "xmlparse.c"
        var $1785=$1784+16; //@line 4367 "xmlparse.c"
        var $1786=HEAP[$1785]; //@line 4367 "xmlparse.c"
        var $1787=($1786)==0; //@line 4367 "xmlparse.c"
        if ($1787) { __label__ = 288; break; } else { __label__ = 281; break; } //@line 4367 "xmlparse.c"
      case 281: // $bb316
        var $1788=$dtd; //@line 4367 "xmlparse.c"
        var $1789=$1788+130; //@line 4367 "xmlparse.c"
        var $1790=HEAP[$1789]; //@line 4367 "xmlparse.c"
        var $1791=($1790)!=0; //@line 4367 "xmlparse.c"
        if ($1791) { __label__ = 282; break; } else { __label__ = 283; break; } //@line 4367 "xmlparse.c"
      case 282: // $bb317
        var $1792=$parser_addr; //@line 4367 "xmlparse.c"
        var $1793=$1792+300; //@line 4367 "xmlparse.c"
        var $1794=HEAP[$1793]; //@line 4367 "xmlparse.c"
        var $1795=($1794)!=0; //@line 4367 "xmlparse.c"
        if ($1795) { __label__ = 288; break; } else { __label__ = 284; break; } //@line 4367 "xmlparse.c"
      case 283: // $bb319
        var $1796=$dtd; //@line 4367 "xmlparse.c"
        var $1797=$1796+129; //@line 4367 "xmlparse.c"
        var $1798=HEAP[$1797]; //@line 4367 "xmlparse.c"
        var $1799=($1798)!=0; //@line 4367 "xmlparse.c"
        if ($1799) { __label__ = 288; break; } else { __label__ = 284; break; } //@line 4367 "xmlparse.c"
      case 284: // $bb320
        var $1800=$entity313; //@line 4371 "xmlparse.c"
        var $1801=($1800)==0; //@line 4371 "xmlparse.c"
        if ($1801) { __label__ = 285; break; } else { __label__ = 286; break; } //@line 4371 "xmlparse.c"
      case 285: // $bb321
        $0=11; //@line 4372 "xmlparse.c"
        __label__ = 380; break; //@line 4372 "xmlparse.c"
      case 286: // $bb322
        var $1802=$entity313; //@line 4373 "xmlparse.c"
        var $1803=$1802+34; //@line 4373 "xmlparse.c"
        var $1804=HEAP[$1803]; //@line 4373 "xmlparse.c"
        var $1805=($1804)==0; //@line 4373 "xmlparse.c"
        if ($1805) { __label__ = 287; break; } else { __label__ = 292; break; } //@line 4373 "xmlparse.c"
      case 287: // $bb323
        $0=24; //@line 4374 "xmlparse.c"
        __label__ = 380; break; //@line 4374 "xmlparse.c"
      case 288: // $bb325
        var $1806=$entity313; //@line 4376 "xmlparse.c"
        var $1807=($1806)==0; //@line 4376 "xmlparse.c"
        if ($1807) { __label__ = 289; break; } else { __label__ = 292; break; } //@line 4376 "xmlparse.c"
      case 289: // $bb326
        var $1808=$dtd; //@line 4377 "xmlparse.c"
        var $1809=$1808+130; //@line 4377 "xmlparse.c"
        var $1810=HEAP[$1809]; //@line 4377 "xmlparse.c"
        var $1811=$dtd; //@line 4377 "xmlparse.c"
        var $1812=$1811+128; //@line 4377 "xmlparse.c"
        HEAP[$1812]=$1810; //@line 4377 "xmlparse.c"
        var $1813=$role; //@line 4379 "xmlparse.c"
        var $1814=($1813)==60; //@line 4379 "xmlparse.c"
        if ($1814) { __label__ = 290; break; } else { __label__ = 373; break; } //@line 4379 "xmlparse.c"
      case 290: // $bb327
        var $1815=$parser_addr; //@line 4379 "xmlparse.c"
        var $1816=$1815+120; //@line 4379 "xmlparse.c"
        var $1817=HEAP[$1816]; //@line 4379 "xmlparse.c"
        var $1818=($1817)!=0; //@line 4379 "xmlparse.c"
        if ($1818) { __label__ = 291; break; } else { __label__ = 373; break; } //@line 4379 "xmlparse.c"
      case 291: // $bb328
        var $1819=$parser_addr; //@line 4380 "xmlparse.c"
        var $1820=$1819+120; //@line 4380 "xmlparse.c"
        var $1821=HEAP[$1820]; //@line 4380 "xmlparse.c"
        var $1822=$parser_addr; //@line 4380 "xmlparse.c"
        var $1823=$1822+4; //@line 4380 "xmlparse.c"
        var $1824=HEAP[$1823]; //@line 4380 "xmlparse.c"
        var $1825=$name312; //@line 4380 "xmlparse.c"
        FUNCTION_TABLE[$1821]($1824, $1825, 1); //@line 4380 "xmlparse.c"
        $handleDefault=0; //@line 4381 "xmlparse.c"
        __label__ = 376; break; //@line 4381 "xmlparse.c"
      case 292: // $bb330
        var $1826=$entity313; //@line 4385 "xmlparse.c"
        var $1827=$1826+32; //@line 4385 "xmlparse.c"
        var $1828=HEAP[$1827]; //@line 4385 "xmlparse.c"
        var $1829=($1828)!=0; //@line 4385 "xmlparse.c"
        if ($1829) { __label__ = 293; break; } else { __label__ = 294; break; } //@line 4385 "xmlparse.c"
      case 293: // $bb331
        $0=12; //@line 4386 "xmlparse.c"
        __label__ = 380; break; //@line 4386 "xmlparse.c"
      case 294: // $bb332
        var $1830=$entity313; //@line 4387 "xmlparse.c"
        var $1831=$1830+4; //@line 4387 "xmlparse.c"
        var $1832=HEAP[$1831]; //@line 4387 "xmlparse.c"
        var $1833=($1832)!=0; //@line 4387 "xmlparse.c"
        if ($1833) { __label__ = 295; break; } else { __label__ = 298; break; } //@line 4387 "xmlparse.c"
      case 295: // $bb333
        var $1834=$role; //@line 4390 "xmlparse.c"
        var $1835=($1834)==60; //@line 4390 "xmlparse.c"
        var $1836=($1835); //@line 4390 "xmlparse.c"
        $betweenDecl=$1836; //@line 4390 "xmlparse.c"
        var $1837=$betweenDecl; //@line 4391 "xmlparse.c"
        var $1838=($1837); //@line 4391 "xmlparse.c"
        var $1839=$parser_addr; //@line 4391 "xmlparse.c"
        var $1840=$entity313; //@line 4391 "xmlparse.c"
        var $1841=((($1838)) & 255); //@line 4391 "xmlparse.c"
        var $1842=_processInternalEntity($1839, $1840, $1841); //@line 4391 "xmlparse.c"
        $result334=$1842; //@line 4391 "xmlparse.c"
        var $1843=$result334; //@line 4392 "xmlparse.c"
        var $1844=($1843)!=0; //@line 4392 "xmlparse.c"
        if ($1844) { __label__ = 296; break; } else { __label__ = 297; break; } //@line 4392 "xmlparse.c"
      case 296: // $bb335
        var $1845=$result334; //@line 4393 "xmlparse.c"
        $0=$1845; //@line 4393 "xmlparse.c"
        __label__ = 380; break; //@line 4393 "xmlparse.c"
      case 297: // $bb336
        $handleDefault=0; //@line 4394 "xmlparse.c"
        __label__ = 376; break; //@line 4394 "xmlparse.c"
      case 298: // $bb337
        var $1846=$parser_addr; //@line 4397 "xmlparse.c"
        var $1847=$1846+112; //@line 4397 "xmlparse.c"
        var $1848=HEAP[$1847]; //@line 4397 "xmlparse.c"
        var $1849=($1848)!=0; //@line 4397 "xmlparse.c"
        var $1850=$dtd; //@line 4398 "xmlparse.c"
        if ($1849) { __label__ = 299; break; } else { __label__ = 303; break; } //@line 4397 "xmlparse.c"
      case 299: // $bb338
        var $1851=$1850+131; //@line 4398 "xmlparse.c"
        HEAP[$1851]=0; //@line 4398 "xmlparse.c"
        var $1852=$entity313; //@line 4399 "xmlparse.c"
        var $1853=$1852+32; //@line 4399 "xmlparse.c"
        HEAP[$1853]=1; //@line 4399 "xmlparse.c"
        var $1854=$parser_addr; //@line 4400 "xmlparse.c"
        var $1855=$1854+112; //@line 4400 "xmlparse.c"
        var $1856=HEAP[$1855]; //@line 4400 "xmlparse.c"
        var $1857=$entity313; //@line 4400 "xmlparse.c"
        var $1858=$1857+24; //@line 4400 "xmlparse.c"
        var $1859=HEAP[$1858]; //@line 4400 "xmlparse.c"
        var $1860=$entity313; //@line 4400 "xmlparse.c"
        var $1861=$1860+16; //@line 4400 "xmlparse.c"
        var $1862=HEAP[$1861]; //@line 4400 "xmlparse.c"
        var $1863=$entity313; //@line 4400 "xmlparse.c"
        var $1864=$1863+20; //@line 4400 "xmlparse.c"
        var $1865=HEAP[$1864]; //@line 4400 "xmlparse.c"
        var $1866=$parser_addr; //@line 4400 "xmlparse.c"
        var $1867=$1866+116; //@line 4400 "xmlparse.c"
        var $1868=HEAP[$1867]; //@line 4400 "xmlparse.c"
        var $1869=FUNCTION_TABLE[$1856]($1868, 0, $1865, $1862, $1859); //@line 4400 "xmlparse.c"
        var $1870=($1869)==0; //@line 4400 "xmlparse.c"
        var $1871=$entity313; //@line 4405 "xmlparse.c"
        var $1872=$1871+32; //@line 4405 "xmlparse.c"
        HEAP[$1872]=0; //@line 4405 "xmlparse.c"
        if ($1870) { __label__ = 300; break; } else { __label__ = 301; break; } //@line 4400 "xmlparse.c"
      case 300: // $bb339
        $0=21; //@line 4406 "xmlparse.c"
        __label__ = 380; break; //@line 4406 "xmlparse.c"
      case 301: // $bb340
        $handleDefault=0; //@line 4409 "xmlparse.c"
        var $1873=$dtd; //@line 4410 "xmlparse.c"
        var $1874=$1873+131; //@line 4410 "xmlparse.c"
        var $1875=HEAP[$1874]; //@line 4410 "xmlparse.c"
        var $1876=($1875)==0; //@line 4410 "xmlparse.c"
        if ($1876) { __label__ = 302; break; } else { __label__ = 304; break; } //@line 4410 "xmlparse.c"
      case 302: // $bb341
        var $1877=$dtd; //@line 4411 "xmlparse.c"
        var $1878=$1877+130; //@line 4411 "xmlparse.c"
        var $1879=HEAP[$1878]; //@line 4411 "xmlparse.c"
        var $1880=$dtd; //@line 4411 "xmlparse.c"
        var $1881=$1880+128; //@line 4411 "xmlparse.c"
        HEAP[$1881]=$1879; //@line 4411 "xmlparse.c"
        __label__ = 373; break; //@line 4411 "xmlparse.c"
      case 303: // $bb343
        var $1882=$1850+130; //@line 4416 "xmlparse.c"
        var $1883=HEAP[$1882]; //@line 4416 "xmlparse.c"
        var $1884=$dtd; //@line 4416 "xmlparse.c"
        var $1885=$1884+128; //@line 4416 "xmlparse.c"
        HEAP[$1885]=$1883; //@line 4416 "xmlparse.c"
        __label__ = 373; break; //@line 4416 "xmlparse.c"
      case 304: // $bb344
        var $1886=$dtd; //@line 4421 "xmlparse.c"
        var $1887=$1886+130; //@line 4421 "xmlparse.c"
        var $1888=HEAP[$1887]; //@line 4421 "xmlparse.c"
        var $1889=($1888)==0; //@line 4421 "xmlparse.c"
        if ($1889) { __label__ = 305; break; } else { __label__ = 373; break; } //@line 4421 "xmlparse.c"
      case 305: // $bb345
        var $1890=$parser_addr; //@line 4421 "xmlparse.c"
        var $1891=$1890+108; //@line 4421 "xmlparse.c"
        var $1892=HEAP[$1891]; //@line 4421 "xmlparse.c"
        var $1893=($1892)!=0; //@line 4421 "xmlparse.c"
        if ($1893) { __label__ = 306; break; } else { __label__ = 373; break; } //@line 4421 "xmlparse.c"
      case 306: // $bb346
        var $1894=$parser_addr; //@line 4421 "xmlparse.c"
        var $1895=$1894+108; //@line 4421 "xmlparse.c"
        var $1896=HEAP[$1895]; //@line 4421 "xmlparse.c"
        var $1897=$parser_addr; //@line 4421 "xmlparse.c"
        var $1898=$1897+4; //@line 4421 "xmlparse.c"
        var $1899=HEAP[$1898]; //@line 4421 "xmlparse.c"
        var $1900=FUNCTION_TABLE[$1896]($1899); //@line 4421 "xmlparse.c"
        var $1901=($1900)==0; //@line 4421 "xmlparse.c"
        if ($1901) { __label__ = 307; break; } else { __label__ = 373; break; } //@line 4421 "xmlparse.c"
      case 307: // $bb347
        $0=22; //@line 4424 "xmlparse.c"
        __label__ = 380; break; //@line 4424 "xmlparse.c"
      case 308: // $bb349
        var $1902=$parser_addr; //@line 4430 "xmlparse.c"
        var $1903=$1902+128; //@line 4430 "xmlparse.c"
        var $1904=HEAP[$1903]; //@line 4430 "xmlparse.c"
        var $1905=($1904)!=0; //@line 4430 "xmlparse.c"
        if ($1905) { __label__ = 309; break; } else { __label__ = 373; break; } //@line 4430 "xmlparse.c"
      case 309: // $bb350
        var $1906=HEAP[$next_addr]; //@line 4431 "xmlparse.c"
        var $1907=$parser_addr; //@line 4431 "xmlparse.c"
        var $1908=$enc_addr; //@line 4431 "xmlparse.c"
        var $1909=$s_addr; //@line 4431 "xmlparse.c"
        var $1910=_getElementType($1907, $1908, $1909, $1906); //@line 4431 "xmlparse.c"
        var $1911=$parser_addr; //@line 4431 "xmlparse.c"
        var $1912=$1911+344; //@line 4431 "xmlparse.c"
        HEAP[$1912]=$1910; //@line 4431 "xmlparse.c"
        var $1913=$parser_addr; //@line 4432 "xmlparse.c"
        var $1914=$1913+344; //@line 4432 "xmlparse.c"
        var $1915=HEAP[$1914]; //@line 4432 "xmlparse.c"
        var $1916=($1915)==0; //@line 4432 "xmlparse.c"
        if ($1916) { __label__ = 310; break; } else { __label__ = 311; break; } //@line 4432 "xmlparse.c"
      case 310: // $bb351
        $0=1; //@line 4433 "xmlparse.c"
        __label__ = 380; break; //@line 4433 "xmlparse.c"
      case 311: // $bb352
        var $1917=$dtd; //@line 4434 "xmlparse.c"
        var $1918=$1917+180; //@line 4434 "xmlparse.c"
        HEAP[$1918]=0; //@line 4434 "xmlparse.c"
        var $1919=$dtd; //@line 4435 "xmlparse.c"
        var $1920=$1919+176; //@line 4435 "xmlparse.c"
        HEAP[$1920]=0; //@line 4435 "xmlparse.c"
        var $1921=$dtd; //@line 4436 "xmlparse.c"
        var $1922=$1921+160; //@line 4436 "xmlparse.c"
        HEAP[$1922]=1; //@line 4436 "xmlparse.c"
        $handleDefault=0; //@line 4437 "xmlparse.c"
        __label__ = 376; break; //@line 4437 "xmlparse.c"
      case 312: // $bb354
        var $1923=$dtd; //@line 4443 "xmlparse.c"
        var $1924=$1923+160; //@line 4443 "xmlparse.c"
        var $1925=HEAP[$1924]; //@line 4443 "xmlparse.c"
        var $1926=($1925)!=0; //@line 4443 "xmlparse.c"
        if ($1926) { __label__ = 313; break; } else { __label__ = 373; break; } //@line 4443 "xmlparse.c"
      case 313: // $bb355
        var $1927=$parser_addr; //@line 4444 "xmlparse.c"
        var $1928=$1927+128; //@line 4444 "xmlparse.c"
        var $1929=HEAP[$1928]; //@line 4444 "xmlparse.c"
        var $1930=($1929)!=0; //@line 4444 "xmlparse.c"
        if ($1930) { __label__ = 314; break; } else { __label__ = 320; break; } //@line 4444 "xmlparse.c"
      case 314: // $bb356
        var $1931=$parser_addr; //@line 4445 "xmlparse.c"
        var $1932=$1931+12; //@line 4445 "xmlparse.c"
        var $1933=$1932; //@line 4445 "xmlparse.c"
        var $1934=HEAP[$1933]; //@line 4445 "xmlparse.c"
        var $1935=FUNCTION_TABLE[$1934](20); //@line 4445 "xmlparse.c"
        var $1936=$1935; //@line 4445 "xmlparse.c"
        $content=$1936; //@line 4445 "xmlparse.c"
        var $1937=$content; //@line 4446 "xmlparse.c"
        var $1938=($1937)==0; //@line 4446 "xmlparse.c"
        if ($1938) { __label__ = 315; break; } else { __label__ = 316; break; } //@line 4446 "xmlparse.c"
      case 315: // $bb357
        $0=1; //@line 4447 "xmlparse.c"
        __label__ = 380; break; //@line 4447 "xmlparse.c"
      case 316: // $bb358
        var $1939=$content; //@line 4448 "xmlparse.c"
        var $1940=$1939+4; //@line 4448 "xmlparse.c"
        HEAP[$1940]=0; //@line 4448 "xmlparse.c"
        var $1941=$content; //@line 4449 "xmlparse.c"
        var $1942=$1941+8; //@line 4449 "xmlparse.c"
        HEAP[$1942]=0; //@line 4449 "xmlparse.c"
        var $1943=$content; //@line 4450 "xmlparse.c"
        var $1944=$1943+12; //@line 4450 "xmlparse.c"
        HEAP[$1944]=0; //@line 4450 "xmlparse.c"
        var $1945=$content; //@line 4451 "xmlparse.c"
        var $1946=$1945+16; //@line 4451 "xmlparse.c"
        HEAP[$1946]=0; //@line 4451 "xmlparse.c"
        var $1947=$role; //@line 4452 "xmlparse.c"
        var $1948=($1947)==41; //@line 4452 "xmlparse.c"
        if ($1948) { __label__ = 317; break; } else { __label__ = 318; break; } //@line 4452 "xmlparse.c"
      case 317: // $bb359
        $iftmp_226=2; //@line 4452 "xmlparse.c"
        __label__ = 319; break; //@line 4452 "xmlparse.c"
      case 318: // $bb360
        $iftmp_226=1; //@line 4452 "xmlparse.c"
        __label__ = 319; break; //@line 4452 "xmlparse.c"
      case 319: // $bb361
        var $1949=$content; //@line 4452 "xmlparse.c"
        var $1950=$1949; //@line 4452 "xmlparse.c"
        var $1951=$iftmp_226; //@line 4452 "xmlparse.c"
        HEAP[$1950]=$1951; //@line 4452 "xmlparse.c"
        var $1952=$eventEndPP; //@line 4455 "xmlparse.c"
        var $1953=$s_addr; //@line 4455 "xmlparse.c"
        HEAP[$1952]=$1953; //@line 4455 "xmlparse.c"
        var $1954=$parser_addr; //@line 4456 "xmlparse.c"
        var $1955=$1954+128; //@line 4456 "xmlparse.c"
        var $1956=HEAP[$1955]; //@line 4456 "xmlparse.c"
        var $1957=$parser_addr; //@line 4456 "xmlparse.c"
        var $1958=$1957+344; //@line 4456 "xmlparse.c"
        var $1959=HEAP[$1958]; //@line 4456 "xmlparse.c"
        var $1960=$1959; //@line 4456 "xmlparse.c"
        var $1961=HEAP[$1960]; //@line 4456 "xmlparse.c"
        var $1962=$parser_addr; //@line 4456 "xmlparse.c"
        var $1963=$1962+4; //@line 4456 "xmlparse.c"
        var $1964=HEAP[$1963]; //@line 4456 "xmlparse.c"
        var $1965=$content; //@line 4456 "xmlparse.c"
        FUNCTION_TABLE[$1956]($1964, $1961, $1965); //@line 4456 "xmlparse.c"
        $handleDefault=0; //@line 4457 "xmlparse.c"
        __label__ = 320; break; //@line 4457 "xmlparse.c"
      case 320: // $bb362
        var $1966=$dtd; //@line 4459 "xmlparse.c"
        var $1967=$1966+160; //@line 4459 "xmlparse.c"
        HEAP[$1967]=0; //@line 4459 "xmlparse.c"
        __label__ = 373; break; //@line 4459 "xmlparse.c"
      case 321: // $bb364
        var $1968=$dtd; //@line 4464 "xmlparse.c"
        var $1969=$1968+160; //@line 4464 "xmlparse.c"
        var $1970=HEAP[$1969]; //@line 4464 "xmlparse.c"
        var $1971=($1970)!=0; //@line 4464 "xmlparse.c"
        if ($1971) { __label__ = 322; break; } else { __label__ = 373; break; } //@line 4464 "xmlparse.c"
      case 322: // $bb365
        var $1972=$dtd; //@line 4465 "xmlparse.c"
        var $1973=$1972+164; //@line 4465 "xmlparse.c"
        var $1974=HEAP[$1973]; //@line 4465 "xmlparse.c"
        var $1975=$dtd; //@line 4465 "xmlparse.c"
        var $1976=$1975+184; //@line 4465 "xmlparse.c"
        var $1977=HEAP[$1976]; //@line 4465 "xmlparse.c"
        var $1978=$dtd; //@line 4465 "xmlparse.c"
        var $1979=$1978+180; //@line 4465 "xmlparse.c"
        var $1980=HEAP[$1979]; //@line 4465 "xmlparse.c"
        var $1981=($1980) - 1; //@line 4465 "xmlparse.c"
        var $1982=$1977+4*$1981; //@line 4465 "xmlparse.c"
        var $1983=HEAP[$1982]; //@line 4465 "xmlparse.c"
        var $1984=$1974+28*$1983; //@line 4465 "xmlparse.c"
        var $1985=$1984; //@line 4465 "xmlparse.c"
        HEAP[$1985]=3; //@line 4465 "xmlparse.c"
        var $1986=$parser_addr; //@line 4467 "xmlparse.c"
        var $1987=$1986+128; //@line 4467 "xmlparse.c"
        var $1988=HEAP[$1987]; //@line 4467 "xmlparse.c"
        var $1989=($1988)!=0; //@line 4467 "xmlparse.c"
        if ($1989) { __label__ = 323; break; } else { __label__ = 373; break; } //@line 4467 "xmlparse.c"
      case 323: // $bb366
        $handleDefault=0; //@line 4468 "xmlparse.c"
        __label__ = 376; break; //@line 4468 "xmlparse.c"
      case 324: // $bb368
        $quant=0; //@line 4473 "xmlparse.c"
        __label__ = 328; break; //@line 4473 "xmlparse.c"
      case 325: // $bb369
        $quant=1; //@line 4476 "xmlparse.c"
        __label__ = 328; break; //@line 4476 "xmlparse.c"
      case 326: // $bb370
        $quant=2; //@line 4479 "xmlparse.c"
        __label__ = 328; break; //@line 4479 "xmlparse.c"
      case 327: // $bb371
        $quant=3; //@line 4482 "xmlparse.c"
        __label__ = 328; break; //@line 4483 "xmlparse.c"
      case 328: // $elementContent
        var $1990=$dtd; //@line 4484 "xmlparse.c"
        var $1991=$1990+160; //@line 4484 "xmlparse.c"
        var $1992=HEAP[$1991]; //@line 4484 "xmlparse.c"
        var $1993=($1992)!=0; //@line 4484 "xmlparse.c"
        if ($1993) { __label__ = 329; break; } else { __label__ = 373; break; } //@line 4484 "xmlparse.c"
      case 329: // $bb372
        var $1994=$quant; //@line 4490 "xmlparse.c"
        var $1995=($1994)!=0; //@line 4490 "xmlparse.c"
        var $1996=HEAP[$next_addr]; //@line 4490 "xmlparse.c"
        if ($1995) { __label__ = 330; break; } else { __label__ = 331; break; } //@line 4490 "xmlparse.c"
      case 330: // $bb375
        var $1997=$enc_addr; //@line 4490 "xmlparse.c"
        var $1998=$1997+68; //@line 4490 "xmlparse.c"
        var $1999=HEAP[$1998]; //@line 4490 "xmlparse.c"
        var $2000=0 - ($1999); //@line 4490 "xmlparse.c"
        var $2001=$1996+$2000; //@line 4490 "xmlparse.c"
        $iftmp_227=$2001; //@line 4490 "xmlparse.c"
        __label__ = 332; break; //@line 4490 "xmlparse.c"
      case 331: // $bb376
        $iftmp_227=$1996; //@line 4490 "xmlparse.c"
        __label__ = 332; break; //@line 4490 "xmlparse.c"
      case 332: // $bb377
        var $2002=$iftmp_227; //@line 4490 "xmlparse.c"
        $nxt=$2002; //@line 4490 "xmlparse.c"
        var $2003=$parser_addr; //@line 4491 "xmlparse.c"
        var $2004=_nextScaffoldPart($2003); //@line 4491 "xmlparse.c"
        $myindex374=$2004; //@line 4491 "xmlparse.c"
        var $2005=($2004) < 0; //@line 4492 "xmlparse.c"
        if ($2005) { __label__ = 333; break; } else { __label__ = 334; break; } //@line 4492 "xmlparse.c"
      case 333: // $bb378
        $0=1; //@line 4493 "xmlparse.c"
        __label__ = 380; break; //@line 4493 "xmlparse.c"
      case 334: // $bb379
        var $2006=$dtd; //@line 4494 "xmlparse.c"
        var $2007=$2006+164; //@line 4494 "xmlparse.c"
        var $2008=HEAP[$2007]; //@line 4494 "xmlparse.c"
        var $2009=$myindex374; //@line 4494 "xmlparse.c"
        var $2010=$2008+28*$2009; //@line 4494 "xmlparse.c"
        var $2011=$2010; //@line 4494 "xmlparse.c"
        HEAP[$2011]=4; //@line 4494 "xmlparse.c"
        var $2012=$dtd; //@line 4495 "xmlparse.c"
        var $2013=$2012+164; //@line 4495 "xmlparse.c"
        var $2014=HEAP[$2013]; //@line 4495 "xmlparse.c"
        var $2015=$myindex374; //@line 4495 "xmlparse.c"
        var $2016=$2014+28*$2015; //@line 4495 "xmlparse.c"
        var $2017=$2016+4; //@line 4495 "xmlparse.c"
        var $2018=$quant; //@line 4495 "xmlparse.c"
        HEAP[$2017]=$2018; //@line 4495 "xmlparse.c"
        var $2019=$parser_addr; //@line 4496 "xmlparse.c"
        var $2020=$enc_addr; //@line 4496 "xmlparse.c"
        var $2021=$s_addr; //@line 4496 "xmlparse.c"
        var $2022=$nxt; //@line 4496 "xmlparse.c"
        var $2023=_getElementType($2019, $2020, $2021, $2022); //@line 4496 "xmlparse.c"
        $el=$2023; //@line 4496 "xmlparse.c"
        var $2024=$el; //@line 4497 "xmlparse.c"
        var $2025=($2024)==0; //@line 4497 "xmlparse.c"
        if ($2025) { __label__ = 335; break; } else { __label__ = 336; break; } //@line 4497 "xmlparse.c"
      case 335: // $bb380
        $0=1; //@line 4498 "xmlparse.c"
        __label__ = 380; break; //@line 4498 "xmlparse.c"
      case 336: // $bb381
        var $2026=$el; //@line 4499 "xmlparse.c"
        var $2027=$2026; //@line 4499 "xmlparse.c"
        var $2028=HEAP[$2027]; //@line 4499 "xmlparse.c"
        $name373=$2028; //@line 4499 "xmlparse.c"
        var $2029=$dtd; //@line 4500 "xmlparse.c"
        var $2030=$2029+164; //@line 4500 "xmlparse.c"
        var $2031=HEAP[$2030]; //@line 4500 "xmlparse.c"
        var $2032=$myindex374; //@line 4500 "xmlparse.c"
        var $2033=$2031+28*$2032; //@line 4500 "xmlparse.c"
        var $2034=$2033+8; //@line 4500 "xmlparse.c"
        var $2035=$name373; //@line 4500 "xmlparse.c"
        HEAP[$2034]=$2035; //@line 4500 "xmlparse.c"
        $nameLen=0; //@line 4501 "xmlparse.c"
        __label__ = 337; break; //@line 4501 "xmlparse.c"
      case 337: // $bb382
        var $2036=$name373; //@line 4502 "xmlparse.c"
        var $2037=$nameLen; //@line 4502 "xmlparse.c"
        var $2038=$2036+$2037; //@line 4502 "xmlparse.c"
        var $2039=HEAP[$2038]; //@line 4502 "xmlparse.c"
        var $2040=($2039)!=0; //@line 4502 "xmlparse.c"
        var $2041=($2040); //@line 4502 "xmlparse.c"
        var $2042=$nameLen; //@line 4502 "xmlparse.c"
        var $2043=($2042) + 1; //@line 4502 "xmlparse.c"
        $nameLen=$2043; //@line 4502 "xmlparse.c"
        var $toBool=($2041)!=0; //@line 4502 "xmlparse.c"
        if ($toBool) { __label__ = 337; break; } else { __label__ = 338; break; } //@line 4502 "xmlparse.c"
      case 338: // $bb383
        var $2044=$dtd; //@line 4503 "xmlparse.c"
        var $2045=$2044+168; //@line 4503 "xmlparse.c"
        var $2046=HEAP[$2045]; //@line 4503 "xmlparse.c"
        var $2047=$nameLen; //@line 4503 "xmlparse.c"
        var $2048=($2047) + ($2046); //@line 4503 "xmlparse.c"
        var $2049=$dtd; //@line 4503 "xmlparse.c"
        var $2050=$2049+168; //@line 4503 "xmlparse.c"
        HEAP[$2050]=$2048; //@line 4503 "xmlparse.c"
        var $2051=$parser_addr; //@line 4504 "xmlparse.c"
        var $2052=$2051+128; //@line 4504 "xmlparse.c"
        var $2053=HEAP[$2052]; //@line 4504 "xmlparse.c"
        var $2054=($2053)!=0; //@line 4504 "xmlparse.c"
        if ($2054) { __label__ = 339; break; } else { __label__ = 373; break; } //@line 4504 "xmlparse.c"
      case 339: // $bb384
        $handleDefault=0; //@line 4505 "xmlparse.c"
        __label__ = 376; break; //@line 4505 "xmlparse.c"
      case 340: // $bb386
        $quant=0; //@line 4510 "xmlparse.c"
        __label__ = 344; break; //@line 4510 "xmlparse.c"
      case 341: // $bb387
        $quant=1; //@line 4513 "xmlparse.c"
        __label__ = 344; break; //@line 4513 "xmlparse.c"
      case 342: // $bb388
        $quant=2; //@line 4516 "xmlparse.c"
        __label__ = 344; break; //@line 4516 "xmlparse.c"
      case 343: // $bb389
        $quant=3; //@line 4519 "xmlparse.c"
        __label__ = 344; break; //@line 4520 "xmlparse.c"
      case 344: // $closeGroup
        var $2055=$dtd; //@line 4521 "xmlparse.c"
        var $2056=$2055+160; //@line 4521 "xmlparse.c"
        var $2057=HEAP[$2056]; //@line 4521 "xmlparse.c"
        var $2058=($2057)!=0; //@line 4521 "xmlparse.c"
        if ($2058) { __label__ = 345; break; } else { __label__ = 373; break; } //@line 4521 "xmlparse.c"
      case 345: // $bb390
        var $2059=$parser_addr; //@line 4522 "xmlparse.c"
        var $2060=$2059+128; //@line 4522 "xmlparse.c"
        var $2061=HEAP[$2060]; //@line 4522 "xmlparse.c"
        var $2062=($2061)!=0; //@line 4522 "xmlparse.c"
        if ($2062) { __label__ = 346; break; } else { __label__ = 347; break; } //@line 4522 "xmlparse.c"
      case 346: // $bb391
        $handleDefault=0; //@line 4523 "xmlparse.c"
        __label__ = 347; break; //@line 4523 "xmlparse.c"
      case 347: // $bb392
        var $2063=$dtd; //@line 4524 "xmlparse.c"
        var $2064=$2063+180; //@line 4524 "xmlparse.c"
        var $2065=HEAP[$2064]; //@line 4524 "xmlparse.c"
        var $2066=($2065) - 1; //@line 4524 "xmlparse.c"
        var $2067=$dtd; //@line 4524 "xmlparse.c"
        var $2068=$2067+180; //@line 4524 "xmlparse.c"
        HEAP[$2068]=$2066; //@line 4524 "xmlparse.c"
        var $2069=$dtd; //@line 4525 "xmlparse.c"
        var $2070=$2069+164; //@line 4525 "xmlparse.c"
        var $2071=HEAP[$2070]; //@line 4525 "xmlparse.c"
        var $2072=$dtd; //@line 4525 "xmlparse.c"
        var $2073=$2072+184; //@line 4525 "xmlparse.c"
        var $2074=HEAP[$2073]; //@line 4525 "xmlparse.c"
        var $2075=$dtd; //@line 4525 "xmlparse.c"
        var $2076=$2075+180; //@line 4525 "xmlparse.c"
        var $2077=HEAP[$2076]; //@line 4525 "xmlparse.c"
        var $2078=$2074+4*$2077; //@line 4525 "xmlparse.c"
        var $2079=HEAP[$2078]; //@line 4525 "xmlparse.c"
        var $2080=$2071+28*$2079; //@line 4525 "xmlparse.c"
        var $2081=$2080+4; //@line 4525 "xmlparse.c"
        var $2082=$quant; //@line 4525 "xmlparse.c"
        HEAP[$2081]=$2082; //@line 4525 "xmlparse.c"
        var $2083=$dtd; //@line 4526 "xmlparse.c"
        var $2084=$2083+180; //@line 4526 "xmlparse.c"
        var $2085=HEAP[$2084]; //@line 4526 "xmlparse.c"
        var $2086=($2085)==0; //@line 4526 "xmlparse.c"
        if ($2086) { __label__ = 348; break; } else { __label__ = 373; break; } //@line 4526 "xmlparse.c"
      case 348: // $bb393
        var $2087=$handleDefault; //@line 4527 "xmlparse.c"
        var $2088=($2087)==0; //@line 4527 "xmlparse.c"
        if ($2088) { __label__ = 349; break; } else { __label__ = 352; break; } //@line 4527 "xmlparse.c"
      case 349: // $bb394
        var $2089=$parser_addr; //@line 4528 "xmlparse.c"
        var $2090=_build_model($2089); //@line 4528 "xmlparse.c"
        $model=$2090; //@line 4528 "xmlparse.c"
        var $2091=$model; //@line 4529 "xmlparse.c"
        var $2092=($2091)==0; //@line 4529 "xmlparse.c"
        if ($2092) { __label__ = 350; break; } else { __label__ = 351; break; } //@line 4529 "xmlparse.c"
      case 350: // $bb395
        $0=1; //@line 4530 "xmlparse.c"
        __label__ = 380; break; //@line 4530 "xmlparse.c"
      case 351: // $bb396
        var $2093=$eventEndPP; //@line 4531 "xmlparse.c"
        var $2094=$s_addr; //@line 4531 "xmlparse.c"
        HEAP[$2093]=$2094; //@line 4531 "xmlparse.c"
        var $2095=$parser_addr; //@line 4532 "xmlparse.c"
        var $2096=$2095+128; //@line 4532 "xmlparse.c"
        var $2097=HEAP[$2096]; //@line 4532 "xmlparse.c"
        var $2098=$parser_addr; //@line 4532 "xmlparse.c"
        var $2099=$2098+344; //@line 4532 "xmlparse.c"
        var $2100=HEAP[$2099]; //@line 4532 "xmlparse.c"
        var $2101=$2100; //@line 4532 "xmlparse.c"
        var $2102=HEAP[$2101]; //@line 4532 "xmlparse.c"
        var $2103=$parser_addr; //@line 4532 "xmlparse.c"
        var $2104=$2103+4; //@line 4532 "xmlparse.c"
        var $2105=HEAP[$2104]; //@line 4532 "xmlparse.c"
        var $2106=$model; //@line 4532 "xmlparse.c"
        FUNCTION_TABLE[$2097]($2105, $2102, $2106); //@line 4532 "xmlparse.c"
        __label__ = 352; break; //@line 4532 "xmlparse.c"
      case 352: // $bb397
        var $2107=$dtd; //@line 4534 "xmlparse.c"
        var $2108=$2107+160; //@line 4534 "xmlparse.c"
        HEAP[$2108]=0; //@line 4534 "xmlparse.c"
        var $2109=$dtd; //@line 4535 "xmlparse.c"
        var $2110=$2109+168; //@line 4535 "xmlparse.c"
        HEAP[$2110]=0; //@line 4535 "xmlparse.c"
        __label__ = 373; break; //@line 4535 "xmlparse.c"
      case 353: // $bb399
        var $2111=HEAP[$next_addr]; //@line 4542 "xmlparse.c"
        var $2112=$parser_addr; //@line 4542 "xmlparse.c"
        var $2113=$enc_addr; //@line 4542 "xmlparse.c"
        var $2114=$s_addr; //@line 4542 "xmlparse.c"
        var $2115=_reportProcessingInstruction($2112, $2113, $2114, $2111); //@line 4542 "xmlparse.c"
        var $2116=($2115)==0; //@line 4542 "xmlparse.c"
        if ($2116) { __label__ = 354; break; } else { __label__ = 355; break; } //@line 4542 "xmlparse.c"
      case 354: // $bb400
        $0=1; //@line 4543 "xmlparse.c"
        __label__ = 380; break; //@line 4543 "xmlparse.c"
      case 355: // $bb401
        $handleDefault=0; //@line 4544 "xmlparse.c"
        __label__ = 376; break; //@line 4544 "xmlparse.c"
      case 356: // $bb402
        var $2117=HEAP[$next_addr]; //@line 4547 "xmlparse.c"
        var $2118=$parser_addr; //@line 4547 "xmlparse.c"
        var $2119=$enc_addr; //@line 4547 "xmlparse.c"
        var $2120=$s_addr; //@line 4547 "xmlparse.c"
        var $2121=_reportComment($2118, $2119, $2120, $2117); //@line 4547 "xmlparse.c"
        var $2122=($2121)==0; //@line 4547 "xmlparse.c"
        if ($2122) { __label__ = 357; break; } else { __label__ = 358; break; } //@line 4547 "xmlparse.c"
      case 357: // $bb403
        $0=1; //@line 4548 "xmlparse.c"
        __label__ = 380; break; //@line 4548 "xmlparse.c"
      case 358: // $bb404
        $handleDefault=0; //@line 4549 "xmlparse.c"
        __label__ = 376; break; //@line 4549 "xmlparse.c"
      case 359: // $bb405
        var $2123=$tok_addr; //@line 4552 "xmlparse.c"
        var $cond=($2123)==14;
        if ($cond) { __label__ = 360; break; } else { __label__ = 373; break; }
      case 360: // $bb406
        $handleDefault=0; //@line 4554 "xmlparse.c"
        __label__ = 376; break; //@line 4554 "xmlparse.c"
      case 361: // $bb408
        var $2124=$parser_addr; //@line 4559 "xmlparse.c"
        var $2125=$2124+84; //@line 4559 "xmlparse.c"
        var $2126=HEAP[$2125]; //@line 4559 "xmlparse.c"
        var $2127=($2126)!=0; //@line 4559 "xmlparse.c"
        if ($2127) { __label__ = 362; break; } else { __label__ = 373; break; } //@line 4559 "xmlparse.c"
      case 362: // $bb409
        $handleDefault=0; //@line 4560 "xmlparse.c"
        __label__ = 376; break; //@line 4560 "xmlparse.c"
      case 363: // $bb411
        var $2128=$dtd; //@line 4563 "xmlparse.c"
        var $2129=$2128+128; //@line 4563 "xmlparse.c"
        var $2130=HEAP[$2129]; //@line 4563 "xmlparse.c"
        var $2131=($2130)!=0; //@line 4563 "xmlparse.c"
        if ($2131) { __label__ = 364; break; } else { __label__ = 373; break; } //@line 4563 "xmlparse.c"
      case 364: // $bb412
        var $2132=$parser_addr; //@line 4563 "xmlparse.c"
        var $2133=$2132+136; //@line 4563 "xmlparse.c"
        var $2134=HEAP[$2133]; //@line 4563 "xmlparse.c"
        var $2135=($2134)!=0; //@line 4563 "xmlparse.c"
        if ($2135) { __label__ = 365; break; } else { __label__ = 373; break; } //@line 4563 "xmlparse.c"
      case 365: // $bb413
        $handleDefault=0; //@line 4564 "xmlparse.c"
        __label__ = 376; break; //@line 4564 "xmlparse.c"
      case 366: // $bb415
        var $2136=$parser_addr; //@line 4567 "xmlparse.c"
        var $2137=$2136+96; //@line 4567 "xmlparse.c"
        var $2138=HEAP[$2137]; //@line 4567 "xmlparse.c"
        var $2139=($2138)!=0; //@line 4567 "xmlparse.c"
        if ($2139) { __label__ = 367; break; } else { __label__ = 373; break; } //@line 4567 "xmlparse.c"
      case 367: // $bb416
        $handleDefault=0; //@line 4568 "xmlparse.c"
        __label__ = 376; break; //@line 4568 "xmlparse.c"
      case 368: // $bb418
        var $2140=$dtd; //@line 4571 "xmlparse.c"
        var $2141=$2140+128; //@line 4571 "xmlparse.c"
        var $2142=HEAP[$2141]; //@line 4571 "xmlparse.c"
        var $2143=($2142)!=0; //@line 4571 "xmlparse.c"
        if ($2143) { __label__ = 369; break; } else { __label__ = 373; break; } //@line 4571 "xmlparse.c"
      case 369: // $bb419
        var $2144=$parser_addr; //@line 4571 "xmlparse.c"
        var $2145=$2144+132; //@line 4571 "xmlparse.c"
        var $2146=HEAP[$2145]; //@line 4571 "xmlparse.c"
        var $2147=($2146)!=0; //@line 4571 "xmlparse.c"
        if ($2147) { __label__ = 370; break; } else { __label__ = 373; break; } //@line 4571 "xmlparse.c"
      case 370: // $bb420
        $handleDefault=0; //@line 4572 "xmlparse.c"
        __label__ = 376; break; //@line 4572 "xmlparse.c"
      case 371: // $bb422
        var $2148=$parser_addr; //@line 4575 "xmlparse.c"
        var $2149=$2148+128; //@line 4575 "xmlparse.c"
        var $2150=HEAP[$2149]; //@line 4575 "xmlparse.c"
        var $2151=($2150)!=0; //@line 4575 "xmlparse.c"
        if ($2151) { __label__ = 372; break; } else { __label__ = 373; break; } //@line 4575 "xmlparse.c"
      case 372: // $bb423
        $handleDefault=0; //@line 4576 "xmlparse.c"
        __label__ = 376; break; //@line 4576 "xmlparse.c"
      case 373: // $bb424
        var $_pr1=$handleDefault;
        var $2152=($_pr1)!=0; //@line 4580 "xmlparse.c"
        if ($2152) { __label__ = 374; break; } else { __label__ = 376; break; } //@line 4580 "xmlparse.c"
      case 374: // $bb425
        var $2153=$parser_addr; //@line 4580 "xmlparse.c"
        var $2154=$2153+80; //@line 4580 "xmlparse.c"
        var $2155=HEAP[$2154]; //@line 4580 "xmlparse.c"
        var $2156=($2155)!=0; //@line 4580 "xmlparse.c"
        if ($2156) { __label__ = 375; break; } else { __label__ = 376; break; } //@line 4580 "xmlparse.c"
      case 375: // $bb426
        var $2157=HEAP[$next_addr]; //@line 4581 "xmlparse.c"
        var $2158=$parser_addr; //@line 4581 "xmlparse.c"
        var $2159=$enc_addr; //@line 4581 "xmlparse.c"
        var $2160=$s_addr; //@line 4581 "xmlparse.c"
        _reportDefault($2158, $2159, $2160, $2157); //@line 4581 "xmlparse.c"
        __label__ = 376; break; //@line 4581 "xmlparse.c"
      case 376: // $bb427
        var $2161=$parser_addr; //@line 4583 "xmlparse.c"
        var $2162=$2161+480; //@line 4583 "xmlparse.c"
        var $2163=$2162; //@line 4583 "xmlparse.c"
        var $2164=HEAP[$2163]; //@line 4583 "xmlparse.c"
        if ($2164 == 2) {
          __label__ = 378; break;
        }
        else if ($2164 == 3) {
          __label__ = 377; break;
        }
        else {
        __label__ = 379; break;
        }
        
      case 377: // $bb428
        var $2165=HEAP[$next_addr]; //@line 4585 "xmlparse.c"
        var $2166=$nextPtr_addr; //@line 4585 "xmlparse.c"
        HEAP[$2166]=$2165; //@line 4585 "xmlparse.c"
        $0=0; //@line 4586 "xmlparse.c"
        __label__ = 380; break; //@line 4586 "xmlparse.c"
      case 378: // $bb429
        $0=35; //@line 4588 "xmlparse.c"
        __label__ = 380; break; //@line 4588 "xmlparse.c"
      case 379: // $bb430
        var $2167=HEAP[$next_addr]; //@line 4590 "xmlparse.c"
        $s_addr=$2167; //@line 4590 "xmlparse.c"
        var $2168=$enc_addr; //@line 4591 "xmlparse.c"
        var $2169=$2168; //@line 4591 "xmlparse.c"
        var $2170=$2169; //@line 4591 "xmlparse.c"
        var $2171=HEAP[$2170]; //@line 4591 "xmlparse.c"
        var $2172=$enc_addr; //@line 4591 "xmlparse.c"
        var $2173=$s_addr; //@line 4591 "xmlparse.c"
        var $2174=$end_addr; //@line 4591 "xmlparse.c"
        var $2175=FUNCTION_TABLE[$2171]($2172, $2173, $2174, $next_addr); //@line 4591 "xmlparse.c"
        $tok_addr=$2175; //@line 4591 "xmlparse.c"
        __label__ = 3; break; //@line 4591 "xmlparse.c"
      case 380: // $bb431
        var $2176=$0; //@line 3675 "xmlparse.c"
        $retval=$2176; //@line 3675 "xmlparse.c"
        var $retval432=$retval; //@line 3675 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval432; //@line 3675 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _epilogProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $s_addr;
        var $end_addr;
        var $nextPtr_addr;
        var $retval;
        var $0;
        var $next=__stackBase__;
        var $tok;
        $parser_addr=$parser;
        $s_addr=$s;
        $end_addr=$end;
        $nextPtr_addr=$nextPtr;
        var $1=$parser_addr; //@line 4603 "xmlparse.c"
        var $2=$1+280; //@line 4603 "xmlparse.c"
        HEAP[$2]=(FUNCTION_TABLE_OFFSET + 88); //@line 4603 "xmlparse.c"
        var $3=$parser_addr; //@line 4604 "xmlparse.c"
        var $4=$3+288; //@line 4604 "xmlparse.c"
        var $5=$s_addr; //@line 4604 "xmlparse.c"
        HEAP[$4]=$5; //@line 4604 "xmlparse.c"
        __label__ = 1; break; //@line 4604 "xmlparse.c"
      case 1: // $bb
        HEAP[$next]=0; //@line 4606 "xmlparse.c"
        var $6=$parser_addr; //@line 4607 "xmlparse.c"
        var $7=$6+144; //@line 4607 "xmlparse.c"
        var $8=HEAP[$7]; //@line 4607 "xmlparse.c"
        var $9=$8; //@line 4607 "xmlparse.c"
        var $10=$9; //@line 4607 "xmlparse.c"
        var $11=HEAP[$10]; //@line 4607 "xmlparse.c"
        var $12=$parser_addr; //@line 4607 "xmlparse.c"
        var $13=$12+144; //@line 4607 "xmlparse.c"
        var $14=HEAP[$13]; //@line 4607 "xmlparse.c"
        var $15=$s_addr; //@line 4607 "xmlparse.c"
        var $16=$end_addr; //@line 4607 "xmlparse.c"
        var $17=FUNCTION_TABLE[$11]($14, $15, $16, $next); //@line 4607 "xmlparse.c"
        $tok=$17; //@line 4607 "xmlparse.c"
        var $18=HEAP[$next]; //@line 4608 "xmlparse.c"
        var $19=$parser_addr; //@line 4608 "xmlparse.c"
        var $20=$19+292; //@line 4608 "xmlparse.c"
        HEAP[$20]=$18; //@line 4608 "xmlparse.c"
        var $21=$tok; //@line 4609 "xmlparse.c"
        if ($21 == -15) {
          __label__ = 2; break;
        }
        else if ($21 == -4) {
          __label__ = 6; break;
        }
        else if ($21 == -2) {
          __label__ = 17; break;
        }
        else if ($21 == -1) {
          __label__ = 14; break;
        }
        else if ($21 == 0) {
          __label__ = 13; break;
        }
        else if ($21 == 11) {
          __label__ = 9; break;
        }
        else if ($21 == 13) {
          __label__ = 11; break;
        }
        else if ($21 == 15) {
          __label__ = 7; break;
        }
        else {
        __label__ = 20; break;
        }
        
      case 2: // $bb1
        var $22=$parser_addr; //@line 4612 "xmlparse.c"
        var $23=$22+80; //@line 4612 "xmlparse.c"
        var $24=HEAP[$23]; //@line 4612 "xmlparse.c"
        var $25=($24)!=0; //@line 4612 "xmlparse.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 4612 "xmlparse.c"
      case 3: // $bb2
        var $26=HEAP[$next]; //@line 4613 "xmlparse.c"
        var $27=$parser_addr; //@line 4613 "xmlparse.c"
        var $28=$27+144; //@line 4613 "xmlparse.c"
        var $29=HEAP[$28]; //@line 4613 "xmlparse.c"
        var $30=$parser_addr; //@line 4613 "xmlparse.c"
        var $31=$s_addr; //@line 4613 "xmlparse.c"
        _reportDefault($30, $29, $31, $26); //@line 4613 "xmlparse.c"
        var $32=$parser_addr; //@line 4614 "xmlparse.c"
        var $33=$32+480; //@line 4614 "xmlparse.c"
        var $34=$33; //@line 4614 "xmlparse.c"
        var $35=HEAP[$34]; //@line 4614 "xmlparse.c"
        var $36=($35)==2; //@line 4614 "xmlparse.c"
        if ($36) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4614 "xmlparse.c"
      case 4: // $bb3
        $0=35; //@line 4615 "xmlparse.c"
        __label__ = 24; break; //@line 4615 "xmlparse.c"
      case 5: // $bb4
        var $37=HEAP[$next]; //@line 4617 "xmlparse.c"
        var $38=$nextPtr_addr; //@line 4617 "xmlparse.c"
        HEAP[$38]=$37; //@line 4617 "xmlparse.c"
        $0=0; //@line 4618 "xmlparse.c"
        __label__ = 24; break; //@line 4618 "xmlparse.c"
      case 6: // $bb5
        var $39=$nextPtr_addr; //@line 4620 "xmlparse.c"
        var $40=$s_addr; //@line 4620 "xmlparse.c"
        HEAP[$39]=$40; //@line 4620 "xmlparse.c"
        $0=0; //@line 4621 "xmlparse.c"
        __label__ = 24; break; //@line 4621 "xmlparse.c"
      case 7: // $bb6
        var $41=$parser_addr; //@line 4623 "xmlparse.c"
        var $42=$41+80; //@line 4623 "xmlparse.c"
        var $43=HEAP[$42]; //@line 4623 "xmlparse.c"
        var $44=($43)!=0; //@line 4623 "xmlparse.c"
        if ($44) { __label__ = 8; break; } else { __label__ = 21; break; } //@line 4623 "xmlparse.c"
      case 8: // $bb7
        var $45=HEAP[$next]; //@line 4624 "xmlparse.c"
        var $46=$parser_addr; //@line 4624 "xmlparse.c"
        var $47=$46+144; //@line 4624 "xmlparse.c"
        var $48=HEAP[$47]; //@line 4624 "xmlparse.c"
        var $49=$parser_addr; //@line 4624 "xmlparse.c"
        var $50=$s_addr; //@line 4624 "xmlparse.c"
        _reportDefault($49, $48, $50, $45); //@line 4624 "xmlparse.c"
        __label__ = 21; break; //@line 4624 "xmlparse.c"
      case 9: // $bb9
        var $51=HEAP[$next]; //@line 4627 "xmlparse.c"
        var $52=$parser_addr; //@line 4627 "xmlparse.c"
        var $53=$52+144; //@line 4627 "xmlparse.c"
        var $54=HEAP[$53]; //@line 4627 "xmlparse.c"
        var $55=$parser_addr; //@line 4627 "xmlparse.c"
        var $56=$s_addr; //@line 4627 "xmlparse.c"
        var $57=_reportProcessingInstruction($55, $54, $56, $51); //@line 4627 "xmlparse.c"
        var $58=($57)==0; //@line 4627 "xmlparse.c"
        if ($58) { __label__ = 10; break; } else { __label__ = 21; break; } //@line 4627 "xmlparse.c"
      case 10: // $bb10
        $0=1; //@line 4628 "xmlparse.c"
        __label__ = 24; break; //@line 4628 "xmlparse.c"
      case 11: // $bb12
        var $59=HEAP[$next]; //@line 4631 "xmlparse.c"
        var $60=$parser_addr; //@line 4631 "xmlparse.c"
        var $61=$60+144; //@line 4631 "xmlparse.c"
        var $62=HEAP[$61]; //@line 4631 "xmlparse.c"
        var $63=$parser_addr; //@line 4631 "xmlparse.c"
        var $64=$s_addr; //@line 4631 "xmlparse.c"
        var $65=_reportComment($63, $62, $64, $59); //@line 4631 "xmlparse.c"
        var $66=($65)==0; //@line 4631 "xmlparse.c"
        if ($66) { __label__ = 12; break; } else { __label__ = 21; break; } //@line 4631 "xmlparse.c"
      case 12: // $bb13
        $0=1; //@line 4632 "xmlparse.c"
        __label__ = 24; break; //@line 4632 "xmlparse.c"
      case 13: // $bb15
        var $67=HEAP[$next]; //@line 4635 "xmlparse.c"
        var $68=$parser_addr; //@line 4635 "xmlparse.c"
        var $69=$68+288; //@line 4635 "xmlparse.c"
        HEAP[$69]=$67; //@line 4635 "xmlparse.c"
        $0=4; //@line 4636 "xmlparse.c"
        __label__ = 24; break; //@line 4636 "xmlparse.c"
      case 14: // $bb16
        var $70=$parser_addr; //@line 4638 "xmlparse.c"
        var $71=$70+480; //@line 4638 "xmlparse.c"
        var $72=$71+4; //@line 4638 "xmlparse.c"
        var $73=HEAP[$72]; //@line 4638 "xmlparse.c"
        var $74=($73)==0; //@line 4638 "xmlparse.c"
        if ($74) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4638 "xmlparse.c"
      case 15: // $bb17
        var $75=$nextPtr_addr; //@line 4639 "xmlparse.c"
        var $76=$s_addr; //@line 4639 "xmlparse.c"
        HEAP[$75]=$76; //@line 4639 "xmlparse.c"
        $0=0; //@line 4640 "xmlparse.c"
        __label__ = 24; break; //@line 4640 "xmlparse.c"
      case 16: // $bb18
        $0=5; //@line 4642 "xmlparse.c"
        __label__ = 24; break; //@line 4642 "xmlparse.c"
      case 17: // $bb19
        var $77=$parser_addr; //@line 4644 "xmlparse.c"
        var $78=$77+480; //@line 4644 "xmlparse.c"
        var $79=$78+4; //@line 4644 "xmlparse.c"
        var $80=HEAP[$79]; //@line 4644 "xmlparse.c"
        var $81=($80)==0; //@line 4644 "xmlparse.c"
        if ($81) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 4644 "xmlparse.c"
      case 18: // $bb20
        var $82=$nextPtr_addr; //@line 4645 "xmlparse.c"
        var $83=$s_addr; //@line 4645 "xmlparse.c"
        HEAP[$82]=$83; //@line 4645 "xmlparse.c"
        $0=0; //@line 4646 "xmlparse.c"
        __label__ = 24; break; //@line 4646 "xmlparse.c"
      case 19: // $bb21
        $0=6; //@line 4648 "xmlparse.c"
        __label__ = 24; break; //@line 4648 "xmlparse.c"
      case 20: // $bb22
        $0=9; //@line 4650 "xmlparse.c"
        __label__ = 24; break; //@line 4650 "xmlparse.c"
      case 21: // $bb23
        var $84=HEAP[$next]; //@line 4652 "xmlparse.c"
        $s_addr=$84; //@line 4652 "xmlparse.c"
        var $85=$parser_addr; //@line 4652 "xmlparse.c"
        var $86=$85+288; //@line 4652 "xmlparse.c"
        var $87=$s_addr; //@line 4652 "xmlparse.c"
        HEAP[$86]=$87; //@line 4652 "xmlparse.c"
        var $88=$parser_addr; //@line 4653 "xmlparse.c"
        var $89=$88+480; //@line 4653 "xmlparse.c"
        var $90=$89; //@line 4653 "xmlparse.c"
        var $91=HEAP[$90]; //@line 4653 "xmlparse.c"
        if ($91 == 2) {
          __label__ = 23; break;
        }
        else if ($91 == 3) {
          __label__ = 22; break;
        }
        else {
        __label__ = 1; break;
        }
        
      case 22: // $bb24
        var $92=HEAP[$next]; //@line 4655 "xmlparse.c"
        var $93=$nextPtr_addr; //@line 4655 "xmlparse.c"
        HEAP[$93]=$92; //@line 4655 "xmlparse.c"
        $0=0; //@line 4656 "xmlparse.c"
        __label__ = 24; break; //@line 4656 "xmlparse.c"
      case 23: // $bb25
        $0=35; //@line 4658 "xmlparse.c"
        __label__ = 24; break; //@line 4658 "xmlparse.c"
      case 24: // $bb27
        var $94=$0; //@line 4615 "xmlparse.c"
        $retval=$94; //@line 4615 "xmlparse.c"
        var $retval28=$retval; //@line 4615 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval28; //@line 4615 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _processInternalEntity($parser, $entity, $betweenDecl) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $entity_addr;
        var $betweenDecl_addr;
        var $retval;
        var $0;
        var $textStart;
        var $textEnd;
        var $next=__stackBase__;
        var $result;
        var $openEntity;
        var $tok;
        $parser_addr=$parser;
        $entity_addr=$entity;
        $betweenDecl_addr=$betweenDecl;
        var $1=$parser_addr; //@line 4673 "xmlparse.c"
        var $2=$1+304; //@line 4673 "xmlparse.c"
        var $3=HEAP[$2]; //@line 4673 "xmlparse.c"
        var $4=($3)!=0; //@line 4673 "xmlparse.c"
        var $5=$parser_addr; //@line 4674 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4673 "xmlparse.c"
      case 1: // $bb
        var $6=$5+304; //@line 4674 "xmlparse.c"
        var $7=HEAP[$6]; //@line 4674 "xmlparse.c"
        $openEntity=$7; //@line 4674 "xmlparse.c"
        var $8=$openEntity; //@line 4675 "xmlparse.c"
        var $9=$8+8; //@line 4675 "xmlparse.c"
        var $10=HEAP[$9]; //@line 4675 "xmlparse.c"
        var $11=$parser_addr; //@line 4675 "xmlparse.c"
        var $12=$11+304; //@line 4675 "xmlparse.c"
        HEAP[$12]=$10; //@line 4675 "xmlparse.c"
        __label__ = 4; break; //@line 4675 "xmlparse.c"
      case 2: // $bb1
        var $13=$5+12; //@line 4678 "xmlparse.c"
        var $14=$13; //@line 4678 "xmlparse.c"
        var $15=HEAP[$14]; //@line 4678 "xmlparse.c"
        var $16=FUNCTION_TABLE[$15](24); //@line 4678 "xmlparse.c"
        var $17=$16; //@line 4678 "xmlparse.c"
        $openEntity=$17; //@line 4678 "xmlparse.c"
        var $18=$openEntity; //@line 4679 "xmlparse.c"
        var $19=($18)==0; //@line 4679 "xmlparse.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4679 "xmlparse.c"
      case 3: // $bb2
        $0=1; //@line 4680 "xmlparse.c"
        __label__ = 13; break; //@line 4680 "xmlparse.c"
      case 4: // $bb3
        var $20=$entity_addr; //@line 4682 "xmlparse.c"
        var $21=$20+32; //@line 4682 "xmlparse.c"
        HEAP[$21]=1; //@line 4682 "xmlparse.c"
        var $22=$entity_addr; //@line 4683 "xmlparse.c"
        var $23=$22+12; //@line 4683 "xmlparse.c"
        HEAP[$23]=0; //@line 4683 "xmlparse.c"
        var $24=$parser_addr; //@line 4684 "xmlparse.c"
        var $25=$24+300; //@line 4684 "xmlparse.c"
        var $26=HEAP[$25]; //@line 4684 "xmlparse.c"
        var $27=$openEntity; //@line 4684 "xmlparse.c"
        var $28=$27+8; //@line 4684 "xmlparse.c"
        HEAP[$28]=$26; //@line 4684 "xmlparse.c"
        var $29=$parser_addr; //@line 4685 "xmlparse.c"
        var $30=$29+300; //@line 4685 "xmlparse.c"
        var $31=$openEntity; //@line 4685 "xmlparse.c"
        HEAP[$30]=$31; //@line 4685 "xmlparse.c"
        var $32=$openEntity; //@line 4686 "xmlparse.c"
        var $33=$32+12; //@line 4686 "xmlparse.c"
        var $34=$entity_addr; //@line 4686 "xmlparse.c"
        HEAP[$33]=$34; //@line 4686 "xmlparse.c"
        var $35=$parser_addr; //@line 4687 "xmlparse.c"
        var $36=$35+312; //@line 4687 "xmlparse.c"
        var $37=HEAP[$36]; //@line 4687 "xmlparse.c"
        var $38=$openEntity; //@line 4687 "xmlparse.c"
        var $39=$38+16; //@line 4687 "xmlparse.c"
        HEAP[$39]=$37; //@line 4687 "xmlparse.c"
        var $40=$openEntity; //@line 4688 "xmlparse.c"
        var $41=$40+20; //@line 4688 "xmlparse.c"
        var $42=$betweenDecl_addr; //@line 4688 "xmlparse.c"
        HEAP[$41]=$42; //@line 4688 "xmlparse.c"
        var $43=$openEntity; //@line 4689 "xmlparse.c"
        var $44=$43; //@line 4689 "xmlparse.c"
        HEAP[$44]=0; //@line 4689 "xmlparse.c"
        var $45=$openEntity; //@line 4690 "xmlparse.c"
        var $46=$45+4; //@line 4690 "xmlparse.c"
        HEAP[$46]=0; //@line 4690 "xmlparse.c"
        var $47=$entity_addr; //@line 4691 "xmlparse.c"
        var $48=$47+4; //@line 4691 "xmlparse.c"
        var $49=HEAP[$48]; //@line 4691 "xmlparse.c"
        $textStart=$49; //@line 4691 "xmlparse.c"
        var $50=$entity_addr; //@line 4692 "xmlparse.c"
        var $51=$50+4; //@line 4692 "xmlparse.c"
        var $52=HEAP[$51]; //@line 4692 "xmlparse.c"
        var $53=$entity_addr; //@line 4692 "xmlparse.c"
        var $54=$53+8; //@line 4692 "xmlparse.c"
        var $55=HEAP[$54]; //@line 4692 "xmlparse.c"
        var $56=$52+$55; //@line 4692 "xmlparse.c"
        $textEnd=$56; //@line 4692 "xmlparse.c"
        var $57=$entity_addr; //@line 4695 "xmlparse.c"
        var $58=$57+33; //@line 4695 "xmlparse.c"
        var $59=HEAP[$58]; //@line 4695 "xmlparse.c"
        var $60=($59)!=0; //@line 4695 "xmlparse.c"
        var $61=$parser_addr; //@line 4696 "xmlparse.c"
        var $62=$61+228; //@line 4696 "xmlparse.c"
        var $63=HEAP[$62]; //@line 4696 "xmlparse.c"
        if ($60) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4695 "xmlparse.c"
      case 5: // $bb4
        var $64=$63; //@line 4696 "xmlparse.c"
        var $65=$64; //@line 4696 "xmlparse.c"
        var $66=HEAP[$65]; //@line 4696 "xmlparse.c"
        var $67=$parser_addr; //@line 4696 "xmlparse.c"
        var $68=$67+228; //@line 4696 "xmlparse.c"
        var $69=HEAP[$68]; //@line 4696 "xmlparse.c"
        var $70=$textStart; //@line 4696 "xmlparse.c"
        var $71=$textEnd; //@line 4696 "xmlparse.c"
        var $72=FUNCTION_TABLE[$66]($69, $70, $71, $next); //@line 4696 "xmlparse.c"
        $tok=$72; //@line 4696 "xmlparse.c"
        var $73=HEAP[$next]; //@line 4697 "xmlparse.c"
        var $74=$parser_addr; //@line 4697 "xmlparse.c"
        var $75=$74+228; //@line 4697 "xmlparse.c"
        var $76=HEAP[$75]; //@line 4697 "xmlparse.c"
        var $77=$parser_addr; //@line 4697 "xmlparse.c"
        var $78=$textStart; //@line 4697 "xmlparse.c"
        var $79=$textEnd; //@line 4697 "xmlparse.c"
        var $80=$tok; //@line 4697 "xmlparse.c"
        var $81=_doProlog($77, $76, $78, $79, $80, $73, $next, 0); //@line 4697 "xmlparse.c"
        $result=$81; //@line 4697 "xmlparse.c"
        __lastLabel__ = 5; __label__ = 7; break; //@line 4697 "xmlparse.c"
      case 6: // $bb5
        var $82=$parser_addr; //@line 4702 "xmlparse.c"
        var $83=$82+312; //@line 4702 "xmlparse.c"
        var $84=HEAP[$83]; //@line 4702 "xmlparse.c"
        var $85=$parser_addr; //@line 4702 "xmlparse.c"
        var $86=$textStart; //@line 4702 "xmlparse.c"
        var $87=$textEnd; //@line 4702 "xmlparse.c"
        var $88=_doContent($85, $84, $63, $86, $87, $next, 0); //@line 4702 "xmlparse.c"
        $result=$88; //@line 4702 "xmlparse.c"
        __lastLabel__ = 6; __label__ = 7; break; //@line 4702 "xmlparse.c"
      case 7: // $bb6
        var $89=__lastLabel__ == 6 ? $88 : ($81);
        var $90=($89)==0; //@line 4705 "xmlparse.c"
        if ($90) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 4705 "xmlparse.c"
      case 8: // $bb7
        var $91=HEAP[$next]; //@line 4706 "xmlparse.c"
        var $92=$textEnd; //@line 4706 "xmlparse.c"
        var $93=($92)==($91); //@line 4706 "xmlparse.c"
        if ($93) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 4706 "xmlparse.c"
      case 9: // $bb8
        var $94=$parser_addr; //@line 4706 "xmlparse.c"
        var $95=$94+480; //@line 4706 "xmlparse.c"
        var $96=$95; //@line 4706 "xmlparse.c"
        var $97=HEAP[$96]; //@line 4706 "xmlparse.c"
        var $98=($97)!=3; //@line 4706 "xmlparse.c"
        if ($98) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 4706 "xmlparse.c"
      case 10: // $bb9
        var $99=HEAP[$next]; //@line 4707 "xmlparse.c"
        var $100=($99); //@line 4707 "xmlparse.c"
        var $101=$textStart; //@line 4707 "xmlparse.c"
        var $102=($101); //@line 4707 "xmlparse.c"
        var $103=($100) - ($102); //@line 4707 "xmlparse.c"
        var $104=$entity_addr; //@line 4707 "xmlparse.c"
        var $105=$104+12; //@line 4707 "xmlparse.c"
        HEAP[$105]=$103; //@line 4707 "xmlparse.c"
        var $106=$parser_addr; //@line 4708 "xmlparse.c"
        var $107=$106+280; //@line 4708 "xmlparse.c"
        HEAP[$107]=(FUNCTION_TABLE_OFFSET + 90); //@line 4708 "xmlparse.c"
        __label__ = 12; break; //@line 4708 "xmlparse.c"
      case 11: // $bb10
        var $108=$entity_addr; //@line 4711 "xmlparse.c"
        var $109=$108+32; //@line 4711 "xmlparse.c"
        HEAP[$109]=0; //@line 4711 "xmlparse.c"
        var $110=$openEntity; //@line 4712 "xmlparse.c"
        var $111=$110+8; //@line 4712 "xmlparse.c"
        var $112=HEAP[$111]; //@line 4712 "xmlparse.c"
        var $113=$parser_addr; //@line 4712 "xmlparse.c"
        var $114=$113+300; //@line 4712 "xmlparse.c"
        HEAP[$114]=$112; //@line 4712 "xmlparse.c"
        var $115=$parser_addr; //@line 4714 "xmlparse.c"
        var $116=$115+304; //@line 4714 "xmlparse.c"
        var $117=HEAP[$116]; //@line 4714 "xmlparse.c"
        var $118=$openEntity; //@line 4714 "xmlparse.c"
        var $119=$118+8; //@line 4714 "xmlparse.c"
        HEAP[$119]=$117; //@line 4714 "xmlparse.c"
        var $120=$parser_addr; //@line 4715 "xmlparse.c"
        var $121=$120+304; //@line 4715 "xmlparse.c"
        var $122=$openEntity; //@line 4715 "xmlparse.c"
        HEAP[$121]=$122; //@line 4715 "xmlparse.c"
        __label__ = 12; break; //@line 4715 "xmlparse.c"
      case 12: // $bb11
        var $123=$result; //@line 4718 "xmlparse.c"
        $0=$123; //@line 4718 "xmlparse.c"
        __label__ = 13; break; //@line 4718 "xmlparse.c"
      case 13: // $bb12
        var $124=$0; //@line 4680 "xmlparse.c"
        $retval=$124; //@line 4680 "xmlparse.c"
        var $retval13=$retval; //@line 4680 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 4680 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _internalEntityProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $s_addr;
        var $end_addr;
        var $nextPtr_addr;
        var $retval;
        var $0;
        var $entity;
        var $textStart;
        var $textEnd;
        var $next=__stackBase__;
        var $result;
        var $openEntity;
        var $tok;
        var $tok11;
        $parser_addr=$parser;
        $s_addr=$s;
        $end_addr=$end;
        $nextPtr_addr=$nextPtr;
        var $1=$parser_addr; //@line 4731 "xmlparse.c"
        var $2=$1+300; //@line 4731 "xmlparse.c"
        var $3=HEAP[$2]; //@line 4731 "xmlparse.c"
        $openEntity=$3; //@line 4731 "xmlparse.c"
        var $4=$openEntity; //@line 4732 "xmlparse.c"
        var $5=($4)==0; //@line 4732 "xmlparse.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4732 "xmlparse.c"
      case 1: // $bb
        $0=23; //@line 4733 "xmlparse.c"
        __label__ = 13; break; //@line 4733 "xmlparse.c"
      case 2: // $bb1
        var $6=$openEntity; //@line 4735 "xmlparse.c"
        var $7=$6+12; //@line 4735 "xmlparse.c"
        var $8=HEAP[$7]; //@line 4735 "xmlparse.c"
        $entity=$8; //@line 4735 "xmlparse.c"
        var $9=$entity; //@line 4736 "xmlparse.c"
        var $10=$9+4; //@line 4736 "xmlparse.c"
        var $11=HEAP[$10]; //@line 4736 "xmlparse.c"
        var $12=$entity; //@line 4736 "xmlparse.c"
        var $13=$12+12; //@line 4736 "xmlparse.c"
        var $14=HEAP[$13]; //@line 4736 "xmlparse.c"
        var $15=$11+$14; //@line 4736 "xmlparse.c"
        $textStart=$15; //@line 4736 "xmlparse.c"
        var $16=$entity; //@line 4737 "xmlparse.c"
        var $17=$16+4; //@line 4737 "xmlparse.c"
        var $18=HEAP[$17]; //@line 4737 "xmlparse.c"
        var $19=$entity; //@line 4737 "xmlparse.c"
        var $20=$19+8; //@line 4737 "xmlparse.c"
        var $21=HEAP[$20]; //@line 4737 "xmlparse.c"
        var $22=$18+$21; //@line 4737 "xmlparse.c"
        $textEnd=$22; //@line 4737 "xmlparse.c"
        var $23=$entity; //@line 4740 "xmlparse.c"
        var $24=$23+33; //@line 4740 "xmlparse.c"
        var $25=HEAP[$24]; //@line 4740 "xmlparse.c"
        var $26=($25)!=0; //@line 4740 "xmlparse.c"
        var $27=$parser_addr; //@line 4741 "xmlparse.c"
        var $28=$27+228; //@line 4741 "xmlparse.c"
        var $29=HEAP[$28]; //@line 4741 "xmlparse.c"
        if ($26) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4740 "xmlparse.c"
      case 3: // $bb2
        var $30=$29; //@line 4741 "xmlparse.c"
        var $31=$30; //@line 4741 "xmlparse.c"
        var $32=HEAP[$31]; //@line 4741 "xmlparse.c"
        var $33=$parser_addr; //@line 4741 "xmlparse.c"
        var $34=$33+228; //@line 4741 "xmlparse.c"
        var $35=HEAP[$34]; //@line 4741 "xmlparse.c"
        var $36=$textStart; //@line 4741 "xmlparse.c"
        var $37=$textEnd; //@line 4741 "xmlparse.c"
        var $38=FUNCTION_TABLE[$32]($35, $36, $37, $next); //@line 4741 "xmlparse.c"
        $tok=$38; //@line 4741 "xmlparse.c"
        var $39=HEAP[$next]; //@line 4742 "xmlparse.c"
        var $40=$parser_addr; //@line 4742 "xmlparse.c"
        var $41=$40+228; //@line 4742 "xmlparse.c"
        var $42=HEAP[$41]; //@line 4742 "xmlparse.c"
        var $43=$parser_addr; //@line 4742 "xmlparse.c"
        var $44=$textStart; //@line 4742 "xmlparse.c"
        var $45=$textEnd; //@line 4742 "xmlparse.c"
        var $46=$tok; //@line 4742 "xmlparse.c"
        var $47=_doProlog($43, $42, $44, $45, $46, $39, $next, 0); //@line 4742 "xmlparse.c"
        $result=$47; //@line 4742 "xmlparse.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 4742 "xmlparse.c"
      case 4: // $bb3
        var $48=$openEntity; //@line 4747 "xmlparse.c"
        var $49=$48+16; //@line 4747 "xmlparse.c"
        var $50=HEAP[$49]; //@line 4747 "xmlparse.c"
        var $51=$parser_addr; //@line 4747 "xmlparse.c"
        var $52=$textStart; //@line 4747 "xmlparse.c"
        var $53=$textEnd; //@line 4747 "xmlparse.c"
        var $54=_doContent($51, $50, $29, $52, $53, $next, 0); //@line 4747 "xmlparse.c"
        $result=$54; //@line 4747 "xmlparse.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 4747 "xmlparse.c"
      case 5: // $bb4
        var $55=__lastLabel__ == 4 ? $54 : ($47);
        var $56=($55)!=0; //@line 4750 "xmlparse.c"
        if ($56) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4750 "xmlparse.c"
      case 6: // $bb5
        var $57=$result; //@line 4751 "xmlparse.c"
        $0=$57; //@line 4751 "xmlparse.c"
        __label__ = 13; break; //@line 4751 "xmlparse.c"
      case 7: // $bb6
        var $58=HEAP[$next]; //@line 4752 "xmlparse.c"
        var $59=$textEnd; //@line 4752 "xmlparse.c"
        var $60=($59)==($58); //@line 4752 "xmlparse.c"
        if ($60) { __label__ = 10; break; } else { __label__ = 8; break; } //@line 4752 "xmlparse.c"
      case 8: // $bb7
        var $61=$parser_addr; //@line 4752 "xmlparse.c"
        var $62=$61+480; //@line 4752 "xmlparse.c"
        var $63=$62; //@line 4752 "xmlparse.c"
        var $64=HEAP[$63]; //@line 4752 "xmlparse.c"
        var $65=($64)!=3; //@line 4752 "xmlparse.c"
        if ($65) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 4752 "xmlparse.c"
      case 9: // $bb8
        var $66=HEAP[$next]; //@line 4753 "xmlparse.c"
        var $67=($66); //@line 4753 "xmlparse.c"
        var $68=$entity; //@line 4753 "xmlparse.c"
        var $69=$68+4; //@line 4753 "xmlparse.c"
        var $70=HEAP[$69]; //@line 4753 "xmlparse.c"
        var $71=($70); //@line 4753 "xmlparse.c"
        var $72=($67) - ($71); //@line 4753 "xmlparse.c"
        var $73=$entity; //@line 4753 "xmlparse.c"
        var $74=$73+12; //@line 4753 "xmlparse.c"
        HEAP[$74]=$72; //@line 4753 "xmlparse.c"
        var $75=$result; //@line 4754 "xmlparse.c"
        $0=$75; //@line 4754 "xmlparse.c"
        __label__ = 13; break; //@line 4754 "xmlparse.c"
      case 10: // $bb9
        var $76=$entity; //@line 4757 "xmlparse.c"
        var $77=$76+32; //@line 4757 "xmlparse.c"
        HEAP[$77]=0; //@line 4757 "xmlparse.c"
        var $78=$openEntity; //@line 4758 "xmlparse.c"
        var $79=$78+8; //@line 4758 "xmlparse.c"
        var $80=HEAP[$79]; //@line 4758 "xmlparse.c"
        var $81=$parser_addr; //@line 4758 "xmlparse.c"
        var $82=$81+300; //@line 4758 "xmlparse.c"
        HEAP[$82]=$80; //@line 4758 "xmlparse.c"
        var $83=$parser_addr; //@line 4760 "xmlparse.c"
        var $84=$83+304; //@line 4760 "xmlparse.c"
        var $85=HEAP[$84]; //@line 4760 "xmlparse.c"
        var $86=$openEntity; //@line 4760 "xmlparse.c"
        var $87=$86+8; //@line 4760 "xmlparse.c"
        HEAP[$87]=$85; //@line 4760 "xmlparse.c"
        var $88=$parser_addr; //@line 4761 "xmlparse.c"
        var $89=$88+304; //@line 4761 "xmlparse.c"
        var $90=$openEntity; //@line 4761 "xmlparse.c"
        HEAP[$89]=$90; //@line 4761 "xmlparse.c"
        var $91=$entity; //@line 4765 "xmlparse.c"
        var $92=$91+33; //@line 4765 "xmlparse.c"
        var $93=HEAP[$92]; //@line 4765 "xmlparse.c"
        var $94=($93)!=0; //@line 4765 "xmlparse.c"
        var $95=$parser_addr; //@line 4767 "xmlparse.c"
        var $96=$95+280; //@line 4767 "xmlparse.c"
        if ($94) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4765 "xmlparse.c"
      case 11: // $bb10
        HEAP[$96]=(FUNCTION_TABLE_OFFSET + 66); //@line 4767 "xmlparse.c"
        var $97=$parser_addr; //@line 4768 "xmlparse.c"
        var $98=$97+144; //@line 4768 "xmlparse.c"
        var $99=HEAP[$98]; //@line 4768 "xmlparse.c"
        var $100=$99; //@line 4768 "xmlparse.c"
        var $101=$100; //@line 4768 "xmlparse.c"
        var $102=HEAP[$101]; //@line 4768 "xmlparse.c"
        var $103=$parser_addr; //@line 4768 "xmlparse.c"
        var $104=$103+144; //@line 4768 "xmlparse.c"
        var $105=HEAP[$104]; //@line 4768 "xmlparse.c"
        var $106=$s_addr; //@line 4768 "xmlparse.c"
        var $107=$end_addr; //@line 4768 "xmlparse.c"
        var $108=FUNCTION_TABLE[$102]($105, $106, $107, $next); //@line 4768 "xmlparse.c"
        $tok11=$108; //@line 4768 "xmlparse.c"
        var $109=$parser_addr; //@line 4769 "xmlparse.c"
        var $110=$109+480; //@line 4769 "xmlparse.c"
        var $111=$110+4; //@line 4769 "xmlparse.c"
        var $112=HEAP[$111]; //@line 4769 "xmlparse.c"
        var $113=($112)==0; //@line 4769 "xmlparse.c"
        var $114=($113); //@line 4769 "xmlparse.c"
        var $115=HEAP[$next]; //@line 4769 "xmlparse.c"
        var $116=$parser_addr; //@line 4769 "xmlparse.c"
        var $117=$116+144; //@line 4769 "xmlparse.c"
        var $118=HEAP[$117]; //@line 4769 "xmlparse.c"
        var $119=$parser_addr; //@line 4769 "xmlparse.c"
        var $120=$s_addr; //@line 4769 "xmlparse.c"
        var $121=$end_addr; //@line 4769 "xmlparse.c"
        var $122=$tok11; //@line 4769 "xmlparse.c"
        var $123=$nextPtr_addr; //@line 4769 "xmlparse.c"
        var $124=((($114)) & 255); //@line 4769 "xmlparse.c"
        var $125=_doProlog($119, $118, $120, $121, $122, $115, $123, $124); //@line 4769 "xmlparse.c"
        $0=$125; //@line 4769 "xmlparse.c"
        __label__ = 13; break; //@line 4769 "xmlparse.c"
      case 12: // $bb12
        HEAP[$96]=(FUNCTION_TABLE_OFFSET + 64); //@line 4775 "xmlparse.c"
        var $126=$parser_addr; //@line 4777 "xmlparse.c"
        var $127=$126+480; //@line 4777 "xmlparse.c"
        var $128=$127+4; //@line 4777 "xmlparse.c"
        var $129=HEAP[$128]; //@line 4777 "xmlparse.c"
        var $130=($129)==0; //@line 4777 "xmlparse.c"
        var $131=($130); //@line 4777 "xmlparse.c"
        var $132=$parser_addr; //@line 4777 "xmlparse.c"
        var $133=$132+144; //@line 4777 "xmlparse.c"
        var $134=HEAP[$133]; //@line 4777 "xmlparse.c"
        var $135=$parser_addr; //@line 4777 "xmlparse.c"
        var $136=$135+476; //@line 4777 "xmlparse.c"
        var $137=HEAP[$136]; //@line 4777 "xmlparse.c"
        var $138=($137)!=0; //@line 4777 "xmlparse.c"
        var $139=($138); //@line 4777 "xmlparse.c"
        var $140=$parser_addr; //@line 4777 "xmlparse.c"
        var $141=$s_addr; //@line 4777 "xmlparse.c"
        var $142=$end_addr; //@line 4777 "xmlparse.c"
        var $143=$nextPtr_addr; //@line 4777 "xmlparse.c"
        var $144=((($131)) & 255); //@line 4777 "xmlparse.c"
        var $145=_doContent($140, $139, $134, $141, $142, $143, $144); //@line 4777 "xmlparse.c"
        $0=$145; //@line 4777 "xmlparse.c"
        __label__ = 13; break; //@line 4777 "xmlparse.c"
      case 13: // $bb13
        var $146=$0; //@line 4733 "xmlparse.c"
        $retval=$146; //@line 4733 "xmlparse.c"
        var $retval14=$retval; //@line 4733 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 4733 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _errorProcessor($parser, $s, $end, $nextPtr) {
    ;
    var __label__;
  
    var $parser_addr;
    var $s_addr;
    var $end_addr;
    var $nextPtr_addr;
    var $retval;
    var $0;
    $parser_addr=$parser;
    $s_addr=$s;
    $end_addr=$end;
    $nextPtr_addr=$nextPtr;
    var $1=$parser_addr; //@line 4788 "xmlparse.c"
    var $2=$1+284; //@line 4788 "xmlparse.c"
    var $3=HEAP[$2]; //@line 4788 "xmlparse.c"
    $0=$3; //@line 4788 "xmlparse.c"
    var $4=$0; //@line 4788 "xmlparse.c"
    $retval=$4; //@line 4788 "xmlparse.c"
    var $retval1=$retval; //@line 4788 "xmlparse.c"
    ;
    return $retval1; //@line 4788 "xmlparse.c"
  }
  

  function _storeAttributeValue($parser, $enc, $isCdata, $ptr, $end, $pool) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $enc_addr;
        var $isCdata_addr;
        var $ptr_addr;
        var $end_addr;
        var $pool_addr;
        var $retval;
        var $iftmp_252;
        var $0;
        var $result;
        $parser_addr=$parser;
        $enc_addr=$enc;
        $isCdata_addr=$isCdata;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $pool_addr=$pool;
        var $1=$isCdata_addr; //@line 4797 "xmlparse.c"
        var $2=($1); //@line 4797 "xmlparse.c"
        var $3=$parser_addr; //@line 4797 "xmlparse.c"
        var $4=$enc_addr; //@line 4797 "xmlparse.c"
        var $5=((($2)) & 255); //@line 4797 "xmlparse.c"
        var $6=$ptr_addr; //@line 4797 "xmlparse.c"
        var $7=$end_addr; //@line 4797 "xmlparse.c"
        var $8=$pool_addr; //@line 4797 "xmlparse.c"
        var $9=_appendAttributeValue($3, $4, $5, $6, $7, $8); //@line 4797 "xmlparse.c"
        $result=$9; //@line 4797 "xmlparse.c"
        var $10=$result; //@line 4798 "xmlparse.c"
        var $11=($10)!=0; //@line 4798 "xmlparse.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4798 "xmlparse.c"
      case 1: // $bb
        var $12=$result; //@line 4799 "xmlparse.c"
        $0=$12; //@line 4799 "xmlparse.c"
        __label__ = 10; break; //@line 4799 "xmlparse.c"
      case 2: // $bb1
        var $13=$isCdata_addr; //@line 4800 "xmlparse.c"
        var $14=($13)==0; //@line 4800 "xmlparse.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 4800 "xmlparse.c"
      case 3: // $bb2
        var $15=$pool_addr; //@line 4800 "xmlparse.c"
        var $16=$15+12; //@line 4800 "xmlparse.c"
        var $17=HEAP[$16]; //@line 4800 "xmlparse.c"
        var $18=$pool_addr; //@line 4800 "xmlparse.c"
        var $19=$18+16; //@line 4800 "xmlparse.c"
        var $20=HEAP[$19]; //@line 4800 "xmlparse.c"
        var $21=($17)!=($20); //@line 4800 "xmlparse.c"
        if ($21) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 4800 "xmlparse.c"
      case 4: // $bb3
        var $22=$pool_addr; //@line 4800 "xmlparse.c"
        var $23=$22+12; //@line 4800 "xmlparse.c"
        var $24=HEAP[$23]; //@line 4800 "xmlparse.c"
        var $25=$24+-1; //@line 4800 "xmlparse.c"
        var $26=HEAP[$25]; //@line 4800 "xmlparse.c"
        var $27=($26)==32; //@line 4800 "xmlparse.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4800 "xmlparse.c"
      case 5: // $bb4
        var $28=$pool_addr; //@line 4801 "xmlparse.c"
        var $29=$28+12; //@line 4801 "xmlparse.c"
        var $30=HEAP[$29]; //@line 4801 "xmlparse.c"
        var $31=$30+-1; //@line 4801 "xmlparse.c"
        var $32=$pool_addr; //@line 4801 "xmlparse.c"
        var $33=$32+12; //@line 4801 "xmlparse.c"
        HEAP[$33]=$31; //@line 4801 "xmlparse.c"
        __label__ = 6; break; //@line 4801 "xmlparse.c"
      case 6: // $bb5
        var $34=$pool_addr; //@line 4802 "xmlparse.c"
        var $35=$34+12; //@line 4802 "xmlparse.c"
        var $36=HEAP[$35]; //@line 4802 "xmlparse.c"
        var $37=$pool_addr; //@line 4802 "xmlparse.c"
        var $38=$37+8; //@line 4802 "xmlparse.c"
        var $39=HEAP[$38]; //@line 4802 "xmlparse.c"
        var $40=($36)!=($39); //@line 4802 "xmlparse.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 7; break; } //@line 4802 "xmlparse.c"
      case 7: // $bb6
        var $41=$pool_addr; //@line 4802 "xmlparse.c"
        var $42=_poolGrow($41); //@line 4802 "xmlparse.c"
        var $43=($42)!=0; //@line 4802 "xmlparse.c"
        if ($43) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 4802 "xmlparse.c"
      case 8: // $bb10
        $iftmp_252=1; //@line 4802 "xmlparse.c"
        $0=1; //@line 4803 "xmlparse.c"
        __label__ = 10; break; //@line 4803 "xmlparse.c"
      case 9: // $bb11
        var $44=$pool_addr; //@line 4802 "xmlparse.c"
        var $45=$44+12; //@line 4802 "xmlparse.c"
        var $46=HEAP[$45]; //@line 4802 "xmlparse.c"
        HEAP[$46]=0; //@line 4802 "xmlparse.c"
        var $47=$46+1; //@line 4802 "xmlparse.c"
        var $48=$pool_addr; //@line 4802 "xmlparse.c"
        var $49=$48+12; //@line 4802 "xmlparse.c"
        HEAP[$49]=$47; //@line 4802 "xmlparse.c"
        $iftmp_252=0; //@line 4802 "xmlparse.c"
        $0=0; //@line 4804 "xmlparse.c"
        __label__ = 10; break; //@line 4804 "xmlparse.c"
      case 10: // $bb12
        var $50=$0; //@line 4799 "xmlparse.c"
        $retval=$50; //@line 4799 "xmlparse.c"
        var $retval13=$retval; //@line 4799 "xmlparse.c"
        ;
        return $retval13; //@line 4799 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _appendAttributeValue($parser, $enc, $isCdata, $ptr, $end, $pool) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $enc_addr;
        var $isCdata_addr;
        var $ptr_addr;
        var $end_addr;
        var $pool_addr;
        var $retval;
        var $iftmp_262;
        var $iftmp_261;
        var $iftmp_259;
        var $iftmp_257;
        var $iftmp_254;
        var $0;
        var $dtd;
        var $next=__stackBase__;
        var $tok;
        var $buf=__stackBase__+4;
        var $i;
        var $n;
        var $name;
        var $entity;
        var $checkEntityDecl;
        var $ch;
        var $result;
        var $textEnd;
        $parser_addr=$parser;
        $enc_addr=$enc;
        $isCdata_addr=$isCdata;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $pool_addr=$pool;
        var $1=$parser_addr; //@line 4812 "xmlparse.c"
        var $2=$1+356; //@line 4812 "xmlparse.c"
        var $3=HEAP[$2]; //@line 4812 "xmlparse.c"
        $dtd=$3; //@line 4812 "xmlparse.c"
        var $buf17=$buf; //@line 4841 "xmlparse.c"
        __label__ = 1; break; //@line 4812 "xmlparse.c"
      case 1: // $bb
        var $4=$enc_addr; //@line 4815 "xmlparse.c"
        var $5=$4+16; //@line 4815 "xmlparse.c"
        var $6=$5; //@line 4815 "xmlparse.c"
        var $7=HEAP[$6]; //@line 4815 "xmlparse.c"
        var $8=$enc_addr; //@line 4815 "xmlparse.c"
        var $9=$ptr_addr; //@line 4815 "xmlparse.c"
        var $10=$end_addr; //@line 4815 "xmlparse.c"
        var $11=FUNCTION_TABLE[$7]($8, $9, $10, $next); //@line 4815 "xmlparse.c"
        $tok=$11; //@line 4815 "xmlparse.c"
        if ($11 == -4) {
          __label__ = 2; break;
        }
        else if ($11 == -3) {
          __label__ = 29; break;
        }
        else if ($11 == -1) {
          __label__ = 6; break;
        }
        else if ($11 == 0) {
          __label__ = 3; break;
        }
        else if ($11 == 6) {
          __label__ = 27; break;
        }
        else if ($11 == 7) {
          __label__ = 30; break;
        }
        else if ($11 == 9) {
          __label__ = 37; break;
        }
        else if ($11 == 10) {
          __label__ = 9; break;
        }
        else if ($11 == 39) {
          __label__ = 30; break;
        }
        else {
        __label__ = 77; break;
        }
        
      case 2: // $bb1
        $0=0; //@line 4818 "xmlparse.c"
        __label__ = 81; break; //@line 4818 "xmlparse.c"
      case 3: // $bb2
        var $12=$parser_addr; //@line 4820 "xmlparse.c"
        var $13=$12+144; //@line 4820 "xmlparse.c"
        var $14=HEAP[$13]; //@line 4820 "xmlparse.c"
        var $15=$enc_addr; //@line 4820 "xmlparse.c"
        var $16=($14)==($15); //@line 4820 "xmlparse.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4820 "xmlparse.c"
      case 4: // $bb3
        var $17=HEAP[$next]; //@line 4821 "xmlparse.c"
        var $18=$parser_addr; //@line 4821 "xmlparse.c"
        var $19=$18+288; //@line 4821 "xmlparse.c"
        HEAP[$19]=$17; //@line 4821 "xmlparse.c"
        __label__ = 5; break; //@line 4821 "xmlparse.c"
      case 5: // $bb4
        $0=4; //@line 4822 "xmlparse.c"
        __label__ = 81; break; //@line 4822 "xmlparse.c"
      case 6: // $bb5
        var $20=$parser_addr; //@line 4824 "xmlparse.c"
        var $21=$20+144; //@line 4824 "xmlparse.c"
        var $22=HEAP[$21]; //@line 4824 "xmlparse.c"
        var $23=$enc_addr; //@line 4824 "xmlparse.c"
        var $24=($22)==($23); //@line 4824 "xmlparse.c"
        if ($24) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4824 "xmlparse.c"
      case 7: // $bb6
        var $25=$parser_addr; //@line 4825 "xmlparse.c"
        var $26=$25+288; //@line 4825 "xmlparse.c"
        var $27=$ptr_addr; //@line 4825 "xmlparse.c"
        HEAP[$26]=$27; //@line 4825 "xmlparse.c"
        __label__ = 8; break; //@line 4825 "xmlparse.c"
      case 8: // $bb7
        $0=4; //@line 4826 "xmlparse.c"
        __label__ = 81; break; //@line 4826 "xmlparse.c"
      case 9: // $bb8
        var $28=$enc_addr; //@line 4831 "xmlparse.c"
        var $29=$28+44; //@line 4831 "xmlparse.c"
        var $30=HEAP[$29]; //@line 4831 "xmlparse.c"
        var $31=$enc_addr; //@line 4831 "xmlparse.c"
        var $32=$ptr_addr; //@line 4831 "xmlparse.c"
        var $33=FUNCTION_TABLE[$30]($31, $32); //@line 4831 "xmlparse.c"
        $n=$33; //@line 4831 "xmlparse.c"
        var $34=$n; //@line 4832 "xmlparse.c"
        var $35=($34) < 0; //@line 4832 "xmlparse.c"
        if ($35) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 4832 "xmlparse.c"
      case 10: // $bb9
        var $36=$parser_addr; //@line 4833 "xmlparse.c"
        var $37=$36+144; //@line 4833 "xmlparse.c"
        var $38=HEAP[$37]; //@line 4833 "xmlparse.c"
        var $39=$enc_addr; //@line 4833 "xmlparse.c"
        var $40=($38)==($39); //@line 4833 "xmlparse.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4833 "xmlparse.c"
      case 11: // $bb10
        var $41=$parser_addr; //@line 4834 "xmlparse.c"
        var $42=$41+288; //@line 4834 "xmlparse.c"
        var $43=$ptr_addr; //@line 4834 "xmlparse.c"
        HEAP[$42]=$43; //@line 4834 "xmlparse.c"
        __label__ = 12; break; //@line 4834 "xmlparse.c"
      case 12: // $bb11
        $0=14; //@line 4835 "xmlparse.c"
        __label__ = 81; break; //@line 4835 "xmlparse.c"
      case 13: // $bb12
        var $44=$isCdata_addr; //@line 4837 "xmlparse.c"
        var $45=($44)==0; //@line 4837 "xmlparse.c"
        if ($45) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 4837 "xmlparse.c"
      case 14: // $bb13
        var $46=$n; //@line 4837 "xmlparse.c"
        var $47=($46)==32; //@line 4837 "xmlparse.c"
        if ($47) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 4837 "xmlparse.c"
      case 15: // $bb14
        var $48=$pool_addr; //@line 4837 "xmlparse.c"
        var $49=$48+12; //@line 4837 "xmlparse.c"
        var $50=HEAP[$49]; //@line 4837 "xmlparse.c"
        var $51=$pool_addr; //@line 4837 "xmlparse.c"
        var $52=$51+16; //@line 4837 "xmlparse.c"
        var $53=HEAP[$52]; //@line 4837 "xmlparse.c"
        var $54=($50)==($53); //@line 4837 "xmlparse.c"
        if ($54) { __label__ = 80; break; } else { __label__ = 16; break; } //@line 4837 "xmlparse.c"
      case 16: // $bb15
        var $55=$pool_addr; //@line 4837 "xmlparse.c"
        var $56=$55+12; //@line 4837 "xmlparse.c"
        var $57=HEAP[$56]; //@line 4837 "xmlparse.c"
        var $58=$57+-1; //@line 4837 "xmlparse.c"
        var $59=HEAP[$58]; //@line 4837 "xmlparse.c"
        var $60=($59)==32; //@line 4837 "xmlparse.c"
        if ($60) { __label__ = 80; break; } else { __label__ = 17; break; } //@line 4837 "xmlparse.c"
      case 17: // $bb16
        var $61=$n; //@line 4841 "xmlparse.c"
        var $62=_PyExpat_XmlUtf8Encode($61, $buf17); //@line 4841 "xmlparse.c"
        $n=$62; //@line 4841 "xmlparse.c"
        var $63=($62)==0; //@line 4842 "xmlparse.c"
        if ($63) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 4842 "xmlparse.c"
      case 18: // $bb18
        var $64=$parser_addr; //@line 4843 "xmlparse.c"
        var $65=$64+144; //@line 4843 "xmlparse.c"
        var $66=HEAP[$65]; //@line 4843 "xmlparse.c"
        var $67=$enc_addr; //@line 4843 "xmlparse.c"
        var $68=($66)==($67); //@line 4843 "xmlparse.c"
        if ($68) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4843 "xmlparse.c"
      case 19: // $bb19
        var $69=$parser_addr; //@line 4844 "xmlparse.c"
        var $70=$69+288; //@line 4844 "xmlparse.c"
        var $71=$ptr_addr; //@line 4844 "xmlparse.c"
        HEAP[$70]=$71; //@line 4844 "xmlparse.c"
        __label__ = 20; break; //@line 4844 "xmlparse.c"
      case 20: // $bb20
        $0=14; //@line 4845 "xmlparse.c"
        __label__ = 81; break; //@line 4845 "xmlparse.c"
      case 21: // $bb21
        $i=0; //@line 4847 "xmlparse.c"
        __label__ = 26; break; //@line 4847 "xmlparse.c"
      case 22: // $bb22
        var $72=$pool_addr; //@line 4848 "xmlparse.c"
        var $73=$72+12; //@line 4848 "xmlparse.c"
        var $74=HEAP[$73]; //@line 4848 "xmlparse.c"
        var $75=$pool_addr; //@line 4848 "xmlparse.c"
        var $76=$75+8; //@line 4848 "xmlparse.c"
        var $77=HEAP[$76]; //@line 4848 "xmlparse.c"
        var $78=($74)!=($77); //@line 4848 "xmlparse.c"
        if ($78) { __label__ = 25; break; } else { __label__ = 23; break; } //@line 4848 "xmlparse.c"
      case 23: // $bb23
        var $79=$pool_addr; //@line 4848 "xmlparse.c"
        var $80=_poolGrow($79); //@line 4848 "xmlparse.c"
        var $81=($80)!=0; //@line 4848 "xmlparse.c"
        if ($81) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 4848 "xmlparse.c"
      case 24: // $bb27
        $iftmp_254=1; //@line 4848 "xmlparse.c"
        $0=1; //@line 4849 "xmlparse.c"
        __label__ = 81; break; //@line 4849 "xmlparse.c"
      case 25: // $bb28
        var $82=$pool_addr; //@line 4848 "xmlparse.c"
        var $83=$82+12; //@line 4848 "xmlparse.c"
        var $84=HEAP[$83]; //@line 4848 "xmlparse.c"
        var $85=$i; //@line 4848 "xmlparse.c"
        var $86=$buf+$85; //@line 4848 "xmlparse.c"
        var $87=HEAP[$86]; //@line 4848 "xmlparse.c"
        HEAP[$84]=$87; //@line 4848 "xmlparse.c"
        var $88=$84+1; //@line 4848 "xmlparse.c"
        var $89=$pool_addr; //@line 4848 "xmlparse.c"
        var $90=$89+12; //@line 4848 "xmlparse.c"
        HEAP[$90]=$88; //@line 4848 "xmlparse.c"
        $iftmp_254=0; //@line 4848 "xmlparse.c"
        var $91=$i; //@line 4847 "xmlparse.c"
        var $92=($91) + 1; //@line 4847 "xmlparse.c"
        $i=$92; //@line 4847 "xmlparse.c"
        __label__ = 26; break; //@line 4847 "xmlparse.c"
      case 26: // $bb29
        var $93=$i; //@line 4847 "xmlparse.c"
        var $94=$n; //@line 4847 "xmlparse.c"
        var $95=($93) < ($94); //@line 4847 "xmlparse.c"
        if ($95) { __label__ = 22; break; } else { __label__ = 80; break; } //@line 4847 "xmlparse.c"
      case 27: // $bb31
        var $96=HEAP[$next]; //@line 4854 "xmlparse.c"
        var $97=$pool_addr; //@line 4854 "xmlparse.c"
        var $98=$enc_addr; //@line 4854 "xmlparse.c"
        var $99=$ptr_addr; //@line 4854 "xmlparse.c"
        var $100=_poolAppend($97, $98, $99, $96); //@line 4854 "xmlparse.c"
        var $101=($100)==0; //@line 4854 "xmlparse.c"
        if ($101) { __label__ = 28; break; } else { __label__ = 80; break; } //@line 4854 "xmlparse.c"
      case 28: // $bb32
        $0=1; //@line 4855 "xmlparse.c"
        __label__ = 81; break; //@line 4855 "xmlparse.c"
      case 29: // $bb34
        var $102=$enc_addr; //@line 4858 "xmlparse.c"
        var $103=$102+68; //@line 4858 "xmlparse.c"
        var $104=HEAP[$103]; //@line 4858 "xmlparse.c"
        var $105=$ptr_addr; //@line 4858 "xmlparse.c"
        var $106=$105+$104; //@line 4858 "xmlparse.c"
        HEAP[$next]=$106; //@line 4858 "xmlparse.c"
        __label__ = 30; break; //@line 4858 "xmlparse.c"
      case 30: // $bb35
        var $107=$isCdata_addr; //@line 4862 "xmlparse.c"
        var $108=($107)==0; //@line 4862 "xmlparse.c"
        if ($108) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 4862 "xmlparse.c"
      case 31: // $bb36
        var $109=$pool_addr; //@line 4862 "xmlparse.c"
        var $110=$109+12; //@line 4862 "xmlparse.c"
        var $111=HEAP[$110]; //@line 4862 "xmlparse.c"
        var $112=$pool_addr; //@line 4862 "xmlparse.c"
        var $113=$112+16; //@line 4862 "xmlparse.c"
        var $114=HEAP[$113]; //@line 4862 "xmlparse.c"
        var $115=($111)==($114); //@line 4862 "xmlparse.c"
        if ($115) { __label__ = 80; break; } else { __label__ = 32; break; } //@line 4862 "xmlparse.c"
      case 32: // $bb37
        var $116=$pool_addr; //@line 4862 "xmlparse.c"
        var $117=$116+12; //@line 4862 "xmlparse.c"
        var $118=HEAP[$117]; //@line 4862 "xmlparse.c"
        var $119=$118+-1; //@line 4862 "xmlparse.c"
        var $120=HEAP[$119]; //@line 4862 "xmlparse.c"
        var $121=($120)==32; //@line 4862 "xmlparse.c"
        if ($121) { __label__ = 80; break; } else { __label__ = 33; break; } //@line 4862 "xmlparse.c"
      case 33: // $bb38
        var $122=$pool_addr; //@line 4864 "xmlparse.c"
        var $123=$122+12; //@line 4864 "xmlparse.c"
        var $124=HEAP[$123]; //@line 4864 "xmlparse.c"
        var $125=$pool_addr; //@line 4864 "xmlparse.c"
        var $126=$125+8; //@line 4864 "xmlparse.c"
        var $127=HEAP[$126]; //@line 4864 "xmlparse.c"
        var $128=($124)!=($127); //@line 4864 "xmlparse.c"
        if ($128) { __label__ = 35; break; } else { __label__ = 34; break; } //@line 4864 "xmlparse.c"
      case 34: // $bb39
        var $129=$pool_addr; //@line 4864 "xmlparse.c"
        var $130=_poolGrow($129); //@line 4864 "xmlparse.c"
        var $131=($130)!=0; //@line 4864 "xmlparse.c"
        if ($131) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 4864 "xmlparse.c"
      case 35: // $bb42
        var $132=$pool_addr; //@line 4864 "xmlparse.c"
        var $133=$132+12; //@line 4864 "xmlparse.c"
        var $134=HEAP[$133]; //@line 4864 "xmlparse.c"
        HEAP[$134]=32; //@line 4864 "xmlparse.c"
        var $135=$134+1; //@line 4864 "xmlparse.c"
        var $136=$pool_addr; //@line 4864 "xmlparse.c"
        var $137=$136+12; //@line 4864 "xmlparse.c"
        HEAP[$137]=$135; //@line 4864 "xmlparse.c"
        $iftmp_257=0; //@line 4864 "xmlparse.c"
        __label__ = 80; break;
      case 36: // $bb44
        $iftmp_257=1; //@line 4864 "xmlparse.c"
        $0=1; //@line 4865 "xmlparse.c"
        __label__ = 81; break; //@line 4865 "xmlparse.c"
      case 37: // $bb46
        var $138=$enc_addr; //@line 4872 "xmlparse.c"
        var $139=$138+48; //@line 4872 "xmlparse.c"
        var $140=HEAP[$139]; //@line 4872 "xmlparse.c"
        var $141=HEAP[$next]; //@line 4872 "xmlparse.c"
        var $142=$enc_addr; //@line 4872 "xmlparse.c"
        var $143=$142+68; //@line 4872 "xmlparse.c"
        var $144=HEAP[$143]; //@line 4872 "xmlparse.c"
        var $145=0 - ($144); //@line 4872 "xmlparse.c"
        var $146=$141+$145; //@line 4872 "xmlparse.c"
        var $147=$enc_addr; //@line 4872 "xmlparse.c"
        var $148=$147+68; //@line 4872 "xmlparse.c"
        var $149=HEAP[$148]; //@line 4872 "xmlparse.c"
        var $150=$ptr_addr; //@line 4872 "xmlparse.c"
        var $151=$150+$149; //@line 4872 "xmlparse.c"
        var $152=$enc_addr; //@line 4872 "xmlparse.c"
        var $153=FUNCTION_TABLE[$140]($152, $151, $146); //@line 4872 "xmlparse.c"
        var $154=((($153)) & 255); //@line 4872 "xmlparse.c"
        $ch=$154; //@line 4872 "xmlparse.c"
        var $155=$ch; //@line 4875 "xmlparse.c"
        var $156=($155)!=0; //@line 4875 "xmlparse.c"
        if ($156) { __label__ = 38; break; } else { __label__ = 42; break; } //@line 4875 "xmlparse.c"
      case 38: // $bb47
        var $157=$pool_addr; //@line 4876 "xmlparse.c"
        var $158=$157+12; //@line 4876 "xmlparse.c"
        var $159=HEAP[$158]; //@line 4876 "xmlparse.c"
        var $160=$pool_addr; //@line 4876 "xmlparse.c"
        var $161=$160+8; //@line 4876 "xmlparse.c"
        var $162=HEAP[$161]; //@line 4876 "xmlparse.c"
        var $163=($159)!=($162); //@line 4876 "xmlparse.c"
        if ($163) { __label__ = 40; break; } else { __label__ = 39; break; } //@line 4876 "xmlparse.c"
      case 39: // $bb48
        var $164=$pool_addr; //@line 4876 "xmlparse.c"
        var $165=_poolGrow($164); //@line 4876 "xmlparse.c"
        var $166=($165)!=0; //@line 4876 "xmlparse.c"
        if ($166) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 4876 "xmlparse.c"
      case 40: // $bb51
        var $167=$pool_addr; //@line 4876 "xmlparse.c"
        var $168=$167+12; //@line 4876 "xmlparse.c"
        var $169=HEAP[$168]; //@line 4876 "xmlparse.c"
        var $170=$ch; //@line 4876 "xmlparse.c"
        HEAP[$169]=$170; //@line 4876 "xmlparse.c"
        var $171=$169+1; //@line 4876 "xmlparse.c"
        var $172=$pool_addr; //@line 4876 "xmlparse.c"
        var $173=$172+12; //@line 4876 "xmlparse.c"
        HEAP[$173]=$171; //@line 4876 "xmlparse.c"
        $iftmp_259=0; //@line 4876 "xmlparse.c"
        __label__ = 80; break;
      case 41: // $bb53
        $iftmp_259=1; //@line 4876 "xmlparse.c"
        $0=1; //@line 4877 "xmlparse.c"
        __label__ = 81; break; //@line 4877 "xmlparse.c"
      case 42: // $bb55
        var $174=HEAP[$next]; //@line 4880 "xmlparse.c"
        var $175=$enc_addr; //@line 4880 "xmlparse.c"
        var $176=$175+68; //@line 4880 "xmlparse.c"
        var $177=HEAP[$176]; //@line 4880 "xmlparse.c"
        var $178=0 - ($177); //@line 4880 "xmlparse.c"
        var $179=$174+$178; //@line 4880 "xmlparse.c"
        var $180=$enc_addr; //@line 4880 "xmlparse.c"
        var $181=$180+68; //@line 4880 "xmlparse.c"
        var $182=HEAP[$181]; //@line 4880 "xmlparse.c"
        var $183=$ptr_addr; //@line 4880 "xmlparse.c"
        var $184=$183+$182; //@line 4880 "xmlparse.c"
        var $185=$parser_addr; //@line 4880 "xmlparse.c"
        var $186=$185+440; //@line 4880 "xmlparse.c"
        var $187=$enc_addr; //@line 4880 "xmlparse.c"
        var $188=_poolStoreString($186, $187, $184, $179); //@line 4880 "xmlparse.c"
        $name=$188; //@line 4880 "xmlparse.c"
        var $189=$name; //@line 4883 "xmlparse.c"
        var $190=($189)==0; //@line 4883 "xmlparse.c"
        if ($190) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 4883 "xmlparse.c"
      case 43: // $bb56
        $0=1; //@line 4884 "xmlparse.c"
        __label__ = 81; break; //@line 4884 "xmlparse.c"
      case 44: // $bb57
        var $191=$dtd; //@line 4885 "xmlparse.c"
        var $192=$191; //@line 4885 "xmlparse.c"
        var $193=$name; //@line 4885 "xmlparse.c"
        var $194=_lookup($192, $193, 0); //@line 4885 "xmlparse.c"
        var $195=$194; //@line 4885 "xmlparse.c"
        $entity=$195; //@line 4885 "xmlparse.c"
        var $196=$parser_addr; //@line 4886 "xmlparse.c"
        var $197=$196+440; //@line 4886 "xmlparse.c"
        var $198=$197+16; //@line 4886 "xmlparse.c"
        var $199=HEAP[$198]; //@line 4886 "xmlparse.c"
        var $200=$parser_addr; //@line 4886 "xmlparse.c"
        var $201=$200+440; //@line 4886 "xmlparse.c"
        var $202=$201+12; //@line 4886 "xmlparse.c"
        HEAP[$202]=$199; //@line 4886 "xmlparse.c"
        var $203=$dtd; //@line 4890 "xmlparse.c"
        var $204=$203+80; //@line 4890 "xmlparse.c"
        var $205=$pool_addr; //@line 4890 "xmlparse.c"
        var $206=($204)==($205); //@line 4890 "xmlparse.c"
        if ($206) { __label__ = 45; break; } else { __label__ = 52; break; } //@line 4890 "xmlparse.c"
      case 45: // $bb58
        var $207=$parser_addr; //@line 4891 "xmlparse.c"
        var $208=$207+256; //@line 4891 "xmlparse.c"
        var $209=$208+16; //@line 4891 "xmlparse.c"
        var $210=HEAP[$209]; //@line 4891 "xmlparse.c"
        var $211=($210)==0; //@line 4891 "xmlparse.c"
        if ($211) { __label__ = 50; break; } else { __label__ = 46; break; } //@line 4891 "xmlparse.c"
      case 46: // $bb59
        var $212=$dtd; //@line 4891 "xmlparse.c"
        var $213=$212+130; //@line 4891 "xmlparse.c"
        var $214=HEAP[$213]; //@line 4891 "xmlparse.c"
        var $215=($214)!=0; //@line 4891 "xmlparse.c"
        if ($215) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 4891 "xmlparse.c"
      case 47: // $bb60
        var $216=$parser_addr; //@line 4891 "xmlparse.c"
        var $217=$216+300; //@line 4891 "xmlparse.c"
        var $218=HEAP[$217]; //@line 4891 "xmlparse.c"
        var $219=($218)!=0; //@line 4891 "xmlparse.c"
        if ($219) { __label__ = 50; break; } else { __label__ = 49; break; } //@line 4891 "xmlparse.c"
      case 48: // $bb62
        var $220=$dtd; //@line 4891 "xmlparse.c"
        var $221=$220+129; //@line 4891 "xmlparse.c"
        var $222=HEAP[$221]; //@line 4891 "xmlparse.c"
        var $223=($222)!=0; //@line 4891 "xmlparse.c"
        if ($223) { __label__ = 50; break; } else { __label__ = 49; break; } //@line 4891 "xmlparse.c"
      case 49: // $bb63
        $iftmp_261=1; //@line 4891 "xmlparse.c"
        __label__ = 51; break; //@line 4891 "xmlparse.c"
      case 50: // $bb64
        $iftmp_261=0; //@line 4891 "xmlparse.c"
        __label__ = 51; break; //@line 4891 "xmlparse.c"
      case 51: // $bb65
        var $224=$iftmp_261; //@line 4891 "xmlparse.c"
        var $225=((($224)) & 255); //@line 4891 "xmlparse.c"
        $checkEntityDecl=$225; //@line 4891 "xmlparse.c"
        __lastLabel__ = 51; __label__ = 57; break; //@line 4891 "xmlparse.c"
      case 52: // $bb66
        var $226=$dtd; //@line 4899 "xmlparse.c"
        var $227=$226+129; //@line 4899 "xmlparse.c"
        var $228=HEAP[$227]; //@line 4899 "xmlparse.c"
        var $229=($228)==0; //@line 4899 "xmlparse.c"
        if ($229) { __label__ = 54; break; } else { __label__ = 53; break; } //@line 4899 "xmlparse.c"
      case 53: // $bb67
        var $230=$dtd; //@line 4899 "xmlparse.c"
        var $231=$230+130; //@line 4899 "xmlparse.c"
        var $232=HEAP[$231]; //@line 4899 "xmlparse.c"
        var $233=($232)!=0; //@line 4899 "xmlparse.c"
        if ($233) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 4899 "xmlparse.c"
      case 54: // $bb68
        $iftmp_262=1; //@line 4899 "xmlparse.c"
        __label__ = 56; break; //@line 4899 "xmlparse.c"
      case 55: // $bb69
        $iftmp_262=0; //@line 4899 "xmlparse.c"
        __label__ = 56; break; //@line 4899 "xmlparse.c"
      case 56: // $bb70
        var $234=$iftmp_262; //@line 4899 "xmlparse.c"
        var $235=((($234)) & 255); //@line 4899 "xmlparse.c"
        $checkEntityDecl=$235; //@line 4899 "xmlparse.c"
        __lastLabel__ = 56; __label__ = 57; break; //@line 4899 "xmlparse.c"
      case 57: // $bb71
        var $236=__lastLabel__ == 56 ? $235 : ($225);
        var $237=($236)!=0; //@line 4900 "xmlparse.c"
        var $238=$entity; //@line 4901 "xmlparse.c"
        var $239=($238)==0; //@line 4901 "xmlparse.c"
        if ($237) { __label__ = 58; break; } else { __label__ = 62; break; } //@line 4900 "xmlparse.c"
      case 58: // $bb72
        if ($239) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 4901 "xmlparse.c"
      case 59: // $bb73
        $0=11; //@line 4902 "xmlparse.c"
        __label__ = 81; break; //@line 4902 "xmlparse.c"
      case 60: // $bb74
        var $240=$entity; //@line 4903 "xmlparse.c"
        var $241=$240+34; //@line 4903 "xmlparse.c"
        var $242=HEAP[$241]; //@line 4903 "xmlparse.c"
        var $243=($242)==0; //@line 4903 "xmlparse.c"
        if ($243) { __label__ = 61; break; } else { __label__ = 63; break; } //@line 4903 "xmlparse.c"
      case 61: // $bb75
        $0=24; //@line 4904 "xmlparse.c"
        __label__ = 81; break; //@line 4904 "xmlparse.c"
      case 62: // $bb77
        if ($239) { __label__ = 80; break; } else { __label__ = 63; break; } //@line 4906 "xmlparse.c"
      case 63: // $bb78
        var $244=$entity; //@line 4919 "xmlparse.c"
        var $245=$244+32; //@line 4919 "xmlparse.c"
        var $246=HEAP[$245]; //@line 4919 "xmlparse.c"
        var $247=($246)!=0; //@line 4919 "xmlparse.c"
        if ($247) { __label__ = 64; break; } else { __label__ = 67; break; } //@line 4919 "xmlparse.c"
      case 64: // $bb79
        var $248=$parser_addr; //@line 4920 "xmlparse.c"
        var $249=$248+144; //@line 4920 "xmlparse.c"
        var $250=HEAP[$249]; //@line 4920 "xmlparse.c"
        var $251=$enc_addr; //@line 4920 "xmlparse.c"
        var $252=($250)==($251); //@line 4920 "xmlparse.c"
        if ($252) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 4920 "xmlparse.c"
      case 65: // $bb80
        var $253=$parser_addr; //@line 4921 "xmlparse.c"
        var $254=$253+288; //@line 4921 "xmlparse.c"
        var $255=$ptr_addr; //@line 4921 "xmlparse.c"
        HEAP[$254]=$255; //@line 4921 "xmlparse.c"
        __label__ = 66; break; //@line 4921 "xmlparse.c"
      case 66: // $bb81
        $0=12; //@line 4922 "xmlparse.c"
        __label__ = 81; break; //@line 4922 "xmlparse.c"
      case 67: // $bb82
        var $256=$entity; //@line 4924 "xmlparse.c"
        var $257=$256+28; //@line 4924 "xmlparse.c"
        var $258=HEAP[$257]; //@line 4924 "xmlparse.c"
        var $259=($258)!=0; //@line 4924 "xmlparse.c"
        if ($259) { __label__ = 68; break; } else { __label__ = 71; break; } //@line 4924 "xmlparse.c"
      case 68: // $bb83
        var $260=$parser_addr; //@line 4925 "xmlparse.c"
        var $261=$260+144; //@line 4925 "xmlparse.c"
        var $262=HEAP[$261]; //@line 4925 "xmlparse.c"
        var $263=$enc_addr; //@line 4925 "xmlparse.c"
        var $264=($262)==($263); //@line 4925 "xmlparse.c"
        if ($264) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 4925 "xmlparse.c"
      case 69: // $bb84
        var $265=$parser_addr; //@line 4926 "xmlparse.c"
        var $266=$265+288; //@line 4926 "xmlparse.c"
        var $267=$ptr_addr; //@line 4926 "xmlparse.c"
        HEAP[$266]=$267; //@line 4926 "xmlparse.c"
        __label__ = 70; break; //@line 4926 "xmlparse.c"
      case 70: // $bb85
        $0=15; //@line 4927 "xmlparse.c"
        __label__ = 81; break; //@line 4927 "xmlparse.c"
      case 71: // $bb86
        var $268=$entity; //@line 4929 "xmlparse.c"
        var $269=$268+4; //@line 4929 "xmlparse.c"
        var $270=HEAP[$269]; //@line 4929 "xmlparse.c"
        var $271=($270)==0; //@line 4929 "xmlparse.c"
        if ($271) { __label__ = 72; break; } else { __label__ = 75; break; } //@line 4929 "xmlparse.c"
      case 72: // $bb87
        var $272=$parser_addr; //@line 4930 "xmlparse.c"
        var $273=$272+144; //@line 4930 "xmlparse.c"
        var $274=HEAP[$273]; //@line 4930 "xmlparse.c"
        var $275=$enc_addr; //@line 4930 "xmlparse.c"
        var $276=($274)==($275); //@line 4930 "xmlparse.c"
        if ($276) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 4930 "xmlparse.c"
      case 73: // $bb88
        var $277=$parser_addr; //@line 4931 "xmlparse.c"
        var $278=$277+288; //@line 4931 "xmlparse.c"
        var $279=$ptr_addr; //@line 4931 "xmlparse.c"
        HEAP[$278]=$279; //@line 4931 "xmlparse.c"
        __label__ = 74; break; //@line 4931 "xmlparse.c"
      case 74: // $bb89
        $0=16; //@line 4932 "xmlparse.c"
        __label__ = 81; break; //@line 4932 "xmlparse.c"
      case 75: // $bb90
        var $280=$entity; //@line 4936 "xmlparse.c"
        var $281=$280+4; //@line 4936 "xmlparse.c"
        var $282=HEAP[$281]; //@line 4936 "xmlparse.c"
        var $283=$entity; //@line 4936 "xmlparse.c"
        var $284=$283+8; //@line 4936 "xmlparse.c"
        var $285=HEAP[$284]; //@line 4936 "xmlparse.c"
        var $286=$282+$285; //@line 4936 "xmlparse.c"
        $textEnd=$286; //@line 4936 "xmlparse.c"
        var $287=$entity; //@line 4937 "xmlparse.c"
        var $288=$287+32; //@line 4937 "xmlparse.c"
        HEAP[$288]=1; //@line 4937 "xmlparse.c"
        var $289=$entity; //@line 4938 "xmlparse.c"
        var $290=$289+4; //@line 4938 "xmlparse.c"
        var $291=HEAP[$290]; //@line 4938 "xmlparse.c"
        var $292=$isCdata_addr; //@line 4938 "xmlparse.c"
        var $293=($292); //@line 4938 "xmlparse.c"
        var $294=$parser_addr; //@line 4938 "xmlparse.c"
        var $295=$294+228; //@line 4938 "xmlparse.c"
        var $296=HEAP[$295]; //@line 4938 "xmlparse.c"
        var $297=$parser_addr; //@line 4938 "xmlparse.c"
        var $298=((($293)) & 255); //@line 4938 "xmlparse.c"
        var $299=$textEnd; //@line 4938 "xmlparse.c"
        var $300=$pool_addr; //@line 4938 "xmlparse.c"
        var $301=_appendAttributeValue($297, $296, $298, $291, $299, $300); //@line 4938 "xmlparse.c"
        $result=$301; //@line 4938 "xmlparse.c"
        var $302=$entity; //@line 4941 "xmlparse.c"
        var $303=$302+32; //@line 4941 "xmlparse.c"
        HEAP[$303]=0; //@line 4941 "xmlparse.c"
        var $304=$result; //@line 4942 "xmlparse.c"
        var $305=($304)!=0; //@line 4942 "xmlparse.c"
        if ($305) { __label__ = 76; break; } else { __label__ = 80; break; } //@line 4942 "xmlparse.c"
      case 76: // $bb91
        var $306=$result; //@line 4943 "xmlparse.c"
        $0=$306; //@line 4943 "xmlparse.c"
        __label__ = 81; break; //@line 4943 "xmlparse.c"
      case 77: // $bb93
        var $307=$parser_addr; //@line 4948 "xmlparse.c"
        var $308=$307+144; //@line 4948 "xmlparse.c"
        var $309=HEAP[$308]; //@line 4948 "xmlparse.c"
        var $310=$enc_addr; //@line 4948 "xmlparse.c"
        var $311=($309)==($310); //@line 4948 "xmlparse.c"
        if ($311) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 4948 "xmlparse.c"
      case 78: // $bb94
        var $312=$parser_addr; //@line 4949 "xmlparse.c"
        var $313=$312+288; //@line 4949 "xmlparse.c"
        var $314=$ptr_addr; //@line 4949 "xmlparse.c"
        HEAP[$313]=$314; //@line 4949 "xmlparse.c"
        __label__ = 79; break; //@line 4949 "xmlparse.c"
      case 79: // $bb95
        $0=23; //@line 4950 "xmlparse.c"
        __label__ = 81; break; //@line 4950 "xmlparse.c"
      case 80: // $bb96
        var $315=HEAP[$next]; //@line 4952 "xmlparse.c"
        $ptr_addr=$315; //@line 4952 "xmlparse.c"
        __label__ = 1; break; //@line 4952 "xmlparse.c"
      case 81: // $bb97
        var $316=$0; //@line 4818 "xmlparse.c"
        $retval=$316; //@line 4818 "xmlparse.c"
        var $retval98=$retval; //@line 4818 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval98; //@line 4818 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _storeEntityValue($parser, $enc, $entityTextPtr, $entityTextEnd) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $enc_addr;
        var $entityTextPtr_addr;
        var $entityTextEnd_addr;
        var $retval;
        var $0;
        var $dtd;
        var $pool;
        var $result;
        var $oldInEntityValue;
        var $next=__stackBase__;
        var $tok;
        var $name;
        var $entity;
        var $buf=__stackBase__+4;
        var $i;
        var $n;
        $parser_addr=$parser;
        $enc_addr=$enc;
        $entityTextPtr_addr=$entityTextPtr;
        $entityTextEnd_addr=$entityTextEnd;
        var $1=$parser_addr; //@line 4963 "xmlparse.c"
        var $2=$1+356; //@line 4963 "xmlparse.c"
        var $3=HEAP[$2]; //@line 4963 "xmlparse.c"
        $dtd=$3; //@line 4963 "xmlparse.c"
        var $4=$dtd; //@line 4964 "xmlparse.c"
        var $5=$4+104; //@line 4964 "xmlparse.c"
        $pool=$5; //@line 4964 "xmlparse.c"
        $result=0; //@line 4965 "xmlparse.c"
        var $6=$parser_addr; //@line 4967 "xmlparse.c"
        var $7=$6+256; //@line 4967 "xmlparse.c"
        var $8=$7+20; //@line 4967 "xmlparse.c"
        var $9=HEAP[$8]; //@line 4967 "xmlparse.c"
        $oldInEntityValue=$9; //@line 4967 "xmlparse.c"
        var $10=$parser_addr; //@line 4968 "xmlparse.c"
        var $11=$10+256; //@line 4968 "xmlparse.c"
        var $12=$11+20; //@line 4968 "xmlparse.c"
        HEAP[$12]=1; //@line 4968 "xmlparse.c"
        var $13=$pool; //@line 4973 "xmlparse.c"
        var $14=$13; //@line 4973 "xmlparse.c"
        var $15=HEAP[$14]; //@line 4973 "xmlparse.c"
        var $16=($15)==0; //@line 4973 "xmlparse.c"
        if ($16) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4973 "xmlparse.c"
      case 1: // $bb
        var $17=$pool; //@line 4974 "xmlparse.c"
        var $18=_poolGrow($17); //@line 4974 "xmlparse.c"
        var $19=($18)==0; //@line 4974 "xmlparse.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 4974 "xmlparse.c"
      case 2: // $bb2_preheader
        var $buf39=$buf; //@line 5082 "xmlparse.c"
        __label__ = 4; break;
      case 3: // $bb1
        $0=1; //@line 4975 "xmlparse.c"
        __label__ = 57; break; //@line 4975 "xmlparse.c"
      case 4: // $bb2
        var $20=$enc_addr; //@line 4980 "xmlparse.c"
        var $21=$20+16; //@line 4980 "xmlparse.c"
        var $22=$21+4; //@line 4980 "xmlparse.c"
        var $23=HEAP[$22]; //@line 4980 "xmlparse.c"
        var $24=$enc_addr; //@line 4980 "xmlparse.c"
        var $25=$entityTextPtr_addr; //@line 4980 "xmlparse.c"
        var $26=$entityTextEnd_addr; //@line 4980 "xmlparse.c"
        var $27=FUNCTION_TABLE[$23]($24, $25, $26, $next); //@line 4980 "xmlparse.c"
        $tok=$27; //@line 4980 "xmlparse.c"
        if ($27 == -4) {
          __label__ = 24; break;
        }
        else if ($27 == -3) {
          __label__ = 27; break;
        }
        else if ($27 == -1) {
          __label__ = 46; break;
        }
        else if ($27 == 0) {
          __label__ = 49; break;
        }
        else if ($27 == 6) {
          __label__ = 25; break;
        }
        else if ($27 == 7) {
          __label__ = 28; break;
        }
        else if ($27 == 9) {
          __label__ = 25; break;
        }
        else if ($27 == 10) {
          __label__ = 32; break;
        }
        else if ($27 == 28) {
          __label__ = 5; break;
        }
        else {
        __label__ = 52; break;
        }
        
      case 5: // $bb3
        var $28=$parser_addr; //@line 4984 "xmlparse.c"
        var $29=$28+488; //@line 4984 "xmlparse.c"
        var $30=HEAP[$29]; //@line 4984 "xmlparse.c"
        var $31=($30)!=0; //@line 4984 "xmlparse.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 4984 "xmlparse.c"
      case 6: // $bb4
        var $32=$parser_addr; //@line 4984 "xmlparse.c"
        var $33=$32+144; //@line 4984 "xmlparse.c"
        var $34=HEAP[$33]; //@line 4984 "xmlparse.c"
        var $35=$enc_addr; //@line 4984 "xmlparse.c"
        var $36=($34)!=($35); //@line 4984 "xmlparse.c"
        if ($36) { __label__ = 7; break; } else { __label__ = 23; break; } //@line 4984 "xmlparse.c"
      case 7: // $bb5
        var $37=HEAP[$next]; //@line 4987 "xmlparse.c"
        var $38=$enc_addr; //@line 4987 "xmlparse.c"
        var $39=$38+68; //@line 4987 "xmlparse.c"
        var $40=HEAP[$39]; //@line 4987 "xmlparse.c"
        var $41=0 - ($40); //@line 4987 "xmlparse.c"
        var $42=$37+$41; //@line 4987 "xmlparse.c"
        var $43=$enc_addr; //@line 4987 "xmlparse.c"
        var $44=$43+68; //@line 4987 "xmlparse.c"
        var $45=HEAP[$44]; //@line 4987 "xmlparse.c"
        var $46=$entityTextPtr_addr; //@line 4987 "xmlparse.c"
        var $47=$46+$45; //@line 4987 "xmlparse.c"
        var $48=$parser_addr; //@line 4987 "xmlparse.c"
        var $49=$48+416; //@line 4987 "xmlparse.c"
        var $50=$enc_addr; //@line 4987 "xmlparse.c"
        var $51=_poolStoreString($49, $50, $47, $42); //@line 4987 "xmlparse.c"
        $name=$51; //@line 4987 "xmlparse.c"
        var $52=($51)==0; //@line 4990 "xmlparse.c"
        if ($52) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4990 "xmlparse.c"
      case 8: // $bb6
        $result=1; //@line 4991 "xmlparse.c"
        __label__ = 56; break; //@line 4991 "xmlparse.c"
      case 9: // $bb7
        var $53=$dtd; //@line 4994 "xmlparse.c"
        var $54=$53+132; //@line 4994 "xmlparse.c"
        var $55=$name; //@line 4994 "xmlparse.c"
        var $56=_lookup($54, $55, 0); //@line 4994 "xmlparse.c"
        var $57=$56; //@line 4994 "xmlparse.c"
        $entity=$57; //@line 4994 "xmlparse.c"
        var $58=$parser_addr; //@line 4995 "xmlparse.c"
        var $59=$58+416; //@line 4995 "xmlparse.c"
        var $60=$59+16; //@line 4995 "xmlparse.c"
        var $61=HEAP[$60]; //@line 4995 "xmlparse.c"
        var $62=$parser_addr; //@line 4995 "xmlparse.c"
        var $63=$62+416; //@line 4995 "xmlparse.c"
        var $64=$63+12; //@line 4995 "xmlparse.c"
        HEAP[$64]=$61; //@line 4995 "xmlparse.c"
        var $65=$entity; //@line 4996 "xmlparse.c"
        var $66=($65)==0; //@line 4996 "xmlparse.c"
        if ($66) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4996 "xmlparse.c"
      case 10: // $bb8
        var $67=$dtd; //@line 5003 "xmlparse.c"
        var $68=$67+130; //@line 5003 "xmlparse.c"
        var $69=HEAP[$68]; //@line 5003 "xmlparse.c"
        var $70=$dtd; //@line 5003 "xmlparse.c"
        var $71=$70+128; //@line 5003 "xmlparse.c"
        HEAP[$71]=$69; //@line 5003 "xmlparse.c"
        __label__ = 56; break; //@line 5003 "xmlparse.c"
      case 11: // $bb9
        var $72=$entity; //@line 5006 "xmlparse.c"
        var $73=$72+32; //@line 5006 "xmlparse.c"
        var $74=HEAP[$73]; //@line 5006 "xmlparse.c"
        var $75=($74)!=0; //@line 5006 "xmlparse.c"
        if ($75) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 5006 "xmlparse.c"
      case 12: // $bb10
        var $76=$parser_addr; //@line 5007 "xmlparse.c"
        var $77=$76+144; //@line 5007 "xmlparse.c"
        var $78=HEAP[$77]; //@line 5007 "xmlparse.c"
        var $79=$enc_addr; //@line 5007 "xmlparse.c"
        var $80=($78)==($79); //@line 5007 "xmlparse.c"
        if ($80) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5007 "xmlparse.c"
      case 13: // $bb11
        var $81=$parser_addr; //@line 5008 "xmlparse.c"
        var $82=$81+288; //@line 5008 "xmlparse.c"
        var $83=$entityTextPtr_addr; //@line 5008 "xmlparse.c"
        HEAP[$82]=$83; //@line 5008 "xmlparse.c"
        __label__ = 14; break; //@line 5008 "xmlparse.c"
      case 14: // $bb12
        $result=12; //@line 5009 "xmlparse.c"
        __label__ = 56; break; //@line 5009 "xmlparse.c"
      case 15: // $bb13
        var $84=$entity; //@line 5012 "xmlparse.c"
        var $85=$84+16; //@line 5012 "xmlparse.c"
        var $86=HEAP[$85]; //@line 5012 "xmlparse.c"
        var $87=($86)!=0; //@line 5012 "xmlparse.c"
        if ($87) { __label__ = 16; break; } else { __label__ = 22; break; } //@line 5012 "xmlparse.c"
      case 16: // $bb14
        var $88=$parser_addr; //@line 5013 "xmlparse.c"
        var $89=$88+112; //@line 5013 "xmlparse.c"
        var $90=HEAP[$89]; //@line 5013 "xmlparse.c"
        var $91=($90)!=0; //@line 5013 "xmlparse.c"
        var $92=$dtd; //@line 5014 "xmlparse.c"
        if ($91) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 5013 "xmlparse.c"
      case 17: // $bb15
        var $93=$92+131; //@line 5014 "xmlparse.c"
        HEAP[$93]=0; //@line 5014 "xmlparse.c"
        var $94=$entity; //@line 5015 "xmlparse.c"
        var $95=$94+32; //@line 5015 "xmlparse.c"
        HEAP[$95]=1; //@line 5015 "xmlparse.c"
        var $96=$parser_addr; //@line 5016 "xmlparse.c"
        var $97=$96+112; //@line 5016 "xmlparse.c"
        var $98=HEAP[$97]; //@line 5016 "xmlparse.c"
        var $99=$entity; //@line 5016 "xmlparse.c"
        var $100=$99+24; //@line 5016 "xmlparse.c"
        var $101=HEAP[$100]; //@line 5016 "xmlparse.c"
        var $102=$entity; //@line 5016 "xmlparse.c"
        var $103=$102+16; //@line 5016 "xmlparse.c"
        var $104=HEAP[$103]; //@line 5016 "xmlparse.c"
        var $105=$entity; //@line 5016 "xmlparse.c"
        var $106=$105+20; //@line 5016 "xmlparse.c"
        var $107=HEAP[$106]; //@line 5016 "xmlparse.c"
        var $108=$parser_addr; //@line 5016 "xmlparse.c"
        var $109=$108+116; //@line 5016 "xmlparse.c"
        var $110=HEAP[$109]; //@line 5016 "xmlparse.c"
        var $111=FUNCTION_TABLE[$98]($110, 0, $107, $104, $101); //@line 5016 "xmlparse.c"
        var $112=($111)==0; //@line 5016 "xmlparse.c"
        var $113=$entity; //@line 5021 "xmlparse.c"
        var $114=$113+32; //@line 5021 "xmlparse.c"
        HEAP[$114]=0; //@line 5021 "xmlparse.c"
        if ($112) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 5016 "xmlparse.c"
      case 18: // $bb16
        $result=21; //@line 5022 "xmlparse.c"
        __label__ = 56; break; //@line 5022 "xmlparse.c"
      case 19: // $bb17
        var $115=$dtd; //@line 5026 "xmlparse.c"
        var $116=$115+131; //@line 5026 "xmlparse.c"
        var $117=HEAP[$116]; //@line 5026 "xmlparse.c"
        var $118=($117)==0; //@line 5026 "xmlparse.c"
        if ($118) { __label__ = 20; break; } else { __label__ = 55; break; } //@line 5026 "xmlparse.c"
      case 20: // $bb18
        var $119=$dtd; //@line 5027 "xmlparse.c"
        var $120=$119+130; //@line 5027 "xmlparse.c"
        var $121=HEAP[$120]; //@line 5027 "xmlparse.c"
        var $122=$dtd; //@line 5027 "xmlparse.c"
        var $123=$122+128; //@line 5027 "xmlparse.c"
        HEAP[$123]=$121; //@line 5027 "xmlparse.c"
        __label__ = 55; break; //@line 5027 "xmlparse.c"
      case 21: // $bb20
        var $124=$92+130; //@line 5030 "xmlparse.c"
        var $125=HEAP[$124]; //@line 5030 "xmlparse.c"
        var $126=$dtd; //@line 5030 "xmlparse.c"
        var $127=$126+128; //@line 5030 "xmlparse.c"
        HEAP[$127]=$125; //@line 5030 "xmlparse.c"
        __label__ = 55; break; //@line 5030 "xmlparse.c"
      case 22: // $bb22
        var $128=$entity; //@line 5033 "xmlparse.c"
        var $129=$128+32; //@line 5033 "xmlparse.c"
        HEAP[$129]=1; //@line 5033 "xmlparse.c"
        var $130=$entity; //@line 5034 "xmlparse.c"
        var $131=$130+4; //@line 5034 "xmlparse.c"
        var $132=HEAP[$131]; //@line 5034 "xmlparse.c"
        var $133=$entity; //@line 5034 "xmlparse.c"
        var $134=$133+8; //@line 5034 "xmlparse.c"
        var $135=HEAP[$134]; //@line 5034 "xmlparse.c"
        var $136=$132+$135; //@line 5034 "xmlparse.c"
        var $137=$entity; //@line 5034 "xmlparse.c"
        var $138=$137+4; //@line 5034 "xmlparse.c"
        var $139=HEAP[$138]; //@line 5034 "xmlparse.c"
        var $140=$parser_addr; //@line 5034 "xmlparse.c"
        var $141=$140+228; //@line 5034 "xmlparse.c"
        var $142=HEAP[$141]; //@line 5034 "xmlparse.c"
        var $143=$parser_addr; //@line 5034 "xmlparse.c"
        var $144=_storeEntityValue($143, $142, $139, $136); //@line 5034 "xmlparse.c"
        $result=$144; //@line 5034 "xmlparse.c"
        var $145=$entity; //@line 5039 "xmlparse.c"
        var $146=$145+32; //@line 5039 "xmlparse.c"
        HEAP[$146]=0; //@line 5039 "xmlparse.c"
        var $147=$result; //@line 5040 "xmlparse.c"
        var $148=($147)!=0; //@line 5040 "xmlparse.c"
        if ($148) { __label__ = 56; break; } else { __label__ = 55; break; } //@line 5040 "xmlparse.c"
      case 23: // $bb24
        var $149=$parser_addr; //@line 5048 "xmlparse.c"
        var $150=$149+288; //@line 5048 "xmlparse.c"
        var $151=$entityTextPtr_addr; //@line 5048 "xmlparse.c"
        HEAP[$150]=$151; //@line 5048 "xmlparse.c"
        $result=10; //@line 5049 "xmlparse.c"
        __label__ = 56; break; //@line 5049 "xmlparse.c"
      case 24: // $bb25
        $result=0; //@line 5052 "xmlparse.c"
        __label__ = 56; break; //@line 5052 "xmlparse.c"
      case 25: // $bb26
        var $152=HEAP[$next]; //@line 5056 "xmlparse.c"
        var $153=$pool; //@line 5056 "xmlparse.c"
        var $154=$enc_addr; //@line 5056 "xmlparse.c"
        var $155=$entityTextPtr_addr; //@line 5056 "xmlparse.c"
        var $156=_poolAppend($153, $154, $155, $152); //@line 5056 "xmlparse.c"
        var $157=($156)==0; //@line 5056 "xmlparse.c"
        if ($157) { __label__ = 26; break; } else { __label__ = 55; break; } //@line 5056 "xmlparse.c"
      case 26: // $bb27
        $result=1; //@line 5057 "xmlparse.c"
        __label__ = 56; break; //@line 5057 "xmlparse.c"
      case 27: // $bb29
        var $158=$enc_addr; //@line 5062 "xmlparse.c"
        var $159=$158+68; //@line 5062 "xmlparse.c"
        var $160=HEAP[$159]; //@line 5062 "xmlparse.c"
        var $161=$entityTextPtr_addr; //@line 5062 "xmlparse.c"
        var $162=$161+$160; //@line 5062 "xmlparse.c"
        HEAP[$next]=$162; //@line 5062 "xmlparse.c"
        __label__ = 28; break; //@line 5062 "xmlparse.c"
      case 28: // $bb30
        var $163=$pool; //@line 5065 "xmlparse.c"
        var $164=$163+8; //@line 5065 "xmlparse.c"
        var $165=HEAP[$164]; //@line 5065 "xmlparse.c"
        var $166=$pool; //@line 5065 "xmlparse.c"
        var $167=$166+12; //@line 5065 "xmlparse.c"
        var $168=HEAP[$167]; //@line 5065 "xmlparse.c"
        var $169=($165)==($168); //@line 5065 "xmlparse.c"
        if ($169) { __label__ = 29; break; } else { __label__ = 31; break; } //@line 5065 "xmlparse.c"
      case 29: // $bb31
        var $170=$pool; //@line 5065 "xmlparse.c"
        var $171=_poolGrow($170); //@line 5065 "xmlparse.c"
        var $172=($171)==0; //@line 5065 "xmlparse.c"
        if ($172) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 5065 "xmlparse.c"
      case 30: // $bb32
        $result=1; //@line 5066 "xmlparse.c"
        __label__ = 56; break; //@line 5066 "xmlparse.c"
      case 31: // $bb33
        var $173=$pool; //@line 5069 "xmlparse.c"
        var $174=$173+12; //@line 5069 "xmlparse.c"
        var $175=HEAP[$174]; //@line 5069 "xmlparse.c"
        HEAP[$175]=10; //@line 5069 "xmlparse.c"
        var $176=$175+1; //@line 5069 "xmlparse.c"
        var $177=$pool; //@line 5069 "xmlparse.c"
        var $178=$177+12; //@line 5069 "xmlparse.c"
        HEAP[$178]=$176; //@line 5069 "xmlparse.c"
        __label__ = 55; break; //@line 5069 "xmlparse.c"
      case 32: // $bb34
        var $179=$enc_addr; //@line 5075 "xmlparse.c"
        var $180=$179+44; //@line 5075 "xmlparse.c"
        var $181=HEAP[$180]; //@line 5075 "xmlparse.c"
        var $182=$enc_addr; //@line 5075 "xmlparse.c"
        var $183=$entityTextPtr_addr; //@line 5075 "xmlparse.c"
        var $184=FUNCTION_TABLE[$181]($182, $183); //@line 5075 "xmlparse.c"
        $n=$184; //@line 5075 "xmlparse.c"
        var $185=$n; //@line 5076 "xmlparse.c"
        var $186=($185) < 0; //@line 5076 "xmlparse.c"
        if ($186) { __label__ = 33; break; } else { __label__ = 36; break; } //@line 5076 "xmlparse.c"
      case 33: // $bb35
        var $187=$parser_addr; //@line 5077 "xmlparse.c"
        var $188=$187+144; //@line 5077 "xmlparse.c"
        var $189=HEAP[$188]; //@line 5077 "xmlparse.c"
        var $190=$enc_addr; //@line 5077 "xmlparse.c"
        var $191=($189)==($190); //@line 5077 "xmlparse.c"
        if ($191) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 5077 "xmlparse.c"
      case 34: // $bb36
        var $192=$parser_addr; //@line 5078 "xmlparse.c"
        var $193=$192+288; //@line 5078 "xmlparse.c"
        var $194=$entityTextPtr_addr; //@line 5078 "xmlparse.c"
        HEAP[$193]=$194; //@line 5078 "xmlparse.c"
        __label__ = 35; break; //@line 5078 "xmlparse.c"
      case 35: // $bb37
        $result=14; //@line 5079 "xmlparse.c"
        __label__ = 56; break; //@line 5079 "xmlparse.c"
      case 36: // $bb38
        var $195=$n; //@line 5082 "xmlparse.c"
        var $196=_PyExpat_XmlUtf8Encode($195, $buf39); //@line 5082 "xmlparse.c"
        $n=$196; //@line 5082 "xmlparse.c"
        var $197=$n; //@line 5083 "xmlparse.c"
        var $198=($197)==0; //@line 5083 "xmlparse.c"
        if ($198) { __label__ = 37; break; } else { __label__ = 40; break; } //@line 5083 "xmlparse.c"
      case 37: // $bb40
        var $199=$parser_addr; //@line 5084 "xmlparse.c"
        var $200=$199+144; //@line 5084 "xmlparse.c"
        var $201=HEAP[$200]; //@line 5084 "xmlparse.c"
        var $202=$enc_addr; //@line 5084 "xmlparse.c"
        var $203=($201)==($202); //@line 5084 "xmlparse.c"
        if ($203) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 5084 "xmlparse.c"
      case 38: // $bb41
        var $204=$parser_addr; //@line 5085 "xmlparse.c"
        var $205=$204+288; //@line 5085 "xmlparse.c"
        var $206=$entityTextPtr_addr; //@line 5085 "xmlparse.c"
        HEAP[$205]=$206; //@line 5085 "xmlparse.c"
        __label__ = 39; break; //@line 5085 "xmlparse.c"
      case 39: // $bb42
        $result=14; //@line 5086 "xmlparse.c"
        __label__ = 56; break; //@line 5086 "xmlparse.c"
      case 40: // $bb43
        $i=0; //@line 5089 "xmlparse.c"
        __label__ = 45; break; //@line 5089 "xmlparse.c"
      case 41: // $bb44
        var $207=$pool; //@line 5090 "xmlparse.c"
        var $208=$207+8; //@line 5090 "xmlparse.c"
        var $209=HEAP[$208]; //@line 5090 "xmlparse.c"
        var $210=$pool; //@line 5090 "xmlparse.c"
        var $211=$210+12; //@line 5090 "xmlparse.c"
        var $212=HEAP[$211]; //@line 5090 "xmlparse.c"
        var $213=($209)==($212); //@line 5090 "xmlparse.c"
        if ($213) { __label__ = 42; break; } else { __label__ = 44; break; } //@line 5090 "xmlparse.c"
      case 42: // $bb45
        var $214=$pool; //@line 5090 "xmlparse.c"
        var $215=_poolGrow($214); //@line 5090 "xmlparse.c"
        var $216=($215)==0; //@line 5090 "xmlparse.c"
        if ($216) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 5090 "xmlparse.c"
      case 43: // $bb46
        $result=1; //@line 5091 "xmlparse.c"
        __label__ = 56; break; //@line 5091 "xmlparse.c"
      case 44: // $bb47
        var $217=$pool; //@line 5094 "xmlparse.c"
        var $218=$217+12; //@line 5094 "xmlparse.c"
        var $219=HEAP[$218]; //@line 5094 "xmlparse.c"
        var $220=$i; //@line 5094 "xmlparse.c"
        var $221=$buf+$220; //@line 5094 "xmlparse.c"
        var $222=HEAP[$221]; //@line 5094 "xmlparse.c"
        HEAP[$219]=$222; //@line 5094 "xmlparse.c"
        var $223=$219+1; //@line 5094 "xmlparse.c"
        var $224=$pool; //@line 5094 "xmlparse.c"
        var $225=$224+12; //@line 5094 "xmlparse.c"
        HEAP[$225]=$223; //@line 5094 "xmlparse.c"
        var $226=$i; //@line 5089 "xmlparse.c"
        var $227=($226) + 1; //@line 5089 "xmlparse.c"
        $i=$227; //@line 5089 "xmlparse.c"
        __label__ = 45; break; //@line 5089 "xmlparse.c"
      case 45: // $bb48
        var $228=$i; //@line 5089 "xmlparse.c"
        var $229=$n; //@line 5089 "xmlparse.c"
        var $230=($228) < ($229); //@line 5089 "xmlparse.c"
        if ($230) { __label__ = 41; break; } else { __label__ = 55; break; } //@line 5089 "xmlparse.c"
      case 46: // $bb50
        var $231=$parser_addr; //@line 5099 "xmlparse.c"
        var $232=$231+144; //@line 5099 "xmlparse.c"
        var $233=HEAP[$232]; //@line 5099 "xmlparse.c"
        var $234=$enc_addr; //@line 5099 "xmlparse.c"
        var $235=($233)==($234); //@line 5099 "xmlparse.c"
        if ($235) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 5099 "xmlparse.c"
      case 47: // $bb51
        var $236=$parser_addr; //@line 5100 "xmlparse.c"
        var $237=$236+288; //@line 5100 "xmlparse.c"
        var $238=$entityTextPtr_addr; //@line 5100 "xmlparse.c"
        HEAP[$237]=$238; //@line 5100 "xmlparse.c"
        __label__ = 48; break; //@line 5100 "xmlparse.c"
      case 48: // $bb52
        $result=4; //@line 5101 "xmlparse.c"
        __label__ = 56; break; //@line 5101 "xmlparse.c"
      case 49: // $bb53
        var $239=$parser_addr; //@line 5104 "xmlparse.c"
        var $240=$239+144; //@line 5104 "xmlparse.c"
        var $241=HEAP[$240]; //@line 5104 "xmlparse.c"
        var $242=$enc_addr; //@line 5104 "xmlparse.c"
        var $243=($241)==($242); //@line 5104 "xmlparse.c"
        if ($243) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 5104 "xmlparse.c"
      case 50: // $bb54
        var $244=HEAP[$next]; //@line 5105 "xmlparse.c"
        var $245=$parser_addr; //@line 5105 "xmlparse.c"
        var $246=$245+288; //@line 5105 "xmlparse.c"
        HEAP[$246]=$244; //@line 5105 "xmlparse.c"
        __label__ = 51; break; //@line 5105 "xmlparse.c"
      case 51: // $bb55
        $result=4; //@line 5106 "xmlparse.c"
        __label__ = 56; break; //@line 5106 "xmlparse.c"
      case 52: // $bb56
        var $247=$parser_addr; //@line 5109 "xmlparse.c"
        var $248=$247+144; //@line 5109 "xmlparse.c"
        var $249=HEAP[$248]; //@line 5109 "xmlparse.c"
        var $250=$enc_addr; //@line 5109 "xmlparse.c"
        var $251=($249)==($250); //@line 5109 "xmlparse.c"
        if ($251) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 5109 "xmlparse.c"
      case 53: // $bb57
        var $252=$parser_addr; //@line 5110 "xmlparse.c"
        var $253=$252+288; //@line 5110 "xmlparse.c"
        var $254=$entityTextPtr_addr; //@line 5110 "xmlparse.c"
        HEAP[$253]=$254; //@line 5110 "xmlparse.c"
        __label__ = 54; break; //@line 5110 "xmlparse.c"
      case 54: // $bb58
        $result=23; //@line 5111 "xmlparse.c"
        __label__ = 56; break; //@line 5111 "xmlparse.c"
      case 55: // $bb59
        var $255=HEAP[$next]; //@line 5114 "xmlparse.c"
        $entityTextPtr_addr=$255; //@line 5114 "xmlparse.c"
        __label__ = 4; break; //@line 5114 "xmlparse.c"
      case 56: // $endEntityValue
        var $256=$parser_addr; //@line 5118 "xmlparse.c"
        var $257=$256+256; //@line 5118 "xmlparse.c"
        var $258=$257+20; //@line 5118 "xmlparse.c"
        var $259=$oldInEntityValue; //@line 5118 "xmlparse.c"
        HEAP[$258]=$259; //@line 5118 "xmlparse.c"
        var $260=$result; //@line 5120 "xmlparse.c"
        $0=$260; //@line 5120 "xmlparse.c"
        __label__ = 57; break; //@line 5120 "xmlparse.c"
      case 57: // $bb60
        var $261=$0; //@line 4975 "xmlparse.c"
        $retval=$261; //@line 4975 "xmlparse.c"
        var $retval61=$retval; //@line 4975 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval61; //@line 4975 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normalizeLines($s) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr;
        var $p;
        $s_addr=$s;
        __label__ = 1; break; //@line 5125 "xmlparse.c"
      case 1: // $bb
        var $0=$s_addr; //@line 5128 "xmlparse.c"
        var $1=HEAP[$0]; //@line 5128 "xmlparse.c"
        var $2=($1)==0; //@line 5128 "xmlparse.c"
        if ($2) { __label__ = 11; break; } else { __label__ = 2; break; } //@line 5128 "xmlparse.c"
      case 2: // $bb1
        var $3=$s_addr; //@line 5130 "xmlparse.c"
        var $4=HEAP[$3]; //@line 5130 "xmlparse.c"
        var $5=($4)==13; //@line 5130 "xmlparse.c"
        var $6=$s_addr; //@line 5133 "xmlparse.c"
        if ($5) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 5130 "xmlparse.c"
      case 3: // $bb2
        var $7=$6+1; //@line 5127 "xmlparse.c"
        $s_addr=$7; //@line 5127 "xmlparse.c"
        __label__ = 1; break; //@line 5127 "xmlparse.c"
      case 4: // $bb3
        $p=$6; //@line 5133 "xmlparse.c"
        __label__ = 5; break; //@line 5133 "xmlparse.c"
      case 5: // $bb4
        var $8=$s_addr; //@line 5135 "xmlparse.c"
        var $9=HEAP[$8]; //@line 5135 "xmlparse.c"
        var $10=($9)==13; //@line 5135 "xmlparse.c"
        if ($10) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 5135 "xmlparse.c"
      case 6: // $bb5
        var $11=$p; //@line 5136 "xmlparse.c"
        HEAP[$11]=10; //@line 5136 "xmlparse.c"
        var $12=$p; //@line 5136 "xmlparse.c"
        var $13=$12+1; //@line 5136 "xmlparse.c"
        $p=$13; //@line 5136 "xmlparse.c"
        var $14=$s_addr; //@line 5137 "xmlparse.c"
        var $15=$14+1; //@line 5137 "xmlparse.c"
        $s_addr=$15; //@line 5137 "xmlparse.c"
        var $16=$s_addr; //@line 5137 "xmlparse.c"
        var $17=HEAP[$16]; //@line 5137 "xmlparse.c"
        var $18=($17)==10; //@line 5137 "xmlparse.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5137 "xmlparse.c"
      case 7: // $bb6
        var $19=$s_addr; //@line 5138 "xmlparse.c"
        var $20=$19+1; //@line 5138 "xmlparse.c"
        $s_addr=$20; //@line 5138 "xmlparse.c"
        __label__ = 9; break; //@line 5138 "xmlparse.c"
      case 8: // $bb8
        var $21=$s_addr; //@line 5141 "xmlparse.c"
        var $22=HEAP[$21]; //@line 5141 "xmlparse.c"
        var $23=$p; //@line 5141 "xmlparse.c"
        HEAP[$23]=$22; //@line 5141 "xmlparse.c"
        var $24=$p; //@line 5141 "xmlparse.c"
        var $25=$24+1; //@line 5141 "xmlparse.c"
        $p=$25; //@line 5141 "xmlparse.c"
        var $26=$s_addr; //@line 5141 "xmlparse.c"
        var $27=$26+1; //@line 5141 "xmlparse.c"
        $s_addr=$27; //@line 5141 "xmlparse.c"
        __label__ = 9; break; //@line 5141 "xmlparse.c"
      case 9: // $bb9
        var $28=$s_addr; //@line 5142 "xmlparse.c"
        var $29=HEAP[$28]; //@line 5142 "xmlparse.c"
        var $30=($29)!=0; //@line 5142 "xmlparse.c"
        if ($30) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 5142 "xmlparse.c"
      case 10: // $bb10
        var $31=$p; //@line 5143 "xmlparse.c"
        HEAP[$31]=0; //@line 5143 "xmlparse.c"
        __label__ = 11; break; //@line 5143 "xmlparse.c"
      case 11: // $return
        ;
        return; //@line 5129 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _reportProcessingInstruction($parser, $enc, $start, $end) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $enc_addr;
        var $start_addr;
        var $end_addr;
        var $retval;
        var $0;
        var $target;
        var $data;
        var $tem;
        $parser_addr=$parser;
        $enc_addr=$enc;
        $start_addr=$start;
        $end_addr=$end;
        var $1=$parser_addr; //@line 5153 "xmlparse.c"
        var $2=$1+64; //@line 5153 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5153 "xmlparse.c"
        var $4=($3)==0; //@line 5153 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 5153 "xmlparse.c"
      case 1: // $bb
        var $5=$parser_addr; //@line 5154 "xmlparse.c"
        var $6=$5+80; //@line 5154 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5154 "xmlparse.c"
        var $8=($7)!=0; //@line 5154 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5154 "xmlparse.c"
      case 2: // $bb1
        var $9=$parser_addr; //@line 5155 "xmlparse.c"
        var $10=$enc_addr; //@line 5155 "xmlparse.c"
        var $11=$start_addr; //@line 5155 "xmlparse.c"
        var $12=$end_addr; //@line 5155 "xmlparse.c"
        _reportDefault($9, $10, $11, $12); //@line 5155 "xmlparse.c"
        __label__ = 3; break; //@line 5155 "xmlparse.c"
      case 3: // $bb2
        $0=1; //@line 5156 "xmlparse.c"
        __label__ = 9; break; //@line 5156 "xmlparse.c"
      case 4: // $bb3
        var $13=$enc_addr; //@line 5158 "xmlparse.c"
        var $14=$13+68; //@line 5158 "xmlparse.c"
        var $15=HEAP[$14]; //@line 5158 "xmlparse.c"
        var $16=($15) * 2; //@line 5158 "xmlparse.c"
        var $17=$start_addr; //@line 5158 "xmlparse.c"
        var $18=$17+$16; //@line 5158 "xmlparse.c"
        $start_addr=$18; //@line 5158 "xmlparse.c"
        var $19=$enc_addr; //@line 5159 "xmlparse.c"
        var $20=$19+32; //@line 5159 "xmlparse.c"
        var $21=HEAP[$20]; //@line 5159 "xmlparse.c"
        var $22=$enc_addr; //@line 5159 "xmlparse.c"
        var $23=$start_addr; //@line 5159 "xmlparse.c"
        var $24=FUNCTION_TABLE[$21]($22, $23); //@line 5159 "xmlparse.c"
        var $25=$start_addr; //@line 5159 "xmlparse.c"
        var $26=$25+$24; //@line 5159 "xmlparse.c"
        $tem=$26; //@line 5159 "xmlparse.c"
        var $27=$parser_addr; //@line 5160 "xmlparse.c"
        var $28=$27+416; //@line 5160 "xmlparse.c"
        var $29=$enc_addr; //@line 5160 "xmlparse.c"
        var $30=$start_addr; //@line 5160 "xmlparse.c"
        var $31=$tem; //@line 5160 "xmlparse.c"
        var $32=_poolStoreString($28, $29, $30, $31); //@line 5160 "xmlparse.c"
        $target=$32; //@line 5160 "xmlparse.c"
        var $33=$target; //@line 5161 "xmlparse.c"
        var $34=($33)==0; //@line 5161 "xmlparse.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5161 "xmlparse.c"
      case 5: // $bb4
        $0=0; //@line 5162 "xmlparse.c"
        __label__ = 9; break; //@line 5162 "xmlparse.c"
      case 6: // $bb5
        var $35=$parser_addr; //@line 5163 "xmlparse.c"
        var $36=$35+416; //@line 5163 "xmlparse.c"
        var $37=$36+12; //@line 5163 "xmlparse.c"
        var $38=HEAP[$37]; //@line 5163 "xmlparse.c"
        var $39=$parser_addr; //@line 5163 "xmlparse.c"
        var $40=$39+416; //@line 5163 "xmlparse.c"
        var $41=$40+16; //@line 5163 "xmlparse.c"
        HEAP[$41]=$38; //@line 5163 "xmlparse.c"
        var $42=$enc_addr; //@line 5164 "xmlparse.c"
        var $43=$42+68; //@line 5164 "xmlparse.c"
        var $44=HEAP[$43]; //@line 5164 "xmlparse.c"
        var $45=($44) * -2; //@line 5164 "xmlparse.c"
        var $46=$end_addr; //@line 5164 "xmlparse.c"
        var $47=$46+$45; //@line 5164 "xmlparse.c"
        var $48=$enc_addr; //@line 5164 "xmlparse.c"
        var $49=$48+36; //@line 5164 "xmlparse.c"
        var $50=HEAP[$49]; //@line 5164 "xmlparse.c"
        var $51=$enc_addr; //@line 5164 "xmlparse.c"
        var $52=$tem; //@line 5164 "xmlparse.c"
        var $53=FUNCTION_TABLE[$50]($51, $52); //@line 5164 "xmlparse.c"
        var $54=$parser_addr; //@line 5164 "xmlparse.c"
        var $55=$54+416; //@line 5164 "xmlparse.c"
        var $56=$enc_addr; //@line 5164 "xmlparse.c"
        var $57=_poolStoreString($55, $56, $53, $47); //@line 5164 "xmlparse.c"
        $data=$57; //@line 5164 "xmlparse.c"
        var $58=$data; //@line 5167 "xmlparse.c"
        var $59=($58)==0; //@line 5167 "xmlparse.c"
        if ($59) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5167 "xmlparse.c"
      case 7: // $bb6
        $0=0; //@line 5168 "xmlparse.c"
        __label__ = 9; break; //@line 5168 "xmlparse.c"
      case 8: // $bb7
        var $60=$data; //@line 5169 "xmlparse.c"
        _normalizeLines($60); //@line 5169 "xmlparse.c"
        var $61=$parser_addr; //@line 5170 "xmlparse.c"
        var $62=$61+64; //@line 5170 "xmlparse.c"
        var $63=HEAP[$62]; //@line 5170 "xmlparse.c"
        var $64=$parser_addr; //@line 5170 "xmlparse.c"
        var $65=$64+4; //@line 5170 "xmlparse.c"
        var $66=HEAP[$65]; //@line 5170 "xmlparse.c"
        var $67=$target; //@line 5170 "xmlparse.c"
        var $68=$data; //@line 5170 "xmlparse.c"
        FUNCTION_TABLE[$63]($66, $67, $68); //@line 5170 "xmlparse.c"
        var $69=$parser_addr; //@line 5171 "xmlparse.c"
        var $70=$69+416; //@line 5171 "xmlparse.c"
        _poolClear($70); //@line 5171 "xmlparse.c"
        $0=1; //@line 5172 "xmlparse.c"
        __label__ = 9; break; //@line 5172 "xmlparse.c"
      case 9: // $bb8
        var $71=$0; //@line 5156 "xmlparse.c"
        $retval=$71; //@line 5156 "xmlparse.c"
        var $retval9=$retval; //@line 5156 "xmlparse.c"
        ;
        return $retval9; //@line 5156 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _reportComment($parser, $enc, $start, $end) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $enc_addr;
        var $start_addr;
        var $end_addr;
        var $retval;
        var $0;
        var $data;
        $parser_addr=$parser;
        $enc_addr=$enc;
        $start_addr=$start;
        $end_addr=$end;
        var $1=$parser_addr; //@line 5180 "xmlparse.c"
        var $2=$1+68; //@line 5180 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5180 "xmlparse.c"
        var $4=($3)==0; //@line 5180 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 5180 "xmlparse.c"
      case 1: // $bb
        var $5=$parser_addr; //@line 5181 "xmlparse.c"
        var $6=$5+80; //@line 5181 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5181 "xmlparse.c"
        var $8=($7)!=0; //@line 5181 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5181 "xmlparse.c"
      case 2: // $bb1
        var $9=$parser_addr; //@line 5182 "xmlparse.c"
        var $10=$enc_addr; //@line 5182 "xmlparse.c"
        var $11=$start_addr; //@line 5182 "xmlparse.c"
        var $12=$end_addr; //@line 5182 "xmlparse.c"
        _reportDefault($9, $10, $11, $12); //@line 5182 "xmlparse.c"
        __label__ = 3; break; //@line 5182 "xmlparse.c"
      case 3: // $bb2
        $0=1; //@line 5183 "xmlparse.c"
        __label__ = 7; break; //@line 5183 "xmlparse.c"
      case 4: // $bb3
        var $13=$enc_addr; //@line 5185 "xmlparse.c"
        var $14=$13+68; //@line 5185 "xmlparse.c"
        var $15=HEAP[$14]; //@line 5185 "xmlparse.c"
        var $16=($15) * -3; //@line 5185 "xmlparse.c"
        var $17=$end_addr; //@line 5185 "xmlparse.c"
        var $18=$17+$16; //@line 5185 "xmlparse.c"
        var $19=$enc_addr; //@line 5185 "xmlparse.c"
        var $20=$19+68; //@line 5185 "xmlparse.c"
        var $21=HEAP[$20]; //@line 5185 "xmlparse.c"
        var $22=($21) * 4; //@line 5185 "xmlparse.c"
        var $23=$start_addr; //@line 5185 "xmlparse.c"
        var $24=$23+$22; //@line 5185 "xmlparse.c"
        var $25=$parser_addr; //@line 5185 "xmlparse.c"
        var $26=$25+416; //@line 5185 "xmlparse.c"
        var $27=$enc_addr; //@line 5185 "xmlparse.c"
        var $28=_poolStoreString($26, $27, $24, $18); //@line 5185 "xmlparse.c"
        $data=$28; //@line 5185 "xmlparse.c"
        var $29=$data; //@line 5189 "xmlparse.c"
        var $30=($29)==0; //@line 5189 "xmlparse.c"
        if ($30) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5189 "xmlparse.c"
      case 5: // $bb4
        $0=0; //@line 5190 "xmlparse.c"
        __label__ = 7; break; //@line 5190 "xmlparse.c"
      case 6: // $bb5
        var $31=$data; //@line 5191 "xmlparse.c"
        _normalizeLines($31); //@line 5191 "xmlparse.c"
        var $32=$parser_addr; //@line 5192 "xmlparse.c"
        var $33=$32+68; //@line 5192 "xmlparse.c"
        var $34=HEAP[$33]; //@line 5192 "xmlparse.c"
        var $35=$parser_addr; //@line 5192 "xmlparse.c"
        var $36=$35+4; //@line 5192 "xmlparse.c"
        var $37=HEAP[$36]; //@line 5192 "xmlparse.c"
        var $38=$data; //@line 5192 "xmlparse.c"
        FUNCTION_TABLE[$34]($37, $38); //@line 5192 "xmlparse.c"
        var $39=$parser_addr; //@line 5193 "xmlparse.c"
        var $40=$39+416; //@line 5193 "xmlparse.c"
        _poolClear($40); //@line 5193 "xmlparse.c"
        $0=1; //@line 5194 "xmlparse.c"
        __label__ = 7; break; //@line 5194 "xmlparse.c"
      case 7: // $bb6
        var $41=$0; //@line 5183 "xmlparse.c"
        $retval=$41; //@line 5183 "xmlparse.c"
        var $retval7=$retval; //@line 5183 "xmlparse.c"
        ;
        return $retval7; //@line 5183 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _reportDefault($parser, $enc, $s, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $enc_addr;
        var $s_addr=__stackBase__;
        var $end_addr;
        var $eventPP;
        var $eventEndPP;
        var $dataPtr=__stackBase__+4;
        $parser_addr=$parser;
        $enc_addr=$enc;
        HEAP[$s_addr]=$s;
        $end_addr=$end;
        var $0=$enc_addr; //@line 5201 "xmlparse.c"
        var $1=$0+72; //@line 5201 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5201 "xmlparse.c"
        var $3=($2)==0; //@line 5201 "xmlparse.c"
        var $4=$parser_addr; //@line 5204 "xmlparse.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 5201 "xmlparse.c"
      case 1: // $bb
        var $5=$4+144; //@line 5204 "xmlparse.c"
        var $6=HEAP[$5]; //@line 5204 "xmlparse.c"
        var $7=$enc_addr; //@line 5204 "xmlparse.c"
        var $8=($6)==($7); //@line 5204 "xmlparse.c"
        var $9=$parser_addr; //@line 5205 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5204 "xmlparse.c"
      case 2: // $bb1
        var $10=$9+288; //@line 5205 "xmlparse.c"
        $eventPP=$10; //@line 5205 "xmlparse.c"
        var $11=$parser_addr; //@line 5206 "xmlparse.c"
        var $12=$11+292; //@line 5206 "xmlparse.c"
        $eventEndPP=$12; //@line 5206 "xmlparse.c"
        __label__ = 4; break; //@line 5206 "xmlparse.c"
      case 3: // $bb2
        var $13=$9+300; //@line 5209 "xmlparse.c"
        var $14=HEAP[$13]; //@line 5209 "xmlparse.c"
        var $15=$14; //@line 5209 "xmlparse.c"
        $eventPP=$15; //@line 5209 "xmlparse.c"
        var $16=$parser_addr; //@line 5210 "xmlparse.c"
        var $17=$16+300; //@line 5210 "xmlparse.c"
        var $18=HEAP[$17]; //@line 5210 "xmlparse.c"
        var $19=$18+4; //@line 5210 "xmlparse.c"
        $eventEndPP=$19; //@line 5210 "xmlparse.c"
        __label__ = 4; break; //@line 5210 "xmlparse.c"
      case 4: // $bb3
        var $20=$parser_addr; //@line 5213 "xmlparse.c"
        var $21=$20+44; //@line 5213 "xmlparse.c"
        var $22=HEAP[$21]; //@line 5213 "xmlparse.c"
        HEAP[$dataPtr]=$22; //@line 5213 "xmlparse.c"
        var $23=$enc_addr; //@line 5214 "xmlparse.c"
        var $24=$23+60; //@line 5214 "xmlparse.c"
        var $25=HEAP[$24]; //@line 5214 "xmlparse.c"
        var $26=$parser_addr; //@line 5214 "xmlparse.c"
        var $27=$26+48; //@line 5214 "xmlparse.c"
        var $28=HEAP[$27]; //@line 5214 "xmlparse.c"
        var $29=$enc_addr; //@line 5214 "xmlparse.c"
        var $30=$end_addr; //@line 5214 "xmlparse.c"
        FUNCTION_TABLE[$25]($29, $s_addr, $30, $dataPtr, $28); //@line 5214 "xmlparse.c"
        var $31=HEAP[$s_addr]; //@line 5215 "xmlparse.c"
        var $32=$eventEndPP; //@line 5215 "xmlparse.c"
        HEAP[$32]=$31; //@line 5215 "xmlparse.c"
        var $33=$parser_addr; //@line 5216 "xmlparse.c"
        var $34=$33+80; //@line 5216 "xmlparse.c"
        var $35=HEAP[$34]; //@line 5216 "xmlparse.c"
        var $36=HEAP[$dataPtr]; //@line 5216 "xmlparse.c"
        var $37=($36); //@line 5216 "xmlparse.c"
        var $38=$parser_addr; //@line 5216 "xmlparse.c"
        var $39=$38+44; //@line 5216 "xmlparse.c"
        var $40=HEAP[$39]; //@line 5216 "xmlparse.c"
        var $41=($40); //@line 5216 "xmlparse.c"
        var $42=($37) - ($41); //@line 5216 "xmlparse.c"
        var $43=$parser_addr; //@line 5216 "xmlparse.c"
        var $44=$43+44; //@line 5216 "xmlparse.c"
        var $45=HEAP[$44]; //@line 5216 "xmlparse.c"
        var $46=$parser_addr; //@line 5216 "xmlparse.c"
        var $47=$46+4; //@line 5216 "xmlparse.c"
        var $48=HEAP[$47]; //@line 5216 "xmlparse.c"
        FUNCTION_TABLE[$35]($48, $45, $42); //@line 5216 "xmlparse.c"
        var $49=HEAP[$s_addr]; //@line 5217 "xmlparse.c"
        var $50=$eventPP; //@line 5217 "xmlparse.c"
        HEAP[$50]=$49; //@line 5217 "xmlparse.c"
        var $51=HEAP[$s_addr]; //@line 5218 "xmlparse.c"
        var $52=$end_addr; //@line 5218 "xmlparse.c"
        var $53=($51)!=($52); //@line 5218 "xmlparse.c"
        if ($53) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5218 "xmlparse.c"
      case 5: // $bb5
        var $54=$4+80; //@line 5221 "xmlparse.c"
        var $55=HEAP[$54]; //@line 5221 "xmlparse.c"
        var $56=$end_addr; //@line 5221 "xmlparse.c"
        var $57=($56); //@line 5221 "xmlparse.c"
        var $58=HEAP[$s_addr]; //@line 5221 "xmlparse.c"
        var $59=($58); //@line 5221 "xmlparse.c"
        var $60=($57) - ($59); //@line 5221 "xmlparse.c"
        var $61=HEAP[$s_addr]; //@line 5221 "xmlparse.c"
        var $62=$parser_addr; //@line 5221 "xmlparse.c"
        var $63=$62+4; //@line 5221 "xmlparse.c"
        var $64=HEAP[$63]; //@line 5221 "xmlparse.c"
        FUNCTION_TABLE[$55]($64, $61, $60); //@line 5221 "xmlparse.c"
        __label__ = 6; break; //@line 5221 "xmlparse.c"
      case 6: // $return
        STACKTOP = __stackBase__;
        return; //@line 5222 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _defineAttribute($type, $attId, $isCdata, $isId, $value, $parser) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr;
        var $attId_addr;
        var $isCdata_addr;
        var $isId_addr;
        var $value_addr;
        var $parser_addr;
        var $retval;
        var $0;
        var $att;
        var $i;
        var $temp;
        var $count;
        $type_addr=$type;
        $attId_addr=$attId;
        $isCdata_addr=$isCdata;
        $isId_addr=$isId;
        $value_addr=$value;
        $parser_addr=$parser;
        var $1=$value_addr; //@line 5230 "xmlparse.c"
        var $2=($1)!=0; //@line 5230 "xmlparse.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 5230 "xmlparse.c"
      case 1: // $bb
        var $3=$isId_addr; //@line 5230 "xmlparse.c"
        var $4=($3)!=0; //@line 5230 "xmlparse.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 11; break; } //@line 5230 "xmlparse.c"
      case 2: // $bb1
        $i=0; //@line 5234 "xmlparse.c"
        __label__ = 6; break; //@line 5234 "xmlparse.c"
      case 3: // $bb2
        var $5=$type_addr; //@line 5235 "xmlparse.c"
        var $6=$5+20; //@line 5235 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5235 "xmlparse.c"
        var $8=$i; //@line 5235 "xmlparse.c"
        var $9=$7+12*$8; //@line 5235 "xmlparse.c"
        var $10=$9; //@line 5235 "xmlparse.c"
        var $11=HEAP[$10]; //@line 5235 "xmlparse.c"
        var $12=$attId_addr; //@line 5235 "xmlparse.c"
        var $13=($11)==($12); //@line 5235 "xmlparse.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 5235 "xmlparse.c"
      case 4: // $bb3
        $0=1; //@line 5236 "xmlparse.c"
        __label__ = 21; break; //@line 5236 "xmlparse.c"
      case 5: // $bb4
        var $14=$i; //@line 5234 "xmlparse.c"
        var $15=($14) + 1; //@line 5234 "xmlparse.c"
        $i=$15; //@line 5234 "xmlparse.c"
        __label__ = 6; break; //@line 5234 "xmlparse.c"
      case 6: // $bb5
        var $16=$type_addr; //@line 5234 "xmlparse.c"
        var $17=$16+12; //@line 5234 "xmlparse.c"
        var $18=HEAP[$17]; //@line 5234 "xmlparse.c"
        var $19=$i; //@line 5234 "xmlparse.c"
        var $20=($18) > ($19); //@line 5234 "xmlparse.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 5234 "xmlparse.c"
      case 7: // $bb6
        var $21=$isId_addr; //@line 5237 "xmlparse.c"
        var $22=($21)!=0; //@line 5237 "xmlparse.c"
        if ($22) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 5237 "xmlparse.c"
      case 8: // $bb7
        var $23=$type_addr; //@line 5237 "xmlparse.c"
        var $24=$23+8; //@line 5237 "xmlparse.c"
        var $25=HEAP[$24]; //@line 5237 "xmlparse.c"
        var $26=($25)==0; //@line 5237 "xmlparse.c"
        if ($26) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 5237 "xmlparse.c"
      case 9: // $bb8
        var $27=$attId_addr; //@line 5237 "xmlparse.c"
        var $28=$27+9; //@line 5237 "xmlparse.c"
        var $29=HEAP[$28]; //@line 5237 "xmlparse.c"
        var $30=($29)==0; //@line 5237 "xmlparse.c"
        if ($30) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5237 "xmlparse.c"
      case 10: // $bb9
        var $31=$type_addr; //@line 5238 "xmlparse.c"
        var $32=$31+8; //@line 5238 "xmlparse.c"
        var $33=$attId_addr; //@line 5238 "xmlparse.c"
        HEAP[$32]=$33; //@line 5238 "xmlparse.c"
        __label__ = 11; break; //@line 5238 "xmlparse.c"
      case 11: // $bb10
        var $34=$type_addr; //@line 5240 "xmlparse.c"
        var $35=$34+12; //@line 5240 "xmlparse.c"
        var $36=HEAP[$35]; //@line 5240 "xmlparse.c"
        var $37=$type_addr; //@line 5240 "xmlparse.c"
        var $38=$37+16; //@line 5240 "xmlparse.c"
        var $39=HEAP[$38]; //@line 5240 "xmlparse.c"
        var $40=($36)==($39); //@line 5240 "xmlparse.c"
        if ($40) { __label__ = 12; break; } else { __label__ = 18; break; } //@line 5240 "xmlparse.c"
      case 12: // $bb11
        var $41=$type_addr; //@line 5241 "xmlparse.c"
        var $42=$41+16; //@line 5241 "xmlparse.c"
        var $43=HEAP[$42]; //@line 5241 "xmlparse.c"
        var $44=($43)==0; //@line 5241 "xmlparse.c"
        var $45=$type_addr; //@line 5242 "xmlparse.c"
        var $46=$45+16; //@line 5242 "xmlparse.c"
        if ($44) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 5241 "xmlparse.c"
      case 13: // $bb12
        HEAP[$46]=8; //@line 5242 "xmlparse.c"
        var $47=$parser_addr; //@line 5243 "xmlparse.c"
        var $48=$47+12; //@line 5243 "xmlparse.c"
        var $49=$48; //@line 5243 "xmlparse.c"
        var $50=HEAP[$49]; //@line 5243 "xmlparse.c"
        var $51=$type_addr; //@line 5243 "xmlparse.c"
        var $52=$51+16; //@line 5243 "xmlparse.c"
        var $53=HEAP[$52]; //@line 5243 "xmlparse.c"
        var $54=($53) * 12; //@line 5243 "xmlparse.c"
        var $55=FUNCTION_TABLE[$50]($54); //@line 5243 "xmlparse.c"
        var $56=$55; //@line 5243 "xmlparse.c"
        var $57=$type_addr; //@line 5243 "xmlparse.c"
        var $58=$57+20; //@line 5243 "xmlparse.c"
        HEAP[$58]=$56; //@line 5243 "xmlparse.c"
        var $59=$type_addr; //@line 5245 "xmlparse.c"
        var $60=$59+20; //@line 5245 "xmlparse.c"
        var $61=HEAP[$60]; //@line 5245 "xmlparse.c"
        var $62=($61)==0; //@line 5245 "xmlparse.c"
        if ($62) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 5245 "xmlparse.c"
      case 14: // $bb13
        $0=0; //@line 5246 "xmlparse.c"
        __label__ = 21; break; //@line 5246 "xmlparse.c"
      case 15: // $bb15
        var $63=HEAP[$46]; //@line 5250 "xmlparse.c"
        var $64=($63) * 2; //@line 5250 "xmlparse.c"
        $count=$64; //@line 5250 "xmlparse.c"
        var $65=$parser_addr; //@line 5251 "xmlparse.c"
        var $66=$65+12; //@line 5251 "xmlparse.c"
        var $67=$66+4; //@line 5251 "xmlparse.c"
        var $68=HEAP[$67]; //@line 5251 "xmlparse.c"
        var $69=$count; //@line 5251 "xmlparse.c"
        var $70=($69) * 12; //@line 5251 "xmlparse.c"
        var $71=$type_addr; //@line 5251 "xmlparse.c"
        var $72=$71+20; //@line 5251 "xmlparse.c"
        var $73=HEAP[$72]; //@line 5251 "xmlparse.c"
        var $74=$73; //@line 5251 "xmlparse.c"
        var $75=FUNCTION_TABLE[$68]($74, $70); //@line 5251 "xmlparse.c"
        var $76=$75; //@line 5251 "xmlparse.c"
        $temp=$76; //@line 5251 "xmlparse.c"
        var $77=$temp; //@line 5253 "xmlparse.c"
        var $78=($77)==0; //@line 5253 "xmlparse.c"
        if ($78) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 5253 "xmlparse.c"
      case 16: // $bb16
        $0=0; //@line 5254 "xmlparse.c"
        __label__ = 21; break; //@line 5254 "xmlparse.c"
      case 17: // $bb17
        var $79=$type_addr; //@line 5255 "xmlparse.c"
        var $80=$79+16; //@line 5255 "xmlparse.c"
        var $81=$count; //@line 5255 "xmlparse.c"
        HEAP[$80]=$81; //@line 5255 "xmlparse.c"
        var $82=$type_addr; //@line 5256 "xmlparse.c"
        var $83=$82+20; //@line 5256 "xmlparse.c"
        var $84=$temp; //@line 5256 "xmlparse.c"
        HEAP[$83]=$84; //@line 5256 "xmlparse.c"
        __label__ = 18; break; //@line 5256 "xmlparse.c"
      case 18: // $bb18
        var $85=$type_addr; //@line 5259 "xmlparse.c"
        var $86=$85+20; //@line 5259 "xmlparse.c"
        var $87=HEAP[$86]; //@line 5259 "xmlparse.c"
        var $88=$type_addr; //@line 5259 "xmlparse.c"
        var $89=$88+12; //@line 5259 "xmlparse.c"
        var $90=HEAP[$89]; //@line 5259 "xmlparse.c"
        var $91=$87+12*$90; //@line 5259 "xmlparse.c"
        $att=$91; //@line 5259 "xmlparse.c"
        var $92=$att; //@line 5260 "xmlparse.c"
        var $93=$92; //@line 5260 "xmlparse.c"
        var $94=$attId_addr; //@line 5260 "xmlparse.c"
        HEAP[$93]=$94; //@line 5260 "xmlparse.c"
        var $95=$att; //@line 5261 "xmlparse.c"
        var $96=$95+8; //@line 5261 "xmlparse.c"
        var $97=$value_addr; //@line 5261 "xmlparse.c"
        HEAP[$96]=$97; //@line 5261 "xmlparse.c"
        var $98=$att; //@line 5262 "xmlparse.c"
        var $99=$98+4; //@line 5262 "xmlparse.c"
        var $100=$isCdata_addr; //@line 5262 "xmlparse.c"
        HEAP[$99]=$100; //@line 5262 "xmlparse.c"
        var $101=$isCdata_addr; //@line 5263 "xmlparse.c"
        var $102=($101)==0; //@line 5263 "xmlparse.c"
        if ($102) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 5263 "xmlparse.c"
      case 19: // $bb19
        var $103=$attId_addr; //@line 5264 "xmlparse.c"
        var $104=$103+8; //@line 5264 "xmlparse.c"
        HEAP[$104]=1; //@line 5264 "xmlparse.c"
        __label__ = 20; break; //@line 5264 "xmlparse.c"
      case 20: // $bb20
        var $105=$type_addr; //@line 5265 "xmlparse.c"
        var $106=$105+12; //@line 5265 "xmlparse.c"
        var $107=HEAP[$106]; //@line 5265 "xmlparse.c"
        var $108=($107) + 1; //@line 5265 "xmlparse.c"
        var $109=$type_addr; //@line 5265 "xmlparse.c"
        var $110=$109+12; //@line 5265 "xmlparse.c"
        HEAP[$110]=$108; //@line 5265 "xmlparse.c"
        $0=1; //@line 5266 "xmlparse.c"
        __label__ = 21; break; //@line 5266 "xmlparse.c"
      case 21: // $bb21
        var $111=$0; //@line 5236 "xmlparse.c"
        $retval=$111; //@line 5236 "xmlparse.c"
        var $retval22=$retval; //@line 5236 "xmlparse.c"
        ;
        return $retval22; //@line 5236 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _setElementTypePrefix($parser, $elementType) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $elementType_addr;
        var $retval;
        var $iftmp_278;
        var $0;
        var $iftmp_277;
        var $dtd;
        var $name;
        var $prefix;
        var $s;
        $parser_addr=$parser;
        $elementType_addr=$elementType;
        var $1=$parser_addr; //@line 5272 "xmlparse.c"
        var $2=$1+356; //@line 5272 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5272 "xmlparse.c"
        $dtd=$3; //@line 5272 "xmlparse.c"
        var $4=$elementType_addr; //@line 5274 "xmlparse.c"
        var $5=$4; //@line 5274 "xmlparse.c"
        var $6=HEAP[$5]; //@line 5274 "xmlparse.c"
        $name=$6; //@line 5274 "xmlparse.c"
        __label__ = 18; break; //@line 5274 "xmlparse.c"
      case 1: // $bb
        var $7=$name; //@line 5275 "xmlparse.c"
        var $8=HEAP[$7]; //@line 5275 "xmlparse.c"
        var $9=($8)==58; //@line 5275 "xmlparse.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 17; break; } //@line 5275 "xmlparse.c"
      case 2: // $bb1
        var $10=$elementType_addr; //@line 5278 "xmlparse.c"
        var $11=$10; //@line 5278 "xmlparse.c"
        var $12=HEAP[$11]; //@line 5278 "xmlparse.c"
        $s=$12; //@line 5278 "xmlparse.c"
        __label__ = 7; break; //@line 5278 "xmlparse.c"
      case 3: // $bb2
        if ($40) { __label__ = 6; break; } else { __label__ = 4; break; } //@line 5279 "xmlparse.c"
      case 4: // $bb3
        var $13=$dtd; //@line 5279 "xmlparse.c"
        var $14=$13+80; //@line 5279 "xmlparse.c"
        var $15=_poolGrow($14); //@line 5279 "xmlparse.c"
        var $16=($15)!=0; //@line 5279 "xmlparse.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 5279 "xmlparse.c"
      case 5: // $bb7
        $iftmp_277=1; //@line 5279 "xmlparse.c"
        $0=0; //@line 5280 "xmlparse.c"
        __label__ = 20; break; //@line 5280 "xmlparse.c"
      case 6: // $bb8
        var $17=$dtd; //@line 5279 "xmlparse.c"
        var $18=$17+80; //@line 5279 "xmlparse.c"
        var $19=$18+12; //@line 5279 "xmlparse.c"
        var $20=HEAP[$19]; //@line 5279 "xmlparse.c"
        var $21=$s; //@line 5279 "xmlparse.c"
        var $22=HEAP[$21]; //@line 5279 "xmlparse.c"
        HEAP[$20]=$22; //@line 5279 "xmlparse.c"
        var $23=$20+1; //@line 5279 "xmlparse.c"
        var $24=$dtd; //@line 5279 "xmlparse.c"
        var $25=$24+80; //@line 5279 "xmlparse.c"
        var $26=$25+12; //@line 5279 "xmlparse.c"
        HEAP[$26]=$23; //@line 5279 "xmlparse.c"
        $iftmp_277=0; //@line 5279 "xmlparse.c"
        var $27=$s; //@line 5278 "xmlparse.c"
        var $28=$27+1; //@line 5278 "xmlparse.c"
        $s=$28; //@line 5278 "xmlparse.c"
        __label__ = 7; break; //@line 5278 "xmlparse.c"
      case 7: // $bb9
        var $29=$s; //@line 5278 "xmlparse.c"
        var $30=$name; //@line 5278 "xmlparse.c"
        var $31=($29)!=($30); //@line 5278 "xmlparse.c"
        var $32=$dtd; //@line 5279 "xmlparse.c"
        var $33=$32+80; //@line 5279 "xmlparse.c"
        var $34=$33+12; //@line 5279 "xmlparse.c"
        var $35=HEAP[$34]; //@line 5279 "xmlparse.c"
        var $36=$dtd; //@line 5279 "xmlparse.c"
        var $37=$36+80; //@line 5279 "xmlparse.c"
        var $38=$37+8; //@line 5279 "xmlparse.c"
        var $39=HEAP[$38]; //@line 5279 "xmlparse.c"
        var $40=($35)!=($39); //@line 5279 "xmlparse.c"
        if ($31) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 5278 "xmlparse.c"
      case 8: // $bb10
        if ($40) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 5282 "xmlparse.c"
      case 9: // $bb11
        var $41=$dtd; //@line 5282 "xmlparse.c"
        var $42=$41+80; //@line 5282 "xmlparse.c"
        var $43=_poolGrow($42); //@line 5282 "xmlparse.c"
        var $44=($43)!=0; //@line 5282 "xmlparse.c"
        if ($44) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 5282 "xmlparse.c"
      case 10: // $bb16
        $iftmp_278=1; //@line 5282 "xmlparse.c"
        $0=0; //@line 5283 "xmlparse.c"
        __label__ = 20; break; //@line 5283 "xmlparse.c"
      case 11: // $bb17
        var $45=$dtd; //@line 5282 "xmlparse.c"
        var $46=$45+80; //@line 5282 "xmlparse.c"
        var $47=$46+12; //@line 5282 "xmlparse.c"
        var $48=HEAP[$47]; //@line 5282 "xmlparse.c"
        HEAP[$48]=0; //@line 5282 "xmlparse.c"
        var $49=$48+1; //@line 5282 "xmlparse.c"
        var $50=$dtd; //@line 5282 "xmlparse.c"
        var $51=$50+80; //@line 5282 "xmlparse.c"
        var $52=$51+12; //@line 5282 "xmlparse.c"
        HEAP[$52]=$49; //@line 5282 "xmlparse.c"
        $iftmp_278=0; //@line 5282 "xmlparse.c"
        var $53=$dtd; //@line 5284 "xmlparse.c"
        var $54=$53+80; //@line 5284 "xmlparse.c"
        var $55=$54+16; //@line 5284 "xmlparse.c"
        var $56=HEAP[$55]; //@line 5284 "xmlparse.c"
        var $57=$dtd; //@line 5284 "xmlparse.c"
        var $58=$57+60; //@line 5284 "xmlparse.c"
        var $59=_lookup($58, $56, 8); //@line 5284 "xmlparse.c"
        var $60=$59; //@line 5284 "xmlparse.c"
        $prefix=$60; //@line 5284 "xmlparse.c"
        var $61=($60)==0; //@line 5286 "xmlparse.c"
        if ($61) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 5286 "xmlparse.c"
      case 12: // $bb18
        $0=0; //@line 5287 "xmlparse.c"
        __label__ = 20; break; //@line 5287 "xmlparse.c"
      case 13: // $bb19
        var $62=$prefix; //@line 5288 "xmlparse.c"
        var $63=$62; //@line 5288 "xmlparse.c"
        var $64=HEAP[$63]; //@line 5288 "xmlparse.c"
        var $65=$dtd; //@line 5288 "xmlparse.c"
        var $66=$65+80; //@line 5288 "xmlparse.c"
        var $67=$66+16; //@line 5288 "xmlparse.c"
        var $68=HEAP[$67]; //@line 5288 "xmlparse.c"
        var $69=($64)==($68); //@line 5288 "xmlparse.c"
        var $70=$dtd; //@line 5289 "xmlparse.c"
        var $71=$70+80; //@line 5289 "xmlparse.c"
        if ($69) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5288 "xmlparse.c"
      case 14: // $bb20
        var $72=$71+12; //@line 5289 "xmlparse.c"
        var $73=HEAP[$72]; //@line 5289 "xmlparse.c"
        var $74=$dtd; //@line 5289 "xmlparse.c"
        var $75=$74+80; //@line 5289 "xmlparse.c"
        var $76=$75+16; //@line 5289 "xmlparse.c"
        HEAP[$76]=$73; //@line 5289 "xmlparse.c"
        __label__ = 16; break; //@line 5289 "xmlparse.c"
      case 15: // $bb21
        var $77=$71+16; //@line 5291 "xmlparse.c"
        var $78=HEAP[$77]; //@line 5291 "xmlparse.c"
        var $79=$dtd; //@line 5291 "xmlparse.c"
        var $80=$79+80; //@line 5291 "xmlparse.c"
        var $81=$80+12; //@line 5291 "xmlparse.c"
        HEAP[$81]=$78; //@line 5291 "xmlparse.c"
        __label__ = 16; break; //@line 5291 "xmlparse.c"
      case 16: // $bb22
        var $82=$elementType_addr; //@line 5292 "xmlparse.c"
        var $83=$82+4; //@line 5292 "xmlparse.c"
        var $84=$prefix; //@line 5292 "xmlparse.c"
        HEAP[$83]=$84; //@line 5292 "xmlparse.c"
        __label__ = 17; break; //@line 5292 "xmlparse.c"
      case 17: // $bb23
        var $85=$name; //@line 5274 "xmlparse.c"
        var $86=$85+1; //@line 5274 "xmlparse.c"
        $name=$86; //@line 5274 "xmlparse.c"
        __label__ = 18; break; //@line 5274 "xmlparse.c"
      case 18: // $bb24
        var $87=$name; //@line 5274 "xmlparse.c"
        var $88=HEAP[$87]; //@line 5274 "xmlparse.c"
        var $89=($88)!=0; //@line 5274 "xmlparse.c"
        if ($89) { __label__ = 1; break; } else { __label__ = 19; break; } //@line 5274 "xmlparse.c"
      case 19: // $bb25
        $0=1; //@line 5296 "xmlparse.c"
        __label__ = 20; break; //@line 5296 "xmlparse.c"
      case 20: // $bb26
        var $90=$0; //@line 5280 "xmlparse.c"
        $retval=$90; //@line 5280 "xmlparse.c"
        var $retval27=$retval; //@line 5280 "xmlparse.c"
        ;
        return $retval27; //@line 5280 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getAttributeId($parser, $enc, $start, $end) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $enc_addr;
        var $start_addr;
        var $end_addr;
        var $retval;
        var $iftmp_281;
        var $iftmp_280;
        var $0;
        var $iftmp_279;
        var $dtd;
        var $id;
        var $name;
        var $i;
        var $j;
        $parser_addr=$parser;
        $enc_addr=$enc;
        $start_addr=$start;
        $end_addr=$end;
        var $1=$parser_addr; //@line 5303 "xmlparse.c"
        var $2=$1+356; //@line 5303 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5303 "xmlparse.c"
        $dtd=$3; //@line 5303 "xmlparse.c"
        var $4=$dtd; //@line 5306 "xmlparse.c"
        var $5=$4+80; //@line 5306 "xmlparse.c"
        var $6=$5+12; //@line 5306 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5306 "xmlparse.c"
        var $8=$dtd; //@line 5306 "xmlparse.c"
        var $9=$8+80; //@line 5306 "xmlparse.c"
        var $10=$9+8; //@line 5306 "xmlparse.c"
        var $11=HEAP[$10]; //@line 5306 "xmlparse.c"
        var $12=($7)!=($11); //@line 5306 "xmlparse.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 5306 "xmlparse.c"
      case 1: // $bb
        var $13=$dtd; //@line 5306 "xmlparse.c"
        var $14=$13+80; //@line 5306 "xmlparse.c"
        var $15=_poolGrow($14); //@line 5306 "xmlparse.c"
        var $16=($15)!=0; //@line 5306 "xmlparse.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 5306 "xmlparse.c"
      case 2: // $bb4
        $iftmp_279=1; //@line 5306 "xmlparse.c"
        $0=0; //@line 5307 "xmlparse.c"
        __label__ = 40; break; //@line 5307 "xmlparse.c"
      case 3: // $bb5
        var $17=$dtd; //@line 5306 "xmlparse.c"
        var $18=$17+80; //@line 5306 "xmlparse.c"
        var $19=$18+12; //@line 5306 "xmlparse.c"
        var $20=HEAP[$19]; //@line 5306 "xmlparse.c"
        HEAP[$20]=0; //@line 5306 "xmlparse.c"
        var $21=$20+1; //@line 5306 "xmlparse.c"
        var $22=$dtd; //@line 5306 "xmlparse.c"
        var $23=$22+80; //@line 5306 "xmlparse.c"
        var $24=$23+12; //@line 5306 "xmlparse.c"
        HEAP[$24]=$21; //@line 5306 "xmlparse.c"
        $iftmp_279=0; //@line 5306 "xmlparse.c"
        var $25=$dtd; //@line 5308 "xmlparse.c"
        var $26=$25+80; //@line 5308 "xmlparse.c"
        var $27=$enc_addr; //@line 5308 "xmlparse.c"
        var $28=$start_addr; //@line 5308 "xmlparse.c"
        var $29=$end_addr; //@line 5308 "xmlparse.c"
        var $30=_poolStoreString($26, $27, $28, $29); //@line 5308 "xmlparse.c"
        $name=$30; //@line 5308 "xmlparse.c"
        var $31=($30)==0; //@line 5309 "xmlparse.c"
        if ($31) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 5309 "xmlparse.c"
      case 4: // $bb6
        $0=0; //@line 5310 "xmlparse.c"
        __label__ = 40; break; //@line 5310 "xmlparse.c"
      case 5: // $bb7
        var $32=$name; //@line 5312 "xmlparse.c"
        var $33=$32+1; //@line 5312 "xmlparse.c"
        $name=$33; //@line 5312 "xmlparse.c"
        var $34=$dtd; //@line 5313 "xmlparse.c"
        var $35=$34+40; //@line 5313 "xmlparse.c"
        var $36=$name; //@line 5313 "xmlparse.c"
        var $37=_lookup($35, $36, 12); //@line 5313 "xmlparse.c"
        var $38=$37; //@line 5313 "xmlparse.c"
        $id=$38; //@line 5313 "xmlparse.c"
        var $39=$id; //@line 5314 "xmlparse.c"
        var $40=($39)==0; //@line 5314 "xmlparse.c"
        if ($40) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5314 "xmlparse.c"
      case 6: // $bb8
        $0=0; //@line 5315 "xmlparse.c"
        __label__ = 40; break; //@line 5315 "xmlparse.c"
      case 7: // $bb9
        var $41=$id; //@line 5316 "xmlparse.c"
        var $42=$41; //@line 5316 "xmlparse.c"
        var $43=HEAP[$42]; //@line 5316 "xmlparse.c"
        var $44=$name; //@line 5316 "xmlparse.c"
        var $45=($43)!=($44); //@line 5316 "xmlparse.c"
        var $46=$dtd; //@line 5317 "xmlparse.c"
        var $47=$46+80; //@line 5317 "xmlparse.c"
        if ($45) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5316 "xmlparse.c"
      case 8: // $bb10
        var $48=$47+16; //@line 5317 "xmlparse.c"
        var $49=HEAP[$48]; //@line 5317 "xmlparse.c"
        var $50=$dtd; //@line 5317 "xmlparse.c"
        var $51=$50+80; //@line 5317 "xmlparse.c"
        var $52=$51+12; //@line 5317 "xmlparse.c"
        HEAP[$52]=$49; //@line 5317 "xmlparse.c"
        __label__ = 39; break; //@line 5317 "xmlparse.c"
      case 9: // $bb11
        var $53=$47+12; //@line 5319 "xmlparse.c"
        var $54=HEAP[$53]; //@line 5319 "xmlparse.c"
        var $55=$dtd; //@line 5319 "xmlparse.c"
        var $56=$55+80; //@line 5319 "xmlparse.c"
        var $57=$56+16; //@line 5319 "xmlparse.c"
        HEAP[$57]=$54; //@line 5319 "xmlparse.c"
        var $58=$parser_addr; //@line 5320 "xmlparse.c"
        var $59=$58+236; //@line 5320 "xmlparse.c"
        var $60=HEAP[$59]; //@line 5320 "xmlparse.c"
        var $61=($60)!=0; //@line 5320 "xmlparse.c"
        if ($61) { __label__ = 10; break; } else { __label__ = 39; break; } //@line 5320 "xmlparse.c"
      case 10: // $bb12
        var $62=$name; //@line 5322 "xmlparse.c"
        var $63=$62; //@line 5322 "xmlparse.c"
        var $64=HEAP[$63]; //@line 5322 "xmlparse.c"
        var $65=($64)!=120; //@line 5322 "xmlparse.c"
        if ($65) { __label__ = 21; break; } else { __label__ = 11; break; } //@line 5322 "xmlparse.c"
      case 11: // $bb13
        var $66=$name; //@line 5322 "xmlparse.c"
        var $67=$66+1; //@line 5322 "xmlparse.c"
        var $68=HEAP[$67]; //@line 5322 "xmlparse.c"
        var $69=($68)!=109; //@line 5322 "xmlparse.c"
        if ($69) { __label__ = 21; break; } else { __label__ = 12; break; } //@line 5322 "xmlparse.c"
      case 12: // $bb14
        var $70=$name; //@line 5322 "xmlparse.c"
        var $71=$70+2; //@line 5322 "xmlparse.c"
        var $72=HEAP[$71]; //@line 5322 "xmlparse.c"
        var $73=($72)!=108; //@line 5322 "xmlparse.c"
        if ($73) { __label__ = 21; break; } else { __label__ = 13; break; } //@line 5322 "xmlparse.c"
      case 13: // $bb15
        var $74=$name; //@line 5322 "xmlparse.c"
        var $75=$74+3; //@line 5322 "xmlparse.c"
        var $76=HEAP[$75]; //@line 5322 "xmlparse.c"
        var $77=($76)!=110; //@line 5322 "xmlparse.c"
        if ($77) { __label__ = 21; break; } else { __label__ = 14; break; } //@line 5322 "xmlparse.c"
      case 14: // $bb16
        var $78=$name; //@line 5322 "xmlparse.c"
        var $79=$78+4; //@line 5322 "xmlparse.c"
        var $80=HEAP[$79]; //@line 5322 "xmlparse.c"
        var $81=($80)!=115; //@line 5322 "xmlparse.c"
        if ($81) { __label__ = 21; break; } else { __label__ = 15; break; } //@line 5322 "xmlparse.c"
      case 15: // $bb17
        var $82=$name; //@line 5322 "xmlparse.c"
        var $83=$82+5; //@line 5322 "xmlparse.c"
        var $84=HEAP[$83]; //@line 5322 "xmlparse.c"
        var $85=($84)==0; //@line 5322 "xmlparse.c"
        if ($85) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 5322 "xmlparse.c"
      case 16: // $bb18
        var $86=$name; //@line 5322 "xmlparse.c"
        var $87=$86+5; //@line 5322 "xmlparse.c"
        var $88=HEAP[$87]; //@line 5322 "xmlparse.c"
        var $89=($88)==58; //@line 5322 "xmlparse.c"
        if ($89) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 5322 "xmlparse.c"
      case 17: // $bb19
        var $90=$name; //@line 5328 "xmlparse.c"
        var $91=$90+5; //@line 5328 "xmlparse.c"
        var $92=HEAP[$91]; //@line 5328 "xmlparse.c"
        var $93=($92)==0; //@line 5328 "xmlparse.c"
        if ($93) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 5328 "xmlparse.c"
      case 18: // $bb20
        var $94=$dtd; //@line 5329 "xmlparse.c"
        var $95=$94+152; //@line 5329 "xmlparse.c"
        var $96=$id; //@line 5329 "xmlparse.c"
        var $97=$96+4; //@line 5329 "xmlparse.c"
        HEAP[$97]=$95; //@line 5329 "xmlparse.c"
        __label__ = 20; break; //@line 5329 "xmlparse.c"
      case 19: // $bb21
        var $98=$name; //@line 5331 "xmlparse.c"
        var $99=$98+6; //@line 5331 "xmlparse.c"
        var $100=$dtd; //@line 5331 "xmlparse.c"
        var $101=$100+60; //@line 5331 "xmlparse.c"
        var $102=_lookup($101, $99, 8); //@line 5331 "xmlparse.c"
        var $103=$102; //@line 5331 "xmlparse.c"
        var $104=$id; //@line 5331 "xmlparse.c"
        var $105=$104+4; //@line 5331 "xmlparse.c"
        HEAP[$105]=$103; //@line 5331 "xmlparse.c"
        __label__ = 20; break; //@line 5331 "xmlparse.c"
      case 20: // $bb22
        var $106=$id; //@line 5332 "xmlparse.c"
        var $107=$106+9; //@line 5332 "xmlparse.c"
        HEAP[$107]=1; //@line 5332 "xmlparse.c"
        __label__ = 39; break; //@line 5332 "xmlparse.c"
      case 21: // $bb23
        $i=0; //@line 5336 "xmlparse.c"
        __label__ = 38; break; //@line 5336 "xmlparse.c"
      case 22: // $bb24
        var $108=$name; //@line 5338 "xmlparse.c"
        var $109=$i; //@line 5338 "xmlparse.c"
        var $110=$108+$109; //@line 5338 "xmlparse.c"
        var $111=HEAP[$110]; //@line 5338 "xmlparse.c"
        var $112=($111)==58; //@line 5338 "xmlparse.c"
        if ($112) { __label__ = 23; break; } else { __label__ = 37; break; } //@line 5338 "xmlparse.c"
      case 23: // $bb25
        $j=0; //@line 5340 "xmlparse.c"
        __label__ = 28; break; //@line 5340 "xmlparse.c"
      case 24: // $bb26
        if ($142) { __label__ = 27; break; } else { __label__ = 25; break; } //@line 5341 "xmlparse.c"
      case 25: // $bb27
        var $113=$dtd; //@line 5341 "xmlparse.c"
        var $114=$113+80; //@line 5341 "xmlparse.c"
        var $115=_poolGrow($114); //@line 5341 "xmlparse.c"
        var $116=($115)!=0; //@line 5341 "xmlparse.c"
        if ($116) { __label__ = 27; break; } else { __label__ = 26; break; } //@line 5341 "xmlparse.c"
      case 26: // $bb32
        $iftmp_280=1; //@line 5341 "xmlparse.c"
        $0=0; //@line 5342 "xmlparse.c"
        __label__ = 40; break; //@line 5342 "xmlparse.c"
      case 27: // $bb33
        var $117=$dtd; //@line 5341 "xmlparse.c"
        var $118=$117+80; //@line 5341 "xmlparse.c"
        var $119=$118+12; //@line 5341 "xmlparse.c"
        var $120=HEAP[$119]; //@line 5341 "xmlparse.c"
        var $121=$name; //@line 5341 "xmlparse.c"
        var $122=$j; //@line 5341 "xmlparse.c"
        var $123=$121+$122; //@line 5341 "xmlparse.c"
        var $124=HEAP[$123]; //@line 5341 "xmlparse.c"
        HEAP[$120]=$124; //@line 5341 "xmlparse.c"
        var $125=$120+1; //@line 5341 "xmlparse.c"
        var $126=$dtd; //@line 5341 "xmlparse.c"
        var $127=$126+80; //@line 5341 "xmlparse.c"
        var $128=$127+12; //@line 5341 "xmlparse.c"
        HEAP[$128]=$125; //@line 5341 "xmlparse.c"
        $iftmp_280=0; //@line 5341 "xmlparse.c"
        var $129=$j; //@line 5340 "xmlparse.c"
        var $130=($129) + 1; //@line 5340 "xmlparse.c"
        $j=$130; //@line 5340 "xmlparse.c"
        __label__ = 28; break; //@line 5340 "xmlparse.c"
      case 28: // $bb34
        var $131=$j; //@line 5340 "xmlparse.c"
        var $132=$i; //@line 5340 "xmlparse.c"
        var $133=($131) < ($132); //@line 5340 "xmlparse.c"
        var $134=$dtd; //@line 5341 "xmlparse.c"
        var $135=$134+80; //@line 5341 "xmlparse.c"
        var $136=$135+12; //@line 5341 "xmlparse.c"
        var $137=HEAP[$136]; //@line 5341 "xmlparse.c"
        var $138=$dtd; //@line 5341 "xmlparse.c"
        var $139=$138+80; //@line 5341 "xmlparse.c"
        var $140=$139+8; //@line 5341 "xmlparse.c"
        var $141=HEAP[$140]; //@line 5341 "xmlparse.c"
        var $142=($137)!=($141); //@line 5341 "xmlparse.c"
        if ($133) { __label__ = 24; break; } else { __label__ = 29; break; } //@line 5340 "xmlparse.c"
      case 29: // $bb35
        if ($142) { __label__ = 32; break; } else { __label__ = 30; break; } //@line 5344 "xmlparse.c"
      case 30: // $bb36
        var $143=$dtd; //@line 5344 "xmlparse.c"
        var $144=$143+80; //@line 5344 "xmlparse.c"
        var $145=_poolGrow($144); //@line 5344 "xmlparse.c"
        var $146=($145)!=0; //@line 5344 "xmlparse.c"
        if ($146) { __label__ = 32; break; } else { __label__ = 31; break; } //@line 5344 "xmlparse.c"
      case 31: // $bb41
        $iftmp_281=1; //@line 5344 "xmlparse.c"
        $0=0; //@line 5345 "xmlparse.c"
        __label__ = 40; break; //@line 5345 "xmlparse.c"
      case 32: // $bb42
        var $147=$dtd; //@line 5344 "xmlparse.c"
        var $148=$147+80; //@line 5344 "xmlparse.c"
        var $149=$148+12; //@line 5344 "xmlparse.c"
        var $150=HEAP[$149]; //@line 5344 "xmlparse.c"
        HEAP[$150]=0; //@line 5344 "xmlparse.c"
        var $151=$150+1; //@line 5344 "xmlparse.c"
        var $152=$dtd; //@line 5344 "xmlparse.c"
        var $153=$152+80; //@line 5344 "xmlparse.c"
        var $154=$153+12; //@line 5344 "xmlparse.c"
        HEAP[$154]=$151; //@line 5344 "xmlparse.c"
        $iftmp_281=0; //@line 5344 "xmlparse.c"
        var $155=$dtd; //@line 5346 "xmlparse.c"
        var $156=$155+80; //@line 5346 "xmlparse.c"
        var $157=$156+16; //@line 5346 "xmlparse.c"
        var $158=HEAP[$157]; //@line 5346 "xmlparse.c"
        var $159=$dtd; //@line 5346 "xmlparse.c"
        var $160=$159+60; //@line 5346 "xmlparse.c"
        var $161=_lookup($160, $158, 8); //@line 5346 "xmlparse.c"
        var $162=$161; //@line 5346 "xmlparse.c"
        var $163=$id; //@line 5346 "xmlparse.c"
        var $164=$163+4; //@line 5346 "xmlparse.c"
        HEAP[$164]=$162; //@line 5346 "xmlparse.c"
        var $165=$id; //@line 5348 "xmlparse.c"
        var $166=$165+4; //@line 5348 "xmlparse.c"
        var $167=HEAP[$166]; //@line 5348 "xmlparse.c"
        var $168=($167)==0; //@line 5348 "xmlparse.c"
        if ($168) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 5348 "xmlparse.c"
      case 33: // $bb43
        $0=0; //@line 5349 "xmlparse.c"
        __label__ = 40; break; //@line 5349 "xmlparse.c"
      case 34: // $bb44
        var $169=$id; //@line 5350 "xmlparse.c"
        var $170=$169+4; //@line 5350 "xmlparse.c"
        var $171=HEAP[$170]; //@line 5350 "xmlparse.c"
        var $172=$171; //@line 5350 "xmlparse.c"
        var $173=HEAP[$172]; //@line 5350 "xmlparse.c"
        var $174=$dtd; //@line 5350 "xmlparse.c"
        var $175=$174+80; //@line 5350 "xmlparse.c"
        var $176=$175+16; //@line 5350 "xmlparse.c"
        var $177=HEAP[$176]; //@line 5350 "xmlparse.c"
        var $178=($173)==($177); //@line 5350 "xmlparse.c"
        var $179=$dtd; //@line 5351 "xmlparse.c"
        var $180=$179+80; //@line 5351 "xmlparse.c"
        if ($178) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 5350 "xmlparse.c"
      case 35: // $bb45
        var $181=$180+12; //@line 5351 "xmlparse.c"
        var $182=HEAP[$181]; //@line 5351 "xmlparse.c"
        var $183=$dtd; //@line 5351 "xmlparse.c"
        var $184=$183+80; //@line 5351 "xmlparse.c"
        var $185=$184+16; //@line 5351 "xmlparse.c"
        HEAP[$185]=$182; //@line 5351 "xmlparse.c"
        __label__ = 39; break; //@line 5351 "xmlparse.c"
      case 36: // $bb46
        var $186=$180+16; //@line 5353 "xmlparse.c"
        var $187=HEAP[$186]; //@line 5353 "xmlparse.c"
        var $188=$dtd; //@line 5353 "xmlparse.c"
        var $189=$188+80; //@line 5353 "xmlparse.c"
        var $190=$189+12; //@line 5353 "xmlparse.c"
        HEAP[$190]=$187; //@line 5353 "xmlparse.c"
        __label__ = 39; break; //@line 5353 "xmlparse.c"
      case 37: // $bb48
        var $191=$i; //@line 5336 "xmlparse.c"
        var $192=($191) + 1; //@line 5336 "xmlparse.c"
        $i=$192; //@line 5336 "xmlparse.c"
        __label__ = 38; break; //@line 5336 "xmlparse.c"
      case 38: // $bb49
        var $193=$name; //@line 5336 "xmlparse.c"
        var $194=$i; //@line 5336 "xmlparse.c"
        var $195=$193+$194; //@line 5336 "xmlparse.c"
        var $196=HEAP[$195]; //@line 5336 "xmlparse.c"
        var $197=($196)!=0; //@line 5336 "xmlparse.c"
        if ($197) { __label__ = 22; break; } else { __label__ = 39; break; } //@line 5336 "xmlparse.c"
      case 39: // $bb50
        var $198=$id; //@line 5359 "xmlparse.c"
        $0=$198; //@line 5359 "xmlparse.c"
        __label__ = 40; break; //@line 5359 "xmlparse.c"
      case 40: // $bb51
        var $199=$0; //@line 5307 "xmlparse.c"
        $retval=$199; //@line 5307 "xmlparse.c"
        var $retval52=$retval; //@line 5307 "xmlparse.c"
        ;
        return $retval52; //@line 5307 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getContext($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $retval;
        var $iftmp_290;
        var $iftmp_289;
        var $iftmp_288;
        var $iftmp_287;
        var $iftmp_286;
        var $iftmp_285;
        var $iftmp_284;
        var $iftmp_283;
        var $0;
        var $iftmp_282;
        var $dtd;
        var $iter=__stackBase__;
        var $needSep;
        var $i;
        var $len;
        var $i21;
        var $len22;
        var $s;
        var $prefix;
        var $s65;
        var $e;
        $parser_addr=$parser;
        var $1=$parser_addr; //@line 5367 "xmlparse.c"
        var $2=$1+356; //@line 5367 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5367 "xmlparse.c"
        $dtd=$3; //@line 5367 "xmlparse.c"
        $needSep=0; //@line 5369 "xmlparse.c"
        var $4=$dtd; //@line 5371 "xmlparse.c"
        var $5=$4+152; //@line 5371 "xmlparse.c"
        var $6=$5+4; //@line 5371 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5371 "xmlparse.c"
        var $8=($7)!=0; //@line 5371 "xmlparse.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 5371 "xmlparse.c"
      case 1: // $bb
        var $9=$parser_addr; //@line 5374 "xmlparse.c"
        var $10=$9+416; //@line 5374 "xmlparse.c"
        var $11=$10+12; //@line 5374 "xmlparse.c"
        var $12=HEAP[$11]; //@line 5374 "xmlparse.c"
        var $13=$parser_addr; //@line 5374 "xmlparse.c"
        var $14=$13+416; //@line 5374 "xmlparse.c"
        var $15=$14+8; //@line 5374 "xmlparse.c"
        var $16=HEAP[$15]; //@line 5374 "xmlparse.c"
        var $17=($12)!=($16); //@line 5374 "xmlparse.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 5374 "xmlparse.c"
      case 2: // $bb1
        var $18=$parser_addr; //@line 5374 "xmlparse.c"
        var $19=$18+416; //@line 5374 "xmlparse.c"
        var $20=_poolGrow($19); //@line 5374 "xmlparse.c"
        var $21=($20)!=0; //@line 5374 "xmlparse.c"
        if ($21) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 5374 "xmlparse.c"
      case 3: // $bb5
        $iftmp_282=1; //@line 5374 "xmlparse.c"
        $0=0; //@line 5375 "xmlparse.c"
        __label__ = 58; break; //@line 5375 "xmlparse.c"
      case 4: // $bb6
        var $22=$parser_addr; //@line 5374 "xmlparse.c"
        var $23=$22+416; //@line 5374 "xmlparse.c"
        var $24=$23+12; //@line 5374 "xmlparse.c"
        var $25=HEAP[$24]; //@line 5374 "xmlparse.c"
        HEAP[$25]=61; //@line 5374 "xmlparse.c"
        var $26=$25+1; //@line 5374 "xmlparse.c"
        var $27=$parser_addr; //@line 5374 "xmlparse.c"
        var $28=$27+416; //@line 5374 "xmlparse.c"
        var $29=$28+12; //@line 5374 "xmlparse.c"
        HEAP[$29]=$26; //@line 5374 "xmlparse.c"
        $iftmp_282=0; //@line 5374 "xmlparse.c"
        var $30=$dtd; //@line 5376 "xmlparse.c"
        var $31=$30+152; //@line 5376 "xmlparse.c"
        var $32=$31+4; //@line 5376 "xmlparse.c"
        var $33=HEAP[$32]; //@line 5376 "xmlparse.c"
        var $34=$33+20; //@line 5376 "xmlparse.c"
        var $35=HEAP[$34]; //@line 5376 "xmlparse.c"
        $len=$35; //@line 5376 "xmlparse.c"
        var $36=$parser_addr; //@line 5377 "xmlparse.c"
        var $37=$36+472; //@line 5377 "xmlparse.c"
        var $38=HEAP[$37]; //@line 5377 "xmlparse.c"
        var $39=($38)!=0; //@line 5377 "xmlparse.c"
        if ($39) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5377 "xmlparse.c"
      case 5: // $bb7
        var $40=$len; //@line 5378 "xmlparse.c"
        var $41=($40) - 1; //@line 5378 "xmlparse.c"
        $len=$41; //@line 5378 "xmlparse.c"
        __label__ = 6; break; //@line 5378 "xmlparse.c"
      case 6: // $bb8
        $i=0; //@line 5379 "xmlparse.c"
        __label__ = 11; break; //@line 5379 "xmlparse.c"
      case 7: // $bb9
        var $42=$parser_addr; //@line 5380 "xmlparse.c"
        var $43=$42+416; //@line 5380 "xmlparse.c"
        var $44=$43+12; //@line 5380 "xmlparse.c"
        var $45=HEAP[$44]; //@line 5380 "xmlparse.c"
        var $46=$parser_addr; //@line 5380 "xmlparse.c"
        var $47=$46+416; //@line 5380 "xmlparse.c"
        var $48=$47+8; //@line 5380 "xmlparse.c"
        var $49=HEAP[$48]; //@line 5380 "xmlparse.c"
        var $50=($45)!=($49); //@line 5380 "xmlparse.c"
        if ($50) { __label__ = 10; break; } else { __label__ = 8; break; } //@line 5380 "xmlparse.c"
      case 8: // $bb10
        var $51=$parser_addr; //@line 5380 "xmlparse.c"
        var $52=$51+416; //@line 5380 "xmlparse.c"
        var $53=_poolGrow($52); //@line 5380 "xmlparse.c"
        var $54=($53)!=0; //@line 5380 "xmlparse.c"
        if ($54) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 5380 "xmlparse.c"
      case 9: // $bb15
        $iftmp_283=1; //@line 5380 "xmlparse.c"
        $0=0; //@line 5381 "xmlparse.c"
        __label__ = 58; break; //@line 5381 "xmlparse.c"
      case 10: // $bb16
        var $55=$parser_addr; //@line 5380 "xmlparse.c"
        var $56=$55+416; //@line 5380 "xmlparse.c"
        var $57=$56+12; //@line 5380 "xmlparse.c"
        var $58=HEAP[$57]; //@line 5380 "xmlparse.c"
        var $59=$dtd; //@line 5380 "xmlparse.c"
        var $60=$59+152; //@line 5380 "xmlparse.c"
        var $61=$60+4; //@line 5380 "xmlparse.c"
        var $62=HEAP[$61]; //@line 5380 "xmlparse.c"
        var $63=$62+16; //@line 5380 "xmlparse.c"
        var $64=HEAP[$63]; //@line 5380 "xmlparse.c"
        var $65=$i; //@line 5380 "xmlparse.c"
        var $66=$64+$65; //@line 5380 "xmlparse.c"
        var $67=HEAP[$66]; //@line 5380 "xmlparse.c"
        HEAP[$58]=$67; //@line 5380 "xmlparse.c"
        var $68=$58+1; //@line 5380 "xmlparse.c"
        var $69=$parser_addr; //@line 5380 "xmlparse.c"
        var $70=$69+416; //@line 5380 "xmlparse.c"
        var $71=$70+12; //@line 5380 "xmlparse.c"
        HEAP[$71]=$68; //@line 5380 "xmlparse.c"
        $iftmp_283=0; //@line 5380 "xmlparse.c"
        var $72=$i; //@line 5379 "xmlparse.c"
        var $73=($72) + 1; //@line 5379 "xmlparse.c"
        $i=$73; //@line 5379 "xmlparse.c"
        __label__ = 11; break; //@line 5379 "xmlparse.c"
      case 11: // $bb17
        var $74=$i; //@line 5379 "xmlparse.c"
        var $75=$len; //@line 5379 "xmlparse.c"
        var $76=($74) < ($75); //@line 5379 "xmlparse.c"
        if ($76) { __label__ = 7; break; } else { __label__ = 12; break; } //@line 5379 "xmlparse.c"
      case 12: // $bb18
        $needSep=1; //@line 5382 "xmlparse.c"
        __label__ = 13; break; //@line 5382 "xmlparse.c"
      case 13: // $bb19
        var $77=$dtd; //@line 5385 "xmlparse.c"
        var $78=$77+60; //@line 5385 "xmlparse.c"
        _hashTableIterInit($iter, $78); //@line 5385 "xmlparse.c"
        __label__ = 14; break; //@line 5385 "xmlparse.c"
      case 14: // $bb20
        var $79=_hashTableIterNext($iter); //@line 5390 "xmlparse.c"
        var $80=$79; //@line 5390 "xmlparse.c"
        $prefix=$80; //@line 5390 "xmlparse.c"
        var $81=($80)==0; //@line 5391 "xmlparse.c"
        if ($81) { __label__ = 39; break; } else { __label__ = 15; break; } //@line 5391 "xmlparse.c"
      case 15: // $bb23
        var $82=$prefix; //@line 5393 "xmlparse.c"
        var $83=$82+4; //@line 5393 "xmlparse.c"
        var $84=HEAP[$83]; //@line 5393 "xmlparse.c"
        var $85=($84)==0; //@line 5393 "xmlparse.c"
        if ($85) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 5393 "xmlparse.c"
      case 16: // $bb24
        var $86=$needSep; //@line 5395 "xmlparse.c"
        var $87=($86)!=0; //@line 5395 "xmlparse.c"
        if ($87) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 5395 "xmlparse.c"
      case 17: // $bb25
        var $88=$parser_addr; //@line 5395 "xmlparse.c"
        var $89=$88+416; //@line 5395 "xmlparse.c"
        var $90=$89+12; //@line 5395 "xmlparse.c"
        var $91=HEAP[$90]; //@line 5395 "xmlparse.c"
        var $92=$parser_addr; //@line 5395 "xmlparse.c"
        var $93=$92+416; //@line 5395 "xmlparse.c"
        var $94=$93+8; //@line 5395 "xmlparse.c"
        var $95=HEAP[$94]; //@line 5395 "xmlparse.c"
        var $96=($91)!=($95); //@line 5395 "xmlparse.c"
        if ($96) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 5395 "xmlparse.c"
      case 18: // $bb26
        var $97=$parser_addr; //@line 5395 "xmlparse.c"
        var $98=$97+416; //@line 5395 "xmlparse.c"
        var $99=_poolGrow($98); //@line 5395 "xmlparse.c"
        var $100=($99)!=0; //@line 5395 "xmlparse.c"
        if ($100) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 5395 "xmlparse.c"
      case 19: // $bb29
        var $101=$parser_addr; //@line 5395 "xmlparse.c"
        var $102=$101+416; //@line 5395 "xmlparse.c"
        var $103=$102+12; //@line 5395 "xmlparse.c"
        var $104=HEAP[$103]; //@line 5395 "xmlparse.c"
        HEAP[$104]=12; //@line 5395 "xmlparse.c"
        var $105=$104+1; //@line 5395 "xmlparse.c"
        var $106=$parser_addr; //@line 5395 "xmlparse.c"
        var $107=$106+416; //@line 5395 "xmlparse.c"
        var $108=$107+12; //@line 5395 "xmlparse.c"
        HEAP[$108]=$105; //@line 5395 "xmlparse.c"
        $iftmp_284=0; //@line 5395 "xmlparse.c"
        __label__ = 21; break;
      case 20: // $bb31
        $iftmp_284=1; //@line 5395 "xmlparse.c"
        $0=0; //@line 5396 "xmlparse.c"
        __label__ = 58; break; //@line 5396 "xmlparse.c"
      case 21: // $bb32
        var $109=$prefix; //@line 5397 "xmlparse.c"
        var $110=$109; //@line 5397 "xmlparse.c"
        var $111=HEAP[$110]; //@line 5397 "xmlparse.c"
        $s=$111; //@line 5397 "xmlparse.c"
        __label__ = 26; break; //@line 5397 "xmlparse.c"
      case 22: // $bb33
        if ($139) { __label__ = 25; break; } else { __label__ = 23; break; } //@line 5398 "xmlparse.c"
      case 23: // $bb34
        var $112=$parser_addr; //@line 5398 "xmlparse.c"
        var $113=$112+416; //@line 5398 "xmlparse.c"
        var $114=_poolGrow($113); //@line 5398 "xmlparse.c"
        var $115=($114)!=0; //@line 5398 "xmlparse.c"
        if ($115) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 5398 "xmlparse.c"
      case 24: // $bb39
        $iftmp_285=1; //@line 5398 "xmlparse.c"
        $0=0; //@line 5399 "xmlparse.c"
        __label__ = 58; break; //@line 5399 "xmlparse.c"
      case 25: // $bb40
        var $116=$parser_addr; //@line 5398 "xmlparse.c"
        var $117=$116+416; //@line 5398 "xmlparse.c"
        var $118=$117+12; //@line 5398 "xmlparse.c"
        var $119=HEAP[$118]; //@line 5398 "xmlparse.c"
        var $120=$s; //@line 5398 "xmlparse.c"
        var $121=HEAP[$120]; //@line 5398 "xmlparse.c"
        HEAP[$119]=$121; //@line 5398 "xmlparse.c"
        var $122=$119+1; //@line 5398 "xmlparse.c"
        var $123=$parser_addr; //@line 5398 "xmlparse.c"
        var $124=$123+416; //@line 5398 "xmlparse.c"
        var $125=$124+12; //@line 5398 "xmlparse.c"
        HEAP[$125]=$122; //@line 5398 "xmlparse.c"
        $iftmp_285=0; //@line 5398 "xmlparse.c"
        var $126=$s; //@line 5397 "xmlparse.c"
        var $127=$126+1; //@line 5397 "xmlparse.c"
        $s=$127; //@line 5397 "xmlparse.c"
        __label__ = 26; break; //@line 5397 "xmlparse.c"
      case 26: // $bb41
        var $128=$s; //@line 5397 "xmlparse.c"
        var $129=HEAP[$128]; //@line 5397 "xmlparse.c"
        var $130=($129)!=0; //@line 5397 "xmlparse.c"
        var $131=$parser_addr; //@line 5398 "xmlparse.c"
        var $132=$131+416; //@line 5398 "xmlparse.c"
        var $133=$132+12; //@line 5398 "xmlparse.c"
        var $134=HEAP[$133]; //@line 5398 "xmlparse.c"
        var $135=$parser_addr; //@line 5398 "xmlparse.c"
        var $136=$135+416; //@line 5398 "xmlparse.c"
        var $137=$136+8; //@line 5398 "xmlparse.c"
        var $138=HEAP[$137]; //@line 5398 "xmlparse.c"
        var $139=($134)!=($138); //@line 5398 "xmlparse.c"
        if ($130) { __label__ = 22; break; } else { __label__ = 27; break; } //@line 5397 "xmlparse.c"
      case 27: // $bb42
        if ($139) { __label__ = 30; break; } else { __label__ = 28; break; } //@line 5400 "xmlparse.c"
      case 28: // $bb43
        var $140=$parser_addr; //@line 5400 "xmlparse.c"
        var $141=$140+416; //@line 5400 "xmlparse.c"
        var $142=_poolGrow($141); //@line 5400 "xmlparse.c"
        var $143=($142)!=0; //@line 5400 "xmlparse.c"
        if ($143) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 5400 "xmlparse.c"
      case 29: // $bb48
        $iftmp_286=1; //@line 5400 "xmlparse.c"
        $0=0; //@line 5401 "xmlparse.c"
        __label__ = 58; break; //@line 5401 "xmlparse.c"
      case 30: // $bb49
        var $144=$parser_addr; //@line 5400 "xmlparse.c"
        var $145=$144+416; //@line 5400 "xmlparse.c"
        var $146=$145+12; //@line 5400 "xmlparse.c"
        var $147=HEAP[$146]; //@line 5400 "xmlparse.c"
        HEAP[$147]=61; //@line 5400 "xmlparse.c"
        var $148=$147+1; //@line 5400 "xmlparse.c"
        var $149=$parser_addr; //@line 5400 "xmlparse.c"
        var $150=$149+416; //@line 5400 "xmlparse.c"
        var $151=$150+12; //@line 5400 "xmlparse.c"
        HEAP[$151]=$148; //@line 5400 "xmlparse.c"
        $iftmp_286=0; //@line 5400 "xmlparse.c"
        var $152=$prefix; //@line 5402 "xmlparse.c"
        var $153=$152+4; //@line 5402 "xmlparse.c"
        var $154=HEAP[$153]; //@line 5402 "xmlparse.c"
        var $155=$154+20; //@line 5402 "xmlparse.c"
        var $156=HEAP[$155]; //@line 5402 "xmlparse.c"
        $len22=$156; //@line 5402 "xmlparse.c"
        var $157=$parser_addr; //@line 5403 "xmlparse.c"
        var $158=$157+472; //@line 5403 "xmlparse.c"
        var $159=HEAP[$158]; //@line 5403 "xmlparse.c"
        var $160=($159)!=0; //@line 5403 "xmlparse.c"
        if ($160) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 5403 "xmlparse.c"
      case 31: // $bb50
        var $161=$len22; //@line 5404 "xmlparse.c"
        var $162=($161) - 1; //@line 5404 "xmlparse.c"
        $len22=$162; //@line 5404 "xmlparse.c"
        __label__ = 32; break; //@line 5404 "xmlparse.c"
      case 32: // $bb51
        $i21=0; //@line 5405 "xmlparse.c"
        __label__ = 37; break; //@line 5405 "xmlparse.c"
      case 33: // $bb52
        var $163=$parser_addr; //@line 5406 "xmlparse.c"
        var $164=$163+416; //@line 5406 "xmlparse.c"
        var $165=$164+12; //@line 5406 "xmlparse.c"
        var $166=HEAP[$165]; //@line 5406 "xmlparse.c"
        var $167=$parser_addr; //@line 5406 "xmlparse.c"
        var $168=$167+416; //@line 5406 "xmlparse.c"
        var $169=$168+8; //@line 5406 "xmlparse.c"
        var $170=HEAP[$169]; //@line 5406 "xmlparse.c"
        var $171=($166)!=($170); //@line 5406 "xmlparse.c"
        if ($171) { __label__ = 36; break; } else { __label__ = 34; break; } //@line 5406 "xmlparse.c"
      case 34: // $bb53
        var $172=$parser_addr; //@line 5406 "xmlparse.c"
        var $173=$172+416; //@line 5406 "xmlparse.c"
        var $174=_poolGrow($173); //@line 5406 "xmlparse.c"
        var $175=($174)!=0; //@line 5406 "xmlparse.c"
        if ($175) { __label__ = 36; break; } else { __label__ = 35; break; } //@line 5406 "xmlparse.c"
      case 35: // $bb58
        $iftmp_287=1; //@line 5406 "xmlparse.c"
        $0=0; //@line 5407 "xmlparse.c"
        __label__ = 58; break; //@line 5407 "xmlparse.c"
      case 36: // $bb59
        var $176=$parser_addr; //@line 5406 "xmlparse.c"
        var $177=$176+416; //@line 5406 "xmlparse.c"
        var $178=$177+12; //@line 5406 "xmlparse.c"
        var $179=HEAP[$178]; //@line 5406 "xmlparse.c"
        var $180=$prefix; //@line 5406 "xmlparse.c"
        var $181=$180+4; //@line 5406 "xmlparse.c"
        var $182=HEAP[$181]; //@line 5406 "xmlparse.c"
        var $183=$182+16; //@line 5406 "xmlparse.c"
        var $184=HEAP[$183]; //@line 5406 "xmlparse.c"
        var $185=$i21; //@line 5406 "xmlparse.c"
        var $186=$184+$185; //@line 5406 "xmlparse.c"
        var $187=HEAP[$186]; //@line 5406 "xmlparse.c"
        HEAP[$179]=$187; //@line 5406 "xmlparse.c"
        var $188=$179+1; //@line 5406 "xmlparse.c"
        var $189=$parser_addr; //@line 5406 "xmlparse.c"
        var $190=$189+416; //@line 5406 "xmlparse.c"
        var $191=$190+12; //@line 5406 "xmlparse.c"
        HEAP[$191]=$188; //@line 5406 "xmlparse.c"
        $iftmp_287=0; //@line 5406 "xmlparse.c"
        var $192=$i21; //@line 5405 "xmlparse.c"
        var $193=($192) + 1; //@line 5405 "xmlparse.c"
        $i21=$193; //@line 5405 "xmlparse.c"
        __label__ = 37; break; //@line 5405 "xmlparse.c"
      case 37: // $bb60
        var $194=$i21; //@line 5405 "xmlparse.c"
        var $195=$len22; //@line 5405 "xmlparse.c"
        var $196=($194) < ($195); //@line 5405 "xmlparse.c"
        if ($196) { __label__ = 33; break; } else { __label__ = 38; break; } //@line 5405 "xmlparse.c"
      case 38: // $bb61
        $needSep=1; //@line 5408 "xmlparse.c"
        __label__ = 14; break; //@line 5408 "xmlparse.c"
      case 39: // $bb63
        var $197=$dtd; //@line 5412 "xmlparse.c"
        var $198=$197; //@line 5412 "xmlparse.c"
        _hashTableIterInit($iter, $198); //@line 5412 "xmlparse.c"
        __label__ = 40; break; //@line 5412 "xmlparse.c"
      case 40: // $bb64
        var $199=_hashTableIterNext($iter); //@line 5415 "xmlparse.c"
        var $200=$199; //@line 5415 "xmlparse.c"
        $e=$200; //@line 5415 "xmlparse.c"
        var $201=($200)==0; //@line 5416 "xmlparse.c"
        if ($201) { __label__ = 54; break; } else { __label__ = 41; break; } //@line 5416 "xmlparse.c"
      case 41: // $bb66
        var $202=$e; //@line 5418 "xmlparse.c"
        var $203=$202+32; //@line 5418 "xmlparse.c"
        var $204=HEAP[$203]; //@line 5418 "xmlparse.c"
        var $205=($204)==0; //@line 5418 "xmlparse.c"
        if ($205) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 5418 "xmlparse.c"
      case 42: // $bb67
        var $206=$needSep; //@line 5420 "xmlparse.c"
        var $207=($206)!=0; //@line 5420 "xmlparse.c"
        if ($207) { __label__ = 43; break; } else { __label__ = 47; break; } //@line 5420 "xmlparse.c"
      case 43: // $bb68
        var $208=$parser_addr; //@line 5420 "xmlparse.c"
        var $209=$208+416; //@line 5420 "xmlparse.c"
        var $210=$209+12; //@line 5420 "xmlparse.c"
        var $211=HEAP[$210]; //@line 5420 "xmlparse.c"
        var $212=$parser_addr; //@line 5420 "xmlparse.c"
        var $213=$212+416; //@line 5420 "xmlparse.c"
        var $214=$213+8; //@line 5420 "xmlparse.c"
        var $215=HEAP[$214]; //@line 5420 "xmlparse.c"
        var $216=($211)!=($215); //@line 5420 "xmlparse.c"
        if ($216) { __label__ = 45; break; } else { __label__ = 44; break; } //@line 5420 "xmlparse.c"
      case 44: // $bb69
        var $217=$parser_addr; //@line 5420 "xmlparse.c"
        var $218=$217+416; //@line 5420 "xmlparse.c"
        var $219=_poolGrow($218); //@line 5420 "xmlparse.c"
        var $220=($219)!=0; //@line 5420 "xmlparse.c"
        if ($220) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 5420 "xmlparse.c"
      case 45: // $bb72
        var $221=$parser_addr; //@line 5420 "xmlparse.c"
        var $222=$221+416; //@line 5420 "xmlparse.c"
        var $223=$222+12; //@line 5420 "xmlparse.c"
        var $224=HEAP[$223]; //@line 5420 "xmlparse.c"
        HEAP[$224]=12; //@line 5420 "xmlparse.c"
        var $225=$224+1; //@line 5420 "xmlparse.c"
        var $226=$parser_addr; //@line 5420 "xmlparse.c"
        var $227=$226+416; //@line 5420 "xmlparse.c"
        var $228=$227+12; //@line 5420 "xmlparse.c"
        HEAP[$228]=$225; //@line 5420 "xmlparse.c"
        $iftmp_288=0; //@line 5420 "xmlparse.c"
        __label__ = 47; break;
      case 46: // $bb74
        $iftmp_288=1; //@line 5420 "xmlparse.c"
        $0=0; //@line 5421 "xmlparse.c"
        __label__ = 58; break; //@line 5421 "xmlparse.c"
      case 47: // $bb75
        var $229=$e; //@line 5422 "xmlparse.c"
        var $230=$229; //@line 5422 "xmlparse.c"
        var $231=HEAP[$230]; //@line 5422 "xmlparse.c"
        $s65=$231; //@line 5422 "xmlparse.c"
        __label__ = 52; break; //@line 5422 "xmlparse.c"
      case 48: // $bb76
        var $232=$parser_addr; //@line 5423 "xmlparse.c"
        var $233=$232+416; //@line 5423 "xmlparse.c"
        var $234=$233+12; //@line 5423 "xmlparse.c"
        var $235=HEAP[$234]; //@line 5423 "xmlparse.c"
        var $236=$parser_addr; //@line 5423 "xmlparse.c"
        var $237=$236+416; //@line 5423 "xmlparse.c"
        var $238=$237+8; //@line 5423 "xmlparse.c"
        var $239=HEAP[$238]; //@line 5423 "xmlparse.c"
        var $240=($235)!=($239); //@line 5423 "xmlparse.c"
        if ($240) { __label__ = 51; break; } else { __label__ = 49; break; } //@line 5423 "xmlparse.c"
      case 49: // $bb77
        var $241=$parser_addr; //@line 5423 "xmlparse.c"
        var $242=$241+416; //@line 5423 "xmlparse.c"
        var $243=_poolGrow($242); //@line 5423 "xmlparse.c"
        var $244=($243)!=0; //@line 5423 "xmlparse.c"
        if ($244) { __label__ = 51; break; } else { __label__ = 50; break; } //@line 5423 "xmlparse.c"
      case 50: // $bb82
        $iftmp_289=1; //@line 5423 "xmlparse.c"
        $0=0; //@line 5424 "xmlparse.c"
        __label__ = 58; break; //@line 5424 "xmlparse.c"
      case 51: // $bb83
        var $245=$parser_addr; //@line 5423 "xmlparse.c"
        var $246=$245+416; //@line 5423 "xmlparse.c"
        var $247=$246+12; //@line 5423 "xmlparse.c"
        var $248=HEAP[$247]; //@line 5423 "xmlparse.c"
        var $249=$s65; //@line 5423 "xmlparse.c"
        var $250=HEAP[$249]; //@line 5423 "xmlparse.c"
        HEAP[$248]=$250; //@line 5423 "xmlparse.c"
        var $251=$248+1; //@line 5423 "xmlparse.c"
        var $252=$parser_addr; //@line 5423 "xmlparse.c"
        var $253=$252+416; //@line 5423 "xmlparse.c"
        var $254=$253+12; //@line 5423 "xmlparse.c"
        HEAP[$254]=$251; //@line 5423 "xmlparse.c"
        $iftmp_289=0; //@line 5423 "xmlparse.c"
        var $255=$s65; //@line 5422 "xmlparse.c"
        var $256=$255+1; //@line 5422 "xmlparse.c"
        $s65=$256; //@line 5422 "xmlparse.c"
        __label__ = 52; break; //@line 5422 "xmlparse.c"
      case 52: // $bb84
        var $257=$s65; //@line 5422 "xmlparse.c"
        var $258=HEAP[$257]; //@line 5422 "xmlparse.c"
        var $259=($258)!=0; //@line 5422 "xmlparse.c"
        if ($259) { __label__ = 48; break; } else { __label__ = 53; break; } //@line 5422 "xmlparse.c"
      case 53: // $bb85
        $needSep=1; //@line 5425 "xmlparse.c"
        __label__ = 40; break; //@line 5425 "xmlparse.c"
      case 54: // $bb87
        var $260=$parser_addr; //@line 5428 "xmlparse.c"
        var $261=$260+416; //@line 5428 "xmlparse.c"
        var $262=$261+12; //@line 5428 "xmlparse.c"
        var $263=HEAP[$262]; //@line 5428 "xmlparse.c"
        var $264=$parser_addr; //@line 5428 "xmlparse.c"
        var $265=$264+416; //@line 5428 "xmlparse.c"
        var $266=$265+8; //@line 5428 "xmlparse.c"
        var $267=HEAP[$266]; //@line 5428 "xmlparse.c"
        var $268=($263)!=($267); //@line 5428 "xmlparse.c"
        if ($268) { __label__ = 57; break; } else { __label__ = 55; break; } //@line 5428 "xmlparse.c"
      case 55: // $bb88
        var $269=$parser_addr; //@line 5428 "xmlparse.c"
        var $270=$269+416; //@line 5428 "xmlparse.c"
        var $271=_poolGrow($270); //@line 5428 "xmlparse.c"
        var $272=($271)!=0; //@line 5428 "xmlparse.c"
        if ($272) { __label__ = 57; break; } else { __label__ = 56; break; } //@line 5428 "xmlparse.c"
      case 56: // $bb93
        $iftmp_290=1; //@line 5428 "xmlparse.c"
        $0=0; //@line 5429 "xmlparse.c"
        __label__ = 58; break; //@line 5429 "xmlparse.c"
      case 57: // $bb94
        var $273=$parser_addr; //@line 5428 "xmlparse.c"
        var $274=$273+416; //@line 5428 "xmlparse.c"
        var $275=$274+12; //@line 5428 "xmlparse.c"
        var $276=HEAP[$275]; //@line 5428 "xmlparse.c"
        HEAP[$276]=0; //@line 5428 "xmlparse.c"
        var $277=$276+1; //@line 5428 "xmlparse.c"
        var $278=$parser_addr; //@line 5428 "xmlparse.c"
        var $279=$278+416; //@line 5428 "xmlparse.c"
        var $280=$279+12; //@line 5428 "xmlparse.c"
        HEAP[$280]=$277; //@line 5428 "xmlparse.c"
        $iftmp_290=0; //@line 5428 "xmlparse.c"
        var $281=$parser_addr; //@line 5430 "xmlparse.c"
        var $282=$281+416; //@line 5430 "xmlparse.c"
        var $283=$282+16; //@line 5430 "xmlparse.c"
        var $284=HEAP[$283]; //@line 5430 "xmlparse.c"
        $0=$284; //@line 5430 "xmlparse.c"
        __label__ = 58; break; //@line 5430 "xmlparse.c"
      case 58: // $bb95
        var $285=$0; //@line 5375 "xmlparse.c"
        $retval=$285; //@line 5375 "xmlparse.c"
        var $retval96=$retval; //@line 5375 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval96; //@line 5375 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _setContext($parser, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $context_addr;
        var $retval;
        var $iftmp_295;
        var $iftmp_294;
        var $iftmp_293;
        var $iftmp_292;
        var $0;
        var $iftmp_291;
        var $dtd;
        var $s;
        var $e;
        var $prefix;
        $parser_addr=$parser;
        $context_addr=$context;
        var $1=$parser_addr; //@line 5436 "xmlparse.c"
        var $2=$1+356; //@line 5436 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5436 "xmlparse.c"
        $dtd=$3; //@line 5436 "xmlparse.c"
        var $4=$context_addr; //@line 5437 "xmlparse.c"
        $s=$4; //@line 5437 "xmlparse.c"
        __label__ = 42; break; //@line 5437 "xmlparse.c"
      case 1: // $bb
        var $5=$s; //@line 5440 "xmlparse.c"
        var $6=HEAP[$5]; //@line 5440 "xmlparse.c"
        var $7=($6)==12; //@line 5440 "xmlparse.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 5440 "xmlparse.c"
      case 2: // $bb1
        var $8=$s; //@line 5440 "xmlparse.c"
        var $9=HEAP[$8]; //@line 5440 "xmlparse.c"
        var $10=($9)==0; //@line 5440 "xmlparse.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 11; break; } //@line 5440 "xmlparse.c"
      case 3: // $bb2
        var $11=$parser_addr; //@line 5442 "xmlparse.c"
        var $12=$11+416; //@line 5442 "xmlparse.c"
        var $13=$12+12; //@line 5442 "xmlparse.c"
        var $14=HEAP[$13]; //@line 5442 "xmlparse.c"
        var $15=$parser_addr; //@line 5442 "xmlparse.c"
        var $16=$15+416; //@line 5442 "xmlparse.c"
        var $17=$16+8; //@line 5442 "xmlparse.c"
        var $18=HEAP[$17]; //@line 5442 "xmlparse.c"
        var $19=($14)!=($18); //@line 5442 "xmlparse.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 4; break; } //@line 5442 "xmlparse.c"
      case 4: // $bb3
        var $20=$parser_addr; //@line 5442 "xmlparse.c"
        var $21=$20+416; //@line 5442 "xmlparse.c"
        var $22=_poolGrow($21); //@line 5442 "xmlparse.c"
        var $23=($22)!=0; //@line 5442 "xmlparse.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 5442 "xmlparse.c"
      case 5: // $bb7
        $iftmp_291=1; //@line 5442 "xmlparse.c"
        $0=0; //@line 5443 "xmlparse.c"
        __label__ = 44; break; //@line 5443 "xmlparse.c"
      case 6: // $bb8
        var $24=$parser_addr; //@line 5442 "xmlparse.c"
        var $25=$24+416; //@line 5442 "xmlparse.c"
        var $26=$25+12; //@line 5442 "xmlparse.c"
        var $27=HEAP[$26]; //@line 5442 "xmlparse.c"
        HEAP[$27]=0; //@line 5442 "xmlparse.c"
        var $28=$27+1; //@line 5442 "xmlparse.c"
        var $29=$parser_addr; //@line 5442 "xmlparse.c"
        var $30=$29+416; //@line 5442 "xmlparse.c"
        var $31=$30+12; //@line 5442 "xmlparse.c"
        HEAP[$31]=$28; //@line 5442 "xmlparse.c"
        $iftmp_291=0; //@line 5442 "xmlparse.c"
        var $32=$parser_addr; //@line 5444 "xmlparse.c"
        var $33=$32+416; //@line 5444 "xmlparse.c"
        var $34=$33+16; //@line 5444 "xmlparse.c"
        var $35=HEAP[$34]; //@line 5444 "xmlparse.c"
        var $36=$dtd; //@line 5444 "xmlparse.c"
        var $37=$36; //@line 5444 "xmlparse.c"
        var $38=_lookup($37, $35, 0); //@line 5444 "xmlparse.c"
        var $39=$38; //@line 5444 "xmlparse.c"
        $e=$39; //@line 5444 "xmlparse.c"
        var $40=($39)!=0; //@line 5445 "xmlparse.c"
        if ($40) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5445 "xmlparse.c"
      case 7: // $bb9
        var $41=$e; //@line 5446 "xmlparse.c"
        var $42=$41+32; //@line 5446 "xmlparse.c"
        HEAP[$42]=1; //@line 5446 "xmlparse.c"
        __label__ = 8; break; //@line 5446 "xmlparse.c"
      case 8: // $bb10
        var $43=$s; //@line 5447 "xmlparse.c"
        var $44=HEAP[$43]; //@line 5447 "xmlparse.c"
        var $45=($44)!=0; //@line 5447 "xmlparse.c"
        if ($45) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 5447 "xmlparse.c"
      case 9: // $bb11
        var $46=$s; //@line 5448 "xmlparse.c"
        var $47=$46+1; //@line 5448 "xmlparse.c"
        $s=$47; //@line 5448 "xmlparse.c"
        __label__ = 10; break; //@line 5448 "xmlparse.c"
      case 10: // $bb12
        var $48=$s; //@line 5449 "xmlparse.c"
        $context_addr=$48; //@line 5449 "xmlparse.c"
        var $49=$parser_addr; //@line 5450 "xmlparse.c"
        var $50=$49+416; //@line 5450 "xmlparse.c"
        var $51=$50+16; //@line 5450 "xmlparse.c"
        var $52=HEAP[$51]; //@line 5450 "xmlparse.c"
        var $53=$parser_addr; //@line 5450 "xmlparse.c"
        var $54=$53+416; //@line 5450 "xmlparse.c"
        var $55=$54+12; //@line 5450 "xmlparse.c"
        HEAP[$55]=$52; //@line 5450 "xmlparse.c"
        __label__ = 42; break; //@line 5450 "xmlparse.c"
      case 11: // $bb13
        var $56=$s; //@line 5452 "xmlparse.c"
        var $57=HEAP[$56]; //@line 5452 "xmlparse.c"
        var $58=($57)==61; //@line 5452 "xmlparse.c"
        var $59=$parser_addr; //@line 5454 "xmlparse.c"
        var $60=$59+416; //@line 5454 "xmlparse.c"
        var $61=$60+12; //@line 5454 "xmlparse.c"
        var $62=HEAP[$61]; //@line 5454 "xmlparse.c"
        var $63=$parser_addr; //@line 5454 "xmlparse.c"
        var $64=$63+416; //@line 5454 "xmlparse.c"
        if ($58) { __label__ = 12; break; } else { __label__ = 38; break; } //@line 5452 "xmlparse.c"
      case 12: // $bb14
        var $65=$64+16; //@line 5454 "xmlparse.c"
        var $66=HEAP[$65]; //@line 5454 "xmlparse.c"
        var $67=($62)==($66); //@line 5454 "xmlparse.c"
        if ($67) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5454 "xmlparse.c"
      case 13: // $bb15
        var $68=$dtd; //@line 5455 "xmlparse.c"
        var $69=$68+152; //@line 5455 "xmlparse.c"
        $prefix=$69; //@line 5455 "xmlparse.c"
        __label__ = 23; break; //@line 5455 "xmlparse.c"
      case 14: // $bb16
        var $70=$parser_addr; //@line 5457 "xmlparse.c"
        var $71=$70+416; //@line 5457 "xmlparse.c"
        var $72=$71+12; //@line 5457 "xmlparse.c"
        var $73=HEAP[$72]; //@line 5457 "xmlparse.c"
        var $74=$parser_addr; //@line 5457 "xmlparse.c"
        var $75=$74+416; //@line 5457 "xmlparse.c"
        var $76=$75+8; //@line 5457 "xmlparse.c"
        var $77=HEAP[$76]; //@line 5457 "xmlparse.c"
        var $78=($73)!=($77); //@line 5457 "xmlparse.c"
        if ($78) { __label__ = 17; break; } else { __label__ = 15; break; } //@line 5457 "xmlparse.c"
      case 15: // $bb17
        var $79=$parser_addr; //@line 5457 "xmlparse.c"
        var $80=$79+416; //@line 5457 "xmlparse.c"
        var $81=_poolGrow($80); //@line 5457 "xmlparse.c"
        var $82=($81)!=0; //@line 5457 "xmlparse.c"
        if ($82) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 5457 "xmlparse.c"
      case 16: // $bb22
        $iftmp_292=1; //@line 5457 "xmlparse.c"
        $0=0; //@line 5458 "xmlparse.c"
        __label__ = 44; break; //@line 5458 "xmlparse.c"
      case 17: // $bb23
        var $83=$parser_addr; //@line 5457 "xmlparse.c"
        var $84=$83+416; //@line 5457 "xmlparse.c"
        var $85=$84+12; //@line 5457 "xmlparse.c"
        var $86=HEAP[$85]; //@line 5457 "xmlparse.c"
        HEAP[$86]=0; //@line 5457 "xmlparse.c"
        var $87=$86+1; //@line 5457 "xmlparse.c"
        var $88=$parser_addr; //@line 5457 "xmlparse.c"
        var $89=$88+416; //@line 5457 "xmlparse.c"
        var $90=$89+12; //@line 5457 "xmlparse.c"
        HEAP[$90]=$87; //@line 5457 "xmlparse.c"
        $iftmp_292=0; //@line 5457 "xmlparse.c"
        var $91=$parser_addr; //@line 5459 "xmlparse.c"
        var $92=$91+416; //@line 5459 "xmlparse.c"
        var $93=$92+16; //@line 5459 "xmlparse.c"
        var $94=HEAP[$93]; //@line 5459 "xmlparse.c"
        var $95=$dtd; //@line 5459 "xmlparse.c"
        var $96=$95+60; //@line 5459 "xmlparse.c"
        var $97=_lookup($96, $94, 8); //@line 5459 "xmlparse.c"
        var $98=$97; //@line 5459 "xmlparse.c"
        $prefix=$98; //@line 5459 "xmlparse.c"
        var $99=($98)==0; //@line 5461 "xmlparse.c"
        if ($99) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 5461 "xmlparse.c"
      case 18: // $bb24
        $0=0; //@line 5462 "xmlparse.c"
        __label__ = 44; break; //@line 5462 "xmlparse.c"
      case 19: // $bb25
        var $100=$prefix; //@line 5463 "xmlparse.c"
        var $101=$100; //@line 5463 "xmlparse.c"
        var $102=HEAP[$101]; //@line 5463 "xmlparse.c"
        var $103=$parser_addr; //@line 5463 "xmlparse.c"
        var $104=$103+416; //@line 5463 "xmlparse.c"
        var $105=$104+16; //@line 5463 "xmlparse.c"
        var $106=HEAP[$105]; //@line 5463 "xmlparse.c"
        var $107=($102)==($106); //@line 5463 "xmlparse.c"
        if ($107) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 5463 "xmlparse.c"
      case 20: // $bb26
        var $108=$prefix; //@line 5464 "xmlparse.c"
        var $109=$108; //@line 5464 "xmlparse.c"
        var $110=HEAP[$109]; //@line 5464 "xmlparse.c"
        var $111=$dtd; //@line 5464 "xmlparse.c"
        var $112=$111+80; //@line 5464 "xmlparse.c"
        var $113=_poolCopyString($112, $110); //@line 5464 "xmlparse.c"
        var $114=$prefix; //@line 5464 "xmlparse.c"
        var $115=$114; //@line 5464 "xmlparse.c"
        HEAP[$115]=$113; //@line 5464 "xmlparse.c"
        var $116=$prefix; //@line 5465 "xmlparse.c"
        var $117=$116; //@line 5465 "xmlparse.c"
        var $118=HEAP[$117]; //@line 5465 "xmlparse.c"
        var $119=($118)==0; //@line 5465 "xmlparse.c"
        if ($119) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 5465 "xmlparse.c"
      case 21: // $bb27
        $0=0; //@line 5466 "xmlparse.c"
        __label__ = 44; break; //@line 5466 "xmlparse.c"
      case 22: // $bb28
        var $120=$parser_addr; //@line 5468 "xmlparse.c"
        var $121=$120+416; //@line 5468 "xmlparse.c"
        var $122=$121+16; //@line 5468 "xmlparse.c"
        var $123=HEAP[$122]; //@line 5468 "xmlparse.c"
        var $124=$parser_addr; //@line 5468 "xmlparse.c"
        var $125=$124+416; //@line 5468 "xmlparse.c"
        var $126=$125+12; //@line 5468 "xmlparse.c"
        HEAP[$126]=$123; //@line 5468 "xmlparse.c"
        __label__ = 23; break; //@line 5468 "xmlparse.c"
      case 23: // $bb29
        var $127=$s; //@line 5470 "xmlparse.c"
        var $128=$127+1; //@line 5470 "xmlparse.c"
        $context_addr=$128; //@line 5470 "xmlparse.c"
        __label__ = 28; break; //@line 5470 "xmlparse.c"
      case 24: // $bb30
        var $129=$parser_addr; //@line 5473 "xmlparse.c"
        var $130=$129+416; //@line 5473 "xmlparse.c"
        var $131=$130+12; //@line 5473 "xmlparse.c"
        var $132=HEAP[$131]; //@line 5473 "xmlparse.c"
        var $133=$parser_addr; //@line 5473 "xmlparse.c"
        var $134=$133+416; //@line 5473 "xmlparse.c"
        var $135=$134+8; //@line 5473 "xmlparse.c"
        var $136=HEAP[$135]; //@line 5473 "xmlparse.c"
        var $137=($132)!=($136); //@line 5473 "xmlparse.c"
        if ($137) { __label__ = 27; break; } else { __label__ = 25; break; } //@line 5473 "xmlparse.c"
      case 25: // $bb31
        var $138=$parser_addr; //@line 5473 "xmlparse.c"
        var $139=$138+416; //@line 5473 "xmlparse.c"
        var $140=_poolGrow($139); //@line 5473 "xmlparse.c"
        var $141=($140)!=0; //@line 5473 "xmlparse.c"
        if ($141) { __label__ = 27; break; } else { __label__ = 26; break; } //@line 5473 "xmlparse.c"
      case 26: // $bb36
        $iftmp_293=1; //@line 5473 "xmlparse.c"
        $0=0; //@line 5474 "xmlparse.c"
        __label__ = 44; break; //@line 5474 "xmlparse.c"
      case 27: // $bb37
        var $142=$parser_addr; //@line 5473 "xmlparse.c"
        var $143=$142+416; //@line 5473 "xmlparse.c"
        var $144=$143+12; //@line 5473 "xmlparse.c"
        var $145=HEAP[$144]; //@line 5473 "xmlparse.c"
        var $146=$context_addr; //@line 5473 "xmlparse.c"
        var $147=HEAP[$146]; //@line 5473 "xmlparse.c"
        HEAP[$145]=$147; //@line 5473 "xmlparse.c"
        var $148=$145+1; //@line 5473 "xmlparse.c"
        var $149=$parser_addr; //@line 5473 "xmlparse.c"
        var $150=$149+416; //@line 5473 "xmlparse.c"
        var $151=$150+12; //@line 5473 "xmlparse.c"
        HEAP[$151]=$148; //@line 5473 "xmlparse.c"
        $iftmp_293=0; //@line 5473 "xmlparse.c"
        var $152=$context_addr; //@line 5472 "xmlparse.c"
        var $153=$152+1; //@line 5472 "xmlparse.c"
        $context_addr=$153; //@line 5472 "xmlparse.c"
        __label__ = 28; break; //@line 5472 "xmlparse.c"
      case 28: // $bb38
        var $154=$context_addr; //@line 5471 "xmlparse.c"
        var $155=HEAP[$154]; //@line 5471 "xmlparse.c"
        var $156=($155)==12; //@line 5471 "xmlparse.c"
        if ($156) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 5471 "xmlparse.c"
      case 29: // $bb39
        var $157=$context_addr; //@line 5471 "xmlparse.c"
        var $158=HEAP[$157]; //@line 5471 "xmlparse.c"
        var $159=($158)!=0; //@line 5471 "xmlparse.c"
        if ($159) { __label__ = 24; break; } else { __label__ = 30; break; } //@line 5471 "xmlparse.c"
      case 30: // $bb40
        var $160=$parser_addr; //@line 5475 "xmlparse.c"
        var $161=$160+416; //@line 5475 "xmlparse.c"
        var $162=$161+12; //@line 5475 "xmlparse.c"
        var $163=HEAP[$162]; //@line 5475 "xmlparse.c"
        var $164=$parser_addr; //@line 5475 "xmlparse.c"
        var $165=$164+416; //@line 5475 "xmlparse.c"
        var $166=$165+8; //@line 5475 "xmlparse.c"
        var $167=HEAP[$166]; //@line 5475 "xmlparse.c"
        var $168=($163)!=($167); //@line 5475 "xmlparse.c"
        if ($168) { __label__ = 33; break; } else { __label__ = 31; break; } //@line 5475 "xmlparse.c"
      case 31: // $bb41
        var $169=$parser_addr; //@line 5475 "xmlparse.c"
        var $170=$169+416; //@line 5475 "xmlparse.c"
        var $171=_poolGrow($170); //@line 5475 "xmlparse.c"
        var $172=($171)!=0; //@line 5475 "xmlparse.c"
        if ($172) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 5475 "xmlparse.c"
      case 32: // $bb46
        $iftmp_294=1; //@line 5475 "xmlparse.c"
        $0=0; //@line 5476 "xmlparse.c"
        __label__ = 44; break; //@line 5476 "xmlparse.c"
      case 33: // $bb47
        var $173=$parser_addr; //@line 5475 "xmlparse.c"
        var $174=$173+416; //@line 5475 "xmlparse.c"
        var $175=$174+12; //@line 5475 "xmlparse.c"
        var $176=HEAP[$175]; //@line 5475 "xmlparse.c"
        HEAP[$176]=0; //@line 5475 "xmlparse.c"
        var $177=$176+1; //@line 5475 "xmlparse.c"
        var $178=$parser_addr; //@line 5475 "xmlparse.c"
        var $179=$178+416; //@line 5475 "xmlparse.c"
        var $180=$179+12; //@line 5475 "xmlparse.c"
        HEAP[$180]=$177; //@line 5475 "xmlparse.c"
        $iftmp_294=0; //@line 5475 "xmlparse.c"
        var $181=$parser_addr; //@line 5477 "xmlparse.c"
        var $182=$181+372; //@line 5477 "xmlparse.c"
        var $183=$parser_addr; //@line 5477 "xmlparse.c"
        var $184=$183+416; //@line 5477 "xmlparse.c"
        var $185=$184+16; //@line 5477 "xmlparse.c"
        var $186=HEAP[$185]; //@line 5477 "xmlparse.c"
        var $187=$parser_addr; //@line 5477 "xmlparse.c"
        var $188=$prefix; //@line 5477 "xmlparse.c"
        var $189=_addBinding($187, $188, 0, $186, $182); //@line 5477 "xmlparse.c"
        var $190=($189)!=0; //@line 5477 "xmlparse.c"
        if ($190) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 5477 "xmlparse.c"
      case 34: // $bb48
        $0=0; //@line 5479 "xmlparse.c"
        __label__ = 44; break; //@line 5479 "xmlparse.c"
      case 35: // $bb49
        var $191=$parser_addr; //@line 5480 "xmlparse.c"
        var $192=$191+416; //@line 5480 "xmlparse.c"
        var $193=$192+16; //@line 5480 "xmlparse.c"
        var $194=HEAP[$193]; //@line 5480 "xmlparse.c"
        var $195=$parser_addr; //@line 5480 "xmlparse.c"
        var $196=$195+416; //@line 5480 "xmlparse.c"
        var $197=$196+12; //@line 5480 "xmlparse.c"
        HEAP[$197]=$194; //@line 5480 "xmlparse.c"
        var $198=$context_addr; //@line 5481 "xmlparse.c"
        var $199=HEAP[$198]; //@line 5481 "xmlparse.c"
        var $200=($199)!=0; //@line 5481 "xmlparse.c"
        if ($200) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 5481 "xmlparse.c"
      case 36: // $bb50
        var $201=$context_addr; //@line 5482 "xmlparse.c"
        var $202=$201+1; //@line 5482 "xmlparse.c"
        $context_addr=$202; //@line 5482 "xmlparse.c"
        __label__ = 37; break; //@line 5482 "xmlparse.c"
      case 37: // $bb51
        var $203=$context_addr; //@line 5483 "xmlparse.c"
        $s=$203; //@line 5483 "xmlparse.c"
        __label__ = 42; break; //@line 5483 "xmlparse.c"
      case 38: // $bb52
        var $204=$64+8; //@line 5486 "xmlparse.c"
        var $205=HEAP[$204]; //@line 5486 "xmlparse.c"
        var $206=($62)!=($205); //@line 5486 "xmlparse.c"
        if ($206) { __label__ = 41; break; } else { __label__ = 39; break; } //@line 5486 "xmlparse.c"
      case 39: // $bb53
        var $207=$parser_addr; //@line 5486 "xmlparse.c"
        var $208=$207+416; //@line 5486 "xmlparse.c"
        var $209=_poolGrow($208); //@line 5486 "xmlparse.c"
        var $210=($209)!=0; //@line 5486 "xmlparse.c"
        if ($210) { __label__ = 41; break; } else { __label__ = 40; break; } //@line 5486 "xmlparse.c"
      case 40: // $bb58
        $iftmp_295=1; //@line 5486 "xmlparse.c"
        $0=0; //@line 5487 "xmlparse.c"
        __label__ = 44; break; //@line 5487 "xmlparse.c"
      case 41: // $bb59
        var $211=$parser_addr; //@line 5486 "xmlparse.c"
        var $212=$211+416; //@line 5486 "xmlparse.c"
        var $213=$212+12; //@line 5486 "xmlparse.c"
        var $214=HEAP[$213]; //@line 5486 "xmlparse.c"
        var $215=$s; //@line 5486 "xmlparse.c"
        var $216=HEAP[$215]; //@line 5486 "xmlparse.c"
        HEAP[$214]=$216; //@line 5486 "xmlparse.c"
        var $217=$214+1; //@line 5486 "xmlparse.c"
        var $218=$parser_addr; //@line 5486 "xmlparse.c"
        var $219=$218+416; //@line 5486 "xmlparse.c"
        var $220=$219+12; //@line 5486 "xmlparse.c"
        HEAP[$220]=$217; //@line 5486 "xmlparse.c"
        $iftmp_295=0; //@line 5486 "xmlparse.c"
        var $221=$s; //@line 5488 "xmlparse.c"
        var $222=$221+1; //@line 5488 "xmlparse.c"
        $s=$222; //@line 5488 "xmlparse.c"
        __label__ = 42; break; //@line 5488 "xmlparse.c"
      case 42: // $bb60
        var $223=$context_addr; //@line 5439 "xmlparse.c"
        var $224=HEAP[$223]; //@line 5439 "xmlparse.c"
        var $225=($224)!=0; //@line 5439 "xmlparse.c"
        if ($225) { __label__ = 1; break; } else { __label__ = 43; break; } //@line 5439 "xmlparse.c"
      case 43: // $bb61
        $0=1; //@line 5491 "xmlparse.c"
        __label__ = 44; break; //@line 5491 "xmlparse.c"
      case 44: // $bb62
        var $226=$0; //@line 5443 "xmlparse.c"
        $retval=$226; //@line 5443 "xmlparse.c"
        var $retval63=$retval; //@line 5443 "xmlparse.c"
        var $retval6364=((($retval63)) & 255); //@line 5443 "xmlparse.c"
        ;
        return $retval6364; //@line 5443 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normalizePublicId($publicId) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $publicId_addr;
        var $p;
        var $s;
        $publicId_addr=$publicId;
        var $0=$publicId_addr; //@line 5497 "xmlparse.c"
        $p=$0; //@line 5497 "xmlparse.c"
        var $1=$publicId_addr; //@line 5499 "xmlparse.c"
        $s=$1; //@line 5499 "xmlparse.c"
        var $2=$s; //@line 5499 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5499 "xmlparse.c"
        var $4=($3)!=0; //@line 5499 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 5499 "xmlparse.c"
      case 1: // $bb
        var $5=$s; //@line 5500 "xmlparse.c"
        var $6=HEAP[$5]; //@line 5500 "xmlparse.c"
        var $7=($6); //@line 5500 "xmlparse.c"
        if ($7 == 10) {
          __label__ = 2; break;
        }
        else if ($7 == 13) {
          __label__ = 2; break;
        }
        else if ($7 == 32) {
          __label__ = 2; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 2: // $bb1
        var $8=$p; //@line 5504 "xmlparse.c"
        var $9=$publicId_addr; //@line 5504 "xmlparse.c"
        var $10=($8)!=($9); //@line 5504 "xmlparse.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 5504 "xmlparse.c"
      case 3: // $bb2
        var $11=$p; //@line 5504 "xmlparse.c"
        var $12=$11+-1; //@line 5504 "xmlparse.c"
        var $13=HEAP[$12]; //@line 5504 "xmlparse.c"
        var $14=($13)!=32; //@line 5504 "xmlparse.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5504 "xmlparse.c"
      case 4: // $bb3
        var $15=$p; //@line 5505 "xmlparse.c"
        HEAP[$15]=32; //@line 5505 "xmlparse.c"
        var $16=$p; //@line 5505 "xmlparse.c"
        var $17=$16+1; //@line 5505 "xmlparse.c"
        $p=$17; //@line 5505 "xmlparse.c"
        __label__ = 6; break; //@line 5505 "xmlparse.c"
      case 5: // $bb5
        var $18=$s; //@line 5508 "xmlparse.c"
        var $19=HEAP[$18]; //@line 5508 "xmlparse.c"
        var $20=$p; //@line 5508 "xmlparse.c"
        HEAP[$20]=$19; //@line 5508 "xmlparse.c"
        var $21=$p; //@line 5508 "xmlparse.c"
        var $22=$21+1; //@line 5508 "xmlparse.c"
        $p=$22; //@line 5508 "xmlparse.c"
        __label__ = 6; break; //@line 5508 "xmlparse.c"
      case 6: // $bb6
        var $23=$s; //@line 5499 "xmlparse.c"
        var $24=$23+1; //@line 5499 "xmlparse.c"
        $s=$24; //@line 5499 "xmlparse.c"
        var $25=$s; //@line 5499 "xmlparse.c"
        var $26=HEAP[$25]; //@line 5499 "xmlparse.c"
        var $27=($26)!=0; //@line 5499 "xmlparse.c"
        if ($27) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 5499 "xmlparse.c"
      case 7: // $bb8
        var $28=$p; //@line 5511 "xmlparse.c"
        var $29=$publicId_addr; //@line 5511 "xmlparse.c"
        var $30=($28)!=($29); //@line 5511 "xmlparse.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 5511 "xmlparse.c"
      case 8: // $bb9
        var $31=$p; //@line 5511 "xmlparse.c"
        var $32=$31+-1; //@line 5511 "xmlparse.c"
        var $33=HEAP[$32]; //@line 5511 "xmlparse.c"
        var $34=($33)==32; //@line 5511 "xmlparse.c"
        if ($34) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 5511 "xmlparse.c"
      case 9: // $bb10
        var $35=$p; //@line 5512 "xmlparse.c"
        var $36=$35+-1; //@line 5512 "xmlparse.c"
        $p=$36; //@line 5512 "xmlparse.c"
        __label__ = 10; break; //@line 5512 "xmlparse.c"
      case 10: // $bb11
        var $37=$p; //@line 5513 "xmlparse.c"
        HEAP[$37]=0; //@line 5513 "xmlparse.c"
        ;
        return; //@line 5514 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dtdCreate($ms) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $ms_addr;
        var $retval;
        var $0;
        var $p;
        $ms_addr=$ms;
        var $1=$ms_addr; //@line 5519 "xmlparse.c"
        var $2=$1; //@line 5519 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5519 "xmlparse.c"
        var $4=FUNCTION_TABLE[$3](188); //@line 5519 "xmlparse.c"
        var $5=$4; //@line 5519 "xmlparse.c"
        $p=$5; //@line 5519 "xmlparse.c"
        var $6=$p; //@line 5520 "xmlparse.c"
        var $7=($6)==0; //@line 5520 "xmlparse.c"
        var $8=$p; //@line 5521 "xmlparse.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5520 "xmlparse.c"
      case 1: // $bb
        $0=$8; //@line 5521 "xmlparse.c"
        __label__ = 3; break; //@line 5521 "xmlparse.c"
      case 2: // $bb1
        var $9=$8+80; //@line 5522 "xmlparse.c"
        var $10=$ms_addr; //@line 5522 "xmlparse.c"
        _poolInit($9, $10); //@line 5522 "xmlparse.c"
        var $11=$p; //@line 5523 "xmlparse.c"
        var $12=$11+104; //@line 5523 "xmlparse.c"
        var $13=$ms_addr; //@line 5523 "xmlparse.c"
        _poolInit($12, $13); //@line 5523 "xmlparse.c"
        var $14=$p; //@line 5524 "xmlparse.c"
        var $15=$14; //@line 5524 "xmlparse.c"
        var $16=$ms_addr; //@line 5524 "xmlparse.c"
        _hashTableInit($15, $16); //@line 5524 "xmlparse.c"
        var $17=$p; //@line 5525 "xmlparse.c"
        var $18=$17+20; //@line 5525 "xmlparse.c"
        var $19=$ms_addr; //@line 5525 "xmlparse.c"
        _hashTableInit($18, $19); //@line 5525 "xmlparse.c"
        var $20=$p; //@line 5526 "xmlparse.c"
        var $21=$20+40; //@line 5526 "xmlparse.c"
        var $22=$ms_addr; //@line 5526 "xmlparse.c"
        _hashTableInit($21, $22); //@line 5526 "xmlparse.c"
        var $23=$p; //@line 5527 "xmlparse.c"
        var $24=$23+60; //@line 5527 "xmlparse.c"
        var $25=$ms_addr; //@line 5527 "xmlparse.c"
        _hashTableInit($24, $25); //@line 5527 "xmlparse.c"
        var $26=$p; //@line 5529 "xmlparse.c"
        var $27=$26+131; //@line 5529 "xmlparse.c"
        HEAP[$27]=0; //@line 5529 "xmlparse.c"
        var $28=$p; //@line 5530 "xmlparse.c"
        var $29=$28+132; //@line 5530 "xmlparse.c"
        var $30=$ms_addr; //@line 5530 "xmlparse.c"
        _hashTableInit($29, $30); //@line 5530 "xmlparse.c"
        var $31=$p; //@line 5532 "xmlparse.c"
        var $32=$31+152; //@line 5532 "xmlparse.c"
        var $33=$32; //@line 5532 "xmlparse.c"
        HEAP[$33]=0; //@line 5532 "xmlparse.c"
        var $34=$p; //@line 5533 "xmlparse.c"
        var $35=$34+152; //@line 5533 "xmlparse.c"
        var $36=$35+4; //@line 5533 "xmlparse.c"
        HEAP[$36]=0; //@line 5533 "xmlparse.c"
        var $37=$p; //@line 5535 "xmlparse.c"
        var $38=$37+160; //@line 5535 "xmlparse.c"
        HEAP[$38]=0; //@line 5535 "xmlparse.c"
        var $39=$p; //@line 5536 "xmlparse.c"
        var $40=$39+184; //@line 5536 "xmlparse.c"
        HEAP[$40]=0; //@line 5536 "xmlparse.c"
        var $41=$p; //@line 5537 "xmlparse.c"
        var $42=$41+164; //@line 5537 "xmlparse.c"
        HEAP[$42]=0; //@line 5537 "xmlparse.c"
        var $43=$p; //@line 5538 "xmlparse.c"
        var $44=$43+180; //@line 5538 "xmlparse.c"
        HEAP[$44]=0; //@line 5538 "xmlparse.c"
        var $45=$p; //@line 5539 "xmlparse.c"
        var $46=$45+172; //@line 5539 "xmlparse.c"
        HEAP[$46]=0; //@line 5539 "xmlparse.c"
        var $47=$p; //@line 5540 "xmlparse.c"
        var $48=$47+176; //@line 5540 "xmlparse.c"
        HEAP[$48]=0; //@line 5540 "xmlparse.c"
        var $49=$p; //@line 5541 "xmlparse.c"
        var $50=$49+168; //@line 5541 "xmlparse.c"
        HEAP[$50]=0; //@line 5541 "xmlparse.c"
        var $51=$p; //@line 5543 "xmlparse.c"
        var $52=$51+128; //@line 5543 "xmlparse.c"
        HEAP[$52]=1; //@line 5543 "xmlparse.c"
        var $53=$p; //@line 5544 "xmlparse.c"
        var $54=$53+129; //@line 5544 "xmlparse.c"
        HEAP[$54]=0; //@line 5544 "xmlparse.c"
        var $55=$p; //@line 5545 "xmlparse.c"
        var $56=$55+130; //@line 5545 "xmlparse.c"
        HEAP[$56]=0; //@line 5545 "xmlparse.c"
        var $57=$p; //@line 5546 "xmlparse.c"
        $0=$57; //@line 5546 "xmlparse.c"
        __label__ = 3; break; //@line 5546 "xmlparse.c"
      case 3: // $bb2
        var $58=$0; //@line 5521 "xmlparse.c"
        $retval=$58; //@line 5521 "xmlparse.c"
        var $retval3=$retval; //@line 5521 "xmlparse.c"
        ;
        return $retval3; //@line 5521 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dtdReset($p, $ms) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $ms_addr;
        var $iter=__stackBase__;
        var $e;
        $p_addr=$p;
        $ms_addr=$ms;
        var $0=$p_addr; //@line 5553 "xmlparse.c"
        var $1=$0+20; //@line 5553 "xmlparse.c"
        _hashTableIterInit($iter, $1); //@line 5553 "xmlparse.c"
        var $2=_hashTableIterNext($iter); //@line 5555 "xmlparse.c"
        var $3=$2; //@line 5555 "xmlparse.c"
        $e=$3; //@line 5555 "xmlparse.c"
        var $4=($3)==0; //@line 5556 "xmlparse.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 5556 "xmlparse.c"
      case 1: // $bb1
        var $5=$e; //@line 5558 "xmlparse.c"
        var $6=$5+16; //@line 5558 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5558 "xmlparse.c"
        var $8=($7)!=0; //@line 5558 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5558 "xmlparse.c"
      case 2: // $bb2
        var $9=$ms_addr; //@line 5559 "xmlparse.c"
        var $10=$9+8; //@line 5559 "xmlparse.c"
        var $11=HEAP[$10]; //@line 5559 "xmlparse.c"
        var $12=$e; //@line 5559 "xmlparse.c"
        var $13=$12+20; //@line 5559 "xmlparse.c"
        var $14=HEAP[$13]; //@line 5559 "xmlparse.c"
        var $15=$14; //@line 5559 "xmlparse.c"
        FUNCTION_TABLE[$11]($15); //@line 5559 "xmlparse.c"
        __label__ = 3; break; //@line 5559 "xmlparse.c"
      case 3: // $bb_backedge
        var $16=_hashTableIterNext($iter); //@line 5555 "xmlparse.c"
        var $17=$16; //@line 5555 "xmlparse.c"
        $e=$17; //@line 5555 "xmlparse.c"
        var $18=($17)==0; //@line 5556 "xmlparse.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 5556 "xmlparse.c"
      case 4: // $bb4
        var $19=$p_addr; //@line 5561 "xmlparse.c"
        var $20=$19; //@line 5561 "xmlparse.c"
        _hashTableClear($20); //@line 5561 "xmlparse.c"
        var $21=$p_addr; //@line 5563 "xmlparse.c"
        var $22=$21+131; //@line 5563 "xmlparse.c"
        HEAP[$22]=0; //@line 5563 "xmlparse.c"
        var $23=$p_addr; //@line 5564 "xmlparse.c"
        var $24=$23+132; //@line 5564 "xmlparse.c"
        _hashTableClear($24); //@line 5564 "xmlparse.c"
        var $25=$p_addr; //@line 5566 "xmlparse.c"
        var $26=$25+20; //@line 5566 "xmlparse.c"
        _hashTableClear($26); //@line 5566 "xmlparse.c"
        var $27=$p_addr; //@line 5567 "xmlparse.c"
        var $28=$27+40; //@line 5567 "xmlparse.c"
        _hashTableClear($28); //@line 5567 "xmlparse.c"
        var $29=$p_addr; //@line 5568 "xmlparse.c"
        var $30=$29+60; //@line 5568 "xmlparse.c"
        _hashTableClear($30); //@line 5568 "xmlparse.c"
        var $31=$p_addr; //@line 5569 "xmlparse.c"
        var $32=$31+80; //@line 5569 "xmlparse.c"
        _poolClear($32); //@line 5569 "xmlparse.c"
        var $33=$p_addr; //@line 5570 "xmlparse.c"
        var $34=$33+104; //@line 5570 "xmlparse.c"
        _poolClear($34); //@line 5570 "xmlparse.c"
        var $35=$p_addr; //@line 5571 "xmlparse.c"
        var $36=$35+152; //@line 5571 "xmlparse.c"
        var $37=$36; //@line 5571 "xmlparse.c"
        HEAP[$37]=0; //@line 5571 "xmlparse.c"
        var $38=$p_addr; //@line 5572 "xmlparse.c"
        var $39=$38+152; //@line 5572 "xmlparse.c"
        var $40=$39+4; //@line 5572 "xmlparse.c"
        HEAP[$40]=0; //@line 5572 "xmlparse.c"
        var $41=$p_addr; //@line 5574 "xmlparse.c"
        var $42=$41+160; //@line 5574 "xmlparse.c"
        HEAP[$42]=0; //@line 5574 "xmlparse.c"
        var $43=$ms_addr; //@line 5576 "xmlparse.c"
        var $44=$43+8; //@line 5576 "xmlparse.c"
        var $45=HEAP[$44]; //@line 5576 "xmlparse.c"
        var $46=$p_addr; //@line 5576 "xmlparse.c"
        var $47=$46+184; //@line 5576 "xmlparse.c"
        var $48=HEAP[$47]; //@line 5576 "xmlparse.c"
        var $49=$48; //@line 5576 "xmlparse.c"
        FUNCTION_TABLE[$45]($49); //@line 5576 "xmlparse.c"
        var $50=$p_addr; //@line 5577 "xmlparse.c"
        var $51=$50+184; //@line 5577 "xmlparse.c"
        HEAP[$51]=0; //@line 5577 "xmlparse.c"
        var $52=$ms_addr; //@line 5578 "xmlparse.c"
        var $53=$52+8; //@line 5578 "xmlparse.c"
        var $54=HEAP[$53]; //@line 5578 "xmlparse.c"
        var $55=$p_addr; //@line 5578 "xmlparse.c"
        var $56=$55+164; //@line 5578 "xmlparse.c"
        var $57=HEAP[$56]; //@line 5578 "xmlparse.c"
        var $58=$57; //@line 5578 "xmlparse.c"
        FUNCTION_TABLE[$54]($58); //@line 5578 "xmlparse.c"
        var $59=$p_addr; //@line 5579 "xmlparse.c"
        var $60=$59+164; //@line 5579 "xmlparse.c"
        HEAP[$60]=0; //@line 5579 "xmlparse.c"
        var $61=$p_addr; //@line 5581 "xmlparse.c"
        var $62=$61+180; //@line 5581 "xmlparse.c"
        HEAP[$62]=0; //@line 5581 "xmlparse.c"
        var $63=$p_addr; //@line 5582 "xmlparse.c"
        var $64=$63+172; //@line 5582 "xmlparse.c"
        HEAP[$64]=0; //@line 5582 "xmlparse.c"
        var $65=$p_addr; //@line 5583 "xmlparse.c"
        var $66=$65+176; //@line 5583 "xmlparse.c"
        HEAP[$66]=0; //@line 5583 "xmlparse.c"
        var $67=$p_addr; //@line 5584 "xmlparse.c"
        var $68=$67+168; //@line 5584 "xmlparse.c"
        HEAP[$68]=0; //@line 5584 "xmlparse.c"
        var $69=$p_addr; //@line 5586 "xmlparse.c"
        var $70=$69+128; //@line 5586 "xmlparse.c"
        HEAP[$70]=1; //@line 5586 "xmlparse.c"
        var $71=$p_addr; //@line 5587 "xmlparse.c"
        var $72=$71+129; //@line 5587 "xmlparse.c"
        HEAP[$72]=0; //@line 5587 "xmlparse.c"
        var $73=$p_addr; //@line 5588 "xmlparse.c"
        var $74=$73+130; //@line 5588 "xmlparse.c"
        HEAP[$74]=0; //@line 5588 "xmlparse.c"
        STACKTOP = __stackBase__;
        return; //@line 5589 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dtdDestroy($p, $isDocEntity, $ms) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $isDocEntity_addr;
        var $ms_addr;
        var $iter=__stackBase__;
        var $e;
        $p_addr=$p;
        $isDocEntity_addr=$isDocEntity;
        $ms_addr=$ms;
        var $0=$p_addr; //@line 5595 "xmlparse.c"
        var $1=$0+20; //@line 5595 "xmlparse.c"
        _hashTableIterInit($iter, $1); //@line 5595 "xmlparse.c"
        var $2=_hashTableIterNext($iter); //@line 5597 "xmlparse.c"
        var $3=$2; //@line 5597 "xmlparse.c"
        $e=$3; //@line 5597 "xmlparse.c"
        var $4=($3)==0; //@line 5598 "xmlparse.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 5598 "xmlparse.c"
      case 1: // $bb1
        var $5=$e; //@line 5600 "xmlparse.c"
        var $6=$5+16; //@line 5600 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5600 "xmlparse.c"
        var $8=($7)!=0; //@line 5600 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5600 "xmlparse.c"
      case 2: // $bb2
        var $9=$ms_addr; //@line 5601 "xmlparse.c"
        var $10=$9+8; //@line 5601 "xmlparse.c"
        var $11=HEAP[$10]; //@line 5601 "xmlparse.c"
        var $12=$e; //@line 5601 "xmlparse.c"
        var $13=$12+20; //@line 5601 "xmlparse.c"
        var $14=HEAP[$13]; //@line 5601 "xmlparse.c"
        var $15=$14; //@line 5601 "xmlparse.c"
        FUNCTION_TABLE[$11]($15); //@line 5601 "xmlparse.c"
        __label__ = 3; break; //@line 5601 "xmlparse.c"
      case 3: // $bb_backedge
        var $16=_hashTableIterNext($iter); //@line 5597 "xmlparse.c"
        var $17=$16; //@line 5597 "xmlparse.c"
        $e=$17; //@line 5597 "xmlparse.c"
        var $18=($17)==0; //@line 5598 "xmlparse.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 5598 "xmlparse.c"
      case 4: // $bb4
        var $19=$p_addr; //@line 5603 "xmlparse.c"
        var $20=$19; //@line 5603 "xmlparse.c"
        _hashTableDestroy($20); //@line 5603 "xmlparse.c"
        var $21=$p_addr; //@line 5605 "xmlparse.c"
        var $22=$21+132; //@line 5605 "xmlparse.c"
        _hashTableDestroy($22); //@line 5605 "xmlparse.c"
        var $23=$p_addr; //@line 5607 "xmlparse.c"
        var $24=$23+20; //@line 5607 "xmlparse.c"
        _hashTableDestroy($24); //@line 5607 "xmlparse.c"
        var $25=$p_addr; //@line 5608 "xmlparse.c"
        var $26=$25+40; //@line 5608 "xmlparse.c"
        _hashTableDestroy($26); //@line 5608 "xmlparse.c"
        var $27=$p_addr; //@line 5609 "xmlparse.c"
        var $28=$27+60; //@line 5609 "xmlparse.c"
        _hashTableDestroy($28); //@line 5609 "xmlparse.c"
        var $29=$p_addr; //@line 5610 "xmlparse.c"
        var $30=$29+80; //@line 5610 "xmlparse.c"
        _poolDestroy($30); //@line 5610 "xmlparse.c"
        var $31=$p_addr; //@line 5611 "xmlparse.c"
        var $32=$31+104; //@line 5611 "xmlparse.c"
        _poolDestroy($32); //@line 5611 "xmlparse.c"
        var $33=$isDocEntity_addr; //@line 5612 "xmlparse.c"
        var $34=($33)!=0; //@line 5612 "xmlparse.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5612 "xmlparse.c"
      case 5: // $bb5
        var $35=$ms_addr; //@line 5613 "xmlparse.c"
        var $36=$35+8; //@line 5613 "xmlparse.c"
        var $37=HEAP[$36]; //@line 5613 "xmlparse.c"
        var $38=$p_addr; //@line 5613 "xmlparse.c"
        var $39=$38+184; //@line 5613 "xmlparse.c"
        var $40=HEAP[$39]; //@line 5613 "xmlparse.c"
        var $41=$40; //@line 5613 "xmlparse.c"
        FUNCTION_TABLE[$37]($41); //@line 5613 "xmlparse.c"
        var $42=$ms_addr; //@line 5614 "xmlparse.c"
        var $43=$42+8; //@line 5614 "xmlparse.c"
        var $44=HEAP[$43]; //@line 5614 "xmlparse.c"
        var $45=$p_addr; //@line 5614 "xmlparse.c"
        var $46=$45+164; //@line 5614 "xmlparse.c"
        var $47=HEAP[$46]; //@line 5614 "xmlparse.c"
        var $48=$47; //@line 5614 "xmlparse.c"
        FUNCTION_TABLE[$44]($48); //@line 5614 "xmlparse.c"
        __label__ = 6; break; //@line 5614 "xmlparse.c"
      case 6: // $bb6
        var $49=$ms_addr; //@line 5616 "xmlparse.c"
        var $50=$49+8; //@line 5616 "xmlparse.c"
        var $51=HEAP[$50]; //@line 5616 "xmlparse.c"
        var $52=$p_addr; //@line 5616 "xmlparse.c"
        var $53=$52; //@line 5616 "xmlparse.c"
        FUNCTION_TABLE[$51]($53); //@line 5616 "xmlparse.c"
        STACKTOP = __stackBase__;
        return; //@line 5617 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dtdCopy($newDtd, $oldDtd, $ms) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $newDtd_addr;
        var $oldDtd_addr;
        var $ms_addr;
        var $retval;
        var $iftmp_296;
        var $0;
        var $iter=__stackBase__;
        var $name;
        var $oldP;
        var $newA;
        var $name8;
        var $oldA;
        var $i;
        var $newE;
        var $name26;
        var $oldE;
        $newDtd_addr=$newDtd;
        $oldDtd_addr=$oldDtd;
        $ms_addr=$ms;
        var $1=$oldDtd_addr; //@line 5629 "xmlparse.c"
        var $2=$1+60; //@line 5629 "xmlparse.c"
        _hashTableIterInit($iter, $2); //@line 5629 "xmlparse.c"
        __label__ = 1; break; //@line 5629 "xmlparse.c"
      case 1: // $bb
        var $3=_hashTableIterNext($iter); //@line 5632 "xmlparse.c"
        var $4=$3; //@line 5632 "xmlparse.c"
        $oldP=$4; //@line 5632 "xmlparse.c"
        var $5=($4)==0; //@line 5633 "xmlparse.c"
        if ($5) { __label__ = 6; break; } else { __label__ = 2; break; } //@line 5633 "xmlparse.c"
      case 2: // $bb1
        var $6=$oldP; //@line 5635 "xmlparse.c"
        var $7=$6; //@line 5635 "xmlparse.c"
        var $8=HEAP[$7]; //@line 5635 "xmlparse.c"
        var $9=$newDtd_addr; //@line 5635 "xmlparse.c"
        var $10=$9+80; //@line 5635 "xmlparse.c"
        var $11=_poolCopyString($10, $8); //@line 5635 "xmlparse.c"
        $name=$11; //@line 5635 "xmlparse.c"
        var $12=$name; //@line 5636 "xmlparse.c"
        var $13=($12)==0; //@line 5636 "xmlparse.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5636 "xmlparse.c"
      case 3: // $bb2
        $0=0; //@line 5637 "xmlparse.c"
        __label__ = 44; break; //@line 5637 "xmlparse.c"
      case 4: // $bb3
        var $14=$newDtd_addr; //@line 5638 "xmlparse.c"
        var $15=$14+60; //@line 5638 "xmlparse.c"
        var $16=$name; //@line 5638 "xmlparse.c"
        var $17=_lookup($15, $16, 8); //@line 5638 "xmlparse.c"
        var $18=($17)==0; //@line 5638 "xmlparse.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 1; break; } //@line 5638 "xmlparse.c"
      case 5: // $bb4
        $0=0; //@line 5639 "xmlparse.c"
        __label__ = 44; break; //@line 5639 "xmlparse.c"
      case 6: // $bb6
        var $19=$oldDtd_addr; //@line 5642 "xmlparse.c"
        var $20=$19+40; //@line 5642 "xmlparse.c"
        _hashTableIterInit($iter, $20); //@line 5642 "xmlparse.c"
        __label__ = 7; break; //@line 5642 "xmlparse.c"
      case 7: // $bb7
        var $21=_hashTableIterNext($iter); //@line 5649 "xmlparse.c"
        var $22=$21; //@line 5649 "xmlparse.c"
        $oldA=$22; //@line 5649 "xmlparse.c"
        var $23=($22)==0; //@line 5651 "xmlparse.c"
        if ($23) { __label__ = 19; break; } else { __label__ = 8; break; } //@line 5651 "xmlparse.c"
      case 8: // $bb9
        var $24=$newDtd_addr; //@line 5654 "xmlparse.c"
        var $25=$24+80; //@line 5654 "xmlparse.c"
        var $26=$25+12; //@line 5654 "xmlparse.c"
        var $27=HEAP[$26]; //@line 5654 "xmlparse.c"
        var $28=$newDtd_addr; //@line 5654 "xmlparse.c"
        var $29=$28+80; //@line 5654 "xmlparse.c"
        var $30=$29+8; //@line 5654 "xmlparse.c"
        var $31=HEAP[$30]; //@line 5654 "xmlparse.c"
        var $32=($27)!=($31); //@line 5654 "xmlparse.c"
        if ($32) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 5654 "xmlparse.c"
      case 9: // $bb10
        var $33=$newDtd_addr; //@line 5654 "xmlparse.c"
        var $34=$33+80; //@line 5654 "xmlparse.c"
        var $35=_poolGrow($34); //@line 5654 "xmlparse.c"
        var $36=($35)!=0; //@line 5654 "xmlparse.c"
        if ($36) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 5654 "xmlparse.c"
      case 10: // $bb14
        $iftmp_296=1; //@line 5654 "xmlparse.c"
        $0=0; //@line 5655 "xmlparse.c"
        __label__ = 44; break; //@line 5655 "xmlparse.c"
      case 11: // $bb15
        var $37=$newDtd_addr; //@line 5654 "xmlparse.c"
        var $38=$37+80; //@line 5654 "xmlparse.c"
        var $39=$38+12; //@line 5654 "xmlparse.c"
        var $40=HEAP[$39]; //@line 5654 "xmlparse.c"
        HEAP[$40]=0; //@line 5654 "xmlparse.c"
        var $41=$40+1; //@line 5654 "xmlparse.c"
        var $42=$newDtd_addr; //@line 5654 "xmlparse.c"
        var $43=$42+80; //@line 5654 "xmlparse.c"
        var $44=$43+12; //@line 5654 "xmlparse.c"
        HEAP[$44]=$41; //@line 5654 "xmlparse.c"
        $iftmp_296=0; //@line 5654 "xmlparse.c"
        var $45=$oldA; //@line 5656 "xmlparse.c"
        var $46=$45; //@line 5656 "xmlparse.c"
        var $47=HEAP[$46]; //@line 5656 "xmlparse.c"
        var $48=$newDtd_addr; //@line 5656 "xmlparse.c"
        var $49=$48+80; //@line 5656 "xmlparse.c"
        var $50=_poolCopyString($49, $47); //@line 5656 "xmlparse.c"
        $name8=$50; //@line 5656 "xmlparse.c"
        var $51=($50)==0; //@line 5657 "xmlparse.c"
        if ($51) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 5657 "xmlparse.c"
      case 12: // $bb16
        $0=0; //@line 5658 "xmlparse.c"
        __label__ = 44; break; //@line 5658 "xmlparse.c"
      case 13: // $bb17
        var $52=$name8; //@line 5659 "xmlparse.c"
        var $53=$52+1; //@line 5659 "xmlparse.c"
        $name8=$53; //@line 5659 "xmlparse.c"
        var $54=$newDtd_addr; //@line 5660 "xmlparse.c"
        var $55=$54+40; //@line 5660 "xmlparse.c"
        var $56=$name8; //@line 5660 "xmlparse.c"
        var $57=_lookup($55, $56, 12); //@line 5660 "xmlparse.c"
        var $58=$57; //@line 5660 "xmlparse.c"
        $newA=$58; //@line 5660 "xmlparse.c"
        var $59=$newA; //@line 5662 "xmlparse.c"
        var $60=($59)==0; //@line 5662 "xmlparse.c"
        if ($60) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5662 "xmlparse.c"
      case 14: // $bb18
        $0=0; //@line 5663 "xmlparse.c"
        __label__ = 44; break; //@line 5663 "xmlparse.c"
      case 15: // $bb19
        var $61=$oldA; //@line 5664 "xmlparse.c"
        var $62=$61+8; //@line 5664 "xmlparse.c"
        var $63=HEAP[$62]; //@line 5664 "xmlparse.c"
        var $64=$newA; //@line 5664 "xmlparse.c"
        var $65=$64+8; //@line 5664 "xmlparse.c"
        HEAP[$65]=$63; //@line 5664 "xmlparse.c"
        var $66=$oldA; //@line 5665 "xmlparse.c"
        var $67=$66+4; //@line 5665 "xmlparse.c"
        var $68=HEAP[$67]; //@line 5665 "xmlparse.c"
        var $69=($68)!=0; //@line 5665 "xmlparse.c"
        if ($69) { __label__ = 16; break; } else { __label__ = 7; break; } //@line 5665 "xmlparse.c"
      case 16: // $bb20
        var $70=$oldA; //@line 5666 "xmlparse.c"
        var $71=$70+9; //@line 5666 "xmlparse.c"
        var $72=HEAP[$71]; //@line 5666 "xmlparse.c"
        var $73=$newA; //@line 5666 "xmlparse.c"
        var $74=$73+9; //@line 5666 "xmlparse.c"
        HEAP[$74]=$72; //@line 5666 "xmlparse.c"
        var $75=$oldA; //@line 5667 "xmlparse.c"
        var $76=$75+4; //@line 5667 "xmlparse.c"
        var $77=HEAP[$76]; //@line 5667 "xmlparse.c"
        var $78=$oldDtd_addr; //@line 5667 "xmlparse.c"
        var $79=$78+152; //@line 5667 "xmlparse.c"
        var $80=($77)==($79); //@line 5667 "xmlparse.c"
        if ($80) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5667 "xmlparse.c"
      case 17: // $bb21
        var $81=$newDtd_addr; //@line 5668 "xmlparse.c"
        var $82=$81+152; //@line 5668 "xmlparse.c"
        var $83=$newA; //@line 5668 "xmlparse.c"
        var $84=$83+4; //@line 5668 "xmlparse.c"
        HEAP[$84]=$82; //@line 5668 "xmlparse.c"
        __label__ = 7; break; //@line 5668 "xmlparse.c"
      case 18: // $bb22
        var $85=$oldA; //@line 5670 "xmlparse.c"
        var $86=$85+4; //@line 5670 "xmlparse.c"
        var $87=HEAP[$86]; //@line 5670 "xmlparse.c"
        var $88=$87; //@line 5670 "xmlparse.c"
        var $89=HEAP[$88]; //@line 5670 "xmlparse.c"
        var $90=$newDtd_addr; //@line 5670 "xmlparse.c"
        var $91=$90+60; //@line 5670 "xmlparse.c"
        var $92=_lookup($91, $89, 0); //@line 5670 "xmlparse.c"
        var $93=$92; //@line 5670 "xmlparse.c"
        var $94=$newA; //@line 5670 "xmlparse.c"
        var $95=$94+4; //@line 5670 "xmlparse.c"
        HEAP[$95]=$93; //@line 5670 "xmlparse.c"
        __label__ = 7; break; //@line 5670 "xmlparse.c"
      case 19: // $bb24
        var $96=$oldDtd_addr; //@line 5677 "xmlparse.c"
        var $97=$96+20; //@line 5677 "xmlparse.c"
        _hashTableIterInit($iter, $97); //@line 5677 "xmlparse.c"
        __label__ = 20; break; //@line 5677 "xmlparse.c"
      case 20: // $bb25
        var $98=_hashTableIterNext($iter); //@line 5683 "xmlparse.c"
        var $99=$98; //@line 5683 "xmlparse.c"
        $oldE=$99; //@line 5683 "xmlparse.c"
        var $100=($99)==0; //@line 5684 "xmlparse.c"
        if ($100) { __label__ = 39; break; } else { __label__ = 21; break; } //@line 5684 "xmlparse.c"
      case 21: // $bb27
        var $101=$oldE; //@line 5686 "xmlparse.c"
        var $102=$101; //@line 5686 "xmlparse.c"
        var $103=HEAP[$102]; //@line 5686 "xmlparse.c"
        var $104=$newDtd_addr; //@line 5686 "xmlparse.c"
        var $105=$104+80; //@line 5686 "xmlparse.c"
        var $106=_poolCopyString($105, $103); //@line 5686 "xmlparse.c"
        $name26=$106; //@line 5686 "xmlparse.c"
        var $107=$name26; //@line 5687 "xmlparse.c"
        var $108=($107)==0; //@line 5687 "xmlparse.c"
        if ($108) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 5687 "xmlparse.c"
      case 22: // $bb28
        $0=0; //@line 5688 "xmlparse.c"
        __label__ = 44; break; //@line 5688 "xmlparse.c"
      case 23: // $bb29
        var $109=$newDtd_addr; //@line 5689 "xmlparse.c"
        var $110=$109+20; //@line 5689 "xmlparse.c"
        var $111=$name26; //@line 5689 "xmlparse.c"
        var $112=_lookup($110, $111, 24); //@line 5689 "xmlparse.c"
        var $113=$112; //@line 5689 "xmlparse.c"
        $newE=$113; //@line 5689 "xmlparse.c"
        var $114=$newE; //@line 5691 "xmlparse.c"
        var $115=($114)==0; //@line 5691 "xmlparse.c"
        if ($115) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 5691 "xmlparse.c"
      case 24: // $bb30
        $0=0; //@line 5692 "xmlparse.c"
        __label__ = 44; break; //@line 5692 "xmlparse.c"
      case 25: // $bb31
        var $116=$oldE; //@line 5693 "xmlparse.c"
        var $117=$116+12; //@line 5693 "xmlparse.c"
        var $118=HEAP[$117]; //@line 5693 "xmlparse.c"
        var $119=($118)!=0; //@line 5693 "xmlparse.c"
        if ($119) { __label__ = 26; break; } else { __label__ = 28; break; } //@line 5693 "xmlparse.c"
      case 26: // $bb32
        var $120=$ms_addr; //@line 5694 "xmlparse.c"
        var $121=$120; //@line 5694 "xmlparse.c"
        var $122=HEAP[$121]; //@line 5694 "xmlparse.c"
        var $123=$oldE; //@line 5694 "xmlparse.c"
        var $124=$123+12; //@line 5694 "xmlparse.c"
        var $125=HEAP[$124]; //@line 5694 "xmlparse.c"
        var $126=($125) * 12; //@line 5694 "xmlparse.c"
        var $127=FUNCTION_TABLE[$122]($126); //@line 5694 "xmlparse.c"
        var $128=$127; //@line 5694 "xmlparse.c"
        var $129=$newE; //@line 5694 "xmlparse.c"
        var $130=$129+20; //@line 5694 "xmlparse.c"
        HEAP[$130]=$128; //@line 5694 "xmlparse.c"
        var $131=$newE; //@line 5696 "xmlparse.c"
        var $132=$131+20; //@line 5696 "xmlparse.c"
        var $133=HEAP[$132]; //@line 5696 "xmlparse.c"
        var $134=($133)==0; //@line 5696 "xmlparse.c"
        if ($134) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 5696 "xmlparse.c"
      case 27: // $bb33
        var $135=$ms_addr; //@line 5697 "xmlparse.c"
        var $136=$135+8; //@line 5697 "xmlparse.c"
        var $137=HEAP[$136]; //@line 5697 "xmlparse.c"
        var $138=$newE; //@line 5697 "xmlparse.c"
        var $139=$138; //@line 5697 "xmlparse.c"
        FUNCTION_TABLE[$137]($139); //@line 5697 "xmlparse.c"
        $0=0; //@line 5698 "xmlparse.c"
        __label__ = 44; break; //@line 5698 "xmlparse.c"
      case 28: // $bb34
        var $140=$oldE; //@line 5701 "xmlparse.c"
        var $141=$140+8; //@line 5701 "xmlparse.c"
        var $142=HEAP[$141]; //@line 5701 "xmlparse.c"
        var $143=($142)!=0; //@line 5701 "xmlparse.c"
        if ($143) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 5701 "xmlparse.c"
      case 29: // $bb35
        var $144=$oldE; //@line 5702 "xmlparse.c"
        var $145=$144+8; //@line 5702 "xmlparse.c"
        var $146=HEAP[$145]; //@line 5702 "xmlparse.c"
        var $147=$146; //@line 5702 "xmlparse.c"
        var $148=HEAP[$147]; //@line 5702 "xmlparse.c"
        var $149=$newDtd_addr; //@line 5702 "xmlparse.c"
        var $150=$149+40; //@line 5702 "xmlparse.c"
        var $151=_lookup($150, $148, 0); //@line 5702 "xmlparse.c"
        var $152=$151; //@line 5702 "xmlparse.c"
        var $153=$newE; //@line 5702 "xmlparse.c"
        var $154=$153+8; //@line 5702 "xmlparse.c"
        HEAP[$154]=$152; //@line 5702 "xmlparse.c"
        __label__ = 30; break; //@line 5702 "xmlparse.c"
      case 30: // $bb36
        var $155=$oldE; //@line 5704 "xmlparse.c"
        var $156=$155+12; //@line 5704 "xmlparse.c"
        var $157=HEAP[$156]; //@line 5704 "xmlparse.c"
        var $158=$newE; //@line 5704 "xmlparse.c"
        var $159=$158+12; //@line 5704 "xmlparse.c"
        HEAP[$159]=$157; //@line 5704 "xmlparse.c"
        var $160=$newE; //@line 5704 "xmlparse.c"
        var $161=$160+12; //@line 5704 "xmlparse.c"
        var $162=HEAP[$161]; //@line 5704 "xmlparse.c"
        var $163=$newE; //@line 5704 "xmlparse.c"
        var $164=$163+16; //@line 5704 "xmlparse.c"
        HEAP[$164]=$162; //@line 5704 "xmlparse.c"
        var $165=$oldE; //@line 5705 "xmlparse.c"
        var $166=$165+4; //@line 5705 "xmlparse.c"
        var $167=HEAP[$166]; //@line 5705 "xmlparse.c"
        var $168=($167)!=0; //@line 5705 "xmlparse.c"
        if ($168) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 5705 "xmlparse.c"
      case 31: // $bb37
        var $169=$oldE; //@line 5706 "xmlparse.c"
        var $170=$169+4; //@line 5706 "xmlparse.c"
        var $171=HEAP[$170]; //@line 5706 "xmlparse.c"
        var $172=$171; //@line 5706 "xmlparse.c"
        var $173=HEAP[$172]; //@line 5706 "xmlparse.c"
        var $174=$newDtd_addr; //@line 5706 "xmlparse.c"
        var $175=$174+60; //@line 5706 "xmlparse.c"
        var $176=_lookup($175, $173, 0); //@line 5706 "xmlparse.c"
        var $177=$176; //@line 5706 "xmlparse.c"
        var $178=$newE; //@line 5706 "xmlparse.c"
        var $179=$178+4; //@line 5706 "xmlparse.c"
        HEAP[$179]=$177; //@line 5706 "xmlparse.c"
        __label__ = 32; break; //@line 5706 "xmlparse.c"
      case 32: // $bb38
        $i=0; //@line 5708 "xmlparse.c"
        __label__ = 38; break; //@line 5708 "xmlparse.c"
      case 33: // $bb39
        var $180=$newE; //@line 5709 "xmlparse.c"
        var $181=$180+20; //@line 5709 "xmlparse.c"
        var $182=HEAP[$181]; //@line 5709 "xmlparse.c"
        var $183=$i; //@line 5709 "xmlparse.c"
        var $184=$182+12*$183; //@line 5709 "xmlparse.c"
        var $185=$oldE; //@line 5709 "xmlparse.c"
        var $186=$185+20; //@line 5709 "xmlparse.c"
        var $187=HEAP[$186]; //@line 5709 "xmlparse.c"
        var $188=$i; //@line 5709 "xmlparse.c"
        var $189=$187+12*$188; //@line 5709 "xmlparse.c"
        var $190=$189; //@line 5709 "xmlparse.c"
        var $191=HEAP[$190]; //@line 5709 "xmlparse.c"
        var $192=$191; //@line 5709 "xmlparse.c"
        var $193=HEAP[$192]; //@line 5709 "xmlparse.c"
        var $194=$newDtd_addr; //@line 5709 "xmlparse.c"
        var $195=$194+40; //@line 5709 "xmlparse.c"
        var $196=_lookup($195, $193, 0); //@line 5709 "xmlparse.c"
        var $197=$196; //@line 5709 "xmlparse.c"
        var $198=$184; //@line 5709 "xmlparse.c"
        HEAP[$198]=$197; //@line 5709 "xmlparse.c"
        var $199=$newE; //@line 5711 "xmlparse.c"
        var $200=$199+20; //@line 5711 "xmlparse.c"
        var $201=HEAP[$200]; //@line 5711 "xmlparse.c"
        var $202=$i; //@line 5711 "xmlparse.c"
        var $203=$201+12*$202; //@line 5711 "xmlparse.c"
        var $204=$oldE; //@line 5711 "xmlparse.c"
        var $205=$204+20; //@line 5711 "xmlparse.c"
        var $206=HEAP[$205]; //@line 5711 "xmlparse.c"
        var $207=$i; //@line 5711 "xmlparse.c"
        var $208=$206+12*$207; //@line 5711 "xmlparse.c"
        var $209=$208+4; //@line 5711 "xmlparse.c"
        var $210=HEAP[$209]; //@line 5711 "xmlparse.c"
        var $211=$203+4; //@line 5711 "xmlparse.c"
        HEAP[$211]=$210; //@line 5711 "xmlparse.c"
        var $212=$oldE; //@line 5712 "xmlparse.c"
        var $213=$212+20; //@line 5712 "xmlparse.c"
        var $214=HEAP[$213]; //@line 5712 "xmlparse.c"
        var $215=$i; //@line 5712 "xmlparse.c"
        var $216=$214+12*$215; //@line 5712 "xmlparse.c"
        var $217=$216+8; //@line 5712 "xmlparse.c"
        var $218=HEAP[$217]; //@line 5712 "xmlparse.c"
        var $219=($218)!=0; //@line 5712 "xmlparse.c"
        var $220=$newE; //@line 5713 "xmlparse.c"
        var $221=$220+20; //@line 5713 "xmlparse.c"
        var $222=HEAP[$221]; //@line 5713 "xmlparse.c"
        var $223=$i; //@line 5713 "xmlparse.c"
        var $224=$222+12*$223; //@line 5713 "xmlparse.c"
        if ($219) { __label__ = 34; break; } else { __label__ = 36; break; } //@line 5712 "xmlparse.c"
      case 34: // $bb40
        var $225=$oldE; //@line 5713 "xmlparse.c"
        var $226=$225+20; //@line 5713 "xmlparse.c"
        var $227=HEAP[$226]; //@line 5713 "xmlparse.c"
        var $228=$i; //@line 5713 "xmlparse.c"
        var $229=$227+12*$228; //@line 5713 "xmlparse.c"
        var $230=$229+8; //@line 5713 "xmlparse.c"
        var $231=HEAP[$230]; //@line 5713 "xmlparse.c"
        var $232=$newDtd_addr; //@line 5713 "xmlparse.c"
        var $233=$232+80; //@line 5713 "xmlparse.c"
        var $234=_poolCopyString($233, $231); //@line 5713 "xmlparse.c"
        var $235=$224+8; //@line 5713 "xmlparse.c"
        HEAP[$235]=$234; //@line 5713 "xmlparse.c"
        var $236=$newE; //@line 5715 "xmlparse.c"
        var $237=$236+20; //@line 5715 "xmlparse.c"
        var $238=HEAP[$237]; //@line 5715 "xmlparse.c"
        var $239=$i; //@line 5715 "xmlparse.c"
        var $240=$238+12*$239; //@line 5715 "xmlparse.c"
        var $241=$240+8; //@line 5715 "xmlparse.c"
        var $242=HEAP[$241]; //@line 5715 "xmlparse.c"
        var $243=($242)==0; //@line 5715 "xmlparse.c"
        if ($243) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 5715 "xmlparse.c"
      case 35: // $bb41
        $0=0; //@line 5716 "xmlparse.c"
        __label__ = 44; break; //@line 5716 "xmlparse.c"
      case 36: // $bb43
        var $244=$224+8; //@line 5719 "xmlparse.c"
        HEAP[$244]=0; //@line 5719 "xmlparse.c"
        __label__ = 37; break; //@line 5719 "xmlparse.c"
      case 37: // $bb44
        var $245=$i; //@line 5708 "xmlparse.c"
        var $246=($245) + 1; //@line 5708 "xmlparse.c"
        $i=$246; //@line 5708 "xmlparse.c"
        __label__ = 38; break; //@line 5708 "xmlparse.c"
      case 38: // $bb45
        var $247=$newE; //@line 5708 "xmlparse.c"
        var $248=$247+12; //@line 5708 "xmlparse.c"
        var $249=HEAP[$248]; //@line 5708 "xmlparse.c"
        var $250=$i; //@line 5708 "xmlparse.c"
        var $251=($249) > ($250); //@line 5708 "xmlparse.c"
        if ($251) { __label__ = 33; break; } else { __label__ = 20; break; } //@line 5708 "xmlparse.c"
      case 39: // $bb47
        var $252=$oldDtd_addr; //@line 5724 "xmlparse.c"
        var $253=$252; //@line 5724 "xmlparse.c"
        var $254=$newDtd_addr; //@line 5724 "xmlparse.c"
        var $255=$254+80; //@line 5724 "xmlparse.c"
        var $256=$newDtd_addr; //@line 5724 "xmlparse.c"
        var $257=$256; //@line 5724 "xmlparse.c"
        var $258=_copyEntityTable($257, $255, $253); //@line 5724 "xmlparse.c"
        var $259=($258)==0; //@line 5724 "xmlparse.c"
        if ($259) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 5724 "xmlparse.c"
      case 40: // $bb48
        $0=0; //@line 5727 "xmlparse.c"
        __label__ = 44; break; //@line 5727 "xmlparse.c"
      case 41: // $bb49
        var $260=$oldDtd_addr; //@line 5730 "xmlparse.c"
        var $261=$260+132; //@line 5730 "xmlparse.c"
        var $262=$newDtd_addr; //@line 5730 "xmlparse.c"
        var $263=$262+80; //@line 5730 "xmlparse.c"
        var $264=$newDtd_addr; //@line 5730 "xmlparse.c"
        var $265=$264+132; //@line 5730 "xmlparse.c"
        var $266=_copyEntityTable($265, $263, $261); //@line 5730 "xmlparse.c"
        var $267=($266)==0; //@line 5730 "xmlparse.c"
        if ($267) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 5730 "xmlparse.c"
      case 42: // $bb50
        $0=0; //@line 5733 "xmlparse.c"
        __label__ = 44; break; //@line 5733 "xmlparse.c"
      case 43: // $bb51
        var $268=$oldDtd_addr; //@line 5734 "xmlparse.c"
        var $269=$268+131; //@line 5734 "xmlparse.c"
        var $270=HEAP[$269]; //@line 5734 "xmlparse.c"
        var $271=$newDtd_addr; //@line 5734 "xmlparse.c"
        var $272=$271+131; //@line 5734 "xmlparse.c"
        HEAP[$272]=$270; //@line 5734 "xmlparse.c"
        var $273=$oldDtd_addr; //@line 5737 "xmlparse.c"
        var $274=$273+128; //@line 5737 "xmlparse.c"
        var $275=HEAP[$274]; //@line 5737 "xmlparse.c"
        var $276=$newDtd_addr; //@line 5737 "xmlparse.c"
        var $277=$276+128; //@line 5737 "xmlparse.c"
        HEAP[$277]=$275; //@line 5737 "xmlparse.c"
        var $278=$oldDtd_addr; //@line 5738 "xmlparse.c"
        var $279=$278+129; //@line 5738 "xmlparse.c"
        var $280=HEAP[$279]; //@line 5738 "xmlparse.c"
        var $281=$newDtd_addr; //@line 5738 "xmlparse.c"
        var $282=$281+129; //@line 5738 "xmlparse.c"
        HEAP[$282]=$280; //@line 5738 "xmlparse.c"
        var $283=$oldDtd_addr; //@line 5739 "xmlparse.c"
        var $284=$283+130; //@line 5739 "xmlparse.c"
        var $285=HEAP[$284]; //@line 5739 "xmlparse.c"
        var $286=$newDtd_addr; //@line 5739 "xmlparse.c"
        var $287=$286+130; //@line 5739 "xmlparse.c"
        HEAP[$287]=$285; //@line 5739 "xmlparse.c"
        var $288=$oldDtd_addr; //@line 5742 "xmlparse.c"
        var $289=$288+160; //@line 5742 "xmlparse.c"
        var $290=HEAP[$289]; //@line 5742 "xmlparse.c"
        var $291=$newDtd_addr; //@line 5742 "xmlparse.c"
        var $292=$291+160; //@line 5742 "xmlparse.c"
        HEAP[$292]=$290; //@line 5742 "xmlparse.c"
        var $293=$oldDtd_addr; //@line 5743 "xmlparse.c"
        var $294=$293+164; //@line 5743 "xmlparse.c"
        var $295=HEAP[$294]; //@line 5743 "xmlparse.c"
        var $296=$newDtd_addr; //@line 5743 "xmlparse.c"
        var $297=$296+164; //@line 5743 "xmlparse.c"
        HEAP[$297]=$295; //@line 5743 "xmlparse.c"
        var $298=$oldDtd_addr; //@line 5744 "xmlparse.c"
        var $299=$298+168; //@line 5744 "xmlparse.c"
        var $300=HEAP[$299]; //@line 5744 "xmlparse.c"
        var $301=$newDtd_addr; //@line 5744 "xmlparse.c"
        var $302=$301+168; //@line 5744 "xmlparse.c"
        HEAP[$302]=$300; //@line 5744 "xmlparse.c"
        var $303=$oldDtd_addr; //@line 5745 "xmlparse.c"
        var $304=$303+172; //@line 5745 "xmlparse.c"
        var $305=HEAP[$304]; //@line 5745 "xmlparse.c"
        var $306=$newDtd_addr; //@line 5745 "xmlparse.c"
        var $307=$306+172; //@line 5745 "xmlparse.c"
        HEAP[$307]=$305; //@line 5745 "xmlparse.c"
        var $308=$oldDtd_addr; //@line 5746 "xmlparse.c"
        var $309=$308+180; //@line 5746 "xmlparse.c"
        var $310=HEAP[$309]; //@line 5746 "xmlparse.c"
        var $311=$newDtd_addr; //@line 5746 "xmlparse.c"
        var $312=$311+180; //@line 5746 "xmlparse.c"
        HEAP[$312]=$310; //@line 5746 "xmlparse.c"
        var $313=$oldDtd_addr; //@line 5747 "xmlparse.c"
        var $314=$313+184; //@line 5747 "xmlparse.c"
        var $315=HEAP[$314]; //@line 5747 "xmlparse.c"
        var $316=$newDtd_addr; //@line 5747 "xmlparse.c"
        var $317=$316+184; //@line 5747 "xmlparse.c"
        HEAP[$317]=$315; //@line 5747 "xmlparse.c"
        $0=1; //@line 5749 "xmlparse.c"
        __label__ = 44; break; //@line 5749 "xmlparse.c"
      case 44: // $bb52
        var $318=$0; //@line 5637 "xmlparse.c"
        $retval=$318; //@line 5637 "xmlparse.c"
        var $retval53=$retval; //@line 5637 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval53; //@line 5637 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _copyEntityTable($newTable, $newPool, $oldTable) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $newTable_addr;
        var $newPool_addr;
        var $oldTable_addr;
        var $retval;
        var $0;
        var $iter=__stackBase__;
        var $cachedOldBase;
        var $cachedNewBase;
        var $newE;
        var $name;
        var $oldE;
        var $tem;
        var $tem20;
        var $tem25;
        $newTable_addr=$newTable;
        $newPool_addr=$newPool;
        $oldTable_addr=$oldTable;
        $cachedOldBase=0; //@line 5758 "xmlparse.c"
        $cachedNewBase=0; //@line 5759 "xmlparse.c"
        var $1=$oldTable_addr; //@line 5761 "xmlparse.c"
        _hashTableIterInit($iter, $1); //@line 5761 "xmlparse.c"
        __label__ = 1; break; //@line 5761 "xmlparse.c"
      case 1: // $bb
        var $2=_hashTableIterNext($iter); //@line 5766 "xmlparse.c"
        var $3=$2; //@line 5766 "xmlparse.c"
        $oldE=$3; //@line 5766 "xmlparse.c"
        var $4=($3)==0; //@line 5767 "xmlparse.c"
        if ($4) { __label__ = 27; break; } else { __label__ = 2; break; } //@line 5767 "xmlparse.c"
      case 2: // $bb1
        var $5=$oldE; //@line 5769 "xmlparse.c"
        var $6=$5; //@line 5769 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5769 "xmlparse.c"
        var $8=$newPool_addr; //@line 5769 "xmlparse.c"
        var $9=_poolCopyString($8, $7); //@line 5769 "xmlparse.c"
        $name=$9; //@line 5769 "xmlparse.c"
        var $10=$name; //@line 5770 "xmlparse.c"
        var $11=($10)==0; //@line 5770 "xmlparse.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5770 "xmlparse.c"
      case 3: // $bb2
        $0=0; //@line 5771 "xmlparse.c"
        __label__ = 28; break; //@line 5771 "xmlparse.c"
      case 4: // $bb3
        var $12=$newTable_addr; //@line 5772 "xmlparse.c"
        var $13=$name; //@line 5772 "xmlparse.c"
        var $14=_lookup($12, $13, 36); //@line 5772 "xmlparse.c"
        var $15=$14; //@line 5772 "xmlparse.c"
        $newE=$15; //@line 5772 "xmlparse.c"
        var $16=$newE; //@line 5773 "xmlparse.c"
        var $17=($16)==0; //@line 5773 "xmlparse.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5773 "xmlparse.c"
      case 5: // $bb4
        $0=0; //@line 5774 "xmlparse.c"
        __label__ = 28; break; //@line 5774 "xmlparse.c"
      case 6: // $bb5
        var $18=$oldE; //@line 5775 "xmlparse.c"
        var $19=$18+16; //@line 5775 "xmlparse.c"
        var $20=HEAP[$19]; //@line 5775 "xmlparse.c"
        var $21=($20)!=0; //@line 5775 "xmlparse.c"
        var $22=$oldE; //@line 5776 "xmlparse.c"
        if ($21) { __label__ = 7; break; } else { __label__ = 19; break; } //@line 5775 "xmlparse.c"
      case 7: // $bb6
        var $23=$22+16; //@line 5776 "xmlparse.c"
        var $24=HEAP[$23]; //@line 5776 "xmlparse.c"
        var $25=$newPool_addr; //@line 5776 "xmlparse.c"
        var $26=_poolCopyString($25, $24); //@line 5776 "xmlparse.c"
        $tem=$26; //@line 5776 "xmlparse.c"
        var $27=$tem; //@line 5777 "xmlparse.c"
        var $28=($27)==0; //@line 5777 "xmlparse.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5777 "xmlparse.c"
      case 8: // $bb7
        $0=0; //@line 5778 "xmlparse.c"
        __label__ = 28; break; //@line 5778 "xmlparse.c"
      case 9: // $bb8
        var $29=$newE; //@line 5779 "xmlparse.c"
        var $30=$29+16; //@line 5779 "xmlparse.c"
        var $31=$tem; //@line 5779 "xmlparse.c"
        HEAP[$30]=$31; //@line 5779 "xmlparse.c"
        var $32=$oldE; //@line 5780 "xmlparse.c"
        var $33=$32+20; //@line 5780 "xmlparse.c"
        var $34=HEAP[$33]; //@line 5780 "xmlparse.c"
        var $35=($34)!=0; //@line 5780 "xmlparse.c"
        if ($35) { __label__ = 10; break; } else { __label__ = 15; break; } //@line 5780 "xmlparse.c"
      case 10: // $bb9
        var $36=$oldE; //@line 5781 "xmlparse.c"
        var $37=$36+20; //@line 5781 "xmlparse.c"
        var $38=HEAP[$37]; //@line 5781 "xmlparse.c"
        var $39=$cachedOldBase; //@line 5781 "xmlparse.c"
        var $40=($38)==($39); //@line 5781 "xmlparse.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5781 "xmlparse.c"
      case 11: // $bb10
        var $41=$newE; //@line 5782 "xmlparse.c"
        var $42=$41+20; //@line 5782 "xmlparse.c"
        var $43=$cachedNewBase; //@line 5782 "xmlparse.c"
        HEAP[$42]=$43; //@line 5782 "xmlparse.c"
        __label__ = 15; break; //@line 5782 "xmlparse.c"
      case 12: // $bb11
        var $44=$oldE; //@line 5784 "xmlparse.c"
        var $45=$44+20; //@line 5784 "xmlparse.c"
        var $46=HEAP[$45]; //@line 5784 "xmlparse.c"
        $cachedOldBase=$46; //@line 5784 "xmlparse.c"
        var $47=$newPool_addr; //@line 5785 "xmlparse.c"
        var $48=$cachedOldBase; //@line 5785 "xmlparse.c"
        var $49=_poolCopyString($47, $48); //@line 5785 "xmlparse.c"
        $tem=$49; //@line 5785 "xmlparse.c"
        var $50=$tem; //@line 5786 "xmlparse.c"
        var $51=($50)==0; //@line 5786 "xmlparse.c"
        if ($51) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5786 "xmlparse.c"
      case 13: // $bb12
        $0=0; //@line 5787 "xmlparse.c"
        __label__ = 28; break; //@line 5787 "xmlparse.c"
      case 14: // $bb13
        var $52=$newE; //@line 5788 "xmlparse.c"
        var $53=$52+20; //@line 5788 "xmlparse.c"
        var $54=$tem; //@line 5788 "xmlparse.c"
        HEAP[$53]=$54; //@line 5788 "xmlparse.c"
        var $55=$newE; //@line 5788 "xmlparse.c"
        var $56=$55+20; //@line 5788 "xmlparse.c"
        var $57=HEAP[$56]; //@line 5788 "xmlparse.c"
        $cachedNewBase=$57; //@line 5788 "xmlparse.c"
        __label__ = 15; break; //@line 5788 "xmlparse.c"
      case 15: // $bb14
        var $58=$oldE; //@line 5791 "xmlparse.c"
        var $59=$58+24; //@line 5791 "xmlparse.c"
        var $60=HEAP[$59]; //@line 5791 "xmlparse.c"
        var $61=($60)!=0; //@line 5791 "xmlparse.c"
        if ($61) { __label__ = 16; break; } else { __label__ = 22; break; } //@line 5791 "xmlparse.c"
      case 16: // $bb15
        var $62=$oldE; //@line 5792 "xmlparse.c"
        var $63=$62+24; //@line 5792 "xmlparse.c"
        var $64=HEAP[$63]; //@line 5792 "xmlparse.c"
        var $65=$newPool_addr; //@line 5792 "xmlparse.c"
        var $66=_poolCopyString($65, $64); //@line 5792 "xmlparse.c"
        $tem=$66; //@line 5792 "xmlparse.c"
        var $67=$tem; //@line 5793 "xmlparse.c"
        var $68=($67)==0; //@line 5793 "xmlparse.c"
        if ($68) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5793 "xmlparse.c"
      case 17: // $bb16
        $0=0; //@line 5794 "xmlparse.c"
        __label__ = 28; break; //@line 5794 "xmlparse.c"
      case 18: // $bb17
        var $69=$newE; //@line 5795 "xmlparse.c"
        var $70=$69+24; //@line 5795 "xmlparse.c"
        var $71=$tem; //@line 5795 "xmlparse.c"
        HEAP[$70]=$71; //@line 5795 "xmlparse.c"
        __label__ = 22; break; //@line 5795 "xmlparse.c"
      case 19: // $bb19
        var $72=$22+8; //@line 5800 "xmlparse.c"
        var $73=HEAP[$72]; //@line 5800 "xmlparse.c"
        var $74=$oldE; //@line 5800 "xmlparse.c"
        var $75=$74+4; //@line 5800 "xmlparse.c"
        var $76=HEAP[$75]; //@line 5800 "xmlparse.c"
        var $77=$newPool_addr; //@line 5800 "xmlparse.c"
        var $78=_poolCopyStringN($77, $76, $73); //@line 5800 "xmlparse.c"
        $tem20=$78; //@line 5800 "xmlparse.c"
        var $79=$tem20; //@line 5801 "xmlparse.c"
        var $80=($79)==0; //@line 5801 "xmlparse.c"
        if ($80) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5801 "xmlparse.c"
      case 20: // $bb21
        $0=0; //@line 5802 "xmlparse.c"
        __label__ = 28; break; //@line 5802 "xmlparse.c"
      case 21: // $bb22
        var $81=$newE; //@line 5803 "xmlparse.c"
        var $82=$81+4; //@line 5803 "xmlparse.c"
        var $83=$tem20; //@line 5803 "xmlparse.c"
        HEAP[$82]=$83; //@line 5803 "xmlparse.c"
        var $84=$oldE; //@line 5804 "xmlparse.c"
        var $85=$84+8; //@line 5804 "xmlparse.c"
        var $86=HEAP[$85]; //@line 5804 "xmlparse.c"
        var $87=$newE; //@line 5804 "xmlparse.c"
        var $88=$87+8; //@line 5804 "xmlparse.c"
        HEAP[$88]=$86; //@line 5804 "xmlparse.c"
        __label__ = 22; break; //@line 5804 "xmlparse.c"
      case 22: // $bb23
        var $89=$oldE; //@line 5806 "xmlparse.c"
        var $90=$89+28; //@line 5806 "xmlparse.c"
        var $91=HEAP[$90]; //@line 5806 "xmlparse.c"
        var $92=($91)!=0; //@line 5806 "xmlparse.c"
        if ($92) { __label__ = 23; break; } else { __label__ = 26; break; } //@line 5806 "xmlparse.c"
      case 23: // $bb24
        var $93=$oldE; //@line 5807 "xmlparse.c"
        var $94=$93+28; //@line 5807 "xmlparse.c"
        var $95=HEAP[$94]; //@line 5807 "xmlparse.c"
        var $96=$newPool_addr; //@line 5807 "xmlparse.c"
        var $97=_poolCopyString($96, $95); //@line 5807 "xmlparse.c"
        $tem25=$97; //@line 5807 "xmlparse.c"
        var $98=$tem25; //@line 5808 "xmlparse.c"
        var $99=($98)==0; //@line 5808 "xmlparse.c"
        if ($99) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 5808 "xmlparse.c"
      case 24: // $bb26
        $0=0; //@line 5809 "xmlparse.c"
        __label__ = 28; break; //@line 5809 "xmlparse.c"
      case 25: // $bb27
        var $100=$newE; //@line 5810 "xmlparse.c"
        var $101=$100+28; //@line 5810 "xmlparse.c"
        var $102=$tem25; //@line 5810 "xmlparse.c"
        HEAP[$101]=$102; //@line 5810 "xmlparse.c"
        __label__ = 26; break; //@line 5810 "xmlparse.c"
      case 26: // $bb28
        var $103=$oldE; //@line 5812 "xmlparse.c"
        var $104=$103+33; //@line 5812 "xmlparse.c"
        var $105=HEAP[$104]; //@line 5812 "xmlparse.c"
        var $106=$newE; //@line 5812 "xmlparse.c"
        var $107=$106+33; //@line 5812 "xmlparse.c"
        HEAP[$107]=$105; //@line 5812 "xmlparse.c"
        var $108=$oldE; //@line 5813 "xmlparse.c"
        var $109=$108+34; //@line 5813 "xmlparse.c"
        var $110=HEAP[$109]; //@line 5813 "xmlparse.c"
        var $111=$newE; //@line 5813 "xmlparse.c"
        var $112=$111+34; //@line 5813 "xmlparse.c"
        HEAP[$112]=$110; //@line 5813 "xmlparse.c"
        __label__ = 1; break; //@line 5813 "xmlparse.c"
      case 27: // $bb29
        $0=1; //@line 5815 "xmlparse.c"
        __label__ = 28; break; //@line 5815 "xmlparse.c"
      case 28: // $bb30
        var $113=$0; //@line 5771 "xmlparse.c"
        $retval=$113; //@line 5771 "xmlparse.c"
        var $retval31=$retval; //@line 5771 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval31; //@line 5771 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _keyeq($s1, $s2) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s1_addr;
        var $s2_addr;
        var $retval;
        var $0;
        $s1_addr=$s1;
        $s2_addr=$s2;
        __label__ = 4; break; //@line 5823 "xmlparse.c"
      case 1: // $bb
        var $1=$s1_addr; //@line 5824 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5824 "xmlparse.c"
        var $3=($2)==0; //@line 5824 "xmlparse.c"
        if ($3) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5824 "xmlparse.c"
      case 2: // $bb1
        $0=1; //@line 5825 "xmlparse.c"
        __label__ = 6; break; //@line 5825 "xmlparse.c"
      case 3: // $bb2
        var $4=$s1_addr; //@line 5823 "xmlparse.c"
        var $5=$4+1; //@line 5823 "xmlparse.c"
        $s1_addr=$5; //@line 5823 "xmlparse.c"
        var $6=$s2_addr; //@line 5823 "xmlparse.c"
        var $7=$6+1; //@line 5823 "xmlparse.c"
        $s2_addr=$7; //@line 5823 "xmlparse.c"
        __label__ = 4; break; //@line 5823 "xmlparse.c"
      case 4: // $bb3
        var $8=$s1_addr; //@line 5823 "xmlparse.c"
        var $9=HEAP[$8]; //@line 5823 "xmlparse.c"
        var $10=$s2_addr; //@line 5823 "xmlparse.c"
        var $11=HEAP[$10]; //@line 5823 "xmlparse.c"
        var $12=($9)==($11); //@line 5823 "xmlparse.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 5823 "xmlparse.c"
      case 5: // $bb4
        $0=0; //@line 5826 "xmlparse.c"
        __label__ = 6; break; //@line 5826 "xmlparse.c"
      case 6: // $bb5
        var $13=$0; //@line 5825 "xmlparse.c"
        $retval=$13; //@line 5825 "xmlparse.c"
        var $retval6=$retval; //@line 5825 "xmlparse.c"
        var $retval67=((($retval6)) & 255); //@line 5825 "xmlparse.c"
        ;
        return $retval67; //@line 5825 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _hash($s) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr;
        var $retval;
        var $0;
        var $h;
        $s_addr=$s;
        $h=0; //@line 5832 "xmlparse.c"
        var $1=$s_addr; //@line 5833 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5833 "xmlparse.c"
        var $3=($2)!=0; //@line 5833 "xmlparse.c"
        var $4=$h; //@line 5834 "xmlparse.c"
        if ($3) { __lastLabel__ = -1; __label__ = 1; break; } else { __lastLabel__ = -1; __label__ = 2; break; } //@line 5833 "xmlparse.c"
      case 1: // $bb
        var $5=__lastLabel__ == 1 ? $16 : ($4);
        var $6=($5) * 1000003; //@line 5834 "xmlparse.c"
        var $7=$s_addr; //@line 5834 "xmlparse.c"
        var $8=HEAP[$7]; //@line 5834 "xmlparse.c"
        var $9=($8); //@line 5834 "xmlparse.c"
        var $10=($9) ^ ($6); //@line 5834 "xmlparse.c"
        $h=$10; //@line 5834 "xmlparse.c"
        var $11=$s_addr; //@line 5834 "xmlparse.c"
        var $12=$11+1; //@line 5834 "xmlparse.c"
        $s_addr=$12; //@line 5834 "xmlparse.c"
        var $13=$s_addr; //@line 5833 "xmlparse.c"
        var $14=HEAP[$13]; //@line 5833 "xmlparse.c"
        var $15=($14)!=0; //@line 5833 "xmlparse.c"
        var $16=$h; //@line 5834 "xmlparse.c"
        if ($15) { __lastLabel__ = 1; __label__ = 1; break; } else { __lastLabel__ = 1; __label__ = 2; break; } //@line 5833 "xmlparse.c"
      case 2: // $bb2
        var $_lcssa=__lastLabel__ == -1 ? $4 : ($16);
        $0=$_lcssa; //@line 5835 "xmlparse.c"
        var $17=$0; //@line 5835 "xmlparse.c"
        $retval=$17; //@line 5835 "xmlparse.c"
        var $retval3=$retval; //@line 5835 "xmlparse.c"
        ;
        return $retval3; //@line 5835 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lookup($table, $name, $createSize) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $table_addr;
        var $name_addr;
        var $createSize_addr;
        var $retval;
        var $iftmp_299;
        var $iftmp_298;
        var $iftmp_297;
        var $0;
        var $i;
        var $tsize;
        var $h;
        var $mask;
        var $step;
        var $newPower;
        var $newSize;
        var $newMask;
        var $tsize19;
        var $newV;
        var $newHash;
        var $j;
        $table_addr=$table;
        $name_addr=$name;
        $createSize_addr=$createSize;
        var $1=$table_addr; //@line 5842 "xmlparse.c"
        var $2=$1+8; //@line 5842 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5842 "xmlparse.c"
        var $4=($3)==0; //@line 5842 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 5842 "xmlparse.c"
      case 1: // $bb
        var $5=$createSize_addr; //@line 5844 "xmlparse.c"
        var $6=($5)==0; //@line 5844 "xmlparse.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5844 "xmlparse.c"
      case 2: // $bb1
        $0=0; //@line 5845 "xmlparse.c"
        __label__ = 41; break; //@line 5845 "xmlparse.c"
      case 3: // $bb2
        var $7=$table_addr; //@line 5846 "xmlparse.c"
        var $8=$7+4; //@line 5846 "xmlparse.c"
        HEAP[$8]=6; //@line 5846 "xmlparse.c"
        var $9=$table_addr; //@line 5848 "xmlparse.c"
        var $10=$9+8; //@line 5848 "xmlparse.c"
        HEAP[$10]=64; //@line 5848 "xmlparse.c"
        var $11=$table_addr; //@line 5849 "xmlparse.c"
        var $12=$11+8; //@line 5849 "xmlparse.c"
        var $13=HEAP[$12]; //@line 5849 "xmlparse.c"
        var $14=($13) * 4; //@line 5849 "xmlparse.c"
        $tsize=$14; //@line 5849 "xmlparse.c"
        var $15=$table_addr; //@line 5850 "xmlparse.c"
        var $16=$15+16; //@line 5850 "xmlparse.c"
        var $17=HEAP[$16]; //@line 5850 "xmlparse.c"
        var $18=$17; //@line 5850 "xmlparse.c"
        var $19=HEAP[$18]; //@line 5850 "xmlparse.c"
        var $20=$tsize; //@line 5850 "xmlparse.c"
        var $21=FUNCTION_TABLE[$19]($20); //@line 5850 "xmlparse.c"
        var $22=$21; //@line 5850 "xmlparse.c"
        var $23=$table_addr; //@line 5850 "xmlparse.c"
        var $24=$23; //@line 5850 "xmlparse.c"
        HEAP[$24]=$22; //@line 5850 "xmlparse.c"
        var $25=$table_addr; //@line 5851 "xmlparse.c"
        var $26=$25; //@line 5851 "xmlparse.c"
        var $27=HEAP[$26]; //@line 5851 "xmlparse.c"
        var $28=($27)==0; //@line 5851 "xmlparse.c"
        var $29=$table_addr; //@line 5852 "xmlparse.c"
        if ($28) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 5851 "xmlparse.c"
      case 4: // $bb3
        var $30=$29+8; //@line 5852 "xmlparse.c"
        HEAP[$30]=0; //@line 5852 "xmlparse.c"
        $0=0; //@line 5853 "xmlparse.c"
        __label__ = 41; break; //@line 5853 "xmlparse.c"
      case 5: // $bb4
        var $31=$29; //@line 5855 "xmlparse.c"
        var $32=HEAP[$31]; //@line 5855 "xmlparse.c"
        var $33=$tsize; //@line 5855 "xmlparse.c"
        var $34=$32; //@line 5855 "xmlparse.c"
        _llvm_memset_p0i8_i32($34, 0, $33, 1, 0); //@line 5855 "xmlparse.c"
        var $35=$name_addr; //@line 5856 "xmlparse.c"
        var $36=_hash($35); //@line 5856 "xmlparse.c"
        var $37=$table_addr; //@line 5856 "xmlparse.c"
        var $38=$37+8; //@line 5856 "xmlparse.c"
        var $39=HEAP[$38]; //@line 5856 "xmlparse.c"
        var $40=($39) - 1; //@line 5856 "xmlparse.c"
        var $41=($40) & ($36); //@line 5856 "xmlparse.c"
        $i=$41; //@line 5856 "xmlparse.c"
        __label__ = 38; break; //@line 5856 "xmlparse.c"
      case 6: // $bb5
        var $42=$name_addr; //@line 5859 "xmlparse.c"
        var $43=_hash($42); //@line 5859 "xmlparse.c"
        $h=$43; //@line 5859 "xmlparse.c"
        var $44=$table_addr; //@line 5860 "xmlparse.c"
        var $45=$44+8; //@line 5860 "xmlparse.c"
        var $46=HEAP[$45]; //@line 5860 "xmlparse.c"
        var $47=($46) - 1; //@line 5860 "xmlparse.c"
        $mask=$47; //@line 5860 "xmlparse.c"
        $step=0; //@line 5861 "xmlparse.c"
        var $48=$h; //@line 5862 "xmlparse.c"
        var $49=$mask; //@line 5862 "xmlparse.c"
        var $50=($49) & ($48); //@line 5862 "xmlparse.c"
        $i=$50; //@line 5862 "xmlparse.c"
        __label__ = 14; break; //@line 5862 "xmlparse.c"
      case 7: // $bb6
        var $51=$table_addr; //@line 5864 "xmlparse.c"
        var $52=$51; //@line 5864 "xmlparse.c"
        var $53=HEAP[$52]; //@line 5864 "xmlparse.c"
        var $54=$i; //@line 5864 "xmlparse.c"
        var $55=$53+4*$54; //@line 5864 "xmlparse.c"
        var $56=HEAP[$55]; //@line 5864 "xmlparse.c"
        var $57=$56; //@line 5864 "xmlparse.c"
        var $58=HEAP[$57]; //@line 5864 "xmlparse.c"
        var $59=$name_addr; //@line 5864 "xmlparse.c"
        var $60=_keyeq($59, $58); //@line 5864 "xmlparse.c"
        var $61=($60)!=0; //@line 5864 "xmlparse.c"
        if ($61) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5864 "xmlparse.c"
      case 8: // $bb7
        var $62=$table_addr; //@line 5865 "xmlparse.c"
        var $63=$62; //@line 5865 "xmlparse.c"
        var $64=HEAP[$63]; //@line 5865 "xmlparse.c"
        var $65=$i; //@line 5865 "xmlparse.c"
        var $66=$64+4*$65; //@line 5865 "xmlparse.c"
        var $67=HEAP[$66]; //@line 5865 "xmlparse.c"
        $0=$67; //@line 5865 "xmlparse.c"
        __label__ = 41; break; //@line 5865 "xmlparse.c"
      case 9: // $bb8
        var $68=$step; //@line 5866 "xmlparse.c"
        var $69=($68)==0; //@line 5866 "xmlparse.c"
        if ($69) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5866 "xmlparse.c"
      case 10: // $bb9
        var $70=$mask; //@line 5867 "xmlparse.c"
        var $not=($70) ^ -1; //@line 5867 "xmlparse.c"
        var $71=$h; //@line 5867 "xmlparse.c"
        var $72=($71) & ($not); //@line 5867 "xmlparse.c"
        var $73=$table_addr; //@line 5867 "xmlparse.c"
        var $74=$73+4; //@line 5867 "xmlparse.c"
        var $75=HEAP[$74]; //@line 5867 "xmlparse.c"
        var $76=($75); //@line 5867 "xmlparse.c"
        var $77=($76) - 1; //@line 5867 "xmlparse.c"
        var $78=($72) >>> ($77); //@line 5867 "xmlparse.c"
        var $79=((($78)) & 255); //@line 5867 "xmlparse.c"
        var $80=$mask; //@line 5867 "xmlparse.c"
        var $81=($80) >>> 2; //@line 5867 "xmlparse.c"
        var $82=((($81)) & 255); //@line 5867 "xmlparse.c"
        var $83=($79) & ($82); //@line 5867 "xmlparse.c"
        var $84=($83) | 1; //@line 5867 "xmlparse.c"
        $step=$84; //@line 5867 "xmlparse.c"
        __label__ = 11; break; //@line 5867 "xmlparse.c"
      case 11: // $bb11
        var $85=$step; //@line 5868 "xmlparse.c"
        var $86=($85); //@line 5868 "xmlparse.c"
        var $87=$i; //@line 5868 "xmlparse.c"
        var $88=($86) > ($87); //@line 5868 "xmlparse.c"
        if ($88) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 5868 "xmlparse.c"
      case 12: // $bb12
        var $89=$table_addr; //@line 5868 "xmlparse.c"
        var $90=$89+8; //@line 5868 "xmlparse.c"
        var $91=HEAP[$90]; //@line 5868 "xmlparse.c"
        var $92=$step; //@line 5868 "xmlparse.c"
        var $93=($92); //@line 5868 "xmlparse.c"
        var $_neg=0 - ($93);
        var $94=$i; //@line 5868 "xmlparse.c"
        var $95=($94) + ($91);
        var $96=($95) + ($_neg); //@line 5868 "xmlparse.c"
        $i=$96; //@line 5868 "xmlparse.c"
        var $97=$i; //@line 5868 "xmlparse.c"
        $iftmp_297=$97; //@line 5868 "xmlparse.c"
        __label__ = 14; break; //@line 5868 "xmlparse.c"
      case 13: // $bb13
        var $98=$step; //@line 5868 "xmlparse.c"
        var $99=($98); //@line 5868 "xmlparse.c"
        var $100=$i; //@line 5868 "xmlparse.c"
        var $101=($100) - ($99); //@line 5868 "xmlparse.c"
        $i=$101; //@line 5868 "xmlparse.c"
        var $102=$i; //@line 5868 "xmlparse.c"
        $iftmp_297=$102; //@line 5868 "xmlparse.c"
        __label__ = 14; break; //@line 5868 "xmlparse.c"
      case 14: // $bb14
        var $103=$table_addr; //@line 5863 "xmlparse.c"
        var $104=$103; //@line 5863 "xmlparse.c"
        var $105=HEAP[$104]; //@line 5863 "xmlparse.c"
        var $106=$i; //@line 5863 "xmlparse.c"
        var $107=$105+4*$106; //@line 5863 "xmlparse.c"
        var $108=HEAP[$107]; //@line 5863 "xmlparse.c"
        var $109=($108)!=0; //@line 5863 "xmlparse.c"
        if ($109) { __label__ = 7; break; } else { __label__ = 15; break; } //@line 5863 "xmlparse.c"
      case 15: // $bb15
        var $110=$createSize_addr; //@line 5870 "xmlparse.c"
        var $111=($110)==0; //@line 5870 "xmlparse.c"
        if ($111) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 5870 "xmlparse.c"
      case 16: // $bb16
        $0=0; //@line 5871 "xmlparse.c"
        __label__ = 41; break; //@line 5871 "xmlparse.c"
      case 17: // $bb17
        var $112=$table_addr; //@line 5874 "xmlparse.c"
        var $113=$112+12; //@line 5874 "xmlparse.c"
        var $114=HEAP[$113]; //@line 5874 "xmlparse.c"
        var $115=$table_addr; //@line 5874 "xmlparse.c"
        var $116=$115+4; //@line 5874 "xmlparse.c"
        var $117=HEAP[$116]; //@line 5874 "xmlparse.c"
        var $118=($117); //@line 5874 "xmlparse.c"
        var $119=($118) - 1; //@line 5874 "xmlparse.c"
        var $120=($114) >>> ($119); //@line 5874 "xmlparse.c"
        var $121=($120)!=0; //@line 5874 "xmlparse.c"
        if ($121) { __label__ = 18; break; } else { __label__ = 38; break; } //@line 5874 "xmlparse.c"
      case 18: // $bb18
        var $122=$table_addr; //@line 5875 "xmlparse.c"
        var $123=$122+4; //@line 5875 "xmlparse.c"
        var $124=HEAP[$123]; //@line 5875 "xmlparse.c"
        var $125=($124) + 1; //@line 5875 "xmlparse.c"
        $newPower=$125; //@line 5875 "xmlparse.c"
        var $126=$newPower; //@line 5876 "xmlparse.c"
        var $127=($126); //@line 5876 "xmlparse.c"
        var $128=1 << ($127); //@line 5876 "xmlparse.c"
        $newSize=$128; //@line 5876 "xmlparse.c"
        var $129=$newSize; //@line 5877 "xmlparse.c"
        var $130=($129) - 1; //@line 5877 "xmlparse.c"
        $newMask=$130; //@line 5877 "xmlparse.c"
        var $131=$newSize; //@line 5878 "xmlparse.c"
        var $132=($131) * 4; //@line 5878 "xmlparse.c"
        $tsize19=$132; //@line 5878 "xmlparse.c"
        var $133=$table_addr; //@line 5879 "xmlparse.c"
        var $134=$133+16; //@line 5879 "xmlparse.c"
        var $135=HEAP[$134]; //@line 5879 "xmlparse.c"
        var $136=$135; //@line 5879 "xmlparse.c"
        var $137=HEAP[$136]; //@line 5879 "xmlparse.c"
        var $138=$tsize19; //@line 5879 "xmlparse.c"
        var $139=FUNCTION_TABLE[$137]($138); //@line 5879 "xmlparse.c"
        var $140=$139; //@line 5879 "xmlparse.c"
        $newV=$140; //@line 5879 "xmlparse.c"
        var $141=$newV; //@line 5880 "xmlparse.c"
        var $142=($141)==0; //@line 5880 "xmlparse.c"
        if ($142) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 5880 "xmlparse.c"
      case 19: // $bb20
        $0=0; //@line 5881 "xmlparse.c"
        __label__ = 41; break; //@line 5881 "xmlparse.c"
      case 20: // $bb21
        var $143=$newV; //@line 5882 "xmlparse.c"
        var $144=$tsize19; //@line 5882 "xmlparse.c"
        var $145=$143; //@line 5882 "xmlparse.c"
        _llvm_memset_p0i8_i32($145, 0, $144, 1, 0); //@line 5882 "xmlparse.c"
        $i=0; //@line 5883 "xmlparse.c"
        var $146=$table_addr; //@line 5883 "xmlparse.c"
        var $147=$146+8; //@line 5883 "xmlparse.c"
        var $148=HEAP[$147]; //@line 5883 "xmlparse.c"
        var $149=$i; //@line 5883 "xmlparse.c"
        var $150=($148) > ($149); //@line 5883 "xmlparse.c"
        var $151=$table_addr; //@line 5884 "xmlparse.c"
        if ($150) { __lastLabel__ = 20; __label__ = 21; break; } else { __lastLabel__ = 20; __label__ = 31; break; } //@line 5883 "xmlparse.c"
      case 21: // $bb22
        var $152=__lastLabel__ == 30 ? $226 : ($151);
        var $153=$152; //@line 5884 "xmlparse.c"
        var $154=HEAP[$153]; //@line 5884 "xmlparse.c"
        var $155=$i; //@line 5884 "xmlparse.c"
        var $156=$154+4*$155; //@line 5884 "xmlparse.c"
        var $157=HEAP[$156]; //@line 5884 "xmlparse.c"
        var $158=($157)!=0; //@line 5884 "xmlparse.c"
        if ($158) { __label__ = 22; break; } else { __label__ = 30; break; } //@line 5884 "xmlparse.c"
      case 22: // $bb23
        var $159=$table_addr; //@line 5885 "xmlparse.c"
        var $160=$159; //@line 5885 "xmlparse.c"
        var $161=HEAP[$160]; //@line 5885 "xmlparse.c"
        var $162=$i; //@line 5885 "xmlparse.c"
        var $163=$161+4*$162; //@line 5885 "xmlparse.c"
        var $164=HEAP[$163]; //@line 5885 "xmlparse.c"
        var $165=$164; //@line 5885 "xmlparse.c"
        var $166=HEAP[$165]; //@line 5885 "xmlparse.c"
        var $167=_hash($166); //@line 5885 "xmlparse.c"
        $newHash=$167; //@line 5885 "xmlparse.c"
        var $168=$newHash; //@line 5886 "xmlparse.c"
        var $169=$newMask; //@line 5886 "xmlparse.c"
        var $170=($169) & ($168); //@line 5886 "xmlparse.c"
        $j=$170; //@line 5886 "xmlparse.c"
        $step=0; //@line 5887 "xmlparse.c"
        var $171=$newV; //@line 5888 "xmlparse.c"
        var $172=$j; //@line 5888 "xmlparse.c"
        var $173=$171+4*$172; //@line 5888 "xmlparse.c"
        var $174=HEAP[$173]; //@line 5888 "xmlparse.c"
        var $175=($174)!=0; //@line 5888 "xmlparse.c"
        if ($175) { __label__ = 23; break; } else { __label__ = 29; break; } //@line 5888 "xmlparse.c"
      case 23: // $bb24
        var $176=$step; //@line 5889 "xmlparse.c"
        var $177=($176)==0; //@line 5889 "xmlparse.c"
        if ($177) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 5889 "xmlparse.c"
      case 24: // $bb25
        var $178=$newMask; //@line 5890 "xmlparse.c"
        var $not26=($178) ^ -1; //@line 5890 "xmlparse.c"
        var $179=$newHash; //@line 5890 "xmlparse.c"
        var $180=($179) & ($not26); //@line 5890 "xmlparse.c"
        var $181=$newPower; //@line 5890 "xmlparse.c"
        var $182=($181); //@line 5890 "xmlparse.c"
        var $183=($182) - 1; //@line 5890 "xmlparse.c"
        var $184=($180) >>> ($183); //@line 5890 "xmlparse.c"
        var $185=((($184)) & 255); //@line 5890 "xmlparse.c"
        var $186=$newMask; //@line 5890 "xmlparse.c"
        var $187=($186) >>> 2; //@line 5890 "xmlparse.c"
        var $188=((($187)) & 255); //@line 5890 "xmlparse.c"
        var $189=($185) & ($188); //@line 5890 "xmlparse.c"
        var $190=($189) | 1; //@line 5890 "xmlparse.c"
        $step=$190; //@line 5890 "xmlparse.c"
        __label__ = 25; break; //@line 5890 "xmlparse.c"
      case 25: // $bb28
        var $191=$step; //@line 5891 "xmlparse.c"
        var $192=($191); //@line 5891 "xmlparse.c"
        var $193=$j; //@line 5891 "xmlparse.c"
        var $194=($192) > ($193); //@line 5891 "xmlparse.c"
        var $195=$step; //@line 5891 "xmlparse.c"
        var $196=($195); //@line 5891 "xmlparse.c"
        if ($194) { __label__ = 26; break; } else { __label__ = 28; break; } //@line 5891 "xmlparse.c"
      case 26: // $bb29
        var $197=$newSize; //@line 5891 "xmlparse.c"
        var $_neg1=0 - ($196);
        var $198=$j; //@line 5891 "xmlparse.c"
        var $199=($197) + ($_neg1);
        var $200=($199) + ($198); //@line 5891 "xmlparse.c"
        $j=$200; //@line 5891 "xmlparse.c"
        var $201=$j; //@line 5891 "xmlparse.c"
        $iftmp_298=$201; //@line 5891 "xmlparse.c"
        __label__ = 27; break; //@line 5891 "xmlparse.c"
      case 27: // $bb31_backedge
        var $202=$newV; //@line 5888 "xmlparse.c"
        var $203=$j; //@line 5888 "xmlparse.c"
        var $204=$202+4*$203; //@line 5888 "xmlparse.c"
        var $205=HEAP[$204]; //@line 5888 "xmlparse.c"
        var $206=($205)!=0; //@line 5888 "xmlparse.c"
        if ($206) { __label__ = 23; break; } else { __label__ = 29; break; } //@line 5888 "xmlparse.c"
      case 28: // $bb30
        var $207=$j; //@line 5891 "xmlparse.c"
        var $208=($207) - ($196); //@line 5891 "xmlparse.c"
        $j=$208; //@line 5891 "xmlparse.c"
        var $209=$j; //@line 5891 "xmlparse.c"
        $iftmp_298=$209; //@line 5891 "xmlparse.c"
        __label__ = 27; break; //@line 5891 "xmlparse.c"
      case 29: // $bb32
        var $210=$table_addr; //@line 5893 "xmlparse.c"
        var $211=$210; //@line 5893 "xmlparse.c"
        var $212=HEAP[$211]; //@line 5893 "xmlparse.c"
        var $213=$i; //@line 5893 "xmlparse.c"
        var $214=$212+4*$213; //@line 5893 "xmlparse.c"
        var $215=HEAP[$214]; //@line 5893 "xmlparse.c"
        var $216=$newV; //@line 5893 "xmlparse.c"
        var $217=$j; //@line 5893 "xmlparse.c"
        var $218=$216+4*$217; //@line 5893 "xmlparse.c"
        HEAP[$218]=$215; //@line 5893 "xmlparse.c"
        __label__ = 30; break; //@line 5893 "xmlparse.c"
      case 30: // $bb33
        var $219=$i; //@line 5883 "xmlparse.c"
        var $220=($219) + 1; //@line 5883 "xmlparse.c"
        $i=$220; //@line 5883 "xmlparse.c"
        var $221=$table_addr; //@line 5883 "xmlparse.c"
        var $222=$221+8; //@line 5883 "xmlparse.c"
        var $223=HEAP[$222]; //@line 5883 "xmlparse.c"
        var $224=$i; //@line 5883 "xmlparse.c"
        var $225=($223) > ($224); //@line 5883 "xmlparse.c"
        var $226=$table_addr; //@line 5884 "xmlparse.c"
        if ($225) { __lastLabel__ = 30; __label__ = 21; break; } else { __lastLabel__ = 30; __label__ = 31; break; } //@line 5883 "xmlparse.c"
      case 31: // $bb35
        var $_lcssa=__lastLabel__ == 20 ? $151 : ($226);
        var $227=$_lcssa+16; //@line 5895 "xmlparse.c"
        var $228=HEAP[$227]; //@line 5895 "xmlparse.c"
        var $229=$228+8; //@line 5895 "xmlparse.c"
        var $230=HEAP[$229]; //@line 5895 "xmlparse.c"
        var $231=$table_addr; //@line 5895 "xmlparse.c"
        var $232=$231; //@line 5895 "xmlparse.c"
        var $233=HEAP[$232]; //@line 5895 "xmlparse.c"
        var $234=$233; //@line 5895 "xmlparse.c"
        FUNCTION_TABLE[$230]($234); //@line 5895 "xmlparse.c"
        var $235=$table_addr; //@line 5896 "xmlparse.c"
        var $236=$235; //@line 5896 "xmlparse.c"
        var $237=$newV; //@line 5896 "xmlparse.c"
        HEAP[$236]=$237; //@line 5896 "xmlparse.c"
        var $238=$table_addr; //@line 5897 "xmlparse.c"
        var $239=$238+4; //@line 5897 "xmlparse.c"
        var $240=$newPower; //@line 5897 "xmlparse.c"
        HEAP[$239]=$240; //@line 5897 "xmlparse.c"
        var $241=$table_addr; //@line 5898 "xmlparse.c"
        var $242=$241+8; //@line 5898 "xmlparse.c"
        var $243=$newSize; //@line 5898 "xmlparse.c"
        HEAP[$242]=$243; //@line 5898 "xmlparse.c"
        var $244=$h; //@line 5899 "xmlparse.c"
        var $245=$newMask; //@line 5899 "xmlparse.c"
        var $246=($245) & ($244); //@line 5899 "xmlparse.c"
        $i=$246; //@line 5899 "xmlparse.c"
        $step=0; //@line 5900 "xmlparse.c"
        var $247=$table_addr; //@line 5901 "xmlparse.c"
        var $248=$247; //@line 5901 "xmlparse.c"
        var $249=HEAP[$248]; //@line 5901 "xmlparse.c"
        var $250=$i; //@line 5901 "xmlparse.c"
        var $251=$249+4*$250; //@line 5901 "xmlparse.c"
        var $252=HEAP[$251]; //@line 5901 "xmlparse.c"
        var $253=($252)!=0; //@line 5901 "xmlparse.c"
        if ($253) { __label__ = 32; break; } else { __label__ = 38; break; } //@line 5901 "xmlparse.c"
      case 32: // $bb36
        var $254=$step; //@line 5902 "xmlparse.c"
        var $255=($254)==0; //@line 5902 "xmlparse.c"
        if ($255) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 5902 "xmlparse.c"
      case 33: // $bb37
        var $256=$newMask; //@line 5903 "xmlparse.c"
        var $not38=($256) ^ -1; //@line 5903 "xmlparse.c"
        var $257=$h; //@line 5903 "xmlparse.c"
        var $258=($257) & ($not38); //@line 5903 "xmlparse.c"
        var $259=$newPower; //@line 5903 "xmlparse.c"
        var $260=($259); //@line 5903 "xmlparse.c"
        var $261=($260) - 1; //@line 5903 "xmlparse.c"
        var $262=($258) >>> ($261); //@line 5903 "xmlparse.c"
        var $263=((($262)) & 255); //@line 5903 "xmlparse.c"
        var $264=$newMask; //@line 5903 "xmlparse.c"
        var $265=($264) >>> 2; //@line 5903 "xmlparse.c"
        var $266=((($265)) & 255); //@line 5903 "xmlparse.c"
        var $267=($263) & ($266); //@line 5903 "xmlparse.c"
        var $268=($267) | 1; //@line 5903 "xmlparse.c"
        $step=$268; //@line 5903 "xmlparse.c"
        __label__ = 34; break; //@line 5903 "xmlparse.c"
      case 34: // $bb40
        var $269=$step; //@line 5904 "xmlparse.c"
        var $270=($269); //@line 5904 "xmlparse.c"
        var $271=$i; //@line 5904 "xmlparse.c"
        var $272=($270) > ($271); //@line 5904 "xmlparse.c"
        var $273=$step; //@line 5904 "xmlparse.c"
        var $274=($273); //@line 5904 "xmlparse.c"
        if ($272) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 5904 "xmlparse.c"
      case 35: // $bb41
        var $275=$newSize; //@line 5904 "xmlparse.c"
        var $_neg2=0 - ($274);
        var $276=$i; //@line 5904 "xmlparse.c"
        var $277=($275) + ($_neg2);
        var $278=($277) + ($276); //@line 5904 "xmlparse.c"
        $i=$278; //@line 5904 "xmlparse.c"
        var $279=$i; //@line 5904 "xmlparse.c"
        $iftmp_299=$279; //@line 5904 "xmlparse.c"
        __label__ = 36; break; //@line 5904 "xmlparse.c"
      case 36: // $bb43_backedge
        var $280=$table_addr; //@line 5901 "xmlparse.c"
        var $281=$280; //@line 5901 "xmlparse.c"
        var $282=HEAP[$281]; //@line 5901 "xmlparse.c"
        var $283=$i; //@line 5901 "xmlparse.c"
        var $284=$282+4*$283; //@line 5901 "xmlparse.c"
        var $285=HEAP[$284]; //@line 5901 "xmlparse.c"
        var $286=($285)!=0; //@line 5901 "xmlparse.c"
        if ($286) { __label__ = 32; break; } else { __label__ = 38; break; } //@line 5901 "xmlparse.c"
      case 37: // $bb42
        var $287=$i; //@line 5904 "xmlparse.c"
        var $288=($287) - ($274); //@line 5904 "xmlparse.c"
        $i=$288; //@line 5904 "xmlparse.c"
        var $289=$i; //@line 5904 "xmlparse.c"
        $iftmp_299=$289; //@line 5904 "xmlparse.c"
        __label__ = 36; break; //@line 5904 "xmlparse.c"
      case 38: // $bb44
        var $290=$table_addr; //@line 5908 "xmlparse.c"
        var $291=$290; //@line 5908 "xmlparse.c"
        var $292=HEAP[$291]; //@line 5908 "xmlparse.c"
        var $293=$table_addr; //@line 5908 "xmlparse.c"
        var $294=$293+16; //@line 5908 "xmlparse.c"
        var $295=HEAP[$294]; //@line 5908 "xmlparse.c"
        var $296=$295; //@line 5908 "xmlparse.c"
        var $297=HEAP[$296]; //@line 5908 "xmlparse.c"
        var $298=$createSize_addr; //@line 5908 "xmlparse.c"
        var $299=FUNCTION_TABLE[$297]($298); //@line 5908 "xmlparse.c"
        var $300=$299; //@line 5908 "xmlparse.c"
        var $301=$i; //@line 5908 "xmlparse.c"
        var $302=$292+4*$301; //@line 5908 "xmlparse.c"
        HEAP[$302]=$300; //@line 5908 "xmlparse.c"
        var $303=$table_addr; //@line 5909 "xmlparse.c"
        var $304=$303; //@line 5909 "xmlparse.c"
        var $305=HEAP[$304]; //@line 5909 "xmlparse.c"
        var $306=$i; //@line 5909 "xmlparse.c"
        var $307=$305+4*$306; //@line 5909 "xmlparse.c"
        var $308=HEAP[$307]; //@line 5909 "xmlparse.c"
        var $309=($308)==0; //@line 5909 "xmlparse.c"
        if ($309) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 5909 "xmlparse.c"
      case 39: // $bb45
        $0=0; //@line 5910 "xmlparse.c"
        __label__ = 41; break; //@line 5910 "xmlparse.c"
      case 40: // $bb46
        var $310=$table_addr; //@line 5911 "xmlparse.c"
        var $311=$310; //@line 5911 "xmlparse.c"
        var $312=HEAP[$311]; //@line 5911 "xmlparse.c"
        var $313=$i; //@line 5911 "xmlparse.c"
        var $314=$312+4*$313; //@line 5911 "xmlparse.c"
        var $315=HEAP[$314]; //@line 5911 "xmlparse.c"
        var $316=$createSize_addr; //@line 5911 "xmlparse.c"
        var $317=$315; //@line 5911 "xmlparse.c"
        _llvm_memset_p0i8_i32($317, 0, $316, 1, 0); //@line 5911 "xmlparse.c"
        var $318=$table_addr; //@line 5912 "xmlparse.c"
        var $319=$318; //@line 5912 "xmlparse.c"
        var $320=HEAP[$319]; //@line 5912 "xmlparse.c"
        var $321=$i; //@line 5912 "xmlparse.c"
        var $322=$320+4*$321; //@line 5912 "xmlparse.c"
        var $323=HEAP[$322]; //@line 5912 "xmlparse.c"
        var $324=$323; //@line 5912 "xmlparse.c"
        var $325=$name_addr; //@line 5912 "xmlparse.c"
        HEAP[$324]=$325; //@line 5912 "xmlparse.c"
        var $326=$table_addr; //@line 5913 "xmlparse.c"
        var $327=$326+12; //@line 5913 "xmlparse.c"
        var $328=HEAP[$327]; //@line 5913 "xmlparse.c"
        var $329=($328) + 1; //@line 5913 "xmlparse.c"
        var $330=$table_addr; //@line 5913 "xmlparse.c"
        var $331=$330+12; //@line 5913 "xmlparse.c"
        HEAP[$331]=$329; //@line 5913 "xmlparse.c"
        var $332=$table_addr; //@line 5914 "xmlparse.c"
        var $333=$332; //@line 5914 "xmlparse.c"
        var $334=HEAP[$333]; //@line 5914 "xmlparse.c"
        var $335=$i; //@line 5914 "xmlparse.c"
        var $336=$334+4*$335; //@line 5914 "xmlparse.c"
        var $337=HEAP[$336]; //@line 5914 "xmlparse.c"
        $0=$337; //@line 5914 "xmlparse.c"
        __label__ = 41; break; //@line 5914 "xmlparse.c"
      case 41: // $bb47
        var $338=$0; //@line 5845 "xmlparse.c"
        $retval=$338; //@line 5845 "xmlparse.c"
        var $retval48=$retval; //@line 5845 "xmlparse.c"
        ;
        return $retval48; //@line 5845 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _hashTableClear($table) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $table_addr;
        var $i;
        $table_addr=$table;
        $i=0; //@line 5921 "xmlparse.c"
        var $0=$table_addr; //@line 5921 "xmlparse.c"
        var $1=$0+8; //@line 5921 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5921 "xmlparse.c"
        var $3=$i; //@line 5921 "xmlparse.c"
        var $4=($2) > ($3); //@line 5921 "xmlparse.c"
        var $5=$table_addr; //@line 5922 "xmlparse.c"
        if ($4) { __lastLabel__ = -1; __label__ = 1; break; } else { __lastLabel__ = -1; __label__ = 2; break; } //@line 5921 "xmlparse.c"
      case 1: // $bb
        var $6=__lastLabel__ == 1 ? $30 : ($5);
        var $7=$6+16; //@line 5922 "xmlparse.c"
        var $8=HEAP[$7]; //@line 5922 "xmlparse.c"
        var $9=$8+8; //@line 5922 "xmlparse.c"
        var $10=HEAP[$9]; //@line 5922 "xmlparse.c"
        var $11=$table_addr; //@line 5922 "xmlparse.c"
        var $12=$11; //@line 5922 "xmlparse.c"
        var $13=HEAP[$12]; //@line 5922 "xmlparse.c"
        var $14=$i; //@line 5922 "xmlparse.c"
        var $15=$13+4*$14; //@line 5922 "xmlparse.c"
        var $16=HEAP[$15]; //@line 5922 "xmlparse.c"
        var $17=$16; //@line 5922 "xmlparse.c"
        FUNCTION_TABLE[$10]($17); //@line 5922 "xmlparse.c"
        var $18=$table_addr; //@line 5923 "xmlparse.c"
        var $19=$18; //@line 5923 "xmlparse.c"
        var $20=HEAP[$19]; //@line 5923 "xmlparse.c"
        var $21=$i; //@line 5923 "xmlparse.c"
        var $22=$20+4*$21; //@line 5923 "xmlparse.c"
        HEAP[$22]=0; //@line 5923 "xmlparse.c"
        var $23=$i; //@line 5921 "xmlparse.c"
        var $24=($23) + 1; //@line 5921 "xmlparse.c"
        $i=$24; //@line 5921 "xmlparse.c"
        var $25=$table_addr; //@line 5921 "xmlparse.c"
        var $26=$25+8; //@line 5921 "xmlparse.c"
        var $27=HEAP[$26]; //@line 5921 "xmlparse.c"
        var $28=$i; //@line 5921 "xmlparse.c"
        var $29=($27) > ($28); //@line 5921 "xmlparse.c"
        var $30=$table_addr; //@line 5922 "xmlparse.c"
        if ($29) { __lastLabel__ = 1; __label__ = 1; break; } else { __lastLabel__ = 1; __label__ = 2; break; } //@line 5921 "xmlparse.c"
      case 2: // $bb2
        var $_lcssa=__lastLabel__ == -1 ? $5 : ($30);
        var $31=$_lcssa+12; //@line 5925 "xmlparse.c"
        HEAP[$31]=0; //@line 5925 "xmlparse.c"
        ;
        return; //@line 5926 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _hashTableDestroy($table) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $table_addr;
        var $i;
        $table_addr=$table;
        $i=0; //@line 5932 "xmlparse.c"
        var $0=$table_addr; //@line 5932 "xmlparse.c"
        var $1=$0+8; //@line 5932 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5932 "xmlparse.c"
        var $3=$i; //@line 5932 "xmlparse.c"
        var $4=($2) > ($3); //@line 5932 "xmlparse.c"
        var $5=$table_addr; //@line 5933 "xmlparse.c"
        var $6=$5+16; //@line 5933 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5933 "xmlparse.c"
        var $8=$7+8; //@line 5933 "xmlparse.c"
        var $9=HEAP[$8]; //@line 5933 "xmlparse.c"
        var $10=$table_addr; //@line 5933 "xmlparse.c"
        var $11=$10; //@line 5933 "xmlparse.c"
        var $12=HEAP[$11]; //@line 5933 "xmlparse.c"
        if ($4) { __lastLabel__ = -1; __label__ = 1; break; } else { __lastLabel__ = -1; __label__ = 2; break; } //@line 5932 "xmlparse.c"
      case 1: // $bb
        var $13=__lastLabel__ == 1 ? $33 : ($12);
        var $14=__lastLabel__ == 1 ? $30 : ($9);
        var $15=$i; //@line 5933 "xmlparse.c"
        var $16=$13+4*$15; //@line 5933 "xmlparse.c"
        var $17=HEAP[$16]; //@line 5933 "xmlparse.c"
        var $18=$17; //@line 5933 "xmlparse.c"
        FUNCTION_TABLE[$14]($18); //@line 5933 "xmlparse.c"
        var $19=$i; //@line 5932 "xmlparse.c"
        var $20=($19) + 1; //@line 5932 "xmlparse.c"
        $i=$20; //@line 5932 "xmlparse.c"
        var $21=$table_addr; //@line 5932 "xmlparse.c"
        var $22=$21+8; //@line 5932 "xmlparse.c"
        var $23=HEAP[$22]; //@line 5932 "xmlparse.c"
        var $24=$i; //@line 5932 "xmlparse.c"
        var $25=($23) > ($24); //@line 5932 "xmlparse.c"
        var $26=$table_addr; //@line 5933 "xmlparse.c"
        var $27=$26+16; //@line 5933 "xmlparse.c"
        var $28=HEAP[$27]; //@line 5933 "xmlparse.c"
        var $29=$28+8; //@line 5933 "xmlparse.c"
        var $30=HEAP[$29]; //@line 5933 "xmlparse.c"
        var $31=$table_addr; //@line 5933 "xmlparse.c"
        var $32=$31; //@line 5933 "xmlparse.c"
        var $33=HEAP[$32]; //@line 5933 "xmlparse.c"
        if ($25) { __lastLabel__ = 1; __label__ = 1; break; } else { __lastLabel__ = 1; __label__ = 2; break; } //@line 5932 "xmlparse.c"
      case 2: // $bb2
        var $_lcssa1=__lastLabel__ == -1 ? $12 : ($33);
        var $_lcssa=__lastLabel__ == -1 ? $9 : ($30);
        var $34=$_lcssa1; //@line 5934 "xmlparse.c"
        FUNCTION_TABLE[$_lcssa]($34); //@line 5934 "xmlparse.c"
        ;
        return; //@line 5935 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _hashTableInit($p, $ms) {
    ;
    var __label__;
  
    var $p_addr;
    var $ms_addr;
    $p_addr=$p;
    $ms_addr=$ms;
    var $0=$p_addr; //@line 5940 "xmlparse.c"
    var $1=$0+4; //@line 5940 "xmlparse.c"
    HEAP[$1]=0; //@line 5940 "xmlparse.c"
    var $2=$p_addr; //@line 5941 "xmlparse.c"
    var $3=$2+8; //@line 5941 "xmlparse.c"
    HEAP[$3]=0; //@line 5941 "xmlparse.c"
    var $4=$p_addr; //@line 5942 "xmlparse.c"
    var $5=$4+12; //@line 5942 "xmlparse.c"
    HEAP[$5]=0; //@line 5942 "xmlparse.c"
    var $6=$p_addr; //@line 5943 "xmlparse.c"
    var $7=$6; //@line 5943 "xmlparse.c"
    HEAP[$7]=0; //@line 5943 "xmlparse.c"
    var $8=$p_addr; //@line 5944 "xmlparse.c"
    var $9=$8+16; //@line 5944 "xmlparse.c"
    var $10=$ms_addr; //@line 5944 "xmlparse.c"
    HEAP[$9]=$10; //@line 5944 "xmlparse.c"
    ;
    return; //@line 5945 "xmlparse.c"
  }
  

  function _hashTableIterInit($iter, $table) {
    ;
    var __label__;
  
    var $iter_addr;
    var $table_addr;
    $iter_addr=$iter;
    $table_addr=$table;
    var $0=$table_addr; //@line 5950 "xmlparse.c"
    var $1=$0; //@line 5950 "xmlparse.c"
    var $2=HEAP[$1]; //@line 5950 "xmlparse.c"
    var $3=$iter_addr; //@line 5950 "xmlparse.c"
    var $4=$3; //@line 5950 "xmlparse.c"
    HEAP[$4]=$2; //@line 5950 "xmlparse.c"
    var $5=$iter_addr; //@line 5951 "xmlparse.c"
    var $6=$5; //@line 5951 "xmlparse.c"
    var $7=HEAP[$6]; //@line 5951 "xmlparse.c"
    var $8=$table_addr; //@line 5951 "xmlparse.c"
    var $9=$8+8; //@line 5951 "xmlparse.c"
    var $10=HEAP[$9]; //@line 5951 "xmlparse.c"
    var $11=$7+4*$10; //@line 5951 "xmlparse.c"
    var $12=$iter_addr; //@line 5951 "xmlparse.c"
    var $13=$12+4; //@line 5951 "xmlparse.c"
    HEAP[$13]=$11; //@line 5951 "xmlparse.c"
    ;
    return; //@line 5952 "xmlparse.c"
  }
  

  function _hashTableIterNext($iter) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $iter_addr;
        var $retval;
        var $0;
        var $tem;
        $iter_addr=$iter;
        __label__ = 3; break; //@line 5957 "xmlparse.c"
      case 1: // $bb
        var $1=$iter_addr; //@line 5958 "xmlparse.c"
        var $2=$1; //@line 5958 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5958 "xmlparse.c"
        var $4=HEAP[$3]; //@line 5958 "xmlparse.c"
        $tem=$4; //@line 5958 "xmlparse.c"
        var $5=$3+4; //@line 5958 "xmlparse.c"
        var $6=$iter_addr; //@line 5958 "xmlparse.c"
        var $7=$6; //@line 5958 "xmlparse.c"
        HEAP[$7]=$5; //@line 5958 "xmlparse.c"
        var $8=$tem; //@line 5959 "xmlparse.c"
        var $9=($8)!=0; //@line 5959 "xmlparse.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5959 "xmlparse.c"
      case 2: // $bb1
        var $10=$tem; //@line 5960 "xmlparse.c"
        $0=$10; //@line 5960 "xmlparse.c"
        __label__ = 5; break; //@line 5960 "xmlparse.c"
      case 3: // $bb2
        var $11=$iter_addr; //@line 5957 "xmlparse.c"
        var $12=$11; //@line 5957 "xmlparse.c"
        var $13=HEAP[$12]; //@line 5957 "xmlparse.c"
        var $14=$iter_addr; //@line 5957 "xmlparse.c"
        var $15=$14+4; //@line 5957 "xmlparse.c"
        var $16=HEAP[$15]; //@line 5957 "xmlparse.c"
        var $17=($13)!=($16); //@line 5957 "xmlparse.c"
        if ($17) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 5957 "xmlparse.c"
      case 4: // $bb3
        $0=0; //@line 5962 "xmlparse.c"
        __label__ = 5; break; //@line 5962 "xmlparse.c"
      case 5: // $bb4
        var $18=$0; //@line 5960 "xmlparse.c"
        $retval=$18; //@line 5960 "xmlparse.c"
        var $retval5=$retval; //@line 5960 "xmlparse.c"
        ;
        return $retval5; //@line 5960 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolInit($pool, $ms) {
    ;
    var __label__;
  
    var $pool_addr;
    var $ms_addr;
    $pool_addr=$pool;
    $ms_addr=$ms;
    var $0=$pool_addr; //@line 5968 "xmlparse.c"
    var $1=$0; //@line 5968 "xmlparse.c"
    HEAP[$1]=0; //@line 5968 "xmlparse.c"
    var $2=$pool_addr; //@line 5969 "xmlparse.c"
    var $3=$2+4; //@line 5969 "xmlparse.c"
    HEAP[$3]=0; //@line 5969 "xmlparse.c"
    var $4=$pool_addr; //@line 5970 "xmlparse.c"
    var $5=$4+16; //@line 5970 "xmlparse.c"
    HEAP[$5]=0; //@line 5970 "xmlparse.c"
    var $6=$pool_addr; //@line 5971 "xmlparse.c"
    var $7=$6+12; //@line 5971 "xmlparse.c"
    HEAP[$7]=0; //@line 5971 "xmlparse.c"
    var $8=$pool_addr; //@line 5972 "xmlparse.c"
    var $9=$8+8; //@line 5972 "xmlparse.c"
    HEAP[$9]=0; //@line 5972 "xmlparse.c"
    var $10=$pool_addr; //@line 5973 "xmlparse.c"
    var $11=$10+20; //@line 5973 "xmlparse.c"
    var $12=$ms_addr; //@line 5973 "xmlparse.c"
    HEAP[$11]=$12; //@line 5973 "xmlparse.c"
    ;
    return; //@line 5974 "xmlparse.c"
  }
  

  function _poolClear($pool) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr;
        var $p;
        var $tem;
        $pool_addr=$pool;
        var $0=$pool_addr; //@line 5979 "xmlparse.c"
        var $1=$0+4; //@line 5979 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5979 "xmlparse.c"
        var $3=($2)==0; //@line 5979 "xmlparse.c"
        var $4=$pool_addr; //@line 5980 "xmlparse.c"
        var $5=$4; //@line 5980 "xmlparse.c"
        var $6=HEAP[$5]; //@line 5980 "xmlparse.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5979 "xmlparse.c"
      case 1: // $bb
        var $7=$pool_addr; //@line 5980 "xmlparse.c"
        var $8=$7+4; //@line 5980 "xmlparse.c"
        HEAP[$8]=$6; //@line 5980 "xmlparse.c"
        __label__ = 4; break; //@line 5980 "xmlparse.c"
      case 2: // $bb1
        $p=$6; //@line 5982 "xmlparse.c"
        var $9=($6)!=0; //@line 5983 "xmlparse.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5983 "xmlparse.c"
      case 3: // $bb2
        var $10=$p; //@line 5984 "xmlparse.c"
        var $11=$10; //@line 5984 "xmlparse.c"
        var $12=HEAP[$11]; //@line 5984 "xmlparse.c"
        $tem=$12; //@line 5984 "xmlparse.c"
        var $13=$pool_addr; //@line 5985 "xmlparse.c"
        var $14=$13+4; //@line 5985 "xmlparse.c"
        var $15=HEAP[$14]; //@line 5985 "xmlparse.c"
        var $16=$p; //@line 5985 "xmlparse.c"
        var $17=$16; //@line 5985 "xmlparse.c"
        HEAP[$17]=$15; //@line 5985 "xmlparse.c"
        var $18=$pool_addr; //@line 5986 "xmlparse.c"
        var $19=$18+4; //@line 5986 "xmlparse.c"
        var $20=$p; //@line 5986 "xmlparse.c"
        HEAP[$19]=$20; //@line 5986 "xmlparse.c"
        var $21=$tem; //@line 5987 "xmlparse.c"
        $p=$21; //@line 5987 "xmlparse.c"
        var $22=($21)!=0; //@line 5983 "xmlparse.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5983 "xmlparse.c"
      case 4: // $bb4
        var $23=$pool_addr; //@line 5990 "xmlparse.c"
        var $24=$23; //@line 5990 "xmlparse.c"
        HEAP[$24]=0; //@line 5990 "xmlparse.c"
        var $25=$pool_addr; //@line 5991 "xmlparse.c"
        var $26=$25+16; //@line 5991 "xmlparse.c"
        HEAP[$26]=0; //@line 5991 "xmlparse.c"
        var $27=$pool_addr; //@line 5992 "xmlparse.c"
        var $28=$27+12; //@line 5992 "xmlparse.c"
        HEAP[$28]=0; //@line 5992 "xmlparse.c"
        var $29=$pool_addr; //@line 5993 "xmlparse.c"
        var $30=$29+8; //@line 5993 "xmlparse.c"
        HEAP[$30]=0; //@line 5993 "xmlparse.c"
        ;
        return; //@line 5994 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolDestroy($pool) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr;
        var $p;
        var $tem;
        var $tem4;
        $pool_addr=$pool;
        var $0=$pool_addr; //@line 5999 "xmlparse.c"
        var $1=$0; //@line 5999 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5999 "xmlparse.c"
        $p=$2; //@line 5999 "xmlparse.c"
        var $3=($2)!=0; //@line 6000 "xmlparse.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 6000 "xmlparse.c"
      case 1: // $bb
        var $4=$p; //@line 6001 "xmlparse.c"
        var $5=$4; //@line 6001 "xmlparse.c"
        var $6=HEAP[$5]; //@line 6001 "xmlparse.c"
        $tem=$6; //@line 6001 "xmlparse.c"
        var $7=$pool_addr; //@line 6002 "xmlparse.c"
        var $8=$7+20; //@line 6002 "xmlparse.c"
        var $9=HEAP[$8]; //@line 6002 "xmlparse.c"
        var $10=$9+8; //@line 6002 "xmlparse.c"
        var $11=HEAP[$10]; //@line 6002 "xmlparse.c"
        var $12=$p; //@line 6002 "xmlparse.c"
        var $13=$12; //@line 6002 "xmlparse.c"
        FUNCTION_TABLE[$11]($13); //@line 6002 "xmlparse.c"
        var $14=$tem; //@line 6003 "xmlparse.c"
        $p=$14; //@line 6003 "xmlparse.c"
        var $15=($14)!=0; //@line 6000 "xmlparse.c"
        if ($15) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 6000 "xmlparse.c"
      case 2: // $bb2
        var $16=$pool_addr; //@line 6005 "xmlparse.c"
        var $17=$16+4; //@line 6005 "xmlparse.c"
        var $18=HEAP[$17]; //@line 6005 "xmlparse.c"
        $p=$18; //@line 6005 "xmlparse.c"
        var $19=($18)!=0; //@line 6006 "xmlparse.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 6006 "xmlparse.c"
      case 3: // $bb3
        var $20=$p; //@line 6007 "xmlparse.c"
        var $21=$20; //@line 6007 "xmlparse.c"
        var $22=HEAP[$21]; //@line 6007 "xmlparse.c"
        $tem4=$22; //@line 6007 "xmlparse.c"
        var $23=$pool_addr; //@line 6008 "xmlparse.c"
        var $24=$23+20; //@line 6008 "xmlparse.c"
        var $25=HEAP[$24]; //@line 6008 "xmlparse.c"
        var $26=$25+8; //@line 6008 "xmlparse.c"
        var $27=HEAP[$26]; //@line 6008 "xmlparse.c"
        var $28=$p; //@line 6008 "xmlparse.c"
        var $29=$28; //@line 6008 "xmlparse.c"
        FUNCTION_TABLE[$27]($29); //@line 6008 "xmlparse.c"
        var $30=$tem4; //@line 6009 "xmlparse.c"
        $p=$30; //@line 6009 "xmlparse.c"
        var $31=($30)!=0; //@line 6006 "xmlparse.c"
        if ($31) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 6006 "xmlparse.c"
      case 4: // $return
        ;
        return; //@line 6011 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolAppend($pool, $enc, $ptr, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr;
        var $enc_addr;
        var $ptr_addr=__stackBase__;
        var $end_addr;
        var $retval;
        var $0;
        $pool_addr=$pool;
        $enc_addr=$enc;
        HEAP[$ptr_addr]=$ptr;
        $end_addr=$end;
        var $1=$pool_addr; //@line 6017 "xmlparse.c"
        var $2=$1+12; //@line 6017 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6017 "xmlparse.c"
        var $4=($3)==0; //@line 6017 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 6017 "xmlparse.c"
      case 1: // $bb
        var $5=$pool_addr; //@line 6017 "xmlparse.c"
        var $6=_poolGrow($5); //@line 6017 "xmlparse.c"
        var $7=($6)==0; //@line 6017 "xmlparse.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 6017 "xmlparse.c"
      case 2: // $bb1
        $0=0; //@line 6018 "xmlparse.c"
        __label__ = 7; break; //@line 6018 "xmlparse.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 6020 "xmlparse.c"
        var $9=$8+60; //@line 6020 "xmlparse.c"
        var $10=HEAP[$9]; //@line 6020 "xmlparse.c"
        var $11=$pool_addr; //@line 6020 "xmlparse.c"
        var $12=$11+8; //@line 6020 "xmlparse.c"
        var $13=HEAP[$12]; //@line 6020 "xmlparse.c"
        var $14=$pool_addr; //@line 6020 "xmlparse.c"
        var $15=$14+12; //@line 6020 "xmlparse.c"
        var $16=$enc_addr; //@line 6020 "xmlparse.c"
        var $17=$end_addr; //@line 6020 "xmlparse.c"
        FUNCTION_TABLE[$10]($16, $ptr_addr, $17, $15, $13); //@line 6020 "xmlparse.c"
        var $18=HEAP[$ptr_addr]; //@line 6021 "xmlparse.c"
        var $19=$end_addr; //@line 6021 "xmlparse.c"
        var $20=($18)==($19); //@line 6021 "xmlparse.c"
        var $21=$pool_addr; //@line 6026 "xmlparse.c"
        if ($20) { __label__ = 6; break; } else { __label__ = 4; break; } //@line 6021 "xmlparse.c"
      case 4: // $bb3
        var $22=_poolGrow($21); //@line 6023 "xmlparse.c"
        var $23=($22)==0; //@line 6023 "xmlparse.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 3; break; } //@line 6023 "xmlparse.c"
      case 5: // $bb4
        $0=0; //@line 6024 "xmlparse.c"
        __label__ = 7; break; //@line 6024 "xmlparse.c"
      case 6: // $bb6
        var $24=$21+16; //@line 6026 "xmlparse.c"
        var $25=HEAP[$24]; //@line 6026 "xmlparse.c"
        $0=$25; //@line 6026 "xmlparse.c"
        __label__ = 7; break; //@line 6026 "xmlparse.c"
      case 7: // $bb7
        var $26=$0; //@line 6018 "xmlparse.c"
        $retval=$26; //@line 6018 "xmlparse.c"
        var $retval8=$retval; //@line 6018 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 6018 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolCopyString($pool, $s) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr;
        var $s_addr;
        var $retval;
        var $0;
        var $iftmp_301;
        $pool_addr=$pool;
        $s_addr=$s;
        __label__ = 1; break; //@line 6031 "xmlparse.c"
      case 1: // $bb
        var $1=$pool_addr; //@line 6033 "xmlparse.c"
        var $2=$1+12; //@line 6033 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6033 "xmlparse.c"
        var $4=$pool_addr; //@line 6033 "xmlparse.c"
        var $5=$4+8; //@line 6033 "xmlparse.c"
        var $6=HEAP[$5]; //@line 6033 "xmlparse.c"
        var $7=($3)!=($6); //@line 6033 "xmlparse.c"
        if ($7) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 6033 "xmlparse.c"
      case 2: // $bb1
        var $8=$pool_addr; //@line 6033 "xmlparse.c"
        var $9=_poolGrow($8); //@line 6033 "xmlparse.c"
        var $10=($9)!=0; //@line 6033 "xmlparse.c"
        if ($10) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 6033 "xmlparse.c"
      case 3: // $bb5
        $iftmp_301=1; //@line 6033 "xmlparse.c"
        $0=0; //@line 6034 "xmlparse.c"
        __label__ = 6; break; //@line 6034 "xmlparse.c"
      case 4: // $bb6
        var $11=$pool_addr; //@line 6033 "xmlparse.c"
        var $12=$11+12; //@line 6033 "xmlparse.c"
        var $13=HEAP[$12]; //@line 6033 "xmlparse.c"
        var $14=$s_addr; //@line 6033 "xmlparse.c"
        var $15=HEAP[$14]; //@line 6033 "xmlparse.c"
        HEAP[$13]=$15; //@line 6033 "xmlparse.c"
        var $16=$13+1; //@line 6033 "xmlparse.c"
        var $17=$pool_addr; //@line 6033 "xmlparse.c"
        var $18=$17+12; //@line 6033 "xmlparse.c"
        HEAP[$18]=$16; //@line 6033 "xmlparse.c"
        $iftmp_301=0; //@line 6033 "xmlparse.c"
        var $19=$s_addr; //@line 6035 "xmlparse.c"
        var $20=HEAP[$19]; //@line 6035 "xmlparse.c"
        var $21=($20)!=0; //@line 6035 "xmlparse.c"
        var $22=($21); //@line 6035 "xmlparse.c"
        var $23=$s_addr; //@line 6035 "xmlparse.c"
        var $24=$23+1; //@line 6035 "xmlparse.c"
        $s_addr=$24; //@line 6035 "xmlparse.c"
        var $toBool7=($22)!=0; //@line 6035 "xmlparse.c"
        if ($toBool7) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 6035 "xmlparse.c"
      case 5: // $bb8
        var $25=$pool_addr; //@line 6036 "xmlparse.c"
        var $26=$25+16; //@line 6036 "xmlparse.c"
        var $27=HEAP[$26]; //@line 6036 "xmlparse.c"
        $s_addr=$27; //@line 6036 "xmlparse.c"
        var $28=$pool_addr; //@line 6037 "xmlparse.c"
        var $29=$28+12; //@line 6037 "xmlparse.c"
        var $30=HEAP[$29]; //@line 6037 "xmlparse.c"
        var $31=$pool_addr; //@line 6037 "xmlparse.c"
        var $32=$31+16; //@line 6037 "xmlparse.c"
        HEAP[$32]=$30; //@line 6037 "xmlparse.c"
        var $33=$s_addr; //@line 6038 "xmlparse.c"
        $0=$33; //@line 6038 "xmlparse.c"
        __label__ = 6; break; //@line 6038 "xmlparse.c"
      case 6: // $bb9
        var $34=$0; //@line 6034 "xmlparse.c"
        $retval=$34; //@line 6034 "xmlparse.c"
        var $retval10=$retval; //@line 6034 "xmlparse.c"
        ;
        return $retval10; //@line 6034 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolCopyStringN($pool, $s, $n) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $iftmp_302;
        var $0;
        $pool_addr=$pool;
        $s_addr=$s;
        $n_addr=$n;
        var $1=$pool_addr; //@line 6044 "xmlparse.c"
        var $2=$1+12; //@line 6044 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6044 "xmlparse.c"
        var $4=($3)==0; //@line 6044 "xmlparse.c"
        if ($4) { __lastLabel__ = -1; __label__ = 1; break; } else { __lastLabel__ = -1; __label__ = 8; break; } //@line 6044 "xmlparse.c"
      case 1: // $bb
        var $5=$pool_addr; //@line 6044 "xmlparse.c"
        var $6=_poolGrow($5); //@line 6044 "xmlparse.c"
        var $7=($6)==0; //@line 6044 "xmlparse.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 7; break; } //@line 6044 "xmlparse.c"
      case 2: // $bb1
        $0=0; //@line 6045 "xmlparse.c"
        __label__ = 10; break; //@line 6045 "xmlparse.c"
      case 3: // $bb3
        var $8=$31+12; //@line 6047 "xmlparse.c"
        var $9=HEAP[$8]; //@line 6047 "xmlparse.c"
        var $10=$pool_addr; //@line 6047 "xmlparse.c"
        var $11=$10+8; //@line 6047 "xmlparse.c"
        var $12=HEAP[$11]; //@line 6047 "xmlparse.c"
        var $13=($9)!=($12); //@line 6047 "xmlparse.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 4; break; } //@line 6047 "xmlparse.c"
      case 4: // $bb4
        var $14=$pool_addr; //@line 6047 "xmlparse.c"
        var $15=_poolGrow($14); //@line 6047 "xmlparse.c"
        var $16=($15)!=0; //@line 6047 "xmlparse.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 6047 "xmlparse.c"
      case 5: // $bb8
        $iftmp_302=1; //@line 6047 "xmlparse.c"
        $0=0; //@line 6048 "xmlparse.c"
        __label__ = 10; break; //@line 6048 "xmlparse.c"
      case 6: // $bb9
        var $17=$pool_addr; //@line 6047 "xmlparse.c"
        var $18=$17+12; //@line 6047 "xmlparse.c"
        var $19=HEAP[$18]; //@line 6047 "xmlparse.c"
        var $20=$s_addr; //@line 6047 "xmlparse.c"
        var $21=HEAP[$20]; //@line 6047 "xmlparse.c"
        HEAP[$19]=$21; //@line 6047 "xmlparse.c"
        var $22=$19+1; //@line 6047 "xmlparse.c"
        var $23=$pool_addr; //@line 6047 "xmlparse.c"
        var $24=$23+12; //@line 6047 "xmlparse.c"
        HEAP[$24]=$22; //@line 6047 "xmlparse.c"
        $iftmp_302=0; //@line 6047 "xmlparse.c"
        var $25=$n_addr; //@line 6046 "xmlparse.c"
        var $26=($25) - 1; //@line 6046 "xmlparse.c"
        $n_addr=$26; //@line 6046 "xmlparse.c"
        var $27=$s_addr; //@line 6046 "xmlparse.c"
        var $28=$27+1; //@line 6046 "xmlparse.c"
        $s_addr=$28; //@line 6046 "xmlparse.c"
        __lastLabel__ = 6; __label__ = 8; break; //@line 6046 "xmlparse.c"
      case 7: // $bb10thread_pre_split
        var $_pr=$n_addr;
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $bb10
        var $29=__lastLabel__ == 6 ? $26 : (__lastLabel__ == 7 ? $_pr : ($n));
        var $30=($29) > 0; //@line 6046 "xmlparse.c"
        var $31=$pool_addr; //@line 6047 "xmlparse.c"
        if ($30) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 6046 "xmlparse.c"
      case 9: // $bb11
        var $32=$31+16; //@line 6050 "xmlparse.c"
        var $33=HEAP[$32]; //@line 6050 "xmlparse.c"
        $s_addr=$33; //@line 6050 "xmlparse.c"
        var $34=$pool_addr; //@line 6051 "xmlparse.c"
        var $35=$34+12; //@line 6051 "xmlparse.c"
        var $36=HEAP[$35]; //@line 6051 "xmlparse.c"
        var $37=$pool_addr; //@line 6051 "xmlparse.c"
        var $38=$37+16; //@line 6051 "xmlparse.c"
        HEAP[$38]=$36; //@line 6051 "xmlparse.c"
        var $39=$s_addr; //@line 6052 "xmlparse.c"
        $0=$39; //@line 6052 "xmlparse.c"
        __label__ = 10; break; //@line 6052 "xmlparse.c"
      case 10: // $bb12
        var $40=$0; //@line 6045 "xmlparse.c"
        $retval=$40; //@line 6045 "xmlparse.c"
        var $retval13=$retval; //@line 6045 "xmlparse.c"
        ;
        return $retval13; //@line 6045 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolAppendString($pool, $s) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr;
        var $s_addr;
        var $retval;
        var $0;
        var $iftmp_303;
        $pool_addr=$pool;
        $s_addr=$s;
        __label__ = 5; break; //@line 6058 "xmlparse.c"
      case 1: // $bb
        var $1=$23+12; //@line 6059 "xmlparse.c"
        var $2=HEAP[$1]; //@line 6059 "xmlparse.c"
        var $3=$pool_addr; //@line 6059 "xmlparse.c"
        var $4=$3+8; //@line 6059 "xmlparse.c"
        var $5=HEAP[$4]; //@line 6059 "xmlparse.c"
        var $6=($2)!=($5); //@line 6059 "xmlparse.c"
        if ($6) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 6059 "xmlparse.c"
      case 2: // $bb1
        var $7=$pool_addr; //@line 6059 "xmlparse.c"
        var $8=_poolGrow($7); //@line 6059 "xmlparse.c"
        var $9=($8)!=0; //@line 6059 "xmlparse.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 6059 "xmlparse.c"
      case 3: // $bb5
        $iftmp_303=1; //@line 6059 "xmlparse.c"
        $0=0; //@line 6060 "xmlparse.c"
        __label__ = 7; break; //@line 6060 "xmlparse.c"
      case 4: // $bb6
        var $10=$pool_addr; //@line 6059 "xmlparse.c"
        var $11=$10+12; //@line 6059 "xmlparse.c"
        var $12=HEAP[$11]; //@line 6059 "xmlparse.c"
        var $13=$s_addr; //@line 6059 "xmlparse.c"
        var $14=HEAP[$13]; //@line 6059 "xmlparse.c"
        HEAP[$12]=$14; //@line 6059 "xmlparse.c"
        var $15=$12+1; //@line 6059 "xmlparse.c"
        var $16=$pool_addr; //@line 6059 "xmlparse.c"
        var $17=$16+12; //@line 6059 "xmlparse.c"
        HEAP[$17]=$15; //@line 6059 "xmlparse.c"
        $iftmp_303=0; //@line 6059 "xmlparse.c"
        var $18=$s_addr; //@line 6061 "xmlparse.c"
        var $19=$18+1; //@line 6061 "xmlparse.c"
        $s_addr=$19; //@line 6061 "xmlparse.c"
        __label__ = 5; break; //@line 6061 "xmlparse.c"
      case 5: // $bb7
        var $20=$s_addr; //@line 6058 "xmlparse.c"
        var $21=HEAP[$20]; //@line 6058 "xmlparse.c"
        var $22=($21)!=0; //@line 6058 "xmlparse.c"
        var $23=$pool_addr; //@line 6059 "xmlparse.c"
        if ($22) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 6058 "xmlparse.c"
      case 6: // $bb8
        var $24=$23+16; //@line 6063 "xmlparse.c"
        var $25=HEAP[$24]; //@line 6063 "xmlparse.c"
        $0=$25; //@line 6063 "xmlparse.c"
        __label__ = 7; break; //@line 6063 "xmlparse.c"
      case 7: // $bb9
        var $26=$0; //@line 6060 "xmlparse.c"
        $retval=$26; //@line 6060 "xmlparse.c"
        var $retval10=$retval; //@line 6060 "xmlparse.c"
        ;
        return $retval10; //@line 6060 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolStoreString($pool, $enc, $ptr, $end) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr;
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $retval;
        var $0;
        $pool_addr=$pool;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        var $1=$pool_addr; //@line 6070 "xmlparse.c"
        var $2=$enc_addr; //@line 6070 "xmlparse.c"
        var $3=$ptr_addr; //@line 6070 "xmlparse.c"
        var $4=$end_addr; //@line 6070 "xmlparse.c"
        var $5=_poolAppend($1, $2, $3, $4); //@line 6070 "xmlparse.c"
        var $6=($5)==0; //@line 6070 "xmlparse.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 6070 "xmlparse.c"
      case 1: // $bb
        $0=0; //@line 6071 "xmlparse.c"
        __label__ = 6; break; //@line 6071 "xmlparse.c"
      case 2: // $bb1
        var $7=$pool_addr; //@line 6072 "xmlparse.c"
        var $8=$7+12; //@line 6072 "xmlparse.c"
        var $9=HEAP[$8]; //@line 6072 "xmlparse.c"
        var $10=$pool_addr; //@line 6072 "xmlparse.c"
        var $11=$10+8; //@line 6072 "xmlparse.c"
        var $12=HEAP[$11]; //@line 6072 "xmlparse.c"
        var $13=($9)==($12); //@line 6072 "xmlparse.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 6072 "xmlparse.c"
      case 3: // $bb2
        var $14=$pool_addr; //@line 6072 "xmlparse.c"
        var $15=_poolGrow($14); //@line 6072 "xmlparse.c"
        var $16=($15)==0; //@line 6072 "xmlparse.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 6072 "xmlparse.c"
      case 4: // $bb3
        $0=0; //@line 6073 "xmlparse.c"
        __label__ = 6; break; //@line 6073 "xmlparse.c"
      case 5: // $bb4
        var $17=$pool_addr; //@line 6074 "xmlparse.c"
        var $18=$17+12; //@line 6074 "xmlparse.c"
        var $19=HEAP[$18]; //@line 6074 "xmlparse.c"
        HEAP[$19]=0; //@line 6074 "xmlparse.c"
        var $20=$19+1; //@line 6074 "xmlparse.c"
        var $21=$pool_addr; //@line 6074 "xmlparse.c"
        var $22=$21+12; //@line 6074 "xmlparse.c"
        HEAP[$22]=$20; //@line 6074 "xmlparse.c"
        var $23=$pool_addr; //@line 6075 "xmlparse.c"
        var $24=$23+16; //@line 6075 "xmlparse.c"
        var $25=HEAP[$24]; //@line 6075 "xmlparse.c"
        $0=$25; //@line 6075 "xmlparse.c"
        __label__ = 6; break; //@line 6075 "xmlparse.c"
      case 6: // $bb5
        var $26=$0; //@line 6071 "xmlparse.c"
        $retval=$26; //@line 6071 "xmlparse.c"
        var $retval6=$retval; //@line 6071 "xmlparse.c"
        ;
        return $retval6; //@line 6071 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolGrow($pool) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr;
        var $retval;
        var $0;
        var $tem;
        var $blockSize;
        var $tem10;
        var $blockSize11;
        $pool_addr=$pool;
        var $1=$pool_addr; //@line 6081 "xmlparse.c"
        var $2=$1+4; //@line 6081 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6081 "xmlparse.c"
        var $4=($3)!=0; //@line 6081 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 6081 "xmlparse.c"
      case 1: // $bb
        var $5=$pool_addr; //@line 6082 "xmlparse.c"
        var $6=$5+16; //@line 6082 "xmlparse.c"
        var $7=HEAP[$6]; //@line 6082 "xmlparse.c"
        var $8=($7)==0; //@line 6082 "xmlparse.c"
        var $9=$pool_addr; //@line 6083 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 6082 "xmlparse.c"
      case 2: // $bb1
        var $10=$9+4; //@line 6083 "xmlparse.c"
        var $11=HEAP[$10]; //@line 6083 "xmlparse.c"
        var $12=$pool_addr; //@line 6083 "xmlparse.c"
        var $13=$12; //@line 6083 "xmlparse.c"
        HEAP[$13]=$11; //@line 6083 "xmlparse.c"
        var $14=$pool_addr; //@line 6084 "xmlparse.c"
        var $15=$14+4; //@line 6084 "xmlparse.c"
        var $16=HEAP[$15]; //@line 6084 "xmlparse.c"
        var $17=$16; //@line 6084 "xmlparse.c"
        var $18=HEAP[$17]; //@line 6084 "xmlparse.c"
        var $19=$pool_addr; //@line 6084 "xmlparse.c"
        var $20=$19+4; //@line 6084 "xmlparse.c"
        HEAP[$20]=$18; //@line 6084 "xmlparse.c"
        var $21=$pool_addr; //@line 6085 "xmlparse.c"
        var $22=$21; //@line 6085 "xmlparse.c"
        var $23=HEAP[$22]; //@line 6085 "xmlparse.c"
        var $24=$23; //@line 6085 "xmlparse.c"
        HEAP[$24]=0; //@line 6085 "xmlparse.c"
        var $25=$pool_addr; //@line 6086 "xmlparse.c"
        var $26=$25; //@line 6086 "xmlparse.c"
        var $27=HEAP[$26]; //@line 6086 "xmlparse.c"
        var $28=$27+8; //@line 6086 "xmlparse.c"
        var $29=$28; //@line 6086 "xmlparse.c"
        var $30=$pool_addr; //@line 6086 "xmlparse.c"
        var $31=$30+16; //@line 6086 "xmlparse.c"
        HEAP[$31]=$29; //@line 6086 "xmlparse.c"
        var $32=$pool_addr; //@line 6087 "xmlparse.c"
        var $33=$32+16; //@line 6087 "xmlparse.c"
        var $34=HEAP[$33]; //@line 6087 "xmlparse.c"
        var $35=$pool_addr; //@line 6087 "xmlparse.c"
        var $36=$35; //@line 6087 "xmlparse.c"
        var $37=HEAP[$36]; //@line 6087 "xmlparse.c"
        var $38=$37+4; //@line 6087 "xmlparse.c"
        var $39=HEAP[$38]; //@line 6087 "xmlparse.c"
        var $40=$34+$39; //@line 6087 "xmlparse.c"
        var $41=$pool_addr; //@line 6087 "xmlparse.c"
        var $42=$41+8; //@line 6087 "xmlparse.c"
        HEAP[$42]=$40; //@line 6087 "xmlparse.c"
        var $43=$pool_addr; //@line 6088 "xmlparse.c"
        var $44=$43+16; //@line 6088 "xmlparse.c"
        var $45=HEAP[$44]; //@line 6088 "xmlparse.c"
        var $46=$pool_addr; //@line 6088 "xmlparse.c"
        var $47=$46+12; //@line 6088 "xmlparse.c"
        HEAP[$47]=$45; //@line 6088 "xmlparse.c"
        $0=1; //@line 6089 "xmlparse.c"
        __label__ = 19; break; //@line 6089 "xmlparse.c"
      case 3: // $bb2
        var $48=$9+8; //@line 6091 "xmlparse.c"
        var $49=HEAP[$48]; //@line 6091 "xmlparse.c"
        var $50=($49); //@line 6091 "xmlparse.c"
        var $51=$pool_addr; //@line 6091 "xmlparse.c"
        var $52=$51+16; //@line 6091 "xmlparse.c"
        var $53=HEAP[$52]; //@line 6091 "xmlparse.c"
        var $54=($53); //@line 6091 "xmlparse.c"
        var $55=($50) - ($54); //@line 6091 "xmlparse.c"
        var $56=$pool_addr; //@line 6091 "xmlparse.c"
        var $57=$56+4; //@line 6091 "xmlparse.c"
        var $58=HEAP[$57]; //@line 6091 "xmlparse.c"
        var $59=$58+4; //@line 6091 "xmlparse.c"
        var $60=HEAP[$59]; //@line 6091 "xmlparse.c"
        var $61=($55) < ($60); //@line 6091 "xmlparse.c"
        if ($61) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 6091 "xmlparse.c"
      case 4: // $bb3
        var $62=$pool_addr; //@line 6092 "xmlparse.c"
        var $63=$62+4; //@line 6092 "xmlparse.c"
        var $64=HEAP[$63]; //@line 6092 "xmlparse.c"
        var $65=$64; //@line 6092 "xmlparse.c"
        var $66=HEAP[$65]; //@line 6092 "xmlparse.c"
        $tem=$66; //@line 6092 "xmlparse.c"
        var $67=$pool_addr; //@line 6093 "xmlparse.c"
        var $68=$67+4; //@line 6093 "xmlparse.c"
        var $69=HEAP[$68]; //@line 6093 "xmlparse.c"
        var $70=$pool_addr; //@line 6093 "xmlparse.c"
        var $71=$70; //@line 6093 "xmlparse.c"
        var $72=HEAP[$71]; //@line 6093 "xmlparse.c"
        var $73=$69; //@line 6093 "xmlparse.c"
        HEAP[$73]=$72; //@line 6093 "xmlparse.c"
        var $74=$pool_addr; //@line 6094 "xmlparse.c"
        var $75=$74+4; //@line 6094 "xmlparse.c"
        var $76=HEAP[$75]; //@line 6094 "xmlparse.c"
        var $77=$pool_addr; //@line 6094 "xmlparse.c"
        var $78=$77; //@line 6094 "xmlparse.c"
        HEAP[$78]=$76; //@line 6094 "xmlparse.c"
        var $79=$pool_addr; //@line 6095 "xmlparse.c"
        var $80=$79+4; //@line 6095 "xmlparse.c"
        var $81=$tem; //@line 6095 "xmlparse.c"
        HEAP[$80]=$81; //@line 6095 "xmlparse.c"
        var $82=$pool_addr; //@line 6096 "xmlparse.c"
        var $83=$82+8; //@line 6096 "xmlparse.c"
        var $84=HEAP[$83]; //@line 6096 "xmlparse.c"
        var $85=($84); //@line 6096 "xmlparse.c"
        var $86=$pool_addr; //@line 6096 "xmlparse.c"
        var $87=$86+16; //@line 6096 "xmlparse.c"
        var $88=HEAP[$87]; //@line 6096 "xmlparse.c"
        var $89=($88); //@line 6096 "xmlparse.c"
        var $90=($85) - ($89); //@line 6096 "xmlparse.c"
        var $91=$pool_addr; //@line 6096 "xmlparse.c"
        var $92=$91+16; //@line 6096 "xmlparse.c"
        var $93=HEAP[$92]; //@line 6096 "xmlparse.c"
        var $94=$pool_addr; //@line 6096 "xmlparse.c"
        var $95=$94; //@line 6096 "xmlparse.c"
        var $96=HEAP[$95]; //@line 6096 "xmlparse.c"
        var $97=$96+8; //@line 6096 "xmlparse.c"
        var $98=$97; //@line 6096 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($98, $93, $90, 1, 0); //@line 6096 "xmlparse.c"
        var $99=$pool_addr; //@line 6098 "xmlparse.c"
        var $100=$99; //@line 6098 "xmlparse.c"
        var $101=HEAP[$100]; //@line 6098 "xmlparse.c"
        var $102=$101+8; //@line 6098 "xmlparse.c"
        var $103=$102; //@line 6098 "xmlparse.c"
        var $104=$pool_addr; //@line 6098 "xmlparse.c"
        var $105=$104+12; //@line 6098 "xmlparse.c"
        var $106=HEAP[$105]; //@line 6098 "xmlparse.c"
        var $107=($106); //@line 6098 "xmlparse.c"
        var $108=$pool_addr; //@line 6098 "xmlparse.c"
        var $109=$108+16; //@line 6098 "xmlparse.c"
        var $110=HEAP[$109]; //@line 6098 "xmlparse.c"
        var $111=($110); //@line 6098 "xmlparse.c"
        var $112=($107) - ($111); //@line 6098 "xmlparse.c"
        var $113=$103+$112; //@line 6098 "xmlparse.c"
        var $114=$pool_addr; //@line 6098 "xmlparse.c"
        var $115=$114+12; //@line 6098 "xmlparse.c"
        HEAP[$115]=$113; //@line 6098 "xmlparse.c"
        var $116=$pool_addr; //@line 6099 "xmlparse.c"
        var $117=$116; //@line 6099 "xmlparse.c"
        var $118=HEAP[$117]; //@line 6099 "xmlparse.c"
        var $119=$118+8; //@line 6099 "xmlparse.c"
        var $120=$119; //@line 6099 "xmlparse.c"
        var $121=$pool_addr; //@line 6099 "xmlparse.c"
        var $122=$121+16; //@line 6099 "xmlparse.c"
        HEAP[$122]=$120; //@line 6099 "xmlparse.c"
        var $123=$pool_addr; //@line 6100 "xmlparse.c"
        var $124=$123+16; //@line 6100 "xmlparse.c"
        var $125=HEAP[$124]; //@line 6100 "xmlparse.c"
        var $126=$pool_addr; //@line 6100 "xmlparse.c"
        var $127=$126; //@line 6100 "xmlparse.c"
        var $128=HEAP[$127]; //@line 6100 "xmlparse.c"
        var $129=$128+4; //@line 6100 "xmlparse.c"
        var $130=HEAP[$129]; //@line 6100 "xmlparse.c"
        var $131=$125+$130; //@line 6100 "xmlparse.c"
        var $132=$pool_addr; //@line 6100 "xmlparse.c"
        var $133=$132+8; //@line 6100 "xmlparse.c"
        HEAP[$133]=$131; //@line 6100 "xmlparse.c"
        $0=1; //@line 6101 "xmlparse.c"
        __label__ = 19; break; //@line 6101 "xmlparse.c"
      case 5: // $bb4
        var $134=$pool_addr; //@line 6104 "xmlparse.c"
        var $135=$134; //@line 6104 "xmlparse.c"
        var $136=HEAP[$135]; //@line 6104 "xmlparse.c"
        var $137=($136)==0; //@line 6104 "xmlparse.c"
        if ($137) { __label__ = 10; break; } else { __label__ = 6; break; } //@line 6104 "xmlparse.c"
      case 6: // $bb5
        var $138=$pool_addr; //@line 6104 "xmlparse.c"
        var $139=$138+16; //@line 6104 "xmlparse.c"
        var $140=HEAP[$139]; //@line 6104 "xmlparse.c"
        var $141=$pool_addr; //@line 6104 "xmlparse.c"
        var $142=$141; //@line 6104 "xmlparse.c"
        var $143=HEAP[$142]; //@line 6104 "xmlparse.c"
        var $144=$143+8; //@line 6104 "xmlparse.c"
        var $145=$144; //@line 6104 "xmlparse.c"
        var $146=($140)!=($145); //@line 6104 "xmlparse.c"
        if ($146) { __label__ = 10; break; } else { __label__ = 7; break; } //@line 6104 "xmlparse.c"
      case 7: // $bb6
        var $147=$pool_addr; //@line 6105 "xmlparse.c"
        var $148=$147+8; //@line 6105 "xmlparse.c"
        var $149=HEAP[$148]; //@line 6105 "xmlparse.c"
        var $150=($149); //@line 6105 "xmlparse.c"
        var $151=$pool_addr; //@line 6105 "xmlparse.c"
        var $152=$151+16; //@line 6105 "xmlparse.c"
        var $153=HEAP[$152]; //@line 6105 "xmlparse.c"
        var $154=($153); //@line 6105 "xmlparse.c"
        var $155=($150) - ($154); //@line 6105 "xmlparse.c"
        var $156=($155) * 2; //@line 6105 "xmlparse.c"
        $blockSize=$156; //@line 6105 "xmlparse.c"
        var $157=$pool_addr; //@line 6106 "xmlparse.c"
        var $158=$157+20; //@line 6106 "xmlparse.c"
        var $159=HEAP[$158]; //@line 6106 "xmlparse.c"
        var $160=$159+4; //@line 6106 "xmlparse.c"
        var $161=HEAP[$160]; //@line 6106 "xmlparse.c"
        var $162=$blockSize; //@line 6106 "xmlparse.c"
        var $163=($162) + 8; //@line 6106 "xmlparse.c"
        var $164=$pool_addr; //@line 6106 "xmlparse.c"
        var $165=$164; //@line 6106 "xmlparse.c"
        var $166=HEAP[$165]; //@line 6106 "xmlparse.c"
        var $167=$166; //@line 6106 "xmlparse.c"
        var $168=FUNCTION_TABLE[$161]($167, $163); //@line 6106 "xmlparse.c"
        var $169=$168; //@line 6106 "xmlparse.c"
        var $170=$pool_addr; //@line 6106 "xmlparse.c"
        var $171=$170; //@line 6106 "xmlparse.c"
        HEAP[$171]=$169; //@line 6106 "xmlparse.c"
        var $172=$pool_addr; //@line 6110 "xmlparse.c"
        var $173=$172; //@line 6110 "xmlparse.c"
        var $174=HEAP[$173]; //@line 6110 "xmlparse.c"
        var $175=($174)==0; //@line 6110 "xmlparse.c"
        if ($175) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 6110 "xmlparse.c"
      case 8: // $bb7
        $0=0; //@line 6111 "xmlparse.c"
        __label__ = 19; break; //@line 6111 "xmlparse.c"
      case 9: // $bb8
        var $176=$pool_addr; //@line 6112 "xmlparse.c"
        var $177=$176; //@line 6112 "xmlparse.c"
        var $178=HEAP[$177]; //@line 6112 "xmlparse.c"
        var $179=$178+4; //@line 6112 "xmlparse.c"
        var $180=$blockSize; //@line 6112 "xmlparse.c"
        HEAP[$179]=$180; //@line 6112 "xmlparse.c"
        var $181=$pool_addr; //@line 6113 "xmlparse.c"
        var $182=$181; //@line 6113 "xmlparse.c"
        var $183=HEAP[$182]; //@line 6113 "xmlparse.c"
        var $184=$183+8; //@line 6113 "xmlparse.c"
        var $185=$184; //@line 6113 "xmlparse.c"
        var $186=$pool_addr; //@line 6113 "xmlparse.c"
        var $187=$186+12; //@line 6113 "xmlparse.c"
        var $188=HEAP[$187]; //@line 6113 "xmlparse.c"
        var $189=($188); //@line 6113 "xmlparse.c"
        var $190=$pool_addr; //@line 6113 "xmlparse.c"
        var $191=$190+16; //@line 6113 "xmlparse.c"
        var $192=HEAP[$191]; //@line 6113 "xmlparse.c"
        var $193=($192); //@line 6113 "xmlparse.c"
        var $194=($189) - ($193); //@line 6113 "xmlparse.c"
        var $195=$185+$194; //@line 6113 "xmlparse.c"
        var $196=$pool_addr; //@line 6113 "xmlparse.c"
        var $197=$196+12; //@line 6113 "xmlparse.c"
        HEAP[$197]=$195; //@line 6113 "xmlparse.c"
        var $198=$pool_addr; //@line 6114 "xmlparse.c"
        var $199=$198; //@line 6114 "xmlparse.c"
        var $200=HEAP[$199]; //@line 6114 "xmlparse.c"
        var $201=$200+8; //@line 6114 "xmlparse.c"
        var $202=$201; //@line 6114 "xmlparse.c"
        var $203=$pool_addr; //@line 6114 "xmlparse.c"
        var $204=$203+16; //@line 6114 "xmlparse.c"
        HEAP[$204]=$202; //@line 6114 "xmlparse.c"
        var $205=$pool_addr; //@line 6115 "xmlparse.c"
        var $206=$205+16; //@line 6115 "xmlparse.c"
        var $207=HEAP[$206]; //@line 6115 "xmlparse.c"
        var $208=$blockSize; //@line 6115 "xmlparse.c"
        var $209=$207+$208; //@line 6115 "xmlparse.c"
        var $210=$pool_addr; //@line 6115 "xmlparse.c"
        var $211=$210+8; //@line 6115 "xmlparse.c"
        HEAP[$211]=$209; //@line 6115 "xmlparse.c"
        __label__ = 18; break; //@line 6115 "xmlparse.c"
      case 10: // $bb9
        var $212=$pool_addr; //@line 6119 "xmlparse.c"
        var $213=$212+8; //@line 6119 "xmlparse.c"
        var $214=HEAP[$213]; //@line 6119 "xmlparse.c"
        var $215=($214); //@line 6119 "xmlparse.c"
        var $216=$pool_addr; //@line 6119 "xmlparse.c"
        var $217=$216+16; //@line 6119 "xmlparse.c"
        var $218=HEAP[$217]; //@line 6119 "xmlparse.c"
        var $219=($218); //@line 6119 "xmlparse.c"
        var $220=($215) - ($219); //@line 6119 "xmlparse.c"
        $blockSize11=$220; //@line 6119 "xmlparse.c"
        var $221=($220) <= 1023; //@line 6120 "xmlparse.c"
        if ($221) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 6120 "xmlparse.c"
      case 11: // $bb12
        $blockSize11=1024; //@line 6121 "xmlparse.c"
        __label__ = 13; break; //@line 6121 "xmlparse.c"
      case 12: // $bb13
        var $222=$blockSize11; //@line 6123 "xmlparse.c"
        var $223=($222) * 2; //@line 6123 "xmlparse.c"
        $blockSize11=$223; //@line 6123 "xmlparse.c"
        __label__ = 13; break; //@line 6123 "xmlparse.c"
      case 13: // $bb14
        var $224=$pool_addr; //@line 6124 "xmlparse.c"
        var $225=$224+20; //@line 6124 "xmlparse.c"
        var $226=HEAP[$225]; //@line 6124 "xmlparse.c"
        var $227=$226; //@line 6124 "xmlparse.c"
        var $228=HEAP[$227]; //@line 6124 "xmlparse.c"
        var $229=$blockSize11; //@line 6124 "xmlparse.c"
        var $230=($229) + 8; //@line 6124 "xmlparse.c"
        var $231=FUNCTION_TABLE[$228]($230); //@line 6124 "xmlparse.c"
        var $232=$231; //@line 6124 "xmlparse.c"
        $tem10=$232; //@line 6124 "xmlparse.c"
        var $233=($232)==0; //@line 6126 "xmlparse.c"
        if ($233) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 6126 "xmlparse.c"
      case 14: // $bb15
        $0=0; //@line 6127 "xmlparse.c"
        __label__ = 19; break; //@line 6127 "xmlparse.c"
      case 15: // $bb16
        var $234=$tem10; //@line 6128 "xmlparse.c"
        var $235=$234+4; //@line 6128 "xmlparse.c"
        var $236=$blockSize11; //@line 6128 "xmlparse.c"
        HEAP[$235]=$236; //@line 6128 "xmlparse.c"
        var $237=$pool_addr; //@line 6129 "xmlparse.c"
        var $238=$237; //@line 6129 "xmlparse.c"
        var $239=HEAP[$238]; //@line 6129 "xmlparse.c"
        var $240=$tem10; //@line 6129 "xmlparse.c"
        var $241=$240; //@line 6129 "xmlparse.c"
        HEAP[$241]=$239; //@line 6129 "xmlparse.c"
        var $242=$pool_addr; //@line 6130 "xmlparse.c"
        var $243=$242; //@line 6130 "xmlparse.c"
        var $244=$tem10; //@line 6130 "xmlparse.c"
        HEAP[$243]=$244; //@line 6130 "xmlparse.c"
        var $245=$pool_addr; //@line 6131 "xmlparse.c"
        var $246=$245+12; //@line 6131 "xmlparse.c"
        var $247=HEAP[$246]; //@line 6131 "xmlparse.c"
        var $248=$pool_addr; //@line 6131 "xmlparse.c"
        var $249=$248+16; //@line 6131 "xmlparse.c"
        var $250=HEAP[$249]; //@line 6131 "xmlparse.c"
        var $251=($247)!=($250); //@line 6131 "xmlparse.c"
        if ($251) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 6131 "xmlparse.c"
      case 16: // $bb17
        var $252=$pool_addr; //@line 6132 "xmlparse.c"
        var $253=$252+12; //@line 6132 "xmlparse.c"
        var $254=HEAP[$253]; //@line 6132 "xmlparse.c"
        var $255=($254); //@line 6132 "xmlparse.c"
        var $256=$pool_addr; //@line 6132 "xmlparse.c"
        var $257=$256+16; //@line 6132 "xmlparse.c"
        var $258=HEAP[$257]; //@line 6132 "xmlparse.c"
        var $259=($258); //@line 6132 "xmlparse.c"
        var $260=($255) - ($259); //@line 6132 "xmlparse.c"
        var $261=$pool_addr; //@line 6132 "xmlparse.c"
        var $262=$261+16; //@line 6132 "xmlparse.c"
        var $263=HEAP[$262]; //@line 6132 "xmlparse.c"
        var $264=$tem10; //@line 6132 "xmlparse.c"
        var $265=$264+8; //@line 6132 "xmlparse.c"
        var $266=$265; //@line 6132 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($266, $263, $260, 1, 0); //@line 6132 "xmlparse.c"
        __label__ = 17; break; //@line 6132 "xmlparse.c"
      case 17: // $bb18
        var $267=$tem10; //@line 6134 "xmlparse.c"
        var $268=$267+8; //@line 6134 "xmlparse.c"
        var $269=$268; //@line 6134 "xmlparse.c"
        var $270=$pool_addr; //@line 6134 "xmlparse.c"
        var $271=$270+12; //@line 6134 "xmlparse.c"
        var $272=HEAP[$271]; //@line 6134 "xmlparse.c"
        var $273=($272); //@line 6134 "xmlparse.c"
        var $274=$pool_addr; //@line 6134 "xmlparse.c"
        var $275=$274+16; //@line 6134 "xmlparse.c"
        var $276=HEAP[$275]; //@line 6134 "xmlparse.c"
        var $277=($276); //@line 6134 "xmlparse.c"
        var $278=($273) - ($277); //@line 6134 "xmlparse.c"
        var $279=$269+$278; //@line 6134 "xmlparse.c"
        var $280=$pool_addr; //@line 6134 "xmlparse.c"
        var $281=$280+12; //@line 6134 "xmlparse.c"
        HEAP[$281]=$279; //@line 6134 "xmlparse.c"
        var $282=$tem10; //@line 6135 "xmlparse.c"
        var $283=$282+8; //@line 6135 "xmlparse.c"
        var $284=$283; //@line 6135 "xmlparse.c"
        var $285=$pool_addr; //@line 6135 "xmlparse.c"
        var $286=$285+16; //@line 6135 "xmlparse.c"
        HEAP[$286]=$284; //@line 6135 "xmlparse.c"
        var $287=$tem10; //@line 6136 "xmlparse.c"
        var $288=$287+8; //@line 6136 "xmlparse.c"
        var $289=$288; //@line 6136 "xmlparse.c"
        var $290=$blockSize11; //@line 6136 "xmlparse.c"
        var $291=$289+$290; //@line 6136 "xmlparse.c"
        var $292=$pool_addr; //@line 6136 "xmlparse.c"
        var $293=$292+8; //@line 6136 "xmlparse.c"
        HEAP[$293]=$291; //@line 6136 "xmlparse.c"
        __label__ = 18; break; //@line 6136 "xmlparse.c"
      case 18: // $bb19
        $0=1; //@line 6138 "xmlparse.c"
        __label__ = 19; break; //@line 6138 "xmlparse.c"
      case 19: // $bb20
        var $294=$0; //@line 6089 "xmlparse.c"
        $retval=$294; //@line 6089 "xmlparse.c"
        var $retval21=$retval; //@line 6089 "xmlparse.c"
        var $retval2122=((($retval21)) & 255); //@line 6089 "xmlparse.c"
        ;
        return $retval2122; //@line 6089 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _nextScaffoldPart($parser) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $retval;
        var $0;
        var $dtd;
        var $me;
        var $next;
        var $temp;
        var $parent;
        $parser_addr=$parser;
        var $1=$parser_addr; //@line 6144 "xmlparse.c"
        var $2=$1+356; //@line 6144 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6144 "xmlparse.c"
        $dtd=$3; //@line 6144 "xmlparse.c"
        var $4=$dtd; //@line 6148 "xmlparse.c"
        var $5=$4+184; //@line 6148 "xmlparse.c"
        var $6=HEAP[$5]; //@line 6148 "xmlparse.c"
        var $7=($6)==0; //@line 6148 "xmlparse.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 6148 "xmlparse.c"
      case 1: // $bb
        var $8=$parser_addr; //@line 6149 "xmlparse.c"
        var $9=$8+12; //@line 6149 "xmlparse.c"
        var $10=$9; //@line 6149 "xmlparse.c"
        var $11=HEAP[$10]; //@line 6149 "xmlparse.c"
        var $12=$parser_addr; //@line 6149 "xmlparse.c"
        var $13=$12+468; //@line 6149 "xmlparse.c"
        var $14=HEAP[$13]; //@line 6149 "xmlparse.c"
        var $15=($14) * 4; //@line 6149 "xmlparse.c"
        var $16=FUNCTION_TABLE[$11]($15); //@line 6149 "xmlparse.c"
        var $17=$16; //@line 6149 "xmlparse.c"
        var $18=$dtd; //@line 6149 "xmlparse.c"
        var $19=$18+184; //@line 6149 "xmlparse.c"
        HEAP[$19]=$17; //@line 6149 "xmlparse.c"
        var $20=$dtd; //@line 6150 "xmlparse.c"
        var $21=$20+184; //@line 6150 "xmlparse.c"
        var $22=HEAP[$21]; //@line 6150 "xmlparse.c"
        var $23=($22)==0; //@line 6150 "xmlparse.c"
        if ($23) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 6150 "xmlparse.c"
      case 2: // $bb1
        $0=-1; //@line 6151 "xmlparse.c"
        __label__ = 20; break; //@line 6151 "xmlparse.c"
      case 3: // $bb2
        var $24=$dtd; //@line 6152 "xmlparse.c"
        var $25=$24+184; //@line 6152 "xmlparse.c"
        var $26=HEAP[$25]; //@line 6152 "xmlparse.c"
        var $27=$26; //@line 6152 "xmlparse.c"
        HEAP[$27]=0; //@line 6152 "xmlparse.c"
        __label__ = 4; break; //@line 6152 "xmlparse.c"
      case 4: // $bb3
        var $28=$dtd; //@line 6155 "xmlparse.c"
        var $29=$28+176; //@line 6155 "xmlparse.c"
        var $30=HEAP[$29]; //@line 6155 "xmlparse.c"
        var $31=$dtd; //@line 6155 "xmlparse.c"
        var $32=$31+172; //@line 6155 "xmlparse.c"
        var $33=HEAP[$32]; //@line 6155 "xmlparse.c"
        var $34=($30) >= ($33); //@line 6155 "xmlparse.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 13; break; } //@line 6155 "xmlparse.c"
      case 5: // $bb4
        var $35=$dtd; //@line 6157 "xmlparse.c"
        var $36=$35+164; //@line 6157 "xmlparse.c"
        var $37=HEAP[$36]; //@line 6157 "xmlparse.c"
        var $38=($37)!=0; //@line 6157 "xmlparse.c"
        var $39=$parser_addr; //@line 6158 "xmlparse.c"
        var $40=$39+12; //@line 6158 "xmlparse.c"
        if ($38) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 6157 "xmlparse.c"
      case 6: // $bb5
        var $41=$40+4; //@line 6158 "xmlparse.c"
        var $42=HEAP[$41]; //@line 6158 "xmlparse.c"
        var $43=$dtd; //@line 6158 "xmlparse.c"
        var $44=$43+172; //@line 6158 "xmlparse.c"
        var $45=HEAP[$44]; //@line 6158 "xmlparse.c"
        var $46=($45) * 56; //@line 6158 "xmlparse.c"
        var $47=$dtd; //@line 6158 "xmlparse.c"
        var $48=$47+164; //@line 6158 "xmlparse.c"
        var $49=HEAP[$48]; //@line 6158 "xmlparse.c"
        var $50=$49; //@line 6158 "xmlparse.c"
        var $51=FUNCTION_TABLE[$42]($50, $46); //@line 6158 "xmlparse.c"
        var $52=$51; //@line 6158 "xmlparse.c"
        $temp=$52; //@line 6158 "xmlparse.c"
        var $53=$temp; //@line 6160 "xmlparse.c"
        var $54=($53)==0; //@line 6160 "xmlparse.c"
        if ($54) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 6160 "xmlparse.c"
      case 7: // $bb6
        $0=-1; //@line 6161 "xmlparse.c"
        __label__ = 20; break; //@line 6161 "xmlparse.c"
      case 8: // $bb7
        var $55=$dtd; //@line 6162 "xmlparse.c"
        var $56=$55+172; //@line 6162 "xmlparse.c"
        var $57=HEAP[$56]; //@line 6162 "xmlparse.c"
        var $58=($57) * 2; //@line 6162 "xmlparse.c"
        var $59=$dtd; //@line 6162 "xmlparse.c"
        var $60=$59+172; //@line 6162 "xmlparse.c"
        HEAP[$60]=$58; //@line 6162 "xmlparse.c"
        __label__ = 12; break; //@line 6162 "xmlparse.c"
      case 9: // $bb8
        var $61=$40; //@line 6165 "xmlparse.c"
        var $62=HEAP[$61]; //@line 6165 "xmlparse.c"
        var $63=FUNCTION_TABLE[$62](896); //@line 6165 "xmlparse.c"
        var $64=$63; //@line 6165 "xmlparse.c"
        $temp=$64; //@line 6165 "xmlparse.c"
        var $65=$temp; //@line 6167 "xmlparse.c"
        var $66=($65)==0; //@line 6167 "xmlparse.c"
        if ($66) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 6167 "xmlparse.c"
      case 10: // $bb9
        $0=-1; //@line 6168 "xmlparse.c"
        __label__ = 20; break; //@line 6168 "xmlparse.c"
      case 11: // $bb10
        var $67=$dtd; //@line 6169 "xmlparse.c"
        var $68=$67+172; //@line 6169 "xmlparse.c"
        HEAP[$68]=32; //@line 6169 "xmlparse.c"
        __label__ = 12; break; //@line 6169 "xmlparse.c"
      case 12: // $bb11
        var $69=$dtd; //@line 6171 "xmlparse.c"
        var $70=$69+164; //@line 6171 "xmlparse.c"
        var $71=$temp; //@line 6171 "xmlparse.c"
        HEAP[$70]=$71; //@line 6171 "xmlparse.c"
        __label__ = 13; break; //@line 6171 "xmlparse.c"
      case 13: // $bb12
        var $72=$dtd; //@line 6173 "xmlparse.c"
        var $73=$72+176; //@line 6173 "xmlparse.c"
        var $74=HEAP[$73]; //@line 6173 "xmlparse.c"
        $next=$74; //@line 6173 "xmlparse.c"
        var $75=($74) + 1; //@line 6173 "xmlparse.c"
        var $76=$dtd; //@line 6173 "xmlparse.c"
        var $77=$76+176; //@line 6173 "xmlparse.c"
        HEAP[$77]=$75; //@line 6173 "xmlparse.c"
        var $78=$dtd; //@line 6174 "xmlparse.c"
        var $79=$78+164; //@line 6174 "xmlparse.c"
        var $80=HEAP[$79]; //@line 6174 "xmlparse.c"
        var $81=$next; //@line 6174 "xmlparse.c"
        var $82=$80+28*$81; //@line 6174 "xmlparse.c"
        $me=$82; //@line 6174 "xmlparse.c"
        var $83=$dtd; //@line 6175 "xmlparse.c"
        var $84=$83+180; //@line 6175 "xmlparse.c"
        var $85=HEAP[$84]; //@line 6175 "xmlparse.c"
        var $86=($85)!=0; //@line 6175 "xmlparse.c"
        if ($86) { __label__ = 14; break; } else { __label__ = 19; break; } //@line 6175 "xmlparse.c"
      case 14: // $bb13
        var $87=$dtd; //@line 6176 "xmlparse.c"
        var $88=$87+164; //@line 6176 "xmlparse.c"
        var $89=HEAP[$88]; //@line 6176 "xmlparse.c"
        var $90=$dtd; //@line 6176 "xmlparse.c"
        var $91=$90+184; //@line 6176 "xmlparse.c"
        var $92=HEAP[$91]; //@line 6176 "xmlparse.c"
        var $93=$dtd; //@line 6176 "xmlparse.c"
        var $94=$93+180; //@line 6176 "xmlparse.c"
        var $95=HEAP[$94]; //@line 6176 "xmlparse.c"
        var $96=($95) - 1; //@line 6176 "xmlparse.c"
        var $97=$92+4*$96; //@line 6176 "xmlparse.c"
        var $98=HEAP[$97]; //@line 6176 "xmlparse.c"
        var $99=$89+28*$98; //@line 6176 "xmlparse.c"
        $parent=$99; //@line 6176 "xmlparse.c"
        var $100=$parent; //@line 6177 "xmlparse.c"
        var $101=$100+16; //@line 6177 "xmlparse.c"
        var $102=HEAP[$101]; //@line 6177 "xmlparse.c"
        var $103=($102)!=0; //@line 6177 "xmlparse.c"
        if ($103) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 6177 "xmlparse.c"
      case 15: // $bb14
        var $104=$dtd; //@line 6178 "xmlparse.c"
        var $105=$104+164; //@line 6178 "xmlparse.c"
        var $106=HEAP[$105]; //@line 6178 "xmlparse.c"
        var $107=$parent; //@line 6178 "xmlparse.c"
        var $108=$107+16; //@line 6178 "xmlparse.c"
        var $109=HEAP[$108]; //@line 6178 "xmlparse.c"
        var $110=$106+28*$109; //@line 6178 "xmlparse.c"
        var $111=$110+24; //@line 6178 "xmlparse.c"
        var $112=$next; //@line 6178 "xmlparse.c"
        HEAP[$111]=$112; //@line 6178 "xmlparse.c"
        __label__ = 16; break; //@line 6178 "xmlparse.c"
      case 16: // $bb15
        var $113=$parent; //@line 6180 "xmlparse.c"
        var $114=$113+20; //@line 6180 "xmlparse.c"
        var $115=HEAP[$114]; //@line 6180 "xmlparse.c"
        var $116=($115)==0; //@line 6180 "xmlparse.c"
        if ($116) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 6180 "xmlparse.c"
      case 17: // $bb16
        var $117=$parent; //@line 6181 "xmlparse.c"
        var $118=$117+12; //@line 6181 "xmlparse.c"
        var $119=$next; //@line 6181 "xmlparse.c"
        HEAP[$118]=$119; //@line 6181 "xmlparse.c"
        __label__ = 18; break; //@line 6181 "xmlparse.c"
      case 18: // $bb17
        var $120=$parent; //@line 6182 "xmlparse.c"
        var $121=$120+16; //@line 6182 "xmlparse.c"
        var $122=$next; //@line 6182 "xmlparse.c"
        HEAP[$121]=$122; //@line 6182 "xmlparse.c"
        var $123=$parent; //@line 6183 "xmlparse.c"
        var $124=$123+20; //@line 6183 "xmlparse.c"
        var $125=HEAP[$124]; //@line 6183 "xmlparse.c"
        var $126=($125) + 1; //@line 6183 "xmlparse.c"
        var $127=$parent; //@line 6183 "xmlparse.c"
        var $128=$127+20; //@line 6183 "xmlparse.c"
        HEAP[$128]=$126; //@line 6183 "xmlparse.c"
        __label__ = 19; break; //@line 6183 "xmlparse.c"
      case 19: // $bb18
        var $129=$me; //@line 6185 "xmlparse.c"
        var $130=$129+24; //@line 6185 "xmlparse.c"
        HEAP[$130]=0; //@line 6185 "xmlparse.c"
        var $131=$me; //@line 6185 "xmlparse.c"
        var $132=$131+24; //@line 6185 "xmlparse.c"
        var $133=HEAP[$132]; //@line 6185 "xmlparse.c"
        var $134=$me; //@line 6185 "xmlparse.c"
        var $135=$134+20; //@line 6185 "xmlparse.c"
        HEAP[$135]=$133; //@line 6185 "xmlparse.c"
        var $136=$me; //@line 6185 "xmlparse.c"
        var $137=$136+20; //@line 6185 "xmlparse.c"
        var $138=HEAP[$137]; //@line 6185 "xmlparse.c"
        var $139=$me; //@line 6185 "xmlparse.c"
        var $140=$139+16; //@line 6185 "xmlparse.c"
        HEAP[$140]=$138; //@line 6185 "xmlparse.c"
        var $141=$me; //@line 6185 "xmlparse.c"
        var $142=$141+16; //@line 6185 "xmlparse.c"
        var $143=HEAP[$142]; //@line 6185 "xmlparse.c"
        var $144=$me; //@line 6185 "xmlparse.c"
        var $145=$144+12; //@line 6185 "xmlparse.c"
        HEAP[$145]=$143; //@line 6185 "xmlparse.c"
        var $146=$next; //@line 6186 "xmlparse.c"
        $0=$146; //@line 6186 "xmlparse.c"
        __label__ = 20; break; //@line 6186 "xmlparse.c"
      case 20: // $bb19
        var $147=$0; //@line 6151 "xmlparse.c"
        $retval=$147; //@line 6151 "xmlparse.c"
        var $retval20=$retval; //@line 6151 "xmlparse.c"
        ;
        return $retval20; //@line 6151 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _build_node($parser, $src_node, $dest, $contpos, $strpos) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $src_node_addr;
        var $dest_addr;
        var $contpos_addr;
        var $strpos_addr;
        var $dtd;
        var $src;
        var $i;
        var $cn;
        $parser_addr=$parser;
        $src_node_addr=$src_node;
        $dest_addr=$dest;
        $contpos_addr=$contpos;
        $strpos_addr=$strpos;
        var $0=$parser_addr; //@line 6196 "xmlparse.c"
        var $1=$0+356; //@line 6196 "xmlparse.c"
        var $2=HEAP[$1]; //@line 6196 "xmlparse.c"
        $dtd=$2; //@line 6196 "xmlparse.c"
        var $3=$dtd; //@line 6197 "xmlparse.c"
        var $4=$3+164; //@line 6197 "xmlparse.c"
        var $5=HEAP[$4]; //@line 6197 "xmlparse.c"
        var $6=$src_node_addr; //@line 6197 "xmlparse.c"
        var $7=$5+28*$6; //@line 6197 "xmlparse.c"
        var $8=$7; //@line 6197 "xmlparse.c"
        var $9=HEAP[$8]; //@line 6197 "xmlparse.c"
        var $10=$dest_addr; //@line 6197 "xmlparse.c"
        var $11=$10; //@line 6197 "xmlparse.c"
        HEAP[$11]=$9; //@line 6197 "xmlparse.c"
        var $12=$dtd; //@line 6198 "xmlparse.c"
        var $13=$12+164; //@line 6198 "xmlparse.c"
        var $14=HEAP[$13]; //@line 6198 "xmlparse.c"
        var $15=$src_node_addr; //@line 6198 "xmlparse.c"
        var $16=$14+28*$15; //@line 6198 "xmlparse.c"
        var $17=$16+4; //@line 6198 "xmlparse.c"
        var $18=HEAP[$17]; //@line 6198 "xmlparse.c"
        var $19=$dest_addr; //@line 6198 "xmlparse.c"
        var $20=$19+4; //@line 6198 "xmlparse.c"
        HEAP[$20]=$18; //@line 6198 "xmlparse.c"
        var $21=$dest_addr; //@line 6199 "xmlparse.c"
        var $22=$21; //@line 6199 "xmlparse.c"
        var $23=HEAP[$22]; //@line 6199 "xmlparse.c"
        var $24=($23)==4; //@line 6199 "xmlparse.c"
        if ($24) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 6199 "xmlparse.c"
      case 1: // $bb
        var $25=$strpos_addr; //@line 6201 "xmlparse.c"
        var $26=HEAP[$25]; //@line 6201 "xmlparse.c"
        var $27=$dest_addr; //@line 6201 "xmlparse.c"
        var $28=$27+8; //@line 6201 "xmlparse.c"
        HEAP[$28]=$26; //@line 6201 "xmlparse.c"
        var $29=$dtd; //@line 6202 "xmlparse.c"
        var $30=$29+164; //@line 6202 "xmlparse.c"
        var $31=HEAP[$30]; //@line 6202 "xmlparse.c"
        var $32=$src_node_addr; //@line 6202 "xmlparse.c"
        var $33=$31+28*$32; //@line 6202 "xmlparse.c"
        var $34=$33+8; //@line 6202 "xmlparse.c"
        var $35=HEAP[$34]; //@line 6202 "xmlparse.c"
        $src=$35; //@line 6202 "xmlparse.c"
        var $36=$strpos_addr; //@line 6204 "xmlparse.c"
        var $37=HEAP[$36]; //@line 6204 "xmlparse.c"
        var $38=$src; //@line 6204 "xmlparse.c"
        var $39=HEAP[$38]; //@line 6204 "xmlparse.c"
        HEAP[$37]=$39; //@line 6204 "xmlparse.c"
        var $40=$37+1; //@line 6204 "xmlparse.c"
        var $41=$strpos_addr; //@line 6204 "xmlparse.c"
        HEAP[$41]=$40; //@line 6204 "xmlparse.c"
        var $42=$src; //@line 6205 "xmlparse.c"
        var $43=HEAP[$42]; //@line 6205 "xmlparse.c"
        var $44=($43)==0; //@line 6205 "xmlparse.c"
        if ($44) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 6205 "xmlparse.c"
      case 2: // $bb2
        var $45=$src; //@line 6207 "xmlparse.c"
        var $46=$45+1; //@line 6207 "xmlparse.c"
        $src=$46; //@line 6207 "xmlparse.c"
        var $47=$strpos_addr; //@line 6204 "xmlparse.c"
        var $48=HEAP[$47]; //@line 6204 "xmlparse.c"
        var $49=$src; //@line 6204 "xmlparse.c"
        var $50=HEAP[$49]; //@line 6204 "xmlparse.c"
        HEAP[$48]=$50; //@line 6204 "xmlparse.c"
        var $51=$48+1; //@line 6204 "xmlparse.c"
        var $52=$strpos_addr; //@line 6204 "xmlparse.c"
        HEAP[$52]=$51; //@line 6204 "xmlparse.c"
        var $53=$src; //@line 6205 "xmlparse.c"
        var $54=HEAP[$53]; //@line 6205 "xmlparse.c"
        var $55=($54)==0; //@line 6205 "xmlparse.c"
        if ($55) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 6205 "xmlparse.c"
      case 3: // $bb3
        var $56=$dest_addr; //@line 6209 "xmlparse.c"
        var $57=$56+12; //@line 6209 "xmlparse.c"
        HEAP[$57]=0; //@line 6209 "xmlparse.c"
        var $58=$dest_addr; //@line 6210 "xmlparse.c"
        var $59=$58+16; //@line 6210 "xmlparse.c"
        HEAP[$59]=0; //@line 6210 "xmlparse.c"
        __label__ = 7; break; //@line 6210 "xmlparse.c"
      case 4: // $bb4
        var $60=$dtd; //@line 6215 "xmlparse.c"
        var $61=$60+164; //@line 6215 "xmlparse.c"
        var $62=HEAP[$61]; //@line 6215 "xmlparse.c"
        var $63=$src_node_addr; //@line 6215 "xmlparse.c"
        var $64=$62+28*$63; //@line 6215 "xmlparse.c"
        var $65=$64+20; //@line 6215 "xmlparse.c"
        var $66=HEAP[$65]; //@line 6215 "xmlparse.c"
        var $67=$dest_addr; //@line 6215 "xmlparse.c"
        var $68=$67+12; //@line 6215 "xmlparse.c"
        HEAP[$68]=$66; //@line 6215 "xmlparse.c"
        var $69=$contpos_addr; //@line 6216 "xmlparse.c"
        var $70=HEAP[$69]; //@line 6216 "xmlparse.c"
        var $71=$dest_addr; //@line 6216 "xmlparse.c"
        var $72=$71+16; //@line 6216 "xmlparse.c"
        HEAP[$72]=$70; //@line 6216 "xmlparse.c"
        var $73=$contpos_addr; //@line 6217 "xmlparse.c"
        var $74=HEAP[$73]; //@line 6217 "xmlparse.c"
        var $75=$dest_addr; //@line 6217 "xmlparse.c"
        var $76=$75+12; //@line 6217 "xmlparse.c"
        var $77=HEAP[$76]; //@line 6217 "xmlparse.c"
        var $78=$74+20*$77; //@line 6217 "xmlparse.c"
        var $79=$contpos_addr; //@line 6217 "xmlparse.c"
        HEAP[$79]=$78; //@line 6217 "xmlparse.c"
        $i=0; //@line 6218 "xmlparse.c"
        var $80=$dtd; //@line 6218 "xmlparse.c"
        var $81=$80+164; //@line 6218 "xmlparse.c"
        var $82=HEAP[$81]; //@line 6218 "xmlparse.c"
        var $83=$src_node_addr; //@line 6218 "xmlparse.c"
        var $84=$82+28*$83; //@line 6218 "xmlparse.c"
        var $85=$84+12; //@line 6218 "xmlparse.c"
        var $86=HEAP[$85]; //@line 6218 "xmlparse.c"
        $cn=$86; //@line 6218 "xmlparse.c"
        var $87=$dest_addr; //@line 6219 "xmlparse.c"
        var $88=$87+12; //@line 6219 "xmlparse.c"
        var $89=HEAP[$88]; //@line 6219 "xmlparse.c"
        var $90=$i; //@line 6219 "xmlparse.c"
        var $91=($89) > ($90); //@line 6219 "xmlparse.c"
        var $92=$dest_addr; //@line 6221 "xmlparse.c"
        if ($91) { __lastLabel__ = 4; __label__ = 5; break; } else { __lastLabel__ = 4; __label__ = 6; break; } //@line 6219 "xmlparse.c"
      case 5: // $bb5
        var $93=__lastLabel__ == 5 ? $116 : ($92);
        var $94=$93+16; //@line 6221 "xmlparse.c"
        var $95=HEAP[$94]; //@line 6221 "xmlparse.c"
        var $96=$i; //@line 6221 "xmlparse.c"
        var $97=$95+20*$96; //@line 6221 "xmlparse.c"
        var $98=$parser_addr; //@line 6221 "xmlparse.c"
        var $99=$cn; //@line 6221 "xmlparse.c"
        var $100=$contpos_addr; //@line 6221 "xmlparse.c"
        var $101=$strpos_addr; //@line 6221 "xmlparse.c"
        _build_node($98, $99, $97, $100, $101); //@line 6221 "xmlparse.c"
        var $102=$i; //@line 6220 "xmlparse.c"
        var $103=($102) + 1; //@line 6220 "xmlparse.c"
        $i=$103; //@line 6220 "xmlparse.c"
        var $104=$dtd; //@line 6220 "xmlparse.c"
        var $105=$104+164; //@line 6220 "xmlparse.c"
        var $106=HEAP[$105]; //@line 6220 "xmlparse.c"
        var $107=$cn; //@line 6220 "xmlparse.c"
        var $108=$106+28*$107; //@line 6220 "xmlparse.c"
        var $109=$108+24; //@line 6220 "xmlparse.c"
        var $110=HEAP[$109]; //@line 6220 "xmlparse.c"
        $cn=$110; //@line 6220 "xmlparse.c"
        var $111=$dest_addr; //@line 6219 "xmlparse.c"
        var $112=$111+12; //@line 6219 "xmlparse.c"
        var $113=HEAP[$112]; //@line 6219 "xmlparse.c"
        var $114=$i; //@line 6219 "xmlparse.c"
        var $115=($113) > ($114); //@line 6219 "xmlparse.c"
        var $116=$dest_addr; //@line 6221 "xmlparse.c"
        if ($115) { __lastLabel__ = 5; __label__ = 5; break; } else { __lastLabel__ = 5; __label__ = 6; break; } //@line 6219 "xmlparse.c"
      case 6: // $bb7
        var $_lcssa=__lastLabel__ == 4 ? $92 : ($116);
        var $117=$_lcssa+8; //@line 6223 "xmlparse.c"
        HEAP[$117]=0; //@line 6223 "xmlparse.c"
        __label__ = 7; break; //@line 6223 "xmlparse.c"
      case 7: // $return
        ;
        return; //@line 6225 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _build_model($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $retval;
        var $0;
        var $dtd;
        var $ret;
        var $cpos=__stackBase__;
        var $str=__stackBase__+4;
        var $allocsize;
        $parser_addr=$parser;
        var $1=$parser_addr; //@line 6230 "xmlparse.c"
        var $2=$1+356; //@line 6230 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6230 "xmlparse.c"
        $dtd=$3; //@line 6230 "xmlparse.c"
        var $4=$dtd; //@line 6235 "xmlparse.c"
        var $5=$4+176; //@line 6235 "xmlparse.c"
        var $6=HEAP[$5]; //@line 6235 "xmlparse.c"
        var $7=($6) * 20; //@line 6235 "xmlparse.c"
        var $8=$dtd; //@line 6235 "xmlparse.c"
        var $9=$8+168; //@line 6235 "xmlparse.c"
        var $10=HEAP[$9]; //@line 6235 "xmlparse.c"
        var $11=($10) + ($7); //@line 6235 "xmlparse.c"
        $allocsize=$11; //@line 6235 "xmlparse.c"
        var $12=$parser_addr; //@line 6237 "xmlparse.c"
        var $13=$12+12; //@line 6237 "xmlparse.c"
        var $14=$13; //@line 6237 "xmlparse.c"
        var $15=HEAP[$14]; //@line 6237 "xmlparse.c"
        var $16=$allocsize; //@line 6237 "xmlparse.c"
        var $17=FUNCTION_TABLE[$15]($16); //@line 6237 "xmlparse.c"
        var $18=$17; //@line 6237 "xmlparse.c"
        $ret=$18; //@line 6237 "xmlparse.c"
        var $19=$ret; //@line 6238 "xmlparse.c"
        var $20=($19)==0; //@line 6238 "xmlparse.c"
        if ($20) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 6238 "xmlparse.c"
      case 1: // $bb
        $0=0; //@line 6239 "xmlparse.c"
        __label__ = 3; break; //@line 6239 "xmlparse.c"
      case 2: // $bb1
        var $21=$dtd; //@line 6241 "xmlparse.c"
        var $22=$21+176; //@line 6241 "xmlparse.c"
        var $23=HEAP[$22]; //@line 6241 "xmlparse.c"
        var $24=$ret; //@line 6241 "xmlparse.c"
        var $25=$24+20*$23; //@line 6241 "xmlparse.c"
        var $26=$25; //@line 6241 "xmlparse.c"
        HEAP[$str]=$26; //@line 6241 "xmlparse.c"
        var $27=$ret; //@line 6242 "xmlparse.c"
        var $28=$27+20; //@line 6242 "xmlparse.c"
        HEAP[$cpos]=$28; //@line 6242 "xmlparse.c"
        var $29=$parser_addr; //@line 6244 "xmlparse.c"
        var $30=$ret; //@line 6244 "xmlparse.c"
        _build_node($29, 0, $30, $cpos, $str); //@line 6244 "xmlparse.c"
        var $31=$ret; //@line 6245 "xmlparse.c"
        $0=$31; //@line 6245 "xmlparse.c"
        __label__ = 3; break; //@line 6245 "xmlparse.c"
      case 3: // $bb2
        var $32=$0; //@line 6239 "xmlparse.c"
        $retval=$32; //@line 6239 "xmlparse.c"
        var $retval3=$retval; //@line 6239 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 6239 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getElementType($parser, $enc, $ptr, $end) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr;
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $retval;
        var $0;
        var $dtd;
        var $name;
        var $ret;
        $parser_addr=$parser;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        var $1=$parser_addr; //@line 6254 "xmlparse.c"
        var $2=$1+356; //@line 6254 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6254 "xmlparse.c"
        $dtd=$3; //@line 6254 "xmlparse.c"
        var $4=$dtd; //@line 6255 "xmlparse.c"
        var $5=$4+80; //@line 6255 "xmlparse.c"
        var $6=$enc_addr; //@line 6255 "xmlparse.c"
        var $7=$ptr_addr; //@line 6255 "xmlparse.c"
        var $8=$end_addr; //@line 6255 "xmlparse.c"
        var $9=_poolStoreString($5, $6, $7, $8); //@line 6255 "xmlparse.c"
        $name=$9; //@line 6255 "xmlparse.c"
        var $10=$name; //@line 6258 "xmlparse.c"
        var $11=($10)==0; //@line 6258 "xmlparse.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 6258 "xmlparse.c"
      case 1: // $bb
        $0=0; //@line 6259 "xmlparse.c"
        __label__ = 9; break; //@line 6259 "xmlparse.c"
      case 2: // $bb1
        var $12=$dtd; //@line 6260 "xmlparse.c"
        var $13=$12+20; //@line 6260 "xmlparse.c"
        var $14=$name; //@line 6260 "xmlparse.c"
        var $15=_lookup($13, $14, 24); //@line 6260 "xmlparse.c"
        var $16=$15; //@line 6260 "xmlparse.c"
        $ret=$16; //@line 6260 "xmlparse.c"
        var $17=$ret; //@line 6261 "xmlparse.c"
        var $18=($17)==0; //@line 6261 "xmlparse.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 6261 "xmlparse.c"
      case 3: // $bb2
        $0=0; //@line 6262 "xmlparse.c"
        __label__ = 9; break; //@line 6262 "xmlparse.c"
      case 4: // $bb3
        var $19=$ret; //@line 6263 "xmlparse.c"
        var $20=$19; //@line 6263 "xmlparse.c"
        var $21=HEAP[$20]; //@line 6263 "xmlparse.c"
        var $22=$name; //@line 6263 "xmlparse.c"
        var $23=($21)!=($22); //@line 6263 "xmlparse.c"
        var $24=$dtd; //@line 6264 "xmlparse.c"
        var $25=$24+80; //@line 6264 "xmlparse.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 6263 "xmlparse.c"
      case 5: // $bb4
        var $26=$25+16; //@line 6264 "xmlparse.c"
        var $27=HEAP[$26]; //@line 6264 "xmlparse.c"
        var $28=$dtd; //@line 6264 "xmlparse.c"
        var $29=$28+80; //@line 6264 "xmlparse.c"
        var $30=$29+12; //@line 6264 "xmlparse.c"
        HEAP[$30]=$27; //@line 6264 "xmlparse.c"
        __label__ = 8; break; //@line 6264 "xmlparse.c"
      case 6: // $bb5
        var $31=$25+12; //@line 6266 "xmlparse.c"
        var $32=HEAP[$31]; //@line 6266 "xmlparse.c"
        var $33=$dtd; //@line 6266 "xmlparse.c"
        var $34=$33+80; //@line 6266 "xmlparse.c"
        var $35=$34+16; //@line 6266 "xmlparse.c"
        HEAP[$35]=$32; //@line 6266 "xmlparse.c"
        var $36=$parser_addr; //@line 6267 "xmlparse.c"
        var $37=$ret; //@line 6267 "xmlparse.c"
        var $38=_setElementTypePrefix($36, $37); //@line 6267 "xmlparse.c"
        var $39=($38)==0; //@line 6267 "xmlparse.c"
        if ($39) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 6267 "xmlparse.c"
      case 7: // $bb6
        $0=0; //@line 6268 "xmlparse.c"
        __label__ = 9; break; //@line 6268 "xmlparse.c"
      case 8: // $bb7
        var $40=$ret; //@line 6270 "xmlparse.c"
        $0=$40; //@line 6270 "xmlparse.c"
        __label__ = 9; break; //@line 6270 "xmlparse.c"
      case 9: // $bb8
        var $41=$0; //@line 6259 "xmlparse.c"
        $retval=$41; //@line 6259 "xmlparse.c"
        var $retval9=$retval; //@line 6259 "xmlparse.c"
        ;
        return $retval9; //@line 6259 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _prolog0($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 128 "xmlrole.c"
        if ($1 == 11) {
          __label__ = 3; break;
        }
        else if ($1 == 12) {
          __label__ = 2; break;
        }
        else if ($1 == 13) {
          __label__ = 4; break;
        }
        else if ($1 == 14) {
          __label__ = 5; break;
        }
        else if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 16) {
          __label__ = 6; break;
        }
        else if ($1 == 29) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 1: // $bb
        var $2=$state_addr; //@line 130 "xmlrole.c"
        var $3=$2; //@line 130 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 92); //@line 130 "xmlrole.c"
        $0=0; //@line 131 "xmlrole.c"
        __label__ = 10; break; //@line 131 "xmlrole.c"
      case 2: // $bb1
        var $4=$state_addr; //@line 133 "xmlrole.c"
        var $5=$4; //@line 133 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 92); //@line 133 "xmlrole.c"
        $0=1; //@line 134 "xmlrole.c"
        __label__ = 10; break; //@line 134 "xmlrole.c"
      case 3: // $bb2
        var $6=$state_addr; //@line 136 "xmlrole.c"
        var $7=$6; //@line 136 "xmlrole.c"
        HEAP[$7]=(FUNCTION_TABLE_OFFSET + 92); //@line 136 "xmlrole.c"
        $0=55; //@line 137 "xmlrole.c"
        __label__ = 10; break; //@line 137 "xmlrole.c"
      case 4: // $bb3
        var $8=$state_addr; //@line 139 "xmlrole.c"
        var $9=$8; //@line 139 "xmlrole.c"
        HEAP[$9]=(FUNCTION_TABLE_OFFSET + 92); //@line 139 "xmlrole.c"
        $0=56; //@line 140 "xmlrole.c"
        __label__ = 10; break; //@line 140 "xmlrole.c"
      case 5: // $bb4
        $0=0; //@line 142 "xmlrole.c"
        __label__ = 10; break; //@line 142 "xmlrole.c"
      case 6: // $bb5
        var $10=$enc_addr; //@line 144 "xmlrole.c"
        var $11=$10+28; //@line 144 "xmlrole.c"
        var $12=HEAP[$11]; //@line 144 "xmlrole.c"
        var $13=$enc_addr; //@line 144 "xmlrole.c"
        var $14=$13+68; //@line 144 "xmlrole.c"
        var $15=HEAP[$14]; //@line 144 "xmlrole.c"
        var $16=($15) * 2; //@line 144 "xmlrole.c"
        var $17=$ptr_addr; //@line 144 "xmlrole.c"
        var $18=$17+$16; //@line 144 "xmlrole.c"
        var $19=$enc_addr; //@line 144 "xmlrole.c"
        var $20=$end_addr; //@line 144 "xmlrole.c"
        var $21=FUNCTION_TABLE[$12]($19, $18, $20, _KW_DOCTYPE); //@line 144 "xmlrole.c"
        var $22=($21)==0; //@line 144 "xmlrole.c"
        if ($22) { __label__ = 9; break; } else { __label__ = 7; break; } //@line 144 "xmlrole.c"
      case 7: // $bb6
        var $23=$state_addr; //@line 149 "xmlrole.c"
        var $24=$23; //@line 149 "xmlrole.c"
        HEAP[$24]=(FUNCTION_TABLE_OFFSET + 94); //@line 149 "xmlrole.c"
        $0=3; //@line 150 "xmlrole.c"
        __label__ = 10; break; //@line 150 "xmlrole.c"
      case 8: // $bb7
        var $25=$state_addr; //@line 152 "xmlrole.c"
        var $26=$25; //@line 152 "xmlrole.c"
        HEAP[$26]=(FUNCTION_TABLE_OFFSET + 96); //@line 152 "xmlrole.c"
        $0=2; //@line 153 "xmlrole.c"
        __label__ = 10; break; //@line 153 "xmlrole.c"
      case 9: // $bb8
        var $27=$state_addr; //@line 155 "xmlrole.c"
        var $28=$tok_addr; //@line 155 "xmlrole.c"
        var $29=_common($27, $28); //@line 155 "xmlrole.c"
        $0=$29; //@line 155 "xmlrole.c"
        __label__ = 10; break; //@line 155 "xmlrole.c"
      case 10: // $bb9
        var $30=$0; //@line 131 "xmlrole.c"
        $retval=$30; //@line 131 "xmlrole.c"
        var $retval10=$retval; //@line 131 "xmlrole.c"
        ;
        return $retval10; //@line 131 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _prolog1($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 165 "xmlrole.c"
        if ($1 == 11) {
          __label__ = 2; break;
        }
        else if ($1 == 13) {
          __label__ = 3; break;
        }
        else if ($1 == 14) {
          __label__ = 4; break;
        }
        else if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 16) {
          __label__ = 5; break;
        }
        else if ($1 == 29) {
          __label__ = 7; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $bb
        $0=0; //@line 167 "xmlrole.c"
        __label__ = 9; break; //@line 167 "xmlrole.c"
      case 2: // $bb1
        $0=55; //@line 169 "xmlrole.c"
        __label__ = 9; break; //@line 169 "xmlrole.c"
      case 3: // $bb2
        $0=56; //@line 171 "xmlrole.c"
        __label__ = 9; break; //@line 171 "xmlrole.c"
      case 4: // $bb3
        $0=0; //@line 173 "xmlrole.c"
        __label__ = 9; break; //@line 173 "xmlrole.c"
      case 5: // $bb4
        var $2=$enc_addr; //@line 175 "xmlrole.c"
        var $3=$2+28; //@line 175 "xmlrole.c"
        var $4=HEAP[$3]; //@line 175 "xmlrole.c"
        var $5=$enc_addr; //@line 175 "xmlrole.c"
        var $6=$5+68; //@line 175 "xmlrole.c"
        var $7=HEAP[$6]; //@line 175 "xmlrole.c"
        var $8=($7) * 2; //@line 175 "xmlrole.c"
        var $9=$ptr_addr; //@line 175 "xmlrole.c"
        var $10=$9+$8; //@line 175 "xmlrole.c"
        var $11=$enc_addr; //@line 175 "xmlrole.c"
        var $12=$end_addr; //@line 175 "xmlrole.c"
        var $13=FUNCTION_TABLE[$4]($11, $10, $12, _KW_DOCTYPE); //@line 175 "xmlrole.c"
        var $14=($13)==0; //@line 175 "xmlrole.c"
        if ($14) { __label__ = 8; break; } else { __label__ = 6; break; } //@line 175 "xmlrole.c"
      case 6: // $bb5
        var $15=$state_addr; //@line 180 "xmlrole.c"
        var $16=$15; //@line 180 "xmlrole.c"
        HEAP[$16]=(FUNCTION_TABLE_OFFSET + 94); //@line 180 "xmlrole.c"
        $0=3; //@line 181 "xmlrole.c"
        __label__ = 9; break; //@line 181 "xmlrole.c"
      case 7: // $bb6
        var $17=$state_addr; //@line 183 "xmlrole.c"
        var $18=$17; //@line 183 "xmlrole.c"
        HEAP[$18]=(FUNCTION_TABLE_OFFSET + 96); //@line 183 "xmlrole.c"
        $0=2; //@line 184 "xmlrole.c"
        __label__ = 9; break; //@line 184 "xmlrole.c"
      case 8: // $bb7
        var $19=$state_addr; //@line 186 "xmlrole.c"
        var $20=$tok_addr; //@line 186 "xmlrole.c"
        var $21=_common($19, $20); //@line 186 "xmlrole.c"
        $0=$21; //@line 186 "xmlrole.c"
        __label__ = 9; break; //@line 186 "xmlrole.c"
      case 9: // $bb8
        var $22=$0; //@line 167 "xmlrole.c"
        $retval=$22; //@line 167 "xmlrole.c"
        var $retval9=$retval; //@line 167 "xmlrole.c"
        ;
        return $retval9; //@line 167 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _prolog2($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 196 "xmlrole.c"
        if ($1 == 11) {
          __label__ = 2; break;
        }
        else if ($1 == 13) {
          __label__ = 3; break;
        }
        else if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 29) {
          __label__ = 4; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $bb
        $0=0; //@line 198 "xmlrole.c"
        __label__ = 6; break; //@line 198 "xmlrole.c"
      case 2: // $bb1
        $0=55; //@line 200 "xmlrole.c"
        __label__ = 6; break; //@line 200 "xmlrole.c"
      case 3: // $bb2
        $0=56; //@line 202 "xmlrole.c"
        __label__ = 6; break; //@line 202 "xmlrole.c"
      case 4: // $bb3
        var $2=$state_addr; //@line 204 "xmlrole.c"
        var $3=$2; //@line 204 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 96); //@line 204 "xmlrole.c"
        $0=2; //@line 205 "xmlrole.c"
        __label__ = 6; break; //@line 205 "xmlrole.c"
      case 5: // $bb4
        var $4=$state_addr; //@line 207 "xmlrole.c"
        var $5=$tok_addr; //@line 207 "xmlrole.c"
        var $6=_common($4, $5); //@line 207 "xmlrole.c"
        $0=$6; //@line 207 "xmlrole.c"
        __label__ = 6; break; //@line 207 "xmlrole.c"
      case 6: // $bb5
        var $7=$0; //@line 198 "xmlrole.c"
        $retval=$7; //@line 198 "xmlrole.c"
        var $retval6=$retval; //@line 198 "xmlrole.c"
        ;
        return $retval6; //@line 198 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doctype0($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 217 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 41) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=3; //@line 219 "xmlrole.c"
        __label__ = 4; break; //@line 219 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 222 "xmlrole.c"
        var $3=$2; //@line 222 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 98); //@line 222 "xmlrole.c"
        $0=4; //@line 223 "xmlrole.c"
        __label__ = 4; break; //@line 223 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 225 "xmlrole.c"
        var $5=$tok_addr; //@line 225 "xmlrole.c"
        var $6=_common($4, $5); //@line 225 "xmlrole.c"
        $0=$6; //@line 225 "xmlrole.c"
        __label__ = 4; break; //@line 225 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 219 "xmlrole.c"
        $retval=$7; //@line 219 "xmlrole.c"
        var $retval4=$retval; //@line 219 "xmlrole.c"
        ;
        return $retval4; //@line 219 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doctype1($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 235 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 3; break;
        }
        else if ($1 == 18) {
          __label__ = 4; break;
        }
        else if ($1 == 25) {
          __label__ = 2; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $bb
        $0=3; //@line 237 "xmlrole.c"
        __label__ = 9; break; //@line 237 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 239 "xmlrole.c"
        var $3=$2; //@line 239 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 100); //@line 239 "xmlrole.c"
        $0=7; //@line 240 "xmlrole.c"
        __label__ = 9; break; //@line 240 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 242 "xmlrole.c"
        var $5=$4; //@line 242 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 102); //@line 242 "xmlrole.c"
        $0=8; //@line 243 "xmlrole.c"
        __label__ = 9; break; //@line 243 "xmlrole.c"
      case 4: // $bb3
        var $6=$enc_addr; //@line 245 "xmlrole.c"
        var $7=$6+28; //@line 245 "xmlrole.c"
        var $8=HEAP[$7]; //@line 245 "xmlrole.c"
        var $9=$enc_addr; //@line 245 "xmlrole.c"
        var $10=$ptr_addr; //@line 245 "xmlrole.c"
        var $11=$end_addr; //@line 245 "xmlrole.c"
        var $12=FUNCTION_TABLE[$8]($9, $10, $11, _KW_SYSTEM); //@line 245 "xmlrole.c"
        var $13=($12)!=0; //@line 245 "xmlrole.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 245 "xmlrole.c"
      case 5: // $bb4
        var $14=$state_addr; //@line 246 "xmlrole.c"
        var $15=$14; //@line 246 "xmlrole.c"
        HEAP[$15]=(FUNCTION_TABLE_OFFSET + 104); //@line 246 "xmlrole.c"
        $0=3; //@line 247 "xmlrole.c"
        __label__ = 9; break; //@line 247 "xmlrole.c"
      case 6: // $bb5
        var $16=$enc_addr; //@line 249 "xmlrole.c"
        var $17=$16+28; //@line 249 "xmlrole.c"
        var $18=HEAP[$17]; //@line 249 "xmlrole.c"
        var $19=$enc_addr; //@line 249 "xmlrole.c"
        var $20=$ptr_addr; //@line 249 "xmlrole.c"
        var $21=$end_addr; //@line 249 "xmlrole.c"
        var $22=FUNCTION_TABLE[$18]($19, $20, $21, _KW_PUBLIC); //@line 249 "xmlrole.c"
        var $23=($22)!=0; //@line 249 "xmlrole.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 249 "xmlrole.c"
      case 7: // $bb6
        var $24=$state_addr; //@line 250 "xmlrole.c"
        var $25=$24; //@line 250 "xmlrole.c"
        HEAP[$25]=(FUNCTION_TABLE_OFFSET + 106); //@line 250 "xmlrole.c"
        $0=3; //@line 251 "xmlrole.c"
        __label__ = 9; break; //@line 251 "xmlrole.c"
      case 8: // $bb7
        var $26=$state_addr; //@line 255 "xmlrole.c"
        var $27=$tok_addr; //@line 255 "xmlrole.c"
        var $28=_common($26, $27); //@line 255 "xmlrole.c"
        $0=$28; //@line 255 "xmlrole.c"
        __label__ = 9; break; //@line 255 "xmlrole.c"
      case 9: // $bb8
        var $29=$0; //@line 237 "xmlrole.c"
        $retval=$29; //@line 237 "xmlrole.c"
        var $retval9=$retval; //@line 237 "xmlrole.c"
        ;
        return $retval9; //@line 237 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doctype2($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 265 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=3; //@line 267 "xmlrole.c"
        __label__ = 4; break; //@line 267 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 269 "xmlrole.c"
        var $3=$2; //@line 269 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 104); //@line 269 "xmlrole.c"
        $0=6; //@line 270 "xmlrole.c"
        __label__ = 4; break; //@line 270 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 272 "xmlrole.c"
        var $5=$tok_addr; //@line 272 "xmlrole.c"
        var $6=_common($4, $5); //@line 272 "xmlrole.c"
        $0=$6; //@line 272 "xmlrole.c"
        __label__ = 4; break; //@line 272 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 267 "xmlrole.c"
        $retval=$7; //@line 267 "xmlrole.c"
        var $retval4=$retval; //@line 267 "xmlrole.c"
        ;
        return $retval4; //@line 267 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doctype3($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 282 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=3; //@line 284 "xmlrole.c"
        __label__ = 4; break; //@line 284 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 286 "xmlrole.c"
        var $3=$2; //@line 286 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 108); //@line 286 "xmlrole.c"
        $0=5; //@line 287 "xmlrole.c"
        __label__ = 4; break; //@line 287 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 289 "xmlrole.c"
        var $5=$tok_addr; //@line 289 "xmlrole.c"
        var $6=_common($4, $5); //@line 289 "xmlrole.c"
        $0=$6; //@line 289 "xmlrole.c"
        __label__ = 4; break; //@line 289 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 284 "xmlrole.c"
        $retval=$7; //@line 284 "xmlrole.c"
        var $retval4=$retval; //@line 284 "xmlrole.c"
        ;
        return $retval4; //@line 284 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doctype4($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 299 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 3; break;
        }
        else if ($1 == 25) {
          __label__ = 2; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $bb
        $0=3; //@line 301 "xmlrole.c"
        __label__ = 5; break; //@line 301 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 303 "xmlrole.c"
        var $3=$2; //@line 303 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 100); //@line 303 "xmlrole.c"
        $0=7; //@line 304 "xmlrole.c"
        __label__ = 5; break; //@line 304 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 306 "xmlrole.c"
        var $5=$4; //@line 306 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 102); //@line 306 "xmlrole.c"
        $0=8; //@line 307 "xmlrole.c"
        __label__ = 5; break; //@line 307 "xmlrole.c"
      case 4: // $bb3
        var $6=$state_addr; //@line 309 "xmlrole.c"
        var $7=$tok_addr; //@line 309 "xmlrole.c"
        var $8=_common($6, $7); //@line 309 "xmlrole.c"
        $0=$8; //@line 309 "xmlrole.c"
        __label__ = 5; break; //@line 309 "xmlrole.c"
      case 5: // $bb4
        var $9=$0; //@line 301 "xmlrole.c"
        $retval=$9; //@line 301 "xmlrole.c"
        var $retval5=$retval; //@line 301 "xmlrole.c"
        ;
        return $retval5; //@line 301 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doctype5($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 319 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=3; //@line 321 "xmlrole.c"
        __label__ = 4; break; //@line 321 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 323 "xmlrole.c"
        var $3=$2; //@line 323 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 102); //@line 323 "xmlrole.c"
        $0=8; //@line 324 "xmlrole.c"
        __label__ = 4; break; //@line 324 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 326 "xmlrole.c"
        var $5=$tok_addr; //@line 326 "xmlrole.c"
        var $6=_common($4, $5); //@line 326 "xmlrole.c"
        $0=$6; //@line 326 "xmlrole.c"
        __label__ = 4; break; //@line 326 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 321 "xmlrole.c"
        $retval=$7; //@line 321 "xmlrole.c"
        var $retval4=$retval; //@line 321 "xmlrole.c"
        ;
        return $retval4; //@line 321 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _internalSubset($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 336 "xmlrole.c"
        if ($1 == -4) {
          __label__ = 14; break;
        }
        else if ($1 == 11) {
          __label__ = 10; break;
        }
        else if ($1 == 13) {
          __label__ = 11; break;
        }
        else if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 16) {
          __label__ = 2; break;
        }
        else if ($1 == 26) {
          __label__ = 13; break;
        }
        else if ($1 == 28) {
          __label__ = 12; break;
        }
        else {
        __label__ = 15; break;
        }
        
      case 1: // $bb
        $0=0; //@line 338 "xmlrole.c"
        __label__ = 16; break; //@line 338 "xmlrole.c"
      case 2: // $bb1
        var $2=$enc_addr; //@line 340 "xmlrole.c"
        var $3=$2+28; //@line 340 "xmlrole.c"
        var $4=HEAP[$3]; //@line 340 "xmlrole.c"
        var $5=$enc_addr; //@line 340 "xmlrole.c"
        var $6=$5+68; //@line 340 "xmlrole.c"
        var $7=HEAP[$6]; //@line 340 "xmlrole.c"
        var $8=($7) * 2; //@line 340 "xmlrole.c"
        var $9=$ptr_addr; //@line 340 "xmlrole.c"
        var $10=$9+$8; //@line 340 "xmlrole.c"
        var $11=$enc_addr; //@line 340 "xmlrole.c"
        var $12=$end_addr; //@line 340 "xmlrole.c"
        var $13=FUNCTION_TABLE[$4]($11, $10, $12, _KW_ENTITY); //@line 340 "xmlrole.c"
        var $14=($13)!=0; //@line 340 "xmlrole.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 340 "xmlrole.c"
      case 3: // $bb2
        var $15=$state_addr; //@line 344 "xmlrole.c"
        var $16=$15; //@line 344 "xmlrole.c"
        HEAP[$16]=(FUNCTION_TABLE_OFFSET + 110); //@line 344 "xmlrole.c"
        $0=11; //@line 345 "xmlrole.c"
        __label__ = 16; break; //@line 345 "xmlrole.c"
      case 4: // $bb3
        var $17=$enc_addr; //@line 347 "xmlrole.c"
        var $18=$17+28; //@line 347 "xmlrole.c"
        var $19=HEAP[$18]; //@line 347 "xmlrole.c"
        var $20=$enc_addr; //@line 347 "xmlrole.c"
        var $21=$20+68; //@line 347 "xmlrole.c"
        var $22=HEAP[$21]; //@line 347 "xmlrole.c"
        var $23=($22) * 2; //@line 347 "xmlrole.c"
        var $24=$ptr_addr; //@line 347 "xmlrole.c"
        var $25=$24+$23; //@line 347 "xmlrole.c"
        var $26=$enc_addr; //@line 347 "xmlrole.c"
        var $27=$end_addr; //@line 347 "xmlrole.c"
        var $28=FUNCTION_TABLE[$19]($26, $25, $27, _KW_ATTLIST); //@line 347 "xmlrole.c"
        var $29=($28)!=0; //@line 347 "xmlrole.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 347 "xmlrole.c"
      case 5: // $bb4
        var $30=$state_addr; //@line 351 "xmlrole.c"
        var $31=$30; //@line 351 "xmlrole.c"
        HEAP[$31]=(FUNCTION_TABLE_OFFSET + 112); //@line 351 "xmlrole.c"
        $0=33; //@line 352 "xmlrole.c"
        __label__ = 16; break; //@line 352 "xmlrole.c"
      case 6: // $bb5
        var $32=$enc_addr; //@line 354 "xmlrole.c"
        var $33=$32+28; //@line 354 "xmlrole.c"
        var $34=HEAP[$33]; //@line 354 "xmlrole.c"
        var $35=$enc_addr; //@line 354 "xmlrole.c"
        var $36=$35+68; //@line 354 "xmlrole.c"
        var $37=HEAP[$36]; //@line 354 "xmlrole.c"
        var $38=($37) * 2; //@line 354 "xmlrole.c"
        var $39=$ptr_addr; //@line 354 "xmlrole.c"
        var $40=$39+$38; //@line 354 "xmlrole.c"
        var $41=$enc_addr; //@line 354 "xmlrole.c"
        var $42=$end_addr; //@line 354 "xmlrole.c"
        var $43=FUNCTION_TABLE[$34]($41, $40, $42, _KW_ELEMENT); //@line 354 "xmlrole.c"
        var $44=($43)!=0; //@line 354 "xmlrole.c"
        if ($44) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 354 "xmlrole.c"
      case 7: // $bb6
        var $45=$state_addr; //@line 358 "xmlrole.c"
        var $46=$45; //@line 358 "xmlrole.c"
        HEAP[$46]=(FUNCTION_TABLE_OFFSET + 114); //@line 358 "xmlrole.c"
        $0=39; //@line 359 "xmlrole.c"
        __label__ = 16; break; //@line 359 "xmlrole.c"
      case 8: // $bb7
        var $47=$enc_addr; //@line 361 "xmlrole.c"
        var $48=$47+28; //@line 361 "xmlrole.c"
        var $49=HEAP[$48]; //@line 361 "xmlrole.c"
        var $50=$enc_addr; //@line 361 "xmlrole.c"
        var $51=$50+68; //@line 361 "xmlrole.c"
        var $52=HEAP[$51]; //@line 361 "xmlrole.c"
        var $53=($52) * 2; //@line 361 "xmlrole.c"
        var $54=$ptr_addr; //@line 361 "xmlrole.c"
        var $55=$54+$53; //@line 361 "xmlrole.c"
        var $56=$enc_addr; //@line 361 "xmlrole.c"
        var $57=$end_addr; //@line 361 "xmlrole.c"
        var $58=FUNCTION_TABLE[$49]($56, $55, $57, _KW_NOTATION); //@line 361 "xmlrole.c"
        var $59=($58)!=0; //@line 361 "xmlrole.c"
        if ($59) { __label__ = 9; break; } else { __label__ = 15; break; } //@line 361 "xmlrole.c"
      case 9: // $bb8
        var $60=$state_addr; //@line 365 "xmlrole.c"
        var $61=$60; //@line 365 "xmlrole.c"
        HEAP[$61]=(FUNCTION_TABLE_OFFSET + 116); //@line 365 "xmlrole.c"
        $0=17; //@line 366 "xmlrole.c"
        __label__ = 16; break; //@line 366 "xmlrole.c"
      case 10: // $bb10
        $0=55; //@line 370 "xmlrole.c"
        __label__ = 16; break; //@line 370 "xmlrole.c"
      case 11: // $bb11
        $0=56; //@line 372 "xmlrole.c"
        __label__ = 16; break; //@line 372 "xmlrole.c"
      case 12: // $bb12
        $0=60; //@line 374 "xmlrole.c"
        __label__ = 16; break; //@line 374 "xmlrole.c"
      case 13: // $bb13
        var $62=$state_addr; //@line 376 "xmlrole.c"
        var $63=$62; //@line 376 "xmlrole.c"
        HEAP[$63]=(FUNCTION_TABLE_OFFSET + 118); //@line 376 "xmlrole.c"
        $0=3; //@line 377 "xmlrole.c"
        __label__ = 16; break; //@line 377 "xmlrole.c"
      case 14: // $bb14
        $0=0; //@line 379 "xmlrole.c"
        __label__ = 16; break; //@line 379 "xmlrole.c"
      case 15: // $bb15
        var $64=$state_addr; //@line 381 "xmlrole.c"
        var $65=$tok_addr; //@line 381 "xmlrole.c"
        var $66=_common($64, $65); //@line 381 "xmlrole.c"
        $0=$66; //@line 381 "xmlrole.c"
        __label__ = 16; break; //@line 381 "xmlrole.c"
      case 16: // $bb16
        var $67=$0; //@line 338 "xmlrole.c"
        $retval=$67; //@line 338 "xmlrole.c"
        var $retval17=$retval; //@line 338 "xmlrole.c"
        ;
        return $retval17; //@line 338 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _externalSubset0($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$state_addr; //@line 393 "xmlrole.c"
        var $2=$1; //@line 393 "xmlrole.c"
        HEAP[$2]=(FUNCTION_TABLE_OFFSET + 120); //@line 393 "xmlrole.c"
        var $3=$tok_addr; //@line 394 "xmlrole.c"
        var $4=($3)==12; //@line 394 "xmlrole.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 394 "xmlrole.c"
      case 1: // $bb
        $0=57; //@line 395 "xmlrole.c"
        __label__ = 3; break; //@line 395 "xmlrole.c"
      case 2: // $bb1
        var $5=$state_addr; //@line 396 "xmlrole.c"
        var $6=$tok_addr; //@line 396 "xmlrole.c"
        var $7=$ptr_addr; //@line 396 "xmlrole.c"
        var $8=$end_addr; //@line 396 "xmlrole.c"
        var $9=$enc_addr; //@line 396 "xmlrole.c"
        var $10=_externalSubset1($5, $6, $7, $8, $9); //@line 396 "xmlrole.c"
        $0=$10; //@line 396 "xmlrole.c"
        __label__ = 3; break; //@line 396 "xmlrole.c"
      case 3: // $bb2
        var $11=$0; //@line 395 "xmlrole.c"
        $retval=$11; //@line 395 "xmlrole.c"
        var $retval3=$retval; //@line 395 "xmlrole.c"
        ;
        return $retval3; //@line 395 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _externalSubset1($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 406 "xmlrole.c"
        if ($1 == -4) {
          __label__ = 5; break;
        }
        else if ($1 == 15) {
          __label__ = 4; break;
        }
        else if ($1 == 26) {
          __label__ = 8; break;
        }
        else if ($1 == 33) {
          __label__ = 1; break;
        }
        else if ($1 == 34) {
          __label__ = 2; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 1: // $bb
        var $2=$state_addr; //@line 408 "xmlrole.c"
        var $3=$2; //@line 408 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 122); //@line 408 "xmlrole.c"
        $0=0; //@line 409 "xmlrole.c"
        __label__ = 9; break; //@line 409 "xmlrole.c"
      case 2: // $bb1
        var $4=$state_addr; //@line 411 "xmlrole.c"
        var $5=$4+12; //@line 411 "xmlrole.c"
        var $6=HEAP[$5]; //@line 411 "xmlrole.c"
        var $7=($6)==0; //@line 411 "xmlrole.c"
        if ($7) { __label__ = 8; break; } else { __label__ = 3; break; } //@line 411 "xmlrole.c"
      case 3: // $bb2
        var $8=$state_addr; //@line 413 "xmlrole.c"
        var $9=$8+12; //@line 413 "xmlrole.c"
        var $10=HEAP[$9]; //@line 413 "xmlrole.c"
        var $11=($10) - 1; //@line 413 "xmlrole.c"
        var $12=$state_addr; //@line 413 "xmlrole.c"
        var $13=$12+12; //@line 413 "xmlrole.c"
        HEAP[$13]=$11; //@line 413 "xmlrole.c"
        $0=0; //@line 414 "xmlrole.c"
        __label__ = 9; break; //@line 414 "xmlrole.c"
      case 4: // $bb3
        $0=0; //@line 416 "xmlrole.c"
        __label__ = 9; break; //@line 416 "xmlrole.c"
      case 5: // $bb5
        var $14=$state_addr; //@line 420 "xmlrole.c"
        var $15=$14+12; //@line 420 "xmlrole.c"
        var $16=HEAP[$15]; //@line 420 "xmlrole.c"
        var $17=($16)!=0; //@line 420 "xmlrole.c"
        if ($17) { __label__ = 8; break; } else { __label__ = 6; break; } //@line 420 "xmlrole.c"
      case 6: // $bb6
        $0=0; //@line 422 "xmlrole.c"
        __label__ = 9; break; //@line 422 "xmlrole.c"
      case 7: // $bb7
        var $18=$state_addr; //@line 424 "xmlrole.c"
        var $19=$tok_addr; //@line 424 "xmlrole.c"
        var $20=$ptr_addr; //@line 424 "xmlrole.c"
        var $21=$end_addr; //@line 424 "xmlrole.c"
        var $22=$enc_addr; //@line 424 "xmlrole.c"
        var $23=_internalSubset($18, $19, $20, $21, $22); //@line 424 "xmlrole.c"
        $0=$23; //@line 424 "xmlrole.c"
        __label__ = 9; break; //@line 424 "xmlrole.c"
      case 8: // $bb8
        var $24=$state_addr; //@line 426 "xmlrole.c"
        var $25=$tok_addr; //@line 426 "xmlrole.c"
        var $26=_common($24, $25); //@line 426 "xmlrole.c"
        $0=$26; //@line 426 "xmlrole.c"
        __label__ = 9; break; //@line 426 "xmlrole.c"
      case 9: // $bb9
        var $27=$0; //@line 409 "xmlrole.c"
        $retval=$27; //@line 409 "xmlrole.c"
        var $retval10=$retval; //@line 409 "xmlrole.c"
        ;
        return $retval10; //@line 409 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity0($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 438 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 3; break;
        }
        else if ($1 == 22) {
          __label__ = 2; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $bb
        $0=11; //@line 440 "xmlrole.c"
        __label__ = 5; break; //@line 440 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 442 "xmlrole.c"
        var $3=$2; //@line 442 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 124); //@line 442 "xmlrole.c"
        $0=11; //@line 443 "xmlrole.c"
        __label__ = 5; break; //@line 443 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 445 "xmlrole.c"
        var $5=$4; //@line 445 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 126); //@line 445 "xmlrole.c"
        $0=9; //@line 446 "xmlrole.c"
        __label__ = 5; break; //@line 446 "xmlrole.c"
      case 4: // $bb3
        var $6=$state_addr; //@line 448 "xmlrole.c"
        var $7=$tok_addr; //@line 448 "xmlrole.c"
        var $8=_common($6, $7); //@line 448 "xmlrole.c"
        $0=$8; //@line 448 "xmlrole.c"
        __label__ = 5; break; //@line 448 "xmlrole.c"
      case 5: // $bb4
        var $9=$0; //@line 440 "xmlrole.c"
        $retval=$9; //@line 440 "xmlrole.c"
        var $retval5=$retval; //@line 440 "xmlrole.c"
        ;
        return $retval5; //@line 440 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity1($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 458 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=11; //@line 460 "xmlrole.c"
        __label__ = 4; break; //@line 460 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 462 "xmlrole.c"
        var $3=$2; //@line 462 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 128); //@line 462 "xmlrole.c"
        $0=10; //@line 463 "xmlrole.c"
        __label__ = 4; break; //@line 463 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 465 "xmlrole.c"
        var $5=$tok_addr; //@line 465 "xmlrole.c"
        var $6=_common($4, $5); //@line 465 "xmlrole.c"
        $0=$6; //@line 465 "xmlrole.c"
        __label__ = 4; break; //@line 465 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 460 "xmlrole.c"
        $retval=$7; //@line 460 "xmlrole.c"
        var $retval4=$retval; //@line 460 "xmlrole.c"
        ;
        return $retval4; //@line 460 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity2($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 475 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 27) {
          __label__ = 6; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 1: // $bb
        $0=11; //@line 477 "xmlrole.c"
        __label__ = 8; break; //@line 477 "xmlrole.c"
      case 2: // $bb1
        var $2=$enc_addr; //@line 479 "xmlrole.c"
        var $3=$2+28; //@line 479 "xmlrole.c"
        var $4=HEAP[$3]; //@line 479 "xmlrole.c"
        var $5=$enc_addr; //@line 479 "xmlrole.c"
        var $6=$ptr_addr; //@line 479 "xmlrole.c"
        var $7=$end_addr; //@line 479 "xmlrole.c"
        var $8=FUNCTION_TABLE[$4]($5, $6, $7, _KW_SYSTEM); //@line 479 "xmlrole.c"
        var $9=($8)!=0; //@line 479 "xmlrole.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 479 "xmlrole.c"
      case 3: // $bb2
        var $10=$state_addr; //@line 480 "xmlrole.c"
        var $11=$10; //@line 480 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 130); //@line 480 "xmlrole.c"
        $0=11; //@line 481 "xmlrole.c"
        __label__ = 8; break; //@line 481 "xmlrole.c"
      case 4: // $bb3
        var $12=$enc_addr; //@line 483 "xmlrole.c"
        var $13=$12+28; //@line 483 "xmlrole.c"
        var $14=HEAP[$13]; //@line 483 "xmlrole.c"
        var $15=$enc_addr; //@line 483 "xmlrole.c"
        var $16=$ptr_addr; //@line 483 "xmlrole.c"
        var $17=$end_addr; //@line 483 "xmlrole.c"
        var $18=FUNCTION_TABLE[$14]($15, $16, $17, _KW_PUBLIC); //@line 483 "xmlrole.c"
        var $19=($18)!=0; //@line 483 "xmlrole.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 483 "xmlrole.c"
      case 5: // $bb4
        var $20=$state_addr; //@line 484 "xmlrole.c"
        var $21=$20; //@line 484 "xmlrole.c"
        HEAP[$21]=(FUNCTION_TABLE_OFFSET + 132); //@line 484 "xmlrole.c"
        $0=11; //@line 485 "xmlrole.c"
        __label__ = 8; break; //@line 485 "xmlrole.c"
      case 6: // $bb6
        var $22=$state_addr; //@line 489 "xmlrole.c"
        var $23=$22; //@line 489 "xmlrole.c"
        HEAP[$23]=(FUNCTION_TABLE_OFFSET + 134); //@line 489 "xmlrole.c"
        var $24=$state_addr; //@line 490 "xmlrole.c"
        var $25=$24+8; //@line 490 "xmlrole.c"
        HEAP[$25]=11; //@line 490 "xmlrole.c"
        $0=12; //@line 491 "xmlrole.c"
        __label__ = 8; break; //@line 491 "xmlrole.c"
      case 7: // $bb7
        var $26=$state_addr; //@line 493 "xmlrole.c"
        var $27=$tok_addr; //@line 493 "xmlrole.c"
        var $28=_common($26, $27); //@line 493 "xmlrole.c"
        $0=$28; //@line 493 "xmlrole.c"
        __label__ = 8; break; //@line 493 "xmlrole.c"
      case 8: // $bb8
        var $29=$0; //@line 477 "xmlrole.c"
        $retval=$29; //@line 477 "xmlrole.c"
        var $retval9=$retval; //@line 477 "xmlrole.c"
        ;
        return $retval9; //@line 477 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity3($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 503 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=11; //@line 505 "xmlrole.c"
        __label__ = 4; break; //@line 505 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 507 "xmlrole.c"
        var $3=$2; //@line 507 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 130); //@line 507 "xmlrole.c"
        $0=14; //@line 508 "xmlrole.c"
        __label__ = 4; break; //@line 508 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 510 "xmlrole.c"
        var $5=$tok_addr; //@line 510 "xmlrole.c"
        var $6=_common($4, $5); //@line 510 "xmlrole.c"
        $0=$6; //@line 510 "xmlrole.c"
        __label__ = 4; break; //@line 510 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 505 "xmlrole.c"
        $retval=$7; //@line 505 "xmlrole.c"
        var $retval4=$retval; //@line 505 "xmlrole.c"
        ;
        return $retval4; //@line 505 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity4($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 520 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=11; //@line 522 "xmlrole.c"
        __label__ = 4; break; //@line 522 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 524 "xmlrole.c"
        var $3=$2; //@line 524 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 136); //@line 524 "xmlrole.c"
        $0=13; //@line 525 "xmlrole.c"
        __label__ = 4; break; //@line 525 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 527 "xmlrole.c"
        var $5=$tok_addr; //@line 527 "xmlrole.c"
        var $6=_common($4, $5); //@line 527 "xmlrole.c"
        $0=$6; //@line 527 "xmlrole.c"
        __label__ = 4; break; //@line 527 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 522 "xmlrole.c"
        $retval=$7; //@line 522 "xmlrole.c"
        var $retval4=$retval; //@line 522 "xmlrole.c"
        ;
        return $retval4; //@line 522 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity5($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $iftmp_0;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 537 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 2; break;
        }
        else if ($1 == 18) {
          __label__ = 6; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $bb
        $0=11; //@line 539 "xmlrole.c"
        __label__ = 9; break; //@line 539 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 541 "xmlrole.c"
        var $3=$2+16; //@line 541 "xmlrole.c"
        var $4=HEAP[$3]; //@line 541 "xmlrole.c"
        var $5=($4)!=0; //@line 541 "xmlrole.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 541 "xmlrole.c"
      case 3: // $bb2
        $iftmp_0=(FUNCTION_TABLE_OFFSET + 100); //@line 541 "xmlrole.c"
        __label__ = 5; break; //@line 541 "xmlrole.c"
      case 4: // $bb3
        $iftmp_0=(FUNCTION_TABLE_OFFSET + 120); //@line 541 "xmlrole.c"
        __label__ = 5; break; //@line 541 "xmlrole.c"
      case 5: // $bb4
        var $6=$state_addr; //@line 541 "xmlrole.c"
        var $7=$6; //@line 541 "xmlrole.c"
        var $8=$iftmp_0; //@line 541 "xmlrole.c"
        HEAP[$7]=$8; //@line 541 "xmlrole.c"
        $0=15; //@line 542 "xmlrole.c"
        __label__ = 9; break; //@line 542 "xmlrole.c"
      case 6: // $bb5
        var $9=$enc_addr; //@line 544 "xmlrole.c"
        var $10=$9+28; //@line 544 "xmlrole.c"
        var $11=HEAP[$10]; //@line 544 "xmlrole.c"
        var $12=$enc_addr; //@line 544 "xmlrole.c"
        var $13=$ptr_addr; //@line 544 "xmlrole.c"
        var $14=$end_addr; //@line 544 "xmlrole.c"
        var $15=FUNCTION_TABLE[$11]($12, $13, $14, _KW_NDATA); //@line 544 "xmlrole.c"
        var $16=($15)!=0; //@line 544 "xmlrole.c"
        if ($16) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 544 "xmlrole.c"
      case 7: // $bb6
        var $17=$state_addr; //@line 545 "xmlrole.c"
        var $18=$17; //@line 545 "xmlrole.c"
        HEAP[$18]=(FUNCTION_TABLE_OFFSET + 138); //@line 545 "xmlrole.c"
        $0=11; //@line 546 "xmlrole.c"
        __label__ = 9; break; //@line 546 "xmlrole.c"
      case 8: // $bb7
        var $19=$state_addr; //@line 550 "xmlrole.c"
        var $20=$tok_addr; //@line 550 "xmlrole.c"
        var $21=_common($19, $20); //@line 550 "xmlrole.c"
        $0=$21; //@line 550 "xmlrole.c"
        __label__ = 9; break; //@line 550 "xmlrole.c"
      case 9: // $bb8
        var $22=$0; //@line 539 "xmlrole.c"
        $retval=$22; //@line 539 "xmlrole.c"
        var $retval9=$retval; //@line 539 "xmlrole.c"
        ;
        return $retval9; //@line 539 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity6($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 560 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=11; //@line 562 "xmlrole.c"
        __label__ = 4; break; //@line 562 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 564 "xmlrole.c"
        var $3=$2; //@line 564 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 134); //@line 564 "xmlrole.c"
        var $4=$state_addr; //@line 565 "xmlrole.c"
        var $5=$4+8; //@line 565 "xmlrole.c"
        HEAP[$5]=11; //@line 565 "xmlrole.c"
        $0=16; //@line 566 "xmlrole.c"
        __label__ = 4; break; //@line 566 "xmlrole.c"
      case 3: // $bb2
        var $6=$state_addr; //@line 568 "xmlrole.c"
        var $7=$tok_addr; //@line 568 "xmlrole.c"
        var $8=_common($6, $7); //@line 568 "xmlrole.c"
        $0=$8; //@line 568 "xmlrole.c"
        __label__ = 4; break; //@line 568 "xmlrole.c"
      case 4: // $bb3
        var $9=$0; //@line 562 "xmlrole.c"
        $retval=$9; //@line 562 "xmlrole.c"
        var $retval4=$retval; //@line 562 "xmlrole.c"
        ;
        return $retval4; //@line 562 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity7($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 578 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 27) {
          __label__ = 6; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 1: // $bb
        $0=11; //@line 580 "xmlrole.c"
        __label__ = 8; break; //@line 580 "xmlrole.c"
      case 2: // $bb1
        var $2=$enc_addr; //@line 582 "xmlrole.c"
        var $3=$2+28; //@line 582 "xmlrole.c"
        var $4=HEAP[$3]; //@line 582 "xmlrole.c"
        var $5=$enc_addr; //@line 582 "xmlrole.c"
        var $6=$ptr_addr; //@line 582 "xmlrole.c"
        var $7=$end_addr; //@line 582 "xmlrole.c"
        var $8=FUNCTION_TABLE[$4]($5, $6, $7, _KW_SYSTEM); //@line 582 "xmlrole.c"
        var $9=($8)!=0; //@line 582 "xmlrole.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 582 "xmlrole.c"
      case 3: // $bb2
        var $10=$state_addr; //@line 583 "xmlrole.c"
        var $11=$10; //@line 583 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 140); //@line 583 "xmlrole.c"
        $0=11; //@line 584 "xmlrole.c"
        __label__ = 8; break; //@line 584 "xmlrole.c"
      case 4: // $bb3
        var $12=$enc_addr; //@line 586 "xmlrole.c"
        var $13=$12+28; //@line 586 "xmlrole.c"
        var $14=HEAP[$13]; //@line 586 "xmlrole.c"
        var $15=$enc_addr; //@line 586 "xmlrole.c"
        var $16=$ptr_addr; //@line 586 "xmlrole.c"
        var $17=$end_addr; //@line 586 "xmlrole.c"
        var $18=FUNCTION_TABLE[$14]($15, $16, $17, _KW_PUBLIC); //@line 586 "xmlrole.c"
        var $19=($18)!=0; //@line 586 "xmlrole.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 586 "xmlrole.c"
      case 5: // $bb4
        var $20=$state_addr; //@line 587 "xmlrole.c"
        var $21=$20; //@line 587 "xmlrole.c"
        HEAP[$21]=(FUNCTION_TABLE_OFFSET + 142); //@line 587 "xmlrole.c"
        $0=11; //@line 588 "xmlrole.c"
        __label__ = 8; break; //@line 588 "xmlrole.c"
      case 6: // $bb6
        var $22=$state_addr; //@line 592 "xmlrole.c"
        var $23=$22; //@line 592 "xmlrole.c"
        HEAP[$23]=(FUNCTION_TABLE_OFFSET + 134); //@line 592 "xmlrole.c"
        var $24=$state_addr; //@line 593 "xmlrole.c"
        var $25=$24+8; //@line 593 "xmlrole.c"
        HEAP[$25]=11; //@line 593 "xmlrole.c"
        $0=12; //@line 594 "xmlrole.c"
        __label__ = 8; break; //@line 594 "xmlrole.c"
      case 7: // $bb7
        var $26=$state_addr; //@line 596 "xmlrole.c"
        var $27=$tok_addr; //@line 596 "xmlrole.c"
        var $28=_common($26, $27); //@line 596 "xmlrole.c"
        $0=$28; //@line 596 "xmlrole.c"
        __label__ = 8; break; //@line 596 "xmlrole.c"
      case 8: // $bb8
        var $29=$0; //@line 580 "xmlrole.c"
        $retval=$29; //@line 580 "xmlrole.c"
        var $retval9=$retval; //@line 580 "xmlrole.c"
        ;
        return $retval9; //@line 580 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity8($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 606 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=11; //@line 608 "xmlrole.c"
        __label__ = 4; break; //@line 608 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 610 "xmlrole.c"
        var $3=$2; //@line 610 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 140); //@line 610 "xmlrole.c"
        $0=14; //@line 611 "xmlrole.c"
        __label__ = 4; break; //@line 611 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 613 "xmlrole.c"
        var $5=$tok_addr; //@line 613 "xmlrole.c"
        var $6=_common($4, $5); //@line 613 "xmlrole.c"
        $0=$6; //@line 613 "xmlrole.c"
        __label__ = 4; break; //@line 613 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 608 "xmlrole.c"
        $retval=$7; //@line 608 "xmlrole.c"
        var $retval4=$retval; //@line 608 "xmlrole.c"
        ;
        return $retval4; //@line 608 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity9($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 623 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=11; //@line 625 "xmlrole.c"
        __label__ = 4; break; //@line 625 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 627 "xmlrole.c"
        var $3=$2; //@line 627 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 144); //@line 627 "xmlrole.c"
        $0=13; //@line 628 "xmlrole.c"
        __label__ = 4; break; //@line 628 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 630 "xmlrole.c"
        var $5=$tok_addr; //@line 630 "xmlrole.c"
        var $6=_common($4, $5); //@line 630 "xmlrole.c"
        $0=$6; //@line 630 "xmlrole.c"
        __label__ = 4; break; //@line 630 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 625 "xmlrole.c"
        $retval=$7; //@line 625 "xmlrole.c"
        var $retval4=$retval; //@line 625 "xmlrole.c"
        ;
        return $retval4; //@line 625 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity10($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $iftmp_1;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 640 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 2; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 1: // $bb
        $0=11; //@line 642 "xmlrole.c"
        __label__ = 7; break; //@line 642 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 644 "xmlrole.c"
        var $3=$2+16; //@line 644 "xmlrole.c"
        var $4=HEAP[$3]; //@line 644 "xmlrole.c"
        var $5=($4)!=0; //@line 644 "xmlrole.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 644 "xmlrole.c"
      case 3: // $bb2
        $iftmp_1=(FUNCTION_TABLE_OFFSET + 100); //@line 644 "xmlrole.c"
        __label__ = 5; break; //@line 644 "xmlrole.c"
      case 4: // $bb3
        $iftmp_1=(FUNCTION_TABLE_OFFSET + 120); //@line 644 "xmlrole.c"
        __label__ = 5; break; //@line 644 "xmlrole.c"
      case 5: // $bb4
        var $6=$state_addr; //@line 644 "xmlrole.c"
        var $7=$6; //@line 644 "xmlrole.c"
        var $8=$iftmp_1; //@line 644 "xmlrole.c"
        HEAP[$7]=$8; //@line 644 "xmlrole.c"
        $0=15; //@line 645 "xmlrole.c"
        __label__ = 7; break; //@line 645 "xmlrole.c"
      case 6: // $bb5
        var $9=$state_addr; //@line 647 "xmlrole.c"
        var $10=$tok_addr; //@line 647 "xmlrole.c"
        var $11=_common($9, $10); //@line 647 "xmlrole.c"
        $0=$11; //@line 647 "xmlrole.c"
        __label__ = 7; break; //@line 647 "xmlrole.c"
      case 7: // $bb6
        var $12=$0; //@line 642 "xmlrole.c"
        $retval=$12; //@line 642 "xmlrole.c"
        var $retval7=$retval; //@line 642 "xmlrole.c"
        ;
        return $retval7; //@line 642 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _notation0($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 657 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=17; //@line 659 "xmlrole.c"
        __label__ = 4; break; //@line 659 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 661 "xmlrole.c"
        var $3=$2; //@line 661 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 146); //@line 661 "xmlrole.c"
        $0=18; //@line 662 "xmlrole.c"
        __label__ = 4; break; //@line 662 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 664 "xmlrole.c"
        var $5=$tok_addr; //@line 664 "xmlrole.c"
        var $6=_common($4, $5); //@line 664 "xmlrole.c"
        $0=$6; //@line 664 "xmlrole.c"
        __label__ = 4; break; //@line 664 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 659 "xmlrole.c"
        $retval=$7; //@line 659 "xmlrole.c"
        var $retval4=$retval; //@line 659 "xmlrole.c"
        ;
        return $retval4; //@line 659 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _notation1($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 674 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 1: // $bb
        $0=17; //@line 676 "xmlrole.c"
        __label__ = 7; break; //@line 676 "xmlrole.c"
      case 2: // $bb1
        var $2=$enc_addr; //@line 678 "xmlrole.c"
        var $3=$2+28; //@line 678 "xmlrole.c"
        var $4=HEAP[$3]; //@line 678 "xmlrole.c"
        var $5=$enc_addr; //@line 678 "xmlrole.c"
        var $6=$ptr_addr; //@line 678 "xmlrole.c"
        var $7=$end_addr; //@line 678 "xmlrole.c"
        var $8=FUNCTION_TABLE[$4]($5, $6, $7, _KW_SYSTEM); //@line 678 "xmlrole.c"
        var $9=($8)!=0; //@line 678 "xmlrole.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 678 "xmlrole.c"
      case 3: // $bb2
        var $10=$state_addr; //@line 679 "xmlrole.c"
        var $11=$10; //@line 679 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 148); //@line 679 "xmlrole.c"
        $0=17; //@line 680 "xmlrole.c"
        __label__ = 7; break; //@line 680 "xmlrole.c"
      case 4: // $bb3
        var $12=$enc_addr; //@line 682 "xmlrole.c"
        var $13=$12+28; //@line 682 "xmlrole.c"
        var $14=HEAP[$13]; //@line 682 "xmlrole.c"
        var $15=$enc_addr; //@line 682 "xmlrole.c"
        var $16=$ptr_addr; //@line 682 "xmlrole.c"
        var $17=$end_addr; //@line 682 "xmlrole.c"
        var $18=FUNCTION_TABLE[$14]($15, $16, $17, _KW_PUBLIC); //@line 682 "xmlrole.c"
        var $19=($18)!=0; //@line 682 "xmlrole.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 682 "xmlrole.c"
      case 5: // $bb4
        var $20=$state_addr; //@line 683 "xmlrole.c"
        var $21=$20; //@line 683 "xmlrole.c"
        HEAP[$21]=(FUNCTION_TABLE_OFFSET + 150); //@line 683 "xmlrole.c"
        $0=17; //@line 684 "xmlrole.c"
        __label__ = 7; break; //@line 684 "xmlrole.c"
      case 6: // $bb5
        var $22=$state_addr; //@line 688 "xmlrole.c"
        var $23=$tok_addr; //@line 688 "xmlrole.c"
        var $24=_common($22, $23); //@line 688 "xmlrole.c"
        $0=$24; //@line 688 "xmlrole.c"
        __label__ = 7; break; //@line 688 "xmlrole.c"
      case 7: // $bb6
        var $25=$0; //@line 676 "xmlrole.c"
        $retval=$25; //@line 676 "xmlrole.c"
        var $retval7=$retval; //@line 676 "xmlrole.c"
        ;
        return $retval7; //@line 676 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _notation2($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 698 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=17; //@line 700 "xmlrole.c"
        __label__ = 4; break; //@line 700 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 702 "xmlrole.c"
        var $3=$2; //@line 702 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 152); //@line 702 "xmlrole.c"
        $0=21; //@line 703 "xmlrole.c"
        __label__ = 4; break; //@line 703 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 705 "xmlrole.c"
        var $5=$tok_addr; //@line 705 "xmlrole.c"
        var $6=_common($4, $5); //@line 705 "xmlrole.c"
        $0=$6; //@line 705 "xmlrole.c"
        __label__ = 4; break; //@line 705 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 700 "xmlrole.c"
        $retval=$7; //@line 700 "xmlrole.c"
        var $retval4=$retval; //@line 700 "xmlrole.c"
        ;
        return $retval4; //@line 700 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _notation3($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 715 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=17; //@line 717 "xmlrole.c"
        __label__ = 4; break; //@line 717 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 719 "xmlrole.c"
        var $3=$2; //@line 719 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 134); //@line 719 "xmlrole.c"
        var $4=$state_addr; //@line 720 "xmlrole.c"
        var $5=$4+8; //@line 720 "xmlrole.c"
        HEAP[$5]=17; //@line 720 "xmlrole.c"
        $0=19; //@line 721 "xmlrole.c"
        __label__ = 4; break; //@line 721 "xmlrole.c"
      case 3: // $bb2
        var $6=$state_addr; //@line 723 "xmlrole.c"
        var $7=$tok_addr; //@line 723 "xmlrole.c"
        var $8=_common($6, $7); //@line 723 "xmlrole.c"
        $0=$8; //@line 723 "xmlrole.c"
        __label__ = 4; break; //@line 723 "xmlrole.c"
      case 4: // $bb3
        var $9=$0; //@line 717 "xmlrole.c"
        $retval=$9; //@line 717 "xmlrole.c"
        var $retval4=$retval; //@line 717 "xmlrole.c"
        ;
        return $retval4; //@line 717 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _notation4($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $iftmp_2;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 733 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 3; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 1: // $bb
        $0=17; //@line 735 "xmlrole.c"
        __label__ = 8; break; //@line 735 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 737 "xmlrole.c"
        var $3=$2; //@line 737 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 134); //@line 737 "xmlrole.c"
        var $4=$state_addr; //@line 738 "xmlrole.c"
        var $5=$4+8; //@line 738 "xmlrole.c"
        HEAP[$5]=17; //@line 738 "xmlrole.c"
        $0=19; //@line 739 "xmlrole.c"
        __label__ = 8; break; //@line 739 "xmlrole.c"
      case 3: // $bb2
        var $6=$state_addr; //@line 741 "xmlrole.c"
        var $7=$6+16; //@line 741 "xmlrole.c"
        var $8=HEAP[$7]; //@line 741 "xmlrole.c"
        var $9=($8)!=0; //@line 741 "xmlrole.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 741 "xmlrole.c"
      case 4: // $bb3
        $iftmp_2=(FUNCTION_TABLE_OFFSET + 100); //@line 741 "xmlrole.c"
        __label__ = 6; break; //@line 741 "xmlrole.c"
      case 5: // $bb4
        $iftmp_2=(FUNCTION_TABLE_OFFSET + 120); //@line 741 "xmlrole.c"
        __label__ = 6; break; //@line 741 "xmlrole.c"
      case 6: // $bb5
        var $10=$state_addr; //@line 741 "xmlrole.c"
        var $11=$10; //@line 741 "xmlrole.c"
        var $12=$iftmp_2; //@line 741 "xmlrole.c"
        HEAP[$11]=$12; //@line 741 "xmlrole.c"
        $0=20; //@line 742 "xmlrole.c"
        __label__ = 8; break; //@line 742 "xmlrole.c"
      case 7: // $bb6
        var $13=$state_addr; //@line 744 "xmlrole.c"
        var $14=$tok_addr; //@line 744 "xmlrole.c"
        var $15=_common($13, $14); //@line 744 "xmlrole.c"
        $0=$15; //@line 744 "xmlrole.c"
        __label__ = 8; break; //@line 744 "xmlrole.c"
      case 8: // $bb7
        var $16=$0; //@line 735 "xmlrole.c"
        $retval=$16; //@line 735 "xmlrole.c"
        var $retval8=$retval; //@line 735 "xmlrole.c"
        ;
        return $retval8; //@line 735 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist0($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 754 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 41) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=33; //@line 756 "xmlrole.c"
        __label__ = 4; break; //@line 756 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 759 "xmlrole.c"
        var $3=$2; //@line 759 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 154); //@line 759 "xmlrole.c"
        $0=34; //@line 760 "xmlrole.c"
        __label__ = 4; break; //@line 760 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 762 "xmlrole.c"
        var $5=$tok_addr; //@line 762 "xmlrole.c"
        var $6=_common($4, $5); //@line 762 "xmlrole.c"
        $0=$6; //@line 762 "xmlrole.c"
        __label__ = 4; break; //@line 762 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 756 "xmlrole.c"
        $retval=$7; //@line 756 "xmlrole.c"
        var $retval4=$retval; //@line 756 "xmlrole.c"
        ;
        return $retval4; //@line 756 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist1($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $iftmp_3;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 772 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 2; break;
        }
        else if ($1 == 18) {
          __label__ = 6; break;
        }
        else if ($1 == 41) {
          __label__ = 6; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 1: // $bb
        $0=33; //@line 774 "xmlrole.c"
        __label__ = 8; break; //@line 774 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 776 "xmlrole.c"
        var $3=$2+16; //@line 776 "xmlrole.c"
        var $4=HEAP[$3]; //@line 776 "xmlrole.c"
        var $5=($4)!=0; //@line 776 "xmlrole.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 776 "xmlrole.c"
      case 3: // $bb2
        $iftmp_3=(FUNCTION_TABLE_OFFSET + 100); //@line 776 "xmlrole.c"
        __label__ = 5; break; //@line 776 "xmlrole.c"
      case 4: // $bb3
        $iftmp_3=(FUNCTION_TABLE_OFFSET + 120); //@line 776 "xmlrole.c"
        __label__ = 5; break; //@line 776 "xmlrole.c"
      case 5: // $bb4
        var $6=$state_addr; //@line 776 "xmlrole.c"
        var $7=$6; //@line 776 "xmlrole.c"
        var $8=$iftmp_3; //@line 776 "xmlrole.c"
        HEAP[$7]=$8; //@line 776 "xmlrole.c"
        $0=33; //@line 777 "xmlrole.c"
        __label__ = 8; break; //@line 777 "xmlrole.c"
      case 6: // $bb5
        var $9=$state_addr; //@line 780 "xmlrole.c"
        var $10=$9; //@line 780 "xmlrole.c"
        HEAP[$10]=(FUNCTION_TABLE_OFFSET + 156); //@line 780 "xmlrole.c"
        $0=22; //@line 781 "xmlrole.c"
        __label__ = 8; break; //@line 781 "xmlrole.c"
      case 7: // $bb6
        var $11=$state_addr; //@line 783 "xmlrole.c"
        var $12=$tok_addr; //@line 783 "xmlrole.c"
        var $13=_common($11, $12); //@line 783 "xmlrole.c"
        $0=$13; //@line 783 "xmlrole.c"
        __label__ = 8; break; //@line 783 "xmlrole.c"
      case 8: // $bb7
        var $14=$0; //@line 774 "xmlrole.c"
        $retval=$14; //@line 774 "xmlrole.c"
        var $retval8=$retval; //@line 774 "xmlrole.c"
        ;
        return $retval8; //@line 774 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist2($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        var $i;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 793 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 23) {
          __label__ = 9; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 1: // $bb
        $0=33; //@line 795 "xmlrole.c"
        __label__ = 11; break; //@line 795 "xmlrole.c"
      case 2: // $bb1
        $i=0; //@line 809 "xmlrole.c"
        __lastLabel__ = 2; __label__ = 6; break; //@line 809 "xmlrole.c"
      case 3: // $bb2
        var $2=$i; //@line 810 "xmlrole.c"
        var $3=_types_1939+$2*4; //@line 810 "xmlrole.c"
        var $4=HEAP[$3]; //@line 810 "xmlrole.c"
        var $5=$enc_addr; //@line 810 "xmlrole.c"
        var $6=$ptr_addr; //@line 810 "xmlrole.c"
        var $7=$end_addr; //@line 810 "xmlrole.c"
        var $8=FUNCTION_TABLE[$20]($5, $6, $7, $4); //@line 810 "xmlrole.c"
        var $9=($8)!=0; //@line 810 "xmlrole.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 810 "xmlrole.c"
      case 4: // $bb3
        var $10=$state_addr; //@line 811 "xmlrole.c"
        var $11=$10; //@line 811 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 158); //@line 811 "xmlrole.c"
        var $12=$i; //@line 812 "xmlrole.c"
        var $13=($12) + 23; //@line 812 "xmlrole.c"
        $0=$13; //@line 812 "xmlrole.c"
        __label__ = 11; break; //@line 812 "xmlrole.c"
      case 5: // $bb4
        var $14=$i; //@line 809 "xmlrole.c"
        var $15=($14) + 1; //@line 809 "xmlrole.c"
        $i=$15; //@line 809 "xmlrole.c"
        __lastLabel__ = 5; __label__ = 6; break; //@line 809 "xmlrole.c"
      case 6: // $bb5
        var $16=__lastLabel__ == 5 ? $15 : (0);
        var $17=($16) <= 7; //@line 809 "xmlrole.c"
        var $18=$enc_addr; //@line 810 "xmlrole.c"
        var $19=$18+28; //@line 810 "xmlrole.c"
        var $20=HEAP[$19]; //@line 810 "xmlrole.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 809 "xmlrole.c"
      case 7: // $bb6
        var $21=$enc_addr; //@line 815 "xmlrole.c"
        var $22=$ptr_addr; //@line 815 "xmlrole.c"
        var $23=$end_addr; //@line 815 "xmlrole.c"
        var $24=FUNCTION_TABLE[$20]($21, $22, $23, _KW_NOTATION); //@line 815 "xmlrole.c"
        var $25=($24)!=0; //@line 815 "xmlrole.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 815 "xmlrole.c"
      case 8: // $bb7
        var $26=$state_addr; //@line 816 "xmlrole.c"
        var $27=$26; //@line 816 "xmlrole.c"
        HEAP[$27]=(FUNCTION_TABLE_OFFSET + 160); //@line 816 "xmlrole.c"
        $0=33; //@line 817 "xmlrole.c"
        __label__ = 11; break; //@line 817 "xmlrole.c"
      case 9: // $bb9
        var $28=$state_addr; //@line 821 "xmlrole.c"
        var $29=$28; //@line 821 "xmlrole.c"
        HEAP[$29]=(FUNCTION_TABLE_OFFSET + 162); //@line 821 "xmlrole.c"
        $0=33; //@line 822 "xmlrole.c"
        __label__ = 11; break; //@line 822 "xmlrole.c"
      case 10: // $bb10
        var $30=$state_addr; //@line 824 "xmlrole.c"
        var $31=$tok_addr; //@line 824 "xmlrole.c"
        var $32=_common($30, $31); //@line 824 "xmlrole.c"
        $0=$32; //@line 824 "xmlrole.c"
        __label__ = 11; break; //@line 824 "xmlrole.c"
      case 11: // $bb11
        var $33=$0; //@line 795 "xmlrole.c"
        $retval=$33; //@line 795 "xmlrole.c"
        var $retval12=$retval; //@line 795 "xmlrole.c"
        ;
        return $retval12; //@line 795 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist3($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 834 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 19) {
          __label__ = 2; break;
        }
        else if ($1 == 41) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=33; //@line 836 "xmlrole.c"
        __label__ = 4; break; //@line 836 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 840 "xmlrole.c"
        var $3=$2; //@line 840 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 164); //@line 840 "xmlrole.c"
        $0=31; //@line 841 "xmlrole.c"
        __label__ = 4; break; //@line 841 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 843 "xmlrole.c"
        var $5=$tok_addr; //@line 843 "xmlrole.c"
        var $6=_common($4, $5); //@line 843 "xmlrole.c"
        $0=$6; //@line 843 "xmlrole.c"
        __label__ = 4; break; //@line 843 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 836 "xmlrole.c"
        $retval=$7; //@line 836 "xmlrole.c"
        var $retval4=$retval; //@line 836 "xmlrole.c"
        ;
        return $retval4; //@line 836 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist4($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 853 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 21) {
          __label__ = 3; break;
        }
        else if ($1 == 24) {
          __label__ = 2; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $bb
        $0=33; //@line 855 "xmlrole.c"
        __label__ = 5; break; //@line 855 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 857 "xmlrole.c"
        var $3=$2; //@line 857 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 158); //@line 857 "xmlrole.c"
        $0=33; //@line 858 "xmlrole.c"
        __label__ = 5; break; //@line 858 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 860 "xmlrole.c"
        var $5=$4; //@line 860 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 162); //@line 860 "xmlrole.c"
        $0=33; //@line 861 "xmlrole.c"
        __label__ = 5; break; //@line 861 "xmlrole.c"
      case 4: // $bb3
        var $6=$state_addr; //@line 863 "xmlrole.c"
        var $7=$tok_addr; //@line 863 "xmlrole.c"
        var $8=_common($6, $7); //@line 863 "xmlrole.c"
        $0=$8; //@line 863 "xmlrole.c"
        __label__ = 5; break; //@line 863 "xmlrole.c"
      case 5: // $bb4
        var $9=$0; //@line 855 "xmlrole.c"
        $retval=$9; //@line 855 "xmlrole.c"
        var $retval5=$retval; //@line 855 "xmlrole.c"
        ;
        return $retval5; //@line 855 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist5($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 873 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 23) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=33; //@line 875 "xmlrole.c"
        __label__ = 4; break; //@line 875 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 877 "xmlrole.c"
        var $3=$2; //@line 877 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 166); //@line 877 "xmlrole.c"
        $0=33; //@line 878 "xmlrole.c"
        __label__ = 4; break; //@line 878 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 880 "xmlrole.c"
        var $5=$tok_addr; //@line 880 "xmlrole.c"
        var $6=_common($4, $5); //@line 880 "xmlrole.c"
        $0=$6; //@line 880 "xmlrole.c"
        __label__ = 4; break; //@line 880 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 875 "xmlrole.c"
        $retval=$7; //@line 875 "xmlrole.c"
        var $retval4=$retval; //@line 875 "xmlrole.c"
        ;
        return $retval4; //@line 875 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist6($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 890 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=33; //@line 892 "xmlrole.c"
        __label__ = 4; break; //@line 892 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 894 "xmlrole.c"
        var $3=$2; //@line 894 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 168); //@line 894 "xmlrole.c"
        $0=32; //@line 895 "xmlrole.c"
        __label__ = 4; break; //@line 895 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 897 "xmlrole.c"
        var $5=$tok_addr; //@line 897 "xmlrole.c"
        var $6=_common($4, $5); //@line 897 "xmlrole.c"
        $0=$6; //@line 897 "xmlrole.c"
        __label__ = 4; break; //@line 897 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 892 "xmlrole.c"
        $retval=$7; //@line 892 "xmlrole.c"
        var $retval4=$retval; //@line 892 "xmlrole.c"
        ;
        return $retval4; //@line 892 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist7($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 907 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 21) {
          __label__ = 3; break;
        }
        else if ($1 == 24) {
          __label__ = 2; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $bb
        $0=33; //@line 909 "xmlrole.c"
        __label__ = 5; break; //@line 909 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 911 "xmlrole.c"
        var $3=$2; //@line 911 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 158); //@line 911 "xmlrole.c"
        $0=33; //@line 912 "xmlrole.c"
        __label__ = 5; break; //@line 912 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 914 "xmlrole.c"
        var $5=$4; //@line 914 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 166); //@line 914 "xmlrole.c"
        $0=33; //@line 915 "xmlrole.c"
        __label__ = 5; break; //@line 915 "xmlrole.c"
      case 4: // $bb3
        var $6=$state_addr; //@line 917 "xmlrole.c"
        var $7=$tok_addr; //@line 917 "xmlrole.c"
        var $8=_common($6, $7); //@line 917 "xmlrole.c"
        $0=$8; //@line 917 "xmlrole.c"
        __label__ = 5; break; //@line 917 "xmlrole.c"
      case 5: // $bb4
        var $9=$0; //@line 909 "xmlrole.c"
        $retval=$9; //@line 909 "xmlrole.c"
        var $retval5=$retval; //@line 909 "xmlrole.c"
        ;
        return $retval5; //@line 909 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist8($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 928 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 20) {
          __label__ = 2; break;
        }
        else if ($1 == 27) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 1: // $bb
        $0=33; //@line 930 "xmlrole.c"
        __label__ = 10; break; //@line 930 "xmlrole.c"
      case 2: // $bb1
        var $2=$enc_addr; //@line 932 "xmlrole.c"
        var $3=$2+28; //@line 932 "xmlrole.c"
        var $4=HEAP[$3]; //@line 932 "xmlrole.c"
        var $5=$enc_addr; //@line 932 "xmlrole.c"
        var $6=$5+68; //@line 932 "xmlrole.c"
        var $7=HEAP[$6]; //@line 932 "xmlrole.c"
        var $8=$ptr_addr; //@line 932 "xmlrole.c"
        var $9=$8+$7; //@line 932 "xmlrole.c"
        var $10=$enc_addr; //@line 932 "xmlrole.c"
        var $11=$end_addr; //@line 932 "xmlrole.c"
        var $12=FUNCTION_TABLE[$4]($10, $9, $11, _KW_IMPLIED); //@line 932 "xmlrole.c"
        var $13=($12)!=0; //@line 932 "xmlrole.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 932 "xmlrole.c"
      case 3: // $bb2
        var $14=$state_addr; //@line 936 "xmlrole.c"
        var $15=$14; //@line 936 "xmlrole.c"
        HEAP[$15]=(FUNCTION_TABLE_OFFSET + 154); //@line 936 "xmlrole.c"
        $0=35; //@line 937 "xmlrole.c"
        __label__ = 10; break; //@line 937 "xmlrole.c"
      case 4: // $bb3
        var $16=$enc_addr; //@line 939 "xmlrole.c"
        var $17=$16+28; //@line 939 "xmlrole.c"
        var $18=HEAP[$17]; //@line 939 "xmlrole.c"
        var $19=$enc_addr; //@line 939 "xmlrole.c"
        var $20=$19+68; //@line 939 "xmlrole.c"
        var $21=HEAP[$20]; //@line 939 "xmlrole.c"
        var $22=$ptr_addr; //@line 939 "xmlrole.c"
        var $23=$22+$21; //@line 939 "xmlrole.c"
        var $24=$enc_addr; //@line 939 "xmlrole.c"
        var $25=$end_addr; //@line 939 "xmlrole.c"
        var $26=FUNCTION_TABLE[$18]($24, $23, $25, _KW_REQUIRED); //@line 939 "xmlrole.c"
        var $27=($26)!=0; //@line 939 "xmlrole.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 939 "xmlrole.c"
      case 5: // $bb4
        var $28=$state_addr; //@line 943 "xmlrole.c"
        var $29=$28; //@line 943 "xmlrole.c"
        HEAP[$29]=(FUNCTION_TABLE_OFFSET + 154); //@line 943 "xmlrole.c"
        $0=36; //@line 944 "xmlrole.c"
        __label__ = 10; break; //@line 944 "xmlrole.c"
      case 6: // $bb5
        var $30=$enc_addr; //@line 946 "xmlrole.c"
        var $31=$30+28; //@line 946 "xmlrole.c"
        var $32=HEAP[$31]; //@line 946 "xmlrole.c"
        var $33=$enc_addr; //@line 946 "xmlrole.c"
        var $34=$33+68; //@line 946 "xmlrole.c"
        var $35=HEAP[$34]; //@line 946 "xmlrole.c"
        var $36=$ptr_addr; //@line 946 "xmlrole.c"
        var $37=$36+$35; //@line 946 "xmlrole.c"
        var $38=$enc_addr; //@line 946 "xmlrole.c"
        var $39=$end_addr; //@line 946 "xmlrole.c"
        var $40=FUNCTION_TABLE[$32]($38, $37, $39, _KW_FIXED); //@line 946 "xmlrole.c"
        var $41=($40)!=0; //@line 946 "xmlrole.c"
        if ($41) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 946 "xmlrole.c"
      case 7: // $bb6
        var $42=$state_addr; //@line 950 "xmlrole.c"
        var $43=$42; //@line 950 "xmlrole.c"
        HEAP[$43]=(FUNCTION_TABLE_OFFSET + 170); //@line 950 "xmlrole.c"
        $0=33; //@line 951 "xmlrole.c"
        __label__ = 10; break; //@line 951 "xmlrole.c"
      case 8: // $bb8
        var $44=$state_addr; //@line 955 "xmlrole.c"
        var $45=$44; //@line 955 "xmlrole.c"
        HEAP[$45]=(FUNCTION_TABLE_OFFSET + 154); //@line 955 "xmlrole.c"
        $0=37; //@line 956 "xmlrole.c"
        __label__ = 10; break; //@line 956 "xmlrole.c"
      case 9: // $bb9
        var $46=$state_addr; //@line 958 "xmlrole.c"
        var $47=$tok_addr; //@line 958 "xmlrole.c"
        var $48=_common($46, $47); //@line 958 "xmlrole.c"
        $0=$48; //@line 958 "xmlrole.c"
        __label__ = 10; break; //@line 958 "xmlrole.c"
      case 10: // $bb10
        var $49=$0; //@line 930 "xmlrole.c"
        $retval=$49; //@line 930 "xmlrole.c"
        var $retval11=$retval; //@line 930 "xmlrole.c"
        ;
        return $retval11; //@line 930 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist9($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 968 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=33; //@line 970 "xmlrole.c"
        __label__ = 4; break; //@line 970 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 972 "xmlrole.c"
        var $3=$2; //@line 972 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 154); //@line 972 "xmlrole.c"
        $0=38; //@line 973 "xmlrole.c"
        __label__ = 4; break; //@line 973 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 975 "xmlrole.c"
        var $5=$tok_addr; //@line 975 "xmlrole.c"
        var $6=_common($4, $5); //@line 975 "xmlrole.c"
        $0=$6; //@line 975 "xmlrole.c"
        __label__ = 4; break; //@line 975 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 970 "xmlrole.c"
        $retval=$7; //@line 970 "xmlrole.c"
        var $retval4=$retval; //@line 970 "xmlrole.c"
        ;
        return $retval4; //@line 970 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element0($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 985 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 41) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=39; //@line 987 "xmlrole.c"
        __label__ = 4; break; //@line 987 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 990 "xmlrole.c"
        var $3=$2; //@line 990 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 172); //@line 990 "xmlrole.c"
        $0=40; //@line 991 "xmlrole.c"
        __label__ = 4; break; //@line 991 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 993 "xmlrole.c"
        var $5=$tok_addr; //@line 993 "xmlrole.c"
        var $6=_common($4, $5); //@line 993 "xmlrole.c"
        $0=$6; //@line 993 "xmlrole.c"
        __label__ = 4; break; //@line 993 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 987 "xmlrole.c"
        $retval=$7; //@line 987 "xmlrole.c"
        var $retval4=$retval; //@line 987 "xmlrole.c"
        ;
        return $retval4; //@line 987 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element1($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 1003 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 23) {
          __label__ = 6; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 1: // $bb
        $0=39; //@line 1005 "xmlrole.c"
        __label__ = 8; break; //@line 1005 "xmlrole.c"
      case 2: // $bb1
        var $2=$enc_addr; //@line 1007 "xmlrole.c"
        var $3=$2+28; //@line 1007 "xmlrole.c"
        var $4=HEAP[$3]; //@line 1007 "xmlrole.c"
        var $5=$enc_addr; //@line 1007 "xmlrole.c"
        var $6=$ptr_addr; //@line 1007 "xmlrole.c"
        var $7=$end_addr; //@line 1007 "xmlrole.c"
        var $8=FUNCTION_TABLE[$4]($5, $6, $7, _KW_EMPTY); //@line 1007 "xmlrole.c"
        var $9=($8)!=0; //@line 1007 "xmlrole.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1007 "xmlrole.c"
      case 3: // $bb2
        var $10=$state_addr; //@line 1008 "xmlrole.c"
        var $11=$10; //@line 1008 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 134); //@line 1008 "xmlrole.c"
        var $12=$state_addr; //@line 1009 "xmlrole.c"
        var $13=$12+8; //@line 1009 "xmlrole.c"
        HEAP[$13]=39; //@line 1009 "xmlrole.c"
        $0=42; //@line 1010 "xmlrole.c"
        __label__ = 8; break; //@line 1010 "xmlrole.c"
      case 4: // $bb3
        var $14=$enc_addr; //@line 1012 "xmlrole.c"
        var $15=$14+28; //@line 1012 "xmlrole.c"
        var $16=HEAP[$15]; //@line 1012 "xmlrole.c"
        var $17=$enc_addr; //@line 1012 "xmlrole.c"
        var $18=$ptr_addr; //@line 1012 "xmlrole.c"
        var $19=$end_addr; //@line 1012 "xmlrole.c"
        var $20=FUNCTION_TABLE[$16]($17, $18, $19, _KW_ANY); //@line 1012 "xmlrole.c"
        var $21=($20)!=0; //@line 1012 "xmlrole.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 1012 "xmlrole.c"
      case 5: // $bb4
        var $22=$state_addr; //@line 1013 "xmlrole.c"
        var $23=$22; //@line 1013 "xmlrole.c"
        HEAP[$23]=(FUNCTION_TABLE_OFFSET + 134); //@line 1013 "xmlrole.c"
        var $24=$state_addr; //@line 1014 "xmlrole.c"
        var $25=$24+8; //@line 1014 "xmlrole.c"
        HEAP[$25]=39; //@line 1014 "xmlrole.c"
        $0=41; //@line 1015 "xmlrole.c"
        __label__ = 8; break; //@line 1015 "xmlrole.c"
      case 6: // $bb6
        var $26=$state_addr; //@line 1019 "xmlrole.c"
        var $27=$26; //@line 1019 "xmlrole.c"
        HEAP[$27]=(FUNCTION_TABLE_OFFSET + 174); //@line 1019 "xmlrole.c"
        var $28=$state_addr; //@line 1020 "xmlrole.c"
        var $29=$28+4; //@line 1020 "xmlrole.c"
        HEAP[$29]=1; //@line 1020 "xmlrole.c"
        $0=44; //@line 1021 "xmlrole.c"
        __label__ = 8; break; //@line 1021 "xmlrole.c"
      case 7: // $bb7
        var $30=$state_addr; //@line 1023 "xmlrole.c"
        var $31=$tok_addr; //@line 1023 "xmlrole.c"
        var $32=_common($30, $31); //@line 1023 "xmlrole.c"
        $0=$32; //@line 1023 "xmlrole.c"
        __label__ = 8; break; //@line 1023 "xmlrole.c"
      case 8: // $bb8
        var $33=$0; //@line 1005 "xmlrole.c"
        $retval=$33; //@line 1005 "xmlrole.c"
        var $retval9=$retval; //@line 1005 "xmlrole.c"
        ;
        return $retval9; //@line 1005 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element2($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 1033 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 5; break;
        }
        else if ($1 == 20) {
          __label__ = 2; break;
        }
        else if ($1 == 23) {
          __label__ = 4; break;
        }
        else if ($1 == 30) {
          __label__ = 6; break;
        }
        else if ($1 == 31) {
          __label__ = 7; break;
        }
        else if ($1 == 32) {
          __label__ = 8; break;
        }
        else if ($1 == 41) {
          __label__ = 5; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 1: // $bb
        $0=39; //@line 1035 "xmlrole.c"
        __label__ = 10; break; //@line 1035 "xmlrole.c"
      case 2: // $bb1
        var $2=$enc_addr; //@line 1037 "xmlrole.c"
        var $3=$2+28; //@line 1037 "xmlrole.c"
        var $4=HEAP[$3]; //@line 1037 "xmlrole.c"
        var $5=$enc_addr; //@line 1037 "xmlrole.c"
        var $6=$5+68; //@line 1037 "xmlrole.c"
        var $7=HEAP[$6]; //@line 1037 "xmlrole.c"
        var $8=$ptr_addr; //@line 1037 "xmlrole.c"
        var $9=$8+$7; //@line 1037 "xmlrole.c"
        var $10=$enc_addr; //@line 1037 "xmlrole.c"
        var $11=$end_addr; //@line 1037 "xmlrole.c"
        var $12=FUNCTION_TABLE[$4]($10, $9, $11, _KW_PCDATA); //@line 1037 "xmlrole.c"
        var $13=($12)!=0; //@line 1037 "xmlrole.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 1037 "xmlrole.c"
      case 3: // $bb2
        var $14=$state_addr; //@line 1041 "xmlrole.c"
        var $15=$14; //@line 1041 "xmlrole.c"
        HEAP[$15]=(FUNCTION_TABLE_OFFSET + 176); //@line 1041 "xmlrole.c"
        $0=43; //@line 1042 "xmlrole.c"
        __label__ = 10; break; //@line 1042 "xmlrole.c"
      case 4: // $bb4
        var $16=$state_addr; //@line 1046 "xmlrole.c"
        var $17=$16+4; //@line 1046 "xmlrole.c"
        HEAP[$17]=2; //@line 1046 "xmlrole.c"
        var $18=$state_addr; //@line 1047 "xmlrole.c"
        var $19=$18; //@line 1047 "xmlrole.c"
        HEAP[$19]=(FUNCTION_TABLE_OFFSET + 178); //@line 1047 "xmlrole.c"
        $0=44; //@line 1048 "xmlrole.c"
        __label__ = 10; break; //@line 1048 "xmlrole.c"
      case 5: // $bb5
        var $20=$state_addr; //@line 1051 "xmlrole.c"
        var $21=$20; //@line 1051 "xmlrole.c"
        HEAP[$21]=(FUNCTION_TABLE_OFFSET + 180); //@line 1051 "xmlrole.c"
        $0=51; //@line 1052 "xmlrole.c"
        __label__ = 10; break; //@line 1052 "xmlrole.c"
      case 6: // $bb6
        var $22=$state_addr; //@line 1054 "xmlrole.c"
        var $23=$22; //@line 1054 "xmlrole.c"
        HEAP[$23]=(FUNCTION_TABLE_OFFSET + 180); //@line 1054 "xmlrole.c"
        $0=53; //@line 1055 "xmlrole.c"
        __label__ = 10; break; //@line 1055 "xmlrole.c"
      case 7: // $bb7
        var $24=$state_addr; //@line 1057 "xmlrole.c"
        var $25=$24; //@line 1057 "xmlrole.c"
        HEAP[$25]=(FUNCTION_TABLE_OFFSET + 180); //@line 1057 "xmlrole.c"
        $0=52; //@line 1058 "xmlrole.c"
        __label__ = 10; break; //@line 1058 "xmlrole.c"
      case 8: // $bb8
        var $26=$state_addr; //@line 1060 "xmlrole.c"
        var $27=$26; //@line 1060 "xmlrole.c"
        HEAP[$27]=(FUNCTION_TABLE_OFFSET + 180); //@line 1060 "xmlrole.c"
        $0=54; //@line 1061 "xmlrole.c"
        __label__ = 10; break; //@line 1061 "xmlrole.c"
      case 9: // $bb9
        var $28=$state_addr; //@line 1063 "xmlrole.c"
        var $29=$tok_addr; //@line 1063 "xmlrole.c"
        var $30=_common($28, $29); //@line 1063 "xmlrole.c"
        $0=$30; //@line 1063 "xmlrole.c"
        __label__ = 10; break; //@line 1063 "xmlrole.c"
      case 10: // $bb10
        var $31=$0; //@line 1035 "xmlrole.c"
        $retval=$31; //@line 1035 "xmlrole.c"
        var $retval11=$retval; //@line 1035 "xmlrole.c"
        ;
        return $retval11; //@line 1035 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element3($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 1073 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 21) {
          __label__ = 4; break;
        }
        else if ($1 == 24) {
          __label__ = 2; break;
        }
        else if ($1 == 36) {
          __label__ = 3; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $bb
        $0=39; //@line 1075 "xmlrole.c"
        __label__ = 6; break; //@line 1075 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 1077 "xmlrole.c"
        var $3=$2; //@line 1077 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 134); //@line 1077 "xmlrole.c"
        var $4=$state_addr; //@line 1078 "xmlrole.c"
        var $5=$4+8; //@line 1078 "xmlrole.c"
        HEAP[$5]=39; //@line 1078 "xmlrole.c"
        $0=45; //@line 1079 "xmlrole.c"
        __label__ = 6; break; //@line 1079 "xmlrole.c"
      case 3: // $bb2
        var $6=$state_addr; //@line 1081 "xmlrole.c"
        var $7=$6; //@line 1081 "xmlrole.c"
        HEAP[$7]=(FUNCTION_TABLE_OFFSET + 134); //@line 1081 "xmlrole.c"
        var $8=$state_addr; //@line 1082 "xmlrole.c"
        var $9=$8+8; //@line 1082 "xmlrole.c"
        HEAP[$9]=39; //@line 1082 "xmlrole.c"
        $0=46; //@line 1083 "xmlrole.c"
        __label__ = 6; break; //@line 1083 "xmlrole.c"
      case 4: // $bb3
        var $10=$state_addr; //@line 1085 "xmlrole.c"
        var $11=$10; //@line 1085 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 182); //@line 1085 "xmlrole.c"
        $0=39; //@line 1086 "xmlrole.c"
        __label__ = 6; break; //@line 1086 "xmlrole.c"
      case 5: // $bb4
        var $12=$state_addr; //@line 1088 "xmlrole.c"
        var $13=$tok_addr; //@line 1088 "xmlrole.c"
        var $14=_common($12, $13); //@line 1088 "xmlrole.c"
        $0=$14; //@line 1088 "xmlrole.c"
        __label__ = 6; break; //@line 1088 "xmlrole.c"
      case 6: // $bb5
        var $15=$0; //@line 1075 "xmlrole.c"
        $retval=$15; //@line 1075 "xmlrole.c"
        var $retval6=$retval; //@line 1075 "xmlrole.c"
        ;
        return $retval6; //@line 1075 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element4($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 1098 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 41) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=39; //@line 1100 "xmlrole.c"
        __label__ = 4; break; //@line 1100 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 1103 "xmlrole.c"
        var $3=$2; //@line 1103 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 184); //@line 1103 "xmlrole.c"
        $0=51; //@line 1104 "xmlrole.c"
        __label__ = 4; break; //@line 1104 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 1106 "xmlrole.c"
        var $5=$tok_addr; //@line 1106 "xmlrole.c"
        var $6=_common($4, $5); //@line 1106 "xmlrole.c"
        $0=$6; //@line 1106 "xmlrole.c"
        __label__ = 4; break; //@line 1106 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 1100 "xmlrole.c"
        $retval=$7; //@line 1100 "xmlrole.c"
        var $retval4=$retval; //@line 1100 "xmlrole.c"
        ;
        return $retval4; //@line 1100 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element5($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 1116 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 21) {
          __label__ = 3; break;
        }
        else if ($1 == 36) {
          __label__ = 2; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $bb
        $0=39; //@line 1118 "xmlrole.c"
        __label__ = 5; break; //@line 1118 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 1120 "xmlrole.c"
        var $3=$2; //@line 1120 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 134); //@line 1120 "xmlrole.c"
        var $4=$state_addr; //@line 1121 "xmlrole.c"
        var $5=$4+8; //@line 1121 "xmlrole.c"
        HEAP[$5]=39; //@line 1121 "xmlrole.c"
        $0=46; //@line 1122 "xmlrole.c"
        __label__ = 5; break; //@line 1122 "xmlrole.c"
      case 3: // $bb2
        var $6=$state_addr; //@line 1124 "xmlrole.c"
        var $7=$6; //@line 1124 "xmlrole.c"
        HEAP[$7]=(FUNCTION_TABLE_OFFSET + 182); //@line 1124 "xmlrole.c"
        $0=39; //@line 1125 "xmlrole.c"
        __label__ = 5; break; //@line 1125 "xmlrole.c"
      case 4: // $bb3
        var $8=$state_addr; //@line 1127 "xmlrole.c"
        var $9=$tok_addr; //@line 1127 "xmlrole.c"
        var $10=_common($8, $9); //@line 1127 "xmlrole.c"
        $0=$10; //@line 1127 "xmlrole.c"
        __label__ = 5; break; //@line 1127 "xmlrole.c"
      case 5: // $bb4
        var $11=$0; //@line 1118 "xmlrole.c"
        $retval=$11; //@line 1118 "xmlrole.c"
        var $retval5=$retval; //@line 1118 "xmlrole.c"
        ;
        return $retval5; //@line 1118 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element6($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 1137 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 3; break;
        }
        else if ($1 == 23) {
          __label__ = 2; break;
        }
        else if ($1 == 30) {
          __label__ = 4; break;
        }
        else if ($1 == 31) {
          __label__ = 5; break;
        }
        else if ($1 == 32) {
          __label__ = 6; break;
        }
        else if ($1 == 41) {
          __label__ = 3; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 1: // $bb
        $0=39; //@line 1139 "xmlrole.c"
        __label__ = 8; break; //@line 1139 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 1141 "xmlrole.c"
        var $3=$2+4; //@line 1141 "xmlrole.c"
        var $4=HEAP[$3]; //@line 1141 "xmlrole.c"
        var $5=($4) + 1; //@line 1141 "xmlrole.c"
        var $6=$state_addr; //@line 1141 "xmlrole.c"
        var $7=$6+4; //@line 1141 "xmlrole.c"
        HEAP[$7]=$5; //@line 1141 "xmlrole.c"
        $0=44; //@line 1142 "xmlrole.c"
        __label__ = 8; break; //@line 1142 "xmlrole.c"
      case 3: // $bb2
        var $8=$state_addr; //@line 1145 "xmlrole.c"
        var $9=$8; //@line 1145 "xmlrole.c"
        HEAP[$9]=(FUNCTION_TABLE_OFFSET + 180); //@line 1145 "xmlrole.c"
        $0=51; //@line 1146 "xmlrole.c"
        __label__ = 8; break; //@line 1146 "xmlrole.c"
      case 4: // $bb3
        var $10=$state_addr; //@line 1148 "xmlrole.c"
        var $11=$10; //@line 1148 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 180); //@line 1148 "xmlrole.c"
        $0=53; //@line 1149 "xmlrole.c"
        __label__ = 8; break; //@line 1149 "xmlrole.c"
      case 5: // $bb4
        var $12=$state_addr; //@line 1151 "xmlrole.c"
        var $13=$12; //@line 1151 "xmlrole.c"
        HEAP[$13]=(FUNCTION_TABLE_OFFSET + 180); //@line 1151 "xmlrole.c"
        $0=52; //@line 1152 "xmlrole.c"
        __label__ = 8; break; //@line 1152 "xmlrole.c"
      case 6: // $bb5
        var $14=$state_addr; //@line 1154 "xmlrole.c"
        var $15=$14; //@line 1154 "xmlrole.c"
        HEAP[$15]=(FUNCTION_TABLE_OFFSET + 180); //@line 1154 "xmlrole.c"
        $0=54; //@line 1155 "xmlrole.c"
        __label__ = 8; break; //@line 1155 "xmlrole.c"
      case 7: // $bb6
        var $16=$state_addr; //@line 1157 "xmlrole.c"
        var $17=$tok_addr; //@line 1157 "xmlrole.c"
        var $18=_common($16, $17); //@line 1157 "xmlrole.c"
        $0=$18; //@line 1157 "xmlrole.c"
        __label__ = 8; break; //@line 1157 "xmlrole.c"
      case 8: // $bb7
        var $19=$0; //@line 1139 "xmlrole.c"
        $retval=$19; //@line 1139 "xmlrole.c"
        var $retval8=$retval; //@line 1139 "xmlrole.c"
        ;
        return $retval8; //@line 1139 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element7($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 1167 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 21) {
          __label__ = 15; break;
        }
        else if ($1 == 24) {
          __label__ = 2; break;
        }
        else if ($1 == 35) {
          __label__ = 8; break;
        }
        else if ($1 == 36) {
          __label__ = 5; break;
        }
        else if ($1 == 37) {
          __label__ = 11; break;
        }
        else if ($1 == 38) {
          __label__ = 14; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 1: // $bb
        $0=39; //@line 1169 "xmlrole.c"
        __label__ = 17; break; //@line 1169 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 1171 "xmlrole.c"
        var $3=$2+4; //@line 1171 "xmlrole.c"
        var $4=HEAP[$3]; //@line 1171 "xmlrole.c"
        var $5=($4) - 1; //@line 1171 "xmlrole.c"
        var $6=$state_addr; //@line 1171 "xmlrole.c"
        var $7=$6+4; //@line 1171 "xmlrole.c"
        HEAP[$7]=$5; //@line 1171 "xmlrole.c"
        var $8=$state_addr; //@line 1172 "xmlrole.c"
        var $9=$8+4; //@line 1172 "xmlrole.c"
        var $10=HEAP[$9]; //@line 1172 "xmlrole.c"
        var $11=($10)==0; //@line 1172 "xmlrole.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1172 "xmlrole.c"
      case 3: // $bb2
        var $12=$state_addr; //@line 1173 "xmlrole.c"
        var $13=$12; //@line 1173 "xmlrole.c"
        HEAP[$13]=(FUNCTION_TABLE_OFFSET + 134); //@line 1173 "xmlrole.c"
        var $14=$state_addr; //@line 1174 "xmlrole.c"
        var $15=$14+8; //@line 1174 "xmlrole.c"
        HEAP[$15]=39; //@line 1174 "xmlrole.c"
        __label__ = 4; break; //@line 1174 "xmlrole.c"
      case 4: // $bb3
        $0=45; //@line 1176 "xmlrole.c"
        __label__ = 17; break; //@line 1176 "xmlrole.c"
      case 5: // $bb4
        var $16=$state_addr; //@line 1178 "xmlrole.c"
        var $17=$16+4; //@line 1178 "xmlrole.c"
        var $18=HEAP[$17]; //@line 1178 "xmlrole.c"
        var $19=($18) - 1; //@line 1178 "xmlrole.c"
        var $20=$state_addr; //@line 1178 "xmlrole.c"
        var $21=$20+4; //@line 1178 "xmlrole.c"
        HEAP[$21]=$19; //@line 1178 "xmlrole.c"
        var $22=$state_addr; //@line 1179 "xmlrole.c"
        var $23=$22+4; //@line 1179 "xmlrole.c"
        var $24=HEAP[$23]; //@line 1179 "xmlrole.c"
        var $25=($24)==0; //@line 1179 "xmlrole.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1179 "xmlrole.c"
      case 6: // $bb5
        var $26=$state_addr; //@line 1180 "xmlrole.c"
        var $27=$26; //@line 1180 "xmlrole.c"
        HEAP[$27]=(FUNCTION_TABLE_OFFSET + 134); //@line 1180 "xmlrole.c"
        var $28=$state_addr; //@line 1181 "xmlrole.c"
        var $29=$28+8; //@line 1181 "xmlrole.c"
        HEAP[$29]=39; //@line 1181 "xmlrole.c"
        __label__ = 7; break; //@line 1181 "xmlrole.c"
      case 7: // $bb6
        $0=46; //@line 1183 "xmlrole.c"
        __label__ = 17; break; //@line 1183 "xmlrole.c"
      case 8: // $bb7
        var $30=$state_addr; //@line 1185 "xmlrole.c"
        var $31=$30+4; //@line 1185 "xmlrole.c"
        var $32=HEAP[$31]; //@line 1185 "xmlrole.c"
        var $33=($32) - 1; //@line 1185 "xmlrole.c"
        var $34=$state_addr; //@line 1185 "xmlrole.c"
        var $35=$34+4; //@line 1185 "xmlrole.c"
        HEAP[$35]=$33; //@line 1185 "xmlrole.c"
        var $36=$state_addr; //@line 1186 "xmlrole.c"
        var $37=$36+4; //@line 1186 "xmlrole.c"
        var $38=HEAP[$37]; //@line 1186 "xmlrole.c"
        var $39=($38)==0; //@line 1186 "xmlrole.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1186 "xmlrole.c"
      case 9: // $bb8
        var $40=$state_addr; //@line 1187 "xmlrole.c"
        var $41=$40; //@line 1187 "xmlrole.c"
        HEAP[$41]=(FUNCTION_TABLE_OFFSET + 134); //@line 1187 "xmlrole.c"
        var $42=$state_addr; //@line 1188 "xmlrole.c"
        var $43=$42+8; //@line 1188 "xmlrole.c"
        HEAP[$43]=39; //@line 1188 "xmlrole.c"
        __label__ = 10; break; //@line 1188 "xmlrole.c"
      case 10: // $bb9
        $0=47; //@line 1190 "xmlrole.c"
        __label__ = 17; break; //@line 1190 "xmlrole.c"
      case 11: // $bb10
        var $44=$state_addr; //@line 1192 "xmlrole.c"
        var $45=$44+4; //@line 1192 "xmlrole.c"
        var $46=HEAP[$45]; //@line 1192 "xmlrole.c"
        var $47=($46) - 1; //@line 1192 "xmlrole.c"
        var $48=$state_addr; //@line 1192 "xmlrole.c"
        var $49=$48+4; //@line 1192 "xmlrole.c"
        HEAP[$49]=$47; //@line 1192 "xmlrole.c"
        var $50=$state_addr; //@line 1193 "xmlrole.c"
        var $51=$50+4; //@line 1193 "xmlrole.c"
        var $52=HEAP[$51]; //@line 1193 "xmlrole.c"
        var $53=($52)==0; //@line 1193 "xmlrole.c"
        if ($53) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1193 "xmlrole.c"
      case 12: // $bb11
        var $54=$state_addr; //@line 1194 "xmlrole.c"
        var $55=$54; //@line 1194 "xmlrole.c"
        HEAP[$55]=(FUNCTION_TABLE_OFFSET + 134); //@line 1194 "xmlrole.c"
        var $56=$state_addr; //@line 1195 "xmlrole.c"
        var $57=$56+8; //@line 1195 "xmlrole.c"
        HEAP[$57]=39; //@line 1195 "xmlrole.c"
        __label__ = 13; break; //@line 1195 "xmlrole.c"
      case 13: // $bb12
        $0=48; //@line 1197 "xmlrole.c"
        __label__ = 17; break; //@line 1197 "xmlrole.c"
      case 14: // $bb13
        var $58=$state_addr; //@line 1199 "xmlrole.c"
        var $59=$58; //@line 1199 "xmlrole.c"
        HEAP[$59]=(FUNCTION_TABLE_OFFSET + 178); //@line 1199 "xmlrole.c"
        $0=50; //@line 1200 "xmlrole.c"
        __label__ = 17; break; //@line 1200 "xmlrole.c"
      case 15: // $bb14
        var $60=$state_addr; //@line 1202 "xmlrole.c"
        var $61=$60; //@line 1202 "xmlrole.c"
        HEAP[$61]=(FUNCTION_TABLE_OFFSET + 178); //@line 1202 "xmlrole.c"
        $0=49; //@line 1203 "xmlrole.c"
        __label__ = 17; break; //@line 1203 "xmlrole.c"
      case 16: // $bb15
        var $62=$state_addr; //@line 1205 "xmlrole.c"
        var $63=$tok_addr; //@line 1205 "xmlrole.c"
        var $64=_common($62, $63); //@line 1205 "xmlrole.c"
        $0=$64; //@line 1205 "xmlrole.c"
        __label__ = 17; break; //@line 1205 "xmlrole.c"
      case 17: // $bb16
        var $65=$0; //@line 1169 "xmlrole.c"
        $retval=$65; //@line 1169 "xmlrole.c"
        var $retval17=$retval; //@line 1169 "xmlrole.c"
        ;
        return $retval17; //@line 1169 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _condSect0($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 1217 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 1: // $bb
        $0=0; //@line 1219 "xmlrole.c"
        __label__ = 7; break; //@line 1219 "xmlrole.c"
      case 2: // $bb1
        var $2=$enc_addr; //@line 1221 "xmlrole.c"
        var $3=$2+28; //@line 1221 "xmlrole.c"
        var $4=HEAP[$3]; //@line 1221 "xmlrole.c"
        var $5=$enc_addr; //@line 1221 "xmlrole.c"
        var $6=$ptr_addr; //@line 1221 "xmlrole.c"
        var $7=$end_addr; //@line 1221 "xmlrole.c"
        var $8=FUNCTION_TABLE[$4]($5, $6, $7, _KW_INCLUDE); //@line 1221 "xmlrole.c"
        var $9=($8)!=0; //@line 1221 "xmlrole.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1221 "xmlrole.c"
      case 3: // $bb2
        var $10=$state_addr; //@line 1222 "xmlrole.c"
        var $11=$10; //@line 1222 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 186); //@line 1222 "xmlrole.c"
        $0=0; //@line 1223 "xmlrole.c"
        __label__ = 7; break; //@line 1223 "xmlrole.c"
      case 4: // $bb3
        var $12=$enc_addr; //@line 1225 "xmlrole.c"
        var $13=$12+28; //@line 1225 "xmlrole.c"
        var $14=HEAP[$13]; //@line 1225 "xmlrole.c"
        var $15=$enc_addr; //@line 1225 "xmlrole.c"
        var $16=$ptr_addr; //@line 1225 "xmlrole.c"
        var $17=$end_addr; //@line 1225 "xmlrole.c"
        var $18=FUNCTION_TABLE[$14]($15, $16, $17, _KW_IGNORE); //@line 1225 "xmlrole.c"
        var $19=($18)!=0; //@line 1225 "xmlrole.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1225 "xmlrole.c"
      case 5: // $bb4
        var $20=$state_addr; //@line 1226 "xmlrole.c"
        var $21=$20; //@line 1226 "xmlrole.c"
        HEAP[$21]=(FUNCTION_TABLE_OFFSET + 188); //@line 1226 "xmlrole.c"
        $0=0; //@line 1227 "xmlrole.c"
        __label__ = 7; break; //@line 1227 "xmlrole.c"
      case 6: // $bb5
        var $22=$state_addr; //@line 1231 "xmlrole.c"
        var $23=$tok_addr; //@line 1231 "xmlrole.c"
        var $24=_common($22, $23); //@line 1231 "xmlrole.c"
        $0=$24; //@line 1231 "xmlrole.c"
        __label__ = 7; break; //@line 1231 "xmlrole.c"
      case 7: // $bb6
        var $25=$0; //@line 1219 "xmlrole.c"
        $retval=$25; //@line 1219 "xmlrole.c"
        var $retval7=$retval; //@line 1219 "xmlrole.c"
        ;
        return $retval7; //@line 1219 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _condSect1($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 1241 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 25) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=0; //@line 1243 "xmlrole.c"
        __label__ = 4; break; //@line 1243 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 1245 "xmlrole.c"
        var $3=$2; //@line 1245 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 120); //@line 1245 "xmlrole.c"
        var $4=$state_addr; //@line 1246 "xmlrole.c"
        var $5=$4+12; //@line 1246 "xmlrole.c"
        var $6=HEAP[$5]; //@line 1246 "xmlrole.c"
        var $7=($6) + 1; //@line 1246 "xmlrole.c"
        var $8=$state_addr; //@line 1246 "xmlrole.c"
        var $9=$8+12; //@line 1246 "xmlrole.c"
        HEAP[$9]=$7; //@line 1246 "xmlrole.c"
        $0=0; //@line 1247 "xmlrole.c"
        __label__ = 4; break; //@line 1247 "xmlrole.c"
      case 3: // $bb2
        var $10=$state_addr; //@line 1249 "xmlrole.c"
        var $11=$tok_addr; //@line 1249 "xmlrole.c"
        var $12=_common($10, $11); //@line 1249 "xmlrole.c"
        $0=$12; //@line 1249 "xmlrole.c"
        __label__ = 4; break; //@line 1249 "xmlrole.c"
      case 4: // $bb3
        var $13=$0; //@line 1243 "xmlrole.c"
        $retval=$13; //@line 1243 "xmlrole.c"
        var $retval4=$retval; //@line 1243 "xmlrole.c"
        ;
        return $retval4; //@line 1243 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _condSect2($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 1259 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 25) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        $0=0; //@line 1261 "xmlrole.c"
        __label__ = 4; break; //@line 1261 "xmlrole.c"
      case 2: // $bb1
        var $2=$state_addr; //@line 1263 "xmlrole.c"
        var $3=$2; //@line 1263 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 120); //@line 1263 "xmlrole.c"
        $0=58; //@line 1264 "xmlrole.c"
        __label__ = 4; break; //@line 1264 "xmlrole.c"
      case 3: // $bb2
        var $4=$state_addr; //@line 1266 "xmlrole.c"
        var $5=$tok_addr; //@line 1266 "xmlrole.c"
        var $6=_common($4, $5); //@line 1266 "xmlrole.c"
        $0=$6; //@line 1266 "xmlrole.c"
        __label__ = 4; break; //@line 1266 "xmlrole.c"
      case 4: // $bb3
        var $7=$0; //@line 1261 "xmlrole.c"
        $retval=$7; //@line 1261 "xmlrole.c"
        var $retval4=$retval; //@line 1261 "xmlrole.c"
        ;
        return $retval4; //@line 1261 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _declClose($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $ptr_addr;
        var $end_addr;
        var $enc_addr;
        var $retval;
        var $iftmp_5;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $enc_addr=$enc;
        var $1=$tok_addr; //@line 1278 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 2; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 1: // $bb
        var $2=$state_addr; //@line 1280 "xmlrole.c"
        var $3=$2+8; //@line 1280 "xmlrole.c"
        var $4=HEAP[$3]; //@line 1280 "xmlrole.c"
        $0=$4; //@line 1280 "xmlrole.c"
        __label__ = 7; break; //@line 1280 "xmlrole.c"
      case 2: // $bb1
        var $5=$state_addr; //@line 1282 "xmlrole.c"
        var $6=$5+16; //@line 1282 "xmlrole.c"
        var $7=HEAP[$6]; //@line 1282 "xmlrole.c"
        var $8=($7)!=0; //@line 1282 "xmlrole.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1282 "xmlrole.c"
      case 3: // $bb2
        $iftmp_5=(FUNCTION_TABLE_OFFSET + 100); //@line 1282 "xmlrole.c"
        __label__ = 5; break; //@line 1282 "xmlrole.c"
      case 4: // $bb3
        $iftmp_5=(FUNCTION_TABLE_OFFSET + 120); //@line 1282 "xmlrole.c"
        __label__ = 5; break; //@line 1282 "xmlrole.c"
      case 5: // $bb4
        var $9=$state_addr; //@line 1282 "xmlrole.c"
        var $10=$9; //@line 1282 "xmlrole.c"
        var $11=$iftmp_5; //@line 1282 "xmlrole.c"
        HEAP[$10]=$11; //@line 1282 "xmlrole.c"
        var $12=$state_addr; //@line 1283 "xmlrole.c"
        var $13=$12+8; //@line 1283 "xmlrole.c"
        var $14=HEAP[$13]; //@line 1283 "xmlrole.c"
        $0=$14; //@line 1283 "xmlrole.c"
        __label__ = 7; break; //@line 1283 "xmlrole.c"
      case 6: // $bb5
        var $15=$state_addr; //@line 1285 "xmlrole.c"
        var $16=$tok_addr; //@line 1285 "xmlrole.c"
        var $17=_common($15, $16); //@line 1285 "xmlrole.c"
        $0=$17; //@line 1285 "xmlrole.c"
        __label__ = 7; break; //@line 1285 "xmlrole.c"
      case 7: // $bb6
        var $18=$0; //@line 1280 "xmlrole.c"
        $retval=$18; //@line 1280 "xmlrole.c"
        var $retval7=$retval; //@line 1280 "xmlrole.c"
        ;
        return $retval7; //@line 1280 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _error($state, $tok, $ptr, $end, $enc) {
    ;
    var __label__;
  
    var $state_addr;
    var $tok_addr;
    var $ptr_addr;
    var $end_addr;
    var $retval;
    var $0;
    $state_addr=$state;
    $tok_addr=$tok;
    $ptr_addr=$ptr;
    $end_addr=$end;
    $0=0; //@line 1295 "xmlrole.c"
    var $1=$0; //@line 1295 "xmlrole.c"
    $retval=$1; //@line 1295 "xmlrole.c"
    var $retval1=$retval; //@line 1295 "xmlrole.c"
    ;
    return $retval1; //@line 1295 "xmlrole.c"
  }
  

  function _common($state, $tok) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr;
        var $tok_addr;
        var $retval;
        var $0;
        $state_addr=$state;
        $tok_addr=$tok;
        var $1=$state_addr; //@line 1302 "xmlrole.c"
        var $2=$1+16; //@line 1302 "xmlrole.c"
        var $3=HEAP[$2]; //@line 1302 "xmlrole.c"
        var $4=($3)==0; //@line 1302 "xmlrole.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1302 "xmlrole.c"
      case 1: // $bb
        var $5=$tok_addr; //@line 1302 "xmlrole.c"
        var $6=($5)==28; //@line 1302 "xmlrole.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1302 "xmlrole.c"
      case 2: // $bb1
        $0=59; //@line 1303 "xmlrole.c"
        __label__ = 4; break; //@line 1303 "xmlrole.c"
      case 3: // $bb2
        var $7=$state_addr; //@line 1305 "xmlrole.c"
        var $8=$7; //@line 1305 "xmlrole.c"
        HEAP[$8]=(FUNCTION_TABLE_OFFSET + 96); //@line 1305 "xmlrole.c"
        $0=-1; //@line 1306 "xmlrole.c"
        __label__ = 4; break; //@line 1306 "xmlrole.c"
      case 4: // $bb3
        var $9=$0; //@line 1303 "xmlrole.c"
        $retval=$9; //@line 1303 "xmlrole.c"
        var $retval4=$retval; //@line 1303 "xmlrole.c"
        ;
        return $retval4; //@line 1303 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlPrologStateInit($state) {
    ;
    var __label__;
  
    var $state_addr;
    $state_addr=$state;
    var $0=$state_addr; //@line 1312 "xmlrole.c"
    var $1=$0; //@line 1312 "xmlrole.c"
    HEAP[$1]=(FUNCTION_TABLE_OFFSET + 190); //@line 1312 "xmlrole.c"
    var $2=$state_addr; //@line 1314 "xmlrole.c"
    var $3=$2+16; //@line 1314 "xmlrole.c"
    HEAP[$3]=1; //@line 1314 "xmlrole.c"
    var $4=$state_addr; //@line 1315 "xmlrole.c"
    var $5=$4+12; //@line 1315 "xmlrole.c"
    HEAP[$5]=0; //@line 1315 "xmlrole.c"
    var $6=$state_addr; //@line 1316 "xmlrole.c"
    var $7=$6+20; //@line 1316 "xmlrole.c"
    HEAP[$7]=0; //@line 1316 "xmlrole.c"
    ;
    return; //@line 1318 "xmlrole.c"
  }
  

  function _PyExpat_XmlPrologStateInitExternalEntity($state) {
    ;
    var __label__;
  
    var $state_addr;
    $state_addr=$state;
    var $0=$state_addr; //@line 1325 "xmlrole.c"
    var $1=$0; //@line 1325 "xmlrole.c"
    HEAP[$1]=(FUNCTION_TABLE_OFFSET + 192); //@line 1325 "xmlrole.c"
    var $2=$state_addr; //@line 1326 "xmlrole.c"
    var $3=$2+16; //@line 1326 "xmlrole.c"
    HEAP[$3]=0; //@line 1326 "xmlrole.c"
    var $4=$state_addr; //@line 1327 "xmlrole.c"
    var $5=$4+12; //@line 1327 "xmlrole.c"
    HEAP[$5]=0; //@line 1327 "xmlrole.c"
    ;
    return; //@line 1328 "xmlrole.c"
  }
  

  function _isNever($enc, $p) {
    ;
    var __label__;
  
    var $enc_addr;
    var $retval;
    var $0;
    $enc_addr=$enc;
    $0=0; //@line 125 "xmltok.c"
    var $1=$0; //@line 125 "xmltok.c"
    $retval=$1; //@line 125 "xmltok.c"
    var $retval1=$retval; //@line 125 "xmltok.c"
    ;
    return $retval1; //@line 125 "xmltok.c"
  }
  

  function _utf8_isName2($enc, $p) {
    ;
    var __label__;
  
    var $enc_addr;
    var $p_addr;
    var $retval;
    var $0;
    $enc_addr=$enc;
    $p_addr=$p;
    var $1=$p_addr; //@line 131 "xmltok.c"
    var $2=$1; //@line 131 "xmltok.c"
    var $3=HEAP[$2]; //@line 131 "xmltok.c"
    var $4=($3) >>> 2; //@line 131 "xmltok.c"
    var $5=($4); //@line 131 "xmltok.c"
    var $6=($5) & 7; //@line 131 "xmltok.c"
    var $7=_namePages+$6; //@line 131 "xmltok.c"
    var $8=HEAP[$7]; //@line 131 "xmltok.c"
    var $9=($8); //@line 131 "xmltok.c"
    var $10=($9) * 8;
    var $11=$p_addr; //@line 131 "xmltok.c"
    var $12=$11; //@line 131 "xmltok.c"
    var $13=HEAP[$12]; //@line 131 "xmltok.c"
    var $14=($13); //@line 131 "xmltok.c"
    var $15=($14) & 3; //@line 131 "xmltok.c"
    var $16=($15) * 2;
    var $17=$p_addr; //@line 131 "xmltok.c"
    var $18=$17+1; //@line 131 "xmltok.c"
    var $19=HEAP[$18]; //@line 131 "xmltok.c"
    var $20=($19) >>> 5; //@line 131 "xmltok.c"
    var $21=($20); //@line 131 "xmltok.c"
    var $22=($21) & 1; //@line 131 "xmltok.c"
    var $23=($16) + ($10); //@line 131 "xmltok.c"
    var $24=($23) + ($22); //@line 131 "xmltok.c"
    var $25=_namingBitmap+$24*4; //@line 131 "xmltok.c"
    var $26=HEAP[$25]; //@line 131 "xmltok.c"
    var $27=$p_addr; //@line 131 "xmltok.c"
    var $28=$27+1; //@line 131 "xmltok.c"
    var $29=HEAP[$28]; //@line 131 "xmltok.c"
    var $30=($29); //@line 131 "xmltok.c"
    var $31=($30) & 31; //@line 131 "xmltok.c"
    var $32=1 << ($31); //@line 131 "xmltok.c"
    var $33=($32) & ($26); //@line 131 "xmltok.c"
    $0=$33; //@line 131 "xmltok.c"
    var $34=$0; //@line 131 "xmltok.c"
    $retval=$34; //@line 131 "xmltok.c"
    var $retval1=$retval; //@line 131 "xmltok.c"
    ;
    return $retval1; //@line 131 "xmltok.c"
  }
  

  function _utf8_isName3($enc, $p) {
    ;
    var __label__;
  
    var $enc_addr;
    var $p_addr;
    var $retval;
    var $0;
    $enc_addr=$enc;
    $p_addr=$p;
    var $1=$p_addr; //@line 137 "xmltok.c"
    var $2=$1; //@line 137 "xmltok.c"
    var $3=HEAP[$2]; //@line 137 "xmltok.c"
    var $4=($3); //@line 137 "xmltok.c"
    var $5=($4) & 15; //@line 137 "xmltok.c"
    var $6=($5) * 16;
    var $7=$p_addr; //@line 137 "xmltok.c"
    var $8=$7+1; //@line 137 "xmltok.c"
    var $9=HEAP[$8]; //@line 137 "xmltok.c"
    var $10=($9) >>> 2; //@line 137 "xmltok.c"
    var $11=($10); //@line 137 "xmltok.c"
    var $12=($11) & 15; //@line 137 "xmltok.c"
    var $13=($12) + ($6); //@line 137 "xmltok.c"
    var $14=_namePages+$13; //@line 137 "xmltok.c"
    var $15=HEAP[$14]; //@line 137 "xmltok.c"
    var $16=($15); //@line 137 "xmltok.c"
    var $17=($16) * 8;
    var $18=$p_addr; //@line 137 "xmltok.c"
    var $19=$18+1; //@line 137 "xmltok.c"
    var $20=HEAP[$19]; //@line 137 "xmltok.c"
    var $21=($20); //@line 137 "xmltok.c"
    var $22=($21) & 3; //@line 137 "xmltok.c"
    var $23=($22) * 2;
    var $24=$p_addr; //@line 137 "xmltok.c"
    var $25=$24+2; //@line 137 "xmltok.c"
    var $26=HEAP[$25]; //@line 137 "xmltok.c"
    var $27=($26) >>> 5; //@line 137 "xmltok.c"
    var $28=($27); //@line 137 "xmltok.c"
    var $29=($28) & 1; //@line 137 "xmltok.c"
    var $30=($23) + ($17); //@line 137 "xmltok.c"
    var $31=($30) + ($29); //@line 137 "xmltok.c"
    var $32=_namingBitmap+$31*4; //@line 137 "xmltok.c"
    var $33=HEAP[$32]; //@line 137 "xmltok.c"
    var $34=$p_addr; //@line 137 "xmltok.c"
    var $35=$34+2; //@line 137 "xmltok.c"
    var $36=HEAP[$35]; //@line 137 "xmltok.c"
    var $37=($36); //@line 137 "xmltok.c"
    var $38=($37) & 31; //@line 137 "xmltok.c"
    var $39=1 << ($38); //@line 137 "xmltok.c"
    var $40=($39) & ($33); //@line 137 "xmltok.c"
    $0=$40; //@line 137 "xmltok.c"
    var $41=$0; //@line 137 "xmltok.c"
    $retval=$41; //@line 137 "xmltok.c"
    var $retval1=$retval; //@line 137 "xmltok.c"
    ;
    return $retval1; //@line 137 "xmltok.c"
  }
  

  function _utf8_isNmstrt2($enc, $p) {
    ;
    var __label__;
  
    var $enc_addr;
    var $p_addr;
    var $retval;
    var $0;
    $enc_addr=$enc;
    $p_addr=$p;
    var $1=$p_addr; //@line 145 "xmltok.c"
    var $2=$1; //@line 145 "xmltok.c"
    var $3=HEAP[$2]; //@line 145 "xmltok.c"
    var $4=($3) >>> 2; //@line 145 "xmltok.c"
    var $5=($4); //@line 145 "xmltok.c"
    var $6=($5) & 7; //@line 145 "xmltok.c"
    var $7=_nmstrtPages+$6; //@line 145 "xmltok.c"
    var $8=HEAP[$7]; //@line 145 "xmltok.c"
    var $9=($8); //@line 145 "xmltok.c"
    var $10=($9) * 8;
    var $11=$p_addr; //@line 145 "xmltok.c"
    var $12=$11; //@line 145 "xmltok.c"
    var $13=HEAP[$12]; //@line 145 "xmltok.c"
    var $14=($13); //@line 145 "xmltok.c"
    var $15=($14) & 3; //@line 145 "xmltok.c"
    var $16=($15) * 2;
    var $17=$p_addr; //@line 145 "xmltok.c"
    var $18=$17+1; //@line 145 "xmltok.c"
    var $19=HEAP[$18]; //@line 145 "xmltok.c"
    var $20=($19) >>> 5; //@line 145 "xmltok.c"
    var $21=($20); //@line 145 "xmltok.c"
    var $22=($21) & 1; //@line 145 "xmltok.c"
    var $23=($16) + ($10); //@line 145 "xmltok.c"
    var $24=($23) + ($22); //@line 145 "xmltok.c"
    var $25=_namingBitmap+$24*4; //@line 145 "xmltok.c"
    var $26=HEAP[$25]; //@line 145 "xmltok.c"
    var $27=$p_addr; //@line 145 "xmltok.c"
    var $28=$27+1; //@line 145 "xmltok.c"
    var $29=HEAP[$28]; //@line 145 "xmltok.c"
    var $30=($29); //@line 145 "xmltok.c"
    var $31=($30) & 31; //@line 145 "xmltok.c"
    var $32=1 << ($31); //@line 145 "xmltok.c"
    var $33=($32) & ($26); //@line 145 "xmltok.c"
    $0=$33; //@line 145 "xmltok.c"
    var $34=$0; //@line 145 "xmltok.c"
    $retval=$34; //@line 145 "xmltok.c"
    var $retval1=$retval; //@line 145 "xmltok.c"
    ;
    return $retval1; //@line 145 "xmltok.c"
  }
  

  function _utf8_isNmstrt3($enc, $p) {
    ;
    var __label__;
  
    var $enc_addr;
    var $p_addr;
    var $retval;
    var $0;
    $enc_addr=$enc;
    $p_addr=$p;
    var $1=$p_addr; //@line 151 "xmltok.c"
    var $2=$1; //@line 151 "xmltok.c"
    var $3=HEAP[$2]; //@line 151 "xmltok.c"
    var $4=($3); //@line 151 "xmltok.c"
    var $5=($4) & 15; //@line 151 "xmltok.c"
    var $6=($5) * 16;
    var $7=$p_addr; //@line 151 "xmltok.c"
    var $8=$7+1; //@line 151 "xmltok.c"
    var $9=HEAP[$8]; //@line 151 "xmltok.c"
    var $10=($9) >>> 2; //@line 151 "xmltok.c"
    var $11=($10); //@line 151 "xmltok.c"
    var $12=($11) & 15; //@line 151 "xmltok.c"
    var $13=($12) + ($6); //@line 151 "xmltok.c"
    var $14=_nmstrtPages+$13; //@line 151 "xmltok.c"
    var $15=HEAP[$14]; //@line 151 "xmltok.c"
    var $16=($15); //@line 151 "xmltok.c"
    var $17=($16) * 8;
    var $18=$p_addr; //@line 151 "xmltok.c"
    var $19=$18+1; //@line 151 "xmltok.c"
    var $20=HEAP[$19]; //@line 151 "xmltok.c"
    var $21=($20); //@line 151 "xmltok.c"
    var $22=($21) & 3; //@line 151 "xmltok.c"
    var $23=($22) * 2;
    var $24=$p_addr; //@line 151 "xmltok.c"
    var $25=$24+2; //@line 151 "xmltok.c"
    var $26=HEAP[$25]; //@line 151 "xmltok.c"
    var $27=($26) >>> 5; //@line 151 "xmltok.c"
    var $28=($27); //@line 151 "xmltok.c"
    var $29=($28) & 1; //@line 151 "xmltok.c"
    var $30=($23) + ($17); //@line 151 "xmltok.c"
    var $31=($30) + ($29); //@line 151 "xmltok.c"
    var $32=_namingBitmap+$31*4; //@line 151 "xmltok.c"
    var $33=HEAP[$32]; //@line 151 "xmltok.c"
    var $34=$p_addr; //@line 151 "xmltok.c"
    var $35=$34+2; //@line 151 "xmltok.c"
    var $36=HEAP[$35]; //@line 151 "xmltok.c"
    var $37=($36); //@line 151 "xmltok.c"
    var $38=($37) & 31; //@line 151 "xmltok.c"
    var $39=1 << ($38); //@line 151 "xmltok.c"
    var $40=($39) & ($33); //@line 151 "xmltok.c"
    $0=$40; //@line 151 "xmltok.c"
    var $41=$0; //@line 151 "xmltok.c"
    $retval=$41; //@line 151 "xmltok.c"
    var $retval1=$retval; //@line 151 "xmltok.c"
    ;
    return $retval1; //@line 151 "xmltok.c"
  }
  

  function _utf8_isInvalid2($enc, $p) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $p_addr;
        var $retval;
        var $iftmp_18;
        var $0;
        $enc_addr=$enc;
        $p_addr=$p;
        var $1=$p_addr; //@line 159 "xmltok.c"
        var $2=HEAP[$1]; //@line 159 "xmltok.c"
        var $3=($2) <= 193; //@line 159 "xmltok.c"
        if ($3) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 159 "xmltok.c"
      case 1: // $bb
        var $4=$p_addr; //@line 159 "xmltok.c"
        var $5=$4+1; //@line 159 "xmltok.c"
        var $6=HEAP[$5]; //@line 159 "xmltok.c"
        var $7=($6) >= 0; //@line 159 "xmltok.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 159 "xmltok.c"
      case 2: // $bb1
        var $8=$p_addr; //@line 159 "xmltok.c"
        var $9=$8+1; //@line 159 "xmltok.c"
        var $10=HEAP[$9]; //@line 159 "xmltok.c"
        var $11=($10); //@line 159 "xmltok.c"
        var $12=($11) & 192; //@line 159 "xmltok.c"
        var $13=($12)==192; //@line 159 "xmltok.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 159 "xmltok.c"
      case 3: // $bb2
        $iftmp_18=1; //@line 159 "xmltok.c"
        __label__ = 5; break; //@line 159 "xmltok.c"
      case 4: // $bb3
        $iftmp_18=0; //@line 159 "xmltok.c"
        __label__ = 5; break; //@line 159 "xmltok.c"
      case 5: // $bb4
        var $14=$iftmp_18; //@line 159 "xmltok.c"
        $0=$14; //@line 159 "xmltok.c"
        var $15=$0; //@line 159 "xmltok.c"
        $retval=$15; //@line 159 "xmltok.c"
        var $retval5=$retval; //@line 159 "xmltok.c"
        ;
        return $retval5; //@line 159 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_isInvalid3($enc, $p) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $p_addr;
        var $retval;
        var $iftmp_32;
        var $iftmp_29;
        var $iftmp_22;
        var $0;
        $enc_addr=$enc;
        $p_addr=$p;
        var $1=$p_addr; //@line 165 "xmltok.c"
        var $2=$1+2; //@line 165 "xmltok.c"
        var $3=HEAP[$2]; //@line 165 "xmltok.c"
        var $4=($3) >= 0; //@line 165 "xmltok.c"
        if ($4) { __label__ = 18; break; } else { __label__ = 1; break; } //@line 165 "xmltok.c"
      case 1: // $bb
        var $5=$p_addr; //@line 165 "xmltok.c"
        var $6=HEAP[$5]; //@line 165 "xmltok.c"
        var $7=($6)!=-17; //@line 165 "xmltok.c"
        if ($7) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 165 "xmltok.c"
      case 2: // $bb1
        var $8=$p_addr; //@line 165 "xmltok.c"
        var $9=$8+1; //@line 165 "xmltok.c"
        var $10=HEAP[$9]; //@line 165 "xmltok.c"
        var $11=($10)!=-65; //@line 165 "xmltok.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 165 "xmltok.c"
      case 3: // $bb2
        var $12=$p_addr; //@line 165 "xmltok.c"
        var $13=$12+2; //@line 165 "xmltok.c"
        var $14=HEAP[$13]; //@line 165 "xmltok.c"
        var $15=($14) > 189; //@line 165 "xmltok.c"
        if ($15) { __label__ = 18; break; } else { __label__ = 5; break; } //@line 165 "xmltok.c"
      case 4: // $bb4
        var $16=$p_addr; //@line 165 "xmltok.c"
        var $17=$16+2; //@line 165 "xmltok.c"
        var $18=HEAP[$17]; //@line 165 "xmltok.c"
        var $19=($18); //@line 165 "xmltok.c"
        var $20=($19) & 192; //@line 165 "xmltok.c"
        var $21=($20)==192; //@line 165 "xmltok.c"
        if ($21) { __label__ = 18; break; } else { __label__ = 5; break; } //@line 165 "xmltok.c"
      case 5: // $bb5
        var $22=$p_addr; //@line 165 "xmltok.c"
        var $23=HEAP[$22]; //@line 165 "xmltok.c"
        var $24=($23)==-32; //@line 165 "xmltok.c"
        var $25=$p_addr; //@line 165 "xmltok.c"
        var $26=$25+1; //@line 165 "xmltok.c"
        var $27=HEAP[$26]; //@line 165 "xmltok.c"
        if ($24) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 165 "xmltok.c"
      case 6: // $bb6
        var $28=($27) <= 159; //@line 165 "xmltok.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 165 "xmltok.c"
      case 7: // $bb7
        var $29=$p_addr; //@line 165 "xmltok.c"
        var $30=$29+1; //@line 165 "xmltok.c"
        var $31=HEAP[$30]; //@line 165 "xmltok.c"
        var $32=($31); //@line 165 "xmltok.c"
        var $33=($32) & 192; //@line 165 "xmltok.c"
        var $34=($33)==192; //@line 165 "xmltok.c"
        if ($34) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 165 "xmltok.c"
      case 8: // $bb8
        $iftmp_29=1; //@line 165 "xmltok.c"
        __label__ = 10; break; //@line 165 "xmltok.c"
      case 9: // $bb9
        $iftmp_29=0; //@line 165 "xmltok.c"
        __label__ = 10; break; //@line 165 "xmltok.c"
      case 10: // $bb10
        var $35=$iftmp_29; //@line 165 "xmltok.c"
        var $36=((($35)) & 255); //@line 165 "xmltok.c"
        var $toBool=($36)!=0; //@line 165 "xmltok.c"
        if ($toBool) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 165 "xmltok.c"
      case 11: // $bb11
        var $37=($27) >= 0; //@line 165 "xmltok.c"
        if ($37) { __label__ = 15; break; } else { __label__ = 12; break; } //@line 165 "xmltok.c"
      case 12: // $bb12
        var $38=$p_addr; //@line 165 "xmltok.c"
        var $39=HEAP[$38]; //@line 165 "xmltok.c"
        var $40=($39)==-19; //@line 165 "xmltok.c"
        var $41=$p_addr; //@line 165 "xmltok.c"
        var $42=$41+1; //@line 165 "xmltok.c"
        var $43=HEAP[$42]; //@line 165 "xmltok.c"
        if ($40) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 165 "xmltok.c"
      case 13: // $bb13
        var $44=($43) > 159; //@line 165 "xmltok.c"
        if ($44) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 165 "xmltok.c"
      case 14: // $bb14
        var $45=($43); //@line 165 "xmltok.c"
        var $46=($45) & 192; //@line 165 "xmltok.c"
        var $47=($46)==192; //@line 165 "xmltok.c"
        if ($47) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 165 "xmltok.c"
      case 15: // $bb15
        $iftmp_32=1; //@line 165 "xmltok.c"
        __label__ = 17; break; //@line 165 "xmltok.c"
      case 16: // $bb16
        $iftmp_32=0; //@line 165 "xmltok.c"
        __label__ = 17; break; //@line 165 "xmltok.c"
      case 17: // $bb17
        var $48=$iftmp_32; //@line 165 "xmltok.c"
        var $49=((($48)) & 255); //@line 165 "xmltok.c"
        var $toBool18=($49)!=0; //@line 165 "xmltok.c"
        if ($toBool18) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 165 "xmltok.c"
      case 18: // $bb19
        $iftmp_22=1; //@line 165 "xmltok.c"
        __label__ = 20; break; //@line 165 "xmltok.c"
      case 19: // $bb20
        $iftmp_22=0; //@line 165 "xmltok.c"
        __label__ = 20; break; //@line 165 "xmltok.c"
      case 20: // $bb21
        var $50=$iftmp_22; //@line 165 "xmltok.c"
        $0=$50; //@line 165 "xmltok.c"
        var $51=$0; //@line 165 "xmltok.c"
        $retval=$51; //@line 165 "xmltok.c"
        var $retval22=$retval; //@line 165 "xmltok.c"
        ;
        return $retval22; //@line 165 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_isInvalid4($enc, $p) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $p_addr;
        var $retval;
        var $iftmp_46;
        var $iftmp_43;
        var $iftmp_37;
        var $0;
        $enc_addr=$enc;
        $p_addr=$p;
        var $1=$p_addr; //@line 171 "xmltok.c"
        var $2=$1+3; //@line 171 "xmltok.c"
        var $3=HEAP[$2]; //@line 171 "xmltok.c"
        var $4=($3) >= 0; //@line 171 "xmltok.c"
        if ($4) { __label__ = 17; break; } else { __label__ = 1; break; } //@line 171 "xmltok.c"
      case 1: // $bb
        var $5=$p_addr; //@line 171 "xmltok.c"
        var $6=$5+3; //@line 171 "xmltok.c"
        var $7=HEAP[$6]; //@line 171 "xmltok.c"
        var $8=($7); //@line 171 "xmltok.c"
        var $9=($8) & 192; //@line 171 "xmltok.c"
        var $10=($9)==192; //@line 171 "xmltok.c"
        if ($10) { __label__ = 17; break; } else { __label__ = 2; break; } //@line 171 "xmltok.c"
      case 2: // $bb1
        var $11=$p_addr; //@line 171 "xmltok.c"
        var $12=$11+2; //@line 171 "xmltok.c"
        var $13=HEAP[$12]; //@line 171 "xmltok.c"
        var $14=($13) >= 0; //@line 171 "xmltok.c"
        if ($14) { __label__ = 17; break; } else { __label__ = 3; break; } //@line 171 "xmltok.c"
      case 3: // $bb2
        var $15=$p_addr; //@line 171 "xmltok.c"
        var $16=$15+2; //@line 171 "xmltok.c"
        var $17=HEAP[$16]; //@line 171 "xmltok.c"
        var $18=($17); //@line 171 "xmltok.c"
        var $19=($18) & 192; //@line 171 "xmltok.c"
        var $20=($19)==192; //@line 171 "xmltok.c"
        if ($20) { __label__ = 17; break; } else { __label__ = 4; break; } //@line 171 "xmltok.c"
      case 4: // $bb3
        var $21=$p_addr; //@line 171 "xmltok.c"
        var $22=HEAP[$21]; //@line 171 "xmltok.c"
        var $23=($22)==-16; //@line 171 "xmltok.c"
        var $24=$p_addr; //@line 171 "xmltok.c"
        var $25=$24+1; //@line 171 "xmltok.c"
        var $26=HEAP[$25]; //@line 171 "xmltok.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 171 "xmltok.c"
      case 5: // $bb4
        var $27=($26) <= 143; //@line 171 "xmltok.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 171 "xmltok.c"
      case 6: // $bb5
        var $28=$p_addr; //@line 171 "xmltok.c"
        var $29=$28+1; //@line 171 "xmltok.c"
        var $30=HEAP[$29]; //@line 171 "xmltok.c"
        var $31=($30); //@line 171 "xmltok.c"
        var $32=($31) & 192; //@line 171 "xmltok.c"
        var $33=($32)==192; //@line 171 "xmltok.c"
        if ($33) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 171 "xmltok.c"
      case 7: // $bb6
        $iftmp_43=1; //@line 171 "xmltok.c"
        __label__ = 9; break; //@line 171 "xmltok.c"
      case 8: // $bb7
        $iftmp_43=0; //@line 171 "xmltok.c"
        __label__ = 9; break; //@line 171 "xmltok.c"
      case 9: // $bb8
        var $34=$iftmp_43; //@line 171 "xmltok.c"
        var $35=((($34)) & 255); //@line 171 "xmltok.c"
        var $toBool=($35)!=0; //@line 171 "xmltok.c"
        if ($toBool) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 171 "xmltok.c"
      case 10: // $bb9
        var $36=($26) >= 0; //@line 171 "xmltok.c"
        if ($36) { __label__ = 14; break; } else { __label__ = 11; break; } //@line 171 "xmltok.c"
      case 11: // $bb10
        var $37=$p_addr; //@line 171 "xmltok.c"
        var $38=HEAP[$37]; //@line 171 "xmltok.c"
        var $39=($38)==-12; //@line 171 "xmltok.c"
        var $40=$p_addr; //@line 171 "xmltok.c"
        var $41=$40+1; //@line 171 "xmltok.c"
        var $42=HEAP[$41]; //@line 171 "xmltok.c"
        if ($39) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 171 "xmltok.c"
      case 12: // $bb11
        var $43=($42) > 143; //@line 171 "xmltok.c"
        if ($43) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 171 "xmltok.c"
      case 13: // $bb12
        var $44=($42); //@line 171 "xmltok.c"
        var $45=($44) & 192; //@line 171 "xmltok.c"
        var $46=($45)==192; //@line 171 "xmltok.c"
        if ($46) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 171 "xmltok.c"
      case 14: // $bb13
        $iftmp_46=1; //@line 171 "xmltok.c"
        __label__ = 16; break; //@line 171 "xmltok.c"
      case 15: // $bb14
        $iftmp_46=0; //@line 171 "xmltok.c"
        __label__ = 16; break; //@line 171 "xmltok.c"
      case 16: // $bb15
        var $47=$iftmp_46; //@line 171 "xmltok.c"
        var $48=((($47)) & 255); //@line 171 "xmltok.c"
        var $toBool16=($48)!=0; //@line 171 "xmltok.c"
        if ($toBool16) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 171 "xmltok.c"
      case 17: // $bb17
        $iftmp_37=1; //@line 171 "xmltok.c"
        __label__ = 19; break; //@line 171 "xmltok.c"
      case 18: // $bb18
        $iftmp_37=0; //@line 171 "xmltok.c"
        __label__ = 19; break; //@line 171 "xmltok.c"
      case 19: // $bb19
        var $49=$iftmp_37; //@line 171 "xmltok.c"
        $0=$49; //@line 171 "xmltok.c"
        var $50=$0; //@line 171 "xmltok.c"
        $retval=$50; //@line 171 "xmltok.c"
        var $retval20=$retval; //@line 171 "xmltok.c"
        ;
        return $retval20; //@line 171 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanComment($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 93 "xmltok_impl.c"
        var $2=$end_addr; //@line 93 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 93 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 31; break; } //@line 93 "xmltok_impl.c"
      case 1: // $bb
        var $4=$ptr_addr; //@line 94 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 94 "xmltok_impl.c"
        var $6=($5)!=45; //@line 94 "xmltok_impl.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 94 "xmltok_impl.c"
      case 2: // $bb1
        var $7=$nextTokPtr_addr; //@line 95 "xmltok_impl.c"
        var $8=$ptr_addr; //@line 95 "xmltok_impl.c"
        HEAP[$7]=$8; //@line 95 "xmltok_impl.c"
        $0=0; //@line 96 "xmltok_impl.c"
        __label__ = 32; break; //@line 96 "xmltok_impl.c"
      case 3: // $bb2
        var $9=$ptr_addr; //@line 98 "xmltok_impl.c"
        var $10=$9+1; //@line 98 "xmltok_impl.c"
        $ptr_addr=$10; //@line 98 "xmltok_impl.c"
        __label__ = 30; break; //@line 98 "xmltok_impl.c"
      case 4: // $bb3
        var $11=$enc_addr; //@line 100 "xmltok_impl.c"
        var $12=$11; //@line 100 "xmltok_impl.c"
        var $13=$ptr_addr; //@line 100 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 100 "xmltok_impl.c"
        var $15=($14); //@line 100 "xmltok_impl.c"
        var $16=$12+76; //@line 100 "xmltok_impl.c"
        var $17=$16+$15; //@line 100 "xmltok_impl.c"
        var $18=HEAP[$17]; //@line 100 "xmltok_impl.c"
        var $19=($18); //@line 100 "xmltok_impl.c"
        if ($19 == 0) {
          __label__ = 20; break;
        }
        else if ($19 == 1) {
          __label__ = 20; break;
        }
        else if ($19 == 5) {
          __label__ = 5; break;
        }
        else if ($19 == 6) {
          __label__ = 10; break;
        }
        else if ($19 == 7) {
          __label__ = 15; break;
        }
        else if ($19 == 8) {
          __label__ = 20; break;
        }
        else if ($19 == 27) {
          __label__ = 21; break;
        }
        else {
        __label__ = 29; break;
        }
        
      case 5: // $bb4
        var $20=$end_addr; //@line 101 "xmltok_impl.c"
        var $21=($20); //@line 101 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $23=($22); //@line 101 "xmltok_impl.c"
        var $24=($21) - ($23); //@line 101 "xmltok_impl.c"
        var $25=($24) <= 1; //@line 101 "xmltok_impl.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 101 "xmltok_impl.c"
      case 6: // $bb5
        $0=-2; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 7: // $bb6
        var $26=$enc_addr; //@line 101 "xmltok_impl.c"
        var $27=$26; //@line 101 "xmltok_impl.c"
        var $28=$27+356; //@line 101 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 101 "xmltok_impl.c"
        var $30=$enc_addr; //@line 101 "xmltok_impl.c"
        var $31=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $32=FUNCTION_TABLE[$29]($30, $31); //@line 101 "xmltok_impl.c"
        var $33=($32)!=0; //@line 101 "xmltok_impl.c"
        if ($33) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 101 "xmltok_impl.c"
      case 8: // $bb7
        var $34=$nextTokPtr_addr; //@line 101 "xmltok_impl.c"
        var $35=$ptr_addr; //@line 101 "xmltok_impl.c"
        HEAP[$34]=$35; //@line 101 "xmltok_impl.c"
        $0=0; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 9: // $bb8
        var $36=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $37=$36+2; //@line 101 "xmltok_impl.c"
        $ptr_addr=$37; //@line 101 "xmltok_impl.c"
        __label__ = 30; break; //@line 101 "xmltok_impl.c"
      case 10: // $bb9
        var $38=$end_addr; //@line 101 "xmltok_impl.c"
        var $39=($38); //@line 101 "xmltok_impl.c"
        var $40=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $41=($40); //@line 101 "xmltok_impl.c"
        var $42=($39) - ($41); //@line 101 "xmltok_impl.c"
        var $43=($42) <= 2; //@line 101 "xmltok_impl.c"
        if ($43) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 101 "xmltok_impl.c"
      case 11: // $bb10
        $0=-2; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 12: // $bb11
        var $44=$enc_addr; //@line 101 "xmltok_impl.c"
        var $45=$44; //@line 101 "xmltok_impl.c"
        var $46=$45+360; //@line 101 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 101 "xmltok_impl.c"
        var $48=$enc_addr; //@line 101 "xmltok_impl.c"
        var $49=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $50=FUNCTION_TABLE[$47]($48, $49); //@line 101 "xmltok_impl.c"
        var $51=($50)!=0; //@line 101 "xmltok_impl.c"
        if ($51) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 101 "xmltok_impl.c"
      case 13: // $bb12
        var $52=$nextTokPtr_addr; //@line 101 "xmltok_impl.c"
        var $53=$ptr_addr; //@line 101 "xmltok_impl.c"
        HEAP[$52]=$53; //@line 101 "xmltok_impl.c"
        $0=0; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 14: // $bb13
        var $54=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $55=$54+3; //@line 101 "xmltok_impl.c"
        $ptr_addr=$55; //@line 101 "xmltok_impl.c"
        __label__ = 30; break; //@line 101 "xmltok_impl.c"
      case 15: // $bb14
        var $56=$end_addr; //@line 101 "xmltok_impl.c"
        var $57=($56); //@line 101 "xmltok_impl.c"
        var $58=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $59=($58); //@line 101 "xmltok_impl.c"
        var $60=($57) - ($59); //@line 101 "xmltok_impl.c"
        var $61=($60) <= 3; //@line 101 "xmltok_impl.c"
        if ($61) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 101 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 17: // $bb16
        var $62=$enc_addr; //@line 101 "xmltok_impl.c"
        var $63=$62; //@line 101 "xmltok_impl.c"
        var $64=$63+364; //@line 101 "xmltok_impl.c"
        var $65=HEAP[$64]; //@line 101 "xmltok_impl.c"
        var $66=$enc_addr; //@line 101 "xmltok_impl.c"
        var $67=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $68=FUNCTION_TABLE[$65]($66, $67); //@line 101 "xmltok_impl.c"
        var $69=($68)!=0; //@line 101 "xmltok_impl.c"
        if ($69) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 101 "xmltok_impl.c"
      case 18: // $bb17
        var $70=$nextTokPtr_addr; //@line 101 "xmltok_impl.c"
        var $71=$ptr_addr; //@line 101 "xmltok_impl.c"
        HEAP[$70]=$71; //@line 101 "xmltok_impl.c"
        $0=0; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 19: // $bb18
        var $72=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $73=$72+4; //@line 101 "xmltok_impl.c"
        $ptr_addr=$73; //@line 101 "xmltok_impl.c"
        __label__ = 30; break; //@line 101 "xmltok_impl.c"
      case 20: // $bb19
        var $74=$nextTokPtr_addr; //@line 101 "xmltok_impl.c"
        var $75=$ptr_addr; //@line 101 "xmltok_impl.c"
        HEAP[$74]=$75; //@line 101 "xmltok_impl.c"
        $0=0; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 21: // $bb20
        var $76=$ptr_addr; //@line 103 "xmltok_impl.c"
        var $77=$76+1; //@line 103 "xmltok_impl.c"
        $ptr_addr=$77; //@line 103 "xmltok_impl.c"
        var $78=$ptr_addr; //@line 103 "xmltok_impl.c"
        var $79=$end_addr; //@line 103 "xmltok_impl.c"
        var $80=($78)==($79); //@line 103 "xmltok_impl.c"
        if ($80) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 103 "xmltok_impl.c"
      case 22: // $bb21
        $0=-1; //@line 104 "xmltok_impl.c"
        __label__ = 32; break; //@line 104 "xmltok_impl.c"
      case 23: // $bb22
        var $81=$ptr_addr; //@line 105 "xmltok_impl.c"
        var $82=HEAP[$81]; //@line 105 "xmltok_impl.c"
        var $83=($82)==45; //@line 105 "xmltok_impl.c"
        if ($83) { __label__ = 24; break; } else { __label__ = 30; break; } //@line 105 "xmltok_impl.c"
      case 24: // $bb23
        var $84=$ptr_addr; //@line 106 "xmltok_impl.c"
        var $85=$84+1; //@line 106 "xmltok_impl.c"
        $ptr_addr=$85; //@line 106 "xmltok_impl.c"
        var $86=$ptr_addr; //@line 106 "xmltok_impl.c"
        var $87=$end_addr; //@line 106 "xmltok_impl.c"
        var $88=($86)==($87); //@line 106 "xmltok_impl.c"
        if ($88) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 106 "xmltok_impl.c"
      case 25: // $bb24
        $0=-1; //@line 107 "xmltok_impl.c"
        __label__ = 32; break; //@line 107 "xmltok_impl.c"
      case 26: // $bb25
        var $89=$ptr_addr; //@line 108 "xmltok_impl.c"
        var $90=HEAP[$89]; //@line 108 "xmltok_impl.c"
        var $91=($90)!=62; //@line 108 "xmltok_impl.c"
        if ($91) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 108 "xmltok_impl.c"
      case 27: // $bb26
        var $92=$nextTokPtr_addr; //@line 109 "xmltok_impl.c"
        var $93=$ptr_addr; //@line 109 "xmltok_impl.c"
        HEAP[$92]=$93; //@line 109 "xmltok_impl.c"
        $0=0; //@line 110 "xmltok_impl.c"
        __label__ = 32; break; //@line 110 "xmltok_impl.c"
      case 28: // $bb27
        var $94=$ptr_addr; //@line 112 "xmltok_impl.c"
        var $95=$94+1; //@line 112 "xmltok_impl.c"
        var $96=$nextTokPtr_addr; //@line 112 "xmltok_impl.c"
        HEAP[$96]=$95; //@line 112 "xmltok_impl.c"
        $0=13; //@line 113 "xmltok_impl.c"
        __label__ = 32; break; //@line 113 "xmltok_impl.c"
      case 29: // $bb29
        var $97=$ptr_addr; //@line 117 "xmltok_impl.c"
        var $98=$97+1; //@line 117 "xmltok_impl.c"
        $ptr_addr=$98; //@line 117 "xmltok_impl.c"
        __label__ = 30; break; //@line 117 "xmltok_impl.c"
      case 30: // $bb30
        var $99=$ptr_addr; //@line 99 "xmltok_impl.c"
        var $100=$end_addr; //@line 99 "xmltok_impl.c"
        var $101=($99)!=($100); //@line 99 "xmltok_impl.c"
        if ($101) { __label__ = 4; break; } else { __label__ = 31; break; } //@line 99 "xmltok_impl.c"
      case 31: // $bb31
        $0=-1; //@line 122 "xmltok_impl.c"
        __label__ = 32; break; //@line 122 "xmltok_impl.c"
      case 32: // $bb32
        var $102=$0; //@line 96 "xmltok_impl.c"
        $retval=$102; //@line 96 "xmltok_impl.c"
        var $retval33=$retval; //@line 96 "xmltok_impl.c"
        ;
        return $retval33; //@line 96 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanDecl($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 131 "xmltok_impl.c"
        var $2=$end_addr; //@line 131 "xmltok_impl.c"
        var $3=($1)==($2); //@line 131 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 131 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 132 "xmltok_impl.c"
        __label__ = 17; break; //@line 132 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$enc_addr; //@line 133 "xmltok_impl.c"
        var $5=$4; //@line 133 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 133 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 133 "xmltok_impl.c"
        var $8=($7); //@line 133 "xmltok_impl.c"
        var $9=$5+76; //@line 133 "xmltok_impl.c"
        var $10=$9+$8; //@line 133 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 133 "xmltok_impl.c"
        var $12=($11); //@line 133 "xmltok_impl.c"
        if ($12 == 20) {
          __label__ = 4; break;
        }
        else if ($12 == 22) {
          __label__ = 5; break;
        }
        else if ($12 == 24) {
          __label__ = 5; break;
        }
        else if ($12 == 27) {
          __label__ = 3; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 3: // $bb2
        var $13=$ptr_addr; //@line 135 "xmltok_impl.c"
        var $14=$13+1; //@line 135 "xmltok_impl.c"
        var $15=$enc_addr; //@line 135 "xmltok_impl.c"
        var $16=$end_addr; //@line 135 "xmltok_impl.c"
        var $17=$nextTokPtr_addr; //@line 135 "xmltok_impl.c"
        var $18=_normal_scanComment($15, $14, $16, $17); //@line 135 "xmltok_impl.c"
        $0=$18; //@line 135 "xmltok_impl.c"
        __label__ = 17; break; //@line 135 "xmltok_impl.c"
      case 4: // $bb3
        var $19=$ptr_addr; //@line 137 "xmltok_impl.c"
        var $20=$19+1; //@line 137 "xmltok_impl.c"
        var $21=$nextTokPtr_addr; //@line 137 "xmltok_impl.c"
        HEAP[$21]=$20; //@line 137 "xmltok_impl.c"
        $0=33; //@line 138 "xmltok_impl.c"
        __label__ = 17; break; //@line 138 "xmltok_impl.c"
      case 5: // $bb4
        var $22=$ptr_addr; //@line 141 "xmltok_impl.c"
        var $23=$22+1; //@line 141 "xmltok_impl.c"
        $ptr_addr=$23; //@line 141 "xmltok_impl.c"
        __label__ = 15; break; //@line 141 "xmltok_impl.c"
      case 6: // $bb5
        var $24=$nextTokPtr_addr; //@line 144 "xmltok_impl.c"
        var $25=$ptr_addr; //@line 144 "xmltok_impl.c"
        HEAP[$24]=$25; //@line 144 "xmltok_impl.c"
        $0=0; //@line 145 "xmltok_impl.c"
        __label__ = 17; break; //@line 145 "xmltok_impl.c"
      case 7: // $bb6
        var $26=$enc_addr; //@line 148 "xmltok_impl.c"
        var $27=$26; //@line 148 "xmltok_impl.c"
        var $28=$ptr_addr; //@line 148 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 148 "xmltok_impl.c"
        var $30=($29); //@line 148 "xmltok_impl.c"
        var $31=$27+76; //@line 148 "xmltok_impl.c"
        var $32=$31+$30; //@line 148 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 148 "xmltok_impl.c"
        var $34=($33); //@line 148 "xmltok_impl.c"
        if ($34 == 9) {
          __label__ = 12; break;
        }
        else if ($34 == 10) {
          __label__ = 12; break;
        }
        else if ($34 == 21) {
          __label__ = 12; break;
        }
        else if ($34 == 22) {
          __label__ = 13; break;
        }
        else if ($34 == 24) {
          __label__ = 13; break;
        }
        else if ($34 == 30) {
          __label__ = 8; break;
        }
        else {
        __label__ = 14; break;
        }
        
      case 8: // $bb7
        var $35=$ptr_addr; //@line 150 "xmltok_impl.c"
        var $36=$35+1; //@line 150 "xmltok_impl.c"
        var $37=$end_addr; //@line 150 "xmltok_impl.c"
        var $38=($36)==($37); //@line 150 "xmltok_impl.c"
        if ($38) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 150 "xmltok_impl.c"
      case 9: // $bb8
        $0=-1; //@line 151 "xmltok_impl.c"
        __label__ = 17; break; //@line 151 "xmltok_impl.c"
      case 10: // $bb9
        var $39=$enc_addr; //@line 153 "xmltok_impl.c"
        var $40=$39; //@line 153 "xmltok_impl.c"
        var $41=$ptr_addr; //@line 153 "xmltok_impl.c"
        var $42=$41+1; //@line 153 "xmltok_impl.c"
        var $43=HEAP[$42]; //@line 153 "xmltok_impl.c"
        var $44=($43); //@line 153 "xmltok_impl.c"
        var $45=$40+76; //@line 153 "xmltok_impl.c"
        var $46=$45+$44; //@line 153 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 153 "xmltok_impl.c"
        var $48=($47); //@line 153 "xmltok_impl.c"
        if ($48 == 9) {
          __label__ = 11; break;
        }
        else if ($48 == 10) {
          __label__ = 11; break;
        }
        else if ($48 == 21) {
          __label__ = 11; break;
        }
        else if ($48 == 30) {
          __label__ = 11; break;
        }
        else {
        __label__ = 12; break;
        }
        
      case 11: // $bb10
        var $49=$nextTokPtr_addr; //@line 155 "xmltok_impl.c"
        var $50=$ptr_addr; //@line 155 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 155 "xmltok_impl.c"
        $0=0; //@line 156 "xmltok_impl.c"
        __label__ = 17; break; //@line 156 "xmltok_impl.c"
      case 12: // $bb11
        var $51=$nextTokPtr_addr; //@line 160 "xmltok_impl.c"
        var $52=$ptr_addr; //@line 160 "xmltok_impl.c"
        HEAP[$51]=$52; //@line 160 "xmltok_impl.c"
        $0=16; //@line 161 "xmltok_impl.c"
        __label__ = 17; break; //@line 161 "xmltok_impl.c"
      case 13: // $bb12
        var $53=$ptr_addr; //@line 164 "xmltok_impl.c"
        var $54=$53+1; //@line 164 "xmltok_impl.c"
        $ptr_addr=$54; //@line 164 "xmltok_impl.c"
        __label__ = 15; break; //@line 164 "xmltok_impl.c"
      case 14: // $bb13
        var $55=$nextTokPtr_addr; //@line 167 "xmltok_impl.c"
        var $56=$ptr_addr; //@line 167 "xmltok_impl.c"
        HEAP[$55]=$56; //@line 167 "xmltok_impl.c"
        $0=0; //@line 168 "xmltok_impl.c"
        __label__ = 17; break; //@line 168 "xmltok_impl.c"
      case 15: // $bb14
        var $57=$ptr_addr; //@line 147 "xmltok_impl.c"
        var $58=$end_addr; //@line 147 "xmltok_impl.c"
        var $59=($57)!=($58); //@line 147 "xmltok_impl.c"
        if ($59) { __label__ = 7; break; } else { __label__ = 16; break; } //@line 147 "xmltok_impl.c"
      case 16: // $bb15
        $0=-1; //@line 171 "xmltok_impl.c"
        __label__ = 17; break; //@line 171 "xmltok_impl.c"
      case 17: // $bb16
        var $60=$0; //@line 132 "xmltok_impl.c"
        $retval=$60; //@line 132 "xmltok_impl.c"
        var $retval17=$retval; //@line 132 "xmltok_impl.c"
        ;
        return $retval17; //@line 132 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_checkPiTarget($enc, $ptr, $end, $tokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $tokPtr_addr;
        var $retval;
        var $0;
        var $upper;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $tokPtr_addr=$tokPtr;
        $upper=0; //@line 178 "xmltok_impl.c"
        var $1=$tokPtr_addr; //@line 179 "xmltok_impl.c"
        HEAP[$1]=11; //@line 179 "xmltok_impl.c"
        var $2=$end_addr; //@line 180 "xmltok_impl.c"
        var $3=($2); //@line 180 "xmltok_impl.c"
        var $4=$ptr_addr; //@line 180 "xmltok_impl.c"
        var $5=($4); //@line 180 "xmltok_impl.c"
        var $6=($3) - ($5); //@line 180 "xmltok_impl.c"
        var $7=($6)!=3; //@line 180 "xmltok_impl.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 180 "xmltok_impl.c"
      case 1: // $bb
        $0=1; //@line 181 "xmltok_impl.c"
        __label__ = 14; break; //@line 181 "xmltok_impl.c"
      case 2: // $bb1
        var $8=$ptr_addr; //@line 182 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 182 "xmltok_impl.c"
        var $10=($9); //@line 182 "xmltok_impl.c"
        if ($10 == 88) {
          __label__ = 3; break;
        }
        else if ($10 == 120) {
          __label__ = 5; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 3: // $bb3
        $upper=1; //@line 186 "xmltok_impl.c"
        __label__ = 5; break; //@line 186 "xmltok_impl.c"
      case 4: // $bb4
        $0=1; //@line 189 "xmltok_impl.c"
        __label__ = 14; break; //@line 189 "xmltok_impl.c"
      case 5: // $bb5
        var $11=$ptr_addr; //@line 191 "xmltok_impl.c"
        var $12=$11+1; //@line 191 "xmltok_impl.c"
        $ptr_addr=$12; //@line 191 "xmltok_impl.c"
        var $13=$ptr_addr; //@line 192 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 192 "xmltok_impl.c"
        var $15=($14); //@line 192 "xmltok_impl.c"
        if ($15 == 77) {
          __label__ = 6; break;
        }
        else if ($15 == 109) {
          __label__ = 8; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 6: // $bb7
        $upper=1; //@line 196 "xmltok_impl.c"
        __label__ = 8; break; //@line 196 "xmltok_impl.c"
      case 7: // $bb8
        $0=1; //@line 199 "xmltok_impl.c"
        __label__ = 14; break; //@line 199 "xmltok_impl.c"
      case 8: // $bb9
        var $16=$ptr_addr; //@line 201 "xmltok_impl.c"
        var $17=$16+1; //@line 201 "xmltok_impl.c"
        $ptr_addr=$17; //@line 201 "xmltok_impl.c"
        var $18=$ptr_addr; //@line 202 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 202 "xmltok_impl.c"
        var $20=($19); //@line 202 "xmltok_impl.c"
        if ($20 == 76) {
          __label__ = 9; break;
        }
        else if ($20 == 108) {
          __label__ = 11; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 9: // $bb13_thread
        $upper=1; //@line 206 "xmltok_impl.c"
        __label__ = 12; break;
      case 10: // $bb12
        $0=1; //@line 209 "xmltok_impl.c"
        __label__ = 14; break; //@line 209 "xmltok_impl.c"
      case 11: // $bb13
        var $_pr=$upper;
        var $21=($_pr)!=0; //@line 211 "xmltok_impl.c"
        if ($21) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 211 "xmltok_impl.c"
      case 12: // $bb14
        $0=0; //@line 212 "xmltok_impl.c"
        __label__ = 14; break; //@line 212 "xmltok_impl.c"
      case 13: // $bb15
        var $22=$tokPtr_addr; //@line 213 "xmltok_impl.c"
        HEAP[$22]=12; //@line 213 "xmltok_impl.c"
        $0=1; //@line 214 "xmltok_impl.c"
        __label__ = 14; break; //@line 214 "xmltok_impl.c"
      case 14: // $bb16
        var $23=$0; //@line 181 "xmltok_impl.c"
        $retval=$23; //@line 181 "xmltok_impl.c"
        var $retval17=$retval; //@line 181 "xmltok_impl.c"
        ;
        return $retval17; //@line 181 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanPi($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $tok=__stackBase__;
        var $target;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 224 "xmltok_impl.c"
        $target=$1; //@line 224 "xmltok_impl.c"
        var $2=$ptr_addr; //@line 225 "xmltok_impl.c"
        var $3=$end_addr; //@line 225 "xmltok_impl.c"
        var $4=($2)==($3); //@line 225 "xmltok_impl.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 225 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 226 "xmltok_impl.c"
        __label__ = 75; break; //@line 226 "xmltok_impl.c"
      case 2: // $bb1
        var $5=$enc_addr; //@line 227 "xmltok_impl.c"
        var $6=$5; //@line 227 "xmltok_impl.c"
        var $7=$ptr_addr; //@line 227 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 227 "xmltok_impl.c"
        var $9=($8); //@line 227 "xmltok_impl.c"
        var $10=$6+76; //@line 227 "xmltok_impl.c"
        var $11=$10+$9; //@line 227 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 227 "xmltok_impl.c"
        var $13=($12); //@line 227 "xmltok_impl.c"
        if ($13 == 5) {
          __label__ = 5; break;
        }
        else if ($13 == 6) {
          __label__ = 10; break;
        }
        else if ($13 == 7) {
          __label__ = 15; break;
        }
        else if ($13 == 22) {
          __label__ = 4; break;
        }
        else if ($13 == 24) {
          __label__ = 4; break;
        }
        else if ($13 == 29) {
          __label__ = 3; break;
        }
        else {
        __label__ = 20; break;
        }
        
      case 3: // $bb2
        var $14=$nextTokPtr_addr; //@line 228 "xmltok_impl.c"
        var $15=$ptr_addr; //@line 228 "xmltok_impl.c"
        HEAP[$14]=$15; //@line 228 "xmltok_impl.c"
        $0=0; //@line 228 "xmltok_impl.c"
        __label__ = 75; break; //@line 228 "xmltok_impl.c"
      case 4: // $bb3
        var $16=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $17=$16+1; //@line 228 "xmltok_impl.c"
        $ptr_addr=$17; //@line 228 "xmltok_impl.c"
        __label__ = 73; break; //@line 228 "xmltok_impl.c"
      case 5: // $bb4
        var $18=$end_addr; //@line 228 "xmltok_impl.c"
        var $19=($18); //@line 228 "xmltok_impl.c"
        var $20=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $21=($20); //@line 228 "xmltok_impl.c"
        var $22=($19) - ($21); //@line 228 "xmltok_impl.c"
        var $23=($22) <= 1; //@line 228 "xmltok_impl.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 228 "xmltok_impl.c"
      case 6: // $bb5
        $0=-2; //@line 228 "xmltok_impl.c"
        __label__ = 75; break; //@line 228 "xmltok_impl.c"
      case 7: // $bb6
        var $24=$enc_addr; //@line 228 "xmltok_impl.c"
        var $25=$24; //@line 228 "xmltok_impl.c"
        var $26=$25+344; //@line 228 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 228 "xmltok_impl.c"
        var $28=$enc_addr; //@line 228 "xmltok_impl.c"
        var $29=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $30=FUNCTION_TABLE[$27]($28, $29); //@line 228 "xmltok_impl.c"
        var $31=($30)==0; //@line 228 "xmltok_impl.c"
        if ($31) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 228 "xmltok_impl.c"
      case 8: // $bb7
        var $32=$nextTokPtr_addr; //@line 228 "xmltok_impl.c"
        var $33=$ptr_addr; //@line 228 "xmltok_impl.c"
        HEAP[$32]=$33; //@line 228 "xmltok_impl.c"
        $0=0; //@line 228 "xmltok_impl.c"
        __label__ = 75; break; //@line 228 "xmltok_impl.c"
      case 9: // $bb8
        var $34=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $35=$34+2; //@line 228 "xmltok_impl.c"
        $ptr_addr=$35; //@line 228 "xmltok_impl.c"
        __label__ = 73; break; //@line 228 "xmltok_impl.c"
      case 10: // $bb9
        var $36=$end_addr; //@line 228 "xmltok_impl.c"
        var $37=($36); //@line 228 "xmltok_impl.c"
        var $38=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $39=($38); //@line 228 "xmltok_impl.c"
        var $40=($37) - ($39); //@line 228 "xmltok_impl.c"
        var $41=($40) <= 2; //@line 228 "xmltok_impl.c"
        if ($41) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 228 "xmltok_impl.c"
      case 11: // $bb10
        $0=-2; //@line 228 "xmltok_impl.c"
        __label__ = 75; break; //@line 228 "xmltok_impl.c"
      case 12: // $bb11
        var $42=$enc_addr; //@line 228 "xmltok_impl.c"
        var $43=$42; //@line 228 "xmltok_impl.c"
        var $44=$43+348; //@line 228 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 228 "xmltok_impl.c"
        var $46=$enc_addr; //@line 228 "xmltok_impl.c"
        var $47=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $48=FUNCTION_TABLE[$45]($46, $47); //@line 228 "xmltok_impl.c"
        var $49=($48)==0; //@line 228 "xmltok_impl.c"
        if ($49) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 228 "xmltok_impl.c"
      case 13: // $bb12
        var $50=$nextTokPtr_addr; //@line 228 "xmltok_impl.c"
        var $51=$ptr_addr; //@line 228 "xmltok_impl.c"
        HEAP[$50]=$51; //@line 228 "xmltok_impl.c"
        $0=0; //@line 228 "xmltok_impl.c"
        __label__ = 75; break; //@line 228 "xmltok_impl.c"
      case 14: // $bb13
        var $52=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $53=$52+3; //@line 228 "xmltok_impl.c"
        $ptr_addr=$53; //@line 228 "xmltok_impl.c"
        __label__ = 73; break; //@line 228 "xmltok_impl.c"
      case 15: // $bb14
        var $54=$end_addr; //@line 228 "xmltok_impl.c"
        var $55=($54); //@line 228 "xmltok_impl.c"
        var $56=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $57=($56); //@line 228 "xmltok_impl.c"
        var $58=($55) - ($57); //@line 228 "xmltok_impl.c"
        var $59=($58) <= 3; //@line 228 "xmltok_impl.c"
        if ($59) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 228 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 228 "xmltok_impl.c"
        __label__ = 75; break; //@line 228 "xmltok_impl.c"
      case 17: // $bb16
        var $60=$enc_addr; //@line 228 "xmltok_impl.c"
        var $61=$60; //@line 228 "xmltok_impl.c"
        var $62=$61+352; //@line 228 "xmltok_impl.c"
        var $63=HEAP[$62]; //@line 228 "xmltok_impl.c"
        var $64=$enc_addr; //@line 228 "xmltok_impl.c"
        var $65=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $66=FUNCTION_TABLE[$63]($64, $65); //@line 228 "xmltok_impl.c"
        var $67=($66)==0; //@line 228 "xmltok_impl.c"
        if ($67) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 228 "xmltok_impl.c"
      case 18: // $bb17
        var $68=$nextTokPtr_addr; //@line 228 "xmltok_impl.c"
        var $69=$ptr_addr; //@line 228 "xmltok_impl.c"
        HEAP[$68]=$69; //@line 228 "xmltok_impl.c"
        $0=0; //@line 228 "xmltok_impl.c"
        __label__ = 75; break; //@line 228 "xmltok_impl.c"
      case 19: // $bb18
        var $70=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $71=$70+4; //@line 228 "xmltok_impl.c"
        $ptr_addr=$71; //@line 228 "xmltok_impl.c"
        __label__ = 73; break; //@line 228 "xmltok_impl.c"
      case 20: // $bb19
        var $72=$nextTokPtr_addr; //@line 230 "xmltok_impl.c"
        var $73=$ptr_addr; //@line 230 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 230 "xmltok_impl.c"
        $0=0; //@line 231 "xmltok_impl.c"
        __label__ = 75; break; //@line 231 "xmltok_impl.c"
      case 21: // $bb21
        var $74=$enc_addr; //@line 234 "xmltok_impl.c"
        var $75=$74; //@line 234 "xmltok_impl.c"
        var $76=$ptr_addr; //@line 234 "xmltok_impl.c"
        var $77=HEAP[$76]; //@line 234 "xmltok_impl.c"
        var $78=($77); //@line 234 "xmltok_impl.c"
        var $79=$75+76; //@line 234 "xmltok_impl.c"
        var $80=$79+$78; //@line 234 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 234 "xmltok_impl.c"
        var $82=($81); //@line 234 "xmltok_impl.c"
        if ($82 == 5) {
          __label__ = 24; break;
        }
        else if ($82 == 6) {
          __label__ = 29; break;
        }
        else if ($82 == 7) {
          __label__ = 34; break;
        }
        else if ($82 == 9) {
          __label__ = 39; break;
        }
        else if ($82 == 10) {
          __label__ = 39; break;
        }
        else if ($82 == 15) {
          __label__ = 66; break;
        }
        else if ($82 == 21) {
          __label__ = 39; break;
        }
        else if ($82 == 22) {
          __label__ = 23; break;
        }
        else if ($82 == 24) {
          __label__ = 23; break;
        }
        else if ($82 == 25) {
          __label__ = 23; break;
        }
        else if ($82 == 26) {
          __label__ = 23; break;
        }
        else if ($82 == 27) {
          __label__ = 23; break;
        }
        else if ($82 == 29) {
          __label__ = 22; break;
        }
        else {
        __label__ = 72; break;
        }
        
      case 22: // $bb22
        var $83=$nextTokPtr_addr; //@line 235 "xmltok_impl.c"
        var $84=$ptr_addr; //@line 235 "xmltok_impl.c"
        HEAP[$83]=$84; //@line 235 "xmltok_impl.c"
        $0=0; //@line 235 "xmltok_impl.c"
        __label__ = 75; break; //@line 235 "xmltok_impl.c"
      case 23: // $bb23
        var $85=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $86=$85+1; //@line 235 "xmltok_impl.c"
        $ptr_addr=$86; //@line 235 "xmltok_impl.c"
        __label__ = 73; break; //@line 235 "xmltok_impl.c"
      case 24: // $bb24
        var $87=$end_addr; //@line 235 "xmltok_impl.c"
        var $88=($87); //@line 235 "xmltok_impl.c"
        var $89=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $90=($89); //@line 235 "xmltok_impl.c"
        var $91=($88) - ($90); //@line 235 "xmltok_impl.c"
        var $92=($91) <= 1; //@line 235 "xmltok_impl.c"
        if ($92) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 235 "xmltok_impl.c"
      case 25: // $bb25
        $0=-2; //@line 235 "xmltok_impl.c"
        __label__ = 75; break; //@line 235 "xmltok_impl.c"
      case 26: // $bb26
        var $93=$enc_addr; //@line 235 "xmltok_impl.c"
        var $94=$93; //@line 235 "xmltok_impl.c"
        var $95=$94+332; //@line 235 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 235 "xmltok_impl.c"
        var $97=$enc_addr; //@line 235 "xmltok_impl.c"
        var $98=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $99=FUNCTION_TABLE[$96]($97, $98); //@line 235 "xmltok_impl.c"
        var $100=($99)==0; //@line 235 "xmltok_impl.c"
        if ($100) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 235 "xmltok_impl.c"
      case 27: // $bb27
        var $101=$nextTokPtr_addr; //@line 235 "xmltok_impl.c"
        var $102=$ptr_addr; //@line 235 "xmltok_impl.c"
        HEAP[$101]=$102; //@line 235 "xmltok_impl.c"
        $0=0; //@line 235 "xmltok_impl.c"
        __label__ = 75; break; //@line 235 "xmltok_impl.c"
      case 28: // $bb28
        var $103=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $104=$103+2; //@line 235 "xmltok_impl.c"
        $ptr_addr=$104; //@line 235 "xmltok_impl.c"
        __label__ = 73; break; //@line 235 "xmltok_impl.c"
      case 29: // $bb29
        var $105=$end_addr; //@line 235 "xmltok_impl.c"
        var $106=($105); //@line 235 "xmltok_impl.c"
        var $107=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $108=($107); //@line 235 "xmltok_impl.c"
        var $109=($106) - ($108); //@line 235 "xmltok_impl.c"
        var $110=($109) <= 2; //@line 235 "xmltok_impl.c"
        if ($110) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 235 "xmltok_impl.c"
      case 30: // $bb30
        $0=-2; //@line 235 "xmltok_impl.c"
        __label__ = 75; break; //@line 235 "xmltok_impl.c"
      case 31: // $bb31
        var $111=$enc_addr; //@line 235 "xmltok_impl.c"
        var $112=$111; //@line 235 "xmltok_impl.c"
        var $113=$112+336; //@line 235 "xmltok_impl.c"
        var $114=HEAP[$113]; //@line 235 "xmltok_impl.c"
        var $115=$enc_addr; //@line 235 "xmltok_impl.c"
        var $116=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $117=FUNCTION_TABLE[$114]($115, $116); //@line 235 "xmltok_impl.c"
        var $118=($117)==0; //@line 235 "xmltok_impl.c"
        if ($118) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 235 "xmltok_impl.c"
      case 32: // $bb32
        var $119=$nextTokPtr_addr; //@line 235 "xmltok_impl.c"
        var $120=$ptr_addr; //@line 235 "xmltok_impl.c"
        HEAP[$119]=$120; //@line 235 "xmltok_impl.c"
        $0=0; //@line 235 "xmltok_impl.c"
        __label__ = 75; break; //@line 235 "xmltok_impl.c"
      case 33: // $bb33
        var $121=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $122=$121+3; //@line 235 "xmltok_impl.c"
        $ptr_addr=$122; //@line 235 "xmltok_impl.c"
        __label__ = 73; break; //@line 235 "xmltok_impl.c"
      case 34: // $bb34
        var $123=$end_addr; //@line 235 "xmltok_impl.c"
        var $124=($123); //@line 235 "xmltok_impl.c"
        var $125=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $126=($125); //@line 235 "xmltok_impl.c"
        var $127=($124) - ($126); //@line 235 "xmltok_impl.c"
        var $128=($127) <= 3; //@line 235 "xmltok_impl.c"
        if ($128) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 235 "xmltok_impl.c"
      case 35: // $bb35
        $0=-2; //@line 235 "xmltok_impl.c"
        __label__ = 75; break; //@line 235 "xmltok_impl.c"
      case 36: // $bb36
        var $129=$enc_addr; //@line 235 "xmltok_impl.c"
        var $130=$129; //@line 235 "xmltok_impl.c"
        var $131=$130+340; //@line 235 "xmltok_impl.c"
        var $132=HEAP[$131]; //@line 235 "xmltok_impl.c"
        var $133=$enc_addr; //@line 235 "xmltok_impl.c"
        var $134=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $135=FUNCTION_TABLE[$132]($133, $134); //@line 235 "xmltok_impl.c"
        var $136=($135)==0; //@line 235 "xmltok_impl.c"
        if ($136) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 235 "xmltok_impl.c"
      case 37: // $bb37
        var $137=$nextTokPtr_addr; //@line 235 "xmltok_impl.c"
        var $138=$ptr_addr; //@line 235 "xmltok_impl.c"
        HEAP[$137]=$138; //@line 235 "xmltok_impl.c"
        $0=0; //@line 235 "xmltok_impl.c"
        __label__ = 75; break; //@line 235 "xmltok_impl.c"
      case 38: // $bb38
        var $139=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $140=$139+4; //@line 235 "xmltok_impl.c"
        $ptr_addr=$140; //@line 235 "xmltok_impl.c"
        __label__ = 73; break; //@line 235 "xmltok_impl.c"
      case 39: // $bb39
        var $141=$enc_addr; //@line 237 "xmltok_impl.c"
        var $142=$target; //@line 237 "xmltok_impl.c"
        var $143=$ptr_addr; //@line 237 "xmltok_impl.c"
        var $144=_normal_checkPiTarget($141, $142, $143, $tok); //@line 237 "xmltok_impl.c"
        var $145=($144)==0; //@line 237 "xmltok_impl.c"
        if ($145) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 237 "xmltok_impl.c"
      case 40: // $bb40
        var $146=$nextTokPtr_addr; //@line 238 "xmltok_impl.c"
        var $147=$ptr_addr; //@line 238 "xmltok_impl.c"
        HEAP[$146]=$147; //@line 238 "xmltok_impl.c"
        $0=0; //@line 239 "xmltok_impl.c"
        __label__ = 75; break; //@line 239 "xmltok_impl.c"
      case 41: // $bb41
        var $148=$ptr_addr; //@line 241 "xmltok_impl.c"
        var $149=$148+1; //@line 241 "xmltok_impl.c"
        $ptr_addr=$149; //@line 241 "xmltok_impl.c"
        __label__ = 64; break; //@line 241 "xmltok_impl.c"
      case 42: // $bb42
        var $150=$enc_addr; //@line 243 "xmltok_impl.c"
        var $151=$150; //@line 243 "xmltok_impl.c"
        var $152=$ptr_addr; //@line 243 "xmltok_impl.c"
        var $153=HEAP[$152]; //@line 243 "xmltok_impl.c"
        var $154=($153); //@line 243 "xmltok_impl.c"
        var $155=$151+76; //@line 243 "xmltok_impl.c"
        var $156=$155+$154; //@line 243 "xmltok_impl.c"
        var $157=HEAP[$156]; //@line 243 "xmltok_impl.c"
        var $158=($157); //@line 243 "xmltok_impl.c"
        if ($158 == 0) {
          __label__ = 58; break;
        }
        else if ($158 == 1) {
          __label__ = 58; break;
        }
        else if ($158 == 5) {
          __label__ = 43; break;
        }
        else if ($158 == 6) {
          __label__ = 48; break;
        }
        else if ($158 == 7) {
          __label__ = 53; break;
        }
        else if ($158 == 8) {
          __label__ = 58; break;
        }
        else if ($158 == 15) {
          __label__ = 59; break;
        }
        else {
        __label__ = 63; break;
        }
        
      case 43: // $bb43
        var $159=$end_addr; //@line 244 "xmltok_impl.c"
        var $160=($159); //@line 244 "xmltok_impl.c"
        var $161=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $162=($161); //@line 244 "xmltok_impl.c"
        var $163=($160) - ($162); //@line 244 "xmltok_impl.c"
        var $164=($163) <= 1; //@line 244 "xmltok_impl.c"
        if ($164) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 244 "xmltok_impl.c"
      case 44: // $bb44
        $0=-2; //@line 244 "xmltok_impl.c"
        __label__ = 75; break; //@line 244 "xmltok_impl.c"
      case 45: // $bb45
        var $165=$enc_addr; //@line 244 "xmltok_impl.c"
        var $166=$165; //@line 244 "xmltok_impl.c"
        var $167=$166+356; //@line 244 "xmltok_impl.c"
        var $168=HEAP[$167]; //@line 244 "xmltok_impl.c"
        var $169=$enc_addr; //@line 244 "xmltok_impl.c"
        var $170=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $171=FUNCTION_TABLE[$168]($169, $170); //@line 244 "xmltok_impl.c"
        var $172=($171)!=0; //@line 244 "xmltok_impl.c"
        if ($172) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 244 "xmltok_impl.c"
      case 46: // $bb46
        var $173=$nextTokPtr_addr; //@line 244 "xmltok_impl.c"
        var $174=$ptr_addr; //@line 244 "xmltok_impl.c"
        HEAP[$173]=$174; //@line 244 "xmltok_impl.c"
        $0=0; //@line 244 "xmltok_impl.c"
        __label__ = 75; break; //@line 244 "xmltok_impl.c"
      case 47: // $bb47
        var $175=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $176=$175+2; //@line 244 "xmltok_impl.c"
        $ptr_addr=$176; //@line 244 "xmltok_impl.c"
        __label__ = 64; break; //@line 244 "xmltok_impl.c"
      case 48: // $bb48
        var $177=$end_addr; //@line 244 "xmltok_impl.c"
        var $178=($177); //@line 244 "xmltok_impl.c"
        var $179=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $180=($179); //@line 244 "xmltok_impl.c"
        var $181=($178) - ($180); //@line 244 "xmltok_impl.c"
        var $182=($181) <= 2; //@line 244 "xmltok_impl.c"
        if ($182) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 244 "xmltok_impl.c"
      case 49: // $bb49
        $0=-2; //@line 244 "xmltok_impl.c"
        __label__ = 75; break; //@line 244 "xmltok_impl.c"
      case 50: // $bb50
        var $183=$enc_addr; //@line 244 "xmltok_impl.c"
        var $184=$183; //@line 244 "xmltok_impl.c"
        var $185=$184+360; //@line 244 "xmltok_impl.c"
        var $186=HEAP[$185]; //@line 244 "xmltok_impl.c"
        var $187=$enc_addr; //@line 244 "xmltok_impl.c"
        var $188=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $189=FUNCTION_TABLE[$186]($187, $188); //@line 244 "xmltok_impl.c"
        var $190=($189)!=0; //@line 244 "xmltok_impl.c"
        if ($190) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 244 "xmltok_impl.c"
      case 51: // $bb51
        var $191=$nextTokPtr_addr; //@line 244 "xmltok_impl.c"
        var $192=$ptr_addr; //@line 244 "xmltok_impl.c"
        HEAP[$191]=$192; //@line 244 "xmltok_impl.c"
        $0=0; //@line 244 "xmltok_impl.c"
        __label__ = 75; break; //@line 244 "xmltok_impl.c"
      case 52: // $bb52
        var $193=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $194=$193+3; //@line 244 "xmltok_impl.c"
        $ptr_addr=$194; //@line 244 "xmltok_impl.c"
        __label__ = 64; break; //@line 244 "xmltok_impl.c"
      case 53: // $bb53
        var $195=$end_addr; //@line 244 "xmltok_impl.c"
        var $196=($195); //@line 244 "xmltok_impl.c"
        var $197=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $198=($197); //@line 244 "xmltok_impl.c"
        var $199=($196) - ($198); //@line 244 "xmltok_impl.c"
        var $200=($199) <= 3; //@line 244 "xmltok_impl.c"
        if ($200) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 244 "xmltok_impl.c"
      case 54: // $bb54
        $0=-2; //@line 244 "xmltok_impl.c"
        __label__ = 75; break; //@line 244 "xmltok_impl.c"
      case 55: // $bb55
        var $201=$enc_addr; //@line 244 "xmltok_impl.c"
        var $202=$201; //@line 244 "xmltok_impl.c"
        var $203=$202+364; //@line 244 "xmltok_impl.c"
        var $204=HEAP[$203]; //@line 244 "xmltok_impl.c"
        var $205=$enc_addr; //@line 244 "xmltok_impl.c"
        var $206=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $207=FUNCTION_TABLE[$204]($205, $206); //@line 244 "xmltok_impl.c"
        var $208=($207)!=0; //@line 244 "xmltok_impl.c"
        if ($208) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 244 "xmltok_impl.c"
      case 56: // $bb56
        var $209=$nextTokPtr_addr; //@line 244 "xmltok_impl.c"
        var $210=$ptr_addr; //@line 244 "xmltok_impl.c"
        HEAP[$209]=$210; //@line 244 "xmltok_impl.c"
        $0=0; //@line 244 "xmltok_impl.c"
        __label__ = 75; break; //@line 244 "xmltok_impl.c"
      case 57: // $bb57
        var $211=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $212=$211+4; //@line 244 "xmltok_impl.c"
        $ptr_addr=$212; //@line 244 "xmltok_impl.c"
        __label__ = 64; break; //@line 244 "xmltok_impl.c"
      case 58: // $bb58
        var $213=$nextTokPtr_addr; //@line 244 "xmltok_impl.c"
        var $214=$ptr_addr; //@line 244 "xmltok_impl.c"
        HEAP[$213]=$214; //@line 244 "xmltok_impl.c"
        $0=0; //@line 244 "xmltok_impl.c"
        __label__ = 75; break; //@line 244 "xmltok_impl.c"
      case 59: // $bb59
        var $215=$ptr_addr; //@line 246 "xmltok_impl.c"
        var $216=$215+1; //@line 246 "xmltok_impl.c"
        $ptr_addr=$216; //@line 246 "xmltok_impl.c"
        var $217=$ptr_addr; //@line 247 "xmltok_impl.c"
        var $218=$end_addr; //@line 247 "xmltok_impl.c"
        var $219=($217)==($218); //@line 247 "xmltok_impl.c"
        if ($219) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 247 "xmltok_impl.c"
      case 60: // $bb60
        $0=-1; //@line 248 "xmltok_impl.c"
        __label__ = 75; break; //@line 248 "xmltok_impl.c"
      case 61: // $bb61
        var $220=$ptr_addr; //@line 249 "xmltok_impl.c"
        var $221=HEAP[$220]; //@line 249 "xmltok_impl.c"
        var $222=($221)==62; //@line 249 "xmltok_impl.c"
        if ($222) { __label__ = 62; break; } else { __label__ = 64; break; } //@line 249 "xmltok_impl.c"
      case 62: // $bb62
        var $223=$ptr_addr; //@line 250 "xmltok_impl.c"
        var $224=$223+1; //@line 250 "xmltok_impl.c"
        var $225=$nextTokPtr_addr; //@line 250 "xmltok_impl.c"
        HEAP[$225]=$224; //@line 250 "xmltok_impl.c"
        var $226=HEAP[$tok]; //@line 251 "xmltok_impl.c"
        $0=$226; //@line 251 "xmltok_impl.c"
        __label__ = 75; break; //@line 251 "xmltok_impl.c"
      case 63: // $bb64
        var $227=$ptr_addr; //@line 255 "xmltok_impl.c"
        var $228=$227+1; //@line 255 "xmltok_impl.c"
        $ptr_addr=$228; //@line 255 "xmltok_impl.c"
        __label__ = 64; break; //@line 255 "xmltok_impl.c"
      case 64: // $bb65
        var $229=$ptr_addr; //@line 242 "xmltok_impl.c"
        var $230=$end_addr; //@line 242 "xmltok_impl.c"
        var $231=($229)!=($230); //@line 242 "xmltok_impl.c"
        if ($231) { __label__ = 42; break; } else { __label__ = 65; break; } //@line 242 "xmltok_impl.c"
      case 65: // $bb66
        $0=-1; //@line 259 "xmltok_impl.c"
        __label__ = 75; break; //@line 259 "xmltok_impl.c"
      case 66: // $bb67
        var $232=$enc_addr; //@line 261 "xmltok_impl.c"
        var $233=$target; //@line 261 "xmltok_impl.c"
        var $234=$ptr_addr; //@line 261 "xmltok_impl.c"
        var $235=_normal_checkPiTarget($232, $233, $234, $tok); //@line 261 "xmltok_impl.c"
        var $236=($235)==0; //@line 261 "xmltok_impl.c"
        if ($236) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 261 "xmltok_impl.c"
      case 67: // $bb68
        var $237=$nextTokPtr_addr; //@line 262 "xmltok_impl.c"
        var $238=$ptr_addr; //@line 262 "xmltok_impl.c"
        HEAP[$237]=$238; //@line 262 "xmltok_impl.c"
        $0=0; //@line 263 "xmltok_impl.c"
        __label__ = 75; break; //@line 263 "xmltok_impl.c"
      case 68: // $bb69
        var $239=$ptr_addr; //@line 265 "xmltok_impl.c"
        var $240=$239+1; //@line 265 "xmltok_impl.c"
        $ptr_addr=$240; //@line 265 "xmltok_impl.c"
        var $241=$ptr_addr; //@line 266 "xmltok_impl.c"
        var $242=$end_addr; //@line 266 "xmltok_impl.c"
        var $243=($241)==($242); //@line 266 "xmltok_impl.c"
        if ($243) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 266 "xmltok_impl.c"
      case 69: // $bb70
        $0=-1; //@line 267 "xmltok_impl.c"
        __label__ = 75; break; //@line 267 "xmltok_impl.c"
      case 70: // $bb71
        var $244=$ptr_addr; //@line 268 "xmltok_impl.c"
        var $245=HEAP[$244]; //@line 268 "xmltok_impl.c"
        var $246=($245)==62; //@line 268 "xmltok_impl.c"
        if ($246) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 268 "xmltok_impl.c"
      case 71: // $bb72
        var $247=$ptr_addr; //@line 269 "xmltok_impl.c"
        var $248=$247+1; //@line 269 "xmltok_impl.c"
        var $249=$nextTokPtr_addr; //@line 269 "xmltok_impl.c"
        HEAP[$249]=$248; //@line 269 "xmltok_impl.c"
        var $250=HEAP[$tok]; //@line 270 "xmltok_impl.c"
        $0=$250; //@line 270 "xmltok_impl.c"
        __label__ = 75; break; //@line 270 "xmltok_impl.c"
      case 72: // $bb73
        var $251=$nextTokPtr_addr; //@line 274 "xmltok_impl.c"
        var $252=$ptr_addr; //@line 274 "xmltok_impl.c"
        HEAP[$251]=$252; //@line 274 "xmltok_impl.c"
        $0=0; //@line 275 "xmltok_impl.c"
        __label__ = 75; break; //@line 275 "xmltok_impl.c"
      case 73: // $bb74
        var $253=$ptr_addr; //@line 233 "xmltok_impl.c"
        var $254=$end_addr; //@line 233 "xmltok_impl.c"
        var $255=($253)!=($254); //@line 233 "xmltok_impl.c"
        if ($255) { __label__ = 21; break; } else { __label__ = 74; break; } //@line 233 "xmltok_impl.c"
      case 74: // $bb75
        $0=-1; //@line 278 "xmltok_impl.c"
        __label__ = 75; break; //@line 278 "xmltok_impl.c"
      case 75: // $bb76
        var $256=$0; //@line 226 "xmltok_impl.c"
        $retval=$256; //@line 226 "xmltok_impl.c"
        var $retval77=$retval; //@line 226 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval77; //@line 226 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanCdataSection($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $i;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$end_addr; //@line 289 "xmltok_impl.c"
        var $2=($1); //@line 289 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 289 "xmltok_impl.c"
        var $4=($3); //@line 289 "xmltok_impl.c"
        var $5=($2) - ($4); //@line 289 "xmltok_impl.c"
        var $6=($5) <= 5; //@line 289 "xmltok_impl.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 289 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 290 "xmltok_impl.c"
        __label__ = 8; break; //@line 290 "xmltok_impl.c"
      case 2: // $bb1
        $i=0; //@line 291 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 6; break; //@line 291 "xmltok_impl.c"
      case 3: // $bb2
        var $7=$ptr_addr; //@line 292 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 292 "xmltok_impl.c"
        var $9=$i; //@line 292 "xmltok_impl.c"
        var $10=_CDATA_LSQB_9078+$9; //@line 292 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 292 "xmltok_impl.c"
        var $12=($8)!=($11); //@line 292 "xmltok_impl.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 292 "xmltok_impl.c"
      case 4: // $bb3
        var $13=$nextTokPtr_addr; //@line 293 "xmltok_impl.c"
        var $14=$ptr_addr; //@line 293 "xmltok_impl.c"
        HEAP[$13]=$14; //@line 293 "xmltok_impl.c"
        $0=0; //@line 294 "xmltok_impl.c"
        __label__ = 8; break; //@line 294 "xmltok_impl.c"
      case 5: // $bb4
        var $15=$i; //@line 291 "xmltok_impl.c"
        var $16=($15) + 1; //@line 291 "xmltok_impl.c"
        $i=$16; //@line 291 "xmltok_impl.c"
        var $17=$ptr_addr; //@line 291 "xmltok_impl.c"
        var $18=$17+1; //@line 291 "xmltok_impl.c"
        $ptr_addr=$18; //@line 291 "xmltok_impl.c"
        __lastLabel__ = 5; __label__ = 6; break; //@line 291 "xmltok_impl.c"
      case 6: // $bb5
        var $19=__lastLabel__ == 5 ? $16 : (0);
        var $20=($19) <= 5; //@line 291 "xmltok_impl.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 291 "xmltok_impl.c"
      case 7: // $bb6
        var $21=$nextTokPtr_addr; //@line 297 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 297 "xmltok_impl.c"
        HEAP[$21]=$22; //@line 297 "xmltok_impl.c"
        $0=8; //@line 298 "xmltok_impl.c"
        __label__ = 8; break; //@line 298 "xmltok_impl.c"
      case 8: // $bb7
        var $23=$0; //@line 290 "xmltok_impl.c"
        $retval=$23; //@line 290 "xmltok_impl.c"
        var $retval8=$retval; //@line 290 "xmltok_impl.c"
        ;
        return $retval8; //@line 290 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_cdataSectionTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 305 "xmltok_impl.c"
        var $2=$end_addr; //@line 305 "xmltok_impl.c"
        var $3=($1)==($2); //@line 305 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 305 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 306 "xmltok_impl.c"
        __label__ = 51; break; //@line 306 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$enc_addr; //@line 316 "xmltok_impl.c"
        var $5=$4; //@line 316 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 316 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 316 "xmltok_impl.c"
        var $8=($7); //@line 316 "xmltok_impl.c"
        var $9=$5+76; //@line 316 "xmltok_impl.c"
        var $10=$9+$8; //@line 316 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 316 "xmltok_impl.c"
        var $12=($11); //@line 316 "xmltok_impl.c"
        if ($12 == 0) {
          __label__ = 32; break;
        }
        else if ($12 == 1) {
          __label__ = 32; break;
        }
        else if ($12 == 4) {
          __label__ = 3; break;
        }
        else if ($12 == 5) {
          __label__ = 17; break;
        }
        else if ($12 == 6) {
          __label__ = 22; break;
        }
        else if ($12 == 7) {
          __label__ = 27; break;
        }
        else if ($12 == 8) {
          __label__ = 32; break;
        }
        else if ($12 == 9) {
          __label__ = 11; break;
        }
        else if ($12 == 10) {
          __label__ = 16; break;
        }
        else {
        __label__ = 33; break;
        }
        
      case 3: // $bb2
        var $13=$ptr_addr; //@line 318 "xmltok_impl.c"
        var $14=$13+1; //@line 318 "xmltok_impl.c"
        $ptr_addr=$14; //@line 318 "xmltok_impl.c"
        var $15=$ptr_addr; //@line 319 "xmltok_impl.c"
        var $16=$end_addr; //@line 319 "xmltok_impl.c"
        var $17=($15)==($16); //@line 319 "xmltok_impl.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 319 "xmltok_impl.c"
      case 4: // $bb3
        $0=-1; //@line 320 "xmltok_impl.c"
        __label__ = 51; break; //@line 320 "xmltok_impl.c"
      case 5: // $bb4
        var $18=$ptr_addr; //@line 321 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 321 "xmltok_impl.c"
        var $20=($19)!=93; //@line 321 "xmltok_impl.c"
        if ($20) { __label__ = 49; break; } else { __label__ = 6; break; } //@line 321 "xmltok_impl.c"
      case 6: // $bb5
        var $21=$ptr_addr; //@line 323 "xmltok_impl.c"
        var $22=$21+1; //@line 323 "xmltok_impl.c"
        $ptr_addr=$22; //@line 323 "xmltok_impl.c"
        var $23=$ptr_addr; //@line 324 "xmltok_impl.c"
        var $24=$end_addr; //@line 324 "xmltok_impl.c"
        var $25=($23)==($24); //@line 324 "xmltok_impl.c"
        if ($25) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 324 "xmltok_impl.c"
      case 7: // $bb6
        $0=-1; //@line 325 "xmltok_impl.c"
        __label__ = 51; break; //@line 325 "xmltok_impl.c"
      case 8: // $bb7
        var $26=$ptr_addr; //@line 326 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 326 "xmltok_impl.c"
        var $28=($27)!=62; //@line 326 "xmltok_impl.c"
        var $29=$ptr_addr; //@line 327 "xmltok_impl.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 326 "xmltok_impl.c"
      case 9: // $bb8
        var $30=$29+-1; //@line 327 "xmltok_impl.c"
        $ptr_addr=$30; //@line 327 "xmltok_impl.c"
        __label__ = 49; break; //@line 327 "xmltok_impl.c"
      case 10: // $bb9
        var $31=$29+1; //@line 330 "xmltok_impl.c"
        var $32=$nextTokPtr_addr; //@line 330 "xmltok_impl.c"
        HEAP[$32]=$31; //@line 330 "xmltok_impl.c"
        $0=40; //@line 331 "xmltok_impl.c"
        __label__ = 51; break; //@line 331 "xmltok_impl.c"
      case 11: // $bb10
        var $33=$ptr_addr; //@line 333 "xmltok_impl.c"
        var $34=$33+1; //@line 333 "xmltok_impl.c"
        $ptr_addr=$34; //@line 333 "xmltok_impl.c"
        var $35=$ptr_addr; //@line 334 "xmltok_impl.c"
        var $36=$end_addr; //@line 334 "xmltok_impl.c"
        var $37=($35)==($36); //@line 334 "xmltok_impl.c"
        if ($37) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 334 "xmltok_impl.c"
      case 12: // $bb11
        $0=-1; //@line 335 "xmltok_impl.c"
        __label__ = 51; break; //@line 335 "xmltok_impl.c"
      case 13: // $bb12
        var $38=$enc_addr; //@line 336 "xmltok_impl.c"
        var $39=$38; //@line 336 "xmltok_impl.c"
        var $40=$ptr_addr; //@line 336 "xmltok_impl.c"
        var $41=HEAP[$40]; //@line 336 "xmltok_impl.c"
        var $42=($41); //@line 336 "xmltok_impl.c"
        var $43=$39+76; //@line 336 "xmltok_impl.c"
        var $44=$43+$42; //@line 336 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 336 "xmltok_impl.c"
        var $46=($45)==10; //@line 336 "xmltok_impl.c"
        if ($46) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 336 "xmltok_impl.c"
      case 14: // $bb13
        var $47=$ptr_addr; //@line 337 "xmltok_impl.c"
        var $48=$47+1; //@line 337 "xmltok_impl.c"
        $ptr_addr=$48; //@line 337 "xmltok_impl.c"
        __label__ = 15; break; //@line 337 "xmltok_impl.c"
      case 15: // $bb14
        var $49=$nextTokPtr_addr; //@line 338 "xmltok_impl.c"
        var $50=$ptr_addr; //@line 338 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 338 "xmltok_impl.c"
        $0=7; //@line 339 "xmltok_impl.c"
        __label__ = 51; break; //@line 339 "xmltok_impl.c"
      case 16: // $bb15
        var $51=$ptr_addr; //@line 341 "xmltok_impl.c"
        var $52=$51+1; //@line 341 "xmltok_impl.c"
        var $53=$nextTokPtr_addr; //@line 341 "xmltok_impl.c"
        HEAP[$53]=$52; //@line 341 "xmltok_impl.c"
        $0=7; //@line 342 "xmltok_impl.c"
        __label__ = 51; break; //@line 342 "xmltok_impl.c"
      case 17: // $bb16
        var $54=$end_addr; //@line 343 "xmltok_impl.c"
        var $55=($54); //@line 343 "xmltok_impl.c"
        var $56=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $57=($56); //@line 343 "xmltok_impl.c"
        var $58=($55) - ($57); //@line 343 "xmltok_impl.c"
        var $59=($58) <= 1; //@line 343 "xmltok_impl.c"
        if ($59) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 343 "xmltok_impl.c"
      case 18: // $bb17
        $0=-2; //@line 343 "xmltok_impl.c"
        __label__ = 51; break; //@line 343 "xmltok_impl.c"
      case 19: // $bb18
        var $60=$enc_addr; //@line 343 "xmltok_impl.c"
        var $61=$60; //@line 343 "xmltok_impl.c"
        var $62=$61+356; //@line 343 "xmltok_impl.c"
        var $63=HEAP[$62]; //@line 343 "xmltok_impl.c"
        var $64=$enc_addr; //@line 343 "xmltok_impl.c"
        var $65=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $66=FUNCTION_TABLE[$63]($64, $65); //@line 343 "xmltok_impl.c"
        var $67=($66)!=0; //@line 343 "xmltok_impl.c"
        if ($67) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 343 "xmltok_impl.c"
      case 20: // $bb19
        var $68=$nextTokPtr_addr; //@line 343 "xmltok_impl.c"
        var $69=$ptr_addr; //@line 343 "xmltok_impl.c"
        HEAP[$68]=$69; //@line 343 "xmltok_impl.c"
        $0=0; //@line 343 "xmltok_impl.c"
        __label__ = 51; break; //@line 343 "xmltok_impl.c"
      case 21: // $bb20
        var $70=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $71=$70+2; //@line 343 "xmltok_impl.c"
        $ptr_addr=$71; //@line 343 "xmltok_impl.c"
        __label__ = 49; break; //@line 343 "xmltok_impl.c"
      case 22: // $bb21
        var $72=$end_addr; //@line 343 "xmltok_impl.c"
        var $73=($72); //@line 343 "xmltok_impl.c"
        var $74=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $75=($74); //@line 343 "xmltok_impl.c"
        var $76=($73) - ($75); //@line 343 "xmltok_impl.c"
        var $77=($76) <= 2; //@line 343 "xmltok_impl.c"
        if ($77) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 343 "xmltok_impl.c"
      case 23: // $bb22
        $0=-2; //@line 343 "xmltok_impl.c"
        __label__ = 51; break; //@line 343 "xmltok_impl.c"
      case 24: // $bb23
        var $78=$enc_addr; //@line 343 "xmltok_impl.c"
        var $79=$78; //@line 343 "xmltok_impl.c"
        var $80=$79+360; //@line 343 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 343 "xmltok_impl.c"
        var $82=$enc_addr; //@line 343 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $84=FUNCTION_TABLE[$81]($82, $83); //@line 343 "xmltok_impl.c"
        var $85=($84)!=0; //@line 343 "xmltok_impl.c"
        if ($85) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 343 "xmltok_impl.c"
      case 25: // $bb24
        var $86=$nextTokPtr_addr; //@line 343 "xmltok_impl.c"
        var $87=$ptr_addr; //@line 343 "xmltok_impl.c"
        HEAP[$86]=$87; //@line 343 "xmltok_impl.c"
        $0=0; //@line 343 "xmltok_impl.c"
        __label__ = 51; break; //@line 343 "xmltok_impl.c"
      case 26: // $bb25
        var $88=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $89=$88+3; //@line 343 "xmltok_impl.c"
        $ptr_addr=$89; //@line 343 "xmltok_impl.c"
        __label__ = 49; break; //@line 343 "xmltok_impl.c"
      case 27: // $bb26
        var $90=$end_addr; //@line 343 "xmltok_impl.c"
        var $91=($90); //@line 343 "xmltok_impl.c"
        var $92=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $93=($92); //@line 343 "xmltok_impl.c"
        var $94=($91) - ($93); //@line 343 "xmltok_impl.c"
        var $95=($94) <= 3; //@line 343 "xmltok_impl.c"
        if ($95) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 343 "xmltok_impl.c"
      case 28: // $bb27
        $0=-2; //@line 343 "xmltok_impl.c"
        __label__ = 51; break; //@line 343 "xmltok_impl.c"
      case 29: // $bb28
        var $96=$enc_addr; //@line 343 "xmltok_impl.c"
        var $97=$96; //@line 343 "xmltok_impl.c"
        var $98=$97+364; //@line 343 "xmltok_impl.c"
        var $99=HEAP[$98]; //@line 343 "xmltok_impl.c"
        var $100=$enc_addr; //@line 343 "xmltok_impl.c"
        var $101=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $102=FUNCTION_TABLE[$99]($100, $101); //@line 343 "xmltok_impl.c"
        var $103=($102)!=0; //@line 343 "xmltok_impl.c"
        if ($103) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 343 "xmltok_impl.c"
      case 30: // $bb29
        var $104=$nextTokPtr_addr; //@line 343 "xmltok_impl.c"
        var $105=$ptr_addr; //@line 343 "xmltok_impl.c"
        HEAP[$104]=$105; //@line 343 "xmltok_impl.c"
        $0=0; //@line 343 "xmltok_impl.c"
        __label__ = 51; break; //@line 343 "xmltok_impl.c"
      case 31: // $bb30
        var $106=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $107=$106+4; //@line 343 "xmltok_impl.c"
        $ptr_addr=$107; //@line 343 "xmltok_impl.c"
        __label__ = 49; break; //@line 343 "xmltok_impl.c"
      case 32: // $bb31
        var $108=$nextTokPtr_addr; //@line 343 "xmltok_impl.c"
        var $109=$ptr_addr; //@line 343 "xmltok_impl.c"
        HEAP[$108]=$109; //@line 343 "xmltok_impl.c"
        $0=0; //@line 343 "xmltok_impl.c"
        __label__ = 51; break; //@line 343 "xmltok_impl.c"
      case 33: // $bb32
        var $110=$ptr_addr; //@line 345 "xmltok_impl.c"
        var $111=$110+1; //@line 345 "xmltok_impl.c"
        $ptr_addr=$111; //@line 345 "xmltok_impl.c"
        __label__ = 49; break; //@line 345 "xmltok_impl.c"
      case 34: // $bb34
        var $112=$enc_addr; //@line 349 "xmltok_impl.c"
        var $113=$112; //@line 349 "xmltok_impl.c"
        var $114=$ptr_addr; //@line 349 "xmltok_impl.c"
        var $115=HEAP[$114]; //@line 349 "xmltok_impl.c"
        var $116=($115); //@line 349 "xmltok_impl.c"
        var $117=$113+76; //@line 349 "xmltok_impl.c"
        var $118=$117+$116; //@line 349 "xmltok_impl.c"
        var $119=HEAP[$118]; //@line 349 "xmltok_impl.c"
        var $120=($119); //@line 349 "xmltok_impl.c"
        if ($120 == 0) {
          __label__ = 47; break;
        }
        else if ($120 == 1) {
          __label__ = 47; break;
        }
        else if ($120 == 4) {
          __label__ = 47; break;
        }
        else if ($120 == 5) {
          __label__ = 35; break;
        }
        else if ($120 == 6) {
          __label__ = 39; break;
        }
        else if ($120 == 7) {
          __label__ = 43; break;
        }
        else if ($120 == 8) {
          __label__ = 47; break;
        }
        else if ($120 == 9) {
          __label__ = 47; break;
        }
        else if ($120 == 10) {
          __label__ = 47; break;
        }
        else {
        __label__ = 48; break;
        }
        
      case 35: // $bb35
        var $121=$end_addr; //@line 358 "xmltok_impl.c"
        var $122=($121); //@line 358 "xmltok_impl.c"
        var $123=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $124=($123); //@line 358 "xmltok_impl.c"
        var $125=($122) - ($124); //@line 358 "xmltok_impl.c"
        var $126=($125) <= 1; //@line 358 "xmltok_impl.c"
        if ($126) { __label__ = 37; break; } else { __label__ = 36; break; } //@line 358 "xmltok_impl.c"
      case 36: // $bb36
        var $127=$enc_addr; //@line 358 "xmltok_impl.c"
        var $128=$127; //@line 358 "xmltok_impl.c"
        var $129=$128+356; //@line 358 "xmltok_impl.c"
        var $130=HEAP[$129]; //@line 358 "xmltok_impl.c"
        var $131=$enc_addr; //@line 358 "xmltok_impl.c"
        var $132=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $133=FUNCTION_TABLE[$130]($131, $132); //@line 358 "xmltok_impl.c"
        var $134=($133)!=0; //@line 358 "xmltok_impl.c"
        if ($134) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 358 "xmltok_impl.c"
      case 37: // $bb37
        var $135=$nextTokPtr_addr; //@line 358 "xmltok_impl.c"
        var $136=$ptr_addr; //@line 358 "xmltok_impl.c"
        HEAP[$135]=$136; //@line 358 "xmltok_impl.c"
        $0=6; //@line 358 "xmltok_impl.c"
        __label__ = 51; break; //@line 358 "xmltok_impl.c"
      case 38: // $bb38
        var $137=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $138=$137+2; //@line 358 "xmltok_impl.c"
        $ptr_addr=$138; //@line 358 "xmltok_impl.c"
        __label__ = 49; break; //@line 358 "xmltok_impl.c"
      case 39: // $bb39
        var $139=$end_addr; //@line 358 "xmltok_impl.c"
        var $140=($139); //@line 358 "xmltok_impl.c"
        var $141=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $142=($141); //@line 358 "xmltok_impl.c"
        var $143=($140) - ($142); //@line 358 "xmltok_impl.c"
        var $144=($143) <= 2; //@line 358 "xmltok_impl.c"
        if ($144) { __label__ = 41; break; } else { __label__ = 40; break; } //@line 358 "xmltok_impl.c"
      case 40: // $bb40
        var $145=$enc_addr; //@line 358 "xmltok_impl.c"
        var $146=$145; //@line 358 "xmltok_impl.c"
        var $147=$146+360; //@line 358 "xmltok_impl.c"
        var $148=HEAP[$147]; //@line 358 "xmltok_impl.c"
        var $149=$enc_addr; //@line 358 "xmltok_impl.c"
        var $150=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $151=FUNCTION_TABLE[$148]($149, $150); //@line 358 "xmltok_impl.c"
        var $152=($151)!=0; //@line 358 "xmltok_impl.c"
        if ($152) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 358 "xmltok_impl.c"
      case 41: // $bb41
        var $153=$nextTokPtr_addr; //@line 358 "xmltok_impl.c"
        var $154=$ptr_addr; //@line 358 "xmltok_impl.c"
        HEAP[$153]=$154; //@line 358 "xmltok_impl.c"
        $0=6; //@line 358 "xmltok_impl.c"
        __label__ = 51; break; //@line 358 "xmltok_impl.c"
      case 42: // $bb42
        var $155=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $156=$155+3; //@line 358 "xmltok_impl.c"
        $ptr_addr=$156; //@line 358 "xmltok_impl.c"
        __label__ = 49; break; //@line 358 "xmltok_impl.c"
      case 43: // $bb43
        var $157=$end_addr; //@line 358 "xmltok_impl.c"
        var $158=($157); //@line 358 "xmltok_impl.c"
        var $159=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $160=($159); //@line 358 "xmltok_impl.c"
        var $161=($158) - ($160); //@line 358 "xmltok_impl.c"
        var $162=($161) <= 3; //@line 358 "xmltok_impl.c"
        if ($162) { __label__ = 45; break; } else { __label__ = 44; break; } //@line 358 "xmltok_impl.c"
      case 44: // $bb44
        var $163=$enc_addr; //@line 358 "xmltok_impl.c"
        var $164=$163; //@line 358 "xmltok_impl.c"
        var $165=$164+364; //@line 358 "xmltok_impl.c"
        var $166=HEAP[$165]; //@line 358 "xmltok_impl.c"
        var $167=$enc_addr; //@line 358 "xmltok_impl.c"
        var $168=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $169=FUNCTION_TABLE[$166]($167, $168); //@line 358 "xmltok_impl.c"
        var $170=($169)!=0; //@line 358 "xmltok_impl.c"
        if ($170) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 358 "xmltok_impl.c"
      case 45: // $bb45
        var $171=$nextTokPtr_addr; //@line 358 "xmltok_impl.c"
        var $172=$ptr_addr; //@line 358 "xmltok_impl.c"
        HEAP[$171]=$172; //@line 358 "xmltok_impl.c"
        $0=6; //@line 358 "xmltok_impl.c"
        __label__ = 51; break; //@line 358 "xmltok_impl.c"
      case 46: // $bb46
        var $173=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $174=$173+4; //@line 358 "xmltok_impl.c"
        $ptr_addr=$174; //@line 358 "xmltok_impl.c"
        __label__ = 49; break; //@line 358 "xmltok_impl.c"
      case 47: // $bb47
        var $175=$nextTokPtr_addr; //@line 366 "xmltok_impl.c"
        var $176=$ptr_addr; //@line 366 "xmltok_impl.c"
        HEAP[$175]=$176; //@line 366 "xmltok_impl.c"
        $0=6; //@line 367 "xmltok_impl.c"
        __label__ = 51; break; //@line 367 "xmltok_impl.c"
      case 48: // $bb48
        var $177=$ptr_addr; //@line 369 "xmltok_impl.c"
        var $178=$177+1; //@line 369 "xmltok_impl.c"
        $ptr_addr=$178; //@line 369 "xmltok_impl.c"
        __label__ = 49; break; //@line 369 "xmltok_impl.c"
      case 49: // $bb49
        var $179=$ptr_addr; //@line 348 "xmltok_impl.c"
        var $180=$end_addr; //@line 348 "xmltok_impl.c"
        var $181=($179)!=($180); //@line 348 "xmltok_impl.c"
        if ($181) { __label__ = 34; break; } else { __label__ = 50; break; } //@line 348 "xmltok_impl.c"
      case 50: // $bb50
        var $182=$nextTokPtr_addr; //@line 373 "xmltok_impl.c"
        var $183=$ptr_addr; //@line 373 "xmltok_impl.c"
        HEAP[$182]=$183; //@line 373 "xmltok_impl.c"
        $0=6; //@line 374 "xmltok_impl.c"
        __label__ = 51; break; //@line 374 "xmltok_impl.c"
      case 51: // $bb51
        var $184=$0; //@line 306 "xmltok_impl.c"
        $retval=$184; //@line 306 "xmltok_impl.c"
        var $retval52=$retval; //@line 306 "xmltok_impl.c"
        ;
        return $retval52; //@line 306 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanEndTag($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 383 "xmltok_impl.c"
        var $2=$end_addr; //@line 383 "xmltok_impl.c"
        var $3=($1)==($2); //@line 383 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 383 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 384 "xmltok_impl.c"
        __label__ = 51; break; //@line 384 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$enc_addr; //@line 385 "xmltok_impl.c"
        var $5=$4; //@line 385 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 385 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 385 "xmltok_impl.c"
        var $8=($7); //@line 385 "xmltok_impl.c"
        var $9=$5+76; //@line 385 "xmltok_impl.c"
        var $10=$9+$8; //@line 385 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 385 "xmltok_impl.c"
        var $12=($11); //@line 385 "xmltok_impl.c"
        if ($12 == 5) {
          __label__ = 5; break;
        }
        else if ($12 == 6) {
          __label__ = 10; break;
        }
        else if ($12 == 7) {
          __label__ = 15; break;
        }
        else if ($12 == 22) {
          __label__ = 4; break;
        }
        else if ($12 == 24) {
          __label__ = 4; break;
        }
        else if ($12 == 29) {
          __label__ = 3; break;
        }
        else {
        __label__ = 20; break;
        }
        
      case 3: // $bb2
        var $13=$nextTokPtr_addr; //@line 386 "xmltok_impl.c"
        var $14=$ptr_addr; //@line 386 "xmltok_impl.c"
        HEAP[$13]=$14; //@line 386 "xmltok_impl.c"
        $0=0; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 4: // $bb3
        var $15=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $16=$15+1; //@line 386 "xmltok_impl.c"
        $ptr_addr=$16; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 5: // $bb4
        var $17=$end_addr; //@line 386 "xmltok_impl.c"
        var $18=($17); //@line 386 "xmltok_impl.c"
        var $19=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $20=($19); //@line 386 "xmltok_impl.c"
        var $21=($18) - ($20); //@line 386 "xmltok_impl.c"
        var $22=($21) <= 1; //@line 386 "xmltok_impl.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 386 "xmltok_impl.c"
      case 6: // $bb5
        $0=-2; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 7: // $bb6
        var $23=$enc_addr; //@line 386 "xmltok_impl.c"
        var $24=$23; //@line 386 "xmltok_impl.c"
        var $25=$24+344; //@line 386 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 386 "xmltok_impl.c"
        var $27=$enc_addr; //@line 386 "xmltok_impl.c"
        var $28=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $29=FUNCTION_TABLE[$26]($27, $28); //@line 386 "xmltok_impl.c"
        var $30=($29)==0; //@line 386 "xmltok_impl.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 386 "xmltok_impl.c"
      case 8: // $bb7
        var $31=$nextTokPtr_addr; //@line 386 "xmltok_impl.c"
        var $32=$ptr_addr; //@line 386 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 386 "xmltok_impl.c"
        $0=0; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 9: // $bb8
        var $33=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $34=$33+2; //@line 386 "xmltok_impl.c"
        $ptr_addr=$34; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 10: // $bb9
        var $35=$end_addr; //@line 386 "xmltok_impl.c"
        var $36=($35); //@line 386 "xmltok_impl.c"
        var $37=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $38=($37); //@line 386 "xmltok_impl.c"
        var $39=($36) - ($38); //@line 386 "xmltok_impl.c"
        var $40=($39) <= 2; //@line 386 "xmltok_impl.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 386 "xmltok_impl.c"
      case 11: // $bb10
        $0=-2; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 12: // $bb11
        var $41=$enc_addr; //@line 386 "xmltok_impl.c"
        var $42=$41; //@line 386 "xmltok_impl.c"
        var $43=$42+348; //@line 386 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 386 "xmltok_impl.c"
        var $45=$enc_addr; //@line 386 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $47=FUNCTION_TABLE[$44]($45, $46); //@line 386 "xmltok_impl.c"
        var $48=($47)==0; //@line 386 "xmltok_impl.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 386 "xmltok_impl.c"
      case 13: // $bb12
        var $49=$nextTokPtr_addr; //@line 386 "xmltok_impl.c"
        var $50=$ptr_addr; //@line 386 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 386 "xmltok_impl.c"
        $0=0; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 14: // $bb13
        var $51=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $52=$51+3; //@line 386 "xmltok_impl.c"
        $ptr_addr=$52; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 15: // $bb14
        var $53=$end_addr; //@line 386 "xmltok_impl.c"
        var $54=($53); //@line 386 "xmltok_impl.c"
        var $55=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $56=($55); //@line 386 "xmltok_impl.c"
        var $57=($54) - ($56); //@line 386 "xmltok_impl.c"
        var $58=($57) <= 3; //@line 386 "xmltok_impl.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 386 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 17: // $bb16
        var $59=$enc_addr; //@line 386 "xmltok_impl.c"
        var $60=$59; //@line 386 "xmltok_impl.c"
        var $61=$60+352; //@line 386 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 386 "xmltok_impl.c"
        var $63=$enc_addr; //@line 386 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $65=FUNCTION_TABLE[$62]($63, $64); //@line 386 "xmltok_impl.c"
        var $66=($65)==0; //@line 386 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 386 "xmltok_impl.c"
      case 18: // $bb17
        var $67=$nextTokPtr_addr; //@line 386 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 386 "xmltok_impl.c"
        HEAP[$67]=$68; //@line 386 "xmltok_impl.c"
        $0=0; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 19: // $bb18
        var $69=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $70=$69+4; //@line 386 "xmltok_impl.c"
        $ptr_addr=$70; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 20: // $bb19
        var $71=$nextTokPtr_addr; //@line 388 "xmltok_impl.c"
        var $72=$ptr_addr; //@line 388 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 388 "xmltok_impl.c"
        $0=0; //@line 389 "xmltok_impl.c"
        __label__ = 51; break; //@line 389 "xmltok_impl.c"
      case 21: // $bb21
        var $73=$enc_addr; //@line 392 "xmltok_impl.c"
        var $74=$73; //@line 392 "xmltok_impl.c"
        var $75=$ptr_addr; //@line 392 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 392 "xmltok_impl.c"
        var $77=($76); //@line 392 "xmltok_impl.c"
        var $78=$74+76; //@line 392 "xmltok_impl.c"
        var $79=$78+$77; //@line 392 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 392 "xmltok_impl.c"
        var $81=($80); //@line 392 "xmltok_impl.c"
        if ($81 == 5) {
          __label__ = 24; break;
        }
        else if ($81 == 6) {
          __label__ = 29; break;
        }
        else if ($81 == 7) {
          __label__ = 34; break;
        }
        else if ($81 == 9) {
          __label__ = 39; break;
        }
        else if ($81 == 10) {
          __label__ = 39; break;
        }
        else if ($81 == 11) {
          __label__ = 47; break;
        }
        else if ($81 == 21) {
          __label__ = 39; break;
        }
        else if ($81 == 22) {
          __label__ = 23; break;
        }
        else if ($81 == 23) {
          __label__ = 46; break;
        }
        else if ($81 == 24) {
          __label__ = 23; break;
        }
        else if ($81 == 25) {
          __label__ = 23; break;
        }
        else if ($81 == 26) {
          __label__ = 23; break;
        }
        else if ($81 == 27) {
          __label__ = 23; break;
        }
        else if ($81 == 29) {
          __label__ = 22; break;
        }
        else {
        __label__ = 48; break;
        }
        
      case 22: // $bb22
        var $82=$nextTokPtr_addr; //@line 393 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 393 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 393 "xmltok_impl.c"
        $0=0; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 23: // $bb23
        var $84=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $85=$84+1; //@line 393 "xmltok_impl.c"
        $ptr_addr=$85; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 24: // $bb24
        var $86=$end_addr; //@line 393 "xmltok_impl.c"
        var $87=($86); //@line 393 "xmltok_impl.c"
        var $88=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $89=($88); //@line 393 "xmltok_impl.c"
        var $90=($87) - ($89); //@line 393 "xmltok_impl.c"
        var $91=($90) <= 1; //@line 393 "xmltok_impl.c"
        if ($91) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 393 "xmltok_impl.c"
      case 25: // $bb25
        $0=-2; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 26: // $bb26
        var $92=$enc_addr; //@line 393 "xmltok_impl.c"
        var $93=$92; //@line 393 "xmltok_impl.c"
        var $94=$93+332; //@line 393 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 393 "xmltok_impl.c"
        var $96=$enc_addr; //@line 393 "xmltok_impl.c"
        var $97=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $98=FUNCTION_TABLE[$95]($96, $97); //@line 393 "xmltok_impl.c"
        var $99=($98)==0; //@line 393 "xmltok_impl.c"
        if ($99) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 393 "xmltok_impl.c"
      case 27: // $bb27
        var $100=$nextTokPtr_addr; //@line 393 "xmltok_impl.c"
        var $101=$ptr_addr; //@line 393 "xmltok_impl.c"
        HEAP[$100]=$101; //@line 393 "xmltok_impl.c"
        $0=0; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 28: // $bb28
        var $102=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $103=$102+2; //@line 393 "xmltok_impl.c"
        $ptr_addr=$103; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 29: // $bb29
        var $104=$end_addr; //@line 393 "xmltok_impl.c"
        var $105=($104); //@line 393 "xmltok_impl.c"
        var $106=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $107=($106); //@line 393 "xmltok_impl.c"
        var $108=($105) - ($107); //@line 393 "xmltok_impl.c"
        var $109=($108) <= 2; //@line 393 "xmltok_impl.c"
        if ($109) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 393 "xmltok_impl.c"
      case 30: // $bb30
        $0=-2; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 31: // $bb31
        var $110=$enc_addr; //@line 393 "xmltok_impl.c"
        var $111=$110; //@line 393 "xmltok_impl.c"
        var $112=$111+336; //@line 393 "xmltok_impl.c"
        var $113=HEAP[$112]; //@line 393 "xmltok_impl.c"
        var $114=$enc_addr; //@line 393 "xmltok_impl.c"
        var $115=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $116=FUNCTION_TABLE[$113]($114, $115); //@line 393 "xmltok_impl.c"
        var $117=($116)==0; //@line 393 "xmltok_impl.c"
        if ($117) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 393 "xmltok_impl.c"
      case 32: // $bb32
        var $118=$nextTokPtr_addr; //@line 393 "xmltok_impl.c"
        var $119=$ptr_addr; //@line 393 "xmltok_impl.c"
        HEAP[$118]=$119; //@line 393 "xmltok_impl.c"
        $0=0; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 33: // $bb33
        var $120=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $121=$120+3; //@line 393 "xmltok_impl.c"
        $ptr_addr=$121; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 34: // $bb34
        var $122=$end_addr; //@line 393 "xmltok_impl.c"
        var $123=($122); //@line 393 "xmltok_impl.c"
        var $124=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $125=($124); //@line 393 "xmltok_impl.c"
        var $126=($123) - ($125); //@line 393 "xmltok_impl.c"
        var $127=($126) <= 3; //@line 393 "xmltok_impl.c"
        if ($127) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 393 "xmltok_impl.c"
      case 35: // $bb35
        $0=-2; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 36: // $bb36
        var $128=$enc_addr; //@line 393 "xmltok_impl.c"
        var $129=$128; //@line 393 "xmltok_impl.c"
        var $130=$129+340; //@line 393 "xmltok_impl.c"
        var $131=HEAP[$130]; //@line 393 "xmltok_impl.c"
        var $132=$enc_addr; //@line 393 "xmltok_impl.c"
        var $133=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $134=FUNCTION_TABLE[$131]($132, $133); //@line 393 "xmltok_impl.c"
        var $135=($134)==0; //@line 393 "xmltok_impl.c"
        if ($135) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 393 "xmltok_impl.c"
      case 37: // $bb37
        var $136=$nextTokPtr_addr; //@line 393 "xmltok_impl.c"
        var $137=$ptr_addr; //@line 393 "xmltok_impl.c"
        HEAP[$136]=$137; //@line 393 "xmltok_impl.c"
        $0=0; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 38: // $bb38
        var $138=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $139=$138+4; //@line 393 "xmltok_impl.c"
        $ptr_addr=$139; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 39: // $bb39
        var $140=$ptr_addr; //@line 395 "xmltok_impl.c"
        var $141=$140+1; //@line 395 "xmltok_impl.c"
        $ptr_addr=$141; //@line 395 "xmltok_impl.c"
        __label__ = 44; break; //@line 395 "xmltok_impl.c"
      case 40: // $bb40
        var $142=$enc_addr; //@line 396 "xmltok_impl.c"
        var $143=$142; //@line 396 "xmltok_impl.c"
        var $144=$ptr_addr; //@line 396 "xmltok_impl.c"
        var $145=HEAP[$144]; //@line 396 "xmltok_impl.c"
        var $146=($145); //@line 396 "xmltok_impl.c"
        var $147=$143+76; //@line 396 "xmltok_impl.c"
        var $148=$147+$146; //@line 396 "xmltok_impl.c"
        var $149=HEAP[$148]; //@line 396 "xmltok_impl.c"
        var $150=($149); //@line 396 "xmltok_impl.c"
        if ($150 == 9) {
          __label__ = 41; break;
        }
        else if ($150 == 10) {
          __label__ = 41; break;
        }
        else if ($150 == 11) {
          __label__ = 42; break;
        }
        else if ($150 == 21) {
          __label__ = 41; break;
        }
        else {
        __label__ = 43; break;
        }
        
      case 41: // $bb41
        var $151=$ptr_addr; //@line 395 "xmltok_impl.c"
        var $152=$151+1; //@line 395 "xmltok_impl.c"
        $ptr_addr=$152; //@line 395 "xmltok_impl.c"
        __label__ = 44; break; //@line 395 "xmltok_impl.c"
      case 42: // $bb42
        var $153=$ptr_addr; //@line 400 "xmltok_impl.c"
        var $154=$153+1; //@line 400 "xmltok_impl.c"
        var $155=$nextTokPtr_addr; //@line 400 "xmltok_impl.c"
        HEAP[$155]=$154; //@line 400 "xmltok_impl.c"
        $0=5; //@line 401 "xmltok_impl.c"
        __label__ = 51; break; //@line 401 "xmltok_impl.c"
      case 43: // $bb43
        var $156=$nextTokPtr_addr; //@line 403 "xmltok_impl.c"
        var $157=$ptr_addr; //@line 403 "xmltok_impl.c"
        HEAP[$156]=$157; //@line 403 "xmltok_impl.c"
        $0=0; //@line 404 "xmltok_impl.c"
        __label__ = 51; break; //@line 404 "xmltok_impl.c"
      case 44: // $bb44
        var $158=$ptr_addr; //@line 395 "xmltok_impl.c"
        var $159=$end_addr; //@line 395 "xmltok_impl.c"
        var $160=($158)!=($159); //@line 395 "xmltok_impl.c"
        if ($160) { __label__ = 40; break; } else { __label__ = 45; break; } //@line 395 "xmltok_impl.c"
      case 45: // $bb45
        $0=-1; //@line 407 "xmltok_impl.c"
        __label__ = 51; break; //@line 407 "xmltok_impl.c"
      case 46: // $bb46
        var $161=$ptr_addr; //@line 412 "xmltok_impl.c"
        var $162=$161+1; //@line 412 "xmltok_impl.c"
        $ptr_addr=$162; //@line 412 "xmltok_impl.c"
        __label__ = 49; break; //@line 412 "xmltok_impl.c"
      case 47: // $bb47
        var $163=$ptr_addr; //@line 416 "xmltok_impl.c"
        var $164=$163+1; //@line 416 "xmltok_impl.c"
        var $165=$nextTokPtr_addr; //@line 416 "xmltok_impl.c"
        HEAP[$165]=$164; //@line 416 "xmltok_impl.c"
        $0=5; //@line 417 "xmltok_impl.c"
        __label__ = 51; break; //@line 417 "xmltok_impl.c"
      case 48: // $bb48
        var $166=$nextTokPtr_addr; //@line 419 "xmltok_impl.c"
        var $167=$ptr_addr; //@line 419 "xmltok_impl.c"
        HEAP[$166]=$167; //@line 419 "xmltok_impl.c"
        $0=0; //@line 420 "xmltok_impl.c"
        __label__ = 51; break; //@line 420 "xmltok_impl.c"
      case 49: // $bb49
        var $168=$ptr_addr; //@line 391 "xmltok_impl.c"
        var $169=$end_addr; //@line 391 "xmltok_impl.c"
        var $170=($168)!=($169); //@line 391 "xmltok_impl.c"
        if ($170) { __label__ = 21; break; } else { __label__ = 50; break; } //@line 391 "xmltok_impl.c"
      case 50: // $bb50
        $0=-1; //@line 423 "xmltok_impl.c"
        __label__ = 51; break; //@line 423 "xmltok_impl.c"
      case 51: // $bb51
        var $171=$0; //@line 384 "xmltok_impl.c"
        $retval=$171; //@line 384 "xmltok_impl.c"
        var $retval52=$retval; //@line 384 "xmltok_impl.c"
        ;
        return $retval52; //@line 384 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanHexCharRef($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 432 "xmltok_impl.c"
        var $2=$end_addr; //@line 432 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 432 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 432 "xmltok_impl.c"
      case 1: // $bb
        var $4=$enc_addr; //@line 433 "xmltok_impl.c"
        var $5=$4; //@line 433 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 433 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 433 "xmltok_impl.c"
        var $8=($7); //@line 433 "xmltok_impl.c"
        var $9=$5+76; //@line 433 "xmltok_impl.c"
        var $10=$9+$8; //@line 433 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 433 "xmltok_impl.c"
        var $12=($11); //@line 433 "xmltok_impl.c"
        var $_off=($12) + -24;
        var $switch=($_off) < 2;
        if ($switch) { __label__ = 2; break; } else { __label__ = 3; break; }
      case 2: // $bb1
        var $13=$ptr_addr; //@line 441 "xmltok_impl.c"
        var $14=$13+1; //@line 441 "xmltok_impl.c"
        $ptr_addr=$14; //@line 441 "xmltok_impl.c"
        __label__ = 8; break; //@line 441 "xmltok_impl.c"
      case 3: // $bb2
        var $15=$nextTokPtr_addr; //@line 438 "xmltok_impl.c"
        var $16=$ptr_addr; //@line 438 "xmltok_impl.c"
        HEAP[$15]=$16; //@line 438 "xmltok_impl.c"
        $0=0; //@line 439 "xmltok_impl.c"
        __label__ = 10; break; //@line 439 "xmltok_impl.c"
      case 4: // $bb3
        var $17=$enc_addr; //@line 442 "xmltok_impl.c"
        var $18=$17; //@line 442 "xmltok_impl.c"
        var $19=$ptr_addr; //@line 442 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 442 "xmltok_impl.c"
        var $21=($20); //@line 442 "xmltok_impl.c"
        var $22=$18+76; //@line 442 "xmltok_impl.c"
        var $23=$22+$21; //@line 442 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 442 "xmltok_impl.c"
        var $25=($24); //@line 442 "xmltok_impl.c"
        if ($25 == 18) {
          __label__ = 6; break;
        }
        else if ($25 == 24) {
          __label__ = 5; break;
        }
        else if ($25 == 25) {
          __label__ = 5; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 5: // $bb4
        var $26=$ptr_addr; //@line 441 "xmltok_impl.c"
        var $27=$26+1; //@line 441 "xmltok_impl.c"
        $ptr_addr=$27; //@line 441 "xmltok_impl.c"
        __label__ = 8; break; //@line 441 "xmltok_impl.c"
      case 6: // $bb5
        var $28=$ptr_addr; //@line 447 "xmltok_impl.c"
        var $29=$28+1; //@line 447 "xmltok_impl.c"
        var $30=$nextTokPtr_addr; //@line 447 "xmltok_impl.c"
        HEAP[$30]=$29; //@line 447 "xmltok_impl.c"
        $0=10; //@line 448 "xmltok_impl.c"
        __label__ = 10; break; //@line 448 "xmltok_impl.c"
      case 7: // $bb6
        var $31=$nextTokPtr_addr; //@line 450 "xmltok_impl.c"
        var $32=$ptr_addr; //@line 450 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 450 "xmltok_impl.c"
        $0=0; //@line 451 "xmltok_impl.c"
        __label__ = 10; break; //@line 451 "xmltok_impl.c"
      case 8: // $bb7
        var $33=$ptr_addr; //@line 441 "xmltok_impl.c"
        var $34=$end_addr; //@line 441 "xmltok_impl.c"
        var $35=($33)!=($34); //@line 441 "xmltok_impl.c"
        if ($35) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 441 "xmltok_impl.c"
      case 9: // $bb8
        $0=-1; //@line 455 "xmltok_impl.c"
        __label__ = 10; break; //@line 455 "xmltok_impl.c"
      case 10: // $bb9
        var $36=$0; //@line 439 "xmltok_impl.c"
        $retval=$36; //@line 439 "xmltok_impl.c"
        var $retval10=$retval; //@line 439 "xmltok_impl.c"
        ;
        return $retval10; //@line 439 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanCharRef($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 464 "xmltok_impl.c"
        var $2=$end_addr; //@line 464 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 464 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 11; break; } //@line 464 "xmltok_impl.c"
      case 1: // $bb
        var $4=$ptr_addr; //@line 465 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 465 "xmltok_impl.c"
        var $6=($5)==120; //@line 465 "xmltok_impl.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 465 "xmltok_impl.c"
      case 2: // $bb1
        var $7=$ptr_addr; //@line 466 "xmltok_impl.c"
        var $8=$7+1; //@line 466 "xmltok_impl.c"
        var $9=$enc_addr; //@line 466 "xmltok_impl.c"
        var $10=$end_addr; //@line 466 "xmltok_impl.c"
        var $11=$nextTokPtr_addr; //@line 466 "xmltok_impl.c"
        var $12=_normal_scanHexCharRef($9, $8, $10, $11); //@line 466 "xmltok_impl.c"
        $0=$12; //@line 466 "xmltok_impl.c"
        __label__ = 12; break; //@line 466 "xmltok_impl.c"
      case 3: // $bb2
        var $13=$enc_addr; //@line 467 "xmltok_impl.c"
        var $14=$13; //@line 467 "xmltok_impl.c"
        var $15=$ptr_addr; //@line 467 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 467 "xmltok_impl.c"
        var $17=($16); //@line 467 "xmltok_impl.c"
        var $18=$14+76; //@line 467 "xmltok_impl.c"
        var $19=$18+$17; //@line 467 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 467 "xmltok_impl.c"
        var $21=($20); //@line 467 "xmltok_impl.c"
        var $cond=($21)==25;
        if ($cond) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $bb3
        var $22=$ptr_addr; //@line 474 "xmltok_impl.c"
        var $23=$22+1; //@line 474 "xmltok_impl.c"
        $ptr_addr=$23; //@line 474 "xmltok_impl.c"
        __label__ = 10; break; //@line 474 "xmltok_impl.c"
      case 5: // $bb4
        var $24=$nextTokPtr_addr; //@line 471 "xmltok_impl.c"
        var $25=$ptr_addr; //@line 471 "xmltok_impl.c"
        HEAP[$24]=$25; //@line 471 "xmltok_impl.c"
        $0=0; //@line 472 "xmltok_impl.c"
        __label__ = 12; break; //@line 472 "xmltok_impl.c"
      case 6: // $bb5
        var $26=$enc_addr; //@line 475 "xmltok_impl.c"
        var $27=$26; //@line 475 "xmltok_impl.c"
        var $28=$ptr_addr; //@line 475 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 475 "xmltok_impl.c"
        var $30=($29); //@line 475 "xmltok_impl.c"
        var $31=$27+76; //@line 475 "xmltok_impl.c"
        var $32=$31+$30; //@line 475 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 475 "xmltok_impl.c"
        var $34=($33); //@line 475 "xmltok_impl.c"
        if ($34 == 18) {
          __label__ = 8; break;
        }
        else if ($34 == 25) {
          __label__ = 7; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 7: // $bb6
        var $35=$ptr_addr; //@line 474 "xmltok_impl.c"
        var $36=$35+1; //@line 474 "xmltok_impl.c"
        $ptr_addr=$36; //@line 474 "xmltok_impl.c"
        __label__ = 10; break; //@line 474 "xmltok_impl.c"
      case 8: // $bb7
        var $37=$ptr_addr; //@line 479 "xmltok_impl.c"
        var $38=$37+1; //@line 479 "xmltok_impl.c"
        var $39=$nextTokPtr_addr; //@line 479 "xmltok_impl.c"
        HEAP[$39]=$38; //@line 479 "xmltok_impl.c"
        $0=10; //@line 480 "xmltok_impl.c"
        __label__ = 12; break; //@line 480 "xmltok_impl.c"
      case 9: // $bb8
        var $40=$nextTokPtr_addr; //@line 482 "xmltok_impl.c"
        var $41=$ptr_addr; //@line 482 "xmltok_impl.c"
        HEAP[$40]=$41; //@line 482 "xmltok_impl.c"
        $0=0; //@line 483 "xmltok_impl.c"
        __label__ = 12; break; //@line 483 "xmltok_impl.c"
      case 10: // $bb9
        var $42=$ptr_addr; //@line 474 "xmltok_impl.c"
        var $43=$end_addr; //@line 474 "xmltok_impl.c"
        var $44=($42)!=($43); //@line 474 "xmltok_impl.c"
        if ($44) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 474 "xmltok_impl.c"
      case 11: // $bb10
        $0=-1; //@line 487 "xmltok_impl.c"
        __label__ = 12; break; //@line 487 "xmltok_impl.c"
      case 12: // $bb11
        var $45=$0; //@line 466 "xmltok_impl.c"
        $retval=$45; //@line 466 "xmltok_impl.c"
        var $retval12=$retval; //@line 466 "xmltok_impl.c"
        ;
        return $retval12; //@line 466 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanRef($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 496 "xmltok_impl.c"
        var $2=$end_addr; //@line 496 "xmltok_impl.c"
        var $3=($1)==($2); //@line 496 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 496 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 497 "xmltok_impl.c"
        __label__ = 44; break; //@line 497 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$enc_addr; //@line 498 "xmltok_impl.c"
        var $5=$4; //@line 498 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 498 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 498 "xmltok_impl.c"
        var $8=($7); //@line 498 "xmltok_impl.c"
        var $9=$5+76; //@line 498 "xmltok_impl.c"
        var $10=$9+$8; //@line 498 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 498 "xmltok_impl.c"
        var $12=($11); //@line 498 "xmltok_impl.c"
        if ($12 == 5) {
          __label__ = 5; break;
        }
        else if ($12 == 6) {
          __label__ = 10; break;
        }
        else if ($12 == 7) {
          __label__ = 15; break;
        }
        else if ($12 == 19) {
          __label__ = 20; break;
        }
        else if ($12 == 22) {
          __label__ = 4; break;
        }
        else if ($12 == 24) {
          __label__ = 4; break;
        }
        else if ($12 == 29) {
          __label__ = 3; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 3: // $bb2
        var $13=$nextTokPtr_addr; //@line 499 "xmltok_impl.c"
        var $14=$ptr_addr; //@line 499 "xmltok_impl.c"
        HEAP[$13]=$14; //@line 499 "xmltok_impl.c"
        $0=0; //@line 499 "xmltok_impl.c"
        __label__ = 44; break; //@line 499 "xmltok_impl.c"
      case 4: // $bb3
        var $15=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $16=$15+1; //@line 499 "xmltok_impl.c"
        $ptr_addr=$16; //@line 499 "xmltok_impl.c"
        __label__ = 42; break; //@line 499 "xmltok_impl.c"
      case 5: // $bb4
        var $17=$end_addr; //@line 499 "xmltok_impl.c"
        var $18=($17); //@line 499 "xmltok_impl.c"
        var $19=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $20=($19); //@line 499 "xmltok_impl.c"
        var $21=($18) - ($20); //@line 499 "xmltok_impl.c"
        var $22=($21) <= 1; //@line 499 "xmltok_impl.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 499 "xmltok_impl.c"
      case 6: // $bb5
        $0=-2; //@line 499 "xmltok_impl.c"
        __label__ = 44; break; //@line 499 "xmltok_impl.c"
      case 7: // $bb6
        var $23=$enc_addr; //@line 499 "xmltok_impl.c"
        var $24=$23; //@line 499 "xmltok_impl.c"
        var $25=$24+344; //@line 499 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 499 "xmltok_impl.c"
        var $27=$enc_addr; //@line 499 "xmltok_impl.c"
        var $28=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $29=FUNCTION_TABLE[$26]($27, $28); //@line 499 "xmltok_impl.c"
        var $30=($29)==0; //@line 499 "xmltok_impl.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 499 "xmltok_impl.c"
      case 8: // $bb7
        var $31=$nextTokPtr_addr; //@line 499 "xmltok_impl.c"
        var $32=$ptr_addr; //@line 499 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 499 "xmltok_impl.c"
        $0=0; //@line 499 "xmltok_impl.c"
        __label__ = 44; break; //@line 499 "xmltok_impl.c"
      case 9: // $bb8
        var $33=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $34=$33+2; //@line 499 "xmltok_impl.c"
        $ptr_addr=$34; //@line 499 "xmltok_impl.c"
        __label__ = 42; break; //@line 499 "xmltok_impl.c"
      case 10: // $bb9
        var $35=$end_addr; //@line 499 "xmltok_impl.c"
        var $36=($35); //@line 499 "xmltok_impl.c"
        var $37=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $38=($37); //@line 499 "xmltok_impl.c"
        var $39=($36) - ($38); //@line 499 "xmltok_impl.c"
        var $40=($39) <= 2; //@line 499 "xmltok_impl.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 499 "xmltok_impl.c"
      case 11: // $bb10
        $0=-2; //@line 499 "xmltok_impl.c"
        __label__ = 44; break; //@line 499 "xmltok_impl.c"
      case 12: // $bb11
        var $41=$enc_addr; //@line 499 "xmltok_impl.c"
        var $42=$41; //@line 499 "xmltok_impl.c"
        var $43=$42+348; //@line 499 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 499 "xmltok_impl.c"
        var $45=$enc_addr; //@line 499 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $47=FUNCTION_TABLE[$44]($45, $46); //@line 499 "xmltok_impl.c"
        var $48=($47)==0; //@line 499 "xmltok_impl.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 499 "xmltok_impl.c"
      case 13: // $bb12
        var $49=$nextTokPtr_addr; //@line 499 "xmltok_impl.c"
        var $50=$ptr_addr; //@line 499 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 499 "xmltok_impl.c"
        $0=0; //@line 499 "xmltok_impl.c"
        __label__ = 44; break; //@line 499 "xmltok_impl.c"
      case 14: // $bb13
        var $51=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $52=$51+3; //@line 499 "xmltok_impl.c"
        $ptr_addr=$52; //@line 499 "xmltok_impl.c"
        __label__ = 42; break; //@line 499 "xmltok_impl.c"
      case 15: // $bb14
        var $53=$end_addr; //@line 499 "xmltok_impl.c"
        var $54=($53); //@line 499 "xmltok_impl.c"
        var $55=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $56=($55); //@line 499 "xmltok_impl.c"
        var $57=($54) - ($56); //@line 499 "xmltok_impl.c"
        var $58=($57) <= 3; //@line 499 "xmltok_impl.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 499 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 499 "xmltok_impl.c"
        __label__ = 44; break; //@line 499 "xmltok_impl.c"
      case 17: // $bb16
        var $59=$enc_addr; //@line 499 "xmltok_impl.c"
        var $60=$59; //@line 499 "xmltok_impl.c"
        var $61=$60+352; //@line 499 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 499 "xmltok_impl.c"
        var $63=$enc_addr; //@line 499 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $65=FUNCTION_TABLE[$62]($63, $64); //@line 499 "xmltok_impl.c"
        var $66=($65)==0; //@line 499 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 499 "xmltok_impl.c"
      case 18: // $bb17
        var $67=$nextTokPtr_addr; //@line 499 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 499 "xmltok_impl.c"
        HEAP[$67]=$68; //@line 499 "xmltok_impl.c"
        $0=0; //@line 499 "xmltok_impl.c"
        __label__ = 44; break; //@line 499 "xmltok_impl.c"
      case 19: // $bb18
        var $69=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $70=$69+4; //@line 499 "xmltok_impl.c"
        $ptr_addr=$70; //@line 499 "xmltok_impl.c"
        __label__ = 42; break; //@line 499 "xmltok_impl.c"
      case 20: // $bb19
        var $71=$ptr_addr; //@line 501 "xmltok_impl.c"
        var $72=$71+1; //@line 501 "xmltok_impl.c"
        var $73=$enc_addr; //@line 501 "xmltok_impl.c"
        var $74=$end_addr; //@line 501 "xmltok_impl.c"
        var $75=$nextTokPtr_addr; //@line 501 "xmltok_impl.c"
        var $76=_normal_scanCharRef($73, $72, $74, $75); //@line 501 "xmltok_impl.c"
        $0=$76; //@line 501 "xmltok_impl.c"
        __label__ = 44; break; //@line 501 "xmltok_impl.c"
      case 21: // $bb20
        var $77=$nextTokPtr_addr; //@line 503 "xmltok_impl.c"
        var $78=$ptr_addr; //@line 503 "xmltok_impl.c"
        HEAP[$77]=$78; //@line 503 "xmltok_impl.c"
        $0=0; //@line 504 "xmltok_impl.c"
        __label__ = 44; break; //@line 504 "xmltok_impl.c"
      case 22: // $bb22
        var $79=$enc_addr; //@line 507 "xmltok_impl.c"
        var $80=$79; //@line 507 "xmltok_impl.c"
        var $81=$ptr_addr; //@line 507 "xmltok_impl.c"
        var $82=HEAP[$81]; //@line 507 "xmltok_impl.c"
        var $83=($82); //@line 507 "xmltok_impl.c"
        var $84=$80+76; //@line 507 "xmltok_impl.c"
        var $85=$84+$83; //@line 507 "xmltok_impl.c"
        var $86=HEAP[$85]; //@line 507 "xmltok_impl.c"
        var $87=($86); //@line 507 "xmltok_impl.c"
        if ($87 == 5) {
          __label__ = 25; break;
        }
        else if ($87 == 6) {
          __label__ = 30; break;
        }
        else if ($87 == 7) {
          __label__ = 35; break;
        }
        else if ($87 == 18) {
          __label__ = 40; break;
        }
        else if ($87 == 22) {
          __label__ = 24; break;
        }
        else if ($87 == 24) {
          __label__ = 24; break;
        }
        else if ($87 == 25) {
          __label__ = 24; break;
        }
        else if ($87 == 26) {
          __label__ = 24; break;
        }
        else if ($87 == 27) {
          __label__ = 24; break;
        }
        else if ($87 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 41; break;
        }
        
      case 23: // $bb23
        var $88=$nextTokPtr_addr; //@line 508 "xmltok_impl.c"
        var $89=$ptr_addr; //@line 508 "xmltok_impl.c"
        HEAP[$88]=$89; //@line 508 "xmltok_impl.c"
        $0=0; //@line 508 "xmltok_impl.c"
        __label__ = 44; break; //@line 508 "xmltok_impl.c"
      case 24: // $bb24
        var $90=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $91=$90+1; //@line 508 "xmltok_impl.c"
        $ptr_addr=$91; //@line 508 "xmltok_impl.c"
        __label__ = 42; break; //@line 508 "xmltok_impl.c"
      case 25: // $bb25
        var $92=$end_addr; //@line 508 "xmltok_impl.c"
        var $93=($92); //@line 508 "xmltok_impl.c"
        var $94=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $95=($94); //@line 508 "xmltok_impl.c"
        var $96=($93) - ($95); //@line 508 "xmltok_impl.c"
        var $97=($96) <= 1; //@line 508 "xmltok_impl.c"
        if ($97) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 508 "xmltok_impl.c"
      case 26: // $bb26
        $0=-2; //@line 508 "xmltok_impl.c"
        __label__ = 44; break; //@line 508 "xmltok_impl.c"
      case 27: // $bb27
        var $98=$enc_addr; //@line 508 "xmltok_impl.c"
        var $99=$98; //@line 508 "xmltok_impl.c"
        var $100=$99+332; //@line 508 "xmltok_impl.c"
        var $101=HEAP[$100]; //@line 508 "xmltok_impl.c"
        var $102=$enc_addr; //@line 508 "xmltok_impl.c"
        var $103=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $104=FUNCTION_TABLE[$101]($102, $103); //@line 508 "xmltok_impl.c"
        var $105=($104)==0; //@line 508 "xmltok_impl.c"
        if ($105) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 508 "xmltok_impl.c"
      case 28: // $bb28
        var $106=$nextTokPtr_addr; //@line 508 "xmltok_impl.c"
        var $107=$ptr_addr; //@line 508 "xmltok_impl.c"
        HEAP[$106]=$107; //@line 508 "xmltok_impl.c"
        $0=0; //@line 508 "xmltok_impl.c"
        __label__ = 44; break; //@line 508 "xmltok_impl.c"
      case 29: // $bb29
        var $108=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $109=$108+2; //@line 508 "xmltok_impl.c"
        $ptr_addr=$109; //@line 508 "xmltok_impl.c"
        __label__ = 42; break; //@line 508 "xmltok_impl.c"
      case 30: // $bb30
        var $110=$end_addr; //@line 508 "xmltok_impl.c"
        var $111=($110); //@line 508 "xmltok_impl.c"
        var $112=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $113=($112); //@line 508 "xmltok_impl.c"
        var $114=($111) - ($113); //@line 508 "xmltok_impl.c"
        var $115=($114) <= 2; //@line 508 "xmltok_impl.c"
        if ($115) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 508 "xmltok_impl.c"
      case 31: // $bb31
        $0=-2; //@line 508 "xmltok_impl.c"
        __label__ = 44; break; //@line 508 "xmltok_impl.c"
      case 32: // $bb32
        var $116=$enc_addr; //@line 508 "xmltok_impl.c"
        var $117=$116; //@line 508 "xmltok_impl.c"
        var $118=$117+336; //@line 508 "xmltok_impl.c"
        var $119=HEAP[$118]; //@line 508 "xmltok_impl.c"
        var $120=$enc_addr; //@line 508 "xmltok_impl.c"
        var $121=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $122=FUNCTION_TABLE[$119]($120, $121); //@line 508 "xmltok_impl.c"
        var $123=($122)==0; //@line 508 "xmltok_impl.c"
        if ($123) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 508 "xmltok_impl.c"
      case 33: // $bb33
        var $124=$nextTokPtr_addr; //@line 508 "xmltok_impl.c"
        var $125=$ptr_addr; //@line 508 "xmltok_impl.c"
        HEAP[$124]=$125; //@line 508 "xmltok_impl.c"
        $0=0; //@line 508 "xmltok_impl.c"
        __label__ = 44; break; //@line 508 "xmltok_impl.c"
      case 34: // $bb34
        var $126=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $127=$126+3; //@line 508 "xmltok_impl.c"
        $ptr_addr=$127; //@line 508 "xmltok_impl.c"
        __label__ = 42; break; //@line 508 "xmltok_impl.c"
      case 35: // $bb35
        var $128=$end_addr; //@line 508 "xmltok_impl.c"
        var $129=($128); //@line 508 "xmltok_impl.c"
        var $130=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $131=($130); //@line 508 "xmltok_impl.c"
        var $132=($129) - ($131); //@line 508 "xmltok_impl.c"
        var $133=($132) <= 3; //@line 508 "xmltok_impl.c"
        if ($133) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 508 "xmltok_impl.c"
      case 36: // $bb36
        $0=-2; //@line 508 "xmltok_impl.c"
        __label__ = 44; break; //@line 508 "xmltok_impl.c"
      case 37: // $bb37
        var $134=$enc_addr; //@line 508 "xmltok_impl.c"
        var $135=$134; //@line 508 "xmltok_impl.c"
        var $136=$135+340; //@line 508 "xmltok_impl.c"
        var $137=HEAP[$136]; //@line 508 "xmltok_impl.c"
        var $138=$enc_addr; //@line 508 "xmltok_impl.c"
        var $139=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $140=FUNCTION_TABLE[$137]($138, $139); //@line 508 "xmltok_impl.c"
        var $141=($140)==0; //@line 508 "xmltok_impl.c"
        if ($141) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 508 "xmltok_impl.c"
      case 38: // $bb38
        var $142=$nextTokPtr_addr; //@line 508 "xmltok_impl.c"
        var $143=$ptr_addr; //@line 508 "xmltok_impl.c"
        HEAP[$142]=$143; //@line 508 "xmltok_impl.c"
        $0=0; //@line 508 "xmltok_impl.c"
        __label__ = 44; break; //@line 508 "xmltok_impl.c"
      case 39: // $bb39
        var $144=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $145=$144+4; //@line 508 "xmltok_impl.c"
        $ptr_addr=$145; //@line 508 "xmltok_impl.c"
        __label__ = 42; break; //@line 508 "xmltok_impl.c"
      case 40: // $bb40
        var $146=$ptr_addr; //@line 510 "xmltok_impl.c"
        var $147=$146+1; //@line 510 "xmltok_impl.c"
        var $148=$nextTokPtr_addr; //@line 510 "xmltok_impl.c"
        HEAP[$148]=$147; //@line 510 "xmltok_impl.c"
        $0=9; //@line 511 "xmltok_impl.c"
        __label__ = 44; break; //@line 511 "xmltok_impl.c"
      case 41: // $bb41
        var $149=$nextTokPtr_addr; //@line 513 "xmltok_impl.c"
        var $150=$ptr_addr; //@line 513 "xmltok_impl.c"
        HEAP[$149]=$150; //@line 513 "xmltok_impl.c"
        $0=0; //@line 514 "xmltok_impl.c"
        __label__ = 44; break; //@line 514 "xmltok_impl.c"
      case 42: // $bb42
        var $151=$ptr_addr; //@line 506 "xmltok_impl.c"
        var $152=$end_addr; //@line 506 "xmltok_impl.c"
        var $153=($151)!=($152); //@line 506 "xmltok_impl.c"
        if ($153) { __label__ = 22; break; } else { __label__ = 43; break; } //@line 506 "xmltok_impl.c"
      case 43: // $bb43
        $0=-1; //@line 517 "xmltok_impl.c"
        __label__ = 44; break; //@line 517 "xmltok_impl.c"
      case 44: // $bb44
        var $154=$0; //@line 497 "xmltok_impl.c"
        $retval=$154; //@line 497 "xmltok_impl.c"
        var $retval45=$retval; //@line 497 "xmltok_impl.c"
        ;
        return $retval45; //@line 497 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanAtts($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr=__stackBase__;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $hadColon;
        var $t;
        var $open;
        var $t58;
        var $tok;
        $enc_addr=$enc;
        HEAP[$ptr_addr]=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        $hadColon=0; //@line 527 "xmltok_impl.c"
        __label__ = 112; break; //@line 527 "xmltok_impl.c"
      case 1: // $bb
        var $1=$enc_addr; //@line 530 "xmltok_impl.c"
        var $2=$1; //@line 530 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 530 "xmltok_impl.c"
        var $5=($4); //@line 530 "xmltok_impl.c"
        var $6=$2+76; //@line 530 "xmltok_impl.c"
        var $7=$6+$5; //@line 530 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 530 "xmltok_impl.c"
        var $9=($8); //@line 530 "xmltok_impl.c"
        if ($9 == 5) {
          __label__ = 4; break;
        }
        else if ($9 == 6) {
          __label__ = 9; break;
        }
        else if ($9 == 7) {
          __label__ = 14; break;
        }
        else if ($9 == 9) {
          __label__ = 42; break;
        }
        else if ($9 == 10) {
          __label__ = 42; break;
        }
        else if ($9 == 14) {
          __label__ = 47; break;
        }
        else if ($9 == 21) {
          __label__ = 42; break;
        }
        else if ($9 == 22) {
          __label__ = 3; break;
        }
        else if ($9 == 23) {
          __label__ = 19; break;
        }
        else if ($9 == 24) {
          __label__ = 3; break;
        }
        else if ($9 == 25) {
          __label__ = 3; break;
        }
        else if ($9 == 26) {
          __label__ = 3; break;
        }
        else if ($9 == 27) {
          __label__ = 3; break;
        }
        else if ($9 == 29) {
          __label__ = 2; break;
        }
        else {
        __label__ = 111; break;
        }
        
      case 2: // $bb1
        var $10=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $11=$nextTokPtr_addr; //@line 531 "xmltok_impl.c"
        HEAP[$11]=$10; //@line 531 "xmltok_impl.c"
        $0=0; //@line 531 "xmltok_impl.c"
        __label__ = 114; break; //@line 531 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $13=$12+1; //@line 531 "xmltok_impl.c"
        HEAP[$ptr_addr]=$13; //@line 531 "xmltok_impl.c"
        __label__ = 112; break; //@line 531 "xmltok_impl.c"
      case 4: // $bb3
        var $14=$end_addr; //@line 531 "xmltok_impl.c"
        var $15=($14); //@line 531 "xmltok_impl.c"
        var $16=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $17=($16); //@line 531 "xmltok_impl.c"
        var $18=($15) - ($17); //@line 531 "xmltok_impl.c"
        var $19=($18) <= 1; //@line 531 "xmltok_impl.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 531 "xmltok_impl.c"
      case 5: // $bb4
        $0=-2; //@line 531 "xmltok_impl.c"
        __label__ = 114; break; //@line 531 "xmltok_impl.c"
      case 6: // $bb5
        var $20=$enc_addr; //@line 531 "xmltok_impl.c"
        var $21=$20; //@line 531 "xmltok_impl.c"
        var $22=$21+332; //@line 531 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 531 "xmltok_impl.c"
        var $24=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $25=$enc_addr; //@line 531 "xmltok_impl.c"
        var $26=FUNCTION_TABLE[$23]($25, $24); //@line 531 "xmltok_impl.c"
        var $27=($26)==0; //@line 531 "xmltok_impl.c"
        var $28=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 531 "xmltok_impl.c"
      case 7: // $bb6
        var $29=$nextTokPtr_addr; //@line 531 "xmltok_impl.c"
        HEAP[$29]=$28; //@line 531 "xmltok_impl.c"
        $0=0; //@line 531 "xmltok_impl.c"
        __label__ = 114; break; //@line 531 "xmltok_impl.c"
      case 8: // $bb7
        var $30=$28+2; //@line 531 "xmltok_impl.c"
        HEAP[$ptr_addr]=$30; //@line 531 "xmltok_impl.c"
        __label__ = 112; break; //@line 531 "xmltok_impl.c"
      case 9: // $bb8
        var $31=$end_addr; //@line 531 "xmltok_impl.c"
        var $32=($31); //@line 531 "xmltok_impl.c"
        var $33=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $34=($33); //@line 531 "xmltok_impl.c"
        var $35=($32) - ($34); //@line 531 "xmltok_impl.c"
        var $36=($35) <= 2; //@line 531 "xmltok_impl.c"
        if ($36) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 531 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 531 "xmltok_impl.c"
        __label__ = 114; break; //@line 531 "xmltok_impl.c"
      case 11: // $bb10
        var $37=$enc_addr; //@line 531 "xmltok_impl.c"
        var $38=$37; //@line 531 "xmltok_impl.c"
        var $39=$38+336; //@line 531 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 531 "xmltok_impl.c"
        var $41=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $42=$enc_addr; //@line 531 "xmltok_impl.c"
        var $43=FUNCTION_TABLE[$40]($42, $41); //@line 531 "xmltok_impl.c"
        var $44=($43)==0; //@line 531 "xmltok_impl.c"
        var $45=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        if ($44) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 531 "xmltok_impl.c"
      case 12: // $bb11
        var $46=$nextTokPtr_addr; //@line 531 "xmltok_impl.c"
        HEAP[$46]=$45; //@line 531 "xmltok_impl.c"
        $0=0; //@line 531 "xmltok_impl.c"
        __label__ = 114; break; //@line 531 "xmltok_impl.c"
      case 13: // $bb12
        var $47=$45+3; //@line 531 "xmltok_impl.c"
        HEAP[$ptr_addr]=$47; //@line 531 "xmltok_impl.c"
        __label__ = 112; break; //@line 531 "xmltok_impl.c"
      case 14: // $bb13
        var $48=$end_addr; //@line 531 "xmltok_impl.c"
        var $49=($48); //@line 531 "xmltok_impl.c"
        var $50=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $51=($50); //@line 531 "xmltok_impl.c"
        var $52=($49) - ($51); //@line 531 "xmltok_impl.c"
        var $53=($52) <= 3; //@line 531 "xmltok_impl.c"
        if ($53) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 531 "xmltok_impl.c"
      case 15: // $bb14
        $0=-2; //@line 531 "xmltok_impl.c"
        __label__ = 114; break; //@line 531 "xmltok_impl.c"
      case 16: // $bb15
        var $54=$enc_addr; //@line 531 "xmltok_impl.c"
        var $55=$54; //@line 531 "xmltok_impl.c"
        var $56=$55+340; //@line 531 "xmltok_impl.c"
        var $57=HEAP[$56]; //@line 531 "xmltok_impl.c"
        var $58=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $59=$enc_addr; //@line 531 "xmltok_impl.c"
        var $60=FUNCTION_TABLE[$57]($59, $58); //@line 531 "xmltok_impl.c"
        var $61=($60)==0; //@line 531 "xmltok_impl.c"
        var $62=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        if ($61) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 531 "xmltok_impl.c"
      case 17: // $bb16
        var $63=$nextTokPtr_addr; //@line 531 "xmltok_impl.c"
        HEAP[$63]=$62; //@line 531 "xmltok_impl.c"
        $0=0; //@line 531 "xmltok_impl.c"
        __label__ = 114; break; //@line 531 "xmltok_impl.c"
      case 18: // $bb17
        var $64=$62+4; //@line 531 "xmltok_impl.c"
        HEAP[$ptr_addr]=$64; //@line 531 "xmltok_impl.c"
        __label__ = 112; break; //@line 531 "xmltok_impl.c"
      case 19: // $bb18
        var $65=$hadColon; //@line 534 "xmltok_impl.c"
        var $66=($65)!=0; //@line 534 "xmltok_impl.c"
        if ($66) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 534 "xmltok_impl.c"
      case 20: // $bb19
        var $67=HEAP[$ptr_addr]; //@line 535 "xmltok_impl.c"
        var $68=$nextTokPtr_addr; //@line 535 "xmltok_impl.c"
        HEAP[$68]=$67; //@line 535 "xmltok_impl.c"
        $0=0; //@line 536 "xmltok_impl.c"
        __label__ = 114; break; //@line 536 "xmltok_impl.c"
      case 21: // $bb20
        $hadColon=1; //@line 538 "xmltok_impl.c"
        var $69=HEAP[$ptr_addr]; //@line 539 "xmltok_impl.c"
        var $70=$69+1; //@line 539 "xmltok_impl.c"
        HEAP[$ptr_addr]=$70; //@line 539 "xmltok_impl.c"
        var $71=HEAP[$ptr_addr]; //@line 540 "xmltok_impl.c"
        var $72=$end_addr; //@line 540 "xmltok_impl.c"
        var $73=($71)==($72); //@line 540 "xmltok_impl.c"
        if ($73) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 540 "xmltok_impl.c"
      case 22: // $bb21
        $0=-1; //@line 541 "xmltok_impl.c"
        __label__ = 114; break; //@line 541 "xmltok_impl.c"
      case 23: // $bb22
        var $74=$enc_addr; //@line 542 "xmltok_impl.c"
        var $75=$74; //@line 542 "xmltok_impl.c"
        var $76=HEAP[$ptr_addr]; //@line 542 "xmltok_impl.c"
        var $77=HEAP[$76]; //@line 542 "xmltok_impl.c"
        var $78=($77); //@line 542 "xmltok_impl.c"
        var $79=$75+76; //@line 542 "xmltok_impl.c"
        var $80=$79+$78; //@line 542 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 542 "xmltok_impl.c"
        var $82=($81); //@line 542 "xmltok_impl.c"
        if ($82 == 5) {
          __label__ = 26; break;
        }
        else if ($82 == 6) {
          __label__ = 31; break;
        }
        else if ($82 == 7) {
          __label__ = 36; break;
        }
        else if ($82 == 22) {
          __label__ = 25; break;
        }
        else if ($82 == 24) {
          __label__ = 25; break;
        }
        else if ($82 == 29) {
          __label__ = 24; break;
        }
        else {
        __label__ = 41; break;
        }
        
      case 24: // $bb23
        var $83=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $84=$nextTokPtr_addr; //@line 543 "xmltok_impl.c"
        HEAP[$84]=$83; //@line 543 "xmltok_impl.c"
        $0=0; //@line 543 "xmltok_impl.c"
        __label__ = 114; break; //@line 543 "xmltok_impl.c"
      case 25: // $bb24
        var $85=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $86=$85+1; //@line 543 "xmltok_impl.c"
        HEAP[$ptr_addr]=$86; //@line 543 "xmltok_impl.c"
        __label__ = 112; break; //@line 543 "xmltok_impl.c"
      case 26: // $bb25
        var $87=$end_addr; //@line 543 "xmltok_impl.c"
        var $88=($87); //@line 543 "xmltok_impl.c"
        var $89=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $90=($89); //@line 543 "xmltok_impl.c"
        var $91=($88) - ($90); //@line 543 "xmltok_impl.c"
        var $92=($91) <= 1; //@line 543 "xmltok_impl.c"
        if ($92) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 543 "xmltok_impl.c"
      case 27: // $bb26
        $0=-2; //@line 543 "xmltok_impl.c"
        __label__ = 114; break; //@line 543 "xmltok_impl.c"
      case 28: // $bb27
        var $93=$enc_addr; //@line 543 "xmltok_impl.c"
        var $94=$93; //@line 543 "xmltok_impl.c"
        var $95=$94+344; //@line 543 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 543 "xmltok_impl.c"
        var $97=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $98=$enc_addr; //@line 543 "xmltok_impl.c"
        var $99=FUNCTION_TABLE[$96]($98, $97); //@line 543 "xmltok_impl.c"
        var $100=($99)==0; //@line 543 "xmltok_impl.c"
        var $101=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        if ($100) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 543 "xmltok_impl.c"
      case 29: // $bb28
        var $102=$nextTokPtr_addr; //@line 543 "xmltok_impl.c"
        HEAP[$102]=$101; //@line 543 "xmltok_impl.c"
        $0=0; //@line 543 "xmltok_impl.c"
        __label__ = 114; break; //@line 543 "xmltok_impl.c"
      case 30: // $bb29
        var $103=$101+2; //@line 543 "xmltok_impl.c"
        HEAP[$ptr_addr]=$103; //@line 543 "xmltok_impl.c"
        __label__ = 112; break; //@line 543 "xmltok_impl.c"
      case 31: // $bb30
        var $104=$end_addr; //@line 543 "xmltok_impl.c"
        var $105=($104); //@line 543 "xmltok_impl.c"
        var $106=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $107=($106); //@line 543 "xmltok_impl.c"
        var $108=($105) - ($107); //@line 543 "xmltok_impl.c"
        var $109=($108) <= 2; //@line 543 "xmltok_impl.c"
        if ($109) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 543 "xmltok_impl.c"
      case 32: // $bb31
        $0=-2; //@line 543 "xmltok_impl.c"
        __label__ = 114; break; //@line 543 "xmltok_impl.c"
      case 33: // $bb32
        var $110=$enc_addr; //@line 543 "xmltok_impl.c"
        var $111=$110; //@line 543 "xmltok_impl.c"
        var $112=$111+348; //@line 543 "xmltok_impl.c"
        var $113=HEAP[$112]; //@line 543 "xmltok_impl.c"
        var $114=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $115=$enc_addr; //@line 543 "xmltok_impl.c"
        var $116=FUNCTION_TABLE[$113]($115, $114); //@line 543 "xmltok_impl.c"
        var $117=($116)==0; //@line 543 "xmltok_impl.c"
        var $118=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        if ($117) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 543 "xmltok_impl.c"
      case 34: // $bb33
        var $119=$nextTokPtr_addr; //@line 543 "xmltok_impl.c"
        HEAP[$119]=$118; //@line 543 "xmltok_impl.c"
        $0=0; //@line 543 "xmltok_impl.c"
        __label__ = 114; break; //@line 543 "xmltok_impl.c"
      case 35: // $bb34
        var $120=$118+3; //@line 543 "xmltok_impl.c"
        HEAP[$ptr_addr]=$120; //@line 543 "xmltok_impl.c"
        __label__ = 112; break; //@line 543 "xmltok_impl.c"
      case 36: // $bb35
        var $121=$end_addr; //@line 543 "xmltok_impl.c"
        var $122=($121); //@line 543 "xmltok_impl.c"
        var $123=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $124=($123); //@line 543 "xmltok_impl.c"
        var $125=($122) - ($124); //@line 543 "xmltok_impl.c"
        var $126=($125) <= 3; //@line 543 "xmltok_impl.c"
        if ($126) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 543 "xmltok_impl.c"
      case 37: // $bb36
        $0=-2; //@line 543 "xmltok_impl.c"
        __label__ = 114; break; //@line 543 "xmltok_impl.c"
      case 38: // $bb37
        var $127=$enc_addr; //@line 543 "xmltok_impl.c"
        var $128=$127; //@line 543 "xmltok_impl.c"
        var $129=$128+352; //@line 543 "xmltok_impl.c"
        var $130=HEAP[$129]; //@line 543 "xmltok_impl.c"
        var $131=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $132=$enc_addr; //@line 543 "xmltok_impl.c"
        var $133=FUNCTION_TABLE[$130]($132, $131); //@line 543 "xmltok_impl.c"
        var $134=($133)==0; //@line 543 "xmltok_impl.c"
        var $135=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        if ($134) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 543 "xmltok_impl.c"
      case 39: // $bb38
        var $136=$nextTokPtr_addr; //@line 543 "xmltok_impl.c"
        HEAP[$136]=$135; //@line 543 "xmltok_impl.c"
        $0=0; //@line 543 "xmltok_impl.c"
        __label__ = 114; break; //@line 543 "xmltok_impl.c"
      case 40: // $bb39
        var $137=$135+4; //@line 543 "xmltok_impl.c"
        HEAP[$ptr_addr]=$137; //@line 543 "xmltok_impl.c"
        __label__ = 112; break; //@line 543 "xmltok_impl.c"
      case 41: // $bb40
        var $138=HEAP[$ptr_addr]; //@line 545 "xmltok_impl.c"
        var $139=$nextTokPtr_addr; //@line 545 "xmltok_impl.c"
        HEAP[$139]=$138; //@line 545 "xmltok_impl.c"
        $0=0; //@line 546 "xmltok_impl.c"
        __label__ = 114; break; //@line 546 "xmltok_impl.c"
      case 42: // $bb42
        var $140=HEAP[$ptr_addr]; //@line 554 "xmltok_impl.c"
        var $141=$140+1; //@line 554 "xmltok_impl.c"
        HEAP[$ptr_addr]=$141; //@line 554 "xmltok_impl.c"
        var $142=HEAP[$ptr_addr]; //@line 555 "xmltok_impl.c"
        var $143=$end_addr; //@line 555 "xmltok_impl.c"
        var $144=($142)==($143); //@line 555 "xmltok_impl.c"
        if ($144) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 555 "xmltok_impl.c"
      case 43: // $bb43
        $0=-1; //@line 556 "xmltok_impl.c"
        __label__ = 114; break; //@line 556 "xmltok_impl.c"
      case 44: // $bb44
        var $145=$enc_addr; //@line 557 "xmltok_impl.c"
        var $146=$145; //@line 557 "xmltok_impl.c"
        var $147=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $148=HEAP[$147]; //@line 557 "xmltok_impl.c"
        var $149=($148); //@line 557 "xmltok_impl.c"
        var $150=$146+76; //@line 557 "xmltok_impl.c"
        var $151=$150+$149; //@line 557 "xmltok_impl.c"
        var $152=HEAP[$151]; //@line 557 "xmltok_impl.c"
        var $153=($152); //@line 557 "xmltok_impl.c"
        $t=$153; //@line 557 "xmltok_impl.c"
        var $154=$t; //@line 558 "xmltok_impl.c"
        var $155=($154)==14; //@line 558 "xmltok_impl.c"
        if ($155) { __label__ = 47; break; } else { __label__ = 45; break; } //@line 558 "xmltok_impl.c"
      case 45: // $bb45
        var $156=$t; //@line 560 "xmltok_impl.c"
        if ($156 == 9) {
          __label__ = 42; break;
        }
        else if ($156 == 10) {
          __label__ = 42; break;
        }
        else if ($156 == 21) {
          __label__ = 42; break;
        }
        else {
        __label__ = 46; break;
        }
        
      case 46: // $bb47
        var $157=HEAP[$ptr_addr]; //@line 566 "xmltok_impl.c"
        var $158=$nextTokPtr_addr; //@line 566 "xmltok_impl.c"
        HEAP[$158]=$157; //@line 566 "xmltok_impl.c"
        $0=0; //@line 567 "xmltok_impl.c"
        __label__ = 114; break; //@line 567 "xmltok_impl.c"
      case 47: // $bb48
        $hadColon=0; //@line 575 "xmltok_impl.c"
        __label__ = 48; break; //@line 575 "xmltok_impl.c"
      case 48: // $bb49
        var $159=HEAP[$ptr_addr]; //@line 578 "xmltok_impl.c"
        var $160=$159+1; //@line 578 "xmltok_impl.c"
        HEAP[$ptr_addr]=$160; //@line 578 "xmltok_impl.c"
        var $161=HEAP[$ptr_addr]; //@line 579 "xmltok_impl.c"
        var $162=$end_addr; //@line 579 "xmltok_impl.c"
        var $163=($161)==($162); //@line 579 "xmltok_impl.c"
        if ($163) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 579 "xmltok_impl.c"
      case 49: // $bb50
        $0=-1; //@line 580 "xmltok_impl.c"
        __label__ = 114; break; //@line 580 "xmltok_impl.c"
      case 50: // $bb51
        var $164=$enc_addr; //@line 581 "xmltok_impl.c"
        var $165=$164; //@line 581 "xmltok_impl.c"
        var $166=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $167=HEAP[$166]; //@line 581 "xmltok_impl.c"
        var $168=($167); //@line 581 "xmltok_impl.c"
        var $169=$165+76; //@line 581 "xmltok_impl.c"
        var $170=$169+$168; //@line 581 "xmltok_impl.c"
        var $171=HEAP[$170]; //@line 581 "xmltok_impl.c"
        var $172=($171); //@line 581 "xmltok_impl.c"
        $open=$172; //@line 581 "xmltok_impl.c"
        var $173=$open; //@line 582 "xmltok_impl.c"
        var $174=($173)==12; //@line 582 "xmltok_impl.c"
        var $175=$open; //@line 582 "xmltok_impl.c"
        var $176=($175)==13; //@line 582 "xmltok_impl.c"
        var $or_cond=($174) | ($176);
        if ($or_cond) { __label__ = 53; break; } else { __label__ = 51; break; } //@line 582 "xmltok_impl.c"
      case 51: // $bb53
        var $177=$open; //@line 584 "xmltok_impl.c"
        if ($177 == 9) {
          __label__ = 48; break;
        }
        else if ($177 == 10) {
          __label__ = 48; break;
        }
        else if ($177 == 21) {
          __label__ = 48; break;
        }
        else {
        __label__ = 52; break;
        }
        
      case 52: // $bb55
        var $178=HEAP[$ptr_addr]; //@line 590 "xmltok_impl.c"
        var $179=$nextTokPtr_addr; //@line 590 "xmltok_impl.c"
        HEAP[$179]=$178; //@line 590 "xmltok_impl.c"
        $0=0; //@line 591 "xmltok_impl.c"
        __label__ = 114; break; //@line 591 "xmltok_impl.c"
      case 53: // $bb56
        var $180=HEAP[$ptr_addr]; //@line 594 "xmltok_impl.c"
        var $181=$180+1; //@line 594 "xmltok_impl.c"
        HEAP[$ptr_addr]=$181; //@line 594 "xmltok_impl.c"
        __label__ = 54; break; //@line 594 "xmltok_impl.c"
      case 54: // $bb57
        var $182=HEAP[$ptr_addr]; //@line 598 "xmltok_impl.c"
        var $183=$end_addr; //@line 598 "xmltok_impl.c"
        var $184=($182)==($183); //@line 598 "xmltok_impl.c"
        if ($184) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 598 "xmltok_impl.c"
      case 55: // $bb59
        $0=-1; //@line 599 "xmltok_impl.c"
        __label__ = 114; break; //@line 599 "xmltok_impl.c"
      case 56: // $bb60
        var $185=$enc_addr; //@line 600 "xmltok_impl.c"
        var $186=$185; //@line 600 "xmltok_impl.c"
        var $187=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $188=HEAP[$187]; //@line 600 "xmltok_impl.c"
        var $189=($188); //@line 600 "xmltok_impl.c"
        var $190=$186+76; //@line 600 "xmltok_impl.c"
        var $191=$190+$189; //@line 600 "xmltok_impl.c"
        var $192=HEAP[$191]; //@line 600 "xmltok_impl.c"
        var $193=($192); //@line 600 "xmltok_impl.c"
        $t58=$193; //@line 600 "xmltok_impl.c"
        var $194=$t58; //@line 601 "xmltok_impl.c"
        var $195=$open; //@line 601 "xmltok_impl.c"
        var $196=($194)==($195); //@line 601 "xmltok_impl.c"
        if ($196) { __label__ = 80; break; } else { __label__ = 57; break; } //@line 601 "xmltok_impl.c"
      case 57: // $bb61
        var $197=$t58; //@line 603 "xmltok_impl.c"
        if ($197 == 0) {
          __label__ = 73; break;
        }
        else if ($197 == 1) {
          __label__ = 73; break;
        }
        else if ($197 == 2) {
          __label__ = 78; break;
        }
        else if ($197 == 3) {
          __label__ = 74; break;
        }
        else if ($197 == 5) {
          __label__ = 58; break;
        }
        else if ($197 == 6) {
          __label__ = 63; break;
        }
        else if ($197 == 7) {
          __label__ = 68; break;
        }
        else if ($197 == 8) {
          __label__ = 73; break;
        }
        else {
        __label__ = 79; break;
        }
        
      case 58: // $bb62
        var $198=$end_addr; //@line 604 "xmltok_impl.c"
        var $199=($198); //@line 604 "xmltok_impl.c"
        var $200=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $201=($200); //@line 604 "xmltok_impl.c"
        var $202=($199) - ($201); //@line 604 "xmltok_impl.c"
        var $203=($202) <= 1; //@line 604 "xmltok_impl.c"
        if ($203) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 604 "xmltok_impl.c"
      case 59: // $bb63
        $0=-2; //@line 604 "xmltok_impl.c"
        __label__ = 114; break; //@line 604 "xmltok_impl.c"
      case 60: // $bb64
        var $204=$enc_addr; //@line 604 "xmltok_impl.c"
        var $205=$204; //@line 604 "xmltok_impl.c"
        var $206=$205+356; //@line 604 "xmltok_impl.c"
        var $207=HEAP[$206]; //@line 604 "xmltok_impl.c"
        var $208=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $209=$enc_addr; //@line 604 "xmltok_impl.c"
        var $210=FUNCTION_TABLE[$207]($209, $208); //@line 604 "xmltok_impl.c"
        var $211=($210)!=0; //@line 604 "xmltok_impl.c"
        var $212=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        if ($211) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 604 "xmltok_impl.c"
      case 61: // $bb65
        var $213=$nextTokPtr_addr; //@line 604 "xmltok_impl.c"
        HEAP[$213]=$212; //@line 604 "xmltok_impl.c"
        $0=0; //@line 604 "xmltok_impl.c"
        __label__ = 114; break; //@line 604 "xmltok_impl.c"
      case 62: // $bb66
        var $214=$212+2; //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$214; //@line 604 "xmltok_impl.c"
        __label__ = 54; break; //@line 604 "xmltok_impl.c"
      case 63: // $bb67
        var $215=$end_addr; //@line 604 "xmltok_impl.c"
        var $216=($215); //@line 604 "xmltok_impl.c"
        var $217=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $218=($217); //@line 604 "xmltok_impl.c"
        var $219=($216) - ($218); //@line 604 "xmltok_impl.c"
        var $220=($219) <= 2; //@line 604 "xmltok_impl.c"
        if ($220) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 604 "xmltok_impl.c"
      case 64: // $bb68
        $0=-2; //@line 604 "xmltok_impl.c"
        __label__ = 114; break; //@line 604 "xmltok_impl.c"
      case 65: // $bb69
        var $221=$enc_addr; //@line 604 "xmltok_impl.c"
        var $222=$221; //@line 604 "xmltok_impl.c"
        var $223=$222+360; //@line 604 "xmltok_impl.c"
        var $224=HEAP[$223]; //@line 604 "xmltok_impl.c"
        var $225=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $226=$enc_addr; //@line 604 "xmltok_impl.c"
        var $227=FUNCTION_TABLE[$224]($226, $225); //@line 604 "xmltok_impl.c"
        var $228=($227)!=0; //@line 604 "xmltok_impl.c"
        var $229=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        if ($228) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 604 "xmltok_impl.c"
      case 66: // $bb70
        var $230=$nextTokPtr_addr; //@line 604 "xmltok_impl.c"
        HEAP[$230]=$229; //@line 604 "xmltok_impl.c"
        $0=0; //@line 604 "xmltok_impl.c"
        __label__ = 114; break; //@line 604 "xmltok_impl.c"
      case 67: // $bb71
        var $231=$229+3; //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$231; //@line 604 "xmltok_impl.c"
        __label__ = 54; break; //@line 604 "xmltok_impl.c"
      case 68: // $bb72
        var $232=$end_addr; //@line 604 "xmltok_impl.c"
        var $233=($232); //@line 604 "xmltok_impl.c"
        var $234=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $235=($234); //@line 604 "xmltok_impl.c"
        var $236=($233) - ($235); //@line 604 "xmltok_impl.c"
        var $237=($236) <= 3; //@line 604 "xmltok_impl.c"
        if ($237) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 604 "xmltok_impl.c"
      case 69: // $bb73
        $0=-2; //@line 604 "xmltok_impl.c"
        __label__ = 114; break; //@line 604 "xmltok_impl.c"
      case 70: // $bb74
        var $238=$enc_addr; //@line 604 "xmltok_impl.c"
        var $239=$238; //@line 604 "xmltok_impl.c"
        var $240=$239+364; //@line 604 "xmltok_impl.c"
        var $241=HEAP[$240]; //@line 604 "xmltok_impl.c"
        var $242=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $243=$enc_addr; //@line 604 "xmltok_impl.c"
        var $244=FUNCTION_TABLE[$241]($243, $242); //@line 604 "xmltok_impl.c"
        var $245=($244)!=0; //@line 604 "xmltok_impl.c"
        var $246=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        if ($245) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 604 "xmltok_impl.c"
      case 71: // $bb75
        var $247=$nextTokPtr_addr; //@line 604 "xmltok_impl.c"
        HEAP[$247]=$246; //@line 604 "xmltok_impl.c"
        $0=0; //@line 604 "xmltok_impl.c"
        __label__ = 114; break; //@line 604 "xmltok_impl.c"
      case 72: // $bb76
        var $248=$246+4; //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$248; //@line 604 "xmltok_impl.c"
        __label__ = 54; break; //@line 604 "xmltok_impl.c"
      case 73: // $bb77
        var $249=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $250=$nextTokPtr_addr; //@line 604 "xmltok_impl.c"
        HEAP[$250]=$249; //@line 604 "xmltok_impl.c"
        $0=0; //@line 604 "xmltok_impl.c"
        __label__ = 114; break; //@line 604 "xmltok_impl.c"
      case 74: // $bb78
        var $251=HEAP[$ptr_addr]; //@line 607 "xmltok_impl.c"
        var $252=$251+1; //@line 607 "xmltok_impl.c"
        var $253=$enc_addr; //@line 607 "xmltok_impl.c"
        var $254=$end_addr; //@line 607 "xmltok_impl.c"
        var $255=_normal_scanRef($253, $252, $254, $ptr_addr); //@line 607 "xmltok_impl.c"
        $tok=$255; //@line 607 "xmltok_impl.c"
        var $256=$tok; //@line 608 "xmltok_impl.c"
        var $257=($256) <= 0; //@line 608 "xmltok_impl.c"
        if ($257) { __label__ = 75; break; } else { __label__ = 54; break; } //@line 608 "xmltok_impl.c"
      case 75: // $bb79
        var $258=$tok; //@line 609 "xmltok_impl.c"
        var $259=($258)==0; //@line 609 "xmltok_impl.c"
        if ($259) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 609 "xmltok_impl.c"
      case 76: // $bb80
        var $260=HEAP[$ptr_addr]; //@line 610 "xmltok_impl.c"
        var $261=$nextTokPtr_addr; //@line 610 "xmltok_impl.c"
        HEAP[$261]=$260; //@line 610 "xmltok_impl.c"
        __label__ = 77; break; //@line 610 "xmltok_impl.c"
      case 77: // $bb81
        var $262=$tok; //@line 611 "xmltok_impl.c"
        $0=$262; //@line 611 "xmltok_impl.c"
        __label__ = 114; break; //@line 611 "xmltok_impl.c"
      case 78: // $bb83
        var $263=HEAP[$ptr_addr]; //@line 616 "xmltok_impl.c"
        var $264=$nextTokPtr_addr; //@line 616 "xmltok_impl.c"
        HEAP[$264]=$263; //@line 616 "xmltok_impl.c"
        $0=0; //@line 617 "xmltok_impl.c"
        __label__ = 114; break; //@line 617 "xmltok_impl.c"
      case 79: // $bb84
        var $265=HEAP[$ptr_addr]; //@line 619 "xmltok_impl.c"
        var $266=$265+1; //@line 619 "xmltok_impl.c"
        HEAP[$ptr_addr]=$266; //@line 619 "xmltok_impl.c"
        __label__ = 54; break; //@line 619 "xmltok_impl.c"
      case 80: // $bb86
        var $267=HEAP[$ptr_addr]; //@line 623 "xmltok_impl.c"
        var $268=$267+1; //@line 623 "xmltok_impl.c"
        HEAP[$ptr_addr]=$268; //@line 623 "xmltok_impl.c"
        var $269=HEAP[$ptr_addr]; //@line 624 "xmltok_impl.c"
        var $270=$end_addr; //@line 624 "xmltok_impl.c"
        var $271=($269)==($270); //@line 624 "xmltok_impl.c"
        if ($271) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 624 "xmltok_impl.c"
      case 81: // $bb87
        $0=-1; //@line 625 "xmltok_impl.c"
        __label__ = 114; break; //@line 625 "xmltok_impl.c"
      case 82: // $bb88
        var $272=$enc_addr; //@line 626 "xmltok_impl.c"
        var $273=$272; //@line 626 "xmltok_impl.c"
        var $274=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $275=HEAP[$274]; //@line 626 "xmltok_impl.c"
        var $276=($275); //@line 626 "xmltok_impl.c"
        var $277=$273+76; //@line 626 "xmltok_impl.c"
        var $278=$277+$276; //@line 626 "xmltok_impl.c"
        var $279=HEAP[$278]; //@line 626 "xmltok_impl.c"
        var $280=($279); //@line 626 "xmltok_impl.c"
        if ($280 == 9) {
          __label__ = 84; break;
        }
        else if ($280 == 10) {
          __label__ = 84; break;
        }
        else if ($280 == 11) {
          __label__ = 104; break;
        }
        else if ($280 == 17) {
          __label__ = 105; break;
        }
        else if ($280 == 21) {
          __label__ = 84; break;
        }
        else {
        __label__ = 83; break;
        }
        
      case 83: // $bb92
        var $281=HEAP[$ptr_addr]; //@line 636 "xmltok_impl.c"
        var $282=$nextTokPtr_addr; //@line 636 "xmltok_impl.c"
        HEAP[$282]=$281; //@line 636 "xmltok_impl.c"
        $0=0; //@line 637 "xmltok_impl.c"
        __label__ = 114; break; //@line 637 "xmltok_impl.c"
      case 84: // $bb93
        var $283=HEAP[$ptr_addr]; //@line 641 "xmltok_impl.c"
        var $284=$283+1; //@line 641 "xmltok_impl.c"
        HEAP[$ptr_addr]=$284; //@line 641 "xmltok_impl.c"
        var $285=HEAP[$ptr_addr]; //@line 642 "xmltok_impl.c"
        var $286=$end_addr; //@line 642 "xmltok_impl.c"
        var $287=($285)==($286); //@line 642 "xmltok_impl.c"
        if ($287) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 642 "xmltok_impl.c"
      case 85: // $bb94
        $0=-1; //@line 643 "xmltok_impl.c"
        __label__ = 114; break; //@line 643 "xmltok_impl.c"
      case 86: // $bb95
        var $288=$enc_addr; //@line 644 "xmltok_impl.c"
        var $289=$288; //@line 644 "xmltok_impl.c"
        var $290=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $291=HEAP[$290]; //@line 644 "xmltok_impl.c"
        var $292=($291); //@line 644 "xmltok_impl.c"
        var $293=$289+76; //@line 644 "xmltok_impl.c"
        var $294=$293+$292; //@line 644 "xmltok_impl.c"
        var $295=HEAP[$294]; //@line 644 "xmltok_impl.c"
        var $296=($295); //@line 644 "xmltok_impl.c"
        if ($296 == 5) {
          __label__ = 89; break;
        }
        else if ($296 == 6) {
          __label__ = 94; break;
        }
        else if ($296 == 7) {
          __label__ = 99; break;
        }
        else if ($296 == 9) {
          __label__ = 84; break;
        }
        else if ($296 == 10) {
          __label__ = 84; break;
        }
        else if ($296 == 11) {
          __label__ = 104; break;
        }
        else if ($296 == 17) {
          __label__ = 105; break;
        }
        else if ($296 == 21) {
          __label__ = 84; break;
        }
        else if ($296 == 22) {
          __label__ = 88; break;
        }
        else if ($296 == 24) {
          __label__ = 88; break;
        }
        else if ($296 == 29) {
          __label__ = 87; break;
        }
        else {
        __label__ = 110; break;
        }
        
      case 87: // $bb96
        var $297=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $298=$nextTokPtr_addr; //@line 645 "xmltok_impl.c"
        HEAP[$298]=$297; //@line 645 "xmltok_impl.c"
        $0=0; //@line 645 "xmltok_impl.c"
        __label__ = 114; break; //@line 645 "xmltok_impl.c"
      case 88: // $bb97
        var $299=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $300=$299+1; //@line 645 "xmltok_impl.c"
        HEAP[$ptr_addr]=$300; //@line 645 "xmltok_impl.c"
        __label__ = 112; break; //@line 645 "xmltok_impl.c"
      case 89: // $bb98
        var $301=$end_addr; //@line 645 "xmltok_impl.c"
        var $302=($301); //@line 645 "xmltok_impl.c"
        var $303=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $304=($303); //@line 645 "xmltok_impl.c"
        var $305=($302) - ($304); //@line 645 "xmltok_impl.c"
        var $306=($305) <= 1; //@line 645 "xmltok_impl.c"
        if ($306) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 645 "xmltok_impl.c"
      case 90: // $bb99
        $0=-2; //@line 645 "xmltok_impl.c"
        __label__ = 114; break; //@line 645 "xmltok_impl.c"
      case 91: // $bb100
        var $307=$enc_addr; //@line 645 "xmltok_impl.c"
        var $308=$307; //@line 645 "xmltok_impl.c"
        var $309=$308+344; //@line 645 "xmltok_impl.c"
        var $310=HEAP[$309]; //@line 645 "xmltok_impl.c"
        var $311=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $312=$enc_addr; //@line 645 "xmltok_impl.c"
        var $313=FUNCTION_TABLE[$310]($312, $311); //@line 645 "xmltok_impl.c"
        var $314=($313)==0; //@line 645 "xmltok_impl.c"
        var $315=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        if ($314) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 645 "xmltok_impl.c"
      case 92: // $bb101
        var $316=$nextTokPtr_addr; //@line 645 "xmltok_impl.c"
        HEAP[$316]=$315; //@line 645 "xmltok_impl.c"
        $0=0; //@line 645 "xmltok_impl.c"
        __label__ = 114; break; //@line 645 "xmltok_impl.c"
      case 93: // $bb102
        var $317=$315+2; //@line 645 "xmltok_impl.c"
        HEAP[$ptr_addr]=$317; //@line 645 "xmltok_impl.c"
        __label__ = 112; break; //@line 645 "xmltok_impl.c"
      case 94: // $bb103
        var $318=$end_addr; //@line 645 "xmltok_impl.c"
        var $319=($318); //@line 645 "xmltok_impl.c"
        var $320=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $321=($320); //@line 645 "xmltok_impl.c"
        var $322=($319) - ($321); //@line 645 "xmltok_impl.c"
        var $323=($322) <= 2; //@line 645 "xmltok_impl.c"
        if ($323) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 645 "xmltok_impl.c"
      case 95: // $bb104
        $0=-2; //@line 645 "xmltok_impl.c"
        __label__ = 114; break; //@line 645 "xmltok_impl.c"
      case 96: // $bb105
        var $324=$enc_addr; //@line 645 "xmltok_impl.c"
        var $325=$324; //@line 645 "xmltok_impl.c"
        var $326=$325+348; //@line 645 "xmltok_impl.c"
        var $327=HEAP[$326]; //@line 645 "xmltok_impl.c"
        var $328=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $329=$enc_addr; //@line 645 "xmltok_impl.c"
        var $330=FUNCTION_TABLE[$327]($329, $328); //@line 645 "xmltok_impl.c"
        var $331=($330)==0; //@line 645 "xmltok_impl.c"
        var $332=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        if ($331) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 645 "xmltok_impl.c"
      case 97: // $bb106
        var $333=$nextTokPtr_addr; //@line 645 "xmltok_impl.c"
        HEAP[$333]=$332; //@line 645 "xmltok_impl.c"
        $0=0; //@line 645 "xmltok_impl.c"
        __label__ = 114; break; //@line 645 "xmltok_impl.c"
      case 98: // $bb107
        var $334=$332+3; //@line 645 "xmltok_impl.c"
        HEAP[$ptr_addr]=$334; //@line 645 "xmltok_impl.c"
        __label__ = 112; break; //@line 645 "xmltok_impl.c"
      case 99: // $bb108
        var $335=$end_addr; //@line 645 "xmltok_impl.c"
        var $336=($335); //@line 645 "xmltok_impl.c"
        var $337=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $338=($337); //@line 645 "xmltok_impl.c"
        var $339=($336) - ($338); //@line 645 "xmltok_impl.c"
        var $340=($339) <= 3; //@line 645 "xmltok_impl.c"
        if ($340) { __label__ = 100; break; } else { __label__ = 101; break; } //@line 645 "xmltok_impl.c"
      case 100: // $bb109
        $0=-2; //@line 645 "xmltok_impl.c"
        __label__ = 114; break; //@line 645 "xmltok_impl.c"
      case 101: // $bb110
        var $341=$enc_addr; //@line 645 "xmltok_impl.c"
        var $342=$341; //@line 645 "xmltok_impl.c"
        var $343=$342+352; //@line 645 "xmltok_impl.c"
        var $344=HEAP[$343]; //@line 645 "xmltok_impl.c"
        var $345=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $346=$enc_addr; //@line 645 "xmltok_impl.c"
        var $347=FUNCTION_TABLE[$344]($346, $345); //@line 645 "xmltok_impl.c"
        var $348=($347)==0; //@line 645 "xmltok_impl.c"
        var $349=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        if ($348) { __label__ = 102; break; } else { __label__ = 103; break; } //@line 645 "xmltok_impl.c"
      case 102: // $bb111
        var $350=$nextTokPtr_addr; //@line 645 "xmltok_impl.c"
        HEAP[$350]=$349; //@line 645 "xmltok_impl.c"
        $0=0; //@line 645 "xmltok_impl.c"
        __label__ = 114; break; //@line 645 "xmltok_impl.c"
      case 103: // $bb112
        var $351=$349+4; //@line 645 "xmltok_impl.c"
        HEAP[$ptr_addr]=$351; //@line 645 "xmltok_impl.c"
        __label__ = 112; break; //@line 645 "xmltok_impl.c"
      case 104: // $gt
        var $352=HEAP[$ptr_addr]; //@line 650 "xmltok_impl.c"
        var $353=$352+1; //@line 650 "xmltok_impl.c"
        var $354=$nextTokPtr_addr; //@line 650 "xmltok_impl.c"
        HEAP[$354]=$353; //@line 650 "xmltok_impl.c"
        $0=1; //@line 651 "xmltok_impl.c"
        __label__ = 114; break; //@line 651 "xmltok_impl.c"
      case 105: // $sol
        var $355=HEAP[$ptr_addr]; //@line 654 "xmltok_impl.c"
        var $356=$355+1; //@line 654 "xmltok_impl.c"
        HEAP[$ptr_addr]=$356; //@line 654 "xmltok_impl.c"
        var $357=HEAP[$ptr_addr]; //@line 655 "xmltok_impl.c"
        var $358=$end_addr; //@line 655 "xmltok_impl.c"
        var $359=($357)==($358); //@line 655 "xmltok_impl.c"
        if ($359) { __label__ = 106; break; } else { __label__ = 107; break; } //@line 655 "xmltok_impl.c"
      case 106: // $bb114
        $0=-1; //@line 656 "xmltok_impl.c"
        __label__ = 114; break; //@line 656 "xmltok_impl.c"
      case 107: // $bb115
        var $360=HEAP[$ptr_addr]; //@line 657 "xmltok_impl.c"
        var $361=HEAP[$360]; //@line 657 "xmltok_impl.c"
        var $362=($361)!=62; //@line 657 "xmltok_impl.c"
        var $363=HEAP[$ptr_addr]; //@line 658 "xmltok_impl.c"
        if ($362) { __label__ = 108; break; } else { __label__ = 109; break; } //@line 657 "xmltok_impl.c"
      case 108: // $bb116
        var $364=$nextTokPtr_addr; //@line 658 "xmltok_impl.c"
        HEAP[$364]=$363; //@line 658 "xmltok_impl.c"
        $0=0; //@line 659 "xmltok_impl.c"
        __label__ = 114; break; //@line 659 "xmltok_impl.c"
      case 109: // $bb117
        var $365=$363+1; //@line 661 "xmltok_impl.c"
        var $366=$nextTokPtr_addr; //@line 661 "xmltok_impl.c"
        HEAP[$366]=$365; //@line 661 "xmltok_impl.c"
        $0=3; //@line 662 "xmltok_impl.c"
        __label__ = 114; break; //@line 662 "xmltok_impl.c"
      case 110: // $bb118
        var $367=HEAP[$ptr_addr]; //@line 664 "xmltok_impl.c"
        var $368=$nextTokPtr_addr; //@line 664 "xmltok_impl.c"
        HEAP[$368]=$367; //@line 664 "xmltok_impl.c"
        $0=0; //@line 665 "xmltok_impl.c"
        __label__ = 114; break; //@line 665 "xmltok_impl.c"
      case 111: // $bb120
        var $369=HEAP[$ptr_addr]; //@line 672 "xmltok_impl.c"
        var $370=$nextTokPtr_addr; //@line 672 "xmltok_impl.c"
        HEAP[$370]=$369; //@line 672 "xmltok_impl.c"
        $0=0; //@line 673 "xmltok_impl.c"
        __label__ = 114; break; //@line 673 "xmltok_impl.c"
      case 112: // $bb121
        var $371=HEAP[$ptr_addr]; //@line 529 "xmltok_impl.c"
        var $372=$end_addr; //@line 529 "xmltok_impl.c"
        var $373=($371)!=($372); //@line 529 "xmltok_impl.c"
        if ($373) { __label__ = 1; break; } else { __label__ = 113; break; } //@line 529 "xmltok_impl.c"
      case 113: // $bb122
        $0=-1; //@line 676 "xmltok_impl.c"
        __label__ = 114; break; //@line 676 "xmltok_impl.c"
      case 114: // $bb123
        var $374=$0; //@line 531 "xmltok_impl.c"
        $retval=$374; //@line 531 "xmltok_impl.c"
        var $retval124=$retval; //@line 531 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval124; //@line 531 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanLt($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $hadColon;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 688 "xmltok_impl.c"
        var $2=$end_addr; //@line 688 "xmltok_impl.c"
        var $3=($1)==($2); //@line 688 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 688 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 689 "xmltok_impl.c"
        __label__ = 104; break; //@line 689 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$enc_addr; //@line 690 "xmltok_impl.c"
        var $5=$4; //@line 690 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 690 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 690 "xmltok_impl.c"
        var $8=($7); //@line 690 "xmltok_impl.c"
        var $9=$5+76; //@line 690 "xmltok_impl.c"
        var $10=$9+$8; //@line 690 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 690 "xmltok_impl.c"
        var $12=($11); //@line 690 "xmltok_impl.c"
        if ($12 == 5) {
          __label__ = 5; break;
        }
        else if ($12 == 6) {
          __label__ = 10; break;
        }
        else if ($12 == 7) {
          __label__ = 15; break;
        }
        else if ($12 == 15) {
          __label__ = 26; break;
        }
        else if ($12 == 16) {
          __label__ = 20; break;
        }
        else if ($12 == 17) {
          __label__ = 27; break;
        }
        else if ($12 == 22) {
          __label__ = 4; break;
        }
        else if ($12 == 24) {
          __label__ = 4; break;
        }
        else if ($12 == 29) {
          __label__ = 3; break;
        }
        else {
        __label__ = 28; break;
        }
        
      case 3: // $bb2
        var $13=$nextTokPtr_addr; //@line 691 "xmltok_impl.c"
        var $14=$ptr_addr; //@line 691 "xmltok_impl.c"
        HEAP[$13]=$14; //@line 691 "xmltok_impl.c"
        $0=0; //@line 691 "xmltok_impl.c"
        __label__ = 104; break; //@line 691 "xmltok_impl.c"
      case 4: // $bb3
        var $15=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $16=$15+1; //@line 691 "xmltok_impl.c"
        $ptr_addr=$16; //@line 691 "xmltok_impl.c"
        __label__ = 29; break; //@line 691 "xmltok_impl.c"
      case 5: // $bb4
        var $17=$end_addr; //@line 691 "xmltok_impl.c"
        var $18=($17); //@line 691 "xmltok_impl.c"
        var $19=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $20=($19); //@line 691 "xmltok_impl.c"
        var $21=($18) - ($20); //@line 691 "xmltok_impl.c"
        var $22=($21) <= 1; //@line 691 "xmltok_impl.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 691 "xmltok_impl.c"
      case 6: // $bb5
        $0=-2; //@line 691 "xmltok_impl.c"
        __label__ = 104; break; //@line 691 "xmltok_impl.c"
      case 7: // $bb6
        var $23=$enc_addr; //@line 691 "xmltok_impl.c"
        var $24=$23; //@line 691 "xmltok_impl.c"
        var $25=$24+344; //@line 691 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 691 "xmltok_impl.c"
        var $27=$enc_addr; //@line 691 "xmltok_impl.c"
        var $28=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $29=FUNCTION_TABLE[$26]($27, $28); //@line 691 "xmltok_impl.c"
        var $30=($29)==0; //@line 691 "xmltok_impl.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 691 "xmltok_impl.c"
      case 8: // $bb7
        var $31=$nextTokPtr_addr; //@line 691 "xmltok_impl.c"
        var $32=$ptr_addr; //@line 691 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 691 "xmltok_impl.c"
        $0=0; //@line 691 "xmltok_impl.c"
        __label__ = 104; break; //@line 691 "xmltok_impl.c"
      case 9: // $bb8
        var $33=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $34=$33+2; //@line 691 "xmltok_impl.c"
        $ptr_addr=$34; //@line 691 "xmltok_impl.c"
        __label__ = 29; break; //@line 691 "xmltok_impl.c"
      case 10: // $bb9
        var $35=$end_addr; //@line 691 "xmltok_impl.c"
        var $36=($35); //@line 691 "xmltok_impl.c"
        var $37=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $38=($37); //@line 691 "xmltok_impl.c"
        var $39=($36) - ($38); //@line 691 "xmltok_impl.c"
        var $40=($39) <= 2; //@line 691 "xmltok_impl.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 691 "xmltok_impl.c"
      case 11: // $bb10
        $0=-2; //@line 691 "xmltok_impl.c"
        __label__ = 104; break; //@line 691 "xmltok_impl.c"
      case 12: // $bb11
        var $41=$enc_addr; //@line 691 "xmltok_impl.c"
        var $42=$41; //@line 691 "xmltok_impl.c"
        var $43=$42+348; //@line 691 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 691 "xmltok_impl.c"
        var $45=$enc_addr; //@line 691 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $47=FUNCTION_TABLE[$44]($45, $46); //@line 691 "xmltok_impl.c"
        var $48=($47)==0; //@line 691 "xmltok_impl.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 691 "xmltok_impl.c"
      case 13: // $bb12
        var $49=$nextTokPtr_addr; //@line 691 "xmltok_impl.c"
        var $50=$ptr_addr; //@line 691 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 691 "xmltok_impl.c"
        $0=0; //@line 691 "xmltok_impl.c"
        __label__ = 104; break; //@line 691 "xmltok_impl.c"
      case 14: // $bb13
        var $51=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $52=$51+3; //@line 691 "xmltok_impl.c"
        $ptr_addr=$52; //@line 691 "xmltok_impl.c"
        __label__ = 29; break; //@line 691 "xmltok_impl.c"
      case 15: // $bb14
        var $53=$end_addr; //@line 691 "xmltok_impl.c"
        var $54=($53); //@line 691 "xmltok_impl.c"
        var $55=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $56=($55); //@line 691 "xmltok_impl.c"
        var $57=($54) - ($56); //@line 691 "xmltok_impl.c"
        var $58=($57) <= 3; //@line 691 "xmltok_impl.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 691 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 691 "xmltok_impl.c"
        __label__ = 104; break; //@line 691 "xmltok_impl.c"
      case 17: // $bb16
        var $59=$enc_addr; //@line 691 "xmltok_impl.c"
        var $60=$59; //@line 691 "xmltok_impl.c"
        var $61=$60+352; //@line 691 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 691 "xmltok_impl.c"
        var $63=$enc_addr; //@line 691 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $65=FUNCTION_TABLE[$62]($63, $64); //@line 691 "xmltok_impl.c"
        var $66=($65)==0; //@line 691 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 691 "xmltok_impl.c"
      case 18: // $bb17
        var $67=$nextTokPtr_addr; //@line 691 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 691 "xmltok_impl.c"
        HEAP[$67]=$68; //@line 691 "xmltok_impl.c"
        $0=0; //@line 691 "xmltok_impl.c"
        __label__ = 104; break; //@line 691 "xmltok_impl.c"
      case 19: // $bb18
        var $69=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $70=$69+4; //@line 691 "xmltok_impl.c"
        $ptr_addr=$70; //@line 691 "xmltok_impl.c"
        __label__ = 29; break; //@line 691 "xmltok_impl.c"
      case 20: // $bb19
        var $71=$ptr_addr; //@line 693 "xmltok_impl.c"
        var $72=$71+1; //@line 693 "xmltok_impl.c"
        $ptr_addr=$72; //@line 693 "xmltok_impl.c"
        var $73=$ptr_addr; //@line 693 "xmltok_impl.c"
        var $74=$end_addr; //@line 693 "xmltok_impl.c"
        var $75=($73)==($74); //@line 693 "xmltok_impl.c"
        if ($75) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 693 "xmltok_impl.c"
      case 21: // $bb20
        $0=-1; //@line 694 "xmltok_impl.c"
        __label__ = 104; break; //@line 694 "xmltok_impl.c"
      case 22: // $bb21
        var $76=$enc_addr; //@line 695 "xmltok_impl.c"
        var $77=$76; //@line 695 "xmltok_impl.c"
        var $78=$ptr_addr; //@line 695 "xmltok_impl.c"
        var $79=HEAP[$78]; //@line 695 "xmltok_impl.c"
        var $80=($79); //@line 695 "xmltok_impl.c"
        var $81=$77+76; //@line 695 "xmltok_impl.c"
        var $82=$81+$80; //@line 695 "xmltok_impl.c"
        var $83=HEAP[$82]; //@line 695 "xmltok_impl.c"
        var $84=($83); //@line 695 "xmltok_impl.c"
        if ($84 == 20) {
          __label__ = 24; break;
        }
        else if ($84 == 27) {
          __label__ = 23; break;
        }
        else {
        __label__ = 25; break;
        }
        
      case 23: // $bb22
        var $85=$ptr_addr; //@line 697 "xmltok_impl.c"
        var $86=$85+1; //@line 697 "xmltok_impl.c"
        var $87=$enc_addr; //@line 697 "xmltok_impl.c"
        var $88=$end_addr; //@line 697 "xmltok_impl.c"
        var $89=$nextTokPtr_addr; //@line 697 "xmltok_impl.c"
        var $90=_normal_scanComment($87, $86, $88, $89); //@line 697 "xmltok_impl.c"
        $0=$90; //@line 697 "xmltok_impl.c"
        __label__ = 104; break; //@line 697 "xmltok_impl.c"
      case 24: // $bb23
        var $91=$ptr_addr; //@line 699 "xmltok_impl.c"
        var $92=$91+1; //@line 699 "xmltok_impl.c"
        var $93=$enc_addr; //@line 699 "xmltok_impl.c"
        var $94=$end_addr; //@line 699 "xmltok_impl.c"
        var $95=$nextTokPtr_addr; //@line 699 "xmltok_impl.c"
        var $96=_normal_scanCdataSection($93, $92, $94, $95); //@line 699 "xmltok_impl.c"
        $0=$96; //@line 699 "xmltok_impl.c"
        __label__ = 104; break; //@line 699 "xmltok_impl.c"
      case 25: // $bb24
        var $97=$nextTokPtr_addr; //@line 702 "xmltok_impl.c"
        var $98=$ptr_addr; //@line 702 "xmltok_impl.c"
        HEAP[$97]=$98; //@line 702 "xmltok_impl.c"
        $0=0; //@line 703 "xmltok_impl.c"
        __label__ = 104; break; //@line 703 "xmltok_impl.c"
      case 26: // $bb25
        var $99=$ptr_addr; //@line 705 "xmltok_impl.c"
        var $100=$99+1; //@line 705 "xmltok_impl.c"
        var $101=$enc_addr; //@line 705 "xmltok_impl.c"
        var $102=$end_addr; //@line 705 "xmltok_impl.c"
        var $103=$nextTokPtr_addr; //@line 705 "xmltok_impl.c"
        var $104=_normal_scanPi($101, $100, $102, $103); //@line 705 "xmltok_impl.c"
        $0=$104; //@line 705 "xmltok_impl.c"
        __label__ = 104; break; //@line 705 "xmltok_impl.c"
      case 27: // $bb26
        var $105=$ptr_addr; //@line 707 "xmltok_impl.c"
        var $106=$105+1; //@line 707 "xmltok_impl.c"
        var $107=$enc_addr; //@line 707 "xmltok_impl.c"
        var $108=$end_addr; //@line 707 "xmltok_impl.c"
        var $109=$nextTokPtr_addr; //@line 707 "xmltok_impl.c"
        var $110=_normal_scanEndTag($107, $106, $108, $109); //@line 707 "xmltok_impl.c"
        $0=$110; //@line 707 "xmltok_impl.c"
        __label__ = 104; break; //@line 707 "xmltok_impl.c"
      case 28: // $bb27
        var $111=$nextTokPtr_addr; //@line 709 "xmltok_impl.c"
        var $112=$ptr_addr; //@line 709 "xmltok_impl.c"
        HEAP[$111]=$112; //@line 709 "xmltok_impl.c"
        $0=0; //@line 710 "xmltok_impl.c"
        __label__ = 104; break; //@line 710 "xmltok_impl.c"
      case 29: // $bb28
        $hadColon=0; //@line 713 "xmltok_impl.c"
        __label__ = 102; break; //@line 713 "xmltok_impl.c"
      case 30: // $bb29
        var $113=$enc_addr; //@line 717 "xmltok_impl.c"
        var $114=$113; //@line 717 "xmltok_impl.c"
        var $115=$ptr_addr; //@line 717 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 717 "xmltok_impl.c"
        var $117=($116); //@line 717 "xmltok_impl.c"
        var $118=$114+76; //@line 717 "xmltok_impl.c"
        var $119=$118+$117; //@line 717 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 717 "xmltok_impl.c"
        var $121=($120); //@line 717 "xmltok_impl.c"
        if ($121 == 5) {
          __label__ = 33; break;
        }
        else if ($121 == 6) {
          __label__ = 38; break;
        }
        else if ($121 == 7) {
          __label__ = 43; break;
        }
        else if ($121 == 9) {
          __label__ = 71; break;
        }
        else if ($121 == 10) {
          __label__ = 71; break;
        }
        else if ($121 == 11) {
          __label__ = 95; break;
        }
        else if ($121 == 17) {
          __label__ = 96; break;
        }
        else if ($121 == 21) {
          __label__ = 71; break;
        }
        else if ($121 == 22) {
          __label__ = 32; break;
        }
        else if ($121 == 23) {
          __label__ = 48; break;
        }
        else if ($121 == 24) {
          __label__ = 32; break;
        }
        else if ($121 == 25) {
          __label__ = 32; break;
        }
        else if ($121 == 26) {
          __label__ = 32; break;
        }
        else if ($121 == 27) {
          __label__ = 32; break;
        }
        else if ($121 == 29) {
          __label__ = 31; break;
        }
        else {
        __label__ = 101; break;
        }
        
      case 31: // $bb30
        var $122=$nextTokPtr_addr; //@line 718 "xmltok_impl.c"
        var $123=$ptr_addr; //@line 718 "xmltok_impl.c"
        HEAP[$122]=$123; //@line 718 "xmltok_impl.c"
        $0=0; //@line 718 "xmltok_impl.c"
        __label__ = 104; break; //@line 718 "xmltok_impl.c"
      case 32: // $bb31
        var $124=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $125=$124+1; //@line 718 "xmltok_impl.c"
        $ptr_addr=$125; //@line 718 "xmltok_impl.c"
        __label__ = 102; break; //@line 718 "xmltok_impl.c"
      case 33: // $bb32
        var $126=$end_addr; //@line 718 "xmltok_impl.c"
        var $127=($126); //@line 718 "xmltok_impl.c"
        var $128=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $129=($128); //@line 718 "xmltok_impl.c"
        var $130=($127) - ($129); //@line 718 "xmltok_impl.c"
        var $131=($130) <= 1; //@line 718 "xmltok_impl.c"
        if ($131) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 718 "xmltok_impl.c"
      case 34: // $bb33
        $0=-2; //@line 718 "xmltok_impl.c"
        __label__ = 104; break; //@line 718 "xmltok_impl.c"
      case 35: // $bb34
        var $132=$enc_addr; //@line 718 "xmltok_impl.c"
        var $133=$132; //@line 718 "xmltok_impl.c"
        var $134=$133+332; //@line 718 "xmltok_impl.c"
        var $135=HEAP[$134]; //@line 718 "xmltok_impl.c"
        var $136=$enc_addr; //@line 718 "xmltok_impl.c"
        var $137=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $138=FUNCTION_TABLE[$135]($136, $137); //@line 718 "xmltok_impl.c"
        var $139=($138)==0; //@line 718 "xmltok_impl.c"
        if ($139) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 718 "xmltok_impl.c"
      case 36: // $bb35
        var $140=$nextTokPtr_addr; //@line 718 "xmltok_impl.c"
        var $141=$ptr_addr; //@line 718 "xmltok_impl.c"
        HEAP[$140]=$141; //@line 718 "xmltok_impl.c"
        $0=0; //@line 718 "xmltok_impl.c"
        __label__ = 104; break; //@line 718 "xmltok_impl.c"
      case 37: // $bb36
        var $142=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $143=$142+2; //@line 718 "xmltok_impl.c"
        $ptr_addr=$143; //@line 718 "xmltok_impl.c"
        __label__ = 102; break; //@line 718 "xmltok_impl.c"
      case 38: // $bb37
        var $144=$end_addr; //@line 718 "xmltok_impl.c"
        var $145=($144); //@line 718 "xmltok_impl.c"
        var $146=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $147=($146); //@line 718 "xmltok_impl.c"
        var $148=($145) - ($147); //@line 718 "xmltok_impl.c"
        var $149=($148) <= 2; //@line 718 "xmltok_impl.c"
        if ($149) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 718 "xmltok_impl.c"
      case 39: // $bb38
        $0=-2; //@line 718 "xmltok_impl.c"
        __label__ = 104; break; //@line 718 "xmltok_impl.c"
      case 40: // $bb39
        var $150=$enc_addr; //@line 718 "xmltok_impl.c"
        var $151=$150; //@line 718 "xmltok_impl.c"
        var $152=$151+336; //@line 718 "xmltok_impl.c"
        var $153=HEAP[$152]; //@line 718 "xmltok_impl.c"
        var $154=$enc_addr; //@line 718 "xmltok_impl.c"
        var $155=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $156=FUNCTION_TABLE[$153]($154, $155); //@line 718 "xmltok_impl.c"
        var $157=($156)==0; //@line 718 "xmltok_impl.c"
        if ($157) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 718 "xmltok_impl.c"
      case 41: // $bb40
        var $158=$nextTokPtr_addr; //@line 718 "xmltok_impl.c"
        var $159=$ptr_addr; //@line 718 "xmltok_impl.c"
        HEAP[$158]=$159; //@line 718 "xmltok_impl.c"
        $0=0; //@line 718 "xmltok_impl.c"
        __label__ = 104; break; //@line 718 "xmltok_impl.c"
      case 42: // $bb41
        var $160=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $161=$160+3; //@line 718 "xmltok_impl.c"
        $ptr_addr=$161; //@line 718 "xmltok_impl.c"
        __label__ = 102; break; //@line 718 "xmltok_impl.c"
      case 43: // $bb42
        var $162=$end_addr; //@line 718 "xmltok_impl.c"
        var $163=($162); //@line 718 "xmltok_impl.c"
        var $164=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $165=($164); //@line 718 "xmltok_impl.c"
        var $166=($163) - ($165); //@line 718 "xmltok_impl.c"
        var $167=($166) <= 3; //@line 718 "xmltok_impl.c"
        if ($167) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 718 "xmltok_impl.c"
      case 44: // $bb43
        $0=-2; //@line 718 "xmltok_impl.c"
        __label__ = 104; break; //@line 718 "xmltok_impl.c"
      case 45: // $bb44
        var $168=$enc_addr; //@line 718 "xmltok_impl.c"
        var $169=$168; //@line 718 "xmltok_impl.c"
        var $170=$169+340; //@line 718 "xmltok_impl.c"
        var $171=HEAP[$170]; //@line 718 "xmltok_impl.c"
        var $172=$enc_addr; //@line 718 "xmltok_impl.c"
        var $173=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $174=FUNCTION_TABLE[$171]($172, $173); //@line 718 "xmltok_impl.c"
        var $175=($174)==0; //@line 718 "xmltok_impl.c"
        if ($175) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 718 "xmltok_impl.c"
      case 46: // $bb45
        var $176=$nextTokPtr_addr; //@line 718 "xmltok_impl.c"
        var $177=$ptr_addr; //@line 718 "xmltok_impl.c"
        HEAP[$176]=$177; //@line 718 "xmltok_impl.c"
        $0=0; //@line 718 "xmltok_impl.c"
        __label__ = 104; break; //@line 718 "xmltok_impl.c"
      case 47: // $bb46
        var $178=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $179=$178+4; //@line 718 "xmltok_impl.c"
        $ptr_addr=$179; //@line 718 "xmltok_impl.c"
        __label__ = 102; break; //@line 718 "xmltok_impl.c"
      case 48: // $bb47
        var $180=$hadColon; //@line 721 "xmltok_impl.c"
        var $181=($180)!=0; //@line 721 "xmltok_impl.c"
        if ($181) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 721 "xmltok_impl.c"
      case 49: // $bb48
        var $182=$nextTokPtr_addr; //@line 722 "xmltok_impl.c"
        var $183=$ptr_addr; //@line 722 "xmltok_impl.c"
        HEAP[$182]=$183; //@line 722 "xmltok_impl.c"
        $0=0; //@line 723 "xmltok_impl.c"
        __label__ = 104; break; //@line 723 "xmltok_impl.c"
      case 50: // $bb49
        $hadColon=1; //@line 725 "xmltok_impl.c"
        var $184=$ptr_addr; //@line 726 "xmltok_impl.c"
        var $185=$184+1; //@line 726 "xmltok_impl.c"
        $ptr_addr=$185; //@line 726 "xmltok_impl.c"
        var $186=$ptr_addr; //@line 727 "xmltok_impl.c"
        var $187=$end_addr; //@line 727 "xmltok_impl.c"
        var $188=($186)==($187); //@line 727 "xmltok_impl.c"
        if ($188) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 727 "xmltok_impl.c"
      case 51: // $bb50
        $0=-1; //@line 728 "xmltok_impl.c"
        __label__ = 104; break; //@line 728 "xmltok_impl.c"
      case 52: // $bb51
        var $189=$enc_addr; //@line 729 "xmltok_impl.c"
        var $190=$189; //@line 729 "xmltok_impl.c"
        var $191=$ptr_addr; //@line 729 "xmltok_impl.c"
        var $192=HEAP[$191]; //@line 729 "xmltok_impl.c"
        var $193=($192); //@line 729 "xmltok_impl.c"
        var $194=$190+76; //@line 729 "xmltok_impl.c"
        var $195=$194+$193; //@line 729 "xmltok_impl.c"
        var $196=HEAP[$195]; //@line 729 "xmltok_impl.c"
        var $197=($196); //@line 729 "xmltok_impl.c"
        if ($197 == 5) {
          __label__ = 55; break;
        }
        else if ($197 == 6) {
          __label__ = 60; break;
        }
        else if ($197 == 7) {
          __label__ = 65; break;
        }
        else if ($197 == 22) {
          __label__ = 54; break;
        }
        else if ($197 == 24) {
          __label__ = 54; break;
        }
        else if ($197 == 29) {
          __label__ = 53; break;
        }
        else {
        __label__ = 70; break;
        }
        
      case 53: // $bb52
        var $198=$nextTokPtr_addr; //@line 730 "xmltok_impl.c"
        var $199=$ptr_addr; //@line 730 "xmltok_impl.c"
        HEAP[$198]=$199; //@line 730 "xmltok_impl.c"
        $0=0; //@line 730 "xmltok_impl.c"
        __label__ = 104; break; //@line 730 "xmltok_impl.c"
      case 54: // $bb53
        var $200=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $201=$200+1; //@line 730 "xmltok_impl.c"
        $ptr_addr=$201; //@line 730 "xmltok_impl.c"
        __label__ = 102; break; //@line 730 "xmltok_impl.c"
      case 55: // $bb54
        var $202=$end_addr; //@line 730 "xmltok_impl.c"
        var $203=($202); //@line 730 "xmltok_impl.c"
        var $204=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $205=($204); //@line 730 "xmltok_impl.c"
        var $206=($203) - ($205); //@line 730 "xmltok_impl.c"
        var $207=($206) <= 1; //@line 730 "xmltok_impl.c"
        if ($207) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 730 "xmltok_impl.c"
      case 56: // $bb55
        $0=-2; //@line 730 "xmltok_impl.c"
        __label__ = 104; break; //@line 730 "xmltok_impl.c"
      case 57: // $bb56
        var $208=$enc_addr; //@line 730 "xmltok_impl.c"
        var $209=$208; //@line 730 "xmltok_impl.c"
        var $210=$209+344; //@line 730 "xmltok_impl.c"
        var $211=HEAP[$210]; //@line 730 "xmltok_impl.c"
        var $212=$enc_addr; //@line 730 "xmltok_impl.c"
        var $213=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $214=FUNCTION_TABLE[$211]($212, $213); //@line 730 "xmltok_impl.c"
        var $215=($214)==0; //@line 730 "xmltok_impl.c"
        if ($215) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 730 "xmltok_impl.c"
      case 58: // $bb57
        var $216=$nextTokPtr_addr; //@line 730 "xmltok_impl.c"
        var $217=$ptr_addr; //@line 730 "xmltok_impl.c"
        HEAP[$216]=$217; //@line 730 "xmltok_impl.c"
        $0=0; //@line 730 "xmltok_impl.c"
        __label__ = 104; break; //@line 730 "xmltok_impl.c"
      case 59: // $bb58
        var $218=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $219=$218+2; //@line 730 "xmltok_impl.c"
        $ptr_addr=$219; //@line 730 "xmltok_impl.c"
        __label__ = 102; break; //@line 730 "xmltok_impl.c"
      case 60: // $bb59
        var $220=$end_addr; //@line 730 "xmltok_impl.c"
        var $221=($220); //@line 730 "xmltok_impl.c"
        var $222=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $223=($222); //@line 730 "xmltok_impl.c"
        var $224=($221) - ($223); //@line 730 "xmltok_impl.c"
        var $225=($224) <= 2; //@line 730 "xmltok_impl.c"
        if ($225) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 730 "xmltok_impl.c"
      case 61: // $bb60
        $0=-2; //@line 730 "xmltok_impl.c"
        __label__ = 104; break; //@line 730 "xmltok_impl.c"
      case 62: // $bb61
        var $226=$enc_addr; //@line 730 "xmltok_impl.c"
        var $227=$226; //@line 730 "xmltok_impl.c"
        var $228=$227+348; //@line 730 "xmltok_impl.c"
        var $229=HEAP[$228]; //@line 730 "xmltok_impl.c"
        var $230=$enc_addr; //@line 730 "xmltok_impl.c"
        var $231=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $232=FUNCTION_TABLE[$229]($230, $231); //@line 730 "xmltok_impl.c"
        var $233=($232)==0; //@line 730 "xmltok_impl.c"
        if ($233) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 730 "xmltok_impl.c"
      case 63: // $bb62
        var $234=$nextTokPtr_addr; //@line 730 "xmltok_impl.c"
        var $235=$ptr_addr; //@line 730 "xmltok_impl.c"
        HEAP[$234]=$235; //@line 730 "xmltok_impl.c"
        $0=0; //@line 730 "xmltok_impl.c"
        __label__ = 104; break; //@line 730 "xmltok_impl.c"
      case 64: // $bb63
        var $236=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $237=$236+3; //@line 730 "xmltok_impl.c"
        $ptr_addr=$237; //@line 730 "xmltok_impl.c"
        __label__ = 102; break; //@line 730 "xmltok_impl.c"
      case 65: // $bb64
        var $238=$end_addr; //@line 730 "xmltok_impl.c"
        var $239=($238); //@line 730 "xmltok_impl.c"
        var $240=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $241=($240); //@line 730 "xmltok_impl.c"
        var $242=($239) - ($241); //@line 730 "xmltok_impl.c"
        var $243=($242) <= 3; //@line 730 "xmltok_impl.c"
        if ($243) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 730 "xmltok_impl.c"
      case 66: // $bb65
        $0=-2; //@line 730 "xmltok_impl.c"
        __label__ = 104; break; //@line 730 "xmltok_impl.c"
      case 67: // $bb66
        var $244=$enc_addr; //@line 730 "xmltok_impl.c"
        var $245=$244; //@line 730 "xmltok_impl.c"
        var $246=$245+352; //@line 730 "xmltok_impl.c"
        var $247=HEAP[$246]; //@line 730 "xmltok_impl.c"
        var $248=$enc_addr; //@line 730 "xmltok_impl.c"
        var $249=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $250=FUNCTION_TABLE[$247]($248, $249); //@line 730 "xmltok_impl.c"
        var $251=($250)==0; //@line 730 "xmltok_impl.c"
        if ($251) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 730 "xmltok_impl.c"
      case 68: // $bb67
        var $252=$nextTokPtr_addr; //@line 730 "xmltok_impl.c"
        var $253=$ptr_addr; //@line 730 "xmltok_impl.c"
        HEAP[$252]=$253; //@line 730 "xmltok_impl.c"
        $0=0; //@line 730 "xmltok_impl.c"
        __label__ = 104; break; //@line 730 "xmltok_impl.c"
      case 69: // $bb68
        var $254=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $255=$254+4; //@line 730 "xmltok_impl.c"
        $ptr_addr=$255; //@line 730 "xmltok_impl.c"
        __label__ = 102; break; //@line 730 "xmltok_impl.c"
      case 70: // $bb69
        var $256=$nextTokPtr_addr; //@line 732 "xmltok_impl.c"
        var $257=$ptr_addr; //@line 732 "xmltok_impl.c"
        HEAP[$256]=$257; //@line 732 "xmltok_impl.c"
        $0=0; //@line 733 "xmltok_impl.c"
        __label__ = 104; break; //@line 733 "xmltok_impl.c"
      case 71: // $bb71
        var $258=$ptr_addr; //@line 739 "xmltok_impl.c"
        var $259=$258+1; //@line 739 "xmltok_impl.c"
        $ptr_addr=$259; //@line 739 "xmltok_impl.c"
        __label__ = 93; break; //@line 739 "xmltok_impl.c"
      case 72: // $bb72
        var $260=$enc_addr; //@line 741 "xmltok_impl.c"
        var $261=$260; //@line 741 "xmltok_impl.c"
        var $262=$ptr_addr; //@line 741 "xmltok_impl.c"
        var $263=HEAP[$262]; //@line 741 "xmltok_impl.c"
        var $264=($263); //@line 741 "xmltok_impl.c"
        var $265=$261+76; //@line 741 "xmltok_impl.c"
        var $266=$265+$264; //@line 741 "xmltok_impl.c"
        var $267=HEAP[$266]; //@line 741 "xmltok_impl.c"
        var $268=($267); //@line 741 "xmltok_impl.c"
        if ($268 == 5) {
          __label__ = 75; break;
        }
        else if ($268 == 6) {
          __label__ = 80; break;
        }
        else if ($268 == 7) {
          __label__ = 85; break;
        }
        else if ($268 == 9) {
          __label__ = 90; break;
        }
        else if ($268 == 10) {
          __label__ = 90; break;
        }
        else if ($268 == 11) {
          __label__ = 95; break;
        }
        else if ($268 == 17) {
          __label__ = 96; break;
        }
        else if ($268 == 21) {
          __label__ = 90; break;
        }
        else if ($268 == 22) {
          __label__ = 74; break;
        }
        else if ($268 == 24) {
          __label__ = 74; break;
        }
        else if ($268 == 29) {
          __label__ = 73; break;
        }
        else {
        __label__ = 91; break;
        }
        
      case 73: // $bb73
        var $269=$nextTokPtr_addr; //@line 742 "xmltok_impl.c"
        var $270=$ptr_addr; //@line 742 "xmltok_impl.c"
        HEAP[$269]=$270; //@line 742 "xmltok_impl.c"
        $0=0; //@line 742 "xmltok_impl.c"
        __label__ = 104; break; //@line 742 "xmltok_impl.c"
      case 74: // $bb74
        var $271=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $272=$271+1; //@line 742 "xmltok_impl.c"
        $ptr_addr=$272; //@line 742 "xmltok_impl.c"
        __label__ = 92; break; //@line 742 "xmltok_impl.c"
      case 75: // $bb75
        var $273=$end_addr; //@line 742 "xmltok_impl.c"
        var $274=($273); //@line 742 "xmltok_impl.c"
        var $275=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $276=($275); //@line 742 "xmltok_impl.c"
        var $277=($274) - ($276); //@line 742 "xmltok_impl.c"
        var $278=($277) <= 1; //@line 742 "xmltok_impl.c"
        if ($278) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 742 "xmltok_impl.c"
      case 76: // $bb76
        $0=-2; //@line 742 "xmltok_impl.c"
        __label__ = 104; break; //@line 742 "xmltok_impl.c"
      case 77: // $bb77
        var $279=$enc_addr; //@line 742 "xmltok_impl.c"
        var $280=$279; //@line 742 "xmltok_impl.c"
        var $281=$280+344; //@line 742 "xmltok_impl.c"
        var $282=HEAP[$281]; //@line 742 "xmltok_impl.c"
        var $283=$enc_addr; //@line 742 "xmltok_impl.c"
        var $284=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $285=FUNCTION_TABLE[$282]($283, $284); //@line 742 "xmltok_impl.c"
        var $286=($285)==0; //@line 742 "xmltok_impl.c"
        if ($286) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 742 "xmltok_impl.c"
      case 78: // $bb78
        var $287=$nextTokPtr_addr; //@line 742 "xmltok_impl.c"
        var $288=$ptr_addr; //@line 742 "xmltok_impl.c"
        HEAP[$287]=$288; //@line 742 "xmltok_impl.c"
        $0=0; //@line 742 "xmltok_impl.c"
        __label__ = 104; break; //@line 742 "xmltok_impl.c"
      case 79: // $bb79
        var $289=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $290=$289+2; //@line 742 "xmltok_impl.c"
        $ptr_addr=$290; //@line 742 "xmltok_impl.c"
        __label__ = 92; break; //@line 742 "xmltok_impl.c"
      case 80: // $bb80
        var $291=$end_addr; //@line 742 "xmltok_impl.c"
        var $292=($291); //@line 742 "xmltok_impl.c"
        var $293=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $294=($293); //@line 742 "xmltok_impl.c"
        var $295=($292) - ($294); //@line 742 "xmltok_impl.c"
        var $296=($295) <= 2; //@line 742 "xmltok_impl.c"
        if ($296) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 742 "xmltok_impl.c"
      case 81: // $bb81
        $0=-2; //@line 742 "xmltok_impl.c"
        __label__ = 104; break; //@line 742 "xmltok_impl.c"
      case 82: // $bb82
        var $297=$enc_addr; //@line 742 "xmltok_impl.c"
        var $298=$297; //@line 742 "xmltok_impl.c"
        var $299=$298+348; //@line 742 "xmltok_impl.c"
        var $300=HEAP[$299]; //@line 742 "xmltok_impl.c"
        var $301=$enc_addr; //@line 742 "xmltok_impl.c"
        var $302=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $303=FUNCTION_TABLE[$300]($301, $302); //@line 742 "xmltok_impl.c"
        var $304=($303)==0; //@line 742 "xmltok_impl.c"
        if ($304) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 742 "xmltok_impl.c"
      case 83: // $bb83
        var $305=$nextTokPtr_addr; //@line 742 "xmltok_impl.c"
        var $306=$ptr_addr; //@line 742 "xmltok_impl.c"
        HEAP[$305]=$306; //@line 742 "xmltok_impl.c"
        $0=0; //@line 742 "xmltok_impl.c"
        __label__ = 104; break; //@line 742 "xmltok_impl.c"
      case 84: // $bb84
        var $307=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $308=$307+3; //@line 742 "xmltok_impl.c"
        $ptr_addr=$308; //@line 742 "xmltok_impl.c"
        __label__ = 92; break; //@line 742 "xmltok_impl.c"
      case 85: // $bb85
        var $309=$end_addr; //@line 742 "xmltok_impl.c"
        var $310=($309); //@line 742 "xmltok_impl.c"
        var $311=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $312=($311); //@line 742 "xmltok_impl.c"
        var $313=($310) - ($312); //@line 742 "xmltok_impl.c"
        var $314=($313) <= 3; //@line 742 "xmltok_impl.c"
        if ($314) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 742 "xmltok_impl.c"
      case 86: // $bb86
        $0=-2; //@line 742 "xmltok_impl.c"
        __label__ = 104; break; //@line 742 "xmltok_impl.c"
      case 87: // $bb87
        var $315=$enc_addr; //@line 742 "xmltok_impl.c"
        var $316=$315; //@line 742 "xmltok_impl.c"
        var $317=$316+352; //@line 742 "xmltok_impl.c"
        var $318=HEAP[$317]; //@line 742 "xmltok_impl.c"
        var $319=$enc_addr; //@line 742 "xmltok_impl.c"
        var $320=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $321=FUNCTION_TABLE[$318]($319, $320); //@line 742 "xmltok_impl.c"
        var $322=($321)==0; //@line 742 "xmltok_impl.c"
        if ($322) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 742 "xmltok_impl.c"
      case 88: // $bb88
        var $323=$nextTokPtr_addr; //@line 742 "xmltok_impl.c"
        var $324=$ptr_addr; //@line 742 "xmltok_impl.c"
        HEAP[$323]=$324; //@line 742 "xmltok_impl.c"
        $0=0; //@line 742 "xmltok_impl.c"
        __label__ = 104; break; //@line 742 "xmltok_impl.c"
      case 89: // $bb89
        var $325=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $326=$325+4; //@line 742 "xmltok_impl.c"
        $ptr_addr=$326; //@line 742 "xmltok_impl.c"
        __label__ = 92; break; //@line 742 "xmltok_impl.c"
      case 90: // $bb92
        var $327=$ptr_addr; //@line 748 "xmltok_impl.c"
        var $328=$327+1; //@line 748 "xmltok_impl.c"
        $ptr_addr=$328; //@line 748 "xmltok_impl.c"
        __label__ = 93; break; //@line 748 "xmltok_impl.c"
      case 91: // $bb93
        var $329=$nextTokPtr_addr; //@line 751 "xmltok_impl.c"
        var $330=$ptr_addr; //@line 751 "xmltok_impl.c"
        HEAP[$329]=$330; //@line 751 "xmltok_impl.c"
        $0=0; //@line 752 "xmltok_impl.c"
        __label__ = 104; break; //@line 752 "xmltok_impl.c"
      case 92: // $bb94
        var $331=$enc_addr; //@line 754 "xmltok_impl.c"
        var $332=$ptr_addr; //@line 754 "xmltok_impl.c"
        var $333=$end_addr; //@line 754 "xmltok_impl.c"
        var $334=$nextTokPtr_addr; //@line 754 "xmltok_impl.c"
        var $335=_normal_scanAtts($331, $332, $333, $334); //@line 754 "xmltok_impl.c"
        $0=$335; //@line 754 "xmltok_impl.c"
        __label__ = 104; break; //@line 754 "xmltok_impl.c"
      case 93: // $bb95
        var $336=$ptr_addr; //@line 740 "xmltok_impl.c"
        var $337=$end_addr; //@line 740 "xmltok_impl.c"
        var $338=($336)!=($337); //@line 740 "xmltok_impl.c"
        if ($338) { __label__ = 72; break; } else { __label__ = 94; break; } //@line 740 "xmltok_impl.c"
      case 94: // $bb96
        $0=-1; //@line 756 "xmltok_impl.c"
        __label__ = 104; break; //@line 756 "xmltok_impl.c"
      case 95: // $gt
        var $339=$ptr_addr; //@line 760 "xmltok_impl.c"
        var $340=$339+1; //@line 760 "xmltok_impl.c"
        var $341=$nextTokPtr_addr; //@line 760 "xmltok_impl.c"
        HEAP[$341]=$340; //@line 760 "xmltok_impl.c"
        $0=2; //@line 761 "xmltok_impl.c"
        __label__ = 104; break; //@line 761 "xmltok_impl.c"
      case 96: // $sol
        var $342=$ptr_addr; //@line 764 "xmltok_impl.c"
        var $343=$342+1; //@line 764 "xmltok_impl.c"
        $ptr_addr=$343; //@line 764 "xmltok_impl.c"
        var $344=$ptr_addr; //@line 765 "xmltok_impl.c"
        var $345=$end_addr; //@line 765 "xmltok_impl.c"
        var $346=($344)==($345); //@line 765 "xmltok_impl.c"
        if ($346) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 765 "xmltok_impl.c"
      case 97: // $bb97
        $0=-1; //@line 766 "xmltok_impl.c"
        __label__ = 104; break; //@line 766 "xmltok_impl.c"
      case 98: // $bb98
        var $347=$ptr_addr; //@line 767 "xmltok_impl.c"
        var $348=HEAP[$347]; //@line 767 "xmltok_impl.c"
        var $349=($348)!=62; //@line 767 "xmltok_impl.c"
        if ($349) { __label__ = 99; break; } else { __label__ = 100; break; } //@line 767 "xmltok_impl.c"
      case 99: // $bb99
        var $350=$nextTokPtr_addr; //@line 768 "xmltok_impl.c"
        var $351=$ptr_addr; //@line 768 "xmltok_impl.c"
        HEAP[$350]=$351; //@line 768 "xmltok_impl.c"
        $0=0; //@line 769 "xmltok_impl.c"
        __label__ = 104; break; //@line 769 "xmltok_impl.c"
      case 100: // $bb100
        var $352=$ptr_addr; //@line 771 "xmltok_impl.c"
        var $353=$352+1; //@line 771 "xmltok_impl.c"
        var $354=$nextTokPtr_addr; //@line 771 "xmltok_impl.c"
        HEAP[$354]=$353; //@line 771 "xmltok_impl.c"
        $0=4; //@line 772 "xmltok_impl.c"
        __label__ = 104; break; //@line 772 "xmltok_impl.c"
      case 101: // $bb101
        var $355=$nextTokPtr_addr; //@line 774 "xmltok_impl.c"
        var $356=$ptr_addr; //@line 774 "xmltok_impl.c"
        HEAP[$355]=$356; //@line 774 "xmltok_impl.c"
        $0=0; //@line 775 "xmltok_impl.c"
        __label__ = 104; break; //@line 775 "xmltok_impl.c"
      case 102: // $bb102
        var $357=$ptr_addr; //@line 716 "xmltok_impl.c"
        var $358=$end_addr; //@line 716 "xmltok_impl.c"
        var $359=($357)!=($358); //@line 716 "xmltok_impl.c"
        if ($359) { __label__ = 30; break; } else { __label__ = 103; break; } //@line 716 "xmltok_impl.c"
      case 103: // $bb103
        $0=-1; //@line 778 "xmltok_impl.c"
        __label__ = 104; break; //@line 778 "xmltok_impl.c"
      case 104: // $bb104
        var $360=$0; //@line 689 "xmltok_impl.c"
        $retval=$360; //@line 689 "xmltok_impl.c"
        var $retval105=$retval; //@line 689 "xmltok_impl.c"
        ;
        return $retval105; //@line 689 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_contentTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 785 "xmltok_impl.c"
        var $2=$end_addr; //@line 785 "xmltok_impl.c"
        var $3=($1)==($2); //@line 785 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 785 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 786 "xmltok_impl.c"
        __label__ = 60; break; //@line 786 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$enc_addr; //@line 796 "xmltok_impl.c"
        var $5=$4; //@line 796 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 796 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 796 "xmltok_impl.c"
        var $8=($7); //@line 796 "xmltok_impl.c"
        var $9=$5+76; //@line 796 "xmltok_impl.c"
        var $10=$9+$8; //@line 796 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 796 "xmltok_impl.c"
        var $12=($11); //@line 796 "xmltok_impl.c"
        if ($12 == 0) {
          __label__ = 34; break;
        }
        else if ($12 == 1) {
          __label__ = 34; break;
        }
        else if ($12 == 2) {
          __label__ = 3; break;
        }
        else if ($12 == 3) {
          __label__ = 4; break;
        }
        else if ($12 == 4) {
          __label__ = 11; break;
        }
        else if ($12 == 5) {
          __label__ = 19; break;
        }
        else if ($12 == 6) {
          __label__ = 24; break;
        }
        else if ($12 == 7) {
          __label__ = 29; break;
        }
        else if ($12 == 8) {
          __label__ = 34; break;
        }
        else if ($12 == 9) {
          __label__ = 5; break;
        }
        else if ($12 == 10) {
          __label__ = 10; break;
        }
        else {
        __label__ = 35; break;
        }
        
      case 3: // $bb2
        var $13=$ptr_addr; //@line 798 "xmltok_impl.c"
        var $14=$13+1; //@line 798 "xmltok_impl.c"
        var $15=$enc_addr; //@line 798 "xmltok_impl.c"
        var $16=$end_addr; //@line 798 "xmltok_impl.c"
        var $17=$nextTokPtr_addr; //@line 798 "xmltok_impl.c"
        var $18=_normal_scanLt($15, $14, $16, $17); //@line 798 "xmltok_impl.c"
        $0=$18; //@line 798 "xmltok_impl.c"
        __label__ = 60; break; //@line 798 "xmltok_impl.c"
      case 4: // $bb3
        var $19=$ptr_addr; //@line 800 "xmltok_impl.c"
        var $20=$19+1; //@line 800 "xmltok_impl.c"
        var $21=$enc_addr; //@line 800 "xmltok_impl.c"
        var $22=$end_addr; //@line 800 "xmltok_impl.c"
        var $23=$nextTokPtr_addr; //@line 800 "xmltok_impl.c"
        var $24=_normal_scanRef($21, $20, $22, $23); //@line 800 "xmltok_impl.c"
        $0=$24; //@line 800 "xmltok_impl.c"
        __label__ = 60; break; //@line 800 "xmltok_impl.c"
      case 5: // $bb4
        var $25=$ptr_addr; //@line 802 "xmltok_impl.c"
        var $26=$25+1; //@line 802 "xmltok_impl.c"
        $ptr_addr=$26; //@line 802 "xmltok_impl.c"
        var $27=$ptr_addr; //@line 803 "xmltok_impl.c"
        var $28=$end_addr; //@line 803 "xmltok_impl.c"
        var $29=($27)==($28); //@line 803 "xmltok_impl.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 803 "xmltok_impl.c"
      case 6: // $bb5
        $0=-3; //@line 804 "xmltok_impl.c"
        __label__ = 60; break; //@line 804 "xmltok_impl.c"
      case 7: // $bb6
        var $30=$enc_addr; //@line 805 "xmltok_impl.c"
        var $31=$30; //@line 805 "xmltok_impl.c"
        var $32=$ptr_addr; //@line 805 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 805 "xmltok_impl.c"
        var $34=($33); //@line 805 "xmltok_impl.c"
        var $35=$31+76; //@line 805 "xmltok_impl.c"
        var $36=$35+$34; //@line 805 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 805 "xmltok_impl.c"
        var $38=($37)==10; //@line 805 "xmltok_impl.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 805 "xmltok_impl.c"
      case 8: // $bb7
        var $39=$ptr_addr; //@line 806 "xmltok_impl.c"
        var $40=$39+1; //@line 806 "xmltok_impl.c"
        $ptr_addr=$40; //@line 806 "xmltok_impl.c"
        __label__ = 9; break; //@line 806 "xmltok_impl.c"
      case 9: // $bb8
        var $41=$nextTokPtr_addr; //@line 807 "xmltok_impl.c"
        var $42=$ptr_addr; //@line 807 "xmltok_impl.c"
        HEAP[$41]=$42; //@line 807 "xmltok_impl.c"
        $0=7; //@line 808 "xmltok_impl.c"
        __label__ = 60; break; //@line 808 "xmltok_impl.c"
      case 10: // $bb9
        var $43=$ptr_addr; //@line 810 "xmltok_impl.c"
        var $44=$43+1; //@line 810 "xmltok_impl.c"
        var $45=$nextTokPtr_addr; //@line 810 "xmltok_impl.c"
        HEAP[$45]=$44; //@line 810 "xmltok_impl.c"
        $0=7; //@line 811 "xmltok_impl.c"
        __label__ = 60; break; //@line 811 "xmltok_impl.c"
      case 11: // $bb10
        var $46=$ptr_addr; //@line 813 "xmltok_impl.c"
        var $47=$46+1; //@line 813 "xmltok_impl.c"
        $ptr_addr=$47; //@line 813 "xmltok_impl.c"
        var $48=$ptr_addr; //@line 814 "xmltok_impl.c"
        var $49=$end_addr; //@line 814 "xmltok_impl.c"
        var $50=($48)==($49); //@line 814 "xmltok_impl.c"
        if ($50) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 814 "xmltok_impl.c"
      case 12: // $bb11
        $0=-5; //@line 815 "xmltok_impl.c"
        __label__ = 60; break; //@line 815 "xmltok_impl.c"
      case 13: // $bb12
        var $51=$ptr_addr; //@line 816 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 816 "xmltok_impl.c"
        var $53=($52)!=93; //@line 816 "xmltok_impl.c"
        if ($53) { __label__ = 58; break; } else { __label__ = 14; break; } //@line 816 "xmltok_impl.c"
      case 14: // $bb13
        var $54=$ptr_addr; //@line 818 "xmltok_impl.c"
        var $55=$54+1; //@line 818 "xmltok_impl.c"
        $ptr_addr=$55; //@line 818 "xmltok_impl.c"
        var $56=$ptr_addr; //@line 819 "xmltok_impl.c"
        var $57=$end_addr; //@line 819 "xmltok_impl.c"
        var $58=($56)==($57); //@line 819 "xmltok_impl.c"
        if ($58) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 819 "xmltok_impl.c"
      case 15: // $bb14
        $0=-5; //@line 820 "xmltok_impl.c"
        __label__ = 60; break; //@line 820 "xmltok_impl.c"
      case 16: // $bb15
        var $59=$ptr_addr; //@line 821 "xmltok_impl.c"
        var $60=HEAP[$59]; //@line 821 "xmltok_impl.c"
        var $61=($60)!=62; //@line 821 "xmltok_impl.c"
        if ($61) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 821 "xmltok_impl.c"
      case 17: // $bb16
        var $62=$ptr_addr; //@line 822 "xmltok_impl.c"
        var $63=$62+-1; //@line 822 "xmltok_impl.c"
        $ptr_addr=$63; //@line 822 "xmltok_impl.c"
        __label__ = 58; break; //@line 822 "xmltok_impl.c"
      case 18: // $bb17
        var $64=$nextTokPtr_addr; //@line 825 "xmltok_impl.c"
        var $65=$ptr_addr; //@line 825 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 825 "xmltok_impl.c"
        $0=0; //@line 826 "xmltok_impl.c"
        __label__ = 60; break; //@line 826 "xmltok_impl.c"
      case 19: // $bb18
        var $66=$end_addr; //@line 827 "xmltok_impl.c"
        var $67=($66); //@line 827 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $69=($68); //@line 827 "xmltok_impl.c"
        var $70=($67) - ($69); //@line 827 "xmltok_impl.c"
        var $71=($70) <= 1; //@line 827 "xmltok_impl.c"
        if ($71) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 827 "xmltok_impl.c"
      case 20: // $bb19
        $0=-2; //@line 827 "xmltok_impl.c"
        __label__ = 60; break; //@line 827 "xmltok_impl.c"
      case 21: // $bb20
        var $72=$enc_addr; //@line 827 "xmltok_impl.c"
        var $73=$72; //@line 827 "xmltok_impl.c"
        var $74=$73+356; //@line 827 "xmltok_impl.c"
        var $75=HEAP[$74]; //@line 827 "xmltok_impl.c"
        var $76=$enc_addr; //@line 827 "xmltok_impl.c"
        var $77=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $78=FUNCTION_TABLE[$75]($76, $77); //@line 827 "xmltok_impl.c"
        var $79=($78)!=0; //@line 827 "xmltok_impl.c"
        if ($79) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 827 "xmltok_impl.c"
      case 22: // $bb21
        var $80=$nextTokPtr_addr; //@line 827 "xmltok_impl.c"
        var $81=$ptr_addr; //@line 827 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 827 "xmltok_impl.c"
        $0=0; //@line 827 "xmltok_impl.c"
        __label__ = 60; break; //@line 827 "xmltok_impl.c"
      case 23: // $bb22
        var $82=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $83=$82+2; //@line 827 "xmltok_impl.c"
        $ptr_addr=$83; //@line 827 "xmltok_impl.c"
        __label__ = 58; break; //@line 827 "xmltok_impl.c"
      case 24: // $bb23
        var $84=$end_addr; //@line 827 "xmltok_impl.c"
        var $85=($84); //@line 827 "xmltok_impl.c"
        var $86=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $87=($86); //@line 827 "xmltok_impl.c"
        var $88=($85) - ($87); //@line 827 "xmltok_impl.c"
        var $89=($88) <= 2; //@line 827 "xmltok_impl.c"
        if ($89) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 827 "xmltok_impl.c"
      case 25: // $bb24
        $0=-2; //@line 827 "xmltok_impl.c"
        __label__ = 60; break; //@line 827 "xmltok_impl.c"
      case 26: // $bb25
        var $90=$enc_addr; //@line 827 "xmltok_impl.c"
        var $91=$90; //@line 827 "xmltok_impl.c"
        var $92=$91+360; //@line 827 "xmltok_impl.c"
        var $93=HEAP[$92]; //@line 827 "xmltok_impl.c"
        var $94=$enc_addr; //@line 827 "xmltok_impl.c"
        var $95=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $96=FUNCTION_TABLE[$93]($94, $95); //@line 827 "xmltok_impl.c"
        var $97=($96)!=0; //@line 827 "xmltok_impl.c"
        if ($97) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 827 "xmltok_impl.c"
      case 27: // $bb26
        var $98=$nextTokPtr_addr; //@line 827 "xmltok_impl.c"
        var $99=$ptr_addr; //@line 827 "xmltok_impl.c"
        HEAP[$98]=$99; //@line 827 "xmltok_impl.c"
        $0=0; //@line 827 "xmltok_impl.c"
        __label__ = 60; break; //@line 827 "xmltok_impl.c"
      case 28: // $bb27
        var $100=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $101=$100+3; //@line 827 "xmltok_impl.c"
        $ptr_addr=$101; //@line 827 "xmltok_impl.c"
        __label__ = 58; break; //@line 827 "xmltok_impl.c"
      case 29: // $bb28
        var $102=$end_addr; //@line 827 "xmltok_impl.c"
        var $103=($102); //@line 827 "xmltok_impl.c"
        var $104=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $105=($104); //@line 827 "xmltok_impl.c"
        var $106=($103) - ($105); //@line 827 "xmltok_impl.c"
        var $107=($106) <= 3; //@line 827 "xmltok_impl.c"
        if ($107) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 827 "xmltok_impl.c"
      case 30: // $bb29
        $0=-2; //@line 827 "xmltok_impl.c"
        __label__ = 60; break; //@line 827 "xmltok_impl.c"
      case 31: // $bb30
        var $108=$enc_addr; //@line 827 "xmltok_impl.c"
        var $109=$108; //@line 827 "xmltok_impl.c"
        var $110=$109+364; //@line 827 "xmltok_impl.c"
        var $111=HEAP[$110]; //@line 827 "xmltok_impl.c"
        var $112=$enc_addr; //@line 827 "xmltok_impl.c"
        var $113=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $114=FUNCTION_TABLE[$111]($112, $113); //@line 827 "xmltok_impl.c"
        var $115=($114)!=0; //@line 827 "xmltok_impl.c"
        if ($115) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 827 "xmltok_impl.c"
      case 32: // $bb31
        var $116=$nextTokPtr_addr; //@line 827 "xmltok_impl.c"
        var $117=$ptr_addr; //@line 827 "xmltok_impl.c"
        HEAP[$116]=$117; //@line 827 "xmltok_impl.c"
        $0=0; //@line 827 "xmltok_impl.c"
        __label__ = 60; break; //@line 827 "xmltok_impl.c"
      case 33: // $bb32
        var $118=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $119=$118+4; //@line 827 "xmltok_impl.c"
        $ptr_addr=$119; //@line 827 "xmltok_impl.c"
        __label__ = 58; break; //@line 827 "xmltok_impl.c"
      case 34: // $bb33
        var $120=$nextTokPtr_addr; //@line 827 "xmltok_impl.c"
        var $121=$ptr_addr; //@line 827 "xmltok_impl.c"
        HEAP[$120]=$121; //@line 827 "xmltok_impl.c"
        $0=0; //@line 827 "xmltok_impl.c"
        __label__ = 60; break; //@line 827 "xmltok_impl.c"
      case 35: // $bb34
        var $122=$ptr_addr; //@line 829 "xmltok_impl.c"
        var $123=$122+1; //@line 829 "xmltok_impl.c"
        $ptr_addr=$123; //@line 829 "xmltok_impl.c"
        __label__ = 58; break; //@line 829 "xmltok_impl.c"
      case 36: // $bb36
        var $124=$enc_addr; //@line 833 "xmltok_impl.c"
        var $125=$124; //@line 833 "xmltok_impl.c"
        var $126=$ptr_addr; //@line 833 "xmltok_impl.c"
        var $127=HEAP[$126]; //@line 833 "xmltok_impl.c"
        var $128=($127); //@line 833 "xmltok_impl.c"
        var $129=$125+76; //@line 833 "xmltok_impl.c"
        var $130=$129+$128; //@line 833 "xmltok_impl.c"
        var $131=HEAP[$130]; //@line 833 "xmltok_impl.c"
        var $132=($131); //@line 833 "xmltok_impl.c"
        if ($132 == 0) {
          __label__ = 56; break;
        }
        else if ($132 == 1) {
          __label__ = 56; break;
        }
        else if ($132 == 2) {
          __label__ = 56; break;
        }
        else if ($132 == 3) {
          __label__ = 56; break;
        }
        else if ($132 == 4) {
          __label__ = 49; break;
        }
        else if ($132 == 5) {
          __label__ = 37; break;
        }
        else if ($132 == 6) {
          __label__ = 41; break;
        }
        else if ($132 == 7) {
          __label__ = 45; break;
        }
        else if ($132 == 8) {
          __label__ = 56; break;
        }
        else if ($132 == 9) {
          __label__ = 56; break;
        }
        else if ($132 == 10) {
          __label__ = 56; break;
        }
        else {
        __label__ = 57; break;
        }
        
      case 37: // $bb37
        var $133=$end_addr; //@line 842 "xmltok_impl.c"
        var $134=($133); //@line 842 "xmltok_impl.c"
        var $135=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $136=($135); //@line 842 "xmltok_impl.c"
        var $137=($134) - ($136); //@line 842 "xmltok_impl.c"
        var $138=($137) <= 1; //@line 842 "xmltok_impl.c"
        if ($138) { __label__ = 39; break; } else { __label__ = 38; break; } //@line 842 "xmltok_impl.c"
      case 38: // $bb38
        var $139=$enc_addr; //@line 842 "xmltok_impl.c"
        var $140=$139; //@line 842 "xmltok_impl.c"
        var $141=$140+356; //@line 842 "xmltok_impl.c"
        var $142=HEAP[$141]; //@line 842 "xmltok_impl.c"
        var $143=$enc_addr; //@line 842 "xmltok_impl.c"
        var $144=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $145=FUNCTION_TABLE[$142]($143, $144); //@line 842 "xmltok_impl.c"
        var $146=($145)!=0; //@line 842 "xmltok_impl.c"
        if ($146) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 842 "xmltok_impl.c"
      case 39: // $bb39
        var $147=$nextTokPtr_addr; //@line 842 "xmltok_impl.c"
        var $148=$ptr_addr; //@line 842 "xmltok_impl.c"
        HEAP[$147]=$148; //@line 842 "xmltok_impl.c"
        $0=6; //@line 842 "xmltok_impl.c"
        __label__ = 60; break; //@line 842 "xmltok_impl.c"
      case 40: // $bb40
        var $149=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $150=$149+2; //@line 842 "xmltok_impl.c"
        $ptr_addr=$150; //@line 842 "xmltok_impl.c"
        __label__ = 58; break; //@line 842 "xmltok_impl.c"
      case 41: // $bb41
        var $151=$end_addr; //@line 842 "xmltok_impl.c"
        var $152=($151); //@line 842 "xmltok_impl.c"
        var $153=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $154=($153); //@line 842 "xmltok_impl.c"
        var $155=($152) - ($154); //@line 842 "xmltok_impl.c"
        var $156=($155) <= 2; //@line 842 "xmltok_impl.c"
        if ($156) { __label__ = 43; break; } else { __label__ = 42; break; } //@line 842 "xmltok_impl.c"
      case 42: // $bb42
        var $157=$enc_addr; //@line 842 "xmltok_impl.c"
        var $158=$157; //@line 842 "xmltok_impl.c"
        var $159=$158+360; //@line 842 "xmltok_impl.c"
        var $160=HEAP[$159]; //@line 842 "xmltok_impl.c"
        var $161=$enc_addr; //@line 842 "xmltok_impl.c"
        var $162=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $163=FUNCTION_TABLE[$160]($161, $162); //@line 842 "xmltok_impl.c"
        var $164=($163)!=0; //@line 842 "xmltok_impl.c"
        if ($164) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 842 "xmltok_impl.c"
      case 43: // $bb43
        var $165=$nextTokPtr_addr; //@line 842 "xmltok_impl.c"
        var $166=$ptr_addr; //@line 842 "xmltok_impl.c"
        HEAP[$165]=$166; //@line 842 "xmltok_impl.c"
        $0=6; //@line 842 "xmltok_impl.c"
        __label__ = 60; break; //@line 842 "xmltok_impl.c"
      case 44: // $bb44
        var $167=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $168=$167+3; //@line 842 "xmltok_impl.c"
        $ptr_addr=$168; //@line 842 "xmltok_impl.c"
        __label__ = 58; break; //@line 842 "xmltok_impl.c"
      case 45: // $bb45
        var $169=$end_addr; //@line 842 "xmltok_impl.c"
        var $170=($169); //@line 842 "xmltok_impl.c"
        var $171=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $172=($171); //@line 842 "xmltok_impl.c"
        var $173=($170) - ($172); //@line 842 "xmltok_impl.c"
        var $174=($173) <= 3; //@line 842 "xmltok_impl.c"
        if ($174) { __label__ = 47; break; } else { __label__ = 46; break; } //@line 842 "xmltok_impl.c"
      case 46: // $bb46
        var $175=$enc_addr; //@line 842 "xmltok_impl.c"
        var $176=$175; //@line 842 "xmltok_impl.c"
        var $177=$176+364; //@line 842 "xmltok_impl.c"
        var $178=HEAP[$177]; //@line 842 "xmltok_impl.c"
        var $179=$enc_addr; //@line 842 "xmltok_impl.c"
        var $180=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $181=FUNCTION_TABLE[$178]($179, $180); //@line 842 "xmltok_impl.c"
        var $182=($181)!=0; //@line 842 "xmltok_impl.c"
        if ($182) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 842 "xmltok_impl.c"
      case 47: // $bb47
        var $183=$nextTokPtr_addr; //@line 842 "xmltok_impl.c"
        var $184=$ptr_addr; //@line 842 "xmltok_impl.c"
        HEAP[$183]=$184; //@line 842 "xmltok_impl.c"
        $0=6; //@line 842 "xmltok_impl.c"
        __label__ = 60; break; //@line 842 "xmltok_impl.c"
      case 48: // $bb48
        var $185=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $186=$185+4; //@line 842 "xmltok_impl.c"
        $ptr_addr=$186; //@line 842 "xmltok_impl.c"
        __label__ = 58; break; //@line 842 "xmltok_impl.c"
      case 49: // $bb49
        var $187=$ptr_addr; //@line 845 "xmltok_impl.c"
        var $188=$187+1; //@line 845 "xmltok_impl.c"
        var $189=$end_addr; //@line 845 "xmltok_impl.c"
        var $190=($188)!=($189); //@line 845 "xmltok_impl.c"
        if ($190) { __label__ = 50; break; } else { __label__ = 56; break; } //@line 845 "xmltok_impl.c"
      case 50: // $bb50
        var $191=$ptr_addr; //@line 846 "xmltok_impl.c"
        var $192=$191+1; //@line 846 "xmltok_impl.c"
        var $193=HEAP[$192]; //@line 846 "xmltok_impl.c"
        var $194=($193)!=93; //@line 846 "xmltok_impl.c"
        var $195=$ptr_addr; //@line 847 "xmltok_impl.c"
        if ($194) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 846 "xmltok_impl.c"
      case 51: // $bb51
        var $196=$195+1; //@line 847 "xmltok_impl.c"
        $ptr_addr=$196; //@line 847 "xmltok_impl.c"
        __label__ = 58; break; //@line 847 "xmltok_impl.c"
      case 52: // $bb52
        var $197=$195+2; //@line 850 "xmltok_impl.c"
        var $198=$end_addr; //@line 850 "xmltok_impl.c"
        var $199=($197)!=($198); //@line 850 "xmltok_impl.c"
        if ($199) { __label__ = 53; break; } else { __label__ = 56; break; } //@line 850 "xmltok_impl.c"
      case 53: // $bb53
        var $200=$ptr_addr; //@line 851 "xmltok_impl.c"
        var $201=$200+2; //@line 851 "xmltok_impl.c"
        var $202=HEAP[$201]; //@line 851 "xmltok_impl.c"
        var $203=($202)!=62; //@line 851 "xmltok_impl.c"
        var $204=$ptr_addr; //@line 852 "xmltok_impl.c"
        if ($203) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 851 "xmltok_impl.c"
      case 54: // $bb54
        var $205=$204+1; //@line 852 "xmltok_impl.c"
        $ptr_addr=$205; //@line 852 "xmltok_impl.c"
        __label__ = 58; break; //@line 852 "xmltok_impl.c"
      case 55: // $bb55
        var $206=$204+2; //@line 855 "xmltok_impl.c"
        var $207=$nextTokPtr_addr; //@line 855 "xmltok_impl.c"
        HEAP[$207]=$206; //@line 855 "xmltok_impl.c"
        $0=0; //@line 856 "xmltok_impl.c"
        __label__ = 60; break; //@line 856 "xmltok_impl.c"
      case 56: // $bb56
        var $208=$nextTokPtr_addr; //@line 867 "xmltok_impl.c"
        var $209=$ptr_addr; //@line 867 "xmltok_impl.c"
        HEAP[$208]=$209; //@line 867 "xmltok_impl.c"
        $0=6; //@line 868 "xmltok_impl.c"
        __label__ = 60; break; //@line 868 "xmltok_impl.c"
      case 57: // $bb57
        var $210=$ptr_addr; //@line 870 "xmltok_impl.c"
        var $211=$210+1; //@line 870 "xmltok_impl.c"
        $ptr_addr=$211; //@line 870 "xmltok_impl.c"
        __label__ = 58; break; //@line 870 "xmltok_impl.c"
      case 58: // $bb58
        var $212=$ptr_addr; //@line 832 "xmltok_impl.c"
        var $213=$end_addr; //@line 832 "xmltok_impl.c"
        var $214=($212)!=($213); //@line 832 "xmltok_impl.c"
        if ($214) { __label__ = 36; break; } else { __label__ = 59; break; } //@line 832 "xmltok_impl.c"
      case 59: // $bb59
        var $215=$nextTokPtr_addr; //@line 874 "xmltok_impl.c"
        var $216=$ptr_addr; //@line 874 "xmltok_impl.c"
        HEAP[$215]=$216; //@line 874 "xmltok_impl.c"
        $0=6; //@line 875 "xmltok_impl.c"
        __label__ = 60; break; //@line 875 "xmltok_impl.c"
      case 60: // $bb60
        var $217=$0; //@line 786 "xmltok_impl.c"
        $retval=$217; //@line 786 "xmltok_impl.c"
        var $retval61=$retval; //@line 786 "xmltok_impl.c"
        ;
        return $retval61; //@line 786 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanPercent($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 884 "xmltok_impl.c"
        var $2=$end_addr; //@line 884 "xmltok_impl.c"
        var $3=($1)==($2); //@line 884 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 884 "xmltok_impl.c"
      case 1: // $bb
        $0=-22; //@line 885 "xmltok_impl.c"
        __label__ = 44; break; //@line 885 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$enc_addr; //@line 886 "xmltok_impl.c"
        var $5=$4; //@line 886 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 886 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 886 "xmltok_impl.c"
        var $8=($7); //@line 886 "xmltok_impl.c"
        var $9=$5+76; //@line 886 "xmltok_impl.c"
        var $10=$9+$8; //@line 886 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 886 "xmltok_impl.c"
        var $12=($11); //@line 886 "xmltok_impl.c"
        if ($12 == 5) {
          __label__ = 5; break;
        }
        else if ($12 == 6) {
          __label__ = 10; break;
        }
        else if ($12 == 7) {
          __label__ = 15; break;
        }
        else if ($12 == 9) {
          __label__ = 20; break;
        }
        else if ($12 == 10) {
          __label__ = 20; break;
        }
        else if ($12 == 21) {
          __label__ = 20; break;
        }
        else if ($12 == 22) {
          __label__ = 4; break;
        }
        else if ($12 == 24) {
          __label__ = 4; break;
        }
        else if ($12 == 29) {
          __label__ = 3; break;
        }
        else if ($12 == 30) {
          __label__ = 20; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 3: // $bb2
        var $13=$nextTokPtr_addr; //@line 887 "xmltok_impl.c"
        var $14=$ptr_addr; //@line 887 "xmltok_impl.c"
        HEAP[$13]=$14; //@line 887 "xmltok_impl.c"
        $0=0; //@line 887 "xmltok_impl.c"
        __label__ = 44; break; //@line 887 "xmltok_impl.c"
      case 4: // $bb3
        var $15=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $16=$15+1; //@line 887 "xmltok_impl.c"
        $ptr_addr=$16; //@line 887 "xmltok_impl.c"
        __label__ = 42; break; //@line 887 "xmltok_impl.c"
      case 5: // $bb4
        var $17=$end_addr; //@line 887 "xmltok_impl.c"
        var $18=($17); //@line 887 "xmltok_impl.c"
        var $19=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $20=($19); //@line 887 "xmltok_impl.c"
        var $21=($18) - ($20); //@line 887 "xmltok_impl.c"
        var $22=($21) <= 1; //@line 887 "xmltok_impl.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 887 "xmltok_impl.c"
      case 6: // $bb5
        $0=-2; //@line 887 "xmltok_impl.c"
        __label__ = 44; break; //@line 887 "xmltok_impl.c"
      case 7: // $bb6
        var $23=$enc_addr; //@line 887 "xmltok_impl.c"
        var $24=$23; //@line 887 "xmltok_impl.c"
        var $25=$24+344; //@line 887 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 887 "xmltok_impl.c"
        var $27=$enc_addr; //@line 887 "xmltok_impl.c"
        var $28=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $29=FUNCTION_TABLE[$26]($27, $28); //@line 887 "xmltok_impl.c"
        var $30=($29)==0; //@line 887 "xmltok_impl.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 887 "xmltok_impl.c"
      case 8: // $bb7
        var $31=$nextTokPtr_addr; //@line 887 "xmltok_impl.c"
        var $32=$ptr_addr; //@line 887 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 887 "xmltok_impl.c"
        $0=0; //@line 887 "xmltok_impl.c"
        __label__ = 44; break; //@line 887 "xmltok_impl.c"
      case 9: // $bb8
        var $33=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $34=$33+2; //@line 887 "xmltok_impl.c"
        $ptr_addr=$34; //@line 887 "xmltok_impl.c"
        __label__ = 42; break; //@line 887 "xmltok_impl.c"
      case 10: // $bb9
        var $35=$end_addr; //@line 887 "xmltok_impl.c"
        var $36=($35); //@line 887 "xmltok_impl.c"
        var $37=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $38=($37); //@line 887 "xmltok_impl.c"
        var $39=($36) - ($38); //@line 887 "xmltok_impl.c"
        var $40=($39) <= 2; //@line 887 "xmltok_impl.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 887 "xmltok_impl.c"
      case 11: // $bb10
        $0=-2; //@line 887 "xmltok_impl.c"
        __label__ = 44; break; //@line 887 "xmltok_impl.c"
      case 12: // $bb11
        var $41=$enc_addr; //@line 887 "xmltok_impl.c"
        var $42=$41; //@line 887 "xmltok_impl.c"
        var $43=$42+348; //@line 887 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 887 "xmltok_impl.c"
        var $45=$enc_addr; //@line 887 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $47=FUNCTION_TABLE[$44]($45, $46); //@line 887 "xmltok_impl.c"
        var $48=($47)==0; //@line 887 "xmltok_impl.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 887 "xmltok_impl.c"
      case 13: // $bb12
        var $49=$nextTokPtr_addr; //@line 887 "xmltok_impl.c"
        var $50=$ptr_addr; //@line 887 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 887 "xmltok_impl.c"
        $0=0; //@line 887 "xmltok_impl.c"
        __label__ = 44; break; //@line 887 "xmltok_impl.c"
      case 14: // $bb13
        var $51=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $52=$51+3; //@line 887 "xmltok_impl.c"
        $ptr_addr=$52; //@line 887 "xmltok_impl.c"
        __label__ = 42; break; //@line 887 "xmltok_impl.c"
      case 15: // $bb14
        var $53=$end_addr; //@line 887 "xmltok_impl.c"
        var $54=($53); //@line 887 "xmltok_impl.c"
        var $55=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $56=($55); //@line 887 "xmltok_impl.c"
        var $57=($54) - ($56); //@line 887 "xmltok_impl.c"
        var $58=($57) <= 3; //@line 887 "xmltok_impl.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 887 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 887 "xmltok_impl.c"
        __label__ = 44; break; //@line 887 "xmltok_impl.c"
      case 17: // $bb16
        var $59=$enc_addr; //@line 887 "xmltok_impl.c"
        var $60=$59; //@line 887 "xmltok_impl.c"
        var $61=$60+352; //@line 887 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 887 "xmltok_impl.c"
        var $63=$enc_addr; //@line 887 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $65=FUNCTION_TABLE[$62]($63, $64); //@line 887 "xmltok_impl.c"
        var $66=($65)==0; //@line 887 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 887 "xmltok_impl.c"
      case 18: // $bb17
        var $67=$nextTokPtr_addr; //@line 887 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 887 "xmltok_impl.c"
        HEAP[$67]=$68; //@line 887 "xmltok_impl.c"
        $0=0; //@line 887 "xmltok_impl.c"
        __label__ = 44; break; //@line 887 "xmltok_impl.c"
      case 19: // $bb18
        var $69=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $70=$69+4; //@line 887 "xmltok_impl.c"
        $ptr_addr=$70; //@line 887 "xmltok_impl.c"
        __label__ = 42; break; //@line 887 "xmltok_impl.c"
      case 20: // $bb19
        var $71=$nextTokPtr_addr; //@line 889 "xmltok_impl.c"
        var $72=$ptr_addr; //@line 889 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 889 "xmltok_impl.c"
        $0=22; //@line 890 "xmltok_impl.c"
        __label__ = 44; break; //@line 890 "xmltok_impl.c"
      case 21: // $bb20
        var $73=$nextTokPtr_addr; //@line 892 "xmltok_impl.c"
        var $74=$ptr_addr; //@line 892 "xmltok_impl.c"
        HEAP[$73]=$74; //@line 892 "xmltok_impl.c"
        $0=0; //@line 893 "xmltok_impl.c"
        __label__ = 44; break; //@line 893 "xmltok_impl.c"
      case 22: // $bb22
        var $75=$enc_addr; //@line 896 "xmltok_impl.c"
        var $76=$75; //@line 896 "xmltok_impl.c"
        var $77=$ptr_addr; //@line 896 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 896 "xmltok_impl.c"
        var $79=($78); //@line 896 "xmltok_impl.c"
        var $80=$76+76; //@line 896 "xmltok_impl.c"
        var $81=$80+$79; //@line 896 "xmltok_impl.c"
        var $82=HEAP[$81]; //@line 896 "xmltok_impl.c"
        var $83=($82); //@line 896 "xmltok_impl.c"
        if ($83 == 5) {
          __label__ = 25; break;
        }
        else if ($83 == 6) {
          __label__ = 30; break;
        }
        else if ($83 == 7) {
          __label__ = 35; break;
        }
        else if ($83 == 18) {
          __label__ = 40; break;
        }
        else if ($83 == 22) {
          __label__ = 24; break;
        }
        else if ($83 == 24) {
          __label__ = 24; break;
        }
        else if ($83 == 25) {
          __label__ = 24; break;
        }
        else if ($83 == 26) {
          __label__ = 24; break;
        }
        else if ($83 == 27) {
          __label__ = 24; break;
        }
        else if ($83 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 41; break;
        }
        
      case 23: // $bb23
        var $84=$nextTokPtr_addr; //@line 897 "xmltok_impl.c"
        var $85=$ptr_addr; //@line 897 "xmltok_impl.c"
        HEAP[$84]=$85; //@line 897 "xmltok_impl.c"
        $0=0; //@line 897 "xmltok_impl.c"
        __label__ = 44; break; //@line 897 "xmltok_impl.c"
      case 24: // $bb24
        var $86=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $87=$86+1; //@line 897 "xmltok_impl.c"
        $ptr_addr=$87; //@line 897 "xmltok_impl.c"
        __label__ = 42; break; //@line 897 "xmltok_impl.c"
      case 25: // $bb25
        var $88=$end_addr; //@line 897 "xmltok_impl.c"
        var $89=($88); //@line 897 "xmltok_impl.c"
        var $90=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $91=($90); //@line 897 "xmltok_impl.c"
        var $92=($89) - ($91); //@line 897 "xmltok_impl.c"
        var $93=($92) <= 1; //@line 897 "xmltok_impl.c"
        if ($93) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 897 "xmltok_impl.c"
      case 26: // $bb26
        $0=-2; //@line 897 "xmltok_impl.c"
        __label__ = 44; break; //@line 897 "xmltok_impl.c"
      case 27: // $bb27
        var $94=$enc_addr; //@line 897 "xmltok_impl.c"
        var $95=$94; //@line 897 "xmltok_impl.c"
        var $96=$95+332; //@line 897 "xmltok_impl.c"
        var $97=HEAP[$96]; //@line 897 "xmltok_impl.c"
        var $98=$enc_addr; //@line 897 "xmltok_impl.c"
        var $99=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $100=FUNCTION_TABLE[$97]($98, $99); //@line 897 "xmltok_impl.c"
        var $101=($100)==0; //@line 897 "xmltok_impl.c"
        if ($101) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 897 "xmltok_impl.c"
      case 28: // $bb28
        var $102=$nextTokPtr_addr; //@line 897 "xmltok_impl.c"
        var $103=$ptr_addr; //@line 897 "xmltok_impl.c"
        HEAP[$102]=$103; //@line 897 "xmltok_impl.c"
        $0=0; //@line 897 "xmltok_impl.c"
        __label__ = 44; break; //@line 897 "xmltok_impl.c"
      case 29: // $bb29
        var $104=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $105=$104+2; //@line 897 "xmltok_impl.c"
        $ptr_addr=$105; //@line 897 "xmltok_impl.c"
        __label__ = 42; break; //@line 897 "xmltok_impl.c"
      case 30: // $bb30
        var $106=$end_addr; //@line 897 "xmltok_impl.c"
        var $107=($106); //@line 897 "xmltok_impl.c"
        var $108=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $109=($108); //@line 897 "xmltok_impl.c"
        var $110=($107) - ($109); //@line 897 "xmltok_impl.c"
        var $111=($110) <= 2; //@line 897 "xmltok_impl.c"
        if ($111) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 897 "xmltok_impl.c"
      case 31: // $bb31
        $0=-2; //@line 897 "xmltok_impl.c"
        __label__ = 44; break; //@line 897 "xmltok_impl.c"
      case 32: // $bb32
        var $112=$enc_addr; //@line 897 "xmltok_impl.c"
        var $113=$112; //@line 897 "xmltok_impl.c"
        var $114=$113+336; //@line 897 "xmltok_impl.c"
        var $115=HEAP[$114]; //@line 897 "xmltok_impl.c"
        var $116=$enc_addr; //@line 897 "xmltok_impl.c"
        var $117=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $118=FUNCTION_TABLE[$115]($116, $117); //@line 897 "xmltok_impl.c"
        var $119=($118)==0; //@line 897 "xmltok_impl.c"
        if ($119) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 897 "xmltok_impl.c"
      case 33: // $bb33
        var $120=$nextTokPtr_addr; //@line 897 "xmltok_impl.c"
        var $121=$ptr_addr; //@line 897 "xmltok_impl.c"
        HEAP[$120]=$121; //@line 897 "xmltok_impl.c"
        $0=0; //@line 897 "xmltok_impl.c"
        __label__ = 44; break; //@line 897 "xmltok_impl.c"
      case 34: // $bb34
        var $122=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $123=$122+3; //@line 897 "xmltok_impl.c"
        $ptr_addr=$123; //@line 897 "xmltok_impl.c"
        __label__ = 42; break; //@line 897 "xmltok_impl.c"
      case 35: // $bb35
        var $124=$end_addr; //@line 897 "xmltok_impl.c"
        var $125=($124); //@line 897 "xmltok_impl.c"
        var $126=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $127=($126); //@line 897 "xmltok_impl.c"
        var $128=($125) - ($127); //@line 897 "xmltok_impl.c"
        var $129=($128) <= 3; //@line 897 "xmltok_impl.c"
        if ($129) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 897 "xmltok_impl.c"
      case 36: // $bb36
        $0=-2; //@line 897 "xmltok_impl.c"
        __label__ = 44; break; //@line 897 "xmltok_impl.c"
      case 37: // $bb37
        var $130=$enc_addr; //@line 897 "xmltok_impl.c"
        var $131=$130; //@line 897 "xmltok_impl.c"
        var $132=$131+340; //@line 897 "xmltok_impl.c"
        var $133=HEAP[$132]; //@line 897 "xmltok_impl.c"
        var $134=$enc_addr; //@line 897 "xmltok_impl.c"
        var $135=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $136=FUNCTION_TABLE[$133]($134, $135); //@line 897 "xmltok_impl.c"
        var $137=($136)==0; //@line 897 "xmltok_impl.c"
        if ($137) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 897 "xmltok_impl.c"
      case 38: // $bb38
        var $138=$nextTokPtr_addr; //@line 897 "xmltok_impl.c"
        var $139=$ptr_addr; //@line 897 "xmltok_impl.c"
        HEAP[$138]=$139; //@line 897 "xmltok_impl.c"
        $0=0; //@line 897 "xmltok_impl.c"
        __label__ = 44; break; //@line 897 "xmltok_impl.c"
      case 39: // $bb39
        var $140=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $141=$140+4; //@line 897 "xmltok_impl.c"
        $ptr_addr=$141; //@line 897 "xmltok_impl.c"
        __label__ = 42; break; //@line 897 "xmltok_impl.c"
      case 40: // $bb40
        var $142=$ptr_addr; //@line 899 "xmltok_impl.c"
        var $143=$142+1; //@line 899 "xmltok_impl.c"
        var $144=$nextTokPtr_addr; //@line 899 "xmltok_impl.c"
        HEAP[$144]=$143; //@line 899 "xmltok_impl.c"
        $0=28; //@line 900 "xmltok_impl.c"
        __label__ = 44; break; //@line 900 "xmltok_impl.c"
      case 41: // $bb41
        var $145=$nextTokPtr_addr; //@line 902 "xmltok_impl.c"
        var $146=$ptr_addr; //@line 902 "xmltok_impl.c"
        HEAP[$145]=$146; //@line 902 "xmltok_impl.c"
        $0=0; //@line 903 "xmltok_impl.c"
        __label__ = 44; break; //@line 903 "xmltok_impl.c"
      case 42: // $bb42
        var $147=$ptr_addr; //@line 895 "xmltok_impl.c"
        var $148=$end_addr; //@line 895 "xmltok_impl.c"
        var $149=($147)!=($148); //@line 895 "xmltok_impl.c"
        if ($149) { __label__ = 22; break; } else { __label__ = 43; break; } //@line 895 "xmltok_impl.c"
      case 43: // $bb43
        $0=-1; //@line 906 "xmltok_impl.c"
        __label__ = 44; break; //@line 906 "xmltok_impl.c"
      case 44: // $bb44
        var $150=$0; //@line 885 "xmltok_impl.c"
        $retval=$150; //@line 885 "xmltok_impl.c"
        var $retval45=$retval; //@line 885 "xmltok_impl.c"
        ;
        return $retval45; //@line 885 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanPoundName($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 913 "xmltok_impl.c"
        var $2=$end_addr; //@line 913 "xmltok_impl.c"
        var $3=($1)==($2); //@line 913 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 913 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 914 "xmltok_impl.c"
        __label__ = 43; break; //@line 914 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$enc_addr; //@line 915 "xmltok_impl.c"
        var $5=$4; //@line 915 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 915 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 915 "xmltok_impl.c"
        var $8=($7); //@line 915 "xmltok_impl.c"
        var $9=$5+76; //@line 915 "xmltok_impl.c"
        var $10=$9+$8; //@line 915 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 915 "xmltok_impl.c"
        var $12=($11); //@line 915 "xmltok_impl.c"
        if ($12 == 5) {
          __label__ = 5; break;
        }
        else if ($12 == 6) {
          __label__ = 10; break;
        }
        else if ($12 == 7) {
          __label__ = 15; break;
        }
        else if ($12 == 22) {
          __label__ = 4; break;
        }
        else if ($12 == 24) {
          __label__ = 4; break;
        }
        else if ($12 == 29) {
          __label__ = 3; break;
        }
        else {
        __label__ = 20; break;
        }
        
      case 3: // $bb2
        var $13=$nextTokPtr_addr; //@line 916 "xmltok_impl.c"
        var $14=$ptr_addr; //@line 916 "xmltok_impl.c"
        HEAP[$13]=$14; //@line 916 "xmltok_impl.c"
        $0=0; //@line 916 "xmltok_impl.c"
        __label__ = 43; break; //@line 916 "xmltok_impl.c"
      case 4: // $bb3
        var $15=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $16=$15+1; //@line 916 "xmltok_impl.c"
        $ptr_addr=$16; //@line 916 "xmltok_impl.c"
        __label__ = 41; break; //@line 916 "xmltok_impl.c"
      case 5: // $bb4
        var $17=$end_addr; //@line 916 "xmltok_impl.c"
        var $18=($17); //@line 916 "xmltok_impl.c"
        var $19=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $20=($19); //@line 916 "xmltok_impl.c"
        var $21=($18) - ($20); //@line 916 "xmltok_impl.c"
        var $22=($21) <= 1; //@line 916 "xmltok_impl.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 916 "xmltok_impl.c"
      case 6: // $bb5
        $0=-2; //@line 916 "xmltok_impl.c"
        __label__ = 43; break; //@line 916 "xmltok_impl.c"
      case 7: // $bb6
        var $23=$enc_addr; //@line 916 "xmltok_impl.c"
        var $24=$23; //@line 916 "xmltok_impl.c"
        var $25=$24+344; //@line 916 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 916 "xmltok_impl.c"
        var $27=$enc_addr; //@line 916 "xmltok_impl.c"
        var $28=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $29=FUNCTION_TABLE[$26]($27, $28); //@line 916 "xmltok_impl.c"
        var $30=($29)==0; //@line 916 "xmltok_impl.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 916 "xmltok_impl.c"
      case 8: // $bb7
        var $31=$nextTokPtr_addr; //@line 916 "xmltok_impl.c"
        var $32=$ptr_addr; //@line 916 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 916 "xmltok_impl.c"
        $0=0; //@line 916 "xmltok_impl.c"
        __label__ = 43; break; //@line 916 "xmltok_impl.c"
      case 9: // $bb8
        var $33=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $34=$33+2; //@line 916 "xmltok_impl.c"
        $ptr_addr=$34; //@line 916 "xmltok_impl.c"
        __label__ = 41; break; //@line 916 "xmltok_impl.c"
      case 10: // $bb9
        var $35=$end_addr; //@line 916 "xmltok_impl.c"
        var $36=($35); //@line 916 "xmltok_impl.c"
        var $37=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $38=($37); //@line 916 "xmltok_impl.c"
        var $39=($36) - ($38); //@line 916 "xmltok_impl.c"
        var $40=($39) <= 2; //@line 916 "xmltok_impl.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 916 "xmltok_impl.c"
      case 11: // $bb10
        $0=-2; //@line 916 "xmltok_impl.c"
        __label__ = 43; break; //@line 916 "xmltok_impl.c"
      case 12: // $bb11
        var $41=$enc_addr; //@line 916 "xmltok_impl.c"
        var $42=$41; //@line 916 "xmltok_impl.c"
        var $43=$42+348; //@line 916 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 916 "xmltok_impl.c"
        var $45=$enc_addr; //@line 916 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $47=FUNCTION_TABLE[$44]($45, $46); //@line 916 "xmltok_impl.c"
        var $48=($47)==0; //@line 916 "xmltok_impl.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 916 "xmltok_impl.c"
      case 13: // $bb12
        var $49=$nextTokPtr_addr; //@line 916 "xmltok_impl.c"
        var $50=$ptr_addr; //@line 916 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 916 "xmltok_impl.c"
        $0=0; //@line 916 "xmltok_impl.c"
        __label__ = 43; break; //@line 916 "xmltok_impl.c"
      case 14: // $bb13
        var $51=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $52=$51+3; //@line 916 "xmltok_impl.c"
        $ptr_addr=$52; //@line 916 "xmltok_impl.c"
        __label__ = 41; break; //@line 916 "xmltok_impl.c"
      case 15: // $bb14
        var $53=$end_addr; //@line 916 "xmltok_impl.c"
        var $54=($53); //@line 916 "xmltok_impl.c"
        var $55=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $56=($55); //@line 916 "xmltok_impl.c"
        var $57=($54) - ($56); //@line 916 "xmltok_impl.c"
        var $58=($57) <= 3; //@line 916 "xmltok_impl.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 916 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 916 "xmltok_impl.c"
        __label__ = 43; break; //@line 916 "xmltok_impl.c"
      case 17: // $bb16
        var $59=$enc_addr; //@line 916 "xmltok_impl.c"
        var $60=$59; //@line 916 "xmltok_impl.c"
        var $61=$60+352; //@line 916 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 916 "xmltok_impl.c"
        var $63=$enc_addr; //@line 916 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $65=FUNCTION_TABLE[$62]($63, $64); //@line 916 "xmltok_impl.c"
        var $66=($65)==0; //@line 916 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 916 "xmltok_impl.c"
      case 18: // $bb17
        var $67=$nextTokPtr_addr; //@line 916 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 916 "xmltok_impl.c"
        HEAP[$67]=$68; //@line 916 "xmltok_impl.c"
        $0=0; //@line 916 "xmltok_impl.c"
        __label__ = 43; break; //@line 916 "xmltok_impl.c"
      case 19: // $bb18
        var $69=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $70=$69+4; //@line 916 "xmltok_impl.c"
        $ptr_addr=$70; //@line 916 "xmltok_impl.c"
        __label__ = 41; break; //@line 916 "xmltok_impl.c"
      case 20: // $bb19
        var $71=$nextTokPtr_addr; //@line 918 "xmltok_impl.c"
        var $72=$ptr_addr; //@line 918 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 918 "xmltok_impl.c"
        $0=0; //@line 919 "xmltok_impl.c"
        __label__ = 43; break; //@line 919 "xmltok_impl.c"
      case 21: // $bb21
        var $73=$enc_addr; //@line 922 "xmltok_impl.c"
        var $74=$73; //@line 922 "xmltok_impl.c"
        var $75=$ptr_addr; //@line 922 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 922 "xmltok_impl.c"
        var $77=($76); //@line 922 "xmltok_impl.c"
        var $78=$74+76; //@line 922 "xmltok_impl.c"
        var $79=$78+$77; //@line 922 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 922 "xmltok_impl.c"
        var $81=($80); //@line 922 "xmltok_impl.c"
        if ($81 == 5) {
          __label__ = 24; break;
        }
        else if ($81 == 6) {
          __label__ = 29; break;
        }
        else if ($81 == 7) {
          __label__ = 34; break;
        }
        else if ($81 == 9) {
          __label__ = 39; break;
        }
        else if ($81 == 10) {
          __label__ = 39; break;
        }
        else if ($81 == 11) {
          __label__ = 39; break;
        }
        else if ($81 == 21) {
          __label__ = 39; break;
        }
        else if ($81 == 22) {
          __label__ = 23; break;
        }
        else if ($81 == 24) {
          __label__ = 23; break;
        }
        else if ($81 == 25) {
          __label__ = 23; break;
        }
        else if ($81 == 26) {
          __label__ = 23; break;
        }
        else if ($81 == 27) {
          __label__ = 23; break;
        }
        else if ($81 == 29) {
          __label__ = 22; break;
        }
        else if ($81 == 30) {
          __label__ = 39; break;
        }
        else if ($81 == 32) {
          __label__ = 39; break;
        }
        else if ($81 == 36) {
          __label__ = 39; break;
        }
        else {
        __label__ = 40; break;
        }
        
      case 22: // $bb22
        var $82=$nextTokPtr_addr; //@line 923 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 923 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 923 "xmltok_impl.c"
        $0=0; //@line 923 "xmltok_impl.c"
        __label__ = 43; break; //@line 923 "xmltok_impl.c"
      case 23: // $bb23
        var $84=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $85=$84+1; //@line 923 "xmltok_impl.c"
        $ptr_addr=$85; //@line 923 "xmltok_impl.c"
        __label__ = 41; break; //@line 923 "xmltok_impl.c"
      case 24: // $bb24
        var $86=$end_addr; //@line 923 "xmltok_impl.c"
        var $87=($86); //@line 923 "xmltok_impl.c"
        var $88=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $89=($88); //@line 923 "xmltok_impl.c"
        var $90=($87) - ($89); //@line 923 "xmltok_impl.c"
        var $91=($90) <= 1; //@line 923 "xmltok_impl.c"
        if ($91) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 923 "xmltok_impl.c"
      case 25: // $bb25
        $0=-2; //@line 923 "xmltok_impl.c"
        __label__ = 43; break; //@line 923 "xmltok_impl.c"
      case 26: // $bb26
        var $92=$enc_addr; //@line 923 "xmltok_impl.c"
        var $93=$92; //@line 923 "xmltok_impl.c"
        var $94=$93+332; //@line 923 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 923 "xmltok_impl.c"
        var $96=$enc_addr; //@line 923 "xmltok_impl.c"
        var $97=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $98=FUNCTION_TABLE[$95]($96, $97); //@line 923 "xmltok_impl.c"
        var $99=($98)==0; //@line 923 "xmltok_impl.c"
        if ($99) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 923 "xmltok_impl.c"
      case 27: // $bb27
        var $100=$nextTokPtr_addr; //@line 923 "xmltok_impl.c"
        var $101=$ptr_addr; //@line 923 "xmltok_impl.c"
        HEAP[$100]=$101; //@line 923 "xmltok_impl.c"
        $0=0; //@line 923 "xmltok_impl.c"
        __label__ = 43; break; //@line 923 "xmltok_impl.c"
      case 28: // $bb28
        var $102=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $103=$102+2; //@line 923 "xmltok_impl.c"
        $ptr_addr=$103; //@line 923 "xmltok_impl.c"
        __label__ = 41; break; //@line 923 "xmltok_impl.c"
      case 29: // $bb29
        var $104=$end_addr; //@line 923 "xmltok_impl.c"
        var $105=($104); //@line 923 "xmltok_impl.c"
        var $106=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $107=($106); //@line 923 "xmltok_impl.c"
        var $108=($105) - ($107); //@line 923 "xmltok_impl.c"
        var $109=($108) <= 2; //@line 923 "xmltok_impl.c"
        if ($109) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 923 "xmltok_impl.c"
      case 30: // $bb30
        $0=-2; //@line 923 "xmltok_impl.c"
        __label__ = 43; break; //@line 923 "xmltok_impl.c"
      case 31: // $bb31
        var $110=$enc_addr; //@line 923 "xmltok_impl.c"
        var $111=$110; //@line 923 "xmltok_impl.c"
        var $112=$111+336; //@line 923 "xmltok_impl.c"
        var $113=HEAP[$112]; //@line 923 "xmltok_impl.c"
        var $114=$enc_addr; //@line 923 "xmltok_impl.c"
        var $115=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $116=FUNCTION_TABLE[$113]($114, $115); //@line 923 "xmltok_impl.c"
        var $117=($116)==0; //@line 923 "xmltok_impl.c"
        if ($117) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 923 "xmltok_impl.c"
      case 32: // $bb32
        var $118=$nextTokPtr_addr; //@line 923 "xmltok_impl.c"
        var $119=$ptr_addr; //@line 923 "xmltok_impl.c"
        HEAP[$118]=$119; //@line 923 "xmltok_impl.c"
        $0=0; //@line 923 "xmltok_impl.c"
        __label__ = 43; break; //@line 923 "xmltok_impl.c"
      case 33: // $bb33
        var $120=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $121=$120+3; //@line 923 "xmltok_impl.c"
        $ptr_addr=$121; //@line 923 "xmltok_impl.c"
        __label__ = 41; break; //@line 923 "xmltok_impl.c"
      case 34: // $bb34
        var $122=$end_addr; //@line 923 "xmltok_impl.c"
        var $123=($122); //@line 923 "xmltok_impl.c"
        var $124=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $125=($124); //@line 923 "xmltok_impl.c"
        var $126=($123) - ($125); //@line 923 "xmltok_impl.c"
        var $127=($126) <= 3; //@line 923 "xmltok_impl.c"
        if ($127) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 923 "xmltok_impl.c"
      case 35: // $bb35
        $0=-2; //@line 923 "xmltok_impl.c"
        __label__ = 43; break; //@line 923 "xmltok_impl.c"
      case 36: // $bb36
        var $128=$enc_addr; //@line 923 "xmltok_impl.c"
        var $129=$128; //@line 923 "xmltok_impl.c"
        var $130=$129+340; //@line 923 "xmltok_impl.c"
        var $131=HEAP[$130]; //@line 923 "xmltok_impl.c"
        var $132=$enc_addr; //@line 923 "xmltok_impl.c"
        var $133=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $134=FUNCTION_TABLE[$131]($132, $133); //@line 923 "xmltok_impl.c"
        var $135=($134)==0; //@line 923 "xmltok_impl.c"
        if ($135) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 923 "xmltok_impl.c"
      case 37: // $bb37
        var $136=$nextTokPtr_addr; //@line 923 "xmltok_impl.c"
        var $137=$ptr_addr; //@line 923 "xmltok_impl.c"
        HEAP[$136]=$137; //@line 923 "xmltok_impl.c"
        $0=0; //@line 923 "xmltok_impl.c"
        __label__ = 43; break; //@line 923 "xmltok_impl.c"
      case 38: // $bb38
        var $138=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $139=$138+4; //@line 923 "xmltok_impl.c"
        $ptr_addr=$139; //@line 923 "xmltok_impl.c"
        __label__ = 41; break; //@line 923 "xmltok_impl.c"
      case 39: // $bb39
        var $140=$nextTokPtr_addr; //@line 926 "xmltok_impl.c"
        var $141=$ptr_addr; //@line 926 "xmltok_impl.c"
        HEAP[$140]=$141; //@line 926 "xmltok_impl.c"
        $0=20; //@line 927 "xmltok_impl.c"
        __label__ = 43; break; //@line 927 "xmltok_impl.c"
      case 40: // $bb40
        var $142=$nextTokPtr_addr; //@line 929 "xmltok_impl.c"
        var $143=$ptr_addr; //@line 929 "xmltok_impl.c"
        HEAP[$142]=$143; //@line 929 "xmltok_impl.c"
        $0=0; //@line 930 "xmltok_impl.c"
        __label__ = 43; break; //@line 930 "xmltok_impl.c"
      case 41: // $bb41
        var $144=$ptr_addr; //@line 921 "xmltok_impl.c"
        var $145=$end_addr; //@line 921 "xmltok_impl.c"
        var $146=($144)!=($145); //@line 921 "xmltok_impl.c"
        if ($146) { __label__ = 21; break; } else { __label__ = 42; break; } //@line 921 "xmltok_impl.c"
      case 42: // $bb42
        $0=-20; //@line 933 "xmltok_impl.c"
        __label__ = 43; break; //@line 933 "xmltok_impl.c"
      case 43: // $bb43
        var $147=$0; //@line 914 "xmltok_impl.c"
        $retval=$147; //@line 914 "xmltok_impl.c"
        var $retval44=$retval; //@line 914 "xmltok_impl.c"
        ;
        return $retval44; //@line 914 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanLit($open, $enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $open_addr;
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $t;
        $open_addr=$open;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        __label__ = 25; break; //@line 941 "xmltok_impl.c"
      case 1: // $bb
        var $1=$enc_addr; //@line 942 "xmltok_impl.c"
        var $2=$1; //@line 942 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 942 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 942 "xmltok_impl.c"
        var $5=($4); //@line 942 "xmltok_impl.c"
        var $6=$2+76; //@line 942 "xmltok_impl.c"
        var $7=$6+$5; //@line 942 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 942 "xmltok_impl.c"
        var $9=($8); //@line 942 "xmltok_impl.c"
        $t=$9; //@line 942 "xmltok_impl.c"
        var $10=$t; //@line 943 "xmltok_impl.c"
        if ($10 == 0) {
          __label__ = 17; break;
        }
        else if ($10 == 1) {
          __label__ = 17; break;
        }
        else if ($10 == 5) {
          __label__ = 2; break;
        }
        else if ($10 == 6) {
          __label__ = 7; break;
        }
        else if ($10 == 7) {
          __label__ = 12; break;
        }
        else if ($10 == 8) {
          __label__ = 17; break;
        }
        else if ($10 == 12) {
          __label__ = 18; break;
        }
        else if ($10 == 13) {
          __label__ = 18; break;
        }
        else {
        __label__ = 24; break;
        }
        
      case 2: // $bb1
        var $11=$end_addr; //@line 944 "xmltok_impl.c"
        var $12=($11); //@line 944 "xmltok_impl.c"
        var $13=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $14=($13); //@line 944 "xmltok_impl.c"
        var $15=($12) - ($14); //@line 944 "xmltok_impl.c"
        var $16=($15) <= 1; //@line 944 "xmltok_impl.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 944 "xmltok_impl.c"
      case 3: // $bb2
        $0=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 4: // $bb3
        var $17=$enc_addr; //@line 944 "xmltok_impl.c"
        var $18=$17; //@line 944 "xmltok_impl.c"
        var $19=$18+356; //@line 944 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 944 "xmltok_impl.c"
        var $21=$enc_addr; //@line 944 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $23=FUNCTION_TABLE[$20]($21, $22); //@line 944 "xmltok_impl.c"
        var $24=($23)!=0; //@line 944 "xmltok_impl.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 944 "xmltok_impl.c"
      case 5: // $bb4
        var $25=$nextTokPtr_addr; //@line 944 "xmltok_impl.c"
        var $26=$ptr_addr; //@line 944 "xmltok_impl.c"
        HEAP[$25]=$26; //@line 944 "xmltok_impl.c"
        $0=0; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 6: // $bb5
        var $27=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $28=$27+2; //@line 944 "xmltok_impl.c"
        $ptr_addr=$28; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 7: // $bb6
        var $29=$end_addr; //@line 944 "xmltok_impl.c"
        var $30=($29); //@line 944 "xmltok_impl.c"
        var $31=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $32=($31); //@line 944 "xmltok_impl.c"
        var $33=($30) - ($32); //@line 944 "xmltok_impl.c"
        var $34=($33) <= 2; //@line 944 "xmltok_impl.c"
        if ($34) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 944 "xmltok_impl.c"
      case 8: // $bb7
        $0=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 9: // $bb8
        var $35=$enc_addr; //@line 944 "xmltok_impl.c"
        var $36=$35; //@line 944 "xmltok_impl.c"
        var $37=$36+360; //@line 944 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 944 "xmltok_impl.c"
        var $39=$enc_addr; //@line 944 "xmltok_impl.c"
        var $40=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $41=FUNCTION_TABLE[$38]($39, $40); //@line 944 "xmltok_impl.c"
        var $42=($41)!=0; //@line 944 "xmltok_impl.c"
        if ($42) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 944 "xmltok_impl.c"
      case 10: // $bb9
        var $43=$nextTokPtr_addr; //@line 944 "xmltok_impl.c"
        var $44=$ptr_addr; //@line 944 "xmltok_impl.c"
        HEAP[$43]=$44; //@line 944 "xmltok_impl.c"
        $0=0; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 11: // $bb10
        var $45=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $46=$45+3; //@line 944 "xmltok_impl.c"
        $ptr_addr=$46; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 12: // $bb11
        var $47=$end_addr; //@line 944 "xmltok_impl.c"
        var $48=($47); //@line 944 "xmltok_impl.c"
        var $49=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $50=($49); //@line 944 "xmltok_impl.c"
        var $51=($48) - ($50); //@line 944 "xmltok_impl.c"
        var $52=($51) <= 3; //@line 944 "xmltok_impl.c"
        if ($52) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 944 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 14: // $bb13
        var $53=$enc_addr; //@line 944 "xmltok_impl.c"
        var $54=$53; //@line 944 "xmltok_impl.c"
        var $55=$54+364; //@line 944 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 944 "xmltok_impl.c"
        var $57=$enc_addr; //@line 944 "xmltok_impl.c"
        var $58=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $59=FUNCTION_TABLE[$56]($57, $58); //@line 944 "xmltok_impl.c"
        var $60=($59)!=0; //@line 944 "xmltok_impl.c"
        if ($60) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 944 "xmltok_impl.c"
      case 15: // $bb14
        var $61=$nextTokPtr_addr; //@line 944 "xmltok_impl.c"
        var $62=$ptr_addr; //@line 944 "xmltok_impl.c"
        HEAP[$61]=$62; //@line 944 "xmltok_impl.c"
        $0=0; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 16: // $bb15
        var $63=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $64=$63+4; //@line 944 "xmltok_impl.c"
        $ptr_addr=$64; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 17: // $bb16
        var $65=$nextTokPtr_addr; //@line 944 "xmltok_impl.c"
        var $66=$ptr_addr; //@line 944 "xmltok_impl.c"
        HEAP[$65]=$66; //@line 944 "xmltok_impl.c"
        $0=0; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 18: // $bb17
        var $67=$ptr_addr; //@line 947 "xmltok_impl.c"
        var $68=$67+1; //@line 947 "xmltok_impl.c"
        $ptr_addr=$68; //@line 947 "xmltok_impl.c"
        var $69=$t; //@line 948 "xmltok_impl.c"
        var $70=$open_addr; //@line 948 "xmltok_impl.c"
        var $71=($69)!=($70); //@line 948 "xmltok_impl.c"
        if ($71) { __label__ = 25; break; } else { __label__ = 19; break; } //@line 948 "xmltok_impl.c"
      case 19: // $bb18
        var $72=$ptr_addr; //@line 950 "xmltok_impl.c"
        var $73=$end_addr; //@line 950 "xmltok_impl.c"
        var $74=($72)==($73); //@line 950 "xmltok_impl.c"
        if ($74) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 950 "xmltok_impl.c"
      case 20: // $bb19
        $0=-27; //@line 951 "xmltok_impl.c"
        __label__ = 27; break; //@line 951 "xmltok_impl.c"
      case 21: // $bb20
        var $75=$nextTokPtr_addr; //@line 952 "xmltok_impl.c"
        var $76=$ptr_addr; //@line 952 "xmltok_impl.c"
        HEAP[$75]=$76; //@line 952 "xmltok_impl.c"
        var $77=$enc_addr; //@line 953 "xmltok_impl.c"
        var $78=$77; //@line 953 "xmltok_impl.c"
        var $79=$ptr_addr; //@line 953 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 953 "xmltok_impl.c"
        var $81=($80); //@line 953 "xmltok_impl.c"
        var $82=$78+76; //@line 953 "xmltok_impl.c"
        var $83=$82+$81; //@line 953 "xmltok_impl.c"
        var $84=HEAP[$83]; //@line 953 "xmltok_impl.c"
        var $85=($84); //@line 953 "xmltok_impl.c"
        if ($85 == 9) {
          __label__ = 22; break;
        }
        else if ($85 == 10) {
          __label__ = 22; break;
        }
        else if ($85 == 11) {
          __label__ = 22; break;
        }
        else if ($85 == 20) {
          __label__ = 22; break;
        }
        else if ($85 == 21) {
          __label__ = 22; break;
        }
        else if ($85 == 30) {
          __label__ = 22; break;
        }
        else {
        __label__ = 23; break;
        }
        
      case 22: // $bb21
        $0=27; //@line 956 "xmltok_impl.c"
        __label__ = 27; break; //@line 956 "xmltok_impl.c"
      case 23: // $bb22
        $0=0; //@line 958 "xmltok_impl.c"
        __label__ = 27; break; //@line 958 "xmltok_impl.c"
      case 24: // $bb23
        var $86=$ptr_addr; //@line 961 "xmltok_impl.c"
        var $87=$86+1; //@line 961 "xmltok_impl.c"
        $ptr_addr=$87; //@line 961 "xmltok_impl.c"
        __label__ = 25; break; //@line 961 "xmltok_impl.c"
      case 25: // $bb24
        var $88=$ptr_addr; //@line 941 "xmltok_impl.c"
        var $89=$end_addr; //@line 941 "xmltok_impl.c"
        var $90=($88)!=($89); //@line 941 "xmltok_impl.c"
        if ($90) { __label__ = 1; break; } else { __label__ = 26; break; } //@line 941 "xmltok_impl.c"
      case 26: // $bb25
        $0=-1; //@line 965 "xmltok_impl.c"
        __label__ = 27; break; //@line 965 "xmltok_impl.c"
      case 27: // $bb26
        var $91=$0; //@line 944 "xmltok_impl.c"
        $retval=$91; //@line 944 "xmltok_impl.c"
        var $retval27=$retval; //@line 944 "xmltok_impl.c"
        ;
        return $retval27; //@line 944 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_prologTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $tok;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 973 "xmltok_impl.c"
        var $2=$end_addr; //@line 973 "xmltok_impl.c"
        var $3=($1)==($2); //@line 973 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 973 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 974 "xmltok_impl.c"
        __label__ = 120; break; //@line 974 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$enc_addr; //@line 984 "xmltok_impl.c"
        var $5=$4; //@line 984 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 984 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 984 "xmltok_impl.c"
        var $8=($7); //@line 984 "xmltok_impl.c"
        var $9=$5+76; //@line 984 "xmltok_impl.c"
        var $10=$9+$8; //@line 984 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 984 "xmltok_impl.c"
        var $12=($11); //@line 984 "xmltok_impl.c"
        if ($12 == 2) {
          __label__ = 5; break;
        }
        else if ($12 == 4) {
          __label__ = 22; break;
        }
        else if ($12 == 5) {
          __label__ = 42; break;
        }
        else if ($12 == 6) {
          __label__ = 49; break;
        }
        else if ($12 == 7) {
          __label__ = 56; break;
        }
        else if ($12 == 9) {
          __label__ = 12; break;
        }
        else if ($12 == 10) {
          __label__ = 14; break;
        }
        else if ($12 == 11) {
          __label__ = 40; break;
        }
        else if ($12 == 12) {
          __label__ = 3; break;
        }
        else if ($12 == 13) {
          __label__ = 4; break;
        }
        else if ($12 == 19) {
          __label__ = 41; break;
        }
        else if ($12 == 20) {
          __label__ = 21; break;
        }
        else if ($12 == 21) {
          __label__ = 14; break;
        }
        else if ($12 == 22) {
          __label__ = 63; break;
        }
        else if ($12 == 23) {
          __label__ = 64; break;
        }
        else if ($12 == 24) {
          __label__ = 63; break;
        }
        else if ($12 == 25) {
          __label__ = 64; break;
        }
        else if ($12 == 26) {
          __label__ = 64; break;
        }
        else if ($12 == 27) {
          __label__ = 64; break;
        }
        else if ($12 == 30) {
          __label__ = 19; break;
        }
        else if ($12 == 31) {
          __label__ = 30; break;
        }
        else if ($12 == 32) {
          __label__ = 31; break;
        }
        else if ($12 == 35) {
          __label__ = 20; break;
        }
        else if ($12 == 36) {
          __label__ = 39; break;
        }
        else {
        __label__ = 65; break;
        }
        
      case 3: // $bb2
        var $13=$ptr_addr; //@line 986 "xmltok_impl.c"
        var $14=$13+1; //@line 986 "xmltok_impl.c"
        var $15=$enc_addr; //@line 986 "xmltok_impl.c"
        var $16=$end_addr; //@line 986 "xmltok_impl.c"
        var $17=$nextTokPtr_addr; //@line 986 "xmltok_impl.c"
        var $18=_normal_scanLit(12, $15, $14, $16, $17); //@line 986 "xmltok_impl.c"
        $0=$18; //@line 986 "xmltok_impl.c"
        __label__ = 120; break; //@line 986 "xmltok_impl.c"
      case 4: // $bb3
        var $19=$ptr_addr; //@line 988 "xmltok_impl.c"
        var $20=$19+1; //@line 988 "xmltok_impl.c"
        var $21=$enc_addr; //@line 988 "xmltok_impl.c"
        var $22=$end_addr; //@line 988 "xmltok_impl.c"
        var $23=$nextTokPtr_addr; //@line 988 "xmltok_impl.c"
        var $24=_normal_scanLit(13, $21, $20, $22, $23); //@line 988 "xmltok_impl.c"
        $0=$24; //@line 988 "xmltok_impl.c"
        __label__ = 120; break; //@line 988 "xmltok_impl.c"
      case 5: // $bb4
        var $25=$ptr_addr; //@line 991 "xmltok_impl.c"
        var $26=$25+1; //@line 991 "xmltok_impl.c"
        $ptr_addr=$26; //@line 991 "xmltok_impl.c"
        var $27=$ptr_addr; //@line 992 "xmltok_impl.c"
        var $28=$end_addr; //@line 992 "xmltok_impl.c"
        var $29=($27)==($28); //@line 992 "xmltok_impl.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 992 "xmltok_impl.c"
      case 6: // $bb5
        $0=-1; //@line 993 "xmltok_impl.c"
        __label__ = 120; break; //@line 993 "xmltok_impl.c"
      case 7: // $bb6
        var $30=$enc_addr; //@line 994 "xmltok_impl.c"
        var $31=$30; //@line 994 "xmltok_impl.c"
        var $32=$ptr_addr; //@line 994 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 994 "xmltok_impl.c"
        var $34=($33); //@line 994 "xmltok_impl.c"
        var $35=$31+76; //@line 994 "xmltok_impl.c"
        var $36=$35+$34; //@line 994 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 994 "xmltok_impl.c"
        var $38=($37); //@line 994 "xmltok_impl.c"
        if ($38 == 5) {
          __label__ = 10; break;
        }
        else if ($38 == 6) {
          __label__ = 10; break;
        }
        else if ($38 == 7) {
          __label__ = 10; break;
        }
        else if ($38 == 15) {
          __label__ = 9; break;
        }
        else if ($38 == 16) {
          __label__ = 8; break;
        }
        else if ($38 == 22) {
          __label__ = 10; break;
        }
        else if ($38 == 24) {
          __label__ = 10; break;
        }
        else if ($38 == 29) {
          __label__ = 10; break;
        }
        else {
        __label__ = 11; break;
        }
        
      case 8: // $bb7
        var $39=$ptr_addr; //@line 996 "xmltok_impl.c"
        var $40=$39+1; //@line 996 "xmltok_impl.c"
        var $41=$enc_addr; //@line 996 "xmltok_impl.c"
        var $42=$end_addr; //@line 996 "xmltok_impl.c"
        var $43=$nextTokPtr_addr; //@line 996 "xmltok_impl.c"
        var $44=_normal_scanDecl($41, $40, $42, $43); //@line 996 "xmltok_impl.c"
        $0=$44; //@line 996 "xmltok_impl.c"
        __label__ = 120; break; //@line 996 "xmltok_impl.c"
      case 9: // $bb8
        var $45=$ptr_addr; //@line 998 "xmltok_impl.c"
        var $46=$45+1; //@line 998 "xmltok_impl.c"
        var $47=$enc_addr; //@line 998 "xmltok_impl.c"
        var $48=$end_addr; //@line 998 "xmltok_impl.c"
        var $49=$nextTokPtr_addr; //@line 998 "xmltok_impl.c"
        var $50=_normal_scanPi($47, $46, $48, $49); //@line 998 "xmltok_impl.c"
        $0=$50; //@line 998 "xmltok_impl.c"
        __label__ = 120; break; //@line 998 "xmltok_impl.c"
      case 10: // $bb9
        var $51=$ptr_addr; //@line 1005 "xmltok_impl.c"
        var $52=$51+-1; //@line 1005 "xmltok_impl.c"
        var $53=$nextTokPtr_addr; //@line 1005 "xmltok_impl.c"
        HEAP[$53]=$52; //@line 1005 "xmltok_impl.c"
        $0=29; //@line 1006 "xmltok_impl.c"
        __label__ = 120; break; //@line 1006 "xmltok_impl.c"
      case 11: // $bb10
        var $54=$nextTokPtr_addr; //@line 1008 "xmltok_impl.c"
        var $55=$ptr_addr; //@line 1008 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 1008 "xmltok_impl.c"
        $0=0; //@line 1009 "xmltok_impl.c"
        __label__ = 120; break; //@line 1009 "xmltok_impl.c"
      case 12: // $bb11
        var $56=$ptr_addr; //@line 1012 "xmltok_impl.c"
        var $57=$56+1; //@line 1012 "xmltok_impl.c"
        var $58=$end_addr; //@line 1012 "xmltok_impl.c"
        var $59=($57)==($58); //@line 1012 "xmltok_impl.c"
        if ($59) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1012 "xmltok_impl.c"
      case 13: // $bb12
        var $60=$nextTokPtr_addr; //@line 1013 "xmltok_impl.c"
        var $61=$end_addr; //@line 1013 "xmltok_impl.c"
        HEAP[$60]=$61; //@line 1013 "xmltok_impl.c"
        $0=-15; //@line 1015 "xmltok_impl.c"
        __label__ = 120; break; //@line 1015 "xmltok_impl.c"
      case 14: // $bb13
        var $62=$ptr_addr; //@line 1020 "xmltok_impl.c"
        var $63=$62+1; //@line 1020 "xmltok_impl.c"
        $ptr_addr=$63; //@line 1020 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 1021 "xmltok_impl.c"
        var $65=$end_addr; //@line 1021 "xmltok_impl.c"
        var $66=($64)==($65); //@line 1021 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 15; break; } //@line 1021 "xmltok_impl.c"
      case 15: // $bb14
        var $67=$enc_addr; //@line 1023 "xmltok_impl.c"
        var $68=$67; //@line 1023 "xmltok_impl.c"
        var $69=$ptr_addr; //@line 1023 "xmltok_impl.c"
        var $70=HEAP[$69]; //@line 1023 "xmltok_impl.c"
        var $71=($70); //@line 1023 "xmltok_impl.c"
        var $72=$68+76; //@line 1023 "xmltok_impl.c"
        var $73=$72+$71; //@line 1023 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 1023 "xmltok_impl.c"
        var $75=($74); //@line 1023 "xmltok_impl.c"
        if ($75 == 9) {
          __label__ = 16; break;
        }
        else if ($75 == 10) {
          __label__ = 14; break;
        }
        else if ($75 == 21) {
          __label__ = 14; break;
        }
        else {
        __label__ = 17; break;
        }
        
      case 16: // $bb16
        var $76=$ptr_addr; //@line 1028 "xmltok_impl.c"
        var $77=$76+1; //@line 1028 "xmltok_impl.c"
        var $78=$end_addr; //@line 1028 "xmltok_impl.c"
        var $79=($77)!=($78); //@line 1028 "xmltok_impl.c"
        if ($79) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 1028 "xmltok_impl.c"
      case 17: // $bb17
        var $80=$nextTokPtr_addr; //@line 1032 "xmltok_impl.c"
        var $81=$ptr_addr; //@line 1032 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 1032 "xmltok_impl.c"
        $0=15; //@line 1033 "xmltok_impl.c"
        __label__ = 120; break; //@line 1033 "xmltok_impl.c"
      case 18: // $bb19
        var $82=$nextTokPtr_addr; //@line 1036 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 1036 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 1036 "xmltok_impl.c"
        $0=15; //@line 1037 "xmltok_impl.c"
        __label__ = 120; break; //@line 1037 "xmltok_impl.c"
      case 19: // $bb20
        var $84=$ptr_addr; //@line 1039 "xmltok_impl.c"
        var $85=$84+1; //@line 1039 "xmltok_impl.c"
        var $86=$enc_addr; //@line 1039 "xmltok_impl.c"
        var $87=$end_addr; //@line 1039 "xmltok_impl.c"
        var $88=$nextTokPtr_addr; //@line 1039 "xmltok_impl.c"
        var $89=_normal_scanPercent($86, $85, $87, $88); //@line 1039 "xmltok_impl.c"
        $0=$89; //@line 1039 "xmltok_impl.c"
        __label__ = 120; break; //@line 1039 "xmltok_impl.c"
      case 20: // $bb21
        var $90=$ptr_addr; //@line 1041 "xmltok_impl.c"
        var $91=$90+1; //@line 1041 "xmltok_impl.c"
        var $92=$nextTokPtr_addr; //@line 1041 "xmltok_impl.c"
        HEAP[$92]=$91; //@line 1041 "xmltok_impl.c"
        $0=38; //@line 1042 "xmltok_impl.c"
        __label__ = 120; break; //@line 1042 "xmltok_impl.c"
      case 21: // $bb22
        var $93=$ptr_addr; //@line 1044 "xmltok_impl.c"
        var $94=$93+1; //@line 1044 "xmltok_impl.c"
        var $95=$nextTokPtr_addr; //@line 1044 "xmltok_impl.c"
        HEAP[$95]=$94; //@line 1044 "xmltok_impl.c"
        $0=25; //@line 1045 "xmltok_impl.c"
        __label__ = 120; break; //@line 1045 "xmltok_impl.c"
      case 22: // $bb23
        var $96=$ptr_addr; //@line 1047 "xmltok_impl.c"
        var $97=$96+1; //@line 1047 "xmltok_impl.c"
        $ptr_addr=$97; //@line 1047 "xmltok_impl.c"
        var $98=$ptr_addr; //@line 1048 "xmltok_impl.c"
        var $99=$end_addr; //@line 1048 "xmltok_impl.c"
        var $100=($98)==($99); //@line 1048 "xmltok_impl.c"
        if ($100) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1048 "xmltok_impl.c"
      case 23: // $bb24
        $0=-26; //@line 1049 "xmltok_impl.c"
        __label__ = 120; break; //@line 1049 "xmltok_impl.c"
      case 24: // $bb25
        var $101=$ptr_addr; //@line 1050 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 1050 "xmltok_impl.c"
        var $103=($102)==93; //@line 1050 "xmltok_impl.c"
        if ($103) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 1050 "xmltok_impl.c"
      case 25: // $bb26
        var $104=$ptr_addr; //@line 1051 "xmltok_impl.c"
        var $105=$104+1; //@line 1051 "xmltok_impl.c"
        var $106=$end_addr; //@line 1051 "xmltok_impl.c"
        var $107=($105)==($106); //@line 1051 "xmltok_impl.c"
        if ($107) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1051 "xmltok_impl.c"
      case 26: // $bb27
        $0=-1; //@line 1052 "xmltok_impl.c"
        __label__ = 120; break; //@line 1052 "xmltok_impl.c"
      case 27: // $bb28
        var $108=$ptr_addr; //@line 1053 "xmltok_impl.c"
        var $109=$108+1; //@line 1053 "xmltok_impl.c"
        var $110=HEAP[$109]; //@line 1053 "xmltok_impl.c"
        var $111=($110)==62; //@line 1053 "xmltok_impl.c"
        if ($111) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1053 "xmltok_impl.c"
      case 28: // $bb29
        var $112=$ptr_addr; //@line 1054 "xmltok_impl.c"
        var $113=$112+2; //@line 1054 "xmltok_impl.c"
        var $114=$nextTokPtr_addr; //@line 1054 "xmltok_impl.c"
        HEAP[$114]=$113; //@line 1054 "xmltok_impl.c"
        $0=34; //@line 1055 "xmltok_impl.c"
        __label__ = 120; break; //@line 1055 "xmltok_impl.c"
      case 29: // $bb30
        var $115=$nextTokPtr_addr; //@line 1058 "xmltok_impl.c"
        var $116=$ptr_addr; //@line 1058 "xmltok_impl.c"
        HEAP[$115]=$116; //@line 1058 "xmltok_impl.c"
        $0=26; //@line 1059 "xmltok_impl.c"
        __label__ = 120; break; //@line 1059 "xmltok_impl.c"
      case 30: // $bb31
        var $117=$ptr_addr; //@line 1061 "xmltok_impl.c"
        var $118=$117+1; //@line 1061 "xmltok_impl.c"
        var $119=$nextTokPtr_addr; //@line 1061 "xmltok_impl.c"
        HEAP[$119]=$118; //@line 1061 "xmltok_impl.c"
        $0=23; //@line 1062 "xmltok_impl.c"
        __label__ = 120; break; //@line 1062 "xmltok_impl.c"
      case 31: // $bb32
        var $120=$ptr_addr; //@line 1064 "xmltok_impl.c"
        var $121=$120+1; //@line 1064 "xmltok_impl.c"
        $ptr_addr=$121; //@line 1064 "xmltok_impl.c"
        var $122=$ptr_addr; //@line 1065 "xmltok_impl.c"
        var $123=$end_addr; //@line 1065 "xmltok_impl.c"
        var $124=($122)==($123); //@line 1065 "xmltok_impl.c"
        if ($124) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1065 "xmltok_impl.c"
      case 32: // $bb33
        $0=-24; //@line 1066 "xmltok_impl.c"
        __label__ = 120; break; //@line 1066 "xmltok_impl.c"
      case 33: // $bb34
        var $125=$enc_addr; //@line 1067 "xmltok_impl.c"
        var $126=$125; //@line 1067 "xmltok_impl.c"
        var $127=$ptr_addr; //@line 1067 "xmltok_impl.c"
        var $128=HEAP[$127]; //@line 1067 "xmltok_impl.c"
        var $129=($128); //@line 1067 "xmltok_impl.c"
        var $130=$126+76; //@line 1067 "xmltok_impl.c"
        var $131=$130+$129; //@line 1067 "xmltok_impl.c"
        var $132=HEAP[$131]; //@line 1067 "xmltok_impl.c"
        var $133=($132); //@line 1067 "xmltok_impl.c"
        if ($133 == 9) {
          __label__ = 37; break;
        }
        else if ($133 == 10) {
          __label__ = 37; break;
        }
        else if ($133 == 11) {
          __label__ = 37; break;
        }
        else if ($133 == 15) {
          __label__ = 35; break;
        }
        else if ($133 == 21) {
          __label__ = 37; break;
        }
        else if ($133 == 32) {
          __label__ = 37; break;
        }
        else if ($133 == 33) {
          __label__ = 34; break;
        }
        else if ($133 == 34) {
          __label__ = 36; break;
        }
        else if ($133 == 35) {
          __label__ = 37; break;
        }
        else if ($133 == 36) {
          __label__ = 37; break;
        }
        else {
        __label__ = 38; break;
        }
        
      case 34: // $bb35
        var $134=$ptr_addr; //@line 1069 "xmltok_impl.c"
        var $135=$134+1; //@line 1069 "xmltok_impl.c"
        var $136=$nextTokPtr_addr; //@line 1069 "xmltok_impl.c"
        HEAP[$136]=$135; //@line 1069 "xmltok_impl.c"
        $0=36; //@line 1070 "xmltok_impl.c"
        __label__ = 120; break; //@line 1070 "xmltok_impl.c"
      case 35: // $bb36
        var $137=$ptr_addr; //@line 1072 "xmltok_impl.c"
        var $138=$137+1; //@line 1072 "xmltok_impl.c"
        var $139=$nextTokPtr_addr; //@line 1072 "xmltok_impl.c"
        HEAP[$139]=$138; //@line 1072 "xmltok_impl.c"
        $0=35; //@line 1073 "xmltok_impl.c"
        __label__ = 120; break; //@line 1073 "xmltok_impl.c"
      case 36: // $bb37
        var $140=$ptr_addr; //@line 1075 "xmltok_impl.c"
        var $141=$140+1; //@line 1075 "xmltok_impl.c"
        var $142=$nextTokPtr_addr; //@line 1075 "xmltok_impl.c"
        HEAP[$142]=$141; //@line 1075 "xmltok_impl.c"
        $0=37; //@line 1076 "xmltok_impl.c"
        __label__ = 120; break; //@line 1076 "xmltok_impl.c"
      case 37: // $bb38
        var $143=$nextTokPtr_addr; //@line 1080 "xmltok_impl.c"
        var $144=$ptr_addr; //@line 1080 "xmltok_impl.c"
        HEAP[$143]=$144; //@line 1080 "xmltok_impl.c"
        $0=24; //@line 1081 "xmltok_impl.c"
        __label__ = 120; break; //@line 1081 "xmltok_impl.c"
      case 38: // $bb39
        var $145=$nextTokPtr_addr; //@line 1083 "xmltok_impl.c"
        var $146=$ptr_addr; //@line 1083 "xmltok_impl.c"
        HEAP[$145]=$146; //@line 1083 "xmltok_impl.c"
        $0=0; //@line 1084 "xmltok_impl.c"
        __label__ = 120; break; //@line 1084 "xmltok_impl.c"
      case 39: // $bb40
        var $147=$ptr_addr; //@line 1086 "xmltok_impl.c"
        var $148=$147+1; //@line 1086 "xmltok_impl.c"
        var $149=$nextTokPtr_addr; //@line 1086 "xmltok_impl.c"
        HEAP[$149]=$148; //@line 1086 "xmltok_impl.c"
        $0=21; //@line 1087 "xmltok_impl.c"
        __label__ = 120; break; //@line 1087 "xmltok_impl.c"
      case 40: // $bb41
        var $150=$ptr_addr; //@line 1089 "xmltok_impl.c"
        var $151=$150+1; //@line 1089 "xmltok_impl.c"
        var $152=$nextTokPtr_addr; //@line 1089 "xmltok_impl.c"
        HEAP[$152]=$151; //@line 1089 "xmltok_impl.c"
        $0=17; //@line 1090 "xmltok_impl.c"
        __label__ = 120; break; //@line 1090 "xmltok_impl.c"
      case 41: // $bb42
        var $153=$ptr_addr; //@line 1092 "xmltok_impl.c"
        var $154=$153+1; //@line 1092 "xmltok_impl.c"
        var $155=$enc_addr; //@line 1092 "xmltok_impl.c"
        var $156=$end_addr; //@line 1092 "xmltok_impl.c"
        var $157=$nextTokPtr_addr; //@line 1092 "xmltok_impl.c"
        var $158=_normal_scanPoundName($155, $154, $156, $157); //@line 1092 "xmltok_impl.c"
        $0=$158; //@line 1092 "xmltok_impl.c"
        __label__ = 120; break; //@line 1092 "xmltok_impl.c"
      case 42: // $bb43
        var $159=$end_addr; //@line 1109 "xmltok_impl.c"
        var $160=($159); //@line 1109 "xmltok_impl.c"
        var $161=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $162=($161); //@line 1109 "xmltok_impl.c"
        var $163=($160) - ($162); //@line 1109 "xmltok_impl.c"
        var $164=($163) <= 1; //@line 1109 "xmltok_impl.c"
        if ($164) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 1109 "xmltok_impl.c"
      case 43: // $bb44
        $0=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 120; break; //@line 1109 "xmltok_impl.c"
      case 44: // $bb45
        var $165=$enc_addr; //@line 1109 "xmltok_impl.c"
        var $166=$165; //@line 1109 "xmltok_impl.c"
        var $167=$166+344; //@line 1109 "xmltok_impl.c"
        var $168=HEAP[$167]; //@line 1109 "xmltok_impl.c"
        var $169=$enc_addr; //@line 1109 "xmltok_impl.c"
        var $170=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $171=FUNCTION_TABLE[$168]($169, $170); //@line 1109 "xmltok_impl.c"
        var $172=($171)!=0; //@line 1109 "xmltok_impl.c"
        if ($172) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 1109 "xmltok_impl.c"
      case 45: // $bb46
        var $173=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $174=$173+2; //@line 1109 "xmltok_impl.c"
        $ptr_addr=$174; //@line 1109 "xmltok_impl.c"
        $tok=18; //@line 1109 "xmltok_impl.c"
        __label__ = 118; break; //@line 1109 "xmltok_impl.c"
      case 46: // $bb47
        var $175=$enc_addr; //@line 1109 "xmltok_impl.c"
        var $176=$175; //@line 1109 "xmltok_impl.c"
        var $177=$176+332; //@line 1109 "xmltok_impl.c"
        var $178=HEAP[$177]; //@line 1109 "xmltok_impl.c"
        var $179=$enc_addr; //@line 1109 "xmltok_impl.c"
        var $180=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $181=FUNCTION_TABLE[$178]($179, $180); //@line 1109 "xmltok_impl.c"
        var $182=($181)!=0; //@line 1109 "xmltok_impl.c"
        if ($182) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1109 "xmltok_impl.c"
      case 47: // $bb48
        var $183=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $184=$183+2; //@line 1109 "xmltok_impl.c"
        $ptr_addr=$184; //@line 1109 "xmltok_impl.c"
        $tok=19; //@line 1109 "xmltok_impl.c"
        __label__ = 118; break; //@line 1109 "xmltok_impl.c"
      case 48: // $bb49
        var $185=$nextTokPtr_addr; //@line 1109 "xmltok_impl.c"
        var $186=$ptr_addr; //@line 1109 "xmltok_impl.c"
        HEAP[$185]=$186; //@line 1109 "xmltok_impl.c"
        $0=0; //@line 1109 "xmltok_impl.c"
        __label__ = 120; break; //@line 1109 "xmltok_impl.c"
      case 49: // $bb50
        var $187=$end_addr; //@line 1109 "xmltok_impl.c"
        var $188=($187); //@line 1109 "xmltok_impl.c"
        var $189=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $190=($189); //@line 1109 "xmltok_impl.c"
        var $191=($188) - ($190); //@line 1109 "xmltok_impl.c"
        var $192=($191) <= 2; //@line 1109 "xmltok_impl.c"
        if ($192) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 1109 "xmltok_impl.c"
      case 50: // $bb51
        $0=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 120; break; //@line 1109 "xmltok_impl.c"
      case 51: // $bb52
        var $193=$enc_addr; //@line 1109 "xmltok_impl.c"
        var $194=$193; //@line 1109 "xmltok_impl.c"
        var $195=$194+348; //@line 1109 "xmltok_impl.c"
        var $196=HEAP[$195]; //@line 1109 "xmltok_impl.c"
        var $197=$enc_addr; //@line 1109 "xmltok_impl.c"
        var $198=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $199=FUNCTION_TABLE[$196]($197, $198); //@line 1109 "xmltok_impl.c"
        var $200=($199)!=0; //@line 1109 "xmltok_impl.c"
        if ($200) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 1109 "xmltok_impl.c"
      case 52: // $bb53
        var $201=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $202=$201+3; //@line 1109 "xmltok_impl.c"
        $ptr_addr=$202; //@line 1109 "xmltok_impl.c"
        $tok=18; //@line 1109 "xmltok_impl.c"
        __label__ = 118; break; //@line 1109 "xmltok_impl.c"
      case 53: // $bb54
        var $203=$enc_addr; //@line 1109 "xmltok_impl.c"
        var $204=$203; //@line 1109 "xmltok_impl.c"
        var $205=$204+336; //@line 1109 "xmltok_impl.c"
        var $206=HEAP[$205]; //@line 1109 "xmltok_impl.c"
        var $207=$enc_addr; //@line 1109 "xmltok_impl.c"
        var $208=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $209=FUNCTION_TABLE[$206]($207, $208); //@line 1109 "xmltok_impl.c"
        var $210=($209)!=0; //@line 1109 "xmltok_impl.c"
        if ($210) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 1109 "xmltok_impl.c"
      case 54: // $bb55
        var $211=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $212=$211+3; //@line 1109 "xmltok_impl.c"
        $ptr_addr=$212; //@line 1109 "xmltok_impl.c"
        $tok=19; //@line 1109 "xmltok_impl.c"
        __label__ = 118; break; //@line 1109 "xmltok_impl.c"
      case 55: // $bb56
        var $213=$nextTokPtr_addr; //@line 1109 "xmltok_impl.c"
        var $214=$ptr_addr; //@line 1109 "xmltok_impl.c"
        HEAP[$213]=$214; //@line 1109 "xmltok_impl.c"
        $0=0; //@line 1109 "xmltok_impl.c"
        __label__ = 120; break; //@line 1109 "xmltok_impl.c"
      case 56: // $bb57
        var $215=$end_addr; //@line 1109 "xmltok_impl.c"
        var $216=($215); //@line 1109 "xmltok_impl.c"
        var $217=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $218=($217); //@line 1109 "xmltok_impl.c"
        var $219=($216) - ($218); //@line 1109 "xmltok_impl.c"
        var $220=($219) <= 3; //@line 1109 "xmltok_impl.c"
        if ($220) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 1109 "xmltok_impl.c"
      case 57: // $bb58
        $0=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 120; break; //@line 1109 "xmltok_impl.c"
      case 58: // $bb59
        var $221=$enc_addr; //@line 1109 "xmltok_impl.c"
        var $222=$221; //@line 1109 "xmltok_impl.c"
        var $223=$222+352; //@line 1109 "xmltok_impl.c"
        var $224=HEAP[$223]; //@line 1109 "xmltok_impl.c"
        var $225=$enc_addr; //@line 1109 "xmltok_impl.c"
        var $226=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $227=FUNCTION_TABLE[$224]($225, $226); //@line 1109 "xmltok_impl.c"
        var $228=($227)!=0; //@line 1109 "xmltok_impl.c"
        if ($228) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 1109 "xmltok_impl.c"
      case 59: // $bb60
        var $229=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $230=$229+4; //@line 1109 "xmltok_impl.c"
        $ptr_addr=$230; //@line 1109 "xmltok_impl.c"
        $tok=18; //@line 1109 "xmltok_impl.c"
        __label__ = 118; break; //@line 1109 "xmltok_impl.c"
      case 60: // $bb61
        var $231=$enc_addr; //@line 1109 "xmltok_impl.c"
        var $232=$231; //@line 1109 "xmltok_impl.c"
        var $233=$232+340; //@line 1109 "xmltok_impl.c"
        var $234=HEAP[$233]; //@line 1109 "xmltok_impl.c"
        var $235=$enc_addr; //@line 1109 "xmltok_impl.c"
        var $236=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $237=FUNCTION_TABLE[$234]($235, $236); //@line 1109 "xmltok_impl.c"
        var $238=($237)!=0; //@line 1109 "xmltok_impl.c"
        if ($238) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 1109 "xmltok_impl.c"
      case 61: // $bb62
        var $239=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $240=$239+4; //@line 1109 "xmltok_impl.c"
        $ptr_addr=$240; //@line 1109 "xmltok_impl.c"
        $tok=19; //@line 1109 "xmltok_impl.c"
        __label__ = 118; break; //@line 1109 "xmltok_impl.c"
      case 62: // $bb63
        var $241=$nextTokPtr_addr; //@line 1109 "xmltok_impl.c"
        var $242=$ptr_addr; //@line 1109 "xmltok_impl.c"
        HEAP[$241]=$242; //@line 1109 "xmltok_impl.c"
        $0=0; //@line 1109 "xmltok_impl.c"
        __label__ = 120; break; //@line 1109 "xmltok_impl.c"
      case 63: // $bb64
        $tok=18; //@line 1113 "xmltok_impl.c"
        var $243=$ptr_addr; //@line 1114 "xmltok_impl.c"
        var $244=$243+1; //@line 1114 "xmltok_impl.c"
        $ptr_addr=$244; //@line 1114 "xmltok_impl.c"
        __label__ = 118; break; //@line 1114 "xmltok_impl.c"
      case 64: // $bb65
        $tok=19; //@line 1122 "xmltok_impl.c"
        var $245=$ptr_addr; //@line 1123 "xmltok_impl.c"
        var $246=$245+1; //@line 1123 "xmltok_impl.c"
        $ptr_addr=$246; //@line 1123 "xmltok_impl.c"
        __label__ = 118; break; //@line 1123 "xmltok_impl.c"
      case 65: // $bb66
        var $247=$nextTokPtr_addr; //@line 1138 "xmltok_impl.c"
        var $248=$ptr_addr; //@line 1138 "xmltok_impl.c"
        HEAP[$247]=$248; //@line 1138 "xmltok_impl.c"
        $0=0; //@line 1139 "xmltok_impl.c"
        __label__ = 120; break; //@line 1139 "xmltok_impl.c"
      case 66: // $bb68
        var $249=$enc_addr; //@line 1142 "xmltok_impl.c"
        var $250=$249; //@line 1142 "xmltok_impl.c"
        var $251=$ptr_addr; //@line 1142 "xmltok_impl.c"
        var $252=HEAP[$251]; //@line 1142 "xmltok_impl.c"
        var $253=($252); //@line 1142 "xmltok_impl.c"
        var $254=$250+76; //@line 1142 "xmltok_impl.c"
        var $255=$254+$253; //@line 1142 "xmltok_impl.c"
        var $256=HEAP[$255]; //@line 1142 "xmltok_impl.c"
        var $257=($256); //@line 1142 "xmltok_impl.c"
        if ($257 == 5) {
          __label__ = 69; break;
        }
        else if ($257 == 6) {
          __label__ = 74; break;
        }
        else if ($257 == 7) {
          __label__ = 79; break;
        }
        else if ($257 == 9) {
          __label__ = 84; break;
        }
        else if ($257 == 10) {
          __label__ = 84; break;
        }
        else if ($257 == 11) {
          __label__ = 84; break;
        }
        else if ($257 == 15) {
          __label__ = 114; break;
        }
        else if ($257 == 20) {
          __label__ = 84; break;
        }
        else if ($257 == 21) {
          __label__ = 84; break;
        }
        else if ($257 == 22) {
          __label__ = 68; break;
        }
        else if ($257 == 23) {
          __label__ = 85; break;
        }
        else if ($257 == 24) {
          __label__ = 68; break;
        }
        else if ($257 == 25) {
          __label__ = 68; break;
        }
        else if ($257 == 26) {
          __label__ = 68; break;
        }
        else if ($257 == 27) {
          __label__ = 68; break;
        }
        else if ($257 == 29) {
          __label__ = 67; break;
        }
        else if ($257 == 30) {
          __label__ = 84; break;
        }
        else if ($257 == 32) {
          __label__ = 84; break;
        }
        else if ($257 == 33) {
          __label__ = 111; break;
        }
        else if ($257 == 34) {
          __label__ = 108; break;
        }
        else if ($257 == 35) {
          __label__ = 84; break;
        }
        else if ($257 == 36) {
          __label__ = 84; break;
        }
        else {
        __label__ = 117; break;
        }
        
      case 67: // $bb69
        var $258=$nextTokPtr_addr; //@line 1143 "xmltok_impl.c"
        var $259=$ptr_addr; //@line 1143 "xmltok_impl.c"
        HEAP[$258]=$259; //@line 1143 "xmltok_impl.c"
        $0=0; //@line 1143 "xmltok_impl.c"
        __label__ = 120; break; //@line 1143 "xmltok_impl.c"
      case 68: // $bb70
        var $260=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $261=$260+1; //@line 1143 "xmltok_impl.c"
        $ptr_addr=$261; //@line 1143 "xmltok_impl.c"
        __label__ = 118; break; //@line 1143 "xmltok_impl.c"
      case 69: // $bb71
        var $262=$end_addr; //@line 1143 "xmltok_impl.c"
        var $263=($262); //@line 1143 "xmltok_impl.c"
        var $264=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $265=($264); //@line 1143 "xmltok_impl.c"
        var $266=($263) - ($265); //@line 1143 "xmltok_impl.c"
        var $267=($266) <= 1; //@line 1143 "xmltok_impl.c"
        if ($267) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 1143 "xmltok_impl.c"
      case 70: // $bb72
        $0=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 120; break; //@line 1143 "xmltok_impl.c"
      case 71: // $bb73
        var $268=$enc_addr; //@line 1143 "xmltok_impl.c"
        var $269=$268; //@line 1143 "xmltok_impl.c"
        var $270=$269+332; //@line 1143 "xmltok_impl.c"
        var $271=HEAP[$270]; //@line 1143 "xmltok_impl.c"
        var $272=$enc_addr; //@line 1143 "xmltok_impl.c"
        var $273=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $274=FUNCTION_TABLE[$271]($272, $273); //@line 1143 "xmltok_impl.c"
        var $275=($274)==0; //@line 1143 "xmltok_impl.c"
        if ($275) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 1143 "xmltok_impl.c"
      case 72: // $bb74
        var $276=$nextTokPtr_addr; //@line 1143 "xmltok_impl.c"
        var $277=$ptr_addr; //@line 1143 "xmltok_impl.c"
        HEAP[$276]=$277; //@line 1143 "xmltok_impl.c"
        $0=0; //@line 1143 "xmltok_impl.c"
        __label__ = 120; break; //@line 1143 "xmltok_impl.c"
      case 73: // $bb75
        var $278=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $279=$278+2; //@line 1143 "xmltok_impl.c"
        $ptr_addr=$279; //@line 1143 "xmltok_impl.c"
        __label__ = 118; break; //@line 1143 "xmltok_impl.c"
      case 74: // $bb76
        var $280=$end_addr; //@line 1143 "xmltok_impl.c"
        var $281=($280); //@line 1143 "xmltok_impl.c"
        var $282=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $283=($282); //@line 1143 "xmltok_impl.c"
        var $284=($281) - ($283); //@line 1143 "xmltok_impl.c"
        var $285=($284) <= 2; //@line 1143 "xmltok_impl.c"
        if ($285) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 1143 "xmltok_impl.c"
      case 75: // $bb77
        $0=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 120; break; //@line 1143 "xmltok_impl.c"
      case 76: // $bb78
        var $286=$enc_addr; //@line 1143 "xmltok_impl.c"
        var $287=$286; //@line 1143 "xmltok_impl.c"
        var $288=$287+336; //@line 1143 "xmltok_impl.c"
        var $289=HEAP[$288]; //@line 1143 "xmltok_impl.c"
        var $290=$enc_addr; //@line 1143 "xmltok_impl.c"
        var $291=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $292=FUNCTION_TABLE[$289]($290, $291); //@line 1143 "xmltok_impl.c"
        var $293=($292)==0; //@line 1143 "xmltok_impl.c"
        if ($293) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 1143 "xmltok_impl.c"
      case 77: // $bb79
        var $294=$nextTokPtr_addr; //@line 1143 "xmltok_impl.c"
        var $295=$ptr_addr; //@line 1143 "xmltok_impl.c"
        HEAP[$294]=$295; //@line 1143 "xmltok_impl.c"
        $0=0; //@line 1143 "xmltok_impl.c"
        __label__ = 120; break; //@line 1143 "xmltok_impl.c"
      case 78: // $bb80
        var $296=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $297=$296+3; //@line 1143 "xmltok_impl.c"
        $ptr_addr=$297; //@line 1143 "xmltok_impl.c"
        __label__ = 118; break; //@line 1143 "xmltok_impl.c"
      case 79: // $bb81
        var $298=$end_addr; //@line 1143 "xmltok_impl.c"
        var $299=($298); //@line 1143 "xmltok_impl.c"
        var $300=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $301=($300); //@line 1143 "xmltok_impl.c"
        var $302=($299) - ($301); //@line 1143 "xmltok_impl.c"
        var $303=($302) <= 3; //@line 1143 "xmltok_impl.c"
        if ($303) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 1143 "xmltok_impl.c"
      case 80: // $bb82
        $0=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 120; break; //@line 1143 "xmltok_impl.c"
      case 81: // $bb83
        var $304=$enc_addr; //@line 1143 "xmltok_impl.c"
        var $305=$304; //@line 1143 "xmltok_impl.c"
        var $306=$305+340; //@line 1143 "xmltok_impl.c"
        var $307=HEAP[$306]; //@line 1143 "xmltok_impl.c"
        var $308=$enc_addr; //@line 1143 "xmltok_impl.c"
        var $309=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $310=FUNCTION_TABLE[$307]($308, $309); //@line 1143 "xmltok_impl.c"
        var $311=($310)==0; //@line 1143 "xmltok_impl.c"
        if ($311) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 1143 "xmltok_impl.c"
      case 82: // $bb84
        var $312=$nextTokPtr_addr; //@line 1143 "xmltok_impl.c"
        var $313=$ptr_addr; //@line 1143 "xmltok_impl.c"
        HEAP[$312]=$313; //@line 1143 "xmltok_impl.c"
        $0=0; //@line 1143 "xmltok_impl.c"
        __label__ = 120; break; //@line 1143 "xmltok_impl.c"
      case 83: // $bb85
        var $314=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $315=$314+4; //@line 1143 "xmltok_impl.c"
        $ptr_addr=$315; //@line 1143 "xmltok_impl.c"
        __label__ = 118; break; //@line 1143 "xmltok_impl.c"
      case 84: // $bb86
        var $316=$nextTokPtr_addr; //@line 1147 "xmltok_impl.c"
        var $317=$ptr_addr; //@line 1147 "xmltok_impl.c"
        HEAP[$316]=$317; //@line 1147 "xmltok_impl.c"
        var $318=$tok; //@line 1148 "xmltok_impl.c"
        $0=$318; //@line 1148 "xmltok_impl.c"
        __label__ = 120; break; //@line 1148 "xmltok_impl.c"
      case 85: // $bb87
        var $319=$ptr_addr; //@line 1151 "xmltok_impl.c"
        var $320=$319+1; //@line 1151 "xmltok_impl.c"
        $ptr_addr=$320; //@line 1151 "xmltok_impl.c"
        var $321=$tok; //@line 1152 "xmltok_impl.c"
        if ($321 == 18) {
          __label__ = 86; break;
        }
        else if ($321 == 41) {
          __label__ = 107; break;
        }
        else {
        __label__ = 118; break;
        }
        
      case 86: // $bb88
        var $322=$ptr_addr; //@line 1154 "xmltok_impl.c"
        var $323=$end_addr; //@line 1154 "xmltok_impl.c"
        var $324=($322)==($323); //@line 1154 "xmltok_impl.c"
        if ($324) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 1154 "xmltok_impl.c"
      case 87: // $bb89
        $0=-1; //@line 1155 "xmltok_impl.c"
        __label__ = 120; break; //@line 1155 "xmltok_impl.c"
      case 88: // $bb90
        $tok=41; //@line 1156 "xmltok_impl.c"
        var $325=$enc_addr; //@line 1157 "xmltok_impl.c"
        var $326=$325; //@line 1157 "xmltok_impl.c"
        var $327=$ptr_addr; //@line 1157 "xmltok_impl.c"
        var $328=HEAP[$327]; //@line 1157 "xmltok_impl.c"
        var $329=($328); //@line 1157 "xmltok_impl.c"
        var $330=$326+76; //@line 1157 "xmltok_impl.c"
        var $331=$330+$329; //@line 1157 "xmltok_impl.c"
        var $332=HEAP[$331]; //@line 1157 "xmltok_impl.c"
        var $333=($332); //@line 1157 "xmltok_impl.c"
        if ($333 == 5) {
          __label__ = 91; break;
        }
        else if ($333 == 6) {
          __label__ = 96; break;
        }
        else if ($333 == 7) {
          __label__ = 101; break;
        }
        else if ($333 == 22) {
          __label__ = 90; break;
        }
        else if ($333 == 24) {
          __label__ = 90; break;
        }
        else if ($333 == 25) {
          __label__ = 90; break;
        }
        else if ($333 == 26) {
          __label__ = 90; break;
        }
        else if ($333 == 27) {
          __label__ = 90; break;
        }
        else if ($333 == 29) {
          __label__ = 89; break;
        }
        else {
        __label__ = 106; break;
        }
        
      case 89: // $bb91
        var $334=$nextTokPtr_addr; //@line 1158 "xmltok_impl.c"
        var $335=$ptr_addr; //@line 1158 "xmltok_impl.c"
        HEAP[$334]=$335; //@line 1158 "xmltok_impl.c"
        $0=0; //@line 1158 "xmltok_impl.c"
        __label__ = 120; break; //@line 1158 "xmltok_impl.c"
      case 90: // $bb92
        var $336=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $337=$336+1; //@line 1158 "xmltok_impl.c"
        $ptr_addr=$337; //@line 1158 "xmltok_impl.c"
        __label__ = 118; break; //@line 1158 "xmltok_impl.c"
      case 91: // $bb93
        var $338=$end_addr; //@line 1158 "xmltok_impl.c"
        var $339=($338); //@line 1158 "xmltok_impl.c"
        var $340=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $341=($340); //@line 1158 "xmltok_impl.c"
        var $342=($339) - ($341); //@line 1158 "xmltok_impl.c"
        var $343=($342) <= 1; //@line 1158 "xmltok_impl.c"
        if ($343) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 1158 "xmltok_impl.c"
      case 92: // $bb94
        $0=-2; //@line 1158 "xmltok_impl.c"
        __label__ = 120; break; //@line 1158 "xmltok_impl.c"
      case 93: // $bb95
        var $344=$enc_addr; //@line 1158 "xmltok_impl.c"
        var $345=$344; //@line 1158 "xmltok_impl.c"
        var $346=$345+332; //@line 1158 "xmltok_impl.c"
        var $347=HEAP[$346]; //@line 1158 "xmltok_impl.c"
        var $348=$enc_addr; //@line 1158 "xmltok_impl.c"
        var $349=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $350=FUNCTION_TABLE[$347]($348, $349); //@line 1158 "xmltok_impl.c"
        var $351=($350)==0; //@line 1158 "xmltok_impl.c"
        if ($351) { __label__ = 94; break; } else { __label__ = 95; break; } //@line 1158 "xmltok_impl.c"
      case 94: // $bb96
        var $352=$nextTokPtr_addr; //@line 1158 "xmltok_impl.c"
        var $353=$ptr_addr; //@line 1158 "xmltok_impl.c"
        HEAP[$352]=$353; //@line 1158 "xmltok_impl.c"
        $0=0; //@line 1158 "xmltok_impl.c"
        __label__ = 120; break; //@line 1158 "xmltok_impl.c"
      case 95: // $bb97
        var $354=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $355=$354+2; //@line 1158 "xmltok_impl.c"
        $ptr_addr=$355; //@line 1158 "xmltok_impl.c"
        __label__ = 118; break; //@line 1158 "xmltok_impl.c"
      case 96: // $bb98
        var $356=$end_addr; //@line 1158 "xmltok_impl.c"
        var $357=($356); //@line 1158 "xmltok_impl.c"
        var $358=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $359=($358); //@line 1158 "xmltok_impl.c"
        var $360=($357) - ($359); //@line 1158 "xmltok_impl.c"
        var $361=($360) <= 2; //@line 1158 "xmltok_impl.c"
        if ($361) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 1158 "xmltok_impl.c"
      case 97: // $bb99
        $0=-2; //@line 1158 "xmltok_impl.c"
        __label__ = 120; break; //@line 1158 "xmltok_impl.c"
      case 98: // $bb100
        var $362=$enc_addr; //@line 1158 "xmltok_impl.c"
        var $363=$362; //@line 1158 "xmltok_impl.c"
        var $364=$363+336; //@line 1158 "xmltok_impl.c"
        var $365=HEAP[$364]; //@line 1158 "xmltok_impl.c"
        var $366=$enc_addr; //@line 1158 "xmltok_impl.c"
        var $367=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $368=FUNCTION_TABLE[$365]($366, $367); //@line 1158 "xmltok_impl.c"
        var $369=($368)==0; //@line 1158 "xmltok_impl.c"
        if ($369) { __label__ = 99; break; } else { __label__ = 100; break; } //@line 1158 "xmltok_impl.c"
      case 99: // $bb101
        var $370=$nextTokPtr_addr; //@line 1158 "xmltok_impl.c"
        var $371=$ptr_addr; //@line 1158 "xmltok_impl.c"
        HEAP[$370]=$371; //@line 1158 "xmltok_impl.c"
        $0=0; //@line 1158 "xmltok_impl.c"
        __label__ = 120; break; //@line 1158 "xmltok_impl.c"
      case 100: // $bb102
        var $372=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $373=$372+3; //@line 1158 "xmltok_impl.c"
        $ptr_addr=$373; //@line 1158 "xmltok_impl.c"
        __label__ = 118; break; //@line 1158 "xmltok_impl.c"
      case 101: // $bb103
        var $374=$end_addr; //@line 1158 "xmltok_impl.c"
        var $375=($374); //@line 1158 "xmltok_impl.c"
        var $376=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $377=($376); //@line 1158 "xmltok_impl.c"
        var $378=($375) - ($377); //@line 1158 "xmltok_impl.c"
        var $379=($378) <= 3; //@line 1158 "xmltok_impl.c"
        if ($379) { __label__ = 102; break; } else { __label__ = 103; break; } //@line 1158 "xmltok_impl.c"
      case 102: // $bb104
        $0=-2; //@line 1158 "xmltok_impl.c"
        __label__ = 120; break; //@line 1158 "xmltok_impl.c"
      case 103: // $bb105
        var $380=$enc_addr; //@line 1158 "xmltok_impl.c"
        var $381=$380; //@line 1158 "xmltok_impl.c"
        var $382=$381+340; //@line 1158 "xmltok_impl.c"
        var $383=HEAP[$382]; //@line 1158 "xmltok_impl.c"
        var $384=$enc_addr; //@line 1158 "xmltok_impl.c"
        var $385=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $386=FUNCTION_TABLE[$383]($384, $385); //@line 1158 "xmltok_impl.c"
        var $387=($386)==0; //@line 1158 "xmltok_impl.c"
        if ($387) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 1158 "xmltok_impl.c"
      case 104: // $bb106
        var $388=$nextTokPtr_addr; //@line 1158 "xmltok_impl.c"
        var $389=$ptr_addr; //@line 1158 "xmltok_impl.c"
        HEAP[$388]=$389; //@line 1158 "xmltok_impl.c"
        $0=0; //@line 1158 "xmltok_impl.c"
        __label__ = 120; break; //@line 1158 "xmltok_impl.c"
      case 105: // $bb107
        var $390=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $391=$390+4; //@line 1158 "xmltok_impl.c"
        $ptr_addr=$391; //@line 1158 "xmltok_impl.c"
        __label__ = 118; break; //@line 1158 "xmltok_impl.c"
      case 106: // $bb108
        $tok=19; //@line 1160 "xmltok_impl.c"
        __label__ = 118; break; //@line 1160 "xmltok_impl.c"
      case 107: // $bb110
        $tok=19; //@line 1165 "xmltok_impl.c"
        __label__ = 118; break; //@line 1165 "xmltok_impl.c"
      case 108: // $bb112
        var $392=$tok; //@line 1171 "xmltok_impl.c"
        var $393=($392)==19; //@line 1171 "xmltok_impl.c"
        if ($393) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 1171 "xmltok_impl.c"
      case 109: // $bb113
        var $394=$nextTokPtr_addr; //@line 1172 "xmltok_impl.c"
        var $395=$ptr_addr; //@line 1172 "xmltok_impl.c"
        HEAP[$394]=$395; //@line 1172 "xmltok_impl.c"
        $0=0; //@line 1173 "xmltok_impl.c"
        __label__ = 120; break; //@line 1173 "xmltok_impl.c"
      case 110: // $bb114
        var $396=$ptr_addr; //@line 1175 "xmltok_impl.c"
        var $397=$396+1; //@line 1175 "xmltok_impl.c"
        var $398=$nextTokPtr_addr; //@line 1175 "xmltok_impl.c"
        HEAP[$398]=$397; //@line 1175 "xmltok_impl.c"
        $0=32; //@line 1176 "xmltok_impl.c"
        __label__ = 120; break; //@line 1176 "xmltok_impl.c"
      case 111: // $bb115
        var $399=$tok; //@line 1178 "xmltok_impl.c"
        var $400=($399)==19; //@line 1178 "xmltok_impl.c"
        if ($400) { __label__ = 112; break; } else { __label__ = 113; break; } //@line 1178 "xmltok_impl.c"
      case 112: // $bb116
        var $401=$nextTokPtr_addr; //@line 1179 "xmltok_impl.c"
        var $402=$ptr_addr; //@line 1179 "xmltok_impl.c"
        HEAP[$401]=$402; //@line 1179 "xmltok_impl.c"
        $0=0; //@line 1180 "xmltok_impl.c"
        __label__ = 120; break; //@line 1180 "xmltok_impl.c"
      case 113: // $bb117
        var $403=$ptr_addr; //@line 1182 "xmltok_impl.c"
        var $404=$403+1; //@line 1182 "xmltok_impl.c"
        var $405=$nextTokPtr_addr; //@line 1182 "xmltok_impl.c"
        HEAP[$405]=$404; //@line 1182 "xmltok_impl.c"
        $0=31; //@line 1183 "xmltok_impl.c"
        __label__ = 120; break; //@line 1183 "xmltok_impl.c"
      case 114: // $bb118
        var $406=$tok; //@line 1185 "xmltok_impl.c"
        var $407=($406)==19; //@line 1185 "xmltok_impl.c"
        if ($407) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 1185 "xmltok_impl.c"
      case 115: // $bb119
        var $408=$nextTokPtr_addr; //@line 1186 "xmltok_impl.c"
        var $409=$ptr_addr; //@line 1186 "xmltok_impl.c"
        HEAP[$408]=$409; //@line 1186 "xmltok_impl.c"
        $0=0; //@line 1187 "xmltok_impl.c"
        __label__ = 120; break; //@line 1187 "xmltok_impl.c"
      case 116: // $bb120
        var $410=$ptr_addr; //@line 1189 "xmltok_impl.c"
        var $411=$410+1; //@line 1189 "xmltok_impl.c"
        var $412=$nextTokPtr_addr; //@line 1189 "xmltok_impl.c"
        HEAP[$412]=$411; //@line 1189 "xmltok_impl.c"
        $0=30; //@line 1190 "xmltok_impl.c"
        __label__ = 120; break; //@line 1190 "xmltok_impl.c"
      case 117: // $bb121
        var $413=$nextTokPtr_addr; //@line 1192 "xmltok_impl.c"
        var $414=$ptr_addr; //@line 1192 "xmltok_impl.c"
        HEAP[$413]=$414; //@line 1192 "xmltok_impl.c"
        $0=0; //@line 1193 "xmltok_impl.c"
        __label__ = 120; break; //@line 1193 "xmltok_impl.c"
      case 118: // $bb122
        var $415=$ptr_addr; //@line 1141 "xmltok_impl.c"
        var $416=$end_addr; //@line 1141 "xmltok_impl.c"
        var $417=($415)!=($416); //@line 1141 "xmltok_impl.c"
        if ($417) { __label__ = 66; break; } else { __label__ = 119; break; } //@line 1141 "xmltok_impl.c"
      case 119: // $bb123
        var $418=$tok; //@line 1196 "xmltok_impl.c"
        var $419=0 - ($418); //@line 1196 "xmltok_impl.c"
        $0=$419; //@line 1196 "xmltok_impl.c"
        __label__ = 120; break; //@line 1196 "xmltok_impl.c"
      case 120: // $bb124
        var $420=$0; //@line 974 "xmltok_impl.c"
        $retval=$420; //@line 974 "xmltok_impl.c"
        var $retval125=$retval; //@line 974 "xmltok_impl.c"
        ;
        return $retval125; //@line 974 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_attributeValueTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $start;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 1204 "xmltok_impl.c"
        var $2=$end_addr; //@line 1204 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1204 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1204 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 1205 "xmltok_impl.c"
        __label__ = 27; break; //@line 1205 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 1206 "xmltok_impl.c"
        $start=$4; //@line 1206 "xmltok_impl.c"
        __label__ = 25; break; //@line 1206 "xmltok_impl.c"
      case 3: // $bb2
        var $5=$enc_addr; //@line 1208 "xmltok_impl.c"
        var $6=$5; //@line 1208 "xmltok_impl.c"
        var $7=$ptr_addr; //@line 1208 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1208 "xmltok_impl.c"
        var $9=($8); //@line 1208 "xmltok_impl.c"
        var $10=$6+76; //@line 1208 "xmltok_impl.c"
        var $11=$10+$9; //@line 1208 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1208 "xmltok_impl.c"
        var $13=($12); //@line 1208 "xmltok_impl.c"
        if ($13 == 2) {
          __label__ = 10; break;
        }
        else if ($13 == 3) {
          __label__ = 7; break;
        }
        else if ($13 == 5) {
          __label__ = 4; break;
        }
        else if ($13 == 6) {
          __label__ = 5; break;
        }
        else if ($13 == 7) {
          __label__ = 6; break;
        }
        else if ($13 == 9) {
          __label__ = 14; break;
        }
        else if ($13 == 10) {
          __label__ = 11; break;
        }
        else if ($13 == 21) {
          __label__ = 21; break;
        }
        else {
        __label__ = 24; break;
        }
        
      case 4: // $bb3
        var $14=$ptr_addr; //@line 1211 "xmltok_impl.c"
        var $15=$14+2; //@line 1211 "xmltok_impl.c"
        $ptr_addr=$15; //@line 1211 "xmltok_impl.c"
        __label__ = 25; break; //@line 1211 "xmltok_impl.c"
      case 5: // $bb4
        var $16=$ptr_addr; //@line 1211 "xmltok_impl.c"
        var $17=$16+3; //@line 1211 "xmltok_impl.c"
        $ptr_addr=$17; //@line 1211 "xmltok_impl.c"
        __label__ = 25; break; //@line 1211 "xmltok_impl.c"
      case 6: // $bb5
        var $18=$ptr_addr; //@line 1211 "xmltok_impl.c"
        var $19=$18+4; //@line 1211 "xmltok_impl.c"
        $ptr_addr=$19; //@line 1211 "xmltok_impl.c"
        __label__ = 25; break; //@line 1211 "xmltok_impl.c"
      case 7: // $bb6
        var $20=$ptr_addr; //@line 1214 "xmltok_impl.c"
        var $21=$start; //@line 1214 "xmltok_impl.c"
        var $22=($20)==($21); //@line 1214 "xmltok_impl.c"
        if ($22) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1214 "xmltok_impl.c"
      case 8: // $bb7
        var $23=$ptr_addr; //@line 1215 "xmltok_impl.c"
        var $24=$23+1; //@line 1215 "xmltok_impl.c"
        var $25=$enc_addr; //@line 1215 "xmltok_impl.c"
        var $26=$end_addr; //@line 1215 "xmltok_impl.c"
        var $27=$nextTokPtr_addr; //@line 1215 "xmltok_impl.c"
        var $28=_normal_scanRef($25, $24, $26, $27); //@line 1215 "xmltok_impl.c"
        $0=$28; //@line 1215 "xmltok_impl.c"
        __label__ = 27; break; //@line 1215 "xmltok_impl.c"
      case 9: // $bb8
        var $29=$nextTokPtr_addr; //@line 1216 "xmltok_impl.c"
        var $30=$ptr_addr; //@line 1216 "xmltok_impl.c"
        HEAP[$29]=$30; //@line 1216 "xmltok_impl.c"
        $0=6; //@line 1217 "xmltok_impl.c"
        __label__ = 27; break; //@line 1217 "xmltok_impl.c"
      case 10: // $bb9
        var $31=$nextTokPtr_addr; //@line 1220 "xmltok_impl.c"
        var $32=$ptr_addr; //@line 1220 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 1220 "xmltok_impl.c"
        $0=0; //@line 1221 "xmltok_impl.c"
        __label__ = 27; break; //@line 1221 "xmltok_impl.c"
      case 11: // $bb10
        var $33=$ptr_addr; //@line 1223 "xmltok_impl.c"
        var $34=$start; //@line 1223 "xmltok_impl.c"
        var $35=($33)==($34); //@line 1223 "xmltok_impl.c"
        if ($35) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1223 "xmltok_impl.c"
      case 12: // $bb11
        var $36=$ptr_addr; //@line 1224 "xmltok_impl.c"
        var $37=$36+1; //@line 1224 "xmltok_impl.c"
        var $38=$nextTokPtr_addr; //@line 1224 "xmltok_impl.c"
        HEAP[$38]=$37; //@line 1224 "xmltok_impl.c"
        $0=7; //@line 1225 "xmltok_impl.c"
        __label__ = 27; break; //@line 1225 "xmltok_impl.c"
      case 13: // $bb12
        var $39=$nextTokPtr_addr; //@line 1227 "xmltok_impl.c"
        var $40=$ptr_addr; //@line 1227 "xmltok_impl.c"
        HEAP[$39]=$40; //@line 1227 "xmltok_impl.c"
        $0=6; //@line 1228 "xmltok_impl.c"
        __label__ = 27; break; //@line 1228 "xmltok_impl.c"
      case 14: // $bb13
        var $41=$ptr_addr; //@line 1230 "xmltok_impl.c"
        var $42=$start; //@line 1230 "xmltok_impl.c"
        var $43=($41)==($42); //@line 1230 "xmltok_impl.c"
        if ($43) { __label__ = 15; break; } else { __label__ = 20; break; } //@line 1230 "xmltok_impl.c"
      case 15: // $bb14
        var $44=$ptr_addr; //@line 1231 "xmltok_impl.c"
        var $45=$44+1; //@line 1231 "xmltok_impl.c"
        $ptr_addr=$45; //@line 1231 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 1232 "xmltok_impl.c"
        var $47=$end_addr; //@line 1232 "xmltok_impl.c"
        var $48=($46)==($47); //@line 1232 "xmltok_impl.c"
        if ($48) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1232 "xmltok_impl.c"
      case 16: // $bb15
        $0=-3; //@line 1233 "xmltok_impl.c"
        __label__ = 27; break; //@line 1233 "xmltok_impl.c"
      case 17: // $bb16
        var $49=$enc_addr; //@line 1234 "xmltok_impl.c"
        var $50=$49; //@line 1234 "xmltok_impl.c"
        var $51=$ptr_addr; //@line 1234 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 1234 "xmltok_impl.c"
        var $53=($52); //@line 1234 "xmltok_impl.c"
        var $54=$50+76; //@line 1234 "xmltok_impl.c"
        var $55=$54+$53; //@line 1234 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 1234 "xmltok_impl.c"
        var $57=($56)==10; //@line 1234 "xmltok_impl.c"
        if ($57) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1234 "xmltok_impl.c"
      case 18: // $bb17
        var $58=$ptr_addr; //@line 1235 "xmltok_impl.c"
        var $59=$58+1; //@line 1235 "xmltok_impl.c"
        $ptr_addr=$59; //@line 1235 "xmltok_impl.c"
        __label__ = 19; break; //@line 1235 "xmltok_impl.c"
      case 19: // $bb18
        var $60=$nextTokPtr_addr; //@line 1236 "xmltok_impl.c"
        var $61=$ptr_addr; //@line 1236 "xmltok_impl.c"
        HEAP[$60]=$61; //@line 1236 "xmltok_impl.c"
        $0=7; //@line 1237 "xmltok_impl.c"
        __label__ = 27; break; //@line 1237 "xmltok_impl.c"
      case 20: // $bb19
        var $62=$nextTokPtr_addr; //@line 1239 "xmltok_impl.c"
        var $63=$ptr_addr; //@line 1239 "xmltok_impl.c"
        HEAP[$62]=$63; //@line 1239 "xmltok_impl.c"
        $0=6; //@line 1240 "xmltok_impl.c"
        __label__ = 27; break; //@line 1240 "xmltok_impl.c"
      case 21: // $bb20
        var $64=$ptr_addr; //@line 1242 "xmltok_impl.c"
        var $65=$start; //@line 1242 "xmltok_impl.c"
        var $66=($64)==($65); //@line 1242 "xmltok_impl.c"
        if ($66) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1242 "xmltok_impl.c"
      case 22: // $bb21
        var $67=$ptr_addr; //@line 1243 "xmltok_impl.c"
        var $68=$67+1; //@line 1243 "xmltok_impl.c"
        var $69=$nextTokPtr_addr; //@line 1243 "xmltok_impl.c"
        HEAP[$69]=$68; //@line 1243 "xmltok_impl.c"
        $0=39; //@line 1244 "xmltok_impl.c"
        __label__ = 27; break; //@line 1244 "xmltok_impl.c"
      case 23: // $bb22
        var $70=$nextTokPtr_addr; //@line 1246 "xmltok_impl.c"
        var $71=$ptr_addr; //@line 1246 "xmltok_impl.c"
        HEAP[$70]=$71; //@line 1246 "xmltok_impl.c"
        $0=6; //@line 1247 "xmltok_impl.c"
        __label__ = 27; break; //@line 1247 "xmltok_impl.c"
      case 24: // $bb23
        var $72=$ptr_addr; //@line 1249 "xmltok_impl.c"
        var $73=$72+1; //@line 1249 "xmltok_impl.c"
        $ptr_addr=$73; //@line 1249 "xmltok_impl.c"
        __label__ = 25; break; //@line 1249 "xmltok_impl.c"
      case 25: // $bb24
        var $74=$ptr_addr; //@line 1207 "xmltok_impl.c"
        var $75=$end_addr; //@line 1207 "xmltok_impl.c"
        var $76=($74)!=($75); //@line 1207 "xmltok_impl.c"
        if ($76) { __label__ = 3; break; } else { __label__ = 26; break; } //@line 1207 "xmltok_impl.c"
      case 26: // $bb25
        var $77=$nextTokPtr_addr; //@line 1253 "xmltok_impl.c"
        var $78=$ptr_addr; //@line 1253 "xmltok_impl.c"
        HEAP[$77]=$78; //@line 1253 "xmltok_impl.c"
        $0=6; //@line 1254 "xmltok_impl.c"
        __label__ = 27; break; //@line 1254 "xmltok_impl.c"
      case 27: // $bb26
        var $79=$0; //@line 1205 "xmltok_impl.c"
        $retval=$79; //@line 1205 "xmltok_impl.c"
        var $retval27=$retval; //@line 1205 "xmltok_impl.c"
        ;
        return $retval27; //@line 1205 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_entityValueTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_458;
        var $0;
        var $start;
        var $tok;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 1262 "xmltok_impl.c"
        var $2=$end_addr; //@line 1262 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1262 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1262 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 1263 "xmltok_impl.c"
        __label__ = 29; break; //@line 1263 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 1264 "xmltok_impl.c"
        $start=$4; //@line 1264 "xmltok_impl.c"
        __label__ = 27; break; //@line 1264 "xmltok_impl.c"
      case 3: // $bb2
        var $5=$enc_addr; //@line 1266 "xmltok_impl.c"
        var $6=$5; //@line 1266 "xmltok_impl.c"
        var $7=$ptr_addr; //@line 1266 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1266 "xmltok_impl.c"
        var $9=($8); //@line 1266 "xmltok_impl.c"
        var $10=$6+76; //@line 1266 "xmltok_impl.c"
        var $11=$10+$9; //@line 1266 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1266 "xmltok_impl.c"
        var $13=($12); //@line 1266 "xmltok_impl.c"
        if ($13 == 3) {
          __label__ = 7; break;
        }
        else if ($13 == 5) {
          __label__ = 4; break;
        }
        else if ($13 == 6) {
          __label__ = 5; break;
        }
        else if ($13 == 7) {
          __label__ = 6; break;
        }
        else if ($13 == 9) {
          __label__ = 19; break;
        }
        else if ($13 == 10) {
          __label__ = 16; break;
        }
        else if ($13 == 30) {
          __label__ = 10; break;
        }
        else {
        __label__ = 26; break;
        }
        
      case 4: // $bb3
        var $14=$ptr_addr; //@line 1269 "xmltok_impl.c"
        var $15=$14+2; //@line 1269 "xmltok_impl.c"
        $ptr_addr=$15; //@line 1269 "xmltok_impl.c"
        __label__ = 27; break; //@line 1269 "xmltok_impl.c"
      case 5: // $bb4
        var $16=$ptr_addr; //@line 1269 "xmltok_impl.c"
        var $17=$16+3; //@line 1269 "xmltok_impl.c"
        $ptr_addr=$17; //@line 1269 "xmltok_impl.c"
        __label__ = 27; break; //@line 1269 "xmltok_impl.c"
      case 6: // $bb5
        var $18=$ptr_addr; //@line 1269 "xmltok_impl.c"
        var $19=$18+4; //@line 1269 "xmltok_impl.c"
        $ptr_addr=$19; //@line 1269 "xmltok_impl.c"
        __label__ = 27; break; //@line 1269 "xmltok_impl.c"
      case 7: // $bb6
        var $20=$ptr_addr; //@line 1272 "xmltok_impl.c"
        var $21=$start; //@line 1272 "xmltok_impl.c"
        var $22=($20)==($21); //@line 1272 "xmltok_impl.c"
        if ($22) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1272 "xmltok_impl.c"
      case 8: // $bb7
        var $23=$ptr_addr; //@line 1273 "xmltok_impl.c"
        var $24=$23+1; //@line 1273 "xmltok_impl.c"
        var $25=$enc_addr; //@line 1273 "xmltok_impl.c"
        var $26=$end_addr; //@line 1273 "xmltok_impl.c"
        var $27=$nextTokPtr_addr; //@line 1273 "xmltok_impl.c"
        var $28=_normal_scanRef($25, $24, $26, $27); //@line 1273 "xmltok_impl.c"
        $0=$28; //@line 1273 "xmltok_impl.c"
        __label__ = 29; break; //@line 1273 "xmltok_impl.c"
      case 9: // $bb8
        var $29=$nextTokPtr_addr; //@line 1274 "xmltok_impl.c"
        var $30=$ptr_addr; //@line 1274 "xmltok_impl.c"
        HEAP[$29]=$30; //@line 1274 "xmltok_impl.c"
        $0=6; //@line 1275 "xmltok_impl.c"
        __label__ = 29; break; //@line 1275 "xmltok_impl.c"
      case 10: // $bb9
        var $31=$ptr_addr; //@line 1277 "xmltok_impl.c"
        var $32=$start; //@line 1277 "xmltok_impl.c"
        var $33=($31)==($32); //@line 1277 "xmltok_impl.c"
        if ($33) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 1277 "xmltok_impl.c"
      case 11: // $bb10
        var $34=$ptr_addr; //@line 1279 "xmltok_impl.c"
        var $35=$34+1; //@line 1279 "xmltok_impl.c"
        var $36=$enc_addr; //@line 1279 "xmltok_impl.c"
        var $37=$end_addr; //@line 1279 "xmltok_impl.c"
        var $38=$nextTokPtr_addr; //@line 1279 "xmltok_impl.c"
        var $39=_normal_scanPercent($36, $35, $37, $38); //@line 1279 "xmltok_impl.c"
        $tok=$39; //@line 1279 "xmltok_impl.c"
        var $40=$tok; //@line 1280 "xmltok_impl.c"
        var $41=($40)!=22; //@line 1280 "xmltok_impl.c"
        if ($41) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1280 "xmltok_impl.c"
      case 12: // $bb11
        var $42=$tok; //@line 1280 "xmltok_impl.c"
        $iftmp_458=$42; //@line 1280 "xmltok_impl.c"
        __label__ = 14; break; //@line 1280 "xmltok_impl.c"
      case 13: // $bb12
        $iftmp_458=0; //@line 1280 "xmltok_impl.c"
        __label__ = 14; break; //@line 1280 "xmltok_impl.c"
      case 14: // $bb13
        var $43=$iftmp_458; //@line 1280 "xmltok_impl.c"
        $0=$43; //@line 1280 "xmltok_impl.c"
        __label__ = 29; break; //@line 1280 "xmltok_impl.c"
      case 15: // $bb14
        var $44=$nextTokPtr_addr; //@line 1282 "xmltok_impl.c"
        var $45=$ptr_addr; //@line 1282 "xmltok_impl.c"
        HEAP[$44]=$45; //@line 1282 "xmltok_impl.c"
        $0=6; //@line 1283 "xmltok_impl.c"
        __label__ = 29; break; //@line 1283 "xmltok_impl.c"
      case 16: // $bb15
        var $46=$ptr_addr; //@line 1285 "xmltok_impl.c"
        var $47=$start; //@line 1285 "xmltok_impl.c"
        var $48=($46)==($47); //@line 1285 "xmltok_impl.c"
        if ($48) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1285 "xmltok_impl.c"
      case 17: // $bb16
        var $49=$ptr_addr; //@line 1286 "xmltok_impl.c"
        var $50=$49+1; //@line 1286 "xmltok_impl.c"
        var $51=$nextTokPtr_addr; //@line 1286 "xmltok_impl.c"
        HEAP[$51]=$50; //@line 1286 "xmltok_impl.c"
        $0=7; //@line 1287 "xmltok_impl.c"
        __label__ = 29; break; //@line 1287 "xmltok_impl.c"
      case 18: // $bb17
        var $52=$nextTokPtr_addr; //@line 1289 "xmltok_impl.c"
        var $53=$ptr_addr; //@line 1289 "xmltok_impl.c"
        HEAP[$52]=$53; //@line 1289 "xmltok_impl.c"
        $0=6; //@line 1290 "xmltok_impl.c"
        __label__ = 29; break; //@line 1290 "xmltok_impl.c"
      case 19: // $bb18
        var $54=$ptr_addr; //@line 1292 "xmltok_impl.c"
        var $55=$start; //@line 1292 "xmltok_impl.c"
        var $56=($54)==($55); //@line 1292 "xmltok_impl.c"
        if ($56) { __label__ = 20; break; } else { __label__ = 25; break; } //@line 1292 "xmltok_impl.c"
      case 20: // $bb19
        var $57=$ptr_addr; //@line 1293 "xmltok_impl.c"
        var $58=$57+1; //@line 1293 "xmltok_impl.c"
        $ptr_addr=$58; //@line 1293 "xmltok_impl.c"
        var $59=$ptr_addr; //@line 1294 "xmltok_impl.c"
        var $60=$end_addr; //@line 1294 "xmltok_impl.c"
        var $61=($59)==($60); //@line 1294 "xmltok_impl.c"
        if ($61) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1294 "xmltok_impl.c"
      case 21: // $bb20
        $0=-3; //@line 1295 "xmltok_impl.c"
        __label__ = 29; break; //@line 1295 "xmltok_impl.c"
      case 22: // $bb21
        var $62=$enc_addr; //@line 1296 "xmltok_impl.c"
        var $63=$62; //@line 1296 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 1296 "xmltok_impl.c"
        var $65=HEAP[$64]; //@line 1296 "xmltok_impl.c"
        var $66=($65); //@line 1296 "xmltok_impl.c"
        var $67=$63+76; //@line 1296 "xmltok_impl.c"
        var $68=$67+$66; //@line 1296 "xmltok_impl.c"
        var $69=HEAP[$68]; //@line 1296 "xmltok_impl.c"
        var $70=($69)==10; //@line 1296 "xmltok_impl.c"
        if ($70) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1296 "xmltok_impl.c"
      case 23: // $bb22
        var $71=$ptr_addr; //@line 1297 "xmltok_impl.c"
        var $72=$71+1; //@line 1297 "xmltok_impl.c"
        $ptr_addr=$72; //@line 1297 "xmltok_impl.c"
        __label__ = 24; break; //@line 1297 "xmltok_impl.c"
      case 24: // $bb23
        var $73=$nextTokPtr_addr; //@line 1298 "xmltok_impl.c"
        var $74=$ptr_addr; //@line 1298 "xmltok_impl.c"
        HEAP[$73]=$74; //@line 1298 "xmltok_impl.c"
        $0=7; //@line 1299 "xmltok_impl.c"
        __label__ = 29; break; //@line 1299 "xmltok_impl.c"
      case 25: // $bb24
        var $75=$nextTokPtr_addr; //@line 1301 "xmltok_impl.c"
        var $76=$ptr_addr; //@line 1301 "xmltok_impl.c"
        HEAP[$75]=$76; //@line 1301 "xmltok_impl.c"
        $0=6; //@line 1302 "xmltok_impl.c"
        __label__ = 29; break; //@line 1302 "xmltok_impl.c"
      case 26: // $bb25
        var $77=$ptr_addr; //@line 1304 "xmltok_impl.c"
        var $78=$77+1; //@line 1304 "xmltok_impl.c"
        $ptr_addr=$78; //@line 1304 "xmltok_impl.c"
        __label__ = 27; break; //@line 1304 "xmltok_impl.c"
      case 27: // $bb26
        var $79=$ptr_addr; //@line 1265 "xmltok_impl.c"
        var $80=$end_addr; //@line 1265 "xmltok_impl.c"
        var $81=($79)!=($80); //@line 1265 "xmltok_impl.c"
        if ($81) { __label__ = 3; break; } else { __label__ = 28; break; } //@line 1265 "xmltok_impl.c"
      case 28: // $bb27
        var $82=$nextTokPtr_addr; //@line 1308 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 1308 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 1308 "xmltok_impl.c"
        $0=6; //@line 1309 "xmltok_impl.c"
        __label__ = 29; break; //@line 1309 "xmltok_impl.c"
      case 29: // $bb28
        var $84=$0; //@line 1263 "xmltok_impl.c"
        $retval=$84; //@line 1263 "xmltok_impl.c"
        var $retval29=$retval; //@line 1263 "xmltok_impl.c"
        ;
        return $retval29; //@line 1263 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_ignoreSectionTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $level;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        $level=0; //@line 1318 "xmltok_impl.c"
        __label__ = 35; break; //@line 1318 "xmltok_impl.c"
      case 1: // $bb
        var $1=$enc_addr; //@line 1327 "xmltok_impl.c"
        var $2=$1; //@line 1327 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 1327 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 1327 "xmltok_impl.c"
        var $5=($4); //@line 1327 "xmltok_impl.c"
        var $6=$2+76; //@line 1327 "xmltok_impl.c"
        var $7=$6+$5; //@line 1327 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1327 "xmltok_impl.c"
        var $9=($8); //@line 1327 "xmltok_impl.c"
        if ($9 == 0) {
          __label__ = 17; break;
        }
        else if ($9 == 1) {
          __label__ = 17; break;
        }
        else if ($9 == 2) {
          __label__ = 18; break;
        }
        else if ($9 == 4) {
          __label__ = 25; break;
        }
        else if ($9 == 5) {
          __label__ = 2; break;
        }
        else if ($9 == 6) {
          __label__ = 7; break;
        }
        else if ($9 == 7) {
          __label__ = 12; break;
        }
        else if ($9 == 8) {
          __label__ = 17; break;
        }
        else {
        __label__ = 34; break;
        }
        
      case 2: // $bb1
        var $10=$end_addr; //@line 1328 "xmltok_impl.c"
        var $11=($10); //@line 1328 "xmltok_impl.c"
        var $12=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $13=($12); //@line 1328 "xmltok_impl.c"
        var $14=($11) - ($13); //@line 1328 "xmltok_impl.c"
        var $15=($14) <= 1; //@line 1328 "xmltok_impl.c"
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1328 "xmltok_impl.c"
      case 3: // $bb2
        $0=-2; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 4: // $bb3
        var $16=$enc_addr; //@line 1328 "xmltok_impl.c"
        var $17=$16; //@line 1328 "xmltok_impl.c"
        var $18=$17+356; //@line 1328 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1328 "xmltok_impl.c"
        var $20=$enc_addr; //@line 1328 "xmltok_impl.c"
        var $21=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $22=FUNCTION_TABLE[$19]($20, $21); //@line 1328 "xmltok_impl.c"
        var $23=($22)!=0; //@line 1328 "xmltok_impl.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1328 "xmltok_impl.c"
      case 5: // $bb4
        var $24=$nextTokPtr_addr; //@line 1328 "xmltok_impl.c"
        var $25=$ptr_addr; //@line 1328 "xmltok_impl.c"
        HEAP[$24]=$25; //@line 1328 "xmltok_impl.c"
        $0=0; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 6: // $bb5
        var $26=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $27=$26+2; //@line 1328 "xmltok_impl.c"
        $ptr_addr=$27; //@line 1328 "xmltok_impl.c"
        __label__ = 35; break; //@line 1328 "xmltok_impl.c"
      case 7: // $bb6
        var $28=$end_addr; //@line 1328 "xmltok_impl.c"
        var $29=($28); //@line 1328 "xmltok_impl.c"
        var $30=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $31=($30); //@line 1328 "xmltok_impl.c"
        var $32=($29) - ($31); //@line 1328 "xmltok_impl.c"
        var $33=($32) <= 2; //@line 1328 "xmltok_impl.c"
        if ($33) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1328 "xmltok_impl.c"
      case 8: // $bb7
        $0=-2; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 9: // $bb8
        var $34=$enc_addr; //@line 1328 "xmltok_impl.c"
        var $35=$34; //@line 1328 "xmltok_impl.c"
        var $36=$35+360; //@line 1328 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 1328 "xmltok_impl.c"
        var $38=$enc_addr; //@line 1328 "xmltok_impl.c"
        var $39=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $40=FUNCTION_TABLE[$37]($38, $39); //@line 1328 "xmltok_impl.c"
        var $41=($40)!=0; //@line 1328 "xmltok_impl.c"
        if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1328 "xmltok_impl.c"
      case 10: // $bb9
        var $42=$nextTokPtr_addr; //@line 1328 "xmltok_impl.c"
        var $43=$ptr_addr; //@line 1328 "xmltok_impl.c"
        HEAP[$42]=$43; //@line 1328 "xmltok_impl.c"
        $0=0; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 11: // $bb10
        var $44=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $45=$44+3; //@line 1328 "xmltok_impl.c"
        $ptr_addr=$45; //@line 1328 "xmltok_impl.c"
        __label__ = 35; break; //@line 1328 "xmltok_impl.c"
      case 12: // $bb11
        var $46=$end_addr; //@line 1328 "xmltok_impl.c"
        var $47=($46); //@line 1328 "xmltok_impl.c"
        var $48=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $49=($48); //@line 1328 "xmltok_impl.c"
        var $50=($47) - ($49); //@line 1328 "xmltok_impl.c"
        var $51=($50) <= 3; //@line 1328 "xmltok_impl.c"
        if ($51) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1328 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 14: // $bb13
        var $52=$enc_addr; //@line 1328 "xmltok_impl.c"
        var $53=$52; //@line 1328 "xmltok_impl.c"
        var $54=$53+364; //@line 1328 "xmltok_impl.c"
        var $55=HEAP[$54]; //@line 1328 "xmltok_impl.c"
        var $56=$enc_addr; //@line 1328 "xmltok_impl.c"
        var $57=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $58=FUNCTION_TABLE[$55]($56, $57); //@line 1328 "xmltok_impl.c"
        var $59=($58)!=0; //@line 1328 "xmltok_impl.c"
        if ($59) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1328 "xmltok_impl.c"
      case 15: // $bb14
        var $60=$nextTokPtr_addr; //@line 1328 "xmltok_impl.c"
        var $61=$ptr_addr; //@line 1328 "xmltok_impl.c"
        HEAP[$60]=$61; //@line 1328 "xmltok_impl.c"
        $0=0; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 16: // $bb15
        var $62=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $63=$62+4; //@line 1328 "xmltok_impl.c"
        $ptr_addr=$63; //@line 1328 "xmltok_impl.c"
        __label__ = 35; break; //@line 1328 "xmltok_impl.c"
      case 17: // $bb16
        var $64=$nextTokPtr_addr; //@line 1328 "xmltok_impl.c"
        var $65=$ptr_addr; //@line 1328 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 1328 "xmltok_impl.c"
        $0=0; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 18: // $bb17
        var $66=$ptr_addr; //@line 1330 "xmltok_impl.c"
        var $67=$66+1; //@line 1330 "xmltok_impl.c"
        $ptr_addr=$67; //@line 1330 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 1330 "xmltok_impl.c"
        var $69=$end_addr; //@line 1330 "xmltok_impl.c"
        var $70=($68)==($69); //@line 1330 "xmltok_impl.c"
        if ($70) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1330 "xmltok_impl.c"
      case 19: // $bb18
        $0=-1; //@line 1331 "xmltok_impl.c"
        __label__ = 37; break; //@line 1331 "xmltok_impl.c"
      case 20: // $bb19
        var $71=$ptr_addr; //@line 1332 "xmltok_impl.c"
        var $72=HEAP[$71]; //@line 1332 "xmltok_impl.c"
        var $73=($72)==33; //@line 1332 "xmltok_impl.c"
        if ($73) { __label__ = 21; break; } else { __label__ = 35; break; } //@line 1332 "xmltok_impl.c"
      case 21: // $bb20
        var $74=$ptr_addr; //@line 1333 "xmltok_impl.c"
        var $75=$74+1; //@line 1333 "xmltok_impl.c"
        $ptr_addr=$75; //@line 1333 "xmltok_impl.c"
        var $76=$ptr_addr; //@line 1333 "xmltok_impl.c"
        var $77=$end_addr; //@line 1333 "xmltok_impl.c"
        var $78=($76)==($77); //@line 1333 "xmltok_impl.c"
        if ($78) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1333 "xmltok_impl.c"
      case 22: // $bb21
        $0=-1; //@line 1334 "xmltok_impl.c"
        __label__ = 37; break; //@line 1334 "xmltok_impl.c"
      case 23: // $bb22
        var $79=$ptr_addr; //@line 1335 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 1335 "xmltok_impl.c"
        var $81=($80)==91; //@line 1335 "xmltok_impl.c"
        if ($81) { __label__ = 24; break; } else { __label__ = 35; break; } //@line 1335 "xmltok_impl.c"
      case 24: // $bb23
        var $82=$level; //@line 1336 "xmltok_impl.c"
        var $83=($82) + 1; //@line 1336 "xmltok_impl.c"
        $level=$83; //@line 1336 "xmltok_impl.c"
        var $84=$ptr_addr; //@line 1337 "xmltok_impl.c"
        var $85=$84+1; //@line 1337 "xmltok_impl.c"
        $ptr_addr=$85; //@line 1337 "xmltok_impl.c"
        __label__ = 35; break; //@line 1337 "xmltok_impl.c"
      case 25: // $bb25
        var $86=$ptr_addr; //@line 1342 "xmltok_impl.c"
        var $87=$86+1; //@line 1342 "xmltok_impl.c"
        $ptr_addr=$87; //@line 1342 "xmltok_impl.c"
        var $88=$ptr_addr; //@line 1342 "xmltok_impl.c"
        var $89=$end_addr; //@line 1342 "xmltok_impl.c"
        var $90=($88)==($89); //@line 1342 "xmltok_impl.c"
        if ($90) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1342 "xmltok_impl.c"
      case 26: // $bb26
        $0=-1; //@line 1343 "xmltok_impl.c"
        __label__ = 37; break; //@line 1343 "xmltok_impl.c"
      case 27: // $bb27
        var $91=$ptr_addr; //@line 1344 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 1344 "xmltok_impl.c"
        var $93=($92)==93; //@line 1344 "xmltok_impl.c"
        if ($93) { __label__ = 28; break; } else { __label__ = 35; break; } //@line 1344 "xmltok_impl.c"
      case 28: // $bb28
        var $94=$ptr_addr; //@line 1345 "xmltok_impl.c"
        var $95=$94+1; //@line 1345 "xmltok_impl.c"
        $ptr_addr=$95; //@line 1345 "xmltok_impl.c"
        var $96=$ptr_addr; //@line 1345 "xmltok_impl.c"
        var $97=$end_addr; //@line 1345 "xmltok_impl.c"
        var $98=($96)==($97); //@line 1345 "xmltok_impl.c"
        if ($98) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1345 "xmltok_impl.c"
      case 29: // $bb29
        $0=-1; //@line 1346 "xmltok_impl.c"
        __label__ = 37; break; //@line 1346 "xmltok_impl.c"
      case 30: // $bb30
        var $99=$ptr_addr; //@line 1347 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 1347 "xmltok_impl.c"
        var $101=($100)==62; //@line 1347 "xmltok_impl.c"
        if ($101) { __label__ = 31; break; } else { __label__ = 35; break; } //@line 1347 "xmltok_impl.c"
      case 31: // $bb31
        var $102=$ptr_addr; //@line 1348 "xmltok_impl.c"
        var $103=$102+1; //@line 1348 "xmltok_impl.c"
        $ptr_addr=$103; //@line 1348 "xmltok_impl.c"
        var $104=$level; //@line 1349 "xmltok_impl.c"
        var $105=($104)==0; //@line 1349 "xmltok_impl.c"
        if ($105) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1349 "xmltok_impl.c"
      case 32: // $bb32
        var $106=$nextTokPtr_addr; //@line 1350 "xmltok_impl.c"
        var $107=$ptr_addr; //@line 1350 "xmltok_impl.c"
        HEAP[$106]=$107; //@line 1350 "xmltok_impl.c"
        $0=42; //@line 1351 "xmltok_impl.c"
        __label__ = 37; break; //@line 1351 "xmltok_impl.c"
      case 33: // $bb33
        var $108=$level; //@line 1353 "xmltok_impl.c"
        var $109=($108) - 1; //@line 1353 "xmltok_impl.c"
        $level=$109; //@line 1353 "xmltok_impl.c"
        __label__ = 35; break; //@line 1353 "xmltok_impl.c"
      case 34: // $bb35
        var $110=$ptr_addr; //@line 1358 "xmltok_impl.c"
        var $111=$110+1; //@line 1358 "xmltok_impl.c"
        $ptr_addr=$111; //@line 1358 "xmltok_impl.c"
        __label__ = 35; break; //@line 1358 "xmltok_impl.c"
      case 35: // $bb36
        var $112=$ptr_addr; //@line 1326 "xmltok_impl.c"
        var $113=$end_addr; //@line 1326 "xmltok_impl.c"
        var $114=($112)!=($113); //@line 1326 "xmltok_impl.c"
        if ($114) { __label__ = 1; break; } else { __label__ = 36; break; } //@line 1326 "xmltok_impl.c"
      case 36: // $bb37
        $0=-1; //@line 1362 "xmltok_impl.c"
        __label__ = 37; break; //@line 1362 "xmltok_impl.c"
      case 37: // $bb38
        var $115=$0; //@line 1328 "xmltok_impl.c"
        $retval=$115; //@line 1328 "xmltok_impl.c"
        var $retval39=$retval; //@line 1328 "xmltok_impl.c"
        ;
        return $retval39; //@line 1328 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_isPublicId($enc, $ptr, $end, $badPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $badPtr_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $badPtr_addr=$badPtr;
        var $1=$ptr_addr; //@line 1371 "xmltok_impl.c"
        var $2=$1+1; //@line 1371 "xmltok_impl.c"
        $ptr_addr=$2; //@line 1371 "xmltok_impl.c"
        var $3=$end_addr; //@line 1372 "xmltok_impl.c"
        var $4=$3+-1; //@line 1372 "xmltok_impl.c"
        $end_addr=$4; //@line 1372 "xmltok_impl.c"
        __label__ = 8; break; //@line 1372 "xmltok_impl.c"
      case 1: // $bb
        var $5=$enc_addr; //@line 1374 "xmltok_impl.c"
        var $6=$5; //@line 1374 "xmltok_impl.c"
        var $7=$ptr_addr; //@line 1374 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1374 "xmltok_impl.c"
        var $9=($8); //@line 1374 "xmltok_impl.c"
        var $10=$6+76; //@line 1374 "xmltok_impl.c"
        var $11=$10+$9; //@line 1374 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1374 "xmltok_impl.c"
        var $13=($12); //@line 1374 "xmltok_impl.c"
        if ($13 == 9) {
          __label__ = 7; break;
        }
        else if ($13 == 10) {
          __label__ = 7; break;
        }
        else if ($13 == 13) {
          __label__ = 7; break;
        }
        else if ($13 == 14) {
          __label__ = 7; break;
        }
        else if ($13 == 15) {
          __label__ = 7; break;
        }
        else if ($13 == 16) {
          __label__ = 7; break;
        }
        else if ($13 == 17) {
          __label__ = 7; break;
        }
        else if ($13 == 18) {
          __label__ = 7; break;
        }
        else if ($13 == 19) {
          __label__ = 7; break;
        }
        else if ($13 == 21) {
          __label__ = 2; break;
        }
        else if ($13 == 22) {
          __label__ = 4; break;
        }
        else if ($13 == 23) {
          __label__ = 7; break;
        }
        else if ($13 == 24) {
          __label__ = 7; break;
        }
        else if ($13 == 25) {
          __label__ = 7; break;
        }
        else if ($13 == 26) {
          __label__ = 4; break;
        }
        else if ($13 == 27) {
          __label__ = 7; break;
        }
        else if ($13 == 30) {
          __label__ = 7; break;
        }
        else if ($13 == 31) {
          __label__ = 7; break;
        }
        else if ($13 == 32) {
          __label__ = 7; break;
        }
        else if ($13 == 33) {
          __label__ = 7; break;
        }
        else if ($13 == 34) {
          __label__ = 7; break;
        }
        else if ($13 == 35) {
          __label__ = 7; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 2: // $bb2
        var $14=$ptr_addr; //@line 1398 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1398 "xmltok_impl.c"
        var $16=($15)==9; //@line 1398 "xmltok_impl.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 1398 "xmltok_impl.c"
      case 3: // $bb3
        var $17=$badPtr_addr; //@line 1399 "xmltok_impl.c"
        var $18=$ptr_addr; //@line 1399 "xmltok_impl.c"
        HEAP[$17]=$18; //@line 1399 "xmltok_impl.c"
        $0=0; //@line 1400 "xmltok_impl.c"
        __label__ = 10; break; //@line 1400 "xmltok_impl.c"
      case 4: // $bb5
        var $19=$ptr_addr; //@line 1405 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1405 "xmltok_impl.c"
        var $21=($20) >= 0; //@line 1405 "xmltok_impl.c"
        if ($21) { __label__ = 7; break; } else { __label__ = 5; break; } //@line 1405 "xmltok_impl.c"
      case 5: // $bb6
        var $22=$ptr_addr; //@line 1408 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 1408 "xmltok_impl.c"
        var $24=($23); //@line 1408 "xmltok_impl.c"
        if ($24 == 36) {
          __label__ = 7; break;
        }
        else if ($24 == 64) {
          __label__ = 7; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 6: // $bb8
        var $25=$badPtr_addr; //@line 1413 "xmltok_impl.c"
        var $26=$ptr_addr; //@line 1413 "xmltok_impl.c"
        HEAP[$25]=$26; //@line 1413 "xmltok_impl.c"
        $0=0; //@line 1414 "xmltok_impl.c"
        __label__ = 10; break; //@line 1414 "xmltok_impl.c"
      case 7: // $bb9
        var $27=$ptr_addr; //@line 1373 "xmltok_impl.c"
        var $28=$27+1; //@line 1373 "xmltok_impl.c"
        $ptr_addr=$28; //@line 1373 "xmltok_impl.c"
        __label__ = 8; break; //@line 1373 "xmltok_impl.c"
      case 8: // $bb10
        var $29=$ptr_addr; //@line 1373 "xmltok_impl.c"
        var $30=$end_addr; //@line 1373 "xmltok_impl.c"
        var $31=($29)!=($30); //@line 1373 "xmltok_impl.c"
        if ($31) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 1373 "xmltok_impl.c"
      case 9: // $bb11
        $0=1; //@line 1419 "xmltok_impl.c"
        __label__ = 10; break; //@line 1419 "xmltok_impl.c"
      case 10: // $bb12
        var $32=$0; //@line 1400 "xmltok_impl.c"
        $retval=$32; //@line 1400 "xmltok_impl.c"
        var $retval13=$retval; //@line 1400 "xmltok_impl.c"
        ;
        return $retval13; //@line 1400 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_getAtts($enc, $ptr, $attsMax, $atts) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $attsMax_addr;
        var $atts_addr;
        var $retval;
        var $0;
        var $state;
        var $nAtts;
        var $open;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $attsMax_addr=$attsMax;
        $atts_addr=$atts;
        $state=1; //@line 1431 "xmltok_impl.c"
        $nAtts=0; //@line 1432 "xmltok_impl.c"
        $open=0; //@line 1433 "xmltok_impl.c"
        var $1=$ptr_addr; //@line 1436 "xmltok_impl.c"
        var $2=$1+1; //@line 1436 "xmltok_impl.c"
        $ptr_addr=$2; //@line 1436 "xmltok_impl.c"
        __label__ = 1; break; //@line 1436 "xmltok_impl.c"
      case 1: // $bb
        var $3=$enc_addr; //@line 1437 "xmltok_impl.c"
        var $4=$3; //@line 1437 "xmltok_impl.c"
        var $5=$ptr_addr; //@line 1437 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 1437 "xmltok_impl.c"
        var $7=($6); //@line 1437 "xmltok_impl.c"
        var $8=$4+76; //@line 1437 "xmltok_impl.c"
        var $9=$8+$7; //@line 1437 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1437 "xmltok_impl.c"
        var $11=($10); //@line 1437 "xmltok_impl.c"
        if ($11 == 3) {
          __label__ = 37; break;
        }
        else if ($11 == 5) {
          __label__ = 2; break;
        }
        else if ($11 == 6) {
          __label__ = 7; break;
        }
        else if ($11 == 7) {
          __label__ = 12; break;
        }
        else if ($11 == 9) {
          __label__ = 49; break;
        }
        else if ($11 == 10) {
          __label__ = 49; break;
        }
        else if ($11 == 11) {
          __label__ = 54; break;
        }
        else if ($11 == 12) {
          __label__ = 21; break;
        }
        else if ($11 == 13) {
          __label__ = 29; break;
        }
        else if ($11 == 17) {
          __label__ = 54; break;
        }
        else if ($11 == 21) {
          __label__ = 39; break;
        }
        else if ($11 == 22) {
          __label__ = 17; break;
        }
        else if ($11 == 24) {
          __label__ = 17; break;
        }
        else if ($11 == 29) {
          __label__ = 17; break;
        }
        else {
        __label__ = 56; break;
        }
        
      case 2: // $bb1
        var $12=$state; //@line 1448 "xmltok_impl.c"
        var $13=($12)==0; //@line 1448 "xmltok_impl.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 1448 "xmltok_impl.c"
      case 3: // $bb2
        var $14=$nAtts; //@line 1448 "xmltok_impl.c"
        var $15=$attsMax_addr; //@line 1448 "xmltok_impl.c"
        var $16=($14) < ($15); //@line 1448 "xmltok_impl.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1448 "xmltok_impl.c"
      case 4: // $bb3
        var $17=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $18=$nAtts; //@line 1448 "xmltok_impl.c"
        var $19=$17+16*$18; //@line 1448 "xmltok_impl.c"
        var $20=$19; //@line 1448 "xmltok_impl.c"
        var $21=$ptr_addr; //@line 1448 "xmltok_impl.c"
        HEAP[$20]=$21; //@line 1448 "xmltok_impl.c"
        var $22=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $23=$nAtts; //@line 1448 "xmltok_impl.c"
        var $24=$22+16*$23; //@line 1448 "xmltok_impl.c"
        var $25=$24+12; //@line 1448 "xmltok_impl.c"
        HEAP[$25]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 5; break; //@line 1448 "xmltok_impl.c"
      case 5: // $bb4
        $state=1; //@line 1448 "xmltok_impl.c"
        __label__ = 6; break; //@line 1448 "xmltok_impl.c"
      case 6: // $bb5
        var $26=$ptr_addr; //@line 1448 "xmltok_impl.c"
        var $27=$26+1; //@line 1448 "xmltok_impl.c"
        $ptr_addr=$27; //@line 1448 "xmltok_impl.c"
        __label__ = 56; break; //@line 1448 "xmltok_impl.c"
      case 7: // $bb6
        var $28=$state; //@line 1448 "xmltok_impl.c"
        var $29=($28)==0; //@line 1448 "xmltok_impl.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 1448 "xmltok_impl.c"
      case 8: // $bb7
        var $30=$nAtts; //@line 1448 "xmltok_impl.c"
        var $31=$attsMax_addr; //@line 1448 "xmltok_impl.c"
        var $32=($30) < ($31); //@line 1448 "xmltok_impl.c"
        if ($32) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1448 "xmltok_impl.c"
      case 9: // $bb8
        var $33=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $34=$nAtts; //@line 1448 "xmltok_impl.c"
        var $35=$33+16*$34; //@line 1448 "xmltok_impl.c"
        var $36=$35; //@line 1448 "xmltok_impl.c"
        var $37=$ptr_addr; //@line 1448 "xmltok_impl.c"
        HEAP[$36]=$37; //@line 1448 "xmltok_impl.c"
        var $38=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $39=$nAtts; //@line 1448 "xmltok_impl.c"
        var $40=$38+16*$39; //@line 1448 "xmltok_impl.c"
        var $41=$40+12; //@line 1448 "xmltok_impl.c"
        HEAP[$41]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 10; break; //@line 1448 "xmltok_impl.c"
      case 10: // $bb9
        $state=1; //@line 1448 "xmltok_impl.c"
        __label__ = 11; break; //@line 1448 "xmltok_impl.c"
      case 11: // $bb10
        var $42=$ptr_addr; //@line 1448 "xmltok_impl.c"
        var $43=$42+2; //@line 1448 "xmltok_impl.c"
        $ptr_addr=$43; //@line 1448 "xmltok_impl.c"
        __label__ = 56; break; //@line 1448 "xmltok_impl.c"
      case 12: // $bb11
        var $44=$state; //@line 1448 "xmltok_impl.c"
        var $45=($44)==0; //@line 1448 "xmltok_impl.c"
        if ($45) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 1448 "xmltok_impl.c"
      case 13: // $bb12
        var $46=$nAtts; //@line 1448 "xmltok_impl.c"
        var $47=$attsMax_addr; //@line 1448 "xmltok_impl.c"
        var $48=($46) < ($47); //@line 1448 "xmltok_impl.c"
        if ($48) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1448 "xmltok_impl.c"
      case 14: // $bb13
        var $49=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $50=$nAtts; //@line 1448 "xmltok_impl.c"
        var $51=$49+16*$50; //@line 1448 "xmltok_impl.c"
        var $52=$51; //@line 1448 "xmltok_impl.c"
        var $53=$ptr_addr; //@line 1448 "xmltok_impl.c"
        HEAP[$52]=$53; //@line 1448 "xmltok_impl.c"
        var $54=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $55=$nAtts; //@line 1448 "xmltok_impl.c"
        var $56=$54+16*$55; //@line 1448 "xmltok_impl.c"
        var $57=$56+12; //@line 1448 "xmltok_impl.c"
        HEAP[$57]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 15; break; //@line 1448 "xmltok_impl.c"
      case 15: // $bb14
        $state=1; //@line 1448 "xmltok_impl.c"
        __label__ = 16; break; //@line 1448 "xmltok_impl.c"
      case 16: // $bb15
        var $58=$ptr_addr; //@line 1448 "xmltok_impl.c"
        var $59=$58+3; //@line 1448 "xmltok_impl.c"
        $ptr_addr=$59; //@line 1448 "xmltok_impl.c"
        __label__ = 56; break; //@line 1448 "xmltok_impl.c"
      case 17: // $bb16
        var $60=$state; //@line 1453 "xmltok_impl.c"
        var $61=($60)==0; //@line 1453 "xmltok_impl.c"
        if ($61) { __label__ = 18; break; } else { __label__ = 56; break; } //@line 1453 "xmltok_impl.c"
      case 18: // $bb17
        var $62=$nAtts; //@line 1453 "xmltok_impl.c"
        var $63=$attsMax_addr; //@line 1453 "xmltok_impl.c"
        var $64=($62) < ($63); //@line 1453 "xmltok_impl.c"
        if ($64) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1453 "xmltok_impl.c"
      case 19: // $bb18
        var $65=$atts_addr; //@line 1453 "xmltok_impl.c"
        var $66=$nAtts; //@line 1453 "xmltok_impl.c"
        var $67=$65+16*$66; //@line 1453 "xmltok_impl.c"
        var $68=$67; //@line 1453 "xmltok_impl.c"
        var $69=$ptr_addr; //@line 1453 "xmltok_impl.c"
        HEAP[$68]=$69; //@line 1453 "xmltok_impl.c"
        var $70=$atts_addr; //@line 1453 "xmltok_impl.c"
        var $71=$nAtts; //@line 1453 "xmltok_impl.c"
        var $72=$70+16*$71; //@line 1453 "xmltok_impl.c"
        var $73=$72+12; //@line 1453 "xmltok_impl.c"
        HEAP[$73]=1; //@line 1453 "xmltok_impl.c"
        __label__ = 20; break; //@line 1453 "xmltok_impl.c"
      case 20: // $bb19
        $state=1; //@line 1453 "xmltok_impl.c"
        __label__ = 56; break; //@line 1453 "xmltok_impl.c"
      case 21: // $bb21
        var $74=$state; //@line 1457 "xmltok_impl.c"
        var $75=($74)!=2; //@line 1457 "xmltok_impl.c"
        if ($75) { __label__ = 22; break; } else { __label__ = 25; break; } //@line 1457 "xmltok_impl.c"
      case 22: // $bb22
        var $76=$nAtts; //@line 1458 "xmltok_impl.c"
        var $77=$attsMax_addr; //@line 1458 "xmltok_impl.c"
        var $78=($76) < ($77); //@line 1458 "xmltok_impl.c"
        if ($78) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1458 "xmltok_impl.c"
      case 23: // $bb23
        var $79=$atts_addr; //@line 1459 "xmltok_impl.c"
        var $80=$nAtts; //@line 1459 "xmltok_impl.c"
        var $81=$79+16*$80; //@line 1459 "xmltok_impl.c"
        var $82=$ptr_addr; //@line 1459 "xmltok_impl.c"
        var $83=$82+1; //@line 1459 "xmltok_impl.c"
        var $84=$81+4; //@line 1459 "xmltok_impl.c"
        HEAP[$84]=$83; //@line 1459 "xmltok_impl.c"
        __label__ = 24; break; //@line 1459 "xmltok_impl.c"
      case 24: // $bb24
        $state=2; //@line 1460 "xmltok_impl.c"
        $open=12; //@line 1461 "xmltok_impl.c"
        __label__ = 56; break; //@line 1461 "xmltok_impl.c"
      case 25: // $bb25
        var $85=$open; //@line 1463 "xmltok_impl.c"
        var $86=($85)==12; //@line 1463 "xmltok_impl.c"
        if ($86) { __label__ = 26; break; } else { __label__ = 56; break; } //@line 1463 "xmltok_impl.c"
      case 26: // $bb26
        $state=0; //@line 1464 "xmltok_impl.c"
        var $87=$nAtts; //@line 1465 "xmltok_impl.c"
        var $88=$attsMax_addr; //@line 1465 "xmltok_impl.c"
        var $89=($87) < ($88); //@line 1465 "xmltok_impl.c"
        if ($89) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1465 "xmltok_impl.c"
      case 27: // $bb27
        var $90=$atts_addr; //@line 1466 "xmltok_impl.c"
        var $91=$nAtts; //@line 1466 "xmltok_impl.c"
        var $92=$90+16*$91; //@line 1466 "xmltok_impl.c"
        var $93=$92+8; //@line 1466 "xmltok_impl.c"
        var $94=$ptr_addr; //@line 1466 "xmltok_impl.c"
        HEAP[$93]=$94; //@line 1466 "xmltok_impl.c"
        __label__ = 28; break; //@line 1466 "xmltok_impl.c"
      case 28: // $bb28
        var $95=$nAtts; //@line 1467 "xmltok_impl.c"
        var $96=($95) + 1; //@line 1467 "xmltok_impl.c"
        $nAtts=$96; //@line 1467 "xmltok_impl.c"
        __label__ = 56; break; //@line 1467 "xmltok_impl.c"
      case 29: // $bb30
        var $97=$state; //@line 1471 "xmltok_impl.c"
        var $98=($97)!=2; //@line 1471 "xmltok_impl.c"
        if ($98) { __label__ = 30; break; } else { __label__ = 33; break; } //@line 1471 "xmltok_impl.c"
      case 30: // $bb31
        var $99=$nAtts; //@line 1472 "xmltok_impl.c"
        var $100=$attsMax_addr; //@line 1472 "xmltok_impl.c"
        var $101=($99) < ($100); //@line 1472 "xmltok_impl.c"
        if ($101) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1472 "xmltok_impl.c"
      case 31: // $bb32
        var $102=$atts_addr; //@line 1473 "xmltok_impl.c"
        var $103=$nAtts; //@line 1473 "xmltok_impl.c"
        var $104=$102+16*$103; //@line 1473 "xmltok_impl.c"
        var $105=$ptr_addr; //@line 1473 "xmltok_impl.c"
        var $106=$105+1; //@line 1473 "xmltok_impl.c"
        var $107=$104+4; //@line 1473 "xmltok_impl.c"
        HEAP[$107]=$106; //@line 1473 "xmltok_impl.c"
        __label__ = 32; break; //@line 1473 "xmltok_impl.c"
      case 32: // $bb33
        $state=2; //@line 1474 "xmltok_impl.c"
        $open=13; //@line 1475 "xmltok_impl.c"
        __label__ = 56; break; //@line 1475 "xmltok_impl.c"
      case 33: // $bb34
        var $108=$open; //@line 1477 "xmltok_impl.c"
        var $109=($108)==13; //@line 1477 "xmltok_impl.c"
        if ($109) { __label__ = 34; break; } else { __label__ = 56; break; } //@line 1477 "xmltok_impl.c"
      case 34: // $bb35
        $state=0; //@line 1478 "xmltok_impl.c"
        var $110=$nAtts; //@line 1479 "xmltok_impl.c"
        var $111=$attsMax_addr; //@line 1479 "xmltok_impl.c"
        var $112=($110) < ($111); //@line 1479 "xmltok_impl.c"
        if ($112) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 1479 "xmltok_impl.c"
      case 35: // $bb36
        var $113=$atts_addr; //@line 1480 "xmltok_impl.c"
        var $114=$nAtts; //@line 1480 "xmltok_impl.c"
        var $115=$113+16*$114; //@line 1480 "xmltok_impl.c"
        var $116=$115+8; //@line 1480 "xmltok_impl.c"
        var $117=$ptr_addr; //@line 1480 "xmltok_impl.c"
        HEAP[$116]=$117; //@line 1480 "xmltok_impl.c"
        __label__ = 36; break; //@line 1480 "xmltok_impl.c"
      case 36: // $bb37
        var $118=$nAtts; //@line 1481 "xmltok_impl.c"
        var $119=($118) + 1; //@line 1481 "xmltok_impl.c"
        $nAtts=$119; //@line 1481 "xmltok_impl.c"
        __label__ = 56; break; //@line 1481 "xmltok_impl.c"
      case 37: // $bb39
        var $120=$nAtts; //@line 1485 "xmltok_impl.c"
        var $121=$attsMax_addr; //@line 1485 "xmltok_impl.c"
        var $122=($120) < ($121); //@line 1485 "xmltok_impl.c"
        if ($122) { __label__ = 38; break; } else { __label__ = 56; break; } //@line 1485 "xmltok_impl.c"
      case 38: // $bb40
        var $123=$atts_addr; //@line 1486 "xmltok_impl.c"
        var $124=$nAtts; //@line 1486 "xmltok_impl.c"
        var $125=$123+16*$124; //@line 1486 "xmltok_impl.c"
        var $126=$125+12; //@line 1486 "xmltok_impl.c"
        HEAP[$126]=0; //@line 1486 "xmltok_impl.c"
        __label__ = 56; break; //@line 1486 "xmltok_impl.c"
      case 39: // $bb42
        var $127=$state; //@line 1489 "xmltok_impl.c"
        var $128=($127)==1; //@line 1489 "xmltok_impl.c"
        if ($128) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1489 "xmltok_impl.c"
      case 40: // $bb43
        $state=0; //@line 1490 "xmltok_impl.c"
        __label__ = 56; break; //@line 1490 "xmltok_impl.c"
      case 41: // $bb44
        var $129=$state; //@line 1491 "xmltok_impl.c"
        var $130=($129)==2; //@line 1491 "xmltok_impl.c"
        if ($130) { __label__ = 42; break; } else { __label__ = 56; break; } //@line 1491 "xmltok_impl.c"
      case 42: // $bb45
        var $131=$nAtts; //@line 1491 "xmltok_impl.c"
        var $132=$attsMax_addr; //@line 1491 "xmltok_impl.c"
        var $133=($131) < ($132); //@line 1491 "xmltok_impl.c"
        if ($133) { __label__ = 43; break; } else { __label__ = 56; break; } //@line 1491 "xmltok_impl.c"
      case 43: // $bb46
        var $134=$atts_addr; //@line 1491 "xmltok_impl.c"
        var $135=$nAtts; //@line 1491 "xmltok_impl.c"
        var $136=$134+16*$135; //@line 1491 "xmltok_impl.c"
        var $137=$136+12; //@line 1491 "xmltok_impl.c"
        var $138=HEAP[$137]; //@line 1491 "xmltok_impl.c"
        var $139=($138)!=0; //@line 1491 "xmltok_impl.c"
        if ($139) { __label__ = 44; break; } else { __label__ = 56; break; } //@line 1491 "xmltok_impl.c"
      case 44: // $bb47
        var $140=$atts_addr; //@line 1491 "xmltok_impl.c"
        var $141=$nAtts; //@line 1491 "xmltok_impl.c"
        var $142=$140+16*$141; //@line 1491 "xmltok_impl.c"
        var $143=$142+4; //@line 1491 "xmltok_impl.c"
        var $144=HEAP[$143]; //@line 1491 "xmltok_impl.c"
        var $145=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $146=($144)==($145); //@line 1491 "xmltok_impl.c"
        if ($146) { __label__ = 48; break; } else { __label__ = 45; break; } //@line 1491 "xmltok_impl.c"
      case 45: // $bb48
        var $147=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $148=HEAP[$147]; //@line 1491 "xmltok_impl.c"
        var $149=($148)!=32; //@line 1491 "xmltok_impl.c"
        if ($149) { __label__ = 48; break; } else { __label__ = 46; break; } //@line 1491 "xmltok_impl.c"
      case 46: // $bb49
        var $150=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $151=$150+1; //@line 1491 "xmltok_impl.c"
        var $152=HEAP[$151]; //@line 1491 "xmltok_impl.c"
        var $153=($152)==32; //@line 1491 "xmltok_impl.c"
        if ($153) { __label__ = 48; break; } else { __label__ = 47; break; } //@line 1491 "xmltok_impl.c"
      case 47: // $bb50
        var $154=$enc_addr; //@line 1491 "xmltok_impl.c"
        var $155=$154; //@line 1491 "xmltok_impl.c"
        var $156=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $157=$156+1; //@line 1491 "xmltok_impl.c"
        var $158=HEAP[$157]; //@line 1491 "xmltok_impl.c"
        var $159=($158); //@line 1491 "xmltok_impl.c"
        var $160=$155+76; //@line 1491 "xmltok_impl.c"
        var $161=$160+$159; //@line 1491 "xmltok_impl.c"
        var $162=HEAP[$161]; //@line 1491 "xmltok_impl.c"
        var $163=($162); //@line 1491 "xmltok_impl.c"
        var $164=$open; //@line 1491 "xmltok_impl.c"
        var $165=($163)==($164); //@line 1491 "xmltok_impl.c"
        if ($165) { __label__ = 48; break; } else { __label__ = 56; break; } //@line 1491 "xmltok_impl.c"
      case 48: // $bb51
        var $166=$atts_addr; //@line 1498 "xmltok_impl.c"
        var $167=$nAtts; //@line 1498 "xmltok_impl.c"
        var $168=$166+16*$167; //@line 1498 "xmltok_impl.c"
        var $169=$168+12; //@line 1498 "xmltok_impl.c"
        HEAP[$169]=0; //@line 1498 "xmltok_impl.c"
        __label__ = 56; break; //@line 1498 "xmltok_impl.c"
      case 49: // $bb53
        var $170=$state; //@line 1503 "xmltok_impl.c"
        var $171=($170)==1; //@line 1503 "xmltok_impl.c"
        if ($171) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 1503 "xmltok_impl.c"
      case 50: // $bb54
        $state=0; //@line 1504 "xmltok_impl.c"
        __label__ = 56; break; //@line 1504 "xmltok_impl.c"
      case 51: // $bb55
        var $172=$state; //@line 1505 "xmltok_impl.c"
        var $173=($172)==2; //@line 1505 "xmltok_impl.c"
        if ($173) { __label__ = 52; break; } else { __label__ = 56; break; } //@line 1505 "xmltok_impl.c"
      case 52: // $bb56
        var $174=$nAtts; //@line 1505 "xmltok_impl.c"
        var $175=$attsMax_addr; //@line 1505 "xmltok_impl.c"
        var $176=($174) < ($175); //@line 1505 "xmltok_impl.c"
        if ($176) { __label__ = 53; break; } else { __label__ = 56; break; } //@line 1505 "xmltok_impl.c"
      case 53: // $bb57
        var $177=$atts_addr; //@line 1506 "xmltok_impl.c"
        var $178=$nAtts; //@line 1506 "xmltok_impl.c"
        var $179=$177+16*$178; //@line 1506 "xmltok_impl.c"
        var $180=$179+12; //@line 1506 "xmltok_impl.c"
        HEAP[$180]=0; //@line 1506 "xmltok_impl.c"
        __label__ = 56; break; //@line 1506 "xmltok_impl.c"
      case 54: // $bb59
        var $181=$state; //@line 1510 "xmltok_impl.c"
        var $182=($181)!=2; //@line 1510 "xmltok_impl.c"
        if ($182) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 1510 "xmltok_impl.c"
      case 55: // $bb60
        var $183=$nAtts; //@line 1511 "xmltok_impl.c"
        $0=$183; //@line 1511 "xmltok_impl.c"
        var $184=$0; //@line 1511 "xmltok_impl.c"
        $retval=$184; //@line 1511 "xmltok_impl.c"
        var $retval62=$retval; //@line 1436 "xmltok_impl.c"
        ;
        return $retval62; //@line 1436 "xmltok_impl.c"
      case 56: // $bb61
        var $185=$ptr_addr; //@line 1436 "xmltok_impl.c"
        var $186=$185+1; //@line 1436 "xmltok_impl.c"
        $ptr_addr=$186; //@line 1436 "xmltok_impl.c"
        __label__ = 1; break; //@line 1436 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_charRefNumber($enc, $ptr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $retval;
        var $0;
        var $result;
        var $c;
        var $c12;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $result=0; //@line 1523 "xmltok_impl.c"
        var $1=$ptr_addr; //@line 1525 "xmltok_impl.c"
        var $2=$1+2; //@line 1525 "xmltok_impl.c"
        $ptr_addr=$2; //@line 1525 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 1526 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 1526 "xmltok_impl.c"
        var $5=($4)==120; //@line 1526 "xmltok_impl.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 14; break; } //@line 1526 "xmltok_impl.c"
      case 1: // $bb
        var $6=$ptr_addr; //@line 1527 "xmltok_impl.c"
        var $7=$6+1; //@line 1527 "xmltok_impl.c"
        $ptr_addr=$7; //@line 1527 "xmltok_impl.c"
        __label__ = 10; break; //@line 1527 "xmltok_impl.c"
      case 2: // $bb1
        var $8=$ptr_addr; //@line 1530 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1530 "xmltok_impl.c"
        var $10=($9); //@line 1530 "xmltok_impl.c"
        $c=$10; //@line 1530 "xmltok_impl.c"
        var $11=$c; //@line 1531 "xmltok_impl.c"
        if ($11 == 48) {
          __label__ = 3; break;
        }
        else if ($11 == 49) {
          __label__ = 3; break;
        }
        else if ($11 == 50) {
          __label__ = 3; break;
        }
        else if ($11 == 51) {
          __label__ = 3; break;
        }
        else if ($11 == 52) {
          __label__ = 3; break;
        }
        else if ($11 == 53) {
          __label__ = 3; break;
        }
        else if ($11 == 54) {
          __label__ = 3; break;
        }
        else if ($11 == 55) {
          __label__ = 3; break;
        }
        else if ($11 == 56) {
          __label__ = 3; break;
        }
        else if ($11 == 57) {
          __label__ = 3; break;
        }
        else if ($11 == 65) {
          __label__ = 4; break;
        }
        else if ($11 == 66) {
          __label__ = 4; break;
        }
        else if ($11 == 67) {
          __label__ = 4; break;
        }
        else if ($11 == 68) {
          __label__ = 4; break;
        }
        else if ($11 == 69) {
          __label__ = 4; break;
        }
        else if ($11 == 70) {
          __label__ = 4; break;
        }
        else if ($11 == 97) {
          __label__ = 5; break;
        }
        else if ($11 == 98) {
          __label__ = 5; break;
        }
        else if ($11 == 99) {
          __label__ = 5; break;
        }
        else if ($11 == 100) {
          __label__ = 5; break;
        }
        else if ($11 == 101) {
          __label__ = 5; break;
        }
        else if ($11 == 102) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 3: // $bb2
        var $12=$result; //@line 1534 "xmltok_impl.c"
        var $13=($12) << 4; //@line 1534 "xmltok_impl.c"
        $result=$13; //@line 1534 "xmltok_impl.c"
        var $14=$c; //@line 1535 "xmltok_impl.c"
        var $15=($14) - 48; //@line 1535 "xmltok_impl.c"
        var $16=$result; //@line 1535 "xmltok_impl.c"
        var $17=($15) | ($16); //@line 1535 "xmltok_impl.c"
        $result=$17; //@line 1535 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 7; break; //@line 1535 "xmltok_impl.c"
      case 4: // $bb3
        var $18=$result; //@line 1539 "xmltok_impl.c"
        var $19=($18) << 4; //@line 1539 "xmltok_impl.c"
        $result=$19; //@line 1539 "xmltok_impl.c"
        var $20=$c; //@line 1540 "xmltok_impl.c"
        var $21=($20) - 55; //@line 1540 "xmltok_impl.c"
        var $22=$result; //@line 1540 "xmltok_impl.c"
        var $23=($21) + ($22); //@line 1540 "xmltok_impl.c"
        $result=$23; //@line 1540 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 7; break; //@line 1540 "xmltok_impl.c"
      case 5: // $bb4
        var $24=$result; //@line 1544 "xmltok_impl.c"
        var $25=($24) << 4; //@line 1544 "xmltok_impl.c"
        $result=$25; //@line 1544 "xmltok_impl.c"
        var $26=$c; //@line 1545 "xmltok_impl.c"
        var $27=($26) - 87; //@line 1545 "xmltok_impl.c"
        var $28=$result; //@line 1545 "xmltok_impl.c"
        var $29=($27) + ($28); //@line 1545 "xmltok_impl.c"
        $result=$29; //@line 1545 "xmltok_impl.c"
        __lastLabel__ = 5; __label__ = 7; break; //@line 1545 "xmltok_impl.c"
      case 6: // $bb5thread_pre_split
        var $_pr=$result;
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $bb5
        var $30=__lastLabel__ == 6 ? $_pr : (__lastLabel__ == 5 ? $29 : (__lastLabel__ == 4 ? $23 : ($17)));
        var $31=($30) > 1114111; //@line 1548 "xmltok_impl.c"
        if ($31) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1548 "xmltok_impl.c"
      case 8: // $bb6
        $0=-1; //@line 1549 "xmltok_impl.c"
        __label__ = 16; break; //@line 1549 "xmltok_impl.c"
      case 9: // $bb7
        var $32=$ptr_addr; //@line 1529 "xmltok_impl.c"
        var $33=$32+1; //@line 1529 "xmltok_impl.c"
        $ptr_addr=$33; //@line 1529 "xmltok_impl.c"
        __label__ = 10; break; //@line 1529 "xmltok_impl.c"
      case 10: // $bb8
        var $34=$ptr_addr; //@line 1528 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 1528 "xmltok_impl.c"
        var $36=($35)!=59; //@line 1528 "xmltok_impl.c"
        if ($36) { __label__ = 2; break; } else { __label__ = 15; break; } //@line 1528 "xmltok_impl.c"
      case 11: // $bb11
        var $37=$ptr_addr; //@line 1554 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 1554 "xmltok_impl.c"
        var $39=($38); //@line 1554 "xmltok_impl.c"
        $c12=$39; //@line 1554 "xmltok_impl.c"
        var $40=$result; //@line 1555 "xmltok_impl.c"
        var $41=($40) * 10; //@line 1555 "xmltok_impl.c"
        $result=$41; //@line 1555 "xmltok_impl.c"
        var $42=$c12; //@line 1556 "xmltok_impl.c"
        var $43=$result; //@line 1556 "xmltok_impl.c"
        var $44=($42) + -48;
        var $45=($44) + ($43); //@line 1556 "xmltok_impl.c"
        $result=$45; //@line 1556 "xmltok_impl.c"
        var $46=$result; //@line 1557 "xmltok_impl.c"
        var $47=($46) > 1114111; //@line 1557 "xmltok_impl.c"
        if ($47) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1557 "xmltok_impl.c"
      case 12: // $bb13
        $0=-1; //@line 1558 "xmltok_impl.c"
        __label__ = 16; break; //@line 1558 "xmltok_impl.c"
      case 13: // $bb14
        var $48=$ptr_addr; //@line 1553 "xmltok_impl.c"
        var $49=$48+1; //@line 1553 "xmltok_impl.c"
        $ptr_addr=$49; //@line 1553 "xmltok_impl.c"
        __label__ = 14; break; //@line 1553 "xmltok_impl.c"
      case 14: // $bb15
        var $50=$ptr_addr; //@line 1553 "xmltok_impl.c"
        var $51=HEAP[$50]; //@line 1553 "xmltok_impl.c"
        var $52=($51)!=59; //@line 1553 "xmltok_impl.c"
        if ($52) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 1553 "xmltok_impl.c"
      case 15: // $bb16
        var $53=$result; //@line 1561 "xmltok_impl.c"
        var $54=_checkCharRefNumber($53); //@line 1561 "xmltok_impl.c"
        $0=$54; //@line 1561 "xmltok_impl.c"
        __label__ = 16; break; //@line 1561 "xmltok_impl.c"
      case 16: // $bb17
        var $55=$0; //@line 1549 "xmltok_impl.c"
        $retval=$55; //@line 1549 "xmltok_impl.c"
        var $retval18=$retval; //@line 1549 "xmltok_impl.c"
        ;
        return $retval18; //@line 1549 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_predefinedEntityName($enc, $ptr, $end) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        var $1=$end_addr; //@line 1568 "xmltok_impl.c"
        var $2=($1); //@line 1568 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 1568 "xmltok_impl.c"
        var $4=($3); //@line 1568 "xmltok_impl.c"
        var $5=($2) - ($4); //@line 1568 "xmltok_impl.c"
        if ($5 == 2) {
          __label__ = 1; break;
        }
        else if ($5 == 3) {
          __label__ = 5; break;
        }
        else if ($5 == 4) {
          __label__ = 9; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 1: // $bb
        var $6=$ptr_addr; //@line 1570 "xmltok_impl.c"
        var $7=$6+1; //@line 1570 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1570 "xmltok_impl.c"
        var $9=($8)==116; //@line 1570 "xmltok_impl.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 18; break; } //@line 1570 "xmltok_impl.c"
      case 2: // $bb1
        var $10=$ptr_addr; //@line 1571 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 1571 "xmltok_impl.c"
        var $12=($11); //@line 1571 "xmltok_impl.c"
        if ($12 == 103) {
          __label__ = 4; break;
        }
        else if ($12 == 108) {
          __label__ = 3; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 3: // $bb2
        $0=60; //@line 1573 "xmltok_impl.c"
        __label__ = 19; break; //@line 1573 "xmltok_impl.c"
      case 4: // $bb3
        $0=62; //@line 1575 "xmltok_impl.c"
        __label__ = 19; break; //@line 1575 "xmltok_impl.c"
      case 5: // $bb5
        var $13=$ptr_addr; //@line 1580 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 1580 "xmltok_impl.c"
        var $15=($14)==97; //@line 1580 "xmltok_impl.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 18; break; } //@line 1580 "xmltok_impl.c"
      case 6: // $bb6
        var $16=$ptr_addr; //@line 1581 "xmltok_impl.c"
        var $17=$16+1; //@line 1581 "xmltok_impl.c"
        $ptr_addr=$17; //@line 1581 "xmltok_impl.c"
        var $18=$ptr_addr; //@line 1582 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1582 "xmltok_impl.c"
        var $20=($19)==109; //@line 1582 "xmltok_impl.c"
        if ($20) { __label__ = 7; break; } else { __label__ = 18; break; } //@line 1582 "xmltok_impl.c"
      case 7: // $bb7
        var $21=$ptr_addr; //@line 1583 "xmltok_impl.c"
        var $22=$21+1; //@line 1583 "xmltok_impl.c"
        $ptr_addr=$22; //@line 1583 "xmltok_impl.c"
        var $23=$ptr_addr; //@line 1584 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 1584 "xmltok_impl.c"
        var $25=($24)==112; //@line 1584 "xmltok_impl.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 18; break; } //@line 1584 "xmltok_impl.c"
      case 8: // $bb8
        $0=38; //@line 1585 "xmltok_impl.c"
        __label__ = 19; break; //@line 1585 "xmltok_impl.c"
      case 9: // $bb10
        var $26=$ptr_addr; //@line 1590 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 1590 "xmltok_impl.c"
        var $28=($27); //@line 1590 "xmltok_impl.c"
        if ($28 == 97) {
          __label__ = 14; break;
        }
        else if ($28 == 113) {
          __label__ = 10; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 10: // $bb11
        var $29=$ptr_addr; //@line 1592 "xmltok_impl.c"
        var $30=$29+1; //@line 1592 "xmltok_impl.c"
        $ptr_addr=$30; //@line 1592 "xmltok_impl.c"
        var $31=$ptr_addr; //@line 1593 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 1593 "xmltok_impl.c"
        var $33=($32)==117; //@line 1593 "xmltok_impl.c"
        if ($33) { __label__ = 11; break; } else { __label__ = 18; break; } //@line 1593 "xmltok_impl.c"
      case 11: // $bb12
        var $34=$ptr_addr; //@line 1594 "xmltok_impl.c"
        var $35=$34+1; //@line 1594 "xmltok_impl.c"
        $ptr_addr=$35; //@line 1594 "xmltok_impl.c"
        var $36=$ptr_addr; //@line 1595 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 1595 "xmltok_impl.c"
        var $38=($37)==111; //@line 1595 "xmltok_impl.c"
        if ($38) { __label__ = 12; break; } else { __label__ = 18; break; } //@line 1595 "xmltok_impl.c"
      case 12: // $bb13
        var $39=$ptr_addr; //@line 1596 "xmltok_impl.c"
        var $40=$39+1; //@line 1596 "xmltok_impl.c"
        $ptr_addr=$40; //@line 1596 "xmltok_impl.c"
        var $41=$ptr_addr; //@line 1597 "xmltok_impl.c"
        var $42=HEAP[$41]; //@line 1597 "xmltok_impl.c"
        var $43=($42)==116; //@line 1597 "xmltok_impl.c"
        if ($43) { __label__ = 13; break; } else { __label__ = 18; break; } //@line 1597 "xmltok_impl.c"
      case 13: // $bb14
        $0=34; //@line 1598 "xmltok_impl.c"
        __label__ = 19; break; //@line 1598 "xmltok_impl.c"
      case 14: // $bb16
        var $44=$ptr_addr; //@line 1603 "xmltok_impl.c"
        var $45=$44+1; //@line 1603 "xmltok_impl.c"
        $ptr_addr=$45; //@line 1603 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 1604 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 1604 "xmltok_impl.c"
        var $48=($47)==112; //@line 1604 "xmltok_impl.c"
        if ($48) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 1604 "xmltok_impl.c"
      case 15: // $bb17
        var $49=$ptr_addr; //@line 1605 "xmltok_impl.c"
        var $50=$49+1; //@line 1605 "xmltok_impl.c"
        $ptr_addr=$50; //@line 1605 "xmltok_impl.c"
        var $51=$ptr_addr; //@line 1606 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 1606 "xmltok_impl.c"
        var $53=($52)==111; //@line 1606 "xmltok_impl.c"
        if ($53) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 1606 "xmltok_impl.c"
      case 16: // $bb18
        var $54=$ptr_addr; //@line 1607 "xmltok_impl.c"
        var $55=$54+1; //@line 1607 "xmltok_impl.c"
        $ptr_addr=$55; //@line 1607 "xmltok_impl.c"
        var $56=$ptr_addr; //@line 1608 "xmltok_impl.c"
        var $57=HEAP[$56]; //@line 1608 "xmltok_impl.c"
        var $58=($57)==115; //@line 1608 "xmltok_impl.c"
        if ($58) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1608 "xmltok_impl.c"
      case 17: // $bb19
        $0=39; //@line 1609 "xmltok_impl.c"
        __label__ = 19; break; //@line 1609 "xmltok_impl.c"
      case 18: // $bb20
        $0=0; //@line 1615 "xmltok_impl.c"
        __label__ = 19; break; //@line 1615 "xmltok_impl.c"
      case 19: // $bb21
        var $59=$0; //@line 1573 "xmltok_impl.c"
        $retval=$59; //@line 1573 "xmltok_impl.c"
        var $retval22=$retval; //@line 1573 "xmltok_impl.c"
        ;
        return $retval22; //@line 1573 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_sameName($enc, $ptr1, $ptr2) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr1_addr;
        var $ptr2_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr1_addr=$ptr1;
        $ptr2_addr=$ptr2;
        __label__ = 1; break; //@line 1620 "xmltok.c"
      case 1: // $bb
        var $1=$enc_addr; //@line 1622 "xmltok_impl.c"
        var $2=$1; //@line 1622 "xmltok_impl.c"
        var $3=$ptr1_addr; //@line 1622 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 1622 "xmltok_impl.c"
        var $5=($4); //@line 1622 "xmltok_impl.c"
        var $6=$2+76; //@line 1622 "xmltok_impl.c"
        var $7=$6+$5; //@line 1622 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1622 "xmltok_impl.c"
        var $9=($8); //@line 1622 "xmltok_impl.c"
        if ($9 == 5) {
          __label__ = 6; break;
        }
        else if ($9 == 6) {
          __label__ = 4; break;
        }
        else if ($9 == 7) {
          __label__ = 2; break;
        }
        else if ($9 == 22) {
          __label__ = 10; break;
        }
        else if ($9 == 23) {
          __label__ = 10; break;
        }
        else if ($9 == 24) {
          __label__ = 10; break;
        }
        else if ($9 == 25) {
          __label__ = 10; break;
        }
        else if ($9 == 26) {
          __label__ = 10; break;
        }
        else if ($9 == 27) {
          __label__ = 10; break;
        }
        else if ($9 == 29) {
          __label__ = 10; break;
        }
        else {
        __label__ = 12; break;
        }
        
      case 2: // $bb1
        var $10=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 1627 "xmltok_impl.c"
        var $12=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1627 "xmltok_impl.c"
        var $14=($11)!=($13); //@line 1627 "xmltok_impl.c"
        var $15=($14); //@line 1627 "xmltok_impl.c"
        var $16=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $17=$16+1; //@line 1627 "xmltok_impl.c"
        $ptr1_addr=$17; //@line 1627 "xmltok_impl.c"
        var $18=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $19=$18+1; //@line 1627 "xmltok_impl.c"
        $ptr2_addr=$19; //@line 1627 "xmltok_impl.c"
        var $toBool=($15)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1627 "xmltok_impl.c"
      case 3: // $bb2
        $0=0; //@line 1627 "xmltok_impl.c"
        __label__ = 17; break; //@line 1627 "xmltok_impl.c"
      case 4: // $bb3
        var $20=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1627 "xmltok_impl.c"
        var $22=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 1627 "xmltok_impl.c"
        var $24=($21)!=($23); //@line 1627 "xmltok_impl.c"
        var $25=($24); //@line 1627 "xmltok_impl.c"
        var $26=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $27=$26+1; //@line 1627 "xmltok_impl.c"
        $ptr1_addr=$27; //@line 1627 "xmltok_impl.c"
        var $28=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $29=$28+1; //@line 1627 "xmltok_impl.c"
        $ptr2_addr=$29; //@line 1627 "xmltok_impl.c"
        var $toBool4=($25)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool4) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1627 "xmltok_impl.c"
      case 5: // $bb5
        $0=0; //@line 1627 "xmltok_impl.c"
        __label__ = 17; break; //@line 1627 "xmltok_impl.c"
      case 6: // $bb6
        var $30=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 1627 "xmltok_impl.c"
        var $32=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 1627 "xmltok_impl.c"
        var $34=($31)!=($33); //@line 1627 "xmltok_impl.c"
        var $35=($34); //@line 1627 "xmltok_impl.c"
        var $36=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $37=$36+1; //@line 1627 "xmltok_impl.c"
        $ptr1_addr=$37; //@line 1627 "xmltok_impl.c"
        var $38=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $39=$38+1; //@line 1627 "xmltok_impl.c"
        $ptr2_addr=$39; //@line 1627 "xmltok_impl.c"
        var $toBool7=($35)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool7) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1627 "xmltok_impl.c"
      case 7: // $bb8
        $0=0; //@line 1627 "xmltok_impl.c"
        __label__ = 17; break; //@line 1627 "xmltok_impl.c"
      case 8: // $bb9
        var $40=$ptr1_addr; //@line 1630 "xmltok_impl.c"
        var $41=HEAP[$40]; //@line 1630 "xmltok_impl.c"
        var $42=$ptr2_addr; //@line 1630 "xmltok_impl.c"
        var $43=HEAP[$42]; //@line 1630 "xmltok_impl.c"
        var $44=($41)!=($43); //@line 1630 "xmltok_impl.c"
        var $45=($44); //@line 1630 "xmltok_impl.c"
        var $46=$ptr1_addr; //@line 1630 "xmltok_impl.c"
        var $47=$46+1; //@line 1630 "xmltok_impl.c"
        $ptr1_addr=$47; //@line 1630 "xmltok_impl.c"
        var $48=$ptr2_addr; //@line 1630 "xmltok_impl.c"
        var $49=$48+1; //@line 1630 "xmltok_impl.c"
        $ptr2_addr=$49; //@line 1630 "xmltok_impl.c"
        var $toBool10=($45)!=0; //@line 1630 "xmltok_impl.c"
        if ($toBool10) { __label__ = 9; break; } else { __label__ = 1; break; } //@line 1630 "xmltok_impl.c"
      case 9: // $bb11
        $0=0; //@line 1631 "xmltok_impl.c"
        __label__ = 17; break; //@line 1631 "xmltok_impl.c"
      case 10: // $bb13
        var $50=$ptr2_addr; //@line 1642 "xmltok_impl.c"
        var $51=HEAP[$50]; //@line 1642 "xmltok_impl.c"
        var $52=$ptr1_addr; //@line 1642 "xmltok_impl.c"
        var $53=HEAP[$52]; //@line 1642 "xmltok_impl.c"
        var $54=($51)!=($53); //@line 1642 "xmltok_impl.c"
        var $55=($54); //@line 1642 "xmltok_impl.c"
        var $56=$ptr2_addr; //@line 1642 "xmltok_impl.c"
        var $57=$56+1; //@line 1642 "xmltok_impl.c"
        $ptr2_addr=$57; //@line 1642 "xmltok_impl.c"
        var $58=$ptr1_addr; //@line 1642 "xmltok_impl.c"
        var $59=$58+1; //@line 1642 "xmltok_impl.c"
        $ptr1_addr=$59; //@line 1642 "xmltok_impl.c"
        var $toBool14=($55)!=0; //@line 1642 "xmltok_impl.c"
        if ($toBool14) { __label__ = 11; break; } else { __label__ = 1; break; } //@line 1642 "xmltok_impl.c"
      case 11: // $bb15
        $0=0; //@line 1643 "xmltok_impl.c"
        __label__ = 17; break; //@line 1643 "xmltok_impl.c"
      case 12: // $bb17
        var $60=$ptr1_addr; //@line 1658 "xmltok_impl.c"
        var $61=HEAP[$60]; //@line 1658 "xmltok_impl.c"
        var $62=$ptr2_addr; //@line 1658 "xmltok_impl.c"
        var $63=HEAP[$62]; //@line 1658 "xmltok_impl.c"
        var $64=($61)==($63); //@line 1658 "xmltok_impl.c"
        if ($64) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1658 "xmltok_impl.c"
      case 13: // $bb18
        $0=1; //@line 1659 "xmltok_impl.c"
        __label__ = 17; break; //@line 1659 "xmltok_impl.c"
      case 14: // $bb19
        var $65=$enc_addr; //@line 1660 "xmltok_impl.c"
        var $66=$65; //@line 1660 "xmltok_impl.c"
        var $67=$ptr2_addr; //@line 1660 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 1660 "xmltok_impl.c"
        var $69=($68); //@line 1660 "xmltok_impl.c"
        var $70=$66+76; //@line 1660 "xmltok_impl.c"
        var $71=$70+$69; //@line 1660 "xmltok_impl.c"
        var $72=HEAP[$71]; //@line 1660 "xmltok_impl.c"
        var $73=($72); //@line 1660 "xmltok_impl.c"
        if ($73 == 5) {
          __label__ = 15; break;
        }
        else if ($73 == 6) {
          __label__ = 15; break;
        }
        else if ($73 == 7) {
          __label__ = 15; break;
        }
        else if ($73 == 22) {
          __label__ = 15; break;
        }
        else if ($73 == 23) {
          __label__ = 15; break;
        }
        else if ($73 == 24) {
          __label__ = 15; break;
        }
        else if ($73 == 25) {
          __label__ = 15; break;
        }
        else if ($73 == 26) {
          __label__ = 15; break;
        }
        else if ($73 == 27) {
          __label__ = 15; break;
        }
        else if ($73 == 29) {
          __label__ = 15; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 15: // $bb20
        $0=0; //@line 1673 "xmltok_impl.c"
        __label__ = 17; break; //@line 1673 "xmltok_impl.c"
      case 16: // $bb21
        $0=1; //@line 1675 "xmltok_impl.c"
        __label__ = 17; break; //@line 1675 "xmltok_impl.c"
      case 17: // $bb23
        var $74=$0; //@line 1627 "xmltok_impl.c"
        $retval=$74; //@line 1627 "xmltok_impl.c"
        var $retval24=$retval; //@line 1627 "xmltok_impl.c"
        ;
        return $retval24; //@line 1627 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_nameMatchesAscii($enc, $ptr1, $end1, $ptr2) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr1_addr;
        var $end1_addr;
        var $ptr2_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr1_addr=$ptr1;
        $end1_addr=$end1;
        $ptr2_addr=$ptr2;
        __label__ = 6; break; //@line 1686 "xmltok_impl.c"
      case 1: // $bb
        if ($15) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1687 "xmltok_impl.c"
      case 2: // $bb1
        $0=0; //@line 1688 "xmltok_impl.c"
        __label__ = 8; break; //@line 1688 "xmltok_impl.c"
      case 3: // $bb2
        var $1=$ptr1_addr; //@line 1689 "xmltok_impl.c"
        var $2=HEAP[$1]; //@line 1689 "xmltok_impl.c"
        var $3=$ptr2_addr; //@line 1689 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 1689 "xmltok_impl.c"
        var $5=($2)!=($4); //@line 1689 "xmltok_impl.c"
        if ($5) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1689 "xmltok_impl.c"
      case 4: // $bb3
        $0=0; //@line 1690 "xmltok_impl.c"
        __label__ = 8; break; //@line 1690 "xmltok_impl.c"
      case 5: // $bb4
        var $6=$ptr1_addr; //@line 1686 "xmltok_impl.c"
        var $7=$6+1; //@line 1686 "xmltok_impl.c"
        $ptr1_addr=$7; //@line 1686 "xmltok_impl.c"
        var $8=$ptr2_addr; //@line 1686 "xmltok_impl.c"
        var $9=$8+1; //@line 1686 "xmltok_impl.c"
        $ptr2_addr=$9; //@line 1686 "xmltok_impl.c"
        __label__ = 6; break; //@line 1686 "xmltok_impl.c"
      case 6: // $bb5
        var $10=$ptr2_addr; //@line 1686 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 1686 "xmltok_impl.c"
        var $12=($11)!=0; //@line 1686 "xmltok_impl.c"
        var $13=$ptr1_addr; //@line 1687 "xmltok_impl.c"
        var $14=$end1_addr; //@line 1687 "xmltok_impl.c"
        var $15=($13)==($14); //@line 1687 "xmltok_impl.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 1686 "xmltok_impl.c"
      case 7: // $bb6
        var $16=($15); //@line 1692 "xmltok_impl.c"
        $0=$16; //@line 1692 "xmltok_impl.c"
        __label__ = 8; break; //@line 1692 "xmltok_impl.c"
      case 8: // $bb7
        var $17=$0; //@line 1688 "xmltok_impl.c"
        $retval=$17; //@line 1688 "xmltok_impl.c"
        var $retval8=$retval; //@line 1688 "xmltok_impl.c"
        ;
        return $retval8; //@line 1688 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_nameLength($enc, $ptr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $retval;
        var $0;
        var $start;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        var $1=$ptr_addr; //@line 1698 "xmltok_impl.c"
        $start=$1; //@line 1698 "xmltok_impl.c"
        __label__ = 1; break; //@line 1698 "xmltok_impl.c"
      case 1: // $bb
        var $2=$enc_addr; //@line 1700 "xmltok_impl.c"
        var $3=$2; //@line 1700 "xmltok_impl.c"
        var $4=$ptr_addr; //@line 1700 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1700 "xmltok_impl.c"
        var $6=($5); //@line 1700 "xmltok_impl.c"
        var $7=$3+76; //@line 1700 "xmltok_impl.c"
        var $8=$7+$6; //@line 1700 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1700 "xmltok_impl.c"
        var $10=($9); //@line 1700 "xmltok_impl.c"
        if ($10 == 5) {
          __label__ = 2; break;
        }
        else if ($10 == 6) {
          __label__ = 3; break;
        }
        else if ($10 == 7) {
          __label__ = 4; break;
        }
        else if ($10 == 22) {
          __label__ = 5; break;
        }
        else if ($10 == 23) {
          __label__ = 5; break;
        }
        else if ($10 == 24) {
          __label__ = 5; break;
        }
        else if ($10 == 25) {
          __label__ = 5; break;
        }
        else if ($10 == 26) {
          __label__ = 5; break;
        }
        else if ($10 == 27) {
          __label__ = 5; break;
        }
        else if ($10 == 29) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 2: // $bb1
        var $11=$ptr_addr; //@line 1703 "xmltok_impl.c"
        var $12=$11+2; //@line 1703 "xmltok_impl.c"
        $ptr_addr=$12; //@line 1703 "xmltok_impl.c"
        __label__ = 1; break; //@line 1703 "xmltok_impl.c"
      case 3: // $bb2
        var $13=$ptr_addr; //@line 1703 "xmltok_impl.c"
        var $14=$13+3; //@line 1703 "xmltok_impl.c"
        $ptr_addr=$14; //@line 1703 "xmltok_impl.c"
        __label__ = 1; break; //@line 1703 "xmltok_impl.c"
      case 4: // $bb3
        var $15=$ptr_addr; //@line 1703 "xmltok_impl.c"
        var $16=$15+4; //@line 1703 "xmltok_impl.c"
        $ptr_addr=$16; //@line 1703 "xmltok_impl.c"
        __label__ = 1; break; //@line 1703 "xmltok_impl.c"
      case 5: // $bb4
        var $17=$ptr_addr; //@line 1714 "xmltok_impl.c"
        var $18=$17+1; //@line 1714 "xmltok_impl.c"
        $ptr_addr=$18; //@line 1714 "xmltok_impl.c"
        __label__ = 1; break; //@line 1714 "xmltok_impl.c"
      case 6: // $bb5
        var $19=$ptr_addr; //@line 1717 "xmltok_impl.c"
        var $20=($19); //@line 1717 "xmltok_impl.c"
        var $21=$start; //@line 1717 "xmltok_impl.c"
        var $22=($21); //@line 1717 "xmltok_impl.c"
        var $23=($20) - ($22); //@line 1717 "xmltok_impl.c"
        $0=$23; //@line 1717 "xmltok_impl.c"
        var $24=$0; //@line 1717 "xmltok_impl.c"
        $retval=$24; //@line 1717 "xmltok_impl.c"
        var $retval7=$retval; //@line 1717 "xmltok_impl.c"
        ;
        return $retval7; //@line 1717 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_skipS($enc, $ptr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        __label__ = 1; break; //@line 1724 "xmltok.c"
      case 1: // $bb
        var $1=$enc_addr; //@line 1726 "xmltok_impl.c"
        var $2=$1; //@line 1726 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 1726 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 1726 "xmltok_impl.c"
        var $5=($4); //@line 1726 "xmltok_impl.c"
        var $6=$2+76; //@line 1726 "xmltok_impl.c"
        var $7=$6+$5; //@line 1726 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1726 "xmltok_impl.c"
        var $9=($8); //@line 1726 "xmltok_impl.c"
        if ($9 == 9) {
          __label__ = 2; break;
        }
        else if ($9 == 10) {
          __label__ = 2; break;
        }
        else if ($9 == 21) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 2: // $bb1
        var $10=$ptr_addr; //@line 1730 "xmltok_impl.c"
        var $11=$10+1; //@line 1730 "xmltok_impl.c"
        $ptr_addr=$11; //@line 1730 "xmltok_impl.c"
        __label__ = 1; break; //@line 1730 "xmltok_impl.c"
      case 3: // $bb2
        var $12=$ptr_addr; //@line 1733 "xmltok_impl.c"
        $0=$12; //@line 1733 "xmltok_impl.c"
        var $13=$0; //@line 1733 "xmltok_impl.c"
        $retval=$13; //@line 1733 "xmltok_impl.c"
        var $retval3=$retval; //@line 1733 "xmltok_impl.c"
        ;
        return $retval3; //@line 1733 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_updatePosition($enc, $ptr, $end, $pos) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $pos_addr;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $pos_addr=$pos;
        var $0=$ptr_addr; //@line 1744 "xmltok_impl.c"
        var $1=$end_addr; //@line 1744 "xmltok_impl.c"
        var $2=($0) < ($1); //@line 1744 "xmltok_impl.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 1744 "xmltok_impl.c"
      case 1: // $bb
        var $3=$enc_addr; //@line 1745 "xmltok_impl.c"
        var $4=$3; //@line 1745 "xmltok_impl.c"
        var $5=$ptr_addr; //@line 1745 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 1745 "xmltok_impl.c"
        var $7=($6); //@line 1745 "xmltok_impl.c"
        var $8=$4+76; //@line 1745 "xmltok_impl.c"
        var $9=$8+$7; //@line 1745 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1745 "xmltok_impl.c"
        var $11=($10); //@line 1745 "xmltok_impl.c"
        if ($11 == 5) {
          __label__ = 2; break;
        }
        else if ($11 == 6) {
          __label__ = 3; break;
        }
        else if ($11 == 7) {
          __label__ = 4; break;
        }
        else if ($11 == 9) {
          __label__ = 6; break;
        }
        else if ($11 == 10) {
          __label__ = 5; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 2: // $bb1
        var $12=$ptr_addr; //@line 1750 "xmltok_impl.c"
        var $13=$12+2; //@line 1750 "xmltok_impl.c"
        $ptr_addr=$13; //@line 1750 "xmltok_impl.c"
        __label__ = 11; break; //@line 1750 "xmltok_impl.c"
      case 3: // $bb2
        var $14=$ptr_addr; //@line 1750 "xmltok_impl.c"
        var $15=$14+3; //@line 1750 "xmltok_impl.c"
        $ptr_addr=$15; //@line 1750 "xmltok_impl.c"
        __label__ = 11; break; //@line 1750 "xmltok_impl.c"
      case 4: // $bb3
        var $16=$ptr_addr; //@line 1750 "xmltok_impl.c"
        var $17=$16+4; //@line 1750 "xmltok_impl.c"
        $ptr_addr=$17; //@line 1750 "xmltok_impl.c"
        __label__ = 11; break; //@line 1750 "xmltok_impl.c"
      case 5: // $bb4
        var $18=$pos_addr; //@line 1753 "xmltok_impl.c"
        var $19=$18+4; //@line 1753 "xmltok_impl.c"
        HEAP[$19]=-1; //@line 1753 "xmltok_impl.c"
        var $20=$pos_addr; //@line 1754 "xmltok_impl.c"
        var $21=$20; //@line 1754 "xmltok_impl.c"
        var $22=HEAP[$21]; //@line 1754 "xmltok_impl.c"
        var $23=($22) + 1; //@line 1754 "xmltok_impl.c"
        var $24=$pos_addr; //@line 1754 "xmltok_impl.c"
        var $25=$24; //@line 1754 "xmltok_impl.c"
        HEAP[$25]=$23; //@line 1754 "xmltok_impl.c"
        var $26=$ptr_addr; //@line 1755 "xmltok_impl.c"
        var $27=$26+1; //@line 1755 "xmltok_impl.c"
        $ptr_addr=$27; //@line 1755 "xmltok_impl.c"
        __label__ = 11; break; //@line 1755 "xmltok_impl.c"
      case 6: // $bb5
        var $28=$pos_addr; //@line 1758 "xmltok_impl.c"
        var $29=$28; //@line 1758 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 1758 "xmltok_impl.c"
        var $31=($30) + 1; //@line 1758 "xmltok_impl.c"
        var $32=$pos_addr; //@line 1758 "xmltok_impl.c"
        var $33=$32; //@line 1758 "xmltok_impl.c"
        HEAP[$33]=$31; //@line 1758 "xmltok_impl.c"
        var $34=$ptr_addr; //@line 1759 "xmltok_impl.c"
        var $35=$34+1; //@line 1759 "xmltok_impl.c"
        $ptr_addr=$35; //@line 1759 "xmltok_impl.c"
        var $36=$ptr_addr; //@line 1760 "xmltok_impl.c"
        var $37=$end_addr; //@line 1760 "xmltok_impl.c"
        var $38=($36)!=($37); //@line 1760 "xmltok_impl.c"
        if ($38) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1760 "xmltok_impl.c"
      case 7: // $bb6
        var $39=$enc_addr; //@line 1760 "xmltok_impl.c"
        var $40=$39; //@line 1760 "xmltok_impl.c"
        var $41=$ptr_addr; //@line 1760 "xmltok_impl.c"
        var $42=HEAP[$41]; //@line 1760 "xmltok_impl.c"
        var $43=($42); //@line 1760 "xmltok_impl.c"
        var $44=$40+76; //@line 1760 "xmltok_impl.c"
        var $45=$44+$43; //@line 1760 "xmltok_impl.c"
        var $46=HEAP[$45]; //@line 1760 "xmltok_impl.c"
        var $47=($46)==10; //@line 1760 "xmltok_impl.c"
        if ($47) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1760 "xmltok_impl.c"
      case 8: // $bb7
        var $48=$ptr_addr; //@line 1761 "xmltok_impl.c"
        var $49=$48+1; //@line 1761 "xmltok_impl.c"
        $ptr_addr=$49; //@line 1761 "xmltok_impl.c"
        __label__ = 9; break; //@line 1761 "xmltok_impl.c"
      case 9: // $bb8
        var $50=$pos_addr; //@line 1762 "xmltok_impl.c"
        var $51=$50+4; //@line 1762 "xmltok_impl.c"
        HEAP[$51]=-1; //@line 1762 "xmltok_impl.c"
        __label__ = 11; break; //@line 1762 "xmltok_impl.c"
      case 10: // $bb9
        var $52=$ptr_addr; //@line 1765 "xmltok_impl.c"
        var $53=$52+1; //@line 1765 "xmltok_impl.c"
        $ptr_addr=$53; //@line 1765 "xmltok_impl.c"
        __label__ = 11; break; //@line 1765 "xmltok_impl.c"
      case 11: // $bb10
        var $54=$pos_addr; //@line 1768 "xmltok_impl.c"
        var $55=$54+4; //@line 1768 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 1768 "xmltok_impl.c"
        var $57=($56) + 1; //@line 1768 "xmltok_impl.c"
        var $58=$pos_addr; //@line 1768 "xmltok_impl.c"
        var $59=$58+4; //@line 1768 "xmltok_impl.c"
        HEAP[$59]=$57; //@line 1768 "xmltok_impl.c"
        var $60=$ptr_addr; //@line 1744 "xmltok_impl.c"
        var $61=$end_addr; //@line 1744 "xmltok_impl.c"
        var $62=($60) < ($61); //@line 1744 "xmltok_impl.c"
        if ($62) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 1744 "xmltok_impl.c"
      case 12: // $return
        ;
        return; //@line 1770 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $fromP_addr;
        var $fromLim_addr;
        var $toP_addr;
        var $toLim_addr;
        var $to;
        var $from;
        $enc_addr=$enc;
        $fromP_addr=$fromP;
        $fromLim_addr=$fromLim;
        $toP_addr=$toP;
        $toLim_addr=$toLim;
        var $0=$fromLim_addr; //@line 324 "xmltok.c"
        var $1=($0); //@line 324 "xmltok.c"
        var $2=$fromP_addr; //@line 324 "xmltok.c"
        var $3=HEAP[$2]; //@line 324 "xmltok.c"
        var $4=($3); //@line 324 "xmltok.c"
        var $5=($1) - ($4); //@line 324 "xmltok.c"
        var $6=$toLim_addr; //@line 324 "xmltok.c"
        var $7=($6); //@line 324 "xmltok.c"
        var $8=$toP_addr; //@line 324 "xmltok.c"
        var $9=HEAP[$8]; //@line 324 "xmltok.c"
        var $10=($9); //@line 324 "xmltok.c"
        var $11=($7) - ($10); //@line 324 "xmltok.c"
        var $12=($5) > ($11); //@line 324 "xmltok.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 324 "xmltok.c"
      case 1: // $bb
        var $13=$fromP_addr; //@line 326 "xmltok.c"
        var $14=HEAP[$13]; //@line 326 "xmltok.c"
        var $15=$toLim_addr; //@line 326 "xmltok.c"
        var $16=($15); //@line 326 "xmltok.c"
        var $17=$toP_addr; //@line 326 "xmltok.c"
        var $18=HEAP[$17]; //@line 326 "xmltok.c"
        var $19=($18); //@line 326 "xmltok.c"
        var $20=($16) - ($19); //@line 326 "xmltok.c"
        var $21=$14+$20; //@line 326 "xmltok.c"
        $fromLim_addr=$21; //@line 326 "xmltok.c"
        __label__ = 4; break; //@line 326 "xmltok.c"
      case 2: // $bb1
        var $22=$fromLim_addr; //@line 327 "xmltok.c"
        var $23=$22+-1; //@line 327 "xmltok.c"
        var $24=HEAP[$23]; //@line 327 "xmltok.c"
        var $25=($24); //@line 327 "xmltok.c"
        var $26=($25) & 192; //@line 327 "xmltok.c"
        var $27=($26)!=128; //@line 327 "xmltok.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 3; break; } //@line 327 "xmltok.c"
      case 3: // $bb2
        var $28=$fromLim_addr; //@line 326 "xmltok.c"
        var $29=$28+-1; //@line 326 "xmltok.c"
        $fromLim_addr=$29; //@line 326 "xmltok.c"
        __label__ = 4; break; //@line 326 "xmltok.c"
      case 4: // $bb3
        var $30=$fromP_addr; //@line 326 "xmltok.c"
        var $31=HEAP[$30]; //@line 326 "xmltok.c"
        var $32=$fromLim_addr; //@line 326 "xmltok.c"
        var $33=($31) < ($32); //@line 326 "xmltok.c"
        if ($33) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 326 "xmltok.c"
      case 5: // $bb4
        var $34=$toP_addr; //@line 330 "xmltok.c"
        var $35=HEAP[$34]; //@line 330 "xmltok.c"
        $to=$35; //@line 330 "xmltok.c"
        var $36=$fromP_addr; //@line 330 "xmltok.c"
        var $37=HEAP[$36]; //@line 330 "xmltok.c"
        $from=$37; //@line 330 "xmltok.c"
        var $38=$from; //@line 330 "xmltok.c"
        var $39=$fromLim_addr; //@line 330 "xmltok.c"
        var $40=($38)!=($39); //@line 330 "xmltok.c"
        if ($40) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 330 "xmltok.c"
      case 6: // $bb5
        var $41=$from; //@line 331 "xmltok.c"
        var $42=HEAP[$41]; //@line 331 "xmltok.c"
        var $43=$to; //@line 331 "xmltok.c"
        HEAP[$43]=$42; //@line 331 "xmltok.c"
        var $44=$from; //@line 330 "xmltok.c"
        var $45=$44+1; //@line 330 "xmltok.c"
        $from=$45; //@line 330 "xmltok.c"
        var $46=$to; //@line 330 "xmltok.c"
        var $47=$46+1; //@line 330 "xmltok.c"
        $to=$47; //@line 330 "xmltok.c"
        var $48=$from; //@line 330 "xmltok.c"
        var $49=$fromLim_addr; //@line 330 "xmltok.c"
        var $50=($48)!=($49); //@line 330 "xmltok.c"
        if ($50) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 330 "xmltok.c"
      case 7: // $bb7
        var $51=$fromP_addr; //@line 332 "xmltok.c"
        var $52=$from; //@line 332 "xmltok.c"
        HEAP[$51]=$52; //@line 332 "xmltok.c"
        var $53=$toP_addr; //@line 333 "xmltok.c"
        var $54=$to; //@line 333 "xmltok.c"
        HEAP[$53]=$54; //@line 333 "xmltok.c"
        ;
        return; //@line 334 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $fromP_addr;
        var $fromLim_addr;
        var $toP_addr;
        var $toLim_addr;
        var $to;
        var $from;
        var $n;
        $enc_addr=$enc;
        $fromP_addr=$fromP;
        $fromLim_addr=$fromLim;
        $toP_addr=$toP;
        $toLim_addr=$toLim;
        var $0=$toP_addr; //@line 341 "xmltok.c"
        var $1=HEAP[$0]; //@line 341 "xmltok.c"
        $to=$1; //@line 341 "xmltok.c"
        var $2=$fromP_addr; //@line 342 "xmltok.c"
        var $3=HEAP[$2]; //@line 342 "xmltok.c"
        $from=$3; //@line 342 "xmltok.c"
        __label__ = 7; break; //@line 342 "xmltok.c"
      case 1: // $bb
        var $4=$enc_addr; //@line 344 "xmltok.c"
        var $5=$4; //@line 344 "xmltok.c"
        var $6=$from; //@line 344 "xmltok.c"
        var $7=HEAP[$6]; //@line 344 "xmltok.c"
        var $8=($7); //@line 344 "xmltok.c"
        var $9=$5+76; //@line 344 "xmltok.c"
        var $10=$9+$8; //@line 344 "xmltok.c"
        var $11=HEAP[$10]; //@line 344 "xmltok.c"
        var $12=($11); //@line 344 "xmltok.c"
        if ($12 == 5) {
          __label__ = 2; break;
        }
        else if ($12 == 6) {
          __label__ = 3; break;
        }
        else if ($12 == 7) {
          __label__ = 4; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 2: // $bb1
        var $13=$from; //@line 346 "xmltok.c"
        var $14=$13; //@line 346 "xmltok.c"
        var $15=HEAP[$14]; //@line 346 "xmltok.c"
        var $16=($15); //@line 346 "xmltok.c"
        var $17=($16) & 31; //@line 346 "xmltok.c"
        var $18=($17) << 6; //@line 346 "xmltok.c"
        var $19=((($18)) & 65535); //@line 346 "xmltok.c"
        var $20=$from; //@line 346 "xmltok.c"
        var $21=$20+1; //@line 346 "xmltok.c"
        var $22=HEAP[$21]; //@line 346 "xmltok.c"
        var $23=($22); //@line 346 "xmltok.c"
        var $24=($23) & 63; //@line 346 "xmltok.c"
        var $25=($19) | ($24); //@line 346 "xmltok.c"
        var $26=$to; //@line 346 "xmltok.c"
        HEAP[$26]=$25; //@line 346 "xmltok.c"
        var $27=$to; //@line 346 "xmltok.c"
        var $28=$27+2; //@line 346 "xmltok.c"
        $to=$28; //@line 346 "xmltok.c"
        var $29=$from; //@line 347 "xmltok.c"
        var $30=$29+2; //@line 347 "xmltok.c"
        $from=$30; //@line 347 "xmltok.c"
        __label__ = 7; break; //@line 347 "xmltok.c"
      case 3: // $bb2
        var $31=$from; //@line 350 "xmltok.c"
        var $32=$31; //@line 350 "xmltok.c"
        var $33=HEAP[$32]; //@line 350 "xmltok.c"
        var $34=($33); //@line 350 "xmltok.c"
        var $35=($34) & 15; //@line 350 "xmltok.c"
        var $36=($35) << 12; //@line 350 "xmltok.c"
        var $37=((($36)) & 65535); //@line 350 "xmltok.c"
        var $38=$from; //@line 350 "xmltok.c"
        var $39=$38+1; //@line 350 "xmltok.c"
        var $40=HEAP[$39]; //@line 350 "xmltok.c"
        var $41=($40); //@line 350 "xmltok.c"
        var $42=($41) & 63; //@line 350 "xmltok.c"
        var $43=($42) << 6; //@line 350 "xmltok.c"
        var $44=((($43)) & 65535); //@line 350 "xmltok.c"
        var $45=$from; //@line 350 "xmltok.c"
        var $46=$45+2; //@line 350 "xmltok.c"
        var $47=HEAP[$46]; //@line 350 "xmltok.c"
        var $48=($47); //@line 350 "xmltok.c"
        var $49=($48) & 63; //@line 350 "xmltok.c"
        var $50=($49) | ($37); //@line 350 "xmltok.c"
        var $51=($50) | ($44); //@line 350 "xmltok.c"
        var $52=$to; //@line 350 "xmltok.c"
        HEAP[$52]=$51; //@line 350 "xmltok.c"
        var $53=$to; //@line 350 "xmltok.c"
        var $54=$53+2; //@line 350 "xmltok.c"
        $to=$54; //@line 350 "xmltok.c"
        var $55=$from; //@line 352 "xmltok.c"
        var $56=$55+3; //@line 352 "xmltok.c"
        $from=$56; //@line 352 "xmltok.c"
        __label__ = 7; break; //@line 352 "xmltok.c"
      case 4: // $bb3
        var $57=$to; //@line 357 "xmltok.c"
        var $58=$57+2; //@line 357 "xmltok.c"
        var $59=$toLim_addr; //@line 357 "xmltok.c"
        var $60=($58)==($59); //@line 357 "xmltok.c"
        if ($60) { __label__ = 9; break; } else { __label__ = 5; break; } //@line 357 "xmltok.c"
      case 5: // $bb4
        var $61=$from; //@line 359 "xmltok.c"
        var $62=$61; //@line 359 "xmltok.c"
        var $63=HEAP[$62]; //@line 359 "xmltok.c"
        var $64=($63); //@line 359 "xmltok.c"
        var $65=($64) & 7; //@line 359 "xmltok.c"
        var $66=($65) << 18; //@line 359 "xmltok.c"
        var $67=$from; //@line 359 "xmltok.c"
        var $68=$67+1; //@line 359 "xmltok.c"
        var $69=HEAP[$68]; //@line 359 "xmltok.c"
        var $70=($69); //@line 359 "xmltok.c"
        var $71=($70) & 63; //@line 359 "xmltok.c"
        var $72=($71) << 12; //@line 359 "xmltok.c"
        var $73=$from; //@line 359 "xmltok.c"
        var $74=$73+2; //@line 359 "xmltok.c"
        var $75=HEAP[$74]; //@line 359 "xmltok.c"
        var $76=($75); //@line 359 "xmltok.c"
        var $77=($76) & 63; //@line 359 "xmltok.c"
        var $78=($77) << 6; //@line 359 "xmltok.c"
        var $79=$from; //@line 359 "xmltok.c"
        var $80=$79+3; //@line 359 "xmltok.c"
        var $81=HEAP[$80]; //@line 359 "xmltok.c"
        var $82=($81); //@line 359 "xmltok.c"
        var $83=($82) & 63; //@line 359 "xmltok.c"
        var $84=($72) | ($66); //@line 359 "xmltok.c"
        var $85=($84) | ($78); //@line 359 "xmltok.c"
        var $86=($85) | ($83); //@line 359 "xmltok.c"
        $n=$86; //@line 359 "xmltok.c"
        var $87=$n; //@line 361 "xmltok.c"
        var $88=($87) - 65536; //@line 361 "xmltok.c"
        $n=$88; //@line 361 "xmltok.c"
        var $89=$n; //@line 362 "xmltok.c"
        var $90=($89) >>> 10; //@line 362 "xmltok.c"
        var $91=((($90)) & 65535); //@line 362 "xmltok.c"
        var $92=($91) | -10240; //@line 362 "xmltok.c"
        var $93=$to; //@line 362 "xmltok.c"
        var $94=$93; //@line 362 "xmltok.c"
        HEAP[$94]=$92; //@line 362 "xmltok.c"
        var $95=$n; //@line 363 "xmltok.c"
        var $96=((($95)) & 65535); //@line 363 "xmltok.c"
        var $97=($96) & 1023; //@line 363 "xmltok.c"
        var $98=($97) | -9216; //@line 363 "xmltok.c"
        var $99=$to; //@line 363 "xmltok.c"
        var $100=$99+2; //@line 363 "xmltok.c"
        HEAP[$100]=$98; //@line 363 "xmltok.c"
        var $101=$to; //@line 364 "xmltok.c"
        var $102=$101+4; //@line 364 "xmltok.c"
        $to=$102; //@line 364 "xmltok.c"
        var $103=$from; //@line 365 "xmltok.c"
        var $104=$103+4; //@line 365 "xmltok.c"
        $from=$104; //@line 365 "xmltok.c"
        __label__ = 7; break; //@line 365 "xmltok.c"
      case 6: // $bb5
        var $105=$from; //@line 369 "xmltok.c"
        var $106=HEAP[$105]; //@line 369 "xmltok.c"
        var $107=($106); //@line 369 "xmltok.c"
        var $108=$to; //@line 369 "xmltok.c"
        HEAP[$108]=$107; //@line 369 "xmltok.c"
        var $109=$to; //@line 369 "xmltok.c"
        var $110=$109+2; //@line 369 "xmltok.c"
        $to=$110; //@line 369 "xmltok.c"
        var $111=$from; //@line 369 "xmltok.c"
        var $112=$111+1; //@line 369 "xmltok.c"
        $from=$112; //@line 369 "xmltok.c"
        __label__ = 7; break; //@line 369 "xmltok.c"
      case 7: // $bb6
        var $113=$from; //@line 343 "xmltok.c"
        var $114=$fromLim_addr; //@line 343 "xmltok.c"
        var $115=($113)==($114); //@line 343 "xmltok.c"
        if ($115) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 343 "xmltok.c"
      case 8: // $bb7
        var $116=$to; //@line 343 "xmltok.c"
        var $117=$toLim_addr; //@line 343 "xmltok.c"
        var $118=($116)!=($117); //@line 343 "xmltok.c"
        if ($118) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 343 "xmltok.c"
      case 9: // $after
        var $119=$fromP_addr; //@line 374 "xmltok.c"
        var $120=$from; //@line 374 "xmltok.c"
        HEAP[$119]=$120; //@line 374 "xmltok.c"
        var $121=$toP_addr; //@line 375 "xmltok.c"
        var $122=$to; //@line 375 "xmltok.c"
        HEAP[$121]=$122; //@line 375 "xmltok.c"
        ;
        return; //@line 376 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _latin1_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $fromP_addr;
        var $fromLim_addr;
        var $toP_addr;
        var $toLim_addr;
        var $c;
        $enc_addr=$enc;
        $fromP_addr=$fromP;
        $fromLim_addr=$fromLim;
        $toP_addr=$toP;
        $toLim_addr=$toLim;
        __label__ = 1; break; //@line 428 "xmltok.c"
      case 1: // $bb
        var $0=$fromP_addr; //@line 431 "xmltok.c"
        var $1=HEAP[$0]; //@line 431 "xmltok.c"
        var $2=$fromLim_addr; //@line 431 "xmltok.c"
        var $3=($1)==($2); //@line 431 "xmltok.c"
        if ($3) { __label__ = 7; break; } else { __label__ = 2; break; } //@line 431 "xmltok.c"
      case 2: // $bb1
        var $4=$fromP_addr; //@line 433 "xmltok.c"
        var $5=HEAP[$4]; //@line 433 "xmltok.c"
        var $6=HEAP[$5]; //@line 433 "xmltok.c"
        $c=$6; //@line 433 "xmltok.c"
        var $7=$c; //@line 434 "xmltok.c"
        var $8=($7) < 0; //@line 434 "xmltok.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 434 "xmltok.c"
      case 3: // $bb2
        var $9=$toLim_addr; //@line 435 "xmltok.c"
        var $10=($9); //@line 435 "xmltok.c"
        var $11=$toP_addr; //@line 435 "xmltok.c"
        var $12=HEAP[$11]; //@line 435 "xmltok.c"
        var $13=($12); //@line 435 "xmltok.c"
        var $14=($10) - ($13); //@line 435 "xmltok.c"
        var $15=($14) <= 1; //@line 435 "xmltok.c"
        if ($15) { __label__ = 7; break; } else { __label__ = 4; break; } //@line 435 "xmltok.c"
      case 4: // $bb3
        var $16=$toP_addr; //@line 437 "xmltok.c"
        var $17=HEAP[$16]; //@line 437 "xmltok.c"
        var $18=$c; //@line 437 "xmltok.c"
        var $19=($18) >>> 6; //@line 437 "xmltok.c"
        var $20=($19) | -64; //@line 437 "xmltok.c"
        HEAP[$17]=$20; //@line 437 "xmltok.c"
        var $21=$17+1; //@line 437 "xmltok.c"
        var $22=$toP_addr; //@line 437 "xmltok.c"
        HEAP[$22]=$21; //@line 437 "xmltok.c"
        var $23=$toP_addr; //@line 438 "xmltok.c"
        var $24=HEAP[$23]; //@line 438 "xmltok.c"
        var $25=$c; //@line 438 "xmltok.c"
        var $26=($25) & 63; //@line 438 "xmltok.c"
        var $27=($26) | -128; //@line 438 "xmltok.c"
        HEAP[$24]=$27; //@line 438 "xmltok.c"
        var $28=$24+1; //@line 438 "xmltok.c"
        var $29=$toP_addr; //@line 438 "xmltok.c"
        HEAP[$29]=$28; //@line 438 "xmltok.c"
        var $30=$fromP_addr; //@line 439 "xmltok.c"
        var $31=HEAP[$30]; //@line 439 "xmltok.c"
        var $32=$31+1; //@line 439 "xmltok.c"
        var $33=$fromP_addr; //@line 439 "xmltok.c"
        HEAP[$33]=$32; //@line 439 "xmltok.c"
        __label__ = 1; break; //@line 439 "xmltok.c"
      case 5: // $bb4
        var $34=$toP_addr; //@line 442 "xmltok.c"
        var $35=HEAP[$34]; //@line 442 "xmltok.c"
        var $36=$toLim_addr; //@line 442 "xmltok.c"
        var $37=($35)==($36); //@line 442 "xmltok.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 442 "xmltok.c"
      case 6: // $bb5
        var $38=$toP_addr; //@line 444 "xmltok.c"
        var $39=HEAP[$38]; //@line 444 "xmltok.c"
        var $40=$fromP_addr; //@line 444 "xmltok.c"
        var $41=HEAP[$40]; //@line 444 "xmltok.c"
        var $42=HEAP[$41]; //@line 444 "xmltok.c"
        HEAP[$39]=$42; //@line 444 "xmltok.c"
        var $43=$39+1; //@line 444 "xmltok.c"
        var $44=$toP_addr; //@line 444 "xmltok.c"
        HEAP[$44]=$43; //@line 444 "xmltok.c"
        var $45=$41+1; //@line 444 "xmltok.c"
        var $46=$fromP_addr; //@line 444 "xmltok.c"
        HEAP[$46]=$45; //@line 444 "xmltok.c"
        __label__ = 1; break; //@line 444 "xmltok.c"
      case 7: // $return
        ;
        return; //@line 447 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _latin1_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $fromP_addr;
        var $fromLim_addr;
        var $toP_addr;
        var $toLim_addr;
        $enc_addr=$enc;
        $fromP_addr=$fromP;
        $fromLim_addr=$fromLim;
        $toP_addr=$toP;
        $toLim_addr=$toLim;
        __label__ = 2; break; //@line 454 "xmltok.c"
      case 1: // $bb
        var $0=$toP_addr; //@line 455 "xmltok.c"
        var $1=HEAP[$0]; //@line 455 "xmltok.c"
        var $2=$fromP_addr; //@line 455 "xmltok.c"
        var $3=HEAP[$2]; //@line 455 "xmltok.c"
        var $4=HEAP[$3]; //@line 455 "xmltok.c"
        var $5=($4); //@line 455 "xmltok.c"
        HEAP[$1]=$5; //@line 455 "xmltok.c"
        var $6=$1+2; //@line 455 "xmltok.c"
        var $7=$toP_addr; //@line 455 "xmltok.c"
        HEAP[$7]=$6; //@line 455 "xmltok.c"
        var $8=$3+1; //@line 455 "xmltok.c"
        var $9=$fromP_addr; //@line 455 "xmltok.c"
        HEAP[$9]=$8; //@line 455 "xmltok.c"
        __label__ = 2; break; //@line 455 "xmltok.c"
      case 2: // $bb1
        var $10=$fromP_addr; //@line 454 "xmltok.c"
        var $11=HEAP[$10]; //@line 454 "xmltok.c"
        var $12=$fromLim_addr; //@line 454 "xmltok.c"
        var $13=($11)==($12); //@line 454 "xmltok.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 454 "xmltok.c"
      case 3: // $bb2
        var $14=$toP_addr; //@line 454 "xmltok.c"
        var $15=HEAP[$14]; //@line 454 "xmltok.c"
        var $16=$toLim_addr; //@line 454 "xmltok.c"
        var $17=($15)!=($16); //@line 454 "xmltok.c"
        if ($17) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 454 "xmltok.c"
      case 4: // $return
        ;
        return; //@line 456 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ascii_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $fromP_addr;
        var $fromLim_addr;
        var $toP_addr;
        var $toLim_addr;
        $enc_addr=$enc;
        $fromP_addr=$fromP;
        $fromLim_addr=$fromLim;
        $toP_addr=$toP;
        $toLim_addr=$toLim;
        __label__ = 2; break; //@line 487 "xmltok.c"
      case 1: // $bb
        var $0=$toP_addr; //@line 488 "xmltok.c"
        var $1=HEAP[$0]; //@line 488 "xmltok.c"
        var $2=$fromP_addr; //@line 488 "xmltok.c"
        var $3=HEAP[$2]; //@line 488 "xmltok.c"
        var $4=HEAP[$3]; //@line 488 "xmltok.c"
        HEAP[$1]=$4; //@line 488 "xmltok.c"
        var $5=$1+1; //@line 488 "xmltok.c"
        var $6=$toP_addr; //@line 488 "xmltok.c"
        HEAP[$6]=$5; //@line 488 "xmltok.c"
        var $7=$3+1; //@line 488 "xmltok.c"
        var $8=$fromP_addr; //@line 488 "xmltok.c"
        HEAP[$8]=$7; //@line 488 "xmltok.c"
        __label__ = 2; break; //@line 488 "xmltok.c"
      case 2: // $bb1
        var $9=$fromP_addr; //@line 487 "xmltok.c"
        var $10=HEAP[$9]; //@line 487 "xmltok.c"
        var $11=$fromLim_addr; //@line 487 "xmltok.c"
        var $12=($10)==($11); //@line 487 "xmltok.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 487 "xmltok.c"
      case 3: // $bb2
        var $13=$toP_addr; //@line 487 "xmltok.c"
        var $14=HEAP[$13]; //@line 487 "xmltok.c"
        var $15=$toLim_addr; //@line 487 "xmltok.c"
        var $16=($14)!=($15); //@line 487 "xmltok.c"
        if ($16) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 487 "xmltok.c"
      case 4: // $return
        ;
        return; //@line 489 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unicode_byte_type($hi, $lo) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $hi_addr;
        var $lo_addr;
        var $retval;
        var $0;
        $hi_addr=$hi;
        $lo_addr=$lo;
        var $1=$hi_addr; //@line 518 "xmltok.c"
        var $2=($1); //@line 518 "xmltok.c"
        if ($2 == 216) {
          __label__ = 1; break;
        }
        else if ($2 == 217) {
          __label__ = 1; break;
        }
        else if ($2 == 218) {
          __label__ = 1; break;
        }
        else if ($2 == 219) {
          __label__ = 1; break;
        }
        else if ($2 == 220) {
          __label__ = 2; break;
        }
        else if ($2 == 221) {
          __label__ = 2; break;
        }
        else if ($2 == 222) {
          __label__ = 2; break;
        }
        else if ($2 == 223) {
          __label__ = 2; break;
        }
        else if ($2 == 255) {
          __label__ = 3; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $bb
        $0=7; //@line 520 "xmltok.c"
        __label__ = 6; break; //@line 520 "xmltok.c"
      case 2: // $bb1
        $0=8; //@line 522 "xmltok.c"
        __label__ = 6; break; //@line 522 "xmltok.c"
      case 3: // $bb2
        var $3=$lo_addr; //@line 524 "xmltok.c"
        var $4=($3); //@line 524 "xmltok.c"
        var $_off=($4) + -254;
        var $switch=($_off) < 2;
        if ($switch) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $bb3
        $0=0; //@line 527 "xmltok.c"
        __label__ = 6; break; //@line 527 "xmltok.c"
      case 5: // $bb4
        $0=29; //@line 531 "xmltok.c"
        __label__ = 6; break; //@line 531 "xmltok.c"
      case 6: // $bb5
        var $5=$0; //@line 520 "xmltok.c"
        $retval=$5; //@line 520 "xmltok.c"
        var $retval6=$retval; //@line 520 "xmltok.c"
        ;
        return $retval6; //@line 520 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $fromP_addr;
        var $fromLim_addr;
        var $toP_addr;
        var $toLim_addr;
        var $from;
        var $plane;
        var $lo2;
        var $lo;
        var $hi;
        $enc_addr=$enc;
        $fromP_addr=$fromP;
        $fromLim_addr=$fromLim;
        $toP_addr=$toP;
        $toLim_addr=$toLim;
        var $0=$fromP_addr; //@line 616 "xmltok.c"
        var $1=HEAP[$0]; //@line 616 "xmltok.c"
        $from=$1; //@line 616 "xmltok.c"
        __label__ = 16; break; //@line 616 "xmltok.c"
      case 1: // $bb
        var $2=$from; //@line 616 "xmltok.c"
        var $3=$2; //@line 616 "xmltok.c"
        var $4=HEAP[$3]; //@line 616 "xmltok.c"
        $lo=$4; //@line 616 "xmltok.c"
        var $5=$from; //@line 616 "xmltok.c"
        var $6=$5+1; //@line 616 "xmltok.c"
        var $7=HEAP[$6]; //@line 616 "xmltok.c"
        $hi=$7; //@line 616 "xmltok.c"
        var $8=$hi; //@line 616 "xmltok.c"
        var $9=($8); //@line 616 "xmltok.c"
        if ($9 == 0) {
          __label__ = 2; break;
        }
        else if ($9 == 1) {
          __label__ = 6; break;
        }
        else if ($9 == 2) {
          __label__ = 6; break;
        }
        else if ($9 == 3) {
          __label__ = 6; break;
        }
        else if ($9 == 4) {
          __label__ = 6; break;
        }
        else if ($9 == 5) {
          __label__ = 6; break;
        }
        else if ($9 == 6) {
          __label__ = 6; break;
        }
        else if ($9 == 7) {
          __label__ = 6; break;
        }
        else if ($9 == 216) {
          __label__ = 12; break;
        }
        else if ($9 == 217) {
          __label__ = 12; break;
        }
        else if ($9 == 218) {
          __label__ = 12; break;
        }
        else if ($9 == 219) {
          __label__ = 12; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 2: // $bb1
        var $10=$lo; //@line 616 "xmltok.c"
        var $11=($10) >= 0; //@line 616 "xmltok.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 616 "xmltok.c"
      case 3: // $bb2
        var $12=$toP_addr; //@line 616 "xmltok.c"
        var $13=HEAP[$12]; //@line 616 "xmltok.c"
        var $14=$toLim_addr; //@line 616 "xmltok.c"
        var $15=($13)==($14); //@line 616 "xmltok.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 616 "xmltok.c"
      case 4: // $bb3
        var $16=$fromP_addr; //@line 616 "xmltok.c"
        var $17=$from; //@line 616 "xmltok.c"
        HEAP[$16]=$17; //@line 616 "xmltok.c"
        __label__ = 18; break; //@line 616 "xmltok.c"
      case 5: // $bb4
        var $18=$toP_addr; //@line 616 "xmltok.c"
        var $19=HEAP[$18]; //@line 616 "xmltok.c"
        var $20=$lo; //@line 616 "xmltok.c"
        HEAP[$19]=$20; //@line 616 "xmltok.c"
        var $21=$19+1; //@line 616 "xmltok.c"
        var $22=$toP_addr; //@line 616 "xmltok.c"
        HEAP[$22]=$21; //@line 616 "xmltok.c"
        __label__ = 15; break; //@line 616 "xmltok.c"
      case 6: // $bb5
        var $23=$toLim_addr; //@line 616 "xmltok.c"
        var $24=($23); //@line 616 "xmltok.c"
        var $25=$toP_addr; //@line 616 "xmltok.c"
        var $26=HEAP[$25]; //@line 616 "xmltok.c"
        var $27=($26); //@line 616 "xmltok.c"
        var $28=($24) - ($27); //@line 616 "xmltok.c"
        var $29=($28) <= 1; //@line 616 "xmltok.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 616 "xmltok.c"
      case 7: // $bb6
        var $30=$fromP_addr; //@line 616 "xmltok.c"
        var $31=$from; //@line 616 "xmltok.c"
        HEAP[$30]=$31; //@line 616 "xmltok.c"
        __label__ = 18; break; //@line 616 "xmltok.c"
      case 8: // $bb7
        var $32=$toP_addr; //@line 616 "xmltok.c"
        var $33=HEAP[$32]; //@line 616 "xmltok.c"
        var $34=$lo; //@line 616 "xmltok.c"
        var $35=($34) >>> 6; //@line 616 "xmltok.c"
        var $36=$hi; //@line 616 "xmltok.c"
        var $37=($36); //@line 616 "xmltok.c"
        var $38=($37) << 2; //@line 616 "xmltok.c"
        var $39=((($38)) & 255); //@line 616 "xmltok.c"
        var $40=($35) | -64; //@line 616 "xmltok.c"
        var $41=($40) | ($39); //@line 616 "xmltok.c"
        HEAP[$33]=$41; //@line 616 "xmltok.c"
        var $42=$33+1; //@line 616 "xmltok.c"
        var $43=$toP_addr; //@line 616 "xmltok.c"
        HEAP[$43]=$42; //@line 616 "xmltok.c"
        var $44=$toP_addr; //@line 616 "xmltok.c"
        var $45=HEAP[$44]; //@line 616 "xmltok.c"
        var $46=$lo; //@line 616 "xmltok.c"
        var $47=($46) & 63; //@line 616 "xmltok.c"
        var $48=($47) | -128; //@line 616 "xmltok.c"
        HEAP[$45]=$48; //@line 616 "xmltok.c"
        var $49=$45+1; //@line 616 "xmltok.c"
        var $50=$toP_addr; //@line 616 "xmltok.c"
        HEAP[$50]=$49; //@line 616 "xmltok.c"
        __label__ = 15; break; //@line 616 "xmltok.c"
      case 9: // $bb8
        var $51=$toLim_addr; //@line 616 "xmltok.c"
        var $52=($51); //@line 616 "xmltok.c"
        var $53=$toP_addr; //@line 616 "xmltok.c"
        var $54=HEAP[$53]; //@line 616 "xmltok.c"
        var $55=($54); //@line 616 "xmltok.c"
        var $56=($52) - ($55); //@line 616 "xmltok.c"
        var $57=($56) <= 2; //@line 616 "xmltok.c"
        if ($57) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 616 "xmltok.c"
      case 10: // $bb9
        var $58=$fromP_addr; //@line 616 "xmltok.c"
        var $59=$from; //@line 616 "xmltok.c"
        HEAP[$58]=$59; //@line 616 "xmltok.c"
        __label__ = 18; break; //@line 616 "xmltok.c"
      case 11: // $bb10
        var $60=$toP_addr; //@line 616 "xmltok.c"
        var $61=HEAP[$60]; //@line 616 "xmltok.c"
        var $62=$hi; //@line 616 "xmltok.c"
        var $63=($62) >>> 4; //@line 616 "xmltok.c"
        var $64=($63) | -32; //@line 616 "xmltok.c"
        HEAP[$61]=$64; //@line 616 "xmltok.c"
        var $65=$61+1; //@line 616 "xmltok.c"
        var $66=$toP_addr; //@line 616 "xmltok.c"
        HEAP[$66]=$65; //@line 616 "xmltok.c"
        var $67=$toP_addr; //@line 616 "xmltok.c"
        var $68=HEAP[$67]; //@line 616 "xmltok.c"
        var $69=$hi; //@line 616 "xmltok.c"
        var $70=($69); //@line 616 "xmltok.c"
        var $71=($70) & 15; //@line 616 "xmltok.c"
        var $72=($71) << 2; //@line 616 "xmltok.c"
        var $73=((($72)) & 255); //@line 616 "xmltok.c"
        var $74=$lo; //@line 616 "xmltok.c"
        var $75=($74) >>> 6; //@line 616 "xmltok.c"
        var $76=($75) | -128; //@line 616 "xmltok.c"
        var $77=($76) | ($73); //@line 616 "xmltok.c"
        HEAP[$68]=$77; //@line 616 "xmltok.c"
        var $78=$68+1; //@line 616 "xmltok.c"
        var $79=$toP_addr; //@line 616 "xmltok.c"
        HEAP[$79]=$78; //@line 616 "xmltok.c"
        var $80=$toP_addr; //@line 616 "xmltok.c"
        var $81=HEAP[$80]; //@line 616 "xmltok.c"
        var $82=$lo; //@line 616 "xmltok.c"
        var $83=($82) & 63; //@line 616 "xmltok.c"
        var $84=($83) | -128; //@line 616 "xmltok.c"
        HEAP[$81]=$84; //@line 616 "xmltok.c"
        var $85=$81+1; //@line 616 "xmltok.c"
        var $86=$toP_addr; //@line 616 "xmltok.c"
        HEAP[$86]=$85; //@line 616 "xmltok.c"
        __label__ = 15; break; //@line 616 "xmltok.c"
      case 12: // $bb11
        var $87=$toLim_addr; //@line 616 "xmltok.c"
        var $88=($87); //@line 616 "xmltok.c"
        var $89=$toP_addr; //@line 616 "xmltok.c"
        var $90=HEAP[$89]; //@line 616 "xmltok.c"
        var $91=($90); //@line 616 "xmltok.c"
        var $92=($88) - ($91); //@line 616 "xmltok.c"
        var $93=($92) <= 3; //@line 616 "xmltok.c"
        if ($93) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 616 "xmltok.c"
      case 13: // $bb12
        var $94=$fromP_addr; //@line 616 "xmltok.c"
        var $95=$from; //@line 616 "xmltok.c"
        HEAP[$94]=$95; //@line 616 "xmltok.c"
        __label__ = 18; break; //@line 616 "xmltok.c"
      case 14: // $bb13
        var $96=$hi; //@line 616 "xmltok.c"
        var $97=($96); //@line 616 "xmltok.c"
        var $98=($97) & 3; //@line 616 "xmltok.c"
        var $99=($98) << 2; //@line 616 "xmltok.c"
        var $100=$lo; //@line 616 "xmltok.c"
        var $101=($100) >>> 6; //@line 616 "xmltok.c"
        var $102=($101); //@line 616 "xmltok.c"
        var $103=($102) & 3; //@line 616 "xmltok.c"
        var $104=($103) | ($99); //@line 616 "xmltok.c"
        var $105=($104) + 1; //@line 616 "xmltok.c"
        $plane=$105; //@line 616 "xmltok.c"
        var $106=$toP_addr; //@line 616 "xmltok.c"
        var $107=HEAP[$106]; //@line 616 "xmltok.c"
        var $108=$plane; //@line 616 "xmltok.c"
        var $109=($108) >> 2; //@line 616 "xmltok.c"
        var $110=((($109)) & 255); //@line 616 "xmltok.c"
        var $111=($110) | -16; //@line 616 "xmltok.c"
        HEAP[$107]=$111; //@line 616 "xmltok.c"
        var $112=$107+1; //@line 616 "xmltok.c"
        var $113=$toP_addr; //@line 616 "xmltok.c"
        HEAP[$113]=$112; //@line 616 "xmltok.c"
        var $114=$toP_addr; //@line 616 "xmltok.c"
        var $115=HEAP[$114]; //@line 616 "xmltok.c"
        var $116=$lo; //@line 616 "xmltok.c"
        var $117=($116) >>> 2; //@line 616 "xmltok.c"
        var $118=($117) & 15; //@line 616 "xmltok.c"
        var $119=$plane; //@line 616 "xmltok.c"
        var $120=($119) & 3; //@line 616 "xmltok.c"
        var $121=($120) << 4; //@line 616 "xmltok.c"
        var $122=((($121)) & 255); //@line 616 "xmltok.c"
        var $123=($118) | -128; //@line 616 "xmltok.c"
        var $124=($123) | ($122); //@line 616 "xmltok.c"
        HEAP[$115]=$124; //@line 616 "xmltok.c"
        var $125=$115+1; //@line 616 "xmltok.c"
        var $126=$toP_addr; //@line 616 "xmltok.c"
        HEAP[$126]=$125; //@line 616 "xmltok.c"
        var $127=$from; //@line 616 "xmltok.c"
        var $128=$127+2; //@line 616 "xmltok.c"
        $from=$128; //@line 616 "xmltok.c"
        var $129=$from; //@line 616 "xmltok.c"
        var $130=$129; //@line 616 "xmltok.c"
        var $131=HEAP[$130]; //@line 616 "xmltok.c"
        $lo2=$131; //@line 616 "xmltok.c"
        var $132=$toP_addr; //@line 616 "xmltok.c"
        var $133=HEAP[$132]; //@line 616 "xmltok.c"
        var $134=$lo; //@line 616 "xmltok.c"
        var $135=($134); //@line 616 "xmltok.c"
        var $136=($135) & 3; //@line 616 "xmltok.c"
        var $137=($136) << 4; //@line 616 "xmltok.c"
        var $138=((($137)) & 255); //@line 616 "xmltok.c"
        var $139=$from; //@line 616 "xmltok.c"
        var $140=$139+1; //@line 616 "xmltok.c"
        var $141=HEAP[$140]; //@line 616 "xmltok.c"
        var $142=($141); //@line 616 "xmltok.c"
        var $143=($142) & 3; //@line 616 "xmltok.c"
        var $144=($143) << 2; //@line 616 "xmltok.c"
        var $145=((($144)) & 255); //@line 616 "xmltok.c"
        var $146=$lo2; //@line 616 "xmltok.c"
        var $147=($146) >>> 6; //@line 616 "xmltok.c"
        var $148=($147) | -128; //@line 616 "xmltok.c"
        var $149=($148) | ($138); //@line 616 "xmltok.c"
        var $150=($149) | ($145); //@line 616 "xmltok.c"
        HEAP[$133]=$150; //@line 616 "xmltok.c"
        var $151=$133+1; //@line 616 "xmltok.c"
        var $152=$toP_addr; //@line 616 "xmltok.c"
        HEAP[$152]=$151; //@line 616 "xmltok.c"
        var $153=$toP_addr; //@line 616 "xmltok.c"
        var $154=HEAP[$153]; //@line 616 "xmltok.c"
        var $155=$lo2; //@line 616 "xmltok.c"
        var $156=($155) & 63; //@line 616 "xmltok.c"
        var $157=($156) | -128; //@line 616 "xmltok.c"
        HEAP[$154]=$157; //@line 616 "xmltok.c"
        var $158=$154+1; //@line 616 "xmltok.c"
        var $159=$toP_addr; //@line 616 "xmltok.c"
        HEAP[$159]=$158; //@line 616 "xmltok.c"
        __label__ = 15; break; //@line 616 "xmltok.c"
      case 15: // $bb14
        var $160=$from; //@line 616 "xmltok.c"
        var $161=$160+2; //@line 616 "xmltok.c"
        $from=$161; //@line 616 "xmltok.c"
        __label__ = 16; break; //@line 616 "xmltok.c"
      case 16: // $bb15
        var $162=$from; //@line 616 "xmltok.c"
        var $163=$fromLim_addr; //@line 616 "xmltok.c"
        var $164=($162)!=($163); //@line 616 "xmltok.c"
        if ($164) { __label__ = 1; break; } else { __label__ = 17; break; } //@line 616 "xmltok.c"
      case 17: // $bb16
        var $165=$fromP_addr; //@line 616 "xmltok.c"
        var $166=$from; //@line 616 "xmltok.c"
        HEAP[$165]=$166; //@line 616 "xmltok.c"
        __label__ = 18; break; //@line 616 "xmltok.c"
      case 18: // $return
        ;
        return; //@line 616 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $fromP_addr;
        var $fromLim_addr;
        var $toP_addr;
        var $toLim_addr;
        $enc_addr=$enc;
        $fromP_addr=$fromP;
        $fromLim_addr=$fromLim;
        $toP_addr=$toP;
        $toLim_addr=$toLim;
        var $0=$fromLim_addr; //@line 617 "xmltok.c"
        var $1=($0); //@line 617 "xmltok.c"
        var $2=$fromP_addr; //@line 617 "xmltok.c"
        var $3=HEAP[$2]; //@line 617 "xmltok.c"
        var $4=($3); //@line 617 "xmltok.c"
        var $5=($1) - ($4); //@line 617 "xmltok.c"
        var $6=$toLim_addr; //@line 617 "xmltok.c"
        var $7=($6); //@line 617 "xmltok.c"
        var $8=$toP_addr; //@line 617 "xmltok.c"
        var $9=HEAP[$8]; //@line 617 "xmltok.c"
        var $10=($9); //@line 617 "xmltok.c"
        var $11=($7) - ($10); //@line 617 "xmltok.c"
        var $12=((($11)/2)|0); //@line 617 "xmltok.c"
        var $13=($12) << 1; //@line 617 "xmltok.c"
        var $14=($5) > ($13); //@line 617 "xmltok.c"
        if ($14) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 617 "xmltok.c"
      case 1: // $bb
        var $15=$fromLim_addr; //@line 617 "xmltok.c"
        var $16=$15+-2; //@line 617 "xmltok.c"
        var $17=$16+1; //@line 617 "xmltok.c"
        var $18=HEAP[$17]; //@line 617 "xmltok.c"
        var $19=($18); //@line 617 "xmltok.c"
        var $20=($19) & 248; //@line 617 "xmltok.c"
        var $21=($20)==216; //@line 617 "xmltok.c"
        if ($21) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 617 "xmltok.c"
      case 2: // $bb1
        var $22=$fromLim_addr; //@line 617 "xmltok.c"
        var $23=$22+-2; //@line 617 "xmltok.c"
        $fromLim_addr=$23; //@line 617 "xmltok.c"
        __label__ = 4; break; //@line 617 "xmltok.c"
      case 3: // $bb3
        var $24=$toP_addr; //@line 617 "xmltok.c"
        var $25=HEAP[$24]; //@line 617 "xmltok.c"
        var $26=$fromP_addr; //@line 617 "xmltok.c"
        var $27=HEAP[$26]; //@line 617 "xmltok.c"
        var $28=$27+1; //@line 617 "xmltok.c"
        var $29=HEAP[$28]; //@line 617 "xmltok.c"
        var $30=($29); //@line 617 "xmltok.c"
        var $31=($30) << 8; //@line 617 "xmltok.c"
        var $32=((($31)) & 65535); //@line 617 "xmltok.c"
        var $33=$fromP_addr; //@line 617 "xmltok.c"
        var $34=HEAP[$33]; //@line 617 "xmltok.c"
        var $35=$34; //@line 617 "xmltok.c"
        var $36=HEAP[$35]; //@line 617 "xmltok.c"
        var $37=($36); //@line 617 "xmltok.c"
        var $38=($37) | ($32); //@line 617 "xmltok.c"
        HEAP[$25]=$38; //@line 617 "xmltok.c"
        var $39=$25+2; //@line 617 "xmltok.c"
        var $40=$toP_addr; //@line 617 "xmltok.c"
        HEAP[$40]=$39; //@line 617 "xmltok.c"
        var $41=$fromP_addr; //@line 617 "xmltok.c"
        var $42=HEAP[$41]; //@line 617 "xmltok.c"
        var $43=$42+2; //@line 617 "xmltok.c"
        var $44=$fromP_addr; //@line 617 "xmltok.c"
        HEAP[$44]=$43; //@line 617 "xmltok.c"
        __label__ = 4; break; //@line 617 "xmltok.c"
      case 4: // $bb4
        var $45=$fromP_addr; //@line 617 "xmltok.c"
        var $46=HEAP[$45]; //@line 617 "xmltok.c"
        var $47=$fromLim_addr; //@line 617 "xmltok.c"
        var $48=($46)==($47); //@line 617 "xmltok.c"
        if ($48) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 617 "xmltok.c"
      case 5: // $bb5
        var $49=$toP_addr; //@line 617 "xmltok.c"
        var $50=HEAP[$49]; //@line 617 "xmltok.c"
        var $51=$toLim_addr; //@line 617 "xmltok.c"
        var $52=($50)!=($51); //@line 617 "xmltok.c"
        if ($52) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 617 "xmltok.c"
      case 6: // $return
        ;
        return; //@line 617 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $fromP_addr;
        var $fromLim_addr;
        var $toP_addr;
        var $toLim_addr;
        var $from;
        var $plane;
        var $lo2;
        var $lo;
        var $hi;
        $enc_addr=$enc;
        $fromP_addr=$fromP;
        $fromLim_addr=$fromLim;
        $toP_addr=$toP;
        $toLim_addr=$toLim;
        var $0=$fromP_addr; //@line 628 "xmltok.c"
        var $1=HEAP[$0]; //@line 628 "xmltok.c"
        $from=$1; //@line 628 "xmltok.c"
        __label__ = 16; break; //@line 628 "xmltok.c"
      case 1: // $bb
        var $2=$from; //@line 628 "xmltok.c"
        var $3=$2+1; //@line 628 "xmltok.c"
        var $4=HEAP[$3]; //@line 628 "xmltok.c"
        $lo=$4; //@line 628 "xmltok.c"
        var $5=$from; //@line 628 "xmltok.c"
        var $6=$5; //@line 628 "xmltok.c"
        var $7=HEAP[$6]; //@line 628 "xmltok.c"
        $hi=$7; //@line 628 "xmltok.c"
        var $8=$hi; //@line 628 "xmltok.c"
        var $9=($8); //@line 628 "xmltok.c"
        if ($9 == 0) {
          __label__ = 2; break;
        }
        else if ($9 == 1) {
          __label__ = 6; break;
        }
        else if ($9 == 2) {
          __label__ = 6; break;
        }
        else if ($9 == 3) {
          __label__ = 6; break;
        }
        else if ($9 == 4) {
          __label__ = 6; break;
        }
        else if ($9 == 5) {
          __label__ = 6; break;
        }
        else if ($9 == 6) {
          __label__ = 6; break;
        }
        else if ($9 == 7) {
          __label__ = 6; break;
        }
        else if ($9 == 216) {
          __label__ = 12; break;
        }
        else if ($9 == 217) {
          __label__ = 12; break;
        }
        else if ($9 == 218) {
          __label__ = 12; break;
        }
        else if ($9 == 219) {
          __label__ = 12; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 2: // $bb1
        var $10=$lo; //@line 628 "xmltok.c"
        var $11=($10) >= 0; //@line 628 "xmltok.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 628 "xmltok.c"
      case 3: // $bb2
        var $12=$toP_addr; //@line 628 "xmltok.c"
        var $13=HEAP[$12]; //@line 628 "xmltok.c"
        var $14=$toLim_addr; //@line 628 "xmltok.c"
        var $15=($13)==($14); //@line 628 "xmltok.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 628 "xmltok.c"
      case 4: // $bb3
        var $16=$fromP_addr; //@line 628 "xmltok.c"
        var $17=$from; //@line 628 "xmltok.c"
        HEAP[$16]=$17; //@line 628 "xmltok.c"
        __label__ = 18; break; //@line 628 "xmltok.c"
      case 5: // $bb4
        var $18=$toP_addr; //@line 628 "xmltok.c"
        var $19=HEAP[$18]; //@line 628 "xmltok.c"
        var $20=$lo; //@line 628 "xmltok.c"
        HEAP[$19]=$20; //@line 628 "xmltok.c"
        var $21=$19+1; //@line 628 "xmltok.c"
        var $22=$toP_addr; //@line 628 "xmltok.c"
        HEAP[$22]=$21; //@line 628 "xmltok.c"
        __label__ = 15; break; //@line 628 "xmltok.c"
      case 6: // $bb5
        var $23=$toLim_addr; //@line 628 "xmltok.c"
        var $24=($23); //@line 628 "xmltok.c"
        var $25=$toP_addr; //@line 628 "xmltok.c"
        var $26=HEAP[$25]; //@line 628 "xmltok.c"
        var $27=($26); //@line 628 "xmltok.c"
        var $28=($24) - ($27); //@line 628 "xmltok.c"
        var $29=($28) <= 1; //@line 628 "xmltok.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 628 "xmltok.c"
      case 7: // $bb6
        var $30=$fromP_addr; //@line 628 "xmltok.c"
        var $31=$from; //@line 628 "xmltok.c"
        HEAP[$30]=$31; //@line 628 "xmltok.c"
        __label__ = 18; break; //@line 628 "xmltok.c"
      case 8: // $bb7
        var $32=$toP_addr; //@line 628 "xmltok.c"
        var $33=HEAP[$32]; //@line 628 "xmltok.c"
        var $34=$lo; //@line 628 "xmltok.c"
        var $35=($34) >>> 6; //@line 628 "xmltok.c"
        var $36=$hi; //@line 628 "xmltok.c"
        var $37=($36); //@line 628 "xmltok.c"
        var $38=($37) << 2; //@line 628 "xmltok.c"
        var $39=((($38)) & 255); //@line 628 "xmltok.c"
        var $40=($35) | -64; //@line 628 "xmltok.c"
        var $41=($40) | ($39); //@line 628 "xmltok.c"
        HEAP[$33]=$41; //@line 628 "xmltok.c"
        var $42=$33+1; //@line 628 "xmltok.c"
        var $43=$toP_addr; //@line 628 "xmltok.c"
        HEAP[$43]=$42; //@line 628 "xmltok.c"
        var $44=$toP_addr; //@line 628 "xmltok.c"
        var $45=HEAP[$44]; //@line 628 "xmltok.c"
        var $46=$lo; //@line 628 "xmltok.c"
        var $47=($46) & 63; //@line 628 "xmltok.c"
        var $48=($47) | -128; //@line 628 "xmltok.c"
        HEAP[$45]=$48; //@line 628 "xmltok.c"
        var $49=$45+1; //@line 628 "xmltok.c"
        var $50=$toP_addr; //@line 628 "xmltok.c"
        HEAP[$50]=$49; //@line 628 "xmltok.c"
        __label__ = 15; break; //@line 628 "xmltok.c"
      case 9: // $bb8
        var $51=$toLim_addr; //@line 628 "xmltok.c"
        var $52=($51); //@line 628 "xmltok.c"
        var $53=$toP_addr; //@line 628 "xmltok.c"
        var $54=HEAP[$53]; //@line 628 "xmltok.c"
        var $55=($54); //@line 628 "xmltok.c"
        var $56=($52) - ($55); //@line 628 "xmltok.c"
        var $57=($56) <= 2; //@line 628 "xmltok.c"
        if ($57) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 628 "xmltok.c"
      case 10: // $bb9
        var $58=$fromP_addr; //@line 628 "xmltok.c"
        var $59=$from; //@line 628 "xmltok.c"
        HEAP[$58]=$59; //@line 628 "xmltok.c"
        __label__ = 18; break; //@line 628 "xmltok.c"
      case 11: // $bb10
        var $60=$toP_addr; //@line 628 "xmltok.c"
        var $61=HEAP[$60]; //@line 628 "xmltok.c"
        var $62=$hi; //@line 628 "xmltok.c"
        var $63=($62) >>> 4; //@line 628 "xmltok.c"
        var $64=($63) | -32; //@line 628 "xmltok.c"
        HEAP[$61]=$64; //@line 628 "xmltok.c"
        var $65=$61+1; //@line 628 "xmltok.c"
        var $66=$toP_addr; //@line 628 "xmltok.c"
        HEAP[$66]=$65; //@line 628 "xmltok.c"
        var $67=$toP_addr; //@line 628 "xmltok.c"
        var $68=HEAP[$67]; //@line 628 "xmltok.c"
        var $69=$hi; //@line 628 "xmltok.c"
        var $70=($69); //@line 628 "xmltok.c"
        var $71=($70) & 15; //@line 628 "xmltok.c"
        var $72=($71) << 2; //@line 628 "xmltok.c"
        var $73=((($72)) & 255); //@line 628 "xmltok.c"
        var $74=$lo; //@line 628 "xmltok.c"
        var $75=($74) >>> 6; //@line 628 "xmltok.c"
        var $76=($75) | -128; //@line 628 "xmltok.c"
        var $77=($76) | ($73); //@line 628 "xmltok.c"
        HEAP[$68]=$77; //@line 628 "xmltok.c"
        var $78=$68+1; //@line 628 "xmltok.c"
        var $79=$toP_addr; //@line 628 "xmltok.c"
        HEAP[$79]=$78; //@line 628 "xmltok.c"
        var $80=$toP_addr; //@line 628 "xmltok.c"
        var $81=HEAP[$80]; //@line 628 "xmltok.c"
        var $82=$lo; //@line 628 "xmltok.c"
        var $83=($82) & 63; //@line 628 "xmltok.c"
        var $84=($83) | -128; //@line 628 "xmltok.c"
        HEAP[$81]=$84; //@line 628 "xmltok.c"
        var $85=$81+1; //@line 628 "xmltok.c"
        var $86=$toP_addr; //@line 628 "xmltok.c"
        HEAP[$86]=$85; //@line 628 "xmltok.c"
        __label__ = 15; break; //@line 628 "xmltok.c"
      case 12: // $bb11
        var $87=$toLim_addr; //@line 628 "xmltok.c"
        var $88=($87); //@line 628 "xmltok.c"
        var $89=$toP_addr; //@line 628 "xmltok.c"
        var $90=HEAP[$89]; //@line 628 "xmltok.c"
        var $91=($90); //@line 628 "xmltok.c"
        var $92=($88) - ($91); //@line 628 "xmltok.c"
        var $93=($92) <= 3; //@line 628 "xmltok.c"
        if ($93) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 628 "xmltok.c"
      case 13: // $bb12
        var $94=$fromP_addr; //@line 628 "xmltok.c"
        var $95=$from; //@line 628 "xmltok.c"
        HEAP[$94]=$95; //@line 628 "xmltok.c"
        __label__ = 18; break; //@line 628 "xmltok.c"
      case 14: // $bb13
        var $96=$hi; //@line 628 "xmltok.c"
        var $97=($96); //@line 628 "xmltok.c"
        var $98=($97) & 3; //@line 628 "xmltok.c"
        var $99=($98) << 2; //@line 628 "xmltok.c"
        var $100=$lo; //@line 628 "xmltok.c"
        var $101=($100) >>> 6; //@line 628 "xmltok.c"
        var $102=($101); //@line 628 "xmltok.c"
        var $103=($102) & 3; //@line 628 "xmltok.c"
        var $104=($103) | ($99); //@line 628 "xmltok.c"
        var $105=($104) + 1; //@line 628 "xmltok.c"
        $plane=$105; //@line 628 "xmltok.c"
        var $106=$toP_addr; //@line 628 "xmltok.c"
        var $107=HEAP[$106]; //@line 628 "xmltok.c"
        var $108=$plane; //@line 628 "xmltok.c"
        var $109=($108) >> 2; //@line 628 "xmltok.c"
        var $110=((($109)) & 255); //@line 628 "xmltok.c"
        var $111=($110) | -16; //@line 628 "xmltok.c"
        HEAP[$107]=$111; //@line 628 "xmltok.c"
        var $112=$107+1; //@line 628 "xmltok.c"
        var $113=$toP_addr; //@line 628 "xmltok.c"
        HEAP[$113]=$112; //@line 628 "xmltok.c"
        var $114=$toP_addr; //@line 628 "xmltok.c"
        var $115=HEAP[$114]; //@line 628 "xmltok.c"
        var $116=$lo; //@line 628 "xmltok.c"
        var $117=($116) >>> 2; //@line 628 "xmltok.c"
        var $118=($117) & 15; //@line 628 "xmltok.c"
        var $119=$plane; //@line 628 "xmltok.c"
        var $120=($119) & 3; //@line 628 "xmltok.c"
        var $121=($120) << 4; //@line 628 "xmltok.c"
        var $122=((($121)) & 255); //@line 628 "xmltok.c"
        var $123=($118) | -128; //@line 628 "xmltok.c"
        var $124=($123) | ($122); //@line 628 "xmltok.c"
        HEAP[$115]=$124; //@line 628 "xmltok.c"
        var $125=$115+1; //@line 628 "xmltok.c"
        var $126=$toP_addr; //@line 628 "xmltok.c"
        HEAP[$126]=$125; //@line 628 "xmltok.c"
        var $127=$from; //@line 628 "xmltok.c"
        var $128=$127+2; //@line 628 "xmltok.c"
        $from=$128; //@line 628 "xmltok.c"
        var $129=$from; //@line 628 "xmltok.c"
        var $130=$129+1; //@line 628 "xmltok.c"
        var $131=HEAP[$130]; //@line 628 "xmltok.c"
        $lo2=$131; //@line 628 "xmltok.c"
        var $132=$toP_addr; //@line 628 "xmltok.c"
        var $133=HEAP[$132]; //@line 628 "xmltok.c"
        var $134=$lo; //@line 628 "xmltok.c"
        var $135=($134); //@line 628 "xmltok.c"
        var $136=($135) & 3; //@line 628 "xmltok.c"
        var $137=($136) << 4; //@line 628 "xmltok.c"
        var $138=((($137)) & 255); //@line 628 "xmltok.c"
        var $139=$from; //@line 628 "xmltok.c"
        var $140=$139; //@line 628 "xmltok.c"
        var $141=HEAP[$140]; //@line 628 "xmltok.c"
        var $142=($141); //@line 628 "xmltok.c"
        var $143=($142) & 3; //@line 628 "xmltok.c"
        var $144=($143) << 2; //@line 628 "xmltok.c"
        var $145=((($144)) & 255); //@line 628 "xmltok.c"
        var $146=$lo2; //@line 628 "xmltok.c"
        var $147=($146) >>> 6; //@line 628 "xmltok.c"
        var $148=($147) | -128; //@line 628 "xmltok.c"
        var $149=($148) | ($138); //@line 628 "xmltok.c"
        var $150=($149) | ($145); //@line 628 "xmltok.c"
        HEAP[$133]=$150; //@line 628 "xmltok.c"
        var $151=$133+1; //@line 628 "xmltok.c"
        var $152=$toP_addr; //@line 628 "xmltok.c"
        HEAP[$152]=$151; //@line 628 "xmltok.c"
        var $153=$toP_addr; //@line 628 "xmltok.c"
        var $154=HEAP[$153]; //@line 628 "xmltok.c"
        var $155=$lo2; //@line 628 "xmltok.c"
        var $156=($155) & 63; //@line 628 "xmltok.c"
        var $157=($156) | -128; //@line 628 "xmltok.c"
        HEAP[$154]=$157; //@line 628 "xmltok.c"
        var $158=$154+1; //@line 628 "xmltok.c"
        var $159=$toP_addr; //@line 628 "xmltok.c"
        HEAP[$159]=$158; //@line 628 "xmltok.c"
        __label__ = 15; break; //@line 628 "xmltok.c"
      case 15: // $bb14
        var $160=$from; //@line 628 "xmltok.c"
        var $161=$160+2; //@line 628 "xmltok.c"
        $from=$161; //@line 628 "xmltok.c"
        __label__ = 16; break; //@line 628 "xmltok.c"
      case 16: // $bb15
        var $162=$from; //@line 628 "xmltok.c"
        var $163=$fromLim_addr; //@line 628 "xmltok.c"
        var $164=($162)!=($163); //@line 628 "xmltok.c"
        if ($164) { __label__ = 1; break; } else { __label__ = 17; break; } //@line 628 "xmltok.c"
      case 17: // $bb16
        var $165=$fromP_addr; //@line 628 "xmltok.c"
        var $166=$from; //@line 628 "xmltok.c"
        HEAP[$165]=$166; //@line 628 "xmltok.c"
        __label__ = 18; break; //@line 628 "xmltok.c"
      case 18: // $return
        ;
        return; //@line 628 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $fromP_addr;
        var $fromLim_addr;
        var $toP_addr;
        var $toLim_addr;
        $enc_addr=$enc;
        $fromP_addr=$fromP;
        $fromLim_addr=$fromLim;
        $toP_addr=$toP;
        $toLim_addr=$toLim;
        var $0=$fromLim_addr; //@line 629 "xmltok.c"
        var $1=($0); //@line 629 "xmltok.c"
        var $2=$fromP_addr; //@line 629 "xmltok.c"
        var $3=HEAP[$2]; //@line 629 "xmltok.c"
        var $4=($3); //@line 629 "xmltok.c"
        var $5=($1) - ($4); //@line 629 "xmltok.c"
        var $6=$toLim_addr; //@line 629 "xmltok.c"
        var $7=($6); //@line 629 "xmltok.c"
        var $8=$toP_addr; //@line 629 "xmltok.c"
        var $9=HEAP[$8]; //@line 629 "xmltok.c"
        var $10=($9); //@line 629 "xmltok.c"
        var $11=($7) - ($10); //@line 629 "xmltok.c"
        var $12=((($11)/2)|0); //@line 629 "xmltok.c"
        var $13=($12) << 1; //@line 629 "xmltok.c"
        var $14=($5) > ($13); //@line 629 "xmltok.c"
        if ($14) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 629 "xmltok.c"
      case 1: // $bb
        var $15=$fromLim_addr; //@line 629 "xmltok.c"
        var $16=$15+-2; //@line 629 "xmltok.c"
        var $17=$16; //@line 629 "xmltok.c"
        var $18=HEAP[$17]; //@line 629 "xmltok.c"
        var $19=($18); //@line 629 "xmltok.c"
        var $20=($19) & 248; //@line 629 "xmltok.c"
        var $21=($20)==216; //@line 629 "xmltok.c"
        if ($21) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 629 "xmltok.c"
      case 2: // $bb1
        var $22=$fromLim_addr; //@line 629 "xmltok.c"
        var $23=$22+-2; //@line 629 "xmltok.c"
        $fromLim_addr=$23; //@line 629 "xmltok.c"
        __label__ = 4; break; //@line 629 "xmltok.c"
      case 3: // $bb3
        var $24=$toP_addr; //@line 629 "xmltok.c"
        var $25=HEAP[$24]; //@line 629 "xmltok.c"
        var $26=$fromP_addr; //@line 629 "xmltok.c"
        var $27=HEAP[$26]; //@line 629 "xmltok.c"
        var $28=$27; //@line 629 "xmltok.c"
        var $29=HEAP[$28]; //@line 629 "xmltok.c"
        var $30=($29); //@line 629 "xmltok.c"
        var $31=($30) << 8; //@line 629 "xmltok.c"
        var $32=((($31)) & 65535); //@line 629 "xmltok.c"
        var $33=$fromP_addr; //@line 629 "xmltok.c"
        var $34=HEAP[$33]; //@line 629 "xmltok.c"
        var $35=$34+1; //@line 629 "xmltok.c"
        var $36=HEAP[$35]; //@line 629 "xmltok.c"
        var $37=($36); //@line 629 "xmltok.c"
        var $38=($37) | ($32); //@line 629 "xmltok.c"
        HEAP[$25]=$38; //@line 629 "xmltok.c"
        var $39=$25+2; //@line 629 "xmltok.c"
        var $40=$toP_addr; //@line 629 "xmltok.c"
        HEAP[$40]=$39; //@line 629 "xmltok.c"
        var $41=$fromP_addr; //@line 629 "xmltok.c"
        var $42=HEAP[$41]; //@line 629 "xmltok.c"
        var $43=$42+2; //@line 629 "xmltok.c"
        var $44=$fromP_addr; //@line 629 "xmltok.c"
        HEAP[$44]=$43; //@line 629 "xmltok.c"
        __label__ = 4; break; //@line 629 "xmltok.c"
      case 4: // $bb4
        var $45=$fromP_addr; //@line 629 "xmltok.c"
        var $46=HEAP[$45]; //@line 629 "xmltok.c"
        var $47=$fromLim_addr; //@line 629 "xmltok.c"
        var $48=($46)==($47); //@line 629 "xmltok.c"
        if ($48) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 629 "xmltok.c"
      case 5: // $bb5
        var $49=$toP_addr; //@line 629 "xmltok.c"
        var $50=HEAP[$49]; //@line 629 "xmltok.c"
        var $51=$toLim_addr; //@line 629 "xmltok.c"
        var $52=($50)!=($51); //@line 629 "xmltok.c"
        if ($52) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 629 "xmltok.c"
      case 6: // $return
        ;
        return; //@line 629 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanComment($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_514;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 93 "xmltok_impl.c"
        var $2=$end_addr; //@line 93 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 93 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 31; break; } //@line 93 "xmltok_impl.c"
      case 1: // $bb
        var $4=$ptr_addr; //@line 94 "xmltok_impl.c"
        var $5=$4+1; //@line 94 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 94 "xmltok_impl.c"
        var $7=($6)!=0; //@line 94 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 94 "xmltok_impl.c"
      case 2: // $bb1
        var $8=$ptr_addr; //@line 94 "xmltok_impl.c"
        var $9=$8; //@line 94 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 94 "xmltok_impl.c"
        var $11=($10)!=45; //@line 94 "xmltok_impl.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 94 "xmltok_impl.c"
      case 3: // $bb2
        var $12=$nextTokPtr_addr; //@line 95 "xmltok_impl.c"
        var $13=$ptr_addr; //@line 95 "xmltok_impl.c"
        HEAP[$12]=$13; //@line 95 "xmltok_impl.c"
        $0=0; //@line 96 "xmltok_impl.c"
        __label__ = 32; break; //@line 96 "xmltok_impl.c"
      case 4: // $bb3
        var $14=$ptr_addr; //@line 98 "xmltok_impl.c"
        var $15=$14+2; //@line 98 "xmltok_impl.c"
        $ptr_addr=$15; //@line 98 "xmltok_impl.c"
        __label__ = 30; break; //@line 98 "xmltok_impl.c"
      case 5: // $bb4
        var $16=$ptr_addr; //@line 100 "xmltok_impl.c"
        var $17=$16+1; //@line 100 "xmltok_impl.c"
        var $18=HEAP[$17]; //@line 100 "xmltok_impl.c"
        var $19=($18)==0; //@line 100 "xmltok_impl.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 100 "xmltok_impl.c"
      case 6: // $bb5
        var $20=$enc_addr; //@line 100 "xmltok_impl.c"
        var $21=$20; //@line 100 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 100 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 100 "xmltok_impl.c"
        var $24=($23); //@line 100 "xmltok_impl.c"
        var $25=$21+76; //@line 100 "xmltok_impl.c"
        var $26=$25+$24; //@line 100 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 100 "xmltok_impl.c"
        var $28=($27); //@line 100 "xmltok_impl.c"
        $iftmp_514=$28; //@line 100 "xmltok_impl.c"
        __lastLabel__ = 6; __label__ = 8; break; //@line 100 "xmltok_impl.c"
      case 7: // $bb6
        var $29=$ptr_addr; //@line 100 "xmltok_impl.c"
        var $30=$29; //@line 100 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 100 "xmltok_impl.c"
        var $32=($31); //@line 100 "xmltok_impl.c"
        var $33=$ptr_addr; //@line 100 "xmltok_impl.c"
        var $34=$33+1; //@line 100 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 100 "xmltok_impl.c"
        var $36=($35); //@line 100 "xmltok_impl.c"
        var $37=((($36)) & 255); //@line 100 "xmltok_impl.c"
        var $38=((($32)) & 255); //@line 100 "xmltok_impl.c"
        var $39=_unicode_byte_type($37, $38); //@line 100 "xmltok_impl.c"
        $iftmp_514=$39; //@line 100 "xmltok_impl.c"
        __lastLabel__ = 7; __label__ = 8; break; //@line 100 "xmltok_impl.c"
      case 8: // $bb7
        var $40=__lastLabel__ == 7 ? $39 : ($28);
        if ($40 == 0) {
          __label__ = 18; break;
        }
        else if ($40 == 1) {
          __label__ = 18; break;
        }
        else if ($40 == 5) {
          __label__ = 9; break;
        }
        else if ($40 == 6) {
          __label__ = 12; break;
        }
        else if ($40 == 7) {
          __label__ = 15; break;
        }
        else if ($40 == 8) {
          __label__ = 18; break;
        }
        else if ($40 == 27) {
          __label__ = 19; break;
        }
        else {
        __label__ = 29; break;
        }
        
      case 9: // $bb8
        var $41=$end_addr; //@line 101 "xmltok_impl.c"
        var $42=($41); //@line 101 "xmltok_impl.c"
        var $43=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $44=($43); //@line 101 "xmltok_impl.c"
        var $45=($42) - ($44); //@line 101 "xmltok_impl.c"
        var $46=($45) <= 1; //@line 101 "xmltok_impl.c"
        if ($46) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 101 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 11: // $bb10
        var $47=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $48=$47+2; //@line 101 "xmltok_impl.c"
        $ptr_addr=$48; //@line 101 "xmltok_impl.c"
        __label__ = 30; break; //@line 101 "xmltok_impl.c"
      case 12: // $bb11
        var $49=$end_addr; //@line 101 "xmltok_impl.c"
        var $50=($49); //@line 101 "xmltok_impl.c"
        var $51=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $52=($51); //@line 101 "xmltok_impl.c"
        var $53=($50) - ($52); //@line 101 "xmltok_impl.c"
        var $54=($53) <= 2; //@line 101 "xmltok_impl.c"
        if ($54) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 101 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 14: // $bb13
        var $55=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $56=$55+3; //@line 101 "xmltok_impl.c"
        $ptr_addr=$56; //@line 101 "xmltok_impl.c"
        __label__ = 30; break; //@line 101 "xmltok_impl.c"
      case 15: // $bb14
        var $57=$end_addr; //@line 101 "xmltok_impl.c"
        var $58=($57); //@line 101 "xmltok_impl.c"
        var $59=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $60=($59); //@line 101 "xmltok_impl.c"
        var $61=($58) - ($60); //@line 101 "xmltok_impl.c"
        var $62=($61) <= 3; //@line 101 "xmltok_impl.c"
        if ($62) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 101 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 17: // $bb16
        var $63=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $64=$63+4; //@line 101 "xmltok_impl.c"
        $ptr_addr=$64; //@line 101 "xmltok_impl.c"
        __label__ = 30; break; //@line 101 "xmltok_impl.c"
      case 18: // $bb17
        var $65=$nextTokPtr_addr; //@line 101 "xmltok_impl.c"
        var $66=$ptr_addr; //@line 101 "xmltok_impl.c"
        HEAP[$65]=$66; //@line 101 "xmltok_impl.c"
        $0=0; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 19: // $bb18
        var $67=$ptr_addr; //@line 103 "xmltok_impl.c"
        var $68=$67+2; //@line 103 "xmltok_impl.c"
        $ptr_addr=$68; //@line 103 "xmltok_impl.c"
        var $69=$ptr_addr; //@line 103 "xmltok_impl.c"
        var $70=$end_addr; //@line 103 "xmltok_impl.c"
        var $71=($69)==($70); //@line 103 "xmltok_impl.c"
        if ($71) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 103 "xmltok_impl.c"
      case 20: // $bb19
        $0=-1; //@line 104 "xmltok_impl.c"
        __label__ = 32; break; //@line 104 "xmltok_impl.c"
      case 21: // $bb20
        var $72=$ptr_addr; //@line 105 "xmltok_impl.c"
        var $73=$72+1; //@line 105 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 105 "xmltok_impl.c"
        var $75=($74)==0; //@line 105 "xmltok_impl.c"
        if ($75) { __label__ = 22; break; } else { __label__ = 30; break; } //@line 105 "xmltok_impl.c"
      case 22: // $bb21
        var $76=$ptr_addr; //@line 105 "xmltok_impl.c"
        var $77=$76; //@line 105 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 105 "xmltok_impl.c"
        var $79=($78)==45; //@line 105 "xmltok_impl.c"
        if ($79) { __label__ = 23; break; } else { __label__ = 30; break; } //@line 105 "xmltok_impl.c"
      case 23: // $bb22
        var $80=$ptr_addr; //@line 106 "xmltok_impl.c"
        var $81=$80+2; //@line 106 "xmltok_impl.c"
        $ptr_addr=$81; //@line 106 "xmltok_impl.c"
        var $82=$ptr_addr; //@line 106 "xmltok_impl.c"
        var $83=$end_addr; //@line 106 "xmltok_impl.c"
        var $84=($82)==($83); //@line 106 "xmltok_impl.c"
        if ($84) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 106 "xmltok_impl.c"
      case 24: // $bb23
        $0=-1; //@line 107 "xmltok_impl.c"
        __label__ = 32; break; //@line 107 "xmltok_impl.c"
      case 25: // $bb24
        var $85=$ptr_addr; //@line 108 "xmltok_impl.c"
        var $86=$85+1; //@line 108 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 108 "xmltok_impl.c"
        var $88=($87)!=0; //@line 108 "xmltok_impl.c"
        if ($88) { __label__ = 27; break; } else { __label__ = 26; break; } //@line 108 "xmltok_impl.c"
      case 26: // $bb25
        var $89=$ptr_addr; //@line 108 "xmltok_impl.c"
        var $90=$89; //@line 108 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 108 "xmltok_impl.c"
        var $92=($91)!=62; //@line 108 "xmltok_impl.c"
        if ($92) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 108 "xmltok_impl.c"
      case 27: // $bb26
        var $93=$nextTokPtr_addr; //@line 109 "xmltok_impl.c"
        var $94=$ptr_addr; //@line 109 "xmltok_impl.c"
        HEAP[$93]=$94; //@line 109 "xmltok_impl.c"
        $0=0; //@line 110 "xmltok_impl.c"
        __label__ = 32; break; //@line 110 "xmltok_impl.c"
      case 28: // $bb27
        var $95=$ptr_addr; //@line 112 "xmltok_impl.c"
        var $96=$95+2; //@line 112 "xmltok_impl.c"
        var $97=$nextTokPtr_addr; //@line 112 "xmltok_impl.c"
        HEAP[$97]=$96; //@line 112 "xmltok_impl.c"
        $0=13; //@line 113 "xmltok_impl.c"
        __label__ = 32; break; //@line 113 "xmltok_impl.c"
      case 29: // $bb29
        var $98=$ptr_addr; //@line 117 "xmltok_impl.c"
        var $99=$98+2; //@line 117 "xmltok_impl.c"
        $ptr_addr=$99; //@line 117 "xmltok_impl.c"
        __label__ = 30; break; //@line 117 "xmltok_impl.c"
      case 30: // $bb30
        var $100=$ptr_addr; //@line 99 "xmltok_impl.c"
        var $101=$end_addr; //@line 99 "xmltok_impl.c"
        var $102=($100)!=($101); //@line 99 "xmltok_impl.c"
        if ($102) { __label__ = 5; break; } else { __label__ = 31; break; } //@line 99 "xmltok_impl.c"
      case 31: // $bb31
        $0=-1; //@line 122 "xmltok_impl.c"
        __label__ = 32; break; //@line 122 "xmltok_impl.c"
      case 32: // $bb32
        var $103=$0; //@line 96 "xmltok_impl.c"
        $retval=$103; //@line 96 "xmltok_impl.c"
        var $retval33=$retval; //@line 96 "xmltok_impl.c"
        ;
        return $retval33; //@line 96 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanDecl($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_526;
        var $iftmp_524;
        var $iftmp_522;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 131 "xmltok_impl.c"
        var $2=$end_addr; //@line 131 "xmltok_impl.c"
        var $3=($1)==($2); //@line 131 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 131 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 132 "xmltok_impl.c"
        __label__ = 26; break; //@line 132 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 133 "xmltok_impl.c"
        var $5=$4+1; //@line 133 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 133 "xmltok_impl.c"
        var $7=($6)==0; //@line 133 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 133 "xmltok_impl.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 133 "xmltok_impl.c"
        var $9=$8; //@line 133 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 133 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 133 "xmltok_impl.c"
        var $12=($11); //@line 133 "xmltok_impl.c"
        var $13=$9+76; //@line 133 "xmltok_impl.c"
        var $14=$13+$12; //@line 133 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 133 "xmltok_impl.c"
        var $16=($15); //@line 133 "xmltok_impl.c"
        $iftmp_522=$16; //@line 133 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 133 "xmltok_impl.c"
      case 4: // $bb3
        var $17=$ptr_addr; //@line 133 "xmltok_impl.c"
        var $18=$17; //@line 133 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 133 "xmltok_impl.c"
        var $20=($19); //@line 133 "xmltok_impl.c"
        var $21=$ptr_addr; //@line 133 "xmltok_impl.c"
        var $22=$21+1; //@line 133 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 133 "xmltok_impl.c"
        var $24=($23); //@line 133 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 133 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 133 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 133 "xmltok_impl.c"
        $iftmp_522=$27; //@line 133 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 133 "xmltok_impl.c"
      case 5: // $bb4
        var $28=__lastLabel__ == 4 ? $27 : ($16);
        if ($28 == 20) {
          __label__ = 7; break;
        }
        else if ($28 == 22) {
          __label__ = 8; break;
        }
        else if ($28 == 24) {
          __label__ = 8; break;
        }
        else if ($28 == 27) {
          __label__ = 6; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 6: // $bb5
        var $29=$ptr_addr; //@line 135 "xmltok_impl.c"
        var $30=$29+2; //@line 135 "xmltok_impl.c"
        var $31=$enc_addr; //@line 135 "xmltok_impl.c"
        var $32=$end_addr; //@line 135 "xmltok_impl.c"
        var $33=$nextTokPtr_addr; //@line 135 "xmltok_impl.c"
        var $34=_little2_scanComment($31, $30, $32, $33); //@line 135 "xmltok_impl.c"
        $0=$34; //@line 135 "xmltok_impl.c"
        __label__ = 26; break; //@line 135 "xmltok_impl.c"
      case 7: // $bb6
        var $35=$ptr_addr; //@line 137 "xmltok_impl.c"
        var $36=$35+2; //@line 137 "xmltok_impl.c"
        var $37=$nextTokPtr_addr; //@line 137 "xmltok_impl.c"
        HEAP[$37]=$36; //@line 137 "xmltok_impl.c"
        $0=33; //@line 138 "xmltok_impl.c"
        __label__ = 26; break; //@line 138 "xmltok_impl.c"
      case 8: // $bb7
        var $38=$ptr_addr; //@line 141 "xmltok_impl.c"
        var $39=$38+2; //@line 141 "xmltok_impl.c"
        $ptr_addr=$39; //@line 141 "xmltok_impl.c"
        __label__ = 24; break; //@line 141 "xmltok_impl.c"
      case 9: // $bb8
        var $40=$nextTokPtr_addr; //@line 144 "xmltok_impl.c"
        var $41=$ptr_addr; //@line 144 "xmltok_impl.c"
        HEAP[$40]=$41; //@line 144 "xmltok_impl.c"
        $0=0; //@line 145 "xmltok_impl.c"
        __label__ = 26; break; //@line 145 "xmltok_impl.c"
      case 10: // $bb9
        var $42=$ptr_addr; //@line 148 "xmltok_impl.c"
        var $43=$42+1; //@line 148 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 148 "xmltok_impl.c"
        var $45=($44)==0; //@line 148 "xmltok_impl.c"
        if ($45) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 148 "xmltok_impl.c"
      case 11: // $bb10
        var $46=$enc_addr; //@line 148 "xmltok_impl.c"
        var $47=$46; //@line 148 "xmltok_impl.c"
        var $48=$ptr_addr; //@line 148 "xmltok_impl.c"
        var $49=HEAP[$48]; //@line 148 "xmltok_impl.c"
        var $50=($49); //@line 148 "xmltok_impl.c"
        var $51=$47+76; //@line 148 "xmltok_impl.c"
        var $52=$51+$50; //@line 148 "xmltok_impl.c"
        var $53=HEAP[$52]; //@line 148 "xmltok_impl.c"
        var $54=($53); //@line 148 "xmltok_impl.c"
        $iftmp_524=$54; //@line 148 "xmltok_impl.c"
        __lastLabel__ = 11; __label__ = 13; break; //@line 148 "xmltok_impl.c"
      case 12: // $bb11
        var $55=$ptr_addr; //@line 148 "xmltok_impl.c"
        var $56=$55; //@line 148 "xmltok_impl.c"
        var $57=HEAP[$56]; //@line 148 "xmltok_impl.c"
        var $58=($57); //@line 148 "xmltok_impl.c"
        var $59=$ptr_addr; //@line 148 "xmltok_impl.c"
        var $60=$59+1; //@line 148 "xmltok_impl.c"
        var $61=HEAP[$60]; //@line 148 "xmltok_impl.c"
        var $62=($61); //@line 148 "xmltok_impl.c"
        var $63=((($62)) & 255); //@line 148 "xmltok_impl.c"
        var $64=((($58)) & 255); //@line 148 "xmltok_impl.c"
        var $65=_unicode_byte_type($63, $64); //@line 148 "xmltok_impl.c"
        $iftmp_524=$65; //@line 148 "xmltok_impl.c"
        __lastLabel__ = 12; __label__ = 13; break; //@line 148 "xmltok_impl.c"
      case 13: // $bb12
        var $66=__lastLabel__ == 12 ? $65 : ($54);
        if ($66 == 9) {
          __label__ = 21; break;
        }
        else if ($66 == 10) {
          __label__ = 21; break;
        }
        else if ($66 == 21) {
          __label__ = 21; break;
        }
        else if ($66 == 22) {
          __label__ = 22; break;
        }
        else if ($66 == 24) {
          __label__ = 22; break;
        }
        else if ($66 == 30) {
          __label__ = 14; break;
        }
        else {
        __label__ = 23; break;
        }
        
      case 14: // $bb13
        var $67=$ptr_addr; //@line 150 "xmltok_impl.c"
        var $68=$67+2; //@line 150 "xmltok_impl.c"
        var $69=$end_addr; //@line 150 "xmltok_impl.c"
        var $70=($68)==($69); //@line 150 "xmltok_impl.c"
        if ($70) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 150 "xmltok_impl.c"
      case 15: // $bb14
        $0=-1; //@line 151 "xmltok_impl.c"
        __label__ = 26; break; //@line 151 "xmltok_impl.c"
      case 16: // $bb15
        var $71=$ptr_addr; //@line 153 "xmltok_impl.c"
        var $72=$71+2; //@line 153 "xmltok_impl.c"
        var $73=$72+1; //@line 153 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 153 "xmltok_impl.c"
        var $75=($74)==0; //@line 153 "xmltok_impl.c"
        if ($75) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 153 "xmltok_impl.c"
      case 17: // $bb16
        var $76=$enc_addr; //@line 153 "xmltok_impl.c"
        var $77=$76; //@line 153 "xmltok_impl.c"
        var $78=$ptr_addr; //@line 153 "xmltok_impl.c"
        var $79=$78+2; //@line 153 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 153 "xmltok_impl.c"
        var $81=($80); //@line 153 "xmltok_impl.c"
        var $82=$77+76; //@line 153 "xmltok_impl.c"
        var $83=$82+$81; //@line 153 "xmltok_impl.c"
        var $84=HEAP[$83]; //@line 153 "xmltok_impl.c"
        var $85=($84); //@line 153 "xmltok_impl.c"
        $iftmp_526=$85; //@line 153 "xmltok_impl.c"
        __lastLabel__ = 17; __label__ = 19; break; //@line 153 "xmltok_impl.c"
      case 18: // $bb17
        var $86=$ptr_addr; //@line 153 "xmltok_impl.c"
        var $87=$86+2; //@line 153 "xmltok_impl.c"
        var $88=$87; //@line 153 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 153 "xmltok_impl.c"
        var $90=($89); //@line 153 "xmltok_impl.c"
        var $91=$ptr_addr; //@line 153 "xmltok_impl.c"
        var $92=$91+2; //@line 153 "xmltok_impl.c"
        var $93=$92+1; //@line 153 "xmltok_impl.c"
        var $94=HEAP[$93]; //@line 153 "xmltok_impl.c"
        var $95=($94); //@line 153 "xmltok_impl.c"
        var $96=((($95)) & 255); //@line 153 "xmltok_impl.c"
        var $97=((($90)) & 255); //@line 153 "xmltok_impl.c"
        var $98=_unicode_byte_type($96, $97); //@line 153 "xmltok_impl.c"
        $iftmp_526=$98; //@line 153 "xmltok_impl.c"
        __lastLabel__ = 18; __label__ = 19; break; //@line 153 "xmltok_impl.c"
      case 19: // $bb18
        var $99=__lastLabel__ == 18 ? $98 : ($85);
        if ($99 == 9) {
          __label__ = 20; break;
        }
        else if ($99 == 10) {
          __label__ = 20; break;
        }
        else if ($99 == 21) {
          __label__ = 20; break;
        }
        else if ($99 == 30) {
          __label__ = 20; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 20: // $bb19
        var $100=$nextTokPtr_addr; //@line 155 "xmltok_impl.c"
        var $101=$ptr_addr; //@line 155 "xmltok_impl.c"
        HEAP[$100]=$101; //@line 155 "xmltok_impl.c"
        $0=0; //@line 156 "xmltok_impl.c"
        __label__ = 26; break; //@line 156 "xmltok_impl.c"
      case 21: // $bb20
        var $102=$nextTokPtr_addr; //@line 160 "xmltok_impl.c"
        var $103=$ptr_addr; //@line 160 "xmltok_impl.c"
        HEAP[$102]=$103; //@line 160 "xmltok_impl.c"
        $0=16; //@line 161 "xmltok_impl.c"
        __label__ = 26; break; //@line 161 "xmltok_impl.c"
      case 22: // $bb21
        var $104=$ptr_addr; //@line 164 "xmltok_impl.c"
        var $105=$104+2; //@line 164 "xmltok_impl.c"
        $ptr_addr=$105; //@line 164 "xmltok_impl.c"
        __label__ = 24; break; //@line 164 "xmltok_impl.c"
      case 23: // $bb22
        var $106=$nextTokPtr_addr; //@line 167 "xmltok_impl.c"
        var $107=$ptr_addr; //@line 167 "xmltok_impl.c"
        HEAP[$106]=$107; //@line 167 "xmltok_impl.c"
        $0=0; //@line 168 "xmltok_impl.c"
        __label__ = 26; break; //@line 168 "xmltok_impl.c"
      case 24: // $bb23
        var $108=$ptr_addr; //@line 147 "xmltok_impl.c"
        var $109=$end_addr; //@line 147 "xmltok_impl.c"
        var $110=($108)!=($109); //@line 147 "xmltok_impl.c"
        if ($110) { __label__ = 10; break; } else { __label__ = 25; break; } //@line 147 "xmltok_impl.c"
      case 25: // $bb24
        $0=-1; //@line 171 "xmltok_impl.c"
        __label__ = 26; break; //@line 171 "xmltok_impl.c"
      case 26: // $bb25
        var $111=$0; //@line 132 "xmltok_impl.c"
        $retval=$111; //@line 132 "xmltok_impl.c"
        var $retval26=$retval; //@line 132 "xmltok_impl.c"
        ;
        return $retval26; //@line 132 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_checkPiTarget($enc, $ptr, $end, $tokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $tokPtr_addr;
        var $retval;
        var $iftmp_532;
        var $iftmp_531;
        var $iftmp_530;
        var $0;
        var $upper;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $tokPtr_addr=$tokPtr;
        $upper=0; //@line 178 "xmltok_impl.c"
        var $1=$tokPtr_addr; //@line 179 "xmltok_impl.c"
        HEAP[$1]=11; //@line 179 "xmltok_impl.c"
        var $2=$end_addr; //@line 180 "xmltok_impl.c"
        var $3=($2); //@line 180 "xmltok_impl.c"
        var $4=$ptr_addr; //@line 180 "xmltok_impl.c"
        var $5=($4); //@line 180 "xmltok_impl.c"
        var $6=($3) - ($5); //@line 180 "xmltok_impl.c"
        var $7=($6)!=6; //@line 180 "xmltok_impl.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 180 "xmltok_impl.c"
      case 1: // $bb
        $0=1; //@line 181 "xmltok_impl.c"
        __label__ = 20; break; //@line 181 "xmltok_impl.c"
      case 2: // $bb1
        var $8=$ptr_addr; //@line 182 "xmltok_impl.c"
        var $9=$8+1; //@line 182 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 182 "xmltok_impl.c"
        var $11=($10)==0; //@line 182 "xmltok_impl.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 182 "xmltok_impl.c"
      case 3: // $bb4_thread
        $iftmp_530=-1; //@line 182 "xmltok_impl.c"
        __label__ = 6; break;
      case 4: // $bb4
        var $12=$ptr_addr; //@line 182 "xmltok_impl.c"
        var $13=$12; //@line 182 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 182 "xmltok_impl.c"
        var $15=($14); //@line 182 "xmltok_impl.c"
        $iftmp_530=$15; //@line 182 "xmltok_impl.c"
        if ($15 == 88) {
          __label__ = 5; break;
        }
        else if ($15 == 120) {
          __label__ = 7; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 5: // $bb6
        $upper=1; //@line 186 "xmltok_impl.c"
        __label__ = 7; break; //@line 186 "xmltok_impl.c"
      case 6: // $bb7
        $0=1; //@line 189 "xmltok_impl.c"
        __label__ = 20; break; //@line 189 "xmltok_impl.c"
      case 7: // $bb8
        var $16=$ptr_addr; //@line 191 "xmltok_impl.c"
        var $17=$16+2; //@line 191 "xmltok_impl.c"
        $ptr_addr=$17; //@line 191 "xmltok_impl.c"
        var $18=$ptr_addr; //@line 192 "xmltok_impl.c"
        var $19=$18+1; //@line 192 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 192 "xmltok_impl.c"
        var $21=($20)==0; //@line 192 "xmltok_impl.c"
        if ($21) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 192 "xmltok_impl.c"
      case 8: // $bb11_thread
        $iftmp_531=-1; //@line 192 "xmltok_impl.c"
        __label__ = 11; break;
      case 9: // $bb11
        var $22=$ptr_addr; //@line 192 "xmltok_impl.c"
        var $23=$22; //@line 192 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 192 "xmltok_impl.c"
        var $25=($24); //@line 192 "xmltok_impl.c"
        $iftmp_531=$25; //@line 192 "xmltok_impl.c"
        if ($25 == 77) {
          __label__ = 10; break;
        }
        else if ($25 == 109) {
          __label__ = 12; break;
        }
        else {
        __label__ = 11; break;
        }
        
      case 10: // $bb13
        $upper=1; //@line 196 "xmltok_impl.c"
        __label__ = 12; break; //@line 196 "xmltok_impl.c"
      case 11: // $bb14
        $0=1; //@line 199 "xmltok_impl.c"
        __label__ = 20; break; //@line 199 "xmltok_impl.c"
      case 12: // $bb15
        var $26=$ptr_addr; //@line 201 "xmltok_impl.c"
        var $27=$26+2; //@line 201 "xmltok_impl.c"
        $ptr_addr=$27; //@line 201 "xmltok_impl.c"
        var $28=$ptr_addr; //@line 202 "xmltok_impl.c"
        var $29=$28+1; //@line 202 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 202 "xmltok_impl.c"
        var $31=($30)==0; //@line 202 "xmltok_impl.c"
        if ($31) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 202 "xmltok_impl.c"
      case 13: // $bb18_thread
        $iftmp_532=-1; //@line 202 "xmltok_impl.c"
        __label__ = 16; break;
      case 14: // $bb18
        var $32=$ptr_addr; //@line 202 "xmltok_impl.c"
        var $33=$32; //@line 202 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 202 "xmltok_impl.c"
        var $35=($34); //@line 202 "xmltok_impl.c"
        $iftmp_532=$35; //@line 202 "xmltok_impl.c"
        if ($35 == 76) {
          __label__ = 15; break;
        }
        else if ($35 == 108) {
          __label__ = 17; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 15: // $bb22_thread
        $upper=1; //@line 206 "xmltok_impl.c"
        __label__ = 18; break;
      case 16: // $bb21
        $0=1; //@line 209 "xmltok_impl.c"
        __label__ = 20; break; //@line 209 "xmltok_impl.c"
      case 17: // $bb22
        var $_pr=$upper;
        var $36=($_pr)!=0; //@line 211 "xmltok_impl.c"
        if ($36) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 211 "xmltok_impl.c"
      case 18: // $bb23
        $0=0; //@line 212 "xmltok_impl.c"
        __label__ = 20; break; //@line 212 "xmltok_impl.c"
      case 19: // $bb24
        var $37=$tokPtr_addr; //@line 213 "xmltok_impl.c"
        HEAP[$37]=12; //@line 213 "xmltok_impl.c"
        $0=1; //@line 214 "xmltok_impl.c"
        __label__ = 20; break; //@line 214 "xmltok_impl.c"
      case 20: // $bb25
        var $38=$0; //@line 181 "xmltok_impl.c"
        $retval=$38; //@line 181 "xmltok_impl.c"
        var $retval26=$retval; //@line 181 "xmltok_impl.c"
        ;
        return $retval26; //@line 181 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanPi($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_549;
        var $iftmp_541;
        var $iftmp_533;
        var $0;
        var $tok=__stackBase__;
        var $target;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 224 "xmltok_impl.c"
        $target=$1; //@line 224 "xmltok_impl.c"
        var $2=$ptr_addr; //@line 225 "xmltok_impl.c"
        var $3=$end_addr; //@line 225 "xmltok_impl.c"
        var $4=($2)==($3); //@line 225 "xmltok_impl.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 225 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 226 "xmltok_impl.c"
        __label__ = 70; break; //@line 226 "xmltok_impl.c"
      case 2: // $bb1
        var $5=$ptr_addr; //@line 227 "xmltok_impl.c"
        var $6=$5+1; //@line 227 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 227 "xmltok_impl.c"
        var $8=($7)==0; //@line 227 "xmltok_impl.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 227 "xmltok_impl.c"
      case 3: // $bb2
        var $9=$enc_addr; //@line 227 "xmltok_impl.c"
        var $10=$9; //@line 227 "xmltok_impl.c"
        var $11=$ptr_addr; //@line 227 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 227 "xmltok_impl.c"
        var $13=($12); //@line 227 "xmltok_impl.c"
        var $14=$10+76; //@line 227 "xmltok_impl.c"
        var $15=$14+$13; //@line 227 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 227 "xmltok_impl.c"
        var $17=($16); //@line 227 "xmltok_impl.c"
        $iftmp_533=$17; //@line 227 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 227 "xmltok_impl.c"
      case 4: // $bb3
        var $18=$ptr_addr; //@line 227 "xmltok_impl.c"
        var $19=$18; //@line 227 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 227 "xmltok_impl.c"
        var $21=($20); //@line 227 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 227 "xmltok_impl.c"
        var $23=$22+1; //@line 227 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 227 "xmltok_impl.c"
        var $25=($24); //@line 227 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 227 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 227 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 227 "xmltok_impl.c"
        $iftmp_533=$28; //@line 227 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 227 "xmltok_impl.c"
      case 5: // $bb4
        var $29=__lastLabel__ == 4 ? $28 : ($17);
        if ($29 == 5) {
          __label__ = 9; break;
        }
        else if ($29 == 6) {
          __label__ = 12; break;
        }
        else if ($29 == 7) {
          __label__ = 15; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 6: // $bb5
        var $30=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $31=$30+1; //@line 228 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 228 "xmltok_impl.c"
        var $33=($32); //@line 228 "xmltok_impl.c"
        var $34=_nmstrtPages+$33; //@line 228 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 228 "xmltok_impl.c"
        var $36=($35); //@line 228 "xmltok_impl.c"
        var $37=($36) * 8;
        var $38=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $39=$38; //@line 228 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 228 "xmltok_impl.c"
        var $41=($40) >>> 5; //@line 228 "xmltok_impl.c"
        var $42=($41); //@line 228 "xmltok_impl.c"
        var $43=($42) + ($37); //@line 228 "xmltok_impl.c"
        var $44=_namingBitmap+$43*4; //@line 228 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 228 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $47=$46; //@line 228 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 228 "xmltok_impl.c"
        var $49=($48); //@line 228 "xmltok_impl.c"
        var $50=($49) & 31; //@line 228 "xmltok_impl.c"
        var $51=1 << ($50); //@line 228 "xmltok_impl.c"
        var $52=($51) & ($45); //@line 228 "xmltok_impl.c"
        var $53=($52)==0; //@line 228 "xmltok_impl.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 228 "xmltok_impl.c"
      case 7: // $bb6
        var $54=$nextTokPtr_addr; //@line 228 "xmltok_impl.c"
        var $55=$ptr_addr; //@line 228 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 228 "xmltok_impl.c"
        $0=0; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 8: // $bb7
        var $56=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $57=$56+2; //@line 228 "xmltok_impl.c"
        $ptr_addr=$57; //@line 228 "xmltok_impl.c"
        __label__ = 68; break; //@line 228 "xmltok_impl.c"
      case 9: // $bb8
        var $58=$end_addr; //@line 228 "xmltok_impl.c"
        var $59=($58); //@line 228 "xmltok_impl.c"
        var $60=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $61=($60); //@line 228 "xmltok_impl.c"
        var $62=($59) - ($61); //@line 228 "xmltok_impl.c"
        var $63=($62) <= 1; //@line 228 "xmltok_impl.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 228 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 11: // $bb10
        var $64=$nextTokPtr_addr; //@line 228 "xmltok_impl.c"
        var $65=$ptr_addr; //@line 228 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 228 "xmltok_impl.c"
        $0=0; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 12: // $bb11
        var $66=$end_addr; //@line 228 "xmltok_impl.c"
        var $67=($66); //@line 228 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $69=($68); //@line 228 "xmltok_impl.c"
        var $70=($67) - ($69); //@line 228 "xmltok_impl.c"
        var $71=($70) <= 2; //@line 228 "xmltok_impl.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 228 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 14: // $bb13
        var $72=$nextTokPtr_addr; //@line 228 "xmltok_impl.c"
        var $73=$ptr_addr; //@line 228 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 228 "xmltok_impl.c"
        $0=0; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 15: // $bb14
        var $74=$end_addr; //@line 228 "xmltok_impl.c"
        var $75=($74); //@line 228 "xmltok_impl.c"
        var $76=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $77=($76); //@line 228 "xmltok_impl.c"
        var $78=($75) - ($77); //@line 228 "xmltok_impl.c"
        var $79=($78) <= 3; //@line 228 "xmltok_impl.c"
        if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 228 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 17: // $bb16
        var $80=$nextTokPtr_addr; //@line 228 "xmltok_impl.c"
        var $81=$ptr_addr; //@line 228 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 228 "xmltok_impl.c"
        $0=0; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 18: // $bb17
        var $82=$nextTokPtr_addr; //@line 230 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 230 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 230 "xmltok_impl.c"
        $0=0; //@line 231 "xmltok_impl.c"
        __label__ = 70; break; //@line 231 "xmltok_impl.c"
      case 19: // $bb18
        var $84=$ptr_addr; //@line 234 "xmltok_impl.c"
        var $85=$84+1; //@line 234 "xmltok_impl.c"
        var $86=HEAP[$85]; //@line 234 "xmltok_impl.c"
        var $87=($86)==0; //@line 234 "xmltok_impl.c"
        if ($87) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 234 "xmltok_impl.c"
      case 20: // $bb19
        var $88=$enc_addr; //@line 234 "xmltok_impl.c"
        var $89=$88; //@line 234 "xmltok_impl.c"
        var $90=$ptr_addr; //@line 234 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 234 "xmltok_impl.c"
        var $92=($91); //@line 234 "xmltok_impl.c"
        var $93=$89+76; //@line 234 "xmltok_impl.c"
        var $94=$93+$92; //@line 234 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 234 "xmltok_impl.c"
        var $96=($95); //@line 234 "xmltok_impl.c"
        $iftmp_541=$96; //@line 234 "xmltok_impl.c"
        __lastLabel__ = 20; __label__ = 22; break; //@line 234 "xmltok_impl.c"
      case 21: // $bb20
        var $97=$ptr_addr; //@line 234 "xmltok_impl.c"
        var $98=$97; //@line 234 "xmltok_impl.c"
        var $99=HEAP[$98]; //@line 234 "xmltok_impl.c"
        var $100=($99); //@line 234 "xmltok_impl.c"
        var $101=$ptr_addr; //@line 234 "xmltok_impl.c"
        var $102=$101+1; //@line 234 "xmltok_impl.c"
        var $103=HEAP[$102]; //@line 234 "xmltok_impl.c"
        var $104=($103); //@line 234 "xmltok_impl.c"
        var $105=((($104)) & 255); //@line 234 "xmltok_impl.c"
        var $106=((($100)) & 255); //@line 234 "xmltok_impl.c"
        var $107=_unicode_byte_type($105, $106); //@line 234 "xmltok_impl.c"
        $iftmp_541=$107; //@line 234 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 22; break; //@line 234 "xmltok_impl.c"
      case 22: // $bb21
        var $108=__lastLabel__ == 21 ? $107 : ($96);
        if ($108 == 5) {
          __label__ = 26; break;
        }
        else if ($108 == 6) {
          __label__ = 29; break;
        }
        else if ($108 == 7) {
          __label__ = 32; break;
        }
        else if ($108 == 9) {
          __label__ = 35; break;
        }
        else if ($108 == 10) {
          __label__ = 35; break;
        }
        else if ($108 == 15) {
          __label__ = 60; break;
        }
        else if ($108 == 21) {
          __label__ = 35; break;
        }
        else if ($108 == 22) {
          __label__ = 25; break;
        }
        else if ($108 == 24) {
          __label__ = 25; break;
        }
        else if ($108 == 25) {
          __label__ = 25; break;
        }
        else if ($108 == 26) {
          __label__ = 25; break;
        }
        else if ($108 == 27) {
          __label__ = 25; break;
        }
        else if ($108 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 67; break;
        }
        
      case 23: // $bb22
        var $109=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $110=$109+1; //@line 235 "xmltok_impl.c"
        var $111=HEAP[$110]; //@line 235 "xmltok_impl.c"
        var $112=($111); //@line 235 "xmltok_impl.c"
        var $113=_namePages+$112; //@line 235 "xmltok_impl.c"
        var $114=HEAP[$113]; //@line 235 "xmltok_impl.c"
        var $115=($114); //@line 235 "xmltok_impl.c"
        var $116=($115) * 8;
        var $117=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $118=$117; //@line 235 "xmltok_impl.c"
        var $119=HEAP[$118]; //@line 235 "xmltok_impl.c"
        var $120=($119) >>> 5; //@line 235 "xmltok_impl.c"
        var $121=($120); //@line 235 "xmltok_impl.c"
        var $122=($121) + ($116); //@line 235 "xmltok_impl.c"
        var $123=_namingBitmap+$122*4; //@line 235 "xmltok_impl.c"
        var $124=HEAP[$123]; //@line 235 "xmltok_impl.c"
        var $125=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $126=$125; //@line 235 "xmltok_impl.c"
        var $127=HEAP[$126]; //@line 235 "xmltok_impl.c"
        var $128=($127); //@line 235 "xmltok_impl.c"
        var $129=($128) & 31; //@line 235 "xmltok_impl.c"
        var $130=1 << ($129); //@line 235 "xmltok_impl.c"
        var $131=($130) & ($124); //@line 235 "xmltok_impl.c"
        var $132=($131)==0; //@line 235 "xmltok_impl.c"
        if ($132) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 235 "xmltok_impl.c"
      case 24: // $bb23
        var $133=$nextTokPtr_addr; //@line 235 "xmltok_impl.c"
        var $134=$ptr_addr; //@line 235 "xmltok_impl.c"
        HEAP[$133]=$134; //@line 235 "xmltok_impl.c"
        $0=0; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 25: // $bb24
        var $135=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $136=$135+2; //@line 235 "xmltok_impl.c"
        $ptr_addr=$136; //@line 235 "xmltok_impl.c"
        __label__ = 68; break; //@line 235 "xmltok_impl.c"
      case 26: // $bb25
        var $137=$end_addr; //@line 235 "xmltok_impl.c"
        var $138=($137); //@line 235 "xmltok_impl.c"
        var $139=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $140=($139); //@line 235 "xmltok_impl.c"
        var $141=($138) - ($140); //@line 235 "xmltok_impl.c"
        var $142=($141) <= 1; //@line 235 "xmltok_impl.c"
        if ($142) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 235 "xmltok_impl.c"
      case 27: // $bb26
        $0=-2; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 28: // $bb27
        var $143=$nextTokPtr_addr; //@line 235 "xmltok_impl.c"
        var $144=$ptr_addr; //@line 235 "xmltok_impl.c"
        HEAP[$143]=$144; //@line 235 "xmltok_impl.c"
        $0=0; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 29: // $bb28
        var $145=$end_addr; //@line 235 "xmltok_impl.c"
        var $146=($145); //@line 235 "xmltok_impl.c"
        var $147=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $148=($147); //@line 235 "xmltok_impl.c"
        var $149=($146) - ($148); //@line 235 "xmltok_impl.c"
        var $150=($149) <= 2; //@line 235 "xmltok_impl.c"
        if ($150) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 235 "xmltok_impl.c"
      case 30: // $bb29
        $0=-2; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 31: // $bb30
        var $151=$nextTokPtr_addr; //@line 235 "xmltok_impl.c"
        var $152=$ptr_addr; //@line 235 "xmltok_impl.c"
        HEAP[$151]=$152; //@line 235 "xmltok_impl.c"
        $0=0; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 32: // $bb31
        var $153=$end_addr; //@line 235 "xmltok_impl.c"
        var $154=($153); //@line 235 "xmltok_impl.c"
        var $155=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $156=($155); //@line 235 "xmltok_impl.c"
        var $157=($154) - ($156); //@line 235 "xmltok_impl.c"
        var $158=($157) <= 3; //@line 235 "xmltok_impl.c"
        if ($158) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 235 "xmltok_impl.c"
      case 33: // $bb32
        $0=-2; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 34: // $bb33
        var $159=$nextTokPtr_addr; //@line 235 "xmltok_impl.c"
        var $160=$ptr_addr; //@line 235 "xmltok_impl.c"
        HEAP[$159]=$160; //@line 235 "xmltok_impl.c"
        $0=0; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 35: // $bb34
        var $161=$enc_addr; //@line 237 "xmltok_impl.c"
        var $162=$target; //@line 237 "xmltok_impl.c"
        var $163=$ptr_addr; //@line 237 "xmltok_impl.c"
        var $164=_little2_checkPiTarget($161, $162, $163, $tok); //@line 237 "xmltok_impl.c"
        var $165=($164)==0; //@line 237 "xmltok_impl.c"
        if ($165) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 237 "xmltok_impl.c"
      case 36: // $bb35
        var $166=$nextTokPtr_addr; //@line 238 "xmltok_impl.c"
        var $167=$ptr_addr; //@line 238 "xmltok_impl.c"
        HEAP[$166]=$167; //@line 238 "xmltok_impl.c"
        $0=0; //@line 239 "xmltok_impl.c"
        __label__ = 70; break; //@line 239 "xmltok_impl.c"
      case 37: // $bb36
        var $168=$ptr_addr; //@line 241 "xmltok_impl.c"
        var $169=$168+2; //@line 241 "xmltok_impl.c"
        $ptr_addr=$169; //@line 241 "xmltok_impl.c"
        __label__ = 58; break; //@line 241 "xmltok_impl.c"
      case 38: // $bb37
        var $170=$ptr_addr; //@line 243 "xmltok_impl.c"
        var $171=$170+1; //@line 243 "xmltok_impl.c"
        var $172=HEAP[$171]; //@line 243 "xmltok_impl.c"
        var $173=($172)==0; //@line 243 "xmltok_impl.c"
        if ($173) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 243 "xmltok_impl.c"
      case 39: // $bb38
        var $174=$enc_addr; //@line 243 "xmltok_impl.c"
        var $175=$174; //@line 243 "xmltok_impl.c"
        var $176=$ptr_addr; //@line 243 "xmltok_impl.c"
        var $177=HEAP[$176]; //@line 243 "xmltok_impl.c"
        var $178=($177); //@line 243 "xmltok_impl.c"
        var $179=$175+76; //@line 243 "xmltok_impl.c"
        var $180=$179+$178; //@line 243 "xmltok_impl.c"
        var $181=HEAP[$180]; //@line 243 "xmltok_impl.c"
        var $182=($181); //@line 243 "xmltok_impl.c"
        $iftmp_549=$182; //@line 243 "xmltok_impl.c"
        __lastLabel__ = 39; __label__ = 41; break; //@line 243 "xmltok_impl.c"
      case 40: // $bb39
        var $183=$ptr_addr; //@line 243 "xmltok_impl.c"
        var $184=$183; //@line 243 "xmltok_impl.c"
        var $185=HEAP[$184]; //@line 243 "xmltok_impl.c"
        var $186=($185); //@line 243 "xmltok_impl.c"
        var $187=$ptr_addr; //@line 243 "xmltok_impl.c"
        var $188=$187+1; //@line 243 "xmltok_impl.c"
        var $189=HEAP[$188]; //@line 243 "xmltok_impl.c"
        var $190=($189); //@line 243 "xmltok_impl.c"
        var $191=((($190)) & 255); //@line 243 "xmltok_impl.c"
        var $192=((($186)) & 255); //@line 243 "xmltok_impl.c"
        var $193=_unicode_byte_type($191, $192); //@line 243 "xmltok_impl.c"
        $iftmp_549=$193; //@line 243 "xmltok_impl.c"
        __lastLabel__ = 40; __label__ = 41; break; //@line 243 "xmltok_impl.c"
      case 41: // $bb40
        var $194=__lastLabel__ == 40 ? $193 : ($182);
        if ($194 == 0) {
          __label__ = 51; break;
        }
        else if ($194 == 1) {
          __label__ = 51; break;
        }
        else if ($194 == 5) {
          __label__ = 42; break;
        }
        else if ($194 == 6) {
          __label__ = 45; break;
        }
        else if ($194 == 7) {
          __label__ = 48; break;
        }
        else if ($194 == 8) {
          __label__ = 51; break;
        }
        else if ($194 == 15) {
          __label__ = 52; break;
        }
        else {
        __label__ = 57; break;
        }
        
      case 42: // $bb41
        var $195=$end_addr; //@line 244 "xmltok_impl.c"
        var $196=($195); //@line 244 "xmltok_impl.c"
        var $197=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $198=($197); //@line 244 "xmltok_impl.c"
        var $199=($196) - ($198); //@line 244 "xmltok_impl.c"
        var $200=($199) <= 1; //@line 244 "xmltok_impl.c"
        if ($200) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 244 "xmltok_impl.c"
      case 43: // $bb42
        $0=-2; //@line 244 "xmltok_impl.c"
        __label__ = 70; break; //@line 244 "xmltok_impl.c"
      case 44: // $bb43
        var $201=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $202=$201+2; //@line 244 "xmltok_impl.c"
        $ptr_addr=$202; //@line 244 "xmltok_impl.c"
        __label__ = 58; break; //@line 244 "xmltok_impl.c"
      case 45: // $bb44
        var $203=$end_addr; //@line 244 "xmltok_impl.c"
        var $204=($203); //@line 244 "xmltok_impl.c"
        var $205=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $206=($205); //@line 244 "xmltok_impl.c"
        var $207=($204) - ($206); //@line 244 "xmltok_impl.c"
        var $208=($207) <= 2; //@line 244 "xmltok_impl.c"
        if ($208) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 244 "xmltok_impl.c"
      case 46: // $bb45
        $0=-2; //@line 244 "xmltok_impl.c"
        __label__ = 70; break; //@line 244 "xmltok_impl.c"
      case 47: // $bb46
        var $209=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $210=$209+3; //@line 244 "xmltok_impl.c"
        $ptr_addr=$210; //@line 244 "xmltok_impl.c"
        __label__ = 58; break; //@line 244 "xmltok_impl.c"
      case 48: // $bb47
        var $211=$end_addr; //@line 244 "xmltok_impl.c"
        var $212=($211); //@line 244 "xmltok_impl.c"
        var $213=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $214=($213); //@line 244 "xmltok_impl.c"
        var $215=($212) - ($214); //@line 244 "xmltok_impl.c"
        var $216=($215) <= 3; //@line 244 "xmltok_impl.c"
        if ($216) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 244 "xmltok_impl.c"
      case 49: // $bb48
        $0=-2; //@line 244 "xmltok_impl.c"
        __label__ = 70; break; //@line 244 "xmltok_impl.c"
      case 50: // $bb49
        var $217=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $218=$217+4; //@line 244 "xmltok_impl.c"
        $ptr_addr=$218; //@line 244 "xmltok_impl.c"
        __label__ = 58; break; //@line 244 "xmltok_impl.c"
      case 51: // $bb50
        var $219=$nextTokPtr_addr; //@line 244 "xmltok_impl.c"
        var $220=$ptr_addr; //@line 244 "xmltok_impl.c"
        HEAP[$219]=$220; //@line 244 "xmltok_impl.c"
        $0=0; //@line 244 "xmltok_impl.c"
        __label__ = 70; break; //@line 244 "xmltok_impl.c"
      case 52: // $bb51
        var $221=$ptr_addr; //@line 246 "xmltok_impl.c"
        var $222=$221+2; //@line 246 "xmltok_impl.c"
        $ptr_addr=$222; //@line 246 "xmltok_impl.c"
        var $223=$ptr_addr; //@line 247 "xmltok_impl.c"
        var $224=$end_addr; //@line 247 "xmltok_impl.c"
        var $225=($223)==($224); //@line 247 "xmltok_impl.c"
        if ($225) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 247 "xmltok_impl.c"
      case 53: // $bb52
        $0=-1; //@line 248 "xmltok_impl.c"
        __label__ = 70; break; //@line 248 "xmltok_impl.c"
      case 54: // $bb53
        var $226=$ptr_addr; //@line 249 "xmltok_impl.c"
        var $227=$226+1; //@line 249 "xmltok_impl.c"
        var $228=HEAP[$227]; //@line 249 "xmltok_impl.c"
        var $229=($228)==0; //@line 249 "xmltok_impl.c"
        if ($229) { __label__ = 55; break; } else { __label__ = 58; break; } //@line 249 "xmltok_impl.c"
      case 55: // $bb54
        var $230=$ptr_addr; //@line 249 "xmltok_impl.c"
        var $231=$230; //@line 249 "xmltok_impl.c"
        var $232=HEAP[$231]; //@line 249 "xmltok_impl.c"
        var $233=($232)==62; //@line 249 "xmltok_impl.c"
        if ($233) { __label__ = 56; break; } else { __label__ = 58; break; } //@line 249 "xmltok_impl.c"
      case 56: // $bb55
        var $234=$ptr_addr; //@line 250 "xmltok_impl.c"
        var $235=$234+2; //@line 250 "xmltok_impl.c"
        var $236=$nextTokPtr_addr; //@line 250 "xmltok_impl.c"
        HEAP[$236]=$235; //@line 250 "xmltok_impl.c"
        var $237=HEAP[$tok]; //@line 251 "xmltok_impl.c"
        $0=$237; //@line 251 "xmltok_impl.c"
        __label__ = 70; break; //@line 251 "xmltok_impl.c"
      case 57: // $bb57
        var $238=$ptr_addr; //@line 255 "xmltok_impl.c"
        var $239=$238+2; //@line 255 "xmltok_impl.c"
        $ptr_addr=$239; //@line 255 "xmltok_impl.c"
        __label__ = 58; break; //@line 255 "xmltok_impl.c"
      case 58: // $bb58
        var $240=$ptr_addr; //@line 242 "xmltok_impl.c"
        var $241=$end_addr; //@line 242 "xmltok_impl.c"
        var $242=($240)!=($241); //@line 242 "xmltok_impl.c"
        if ($242) { __label__ = 38; break; } else { __label__ = 59; break; } //@line 242 "xmltok_impl.c"
      case 59: // $bb59
        $0=-1; //@line 259 "xmltok_impl.c"
        __label__ = 70; break; //@line 259 "xmltok_impl.c"
      case 60: // $bb60
        var $243=$enc_addr; //@line 261 "xmltok_impl.c"
        var $244=$target; //@line 261 "xmltok_impl.c"
        var $245=$ptr_addr; //@line 261 "xmltok_impl.c"
        var $246=_little2_checkPiTarget($243, $244, $245, $tok); //@line 261 "xmltok_impl.c"
        var $247=($246)==0; //@line 261 "xmltok_impl.c"
        if ($247) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 261 "xmltok_impl.c"
      case 61: // $bb61
        var $248=$nextTokPtr_addr; //@line 262 "xmltok_impl.c"
        var $249=$ptr_addr; //@line 262 "xmltok_impl.c"
        HEAP[$248]=$249; //@line 262 "xmltok_impl.c"
        $0=0; //@line 263 "xmltok_impl.c"
        __label__ = 70; break; //@line 263 "xmltok_impl.c"
      case 62: // $bb62
        var $250=$ptr_addr; //@line 265 "xmltok_impl.c"
        var $251=$250+2; //@line 265 "xmltok_impl.c"
        $ptr_addr=$251; //@line 265 "xmltok_impl.c"
        var $252=$ptr_addr; //@line 266 "xmltok_impl.c"
        var $253=$end_addr; //@line 266 "xmltok_impl.c"
        var $254=($252)==($253); //@line 266 "xmltok_impl.c"
        if ($254) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 266 "xmltok_impl.c"
      case 63: // $bb63
        $0=-1; //@line 267 "xmltok_impl.c"
        __label__ = 70; break; //@line 267 "xmltok_impl.c"
      case 64: // $bb64
        var $255=$ptr_addr; //@line 268 "xmltok_impl.c"
        var $256=$255+1; //@line 268 "xmltok_impl.c"
        var $257=HEAP[$256]; //@line 268 "xmltok_impl.c"
        var $258=($257)==0; //@line 268 "xmltok_impl.c"
        if ($258) { __label__ = 65; break; } else { __label__ = 67; break; } //@line 268 "xmltok_impl.c"
      case 65: // $bb65
        var $259=$ptr_addr; //@line 268 "xmltok_impl.c"
        var $260=$259; //@line 268 "xmltok_impl.c"
        var $261=HEAP[$260]; //@line 268 "xmltok_impl.c"
        var $262=($261)==62; //@line 268 "xmltok_impl.c"
        if ($262) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 268 "xmltok_impl.c"
      case 66: // $bb66
        var $263=$ptr_addr; //@line 269 "xmltok_impl.c"
        var $264=$263+2; //@line 269 "xmltok_impl.c"
        var $265=$nextTokPtr_addr; //@line 269 "xmltok_impl.c"
        HEAP[$265]=$264; //@line 269 "xmltok_impl.c"
        var $266=HEAP[$tok]; //@line 270 "xmltok_impl.c"
        $0=$266; //@line 270 "xmltok_impl.c"
        __label__ = 70; break; //@line 270 "xmltok_impl.c"
      case 67: // $bb67
        var $267=$nextTokPtr_addr; //@line 274 "xmltok_impl.c"
        var $268=$ptr_addr; //@line 274 "xmltok_impl.c"
        HEAP[$267]=$268; //@line 274 "xmltok_impl.c"
        $0=0; //@line 275 "xmltok_impl.c"
        __label__ = 70; break; //@line 275 "xmltok_impl.c"
      case 68: // $bb68
        var $269=$ptr_addr; //@line 233 "xmltok_impl.c"
        var $270=$end_addr; //@line 233 "xmltok_impl.c"
        var $271=($269)!=($270); //@line 233 "xmltok_impl.c"
        if ($271) { __label__ = 19; break; } else { __label__ = 69; break; } //@line 233 "xmltok_impl.c"
      case 69: // $bb69
        $0=-1; //@line 278 "xmltok_impl.c"
        __label__ = 70; break; //@line 278 "xmltok_impl.c"
      case 70: // $bb70
        var $272=$0; //@line 226 "xmltok_impl.c"
        $retval=$272; //@line 226 "xmltok_impl.c"
        var $retval71=$retval; //@line 226 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval71; //@line 226 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanCdataSection($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $i;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$end_addr; //@line 289 "xmltok_impl.c"
        var $2=($1); //@line 289 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 289 "xmltok_impl.c"
        var $4=($3); //@line 289 "xmltok_impl.c"
        var $5=($2) - ($4); //@line 289 "xmltok_impl.c"
        var $6=($5) <= 11; //@line 289 "xmltok_impl.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 289 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 290 "xmltok_impl.c"
        __label__ = 9; break; //@line 290 "xmltok_impl.c"
      case 2: // $bb1
        $i=0; //@line 291 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 7; break; //@line 291 "xmltok_impl.c"
      case 3: // $bb2
        var $7=$ptr_addr; //@line 292 "xmltok_impl.c"
        var $8=$7+1; //@line 292 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 292 "xmltok_impl.c"
        var $10=($9)!=0; //@line 292 "xmltok_impl.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 292 "xmltok_impl.c"
      case 4: // $bb3
        var $11=$ptr_addr; //@line 292 "xmltok_impl.c"
        var $12=$11; //@line 292 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 292 "xmltok_impl.c"
        var $14=$i; //@line 292 "xmltok_impl.c"
        var $15=_CDATA_LSQB_9078+$14; //@line 292 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 292 "xmltok_impl.c"
        var $17=($13)!=($16); //@line 292 "xmltok_impl.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 292 "xmltok_impl.c"
      case 5: // $bb4
        var $18=$nextTokPtr_addr; //@line 293 "xmltok_impl.c"
        var $19=$ptr_addr; //@line 293 "xmltok_impl.c"
        HEAP[$18]=$19; //@line 293 "xmltok_impl.c"
        $0=0; //@line 294 "xmltok_impl.c"
        __label__ = 9; break; //@line 294 "xmltok_impl.c"
      case 6: // $bb5
        var $20=$i; //@line 291 "xmltok_impl.c"
        var $21=($20) + 1; //@line 291 "xmltok_impl.c"
        $i=$21; //@line 291 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 291 "xmltok_impl.c"
        var $23=$22+2; //@line 291 "xmltok_impl.c"
        $ptr_addr=$23; //@line 291 "xmltok_impl.c"
        __lastLabel__ = 6; __label__ = 7; break; //@line 291 "xmltok_impl.c"
      case 7: // $bb6
        var $24=__lastLabel__ == 6 ? $21 : (0);
        var $25=($24) <= 5; //@line 291 "xmltok_impl.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 291 "xmltok_impl.c"
      case 8: // $bb7
        var $26=$nextTokPtr_addr; //@line 297 "xmltok_impl.c"
        var $27=$ptr_addr; //@line 297 "xmltok_impl.c"
        HEAP[$26]=$27; //@line 297 "xmltok_impl.c"
        $0=8; //@line 298 "xmltok_impl.c"
        __label__ = 9; break; //@line 298 "xmltok_impl.c"
      case 9: // $bb8
        var $28=$0; //@line 290 "xmltok_impl.c"
        $retval=$28; //@line 290 "xmltok_impl.c"
        var $retval9=$retval; //@line 290 "xmltok_impl.c"
        ;
        return $retval9; //@line 290 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_cdataSectionTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_573;
        var $iftmp_565;
        var $iftmp_563;
        var $0;
        var $n;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 305 "xmltok_impl.c"
        var $2=$end_addr; //@line 305 "xmltok_impl.c"
        var $3=($1)==($2); //@line 305 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 305 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 306 "xmltok_impl.c"
        __label__ = 57; break; //@line 306 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$end_addr; //@line 308 "xmltok_impl.c"
        var $5=($4); //@line 308 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 308 "xmltok_impl.c"
        var $7=($6); //@line 308 "xmltok_impl.c"
        var $8=($5) - ($7); //@line 308 "xmltok_impl.c"
        $n=$8; //@line 308 "xmltok_impl.c"
        var $9=$n; //@line 309 "xmltok_impl.c"
        var $10=($9) & 1; //@line 309 "xmltok_impl.c"
        var $11=((($10)) & 255); //@line 309 "xmltok_impl.c"
        var $toBool=($11)!=0; //@line 309 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 309 "xmltok_impl.c"
      case 3: // $bb2
        var $12=$n; //@line 310 "xmltok_impl.c"
        var $13=($12) & -2; //@line 310 "xmltok_impl.c"
        $n=$13; //@line 310 "xmltok_impl.c"
        var $14=$n; //@line 311 "xmltok_impl.c"
        var $15=($14)==0; //@line 311 "xmltok_impl.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 311 "xmltok_impl.c"
      case 4: // $bb3
        $0=-1; //@line 312 "xmltok_impl.c"
        __label__ = 57; break; //@line 312 "xmltok_impl.c"
      case 5: // $bb4
        var $16=$ptr_addr; //@line 313 "xmltok_impl.c"
        var $17=$n; //@line 313 "xmltok_impl.c"
        var $18=$16+$17; //@line 313 "xmltok_impl.c"
        $end_addr=$18; //@line 313 "xmltok_impl.c"
        __label__ = 6; break; //@line 313 "xmltok_impl.c"
      case 6: // $bb5
        var $19=$ptr_addr; //@line 316 "xmltok_impl.c"
        var $20=$19+1; //@line 316 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 316 "xmltok_impl.c"
        var $22=($21)==0; //@line 316 "xmltok_impl.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 316 "xmltok_impl.c"
      case 7: // $bb6
        var $23=$enc_addr; //@line 316 "xmltok_impl.c"
        var $24=$23; //@line 316 "xmltok_impl.c"
        var $25=$ptr_addr; //@line 316 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 316 "xmltok_impl.c"
        var $27=($26); //@line 316 "xmltok_impl.c"
        var $28=$24+76; //@line 316 "xmltok_impl.c"
        var $29=$28+$27; //@line 316 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 316 "xmltok_impl.c"
        var $31=($30); //@line 316 "xmltok_impl.c"
        $iftmp_563=$31; //@line 316 "xmltok_impl.c"
        __lastLabel__ = 7; __label__ = 9; break; //@line 316 "xmltok_impl.c"
      case 8: // $bb7
        var $32=$ptr_addr; //@line 316 "xmltok_impl.c"
        var $33=$32; //@line 316 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 316 "xmltok_impl.c"
        var $35=($34); //@line 316 "xmltok_impl.c"
        var $36=$ptr_addr; //@line 316 "xmltok_impl.c"
        var $37=$36+1; //@line 316 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 316 "xmltok_impl.c"
        var $39=($38); //@line 316 "xmltok_impl.c"
        var $40=((($39)) & 255); //@line 316 "xmltok_impl.c"
        var $41=((($35)) & 255); //@line 316 "xmltok_impl.c"
        var $42=_unicode_byte_type($40, $41); //@line 316 "xmltok_impl.c"
        $iftmp_563=$42; //@line 316 "xmltok_impl.c"
        __lastLabel__ = 8; __label__ = 9; break; //@line 316 "xmltok_impl.c"
      case 9: // $bb8
        var $43=__lastLabel__ == 8 ? $42 : ($31);
        if ($43 == 0) {
          __label__ = 38; break;
        }
        else if ($43 == 1) {
          __label__ = 38; break;
        }
        else if ($43 == 4) {
          __label__ = 10; break;
        }
        else if ($43 == 5) {
          __label__ = 29; break;
        }
        else if ($43 == 6) {
          __label__ = 32; break;
        }
        else if ($43 == 7) {
          __label__ = 35; break;
        }
        else if ($43 == 8) {
          __label__ = 38; break;
        }
        else if ($43 == 9) {
          __label__ = 20; break;
        }
        else if ($43 == 10) {
          __label__ = 28; break;
        }
        else {
        __label__ = 39; break;
        }
        
      case 10: // $bb9
        var $44=$ptr_addr; //@line 318 "xmltok_impl.c"
        var $45=$44+2; //@line 318 "xmltok_impl.c"
        $ptr_addr=$45; //@line 318 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 319 "xmltok_impl.c"
        var $47=$end_addr; //@line 319 "xmltok_impl.c"
        var $48=($46)==($47); //@line 319 "xmltok_impl.c"
        if ($48) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 319 "xmltok_impl.c"
      case 11: // $bb10
        $0=-1; //@line 320 "xmltok_impl.c"
        __label__ = 57; break; //@line 320 "xmltok_impl.c"
      case 12: // $bb11
        var $49=$ptr_addr; //@line 321 "xmltok_impl.c"
        var $50=$49+1; //@line 321 "xmltok_impl.c"
        var $51=HEAP[$50]; //@line 321 "xmltok_impl.c"
        var $52=($51)!=0; //@line 321 "xmltok_impl.c"
        if ($52) { __label__ = 55; break; } else { __label__ = 13; break; } //@line 321 "xmltok_impl.c"
      case 13: // $bb12
        var $53=$ptr_addr; //@line 321 "xmltok_impl.c"
        var $54=$53; //@line 321 "xmltok_impl.c"
        var $55=HEAP[$54]; //@line 321 "xmltok_impl.c"
        var $56=($55)!=93; //@line 321 "xmltok_impl.c"
        if ($56) { __label__ = 55; break; } else { __label__ = 14; break; } //@line 321 "xmltok_impl.c"
      case 14: // $bb13
        var $57=$ptr_addr; //@line 323 "xmltok_impl.c"
        var $58=$57+2; //@line 323 "xmltok_impl.c"
        $ptr_addr=$58; //@line 323 "xmltok_impl.c"
        var $59=$ptr_addr; //@line 324 "xmltok_impl.c"
        var $60=$end_addr; //@line 324 "xmltok_impl.c"
        var $61=($59)==($60); //@line 324 "xmltok_impl.c"
        if ($61) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 324 "xmltok_impl.c"
      case 15: // $bb14
        $0=-1; //@line 325 "xmltok_impl.c"
        __label__ = 57; break; //@line 325 "xmltok_impl.c"
      case 16: // $bb15
        var $62=$ptr_addr; //@line 326 "xmltok_impl.c"
        var $63=$62+1; //@line 326 "xmltok_impl.c"
        var $64=HEAP[$63]; //@line 326 "xmltok_impl.c"
        var $65=($64)!=0; //@line 326 "xmltok_impl.c"
        if ($65) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 326 "xmltok_impl.c"
      case 17: // $bb16
        var $66=$ptr_addr; //@line 326 "xmltok_impl.c"
        var $67=$66; //@line 326 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 326 "xmltok_impl.c"
        var $69=($68)!=62; //@line 326 "xmltok_impl.c"
        if ($69) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 326 "xmltok_impl.c"
      case 18: // $bb17
        var $70=$ptr_addr; //@line 327 "xmltok_impl.c"
        var $71=$70+-2; //@line 327 "xmltok_impl.c"
        $ptr_addr=$71; //@line 327 "xmltok_impl.c"
        __label__ = 55; break; //@line 327 "xmltok_impl.c"
      case 19: // $bb18
        var $72=$ptr_addr; //@line 330 "xmltok_impl.c"
        var $73=$72+2; //@line 330 "xmltok_impl.c"
        var $74=$nextTokPtr_addr; //@line 330 "xmltok_impl.c"
        HEAP[$74]=$73; //@line 330 "xmltok_impl.c"
        $0=40; //@line 331 "xmltok_impl.c"
        __label__ = 57; break; //@line 331 "xmltok_impl.c"
      case 20: // $bb19
        var $75=$ptr_addr; //@line 333 "xmltok_impl.c"
        var $76=$75+2; //@line 333 "xmltok_impl.c"
        $ptr_addr=$76; //@line 333 "xmltok_impl.c"
        var $77=$ptr_addr; //@line 334 "xmltok_impl.c"
        var $78=$end_addr; //@line 334 "xmltok_impl.c"
        var $79=($77)==($78); //@line 334 "xmltok_impl.c"
        if ($79) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 334 "xmltok_impl.c"
      case 21: // $bb20
        $0=-1; //@line 335 "xmltok_impl.c"
        __label__ = 57; break; //@line 335 "xmltok_impl.c"
      case 22: // $bb21
        var $80=$ptr_addr; //@line 336 "xmltok_impl.c"
        var $81=$80+1; //@line 336 "xmltok_impl.c"
        var $82=HEAP[$81]; //@line 336 "xmltok_impl.c"
        var $83=($82)==0; //@line 336 "xmltok_impl.c"
        if ($83) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 336 "xmltok_impl.c"
      case 23: // $bb22
        var $84=$enc_addr; //@line 336 "xmltok_impl.c"
        var $85=$84; //@line 336 "xmltok_impl.c"
        var $86=$ptr_addr; //@line 336 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 336 "xmltok_impl.c"
        var $88=($87); //@line 336 "xmltok_impl.c"
        var $89=$85+76; //@line 336 "xmltok_impl.c"
        var $90=$89+$88; //@line 336 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 336 "xmltok_impl.c"
        var $92=($91)==10; //@line 336 "xmltok_impl.c"
        var $93=($92); //@line 336 "xmltok_impl.c"
        $iftmp_565=$93; //@line 336 "xmltok_impl.c"
        __lastLabel__ = 23; __label__ = 25; break; //@line 336 "xmltok_impl.c"
      case 24: // $bb23
        var $94=$ptr_addr; //@line 336 "xmltok_impl.c"
        var $95=$94; //@line 336 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 336 "xmltok_impl.c"
        var $97=($96); //@line 336 "xmltok_impl.c"
        var $98=$ptr_addr; //@line 336 "xmltok_impl.c"
        var $99=$98+1; //@line 336 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 336 "xmltok_impl.c"
        var $101=($100); //@line 336 "xmltok_impl.c"
        var $102=((($101)) & 255); //@line 336 "xmltok_impl.c"
        var $103=((($97)) & 255); //@line 336 "xmltok_impl.c"
        var $104=_unicode_byte_type($102, $103); //@line 336 "xmltok_impl.c"
        var $105=($104)==10; //@line 336 "xmltok_impl.c"
        var $106=($105); //@line 336 "xmltok_impl.c"
        $iftmp_565=$106; //@line 336 "xmltok_impl.c"
        __lastLabel__ = 24; __label__ = 25; break; //@line 336 "xmltok_impl.c"
      case 25: // $bb24
        var $107=__lastLabel__ == 24 ? $106 : ($93);
        var $toBool25=($107)!=0; //@line 336 "xmltok_impl.c"
        if ($toBool25) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 336 "xmltok_impl.c"
      case 26: // $bb26
        var $108=$ptr_addr; //@line 337 "xmltok_impl.c"
        var $109=$108+2; //@line 337 "xmltok_impl.c"
        $ptr_addr=$109; //@line 337 "xmltok_impl.c"
        __label__ = 27; break; //@line 337 "xmltok_impl.c"
      case 27: // $bb27
        var $110=$nextTokPtr_addr; //@line 338 "xmltok_impl.c"
        var $111=$ptr_addr; //@line 338 "xmltok_impl.c"
        HEAP[$110]=$111; //@line 338 "xmltok_impl.c"
        $0=7; //@line 339 "xmltok_impl.c"
        __label__ = 57; break; //@line 339 "xmltok_impl.c"
      case 28: // $bb28
        var $112=$ptr_addr; //@line 341 "xmltok_impl.c"
        var $113=$112+2; //@line 341 "xmltok_impl.c"
        var $114=$nextTokPtr_addr; //@line 341 "xmltok_impl.c"
        HEAP[$114]=$113; //@line 341 "xmltok_impl.c"
        $0=7; //@line 342 "xmltok_impl.c"
        __label__ = 57; break; //@line 342 "xmltok_impl.c"
      case 29: // $bb29
        var $115=$end_addr; //@line 343 "xmltok_impl.c"
        var $116=($115); //@line 343 "xmltok_impl.c"
        var $117=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $118=($117); //@line 343 "xmltok_impl.c"
        var $119=($116) - ($118); //@line 343 "xmltok_impl.c"
        var $120=($119) <= 1; //@line 343 "xmltok_impl.c"
        if ($120) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 343 "xmltok_impl.c"
      case 30: // $bb30
        $0=-2; //@line 343 "xmltok_impl.c"
        __label__ = 57; break; //@line 343 "xmltok_impl.c"
      case 31: // $bb31
        var $121=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $122=$121+2; //@line 343 "xmltok_impl.c"
        $ptr_addr=$122; //@line 343 "xmltok_impl.c"
        __label__ = 55; break; //@line 343 "xmltok_impl.c"
      case 32: // $bb32
        var $123=$end_addr; //@line 343 "xmltok_impl.c"
        var $124=($123); //@line 343 "xmltok_impl.c"
        var $125=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $126=($125); //@line 343 "xmltok_impl.c"
        var $127=($124) - ($126); //@line 343 "xmltok_impl.c"
        var $128=($127) <= 2; //@line 343 "xmltok_impl.c"
        if ($128) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 343 "xmltok_impl.c"
      case 33: // $bb33
        $0=-2; //@line 343 "xmltok_impl.c"
        __label__ = 57; break; //@line 343 "xmltok_impl.c"
      case 34: // $bb34
        var $129=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $130=$129+3; //@line 343 "xmltok_impl.c"
        $ptr_addr=$130; //@line 343 "xmltok_impl.c"
        __label__ = 55; break; //@line 343 "xmltok_impl.c"
      case 35: // $bb35
        var $131=$end_addr; //@line 343 "xmltok_impl.c"
        var $132=($131); //@line 343 "xmltok_impl.c"
        var $133=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $134=($133); //@line 343 "xmltok_impl.c"
        var $135=($132) - ($134); //@line 343 "xmltok_impl.c"
        var $136=($135) <= 3; //@line 343 "xmltok_impl.c"
        if ($136) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 343 "xmltok_impl.c"
      case 36: // $bb36
        $0=-2; //@line 343 "xmltok_impl.c"
        __label__ = 57; break; //@line 343 "xmltok_impl.c"
      case 37: // $bb37
        var $137=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $138=$137+4; //@line 343 "xmltok_impl.c"
        $ptr_addr=$138; //@line 343 "xmltok_impl.c"
        __label__ = 55; break; //@line 343 "xmltok_impl.c"
      case 38: // $bb38
        var $139=$nextTokPtr_addr; //@line 343 "xmltok_impl.c"
        var $140=$ptr_addr; //@line 343 "xmltok_impl.c"
        HEAP[$139]=$140; //@line 343 "xmltok_impl.c"
        $0=0; //@line 343 "xmltok_impl.c"
        __label__ = 57; break; //@line 343 "xmltok_impl.c"
      case 39: // $bb39
        var $141=$ptr_addr; //@line 345 "xmltok_impl.c"
        var $142=$141+2; //@line 345 "xmltok_impl.c"
        $ptr_addr=$142; //@line 345 "xmltok_impl.c"
        __label__ = 55; break; //@line 345 "xmltok_impl.c"
      case 40: // $bb41
        var $143=$ptr_addr; //@line 349 "xmltok_impl.c"
        var $144=$143+1; //@line 349 "xmltok_impl.c"
        var $145=HEAP[$144]; //@line 349 "xmltok_impl.c"
        var $146=($145)==0; //@line 349 "xmltok_impl.c"
        if ($146) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 349 "xmltok_impl.c"
      case 41: // $bb42
        var $147=$enc_addr; //@line 349 "xmltok_impl.c"
        var $148=$147; //@line 349 "xmltok_impl.c"
        var $149=$ptr_addr; //@line 349 "xmltok_impl.c"
        var $150=HEAP[$149]; //@line 349 "xmltok_impl.c"
        var $151=($150); //@line 349 "xmltok_impl.c"
        var $152=$148+76; //@line 349 "xmltok_impl.c"
        var $153=$152+$151; //@line 349 "xmltok_impl.c"
        var $154=HEAP[$153]; //@line 349 "xmltok_impl.c"
        var $155=($154); //@line 349 "xmltok_impl.c"
        $iftmp_573=$155; //@line 349 "xmltok_impl.c"
        __lastLabel__ = 41; __label__ = 43; break; //@line 349 "xmltok_impl.c"
      case 42: // $bb43
        var $156=$ptr_addr; //@line 349 "xmltok_impl.c"
        var $157=$156; //@line 349 "xmltok_impl.c"
        var $158=HEAP[$157]; //@line 349 "xmltok_impl.c"
        var $159=($158); //@line 349 "xmltok_impl.c"
        var $160=$ptr_addr; //@line 349 "xmltok_impl.c"
        var $161=$160+1; //@line 349 "xmltok_impl.c"
        var $162=HEAP[$161]; //@line 349 "xmltok_impl.c"
        var $163=($162); //@line 349 "xmltok_impl.c"
        var $164=((($163)) & 255); //@line 349 "xmltok_impl.c"
        var $165=((($159)) & 255); //@line 349 "xmltok_impl.c"
        var $166=_unicode_byte_type($164, $165); //@line 349 "xmltok_impl.c"
        $iftmp_573=$166; //@line 349 "xmltok_impl.c"
        __lastLabel__ = 42; __label__ = 43; break; //@line 349 "xmltok_impl.c"
      case 43: // $bb44
        var $167=__lastLabel__ == 42 ? $166 : ($155);
        if ($167 == 0) {
          __label__ = 53; break;
        }
        else if ($167 == 1) {
          __label__ = 53; break;
        }
        else if ($167 == 4) {
          __label__ = 53; break;
        }
        else if ($167 == 5) {
          __label__ = 44; break;
        }
        else if ($167 == 6) {
          __label__ = 47; break;
        }
        else if ($167 == 7) {
          __label__ = 50; break;
        }
        else if ($167 == 8) {
          __label__ = 53; break;
        }
        else if ($167 == 9) {
          __label__ = 53; break;
        }
        else if ($167 == 10) {
          __label__ = 53; break;
        }
        else {
        __label__ = 54; break;
        }
        
      case 44: // $bb45
        var $168=$end_addr; //@line 358 "xmltok_impl.c"
        var $169=($168); //@line 358 "xmltok_impl.c"
        var $170=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $171=($170); //@line 358 "xmltok_impl.c"
        var $172=($169) - ($171); //@line 358 "xmltok_impl.c"
        var $173=($172) <= 1; //@line 358 "xmltok_impl.c"
        if ($173) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 358 "xmltok_impl.c"
      case 45: // $bb46
        var $174=$nextTokPtr_addr; //@line 358 "xmltok_impl.c"
        var $175=$ptr_addr; //@line 358 "xmltok_impl.c"
        HEAP[$174]=$175; //@line 358 "xmltok_impl.c"
        $0=6; //@line 358 "xmltok_impl.c"
        __label__ = 57; break; //@line 358 "xmltok_impl.c"
      case 46: // $bb47
        var $176=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $177=$176+2; //@line 358 "xmltok_impl.c"
        $ptr_addr=$177; //@line 358 "xmltok_impl.c"
        __label__ = 55; break; //@line 358 "xmltok_impl.c"
      case 47: // $bb48
        var $178=$end_addr; //@line 358 "xmltok_impl.c"
        var $179=($178); //@line 358 "xmltok_impl.c"
        var $180=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $181=($180); //@line 358 "xmltok_impl.c"
        var $182=($179) - ($181); //@line 358 "xmltok_impl.c"
        var $183=($182) <= 2; //@line 358 "xmltok_impl.c"
        if ($183) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 358 "xmltok_impl.c"
      case 48: // $bb49
        var $184=$nextTokPtr_addr; //@line 358 "xmltok_impl.c"
        var $185=$ptr_addr; //@line 358 "xmltok_impl.c"
        HEAP[$184]=$185; //@line 358 "xmltok_impl.c"
        $0=6; //@line 358 "xmltok_impl.c"
        __label__ = 57; break; //@line 358 "xmltok_impl.c"
      case 49: // $bb50
        var $186=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $187=$186+3; //@line 358 "xmltok_impl.c"
        $ptr_addr=$187; //@line 358 "xmltok_impl.c"
        __label__ = 55; break; //@line 358 "xmltok_impl.c"
      case 50: // $bb51
        var $188=$end_addr; //@line 358 "xmltok_impl.c"
        var $189=($188); //@line 358 "xmltok_impl.c"
        var $190=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $191=($190); //@line 358 "xmltok_impl.c"
        var $192=($189) - ($191); //@line 358 "xmltok_impl.c"
        var $193=($192) <= 3; //@line 358 "xmltok_impl.c"
        if ($193) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 358 "xmltok_impl.c"
      case 51: // $bb52
        var $194=$nextTokPtr_addr; //@line 358 "xmltok_impl.c"
        var $195=$ptr_addr; //@line 358 "xmltok_impl.c"
        HEAP[$194]=$195; //@line 358 "xmltok_impl.c"
        $0=6; //@line 358 "xmltok_impl.c"
        __label__ = 57; break; //@line 358 "xmltok_impl.c"
      case 52: // $bb53
        var $196=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $197=$196+4; //@line 358 "xmltok_impl.c"
        $ptr_addr=$197; //@line 358 "xmltok_impl.c"
        __label__ = 55; break; //@line 358 "xmltok_impl.c"
      case 53: // $bb54
        var $198=$nextTokPtr_addr; //@line 366 "xmltok_impl.c"
        var $199=$ptr_addr; //@line 366 "xmltok_impl.c"
        HEAP[$198]=$199; //@line 366 "xmltok_impl.c"
        $0=6; //@line 367 "xmltok_impl.c"
        __label__ = 57; break; //@line 367 "xmltok_impl.c"
      case 54: // $bb55
        var $200=$ptr_addr; //@line 369 "xmltok_impl.c"
        var $201=$200+2; //@line 369 "xmltok_impl.c"
        $ptr_addr=$201; //@line 369 "xmltok_impl.c"
        __label__ = 55; break; //@line 369 "xmltok_impl.c"
      case 55: // $bb56
        var $202=$ptr_addr; //@line 348 "xmltok_impl.c"
        var $203=$end_addr; //@line 348 "xmltok_impl.c"
        var $204=($202)!=($203); //@line 348 "xmltok_impl.c"
        if ($204) { __label__ = 40; break; } else { __label__ = 56; break; } //@line 348 "xmltok_impl.c"
      case 56: // $bb57
        var $205=$nextTokPtr_addr; //@line 373 "xmltok_impl.c"
        var $206=$ptr_addr; //@line 373 "xmltok_impl.c"
        HEAP[$205]=$206; //@line 373 "xmltok_impl.c"
        $0=6; //@line 374 "xmltok_impl.c"
        __label__ = 57; break; //@line 374 "xmltok_impl.c"
      case 57: // $bb58
        var $207=$0; //@line 306 "xmltok_impl.c"
        $retval=$207; //@line 306 "xmltok_impl.c"
        var $retval59=$retval; //@line 306 "xmltok_impl.c"
        ;
        return $retval59; //@line 306 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanEndTag($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_597;
        var $iftmp_589;
        var $iftmp_581;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 383 "xmltok_impl.c"
        var $2=$end_addr; //@line 383 "xmltok_impl.c"
        var $3=($1)==($2); //@line 383 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 383 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 384 "xmltok_impl.c"
        __label__ = 50; break; //@line 384 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 385 "xmltok_impl.c"
        var $5=$4+1; //@line 385 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 385 "xmltok_impl.c"
        var $7=($6)==0; //@line 385 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 385 "xmltok_impl.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 385 "xmltok_impl.c"
        var $9=$8; //@line 385 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 385 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 385 "xmltok_impl.c"
        var $12=($11); //@line 385 "xmltok_impl.c"
        var $13=$9+76; //@line 385 "xmltok_impl.c"
        var $14=$13+$12; //@line 385 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 385 "xmltok_impl.c"
        var $16=($15); //@line 385 "xmltok_impl.c"
        $iftmp_581=$16; //@line 385 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 385 "xmltok_impl.c"
      case 4: // $bb3
        var $17=$ptr_addr; //@line 385 "xmltok_impl.c"
        var $18=$17; //@line 385 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 385 "xmltok_impl.c"
        var $20=($19); //@line 385 "xmltok_impl.c"
        var $21=$ptr_addr; //@line 385 "xmltok_impl.c"
        var $22=$21+1; //@line 385 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 385 "xmltok_impl.c"
        var $24=($23); //@line 385 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 385 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 385 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 385 "xmltok_impl.c"
        $iftmp_581=$27; //@line 385 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 385 "xmltok_impl.c"
      case 5: // $bb4
        var $28=__lastLabel__ == 4 ? $27 : ($16);
        if ($28 == 5) {
          __label__ = 9; break;
        }
        else if ($28 == 6) {
          __label__ = 12; break;
        }
        else if ($28 == 7) {
          __label__ = 15; break;
        }
        else if ($28 == 22) {
          __label__ = 8; break;
        }
        else if ($28 == 24) {
          __label__ = 8; break;
        }
        else if ($28 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 6: // $bb5
        var $29=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $30=$29+1; //@line 386 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 386 "xmltok_impl.c"
        var $32=($31); //@line 386 "xmltok_impl.c"
        var $33=_nmstrtPages+$32; //@line 386 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 386 "xmltok_impl.c"
        var $35=($34); //@line 386 "xmltok_impl.c"
        var $36=($35) * 8;
        var $37=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $38=$37; //@line 386 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 386 "xmltok_impl.c"
        var $40=($39) >>> 5; //@line 386 "xmltok_impl.c"
        var $41=($40); //@line 386 "xmltok_impl.c"
        var $42=($41) + ($36); //@line 386 "xmltok_impl.c"
        var $43=_namingBitmap+$42*4; //@line 386 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 386 "xmltok_impl.c"
        var $45=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $46=$45; //@line 386 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 386 "xmltok_impl.c"
        var $48=($47); //@line 386 "xmltok_impl.c"
        var $49=($48) & 31; //@line 386 "xmltok_impl.c"
        var $50=1 << ($49); //@line 386 "xmltok_impl.c"
        var $51=($50) & ($44); //@line 386 "xmltok_impl.c"
        var $52=($51)==0; //@line 386 "xmltok_impl.c"
        if ($52) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 386 "xmltok_impl.c"
      case 7: // $bb6
        var $53=$nextTokPtr_addr; //@line 386 "xmltok_impl.c"
        var $54=$ptr_addr; //@line 386 "xmltok_impl.c"
        HEAP[$53]=$54; //@line 386 "xmltok_impl.c"
        $0=0; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 8: // $bb7
        var $55=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $56=$55+2; //@line 386 "xmltok_impl.c"
        $ptr_addr=$56; //@line 386 "xmltok_impl.c"
        __label__ = 48; break; //@line 386 "xmltok_impl.c"
      case 9: // $bb8
        var $57=$end_addr; //@line 386 "xmltok_impl.c"
        var $58=($57); //@line 386 "xmltok_impl.c"
        var $59=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $60=($59); //@line 386 "xmltok_impl.c"
        var $61=($58) - ($60); //@line 386 "xmltok_impl.c"
        var $62=($61) <= 1; //@line 386 "xmltok_impl.c"
        if ($62) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 386 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 11: // $bb10
        var $63=$nextTokPtr_addr; //@line 386 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 386 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 386 "xmltok_impl.c"
        $0=0; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 12: // $bb11
        var $65=$end_addr; //@line 386 "xmltok_impl.c"
        var $66=($65); //@line 386 "xmltok_impl.c"
        var $67=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $68=($67); //@line 386 "xmltok_impl.c"
        var $69=($66) - ($68); //@line 386 "xmltok_impl.c"
        var $70=($69) <= 2; //@line 386 "xmltok_impl.c"
        if ($70) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 386 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 14: // $bb13
        var $71=$nextTokPtr_addr; //@line 386 "xmltok_impl.c"
        var $72=$ptr_addr; //@line 386 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 386 "xmltok_impl.c"
        $0=0; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 15: // $bb14
        var $73=$end_addr; //@line 386 "xmltok_impl.c"
        var $74=($73); //@line 386 "xmltok_impl.c"
        var $75=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $76=($75); //@line 386 "xmltok_impl.c"
        var $77=($74) - ($76); //@line 386 "xmltok_impl.c"
        var $78=($77) <= 3; //@line 386 "xmltok_impl.c"
        if ($78) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 386 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 17: // $bb16
        var $79=$nextTokPtr_addr; //@line 386 "xmltok_impl.c"
        var $80=$ptr_addr; //@line 386 "xmltok_impl.c"
        HEAP[$79]=$80; //@line 386 "xmltok_impl.c"
        $0=0; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 18: // $bb17
        var $81=$nextTokPtr_addr; //@line 388 "xmltok_impl.c"
        var $82=$ptr_addr; //@line 388 "xmltok_impl.c"
        HEAP[$81]=$82; //@line 388 "xmltok_impl.c"
        $0=0; //@line 389 "xmltok_impl.c"
        __label__ = 50; break; //@line 389 "xmltok_impl.c"
      case 19: // $bb18
        var $83=$ptr_addr; //@line 392 "xmltok_impl.c"
        var $84=$83+1; //@line 392 "xmltok_impl.c"
        var $85=HEAP[$84]; //@line 392 "xmltok_impl.c"
        var $86=($85)==0; //@line 392 "xmltok_impl.c"
        if ($86) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 392 "xmltok_impl.c"
      case 20: // $bb19
        var $87=$enc_addr; //@line 392 "xmltok_impl.c"
        var $88=$87; //@line 392 "xmltok_impl.c"
        var $89=$ptr_addr; //@line 392 "xmltok_impl.c"
        var $90=HEAP[$89]; //@line 392 "xmltok_impl.c"
        var $91=($90); //@line 392 "xmltok_impl.c"
        var $92=$88+76; //@line 392 "xmltok_impl.c"
        var $93=$92+$91; //@line 392 "xmltok_impl.c"
        var $94=HEAP[$93]; //@line 392 "xmltok_impl.c"
        var $95=($94); //@line 392 "xmltok_impl.c"
        $iftmp_589=$95; //@line 392 "xmltok_impl.c"
        __lastLabel__ = 20; __label__ = 22; break; //@line 392 "xmltok_impl.c"
      case 21: // $bb20
        var $96=$ptr_addr; //@line 392 "xmltok_impl.c"
        var $97=$96; //@line 392 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 392 "xmltok_impl.c"
        var $99=($98); //@line 392 "xmltok_impl.c"
        var $100=$ptr_addr; //@line 392 "xmltok_impl.c"
        var $101=$100+1; //@line 392 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 392 "xmltok_impl.c"
        var $103=($102); //@line 392 "xmltok_impl.c"
        var $104=((($103)) & 255); //@line 392 "xmltok_impl.c"
        var $105=((($99)) & 255); //@line 392 "xmltok_impl.c"
        var $106=_unicode_byte_type($104, $105); //@line 392 "xmltok_impl.c"
        $iftmp_589=$106; //@line 392 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 22; break; //@line 392 "xmltok_impl.c"
      case 22: // $bb21
        var $107=__lastLabel__ == 21 ? $106 : ($95);
        if ($107 == 5) {
          __label__ = 26; break;
        }
        else if ($107 == 6) {
          __label__ = 29; break;
        }
        else if ($107 == 7) {
          __label__ = 32; break;
        }
        else if ($107 == 9) {
          __label__ = 35; break;
        }
        else if ($107 == 10) {
          __label__ = 35; break;
        }
        else if ($107 == 11) {
          __label__ = 46; break;
        }
        else if ($107 == 21) {
          __label__ = 35; break;
        }
        else if ($107 == 22) {
          __label__ = 25; break;
        }
        else if ($107 == 23) {
          __label__ = 45; break;
        }
        else if ($107 == 24) {
          __label__ = 25; break;
        }
        else if ($107 == 25) {
          __label__ = 25; break;
        }
        else if ($107 == 26) {
          __label__ = 25; break;
        }
        else if ($107 == 27) {
          __label__ = 25; break;
        }
        else if ($107 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 47; break;
        }
        
      case 23: // $bb22
        var $108=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $109=$108+1; //@line 393 "xmltok_impl.c"
        var $110=HEAP[$109]; //@line 393 "xmltok_impl.c"
        var $111=($110); //@line 393 "xmltok_impl.c"
        var $112=_namePages+$111; //@line 393 "xmltok_impl.c"
        var $113=HEAP[$112]; //@line 393 "xmltok_impl.c"
        var $114=($113); //@line 393 "xmltok_impl.c"
        var $115=($114) * 8;
        var $116=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $117=$116; //@line 393 "xmltok_impl.c"
        var $118=HEAP[$117]; //@line 393 "xmltok_impl.c"
        var $119=($118) >>> 5; //@line 393 "xmltok_impl.c"
        var $120=($119); //@line 393 "xmltok_impl.c"
        var $121=($120) + ($115); //@line 393 "xmltok_impl.c"
        var $122=_namingBitmap+$121*4; //@line 393 "xmltok_impl.c"
        var $123=HEAP[$122]; //@line 393 "xmltok_impl.c"
        var $124=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $125=$124; //@line 393 "xmltok_impl.c"
        var $126=HEAP[$125]; //@line 393 "xmltok_impl.c"
        var $127=($126); //@line 393 "xmltok_impl.c"
        var $128=($127) & 31; //@line 393 "xmltok_impl.c"
        var $129=1 << ($128); //@line 393 "xmltok_impl.c"
        var $130=($129) & ($123); //@line 393 "xmltok_impl.c"
        var $131=($130)==0; //@line 393 "xmltok_impl.c"
        if ($131) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 393 "xmltok_impl.c"
      case 24: // $bb23
        var $132=$nextTokPtr_addr; //@line 393 "xmltok_impl.c"
        var $133=$ptr_addr; //@line 393 "xmltok_impl.c"
        HEAP[$132]=$133; //@line 393 "xmltok_impl.c"
        $0=0; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 25: // $bb24
        var $134=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $135=$134+2; //@line 393 "xmltok_impl.c"
        $ptr_addr=$135; //@line 393 "xmltok_impl.c"
        __label__ = 48; break; //@line 393 "xmltok_impl.c"
      case 26: // $bb25
        var $136=$end_addr; //@line 393 "xmltok_impl.c"
        var $137=($136); //@line 393 "xmltok_impl.c"
        var $138=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $139=($138); //@line 393 "xmltok_impl.c"
        var $140=($137) - ($139); //@line 393 "xmltok_impl.c"
        var $141=($140) <= 1; //@line 393 "xmltok_impl.c"
        if ($141) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 393 "xmltok_impl.c"
      case 27: // $bb26
        $0=-2; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 28: // $bb27
        var $142=$nextTokPtr_addr; //@line 393 "xmltok_impl.c"
        var $143=$ptr_addr; //@line 393 "xmltok_impl.c"
        HEAP[$142]=$143; //@line 393 "xmltok_impl.c"
        $0=0; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 29: // $bb28
        var $144=$end_addr; //@line 393 "xmltok_impl.c"
        var $145=($144); //@line 393 "xmltok_impl.c"
        var $146=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $147=($146); //@line 393 "xmltok_impl.c"
        var $148=($145) - ($147); //@line 393 "xmltok_impl.c"
        var $149=($148) <= 2; //@line 393 "xmltok_impl.c"
        if ($149) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 393 "xmltok_impl.c"
      case 30: // $bb29
        $0=-2; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 31: // $bb30
        var $150=$nextTokPtr_addr; //@line 393 "xmltok_impl.c"
        var $151=$ptr_addr; //@line 393 "xmltok_impl.c"
        HEAP[$150]=$151; //@line 393 "xmltok_impl.c"
        $0=0; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 32: // $bb31
        var $152=$end_addr; //@line 393 "xmltok_impl.c"
        var $153=($152); //@line 393 "xmltok_impl.c"
        var $154=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $155=($154); //@line 393 "xmltok_impl.c"
        var $156=($153) - ($155); //@line 393 "xmltok_impl.c"
        var $157=($156) <= 3; //@line 393 "xmltok_impl.c"
        if ($157) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 393 "xmltok_impl.c"
      case 33: // $bb32
        $0=-2; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 34: // $bb33
        var $158=$nextTokPtr_addr; //@line 393 "xmltok_impl.c"
        var $159=$ptr_addr; //@line 393 "xmltok_impl.c"
        HEAP[$158]=$159; //@line 393 "xmltok_impl.c"
        $0=0; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 35: // $bb34
        var $160=$ptr_addr; //@line 395 "xmltok_impl.c"
        var $161=$160+2; //@line 395 "xmltok_impl.c"
        $ptr_addr=$161; //@line 395 "xmltok_impl.c"
        __label__ = 43; break; //@line 395 "xmltok_impl.c"
      case 36: // $bb35
        var $162=$ptr_addr; //@line 396 "xmltok_impl.c"
        var $163=$162+1; //@line 396 "xmltok_impl.c"
        var $164=HEAP[$163]; //@line 396 "xmltok_impl.c"
        var $165=($164)==0; //@line 396 "xmltok_impl.c"
        if ($165) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 396 "xmltok_impl.c"
      case 37: // $bb36
        var $166=$enc_addr; //@line 396 "xmltok_impl.c"
        var $167=$166; //@line 396 "xmltok_impl.c"
        var $168=$ptr_addr; //@line 396 "xmltok_impl.c"
        var $169=HEAP[$168]; //@line 396 "xmltok_impl.c"
        var $170=($169); //@line 396 "xmltok_impl.c"
        var $171=$167+76; //@line 396 "xmltok_impl.c"
        var $172=$171+$170; //@line 396 "xmltok_impl.c"
        var $173=HEAP[$172]; //@line 396 "xmltok_impl.c"
        var $174=($173); //@line 396 "xmltok_impl.c"
        $iftmp_597=$174; //@line 396 "xmltok_impl.c"
        __lastLabel__ = 37; __label__ = 39; break; //@line 396 "xmltok_impl.c"
      case 38: // $bb37
        var $175=$ptr_addr; //@line 396 "xmltok_impl.c"
        var $176=$175; //@line 396 "xmltok_impl.c"
        var $177=HEAP[$176]; //@line 396 "xmltok_impl.c"
        var $178=($177); //@line 396 "xmltok_impl.c"
        var $179=$ptr_addr; //@line 396 "xmltok_impl.c"
        var $180=$179+1; //@line 396 "xmltok_impl.c"
        var $181=HEAP[$180]; //@line 396 "xmltok_impl.c"
        var $182=($181); //@line 396 "xmltok_impl.c"
        var $183=((($182)) & 255); //@line 396 "xmltok_impl.c"
        var $184=((($178)) & 255); //@line 396 "xmltok_impl.c"
        var $185=_unicode_byte_type($183, $184); //@line 396 "xmltok_impl.c"
        $iftmp_597=$185; //@line 396 "xmltok_impl.c"
        __lastLabel__ = 38; __label__ = 39; break; //@line 396 "xmltok_impl.c"
      case 39: // $bb38
        var $186=__lastLabel__ == 38 ? $185 : ($174);
        if ($186 == 9) {
          __label__ = 40; break;
        }
        else if ($186 == 10) {
          __label__ = 40; break;
        }
        else if ($186 == 11) {
          __label__ = 41; break;
        }
        else if ($186 == 21) {
          __label__ = 40; break;
        }
        else {
        __label__ = 42; break;
        }
        
      case 40: // $bb39
        var $187=$ptr_addr; //@line 395 "xmltok_impl.c"
        var $188=$187+2; //@line 395 "xmltok_impl.c"
        $ptr_addr=$188; //@line 395 "xmltok_impl.c"
        __label__ = 43; break; //@line 395 "xmltok_impl.c"
      case 41: // $bb40
        var $189=$ptr_addr; //@line 400 "xmltok_impl.c"
        var $190=$189+2; //@line 400 "xmltok_impl.c"
        var $191=$nextTokPtr_addr; //@line 400 "xmltok_impl.c"
        HEAP[$191]=$190; //@line 400 "xmltok_impl.c"
        $0=5; //@line 401 "xmltok_impl.c"
        __label__ = 50; break; //@line 401 "xmltok_impl.c"
      case 42: // $bb41
        var $192=$nextTokPtr_addr; //@line 403 "xmltok_impl.c"
        var $193=$ptr_addr; //@line 403 "xmltok_impl.c"
        HEAP[$192]=$193; //@line 403 "xmltok_impl.c"
        $0=0; //@line 404 "xmltok_impl.c"
        __label__ = 50; break; //@line 404 "xmltok_impl.c"
      case 43: // $bb42
        var $194=$ptr_addr; //@line 395 "xmltok_impl.c"
        var $195=$end_addr; //@line 395 "xmltok_impl.c"
        var $196=($194)!=($195); //@line 395 "xmltok_impl.c"
        if ($196) { __label__ = 36; break; } else { __label__ = 44; break; } //@line 395 "xmltok_impl.c"
      case 44: // $bb43
        $0=-1; //@line 407 "xmltok_impl.c"
        __label__ = 50; break; //@line 407 "xmltok_impl.c"
      case 45: // $bb44
        var $197=$ptr_addr; //@line 412 "xmltok_impl.c"
        var $198=$197+2; //@line 412 "xmltok_impl.c"
        $ptr_addr=$198; //@line 412 "xmltok_impl.c"
        __label__ = 48; break; //@line 412 "xmltok_impl.c"
      case 46: // $bb45
        var $199=$ptr_addr; //@line 416 "xmltok_impl.c"
        var $200=$199+2; //@line 416 "xmltok_impl.c"
        var $201=$nextTokPtr_addr; //@line 416 "xmltok_impl.c"
        HEAP[$201]=$200; //@line 416 "xmltok_impl.c"
        $0=5; //@line 417 "xmltok_impl.c"
        __label__ = 50; break; //@line 417 "xmltok_impl.c"
      case 47: // $bb46
        var $202=$nextTokPtr_addr; //@line 419 "xmltok_impl.c"
        var $203=$ptr_addr; //@line 419 "xmltok_impl.c"
        HEAP[$202]=$203; //@line 419 "xmltok_impl.c"
        $0=0; //@line 420 "xmltok_impl.c"
        __label__ = 50; break; //@line 420 "xmltok_impl.c"
      case 48: // $bb47
        var $204=$ptr_addr; //@line 391 "xmltok_impl.c"
        var $205=$end_addr; //@line 391 "xmltok_impl.c"
        var $206=($204)!=($205); //@line 391 "xmltok_impl.c"
        if ($206) { __label__ = 19; break; } else { __label__ = 49; break; } //@line 391 "xmltok_impl.c"
      case 49: // $bb48
        $0=-1; //@line 423 "xmltok_impl.c"
        __label__ = 50; break; //@line 423 "xmltok_impl.c"
      case 50: // $bb49
        var $207=$0; //@line 384 "xmltok_impl.c"
        $retval=$207; //@line 384 "xmltok_impl.c"
        var $retval50=$retval; //@line 384 "xmltok_impl.c"
        ;
        return $retval50; //@line 384 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanHexCharRef($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_601;
        var $0;
        var $iftmp_599;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 432 "xmltok_impl.c"
        var $2=$end_addr; //@line 432 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 432 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 15; break; } //@line 432 "xmltok_impl.c"
      case 1: // $bb
        var $4=$ptr_addr; //@line 433 "xmltok_impl.c"
        var $5=$4+1; //@line 433 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 433 "xmltok_impl.c"
        var $7=($6)==0; //@line 433 "xmltok_impl.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 433 "xmltok_impl.c"
      case 2: // $bb1
        var $8=$enc_addr; //@line 433 "xmltok_impl.c"
        var $9=$8; //@line 433 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 433 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 433 "xmltok_impl.c"
        var $12=($11); //@line 433 "xmltok_impl.c"
        var $13=$9+76; //@line 433 "xmltok_impl.c"
        var $14=$13+$12; //@line 433 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 433 "xmltok_impl.c"
        var $16=($15); //@line 433 "xmltok_impl.c"
        $iftmp_599=$16; //@line 433 "xmltok_impl.c"
        __label__ = 4; break; //@line 433 "xmltok_impl.c"
      case 3: // $bb2
        var $17=$ptr_addr; //@line 433 "xmltok_impl.c"
        var $18=$17; //@line 433 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 433 "xmltok_impl.c"
        var $20=($19); //@line 433 "xmltok_impl.c"
        var $21=$ptr_addr; //@line 433 "xmltok_impl.c"
        var $22=$21+1; //@line 433 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 433 "xmltok_impl.c"
        var $24=($23); //@line 433 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 433 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 433 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 433 "xmltok_impl.c"
        $iftmp_599=$27; //@line 433 "xmltok_impl.c"
        __label__ = 4; break; //@line 433 "xmltok_impl.c"
      case 4: // $bb3
        var $28=$iftmp_599; //@line 433 "xmltok_impl.c"
        var $_off=($28) + -24;
        var $switch=($_off) < 2;
        if ($switch) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $bb4
        var $29=$ptr_addr; //@line 441 "xmltok_impl.c"
        var $30=$29+2; //@line 441 "xmltok_impl.c"
        $ptr_addr=$30; //@line 441 "xmltok_impl.c"
        __label__ = 14; break; //@line 441 "xmltok_impl.c"
      case 6: // $bb5
        var $31=$nextTokPtr_addr; //@line 438 "xmltok_impl.c"
        var $32=$ptr_addr; //@line 438 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 438 "xmltok_impl.c"
        $0=0; //@line 439 "xmltok_impl.c"
        __label__ = 16; break; //@line 439 "xmltok_impl.c"
      case 7: // $bb6
        var $33=$ptr_addr; //@line 442 "xmltok_impl.c"
        var $34=$33+1; //@line 442 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 442 "xmltok_impl.c"
        var $36=($35)==0; //@line 442 "xmltok_impl.c"
        if ($36) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 442 "xmltok_impl.c"
      case 8: // $bb7
        var $37=$enc_addr; //@line 442 "xmltok_impl.c"
        var $38=$37; //@line 442 "xmltok_impl.c"
        var $39=$ptr_addr; //@line 442 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 442 "xmltok_impl.c"
        var $41=($40); //@line 442 "xmltok_impl.c"
        var $42=$38+76; //@line 442 "xmltok_impl.c"
        var $43=$42+$41; //@line 442 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 442 "xmltok_impl.c"
        var $45=($44); //@line 442 "xmltok_impl.c"
        $iftmp_601=$45; //@line 442 "xmltok_impl.c"
        __lastLabel__ = 8; __label__ = 10; break; //@line 442 "xmltok_impl.c"
      case 9: // $bb8
        var $46=$ptr_addr; //@line 442 "xmltok_impl.c"
        var $47=$46; //@line 442 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 442 "xmltok_impl.c"
        var $49=($48); //@line 442 "xmltok_impl.c"
        var $50=$ptr_addr; //@line 442 "xmltok_impl.c"
        var $51=$50+1; //@line 442 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 442 "xmltok_impl.c"
        var $53=($52); //@line 442 "xmltok_impl.c"
        var $54=((($53)) & 255); //@line 442 "xmltok_impl.c"
        var $55=((($49)) & 255); //@line 442 "xmltok_impl.c"
        var $56=_unicode_byte_type($54, $55); //@line 442 "xmltok_impl.c"
        $iftmp_601=$56; //@line 442 "xmltok_impl.c"
        __lastLabel__ = 9; __label__ = 10; break; //@line 442 "xmltok_impl.c"
      case 10: // $bb9
        var $57=__lastLabel__ == 9 ? $56 : ($45);
        if ($57 == 18) {
          __label__ = 12; break;
        }
        else if ($57 == 24) {
          __label__ = 11; break;
        }
        else if ($57 == 25) {
          __label__ = 11; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 11: // $bb10
        var $58=$ptr_addr; //@line 441 "xmltok_impl.c"
        var $59=$58+2; //@line 441 "xmltok_impl.c"
        $ptr_addr=$59; //@line 441 "xmltok_impl.c"
        __label__ = 14; break; //@line 441 "xmltok_impl.c"
      case 12: // $bb11
        var $60=$ptr_addr; //@line 447 "xmltok_impl.c"
        var $61=$60+2; //@line 447 "xmltok_impl.c"
        var $62=$nextTokPtr_addr; //@line 447 "xmltok_impl.c"
        HEAP[$62]=$61; //@line 447 "xmltok_impl.c"
        $0=10; //@line 448 "xmltok_impl.c"
        __label__ = 16; break; //@line 448 "xmltok_impl.c"
      case 13: // $bb12
        var $63=$nextTokPtr_addr; //@line 450 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 450 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 450 "xmltok_impl.c"
        $0=0; //@line 451 "xmltok_impl.c"
        __label__ = 16; break; //@line 451 "xmltok_impl.c"
      case 14: // $bb13
        var $65=$ptr_addr; //@line 441 "xmltok_impl.c"
        var $66=$end_addr; //@line 441 "xmltok_impl.c"
        var $67=($65)!=($66); //@line 441 "xmltok_impl.c"
        if ($67) { __label__ = 7; break; } else { __label__ = 15; break; } //@line 441 "xmltok_impl.c"
      case 15: // $bb14
        $0=-1; //@line 455 "xmltok_impl.c"
        __label__ = 16; break; //@line 455 "xmltok_impl.c"
      case 16: // $bb15
        var $68=$0; //@line 439 "xmltok_impl.c"
        $retval=$68; //@line 439 "xmltok_impl.c"
        var $retval16=$retval; //@line 439 "xmltok_impl.c"
        ;
        return $retval16; //@line 439 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanCharRef($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_605;
        var $iftmp_603;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 464 "xmltok_impl.c"
        var $2=$end_addr; //@line 464 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 464 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 18; break; } //@line 464 "xmltok_impl.c"
      case 1: // $bb
        var $4=$ptr_addr; //@line 465 "xmltok_impl.c"
        var $5=$4+1; //@line 465 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 465 "xmltok_impl.c"
        var $7=($6)==0; //@line 465 "xmltok_impl.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 465 "xmltok_impl.c"
      case 2: // $bb1
        var $8=$ptr_addr; //@line 465 "xmltok_impl.c"
        var $9=$8; //@line 465 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 465 "xmltok_impl.c"
        var $11=($10)==120; //@line 465 "xmltok_impl.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 465 "xmltok_impl.c"
      case 3: // $bb2
        var $12=$ptr_addr; //@line 466 "xmltok_impl.c"
        var $13=$12+2; //@line 466 "xmltok_impl.c"
        var $14=$enc_addr; //@line 466 "xmltok_impl.c"
        var $15=$end_addr; //@line 466 "xmltok_impl.c"
        var $16=$nextTokPtr_addr; //@line 466 "xmltok_impl.c"
        var $17=_little2_scanHexCharRef($14, $13, $15, $16); //@line 466 "xmltok_impl.c"
        $0=$17; //@line 466 "xmltok_impl.c"
        __label__ = 19; break; //@line 466 "xmltok_impl.c"
      case 4: // $bb3
        var $18=$ptr_addr; //@line 467 "xmltok_impl.c"
        var $19=$18+1; //@line 467 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 467 "xmltok_impl.c"
        var $21=($20)==0; //@line 467 "xmltok_impl.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 467 "xmltok_impl.c"
      case 5: // $bb4
        var $22=$enc_addr; //@line 467 "xmltok_impl.c"
        var $23=$22; //@line 467 "xmltok_impl.c"
        var $24=$ptr_addr; //@line 467 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 467 "xmltok_impl.c"
        var $26=($25); //@line 467 "xmltok_impl.c"
        var $27=$23+76; //@line 467 "xmltok_impl.c"
        var $28=$27+$26; //@line 467 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 467 "xmltok_impl.c"
        var $30=($29); //@line 467 "xmltok_impl.c"
        $iftmp_603=$30; //@line 467 "xmltok_impl.c"
        __lastLabel__ = 5; __label__ = 7; break; //@line 467 "xmltok_impl.c"
      case 6: // $bb5
        var $31=$ptr_addr; //@line 467 "xmltok_impl.c"
        var $32=$31; //@line 467 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 467 "xmltok_impl.c"
        var $34=($33); //@line 467 "xmltok_impl.c"
        var $35=$ptr_addr; //@line 467 "xmltok_impl.c"
        var $36=$35+1; //@line 467 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 467 "xmltok_impl.c"
        var $38=($37); //@line 467 "xmltok_impl.c"
        var $39=((($38)) & 255); //@line 467 "xmltok_impl.c"
        var $40=((($34)) & 255); //@line 467 "xmltok_impl.c"
        var $41=_unicode_byte_type($39, $40); //@line 467 "xmltok_impl.c"
        $iftmp_603=$41; //@line 467 "xmltok_impl.c"
        __lastLabel__ = 6; __label__ = 7; break; //@line 467 "xmltok_impl.c"
      case 7: // $bb6
        var $42=__lastLabel__ == 6 ? $41 : ($30);
        var $cond=($42)==25;
        if ($cond) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $bb7
        var $43=$ptr_addr; //@line 474 "xmltok_impl.c"
        var $44=$43+2; //@line 474 "xmltok_impl.c"
        $ptr_addr=$44; //@line 474 "xmltok_impl.c"
        __label__ = 17; break; //@line 474 "xmltok_impl.c"
      case 9: // $bb8
        var $45=$nextTokPtr_addr; //@line 471 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 471 "xmltok_impl.c"
        HEAP[$45]=$46; //@line 471 "xmltok_impl.c"
        $0=0; //@line 472 "xmltok_impl.c"
        __label__ = 19; break; //@line 472 "xmltok_impl.c"
      case 10: // $bb9
        var $47=$ptr_addr; //@line 475 "xmltok_impl.c"
        var $48=$47+1; //@line 475 "xmltok_impl.c"
        var $49=HEAP[$48]; //@line 475 "xmltok_impl.c"
        var $50=($49)==0; //@line 475 "xmltok_impl.c"
        if ($50) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 475 "xmltok_impl.c"
      case 11: // $bb10
        var $51=$enc_addr; //@line 475 "xmltok_impl.c"
        var $52=$51; //@line 475 "xmltok_impl.c"
        var $53=$ptr_addr; //@line 475 "xmltok_impl.c"
        var $54=HEAP[$53]; //@line 475 "xmltok_impl.c"
        var $55=($54); //@line 475 "xmltok_impl.c"
        var $56=$52+76; //@line 475 "xmltok_impl.c"
        var $57=$56+$55; //@line 475 "xmltok_impl.c"
        var $58=HEAP[$57]; //@line 475 "xmltok_impl.c"
        var $59=($58); //@line 475 "xmltok_impl.c"
        $iftmp_605=$59; //@line 475 "xmltok_impl.c"
        __lastLabel__ = 11; __label__ = 13; break; //@line 475 "xmltok_impl.c"
      case 12: // $bb11
        var $60=$ptr_addr; //@line 475 "xmltok_impl.c"
        var $61=$60; //@line 475 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 475 "xmltok_impl.c"
        var $63=($62); //@line 475 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 475 "xmltok_impl.c"
        var $65=$64+1; //@line 475 "xmltok_impl.c"
        var $66=HEAP[$65]; //@line 475 "xmltok_impl.c"
        var $67=($66); //@line 475 "xmltok_impl.c"
        var $68=((($67)) & 255); //@line 475 "xmltok_impl.c"
        var $69=((($63)) & 255); //@line 475 "xmltok_impl.c"
        var $70=_unicode_byte_type($68, $69); //@line 475 "xmltok_impl.c"
        $iftmp_605=$70; //@line 475 "xmltok_impl.c"
        __lastLabel__ = 12; __label__ = 13; break; //@line 475 "xmltok_impl.c"
      case 13: // $bb12
        var $71=__lastLabel__ == 12 ? $70 : ($59);
        if ($71 == 18) {
          __label__ = 15; break;
        }
        else if ($71 == 25) {
          __label__ = 14; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 14: // $bb13
        var $72=$ptr_addr; //@line 474 "xmltok_impl.c"
        var $73=$72+2; //@line 474 "xmltok_impl.c"
        $ptr_addr=$73; //@line 474 "xmltok_impl.c"
        __label__ = 17; break; //@line 474 "xmltok_impl.c"
      case 15: // $bb14
        var $74=$ptr_addr; //@line 479 "xmltok_impl.c"
        var $75=$74+2; //@line 479 "xmltok_impl.c"
        var $76=$nextTokPtr_addr; //@line 479 "xmltok_impl.c"
        HEAP[$76]=$75; //@line 479 "xmltok_impl.c"
        $0=10; //@line 480 "xmltok_impl.c"
        __label__ = 19; break; //@line 480 "xmltok_impl.c"
      case 16: // $bb15
        var $77=$nextTokPtr_addr; //@line 482 "xmltok_impl.c"
        var $78=$ptr_addr; //@line 482 "xmltok_impl.c"
        HEAP[$77]=$78; //@line 482 "xmltok_impl.c"
        $0=0; //@line 483 "xmltok_impl.c"
        __label__ = 19; break; //@line 483 "xmltok_impl.c"
      case 17: // $bb16
        var $79=$ptr_addr; //@line 474 "xmltok_impl.c"
        var $80=$end_addr; //@line 474 "xmltok_impl.c"
        var $81=($79)!=($80); //@line 474 "xmltok_impl.c"
        if ($81) { __label__ = 10; break; } else { __label__ = 18; break; } //@line 474 "xmltok_impl.c"
      case 18: // $bb17
        $0=-1; //@line 487 "xmltok_impl.c"
        __label__ = 19; break; //@line 487 "xmltok_impl.c"
      case 19: // $bb18
        var $82=$0; //@line 466 "xmltok_impl.c"
        $retval=$82; //@line 466 "xmltok_impl.c"
        var $retval19=$retval; //@line 466 "xmltok_impl.c"
        ;
        return $retval19; //@line 466 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanRef($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_615;
        var $iftmp_607;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 496 "xmltok_impl.c"
        var $2=$end_addr; //@line 496 "xmltok_impl.c"
        var $3=($1)==($2); //@line 496 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 496 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 497 "xmltok_impl.c"
        __label__ = 40; break; //@line 497 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 498 "xmltok_impl.c"
        var $5=$4+1; //@line 498 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 498 "xmltok_impl.c"
        var $7=($6)==0; //@line 498 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 498 "xmltok_impl.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 498 "xmltok_impl.c"
        var $9=$8; //@line 498 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 498 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 498 "xmltok_impl.c"
        var $12=($11); //@line 498 "xmltok_impl.c"
        var $13=$9+76; //@line 498 "xmltok_impl.c"
        var $14=$13+$12; //@line 498 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 498 "xmltok_impl.c"
        var $16=($15); //@line 498 "xmltok_impl.c"
        $iftmp_607=$16; //@line 498 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 498 "xmltok_impl.c"
      case 4: // $bb3
        var $17=$ptr_addr; //@line 498 "xmltok_impl.c"
        var $18=$17; //@line 498 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 498 "xmltok_impl.c"
        var $20=($19); //@line 498 "xmltok_impl.c"
        var $21=$ptr_addr; //@line 498 "xmltok_impl.c"
        var $22=$21+1; //@line 498 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 498 "xmltok_impl.c"
        var $24=($23); //@line 498 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 498 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 498 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 498 "xmltok_impl.c"
        $iftmp_607=$27; //@line 498 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 498 "xmltok_impl.c"
      case 5: // $bb4
        var $28=__lastLabel__ == 4 ? $27 : ($16);
        if ($28 == 5) {
          __label__ = 9; break;
        }
        else if ($28 == 6) {
          __label__ = 12; break;
        }
        else if ($28 == 7) {
          __label__ = 15; break;
        }
        else if ($28 == 19) {
          __label__ = 18; break;
        }
        else if ($28 == 22) {
          __label__ = 8; break;
        }
        else if ($28 == 24) {
          __label__ = 8; break;
        }
        else if ($28 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 6: // $bb5
        var $29=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $30=$29+1; //@line 499 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 499 "xmltok_impl.c"
        var $32=($31); //@line 499 "xmltok_impl.c"
        var $33=_nmstrtPages+$32; //@line 499 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 499 "xmltok_impl.c"
        var $35=($34); //@line 499 "xmltok_impl.c"
        var $36=($35) * 8;
        var $37=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $38=$37; //@line 499 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 499 "xmltok_impl.c"
        var $40=($39) >>> 5; //@line 499 "xmltok_impl.c"
        var $41=($40); //@line 499 "xmltok_impl.c"
        var $42=($41) + ($36); //@line 499 "xmltok_impl.c"
        var $43=_namingBitmap+$42*4; //@line 499 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 499 "xmltok_impl.c"
        var $45=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $46=$45; //@line 499 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 499 "xmltok_impl.c"
        var $48=($47); //@line 499 "xmltok_impl.c"
        var $49=($48) & 31; //@line 499 "xmltok_impl.c"
        var $50=1 << ($49); //@line 499 "xmltok_impl.c"
        var $51=($50) & ($44); //@line 499 "xmltok_impl.c"
        var $52=($51)==0; //@line 499 "xmltok_impl.c"
        if ($52) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 499 "xmltok_impl.c"
      case 7: // $bb6
        var $53=$nextTokPtr_addr; //@line 499 "xmltok_impl.c"
        var $54=$ptr_addr; //@line 499 "xmltok_impl.c"
        HEAP[$53]=$54; //@line 499 "xmltok_impl.c"
        $0=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 8: // $bb7
        var $55=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $56=$55+2; //@line 499 "xmltok_impl.c"
        $ptr_addr=$56; //@line 499 "xmltok_impl.c"
        __label__ = 38; break; //@line 499 "xmltok_impl.c"
      case 9: // $bb8
        var $57=$end_addr; //@line 499 "xmltok_impl.c"
        var $58=($57); //@line 499 "xmltok_impl.c"
        var $59=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $60=($59); //@line 499 "xmltok_impl.c"
        var $61=($58) - ($60); //@line 499 "xmltok_impl.c"
        var $62=($61) <= 1; //@line 499 "xmltok_impl.c"
        if ($62) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 499 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 11: // $bb10
        var $63=$nextTokPtr_addr; //@line 499 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 499 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 499 "xmltok_impl.c"
        $0=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 12: // $bb11
        var $65=$end_addr; //@line 499 "xmltok_impl.c"
        var $66=($65); //@line 499 "xmltok_impl.c"
        var $67=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $68=($67); //@line 499 "xmltok_impl.c"
        var $69=($66) - ($68); //@line 499 "xmltok_impl.c"
        var $70=($69) <= 2; //@line 499 "xmltok_impl.c"
        if ($70) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 499 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 14: // $bb13
        var $71=$nextTokPtr_addr; //@line 499 "xmltok_impl.c"
        var $72=$ptr_addr; //@line 499 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 499 "xmltok_impl.c"
        $0=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 15: // $bb14
        var $73=$end_addr; //@line 499 "xmltok_impl.c"
        var $74=($73); //@line 499 "xmltok_impl.c"
        var $75=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $76=($75); //@line 499 "xmltok_impl.c"
        var $77=($74) - ($76); //@line 499 "xmltok_impl.c"
        var $78=($77) <= 3; //@line 499 "xmltok_impl.c"
        if ($78) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 499 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 17: // $bb16
        var $79=$nextTokPtr_addr; //@line 499 "xmltok_impl.c"
        var $80=$ptr_addr; //@line 499 "xmltok_impl.c"
        HEAP[$79]=$80; //@line 499 "xmltok_impl.c"
        $0=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 18: // $bb17
        var $81=$ptr_addr; //@line 501 "xmltok_impl.c"
        var $82=$81+2; //@line 501 "xmltok_impl.c"
        var $83=$enc_addr; //@line 501 "xmltok_impl.c"
        var $84=$end_addr; //@line 501 "xmltok_impl.c"
        var $85=$nextTokPtr_addr; //@line 501 "xmltok_impl.c"
        var $86=_little2_scanCharRef($83, $82, $84, $85); //@line 501 "xmltok_impl.c"
        $0=$86; //@line 501 "xmltok_impl.c"
        __label__ = 40; break; //@line 501 "xmltok_impl.c"
      case 19: // $bb18
        var $87=$nextTokPtr_addr; //@line 503 "xmltok_impl.c"
        var $88=$ptr_addr; //@line 503 "xmltok_impl.c"
        HEAP[$87]=$88; //@line 503 "xmltok_impl.c"
        $0=0; //@line 504 "xmltok_impl.c"
        __label__ = 40; break; //@line 504 "xmltok_impl.c"
      case 20: // $bb19
        var $89=$ptr_addr; //@line 507 "xmltok_impl.c"
        var $90=$89+1; //@line 507 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 507 "xmltok_impl.c"
        var $92=($91)==0; //@line 507 "xmltok_impl.c"
        if ($92) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 507 "xmltok_impl.c"
      case 21: // $bb20
        var $93=$enc_addr; //@line 507 "xmltok_impl.c"
        var $94=$93; //@line 507 "xmltok_impl.c"
        var $95=$ptr_addr; //@line 507 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 507 "xmltok_impl.c"
        var $97=($96); //@line 507 "xmltok_impl.c"
        var $98=$94+76; //@line 507 "xmltok_impl.c"
        var $99=$98+$97; //@line 507 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 507 "xmltok_impl.c"
        var $101=($100); //@line 507 "xmltok_impl.c"
        $iftmp_615=$101; //@line 507 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 23; break; //@line 507 "xmltok_impl.c"
      case 22: // $bb21
        var $102=$ptr_addr; //@line 507 "xmltok_impl.c"
        var $103=$102; //@line 507 "xmltok_impl.c"
        var $104=HEAP[$103]; //@line 507 "xmltok_impl.c"
        var $105=($104); //@line 507 "xmltok_impl.c"
        var $106=$ptr_addr; //@line 507 "xmltok_impl.c"
        var $107=$106+1; //@line 507 "xmltok_impl.c"
        var $108=HEAP[$107]; //@line 507 "xmltok_impl.c"
        var $109=($108); //@line 507 "xmltok_impl.c"
        var $110=((($109)) & 255); //@line 507 "xmltok_impl.c"
        var $111=((($105)) & 255); //@line 507 "xmltok_impl.c"
        var $112=_unicode_byte_type($110, $111); //@line 507 "xmltok_impl.c"
        $iftmp_615=$112; //@line 507 "xmltok_impl.c"
        __lastLabel__ = 22; __label__ = 23; break; //@line 507 "xmltok_impl.c"
      case 23: // $bb22
        var $113=__lastLabel__ == 22 ? $112 : ($101);
        if ($113 == 5) {
          __label__ = 27; break;
        }
        else if ($113 == 6) {
          __label__ = 30; break;
        }
        else if ($113 == 7) {
          __label__ = 33; break;
        }
        else if ($113 == 18) {
          __label__ = 36; break;
        }
        else if ($113 == 22) {
          __label__ = 26; break;
        }
        else if ($113 == 24) {
          __label__ = 26; break;
        }
        else if ($113 == 25) {
          __label__ = 26; break;
        }
        else if ($113 == 26) {
          __label__ = 26; break;
        }
        else if ($113 == 27) {
          __label__ = 26; break;
        }
        else if ($113 == 29) {
          __label__ = 24; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 24: // $bb23
        var $114=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $115=$114+1; //@line 508 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 508 "xmltok_impl.c"
        var $117=($116); //@line 508 "xmltok_impl.c"
        var $118=_namePages+$117; //@line 508 "xmltok_impl.c"
        var $119=HEAP[$118]; //@line 508 "xmltok_impl.c"
        var $120=($119); //@line 508 "xmltok_impl.c"
        var $121=($120) * 8;
        var $122=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $123=$122; //@line 508 "xmltok_impl.c"
        var $124=HEAP[$123]; //@line 508 "xmltok_impl.c"
        var $125=($124) >>> 5; //@line 508 "xmltok_impl.c"
        var $126=($125); //@line 508 "xmltok_impl.c"
        var $127=($126) + ($121); //@line 508 "xmltok_impl.c"
        var $128=_namingBitmap+$127*4; //@line 508 "xmltok_impl.c"
        var $129=HEAP[$128]; //@line 508 "xmltok_impl.c"
        var $130=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $131=$130; //@line 508 "xmltok_impl.c"
        var $132=HEAP[$131]; //@line 508 "xmltok_impl.c"
        var $133=($132); //@line 508 "xmltok_impl.c"
        var $134=($133) & 31; //@line 508 "xmltok_impl.c"
        var $135=1 << ($134); //@line 508 "xmltok_impl.c"
        var $136=($135) & ($129); //@line 508 "xmltok_impl.c"
        var $137=($136)==0; //@line 508 "xmltok_impl.c"
        if ($137) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 508 "xmltok_impl.c"
      case 25: // $bb24
        var $138=$nextTokPtr_addr; //@line 508 "xmltok_impl.c"
        var $139=$ptr_addr; //@line 508 "xmltok_impl.c"
        HEAP[$138]=$139; //@line 508 "xmltok_impl.c"
        $0=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 26: // $bb25
        var $140=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $141=$140+2; //@line 508 "xmltok_impl.c"
        $ptr_addr=$141; //@line 508 "xmltok_impl.c"
        __label__ = 38; break; //@line 508 "xmltok_impl.c"
      case 27: // $bb26
        var $142=$end_addr; //@line 508 "xmltok_impl.c"
        var $143=($142); //@line 508 "xmltok_impl.c"
        var $144=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $145=($144); //@line 508 "xmltok_impl.c"
        var $146=($143) - ($145); //@line 508 "xmltok_impl.c"
        var $147=($146) <= 1; //@line 508 "xmltok_impl.c"
        if ($147) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 508 "xmltok_impl.c"
      case 28: // $bb27
        $0=-2; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 29: // $bb28
        var $148=$nextTokPtr_addr; //@line 508 "xmltok_impl.c"
        var $149=$ptr_addr; //@line 508 "xmltok_impl.c"
        HEAP[$148]=$149; //@line 508 "xmltok_impl.c"
        $0=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 30: // $bb29
        var $150=$end_addr; //@line 508 "xmltok_impl.c"
        var $151=($150); //@line 508 "xmltok_impl.c"
        var $152=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $153=($152); //@line 508 "xmltok_impl.c"
        var $154=($151) - ($153); //@line 508 "xmltok_impl.c"
        var $155=($154) <= 2; //@line 508 "xmltok_impl.c"
        if ($155) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 508 "xmltok_impl.c"
      case 31: // $bb30
        $0=-2; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 32: // $bb31
        var $156=$nextTokPtr_addr; //@line 508 "xmltok_impl.c"
        var $157=$ptr_addr; //@line 508 "xmltok_impl.c"
        HEAP[$156]=$157; //@line 508 "xmltok_impl.c"
        $0=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 33: // $bb32
        var $158=$end_addr; //@line 508 "xmltok_impl.c"
        var $159=($158); //@line 508 "xmltok_impl.c"
        var $160=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $161=($160); //@line 508 "xmltok_impl.c"
        var $162=($159) - ($161); //@line 508 "xmltok_impl.c"
        var $163=($162) <= 3; //@line 508 "xmltok_impl.c"
        if ($163) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 508 "xmltok_impl.c"
      case 34: // $bb33
        $0=-2; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 35: // $bb34
        var $164=$nextTokPtr_addr; //@line 508 "xmltok_impl.c"
        var $165=$ptr_addr; //@line 508 "xmltok_impl.c"
        HEAP[$164]=$165; //@line 508 "xmltok_impl.c"
        $0=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 36: // $bb35
        var $166=$ptr_addr; //@line 510 "xmltok_impl.c"
        var $167=$166+2; //@line 510 "xmltok_impl.c"
        var $168=$nextTokPtr_addr; //@line 510 "xmltok_impl.c"
        HEAP[$168]=$167; //@line 510 "xmltok_impl.c"
        $0=9; //@line 511 "xmltok_impl.c"
        __label__ = 40; break; //@line 511 "xmltok_impl.c"
      case 37: // $bb36
        var $169=$nextTokPtr_addr; //@line 513 "xmltok_impl.c"
        var $170=$ptr_addr; //@line 513 "xmltok_impl.c"
        HEAP[$169]=$170; //@line 513 "xmltok_impl.c"
        $0=0; //@line 514 "xmltok_impl.c"
        __label__ = 40; break; //@line 514 "xmltok_impl.c"
      case 38: // $bb37
        var $171=$ptr_addr; //@line 506 "xmltok_impl.c"
        var $172=$end_addr; //@line 506 "xmltok_impl.c"
        var $173=($171)!=($172); //@line 506 "xmltok_impl.c"
        if ($173) { __label__ = 20; break; } else { __label__ = 39; break; } //@line 506 "xmltok_impl.c"
      case 39: // $bb38
        $0=-1; //@line 517 "xmltok_impl.c"
        __label__ = 40; break; //@line 517 "xmltok_impl.c"
      case 40: // $bb39
        var $174=$0; //@line 497 "xmltok_impl.c"
        $retval=$174; //@line 497 "xmltok_impl.c"
        var $retval40=$retval; //@line 497 "xmltok_impl.c"
        ;
        return $retval40; //@line 497 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanAtts($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr=__stackBase__;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_736;
        var $iftmp_727;
        var $iftmp_699;
        var $iftmp_690;
        var $iftmp_681;
        var $iftmp_652;
        var $0;
        var $iftmp_623;
        var $hadColon;
        var $t;
        var $open;
        var $t59;
        var $tok;
        $enc_addr=$enc;
        HEAP[$ptr_addr]=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        $hadColon=0; //@line 527 "xmltok_impl.c"
        __label__ = 113; break; //@line 527 "xmltok_impl.c"
      case 1: // $bb
        var $1=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $2=$1+1; //@line 530 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 530 "xmltok_impl.c"
        var $4=($3)==0; //@line 530 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 530 "xmltok_impl.c"
      case 2: // $bb1
        var $5=$enc_addr; //@line 530 "xmltok_impl.c"
        var $6=$5; //@line 530 "xmltok_impl.c"
        var $7=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 530 "xmltok_impl.c"
        var $9=($8); //@line 530 "xmltok_impl.c"
        var $10=$6+76; //@line 530 "xmltok_impl.c"
        var $11=$10+$9; //@line 530 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 530 "xmltok_impl.c"
        var $13=($12); //@line 530 "xmltok_impl.c"
        $iftmp_623=$13; //@line 530 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 530 "xmltok_impl.c"
      case 3: // $bb2
        var $14=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $15=$14; //@line 530 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 530 "xmltok_impl.c"
        var $17=($16); //@line 530 "xmltok_impl.c"
        var $18=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $19=$18+1; //@line 530 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 530 "xmltok_impl.c"
        var $21=($20); //@line 530 "xmltok_impl.c"
        var $22=((($21)) & 255); //@line 530 "xmltok_impl.c"
        var $23=((($17)) & 255); //@line 530 "xmltok_impl.c"
        var $24=_unicode_byte_type($22, $23); //@line 530 "xmltok_impl.c"
        $iftmp_623=$24; //@line 530 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 530 "xmltok_impl.c"
      case 4: // $bb3
        var $25=__lastLabel__ == 3 ? $24 : ($13);
        if ($25 == 5) {
          __label__ = 8; break;
        }
        else if ($25 == 6) {
          __label__ = 11; break;
        }
        else if ($25 == 7) {
          __label__ = 14; break;
        }
        else if ($25 == 9) {
          __label__ = 38; break;
        }
        else if ($25 == 10) {
          __label__ = 38; break;
        }
        else if ($25 == 14) {
          __label__ = 46; break;
        }
        else if ($25 == 21) {
          __label__ = 38; break;
        }
        else if ($25 == 22) {
          __label__ = 7; break;
        }
        else if ($25 == 23) {
          __label__ = 17; break;
        }
        else if ($25 == 24) {
          __label__ = 7; break;
        }
        else if ($25 == 25) {
          __label__ = 7; break;
        }
        else if ($25 == 26) {
          __label__ = 7; break;
        }
        else if ($25 == 27) {
          __label__ = 7; break;
        }
        else if ($25 == 29) {
          __label__ = 5; break;
        }
        else {
        __label__ = 112; break;
        }
        
      case 5: // $bb4
        var $26=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $27=$26+1; //@line 531 "xmltok_impl.c"
        var $28=HEAP[$27]; //@line 531 "xmltok_impl.c"
        var $29=($28); //@line 531 "xmltok_impl.c"
        var $30=_namePages+$29; //@line 531 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 531 "xmltok_impl.c"
        var $32=($31); //@line 531 "xmltok_impl.c"
        var $33=($32) * 8;
        var $34=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $35=$34; //@line 531 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 531 "xmltok_impl.c"
        var $37=($36) >>> 5; //@line 531 "xmltok_impl.c"
        var $38=($37); //@line 531 "xmltok_impl.c"
        var $39=($38) + ($33); //@line 531 "xmltok_impl.c"
        var $40=_namingBitmap+$39*4; //@line 531 "xmltok_impl.c"
        var $41=HEAP[$40]; //@line 531 "xmltok_impl.c"
        var $42=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $43=$42; //@line 531 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 531 "xmltok_impl.c"
        var $45=($44); //@line 531 "xmltok_impl.c"
        var $46=($45) & 31; //@line 531 "xmltok_impl.c"
        var $47=1 << ($46); //@line 531 "xmltok_impl.c"
        var $48=($47) & ($41); //@line 531 "xmltok_impl.c"
        var $49=($48)==0; //@line 531 "xmltok_impl.c"
        if ($49) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 531 "xmltok_impl.c"
      case 6: // $bb5
        var $50=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $51=$nextTokPtr_addr; //@line 531 "xmltok_impl.c"
        HEAP[$51]=$50; //@line 531 "xmltok_impl.c"
        $0=0; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 7: // $bb6
        var $52=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $53=$52+2; //@line 531 "xmltok_impl.c"
        HEAP[$ptr_addr]=$53; //@line 531 "xmltok_impl.c"
        __label__ = 113; break; //@line 531 "xmltok_impl.c"
      case 8: // $bb7
        var $54=$end_addr; //@line 531 "xmltok_impl.c"
        var $55=($54); //@line 531 "xmltok_impl.c"
        var $56=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $57=($56); //@line 531 "xmltok_impl.c"
        var $58=($55) - ($57); //@line 531 "xmltok_impl.c"
        var $59=($58) <= 1; //@line 531 "xmltok_impl.c"
        if ($59) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 531 "xmltok_impl.c"
      case 9: // $bb8
        $0=-2; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 10: // $bb9
        var $60=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $61=$nextTokPtr_addr; //@line 531 "xmltok_impl.c"
        HEAP[$61]=$60; //@line 531 "xmltok_impl.c"
        $0=0; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 11: // $bb10
        var $62=$end_addr; //@line 531 "xmltok_impl.c"
        var $63=($62); //@line 531 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $65=($64); //@line 531 "xmltok_impl.c"
        var $66=($63) - ($65); //@line 531 "xmltok_impl.c"
        var $67=($66) <= 2; //@line 531 "xmltok_impl.c"
        if ($67) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 531 "xmltok_impl.c"
      case 12: // $bb11
        $0=-2; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 13: // $bb12
        var $68=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $69=$nextTokPtr_addr; //@line 531 "xmltok_impl.c"
        HEAP[$69]=$68; //@line 531 "xmltok_impl.c"
        $0=0; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 14: // $bb13
        var $70=$end_addr; //@line 531 "xmltok_impl.c"
        var $71=($70); //@line 531 "xmltok_impl.c"
        var $72=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $73=($72); //@line 531 "xmltok_impl.c"
        var $74=($71) - ($73); //@line 531 "xmltok_impl.c"
        var $75=($74) <= 3; //@line 531 "xmltok_impl.c"
        if ($75) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 531 "xmltok_impl.c"
      case 15: // $bb14
        $0=-2; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 16: // $bb15
        var $76=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $77=$nextTokPtr_addr; //@line 531 "xmltok_impl.c"
        HEAP[$77]=$76; //@line 531 "xmltok_impl.c"
        $0=0; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 17: // $bb16
        var $78=$hadColon; //@line 534 "xmltok_impl.c"
        var $79=($78)!=0; //@line 534 "xmltok_impl.c"
        if ($79) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 534 "xmltok_impl.c"
      case 18: // $bb17
        var $80=HEAP[$ptr_addr]; //@line 535 "xmltok_impl.c"
        var $81=$nextTokPtr_addr; //@line 535 "xmltok_impl.c"
        HEAP[$81]=$80; //@line 535 "xmltok_impl.c"
        $0=0; //@line 536 "xmltok_impl.c"
        __label__ = 115; break; //@line 536 "xmltok_impl.c"
      case 19: // $bb18
        $hadColon=1; //@line 538 "xmltok_impl.c"
        var $82=HEAP[$ptr_addr]; //@line 539 "xmltok_impl.c"
        var $83=$82+2; //@line 539 "xmltok_impl.c"
        HEAP[$ptr_addr]=$83; //@line 539 "xmltok_impl.c"
        var $84=HEAP[$ptr_addr]; //@line 540 "xmltok_impl.c"
        var $85=$end_addr; //@line 540 "xmltok_impl.c"
        var $86=($84)==($85); //@line 540 "xmltok_impl.c"
        if ($86) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 540 "xmltok_impl.c"
      case 20: // $bb19
        $0=-1; //@line 541 "xmltok_impl.c"
        __label__ = 115; break; //@line 541 "xmltok_impl.c"
      case 21: // $bb20
        var $87=HEAP[$ptr_addr]; //@line 542 "xmltok_impl.c"
        var $88=$87+1; //@line 542 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 542 "xmltok_impl.c"
        var $90=($89)==0; //@line 542 "xmltok_impl.c"
        if ($90) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 542 "xmltok_impl.c"
      case 22: // $bb21
        var $91=$enc_addr; //@line 542 "xmltok_impl.c"
        var $92=$91; //@line 542 "xmltok_impl.c"
        var $93=HEAP[$ptr_addr]; //@line 542 "xmltok_impl.c"
        var $94=HEAP[$93]; //@line 542 "xmltok_impl.c"
        var $95=($94); //@line 542 "xmltok_impl.c"
        var $96=$92+76; //@line 542 "xmltok_impl.c"
        var $97=$96+$95; //@line 542 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 542 "xmltok_impl.c"
        var $99=($98); //@line 542 "xmltok_impl.c"
        $iftmp_652=$99; //@line 542 "xmltok_impl.c"
        __lastLabel__ = 22; __label__ = 24; break; //@line 542 "xmltok_impl.c"
      case 23: // $bb22
        var $100=HEAP[$ptr_addr]; //@line 542 "xmltok_impl.c"
        var $101=$100; //@line 542 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 542 "xmltok_impl.c"
        var $103=($102); //@line 542 "xmltok_impl.c"
        var $104=HEAP[$ptr_addr]; //@line 542 "xmltok_impl.c"
        var $105=$104+1; //@line 542 "xmltok_impl.c"
        var $106=HEAP[$105]; //@line 542 "xmltok_impl.c"
        var $107=($106); //@line 542 "xmltok_impl.c"
        var $108=((($107)) & 255); //@line 542 "xmltok_impl.c"
        var $109=((($103)) & 255); //@line 542 "xmltok_impl.c"
        var $110=_unicode_byte_type($108, $109); //@line 542 "xmltok_impl.c"
        $iftmp_652=$110; //@line 542 "xmltok_impl.c"
        __lastLabel__ = 23; __label__ = 24; break; //@line 542 "xmltok_impl.c"
      case 24: // $bb23
        var $111=__lastLabel__ == 23 ? $110 : ($99);
        if ($111 == 5) {
          __label__ = 28; break;
        }
        else if ($111 == 6) {
          __label__ = 31; break;
        }
        else if ($111 == 7) {
          __label__ = 34; break;
        }
        else if ($111 == 22) {
          __label__ = 27; break;
        }
        else if ($111 == 24) {
          __label__ = 27; break;
        }
        else if ($111 == 29) {
          __label__ = 25; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 25: // $bb24
        var $112=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $113=$112+1; //@line 543 "xmltok_impl.c"
        var $114=HEAP[$113]; //@line 543 "xmltok_impl.c"
        var $115=($114); //@line 543 "xmltok_impl.c"
        var $116=_nmstrtPages+$115; //@line 543 "xmltok_impl.c"
        var $117=HEAP[$116]; //@line 543 "xmltok_impl.c"
        var $118=($117); //@line 543 "xmltok_impl.c"
        var $119=($118) * 8;
        var $120=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $121=$120; //@line 543 "xmltok_impl.c"
        var $122=HEAP[$121]; //@line 543 "xmltok_impl.c"
        var $123=($122) >>> 5; //@line 543 "xmltok_impl.c"
        var $124=($123); //@line 543 "xmltok_impl.c"
        var $125=($124) + ($119); //@line 543 "xmltok_impl.c"
        var $126=_namingBitmap+$125*4; //@line 543 "xmltok_impl.c"
        var $127=HEAP[$126]; //@line 543 "xmltok_impl.c"
        var $128=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $129=$128; //@line 543 "xmltok_impl.c"
        var $130=HEAP[$129]; //@line 543 "xmltok_impl.c"
        var $131=($130); //@line 543 "xmltok_impl.c"
        var $132=($131) & 31; //@line 543 "xmltok_impl.c"
        var $133=1 << ($132); //@line 543 "xmltok_impl.c"
        var $134=($133) & ($127); //@line 543 "xmltok_impl.c"
        var $135=($134)==0; //@line 543 "xmltok_impl.c"
        if ($135) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 543 "xmltok_impl.c"
      case 26: // $bb25
        var $136=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $137=$nextTokPtr_addr; //@line 543 "xmltok_impl.c"
        HEAP[$137]=$136; //@line 543 "xmltok_impl.c"
        $0=0; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 27: // $bb26
        var $138=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $139=$138+2; //@line 543 "xmltok_impl.c"
        HEAP[$ptr_addr]=$139; //@line 543 "xmltok_impl.c"
        __label__ = 113; break; //@line 543 "xmltok_impl.c"
      case 28: // $bb27
        var $140=$end_addr; //@line 543 "xmltok_impl.c"
        var $141=($140); //@line 543 "xmltok_impl.c"
        var $142=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $143=($142); //@line 543 "xmltok_impl.c"
        var $144=($141) - ($143); //@line 543 "xmltok_impl.c"
        var $145=($144) <= 1; //@line 543 "xmltok_impl.c"
        if ($145) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 543 "xmltok_impl.c"
      case 29: // $bb28
        $0=-2; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 30: // $bb29
        var $146=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $147=$nextTokPtr_addr; //@line 543 "xmltok_impl.c"
        HEAP[$147]=$146; //@line 543 "xmltok_impl.c"
        $0=0; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 31: // $bb30
        var $148=$end_addr; //@line 543 "xmltok_impl.c"
        var $149=($148); //@line 543 "xmltok_impl.c"
        var $150=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $151=($150); //@line 543 "xmltok_impl.c"
        var $152=($149) - ($151); //@line 543 "xmltok_impl.c"
        var $153=($152) <= 2; //@line 543 "xmltok_impl.c"
        if ($153) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 543 "xmltok_impl.c"
      case 32: // $bb31
        $0=-2; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 33: // $bb32
        var $154=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $155=$nextTokPtr_addr; //@line 543 "xmltok_impl.c"
        HEAP[$155]=$154; //@line 543 "xmltok_impl.c"
        $0=0; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 34: // $bb33
        var $156=$end_addr; //@line 543 "xmltok_impl.c"
        var $157=($156); //@line 543 "xmltok_impl.c"
        var $158=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $159=($158); //@line 543 "xmltok_impl.c"
        var $160=($157) - ($159); //@line 543 "xmltok_impl.c"
        var $161=($160) <= 3; //@line 543 "xmltok_impl.c"
        if ($161) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 543 "xmltok_impl.c"
      case 35: // $bb34
        $0=-2; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 36: // $bb35
        var $162=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $163=$nextTokPtr_addr; //@line 543 "xmltok_impl.c"
        HEAP[$163]=$162; //@line 543 "xmltok_impl.c"
        $0=0; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 37: // $bb36
        var $164=HEAP[$ptr_addr]; //@line 545 "xmltok_impl.c"
        var $165=$nextTokPtr_addr; //@line 545 "xmltok_impl.c"
        HEAP[$165]=$164; //@line 545 "xmltok_impl.c"
        $0=0; //@line 546 "xmltok_impl.c"
        __label__ = 115; break; //@line 546 "xmltok_impl.c"
      case 38: // $bb37
        var $166=HEAP[$ptr_addr]; //@line 554 "xmltok_impl.c"
        var $167=$166+2; //@line 554 "xmltok_impl.c"
        HEAP[$ptr_addr]=$167; //@line 554 "xmltok_impl.c"
        var $168=HEAP[$ptr_addr]; //@line 555 "xmltok_impl.c"
        var $169=$end_addr; //@line 555 "xmltok_impl.c"
        var $170=($168)==($169); //@line 555 "xmltok_impl.c"
        if ($170) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 555 "xmltok_impl.c"
      case 39: // $bb38
        $0=-1; //@line 556 "xmltok_impl.c"
        __label__ = 115; break; //@line 556 "xmltok_impl.c"
      case 40: // $bb39
        var $171=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $172=$171+1; //@line 557 "xmltok_impl.c"
        var $173=HEAP[$172]; //@line 557 "xmltok_impl.c"
        var $174=($173)==0; //@line 557 "xmltok_impl.c"
        if ($174) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 557 "xmltok_impl.c"
      case 41: // $bb40
        var $175=$enc_addr; //@line 557 "xmltok_impl.c"
        var $176=$175; //@line 557 "xmltok_impl.c"
        var $177=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $178=HEAP[$177]; //@line 557 "xmltok_impl.c"
        var $179=($178); //@line 557 "xmltok_impl.c"
        var $180=$176+76; //@line 557 "xmltok_impl.c"
        var $181=$180+$179; //@line 557 "xmltok_impl.c"
        var $182=HEAP[$181]; //@line 557 "xmltok_impl.c"
        var $183=($182); //@line 557 "xmltok_impl.c"
        $iftmp_681=$183; //@line 557 "xmltok_impl.c"
        __lastLabel__ = 41; __label__ = 43; break; //@line 557 "xmltok_impl.c"
      case 42: // $bb41
        var $184=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $185=$184; //@line 557 "xmltok_impl.c"
        var $186=HEAP[$185]; //@line 557 "xmltok_impl.c"
        var $187=($186); //@line 557 "xmltok_impl.c"
        var $188=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $189=$188+1; //@line 557 "xmltok_impl.c"
        var $190=HEAP[$189]; //@line 557 "xmltok_impl.c"
        var $191=($190); //@line 557 "xmltok_impl.c"
        var $192=((($191)) & 255); //@line 557 "xmltok_impl.c"
        var $193=((($187)) & 255); //@line 557 "xmltok_impl.c"
        var $194=_unicode_byte_type($192, $193); //@line 557 "xmltok_impl.c"
        $iftmp_681=$194; //@line 557 "xmltok_impl.c"
        __lastLabel__ = 42; __label__ = 43; break; //@line 557 "xmltok_impl.c"
      case 43: // $bb42
        var $195=__lastLabel__ == 42 ? $194 : ($183);
        $t=$195; //@line 557 "xmltok_impl.c"
        var $196=($195)==14; //@line 558 "xmltok_impl.c"
        if ($196) { __label__ = 46; break; } else { __label__ = 44; break; } //@line 558 "xmltok_impl.c"
      case 44: // $bb43
        var $197=$t; //@line 560 "xmltok_impl.c"
        if ($197 == 9) {
          __label__ = 38; break;
        }
        else if ($197 == 10) {
          __label__ = 38; break;
        }
        else if ($197 == 21) {
          __label__ = 38; break;
        }
        else {
        __label__ = 45; break;
        }
        
      case 45: // $bb45
        var $198=HEAP[$ptr_addr]; //@line 566 "xmltok_impl.c"
        var $199=$nextTokPtr_addr; //@line 566 "xmltok_impl.c"
        HEAP[$199]=$198; //@line 566 "xmltok_impl.c"
        $0=0; //@line 567 "xmltok_impl.c"
        __label__ = 115; break; //@line 567 "xmltok_impl.c"
      case 46: // $bb46
        $hadColon=0; //@line 575 "xmltok_impl.c"
        __label__ = 47; break; //@line 575 "xmltok_impl.c"
      case 47: // $bb47
        var $200=HEAP[$ptr_addr]; //@line 578 "xmltok_impl.c"
        var $201=$200+2; //@line 578 "xmltok_impl.c"
        HEAP[$ptr_addr]=$201; //@line 578 "xmltok_impl.c"
        var $202=HEAP[$ptr_addr]; //@line 579 "xmltok_impl.c"
        var $203=$end_addr; //@line 579 "xmltok_impl.c"
        var $204=($202)==($203); //@line 579 "xmltok_impl.c"
        if ($204) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 579 "xmltok_impl.c"
      case 48: // $bb48
        $0=-1; //@line 580 "xmltok_impl.c"
        __label__ = 115; break; //@line 580 "xmltok_impl.c"
      case 49: // $bb49
        var $205=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $206=$205+1; //@line 581 "xmltok_impl.c"
        var $207=HEAP[$206]; //@line 581 "xmltok_impl.c"
        var $208=($207)==0; //@line 581 "xmltok_impl.c"
        if ($208) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 581 "xmltok_impl.c"
      case 50: // $bb50
        var $209=$enc_addr; //@line 581 "xmltok_impl.c"
        var $210=$209; //@line 581 "xmltok_impl.c"
        var $211=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $212=HEAP[$211]; //@line 581 "xmltok_impl.c"
        var $213=($212); //@line 581 "xmltok_impl.c"
        var $214=$210+76; //@line 581 "xmltok_impl.c"
        var $215=$214+$213; //@line 581 "xmltok_impl.c"
        var $216=HEAP[$215]; //@line 581 "xmltok_impl.c"
        var $217=($216); //@line 581 "xmltok_impl.c"
        $iftmp_690=$217; //@line 581 "xmltok_impl.c"
        __label__ = 52; break; //@line 581 "xmltok_impl.c"
      case 51: // $bb51
        var $218=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $219=$218; //@line 581 "xmltok_impl.c"
        var $220=HEAP[$219]; //@line 581 "xmltok_impl.c"
        var $221=($220); //@line 581 "xmltok_impl.c"
        var $222=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $223=$222+1; //@line 581 "xmltok_impl.c"
        var $224=HEAP[$223]; //@line 581 "xmltok_impl.c"
        var $225=($224); //@line 581 "xmltok_impl.c"
        var $226=((($225)) & 255); //@line 581 "xmltok_impl.c"
        var $227=((($221)) & 255); //@line 581 "xmltok_impl.c"
        var $228=_unicode_byte_type($226, $227); //@line 581 "xmltok_impl.c"
        $iftmp_690=$228; //@line 581 "xmltok_impl.c"
        __label__ = 52; break; //@line 581 "xmltok_impl.c"
      case 52: // $bb52
        var $229=$iftmp_690; //@line 581 "xmltok_impl.c"
        $open=$229; //@line 581 "xmltok_impl.c"
        var $230=$open; //@line 582 "xmltok_impl.c"
        var $231=($230)==12; //@line 582 "xmltok_impl.c"
        var $232=$open; //@line 582 "xmltok_impl.c"
        var $233=($232)==13; //@line 582 "xmltok_impl.c"
        var $or_cond=($231) | ($233);
        if ($or_cond) { __label__ = 55; break; } else { __label__ = 53; break; } //@line 582 "xmltok_impl.c"
      case 53: // $bb54
        var $234=$open; //@line 584 "xmltok_impl.c"
        if ($234 == 9) {
          __label__ = 47; break;
        }
        else if ($234 == 10) {
          __label__ = 47; break;
        }
        else if ($234 == 21) {
          __label__ = 47; break;
        }
        else {
        __label__ = 54; break;
        }
        
      case 54: // $bb56
        var $235=HEAP[$ptr_addr]; //@line 590 "xmltok_impl.c"
        var $236=$nextTokPtr_addr; //@line 590 "xmltok_impl.c"
        HEAP[$236]=$235; //@line 590 "xmltok_impl.c"
        $0=0; //@line 591 "xmltok_impl.c"
        __label__ = 115; break; //@line 591 "xmltok_impl.c"
      case 55: // $bb57
        var $237=HEAP[$ptr_addr]; //@line 594 "xmltok_impl.c"
        var $238=$237+2; //@line 594 "xmltok_impl.c"
        HEAP[$ptr_addr]=$238; //@line 594 "xmltok_impl.c"
        __label__ = 56; break; //@line 594 "xmltok_impl.c"
      case 56: // $bb58
        var $239=HEAP[$ptr_addr]; //@line 598 "xmltok_impl.c"
        var $240=$end_addr; //@line 598 "xmltok_impl.c"
        var $241=($239)==($240); //@line 598 "xmltok_impl.c"
        if ($241) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 598 "xmltok_impl.c"
      case 57: // $bb60
        $0=-1; //@line 599 "xmltok_impl.c"
        __label__ = 115; break; //@line 599 "xmltok_impl.c"
      case 58: // $bb61
        var $242=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $243=$242+1; //@line 600 "xmltok_impl.c"
        var $244=HEAP[$243]; //@line 600 "xmltok_impl.c"
        var $245=($244)==0; //@line 600 "xmltok_impl.c"
        if ($245) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 600 "xmltok_impl.c"
      case 59: // $bb62
        var $246=$enc_addr; //@line 600 "xmltok_impl.c"
        var $247=$246; //@line 600 "xmltok_impl.c"
        var $248=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $249=HEAP[$248]; //@line 600 "xmltok_impl.c"
        var $250=($249); //@line 600 "xmltok_impl.c"
        var $251=$247+76; //@line 600 "xmltok_impl.c"
        var $252=$251+$250; //@line 600 "xmltok_impl.c"
        var $253=HEAP[$252]; //@line 600 "xmltok_impl.c"
        var $254=($253); //@line 600 "xmltok_impl.c"
        $iftmp_699=$254; //@line 600 "xmltok_impl.c"
        __label__ = 61; break; //@line 600 "xmltok_impl.c"
      case 60: // $bb63
        var $255=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $256=$255; //@line 600 "xmltok_impl.c"
        var $257=HEAP[$256]; //@line 600 "xmltok_impl.c"
        var $258=($257); //@line 600 "xmltok_impl.c"
        var $259=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $260=$259+1; //@line 600 "xmltok_impl.c"
        var $261=HEAP[$260]; //@line 600 "xmltok_impl.c"
        var $262=($261); //@line 600 "xmltok_impl.c"
        var $263=((($262)) & 255); //@line 600 "xmltok_impl.c"
        var $264=((($258)) & 255); //@line 600 "xmltok_impl.c"
        var $265=_unicode_byte_type($263, $264); //@line 600 "xmltok_impl.c"
        $iftmp_699=$265; //@line 600 "xmltok_impl.c"
        __label__ = 61; break; //@line 600 "xmltok_impl.c"
      case 61: // $bb64
        var $266=$iftmp_699; //@line 600 "xmltok_impl.c"
        $t59=$266; //@line 600 "xmltok_impl.c"
        var $267=$t59; //@line 601 "xmltok_impl.c"
        var $268=$open; //@line 601 "xmltok_impl.c"
        var $269=($267)==($268); //@line 601 "xmltok_impl.c"
        if ($269) { __label__ = 79; break; } else { __label__ = 62; break; } //@line 601 "xmltok_impl.c"
      case 62: // $bb65
        var $270=$t59; //@line 603 "xmltok_impl.c"
        if ($270 == 0) {
          __label__ = 72; break;
        }
        else if ($270 == 1) {
          __label__ = 72; break;
        }
        else if ($270 == 2) {
          __label__ = 77; break;
        }
        else if ($270 == 3) {
          __label__ = 73; break;
        }
        else if ($270 == 5) {
          __label__ = 63; break;
        }
        else if ($270 == 6) {
          __label__ = 66; break;
        }
        else if ($270 == 7) {
          __label__ = 69; break;
        }
        else if ($270 == 8) {
          __label__ = 72; break;
        }
        else {
        __label__ = 78; break;
        }
        
      case 63: // $bb66
        var $271=$end_addr; //@line 604 "xmltok_impl.c"
        var $272=($271); //@line 604 "xmltok_impl.c"
        var $273=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $274=($273); //@line 604 "xmltok_impl.c"
        var $275=($272) - ($274); //@line 604 "xmltok_impl.c"
        var $276=($275) <= 1; //@line 604 "xmltok_impl.c"
        if ($276) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 604 "xmltok_impl.c"
      case 64: // $bb67
        $0=-2; //@line 604 "xmltok_impl.c"
        __label__ = 115; break; //@line 604 "xmltok_impl.c"
      case 65: // $bb68
        var $277=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $278=$277+2; //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$278; //@line 604 "xmltok_impl.c"
        __label__ = 56; break; //@line 604 "xmltok_impl.c"
      case 66: // $bb69
        var $279=$end_addr; //@line 604 "xmltok_impl.c"
        var $280=($279); //@line 604 "xmltok_impl.c"
        var $281=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $282=($281); //@line 604 "xmltok_impl.c"
        var $283=($280) - ($282); //@line 604 "xmltok_impl.c"
        var $284=($283) <= 2; //@line 604 "xmltok_impl.c"
        if ($284) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 604 "xmltok_impl.c"
      case 67: // $bb70
        $0=-2; //@line 604 "xmltok_impl.c"
        __label__ = 115; break; //@line 604 "xmltok_impl.c"
      case 68: // $bb71
        var $285=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $286=$285+3; //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$286; //@line 604 "xmltok_impl.c"
        __label__ = 56; break; //@line 604 "xmltok_impl.c"
      case 69: // $bb72
        var $287=$end_addr; //@line 604 "xmltok_impl.c"
        var $288=($287); //@line 604 "xmltok_impl.c"
        var $289=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $290=($289); //@line 604 "xmltok_impl.c"
        var $291=($288) - ($290); //@line 604 "xmltok_impl.c"
        var $292=($291) <= 3; //@line 604 "xmltok_impl.c"
        if ($292) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 604 "xmltok_impl.c"
      case 70: // $bb73
        $0=-2; //@line 604 "xmltok_impl.c"
        __label__ = 115; break; //@line 604 "xmltok_impl.c"
      case 71: // $bb74
        var $293=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $294=$293+4; //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$294; //@line 604 "xmltok_impl.c"
        __label__ = 56; break; //@line 604 "xmltok_impl.c"
      case 72: // $bb75
        var $295=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $296=$nextTokPtr_addr; //@line 604 "xmltok_impl.c"
        HEAP[$296]=$295; //@line 604 "xmltok_impl.c"
        $0=0; //@line 604 "xmltok_impl.c"
        __label__ = 115; break; //@line 604 "xmltok_impl.c"
      case 73: // $bb76
        var $297=HEAP[$ptr_addr]; //@line 607 "xmltok_impl.c"
        var $298=$297+2; //@line 607 "xmltok_impl.c"
        var $299=$enc_addr; //@line 607 "xmltok_impl.c"
        var $300=$end_addr; //@line 607 "xmltok_impl.c"
        var $301=_little2_scanRef($299, $298, $300, $ptr_addr); //@line 607 "xmltok_impl.c"
        $tok=$301; //@line 607 "xmltok_impl.c"
        var $302=$tok; //@line 608 "xmltok_impl.c"
        var $303=($302) <= 0; //@line 608 "xmltok_impl.c"
        if ($303) { __label__ = 74; break; } else { __label__ = 56; break; } //@line 608 "xmltok_impl.c"
      case 74: // $bb77
        var $304=$tok; //@line 609 "xmltok_impl.c"
        var $305=($304)==0; //@line 609 "xmltok_impl.c"
        if ($305) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 609 "xmltok_impl.c"
      case 75: // $bb78
        var $306=HEAP[$ptr_addr]; //@line 610 "xmltok_impl.c"
        var $307=$nextTokPtr_addr; //@line 610 "xmltok_impl.c"
        HEAP[$307]=$306; //@line 610 "xmltok_impl.c"
        __label__ = 76; break; //@line 610 "xmltok_impl.c"
      case 76: // $bb79
        var $308=$tok; //@line 611 "xmltok_impl.c"
        $0=$308; //@line 611 "xmltok_impl.c"
        __label__ = 115; break; //@line 611 "xmltok_impl.c"
      case 77: // $bb81
        var $309=HEAP[$ptr_addr]; //@line 616 "xmltok_impl.c"
        var $310=$nextTokPtr_addr; //@line 616 "xmltok_impl.c"
        HEAP[$310]=$309; //@line 616 "xmltok_impl.c"
        $0=0; //@line 617 "xmltok_impl.c"
        __label__ = 115; break; //@line 617 "xmltok_impl.c"
      case 78: // $bb82
        var $311=HEAP[$ptr_addr]; //@line 619 "xmltok_impl.c"
        var $312=$311+2; //@line 619 "xmltok_impl.c"
        HEAP[$ptr_addr]=$312; //@line 619 "xmltok_impl.c"
        __label__ = 56; break; //@line 619 "xmltok_impl.c"
      case 79: // $bb84
        var $313=HEAP[$ptr_addr]; //@line 623 "xmltok_impl.c"
        var $314=$313+2; //@line 623 "xmltok_impl.c"
        HEAP[$ptr_addr]=$314; //@line 623 "xmltok_impl.c"
        var $315=HEAP[$ptr_addr]; //@line 624 "xmltok_impl.c"
        var $316=$end_addr; //@line 624 "xmltok_impl.c"
        var $317=($315)==($316); //@line 624 "xmltok_impl.c"
        if ($317) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 624 "xmltok_impl.c"
      case 80: // $bb85
        $0=-1; //@line 625 "xmltok_impl.c"
        __label__ = 115; break; //@line 625 "xmltok_impl.c"
      case 81: // $bb86
        var $318=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $319=$318+1; //@line 626 "xmltok_impl.c"
        var $320=HEAP[$319]; //@line 626 "xmltok_impl.c"
        var $321=($320)==0; //@line 626 "xmltok_impl.c"
        if ($321) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 626 "xmltok_impl.c"
      case 82: // $bb87
        var $322=$enc_addr; //@line 626 "xmltok_impl.c"
        var $323=$322; //@line 626 "xmltok_impl.c"
        var $324=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $325=HEAP[$324]; //@line 626 "xmltok_impl.c"
        var $326=($325); //@line 626 "xmltok_impl.c"
        var $327=$323+76; //@line 626 "xmltok_impl.c"
        var $328=$327+$326; //@line 626 "xmltok_impl.c"
        var $329=HEAP[$328]; //@line 626 "xmltok_impl.c"
        var $330=($329); //@line 626 "xmltok_impl.c"
        $iftmp_727=$330; //@line 626 "xmltok_impl.c"
        __lastLabel__ = 82; __label__ = 84; break; //@line 626 "xmltok_impl.c"
      case 83: // $bb88
        var $331=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $332=$331; //@line 626 "xmltok_impl.c"
        var $333=HEAP[$332]; //@line 626 "xmltok_impl.c"
        var $334=($333); //@line 626 "xmltok_impl.c"
        var $335=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $336=$335+1; //@line 626 "xmltok_impl.c"
        var $337=HEAP[$336]; //@line 626 "xmltok_impl.c"
        var $338=($337); //@line 626 "xmltok_impl.c"
        var $339=((($338)) & 255); //@line 626 "xmltok_impl.c"
        var $340=((($334)) & 255); //@line 626 "xmltok_impl.c"
        var $341=_unicode_byte_type($339, $340); //@line 626 "xmltok_impl.c"
        $iftmp_727=$341; //@line 626 "xmltok_impl.c"
        __lastLabel__ = 83; __label__ = 84; break; //@line 626 "xmltok_impl.c"
      case 84: // $bb89
        var $342=__lastLabel__ == 83 ? $341 : ($330);
        if ($342 == 9) {
          __label__ = 86; break;
        }
        else if ($342 == 10) {
          __label__ = 86; break;
        }
        else if ($342 == 11) {
          __label__ = 104; break;
        }
        else if ($342 == 17) {
          __label__ = 105; break;
        }
        else if ($342 == 21) {
          __label__ = 86; break;
        }
        else {
        __label__ = 85; break;
        }
        
      case 85: // $bb93
        var $343=HEAP[$ptr_addr]; //@line 636 "xmltok_impl.c"
        var $344=$nextTokPtr_addr; //@line 636 "xmltok_impl.c"
        HEAP[$344]=$343; //@line 636 "xmltok_impl.c"
        $0=0; //@line 637 "xmltok_impl.c"
        __label__ = 115; break; //@line 637 "xmltok_impl.c"
      case 86: // $bb94
        var $345=HEAP[$ptr_addr]; //@line 641 "xmltok_impl.c"
        var $346=$345+2; //@line 641 "xmltok_impl.c"
        HEAP[$ptr_addr]=$346; //@line 641 "xmltok_impl.c"
        var $347=HEAP[$ptr_addr]; //@line 642 "xmltok_impl.c"
        var $348=$end_addr; //@line 642 "xmltok_impl.c"
        var $349=($347)==($348); //@line 642 "xmltok_impl.c"
        if ($349) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 642 "xmltok_impl.c"
      case 87: // $bb95
        $0=-1; //@line 643 "xmltok_impl.c"
        __label__ = 115; break; //@line 643 "xmltok_impl.c"
      case 88: // $bb96
        var $350=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $351=$350+1; //@line 644 "xmltok_impl.c"
        var $352=HEAP[$351]; //@line 644 "xmltok_impl.c"
        var $353=($352)==0; //@line 644 "xmltok_impl.c"
        if ($353) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 644 "xmltok_impl.c"
      case 89: // $bb97
        var $354=$enc_addr; //@line 644 "xmltok_impl.c"
        var $355=$354; //@line 644 "xmltok_impl.c"
        var $356=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $357=HEAP[$356]; //@line 644 "xmltok_impl.c"
        var $358=($357); //@line 644 "xmltok_impl.c"
        var $359=$355+76; //@line 644 "xmltok_impl.c"
        var $360=$359+$358; //@line 644 "xmltok_impl.c"
        var $361=HEAP[$360]; //@line 644 "xmltok_impl.c"
        var $362=($361); //@line 644 "xmltok_impl.c"
        $iftmp_736=$362; //@line 644 "xmltok_impl.c"
        __lastLabel__ = 89; __label__ = 91; break; //@line 644 "xmltok_impl.c"
      case 90: // $bb98
        var $363=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $364=$363; //@line 644 "xmltok_impl.c"
        var $365=HEAP[$364]; //@line 644 "xmltok_impl.c"
        var $366=($365); //@line 644 "xmltok_impl.c"
        var $367=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $368=$367+1; //@line 644 "xmltok_impl.c"
        var $369=HEAP[$368]; //@line 644 "xmltok_impl.c"
        var $370=($369); //@line 644 "xmltok_impl.c"
        var $371=((($370)) & 255); //@line 644 "xmltok_impl.c"
        var $372=((($366)) & 255); //@line 644 "xmltok_impl.c"
        var $373=_unicode_byte_type($371, $372); //@line 644 "xmltok_impl.c"
        $iftmp_736=$373; //@line 644 "xmltok_impl.c"
        __lastLabel__ = 90; __label__ = 91; break; //@line 644 "xmltok_impl.c"
      case 91: // $bb99
        var $374=__lastLabel__ == 90 ? $373 : ($362);
        if ($374 == 5) {
          __label__ = 95; break;
        }
        else if ($374 == 6) {
          __label__ = 98; break;
        }
        else if ($374 == 7) {
          __label__ = 101; break;
        }
        else if ($374 == 9) {
          __label__ = 86; break;
        }
        else if ($374 == 10) {
          __label__ = 86; break;
        }
        else if ($374 == 11) {
          __label__ = 104; break;
        }
        else if ($374 == 17) {
          __label__ = 105; break;
        }
        else if ($374 == 21) {
          __label__ = 86; break;
        }
        else if ($374 == 22) {
          __label__ = 94; break;
        }
        else if ($374 == 24) {
          __label__ = 94; break;
        }
        else if ($374 == 29) {
          __label__ = 92; break;
        }
        else {
        __label__ = 111; break;
        }
        
      case 92: // $bb100
        var $375=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $376=$375+1; //@line 645 "xmltok_impl.c"
        var $377=HEAP[$376]; //@line 645 "xmltok_impl.c"
        var $378=($377); //@line 645 "xmltok_impl.c"
        var $379=_nmstrtPages+$378; //@line 645 "xmltok_impl.c"
        var $380=HEAP[$379]; //@line 645 "xmltok_impl.c"
        var $381=($380); //@line 645 "xmltok_impl.c"
        var $382=($381) * 8;
        var $383=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $384=$383; //@line 645 "xmltok_impl.c"
        var $385=HEAP[$384]; //@line 645 "xmltok_impl.c"
        var $386=($385) >>> 5; //@line 645 "xmltok_impl.c"
        var $387=($386); //@line 645 "xmltok_impl.c"
        var $388=($387) + ($382); //@line 645 "xmltok_impl.c"
        var $389=_namingBitmap+$388*4; //@line 645 "xmltok_impl.c"
        var $390=HEAP[$389]; //@line 645 "xmltok_impl.c"
        var $391=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $392=$391; //@line 645 "xmltok_impl.c"
        var $393=HEAP[$392]; //@line 645 "xmltok_impl.c"
        var $394=($393); //@line 645 "xmltok_impl.c"
        var $395=($394) & 31; //@line 645 "xmltok_impl.c"
        var $396=1 << ($395); //@line 645 "xmltok_impl.c"
        var $397=($396) & ($390); //@line 645 "xmltok_impl.c"
        var $398=($397)==0; //@line 645 "xmltok_impl.c"
        if ($398) { __label__ = 93; break; } else { __label__ = 94; break; } //@line 645 "xmltok_impl.c"
      case 93: // $bb101
        var $399=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $400=$nextTokPtr_addr; //@line 645 "xmltok_impl.c"
        HEAP[$400]=$399; //@line 645 "xmltok_impl.c"
        $0=0; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 94: // $bb102
        var $401=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $402=$401+2; //@line 645 "xmltok_impl.c"
        HEAP[$ptr_addr]=$402; //@line 645 "xmltok_impl.c"
        __label__ = 113; break; //@line 645 "xmltok_impl.c"
      case 95: // $bb103
        var $403=$end_addr; //@line 645 "xmltok_impl.c"
        var $404=($403); //@line 645 "xmltok_impl.c"
        var $405=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $406=($405); //@line 645 "xmltok_impl.c"
        var $407=($404) - ($406); //@line 645 "xmltok_impl.c"
        var $408=($407) <= 1; //@line 645 "xmltok_impl.c"
        if ($408) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 645 "xmltok_impl.c"
      case 96: // $bb104
        $0=-2; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 97: // $bb105
        var $409=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $410=$nextTokPtr_addr; //@line 645 "xmltok_impl.c"
        HEAP[$410]=$409; //@line 645 "xmltok_impl.c"
        $0=0; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 98: // $bb106
        var $411=$end_addr; //@line 645 "xmltok_impl.c"
        var $412=($411); //@line 645 "xmltok_impl.c"
        var $413=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $414=($413); //@line 645 "xmltok_impl.c"
        var $415=($412) - ($414); //@line 645 "xmltok_impl.c"
        var $416=($415) <= 2; //@line 645 "xmltok_impl.c"
        if ($416) { __label__ = 99; break; } else { __label__ = 100; break; } //@line 645 "xmltok_impl.c"
      case 99: // $bb107
        $0=-2; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 100: // $bb108
        var $417=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $418=$nextTokPtr_addr; //@line 645 "xmltok_impl.c"
        HEAP[$418]=$417; //@line 645 "xmltok_impl.c"
        $0=0; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 101: // $bb109
        var $419=$end_addr; //@line 645 "xmltok_impl.c"
        var $420=($419); //@line 645 "xmltok_impl.c"
        var $421=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $422=($421); //@line 645 "xmltok_impl.c"
        var $423=($420) - ($422); //@line 645 "xmltok_impl.c"
        var $424=($423) <= 3; //@line 645 "xmltok_impl.c"
        if ($424) { __label__ = 102; break; } else { __label__ = 103; break; } //@line 645 "xmltok_impl.c"
      case 102: // $bb110
        $0=-2; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 103: // $bb111
        var $425=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $426=$nextTokPtr_addr; //@line 645 "xmltok_impl.c"
        HEAP[$426]=$425; //@line 645 "xmltok_impl.c"
        $0=0; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 104: // $gt
        var $427=HEAP[$ptr_addr]; //@line 650 "xmltok_impl.c"
        var $428=$427+2; //@line 650 "xmltok_impl.c"
        var $429=$nextTokPtr_addr; //@line 650 "xmltok_impl.c"
        HEAP[$429]=$428; //@line 650 "xmltok_impl.c"
        $0=1; //@line 651 "xmltok_impl.c"
        __label__ = 115; break; //@line 651 "xmltok_impl.c"
      case 105: // $sol
        var $430=HEAP[$ptr_addr]; //@line 654 "xmltok_impl.c"
        var $431=$430+2; //@line 654 "xmltok_impl.c"
        HEAP[$ptr_addr]=$431; //@line 654 "xmltok_impl.c"
        var $432=HEAP[$ptr_addr]; //@line 655 "xmltok_impl.c"
        var $433=$end_addr; //@line 655 "xmltok_impl.c"
        var $434=($432)==($433); //@line 655 "xmltok_impl.c"
        if ($434) { __label__ = 106; break; } else { __label__ = 107; break; } //@line 655 "xmltok_impl.c"
      case 106: // $bb113
        $0=-1; //@line 656 "xmltok_impl.c"
        __label__ = 115; break; //@line 656 "xmltok_impl.c"
      case 107: // $bb114
        var $435=HEAP[$ptr_addr]; //@line 657 "xmltok_impl.c"
        var $436=$435+1; //@line 657 "xmltok_impl.c"
        var $437=HEAP[$436]; //@line 657 "xmltok_impl.c"
        var $438=($437)!=0; //@line 657 "xmltok_impl.c"
        if ($438) { __label__ = 109; break; } else { __label__ = 108; break; } //@line 657 "xmltok_impl.c"
      case 108: // $bb115
        var $439=HEAP[$ptr_addr]; //@line 657 "xmltok_impl.c"
        var $440=$439; //@line 657 "xmltok_impl.c"
        var $441=HEAP[$440]; //@line 657 "xmltok_impl.c"
        var $442=($441)!=62; //@line 657 "xmltok_impl.c"
        if ($442) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 657 "xmltok_impl.c"
      case 109: // $bb116
        var $443=HEAP[$ptr_addr]; //@line 658 "xmltok_impl.c"
        var $444=$nextTokPtr_addr; //@line 658 "xmltok_impl.c"
        HEAP[$444]=$443; //@line 658 "xmltok_impl.c"
        $0=0; //@line 659 "xmltok_impl.c"
        __label__ = 115; break; //@line 659 "xmltok_impl.c"
      case 110: // $bb117
        var $445=HEAP[$ptr_addr]; //@line 661 "xmltok_impl.c"
        var $446=$445+2; //@line 661 "xmltok_impl.c"
        var $447=$nextTokPtr_addr; //@line 661 "xmltok_impl.c"
        HEAP[$447]=$446; //@line 661 "xmltok_impl.c"
        $0=3; //@line 662 "xmltok_impl.c"
        __label__ = 115; break; //@line 662 "xmltok_impl.c"
      case 111: // $bb118
        var $448=HEAP[$ptr_addr]; //@line 664 "xmltok_impl.c"
        var $449=$nextTokPtr_addr; //@line 664 "xmltok_impl.c"
        HEAP[$449]=$448; //@line 664 "xmltok_impl.c"
        $0=0; //@line 665 "xmltok_impl.c"
        __label__ = 115; break; //@line 665 "xmltok_impl.c"
      case 112: // $bb119
        var $450=HEAP[$ptr_addr]; //@line 672 "xmltok_impl.c"
        var $451=$nextTokPtr_addr; //@line 672 "xmltok_impl.c"
        HEAP[$451]=$450; //@line 672 "xmltok_impl.c"
        $0=0; //@line 673 "xmltok_impl.c"
        __label__ = 115; break; //@line 673 "xmltok_impl.c"
      case 113: // $bb120
        var $452=HEAP[$ptr_addr]; //@line 529 "xmltok_impl.c"
        var $453=$end_addr; //@line 529 "xmltok_impl.c"
        var $454=($452)!=($453); //@line 529 "xmltok_impl.c"
        if ($454) { __label__ = 1; break; } else { __label__ = 114; break; } //@line 529 "xmltok_impl.c"
      case 114: // $bb121
        $0=-1; //@line 676 "xmltok_impl.c"
        __label__ = 115; break; //@line 676 "xmltok_impl.c"
      case 115: // $bb122
        var $455=$0; //@line 531 "xmltok_impl.c"
        $retval=$455; //@line 531 "xmltok_impl.c"
        var $retval123=$retval; //@line 531 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval123; //@line 531 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanLt($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_798;
        var $iftmp_790;
        var $iftmp_782;
        var $iftmp_780;
        var $iftmp_772;
        var $0;
        var $hadColon;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 688 "xmltok_impl.c"
        var $2=$end_addr; //@line 688 "xmltok_impl.c"
        var $3=($1)==($2); //@line 688 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 688 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 689 "xmltok_impl.c"
        __label__ = 98; break; //@line 689 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 690 "xmltok_impl.c"
        var $5=$4+1; //@line 690 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 690 "xmltok_impl.c"
        var $7=($6)==0; //@line 690 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 690 "xmltok_impl.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 690 "xmltok_impl.c"
        var $9=$8; //@line 690 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 690 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 690 "xmltok_impl.c"
        var $12=($11); //@line 690 "xmltok_impl.c"
        var $13=$9+76; //@line 690 "xmltok_impl.c"
        var $14=$13+$12; //@line 690 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 690 "xmltok_impl.c"
        var $16=($15); //@line 690 "xmltok_impl.c"
        $iftmp_772=$16; //@line 690 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 690 "xmltok_impl.c"
      case 4: // $bb3
        var $17=$ptr_addr; //@line 690 "xmltok_impl.c"
        var $18=$17; //@line 690 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 690 "xmltok_impl.c"
        var $20=($19); //@line 690 "xmltok_impl.c"
        var $21=$ptr_addr; //@line 690 "xmltok_impl.c"
        var $22=$21+1; //@line 690 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 690 "xmltok_impl.c"
        var $24=($23); //@line 690 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 690 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 690 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 690 "xmltok_impl.c"
        $iftmp_772=$27; //@line 690 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 690 "xmltok_impl.c"
      case 5: // $bb4
        var $28=__lastLabel__ == 4 ? $27 : ($16);
        if ($28 == 5) {
          __label__ = 9; break;
        }
        else if ($28 == 6) {
          __label__ = 12; break;
        }
        else if ($28 == 7) {
          __label__ = 15; break;
        }
        else if ($28 == 15) {
          __label__ = 27; break;
        }
        else if ($28 == 16) {
          __label__ = 18; break;
        }
        else if ($28 == 17) {
          __label__ = 28; break;
        }
        else if ($28 == 22) {
          __label__ = 8; break;
        }
        else if ($28 == 24) {
          __label__ = 8; break;
        }
        else if ($28 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 29; break;
        }
        
      case 6: // $bb5
        var $29=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $30=$29+1; //@line 691 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 691 "xmltok_impl.c"
        var $32=($31); //@line 691 "xmltok_impl.c"
        var $33=_nmstrtPages+$32; //@line 691 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 691 "xmltok_impl.c"
        var $35=($34); //@line 691 "xmltok_impl.c"
        var $36=($35) * 8;
        var $37=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $38=$37; //@line 691 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 691 "xmltok_impl.c"
        var $40=($39) >>> 5; //@line 691 "xmltok_impl.c"
        var $41=($40); //@line 691 "xmltok_impl.c"
        var $42=($41) + ($36); //@line 691 "xmltok_impl.c"
        var $43=_namingBitmap+$42*4; //@line 691 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 691 "xmltok_impl.c"
        var $45=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $46=$45; //@line 691 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 691 "xmltok_impl.c"
        var $48=($47); //@line 691 "xmltok_impl.c"
        var $49=($48) & 31; //@line 691 "xmltok_impl.c"
        var $50=1 << ($49); //@line 691 "xmltok_impl.c"
        var $51=($50) & ($44); //@line 691 "xmltok_impl.c"
        var $52=($51)==0; //@line 691 "xmltok_impl.c"
        if ($52) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 691 "xmltok_impl.c"
      case 7: // $bb6
        var $53=$nextTokPtr_addr; //@line 691 "xmltok_impl.c"
        var $54=$ptr_addr; //@line 691 "xmltok_impl.c"
        HEAP[$53]=$54; //@line 691 "xmltok_impl.c"
        $0=0; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 8: // $bb7
        var $55=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $56=$55+2; //@line 691 "xmltok_impl.c"
        $ptr_addr=$56; //@line 691 "xmltok_impl.c"
        $hadColon=0; //@line 713 "xmltok_impl.c"
        __label__ = 96; break; //@line 713 "xmltok_impl.c"
      case 9: // $bb8
        var $57=$end_addr; //@line 691 "xmltok_impl.c"
        var $58=($57); //@line 691 "xmltok_impl.c"
        var $59=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $60=($59); //@line 691 "xmltok_impl.c"
        var $61=($58) - ($60); //@line 691 "xmltok_impl.c"
        var $62=($61) <= 1; //@line 691 "xmltok_impl.c"
        if ($62) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 691 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 11: // $bb10
        var $63=$nextTokPtr_addr; //@line 691 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 691 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 691 "xmltok_impl.c"
        $0=0; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 12: // $bb11
        var $65=$end_addr; //@line 691 "xmltok_impl.c"
        var $66=($65); //@line 691 "xmltok_impl.c"
        var $67=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $68=($67); //@line 691 "xmltok_impl.c"
        var $69=($66) - ($68); //@line 691 "xmltok_impl.c"
        var $70=($69) <= 2; //@line 691 "xmltok_impl.c"
        if ($70) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 691 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 14: // $bb13
        var $71=$nextTokPtr_addr; //@line 691 "xmltok_impl.c"
        var $72=$ptr_addr; //@line 691 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 691 "xmltok_impl.c"
        $0=0; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 15: // $bb14
        var $73=$end_addr; //@line 691 "xmltok_impl.c"
        var $74=($73); //@line 691 "xmltok_impl.c"
        var $75=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $76=($75); //@line 691 "xmltok_impl.c"
        var $77=($74) - ($76); //@line 691 "xmltok_impl.c"
        var $78=($77) <= 3; //@line 691 "xmltok_impl.c"
        if ($78) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 691 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 17: // $bb16
        var $79=$nextTokPtr_addr; //@line 691 "xmltok_impl.c"
        var $80=$ptr_addr; //@line 691 "xmltok_impl.c"
        HEAP[$79]=$80; //@line 691 "xmltok_impl.c"
        $0=0; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 18: // $bb17
        var $81=$ptr_addr; //@line 693 "xmltok_impl.c"
        var $82=$81+2; //@line 693 "xmltok_impl.c"
        $ptr_addr=$82; //@line 693 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 693 "xmltok_impl.c"
        var $84=$end_addr; //@line 693 "xmltok_impl.c"
        var $85=($83)==($84); //@line 693 "xmltok_impl.c"
        if ($85) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 693 "xmltok_impl.c"
      case 19: // $bb18
        $0=-1; //@line 694 "xmltok_impl.c"
        __label__ = 98; break; //@line 694 "xmltok_impl.c"
      case 20: // $bb19
        var $86=$ptr_addr; //@line 695 "xmltok_impl.c"
        var $87=$86+1; //@line 695 "xmltok_impl.c"
        var $88=HEAP[$87]; //@line 695 "xmltok_impl.c"
        var $89=($88)==0; //@line 695 "xmltok_impl.c"
        if ($89) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 695 "xmltok_impl.c"
      case 21: // $bb20
        var $90=$enc_addr; //@line 695 "xmltok_impl.c"
        var $91=$90; //@line 695 "xmltok_impl.c"
        var $92=$ptr_addr; //@line 695 "xmltok_impl.c"
        var $93=HEAP[$92]; //@line 695 "xmltok_impl.c"
        var $94=($93); //@line 695 "xmltok_impl.c"
        var $95=$91+76; //@line 695 "xmltok_impl.c"
        var $96=$95+$94; //@line 695 "xmltok_impl.c"
        var $97=HEAP[$96]; //@line 695 "xmltok_impl.c"
        var $98=($97); //@line 695 "xmltok_impl.c"
        $iftmp_780=$98; //@line 695 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 23; break; //@line 695 "xmltok_impl.c"
      case 22: // $bb21
        var $99=$ptr_addr; //@line 695 "xmltok_impl.c"
        var $100=$99; //@line 695 "xmltok_impl.c"
        var $101=HEAP[$100]; //@line 695 "xmltok_impl.c"
        var $102=($101); //@line 695 "xmltok_impl.c"
        var $103=$ptr_addr; //@line 695 "xmltok_impl.c"
        var $104=$103+1; //@line 695 "xmltok_impl.c"
        var $105=HEAP[$104]; //@line 695 "xmltok_impl.c"
        var $106=($105); //@line 695 "xmltok_impl.c"
        var $107=((($106)) & 255); //@line 695 "xmltok_impl.c"
        var $108=((($102)) & 255); //@line 695 "xmltok_impl.c"
        var $109=_unicode_byte_type($107, $108); //@line 695 "xmltok_impl.c"
        $iftmp_780=$109; //@line 695 "xmltok_impl.c"
        __lastLabel__ = 22; __label__ = 23; break; //@line 695 "xmltok_impl.c"
      case 23: // $bb22
        var $110=__lastLabel__ == 22 ? $109 : ($98);
        if ($110 == 20) {
          __label__ = 25; break;
        }
        else if ($110 == 27) {
          __label__ = 24; break;
        }
        else {
        __label__ = 26; break;
        }
        
      case 24: // $bb23
        var $111=$ptr_addr; //@line 697 "xmltok_impl.c"
        var $112=$111+2; //@line 697 "xmltok_impl.c"
        var $113=$enc_addr; //@line 697 "xmltok_impl.c"
        var $114=$end_addr; //@line 697 "xmltok_impl.c"
        var $115=$nextTokPtr_addr; //@line 697 "xmltok_impl.c"
        var $116=_little2_scanComment($113, $112, $114, $115); //@line 697 "xmltok_impl.c"
        $0=$116; //@line 697 "xmltok_impl.c"
        __label__ = 98; break; //@line 697 "xmltok_impl.c"
      case 25: // $bb24
        var $117=$ptr_addr; //@line 699 "xmltok_impl.c"
        var $118=$117+2; //@line 699 "xmltok_impl.c"
        var $119=$enc_addr; //@line 699 "xmltok_impl.c"
        var $120=$end_addr; //@line 699 "xmltok_impl.c"
        var $121=$nextTokPtr_addr; //@line 699 "xmltok_impl.c"
        var $122=_little2_scanCdataSection($119, $118, $120, $121); //@line 699 "xmltok_impl.c"
        $0=$122; //@line 699 "xmltok_impl.c"
        __label__ = 98; break; //@line 699 "xmltok_impl.c"
      case 26: // $bb25
        var $123=$nextTokPtr_addr; //@line 702 "xmltok_impl.c"
        var $124=$ptr_addr; //@line 702 "xmltok_impl.c"
        HEAP[$123]=$124; //@line 702 "xmltok_impl.c"
        $0=0; //@line 703 "xmltok_impl.c"
        __label__ = 98; break; //@line 703 "xmltok_impl.c"
      case 27: // $bb26
        var $125=$ptr_addr; //@line 705 "xmltok_impl.c"
        var $126=$125+2; //@line 705 "xmltok_impl.c"
        var $127=$enc_addr; //@line 705 "xmltok_impl.c"
        var $128=$end_addr; //@line 705 "xmltok_impl.c"
        var $129=$nextTokPtr_addr; //@line 705 "xmltok_impl.c"
        var $130=_little2_scanPi($127, $126, $128, $129); //@line 705 "xmltok_impl.c"
        $0=$130; //@line 705 "xmltok_impl.c"
        __label__ = 98; break; //@line 705 "xmltok_impl.c"
      case 28: // $bb27
        var $131=$ptr_addr; //@line 707 "xmltok_impl.c"
        var $132=$131+2; //@line 707 "xmltok_impl.c"
        var $133=$enc_addr; //@line 707 "xmltok_impl.c"
        var $134=$end_addr; //@line 707 "xmltok_impl.c"
        var $135=$nextTokPtr_addr; //@line 707 "xmltok_impl.c"
        var $136=_little2_scanEndTag($133, $132, $134, $135); //@line 707 "xmltok_impl.c"
        $0=$136; //@line 707 "xmltok_impl.c"
        __label__ = 98; break; //@line 707 "xmltok_impl.c"
      case 29: // $bb28
        var $137=$nextTokPtr_addr; //@line 709 "xmltok_impl.c"
        var $138=$ptr_addr; //@line 709 "xmltok_impl.c"
        HEAP[$137]=$138; //@line 709 "xmltok_impl.c"
        $0=0; //@line 710 "xmltok_impl.c"
        __label__ = 98; break; //@line 710 "xmltok_impl.c"
      case 30: // $bb29
        var $139=$ptr_addr; //@line 717 "xmltok_impl.c"
        var $140=$139+1; //@line 717 "xmltok_impl.c"
        var $141=HEAP[$140]; //@line 717 "xmltok_impl.c"
        var $142=($141)==0; //@line 717 "xmltok_impl.c"
        if ($142) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 717 "xmltok_impl.c"
      case 31: // $bb30
        var $143=$enc_addr; //@line 717 "xmltok_impl.c"
        var $144=$143; //@line 717 "xmltok_impl.c"
        var $145=$ptr_addr; //@line 717 "xmltok_impl.c"
        var $146=HEAP[$145]; //@line 717 "xmltok_impl.c"
        var $147=($146); //@line 717 "xmltok_impl.c"
        var $148=$144+76; //@line 717 "xmltok_impl.c"
        var $149=$148+$147; //@line 717 "xmltok_impl.c"
        var $150=HEAP[$149]; //@line 717 "xmltok_impl.c"
        var $151=($150); //@line 717 "xmltok_impl.c"
        $iftmp_782=$151; //@line 717 "xmltok_impl.c"
        __lastLabel__ = 31; __label__ = 33; break; //@line 717 "xmltok_impl.c"
      case 32: // $bb31
        var $152=$ptr_addr; //@line 717 "xmltok_impl.c"
        var $153=$152; //@line 717 "xmltok_impl.c"
        var $154=HEAP[$153]; //@line 717 "xmltok_impl.c"
        var $155=($154); //@line 717 "xmltok_impl.c"
        var $156=$ptr_addr; //@line 717 "xmltok_impl.c"
        var $157=$156+1; //@line 717 "xmltok_impl.c"
        var $158=HEAP[$157]; //@line 717 "xmltok_impl.c"
        var $159=($158); //@line 717 "xmltok_impl.c"
        var $160=((($159)) & 255); //@line 717 "xmltok_impl.c"
        var $161=((($155)) & 255); //@line 717 "xmltok_impl.c"
        var $162=_unicode_byte_type($160, $161); //@line 717 "xmltok_impl.c"
        $iftmp_782=$162; //@line 717 "xmltok_impl.c"
        __lastLabel__ = 32; __label__ = 33; break; //@line 717 "xmltok_impl.c"
      case 33: // $bb32
        var $163=__lastLabel__ == 32 ? $162 : ($151);
        if ($163 == 5) {
          __label__ = 37; break;
        }
        else if ($163 == 6) {
          __label__ = 40; break;
        }
        else if ($163 == 7) {
          __label__ = 43; break;
        }
        else if ($163 == 9) {
          __label__ = 67; break;
        }
        else if ($163 == 10) {
          __label__ = 67; break;
        }
        else if ($163 == 11) {
          __label__ = 88; break;
        }
        else if ($163 == 17) {
          __label__ = 89; break;
        }
        else if ($163 == 21) {
          __label__ = 67; break;
        }
        else if ($163 == 22) {
          __label__ = 36; break;
        }
        else if ($163 == 23) {
          __label__ = 46; break;
        }
        else if ($163 == 24) {
          __label__ = 36; break;
        }
        else if ($163 == 25) {
          __label__ = 36; break;
        }
        else if ($163 == 26) {
          __label__ = 36; break;
        }
        else if ($163 == 27) {
          __label__ = 36; break;
        }
        else if ($163 == 29) {
          __label__ = 34; break;
        }
        else {
        __label__ = 95; break;
        }
        
      case 34: // $bb33
        var $164=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $165=$164+1; //@line 718 "xmltok_impl.c"
        var $166=HEAP[$165]; //@line 718 "xmltok_impl.c"
        var $167=($166); //@line 718 "xmltok_impl.c"
        var $168=_namePages+$167; //@line 718 "xmltok_impl.c"
        var $169=HEAP[$168]; //@line 718 "xmltok_impl.c"
        var $170=($169); //@line 718 "xmltok_impl.c"
        var $171=($170) * 8;
        var $172=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $173=$172; //@line 718 "xmltok_impl.c"
        var $174=HEAP[$173]; //@line 718 "xmltok_impl.c"
        var $175=($174) >>> 5; //@line 718 "xmltok_impl.c"
        var $176=($175); //@line 718 "xmltok_impl.c"
        var $177=($176) + ($171); //@line 718 "xmltok_impl.c"
        var $178=_namingBitmap+$177*4; //@line 718 "xmltok_impl.c"
        var $179=HEAP[$178]; //@line 718 "xmltok_impl.c"
        var $180=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $181=$180; //@line 718 "xmltok_impl.c"
        var $182=HEAP[$181]; //@line 718 "xmltok_impl.c"
        var $183=($182); //@line 718 "xmltok_impl.c"
        var $184=($183) & 31; //@line 718 "xmltok_impl.c"
        var $185=1 << ($184); //@line 718 "xmltok_impl.c"
        var $186=($185) & ($179); //@line 718 "xmltok_impl.c"
        var $187=($186)==0; //@line 718 "xmltok_impl.c"
        if ($187) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 718 "xmltok_impl.c"
      case 35: // $bb34
        var $188=$nextTokPtr_addr; //@line 718 "xmltok_impl.c"
        var $189=$ptr_addr; //@line 718 "xmltok_impl.c"
        HEAP[$188]=$189; //@line 718 "xmltok_impl.c"
        $0=0; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 36: // $bb35
        var $190=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $191=$190+2; //@line 718 "xmltok_impl.c"
        $ptr_addr=$191; //@line 718 "xmltok_impl.c"
        __label__ = 96; break; //@line 718 "xmltok_impl.c"
      case 37: // $bb36
        var $192=$end_addr; //@line 718 "xmltok_impl.c"
        var $193=($192); //@line 718 "xmltok_impl.c"
        var $194=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $195=($194); //@line 718 "xmltok_impl.c"
        var $196=($193) - ($195); //@line 718 "xmltok_impl.c"
        var $197=($196) <= 1; //@line 718 "xmltok_impl.c"
        if ($197) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 718 "xmltok_impl.c"
      case 38: // $bb37
        $0=-2; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 39: // $bb38
        var $198=$nextTokPtr_addr; //@line 718 "xmltok_impl.c"
        var $199=$ptr_addr; //@line 718 "xmltok_impl.c"
        HEAP[$198]=$199; //@line 718 "xmltok_impl.c"
        $0=0; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 40: // $bb39
        var $200=$end_addr; //@line 718 "xmltok_impl.c"
        var $201=($200); //@line 718 "xmltok_impl.c"
        var $202=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $203=($202); //@line 718 "xmltok_impl.c"
        var $204=($201) - ($203); //@line 718 "xmltok_impl.c"
        var $205=($204) <= 2; //@line 718 "xmltok_impl.c"
        if ($205) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 718 "xmltok_impl.c"
      case 41: // $bb40
        $0=-2; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 42: // $bb41
        var $206=$nextTokPtr_addr; //@line 718 "xmltok_impl.c"
        var $207=$ptr_addr; //@line 718 "xmltok_impl.c"
        HEAP[$206]=$207; //@line 718 "xmltok_impl.c"
        $0=0; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 43: // $bb42
        var $208=$end_addr; //@line 718 "xmltok_impl.c"
        var $209=($208); //@line 718 "xmltok_impl.c"
        var $210=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $211=($210); //@line 718 "xmltok_impl.c"
        var $212=($209) - ($211); //@line 718 "xmltok_impl.c"
        var $213=($212) <= 3; //@line 718 "xmltok_impl.c"
        if ($213) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 718 "xmltok_impl.c"
      case 44: // $bb43
        $0=-2; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 45: // $bb44
        var $214=$nextTokPtr_addr; //@line 718 "xmltok_impl.c"
        var $215=$ptr_addr; //@line 718 "xmltok_impl.c"
        HEAP[$214]=$215; //@line 718 "xmltok_impl.c"
        $0=0; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 46: // $bb45
        var $216=$hadColon; //@line 721 "xmltok_impl.c"
        var $217=($216)!=0; //@line 721 "xmltok_impl.c"
        if ($217) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 721 "xmltok_impl.c"
      case 47: // $bb46
        var $218=$nextTokPtr_addr; //@line 722 "xmltok_impl.c"
        var $219=$ptr_addr; //@line 722 "xmltok_impl.c"
        HEAP[$218]=$219; //@line 722 "xmltok_impl.c"
        $0=0; //@line 723 "xmltok_impl.c"
        __label__ = 98; break; //@line 723 "xmltok_impl.c"
      case 48: // $bb47
        $hadColon=1; //@line 725 "xmltok_impl.c"
        var $220=$ptr_addr; //@line 726 "xmltok_impl.c"
        var $221=$220+2; //@line 726 "xmltok_impl.c"
        $ptr_addr=$221; //@line 726 "xmltok_impl.c"
        var $222=$ptr_addr; //@line 727 "xmltok_impl.c"
        var $223=$end_addr; //@line 727 "xmltok_impl.c"
        var $224=($222)==($223); //@line 727 "xmltok_impl.c"
        if ($224) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 727 "xmltok_impl.c"
      case 49: // $bb48
        $0=-1; //@line 728 "xmltok_impl.c"
        __label__ = 98; break; //@line 728 "xmltok_impl.c"
      case 50: // $bb49
        var $225=$ptr_addr; //@line 729 "xmltok_impl.c"
        var $226=$225+1; //@line 729 "xmltok_impl.c"
        var $227=HEAP[$226]; //@line 729 "xmltok_impl.c"
        var $228=($227)==0; //@line 729 "xmltok_impl.c"
        if ($228) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 729 "xmltok_impl.c"
      case 51: // $bb50
        var $229=$enc_addr; //@line 729 "xmltok_impl.c"
        var $230=$229; //@line 729 "xmltok_impl.c"
        var $231=$ptr_addr; //@line 729 "xmltok_impl.c"
        var $232=HEAP[$231]; //@line 729 "xmltok_impl.c"
        var $233=($232); //@line 729 "xmltok_impl.c"
        var $234=$230+76; //@line 729 "xmltok_impl.c"
        var $235=$234+$233; //@line 729 "xmltok_impl.c"
        var $236=HEAP[$235]; //@line 729 "xmltok_impl.c"
        var $237=($236); //@line 729 "xmltok_impl.c"
        $iftmp_790=$237; //@line 729 "xmltok_impl.c"
        __lastLabel__ = 51; __label__ = 53; break; //@line 729 "xmltok_impl.c"
      case 52: // $bb51
        var $238=$ptr_addr; //@line 729 "xmltok_impl.c"
        var $239=$238; //@line 729 "xmltok_impl.c"
        var $240=HEAP[$239]; //@line 729 "xmltok_impl.c"
        var $241=($240); //@line 729 "xmltok_impl.c"
        var $242=$ptr_addr; //@line 729 "xmltok_impl.c"
        var $243=$242+1; //@line 729 "xmltok_impl.c"
        var $244=HEAP[$243]; //@line 729 "xmltok_impl.c"
        var $245=($244); //@line 729 "xmltok_impl.c"
        var $246=((($245)) & 255); //@line 729 "xmltok_impl.c"
        var $247=((($241)) & 255); //@line 729 "xmltok_impl.c"
        var $248=_unicode_byte_type($246, $247); //@line 729 "xmltok_impl.c"
        $iftmp_790=$248; //@line 729 "xmltok_impl.c"
        __lastLabel__ = 52; __label__ = 53; break; //@line 729 "xmltok_impl.c"
      case 53: // $bb52
        var $249=__lastLabel__ == 52 ? $248 : ($237);
        if ($249 == 5) {
          __label__ = 57; break;
        }
        else if ($249 == 6) {
          __label__ = 60; break;
        }
        else if ($249 == 7) {
          __label__ = 63; break;
        }
        else if ($249 == 22) {
          __label__ = 56; break;
        }
        else if ($249 == 24) {
          __label__ = 56; break;
        }
        else if ($249 == 29) {
          __label__ = 54; break;
        }
        else {
        __label__ = 66; break;
        }
        
      case 54: // $bb53
        var $250=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $251=$250+1; //@line 730 "xmltok_impl.c"
        var $252=HEAP[$251]; //@line 730 "xmltok_impl.c"
        var $253=($252); //@line 730 "xmltok_impl.c"
        var $254=_nmstrtPages+$253; //@line 730 "xmltok_impl.c"
        var $255=HEAP[$254]; //@line 730 "xmltok_impl.c"
        var $256=($255); //@line 730 "xmltok_impl.c"
        var $257=($256) * 8;
        var $258=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $259=$258; //@line 730 "xmltok_impl.c"
        var $260=HEAP[$259]; //@line 730 "xmltok_impl.c"
        var $261=($260) >>> 5; //@line 730 "xmltok_impl.c"
        var $262=($261); //@line 730 "xmltok_impl.c"
        var $263=($262) + ($257); //@line 730 "xmltok_impl.c"
        var $264=_namingBitmap+$263*4; //@line 730 "xmltok_impl.c"
        var $265=HEAP[$264]; //@line 730 "xmltok_impl.c"
        var $266=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $267=$266; //@line 730 "xmltok_impl.c"
        var $268=HEAP[$267]; //@line 730 "xmltok_impl.c"
        var $269=($268); //@line 730 "xmltok_impl.c"
        var $270=($269) & 31; //@line 730 "xmltok_impl.c"
        var $271=1 << ($270); //@line 730 "xmltok_impl.c"
        var $272=($271) & ($265); //@line 730 "xmltok_impl.c"
        var $273=($272)==0; //@line 730 "xmltok_impl.c"
        if ($273) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 730 "xmltok_impl.c"
      case 55: // $bb54
        var $274=$nextTokPtr_addr; //@line 730 "xmltok_impl.c"
        var $275=$ptr_addr; //@line 730 "xmltok_impl.c"
        HEAP[$274]=$275; //@line 730 "xmltok_impl.c"
        $0=0; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 56: // $bb55
        var $276=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $277=$276+2; //@line 730 "xmltok_impl.c"
        $ptr_addr=$277; //@line 730 "xmltok_impl.c"
        __label__ = 96; break; //@line 730 "xmltok_impl.c"
      case 57: // $bb56
        var $278=$end_addr; //@line 730 "xmltok_impl.c"
        var $279=($278); //@line 730 "xmltok_impl.c"
        var $280=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $281=($280); //@line 730 "xmltok_impl.c"
        var $282=($279) - ($281); //@line 730 "xmltok_impl.c"
        var $283=($282) <= 1; //@line 730 "xmltok_impl.c"
        if ($283) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 730 "xmltok_impl.c"
      case 58: // $bb57
        $0=-2; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 59: // $bb58
        var $284=$nextTokPtr_addr; //@line 730 "xmltok_impl.c"
        var $285=$ptr_addr; //@line 730 "xmltok_impl.c"
        HEAP[$284]=$285; //@line 730 "xmltok_impl.c"
        $0=0; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 60: // $bb59
        var $286=$end_addr; //@line 730 "xmltok_impl.c"
        var $287=($286); //@line 730 "xmltok_impl.c"
        var $288=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $289=($288); //@line 730 "xmltok_impl.c"
        var $290=($287) - ($289); //@line 730 "xmltok_impl.c"
        var $291=($290) <= 2; //@line 730 "xmltok_impl.c"
        if ($291) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 730 "xmltok_impl.c"
      case 61: // $bb60
        $0=-2; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 62: // $bb61
        var $292=$nextTokPtr_addr; //@line 730 "xmltok_impl.c"
        var $293=$ptr_addr; //@line 730 "xmltok_impl.c"
        HEAP[$292]=$293; //@line 730 "xmltok_impl.c"
        $0=0; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 63: // $bb62
        var $294=$end_addr; //@line 730 "xmltok_impl.c"
        var $295=($294); //@line 730 "xmltok_impl.c"
        var $296=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $297=($296); //@line 730 "xmltok_impl.c"
        var $298=($295) - ($297); //@line 730 "xmltok_impl.c"
        var $299=($298) <= 3; //@line 730 "xmltok_impl.c"
        if ($299) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 730 "xmltok_impl.c"
      case 64: // $bb63
        $0=-2; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 65: // $bb64
        var $300=$nextTokPtr_addr; //@line 730 "xmltok_impl.c"
        var $301=$ptr_addr; //@line 730 "xmltok_impl.c"
        HEAP[$300]=$301; //@line 730 "xmltok_impl.c"
        $0=0; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 66: // $bb65
        var $302=$nextTokPtr_addr; //@line 732 "xmltok_impl.c"
        var $303=$ptr_addr; //@line 732 "xmltok_impl.c"
        HEAP[$302]=$303; //@line 732 "xmltok_impl.c"
        $0=0; //@line 733 "xmltok_impl.c"
        __label__ = 98; break; //@line 733 "xmltok_impl.c"
      case 67: // $bb66
        var $304=$ptr_addr; //@line 739 "xmltok_impl.c"
        var $305=$304+2; //@line 739 "xmltok_impl.c"
        $ptr_addr=$305; //@line 739 "xmltok_impl.c"
        __label__ = 86; break; //@line 739 "xmltok_impl.c"
      case 68: // $bb67
        var $306=$ptr_addr; //@line 741 "xmltok_impl.c"
        var $307=$306+1; //@line 741 "xmltok_impl.c"
        var $308=HEAP[$307]; //@line 741 "xmltok_impl.c"
        var $309=($308)==0; //@line 741 "xmltok_impl.c"
        if ($309) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 741 "xmltok_impl.c"
      case 69: // $bb68
        var $310=$enc_addr; //@line 741 "xmltok_impl.c"
        var $311=$310; //@line 741 "xmltok_impl.c"
        var $312=$ptr_addr; //@line 741 "xmltok_impl.c"
        var $313=HEAP[$312]; //@line 741 "xmltok_impl.c"
        var $314=($313); //@line 741 "xmltok_impl.c"
        var $315=$311+76; //@line 741 "xmltok_impl.c"
        var $316=$315+$314; //@line 741 "xmltok_impl.c"
        var $317=HEAP[$316]; //@line 741 "xmltok_impl.c"
        var $318=($317); //@line 741 "xmltok_impl.c"
        $iftmp_798=$318; //@line 741 "xmltok_impl.c"
        __lastLabel__ = 69; __label__ = 71; break; //@line 741 "xmltok_impl.c"
      case 70: // $bb69
        var $319=$ptr_addr; //@line 741 "xmltok_impl.c"
        var $320=$319; //@line 741 "xmltok_impl.c"
        var $321=HEAP[$320]; //@line 741 "xmltok_impl.c"
        var $322=($321); //@line 741 "xmltok_impl.c"
        var $323=$ptr_addr; //@line 741 "xmltok_impl.c"
        var $324=$323+1; //@line 741 "xmltok_impl.c"
        var $325=HEAP[$324]; //@line 741 "xmltok_impl.c"
        var $326=($325); //@line 741 "xmltok_impl.c"
        var $327=((($326)) & 255); //@line 741 "xmltok_impl.c"
        var $328=((($322)) & 255); //@line 741 "xmltok_impl.c"
        var $329=_unicode_byte_type($327, $328); //@line 741 "xmltok_impl.c"
        $iftmp_798=$329; //@line 741 "xmltok_impl.c"
        __lastLabel__ = 70; __label__ = 71; break; //@line 741 "xmltok_impl.c"
      case 71: // $bb70
        var $330=__lastLabel__ == 70 ? $329 : ($318);
        if ($330 == 5) {
          __label__ = 75; break;
        }
        else if ($330 == 6) {
          __label__ = 78; break;
        }
        else if ($330 == 7) {
          __label__ = 81; break;
        }
        else if ($330 == 9) {
          __label__ = 84; break;
        }
        else if ($330 == 10) {
          __label__ = 84; break;
        }
        else if ($330 == 11) {
          __label__ = 88; break;
        }
        else if ($330 == 17) {
          __label__ = 89; break;
        }
        else if ($330 == 21) {
          __label__ = 84; break;
        }
        else if ($330 == 22) {
          __label__ = 74; break;
        }
        else if ($330 == 24) {
          __label__ = 74; break;
        }
        else if ($330 == 29) {
          __label__ = 72; break;
        }
        else {
        __label__ = 85; break;
        }
        
      case 72: // $bb71
        var $331=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $332=$331+1; //@line 742 "xmltok_impl.c"
        var $333=HEAP[$332]; //@line 742 "xmltok_impl.c"
        var $334=($333); //@line 742 "xmltok_impl.c"
        var $335=_nmstrtPages+$334; //@line 742 "xmltok_impl.c"
        var $336=HEAP[$335]; //@line 742 "xmltok_impl.c"
        var $337=($336); //@line 742 "xmltok_impl.c"
        var $338=($337) * 8;
        var $339=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $340=$339; //@line 742 "xmltok_impl.c"
        var $341=HEAP[$340]; //@line 742 "xmltok_impl.c"
        var $342=($341) >>> 5; //@line 742 "xmltok_impl.c"
        var $343=($342); //@line 742 "xmltok_impl.c"
        var $344=($343) + ($338); //@line 742 "xmltok_impl.c"
        var $345=_namingBitmap+$344*4; //@line 742 "xmltok_impl.c"
        var $346=HEAP[$345]; //@line 742 "xmltok_impl.c"
        var $347=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $348=$347; //@line 742 "xmltok_impl.c"
        var $349=HEAP[$348]; //@line 742 "xmltok_impl.c"
        var $350=($349); //@line 742 "xmltok_impl.c"
        var $351=($350) & 31; //@line 742 "xmltok_impl.c"
        var $352=1 << ($351); //@line 742 "xmltok_impl.c"
        var $353=($352) & ($346); //@line 742 "xmltok_impl.c"
        var $354=($353)==0; //@line 742 "xmltok_impl.c"
        if ($354) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 742 "xmltok_impl.c"
      case 73: // $bb72
        var $355=$nextTokPtr_addr; //@line 742 "xmltok_impl.c"
        var $356=$ptr_addr; //@line 742 "xmltok_impl.c"
        HEAP[$355]=$356; //@line 742 "xmltok_impl.c"
        $0=0; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 74: // $bb73
        var $357=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $358=$357+2; //@line 742 "xmltok_impl.c"
        $ptr_addr=$358; //@line 742 "xmltok_impl.c"
        var $359=$enc_addr; //@line 754 "xmltok_impl.c"
        var $360=$ptr_addr; //@line 754 "xmltok_impl.c"
        var $361=$end_addr; //@line 754 "xmltok_impl.c"
        var $362=$nextTokPtr_addr; //@line 754 "xmltok_impl.c"
        var $363=_little2_scanAtts($359, $360, $361, $362); //@line 754 "xmltok_impl.c"
        $0=$363; //@line 754 "xmltok_impl.c"
        __label__ = 98; break; //@line 754 "xmltok_impl.c"
      case 75: // $bb74
        var $364=$end_addr; //@line 742 "xmltok_impl.c"
        var $365=($364); //@line 742 "xmltok_impl.c"
        var $366=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $367=($366); //@line 742 "xmltok_impl.c"
        var $368=($365) - ($367); //@line 742 "xmltok_impl.c"
        var $369=($368) <= 1; //@line 742 "xmltok_impl.c"
        if ($369) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 742 "xmltok_impl.c"
      case 76: // $bb75
        $0=-2; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 77: // $bb76
        var $370=$nextTokPtr_addr; //@line 742 "xmltok_impl.c"
        var $371=$ptr_addr; //@line 742 "xmltok_impl.c"
        HEAP[$370]=$371; //@line 742 "xmltok_impl.c"
        $0=0; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 78: // $bb77
        var $372=$end_addr; //@line 742 "xmltok_impl.c"
        var $373=($372); //@line 742 "xmltok_impl.c"
        var $374=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $375=($374); //@line 742 "xmltok_impl.c"
        var $376=($373) - ($375); //@line 742 "xmltok_impl.c"
        var $377=($376) <= 2; //@line 742 "xmltok_impl.c"
        if ($377) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 742 "xmltok_impl.c"
      case 79: // $bb78
        $0=-2; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 80: // $bb79
        var $378=$nextTokPtr_addr; //@line 742 "xmltok_impl.c"
        var $379=$ptr_addr; //@line 742 "xmltok_impl.c"
        HEAP[$378]=$379; //@line 742 "xmltok_impl.c"
        $0=0; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 81: // $bb80
        var $380=$end_addr; //@line 742 "xmltok_impl.c"
        var $381=($380); //@line 742 "xmltok_impl.c"
        var $382=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $383=($382); //@line 742 "xmltok_impl.c"
        var $384=($381) - ($383); //@line 742 "xmltok_impl.c"
        var $385=($384) <= 3; //@line 742 "xmltok_impl.c"
        if ($385) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 742 "xmltok_impl.c"
      case 82: // $bb81
        $0=-2; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 83: // $bb82
        var $386=$nextTokPtr_addr; //@line 742 "xmltok_impl.c"
        var $387=$ptr_addr; //@line 742 "xmltok_impl.c"
        HEAP[$386]=$387; //@line 742 "xmltok_impl.c"
        $0=0; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 84: // $bb85
        var $388=$ptr_addr; //@line 748 "xmltok_impl.c"
        var $389=$388+2; //@line 748 "xmltok_impl.c"
        $ptr_addr=$389; //@line 748 "xmltok_impl.c"
        __label__ = 86; break; //@line 748 "xmltok_impl.c"
      case 85: // $bb86
        var $390=$nextTokPtr_addr; //@line 751 "xmltok_impl.c"
        var $391=$ptr_addr; //@line 751 "xmltok_impl.c"
        HEAP[$390]=$391; //@line 751 "xmltok_impl.c"
        $0=0; //@line 752 "xmltok_impl.c"
        __label__ = 98; break; //@line 752 "xmltok_impl.c"
      case 86: // $bb87
        var $392=$ptr_addr; //@line 740 "xmltok_impl.c"
        var $393=$end_addr; //@line 740 "xmltok_impl.c"
        var $394=($392)!=($393); //@line 740 "xmltok_impl.c"
        if ($394) { __label__ = 68; break; } else { __label__ = 87; break; } //@line 740 "xmltok_impl.c"
      case 87: // $bb88
        $0=-1; //@line 756 "xmltok_impl.c"
        __label__ = 98; break; //@line 756 "xmltok_impl.c"
      case 88: // $gt
        var $395=$ptr_addr; //@line 760 "xmltok_impl.c"
        var $396=$395+2; //@line 760 "xmltok_impl.c"
        var $397=$nextTokPtr_addr; //@line 760 "xmltok_impl.c"
        HEAP[$397]=$396; //@line 760 "xmltok_impl.c"
        $0=2; //@line 761 "xmltok_impl.c"
        __label__ = 98; break; //@line 761 "xmltok_impl.c"
      case 89: // $sol
        var $398=$ptr_addr; //@line 764 "xmltok_impl.c"
        var $399=$398+2; //@line 764 "xmltok_impl.c"
        $ptr_addr=$399; //@line 764 "xmltok_impl.c"
        var $400=$ptr_addr; //@line 765 "xmltok_impl.c"
        var $401=$end_addr; //@line 765 "xmltok_impl.c"
        var $402=($400)==($401); //@line 765 "xmltok_impl.c"
        if ($402) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 765 "xmltok_impl.c"
      case 90: // $bb89
        $0=-1; //@line 766 "xmltok_impl.c"
        __label__ = 98; break; //@line 766 "xmltok_impl.c"
      case 91: // $bb90
        var $403=$ptr_addr; //@line 767 "xmltok_impl.c"
        var $404=$403+1; //@line 767 "xmltok_impl.c"
        var $405=HEAP[$404]; //@line 767 "xmltok_impl.c"
        var $406=($405)!=0; //@line 767 "xmltok_impl.c"
        if ($406) { __label__ = 93; break; } else { __label__ = 92; break; } //@line 767 "xmltok_impl.c"
      case 92: // $bb91
        var $407=$ptr_addr; //@line 767 "xmltok_impl.c"
        var $408=$407; //@line 767 "xmltok_impl.c"
        var $409=HEAP[$408]; //@line 767 "xmltok_impl.c"
        var $410=($409)!=62; //@line 767 "xmltok_impl.c"
        if ($410) { __label__ = 93; break; } else { __label__ = 94; break; } //@line 767 "xmltok_impl.c"
      case 93: // $bb92
        var $411=$nextTokPtr_addr; //@line 768 "xmltok_impl.c"
        var $412=$ptr_addr; //@line 768 "xmltok_impl.c"
        HEAP[$411]=$412; //@line 768 "xmltok_impl.c"
        $0=0; //@line 769 "xmltok_impl.c"
        __label__ = 98; break; //@line 769 "xmltok_impl.c"
      case 94: // $bb93
        var $413=$ptr_addr; //@line 771 "xmltok_impl.c"
        var $414=$413+2; //@line 771 "xmltok_impl.c"
        var $415=$nextTokPtr_addr; //@line 771 "xmltok_impl.c"
        HEAP[$415]=$414; //@line 771 "xmltok_impl.c"
        $0=4; //@line 772 "xmltok_impl.c"
        __label__ = 98; break; //@line 772 "xmltok_impl.c"
      case 95: // $bb94
        var $416=$nextTokPtr_addr; //@line 774 "xmltok_impl.c"
        var $417=$ptr_addr; //@line 774 "xmltok_impl.c"
        HEAP[$416]=$417; //@line 774 "xmltok_impl.c"
        $0=0; //@line 775 "xmltok_impl.c"
        __label__ = 98; break; //@line 775 "xmltok_impl.c"
      case 96: // $bb95
        var $418=$ptr_addr; //@line 716 "xmltok_impl.c"
        var $419=$end_addr; //@line 716 "xmltok_impl.c"
        var $420=($418)!=($419); //@line 716 "xmltok_impl.c"
        if ($420) { __label__ = 30; break; } else { __label__ = 97; break; } //@line 716 "xmltok_impl.c"
      case 97: // $bb96
        $0=-1; //@line 778 "xmltok_impl.c"
        __label__ = 98; break; //@line 778 "xmltok_impl.c"
      case 98: // $bb97
        var $421=$0; //@line 689 "xmltok_impl.c"
        $retval=$421; //@line 689 "xmltok_impl.c"
        var $retval98=$retval; //@line 689 "xmltok_impl.c"
        ;
        return $retval98; //@line 689 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_contentTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_819;
        var $iftmp_811;
        var $iftmp_809;
        var $0;
        var $n;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 785 "xmltok_impl.c"
        var $2=$end_addr; //@line 785 "xmltok_impl.c"
        var $3=($1)==($2); //@line 785 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 785 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 786 "xmltok_impl.c"
        __label__ = 68; break; //@line 786 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$end_addr; //@line 788 "xmltok_impl.c"
        var $5=($4); //@line 788 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 788 "xmltok_impl.c"
        var $7=($6); //@line 788 "xmltok_impl.c"
        var $8=($5) - ($7); //@line 788 "xmltok_impl.c"
        $n=$8; //@line 788 "xmltok_impl.c"
        var $9=$n; //@line 789 "xmltok_impl.c"
        var $10=($9) & 1; //@line 789 "xmltok_impl.c"
        var $11=((($10)) & 255); //@line 789 "xmltok_impl.c"
        var $toBool=($11)!=0; //@line 789 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 789 "xmltok_impl.c"
      case 3: // $bb2
        var $12=$n; //@line 790 "xmltok_impl.c"
        var $13=($12) & -2; //@line 790 "xmltok_impl.c"
        $n=$13; //@line 790 "xmltok_impl.c"
        var $14=$n; //@line 791 "xmltok_impl.c"
        var $15=($14)==0; //@line 791 "xmltok_impl.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 791 "xmltok_impl.c"
      case 4: // $bb3
        $0=-1; //@line 792 "xmltok_impl.c"
        __label__ = 68; break; //@line 792 "xmltok_impl.c"
      case 5: // $bb4
        var $16=$ptr_addr; //@line 793 "xmltok_impl.c"
        var $17=$n; //@line 793 "xmltok_impl.c"
        var $18=$16+$17; //@line 793 "xmltok_impl.c"
        $end_addr=$18; //@line 793 "xmltok_impl.c"
        __label__ = 6; break; //@line 793 "xmltok_impl.c"
      case 6: // $bb5
        var $19=$ptr_addr; //@line 796 "xmltok_impl.c"
        var $20=$19+1; //@line 796 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 796 "xmltok_impl.c"
        var $22=($21)==0; //@line 796 "xmltok_impl.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 796 "xmltok_impl.c"
      case 7: // $bb6
        var $23=$enc_addr; //@line 796 "xmltok_impl.c"
        var $24=$23; //@line 796 "xmltok_impl.c"
        var $25=$ptr_addr; //@line 796 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 796 "xmltok_impl.c"
        var $27=($26); //@line 796 "xmltok_impl.c"
        var $28=$24+76; //@line 796 "xmltok_impl.c"
        var $29=$28+$27; //@line 796 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 796 "xmltok_impl.c"
        var $31=($30); //@line 796 "xmltok_impl.c"
        $iftmp_809=$31; //@line 796 "xmltok_impl.c"
        __lastLabel__ = 7; __label__ = 9; break; //@line 796 "xmltok_impl.c"
      case 8: // $bb7
        var $32=$ptr_addr; //@line 796 "xmltok_impl.c"
        var $33=$32; //@line 796 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 796 "xmltok_impl.c"
        var $35=($34); //@line 796 "xmltok_impl.c"
        var $36=$ptr_addr; //@line 796 "xmltok_impl.c"
        var $37=$36+1; //@line 796 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 796 "xmltok_impl.c"
        var $39=($38); //@line 796 "xmltok_impl.c"
        var $40=((($39)) & 255); //@line 796 "xmltok_impl.c"
        var $41=((($35)) & 255); //@line 796 "xmltok_impl.c"
        var $42=_unicode_byte_type($40, $41); //@line 796 "xmltok_impl.c"
        $iftmp_809=$42; //@line 796 "xmltok_impl.c"
        __lastLabel__ = 8; __label__ = 9; break; //@line 796 "xmltok_impl.c"
      case 9: // $bb8
        var $43=__lastLabel__ == 8 ? $42 : ($31);
        if ($43 == 0) {
          __label__ = 40; break;
        }
        else if ($43 == 1) {
          __label__ = 40; break;
        }
        else if ($43 == 2) {
          __label__ = 10; break;
        }
        else if ($43 == 3) {
          __label__ = 11; break;
        }
        else if ($43 == 4) {
          __label__ = 21; break;
        }
        else if ($43 == 5) {
          __label__ = 31; break;
        }
        else if ($43 == 6) {
          __label__ = 34; break;
        }
        else if ($43 == 7) {
          __label__ = 37; break;
        }
        else if ($43 == 8) {
          __label__ = 40; break;
        }
        else if ($43 == 9) {
          __label__ = 12; break;
        }
        else if ($43 == 10) {
          __label__ = 20; break;
        }
        else {
        __label__ = 41; break;
        }
        
      case 10: // $bb9
        var $44=$ptr_addr; //@line 798 "xmltok_impl.c"
        var $45=$44+2; //@line 798 "xmltok_impl.c"
        var $46=$enc_addr; //@line 798 "xmltok_impl.c"
        var $47=$end_addr; //@line 798 "xmltok_impl.c"
        var $48=$nextTokPtr_addr; //@line 798 "xmltok_impl.c"
        var $49=_little2_scanLt($46, $45, $47, $48); //@line 798 "xmltok_impl.c"
        $0=$49; //@line 798 "xmltok_impl.c"
        __label__ = 68; break; //@line 798 "xmltok_impl.c"
      case 11: // $bb10
        var $50=$ptr_addr; //@line 800 "xmltok_impl.c"
        var $51=$50+2; //@line 800 "xmltok_impl.c"
        var $52=$enc_addr; //@line 800 "xmltok_impl.c"
        var $53=$end_addr; //@line 800 "xmltok_impl.c"
        var $54=$nextTokPtr_addr; //@line 800 "xmltok_impl.c"
        var $55=_little2_scanRef($52, $51, $53, $54); //@line 800 "xmltok_impl.c"
        $0=$55; //@line 800 "xmltok_impl.c"
        __label__ = 68; break; //@line 800 "xmltok_impl.c"
      case 12: // $bb11
        var $56=$ptr_addr; //@line 802 "xmltok_impl.c"
        var $57=$56+2; //@line 802 "xmltok_impl.c"
        $ptr_addr=$57; //@line 802 "xmltok_impl.c"
        var $58=$ptr_addr; //@line 803 "xmltok_impl.c"
        var $59=$end_addr; //@line 803 "xmltok_impl.c"
        var $60=($58)==($59); //@line 803 "xmltok_impl.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 803 "xmltok_impl.c"
      case 13: // $bb12
        $0=-3; //@line 804 "xmltok_impl.c"
        __label__ = 68; break; //@line 804 "xmltok_impl.c"
      case 14: // $bb13
        var $61=$ptr_addr; //@line 805 "xmltok_impl.c"
        var $62=$61+1; //@line 805 "xmltok_impl.c"
        var $63=HEAP[$62]; //@line 805 "xmltok_impl.c"
        var $64=($63)==0; //@line 805 "xmltok_impl.c"
        if ($64) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 805 "xmltok_impl.c"
      case 15: // $bb14
        var $65=$enc_addr; //@line 805 "xmltok_impl.c"
        var $66=$65; //@line 805 "xmltok_impl.c"
        var $67=$ptr_addr; //@line 805 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 805 "xmltok_impl.c"
        var $69=($68); //@line 805 "xmltok_impl.c"
        var $70=$66+76; //@line 805 "xmltok_impl.c"
        var $71=$70+$69; //@line 805 "xmltok_impl.c"
        var $72=HEAP[$71]; //@line 805 "xmltok_impl.c"
        var $73=($72)==10; //@line 805 "xmltok_impl.c"
        var $74=($73); //@line 805 "xmltok_impl.c"
        $iftmp_811=$74; //@line 805 "xmltok_impl.c"
        __lastLabel__ = 15; __label__ = 17; break; //@line 805 "xmltok_impl.c"
      case 16: // $bb15
        var $75=$ptr_addr; //@line 805 "xmltok_impl.c"
        var $76=$75; //@line 805 "xmltok_impl.c"
        var $77=HEAP[$76]; //@line 805 "xmltok_impl.c"
        var $78=($77); //@line 805 "xmltok_impl.c"
        var $79=$ptr_addr; //@line 805 "xmltok_impl.c"
        var $80=$79+1; //@line 805 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 805 "xmltok_impl.c"
        var $82=($81); //@line 805 "xmltok_impl.c"
        var $83=((($82)) & 255); //@line 805 "xmltok_impl.c"
        var $84=((($78)) & 255); //@line 805 "xmltok_impl.c"
        var $85=_unicode_byte_type($83, $84); //@line 805 "xmltok_impl.c"
        var $86=($85)==10; //@line 805 "xmltok_impl.c"
        var $87=($86); //@line 805 "xmltok_impl.c"
        $iftmp_811=$87; //@line 805 "xmltok_impl.c"
        __lastLabel__ = 16; __label__ = 17; break; //@line 805 "xmltok_impl.c"
      case 17: // $bb16
        var $88=__lastLabel__ == 16 ? $87 : ($74);
        var $toBool17=($88)!=0; //@line 805 "xmltok_impl.c"
        if ($toBool17) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 805 "xmltok_impl.c"
      case 18: // $bb18
        var $89=$ptr_addr; //@line 806 "xmltok_impl.c"
        var $90=$89+2; //@line 806 "xmltok_impl.c"
        $ptr_addr=$90; //@line 806 "xmltok_impl.c"
        __label__ = 19; break; //@line 806 "xmltok_impl.c"
      case 19: // $bb19
        var $91=$nextTokPtr_addr; //@line 807 "xmltok_impl.c"
        var $92=$ptr_addr; //@line 807 "xmltok_impl.c"
        HEAP[$91]=$92; //@line 807 "xmltok_impl.c"
        $0=7; //@line 808 "xmltok_impl.c"
        __label__ = 68; break; //@line 808 "xmltok_impl.c"
      case 20: // $bb20
        var $93=$ptr_addr; //@line 810 "xmltok_impl.c"
        var $94=$93+2; //@line 810 "xmltok_impl.c"
        var $95=$nextTokPtr_addr; //@line 810 "xmltok_impl.c"
        HEAP[$95]=$94; //@line 810 "xmltok_impl.c"
        $0=7; //@line 811 "xmltok_impl.c"
        __label__ = 68; break; //@line 811 "xmltok_impl.c"
      case 21: // $bb21
        var $96=$ptr_addr; //@line 813 "xmltok_impl.c"
        var $97=$96+2; //@line 813 "xmltok_impl.c"
        $ptr_addr=$97; //@line 813 "xmltok_impl.c"
        var $98=$ptr_addr; //@line 814 "xmltok_impl.c"
        var $99=$end_addr; //@line 814 "xmltok_impl.c"
        var $100=($98)==($99); //@line 814 "xmltok_impl.c"
        if ($100) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 814 "xmltok_impl.c"
      case 22: // $bb22
        $0=-5; //@line 815 "xmltok_impl.c"
        __label__ = 68; break; //@line 815 "xmltok_impl.c"
      case 23: // $bb23
        var $101=$ptr_addr; //@line 816 "xmltok_impl.c"
        var $102=$101+1; //@line 816 "xmltok_impl.c"
        var $103=HEAP[$102]; //@line 816 "xmltok_impl.c"
        var $104=($103)!=0; //@line 816 "xmltok_impl.c"
        if ($104) { __label__ = 66; break; } else { __label__ = 24; break; } //@line 816 "xmltok_impl.c"
      case 24: // $bb24
        var $105=$ptr_addr; //@line 816 "xmltok_impl.c"
        var $106=$105; //@line 816 "xmltok_impl.c"
        var $107=HEAP[$106]; //@line 816 "xmltok_impl.c"
        var $108=($107)!=93; //@line 816 "xmltok_impl.c"
        if ($108) { __label__ = 66; break; } else { __label__ = 25; break; } //@line 816 "xmltok_impl.c"
      case 25: // $bb25
        var $109=$ptr_addr; //@line 818 "xmltok_impl.c"
        var $110=$109+2; //@line 818 "xmltok_impl.c"
        $ptr_addr=$110; //@line 818 "xmltok_impl.c"
        var $111=$ptr_addr; //@line 819 "xmltok_impl.c"
        var $112=$end_addr; //@line 819 "xmltok_impl.c"
        var $113=($111)==($112); //@line 819 "xmltok_impl.c"
        if ($113) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 819 "xmltok_impl.c"
      case 26: // $bb26
        $0=-5; //@line 820 "xmltok_impl.c"
        __label__ = 68; break; //@line 820 "xmltok_impl.c"
      case 27: // $bb27
        var $114=$ptr_addr; //@line 821 "xmltok_impl.c"
        var $115=$114+1; //@line 821 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 821 "xmltok_impl.c"
        var $117=($116)!=0; //@line 821 "xmltok_impl.c"
        if ($117) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 821 "xmltok_impl.c"
      case 28: // $bb28
        var $118=$ptr_addr; //@line 821 "xmltok_impl.c"
        var $119=$118; //@line 821 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 821 "xmltok_impl.c"
        var $121=($120)!=62; //@line 821 "xmltok_impl.c"
        if ($121) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 821 "xmltok_impl.c"
      case 29: // $bb29
        var $122=$ptr_addr; //@line 822 "xmltok_impl.c"
        var $123=$122+-2; //@line 822 "xmltok_impl.c"
        $ptr_addr=$123; //@line 822 "xmltok_impl.c"
        __label__ = 66; break; //@line 822 "xmltok_impl.c"
      case 30: // $bb30
        var $124=$nextTokPtr_addr; //@line 825 "xmltok_impl.c"
        var $125=$ptr_addr; //@line 825 "xmltok_impl.c"
        HEAP[$124]=$125; //@line 825 "xmltok_impl.c"
        $0=0; //@line 826 "xmltok_impl.c"
        __label__ = 68; break; //@line 826 "xmltok_impl.c"
      case 31: // $bb31
        var $126=$end_addr; //@line 827 "xmltok_impl.c"
        var $127=($126); //@line 827 "xmltok_impl.c"
        var $128=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $129=($128); //@line 827 "xmltok_impl.c"
        var $130=($127) - ($129); //@line 827 "xmltok_impl.c"
        var $131=($130) <= 1; //@line 827 "xmltok_impl.c"
        if ($131) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 827 "xmltok_impl.c"
      case 32: // $bb32
        $0=-2; //@line 827 "xmltok_impl.c"
        __label__ = 68; break; //@line 827 "xmltok_impl.c"
      case 33: // $bb33
        var $132=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $133=$132+2; //@line 827 "xmltok_impl.c"
        $ptr_addr=$133; //@line 827 "xmltok_impl.c"
        __label__ = 66; break; //@line 827 "xmltok_impl.c"
      case 34: // $bb34
        var $134=$end_addr; //@line 827 "xmltok_impl.c"
        var $135=($134); //@line 827 "xmltok_impl.c"
        var $136=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $137=($136); //@line 827 "xmltok_impl.c"
        var $138=($135) - ($137); //@line 827 "xmltok_impl.c"
        var $139=($138) <= 2; //@line 827 "xmltok_impl.c"
        if ($139) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 827 "xmltok_impl.c"
      case 35: // $bb35
        $0=-2; //@line 827 "xmltok_impl.c"
        __label__ = 68; break; //@line 827 "xmltok_impl.c"
      case 36: // $bb36
        var $140=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $141=$140+3; //@line 827 "xmltok_impl.c"
        $ptr_addr=$141; //@line 827 "xmltok_impl.c"
        __label__ = 66; break; //@line 827 "xmltok_impl.c"
      case 37: // $bb37
        var $142=$end_addr; //@line 827 "xmltok_impl.c"
        var $143=($142); //@line 827 "xmltok_impl.c"
        var $144=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $145=($144); //@line 827 "xmltok_impl.c"
        var $146=($143) - ($145); //@line 827 "xmltok_impl.c"
        var $147=($146) <= 3; //@line 827 "xmltok_impl.c"
        if ($147) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 827 "xmltok_impl.c"
      case 38: // $bb38
        $0=-2; //@line 827 "xmltok_impl.c"
        __label__ = 68; break; //@line 827 "xmltok_impl.c"
      case 39: // $bb39
        var $148=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $149=$148+4; //@line 827 "xmltok_impl.c"
        $ptr_addr=$149; //@line 827 "xmltok_impl.c"
        __label__ = 66; break; //@line 827 "xmltok_impl.c"
      case 40: // $bb40
        var $150=$nextTokPtr_addr; //@line 827 "xmltok_impl.c"
        var $151=$ptr_addr; //@line 827 "xmltok_impl.c"
        HEAP[$150]=$151; //@line 827 "xmltok_impl.c"
        $0=0; //@line 827 "xmltok_impl.c"
        __label__ = 68; break; //@line 827 "xmltok_impl.c"
      case 41: // $bb41
        var $152=$ptr_addr; //@line 829 "xmltok_impl.c"
        var $153=$152+2; //@line 829 "xmltok_impl.c"
        $ptr_addr=$153; //@line 829 "xmltok_impl.c"
        __label__ = 66; break; //@line 829 "xmltok_impl.c"
      case 42: // $bb43
        var $154=$ptr_addr; //@line 833 "xmltok_impl.c"
        var $155=$154+1; //@line 833 "xmltok_impl.c"
        var $156=HEAP[$155]; //@line 833 "xmltok_impl.c"
        var $157=($156)==0; //@line 833 "xmltok_impl.c"
        if ($157) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 833 "xmltok_impl.c"
      case 43: // $bb44
        var $158=$enc_addr; //@line 833 "xmltok_impl.c"
        var $159=$158; //@line 833 "xmltok_impl.c"
        var $160=$ptr_addr; //@line 833 "xmltok_impl.c"
        var $161=HEAP[$160]; //@line 833 "xmltok_impl.c"
        var $162=($161); //@line 833 "xmltok_impl.c"
        var $163=$159+76; //@line 833 "xmltok_impl.c"
        var $164=$163+$162; //@line 833 "xmltok_impl.c"
        var $165=HEAP[$164]; //@line 833 "xmltok_impl.c"
        var $166=($165); //@line 833 "xmltok_impl.c"
        $iftmp_819=$166; //@line 833 "xmltok_impl.c"
        __lastLabel__ = 43; __label__ = 45; break; //@line 833 "xmltok_impl.c"
      case 44: // $bb45
        var $167=$ptr_addr; //@line 833 "xmltok_impl.c"
        var $168=$167; //@line 833 "xmltok_impl.c"
        var $169=HEAP[$168]; //@line 833 "xmltok_impl.c"
        var $170=($169); //@line 833 "xmltok_impl.c"
        var $171=$ptr_addr; //@line 833 "xmltok_impl.c"
        var $172=$171+1; //@line 833 "xmltok_impl.c"
        var $173=HEAP[$172]; //@line 833 "xmltok_impl.c"
        var $174=($173); //@line 833 "xmltok_impl.c"
        var $175=((($174)) & 255); //@line 833 "xmltok_impl.c"
        var $176=((($170)) & 255); //@line 833 "xmltok_impl.c"
        var $177=_unicode_byte_type($175, $176); //@line 833 "xmltok_impl.c"
        $iftmp_819=$177; //@line 833 "xmltok_impl.c"
        __lastLabel__ = 44; __label__ = 45; break; //@line 833 "xmltok_impl.c"
      case 45: // $bb46
        var $178=__lastLabel__ == 44 ? $177 : ($166);
        if ($178 == 0) {
          __label__ = 64; break;
        }
        else if ($178 == 1) {
          __label__ = 64; break;
        }
        else if ($178 == 2) {
          __label__ = 64; break;
        }
        else if ($178 == 3) {
          __label__ = 64; break;
        }
        else if ($178 == 4) {
          __label__ = 55; break;
        }
        else if ($178 == 5) {
          __label__ = 46; break;
        }
        else if ($178 == 6) {
          __label__ = 49; break;
        }
        else if ($178 == 7) {
          __label__ = 52; break;
        }
        else if ($178 == 8) {
          __label__ = 64; break;
        }
        else if ($178 == 9) {
          __label__ = 64; break;
        }
        else if ($178 == 10) {
          __label__ = 64; break;
        }
        else {
        __label__ = 65; break;
        }
        
      case 46: // $bb47
        var $179=$end_addr; //@line 842 "xmltok_impl.c"
        var $180=($179); //@line 842 "xmltok_impl.c"
        var $181=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $182=($181); //@line 842 "xmltok_impl.c"
        var $183=($180) - ($182); //@line 842 "xmltok_impl.c"
        var $184=($183) <= 1; //@line 842 "xmltok_impl.c"
        if ($184) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 842 "xmltok_impl.c"
      case 47: // $bb48
        var $185=$nextTokPtr_addr; //@line 842 "xmltok_impl.c"
        var $186=$ptr_addr; //@line 842 "xmltok_impl.c"
        HEAP[$185]=$186; //@line 842 "xmltok_impl.c"
        $0=6; //@line 842 "xmltok_impl.c"
        __label__ = 68; break; //@line 842 "xmltok_impl.c"
      case 48: // $bb49
        var $187=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $188=$187+2; //@line 842 "xmltok_impl.c"
        $ptr_addr=$188; //@line 842 "xmltok_impl.c"
        __label__ = 66; break; //@line 842 "xmltok_impl.c"
      case 49: // $bb50
        var $189=$end_addr; //@line 842 "xmltok_impl.c"
        var $190=($189); //@line 842 "xmltok_impl.c"
        var $191=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $192=($191); //@line 842 "xmltok_impl.c"
        var $193=($190) - ($192); //@line 842 "xmltok_impl.c"
        var $194=($193) <= 2; //@line 842 "xmltok_impl.c"
        if ($194) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 842 "xmltok_impl.c"
      case 50: // $bb51
        var $195=$nextTokPtr_addr; //@line 842 "xmltok_impl.c"
        var $196=$ptr_addr; //@line 842 "xmltok_impl.c"
        HEAP[$195]=$196; //@line 842 "xmltok_impl.c"
        $0=6; //@line 842 "xmltok_impl.c"
        __label__ = 68; break; //@line 842 "xmltok_impl.c"
      case 51: // $bb52
        var $197=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $198=$197+3; //@line 842 "xmltok_impl.c"
        $ptr_addr=$198; //@line 842 "xmltok_impl.c"
        __label__ = 66; break; //@line 842 "xmltok_impl.c"
      case 52: // $bb53
        var $199=$end_addr; //@line 842 "xmltok_impl.c"
        var $200=($199); //@line 842 "xmltok_impl.c"
        var $201=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $202=($201); //@line 842 "xmltok_impl.c"
        var $203=($200) - ($202); //@line 842 "xmltok_impl.c"
        var $204=($203) <= 3; //@line 842 "xmltok_impl.c"
        if ($204) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 842 "xmltok_impl.c"
      case 53: // $bb54
        var $205=$nextTokPtr_addr; //@line 842 "xmltok_impl.c"
        var $206=$ptr_addr; //@line 842 "xmltok_impl.c"
        HEAP[$205]=$206; //@line 842 "xmltok_impl.c"
        $0=6; //@line 842 "xmltok_impl.c"
        __label__ = 68; break; //@line 842 "xmltok_impl.c"
      case 54: // $bb55
        var $207=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $208=$207+4; //@line 842 "xmltok_impl.c"
        $ptr_addr=$208; //@line 842 "xmltok_impl.c"
        __label__ = 66; break; //@line 842 "xmltok_impl.c"
      case 55: // $bb56
        var $209=$ptr_addr; //@line 845 "xmltok_impl.c"
        var $210=$209+2; //@line 845 "xmltok_impl.c"
        var $211=$end_addr; //@line 845 "xmltok_impl.c"
        var $212=($210)!=($211); //@line 845 "xmltok_impl.c"
        if ($212) { __label__ = 56; break; } else { __label__ = 64; break; } //@line 845 "xmltok_impl.c"
      case 56: // $bb57
        var $213=$ptr_addr; //@line 846 "xmltok_impl.c"
        var $214=$213+2; //@line 846 "xmltok_impl.c"
        var $215=$214+1; //@line 846 "xmltok_impl.c"
        var $216=HEAP[$215]; //@line 846 "xmltok_impl.c"
        var $217=($216)!=0; //@line 846 "xmltok_impl.c"
        if ($217) { __label__ = 58; break; } else { __label__ = 57; break; } //@line 846 "xmltok_impl.c"
      case 57: // $bb58
        var $218=$ptr_addr; //@line 846 "xmltok_impl.c"
        var $219=$218+2; //@line 846 "xmltok_impl.c"
        var $220=$219; //@line 846 "xmltok_impl.c"
        var $221=HEAP[$220]; //@line 846 "xmltok_impl.c"
        var $222=($221)!=93; //@line 846 "xmltok_impl.c"
        if ($222) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 846 "xmltok_impl.c"
      case 58: // $bb59
        var $223=$ptr_addr; //@line 847 "xmltok_impl.c"
        var $224=$223+2; //@line 847 "xmltok_impl.c"
        $ptr_addr=$224; //@line 847 "xmltok_impl.c"
        __label__ = 66; break; //@line 847 "xmltok_impl.c"
      case 59: // $bb60
        var $225=$ptr_addr; //@line 850 "xmltok_impl.c"
        var $226=$225+4; //@line 850 "xmltok_impl.c"
        var $227=$end_addr; //@line 850 "xmltok_impl.c"
        var $228=($226)!=($227); //@line 850 "xmltok_impl.c"
        if ($228) { __label__ = 60; break; } else { __label__ = 64; break; } //@line 850 "xmltok_impl.c"
      case 60: // $bb61
        var $229=$ptr_addr; //@line 851 "xmltok_impl.c"
        var $230=$229+4; //@line 851 "xmltok_impl.c"
        var $231=$230+1; //@line 851 "xmltok_impl.c"
        var $232=HEAP[$231]; //@line 851 "xmltok_impl.c"
        var $233=($232)!=0; //@line 851 "xmltok_impl.c"
        if ($233) { __label__ = 62; break; } else { __label__ = 61; break; } //@line 851 "xmltok_impl.c"
      case 61: // $bb62
        var $234=$ptr_addr; //@line 851 "xmltok_impl.c"
        var $235=$234+4; //@line 851 "xmltok_impl.c"
        var $236=$235; //@line 851 "xmltok_impl.c"
        var $237=HEAP[$236]; //@line 851 "xmltok_impl.c"
        var $238=($237)!=62; //@line 851 "xmltok_impl.c"
        if ($238) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 851 "xmltok_impl.c"
      case 62: // $bb63
        var $239=$ptr_addr; //@line 852 "xmltok_impl.c"
        var $240=$239+2; //@line 852 "xmltok_impl.c"
        $ptr_addr=$240; //@line 852 "xmltok_impl.c"
        __label__ = 66; break; //@line 852 "xmltok_impl.c"
      case 63: // $bb64
        var $241=$ptr_addr; //@line 855 "xmltok_impl.c"
        var $242=$241+4; //@line 855 "xmltok_impl.c"
        var $243=$nextTokPtr_addr; //@line 855 "xmltok_impl.c"
        HEAP[$243]=$242; //@line 855 "xmltok_impl.c"
        $0=0; //@line 856 "xmltok_impl.c"
        __label__ = 68; break; //@line 856 "xmltok_impl.c"
      case 64: // $bb65
        var $244=$nextTokPtr_addr; //@line 867 "xmltok_impl.c"
        var $245=$ptr_addr; //@line 867 "xmltok_impl.c"
        HEAP[$244]=$245; //@line 867 "xmltok_impl.c"
        $0=6; //@line 868 "xmltok_impl.c"
        __label__ = 68; break; //@line 868 "xmltok_impl.c"
      case 65: // $bb66
        var $246=$ptr_addr; //@line 870 "xmltok_impl.c"
        var $247=$246+2; //@line 870 "xmltok_impl.c"
        $ptr_addr=$247; //@line 870 "xmltok_impl.c"
        __label__ = 66; break; //@line 870 "xmltok_impl.c"
      case 66: // $bb67
        var $248=$ptr_addr; //@line 832 "xmltok_impl.c"
        var $249=$end_addr; //@line 832 "xmltok_impl.c"
        var $250=($248)!=($249); //@line 832 "xmltok_impl.c"
        if ($250) { __label__ = 42; break; } else { __label__ = 67; break; } //@line 832 "xmltok_impl.c"
      case 67: // $bb68
        var $251=$nextTokPtr_addr; //@line 874 "xmltok_impl.c"
        var $252=$ptr_addr; //@line 874 "xmltok_impl.c"
        HEAP[$251]=$252; //@line 874 "xmltok_impl.c"
        $0=6; //@line 875 "xmltok_impl.c"
        __label__ = 68; break; //@line 875 "xmltok_impl.c"
      case 68: // $bb69
        var $253=$0; //@line 786 "xmltok_impl.c"
        $retval=$253; //@line 786 "xmltok_impl.c"
        var $retval70=$retval; //@line 786 "xmltok_impl.c"
        ;
        return $retval70; //@line 786 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanPercent($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_835;
        var $iftmp_827;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 884 "xmltok_impl.c"
        var $2=$end_addr; //@line 884 "xmltok_impl.c"
        var $3=($1)==($2); //@line 884 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 884 "xmltok_impl.c"
      case 1: // $bb
        $0=-22; //@line 885 "xmltok_impl.c"
        __label__ = 40; break; //@line 885 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 886 "xmltok_impl.c"
        var $5=$4+1; //@line 886 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 886 "xmltok_impl.c"
        var $7=($6)==0; //@line 886 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 886 "xmltok_impl.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 886 "xmltok_impl.c"
        var $9=$8; //@line 886 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 886 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 886 "xmltok_impl.c"
        var $12=($11); //@line 886 "xmltok_impl.c"
        var $13=$9+76; //@line 886 "xmltok_impl.c"
        var $14=$13+$12; //@line 886 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 886 "xmltok_impl.c"
        var $16=($15); //@line 886 "xmltok_impl.c"
        $iftmp_827=$16; //@line 886 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 886 "xmltok_impl.c"
      case 4: // $bb3
        var $17=$ptr_addr; //@line 886 "xmltok_impl.c"
        var $18=$17; //@line 886 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 886 "xmltok_impl.c"
        var $20=($19); //@line 886 "xmltok_impl.c"
        var $21=$ptr_addr; //@line 886 "xmltok_impl.c"
        var $22=$21+1; //@line 886 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 886 "xmltok_impl.c"
        var $24=($23); //@line 886 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 886 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 886 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 886 "xmltok_impl.c"
        $iftmp_827=$27; //@line 886 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 886 "xmltok_impl.c"
      case 5: // $bb4
        var $28=__lastLabel__ == 4 ? $27 : ($16);
        if ($28 == 5) {
          __label__ = 9; break;
        }
        else if ($28 == 6) {
          __label__ = 12; break;
        }
        else if ($28 == 7) {
          __label__ = 15; break;
        }
        else if ($28 == 9) {
          __label__ = 18; break;
        }
        else if ($28 == 10) {
          __label__ = 18; break;
        }
        else if ($28 == 21) {
          __label__ = 18; break;
        }
        else if ($28 == 22) {
          __label__ = 8; break;
        }
        else if ($28 == 24) {
          __label__ = 8; break;
        }
        else if ($28 == 29) {
          __label__ = 6; break;
        }
        else if ($28 == 30) {
          __label__ = 18; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 6: // $bb5
        var $29=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $30=$29+1; //@line 887 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 887 "xmltok_impl.c"
        var $32=($31); //@line 887 "xmltok_impl.c"
        var $33=_nmstrtPages+$32; //@line 887 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 887 "xmltok_impl.c"
        var $35=($34); //@line 887 "xmltok_impl.c"
        var $36=($35) * 8;
        var $37=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $38=$37; //@line 887 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 887 "xmltok_impl.c"
        var $40=($39) >>> 5; //@line 887 "xmltok_impl.c"
        var $41=($40); //@line 887 "xmltok_impl.c"
        var $42=($41) + ($36); //@line 887 "xmltok_impl.c"
        var $43=_namingBitmap+$42*4; //@line 887 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 887 "xmltok_impl.c"
        var $45=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $46=$45; //@line 887 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 887 "xmltok_impl.c"
        var $48=($47); //@line 887 "xmltok_impl.c"
        var $49=($48) & 31; //@line 887 "xmltok_impl.c"
        var $50=1 << ($49); //@line 887 "xmltok_impl.c"
        var $51=($50) & ($44); //@line 887 "xmltok_impl.c"
        var $52=($51)==0; //@line 887 "xmltok_impl.c"
        if ($52) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 887 "xmltok_impl.c"
      case 7: // $bb6
        var $53=$nextTokPtr_addr; //@line 887 "xmltok_impl.c"
        var $54=$ptr_addr; //@line 887 "xmltok_impl.c"
        HEAP[$53]=$54; //@line 887 "xmltok_impl.c"
        $0=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 8: // $bb7
        var $55=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $56=$55+2; //@line 887 "xmltok_impl.c"
        $ptr_addr=$56; //@line 887 "xmltok_impl.c"
        __label__ = 38; break; //@line 887 "xmltok_impl.c"
      case 9: // $bb8
        var $57=$end_addr; //@line 887 "xmltok_impl.c"
        var $58=($57); //@line 887 "xmltok_impl.c"
        var $59=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $60=($59); //@line 887 "xmltok_impl.c"
        var $61=($58) - ($60); //@line 887 "xmltok_impl.c"
        var $62=($61) <= 1; //@line 887 "xmltok_impl.c"
        if ($62) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 887 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 11: // $bb10
        var $63=$nextTokPtr_addr; //@line 887 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 887 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 887 "xmltok_impl.c"
        $0=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 12: // $bb11
        var $65=$end_addr; //@line 887 "xmltok_impl.c"
        var $66=($65); //@line 887 "xmltok_impl.c"
        var $67=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $68=($67); //@line 887 "xmltok_impl.c"
        var $69=($66) - ($68); //@line 887 "xmltok_impl.c"
        var $70=($69) <= 2; //@line 887 "xmltok_impl.c"
        if ($70) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 887 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 14: // $bb13
        var $71=$nextTokPtr_addr; //@line 887 "xmltok_impl.c"
        var $72=$ptr_addr; //@line 887 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 887 "xmltok_impl.c"
        $0=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 15: // $bb14
        var $73=$end_addr; //@line 887 "xmltok_impl.c"
        var $74=($73); //@line 887 "xmltok_impl.c"
        var $75=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $76=($75); //@line 887 "xmltok_impl.c"
        var $77=($74) - ($76); //@line 887 "xmltok_impl.c"
        var $78=($77) <= 3; //@line 887 "xmltok_impl.c"
        if ($78) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 887 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 17: // $bb16
        var $79=$nextTokPtr_addr; //@line 887 "xmltok_impl.c"
        var $80=$ptr_addr; //@line 887 "xmltok_impl.c"
        HEAP[$79]=$80; //@line 887 "xmltok_impl.c"
        $0=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 18: // $bb17
        var $81=$nextTokPtr_addr; //@line 889 "xmltok_impl.c"
        var $82=$ptr_addr; //@line 889 "xmltok_impl.c"
        HEAP[$81]=$82; //@line 889 "xmltok_impl.c"
        $0=22; //@line 890 "xmltok_impl.c"
        __label__ = 40; break; //@line 890 "xmltok_impl.c"
      case 19: // $bb18
        var $83=$nextTokPtr_addr; //@line 892 "xmltok_impl.c"
        var $84=$ptr_addr; //@line 892 "xmltok_impl.c"
        HEAP[$83]=$84; //@line 892 "xmltok_impl.c"
        $0=0; //@line 893 "xmltok_impl.c"
        __label__ = 40; break; //@line 893 "xmltok_impl.c"
      case 20: // $bb19
        var $85=$ptr_addr; //@line 896 "xmltok_impl.c"
        var $86=$85+1; //@line 896 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 896 "xmltok_impl.c"
        var $88=($87)==0; //@line 896 "xmltok_impl.c"
        if ($88) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 896 "xmltok_impl.c"
      case 21: // $bb20
        var $89=$enc_addr; //@line 896 "xmltok_impl.c"
        var $90=$89; //@line 896 "xmltok_impl.c"
        var $91=$ptr_addr; //@line 896 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 896 "xmltok_impl.c"
        var $93=($92); //@line 896 "xmltok_impl.c"
        var $94=$90+76; //@line 896 "xmltok_impl.c"
        var $95=$94+$93; //@line 896 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 896 "xmltok_impl.c"
        var $97=($96); //@line 896 "xmltok_impl.c"
        $iftmp_835=$97; //@line 896 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 23; break; //@line 896 "xmltok_impl.c"
      case 22: // $bb21
        var $98=$ptr_addr; //@line 896 "xmltok_impl.c"
        var $99=$98; //@line 896 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 896 "xmltok_impl.c"
        var $101=($100); //@line 896 "xmltok_impl.c"
        var $102=$ptr_addr; //@line 896 "xmltok_impl.c"
        var $103=$102+1; //@line 896 "xmltok_impl.c"
        var $104=HEAP[$103]; //@line 896 "xmltok_impl.c"
        var $105=($104); //@line 896 "xmltok_impl.c"
        var $106=((($105)) & 255); //@line 896 "xmltok_impl.c"
        var $107=((($101)) & 255); //@line 896 "xmltok_impl.c"
        var $108=_unicode_byte_type($106, $107); //@line 896 "xmltok_impl.c"
        $iftmp_835=$108; //@line 896 "xmltok_impl.c"
        __lastLabel__ = 22; __label__ = 23; break; //@line 896 "xmltok_impl.c"
      case 23: // $bb22
        var $109=__lastLabel__ == 22 ? $108 : ($97);
        if ($109 == 5) {
          __label__ = 27; break;
        }
        else if ($109 == 6) {
          __label__ = 30; break;
        }
        else if ($109 == 7) {
          __label__ = 33; break;
        }
        else if ($109 == 18) {
          __label__ = 36; break;
        }
        else if ($109 == 22) {
          __label__ = 26; break;
        }
        else if ($109 == 24) {
          __label__ = 26; break;
        }
        else if ($109 == 25) {
          __label__ = 26; break;
        }
        else if ($109 == 26) {
          __label__ = 26; break;
        }
        else if ($109 == 27) {
          __label__ = 26; break;
        }
        else if ($109 == 29) {
          __label__ = 24; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 24: // $bb23
        var $110=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $111=$110+1; //@line 897 "xmltok_impl.c"
        var $112=HEAP[$111]; //@line 897 "xmltok_impl.c"
        var $113=($112); //@line 897 "xmltok_impl.c"
        var $114=_namePages+$113; //@line 897 "xmltok_impl.c"
        var $115=HEAP[$114]; //@line 897 "xmltok_impl.c"
        var $116=($115); //@line 897 "xmltok_impl.c"
        var $117=($116) * 8;
        var $118=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $119=$118; //@line 897 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 897 "xmltok_impl.c"
        var $121=($120) >>> 5; //@line 897 "xmltok_impl.c"
        var $122=($121); //@line 897 "xmltok_impl.c"
        var $123=($122) + ($117); //@line 897 "xmltok_impl.c"
        var $124=_namingBitmap+$123*4; //@line 897 "xmltok_impl.c"
        var $125=HEAP[$124]; //@line 897 "xmltok_impl.c"
        var $126=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $127=$126; //@line 897 "xmltok_impl.c"
        var $128=HEAP[$127]; //@line 897 "xmltok_impl.c"
        var $129=($128); //@line 897 "xmltok_impl.c"
        var $130=($129) & 31; //@line 897 "xmltok_impl.c"
        var $131=1 << ($130); //@line 897 "xmltok_impl.c"
        var $132=($131) & ($125); //@line 897 "xmltok_impl.c"
        var $133=($132)==0; //@line 897 "xmltok_impl.c"
        if ($133) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 897 "xmltok_impl.c"
      case 25: // $bb24
        var $134=$nextTokPtr_addr; //@line 897 "xmltok_impl.c"
        var $135=$ptr_addr; //@line 897 "xmltok_impl.c"
        HEAP[$134]=$135; //@line 897 "xmltok_impl.c"
        $0=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 26: // $bb25
        var $136=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $137=$136+2; //@line 897 "xmltok_impl.c"
        $ptr_addr=$137; //@line 897 "xmltok_impl.c"
        __label__ = 38; break; //@line 897 "xmltok_impl.c"
      case 27: // $bb26
        var $138=$end_addr; //@line 897 "xmltok_impl.c"
        var $139=($138); //@line 897 "xmltok_impl.c"
        var $140=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $141=($140); //@line 897 "xmltok_impl.c"
        var $142=($139) - ($141); //@line 897 "xmltok_impl.c"
        var $143=($142) <= 1; //@line 897 "xmltok_impl.c"
        if ($143) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 897 "xmltok_impl.c"
      case 28: // $bb27
        $0=-2; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 29: // $bb28
        var $144=$nextTokPtr_addr; //@line 897 "xmltok_impl.c"
        var $145=$ptr_addr; //@line 897 "xmltok_impl.c"
        HEAP[$144]=$145; //@line 897 "xmltok_impl.c"
        $0=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 30: // $bb29
        var $146=$end_addr; //@line 897 "xmltok_impl.c"
        var $147=($146); //@line 897 "xmltok_impl.c"
        var $148=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $149=($148); //@line 897 "xmltok_impl.c"
        var $150=($147) - ($149); //@line 897 "xmltok_impl.c"
        var $151=($150) <= 2; //@line 897 "xmltok_impl.c"
        if ($151) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 897 "xmltok_impl.c"
      case 31: // $bb30
        $0=-2; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 32: // $bb31
        var $152=$nextTokPtr_addr; //@line 897 "xmltok_impl.c"
        var $153=$ptr_addr; //@line 897 "xmltok_impl.c"
        HEAP[$152]=$153; //@line 897 "xmltok_impl.c"
        $0=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 33: // $bb32
        var $154=$end_addr; //@line 897 "xmltok_impl.c"
        var $155=($154); //@line 897 "xmltok_impl.c"
        var $156=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $157=($156); //@line 897 "xmltok_impl.c"
        var $158=($155) - ($157); //@line 897 "xmltok_impl.c"
        var $159=($158) <= 3; //@line 897 "xmltok_impl.c"
        if ($159) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 897 "xmltok_impl.c"
      case 34: // $bb33
        $0=-2; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 35: // $bb34
        var $160=$nextTokPtr_addr; //@line 897 "xmltok_impl.c"
        var $161=$ptr_addr; //@line 897 "xmltok_impl.c"
        HEAP[$160]=$161; //@line 897 "xmltok_impl.c"
        $0=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 36: // $bb35
        var $162=$ptr_addr; //@line 899 "xmltok_impl.c"
        var $163=$162+2; //@line 899 "xmltok_impl.c"
        var $164=$nextTokPtr_addr; //@line 899 "xmltok_impl.c"
        HEAP[$164]=$163; //@line 899 "xmltok_impl.c"
        $0=28; //@line 900 "xmltok_impl.c"
        __label__ = 40; break; //@line 900 "xmltok_impl.c"
      case 37: // $bb36
        var $165=$nextTokPtr_addr; //@line 902 "xmltok_impl.c"
        var $166=$ptr_addr; //@line 902 "xmltok_impl.c"
        HEAP[$165]=$166; //@line 902 "xmltok_impl.c"
        $0=0; //@line 903 "xmltok_impl.c"
        __label__ = 40; break; //@line 903 "xmltok_impl.c"
      case 38: // $bb37
        var $167=$ptr_addr; //@line 895 "xmltok_impl.c"
        var $168=$end_addr; //@line 895 "xmltok_impl.c"
        var $169=($167)!=($168); //@line 895 "xmltok_impl.c"
        if ($169) { __label__ = 20; break; } else { __label__ = 39; break; } //@line 895 "xmltok_impl.c"
      case 39: // $bb38
        $0=-1; //@line 906 "xmltok_impl.c"
        __label__ = 40; break; //@line 906 "xmltok_impl.c"
      case 40: // $bb39
        var $170=$0; //@line 885 "xmltok_impl.c"
        $retval=$170; //@line 885 "xmltok_impl.c"
        var $retval40=$retval; //@line 885 "xmltok_impl.c"
        ;
        return $retval40; //@line 885 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanPoundName($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_851;
        var $iftmp_843;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 913 "xmltok_impl.c"
        var $2=$end_addr; //@line 913 "xmltok_impl.c"
        var $3=($1)==($2); //@line 913 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 913 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 914 "xmltok_impl.c"
        __label__ = 39; break; //@line 914 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 915 "xmltok_impl.c"
        var $5=$4+1; //@line 915 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 915 "xmltok_impl.c"
        var $7=($6)==0; //@line 915 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 915 "xmltok_impl.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 915 "xmltok_impl.c"
        var $9=$8; //@line 915 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 915 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 915 "xmltok_impl.c"
        var $12=($11); //@line 915 "xmltok_impl.c"
        var $13=$9+76; //@line 915 "xmltok_impl.c"
        var $14=$13+$12; //@line 915 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 915 "xmltok_impl.c"
        var $16=($15); //@line 915 "xmltok_impl.c"
        $iftmp_843=$16; //@line 915 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 915 "xmltok_impl.c"
      case 4: // $bb3
        var $17=$ptr_addr; //@line 915 "xmltok_impl.c"
        var $18=$17; //@line 915 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 915 "xmltok_impl.c"
        var $20=($19); //@line 915 "xmltok_impl.c"
        var $21=$ptr_addr; //@line 915 "xmltok_impl.c"
        var $22=$21+1; //@line 915 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 915 "xmltok_impl.c"
        var $24=($23); //@line 915 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 915 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 915 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 915 "xmltok_impl.c"
        $iftmp_843=$27; //@line 915 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 915 "xmltok_impl.c"
      case 5: // $bb4
        var $28=__lastLabel__ == 4 ? $27 : ($16);
        if ($28 == 5) {
          __label__ = 9; break;
        }
        else if ($28 == 6) {
          __label__ = 12; break;
        }
        else if ($28 == 7) {
          __label__ = 15; break;
        }
        else if ($28 == 22) {
          __label__ = 8; break;
        }
        else if ($28 == 24) {
          __label__ = 8; break;
        }
        else if ($28 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 6: // $bb5
        var $29=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $30=$29+1; //@line 916 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 916 "xmltok_impl.c"
        var $32=($31); //@line 916 "xmltok_impl.c"
        var $33=_nmstrtPages+$32; //@line 916 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 916 "xmltok_impl.c"
        var $35=($34); //@line 916 "xmltok_impl.c"
        var $36=($35) * 8;
        var $37=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $38=$37; //@line 916 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 916 "xmltok_impl.c"
        var $40=($39) >>> 5; //@line 916 "xmltok_impl.c"
        var $41=($40); //@line 916 "xmltok_impl.c"
        var $42=($41) + ($36); //@line 916 "xmltok_impl.c"
        var $43=_namingBitmap+$42*4; //@line 916 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 916 "xmltok_impl.c"
        var $45=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $46=$45; //@line 916 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 916 "xmltok_impl.c"
        var $48=($47); //@line 916 "xmltok_impl.c"
        var $49=($48) & 31; //@line 916 "xmltok_impl.c"
        var $50=1 << ($49); //@line 916 "xmltok_impl.c"
        var $51=($50) & ($44); //@line 916 "xmltok_impl.c"
        var $52=($51)==0; //@line 916 "xmltok_impl.c"
        if ($52) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 916 "xmltok_impl.c"
      case 7: // $bb6
        var $53=$nextTokPtr_addr; //@line 916 "xmltok_impl.c"
        var $54=$ptr_addr; //@line 916 "xmltok_impl.c"
        HEAP[$53]=$54; //@line 916 "xmltok_impl.c"
        $0=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 8: // $bb7
        var $55=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $56=$55+2; //@line 916 "xmltok_impl.c"
        $ptr_addr=$56; //@line 916 "xmltok_impl.c"
        __label__ = 37; break; //@line 916 "xmltok_impl.c"
      case 9: // $bb8
        var $57=$end_addr; //@line 916 "xmltok_impl.c"
        var $58=($57); //@line 916 "xmltok_impl.c"
        var $59=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $60=($59); //@line 916 "xmltok_impl.c"
        var $61=($58) - ($60); //@line 916 "xmltok_impl.c"
        var $62=($61) <= 1; //@line 916 "xmltok_impl.c"
        if ($62) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 916 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 11: // $bb10
        var $63=$nextTokPtr_addr; //@line 916 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 916 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 916 "xmltok_impl.c"
        $0=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 12: // $bb11
        var $65=$end_addr; //@line 916 "xmltok_impl.c"
        var $66=($65); //@line 916 "xmltok_impl.c"
        var $67=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $68=($67); //@line 916 "xmltok_impl.c"
        var $69=($66) - ($68); //@line 916 "xmltok_impl.c"
        var $70=($69) <= 2; //@line 916 "xmltok_impl.c"
        if ($70) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 916 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 14: // $bb13
        var $71=$nextTokPtr_addr; //@line 916 "xmltok_impl.c"
        var $72=$ptr_addr; //@line 916 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 916 "xmltok_impl.c"
        $0=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 15: // $bb14
        var $73=$end_addr; //@line 916 "xmltok_impl.c"
        var $74=($73); //@line 916 "xmltok_impl.c"
        var $75=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $76=($75); //@line 916 "xmltok_impl.c"
        var $77=($74) - ($76); //@line 916 "xmltok_impl.c"
        var $78=($77) <= 3; //@line 916 "xmltok_impl.c"
        if ($78) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 916 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 17: // $bb16
        var $79=$nextTokPtr_addr; //@line 916 "xmltok_impl.c"
        var $80=$ptr_addr; //@line 916 "xmltok_impl.c"
        HEAP[$79]=$80; //@line 916 "xmltok_impl.c"
        $0=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 18: // $bb17
        var $81=$nextTokPtr_addr; //@line 918 "xmltok_impl.c"
        var $82=$ptr_addr; //@line 918 "xmltok_impl.c"
        HEAP[$81]=$82; //@line 918 "xmltok_impl.c"
        $0=0; //@line 919 "xmltok_impl.c"
        __label__ = 39; break; //@line 919 "xmltok_impl.c"
      case 19: // $bb18
        var $83=$ptr_addr; //@line 922 "xmltok_impl.c"
        var $84=$83+1; //@line 922 "xmltok_impl.c"
        var $85=HEAP[$84]; //@line 922 "xmltok_impl.c"
        var $86=($85)==0; //@line 922 "xmltok_impl.c"
        if ($86) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 922 "xmltok_impl.c"
      case 20: // $bb19
        var $87=$enc_addr; //@line 922 "xmltok_impl.c"
        var $88=$87; //@line 922 "xmltok_impl.c"
        var $89=$ptr_addr; //@line 922 "xmltok_impl.c"
        var $90=HEAP[$89]; //@line 922 "xmltok_impl.c"
        var $91=($90); //@line 922 "xmltok_impl.c"
        var $92=$88+76; //@line 922 "xmltok_impl.c"
        var $93=$92+$91; //@line 922 "xmltok_impl.c"
        var $94=HEAP[$93]; //@line 922 "xmltok_impl.c"
        var $95=($94); //@line 922 "xmltok_impl.c"
        $iftmp_851=$95; //@line 922 "xmltok_impl.c"
        __lastLabel__ = 20; __label__ = 22; break; //@line 922 "xmltok_impl.c"
      case 21: // $bb20
        var $96=$ptr_addr; //@line 922 "xmltok_impl.c"
        var $97=$96; //@line 922 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 922 "xmltok_impl.c"
        var $99=($98); //@line 922 "xmltok_impl.c"
        var $100=$ptr_addr; //@line 922 "xmltok_impl.c"
        var $101=$100+1; //@line 922 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 922 "xmltok_impl.c"
        var $103=($102); //@line 922 "xmltok_impl.c"
        var $104=((($103)) & 255); //@line 922 "xmltok_impl.c"
        var $105=((($99)) & 255); //@line 922 "xmltok_impl.c"
        var $106=_unicode_byte_type($104, $105); //@line 922 "xmltok_impl.c"
        $iftmp_851=$106; //@line 922 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 22; break; //@line 922 "xmltok_impl.c"
      case 22: // $bb21
        var $107=__lastLabel__ == 21 ? $106 : ($95);
        if ($107 == 5) {
          __label__ = 26; break;
        }
        else if ($107 == 6) {
          __label__ = 29; break;
        }
        else if ($107 == 7) {
          __label__ = 32; break;
        }
        else if ($107 == 9) {
          __label__ = 35; break;
        }
        else if ($107 == 10) {
          __label__ = 35; break;
        }
        else if ($107 == 11) {
          __label__ = 35; break;
        }
        else if ($107 == 21) {
          __label__ = 35; break;
        }
        else if ($107 == 22) {
          __label__ = 25; break;
        }
        else if ($107 == 24) {
          __label__ = 25; break;
        }
        else if ($107 == 25) {
          __label__ = 25; break;
        }
        else if ($107 == 26) {
          __label__ = 25; break;
        }
        else if ($107 == 27) {
          __label__ = 25; break;
        }
        else if ($107 == 29) {
          __label__ = 23; break;
        }
        else if ($107 == 30) {
          __label__ = 35; break;
        }
        else if ($107 == 32) {
          __label__ = 35; break;
        }
        else if ($107 == 36) {
          __label__ = 35; break;
        }
        else {
        __label__ = 36; break;
        }
        
      case 23: // $bb22
        var $108=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $109=$108+1; //@line 923 "xmltok_impl.c"
        var $110=HEAP[$109]; //@line 923 "xmltok_impl.c"
        var $111=($110); //@line 923 "xmltok_impl.c"
        var $112=_namePages+$111; //@line 923 "xmltok_impl.c"
        var $113=HEAP[$112]; //@line 923 "xmltok_impl.c"
        var $114=($113); //@line 923 "xmltok_impl.c"
        var $115=($114) * 8;
        var $116=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $117=$116; //@line 923 "xmltok_impl.c"
        var $118=HEAP[$117]; //@line 923 "xmltok_impl.c"
        var $119=($118) >>> 5; //@line 923 "xmltok_impl.c"
        var $120=($119); //@line 923 "xmltok_impl.c"
        var $121=($120) + ($115); //@line 923 "xmltok_impl.c"
        var $122=_namingBitmap+$121*4; //@line 923 "xmltok_impl.c"
        var $123=HEAP[$122]; //@line 923 "xmltok_impl.c"
        var $124=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $125=$124; //@line 923 "xmltok_impl.c"
        var $126=HEAP[$125]; //@line 923 "xmltok_impl.c"
        var $127=($126); //@line 923 "xmltok_impl.c"
        var $128=($127) & 31; //@line 923 "xmltok_impl.c"
        var $129=1 << ($128); //@line 923 "xmltok_impl.c"
        var $130=($129) & ($123); //@line 923 "xmltok_impl.c"
        var $131=($130)==0; //@line 923 "xmltok_impl.c"
        if ($131) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 923 "xmltok_impl.c"
      case 24: // $bb23
        var $132=$nextTokPtr_addr; //@line 923 "xmltok_impl.c"
        var $133=$ptr_addr; //@line 923 "xmltok_impl.c"
        HEAP[$132]=$133; //@line 923 "xmltok_impl.c"
        $0=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 25: // $bb24
        var $134=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $135=$134+2; //@line 923 "xmltok_impl.c"
        $ptr_addr=$135; //@line 923 "xmltok_impl.c"
        __label__ = 37; break; //@line 923 "xmltok_impl.c"
      case 26: // $bb25
        var $136=$end_addr; //@line 923 "xmltok_impl.c"
        var $137=($136); //@line 923 "xmltok_impl.c"
        var $138=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $139=($138); //@line 923 "xmltok_impl.c"
        var $140=($137) - ($139); //@line 923 "xmltok_impl.c"
        var $141=($140) <= 1; //@line 923 "xmltok_impl.c"
        if ($141) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 923 "xmltok_impl.c"
      case 27: // $bb26
        $0=-2; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 28: // $bb27
        var $142=$nextTokPtr_addr; //@line 923 "xmltok_impl.c"
        var $143=$ptr_addr; //@line 923 "xmltok_impl.c"
        HEAP[$142]=$143; //@line 923 "xmltok_impl.c"
        $0=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 29: // $bb28
        var $144=$end_addr; //@line 923 "xmltok_impl.c"
        var $145=($144); //@line 923 "xmltok_impl.c"
        var $146=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $147=($146); //@line 923 "xmltok_impl.c"
        var $148=($145) - ($147); //@line 923 "xmltok_impl.c"
        var $149=($148) <= 2; //@line 923 "xmltok_impl.c"
        if ($149) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 923 "xmltok_impl.c"
      case 30: // $bb29
        $0=-2; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 31: // $bb30
        var $150=$nextTokPtr_addr; //@line 923 "xmltok_impl.c"
        var $151=$ptr_addr; //@line 923 "xmltok_impl.c"
        HEAP[$150]=$151; //@line 923 "xmltok_impl.c"
        $0=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 32: // $bb31
        var $152=$end_addr; //@line 923 "xmltok_impl.c"
        var $153=($152); //@line 923 "xmltok_impl.c"
        var $154=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $155=($154); //@line 923 "xmltok_impl.c"
        var $156=($153) - ($155); //@line 923 "xmltok_impl.c"
        var $157=($156) <= 3; //@line 923 "xmltok_impl.c"
        if ($157) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 923 "xmltok_impl.c"
      case 33: // $bb32
        $0=-2; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 34: // $bb33
        var $158=$nextTokPtr_addr; //@line 923 "xmltok_impl.c"
        var $159=$ptr_addr; //@line 923 "xmltok_impl.c"
        HEAP[$158]=$159; //@line 923 "xmltok_impl.c"
        $0=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 35: // $bb34
        var $160=$nextTokPtr_addr; //@line 926 "xmltok_impl.c"
        var $161=$ptr_addr; //@line 926 "xmltok_impl.c"
        HEAP[$160]=$161; //@line 926 "xmltok_impl.c"
        $0=20; //@line 927 "xmltok_impl.c"
        __label__ = 39; break; //@line 927 "xmltok_impl.c"
      case 36: // $bb35
        var $162=$nextTokPtr_addr; //@line 929 "xmltok_impl.c"
        var $163=$ptr_addr; //@line 929 "xmltok_impl.c"
        HEAP[$162]=$163; //@line 929 "xmltok_impl.c"
        $0=0; //@line 930 "xmltok_impl.c"
        __label__ = 39; break; //@line 930 "xmltok_impl.c"
      case 37: // $bb36
        var $164=$ptr_addr; //@line 921 "xmltok_impl.c"
        var $165=$end_addr; //@line 921 "xmltok_impl.c"
        var $166=($164)!=($165); //@line 921 "xmltok_impl.c"
        if ($166) { __label__ = 19; break; } else { __label__ = 38; break; } //@line 921 "xmltok_impl.c"
      case 38: // $bb37
        $0=-20; //@line 933 "xmltok_impl.c"
        __label__ = 39; break; //@line 933 "xmltok_impl.c"
      case 39: // $bb38
        var $167=$0; //@line 914 "xmltok_impl.c"
        $retval=$167; //@line 914 "xmltok_impl.c"
        var $retval39=$retval; //@line 914 "xmltok_impl.c"
        ;
        return $retval39; //@line 914 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanLit($open, $enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $open_addr;
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_867;
        var $0;
        var $iftmp_859;
        var $t;
        $open_addr=$open;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        __label__ = 25; break; //@line 941 "xmltok_impl.c"
      case 1: // $bb
        var $1=$ptr_addr; //@line 942 "xmltok_impl.c"
        var $2=$1+1; //@line 942 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 942 "xmltok_impl.c"
        var $4=($3)==0; //@line 942 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 942 "xmltok_impl.c"
      case 2: // $bb1
        var $5=$enc_addr; //@line 942 "xmltok_impl.c"
        var $6=$5; //@line 942 "xmltok_impl.c"
        var $7=$ptr_addr; //@line 942 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 942 "xmltok_impl.c"
        var $9=($8); //@line 942 "xmltok_impl.c"
        var $10=$6+76; //@line 942 "xmltok_impl.c"
        var $11=$10+$9; //@line 942 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 942 "xmltok_impl.c"
        var $13=($12); //@line 942 "xmltok_impl.c"
        $iftmp_859=$13; //@line 942 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 942 "xmltok_impl.c"
      case 3: // $bb2
        var $14=$ptr_addr; //@line 942 "xmltok_impl.c"
        var $15=$14; //@line 942 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 942 "xmltok_impl.c"
        var $17=($16); //@line 942 "xmltok_impl.c"
        var $18=$ptr_addr; //@line 942 "xmltok_impl.c"
        var $19=$18+1; //@line 942 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 942 "xmltok_impl.c"
        var $21=($20); //@line 942 "xmltok_impl.c"
        var $22=((($21)) & 255); //@line 942 "xmltok_impl.c"
        var $23=((($17)) & 255); //@line 942 "xmltok_impl.c"
        var $24=_unicode_byte_type($22, $23); //@line 942 "xmltok_impl.c"
        $iftmp_859=$24; //@line 942 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 942 "xmltok_impl.c"
      case 4: // $bb3
        var $25=__lastLabel__ == 3 ? $24 : ($13);
        $t=$25; //@line 942 "xmltok_impl.c"
        if ($25 == 0) {
          __label__ = 14; break;
        }
        else if ($25 == 1) {
          __label__ = 14; break;
        }
        else if ($25 == 5) {
          __label__ = 5; break;
        }
        else if ($25 == 6) {
          __label__ = 8; break;
        }
        else if ($25 == 7) {
          __label__ = 11; break;
        }
        else if ($25 == 8) {
          __label__ = 14; break;
        }
        else if ($25 == 12) {
          __label__ = 15; break;
        }
        else if ($25 == 13) {
          __label__ = 15; break;
        }
        else {
        __label__ = 24; break;
        }
        
      case 5: // $bb4
        var $26=$end_addr; //@line 944 "xmltok_impl.c"
        var $27=($26); //@line 944 "xmltok_impl.c"
        var $28=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $29=($28); //@line 944 "xmltok_impl.c"
        var $30=($27) - ($29); //@line 944 "xmltok_impl.c"
        var $31=($30) <= 1; //@line 944 "xmltok_impl.c"
        if ($31) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 944 "xmltok_impl.c"
      case 6: // $bb5
        $0=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 7: // $bb6
        var $32=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $33=$32+2; //@line 944 "xmltok_impl.c"
        $ptr_addr=$33; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 8: // $bb7
        var $34=$end_addr; //@line 944 "xmltok_impl.c"
        var $35=($34); //@line 944 "xmltok_impl.c"
        var $36=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $37=($36); //@line 944 "xmltok_impl.c"
        var $38=($35) - ($37); //@line 944 "xmltok_impl.c"
        var $39=($38) <= 2; //@line 944 "xmltok_impl.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 944 "xmltok_impl.c"
      case 9: // $bb8
        $0=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 10: // $bb9
        var $40=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $41=$40+3; //@line 944 "xmltok_impl.c"
        $ptr_addr=$41; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 11: // $bb10
        var $42=$end_addr; //@line 944 "xmltok_impl.c"
        var $43=($42); //@line 944 "xmltok_impl.c"
        var $44=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $45=($44); //@line 944 "xmltok_impl.c"
        var $46=($43) - ($45); //@line 944 "xmltok_impl.c"
        var $47=($46) <= 3; //@line 944 "xmltok_impl.c"
        if ($47) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 944 "xmltok_impl.c"
      case 12: // $bb11
        $0=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 13: // $bb12
        var $48=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $49=$48+4; //@line 944 "xmltok_impl.c"
        $ptr_addr=$49; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 14: // $bb13
        var $50=$nextTokPtr_addr; //@line 944 "xmltok_impl.c"
        var $51=$ptr_addr; //@line 944 "xmltok_impl.c"
        HEAP[$50]=$51; //@line 944 "xmltok_impl.c"
        $0=0; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 15: // $bb14
        var $52=$ptr_addr; //@line 947 "xmltok_impl.c"
        var $53=$52+2; //@line 947 "xmltok_impl.c"
        $ptr_addr=$53; //@line 947 "xmltok_impl.c"
        var $54=$t; //@line 948 "xmltok_impl.c"
        var $55=$open_addr; //@line 948 "xmltok_impl.c"
        var $56=($54)!=($55); //@line 948 "xmltok_impl.c"
        if ($56) { __label__ = 25; break; } else { __label__ = 16; break; } //@line 948 "xmltok_impl.c"
      case 16: // $bb15
        var $57=$ptr_addr; //@line 950 "xmltok_impl.c"
        var $58=$end_addr; //@line 950 "xmltok_impl.c"
        var $59=($57)==($58); //@line 950 "xmltok_impl.c"
        if ($59) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 950 "xmltok_impl.c"
      case 17: // $bb16
        $0=-27; //@line 951 "xmltok_impl.c"
        __label__ = 27; break; //@line 951 "xmltok_impl.c"
      case 18: // $bb17
        var $60=$nextTokPtr_addr; //@line 952 "xmltok_impl.c"
        var $61=$ptr_addr; //@line 952 "xmltok_impl.c"
        HEAP[$60]=$61; //@line 952 "xmltok_impl.c"
        var $62=$ptr_addr; //@line 953 "xmltok_impl.c"
        var $63=$62+1; //@line 953 "xmltok_impl.c"
        var $64=HEAP[$63]; //@line 953 "xmltok_impl.c"
        var $65=($64)==0; //@line 953 "xmltok_impl.c"
        if ($65) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 953 "xmltok_impl.c"
      case 19: // $bb18
        var $66=$enc_addr; //@line 953 "xmltok_impl.c"
        var $67=$66; //@line 953 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 953 "xmltok_impl.c"
        var $69=HEAP[$68]; //@line 953 "xmltok_impl.c"
        var $70=($69); //@line 953 "xmltok_impl.c"
        var $71=$67+76; //@line 953 "xmltok_impl.c"
        var $72=$71+$70; //@line 953 "xmltok_impl.c"
        var $73=HEAP[$72]; //@line 953 "xmltok_impl.c"
        var $74=($73); //@line 953 "xmltok_impl.c"
        $iftmp_867=$74; //@line 953 "xmltok_impl.c"
        __lastLabel__ = 19; __label__ = 21; break; //@line 953 "xmltok_impl.c"
      case 20: // $bb19
        var $75=$ptr_addr; //@line 953 "xmltok_impl.c"
        var $76=$75; //@line 953 "xmltok_impl.c"
        var $77=HEAP[$76]; //@line 953 "xmltok_impl.c"
        var $78=($77); //@line 953 "xmltok_impl.c"
        var $79=$ptr_addr; //@line 953 "xmltok_impl.c"
        var $80=$79+1; //@line 953 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 953 "xmltok_impl.c"
        var $82=($81); //@line 953 "xmltok_impl.c"
        var $83=((($82)) & 255); //@line 953 "xmltok_impl.c"
        var $84=((($78)) & 255); //@line 953 "xmltok_impl.c"
        var $85=_unicode_byte_type($83, $84); //@line 953 "xmltok_impl.c"
        $iftmp_867=$85; //@line 953 "xmltok_impl.c"
        __lastLabel__ = 20; __label__ = 21; break; //@line 953 "xmltok_impl.c"
      case 21: // $bb20
        var $86=__lastLabel__ == 20 ? $85 : ($74);
        if ($86 == 9) {
          __label__ = 22; break;
        }
        else if ($86 == 10) {
          __label__ = 22; break;
        }
        else if ($86 == 11) {
          __label__ = 22; break;
        }
        else if ($86 == 20) {
          __label__ = 22; break;
        }
        else if ($86 == 21) {
          __label__ = 22; break;
        }
        else if ($86 == 30) {
          __label__ = 22; break;
        }
        else {
        __label__ = 23; break;
        }
        
      case 22: // $bb21
        $0=27; //@line 956 "xmltok_impl.c"
        __label__ = 27; break; //@line 956 "xmltok_impl.c"
      case 23: // $bb22
        $0=0; //@line 958 "xmltok_impl.c"
        __label__ = 27; break; //@line 958 "xmltok_impl.c"
      case 24: // $bb23
        var $87=$ptr_addr; //@line 961 "xmltok_impl.c"
        var $88=$87+2; //@line 961 "xmltok_impl.c"
        $ptr_addr=$88; //@line 961 "xmltok_impl.c"
        __label__ = 25; break; //@line 961 "xmltok_impl.c"
      case 25: // $bb24
        var $89=$ptr_addr; //@line 941 "xmltok_impl.c"
        var $90=$end_addr; //@line 941 "xmltok_impl.c"
        var $91=($89)!=($90); //@line 941 "xmltok_impl.c"
        if ($91) { __label__ = 1; break; } else { __label__ = 26; break; } //@line 941 "xmltok_impl.c"
      case 26: // $bb25
        $0=-1; //@line 965 "xmltok_impl.c"
        __label__ = 27; break; //@line 965 "xmltok_impl.c"
      case 27: // $bb26
        var $92=$0; //@line 944 "xmltok_impl.c"
        $retval=$92; //@line 944 "xmltok_impl.c"
        var $retval27=$retval; //@line 944 "xmltok_impl.c"
        ;
        return $retval27; //@line 944 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_prologTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_894;
        var $iftmp_886;
        var $iftmp_878;
        var $iftmp_876;
        var $iftmp_874;
        var $iftmp_872;
        var $0;
        var $tok;
        var $n;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 973 "xmltok_impl.c"
        var $2=$end_addr; //@line 973 "xmltok_impl.c"
        var $3=($1)==($2); //@line 973 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 973 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 974 "xmltok_impl.c"
        __label__ = 126; break; //@line 974 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$end_addr; //@line 976 "xmltok_impl.c"
        var $5=($4); //@line 976 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 976 "xmltok_impl.c"
        var $7=($6); //@line 976 "xmltok_impl.c"
        var $8=($5) - ($7); //@line 976 "xmltok_impl.c"
        $n=$8; //@line 976 "xmltok_impl.c"
        var $9=$n; //@line 977 "xmltok_impl.c"
        var $10=($9) & 1; //@line 977 "xmltok_impl.c"
        var $11=((($10)) & 255); //@line 977 "xmltok_impl.c"
        var $toBool=($11)!=0; //@line 977 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 977 "xmltok_impl.c"
      case 3: // $bb2
        var $12=$n; //@line 978 "xmltok_impl.c"
        var $13=($12) & -2; //@line 978 "xmltok_impl.c"
        $n=$13; //@line 978 "xmltok_impl.c"
        var $14=$n; //@line 979 "xmltok_impl.c"
        var $15=($14)==0; //@line 979 "xmltok_impl.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 979 "xmltok_impl.c"
      case 4: // $bb3
        $0=-1; //@line 980 "xmltok_impl.c"
        __label__ = 126; break; //@line 980 "xmltok_impl.c"
      case 5: // $bb4
        var $16=$ptr_addr; //@line 981 "xmltok_impl.c"
        var $17=$n; //@line 981 "xmltok_impl.c"
        var $18=$16+$17; //@line 981 "xmltok_impl.c"
        $end_addr=$18; //@line 981 "xmltok_impl.c"
        __label__ = 6; break; //@line 981 "xmltok_impl.c"
      case 6: // $bb5
        var $19=$ptr_addr; //@line 984 "xmltok_impl.c"
        var $20=$19+1; //@line 984 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 984 "xmltok_impl.c"
        var $22=($21)==0; //@line 984 "xmltok_impl.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 984 "xmltok_impl.c"
      case 7: // $bb6
        var $23=$enc_addr; //@line 984 "xmltok_impl.c"
        var $24=$23; //@line 984 "xmltok_impl.c"
        var $25=$ptr_addr; //@line 984 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 984 "xmltok_impl.c"
        var $27=($26); //@line 984 "xmltok_impl.c"
        var $28=$24+76; //@line 984 "xmltok_impl.c"
        var $29=$28+$27; //@line 984 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 984 "xmltok_impl.c"
        var $31=($30); //@line 984 "xmltok_impl.c"
        $iftmp_872=$31; //@line 984 "xmltok_impl.c"
        __lastLabel__ = 7; __label__ = 9; break; //@line 984 "xmltok_impl.c"
      case 8: // $bb7
        var $32=$ptr_addr; //@line 984 "xmltok_impl.c"
        var $33=$32; //@line 984 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 984 "xmltok_impl.c"
        var $35=($34); //@line 984 "xmltok_impl.c"
        var $36=$ptr_addr; //@line 984 "xmltok_impl.c"
        var $37=$36+1; //@line 984 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 984 "xmltok_impl.c"
        var $39=($38); //@line 984 "xmltok_impl.c"
        var $40=((($39)) & 255); //@line 984 "xmltok_impl.c"
        var $41=((($35)) & 255); //@line 984 "xmltok_impl.c"
        var $42=_unicode_byte_type($40, $41); //@line 984 "xmltok_impl.c"
        $iftmp_872=$42; //@line 984 "xmltok_impl.c"
        __lastLabel__ = 8; __label__ = 9; break; //@line 984 "xmltok_impl.c"
      case 9: // $bb8
        var $43=__lastLabel__ == 8 ? $42 : ($31);
        if ($43 == 2) {
          __label__ = 12; break;
        }
        else if ($43 == 4) {
          __label__ = 35; break;
        }
        else if ($43 == 5) {
          __label__ = 60; break;
        }
        else if ($43 == 6) {
          __label__ = 63; break;
        }
        else if ($43 == 7) {
          __label__ = 66; break;
        }
        else if ($43 == 9) {
          __label__ = 22; break;
        }
        else if ($43 == 10) {
          __label__ = 24; break;
        }
        else if ($43 == 11) {
          __label__ = 58; break;
        }
        else if ($43 == 12) {
          __label__ = 10; break;
        }
        else if ($43 == 13) {
          __label__ = 11; break;
        }
        else if ($43 == 19) {
          __label__ = 59; break;
        }
        else if ($43 == 20) {
          __label__ = 34; break;
        }
        else if ($43 == 21) {
          __label__ = 24; break;
        }
        else if ($43 == 22) {
          __label__ = 69; break;
        }
        else if ($43 == 23) {
          __label__ = 70; break;
        }
        else if ($43 == 24) {
          __label__ = 69; break;
        }
        else if ($43 == 25) {
          __label__ = 70; break;
        }
        else if ($43 == 26) {
          __label__ = 70; break;
        }
        else if ($43 == 27) {
          __label__ = 70; break;
        }
        else if ($43 == 29) {
          __label__ = 71; break;
        }
        else if ($43 == 30) {
          __label__ = 32; break;
        }
        else if ($43 == 31) {
          __label__ = 45; break;
        }
        else if ($43 == 32) {
          __label__ = 46; break;
        }
        else if ($43 == 35) {
          __label__ = 33; break;
        }
        else if ($43 == 36) {
          __label__ = 57; break;
        }
        else {
        __label__ = 75; break;
        }
        
      case 10: // $bb9
        var $44=$ptr_addr; //@line 986 "xmltok_impl.c"
        var $45=$44+2; //@line 986 "xmltok_impl.c"
        var $46=$enc_addr; //@line 986 "xmltok_impl.c"
        var $47=$end_addr; //@line 986 "xmltok_impl.c"
        var $48=$nextTokPtr_addr; //@line 986 "xmltok_impl.c"
        var $49=_little2_scanLit(12, $46, $45, $47, $48); //@line 986 "xmltok_impl.c"
        $0=$49; //@line 986 "xmltok_impl.c"
        __label__ = 126; break; //@line 986 "xmltok_impl.c"
      case 11: // $bb10
        var $50=$ptr_addr; //@line 988 "xmltok_impl.c"
        var $51=$50+2; //@line 988 "xmltok_impl.c"
        var $52=$enc_addr; //@line 988 "xmltok_impl.c"
        var $53=$end_addr; //@line 988 "xmltok_impl.c"
        var $54=$nextTokPtr_addr; //@line 988 "xmltok_impl.c"
        var $55=_little2_scanLit(13, $52, $51, $53, $54); //@line 988 "xmltok_impl.c"
        $0=$55; //@line 988 "xmltok_impl.c"
        __label__ = 126; break; //@line 988 "xmltok_impl.c"
      case 12: // $bb11
        var $56=$ptr_addr; //@line 991 "xmltok_impl.c"
        var $57=$56+2; //@line 991 "xmltok_impl.c"
        $ptr_addr=$57; //@line 991 "xmltok_impl.c"
        var $58=$ptr_addr; //@line 992 "xmltok_impl.c"
        var $59=$end_addr; //@line 992 "xmltok_impl.c"
        var $60=($58)==($59); //@line 992 "xmltok_impl.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 992 "xmltok_impl.c"
      case 13: // $bb12
        $0=-1; //@line 993 "xmltok_impl.c"
        __label__ = 126; break; //@line 993 "xmltok_impl.c"
      case 14: // $bb13
        var $61=$ptr_addr; //@line 994 "xmltok_impl.c"
        var $62=$61+1; //@line 994 "xmltok_impl.c"
        var $63=HEAP[$62]; //@line 994 "xmltok_impl.c"
        var $64=($63)==0; //@line 994 "xmltok_impl.c"
        if ($64) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 994 "xmltok_impl.c"
      case 15: // $bb14
        var $65=$enc_addr; //@line 994 "xmltok_impl.c"
        var $66=$65; //@line 994 "xmltok_impl.c"
        var $67=$ptr_addr; //@line 994 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 994 "xmltok_impl.c"
        var $69=($68); //@line 994 "xmltok_impl.c"
        var $70=$66+76; //@line 994 "xmltok_impl.c"
        var $71=$70+$69; //@line 994 "xmltok_impl.c"
        var $72=HEAP[$71]; //@line 994 "xmltok_impl.c"
        var $73=($72); //@line 994 "xmltok_impl.c"
        $iftmp_874=$73; //@line 994 "xmltok_impl.c"
        __lastLabel__ = 15; __label__ = 17; break; //@line 994 "xmltok_impl.c"
      case 16: // $bb15
        var $74=$ptr_addr; //@line 994 "xmltok_impl.c"
        var $75=$74; //@line 994 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 994 "xmltok_impl.c"
        var $77=($76); //@line 994 "xmltok_impl.c"
        var $78=$ptr_addr; //@line 994 "xmltok_impl.c"
        var $79=$78+1; //@line 994 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 994 "xmltok_impl.c"
        var $81=($80); //@line 994 "xmltok_impl.c"
        var $82=((($81)) & 255); //@line 994 "xmltok_impl.c"
        var $83=((($77)) & 255); //@line 994 "xmltok_impl.c"
        var $84=_unicode_byte_type($82, $83); //@line 994 "xmltok_impl.c"
        $iftmp_874=$84; //@line 994 "xmltok_impl.c"
        __lastLabel__ = 16; __label__ = 17; break; //@line 994 "xmltok_impl.c"
      case 17: // $bb16
        var $85=__lastLabel__ == 16 ? $84 : ($73);
        if ($85 == 5) {
          __label__ = 20; break;
        }
        else if ($85 == 6) {
          __label__ = 20; break;
        }
        else if ($85 == 7) {
          __label__ = 20; break;
        }
        else if ($85 == 15) {
          __label__ = 19; break;
        }
        else if ($85 == 16) {
          __label__ = 18; break;
        }
        else if ($85 == 22) {
          __label__ = 20; break;
        }
        else if ($85 == 24) {
          __label__ = 20; break;
        }
        else if ($85 == 29) {
          __label__ = 20; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 18: // $bb17
        var $86=$ptr_addr; //@line 996 "xmltok_impl.c"
        var $87=$86+2; //@line 996 "xmltok_impl.c"
        var $88=$enc_addr; //@line 996 "xmltok_impl.c"
        var $89=$end_addr; //@line 996 "xmltok_impl.c"
        var $90=$nextTokPtr_addr; //@line 996 "xmltok_impl.c"
        var $91=_little2_scanDecl($88, $87, $89, $90); //@line 996 "xmltok_impl.c"
        $0=$91; //@line 996 "xmltok_impl.c"
        __label__ = 126; break; //@line 996 "xmltok_impl.c"
      case 19: // $bb18
        var $92=$ptr_addr; //@line 998 "xmltok_impl.c"
        var $93=$92+2; //@line 998 "xmltok_impl.c"
        var $94=$enc_addr; //@line 998 "xmltok_impl.c"
        var $95=$end_addr; //@line 998 "xmltok_impl.c"
        var $96=$nextTokPtr_addr; //@line 998 "xmltok_impl.c"
        var $97=_little2_scanPi($94, $93, $95, $96); //@line 998 "xmltok_impl.c"
        $0=$97; //@line 998 "xmltok_impl.c"
        __label__ = 126; break; //@line 998 "xmltok_impl.c"
      case 20: // $bb19
        var $98=$ptr_addr; //@line 1005 "xmltok_impl.c"
        var $99=$98+-2; //@line 1005 "xmltok_impl.c"
        var $100=$nextTokPtr_addr; //@line 1005 "xmltok_impl.c"
        HEAP[$100]=$99; //@line 1005 "xmltok_impl.c"
        $0=29; //@line 1006 "xmltok_impl.c"
        __label__ = 126; break; //@line 1006 "xmltok_impl.c"
      case 21: // $bb20
        var $101=$nextTokPtr_addr; //@line 1008 "xmltok_impl.c"
        var $102=$ptr_addr; //@line 1008 "xmltok_impl.c"
        HEAP[$101]=$102; //@line 1008 "xmltok_impl.c"
        $0=0; //@line 1009 "xmltok_impl.c"
        __label__ = 126; break; //@line 1009 "xmltok_impl.c"
      case 22: // $bb21
        var $103=$ptr_addr; //@line 1012 "xmltok_impl.c"
        var $104=$103+2; //@line 1012 "xmltok_impl.c"
        var $105=$end_addr; //@line 1012 "xmltok_impl.c"
        var $106=($104)==($105); //@line 1012 "xmltok_impl.c"
        if ($106) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1012 "xmltok_impl.c"
      case 23: // $bb22
        var $107=$nextTokPtr_addr; //@line 1013 "xmltok_impl.c"
        var $108=$end_addr; //@line 1013 "xmltok_impl.c"
        HEAP[$107]=$108; //@line 1013 "xmltok_impl.c"
        $0=-15; //@line 1015 "xmltok_impl.c"
        __label__ = 126; break; //@line 1015 "xmltok_impl.c"
      case 24: // $bb23
        var $109=$ptr_addr; //@line 1020 "xmltok_impl.c"
        var $110=$109+2; //@line 1020 "xmltok_impl.c"
        $ptr_addr=$110; //@line 1020 "xmltok_impl.c"
        var $111=$ptr_addr; //@line 1021 "xmltok_impl.c"
        var $112=$end_addr; //@line 1021 "xmltok_impl.c"
        var $113=($111)==($112); //@line 1021 "xmltok_impl.c"
        if ($113) { __label__ = 31; break; } else { __label__ = 25; break; } //@line 1021 "xmltok_impl.c"
      case 25: // $bb24
        var $114=$ptr_addr; //@line 1023 "xmltok_impl.c"
        var $115=$114+1; //@line 1023 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 1023 "xmltok_impl.c"
        var $117=($116)==0; //@line 1023 "xmltok_impl.c"
        if ($117) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1023 "xmltok_impl.c"
      case 26: // $bb25
        var $118=$enc_addr; //@line 1023 "xmltok_impl.c"
        var $119=$118; //@line 1023 "xmltok_impl.c"
        var $120=$ptr_addr; //@line 1023 "xmltok_impl.c"
        var $121=HEAP[$120]; //@line 1023 "xmltok_impl.c"
        var $122=($121); //@line 1023 "xmltok_impl.c"
        var $123=$119+76; //@line 1023 "xmltok_impl.c"
        var $124=$123+$122; //@line 1023 "xmltok_impl.c"
        var $125=HEAP[$124]; //@line 1023 "xmltok_impl.c"
        var $126=($125); //@line 1023 "xmltok_impl.c"
        $iftmp_876=$126; //@line 1023 "xmltok_impl.c"
        __lastLabel__ = 26; __label__ = 28; break; //@line 1023 "xmltok_impl.c"
      case 27: // $bb26
        var $127=$ptr_addr; //@line 1023 "xmltok_impl.c"
        var $128=$127; //@line 1023 "xmltok_impl.c"
        var $129=HEAP[$128]; //@line 1023 "xmltok_impl.c"
        var $130=($129); //@line 1023 "xmltok_impl.c"
        var $131=$ptr_addr; //@line 1023 "xmltok_impl.c"
        var $132=$131+1; //@line 1023 "xmltok_impl.c"
        var $133=HEAP[$132]; //@line 1023 "xmltok_impl.c"
        var $134=($133); //@line 1023 "xmltok_impl.c"
        var $135=((($134)) & 255); //@line 1023 "xmltok_impl.c"
        var $136=((($130)) & 255); //@line 1023 "xmltok_impl.c"
        var $137=_unicode_byte_type($135, $136); //@line 1023 "xmltok_impl.c"
        $iftmp_876=$137; //@line 1023 "xmltok_impl.c"
        __lastLabel__ = 27; __label__ = 28; break; //@line 1023 "xmltok_impl.c"
      case 28: // $bb27
        var $138=__lastLabel__ == 27 ? $137 : ($126);
        if ($138 == 9) {
          __label__ = 29; break;
        }
        else if ($138 == 10) {
          __label__ = 24; break;
        }
        else if ($138 == 21) {
          __label__ = 24; break;
        }
        else {
        __label__ = 30; break;
        }
        
      case 29: // $bb29
        var $139=$ptr_addr; //@line 1028 "xmltok_impl.c"
        var $140=$139+2; //@line 1028 "xmltok_impl.c"
        var $141=$end_addr; //@line 1028 "xmltok_impl.c"
        var $142=($140)!=($141); //@line 1028 "xmltok_impl.c"
        if ($142) { __label__ = 24; break; } else { __label__ = 30; break; } //@line 1028 "xmltok_impl.c"
      case 30: // $bb30
        var $143=$nextTokPtr_addr; //@line 1032 "xmltok_impl.c"
        var $144=$ptr_addr; //@line 1032 "xmltok_impl.c"
        HEAP[$143]=$144; //@line 1032 "xmltok_impl.c"
        $0=15; //@line 1033 "xmltok_impl.c"
        __label__ = 126; break; //@line 1033 "xmltok_impl.c"
      case 31: // $bb32
        var $145=$nextTokPtr_addr; //@line 1036 "xmltok_impl.c"
        var $146=$ptr_addr; //@line 1036 "xmltok_impl.c"
        HEAP[$145]=$146; //@line 1036 "xmltok_impl.c"
        $0=15; //@line 1037 "xmltok_impl.c"
        __label__ = 126; break; //@line 1037 "xmltok_impl.c"
      case 32: // $bb33
        var $147=$ptr_addr; //@line 1039 "xmltok_impl.c"
        var $148=$147+2; //@line 1039 "xmltok_impl.c"
        var $149=$enc_addr; //@line 1039 "xmltok_impl.c"
        var $150=$end_addr; //@line 1039 "xmltok_impl.c"
        var $151=$nextTokPtr_addr; //@line 1039 "xmltok_impl.c"
        var $152=_little2_scanPercent($149, $148, $150, $151); //@line 1039 "xmltok_impl.c"
        $0=$152; //@line 1039 "xmltok_impl.c"
        __label__ = 126; break; //@line 1039 "xmltok_impl.c"
      case 33: // $bb34
        var $153=$ptr_addr; //@line 1041 "xmltok_impl.c"
        var $154=$153+2; //@line 1041 "xmltok_impl.c"
        var $155=$nextTokPtr_addr; //@line 1041 "xmltok_impl.c"
        HEAP[$155]=$154; //@line 1041 "xmltok_impl.c"
        $0=38; //@line 1042 "xmltok_impl.c"
        __label__ = 126; break; //@line 1042 "xmltok_impl.c"
      case 34: // $bb35
        var $156=$ptr_addr; //@line 1044 "xmltok_impl.c"
        var $157=$156+2; //@line 1044 "xmltok_impl.c"
        var $158=$nextTokPtr_addr; //@line 1044 "xmltok_impl.c"
        HEAP[$158]=$157; //@line 1044 "xmltok_impl.c"
        $0=25; //@line 1045 "xmltok_impl.c"
        __label__ = 126; break; //@line 1045 "xmltok_impl.c"
      case 35: // $bb36
        var $159=$ptr_addr; //@line 1047 "xmltok_impl.c"
        var $160=$159+2; //@line 1047 "xmltok_impl.c"
        $ptr_addr=$160; //@line 1047 "xmltok_impl.c"
        var $161=$ptr_addr; //@line 1048 "xmltok_impl.c"
        var $162=$end_addr; //@line 1048 "xmltok_impl.c"
        var $163=($161)==($162); //@line 1048 "xmltok_impl.c"
        if ($163) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1048 "xmltok_impl.c"
      case 36: // $bb37
        $0=-26; //@line 1049 "xmltok_impl.c"
        __label__ = 126; break; //@line 1049 "xmltok_impl.c"
      case 37: // $bb38
        var $164=$ptr_addr; //@line 1050 "xmltok_impl.c"
        var $165=$164+1; //@line 1050 "xmltok_impl.c"
        var $166=HEAP[$165]; //@line 1050 "xmltok_impl.c"
        var $167=($166)==0; //@line 1050 "xmltok_impl.c"
        if ($167) { __label__ = 38; break; } else { __label__ = 44; break; } //@line 1050 "xmltok_impl.c"
      case 38: // $bb39
        var $168=$ptr_addr; //@line 1050 "xmltok_impl.c"
        var $169=$168; //@line 1050 "xmltok_impl.c"
        var $170=HEAP[$169]; //@line 1050 "xmltok_impl.c"
        var $171=($170)==93; //@line 1050 "xmltok_impl.c"
        if ($171) { __label__ = 39; break; } else { __label__ = 44; break; } //@line 1050 "xmltok_impl.c"
      case 39: // $bb40
        var $172=$ptr_addr; //@line 1051 "xmltok_impl.c"
        var $173=$172+2; //@line 1051 "xmltok_impl.c"
        var $174=$end_addr; //@line 1051 "xmltok_impl.c"
        var $175=($173)==($174); //@line 1051 "xmltok_impl.c"
        if ($175) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1051 "xmltok_impl.c"
      case 40: // $bb41
        $0=-1; //@line 1052 "xmltok_impl.c"
        __label__ = 126; break; //@line 1052 "xmltok_impl.c"
      case 41: // $bb42
        var $176=$ptr_addr; //@line 1053 "xmltok_impl.c"
        var $177=$176+2; //@line 1053 "xmltok_impl.c"
        var $178=$177+1; //@line 1053 "xmltok_impl.c"
        var $179=HEAP[$178]; //@line 1053 "xmltok_impl.c"
        var $180=($179)==0; //@line 1053 "xmltok_impl.c"
        if ($180) { __label__ = 42; break; } else { __label__ = 44; break; } //@line 1053 "xmltok_impl.c"
      case 42: // $bb43
        var $181=$ptr_addr; //@line 1053 "xmltok_impl.c"
        var $182=$181+2; //@line 1053 "xmltok_impl.c"
        var $183=$182; //@line 1053 "xmltok_impl.c"
        var $184=HEAP[$183]; //@line 1053 "xmltok_impl.c"
        var $185=($184)==62; //@line 1053 "xmltok_impl.c"
        if ($185) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 1053 "xmltok_impl.c"
      case 43: // $bb44
        var $186=$ptr_addr; //@line 1054 "xmltok_impl.c"
        var $187=$186+4; //@line 1054 "xmltok_impl.c"
        var $188=$nextTokPtr_addr; //@line 1054 "xmltok_impl.c"
        HEAP[$188]=$187; //@line 1054 "xmltok_impl.c"
        $0=34; //@line 1055 "xmltok_impl.c"
        __label__ = 126; break; //@line 1055 "xmltok_impl.c"
      case 44: // $bb45
        var $189=$nextTokPtr_addr; //@line 1058 "xmltok_impl.c"
        var $190=$ptr_addr; //@line 1058 "xmltok_impl.c"
        HEAP[$189]=$190; //@line 1058 "xmltok_impl.c"
        $0=26; //@line 1059 "xmltok_impl.c"
        __label__ = 126; break; //@line 1059 "xmltok_impl.c"
      case 45: // $bb46
        var $191=$ptr_addr; //@line 1061 "xmltok_impl.c"
        var $192=$191+2; //@line 1061 "xmltok_impl.c"
        var $193=$nextTokPtr_addr; //@line 1061 "xmltok_impl.c"
        HEAP[$193]=$192; //@line 1061 "xmltok_impl.c"
        $0=23; //@line 1062 "xmltok_impl.c"
        __label__ = 126; break; //@line 1062 "xmltok_impl.c"
      case 46: // $bb47
        var $194=$ptr_addr; //@line 1064 "xmltok_impl.c"
        var $195=$194+2; //@line 1064 "xmltok_impl.c"
        $ptr_addr=$195; //@line 1064 "xmltok_impl.c"
        var $196=$ptr_addr; //@line 1065 "xmltok_impl.c"
        var $197=$end_addr; //@line 1065 "xmltok_impl.c"
        var $198=($196)==($197); //@line 1065 "xmltok_impl.c"
        if ($198) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1065 "xmltok_impl.c"
      case 47: // $bb48
        $0=-24; //@line 1066 "xmltok_impl.c"
        __label__ = 126; break; //@line 1066 "xmltok_impl.c"
      case 48: // $bb49
        var $199=$ptr_addr; //@line 1067 "xmltok_impl.c"
        var $200=$199+1; //@line 1067 "xmltok_impl.c"
        var $201=HEAP[$200]; //@line 1067 "xmltok_impl.c"
        var $202=($201)==0; //@line 1067 "xmltok_impl.c"
        if ($202) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 1067 "xmltok_impl.c"
      case 49: // $bb50
        var $203=$enc_addr; //@line 1067 "xmltok_impl.c"
        var $204=$203; //@line 1067 "xmltok_impl.c"
        var $205=$ptr_addr; //@line 1067 "xmltok_impl.c"
        var $206=HEAP[$205]; //@line 1067 "xmltok_impl.c"
        var $207=($206); //@line 1067 "xmltok_impl.c"
        var $208=$204+76; //@line 1067 "xmltok_impl.c"
        var $209=$208+$207; //@line 1067 "xmltok_impl.c"
        var $210=HEAP[$209]; //@line 1067 "xmltok_impl.c"
        var $211=($210); //@line 1067 "xmltok_impl.c"
        $iftmp_878=$211; //@line 1067 "xmltok_impl.c"
        __lastLabel__ = 49; __label__ = 51; break; //@line 1067 "xmltok_impl.c"
      case 50: // $bb51
        var $212=$ptr_addr; //@line 1067 "xmltok_impl.c"
        var $213=$212; //@line 1067 "xmltok_impl.c"
        var $214=HEAP[$213]; //@line 1067 "xmltok_impl.c"
        var $215=($214); //@line 1067 "xmltok_impl.c"
        var $216=$ptr_addr; //@line 1067 "xmltok_impl.c"
        var $217=$216+1; //@line 1067 "xmltok_impl.c"
        var $218=HEAP[$217]; //@line 1067 "xmltok_impl.c"
        var $219=($218); //@line 1067 "xmltok_impl.c"
        var $220=((($219)) & 255); //@line 1067 "xmltok_impl.c"
        var $221=((($215)) & 255); //@line 1067 "xmltok_impl.c"
        var $222=_unicode_byte_type($220, $221); //@line 1067 "xmltok_impl.c"
        $iftmp_878=$222; //@line 1067 "xmltok_impl.c"
        __lastLabel__ = 50; __label__ = 51; break; //@line 1067 "xmltok_impl.c"
      case 51: // $bb52
        var $223=__lastLabel__ == 50 ? $222 : ($211);
        if ($223 == 9) {
          __label__ = 55; break;
        }
        else if ($223 == 10) {
          __label__ = 55; break;
        }
        else if ($223 == 11) {
          __label__ = 55; break;
        }
        else if ($223 == 15) {
          __label__ = 53; break;
        }
        else if ($223 == 21) {
          __label__ = 55; break;
        }
        else if ($223 == 32) {
          __label__ = 55; break;
        }
        else if ($223 == 33) {
          __label__ = 52; break;
        }
        else if ($223 == 34) {
          __label__ = 54; break;
        }
        else if ($223 == 35) {
          __label__ = 55; break;
        }
        else if ($223 == 36) {
          __label__ = 55; break;
        }
        else {
        __label__ = 56; break;
        }
        
      case 52: // $bb53
        var $224=$ptr_addr; //@line 1069 "xmltok_impl.c"
        var $225=$224+2; //@line 1069 "xmltok_impl.c"
        var $226=$nextTokPtr_addr; //@line 1069 "xmltok_impl.c"
        HEAP[$226]=$225; //@line 1069 "xmltok_impl.c"
        $0=36; //@line 1070 "xmltok_impl.c"
        __label__ = 126; break; //@line 1070 "xmltok_impl.c"
      case 53: // $bb54
        var $227=$ptr_addr; //@line 1072 "xmltok_impl.c"
        var $228=$227+2; //@line 1072 "xmltok_impl.c"
        var $229=$nextTokPtr_addr; //@line 1072 "xmltok_impl.c"
        HEAP[$229]=$228; //@line 1072 "xmltok_impl.c"
        $0=35; //@line 1073 "xmltok_impl.c"
        __label__ = 126; break; //@line 1073 "xmltok_impl.c"
      case 54: // $bb55
        var $230=$ptr_addr; //@line 1075 "xmltok_impl.c"
        var $231=$230+2; //@line 1075 "xmltok_impl.c"
        var $232=$nextTokPtr_addr; //@line 1075 "xmltok_impl.c"
        HEAP[$232]=$231; //@line 1075 "xmltok_impl.c"
        $0=37; //@line 1076 "xmltok_impl.c"
        __label__ = 126; break; //@line 1076 "xmltok_impl.c"
      case 55: // $bb56
        var $233=$nextTokPtr_addr; //@line 1080 "xmltok_impl.c"
        var $234=$ptr_addr; //@line 1080 "xmltok_impl.c"
        HEAP[$233]=$234; //@line 1080 "xmltok_impl.c"
        $0=24; //@line 1081 "xmltok_impl.c"
        __label__ = 126; break; //@line 1081 "xmltok_impl.c"
      case 56: // $bb57
        var $235=$nextTokPtr_addr; //@line 1083 "xmltok_impl.c"
        var $236=$ptr_addr; //@line 1083 "xmltok_impl.c"
        HEAP[$235]=$236; //@line 1083 "xmltok_impl.c"
        $0=0; //@line 1084 "xmltok_impl.c"
        __label__ = 126; break; //@line 1084 "xmltok_impl.c"
      case 57: // $bb58
        var $237=$ptr_addr; //@line 1086 "xmltok_impl.c"
        var $238=$237+2; //@line 1086 "xmltok_impl.c"
        var $239=$nextTokPtr_addr; //@line 1086 "xmltok_impl.c"
        HEAP[$239]=$238; //@line 1086 "xmltok_impl.c"
        $0=21; //@line 1087 "xmltok_impl.c"
        __label__ = 126; break; //@line 1087 "xmltok_impl.c"
      case 58: // $bb59
        var $240=$ptr_addr; //@line 1089 "xmltok_impl.c"
        var $241=$240+2; //@line 1089 "xmltok_impl.c"
        var $242=$nextTokPtr_addr; //@line 1089 "xmltok_impl.c"
        HEAP[$242]=$241; //@line 1089 "xmltok_impl.c"
        $0=17; //@line 1090 "xmltok_impl.c"
        __label__ = 126; break; //@line 1090 "xmltok_impl.c"
      case 59: // $bb60
        var $243=$ptr_addr; //@line 1092 "xmltok_impl.c"
        var $244=$243+2; //@line 1092 "xmltok_impl.c"
        var $245=$enc_addr; //@line 1092 "xmltok_impl.c"
        var $246=$end_addr; //@line 1092 "xmltok_impl.c"
        var $247=$nextTokPtr_addr; //@line 1092 "xmltok_impl.c"
        var $248=_little2_scanPoundName($245, $244, $246, $247); //@line 1092 "xmltok_impl.c"
        $0=$248; //@line 1092 "xmltok_impl.c"
        __label__ = 126; break; //@line 1092 "xmltok_impl.c"
      case 60: // $bb61
        var $249=$end_addr; //@line 1109 "xmltok_impl.c"
        var $250=($249); //@line 1109 "xmltok_impl.c"
        var $251=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $252=($251); //@line 1109 "xmltok_impl.c"
        var $253=($250) - ($252); //@line 1109 "xmltok_impl.c"
        var $254=($253) <= 1; //@line 1109 "xmltok_impl.c"
        if ($254) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 1109 "xmltok_impl.c"
      case 61: // $bb62
        $0=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 126; break; //@line 1109 "xmltok_impl.c"
      case 62: // $bb63
        var $255=$nextTokPtr_addr; //@line 1109 "xmltok_impl.c"
        var $256=$ptr_addr; //@line 1109 "xmltok_impl.c"
        HEAP[$255]=$256; //@line 1109 "xmltok_impl.c"
        $0=0; //@line 1109 "xmltok_impl.c"
        __label__ = 126; break; //@line 1109 "xmltok_impl.c"
      case 63: // $bb64
        var $257=$end_addr; //@line 1109 "xmltok_impl.c"
        var $258=($257); //@line 1109 "xmltok_impl.c"
        var $259=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $260=($259); //@line 1109 "xmltok_impl.c"
        var $261=($258) - ($260); //@line 1109 "xmltok_impl.c"
        var $262=($261) <= 2; //@line 1109 "xmltok_impl.c"
        if ($262) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 1109 "xmltok_impl.c"
      case 64: // $bb65
        $0=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 126; break; //@line 1109 "xmltok_impl.c"
      case 65: // $bb66
        var $263=$nextTokPtr_addr; //@line 1109 "xmltok_impl.c"
        var $264=$ptr_addr; //@line 1109 "xmltok_impl.c"
        HEAP[$263]=$264; //@line 1109 "xmltok_impl.c"
        $0=0; //@line 1109 "xmltok_impl.c"
        __label__ = 126; break; //@line 1109 "xmltok_impl.c"
      case 66: // $bb67
        var $265=$end_addr; //@line 1109 "xmltok_impl.c"
        var $266=($265); //@line 1109 "xmltok_impl.c"
        var $267=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $268=($267); //@line 1109 "xmltok_impl.c"
        var $269=($266) - ($268); //@line 1109 "xmltok_impl.c"
        var $270=($269) <= 3; //@line 1109 "xmltok_impl.c"
        if ($270) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 1109 "xmltok_impl.c"
      case 67: // $bb68
        $0=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 126; break; //@line 1109 "xmltok_impl.c"
      case 68: // $bb69
        var $271=$nextTokPtr_addr; //@line 1109 "xmltok_impl.c"
        var $272=$ptr_addr; //@line 1109 "xmltok_impl.c"
        HEAP[$271]=$272; //@line 1109 "xmltok_impl.c"
        $0=0; //@line 1109 "xmltok_impl.c"
        __label__ = 126; break; //@line 1109 "xmltok_impl.c"
      case 69: // $bb70
        $tok=18; //@line 1113 "xmltok_impl.c"
        var $273=$ptr_addr; //@line 1114 "xmltok_impl.c"
        var $274=$273+2; //@line 1114 "xmltok_impl.c"
        $ptr_addr=$274; //@line 1114 "xmltok_impl.c"
        __label__ = 124; break; //@line 1114 "xmltok_impl.c"
      case 70: // $bb71
        $tok=19; //@line 1122 "xmltok_impl.c"
        var $275=$ptr_addr; //@line 1123 "xmltok_impl.c"
        var $276=$275+2; //@line 1123 "xmltok_impl.c"
        $ptr_addr=$276; //@line 1123 "xmltok_impl.c"
        __label__ = 124; break; //@line 1123 "xmltok_impl.c"
      case 71: // $bb72
        var $277=$ptr_addr; //@line 1126 "xmltok_impl.c"
        var $278=$277+1; //@line 1126 "xmltok_impl.c"
        var $279=HEAP[$278]; //@line 1126 "xmltok_impl.c"
        var $280=($279); //@line 1126 "xmltok_impl.c"
        var $281=_nmstrtPages+$280; //@line 1126 "xmltok_impl.c"
        var $282=HEAP[$281]; //@line 1126 "xmltok_impl.c"
        var $283=($282); //@line 1126 "xmltok_impl.c"
        var $284=($283) * 8;
        var $285=$ptr_addr; //@line 1126 "xmltok_impl.c"
        var $286=$285; //@line 1126 "xmltok_impl.c"
        var $287=HEAP[$286]; //@line 1126 "xmltok_impl.c"
        var $288=($287) >>> 5; //@line 1126 "xmltok_impl.c"
        var $289=($288); //@line 1126 "xmltok_impl.c"
        var $290=($289) + ($284); //@line 1126 "xmltok_impl.c"
        var $291=_namingBitmap+$290*4; //@line 1126 "xmltok_impl.c"
        var $292=HEAP[$291]; //@line 1126 "xmltok_impl.c"
        var $293=$ptr_addr; //@line 1126 "xmltok_impl.c"
        var $294=$293; //@line 1126 "xmltok_impl.c"
        var $295=HEAP[$294]; //@line 1126 "xmltok_impl.c"
        var $296=($295); //@line 1126 "xmltok_impl.c"
        var $297=($296) & 31; //@line 1126 "xmltok_impl.c"
        var $298=1 << ($297); //@line 1126 "xmltok_impl.c"
        var $299=($298) & ($292); //@line 1126 "xmltok_impl.c"
        var $300=($299)!=0; //@line 1126 "xmltok_impl.c"
        var $301=$ptr_addr; //@line 1127 "xmltok_impl.c"
        if ($300) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 1126 "xmltok_impl.c"
      case 72: // $bb73
        var $302=$301+2; //@line 1127 "xmltok_impl.c"
        $ptr_addr=$302; //@line 1127 "xmltok_impl.c"
        $tok=18; //@line 1128 "xmltok_impl.c"
        __label__ = 124; break; //@line 1128 "xmltok_impl.c"
      case 73: // $bb74
        var $303=$301+1; //@line 1131 "xmltok_impl.c"
        var $304=HEAP[$303]; //@line 1131 "xmltok_impl.c"
        var $305=($304); //@line 1131 "xmltok_impl.c"
        var $306=_namePages+$305; //@line 1131 "xmltok_impl.c"
        var $307=HEAP[$306]; //@line 1131 "xmltok_impl.c"
        var $308=($307); //@line 1131 "xmltok_impl.c"
        var $309=($308) * 8;
        var $310=$ptr_addr; //@line 1131 "xmltok_impl.c"
        var $311=$310; //@line 1131 "xmltok_impl.c"
        var $312=HEAP[$311]; //@line 1131 "xmltok_impl.c"
        var $313=($312) >>> 5; //@line 1131 "xmltok_impl.c"
        var $314=($313); //@line 1131 "xmltok_impl.c"
        var $315=($314) + ($309); //@line 1131 "xmltok_impl.c"
        var $316=_namingBitmap+$315*4; //@line 1131 "xmltok_impl.c"
        var $317=HEAP[$316]; //@line 1131 "xmltok_impl.c"
        var $318=$ptr_addr; //@line 1131 "xmltok_impl.c"
        var $319=$318; //@line 1131 "xmltok_impl.c"
        var $320=HEAP[$319]; //@line 1131 "xmltok_impl.c"
        var $321=($320); //@line 1131 "xmltok_impl.c"
        var $322=($321) & 31; //@line 1131 "xmltok_impl.c"
        var $323=1 << ($322); //@line 1131 "xmltok_impl.c"
        var $324=($323) & ($317); //@line 1131 "xmltok_impl.c"
        var $325=($324)!=0; //@line 1131 "xmltok_impl.c"
        if ($325) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 1131 "xmltok_impl.c"
      case 74: // $bb75
        var $326=$ptr_addr; //@line 1132 "xmltok_impl.c"
        var $327=$326+2; //@line 1132 "xmltok_impl.c"
        $ptr_addr=$327; //@line 1132 "xmltok_impl.c"
        $tok=19; //@line 1133 "xmltok_impl.c"
        __label__ = 124; break; //@line 1133 "xmltok_impl.c"
      case 75: // $bb76
        var $328=$nextTokPtr_addr; //@line 1138 "xmltok_impl.c"
        var $329=$ptr_addr; //@line 1138 "xmltok_impl.c"
        HEAP[$328]=$329; //@line 1138 "xmltok_impl.c"
        $0=0; //@line 1139 "xmltok_impl.c"
        __label__ = 126; break; //@line 1139 "xmltok_impl.c"
      case 76: // $bb78
        var $330=$ptr_addr; //@line 1142 "xmltok_impl.c"
        var $331=$330+1; //@line 1142 "xmltok_impl.c"
        var $332=HEAP[$331]; //@line 1142 "xmltok_impl.c"
        var $333=($332)==0; //@line 1142 "xmltok_impl.c"
        if ($333) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 1142 "xmltok_impl.c"
      case 77: // $bb79
        var $334=$enc_addr; //@line 1142 "xmltok_impl.c"
        var $335=$334; //@line 1142 "xmltok_impl.c"
        var $336=$ptr_addr; //@line 1142 "xmltok_impl.c"
        var $337=HEAP[$336]; //@line 1142 "xmltok_impl.c"
        var $338=($337); //@line 1142 "xmltok_impl.c"
        var $339=$335+76; //@line 1142 "xmltok_impl.c"
        var $340=$339+$338; //@line 1142 "xmltok_impl.c"
        var $341=HEAP[$340]; //@line 1142 "xmltok_impl.c"
        var $342=($341); //@line 1142 "xmltok_impl.c"
        $iftmp_886=$342; //@line 1142 "xmltok_impl.c"
        __lastLabel__ = 77; __label__ = 79; break; //@line 1142 "xmltok_impl.c"
      case 78: // $bb80
        var $343=$ptr_addr; //@line 1142 "xmltok_impl.c"
        var $344=$343; //@line 1142 "xmltok_impl.c"
        var $345=HEAP[$344]; //@line 1142 "xmltok_impl.c"
        var $346=($345); //@line 1142 "xmltok_impl.c"
        var $347=$ptr_addr; //@line 1142 "xmltok_impl.c"
        var $348=$347+1; //@line 1142 "xmltok_impl.c"
        var $349=HEAP[$348]; //@line 1142 "xmltok_impl.c"
        var $350=($349); //@line 1142 "xmltok_impl.c"
        var $351=((($350)) & 255); //@line 1142 "xmltok_impl.c"
        var $352=((($346)) & 255); //@line 1142 "xmltok_impl.c"
        var $353=_unicode_byte_type($351, $352); //@line 1142 "xmltok_impl.c"
        $iftmp_886=$353; //@line 1142 "xmltok_impl.c"
        __lastLabel__ = 78; __label__ = 79; break; //@line 1142 "xmltok_impl.c"
      case 79: // $bb81
        var $354=__lastLabel__ == 78 ? $353 : ($342);
        if ($354 == 5) {
          __label__ = 83; break;
        }
        else if ($354 == 6) {
          __label__ = 86; break;
        }
        else if ($354 == 7) {
          __label__ = 89; break;
        }
        else if ($354 == 9) {
          __label__ = 92; break;
        }
        else if ($354 == 10) {
          __label__ = 92; break;
        }
        else if ($354 == 11) {
          __label__ = 92; break;
        }
        else if ($354 == 15) {
          __label__ = 120; break;
        }
        else if ($354 == 20) {
          __label__ = 92; break;
        }
        else if ($354 == 21) {
          __label__ = 92; break;
        }
        else if ($354 == 22) {
          __label__ = 82; break;
        }
        else if ($354 == 23) {
          __label__ = 93; break;
        }
        else if ($354 == 24) {
          __label__ = 82; break;
        }
        else if ($354 == 25) {
          __label__ = 82; break;
        }
        else if ($354 == 26) {
          __label__ = 82; break;
        }
        else if ($354 == 27) {
          __label__ = 82; break;
        }
        else if ($354 == 29) {
          __label__ = 80; break;
        }
        else if ($354 == 30) {
          __label__ = 92; break;
        }
        else if ($354 == 32) {
          __label__ = 92; break;
        }
        else if ($354 == 33) {
          __label__ = 117; break;
        }
        else if ($354 == 34) {
          __label__ = 114; break;
        }
        else if ($354 == 35) {
          __label__ = 92; break;
        }
        else if ($354 == 36) {
          __label__ = 92; break;
        }
        else {
        __label__ = 123; break;
        }
        
      case 80: // $bb82
        var $355=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $356=$355+1; //@line 1143 "xmltok_impl.c"
        var $357=HEAP[$356]; //@line 1143 "xmltok_impl.c"
        var $358=($357); //@line 1143 "xmltok_impl.c"
        var $359=_namePages+$358; //@line 1143 "xmltok_impl.c"
        var $360=HEAP[$359]; //@line 1143 "xmltok_impl.c"
        var $361=($360); //@line 1143 "xmltok_impl.c"
        var $362=($361) * 8;
        var $363=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $364=$363; //@line 1143 "xmltok_impl.c"
        var $365=HEAP[$364]; //@line 1143 "xmltok_impl.c"
        var $366=($365) >>> 5; //@line 1143 "xmltok_impl.c"
        var $367=($366); //@line 1143 "xmltok_impl.c"
        var $368=($367) + ($362); //@line 1143 "xmltok_impl.c"
        var $369=_namingBitmap+$368*4; //@line 1143 "xmltok_impl.c"
        var $370=HEAP[$369]; //@line 1143 "xmltok_impl.c"
        var $371=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $372=$371; //@line 1143 "xmltok_impl.c"
        var $373=HEAP[$372]; //@line 1143 "xmltok_impl.c"
        var $374=($373); //@line 1143 "xmltok_impl.c"
        var $375=($374) & 31; //@line 1143 "xmltok_impl.c"
        var $376=1 << ($375); //@line 1143 "xmltok_impl.c"
        var $377=($376) & ($370); //@line 1143 "xmltok_impl.c"
        var $378=($377)==0; //@line 1143 "xmltok_impl.c"
        if ($378) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 1143 "xmltok_impl.c"
      case 81: // $bb83
        var $379=$nextTokPtr_addr; //@line 1143 "xmltok_impl.c"
        var $380=$ptr_addr; //@line 1143 "xmltok_impl.c"
        HEAP[$379]=$380; //@line 1143 "xmltok_impl.c"
        $0=0; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 82: // $bb84
        var $381=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $382=$381+2; //@line 1143 "xmltok_impl.c"
        $ptr_addr=$382; //@line 1143 "xmltok_impl.c"
        __label__ = 124; break; //@line 1143 "xmltok_impl.c"
      case 83: // $bb85
        var $383=$end_addr; //@line 1143 "xmltok_impl.c"
        var $384=($383); //@line 1143 "xmltok_impl.c"
        var $385=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $386=($385); //@line 1143 "xmltok_impl.c"
        var $387=($384) - ($386); //@line 1143 "xmltok_impl.c"
        var $388=($387) <= 1; //@line 1143 "xmltok_impl.c"
        if ($388) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 1143 "xmltok_impl.c"
      case 84: // $bb86
        $0=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 85: // $bb87
        var $389=$nextTokPtr_addr; //@line 1143 "xmltok_impl.c"
        var $390=$ptr_addr; //@line 1143 "xmltok_impl.c"
        HEAP[$389]=$390; //@line 1143 "xmltok_impl.c"
        $0=0; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 86: // $bb88
        var $391=$end_addr; //@line 1143 "xmltok_impl.c"
        var $392=($391); //@line 1143 "xmltok_impl.c"
        var $393=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $394=($393); //@line 1143 "xmltok_impl.c"
        var $395=($392) - ($394); //@line 1143 "xmltok_impl.c"
        var $396=($395) <= 2; //@line 1143 "xmltok_impl.c"
        if ($396) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 1143 "xmltok_impl.c"
      case 87: // $bb89
        $0=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 88: // $bb90
        var $397=$nextTokPtr_addr; //@line 1143 "xmltok_impl.c"
        var $398=$ptr_addr; //@line 1143 "xmltok_impl.c"
        HEAP[$397]=$398; //@line 1143 "xmltok_impl.c"
        $0=0; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 89: // $bb91
        var $399=$end_addr; //@line 1143 "xmltok_impl.c"
        var $400=($399); //@line 1143 "xmltok_impl.c"
        var $401=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $402=($401); //@line 1143 "xmltok_impl.c"
        var $403=($400) - ($402); //@line 1143 "xmltok_impl.c"
        var $404=($403) <= 3; //@line 1143 "xmltok_impl.c"
        if ($404) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 1143 "xmltok_impl.c"
      case 90: // $bb92
        $0=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 91: // $bb93
        var $405=$nextTokPtr_addr; //@line 1143 "xmltok_impl.c"
        var $406=$ptr_addr; //@line 1143 "xmltok_impl.c"
        HEAP[$405]=$406; //@line 1143 "xmltok_impl.c"
        $0=0; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 92: // $bb94
        var $407=$nextTokPtr_addr; //@line 1147 "xmltok_impl.c"
        var $408=$ptr_addr; //@line 1147 "xmltok_impl.c"
        HEAP[$407]=$408; //@line 1147 "xmltok_impl.c"
        var $409=$tok; //@line 1148 "xmltok_impl.c"
        $0=$409; //@line 1148 "xmltok_impl.c"
        __label__ = 126; break; //@line 1148 "xmltok_impl.c"
      case 93: // $bb95
        var $410=$ptr_addr; //@line 1151 "xmltok_impl.c"
        var $411=$410+2; //@line 1151 "xmltok_impl.c"
        $ptr_addr=$411; //@line 1151 "xmltok_impl.c"
        var $412=$tok; //@line 1152 "xmltok_impl.c"
        if ($412 == 18) {
          __label__ = 94; break;
        }
        else if ($412 == 41) {
          __label__ = 113; break;
        }
        else {
        __label__ = 124; break;
        }
        
      case 94: // $bb96
        var $413=$ptr_addr; //@line 1154 "xmltok_impl.c"
        var $414=$end_addr; //@line 1154 "xmltok_impl.c"
        var $415=($413)==($414); //@line 1154 "xmltok_impl.c"
        if ($415) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 1154 "xmltok_impl.c"
      case 95: // $bb97
        $0=-1; //@line 1155 "xmltok_impl.c"
        __label__ = 126; break; //@line 1155 "xmltok_impl.c"
      case 96: // $bb98
        $tok=41; //@line 1156 "xmltok_impl.c"
        var $416=$ptr_addr; //@line 1157 "xmltok_impl.c"
        var $417=$416+1; //@line 1157 "xmltok_impl.c"
        var $418=HEAP[$417]; //@line 1157 "xmltok_impl.c"
        var $419=($418)==0; //@line 1157 "xmltok_impl.c"
        if ($419) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 1157 "xmltok_impl.c"
      case 97: // $bb99
        var $420=$enc_addr; //@line 1157 "xmltok_impl.c"
        var $421=$420; //@line 1157 "xmltok_impl.c"
        var $422=$ptr_addr; //@line 1157 "xmltok_impl.c"
        var $423=HEAP[$422]; //@line 1157 "xmltok_impl.c"
        var $424=($423); //@line 1157 "xmltok_impl.c"
        var $425=$421+76; //@line 1157 "xmltok_impl.c"
        var $426=$425+$424; //@line 1157 "xmltok_impl.c"
        var $427=HEAP[$426]; //@line 1157 "xmltok_impl.c"
        var $428=($427); //@line 1157 "xmltok_impl.c"
        $iftmp_894=$428; //@line 1157 "xmltok_impl.c"
        __lastLabel__ = 97; __label__ = 99; break; //@line 1157 "xmltok_impl.c"
      case 98: // $bb100
        var $429=$ptr_addr; //@line 1157 "xmltok_impl.c"
        var $430=$429; //@line 1157 "xmltok_impl.c"
        var $431=HEAP[$430]; //@line 1157 "xmltok_impl.c"
        var $432=($431); //@line 1157 "xmltok_impl.c"
        var $433=$ptr_addr; //@line 1157 "xmltok_impl.c"
        var $434=$433+1; //@line 1157 "xmltok_impl.c"
        var $435=HEAP[$434]; //@line 1157 "xmltok_impl.c"
        var $436=($435); //@line 1157 "xmltok_impl.c"
        var $437=((($436)) & 255); //@line 1157 "xmltok_impl.c"
        var $438=((($432)) & 255); //@line 1157 "xmltok_impl.c"
        var $439=_unicode_byte_type($437, $438); //@line 1157 "xmltok_impl.c"
        $iftmp_894=$439; //@line 1157 "xmltok_impl.c"
        __lastLabel__ = 98; __label__ = 99; break; //@line 1157 "xmltok_impl.c"
      case 99: // $bb101
        var $440=__lastLabel__ == 98 ? $439 : ($428);
        if ($440 == 5) {
          __label__ = 103; break;
        }
        else if ($440 == 6) {
          __label__ = 106; break;
        }
        else if ($440 == 7) {
          __label__ = 109; break;
        }
        else if ($440 == 22) {
          __label__ = 102; break;
        }
        else if ($440 == 24) {
          __label__ = 102; break;
        }
        else if ($440 == 25) {
          __label__ = 102; break;
        }
        else if ($440 == 26) {
          __label__ = 102; break;
        }
        else if ($440 == 27) {
          __label__ = 102; break;
        }
        else if ($440 == 29) {
          __label__ = 100; break;
        }
        else {
        __label__ = 112; break;
        }
        
      case 100: // $bb102
        var $441=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $442=$441+1; //@line 1158 "xmltok_impl.c"
        var $443=HEAP[$442]; //@line 1158 "xmltok_impl.c"
        var $444=($443); //@line 1158 "xmltok_impl.c"
        var $445=_namePages+$444; //@line 1158 "xmltok_impl.c"
        var $446=HEAP[$445]; //@line 1158 "xmltok_impl.c"
        var $447=($446); //@line 1158 "xmltok_impl.c"
        var $448=($447) * 8;
        var $449=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $450=$449; //@line 1158 "xmltok_impl.c"
        var $451=HEAP[$450]; //@line 1158 "xmltok_impl.c"
        var $452=($451) >>> 5; //@line 1158 "xmltok_impl.c"
        var $453=($452); //@line 1158 "xmltok_impl.c"
        var $454=($453) + ($448); //@line 1158 "xmltok_impl.c"
        var $455=_namingBitmap+$454*4; //@line 1158 "xmltok_impl.c"
        var $456=HEAP[$455]; //@line 1158 "xmltok_impl.c"
        var $457=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $458=$457; //@line 1158 "xmltok_impl.c"
        var $459=HEAP[$458]; //@line 1158 "xmltok_impl.c"
        var $460=($459); //@line 1158 "xmltok_impl.c"
        var $461=($460) & 31; //@line 1158 "xmltok_impl.c"
        var $462=1 << ($461); //@line 1158 "xmltok_impl.c"
        var $463=($462) & ($456); //@line 1158 "xmltok_impl.c"
        var $464=($463)==0; //@line 1158 "xmltok_impl.c"
        if ($464) { __label__ = 101; break; } else { __label__ = 102; break; } //@line 1158 "xmltok_impl.c"
      case 101: // $bb103
        var $465=$nextTokPtr_addr; //@line 1158 "xmltok_impl.c"
        var $466=$ptr_addr; //@line 1158 "xmltok_impl.c"
        HEAP[$465]=$466; //@line 1158 "xmltok_impl.c"
        $0=0; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 102: // $bb104
        var $467=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $468=$467+2; //@line 1158 "xmltok_impl.c"
        $ptr_addr=$468; //@line 1158 "xmltok_impl.c"
        __label__ = 124; break; //@line 1158 "xmltok_impl.c"
      case 103: // $bb105
        var $469=$end_addr; //@line 1158 "xmltok_impl.c"
        var $470=($469); //@line 1158 "xmltok_impl.c"
        var $471=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $472=($471); //@line 1158 "xmltok_impl.c"
        var $473=($470) - ($472); //@line 1158 "xmltok_impl.c"
        var $474=($473) <= 1; //@line 1158 "xmltok_impl.c"
        if ($474) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 1158 "xmltok_impl.c"
      case 104: // $bb106
        $0=-2; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 105: // $bb107
        var $475=$nextTokPtr_addr; //@line 1158 "xmltok_impl.c"
        var $476=$ptr_addr; //@line 1158 "xmltok_impl.c"
        HEAP[$475]=$476; //@line 1158 "xmltok_impl.c"
        $0=0; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 106: // $bb108
        var $477=$end_addr; //@line 1158 "xmltok_impl.c"
        var $478=($477); //@line 1158 "xmltok_impl.c"
        var $479=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $480=($479); //@line 1158 "xmltok_impl.c"
        var $481=($478) - ($480); //@line 1158 "xmltok_impl.c"
        var $482=($481) <= 2; //@line 1158 "xmltok_impl.c"
        if ($482) { __label__ = 107; break; } else { __label__ = 108; break; } //@line 1158 "xmltok_impl.c"
      case 107: // $bb109
        $0=-2; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 108: // $bb110
        var $483=$nextTokPtr_addr; //@line 1158 "xmltok_impl.c"
        var $484=$ptr_addr; //@line 1158 "xmltok_impl.c"
        HEAP[$483]=$484; //@line 1158 "xmltok_impl.c"
        $0=0; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 109: // $bb111
        var $485=$end_addr; //@line 1158 "xmltok_impl.c"
        var $486=($485); //@line 1158 "xmltok_impl.c"
        var $487=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $488=($487); //@line 1158 "xmltok_impl.c"
        var $489=($486) - ($488); //@line 1158 "xmltok_impl.c"
        var $490=($489) <= 3; //@line 1158 "xmltok_impl.c"
        if ($490) { __label__ = 110; break; } else { __label__ = 111; break; } //@line 1158 "xmltok_impl.c"
      case 110: // $bb112
        $0=-2; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 111: // $bb113
        var $491=$nextTokPtr_addr; //@line 1158 "xmltok_impl.c"
        var $492=$ptr_addr; //@line 1158 "xmltok_impl.c"
        HEAP[$491]=$492; //@line 1158 "xmltok_impl.c"
        $0=0; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 112: // $bb114
        $tok=19; //@line 1160 "xmltok_impl.c"
        __label__ = 124; break; //@line 1160 "xmltok_impl.c"
      case 113: // $bb116
        $tok=19; //@line 1165 "xmltok_impl.c"
        __label__ = 124; break; //@line 1165 "xmltok_impl.c"
      case 114: // $bb118
        var $493=$tok; //@line 1171 "xmltok_impl.c"
        var $494=($493)==19; //@line 1171 "xmltok_impl.c"
        if ($494) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 1171 "xmltok_impl.c"
      case 115: // $bb119
        var $495=$nextTokPtr_addr; //@line 1172 "xmltok_impl.c"
        var $496=$ptr_addr; //@line 1172 "xmltok_impl.c"
        HEAP[$495]=$496; //@line 1172 "xmltok_impl.c"
        $0=0; //@line 1173 "xmltok_impl.c"
        __label__ = 126; break; //@line 1173 "xmltok_impl.c"
      case 116: // $bb120
        var $497=$ptr_addr; //@line 1175 "xmltok_impl.c"
        var $498=$497+2; //@line 1175 "xmltok_impl.c"
        var $499=$nextTokPtr_addr; //@line 1175 "xmltok_impl.c"
        HEAP[$499]=$498; //@line 1175 "xmltok_impl.c"
        $0=32; //@line 1176 "xmltok_impl.c"
        __label__ = 126; break; //@line 1176 "xmltok_impl.c"
      case 117: // $bb121
        var $500=$tok; //@line 1178 "xmltok_impl.c"
        var $501=($500)==19; //@line 1178 "xmltok_impl.c"
        if ($501) { __label__ = 118; break; } else { __label__ = 119; break; } //@line 1178 "xmltok_impl.c"
      case 118: // $bb122
        var $502=$nextTokPtr_addr; //@line 1179 "xmltok_impl.c"
        var $503=$ptr_addr; //@line 1179 "xmltok_impl.c"
        HEAP[$502]=$503; //@line 1179 "xmltok_impl.c"
        $0=0; //@line 1180 "xmltok_impl.c"
        __label__ = 126; break; //@line 1180 "xmltok_impl.c"
      case 119: // $bb123
        var $504=$ptr_addr; //@line 1182 "xmltok_impl.c"
        var $505=$504+2; //@line 1182 "xmltok_impl.c"
        var $506=$nextTokPtr_addr; //@line 1182 "xmltok_impl.c"
        HEAP[$506]=$505; //@line 1182 "xmltok_impl.c"
        $0=31; //@line 1183 "xmltok_impl.c"
        __label__ = 126; break; //@line 1183 "xmltok_impl.c"
      case 120: // $bb124
        var $507=$tok; //@line 1185 "xmltok_impl.c"
        var $508=($507)==19; //@line 1185 "xmltok_impl.c"
        if ($508) { __label__ = 121; break; } else { __label__ = 122; break; } //@line 1185 "xmltok_impl.c"
      case 121: // $bb125
        var $509=$nextTokPtr_addr; //@line 1186 "xmltok_impl.c"
        var $510=$ptr_addr; //@line 1186 "xmltok_impl.c"
        HEAP[$509]=$510; //@line 1186 "xmltok_impl.c"
        $0=0; //@line 1187 "xmltok_impl.c"
        __label__ = 126; break; //@line 1187 "xmltok_impl.c"
      case 122: // $bb126
        var $511=$ptr_addr; //@line 1189 "xmltok_impl.c"
        var $512=$511+2; //@line 1189 "xmltok_impl.c"
        var $513=$nextTokPtr_addr; //@line 1189 "xmltok_impl.c"
        HEAP[$513]=$512; //@line 1189 "xmltok_impl.c"
        $0=30; //@line 1190 "xmltok_impl.c"
        __label__ = 126; break; //@line 1190 "xmltok_impl.c"
      case 123: // $bb127
        var $514=$nextTokPtr_addr; //@line 1192 "xmltok_impl.c"
        var $515=$ptr_addr; //@line 1192 "xmltok_impl.c"
        HEAP[$514]=$515; //@line 1192 "xmltok_impl.c"
        $0=0; //@line 1193 "xmltok_impl.c"
        __label__ = 126; break; //@line 1193 "xmltok_impl.c"
      case 124: // $bb128
        var $516=$ptr_addr; //@line 1141 "xmltok_impl.c"
        var $517=$end_addr; //@line 1141 "xmltok_impl.c"
        var $518=($516)!=($517); //@line 1141 "xmltok_impl.c"
        if ($518) { __label__ = 76; break; } else { __label__ = 125; break; } //@line 1141 "xmltok_impl.c"
      case 125: // $bb129
        var $519=$tok; //@line 1196 "xmltok_impl.c"
        var $520=0 - ($519); //@line 1196 "xmltok_impl.c"
        $0=$520; //@line 1196 "xmltok_impl.c"
        __label__ = 126; break; //@line 1196 "xmltok_impl.c"
      case 126: // $bb130
        var $521=$0; //@line 974 "xmltok_impl.c"
        $retval=$521; //@line 974 "xmltok_impl.c"
        var $retval131=$retval; //@line 974 "xmltok_impl.c"
        ;
        return $retval131; //@line 974 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_attributeValueTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_904;
        var $iftmp_902;
        var $0;
        var $start;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 1204 "xmltok_impl.c"
        var $2=$end_addr; //@line 1204 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1204 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1204 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 1205 "xmltok_impl.c"
        __label__ = 33; break; //@line 1205 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 1206 "xmltok_impl.c"
        $start=$4; //@line 1206 "xmltok_impl.c"
        __label__ = 31; break; //@line 1206 "xmltok_impl.c"
      case 3: // $bb2
        var $5=$ptr_addr; //@line 1208 "xmltok_impl.c"
        var $6=$5+1; //@line 1208 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1208 "xmltok_impl.c"
        var $8=($7)==0; //@line 1208 "xmltok_impl.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1208 "xmltok_impl.c"
      case 4: // $bb3
        var $9=$enc_addr; //@line 1208 "xmltok_impl.c"
        var $10=$9; //@line 1208 "xmltok_impl.c"
        var $11=$ptr_addr; //@line 1208 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1208 "xmltok_impl.c"
        var $13=($12); //@line 1208 "xmltok_impl.c"
        var $14=$10+76; //@line 1208 "xmltok_impl.c"
        var $15=$14+$13; //@line 1208 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1208 "xmltok_impl.c"
        var $17=($16); //@line 1208 "xmltok_impl.c"
        $iftmp_902=$17; //@line 1208 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 6; break; //@line 1208 "xmltok_impl.c"
      case 5: // $bb4
        var $18=$ptr_addr; //@line 1208 "xmltok_impl.c"
        var $19=$18; //@line 1208 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1208 "xmltok_impl.c"
        var $21=($20); //@line 1208 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 1208 "xmltok_impl.c"
        var $23=$22+1; //@line 1208 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 1208 "xmltok_impl.c"
        var $25=($24); //@line 1208 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 1208 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 1208 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 1208 "xmltok_impl.c"
        $iftmp_902=$28; //@line 1208 "xmltok_impl.c"
        __lastLabel__ = 5; __label__ = 6; break; //@line 1208 "xmltok_impl.c"
      case 6: // $bb5
        var $29=__lastLabel__ == 5 ? $28 : ($17);
        if ($29 == 2) {
          __label__ = 13; break;
        }
        else if ($29 == 3) {
          __label__ = 10; break;
        }
        else if ($29 == 5) {
          __label__ = 7; break;
        }
        else if ($29 == 6) {
          __label__ = 8; break;
        }
        else if ($29 == 7) {
          __label__ = 9; break;
        }
        else if ($29 == 9) {
          __label__ = 17; break;
        }
        else if ($29 == 10) {
          __label__ = 14; break;
        }
        else if ($29 == 21) {
          __label__ = 27; break;
        }
        else {
        __label__ = 30; break;
        }
        
      case 7: // $bb6
        var $30=$ptr_addr; //@line 1211 "xmltok_impl.c"
        var $31=$30+2; //@line 1211 "xmltok_impl.c"
        $ptr_addr=$31; //@line 1211 "xmltok_impl.c"
        __label__ = 31; break; //@line 1211 "xmltok_impl.c"
      case 8: // $bb7
        var $32=$ptr_addr; //@line 1211 "xmltok_impl.c"
        var $33=$32+3; //@line 1211 "xmltok_impl.c"
        $ptr_addr=$33; //@line 1211 "xmltok_impl.c"
        __label__ = 31; break; //@line 1211 "xmltok_impl.c"
      case 9: // $bb8
        var $34=$ptr_addr; //@line 1211 "xmltok_impl.c"
        var $35=$34+4; //@line 1211 "xmltok_impl.c"
        $ptr_addr=$35; //@line 1211 "xmltok_impl.c"
        __label__ = 31; break; //@line 1211 "xmltok_impl.c"
      case 10: // $bb9
        var $36=$ptr_addr; //@line 1214 "xmltok_impl.c"
        var $37=$start; //@line 1214 "xmltok_impl.c"
        var $38=($36)==($37); //@line 1214 "xmltok_impl.c"
        if ($38) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1214 "xmltok_impl.c"
      case 11: // $bb10
        var $39=$ptr_addr; //@line 1215 "xmltok_impl.c"
        var $40=$39+2; //@line 1215 "xmltok_impl.c"
        var $41=$enc_addr; //@line 1215 "xmltok_impl.c"
        var $42=$end_addr; //@line 1215 "xmltok_impl.c"
        var $43=$nextTokPtr_addr; //@line 1215 "xmltok_impl.c"
        var $44=_little2_scanRef($41, $40, $42, $43); //@line 1215 "xmltok_impl.c"
        $0=$44; //@line 1215 "xmltok_impl.c"
        __label__ = 33; break; //@line 1215 "xmltok_impl.c"
      case 12: // $bb11
        var $45=$nextTokPtr_addr; //@line 1216 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 1216 "xmltok_impl.c"
        HEAP[$45]=$46; //@line 1216 "xmltok_impl.c"
        $0=6; //@line 1217 "xmltok_impl.c"
        __label__ = 33; break; //@line 1217 "xmltok_impl.c"
      case 13: // $bb12
        var $47=$nextTokPtr_addr; //@line 1220 "xmltok_impl.c"
        var $48=$ptr_addr; //@line 1220 "xmltok_impl.c"
        HEAP[$47]=$48; //@line 1220 "xmltok_impl.c"
        $0=0; //@line 1221 "xmltok_impl.c"
        __label__ = 33; break; //@line 1221 "xmltok_impl.c"
      case 14: // $bb13
        var $49=$ptr_addr; //@line 1223 "xmltok_impl.c"
        var $50=$start; //@line 1223 "xmltok_impl.c"
        var $51=($49)==($50); //@line 1223 "xmltok_impl.c"
        if ($51) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1223 "xmltok_impl.c"
      case 15: // $bb14
        var $52=$ptr_addr; //@line 1224 "xmltok_impl.c"
        var $53=$52+2; //@line 1224 "xmltok_impl.c"
        var $54=$nextTokPtr_addr; //@line 1224 "xmltok_impl.c"
        HEAP[$54]=$53; //@line 1224 "xmltok_impl.c"
        $0=7; //@line 1225 "xmltok_impl.c"
        __label__ = 33; break; //@line 1225 "xmltok_impl.c"
      case 16: // $bb15
        var $55=$nextTokPtr_addr; //@line 1227 "xmltok_impl.c"
        var $56=$ptr_addr; //@line 1227 "xmltok_impl.c"
        HEAP[$55]=$56; //@line 1227 "xmltok_impl.c"
        $0=6; //@line 1228 "xmltok_impl.c"
        __label__ = 33; break; //@line 1228 "xmltok_impl.c"
      case 17: // $bb16
        var $57=$ptr_addr; //@line 1230 "xmltok_impl.c"
        var $58=$start; //@line 1230 "xmltok_impl.c"
        var $59=($57)==($58); //@line 1230 "xmltok_impl.c"
        if ($59) { __label__ = 18; break; } else { __label__ = 26; break; } //@line 1230 "xmltok_impl.c"
      case 18: // $bb17
        var $60=$ptr_addr; //@line 1231 "xmltok_impl.c"
        var $61=$60+2; //@line 1231 "xmltok_impl.c"
        $ptr_addr=$61; //@line 1231 "xmltok_impl.c"
        var $62=$ptr_addr; //@line 1232 "xmltok_impl.c"
        var $63=$end_addr; //@line 1232 "xmltok_impl.c"
        var $64=($62)==($63); //@line 1232 "xmltok_impl.c"
        if ($64) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1232 "xmltok_impl.c"
      case 19: // $bb18
        $0=-3; //@line 1233 "xmltok_impl.c"
        __label__ = 33; break; //@line 1233 "xmltok_impl.c"
      case 20: // $bb19
        var $65=$ptr_addr; //@line 1234 "xmltok_impl.c"
        var $66=$65+1; //@line 1234 "xmltok_impl.c"
        var $67=HEAP[$66]; //@line 1234 "xmltok_impl.c"
        var $68=($67)==0; //@line 1234 "xmltok_impl.c"
        if ($68) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1234 "xmltok_impl.c"
      case 21: // $bb20
        var $69=$enc_addr; //@line 1234 "xmltok_impl.c"
        var $70=$69; //@line 1234 "xmltok_impl.c"
        var $71=$ptr_addr; //@line 1234 "xmltok_impl.c"
        var $72=HEAP[$71]; //@line 1234 "xmltok_impl.c"
        var $73=($72); //@line 1234 "xmltok_impl.c"
        var $74=$70+76; //@line 1234 "xmltok_impl.c"
        var $75=$74+$73; //@line 1234 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 1234 "xmltok_impl.c"
        var $77=($76)==10; //@line 1234 "xmltok_impl.c"
        var $78=($77); //@line 1234 "xmltok_impl.c"
        $iftmp_904=$78; //@line 1234 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 23; break; //@line 1234 "xmltok_impl.c"
      case 22: // $bb21
        var $79=$ptr_addr; //@line 1234 "xmltok_impl.c"
        var $80=$79; //@line 1234 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 1234 "xmltok_impl.c"
        var $82=($81); //@line 1234 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 1234 "xmltok_impl.c"
        var $84=$83+1; //@line 1234 "xmltok_impl.c"
        var $85=HEAP[$84]; //@line 1234 "xmltok_impl.c"
        var $86=($85); //@line 1234 "xmltok_impl.c"
        var $87=((($86)) & 255); //@line 1234 "xmltok_impl.c"
        var $88=((($82)) & 255); //@line 1234 "xmltok_impl.c"
        var $89=_unicode_byte_type($87, $88); //@line 1234 "xmltok_impl.c"
        var $90=($89)==10; //@line 1234 "xmltok_impl.c"
        var $91=($90); //@line 1234 "xmltok_impl.c"
        $iftmp_904=$91; //@line 1234 "xmltok_impl.c"
        __lastLabel__ = 22; __label__ = 23; break; //@line 1234 "xmltok_impl.c"
      case 23: // $bb22
        var $92=__lastLabel__ == 22 ? $91 : ($78);
        var $toBool=($92)!=0; //@line 1234 "xmltok_impl.c"
        if ($toBool) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1234 "xmltok_impl.c"
      case 24: // $bb23
        var $93=$ptr_addr; //@line 1235 "xmltok_impl.c"
        var $94=$93+2; //@line 1235 "xmltok_impl.c"
        $ptr_addr=$94; //@line 1235 "xmltok_impl.c"
        __label__ = 25; break; //@line 1235 "xmltok_impl.c"
      case 25: // $bb24
        var $95=$nextTokPtr_addr; //@line 1236 "xmltok_impl.c"
        var $96=$ptr_addr; //@line 1236 "xmltok_impl.c"
        HEAP[$95]=$96; //@line 1236 "xmltok_impl.c"
        $0=7; //@line 1237 "xmltok_impl.c"
        __label__ = 33; break; //@line 1237 "xmltok_impl.c"
      case 26: // $bb25
        var $97=$nextTokPtr_addr; //@line 1239 "xmltok_impl.c"
        var $98=$ptr_addr; //@line 1239 "xmltok_impl.c"
        HEAP[$97]=$98; //@line 1239 "xmltok_impl.c"
        $0=6; //@line 1240 "xmltok_impl.c"
        __label__ = 33; break; //@line 1240 "xmltok_impl.c"
      case 27: // $bb26
        var $99=$ptr_addr; //@line 1242 "xmltok_impl.c"
        var $100=$start; //@line 1242 "xmltok_impl.c"
        var $101=($99)==($100); //@line 1242 "xmltok_impl.c"
        if ($101) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1242 "xmltok_impl.c"
      case 28: // $bb27
        var $102=$ptr_addr; //@line 1243 "xmltok_impl.c"
        var $103=$102+2; //@line 1243 "xmltok_impl.c"
        var $104=$nextTokPtr_addr; //@line 1243 "xmltok_impl.c"
        HEAP[$104]=$103; //@line 1243 "xmltok_impl.c"
        $0=39; //@line 1244 "xmltok_impl.c"
        __label__ = 33; break; //@line 1244 "xmltok_impl.c"
      case 29: // $bb28
        var $105=$nextTokPtr_addr; //@line 1246 "xmltok_impl.c"
        var $106=$ptr_addr; //@line 1246 "xmltok_impl.c"
        HEAP[$105]=$106; //@line 1246 "xmltok_impl.c"
        $0=6; //@line 1247 "xmltok_impl.c"
        __label__ = 33; break; //@line 1247 "xmltok_impl.c"
      case 30: // $bb29
        var $107=$ptr_addr; //@line 1249 "xmltok_impl.c"
        var $108=$107+2; //@line 1249 "xmltok_impl.c"
        $ptr_addr=$108; //@line 1249 "xmltok_impl.c"
        __label__ = 31; break; //@line 1249 "xmltok_impl.c"
      case 31: // $bb30
        var $109=$ptr_addr; //@line 1207 "xmltok_impl.c"
        var $110=$end_addr; //@line 1207 "xmltok_impl.c"
        var $111=($109)!=($110); //@line 1207 "xmltok_impl.c"
        if ($111) { __label__ = 3; break; } else { __label__ = 32; break; } //@line 1207 "xmltok_impl.c"
      case 32: // $bb31
        var $112=$nextTokPtr_addr; //@line 1253 "xmltok_impl.c"
        var $113=$ptr_addr; //@line 1253 "xmltok_impl.c"
        HEAP[$112]=$113; //@line 1253 "xmltok_impl.c"
        $0=6; //@line 1254 "xmltok_impl.c"
        __label__ = 33; break; //@line 1254 "xmltok_impl.c"
      case 33: // $bb32
        var $114=$0; //@line 1205 "xmltok_impl.c"
        $retval=$114; //@line 1205 "xmltok_impl.c"
        var $retval33=$retval; //@line 1205 "xmltok_impl.c"
        ;
        return $retval33; //@line 1205 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_entityValueTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_909;
        var $iftmp_908;
        var $iftmp_906;
        var $0;
        var $start;
        var $tok;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 1262 "xmltok_impl.c"
        var $2=$end_addr; //@line 1262 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1262 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1262 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 1263 "xmltok_impl.c"
        __label__ = 35; break; //@line 1263 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 1264 "xmltok_impl.c"
        $start=$4; //@line 1264 "xmltok_impl.c"
        __label__ = 33; break; //@line 1264 "xmltok_impl.c"
      case 3: // $bb2
        var $5=$ptr_addr; //@line 1266 "xmltok_impl.c"
        var $6=$5+1; //@line 1266 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1266 "xmltok_impl.c"
        var $8=($7)==0; //@line 1266 "xmltok_impl.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1266 "xmltok_impl.c"
      case 4: // $bb3
        var $9=$enc_addr; //@line 1266 "xmltok_impl.c"
        var $10=$9; //@line 1266 "xmltok_impl.c"
        var $11=$ptr_addr; //@line 1266 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1266 "xmltok_impl.c"
        var $13=($12); //@line 1266 "xmltok_impl.c"
        var $14=$10+76; //@line 1266 "xmltok_impl.c"
        var $15=$14+$13; //@line 1266 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1266 "xmltok_impl.c"
        var $17=($16); //@line 1266 "xmltok_impl.c"
        $iftmp_906=$17; //@line 1266 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 6; break; //@line 1266 "xmltok_impl.c"
      case 5: // $bb4
        var $18=$ptr_addr; //@line 1266 "xmltok_impl.c"
        var $19=$18; //@line 1266 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1266 "xmltok_impl.c"
        var $21=($20); //@line 1266 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 1266 "xmltok_impl.c"
        var $23=$22+1; //@line 1266 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 1266 "xmltok_impl.c"
        var $25=($24); //@line 1266 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 1266 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 1266 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 1266 "xmltok_impl.c"
        $iftmp_906=$28; //@line 1266 "xmltok_impl.c"
        __lastLabel__ = 5; __label__ = 6; break; //@line 1266 "xmltok_impl.c"
      case 6: // $bb5
        var $29=__lastLabel__ == 5 ? $28 : ($17);
        if ($29 == 3) {
          __label__ = 10; break;
        }
        else if ($29 == 5) {
          __label__ = 7; break;
        }
        else if ($29 == 6) {
          __label__ = 8; break;
        }
        else if ($29 == 7) {
          __label__ = 9; break;
        }
        else if ($29 == 9) {
          __label__ = 22; break;
        }
        else if ($29 == 10) {
          __label__ = 19; break;
        }
        else if ($29 == 30) {
          __label__ = 13; break;
        }
        else {
        __label__ = 32; break;
        }
        
      case 7: // $bb6
        var $30=$ptr_addr; //@line 1269 "xmltok_impl.c"
        var $31=$30+2; //@line 1269 "xmltok_impl.c"
        $ptr_addr=$31; //@line 1269 "xmltok_impl.c"
        __label__ = 33; break; //@line 1269 "xmltok_impl.c"
      case 8: // $bb7
        var $32=$ptr_addr; //@line 1269 "xmltok_impl.c"
        var $33=$32+3; //@line 1269 "xmltok_impl.c"
        $ptr_addr=$33; //@line 1269 "xmltok_impl.c"
        __label__ = 33; break; //@line 1269 "xmltok_impl.c"
      case 9: // $bb8
        var $34=$ptr_addr; //@line 1269 "xmltok_impl.c"
        var $35=$34+4; //@line 1269 "xmltok_impl.c"
        $ptr_addr=$35; //@line 1269 "xmltok_impl.c"
        __label__ = 33; break; //@line 1269 "xmltok_impl.c"
      case 10: // $bb9
        var $36=$ptr_addr; //@line 1272 "xmltok_impl.c"
        var $37=$start; //@line 1272 "xmltok_impl.c"
        var $38=($36)==($37); //@line 1272 "xmltok_impl.c"
        if ($38) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1272 "xmltok_impl.c"
      case 11: // $bb10
        var $39=$ptr_addr; //@line 1273 "xmltok_impl.c"
        var $40=$39+2; //@line 1273 "xmltok_impl.c"
        var $41=$enc_addr; //@line 1273 "xmltok_impl.c"
        var $42=$end_addr; //@line 1273 "xmltok_impl.c"
        var $43=$nextTokPtr_addr; //@line 1273 "xmltok_impl.c"
        var $44=_little2_scanRef($41, $40, $42, $43); //@line 1273 "xmltok_impl.c"
        $0=$44; //@line 1273 "xmltok_impl.c"
        __label__ = 35; break; //@line 1273 "xmltok_impl.c"
      case 12: // $bb11
        var $45=$nextTokPtr_addr; //@line 1274 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 1274 "xmltok_impl.c"
        HEAP[$45]=$46; //@line 1274 "xmltok_impl.c"
        $0=6; //@line 1275 "xmltok_impl.c"
        __label__ = 35; break; //@line 1275 "xmltok_impl.c"
      case 13: // $bb12
        var $47=$ptr_addr; //@line 1277 "xmltok_impl.c"
        var $48=$start; //@line 1277 "xmltok_impl.c"
        var $49=($47)==($48); //@line 1277 "xmltok_impl.c"
        if ($49) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 1277 "xmltok_impl.c"
      case 14: // $bb13
        var $50=$ptr_addr; //@line 1279 "xmltok_impl.c"
        var $51=$50+2; //@line 1279 "xmltok_impl.c"
        var $52=$enc_addr; //@line 1279 "xmltok_impl.c"
        var $53=$end_addr; //@line 1279 "xmltok_impl.c"
        var $54=$nextTokPtr_addr; //@line 1279 "xmltok_impl.c"
        var $55=_little2_scanPercent($52, $51, $53, $54); //@line 1279 "xmltok_impl.c"
        $tok=$55; //@line 1279 "xmltok_impl.c"
        var $56=$tok; //@line 1280 "xmltok_impl.c"
        var $57=($56)!=22; //@line 1280 "xmltok_impl.c"
        if ($57) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1280 "xmltok_impl.c"
      case 15: // $bb14
        var $58=$tok; //@line 1280 "xmltok_impl.c"
        $iftmp_908=$58; //@line 1280 "xmltok_impl.c"
        __label__ = 17; break; //@line 1280 "xmltok_impl.c"
      case 16: // $bb15
        $iftmp_908=0; //@line 1280 "xmltok_impl.c"
        __label__ = 17; break; //@line 1280 "xmltok_impl.c"
      case 17: // $bb16
        var $59=$iftmp_908; //@line 1280 "xmltok_impl.c"
        $0=$59; //@line 1280 "xmltok_impl.c"
        __label__ = 35; break; //@line 1280 "xmltok_impl.c"
      case 18: // $bb17
        var $60=$nextTokPtr_addr; //@line 1282 "xmltok_impl.c"
        var $61=$ptr_addr; //@line 1282 "xmltok_impl.c"
        HEAP[$60]=$61; //@line 1282 "xmltok_impl.c"
        $0=6; //@line 1283 "xmltok_impl.c"
        __label__ = 35; break; //@line 1283 "xmltok_impl.c"
      case 19: // $bb18
        var $62=$ptr_addr; //@line 1285 "xmltok_impl.c"
        var $63=$start; //@line 1285 "xmltok_impl.c"
        var $64=($62)==($63); //@line 1285 "xmltok_impl.c"
        if ($64) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1285 "xmltok_impl.c"
      case 20: // $bb19
        var $65=$ptr_addr; //@line 1286 "xmltok_impl.c"
        var $66=$65+2; //@line 1286 "xmltok_impl.c"
        var $67=$nextTokPtr_addr; //@line 1286 "xmltok_impl.c"
        HEAP[$67]=$66; //@line 1286 "xmltok_impl.c"
        $0=7; //@line 1287 "xmltok_impl.c"
        __label__ = 35; break; //@line 1287 "xmltok_impl.c"
      case 21: // $bb20
        var $68=$nextTokPtr_addr; //@line 1289 "xmltok_impl.c"
        var $69=$ptr_addr; //@line 1289 "xmltok_impl.c"
        HEAP[$68]=$69; //@line 1289 "xmltok_impl.c"
        $0=6; //@line 1290 "xmltok_impl.c"
        __label__ = 35; break; //@line 1290 "xmltok_impl.c"
      case 22: // $bb21
        var $70=$ptr_addr; //@line 1292 "xmltok_impl.c"
        var $71=$start; //@line 1292 "xmltok_impl.c"
        var $72=($70)==($71); //@line 1292 "xmltok_impl.c"
        if ($72) { __label__ = 23; break; } else { __label__ = 31; break; } //@line 1292 "xmltok_impl.c"
      case 23: // $bb22
        var $73=$ptr_addr; //@line 1293 "xmltok_impl.c"
        var $74=$73+2; //@line 1293 "xmltok_impl.c"
        $ptr_addr=$74; //@line 1293 "xmltok_impl.c"
        var $75=$ptr_addr; //@line 1294 "xmltok_impl.c"
        var $76=$end_addr; //@line 1294 "xmltok_impl.c"
        var $77=($75)==($76); //@line 1294 "xmltok_impl.c"
        if ($77) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1294 "xmltok_impl.c"
      case 24: // $bb23
        $0=-3; //@line 1295 "xmltok_impl.c"
        __label__ = 35; break; //@line 1295 "xmltok_impl.c"
      case 25: // $bb24
        var $78=$ptr_addr; //@line 1296 "xmltok_impl.c"
        var $79=$78+1; //@line 1296 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 1296 "xmltok_impl.c"
        var $81=($80)==0; //@line 1296 "xmltok_impl.c"
        if ($81) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1296 "xmltok_impl.c"
      case 26: // $bb25
        var $82=$enc_addr; //@line 1296 "xmltok_impl.c"
        var $83=$82; //@line 1296 "xmltok_impl.c"
        var $84=$ptr_addr; //@line 1296 "xmltok_impl.c"
        var $85=HEAP[$84]; //@line 1296 "xmltok_impl.c"
        var $86=($85); //@line 1296 "xmltok_impl.c"
        var $87=$83+76; //@line 1296 "xmltok_impl.c"
        var $88=$87+$86; //@line 1296 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 1296 "xmltok_impl.c"
        var $90=($89)==10; //@line 1296 "xmltok_impl.c"
        var $91=($90); //@line 1296 "xmltok_impl.c"
        $iftmp_909=$91; //@line 1296 "xmltok_impl.c"
        __lastLabel__ = 26; __label__ = 28; break; //@line 1296 "xmltok_impl.c"
      case 27: // $bb26
        var $92=$ptr_addr; //@line 1296 "xmltok_impl.c"
        var $93=$92; //@line 1296 "xmltok_impl.c"
        var $94=HEAP[$93]; //@line 1296 "xmltok_impl.c"
        var $95=($94); //@line 1296 "xmltok_impl.c"
        var $96=$ptr_addr; //@line 1296 "xmltok_impl.c"
        var $97=$96+1; //@line 1296 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 1296 "xmltok_impl.c"
        var $99=($98); //@line 1296 "xmltok_impl.c"
        var $100=((($99)) & 255); //@line 1296 "xmltok_impl.c"
        var $101=((($95)) & 255); //@line 1296 "xmltok_impl.c"
        var $102=_unicode_byte_type($100, $101); //@line 1296 "xmltok_impl.c"
        var $103=($102)==10; //@line 1296 "xmltok_impl.c"
        var $104=($103); //@line 1296 "xmltok_impl.c"
        $iftmp_909=$104; //@line 1296 "xmltok_impl.c"
        __lastLabel__ = 27; __label__ = 28; break; //@line 1296 "xmltok_impl.c"
      case 28: // $bb27
        var $105=__lastLabel__ == 27 ? $104 : ($91);
        var $toBool=($105)!=0; //@line 1296 "xmltok_impl.c"
        if ($toBool) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1296 "xmltok_impl.c"
      case 29: // $bb28
        var $106=$ptr_addr; //@line 1297 "xmltok_impl.c"
        var $107=$106+2; //@line 1297 "xmltok_impl.c"
        $ptr_addr=$107; //@line 1297 "xmltok_impl.c"
        __label__ = 30; break; //@line 1297 "xmltok_impl.c"
      case 30: // $bb29
        var $108=$nextTokPtr_addr; //@line 1298 "xmltok_impl.c"
        var $109=$ptr_addr; //@line 1298 "xmltok_impl.c"
        HEAP[$108]=$109; //@line 1298 "xmltok_impl.c"
        $0=7; //@line 1299 "xmltok_impl.c"
        __label__ = 35; break; //@line 1299 "xmltok_impl.c"
      case 31: // $bb30
        var $110=$nextTokPtr_addr; //@line 1301 "xmltok_impl.c"
        var $111=$ptr_addr; //@line 1301 "xmltok_impl.c"
        HEAP[$110]=$111; //@line 1301 "xmltok_impl.c"
        $0=6; //@line 1302 "xmltok_impl.c"
        __label__ = 35; break; //@line 1302 "xmltok_impl.c"
      case 32: // $bb31
        var $112=$ptr_addr; //@line 1304 "xmltok_impl.c"
        var $113=$112+2; //@line 1304 "xmltok_impl.c"
        $ptr_addr=$113; //@line 1304 "xmltok_impl.c"
        __label__ = 33; break; //@line 1304 "xmltok_impl.c"
      case 33: // $bb32
        var $114=$ptr_addr; //@line 1265 "xmltok_impl.c"
        var $115=$end_addr; //@line 1265 "xmltok_impl.c"
        var $116=($114)!=($115); //@line 1265 "xmltok_impl.c"
        if ($116) { __label__ = 3; break; } else { __label__ = 34; break; } //@line 1265 "xmltok_impl.c"
      case 34: // $bb33
        var $117=$nextTokPtr_addr; //@line 1308 "xmltok_impl.c"
        var $118=$ptr_addr; //@line 1308 "xmltok_impl.c"
        HEAP[$117]=$118; //@line 1308 "xmltok_impl.c"
        $0=6; //@line 1309 "xmltok_impl.c"
        __label__ = 35; break; //@line 1309 "xmltok_impl.c"
      case 35: // $bb34
        var $119=$0; //@line 1263 "xmltok_impl.c"
        $retval=$119; //@line 1263 "xmltok_impl.c"
        var $retval35=$retval; //@line 1263 "xmltok_impl.c"
        ;
        return $retval35; //@line 1263 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_ignoreSectionTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $iftmp_914;
        var $level;
        var $n;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        $level=0; //@line 1318 "xmltok_impl.c"
        var $1=$end_addr; //@line 1320 "xmltok_impl.c"
        var $2=($1); //@line 1320 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 1320 "xmltok_impl.c"
        var $4=($3); //@line 1320 "xmltok_impl.c"
        var $5=($2) - ($4); //@line 1320 "xmltok_impl.c"
        $n=$5; //@line 1320 "xmltok_impl.c"
        var $6=$n; //@line 1321 "xmltok_impl.c"
        var $7=($6) & 1; //@line 1321 "xmltok_impl.c"
        var $8=((($7)) & 255); //@line 1321 "xmltok_impl.c"
        var $toBool=($8)!=0; //@line 1321 "xmltok_impl.c"
        if ($toBool) { __label__ = 1; break; } else { __label__ = 37; break; } //@line 1321 "xmltok_impl.c"
      case 1: // $bb
        var $9=$n; //@line 1322 "xmltok_impl.c"
        var $10=($9) & -2; //@line 1322 "xmltok_impl.c"
        $n=$10; //@line 1322 "xmltok_impl.c"
        var $11=$ptr_addr; //@line 1323 "xmltok_impl.c"
        var $12=$n; //@line 1323 "xmltok_impl.c"
        var $13=$11+$12; //@line 1323 "xmltok_impl.c"
        $end_addr=$13; //@line 1323 "xmltok_impl.c"
        __label__ = 37; break; //@line 1323 "xmltok_impl.c"
      case 2: // $bb2
        var $14=$ptr_addr; //@line 1327 "xmltok_impl.c"
        var $15=$14+1; //@line 1327 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1327 "xmltok_impl.c"
        var $17=($16)==0; //@line 1327 "xmltok_impl.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1327 "xmltok_impl.c"
      case 3: // $bb3
        var $18=$enc_addr; //@line 1327 "xmltok_impl.c"
        var $19=$18; //@line 1327 "xmltok_impl.c"
        var $20=$ptr_addr; //@line 1327 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1327 "xmltok_impl.c"
        var $22=($21); //@line 1327 "xmltok_impl.c"
        var $23=$19+76; //@line 1327 "xmltok_impl.c"
        var $24=$23+$22; //@line 1327 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 1327 "xmltok_impl.c"
        var $26=($25); //@line 1327 "xmltok_impl.c"
        $iftmp_914=$26; //@line 1327 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 1327 "xmltok_impl.c"
      case 4: // $bb4
        var $27=$ptr_addr; //@line 1327 "xmltok_impl.c"
        var $28=$27; //@line 1327 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 1327 "xmltok_impl.c"
        var $30=($29); //@line 1327 "xmltok_impl.c"
        var $31=$ptr_addr; //@line 1327 "xmltok_impl.c"
        var $32=$31+1; //@line 1327 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 1327 "xmltok_impl.c"
        var $34=($33); //@line 1327 "xmltok_impl.c"
        var $35=((($34)) & 255); //@line 1327 "xmltok_impl.c"
        var $36=((($30)) & 255); //@line 1327 "xmltok_impl.c"
        var $37=_unicode_byte_type($35, $36); //@line 1327 "xmltok_impl.c"
        $iftmp_914=$37; //@line 1327 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 1327 "xmltok_impl.c"
      case 5: // $bb5
        var $38=__lastLabel__ == 4 ? $37 : ($26);
        if ($38 == 0) {
          __label__ = 15; break;
        }
        else if ($38 == 1) {
          __label__ = 15; break;
        }
        else if ($38 == 2) {
          __label__ = 16; break;
        }
        else if ($38 == 4) {
          __label__ = 25; break;
        }
        else if ($38 == 5) {
          __label__ = 6; break;
        }
        else if ($38 == 6) {
          __label__ = 9; break;
        }
        else if ($38 == 7) {
          __label__ = 12; break;
        }
        else if ($38 == 8) {
          __label__ = 15; break;
        }
        else {
        __label__ = 36; break;
        }
        
      case 6: // $bb6
        var $39=$end_addr; //@line 1328 "xmltok_impl.c"
        var $40=($39); //@line 1328 "xmltok_impl.c"
        var $41=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $42=($41); //@line 1328 "xmltok_impl.c"
        var $43=($40) - ($42); //@line 1328 "xmltok_impl.c"
        var $44=($43) <= 1; //@line 1328 "xmltok_impl.c"
        if ($44) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1328 "xmltok_impl.c"
      case 7: // $bb7
        $0=-2; //@line 1328 "xmltok_impl.c"
        __label__ = 39; break; //@line 1328 "xmltok_impl.c"
      case 8: // $bb8
        var $45=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $46=$45+2; //@line 1328 "xmltok_impl.c"
        $ptr_addr=$46; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 9: // $bb9
        var $47=$end_addr; //@line 1328 "xmltok_impl.c"
        var $48=($47); //@line 1328 "xmltok_impl.c"
        var $49=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $50=($49); //@line 1328 "xmltok_impl.c"
        var $51=($48) - ($50); //@line 1328 "xmltok_impl.c"
        var $52=($51) <= 2; //@line 1328 "xmltok_impl.c"
        if ($52) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1328 "xmltok_impl.c"
      case 10: // $bb10
        $0=-2; //@line 1328 "xmltok_impl.c"
        __label__ = 39; break; //@line 1328 "xmltok_impl.c"
      case 11: // $bb11
        var $53=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $54=$53+3; //@line 1328 "xmltok_impl.c"
        $ptr_addr=$54; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 12: // $bb12
        var $55=$end_addr; //@line 1328 "xmltok_impl.c"
        var $56=($55); //@line 1328 "xmltok_impl.c"
        var $57=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $58=($57); //@line 1328 "xmltok_impl.c"
        var $59=($56) - ($58); //@line 1328 "xmltok_impl.c"
        var $60=($59) <= 3; //@line 1328 "xmltok_impl.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1328 "xmltok_impl.c"
      case 13: // $bb13
        $0=-2; //@line 1328 "xmltok_impl.c"
        __label__ = 39; break; //@line 1328 "xmltok_impl.c"
      case 14: // $bb14
        var $61=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $62=$61+4; //@line 1328 "xmltok_impl.c"
        $ptr_addr=$62; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 15: // $bb15
        var $63=$nextTokPtr_addr; //@line 1328 "xmltok_impl.c"
        var $64=$ptr_addr; //@line 1328 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 1328 "xmltok_impl.c"
        $0=0; //@line 1328 "xmltok_impl.c"
        __label__ = 39; break; //@line 1328 "xmltok_impl.c"
      case 16: // $bb16
        var $65=$ptr_addr; //@line 1330 "xmltok_impl.c"
        var $66=$65+2; //@line 1330 "xmltok_impl.c"
        $ptr_addr=$66; //@line 1330 "xmltok_impl.c"
        var $67=$ptr_addr; //@line 1330 "xmltok_impl.c"
        var $68=$end_addr; //@line 1330 "xmltok_impl.c"
        var $69=($67)==($68); //@line 1330 "xmltok_impl.c"
        if ($69) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1330 "xmltok_impl.c"
      case 17: // $bb17
        $0=-1; //@line 1331 "xmltok_impl.c"
        __label__ = 39; break; //@line 1331 "xmltok_impl.c"
      case 18: // $bb18
        var $70=$ptr_addr; //@line 1332 "xmltok_impl.c"
        var $71=$70+1; //@line 1332 "xmltok_impl.c"
        var $72=HEAP[$71]; //@line 1332 "xmltok_impl.c"
        var $73=($72)==0; //@line 1332 "xmltok_impl.c"
        if ($73) { __label__ = 19; break; } else { __label__ = 37; break; } //@line 1332 "xmltok_impl.c"
      case 19: // $bb19
        var $74=$ptr_addr; //@line 1332 "xmltok_impl.c"
        var $75=$74; //@line 1332 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 1332 "xmltok_impl.c"
        var $77=($76)==33; //@line 1332 "xmltok_impl.c"
        if ($77) { __label__ = 20; break; } else { __label__ = 37; break; } //@line 1332 "xmltok_impl.c"
      case 20: // $bb20
        var $78=$ptr_addr; //@line 1333 "xmltok_impl.c"
        var $79=$78+2; //@line 1333 "xmltok_impl.c"
        $ptr_addr=$79; //@line 1333 "xmltok_impl.c"
        var $80=$ptr_addr; //@line 1333 "xmltok_impl.c"
        var $81=$end_addr; //@line 1333 "xmltok_impl.c"
        var $82=($80)==($81); //@line 1333 "xmltok_impl.c"
        if ($82) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1333 "xmltok_impl.c"
      case 21: // $bb21
        $0=-1; //@line 1334 "xmltok_impl.c"
        __label__ = 39; break; //@line 1334 "xmltok_impl.c"
      case 22: // $bb22
        var $83=$ptr_addr; //@line 1335 "xmltok_impl.c"
        var $84=$83+1; //@line 1335 "xmltok_impl.c"
        var $85=HEAP[$84]; //@line 1335 "xmltok_impl.c"
        var $86=($85)==0; //@line 1335 "xmltok_impl.c"
        if ($86) { __label__ = 23; break; } else { __label__ = 37; break; } //@line 1335 "xmltok_impl.c"
      case 23: // $bb23
        var $87=$ptr_addr; //@line 1335 "xmltok_impl.c"
        var $88=$87; //@line 1335 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 1335 "xmltok_impl.c"
        var $90=($89)==91; //@line 1335 "xmltok_impl.c"
        if ($90) { __label__ = 24; break; } else { __label__ = 37; break; } //@line 1335 "xmltok_impl.c"
      case 24: // $bb24
        var $91=$level; //@line 1336 "xmltok_impl.c"
        var $92=($91) + 1; //@line 1336 "xmltok_impl.c"
        $level=$92; //@line 1336 "xmltok_impl.c"
        var $93=$ptr_addr; //@line 1337 "xmltok_impl.c"
        var $94=$93+2; //@line 1337 "xmltok_impl.c"
        $ptr_addr=$94; //@line 1337 "xmltok_impl.c"
        __label__ = 37; break; //@line 1337 "xmltok_impl.c"
      case 25: // $bb26
        var $95=$ptr_addr; //@line 1342 "xmltok_impl.c"
        var $96=$95+2; //@line 1342 "xmltok_impl.c"
        $ptr_addr=$96; //@line 1342 "xmltok_impl.c"
        var $97=$ptr_addr; //@line 1342 "xmltok_impl.c"
        var $98=$end_addr; //@line 1342 "xmltok_impl.c"
        var $99=($97)==($98); //@line 1342 "xmltok_impl.c"
        if ($99) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1342 "xmltok_impl.c"
      case 26: // $bb27
        $0=-1; //@line 1343 "xmltok_impl.c"
        __label__ = 39; break; //@line 1343 "xmltok_impl.c"
      case 27: // $bb28
        var $100=$ptr_addr; //@line 1344 "xmltok_impl.c"
        var $101=$100+1; //@line 1344 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 1344 "xmltok_impl.c"
        var $103=($102)==0; //@line 1344 "xmltok_impl.c"
        if ($103) { __label__ = 28; break; } else { __label__ = 37; break; } //@line 1344 "xmltok_impl.c"
      case 28: // $bb29
        var $104=$ptr_addr; //@line 1344 "xmltok_impl.c"
        var $105=$104; //@line 1344 "xmltok_impl.c"
        var $106=HEAP[$105]; //@line 1344 "xmltok_impl.c"
        var $107=($106)==93; //@line 1344 "xmltok_impl.c"
        if ($107) { __label__ = 29; break; } else { __label__ = 37; break; } //@line 1344 "xmltok_impl.c"
      case 29: // $bb30
        var $108=$ptr_addr; //@line 1345 "xmltok_impl.c"
        var $109=$108+2; //@line 1345 "xmltok_impl.c"
        $ptr_addr=$109; //@line 1345 "xmltok_impl.c"
        var $110=$ptr_addr; //@line 1345 "xmltok_impl.c"
        var $111=$end_addr; //@line 1345 "xmltok_impl.c"
        var $112=($110)==($111); //@line 1345 "xmltok_impl.c"
        if ($112) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1345 "xmltok_impl.c"
      case 30: // $bb31
        $0=-1; //@line 1346 "xmltok_impl.c"
        __label__ = 39; break; //@line 1346 "xmltok_impl.c"
      case 31: // $bb32
        var $113=$ptr_addr; //@line 1347 "xmltok_impl.c"
        var $114=$113+1; //@line 1347 "xmltok_impl.c"
        var $115=HEAP[$114]; //@line 1347 "xmltok_impl.c"
        var $116=($115)==0; //@line 1347 "xmltok_impl.c"
        if ($116) { __label__ = 32; break; } else { __label__ = 37; break; } //@line 1347 "xmltok_impl.c"
      case 32: // $bb33
        var $117=$ptr_addr; //@line 1347 "xmltok_impl.c"
        var $118=$117; //@line 1347 "xmltok_impl.c"
        var $119=HEAP[$118]; //@line 1347 "xmltok_impl.c"
        var $120=($119)==62; //@line 1347 "xmltok_impl.c"
        if ($120) { __label__ = 33; break; } else { __label__ = 37; break; } //@line 1347 "xmltok_impl.c"
      case 33: // $bb34
        var $121=$ptr_addr; //@line 1348 "xmltok_impl.c"
        var $122=$121+2; //@line 1348 "xmltok_impl.c"
        $ptr_addr=$122; //@line 1348 "xmltok_impl.c"
        var $123=$level; //@line 1349 "xmltok_impl.c"
        var $124=($123)==0; //@line 1349 "xmltok_impl.c"
        if ($124) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1349 "xmltok_impl.c"
      case 34: // $bb35
        var $125=$nextTokPtr_addr; //@line 1350 "xmltok_impl.c"
        var $126=$ptr_addr; //@line 1350 "xmltok_impl.c"
        HEAP[$125]=$126; //@line 1350 "xmltok_impl.c"
        $0=42; //@line 1351 "xmltok_impl.c"
        __label__ = 39; break; //@line 1351 "xmltok_impl.c"
      case 35: // $bb36
        var $127=$level; //@line 1353 "xmltok_impl.c"
        var $128=($127) - 1; //@line 1353 "xmltok_impl.c"
        $level=$128; //@line 1353 "xmltok_impl.c"
        __label__ = 37; break; //@line 1353 "xmltok_impl.c"
      case 36: // $bb38
        var $129=$ptr_addr; //@line 1358 "xmltok_impl.c"
        var $130=$129+2; //@line 1358 "xmltok_impl.c"
        $ptr_addr=$130; //@line 1358 "xmltok_impl.c"
        __label__ = 37; break; //@line 1358 "xmltok_impl.c"
      case 37: // $bb39
        var $131=$ptr_addr; //@line 1326 "xmltok_impl.c"
        var $132=$end_addr; //@line 1326 "xmltok_impl.c"
        var $133=($131)!=($132); //@line 1326 "xmltok_impl.c"
        if ($133) { __label__ = 2; break; } else { __label__ = 38; break; } //@line 1326 "xmltok_impl.c"
      case 38: // $bb40
        $0=-1; //@line 1362 "xmltok_impl.c"
        __label__ = 39; break; //@line 1362 "xmltok_impl.c"
      case 39: // $bb41
        var $134=$0; //@line 1328 "xmltok_impl.c"
        $retval=$134; //@line 1328 "xmltok_impl.c"
        var $retval42=$retval; //@line 1328 "xmltok_impl.c"
        ;
        return $retval42; //@line 1328 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_isPublicId($enc, $ptr, $end, $badPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $badPtr_addr;
        var $retval;
        var $iftmp_924;
        var $0;
        var $iftmp_922;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $badPtr_addr=$badPtr;
        var $1=$ptr_addr; //@line 1371 "xmltok_impl.c"
        var $2=$1+2; //@line 1371 "xmltok_impl.c"
        $ptr_addr=$2; //@line 1371 "xmltok_impl.c"
        var $3=$end_addr; //@line 1372 "xmltok_impl.c"
        var $4=$3+-2; //@line 1372 "xmltok_impl.c"
        $end_addr=$4; //@line 1372 "xmltok_impl.c"
        __label__ = 15; break; //@line 1372 "xmltok_impl.c"
      case 1: // $bb
        var $5=$ptr_addr; //@line 1374 "xmltok_impl.c"
        var $6=$5+1; //@line 1374 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1374 "xmltok_impl.c"
        var $8=($7)==0; //@line 1374 "xmltok_impl.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1374 "xmltok_impl.c"
      case 2: // $bb1
        var $9=$enc_addr; //@line 1374 "xmltok_impl.c"
        var $10=$9; //@line 1374 "xmltok_impl.c"
        var $11=$ptr_addr; //@line 1374 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1374 "xmltok_impl.c"
        var $13=($12); //@line 1374 "xmltok_impl.c"
        var $14=$10+76; //@line 1374 "xmltok_impl.c"
        var $15=$14+$13; //@line 1374 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1374 "xmltok_impl.c"
        var $17=($16); //@line 1374 "xmltok_impl.c"
        $iftmp_922=$17; //@line 1374 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1374 "xmltok_impl.c"
      case 3: // $bb2
        var $18=$ptr_addr; //@line 1374 "xmltok_impl.c"
        var $19=$18; //@line 1374 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1374 "xmltok_impl.c"
        var $21=($20); //@line 1374 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 1374 "xmltok_impl.c"
        var $23=$22+1; //@line 1374 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 1374 "xmltok_impl.c"
        var $25=($24); //@line 1374 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 1374 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 1374 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 1374 "xmltok_impl.c"
        $iftmp_922=$28; //@line 1374 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1374 "xmltok_impl.c"
      case 4: // $bb3
        var $29=__lastLabel__ == 3 ? $28 : ($17);
        if ($29 == 9) {
          __label__ = 14; break;
        }
        else if ($29 == 10) {
          __label__ = 14; break;
        }
        else if ($29 == 13) {
          __label__ = 14; break;
        }
        else if ($29 == 14) {
          __label__ = 14; break;
        }
        else if ($29 == 15) {
          __label__ = 14; break;
        }
        else if ($29 == 16) {
          __label__ = 14; break;
        }
        else if ($29 == 17) {
          __label__ = 14; break;
        }
        else if ($29 == 18) {
          __label__ = 14; break;
        }
        else if ($29 == 19) {
          __label__ = 14; break;
        }
        else if ($29 == 21) {
          __label__ = 5; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 23) {
          __label__ = 14; break;
        }
        else if ($29 == 24) {
          __label__ = 14; break;
        }
        else if ($29 == 25) {
          __label__ = 14; break;
        }
        else if ($29 == 26) {
          __label__ = 8; break;
        }
        else if ($29 == 27) {
          __label__ = 14; break;
        }
        else if ($29 == 30) {
          __label__ = 14; break;
        }
        else if ($29 == 31) {
          __label__ = 14; break;
        }
        else if ($29 == 32) {
          __label__ = 14; break;
        }
        else if ($29 == 33) {
          __label__ = 14; break;
        }
        else if ($29 == 34) {
          __label__ = 14; break;
        }
        else if ($29 == 35) {
          __label__ = 14; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 5: // $bb5
        var $30=$ptr_addr; //@line 1398 "xmltok_impl.c"
        var $31=$30+1; //@line 1398 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 1398 "xmltok_impl.c"
        var $33=($32)==0; //@line 1398 "xmltok_impl.c"
        if ($33) { __label__ = 6; break; } else { __label__ = 14; break; } //@line 1398 "xmltok_impl.c"
      case 6: // $bb6
        var $34=$ptr_addr; //@line 1398 "xmltok_impl.c"
        var $35=$34; //@line 1398 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 1398 "xmltok_impl.c"
        var $37=($36)==9; //@line 1398 "xmltok_impl.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 14; break; } //@line 1398 "xmltok_impl.c"
      case 7: // $bb7
        var $38=$badPtr_addr; //@line 1399 "xmltok_impl.c"
        var $39=$ptr_addr; //@line 1399 "xmltok_impl.c"
        HEAP[$38]=$39; //@line 1399 "xmltok_impl.c"
        $0=0; //@line 1400 "xmltok_impl.c"
        __label__ = 17; break; //@line 1400 "xmltok_impl.c"
      case 8: // $bb9
        var $40=$ptr_addr; //@line 1405 "xmltok_impl.c"
        var $41=$40+1; //@line 1405 "xmltok_impl.c"
        var $42=HEAP[$41]; //@line 1405 "xmltok_impl.c"
        var $43=($42)==0; //@line 1405 "xmltok_impl.c"
        if ($43) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1405 "xmltok_impl.c"
      case 9: // $bb10
        var $44=$ptr_addr; //@line 1405 "xmltok_impl.c"
        var $45=$44; //@line 1405 "xmltok_impl.c"
        var $46=HEAP[$45]; //@line 1405 "xmltok_impl.c"
        var $47=($46); //@line 1405 "xmltok_impl.c"
        var $48=($47) & -128; //@line 1405 "xmltok_impl.c"
        var $49=($48)==0; //@line 1405 "xmltok_impl.c"
        if ($49) { __label__ = 14; break; } else { __label__ = 10; break; } //@line 1405 "xmltok_impl.c"
      case 10: // $bb11
        var $50=$ptr_addr; //@line 1408 "xmltok_impl.c"
        var $51=$50+1; //@line 1408 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 1408 "xmltok_impl.c"
        var $53=($52)==0; //@line 1408 "xmltok_impl.c"
        if ($53) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 1408 "xmltok_impl.c"
      case 11: // $bb14_thread
        $iftmp_924=-1; //@line 1408 "xmltok_impl.c"
        __label__ = 13; break;
      case 12: // $bb14
        var $54=$ptr_addr; //@line 1408 "xmltok_impl.c"
        var $55=$54; //@line 1408 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 1408 "xmltok_impl.c"
        var $57=($56); //@line 1408 "xmltok_impl.c"
        $iftmp_924=$57; //@line 1408 "xmltok_impl.c"
        if ($57 == 36) {
          __label__ = 14; break;
        }
        else if ($57 == 64) {
          __label__ = 14; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 13: // $bb16
        var $58=$badPtr_addr; //@line 1413 "xmltok_impl.c"
        var $59=$ptr_addr; //@line 1413 "xmltok_impl.c"
        HEAP[$58]=$59; //@line 1413 "xmltok_impl.c"
        $0=0; //@line 1414 "xmltok_impl.c"
        __label__ = 17; break; //@line 1414 "xmltok_impl.c"
      case 14: // $bb17
        var $60=$ptr_addr; //@line 1373 "xmltok_impl.c"
        var $61=$60+2; //@line 1373 "xmltok_impl.c"
        $ptr_addr=$61; //@line 1373 "xmltok_impl.c"
        __label__ = 15; break; //@line 1373 "xmltok_impl.c"
      case 15: // $bb18
        var $62=$ptr_addr; //@line 1373 "xmltok_impl.c"
        var $63=$end_addr; //@line 1373 "xmltok_impl.c"
        var $64=($62)!=($63); //@line 1373 "xmltok_impl.c"
        if ($64) { __label__ = 1; break; } else { __label__ = 16; break; } //@line 1373 "xmltok_impl.c"
      case 16: // $bb19
        $0=1; //@line 1419 "xmltok_impl.c"
        __label__ = 17; break; //@line 1419 "xmltok_impl.c"
      case 17: // $bb20
        var $65=$0; //@line 1400 "xmltok_impl.c"
        $retval=$65; //@line 1400 "xmltok_impl.c"
        var $retval21=$retval; //@line 1400 "xmltok_impl.c"
        ;
        return $retval21; //@line 1400 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_getAtts($enc, $ptr, $attsMax, $atts) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $attsMax_addr;
        var $atts_addr;
        var $retval;
        var $0;
        var $iftmp_927;
        var $iftmp_925;
        var $state;
        var $nAtts;
        var $open;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $attsMax_addr=$attsMax;
        $atts_addr=$atts;
        $state=1; //@line 1431 "xmltok_impl.c"
        $nAtts=0; //@line 1432 "xmltok_impl.c"
        $open=0; //@line 1433 "xmltok_impl.c"
        var $1=$ptr_addr; //@line 1436 "xmltok_impl.c"
        var $2=$1+2; //@line 1436 "xmltok_impl.c"
        $ptr_addr=$2; //@line 1436 "xmltok_impl.c"
        __label__ = 1; break; //@line 1436 "xmltok_impl.c"
      case 1: // $bb
        var $3=$ptr_addr; //@line 1437 "xmltok_impl.c"
        var $4=$3+1; //@line 1437 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1437 "xmltok_impl.c"
        var $6=($5)==0; //@line 1437 "xmltok_impl.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1437 "xmltok_impl.c"
      case 2: // $bb1
        var $7=$enc_addr; //@line 1437 "xmltok_impl.c"
        var $8=$7; //@line 1437 "xmltok_impl.c"
        var $9=$ptr_addr; //@line 1437 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1437 "xmltok_impl.c"
        var $11=($10); //@line 1437 "xmltok_impl.c"
        var $12=$8+76; //@line 1437 "xmltok_impl.c"
        var $13=$12+$11; //@line 1437 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 1437 "xmltok_impl.c"
        var $15=($14); //@line 1437 "xmltok_impl.c"
        $iftmp_925=$15; //@line 1437 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1437 "xmltok_impl.c"
      case 3: // $bb2
        var $16=$ptr_addr; //@line 1437 "xmltok_impl.c"
        var $17=$16; //@line 1437 "xmltok_impl.c"
        var $18=HEAP[$17]; //@line 1437 "xmltok_impl.c"
        var $19=($18); //@line 1437 "xmltok_impl.c"
        var $20=$ptr_addr; //@line 1437 "xmltok_impl.c"
        var $21=$20+1; //@line 1437 "xmltok_impl.c"
        var $22=HEAP[$21]; //@line 1437 "xmltok_impl.c"
        var $23=($22); //@line 1437 "xmltok_impl.c"
        var $24=((($23)) & 255); //@line 1437 "xmltok_impl.c"
        var $25=((($19)) & 255); //@line 1437 "xmltok_impl.c"
        var $26=_unicode_byte_type($24, $25); //@line 1437 "xmltok_impl.c"
        $iftmp_925=$26; //@line 1437 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1437 "xmltok_impl.c"
      case 4: // $bb3
        var $27=__lastLabel__ == 3 ? $26 : ($15);
        if ($27 == 3) {
          __label__ = 40; break;
        }
        else if ($27 == 5) {
          __label__ = 5; break;
        }
        else if ($27 == 6) {
          __label__ = 10; break;
        }
        else if ($27 == 7) {
          __label__ = 15; break;
        }
        else if ($27 == 9) {
          __label__ = 57; break;
        }
        else if ($27 == 10) {
          __label__ = 57; break;
        }
        else if ($27 == 11) {
          __label__ = 62; break;
        }
        else if ($27 == 12) {
          __label__ = 24; break;
        }
        else if ($27 == 13) {
          __label__ = 32; break;
        }
        else if ($27 == 17) {
          __label__ = 62; break;
        }
        else if ($27 == 21) {
          __label__ = 42; break;
        }
        else if ($27 == 22) {
          __label__ = 20; break;
        }
        else if ($27 == 24) {
          __label__ = 20; break;
        }
        else if ($27 == 29) {
          __label__ = 20; break;
        }
        else {
        __label__ = 64; break;
        }
        
      case 5: // $bb4
        var $28=$state; //@line 1448 "xmltok_impl.c"
        var $29=($28)==0; //@line 1448 "xmltok_impl.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 1448 "xmltok_impl.c"
      case 6: // $bb5
        var $30=$nAtts; //@line 1448 "xmltok_impl.c"
        var $31=$attsMax_addr; //@line 1448 "xmltok_impl.c"
        var $32=($30) < ($31); //@line 1448 "xmltok_impl.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1448 "xmltok_impl.c"
      case 7: // $bb6
        var $33=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $34=$nAtts; //@line 1448 "xmltok_impl.c"
        var $35=$33+16*$34; //@line 1448 "xmltok_impl.c"
        var $36=$35; //@line 1448 "xmltok_impl.c"
        var $37=$ptr_addr; //@line 1448 "xmltok_impl.c"
        HEAP[$36]=$37; //@line 1448 "xmltok_impl.c"
        var $38=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $39=$nAtts; //@line 1448 "xmltok_impl.c"
        var $40=$38+16*$39; //@line 1448 "xmltok_impl.c"
        var $41=$40+12; //@line 1448 "xmltok_impl.c"
        HEAP[$41]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 8; break; //@line 1448 "xmltok_impl.c"
      case 8: // $bb7
        $state=1; //@line 1448 "xmltok_impl.c"
        __label__ = 9; break; //@line 1448 "xmltok_impl.c"
      case 9: // $bb8
        var $42=$ptr_addr; //@line 1448 "xmltok_impl.c"
        var $43=$42; //@line 1448 "xmltok_impl.c"
        $ptr_addr=$43; //@line 1448 "xmltok_impl.c"
        __label__ = 64; break; //@line 1448 "xmltok_impl.c"
      case 10: // $bb9
        var $44=$state; //@line 1448 "xmltok_impl.c"
        var $45=($44)==0; //@line 1448 "xmltok_impl.c"
        if ($45) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 1448 "xmltok_impl.c"
      case 11: // $bb10
        var $46=$nAtts; //@line 1448 "xmltok_impl.c"
        var $47=$attsMax_addr; //@line 1448 "xmltok_impl.c"
        var $48=($46) < ($47); //@line 1448 "xmltok_impl.c"
        if ($48) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1448 "xmltok_impl.c"
      case 12: // $bb11
        var $49=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $50=$nAtts; //@line 1448 "xmltok_impl.c"
        var $51=$49+16*$50; //@line 1448 "xmltok_impl.c"
        var $52=$51; //@line 1448 "xmltok_impl.c"
        var $53=$ptr_addr; //@line 1448 "xmltok_impl.c"
        HEAP[$52]=$53; //@line 1448 "xmltok_impl.c"
        var $54=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $55=$nAtts; //@line 1448 "xmltok_impl.c"
        var $56=$54+16*$55; //@line 1448 "xmltok_impl.c"
        var $57=$56+12; //@line 1448 "xmltok_impl.c"
        HEAP[$57]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 13; break; //@line 1448 "xmltok_impl.c"
      case 13: // $bb12
        $state=1; //@line 1448 "xmltok_impl.c"
        __label__ = 14; break; //@line 1448 "xmltok_impl.c"
      case 14: // $bb13
        var $58=$ptr_addr; //@line 1448 "xmltok_impl.c"
        var $59=$58+1; //@line 1448 "xmltok_impl.c"
        $ptr_addr=$59; //@line 1448 "xmltok_impl.c"
        __label__ = 64; break; //@line 1448 "xmltok_impl.c"
      case 15: // $bb14
        var $60=$state; //@line 1448 "xmltok_impl.c"
        var $61=($60)==0; //@line 1448 "xmltok_impl.c"
        if ($61) { __label__ = 16; break; } else { __label__ = 19; break; } //@line 1448 "xmltok_impl.c"
      case 16: // $bb15
        var $62=$nAtts; //@line 1448 "xmltok_impl.c"
        var $63=$attsMax_addr; //@line 1448 "xmltok_impl.c"
        var $64=($62) < ($63); //@line 1448 "xmltok_impl.c"
        if ($64) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1448 "xmltok_impl.c"
      case 17: // $bb16
        var $65=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $66=$nAtts; //@line 1448 "xmltok_impl.c"
        var $67=$65+16*$66; //@line 1448 "xmltok_impl.c"
        var $68=$67; //@line 1448 "xmltok_impl.c"
        var $69=$ptr_addr; //@line 1448 "xmltok_impl.c"
        HEAP[$68]=$69; //@line 1448 "xmltok_impl.c"
        var $70=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $71=$nAtts; //@line 1448 "xmltok_impl.c"
        var $72=$70+16*$71; //@line 1448 "xmltok_impl.c"
        var $73=$72+12; //@line 1448 "xmltok_impl.c"
        HEAP[$73]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 18; break; //@line 1448 "xmltok_impl.c"
      case 18: // $bb17
        $state=1; //@line 1448 "xmltok_impl.c"
        __label__ = 19; break; //@line 1448 "xmltok_impl.c"
      case 19: // $bb18
        var $74=$ptr_addr; //@line 1448 "xmltok_impl.c"
        var $75=$74+2; //@line 1448 "xmltok_impl.c"
        $ptr_addr=$75; //@line 1448 "xmltok_impl.c"
        __label__ = 64; break; //@line 1448 "xmltok_impl.c"
      case 20: // $bb19
        var $76=$state; //@line 1453 "xmltok_impl.c"
        var $77=($76)==0; //@line 1453 "xmltok_impl.c"
        if ($77) { __label__ = 21; break; } else { __label__ = 64; break; } //@line 1453 "xmltok_impl.c"
      case 21: // $bb20
        var $78=$nAtts; //@line 1453 "xmltok_impl.c"
        var $79=$attsMax_addr; //@line 1453 "xmltok_impl.c"
        var $80=($78) < ($79); //@line 1453 "xmltok_impl.c"
        if ($80) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1453 "xmltok_impl.c"
      case 22: // $bb21
        var $81=$atts_addr; //@line 1453 "xmltok_impl.c"
        var $82=$nAtts; //@line 1453 "xmltok_impl.c"
        var $83=$81+16*$82; //@line 1453 "xmltok_impl.c"
        var $84=$83; //@line 1453 "xmltok_impl.c"
        var $85=$ptr_addr; //@line 1453 "xmltok_impl.c"
        HEAP[$84]=$85; //@line 1453 "xmltok_impl.c"
        var $86=$atts_addr; //@line 1453 "xmltok_impl.c"
        var $87=$nAtts; //@line 1453 "xmltok_impl.c"
        var $88=$86+16*$87; //@line 1453 "xmltok_impl.c"
        var $89=$88+12; //@line 1453 "xmltok_impl.c"
        HEAP[$89]=1; //@line 1453 "xmltok_impl.c"
        __label__ = 23; break; //@line 1453 "xmltok_impl.c"
      case 23: // $bb22
        $state=1; //@line 1453 "xmltok_impl.c"
        __label__ = 64; break; //@line 1453 "xmltok_impl.c"
      case 24: // $bb24
        var $90=$state; //@line 1457 "xmltok_impl.c"
        var $91=($90)!=2; //@line 1457 "xmltok_impl.c"
        if ($91) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 1457 "xmltok_impl.c"
      case 25: // $bb25
        var $92=$nAtts; //@line 1458 "xmltok_impl.c"
        var $93=$attsMax_addr; //@line 1458 "xmltok_impl.c"
        var $94=($92) < ($93); //@line 1458 "xmltok_impl.c"
        if ($94) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1458 "xmltok_impl.c"
      case 26: // $bb26
        var $95=$atts_addr; //@line 1459 "xmltok_impl.c"
        var $96=$nAtts; //@line 1459 "xmltok_impl.c"
        var $97=$95+16*$96; //@line 1459 "xmltok_impl.c"
        var $98=$ptr_addr; //@line 1459 "xmltok_impl.c"
        var $99=$98+2; //@line 1459 "xmltok_impl.c"
        var $100=$97+4; //@line 1459 "xmltok_impl.c"
        HEAP[$100]=$99; //@line 1459 "xmltok_impl.c"
        __label__ = 27; break; //@line 1459 "xmltok_impl.c"
      case 27: // $bb27
        $state=2; //@line 1460 "xmltok_impl.c"
        $open=12; //@line 1461 "xmltok_impl.c"
        __label__ = 64; break; //@line 1461 "xmltok_impl.c"
      case 28: // $bb28
        var $101=$open; //@line 1463 "xmltok_impl.c"
        var $102=($101)==12; //@line 1463 "xmltok_impl.c"
        if ($102) { __label__ = 29; break; } else { __label__ = 64; break; } //@line 1463 "xmltok_impl.c"
      case 29: // $bb29
        $state=0; //@line 1464 "xmltok_impl.c"
        var $103=$nAtts; //@line 1465 "xmltok_impl.c"
        var $104=$attsMax_addr; //@line 1465 "xmltok_impl.c"
        var $105=($103) < ($104); //@line 1465 "xmltok_impl.c"
        if ($105) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1465 "xmltok_impl.c"
      case 30: // $bb30
        var $106=$atts_addr; //@line 1466 "xmltok_impl.c"
        var $107=$nAtts; //@line 1466 "xmltok_impl.c"
        var $108=$106+16*$107; //@line 1466 "xmltok_impl.c"
        var $109=$108+8; //@line 1466 "xmltok_impl.c"
        var $110=$ptr_addr; //@line 1466 "xmltok_impl.c"
        HEAP[$109]=$110; //@line 1466 "xmltok_impl.c"
        __label__ = 31; break; //@line 1466 "xmltok_impl.c"
      case 31: // $bb31
        var $111=$nAtts; //@line 1467 "xmltok_impl.c"
        var $112=($111) + 1; //@line 1467 "xmltok_impl.c"
        $nAtts=$112; //@line 1467 "xmltok_impl.c"
        __label__ = 64; break; //@line 1467 "xmltok_impl.c"
      case 32: // $bb33
        var $113=$state; //@line 1471 "xmltok_impl.c"
        var $114=($113)!=2; //@line 1471 "xmltok_impl.c"
        if ($114) { __label__ = 33; break; } else { __label__ = 36; break; } //@line 1471 "xmltok_impl.c"
      case 33: // $bb34
        var $115=$nAtts; //@line 1472 "xmltok_impl.c"
        var $116=$attsMax_addr; //@line 1472 "xmltok_impl.c"
        var $117=($115) < ($116); //@line 1472 "xmltok_impl.c"
        if ($117) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1472 "xmltok_impl.c"
      case 34: // $bb35
        var $118=$atts_addr; //@line 1473 "xmltok_impl.c"
        var $119=$nAtts; //@line 1473 "xmltok_impl.c"
        var $120=$118+16*$119; //@line 1473 "xmltok_impl.c"
        var $121=$ptr_addr; //@line 1473 "xmltok_impl.c"
        var $122=$121+2; //@line 1473 "xmltok_impl.c"
        var $123=$120+4; //@line 1473 "xmltok_impl.c"
        HEAP[$123]=$122; //@line 1473 "xmltok_impl.c"
        __label__ = 35; break; //@line 1473 "xmltok_impl.c"
      case 35: // $bb36
        $state=2; //@line 1474 "xmltok_impl.c"
        $open=13; //@line 1475 "xmltok_impl.c"
        __label__ = 64; break; //@line 1475 "xmltok_impl.c"
      case 36: // $bb37
        var $124=$open; //@line 1477 "xmltok_impl.c"
        var $125=($124)==13; //@line 1477 "xmltok_impl.c"
        if ($125) { __label__ = 37; break; } else { __label__ = 64; break; } //@line 1477 "xmltok_impl.c"
      case 37: // $bb38
        $state=0; //@line 1478 "xmltok_impl.c"
        var $126=$nAtts; //@line 1479 "xmltok_impl.c"
        var $127=$attsMax_addr; //@line 1479 "xmltok_impl.c"
        var $128=($126) < ($127); //@line 1479 "xmltok_impl.c"
        if ($128) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1479 "xmltok_impl.c"
      case 38: // $bb39
        var $129=$atts_addr; //@line 1480 "xmltok_impl.c"
        var $130=$nAtts; //@line 1480 "xmltok_impl.c"
        var $131=$129+16*$130; //@line 1480 "xmltok_impl.c"
        var $132=$131+8; //@line 1480 "xmltok_impl.c"
        var $133=$ptr_addr; //@line 1480 "xmltok_impl.c"
        HEAP[$132]=$133; //@line 1480 "xmltok_impl.c"
        __label__ = 39; break; //@line 1480 "xmltok_impl.c"
      case 39: // $bb40
        var $134=$nAtts; //@line 1481 "xmltok_impl.c"
        var $135=($134) + 1; //@line 1481 "xmltok_impl.c"
        $nAtts=$135; //@line 1481 "xmltok_impl.c"
        __label__ = 64; break; //@line 1481 "xmltok_impl.c"
      case 40: // $bb42
        var $136=$nAtts; //@line 1485 "xmltok_impl.c"
        var $137=$attsMax_addr; //@line 1485 "xmltok_impl.c"
        var $138=($136) < ($137); //@line 1485 "xmltok_impl.c"
        if ($138) { __label__ = 41; break; } else { __label__ = 64; break; } //@line 1485 "xmltok_impl.c"
      case 41: // $bb43
        var $139=$atts_addr; //@line 1486 "xmltok_impl.c"
        var $140=$nAtts; //@line 1486 "xmltok_impl.c"
        var $141=$139+16*$140; //@line 1486 "xmltok_impl.c"
        var $142=$141+12; //@line 1486 "xmltok_impl.c"
        HEAP[$142]=0; //@line 1486 "xmltok_impl.c"
        __label__ = 64; break; //@line 1486 "xmltok_impl.c"
      case 42: // $bb45
        var $143=$state; //@line 1489 "xmltok_impl.c"
        var $144=($143)==1; //@line 1489 "xmltok_impl.c"
        if ($144) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 1489 "xmltok_impl.c"
      case 43: // $bb46
        $state=0; //@line 1490 "xmltok_impl.c"
        __label__ = 64; break; //@line 1490 "xmltok_impl.c"
      case 44: // $bb47
        var $145=$state; //@line 1491 "xmltok_impl.c"
        var $146=($145)==2; //@line 1491 "xmltok_impl.c"
        if ($146) { __label__ = 45; break; } else { __label__ = 64; break; } //@line 1491 "xmltok_impl.c"
      case 45: // $bb48
        var $147=$nAtts; //@line 1491 "xmltok_impl.c"
        var $148=$attsMax_addr; //@line 1491 "xmltok_impl.c"
        var $149=($147) < ($148); //@line 1491 "xmltok_impl.c"
        if ($149) { __label__ = 46; break; } else { __label__ = 64; break; } //@line 1491 "xmltok_impl.c"
      case 46: // $bb49
        var $150=$atts_addr; //@line 1491 "xmltok_impl.c"
        var $151=$nAtts; //@line 1491 "xmltok_impl.c"
        var $152=$150+16*$151; //@line 1491 "xmltok_impl.c"
        var $153=$152+12; //@line 1491 "xmltok_impl.c"
        var $154=HEAP[$153]; //@line 1491 "xmltok_impl.c"
        var $155=($154)!=0; //@line 1491 "xmltok_impl.c"
        if ($155) { __label__ = 47; break; } else { __label__ = 64; break; } //@line 1491 "xmltok_impl.c"
      case 47: // $bb50
        var $156=$atts_addr; //@line 1491 "xmltok_impl.c"
        var $157=$nAtts; //@line 1491 "xmltok_impl.c"
        var $158=$156+16*$157; //@line 1491 "xmltok_impl.c"
        var $159=$158+4; //@line 1491 "xmltok_impl.c"
        var $160=HEAP[$159]; //@line 1491 "xmltok_impl.c"
        var $161=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $162=($160)==($161); //@line 1491 "xmltok_impl.c"
        if ($162) { __label__ = 56; break; } else { __label__ = 48; break; } //@line 1491 "xmltok_impl.c"
      case 48: // $bb51
        var $163=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $164=$163+1; //@line 1491 "xmltok_impl.c"
        var $165=HEAP[$164]; //@line 1491 "xmltok_impl.c"
        var $166=($165)!=0; //@line 1491 "xmltok_impl.c"
        if ($166) { __label__ = 56; break; } else { __label__ = 49; break; } //@line 1491 "xmltok_impl.c"
      case 49: // $bb52
        var $167=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $168=$167; //@line 1491 "xmltok_impl.c"
        var $169=HEAP[$168]; //@line 1491 "xmltok_impl.c"
        var $170=($169)!=32; //@line 1491 "xmltok_impl.c"
        if ($170) { __label__ = 56; break; } else { __label__ = 50; break; } //@line 1491 "xmltok_impl.c"
      case 50: // $bb53
        var $171=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $172=$171+2; //@line 1491 "xmltok_impl.c"
        var $173=$172+1; //@line 1491 "xmltok_impl.c"
        var $174=HEAP[$173]; //@line 1491 "xmltok_impl.c"
        var $175=($174)!=0; //@line 1491 "xmltok_impl.c"
        if ($175) { __label__ = 52; break; } else { __label__ = 51; break; } //@line 1491 "xmltok_impl.c"
      case 51: // $bb54
        var $176=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $177=$176+2; //@line 1491 "xmltok_impl.c"
        var $178=$177; //@line 1491 "xmltok_impl.c"
        var $179=HEAP[$178]; //@line 1491 "xmltok_impl.c"
        var $180=($179)==32; //@line 1491 "xmltok_impl.c"
        if ($180) { __label__ = 56; break; } else { __label__ = 52; break; } //@line 1491 "xmltok_impl.c"
      case 52: // $bb55
        var $181=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $182=$181+2; //@line 1491 "xmltok_impl.c"
        var $183=$182+1; //@line 1491 "xmltok_impl.c"
        var $184=HEAP[$183]; //@line 1491 "xmltok_impl.c"
        var $185=($184)==0; //@line 1491 "xmltok_impl.c"
        if ($185) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 1491 "xmltok_impl.c"
      case 53: // $bb56
        var $186=$enc_addr; //@line 1491 "xmltok_impl.c"
        var $187=$186; //@line 1491 "xmltok_impl.c"
        var $188=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $189=$188+2; //@line 1491 "xmltok_impl.c"
        var $190=HEAP[$189]; //@line 1491 "xmltok_impl.c"
        var $191=($190); //@line 1491 "xmltok_impl.c"
        var $192=$187+76; //@line 1491 "xmltok_impl.c"
        var $193=$192+$191; //@line 1491 "xmltok_impl.c"
        var $194=HEAP[$193]; //@line 1491 "xmltok_impl.c"
        var $195=($194); //@line 1491 "xmltok_impl.c"
        $iftmp_927=$195; //@line 1491 "xmltok_impl.c"
        __label__ = 55; break; //@line 1491 "xmltok_impl.c"
      case 54: // $bb57
        var $196=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $197=$196+2; //@line 1491 "xmltok_impl.c"
        var $198=$197; //@line 1491 "xmltok_impl.c"
        var $199=HEAP[$198]; //@line 1491 "xmltok_impl.c"
        var $200=($199); //@line 1491 "xmltok_impl.c"
        var $201=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $202=$201+2; //@line 1491 "xmltok_impl.c"
        var $203=$202+1; //@line 1491 "xmltok_impl.c"
        var $204=HEAP[$203]; //@line 1491 "xmltok_impl.c"
        var $205=($204); //@line 1491 "xmltok_impl.c"
        var $206=((($205)) & 255); //@line 1491 "xmltok_impl.c"
        var $207=((($200)) & 255); //@line 1491 "xmltok_impl.c"
        var $208=_unicode_byte_type($206, $207); //@line 1491 "xmltok_impl.c"
        $iftmp_927=$208; //@line 1491 "xmltok_impl.c"
        __label__ = 55; break; //@line 1491 "xmltok_impl.c"
      case 55: // $bb58
        var $209=$iftmp_927; //@line 1491 "xmltok_impl.c"
        var $210=$open; //@line 1491 "xmltok_impl.c"
        var $211=($209)==($210); //@line 1491 "xmltok_impl.c"
        if ($211) { __label__ = 56; break; } else { __label__ = 64; break; } //@line 1491 "xmltok_impl.c"
      case 56: // $bb59
        var $212=$atts_addr; //@line 1498 "xmltok_impl.c"
        var $213=$nAtts; //@line 1498 "xmltok_impl.c"
        var $214=$212+16*$213; //@line 1498 "xmltok_impl.c"
        var $215=$214+12; //@line 1498 "xmltok_impl.c"
        HEAP[$215]=0; //@line 1498 "xmltok_impl.c"
        __label__ = 64; break; //@line 1498 "xmltok_impl.c"
      case 57: // $bb61
        var $216=$state; //@line 1503 "xmltok_impl.c"
        var $217=($216)==1; //@line 1503 "xmltok_impl.c"
        if ($217) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 1503 "xmltok_impl.c"
      case 58: // $bb62
        $state=0; //@line 1504 "xmltok_impl.c"
        __label__ = 64; break; //@line 1504 "xmltok_impl.c"
      case 59: // $bb63
        var $218=$state; //@line 1505 "xmltok_impl.c"
        var $219=($218)==2; //@line 1505 "xmltok_impl.c"
        if ($219) { __label__ = 60; break; } else { __label__ = 64; break; } //@line 1505 "xmltok_impl.c"
      case 60: // $bb64
        var $220=$nAtts; //@line 1505 "xmltok_impl.c"
        var $221=$attsMax_addr; //@line 1505 "xmltok_impl.c"
        var $222=($220) < ($221); //@line 1505 "xmltok_impl.c"
        if ($222) { __label__ = 61; break; } else { __label__ = 64; break; } //@line 1505 "xmltok_impl.c"
      case 61: // $bb65
        var $223=$atts_addr; //@line 1506 "xmltok_impl.c"
        var $224=$nAtts; //@line 1506 "xmltok_impl.c"
        var $225=$223+16*$224; //@line 1506 "xmltok_impl.c"
        var $226=$225+12; //@line 1506 "xmltok_impl.c"
        HEAP[$226]=0; //@line 1506 "xmltok_impl.c"
        __label__ = 64; break; //@line 1506 "xmltok_impl.c"
      case 62: // $bb67
        var $227=$state; //@line 1510 "xmltok_impl.c"
        var $228=($227)!=2; //@line 1510 "xmltok_impl.c"
        if ($228) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 1510 "xmltok_impl.c"
      case 63: // $bb68
        var $229=$nAtts; //@line 1511 "xmltok_impl.c"
        $0=$229; //@line 1511 "xmltok_impl.c"
        var $230=$0; //@line 1511 "xmltok_impl.c"
        $retval=$230; //@line 1511 "xmltok_impl.c"
        var $retval70=$retval; //@line 1436 "xmltok_impl.c"
        ;
        return $retval70; //@line 1436 "xmltok_impl.c"
      case 64: // $bb69
        var $231=$ptr_addr; //@line 1436 "xmltok_impl.c"
        var $232=$231+2; //@line 1436 "xmltok_impl.c"
        $ptr_addr=$232; //@line 1436 "xmltok_impl.c"
        __label__ = 1; break; //@line 1436 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_charRefNumber($enc, $ptr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $retval;
        var $iftmp_930;
        var $0;
        var $iftmp_929;
        var $result;
        var $c;
        var $c17;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $result=0; //@line 1523 "xmltok_impl.c"
        var $1=$ptr_addr; //@line 1525 "xmltok_impl.c"
        var $2=$1+4; //@line 1525 "xmltok_impl.c"
        $ptr_addr=$2; //@line 1525 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 1526 "xmltok_impl.c"
        var $4=$3+1; //@line 1526 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1526 "xmltok_impl.c"
        var $6=($5)!=0; //@line 1526 "xmltok_impl.c"
        if ($6) { __label__ = 21; break; } else { __label__ = 1; break; } //@line 1526 "xmltok_impl.c"
      case 1: // $bb
        var $7=$ptr_addr; //@line 1526 "xmltok_impl.c"
        var $8=$7; //@line 1526 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1526 "xmltok_impl.c"
        var $10=($9)!=120; //@line 1526 "xmltok_impl.c"
        if ($10) { __label__ = 21; break; } else { __label__ = 2; break; } //@line 1526 "xmltok_impl.c"
      case 2: // $bb1
        var $11=$ptr_addr; //@line 1527 "xmltok_impl.c"
        var $12=$11+2; //@line 1527 "xmltok_impl.c"
        $ptr_addr=$12; //@line 1527 "xmltok_impl.c"
        __label__ = 13; break; //@line 1527 "xmltok_impl.c"
      case 3: // $bb2
        var $13=$ptr_addr; //@line 1530 "xmltok_impl.c"
        var $14=$13+1; //@line 1530 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1530 "xmltok_impl.c"
        var $16=($15)==0; //@line 1530 "xmltok_impl.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 1530 "xmltok_impl.c"
      case 4: // $bb5_thread
        $iftmp_929=-1; //@line 1530 "xmltok_impl.c"
        $c=-1; //@line 1530 "xmltok_impl.c"
        __label__ = 9; break;
      case 5: // $bb5
        var $17=$ptr_addr; //@line 1530 "xmltok_impl.c"
        var $18=$17; //@line 1530 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1530 "xmltok_impl.c"
        var $20=($19); //@line 1530 "xmltok_impl.c"
        $iftmp_929=$20; //@line 1530 "xmltok_impl.c"
        $c=$20; //@line 1530 "xmltok_impl.c"
        if ($20 == 48) {
          __label__ = 6; break;
        }
        else if ($20 == 49) {
          __label__ = 6; break;
        }
        else if ($20 == 50) {
          __label__ = 6; break;
        }
        else if ($20 == 51) {
          __label__ = 6; break;
        }
        else if ($20 == 52) {
          __label__ = 6; break;
        }
        else if ($20 == 53) {
          __label__ = 6; break;
        }
        else if ($20 == 54) {
          __label__ = 6; break;
        }
        else if ($20 == 55) {
          __label__ = 6; break;
        }
        else if ($20 == 56) {
          __label__ = 6; break;
        }
        else if ($20 == 57) {
          __label__ = 6; break;
        }
        else if ($20 == 65) {
          __label__ = 7; break;
        }
        else if ($20 == 66) {
          __label__ = 7; break;
        }
        else if ($20 == 67) {
          __label__ = 7; break;
        }
        else if ($20 == 68) {
          __label__ = 7; break;
        }
        else if ($20 == 69) {
          __label__ = 7; break;
        }
        else if ($20 == 70) {
          __label__ = 7; break;
        }
        else if ($20 == 97) {
          __label__ = 8; break;
        }
        else if ($20 == 98) {
          __label__ = 8; break;
        }
        else if ($20 == 99) {
          __label__ = 8; break;
        }
        else if ($20 == 100) {
          __label__ = 8; break;
        }
        else if ($20 == 101) {
          __label__ = 8; break;
        }
        else if ($20 == 102) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 6: // $bb6
        var $21=$result; //@line 1534 "xmltok_impl.c"
        var $22=($21) << 4; //@line 1534 "xmltok_impl.c"
        $result=$22; //@line 1534 "xmltok_impl.c"
        var $23=$c; //@line 1535 "xmltok_impl.c"
        var $24=($23) - 48; //@line 1535 "xmltok_impl.c"
        var $25=$result; //@line 1535 "xmltok_impl.c"
        var $26=($24) | ($25); //@line 1535 "xmltok_impl.c"
        $result=$26; //@line 1535 "xmltok_impl.c"
        __lastLabel__ = 6; __label__ = 10; break; //@line 1535 "xmltok_impl.c"
      case 7: // $bb7
        var $27=$result; //@line 1539 "xmltok_impl.c"
        var $28=($27) << 4; //@line 1539 "xmltok_impl.c"
        $result=$28; //@line 1539 "xmltok_impl.c"
        var $29=$c; //@line 1540 "xmltok_impl.c"
        var $30=($29) - 55; //@line 1540 "xmltok_impl.c"
        var $31=$result; //@line 1540 "xmltok_impl.c"
        var $32=($30) + ($31); //@line 1540 "xmltok_impl.c"
        $result=$32; //@line 1540 "xmltok_impl.c"
        __lastLabel__ = 7; __label__ = 10; break; //@line 1540 "xmltok_impl.c"
      case 8: // $bb8
        var $33=$result; //@line 1544 "xmltok_impl.c"
        var $34=($33) << 4; //@line 1544 "xmltok_impl.c"
        $result=$34; //@line 1544 "xmltok_impl.c"
        var $35=$c; //@line 1545 "xmltok_impl.c"
        var $36=($35) - 87; //@line 1545 "xmltok_impl.c"
        var $37=$result; //@line 1545 "xmltok_impl.c"
        var $38=($36) + ($37); //@line 1545 "xmltok_impl.c"
        $result=$38; //@line 1545 "xmltok_impl.c"
        __lastLabel__ = 8; __label__ = 10; break; //@line 1545 "xmltok_impl.c"
      case 9: // $bb9thread_pre_split
        var $_pr=$result;
        __lastLabel__ = 9; __label__ = 10; break;
      case 10: // $bb9
        var $39=__lastLabel__ == 9 ? $_pr : (__lastLabel__ == 8 ? $38 : (__lastLabel__ == 7 ? $32 : ($26)));
        var $40=($39) > 1114111; //@line 1548 "xmltok_impl.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1548 "xmltok_impl.c"
      case 11: // $bb10
        $0=-1; //@line 1549 "xmltok_impl.c"
        __label__ = 24; break; //@line 1549 "xmltok_impl.c"
      case 12: // $bb11
        var $41=$ptr_addr; //@line 1529 "xmltok_impl.c"
        var $42=$41+2; //@line 1529 "xmltok_impl.c"
        $ptr_addr=$42; //@line 1529 "xmltok_impl.c"
        __label__ = 13; break; //@line 1529 "xmltok_impl.c"
      case 13: // $bb12
        var $43=$ptr_addr; //@line 1528 "xmltok_impl.c"
        var $44=$43+1; //@line 1528 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 1528 "xmltok_impl.c"
        var $46=($45)!=0; //@line 1528 "xmltok_impl.c"
        if ($46) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 1528 "xmltok_impl.c"
      case 14: // $bb13
        var $47=$ptr_addr; //@line 1528 "xmltok_impl.c"
        var $48=$47; //@line 1528 "xmltok_impl.c"
        var $49=HEAP[$48]; //@line 1528 "xmltok_impl.c"
        var $50=($49)!=59; //@line 1528 "xmltok_impl.c"
        if ($50) { __label__ = 3; break; } else { __label__ = 23; break; } //@line 1528 "xmltok_impl.c"
      case 15: // $bb16
        var $51=$ptr_addr; //@line 1554 "xmltok_impl.c"
        var $52=$51+1; //@line 1554 "xmltok_impl.c"
        var $53=HEAP[$52]; //@line 1554 "xmltok_impl.c"
        var $54=($53)==0; //@line 1554 "xmltok_impl.c"
        if ($54) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1554 "xmltok_impl.c"
      case 16: // $bb18
        var $55=$ptr_addr; //@line 1554 "xmltok_impl.c"
        var $56=$55; //@line 1554 "xmltok_impl.c"
        var $57=HEAP[$56]; //@line 1554 "xmltok_impl.c"
        var $58=($57); //@line 1554 "xmltok_impl.c"
        $iftmp_930=$58; //@line 1554 "xmltok_impl.c"
        __label__ = 18; break; //@line 1554 "xmltok_impl.c"
      case 17: // $bb19
        $iftmp_930=-1; //@line 1554 "xmltok_impl.c"
        __label__ = 18; break; //@line 1554 "xmltok_impl.c"
      case 18: // $bb20
        var $59=$iftmp_930; //@line 1554 "xmltok_impl.c"
        $c17=$59; //@line 1554 "xmltok_impl.c"
        var $60=$result; //@line 1555 "xmltok_impl.c"
        var $61=($60) * 10; //@line 1555 "xmltok_impl.c"
        $result=$61; //@line 1555 "xmltok_impl.c"
        var $62=$c17; //@line 1556 "xmltok_impl.c"
        var $63=($62) - 48; //@line 1556 "xmltok_impl.c"
        var $64=$result; //@line 1556 "xmltok_impl.c"
        var $65=($63) + ($64); //@line 1556 "xmltok_impl.c"
        $result=$65; //@line 1556 "xmltok_impl.c"
        var $66=($65) > 1114111; //@line 1557 "xmltok_impl.c"
        if ($66) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1557 "xmltok_impl.c"
      case 19: // $bb21
        $0=-1; //@line 1558 "xmltok_impl.c"
        __label__ = 24; break; //@line 1558 "xmltok_impl.c"
      case 20: // $bb22
        var $67=$ptr_addr; //@line 1553 "xmltok_impl.c"
        var $68=$67+2; //@line 1553 "xmltok_impl.c"
        $ptr_addr=$68; //@line 1553 "xmltok_impl.c"
        __label__ = 21; break; //@line 1553 "xmltok_impl.c"
      case 21: // $bb23
        var $69=$ptr_addr; //@line 1553 "xmltok_impl.c"
        var $70=$69+1; //@line 1553 "xmltok_impl.c"
        var $71=HEAP[$70]; //@line 1553 "xmltok_impl.c"
        var $72=($71)!=0; //@line 1553 "xmltok_impl.c"
        if ($72) { __label__ = 15; break; } else { __label__ = 22; break; } //@line 1553 "xmltok_impl.c"
      case 22: // $bb24
        var $73=$ptr_addr; //@line 1553 "xmltok_impl.c"
        var $74=$73; //@line 1553 "xmltok_impl.c"
        var $75=HEAP[$74]; //@line 1553 "xmltok_impl.c"
        var $76=($75)!=59; //@line 1553 "xmltok_impl.c"
        if ($76) { __label__ = 15; break; } else { __label__ = 23; break; } //@line 1553 "xmltok_impl.c"
      case 23: // $bb25
        var $77=$result; //@line 1561 "xmltok_impl.c"
        var $78=_checkCharRefNumber($77); //@line 1561 "xmltok_impl.c"
        $0=$78; //@line 1561 "xmltok_impl.c"
        __label__ = 24; break; //@line 1561 "xmltok_impl.c"
      case 24: // $bb26
        var $79=$0; //@line 1549 "xmltok_impl.c"
        $retval=$79; //@line 1549 "xmltok_impl.c"
        var $retval27=$retval; //@line 1549 "xmltok_impl.c"
        ;
        return $retval27; //@line 1549 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_predefinedEntityName($enc, $ptr, $end) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $retval;
        var $iftmp_934;
        var $0;
        var $iftmp_933;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        var $1=$end_addr; //@line 1568 "xmltok_impl.c"
        var $2=($1); //@line 1568 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 1568 "xmltok_impl.c"
        var $4=($3); //@line 1568 "xmltok_impl.c"
        var $5=($2) - ($4); //@line 1568 "xmltok_impl.c"
        var $6=((($5)/2)|0); //@line 1568 "xmltok_impl.c"
        if ($6 == 2) {
          __label__ = 1; break;
        }
        else if ($6 == 3) {
          __label__ = 8; break;
        }
        else if ($6 == 4) {
          __label__ = 15; break;
        }
        else {
        __label__ = 32; break;
        }
        
      case 1: // $bb
        var $7=$ptr_addr; //@line 1570 "xmltok_impl.c"
        var $8=$7+2; //@line 1570 "xmltok_impl.c"
        var $9=$8+1; //@line 1570 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1570 "xmltok_impl.c"
        var $11=($10)==0; //@line 1570 "xmltok_impl.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 32; break; } //@line 1570 "xmltok_impl.c"
      case 2: // $bb1
        var $12=$ptr_addr; //@line 1570 "xmltok_impl.c"
        var $13=$12+2; //@line 1570 "xmltok_impl.c"
        var $14=$13; //@line 1570 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1570 "xmltok_impl.c"
        var $16=($15)==116; //@line 1570 "xmltok_impl.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 32; break; } //@line 1570 "xmltok_impl.c"
      case 3: // $bb2
        var $17=$ptr_addr; //@line 1571 "xmltok_impl.c"
        var $18=$17+1; //@line 1571 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1571 "xmltok_impl.c"
        var $20=($19)==0; //@line 1571 "xmltok_impl.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 1571 "xmltok_impl.c"
      case 4: // $bb5_thread
        $iftmp_933=-1; //@line 1571 "xmltok_impl.c"
        __label__ = 32; break;
      case 5: // $bb5
        var $21=$ptr_addr; //@line 1571 "xmltok_impl.c"
        var $22=$21; //@line 1571 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 1571 "xmltok_impl.c"
        var $24=($23); //@line 1571 "xmltok_impl.c"
        $iftmp_933=$24; //@line 1571 "xmltok_impl.c"
        if ($24 == 103) {
          __label__ = 7; break;
        }
        else if ($24 == 108) {
          __label__ = 6; break;
        }
        else {
        __label__ = 32; break;
        }
        
      case 6: // $bb6
        $0=60; //@line 1573 "xmltok_impl.c"
        __label__ = 33; break; //@line 1573 "xmltok_impl.c"
      case 7: // $bb7
        $0=62; //@line 1575 "xmltok_impl.c"
        __label__ = 33; break; //@line 1575 "xmltok_impl.c"
      case 8: // $bb9
        var $25=$ptr_addr; //@line 1580 "xmltok_impl.c"
        var $26=$25+1; //@line 1580 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 1580 "xmltok_impl.c"
        var $28=($27)==0; //@line 1580 "xmltok_impl.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 32; break; } //@line 1580 "xmltok_impl.c"
      case 9: // $bb10
        var $29=$ptr_addr; //@line 1580 "xmltok_impl.c"
        var $30=$29; //@line 1580 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 1580 "xmltok_impl.c"
        var $32=($31)==97; //@line 1580 "xmltok_impl.c"
        if ($32) { __label__ = 10; break; } else { __label__ = 32; break; } //@line 1580 "xmltok_impl.c"
      case 10: // $bb11
        var $33=$ptr_addr; //@line 1581 "xmltok_impl.c"
        var $34=$33+2; //@line 1581 "xmltok_impl.c"
        $ptr_addr=$34; //@line 1581 "xmltok_impl.c"
        var $35=$ptr_addr; //@line 1582 "xmltok_impl.c"
        var $36=$35+1; //@line 1582 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 1582 "xmltok_impl.c"
        var $38=($37)==0; //@line 1582 "xmltok_impl.c"
        if ($38) { __label__ = 11; break; } else { __label__ = 32; break; } //@line 1582 "xmltok_impl.c"
      case 11: // $bb12
        var $39=$ptr_addr; //@line 1582 "xmltok_impl.c"
        var $40=$39; //@line 1582 "xmltok_impl.c"
        var $41=HEAP[$40]; //@line 1582 "xmltok_impl.c"
        var $42=($41)==109; //@line 1582 "xmltok_impl.c"
        if ($42) { __label__ = 12; break; } else { __label__ = 32; break; } //@line 1582 "xmltok_impl.c"
      case 12: // $bb13
        var $43=$ptr_addr; //@line 1583 "xmltok_impl.c"
        var $44=$43+2; //@line 1583 "xmltok_impl.c"
        $ptr_addr=$44; //@line 1583 "xmltok_impl.c"
        var $45=$ptr_addr; //@line 1584 "xmltok_impl.c"
        var $46=$45+1; //@line 1584 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 1584 "xmltok_impl.c"
        var $48=($47)==0; //@line 1584 "xmltok_impl.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 32; break; } //@line 1584 "xmltok_impl.c"
      case 13: // $bb14
        var $49=$ptr_addr; //@line 1584 "xmltok_impl.c"
        var $50=$49; //@line 1584 "xmltok_impl.c"
        var $51=HEAP[$50]; //@line 1584 "xmltok_impl.c"
        var $52=($51)==112; //@line 1584 "xmltok_impl.c"
        if ($52) { __label__ = 14; break; } else { __label__ = 32; break; } //@line 1584 "xmltok_impl.c"
      case 14: // $bb15
        $0=38; //@line 1585 "xmltok_impl.c"
        __label__ = 33; break; //@line 1585 "xmltok_impl.c"
      case 15: // $bb17
        var $53=$ptr_addr; //@line 1590 "xmltok_impl.c"
        var $54=$53+1; //@line 1590 "xmltok_impl.c"
        var $55=HEAP[$54]; //@line 1590 "xmltok_impl.c"
        var $56=($55)==0; //@line 1590 "xmltok_impl.c"
        if ($56) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 1590 "xmltok_impl.c"
      case 16: // $bb20_thread
        $iftmp_934=-1; //@line 1590 "xmltok_impl.c"
        __label__ = 32; break;
      case 17: // $bb20
        var $57=$ptr_addr; //@line 1590 "xmltok_impl.c"
        var $58=$57; //@line 1590 "xmltok_impl.c"
        var $59=HEAP[$58]; //@line 1590 "xmltok_impl.c"
        var $60=($59); //@line 1590 "xmltok_impl.c"
        $iftmp_934=$60; //@line 1590 "xmltok_impl.c"
        if ($60 == 97) {
          __label__ = 25; break;
        }
        else if ($60 == 113) {
          __label__ = 18; break;
        }
        else {
        __label__ = 32; break;
        }
        
      case 18: // $bb21
        var $61=$ptr_addr; //@line 1592 "xmltok_impl.c"
        var $62=$61+2; //@line 1592 "xmltok_impl.c"
        $ptr_addr=$62; //@line 1592 "xmltok_impl.c"
        var $63=$ptr_addr; //@line 1593 "xmltok_impl.c"
        var $64=$63+1; //@line 1593 "xmltok_impl.c"
        var $65=HEAP[$64]; //@line 1593 "xmltok_impl.c"
        var $66=($65)==0; //@line 1593 "xmltok_impl.c"
        if ($66) { __label__ = 19; break; } else { __label__ = 32; break; } //@line 1593 "xmltok_impl.c"
      case 19: // $bb22
        var $67=$ptr_addr; //@line 1593 "xmltok_impl.c"
        var $68=$67; //@line 1593 "xmltok_impl.c"
        var $69=HEAP[$68]; //@line 1593 "xmltok_impl.c"
        var $70=($69)==117; //@line 1593 "xmltok_impl.c"
        if ($70) { __label__ = 20; break; } else { __label__ = 32; break; } //@line 1593 "xmltok_impl.c"
      case 20: // $bb23
        var $71=$ptr_addr; //@line 1594 "xmltok_impl.c"
        var $72=$71+2; //@line 1594 "xmltok_impl.c"
        $ptr_addr=$72; //@line 1594 "xmltok_impl.c"
        var $73=$ptr_addr; //@line 1595 "xmltok_impl.c"
        var $74=$73+1; //@line 1595 "xmltok_impl.c"
        var $75=HEAP[$74]; //@line 1595 "xmltok_impl.c"
        var $76=($75)==0; //@line 1595 "xmltok_impl.c"
        if ($76) { __label__ = 21; break; } else { __label__ = 32; break; } //@line 1595 "xmltok_impl.c"
      case 21: // $bb24
        var $77=$ptr_addr; //@line 1595 "xmltok_impl.c"
        var $78=$77; //@line 1595 "xmltok_impl.c"
        var $79=HEAP[$78]; //@line 1595 "xmltok_impl.c"
        var $80=($79)==111; //@line 1595 "xmltok_impl.c"
        if ($80) { __label__ = 22; break; } else { __label__ = 32; break; } //@line 1595 "xmltok_impl.c"
      case 22: // $bb25
        var $81=$ptr_addr; //@line 1596 "xmltok_impl.c"
        var $82=$81+2; //@line 1596 "xmltok_impl.c"
        $ptr_addr=$82; //@line 1596 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 1597 "xmltok_impl.c"
        var $84=$83+1; //@line 1597 "xmltok_impl.c"
        var $85=HEAP[$84]; //@line 1597 "xmltok_impl.c"
        var $86=($85)==0; //@line 1597 "xmltok_impl.c"
        if ($86) { __label__ = 23; break; } else { __label__ = 32; break; } //@line 1597 "xmltok_impl.c"
      case 23: // $bb26
        var $87=$ptr_addr; //@line 1597 "xmltok_impl.c"
        var $88=$87; //@line 1597 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 1597 "xmltok_impl.c"
        var $90=($89)==116; //@line 1597 "xmltok_impl.c"
        if ($90) { __label__ = 24; break; } else { __label__ = 32; break; } //@line 1597 "xmltok_impl.c"
      case 24: // $bb27
        $0=34; //@line 1598 "xmltok_impl.c"
        __label__ = 33; break; //@line 1598 "xmltok_impl.c"
      case 25: // $bb29
        var $91=$ptr_addr; //@line 1603 "xmltok_impl.c"
        var $92=$91+2; //@line 1603 "xmltok_impl.c"
        $ptr_addr=$92; //@line 1603 "xmltok_impl.c"
        var $93=$ptr_addr; //@line 1604 "xmltok_impl.c"
        var $94=$93+1; //@line 1604 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 1604 "xmltok_impl.c"
        var $96=($95)==0; //@line 1604 "xmltok_impl.c"
        if ($96) { __label__ = 26; break; } else { __label__ = 32; break; } //@line 1604 "xmltok_impl.c"
      case 26: // $bb30
        var $97=$ptr_addr; //@line 1604 "xmltok_impl.c"
        var $98=$97; //@line 1604 "xmltok_impl.c"
        var $99=HEAP[$98]; //@line 1604 "xmltok_impl.c"
        var $100=($99)==112; //@line 1604 "xmltok_impl.c"
        if ($100) { __label__ = 27; break; } else { __label__ = 32; break; } //@line 1604 "xmltok_impl.c"
      case 27: // $bb31
        var $101=$ptr_addr; //@line 1605 "xmltok_impl.c"
        var $102=$101+2; //@line 1605 "xmltok_impl.c"
        $ptr_addr=$102; //@line 1605 "xmltok_impl.c"
        var $103=$ptr_addr; //@line 1606 "xmltok_impl.c"
        var $104=$103+1; //@line 1606 "xmltok_impl.c"
        var $105=HEAP[$104]; //@line 1606 "xmltok_impl.c"
        var $106=($105)==0; //@line 1606 "xmltok_impl.c"
        if ($106) { __label__ = 28; break; } else { __label__ = 32; break; } //@line 1606 "xmltok_impl.c"
      case 28: // $bb32
        var $107=$ptr_addr; //@line 1606 "xmltok_impl.c"
        var $108=$107; //@line 1606 "xmltok_impl.c"
        var $109=HEAP[$108]; //@line 1606 "xmltok_impl.c"
        var $110=($109)==111; //@line 1606 "xmltok_impl.c"
        if ($110) { __label__ = 29; break; } else { __label__ = 32; break; } //@line 1606 "xmltok_impl.c"
      case 29: // $bb33
        var $111=$ptr_addr; //@line 1607 "xmltok_impl.c"
        var $112=$111+2; //@line 1607 "xmltok_impl.c"
        $ptr_addr=$112; //@line 1607 "xmltok_impl.c"
        var $113=$ptr_addr; //@line 1608 "xmltok_impl.c"
        var $114=$113+1; //@line 1608 "xmltok_impl.c"
        var $115=HEAP[$114]; //@line 1608 "xmltok_impl.c"
        var $116=($115)==0; //@line 1608 "xmltok_impl.c"
        if ($116) { __label__ = 30; break; } else { __label__ = 32; break; } //@line 1608 "xmltok_impl.c"
      case 30: // $bb34
        var $117=$ptr_addr; //@line 1608 "xmltok_impl.c"
        var $118=$117; //@line 1608 "xmltok_impl.c"
        var $119=HEAP[$118]; //@line 1608 "xmltok_impl.c"
        var $120=($119)==115; //@line 1608 "xmltok_impl.c"
        if ($120) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1608 "xmltok_impl.c"
      case 31: // $bb35
        $0=39; //@line 1609 "xmltok_impl.c"
        __label__ = 33; break; //@line 1609 "xmltok_impl.c"
      case 32: // $bb36
        $0=0; //@line 1615 "xmltok_impl.c"
        __label__ = 33; break; //@line 1615 "xmltok_impl.c"
      case 33: // $bb37
        var $121=$0; //@line 1573 "xmltok_impl.c"
        $retval=$121; //@line 1573 "xmltok_impl.c"
        var $retval38=$retval; //@line 1573 "xmltok_impl.c"
        ;
        return $retval38; //@line 1573 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_sameName($enc, $ptr1, $ptr2) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr1_addr;
        var $ptr2_addr;
        var $retval;
        var $iftmp_937;
        var $0;
        var $iftmp_935;
        $enc_addr=$enc;
        $ptr1_addr=$ptr1;
        $ptr2_addr=$ptr2;
        __label__ = 1; break; //@line 1620 "xmltok.c"
      case 1: // $bb
        var $1=$ptr1_addr; //@line 1622 "xmltok_impl.c"
        var $2=$1+1; //@line 1622 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 1622 "xmltok_impl.c"
        var $4=($3)==0; //@line 1622 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1622 "xmltok_impl.c"
      case 2: // $bb1
        var $5=$enc_addr; //@line 1622 "xmltok_impl.c"
        var $6=$5; //@line 1622 "xmltok_impl.c"
        var $7=$ptr1_addr; //@line 1622 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1622 "xmltok_impl.c"
        var $9=($8); //@line 1622 "xmltok_impl.c"
        var $10=$6+76; //@line 1622 "xmltok_impl.c"
        var $11=$10+$9; //@line 1622 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1622 "xmltok_impl.c"
        var $13=($12); //@line 1622 "xmltok_impl.c"
        $iftmp_935=$13; //@line 1622 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1622 "xmltok_impl.c"
      case 3: // $bb2
        var $14=$ptr1_addr; //@line 1622 "xmltok_impl.c"
        var $15=$14; //@line 1622 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1622 "xmltok_impl.c"
        var $17=($16); //@line 1622 "xmltok_impl.c"
        var $18=$ptr1_addr; //@line 1622 "xmltok_impl.c"
        var $19=$18+1; //@line 1622 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1622 "xmltok_impl.c"
        var $21=($20); //@line 1622 "xmltok_impl.c"
        var $22=((($21)) & 255); //@line 1622 "xmltok_impl.c"
        var $23=((($17)) & 255); //@line 1622 "xmltok_impl.c"
        var $24=_unicode_byte_type($22, $23); //@line 1622 "xmltok_impl.c"
        $iftmp_935=$24; //@line 1622 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1622 "xmltok_impl.c"
      case 4: // $bb3
        var $25=__lastLabel__ == 3 ? $24 : ($13);
        if ($25 == 5) {
          __label__ = 9; break;
        }
        else if ($25 == 6) {
          __label__ = 7; break;
        }
        else if ($25 == 7) {
          __label__ = 5; break;
        }
        else if ($25 == 22) {
          __label__ = 13; break;
        }
        else if ($25 == 23) {
          __label__ = 13; break;
        }
        else if ($25 == 24) {
          __label__ = 13; break;
        }
        else if ($25 == 25) {
          __label__ = 13; break;
        }
        else if ($25 == 26) {
          __label__ = 13; break;
        }
        else if ($25 == 27) {
          __label__ = 13; break;
        }
        else if ($25 == 29) {
          __label__ = 13; break;
        }
        else {
        __label__ = 17; break;
        }
        
      case 5: // $bb4
        var $26=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 1627 "xmltok_impl.c"
        var $28=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 1627 "xmltok_impl.c"
        var $30=($27)!=($29); //@line 1627 "xmltok_impl.c"
        var $31=($30); //@line 1627 "xmltok_impl.c"
        var $32=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $33=$32+1; //@line 1627 "xmltok_impl.c"
        $ptr1_addr=$33; //@line 1627 "xmltok_impl.c"
        var $34=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $35=$34+1; //@line 1627 "xmltok_impl.c"
        $ptr2_addr=$35; //@line 1627 "xmltok_impl.c"
        var $toBool=($31)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1627 "xmltok_impl.c"
      case 6: // $bb5
        $0=0; //@line 1627 "xmltok_impl.c"
        __label__ = 23; break; //@line 1627 "xmltok_impl.c"
      case 7: // $bb6
        var $36=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 1627 "xmltok_impl.c"
        var $38=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 1627 "xmltok_impl.c"
        var $40=($37)!=($39); //@line 1627 "xmltok_impl.c"
        var $41=($40); //@line 1627 "xmltok_impl.c"
        var $42=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $43=$42+1; //@line 1627 "xmltok_impl.c"
        $ptr1_addr=$43; //@line 1627 "xmltok_impl.c"
        var $44=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $45=$44+1; //@line 1627 "xmltok_impl.c"
        $ptr2_addr=$45; //@line 1627 "xmltok_impl.c"
        var $toBool7=($41)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool7) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1627 "xmltok_impl.c"
      case 8: // $bb8
        $0=0; //@line 1627 "xmltok_impl.c"
        __label__ = 23; break; //@line 1627 "xmltok_impl.c"
      case 9: // $bb9
        var $46=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 1627 "xmltok_impl.c"
        var $48=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $49=HEAP[$48]; //@line 1627 "xmltok_impl.c"
        var $50=($47)!=($49); //@line 1627 "xmltok_impl.c"
        var $51=($50); //@line 1627 "xmltok_impl.c"
        var $52=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $53=$52+1; //@line 1627 "xmltok_impl.c"
        $ptr1_addr=$53; //@line 1627 "xmltok_impl.c"
        var $54=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $55=$54+1; //@line 1627 "xmltok_impl.c"
        $ptr2_addr=$55; //@line 1627 "xmltok_impl.c"
        var $toBool10=($51)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool10) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1627 "xmltok_impl.c"
      case 10: // $bb11
        $0=0; //@line 1627 "xmltok_impl.c"
        __label__ = 23; break; //@line 1627 "xmltok_impl.c"
      case 11: // $bb12
        var $56=$ptr1_addr; //@line 1630 "xmltok_impl.c"
        var $57=HEAP[$56]; //@line 1630 "xmltok_impl.c"
        var $58=$ptr2_addr; //@line 1630 "xmltok_impl.c"
        var $59=HEAP[$58]; //@line 1630 "xmltok_impl.c"
        var $60=($57)!=($59); //@line 1630 "xmltok_impl.c"
        var $61=($60); //@line 1630 "xmltok_impl.c"
        var $62=$ptr1_addr; //@line 1630 "xmltok_impl.c"
        var $63=$62+1; //@line 1630 "xmltok_impl.c"
        $ptr1_addr=$63; //@line 1630 "xmltok_impl.c"
        var $64=$ptr2_addr; //@line 1630 "xmltok_impl.c"
        var $65=$64+1; //@line 1630 "xmltok_impl.c"
        $ptr2_addr=$65; //@line 1630 "xmltok_impl.c"
        var $toBool13=($61)!=0; //@line 1630 "xmltok_impl.c"
        if ($toBool13) { __label__ = 12; break; } else { __label__ = 1; break; } //@line 1630 "xmltok_impl.c"
      case 12: // $bb14
        $0=0; //@line 1631 "xmltok_impl.c"
        __label__ = 23; break; //@line 1631 "xmltok_impl.c"
      case 13: // $bb16
        var $66=$ptr2_addr; //@line 1642 "xmltok_impl.c"
        var $67=HEAP[$66]; //@line 1642 "xmltok_impl.c"
        var $68=$ptr1_addr; //@line 1642 "xmltok_impl.c"
        var $69=HEAP[$68]; //@line 1642 "xmltok_impl.c"
        var $70=($67)!=($69); //@line 1642 "xmltok_impl.c"
        var $71=($70); //@line 1642 "xmltok_impl.c"
        var $72=$ptr2_addr; //@line 1642 "xmltok_impl.c"
        var $73=$72+1; //@line 1642 "xmltok_impl.c"
        $ptr2_addr=$73; //@line 1642 "xmltok_impl.c"
        var $74=$ptr1_addr; //@line 1642 "xmltok_impl.c"
        var $75=$74+1; //@line 1642 "xmltok_impl.c"
        $ptr1_addr=$75; //@line 1642 "xmltok_impl.c"
        var $toBool17=($71)!=0; //@line 1642 "xmltok_impl.c"
        if ($toBool17) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1642 "xmltok_impl.c"
      case 14: // $bb18
        $0=0; //@line 1643 "xmltok_impl.c"
        __label__ = 23; break; //@line 1643 "xmltok_impl.c"
      case 15: // $bb19
        var $76=$ptr2_addr; //@line 1645 "xmltok_impl.c"
        var $77=HEAP[$76]; //@line 1645 "xmltok_impl.c"
        var $78=$ptr1_addr; //@line 1645 "xmltok_impl.c"
        var $79=HEAP[$78]; //@line 1645 "xmltok_impl.c"
        var $80=($77)!=($79); //@line 1645 "xmltok_impl.c"
        var $81=($80); //@line 1645 "xmltok_impl.c"
        var $82=$ptr2_addr; //@line 1645 "xmltok_impl.c"
        var $83=$82+1; //@line 1645 "xmltok_impl.c"
        $ptr2_addr=$83; //@line 1645 "xmltok_impl.c"
        var $84=$ptr1_addr; //@line 1645 "xmltok_impl.c"
        var $85=$84+1; //@line 1645 "xmltok_impl.c"
        $ptr1_addr=$85; //@line 1645 "xmltok_impl.c"
        var $toBool20=($81)!=0; //@line 1645 "xmltok_impl.c"
        if ($toBool20) { __label__ = 16; break; } else { __label__ = 1; break; } //@line 1645 "xmltok_impl.c"
      case 16: // $bb21
        $0=0; //@line 1646 "xmltok_impl.c"
        __label__ = 23; break; //@line 1646 "xmltok_impl.c"
      case 17: // $bb23
        var $86=$ptr2_addr; //@line 1660 "xmltok_impl.c"
        var $87=$86+1; //@line 1660 "xmltok_impl.c"
        var $88=HEAP[$87]; //@line 1660 "xmltok_impl.c"
        var $89=($88)==0; //@line 1660 "xmltok_impl.c"
        if ($89) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1660 "xmltok_impl.c"
      case 18: // $bb24
        var $90=$enc_addr; //@line 1660 "xmltok_impl.c"
        var $91=$90; //@line 1660 "xmltok_impl.c"
        var $92=$ptr2_addr; //@line 1660 "xmltok_impl.c"
        var $93=HEAP[$92]; //@line 1660 "xmltok_impl.c"
        var $94=($93); //@line 1660 "xmltok_impl.c"
        var $95=$91+76; //@line 1660 "xmltok_impl.c"
        var $96=$95+$94; //@line 1660 "xmltok_impl.c"
        var $97=HEAP[$96]; //@line 1660 "xmltok_impl.c"
        var $98=($97); //@line 1660 "xmltok_impl.c"
        $iftmp_937=$98; //@line 1660 "xmltok_impl.c"
        __lastLabel__ = 18; __label__ = 20; break; //@line 1660 "xmltok_impl.c"
      case 19: // $bb25
        var $99=$ptr2_addr; //@line 1660 "xmltok_impl.c"
        var $100=$99; //@line 1660 "xmltok_impl.c"
        var $101=HEAP[$100]; //@line 1660 "xmltok_impl.c"
        var $102=($101); //@line 1660 "xmltok_impl.c"
        var $103=$ptr2_addr; //@line 1660 "xmltok_impl.c"
        var $104=$103+1; //@line 1660 "xmltok_impl.c"
        var $105=HEAP[$104]; //@line 1660 "xmltok_impl.c"
        var $106=($105); //@line 1660 "xmltok_impl.c"
        var $107=((($106)) & 255); //@line 1660 "xmltok_impl.c"
        var $108=((($102)) & 255); //@line 1660 "xmltok_impl.c"
        var $109=_unicode_byte_type($107, $108); //@line 1660 "xmltok_impl.c"
        $iftmp_937=$109; //@line 1660 "xmltok_impl.c"
        __lastLabel__ = 19; __label__ = 20; break; //@line 1660 "xmltok_impl.c"
      case 20: // $bb26
        var $110=__lastLabel__ == 19 ? $109 : ($98);
        if ($110 == 5) {
          __label__ = 21; break;
        }
        else if ($110 == 6) {
          __label__ = 21; break;
        }
        else if ($110 == 7) {
          __label__ = 21; break;
        }
        else if ($110 == 22) {
          __label__ = 21; break;
        }
        else if ($110 == 23) {
          __label__ = 21; break;
        }
        else if ($110 == 24) {
          __label__ = 21; break;
        }
        else if ($110 == 25) {
          __label__ = 21; break;
        }
        else if ($110 == 26) {
          __label__ = 21; break;
        }
        else if ($110 == 27) {
          __label__ = 21; break;
        }
        else if ($110 == 29) {
          __label__ = 21; break;
        }
        else {
        __label__ = 22; break;
        }
        
      case 21: // $bb27
        $0=0; //@line 1673 "xmltok_impl.c"
        __label__ = 23; break; //@line 1673 "xmltok_impl.c"
      case 22: // $bb28
        $0=1; //@line 1675 "xmltok_impl.c"
        __label__ = 23; break; //@line 1675 "xmltok_impl.c"
      case 23: // $bb30
        var $111=$0; //@line 1627 "xmltok_impl.c"
        $retval=$111; //@line 1627 "xmltok_impl.c"
        var $retval31=$retval; //@line 1627 "xmltok_impl.c"
        ;
        return $retval31; //@line 1627 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_nameMatchesAscii($enc, $ptr1, $end1, $ptr2) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr1_addr;
        var $end1_addr;
        var $ptr2_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr1_addr=$ptr1;
        $end1_addr=$end1;
        $ptr2_addr=$ptr2;
        __label__ = 7; break; //@line 1686 "xmltok_impl.c"
      case 1: // $bb
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1687 "xmltok_impl.c"
      case 2: // $bb1
        $0=0; //@line 1688 "xmltok_impl.c"
        __label__ = 9; break; //@line 1688 "xmltok_impl.c"
      case 3: // $bb2
        var $1=$ptr1_addr; //@line 1689 "xmltok_impl.c"
        var $2=$1+1; //@line 1689 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 1689 "xmltok_impl.c"
        var $4=($3)!=0; //@line 1689 "xmltok_impl.c"
        if ($4) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 1689 "xmltok_impl.c"
      case 4: // $bb3
        var $5=$ptr1_addr; //@line 1689 "xmltok_impl.c"
        var $6=$5; //@line 1689 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1689 "xmltok_impl.c"
        var $8=$ptr2_addr; //@line 1689 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1689 "xmltok_impl.c"
        var $10=($7)!=($9); //@line 1689 "xmltok_impl.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1689 "xmltok_impl.c"
      case 5: // $bb4
        $0=0; //@line 1690 "xmltok_impl.c"
        __label__ = 9; break; //@line 1690 "xmltok_impl.c"
      case 6: // $bb5
        var $11=$ptr1_addr; //@line 1686 "xmltok_impl.c"
        var $12=$11+2; //@line 1686 "xmltok_impl.c"
        $ptr1_addr=$12; //@line 1686 "xmltok_impl.c"
        var $13=$ptr2_addr; //@line 1686 "xmltok_impl.c"
        var $14=$13+1; //@line 1686 "xmltok_impl.c"
        $ptr2_addr=$14; //@line 1686 "xmltok_impl.c"
        __label__ = 7; break; //@line 1686 "xmltok_impl.c"
      case 7: // $bb6
        var $15=$ptr2_addr; //@line 1686 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1686 "xmltok_impl.c"
        var $17=($16)!=0; //@line 1686 "xmltok_impl.c"
        var $18=$ptr1_addr; //@line 1687 "xmltok_impl.c"
        var $19=$end1_addr; //@line 1687 "xmltok_impl.c"
        var $20=($18)==($19); //@line 1687 "xmltok_impl.c"
        if ($17) { __label__ = 1; break; } else { __label__ = 8; break; } //@line 1686 "xmltok_impl.c"
      case 8: // $bb7
        var $21=($20); //@line 1692 "xmltok_impl.c"
        $0=$21; //@line 1692 "xmltok_impl.c"
        __label__ = 9; break; //@line 1692 "xmltok_impl.c"
      case 9: // $bb8
        var $22=$0; //@line 1688 "xmltok_impl.c"
        $retval=$22; //@line 1688 "xmltok_impl.c"
        var $retval9=$retval; //@line 1688 "xmltok_impl.c"
        ;
        return $retval9; //@line 1688 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_nameLength($enc, $ptr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $retval;
        var $0;
        var $iftmp_939;
        var $start;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        var $1=$ptr_addr; //@line 1698 "xmltok_impl.c"
        $start=$1; //@line 1698 "xmltok_impl.c"
        __label__ = 1; break; //@line 1698 "xmltok_impl.c"
      case 1: // $bb
        var $2=$ptr_addr; //@line 1700 "xmltok_impl.c"
        var $3=$2+1; //@line 1700 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 1700 "xmltok_impl.c"
        var $5=($4)==0; //@line 1700 "xmltok_impl.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1700 "xmltok_impl.c"
      case 2: // $bb1
        var $6=$enc_addr; //@line 1700 "xmltok_impl.c"
        var $7=$6; //@line 1700 "xmltok_impl.c"
        var $8=$ptr_addr; //@line 1700 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1700 "xmltok_impl.c"
        var $10=($9); //@line 1700 "xmltok_impl.c"
        var $11=$7+76; //@line 1700 "xmltok_impl.c"
        var $12=$11+$10; //@line 1700 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1700 "xmltok_impl.c"
        var $14=($13); //@line 1700 "xmltok_impl.c"
        $iftmp_939=$14; //@line 1700 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1700 "xmltok_impl.c"
      case 3: // $bb2
        var $15=$ptr_addr; //@line 1700 "xmltok_impl.c"
        var $16=$15; //@line 1700 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 1700 "xmltok_impl.c"
        var $18=($17); //@line 1700 "xmltok_impl.c"
        var $19=$ptr_addr; //@line 1700 "xmltok_impl.c"
        var $20=$19+1; //@line 1700 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1700 "xmltok_impl.c"
        var $22=($21); //@line 1700 "xmltok_impl.c"
        var $23=((($22)) & 255); //@line 1700 "xmltok_impl.c"
        var $24=((($18)) & 255); //@line 1700 "xmltok_impl.c"
        var $25=_unicode_byte_type($23, $24); //@line 1700 "xmltok_impl.c"
        $iftmp_939=$25; //@line 1700 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1700 "xmltok_impl.c"
      case 4: // $bb3
        var $26=__lastLabel__ == 3 ? $25 : ($14);
        if ($26 == 5) {
          __label__ = 5; break;
        }
        else if ($26 == 6) {
          __label__ = 6; break;
        }
        else if ($26 == 7) {
          __label__ = 7; break;
        }
        else if ($26 == 22) {
          __label__ = 8; break;
        }
        else if ($26 == 23) {
          __label__ = 8; break;
        }
        else if ($26 == 24) {
          __label__ = 8; break;
        }
        else if ($26 == 25) {
          __label__ = 8; break;
        }
        else if ($26 == 26) {
          __label__ = 8; break;
        }
        else if ($26 == 27) {
          __label__ = 8; break;
        }
        else if ($26 == 29) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 5: // $bb4
        var $27=$ptr_addr; //@line 1703 "xmltok_impl.c"
        var $28=$27+2; //@line 1703 "xmltok_impl.c"
        $ptr_addr=$28; //@line 1703 "xmltok_impl.c"
        __label__ = 1; break; //@line 1703 "xmltok_impl.c"
      case 6: // $bb5
        var $29=$ptr_addr; //@line 1703 "xmltok_impl.c"
        var $30=$29+3; //@line 1703 "xmltok_impl.c"
        $ptr_addr=$30; //@line 1703 "xmltok_impl.c"
        __label__ = 1; break; //@line 1703 "xmltok_impl.c"
      case 7: // $bb6
        var $31=$ptr_addr; //@line 1703 "xmltok_impl.c"
        var $32=$31+4; //@line 1703 "xmltok_impl.c"
        $ptr_addr=$32; //@line 1703 "xmltok_impl.c"
        __label__ = 1; break; //@line 1703 "xmltok_impl.c"
      case 8: // $bb7
        var $33=$ptr_addr; //@line 1714 "xmltok_impl.c"
        var $34=$33+2; //@line 1714 "xmltok_impl.c"
        $ptr_addr=$34; //@line 1714 "xmltok_impl.c"
        __label__ = 1; break; //@line 1714 "xmltok_impl.c"
      case 9: // $bb8
        var $35=$ptr_addr; //@line 1717 "xmltok_impl.c"
        var $36=($35); //@line 1717 "xmltok_impl.c"
        var $37=$start; //@line 1717 "xmltok_impl.c"
        var $38=($37); //@line 1717 "xmltok_impl.c"
        var $39=($36) - ($38); //@line 1717 "xmltok_impl.c"
        $0=$39; //@line 1717 "xmltok_impl.c"
        var $40=$0; //@line 1717 "xmltok_impl.c"
        $retval=$40; //@line 1717 "xmltok_impl.c"
        var $retval10=$retval; //@line 1717 "xmltok_impl.c"
        ;
        return $retval10; //@line 1717 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_skipS($enc, $ptr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $retval;
        var $0;
        var $iftmp_943;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        __label__ = 1; break; //@line 1724 "xmltok.c"
      case 1: // $bb
        var $1=$ptr_addr; //@line 1726 "xmltok_impl.c"
        var $2=$1+1; //@line 1726 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 1726 "xmltok_impl.c"
        var $4=($3)==0; //@line 1726 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1726 "xmltok_impl.c"
      case 2: // $bb1
        var $5=$enc_addr; //@line 1726 "xmltok_impl.c"
        var $6=$5; //@line 1726 "xmltok_impl.c"
        var $7=$ptr_addr; //@line 1726 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1726 "xmltok_impl.c"
        var $9=($8); //@line 1726 "xmltok_impl.c"
        var $10=$6+76; //@line 1726 "xmltok_impl.c"
        var $11=$10+$9; //@line 1726 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1726 "xmltok_impl.c"
        var $13=($12); //@line 1726 "xmltok_impl.c"
        $iftmp_943=$13; //@line 1726 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1726 "xmltok_impl.c"
      case 3: // $bb2
        var $14=$ptr_addr; //@line 1726 "xmltok_impl.c"
        var $15=$14; //@line 1726 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1726 "xmltok_impl.c"
        var $17=($16); //@line 1726 "xmltok_impl.c"
        var $18=$ptr_addr; //@line 1726 "xmltok_impl.c"
        var $19=$18+1; //@line 1726 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1726 "xmltok_impl.c"
        var $21=($20); //@line 1726 "xmltok_impl.c"
        var $22=((($21)) & 255); //@line 1726 "xmltok_impl.c"
        var $23=((($17)) & 255); //@line 1726 "xmltok_impl.c"
        var $24=_unicode_byte_type($22, $23); //@line 1726 "xmltok_impl.c"
        $iftmp_943=$24; //@line 1726 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1726 "xmltok_impl.c"
      case 4: // $bb3
        var $25=__lastLabel__ == 3 ? $24 : ($13);
        if ($25 == 9) {
          __label__ = 5; break;
        }
        else if ($25 == 10) {
          __label__ = 5; break;
        }
        else if ($25 == 21) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 5: // $bb4
        var $26=$ptr_addr; //@line 1730 "xmltok_impl.c"
        var $27=$26+2; //@line 1730 "xmltok_impl.c"
        $ptr_addr=$27; //@line 1730 "xmltok_impl.c"
        __label__ = 1; break; //@line 1730 "xmltok_impl.c"
      case 6: // $bb5
        var $28=$ptr_addr; //@line 1733 "xmltok_impl.c"
        $0=$28; //@line 1733 "xmltok_impl.c"
        var $29=$0; //@line 1733 "xmltok_impl.c"
        $retval=$29; //@line 1733 "xmltok_impl.c"
        var $retval6=$retval; //@line 1733 "xmltok_impl.c"
        ;
        return $retval6; //@line 1733 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_updatePosition($enc, $ptr, $end, $pos) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $pos_addr;
        var $iftmp_947;
        var $iftmp_945;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $pos_addr=$pos;
        var $0=$ptr_addr; //@line 1744 "xmltok_impl.c"
        var $1=$end_addr; //@line 1744 "xmltok_impl.c"
        var $2=($0) < ($1); //@line 1744 "xmltok_impl.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 18; break; } //@line 1744 "xmltok_impl.c"
      case 1: // $bb
        var $3=$ptr_addr; //@line 1745 "xmltok_impl.c"
        var $4=$3+1; //@line 1745 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1745 "xmltok_impl.c"
        var $6=($5)==0; //@line 1745 "xmltok_impl.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1745 "xmltok_impl.c"
      case 2: // $bb1
        var $7=$enc_addr; //@line 1745 "xmltok_impl.c"
        var $8=$7; //@line 1745 "xmltok_impl.c"
        var $9=$ptr_addr; //@line 1745 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1745 "xmltok_impl.c"
        var $11=($10); //@line 1745 "xmltok_impl.c"
        var $12=$8+76; //@line 1745 "xmltok_impl.c"
        var $13=$12+$11; //@line 1745 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 1745 "xmltok_impl.c"
        var $15=($14); //@line 1745 "xmltok_impl.c"
        $iftmp_945=$15; //@line 1745 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1745 "xmltok_impl.c"
      case 3: // $bb2
        var $16=$ptr_addr; //@line 1745 "xmltok_impl.c"
        var $17=$16; //@line 1745 "xmltok_impl.c"
        var $18=HEAP[$17]; //@line 1745 "xmltok_impl.c"
        var $19=($18); //@line 1745 "xmltok_impl.c"
        var $20=$ptr_addr; //@line 1745 "xmltok_impl.c"
        var $21=$20+1; //@line 1745 "xmltok_impl.c"
        var $22=HEAP[$21]; //@line 1745 "xmltok_impl.c"
        var $23=($22); //@line 1745 "xmltok_impl.c"
        var $24=((($23)) & 255); //@line 1745 "xmltok_impl.c"
        var $25=((($19)) & 255); //@line 1745 "xmltok_impl.c"
        var $26=_unicode_byte_type($24, $25); //@line 1745 "xmltok_impl.c"
        $iftmp_945=$26; //@line 1745 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1745 "xmltok_impl.c"
      case 4: // $bb3
        var $27=__lastLabel__ == 3 ? $26 : ($15);
        if ($27 == 5) {
          __label__ = 5; break;
        }
        else if ($27 == 6) {
          __label__ = 6; break;
        }
        else if ($27 == 7) {
          __label__ = 7; break;
        }
        else if ($27 == 9) {
          __label__ = 9; break;
        }
        else if ($27 == 10) {
          __label__ = 8; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 5: // $bb4
        var $28=$ptr_addr; //@line 1750 "xmltok_impl.c"
        var $29=$28+2; //@line 1750 "xmltok_impl.c"
        $ptr_addr=$29; //@line 1750 "xmltok_impl.c"
        __label__ = 17; break; //@line 1750 "xmltok_impl.c"
      case 6: // $bb5
        var $30=$ptr_addr; //@line 1750 "xmltok_impl.c"
        var $31=$30+3; //@line 1750 "xmltok_impl.c"
        $ptr_addr=$31; //@line 1750 "xmltok_impl.c"
        __label__ = 17; break; //@line 1750 "xmltok_impl.c"
      case 7: // $bb6
        var $32=$ptr_addr; //@line 1750 "xmltok_impl.c"
        var $33=$32+4; //@line 1750 "xmltok_impl.c"
        $ptr_addr=$33; //@line 1750 "xmltok_impl.c"
        __label__ = 17; break; //@line 1750 "xmltok_impl.c"
      case 8: // $bb7
        var $34=$pos_addr; //@line 1753 "xmltok_impl.c"
        var $35=$34+4; //@line 1753 "xmltok_impl.c"
        HEAP[$35]=-1; //@line 1753 "xmltok_impl.c"
        var $36=$pos_addr; //@line 1754 "xmltok_impl.c"
        var $37=$36; //@line 1754 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 1754 "xmltok_impl.c"
        var $39=($38) + 1; //@line 1754 "xmltok_impl.c"
        var $40=$pos_addr; //@line 1754 "xmltok_impl.c"
        var $41=$40; //@line 1754 "xmltok_impl.c"
        HEAP[$41]=$39; //@line 1754 "xmltok_impl.c"
        var $42=$ptr_addr; //@line 1755 "xmltok_impl.c"
        var $43=$42+2; //@line 1755 "xmltok_impl.c"
        $ptr_addr=$43; //@line 1755 "xmltok_impl.c"
        __label__ = 17; break; //@line 1755 "xmltok_impl.c"
      case 9: // $bb8
        var $44=$pos_addr; //@line 1758 "xmltok_impl.c"
        var $45=$44; //@line 1758 "xmltok_impl.c"
        var $46=HEAP[$45]; //@line 1758 "xmltok_impl.c"
        var $47=($46) + 1; //@line 1758 "xmltok_impl.c"
        var $48=$pos_addr; //@line 1758 "xmltok_impl.c"
        var $49=$48; //@line 1758 "xmltok_impl.c"
        HEAP[$49]=$47; //@line 1758 "xmltok_impl.c"
        var $50=$ptr_addr; //@line 1759 "xmltok_impl.c"
        var $51=$50+2; //@line 1759 "xmltok_impl.c"
        $ptr_addr=$51; //@line 1759 "xmltok_impl.c"
        var $52=$ptr_addr; //@line 1760 "xmltok_impl.c"
        var $53=$end_addr; //@line 1760 "xmltok_impl.c"
        var $54=($52)!=($53); //@line 1760 "xmltok_impl.c"
        if ($54) { __label__ = 10; break; } else { __label__ = 15; break; } //@line 1760 "xmltok_impl.c"
      case 10: // $bb9
        var $55=$ptr_addr; //@line 1760 "xmltok_impl.c"
        var $56=$55+1; //@line 1760 "xmltok_impl.c"
        var $57=HEAP[$56]; //@line 1760 "xmltok_impl.c"
        var $58=($57)==0; //@line 1760 "xmltok_impl.c"
        if ($58) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1760 "xmltok_impl.c"
      case 11: // $bb10
        var $59=$enc_addr; //@line 1760 "xmltok_impl.c"
        var $60=$59; //@line 1760 "xmltok_impl.c"
        var $61=$ptr_addr; //@line 1760 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 1760 "xmltok_impl.c"
        var $63=($62); //@line 1760 "xmltok_impl.c"
        var $64=$60+76; //@line 1760 "xmltok_impl.c"
        var $65=$64+$63; //@line 1760 "xmltok_impl.c"
        var $66=HEAP[$65]; //@line 1760 "xmltok_impl.c"
        var $67=($66)==10; //@line 1760 "xmltok_impl.c"
        var $68=($67); //@line 1760 "xmltok_impl.c"
        $iftmp_947=$68; //@line 1760 "xmltok_impl.c"
        __lastLabel__ = 11; __label__ = 13; break; //@line 1760 "xmltok_impl.c"
      case 12: // $bb11
        var $69=$ptr_addr; //@line 1760 "xmltok_impl.c"
        var $70=$69; //@line 1760 "xmltok_impl.c"
        var $71=HEAP[$70]; //@line 1760 "xmltok_impl.c"
        var $72=($71); //@line 1760 "xmltok_impl.c"
        var $73=$ptr_addr; //@line 1760 "xmltok_impl.c"
        var $74=$73+1; //@line 1760 "xmltok_impl.c"
        var $75=HEAP[$74]; //@line 1760 "xmltok_impl.c"
        var $76=($75); //@line 1760 "xmltok_impl.c"
        var $77=((($76)) & 255); //@line 1760 "xmltok_impl.c"
        var $78=((($72)) & 255); //@line 1760 "xmltok_impl.c"
        var $79=_unicode_byte_type($77, $78); //@line 1760 "xmltok_impl.c"
        var $80=($79)==10; //@line 1760 "xmltok_impl.c"
        var $81=($80); //@line 1760 "xmltok_impl.c"
        $iftmp_947=$81; //@line 1760 "xmltok_impl.c"
        __lastLabel__ = 12; __label__ = 13; break; //@line 1760 "xmltok_impl.c"
      case 13: // $bb12
        var $82=__lastLabel__ == 12 ? $81 : ($68);
        var $toBool=($82)!=0; //@line 1760 "xmltok_impl.c"
        if ($toBool) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1760 "xmltok_impl.c"
      case 14: // $bb13
        var $83=$ptr_addr; //@line 1761 "xmltok_impl.c"
        var $84=$83+2; //@line 1761 "xmltok_impl.c"
        $ptr_addr=$84; //@line 1761 "xmltok_impl.c"
        __label__ = 15; break; //@line 1761 "xmltok_impl.c"
      case 15: // $bb14
        var $85=$pos_addr; //@line 1762 "xmltok_impl.c"
        var $86=$85+4; //@line 1762 "xmltok_impl.c"
        HEAP[$86]=-1; //@line 1762 "xmltok_impl.c"
        __label__ = 17; break; //@line 1762 "xmltok_impl.c"
      case 16: // $bb15
        var $87=$ptr_addr; //@line 1765 "xmltok_impl.c"
        var $88=$87+2; //@line 1765 "xmltok_impl.c"
        $ptr_addr=$88; //@line 1765 "xmltok_impl.c"
        __label__ = 17; break; //@line 1765 "xmltok_impl.c"
      case 17: // $bb16
        var $89=$pos_addr; //@line 1768 "xmltok_impl.c"
        var $90=$89+4; //@line 1768 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 1768 "xmltok_impl.c"
        var $92=($91) + 1; //@line 1768 "xmltok_impl.c"
        var $93=$pos_addr; //@line 1768 "xmltok_impl.c"
        var $94=$93+4; //@line 1768 "xmltok_impl.c"
        HEAP[$94]=$92; //@line 1768 "xmltok_impl.c"
        var $95=$ptr_addr; //@line 1744 "xmltok_impl.c"
        var $96=$end_addr; //@line 1744 "xmltok_impl.c"
        var $97=($95) < ($96); //@line 1744 "xmltok_impl.c"
        if ($97) { __label__ = 1; break; } else { __label__ = 18; break; } //@line 1744 "xmltok_impl.c"
      case 18: // $return
        ;
        return; //@line 1770 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanComment($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_949;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 93 "xmltok_impl.c"
        var $2=$end_addr; //@line 93 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 93 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 31; break; } //@line 93 "xmltok_impl.c"
      case 1: // $bb
        var $4=$ptr_addr; //@line 94 "xmltok_impl.c"
        var $5=$4; //@line 94 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 94 "xmltok_impl.c"
        var $7=($6)!=0; //@line 94 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 94 "xmltok_impl.c"
      case 2: // $bb1
        var $8=$ptr_addr; //@line 94 "xmltok_impl.c"
        var $9=$8+1; //@line 94 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 94 "xmltok_impl.c"
        var $11=($10)!=45; //@line 94 "xmltok_impl.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 94 "xmltok_impl.c"
      case 3: // $bb2
        var $12=$nextTokPtr_addr; //@line 95 "xmltok_impl.c"
        var $13=$ptr_addr; //@line 95 "xmltok_impl.c"
        HEAP[$12]=$13; //@line 95 "xmltok_impl.c"
        $0=0; //@line 96 "xmltok_impl.c"
        __label__ = 32; break; //@line 96 "xmltok_impl.c"
      case 4: // $bb3
        var $14=$ptr_addr; //@line 98 "xmltok_impl.c"
        var $15=$14+2; //@line 98 "xmltok_impl.c"
        $ptr_addr=$15; //@line 98 "xmltok_impl.c"
        __label__ = 30; break; //@line 98 "xmltok_impl.c"
      case 5: // $bb4
        var $16=$ptr_addr; //@line 100 "xmltok_impl.c"
        var $17=$16; //@line 100 "xmltok_impl.c"
        var $18=HEAP[$17]; //@line 100 "xmltok_impl.c"
        var $19=($18)==0; //@line 100 "xmltok_impl.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 100 "xmltok_impl.c"
      case 6: // $bb5
        var $20=$enc_addr; //@line 100 "xmltok_impl.c"
        var $21=$20; //@line 100 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 100 "xmltok_impl.c"
        var $23=$22+1; //@line 100 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 100 "xmltok_impl.c"
        var $25=($24); //@line 100 "xmltok_impl.c"
        var $26=$21+76; //@line 100 "xmltok_impl.c"
        var $27=$26+$25; //@line 100 "xmltok_impl.c"
        var $28=HEAP[$27]; //@line 100 "xmltok_impl.c"
        var $29=($28); //@line 100 "xmltok_impl.c"
        $iftmp_949=$29; //@line 100 "xmltok_impl.c"
        __lastLabel__ = 6; __label__ = 8; break; //@line 100 "xmltok_impl.c"
      case 7: // $bb6
        var $30=$ptr_addr; //@line 100 "xmltok_impl.c"
        var $31=$30+1; //@line 100 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 100 "xmltok_impl.c"
        var $33=($32); //@line 100 "xmltok_impl.c"
        var $34=$ptr_addr; //@line 100 "xmltok_impl.c"
        var $35=$34; //@line 100 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 100 "xmltok_impl.c"
        var $37=($36); //@line 100 "xmltok_impl.c"
        var $38=((($37)) & 255); //@line 100 "xmltok_impl.c"
        var $39=((($33)) & 255); //@line 100 "xmltok_impl.c"
        var $40=_unicode_byte_type($38, $39); //@line 100 "xmltok_impl.c"
        $iftmp_949=$40; //@line 100 "xmltok_impl.c"
        __lastLabel__ = 7; __label__ = 8; break; //@line 100 "xmltok_impl.c"
      case 8: // $bb7
        var $41=__lastLabel__ == 7 ? $40 : ($29);
        if ($41 == 0) {
          __label__ = 18; break;
        }
        else if ($41 == 1) {
          __label__ = 18; break;
        }
        else if ($41 == 5) {
          __label__ = 9; break;
        }
        else if ($41 == 6) {
          __label__ = 12; break;
        }
        else if ($41 == 7) {
          __label__ = 15; break;
        }
        else if ($41 == 8) {
          __label__ = 18; break;
        }
        else if ($41 == 27) {
          __label__ = 19; break;
        }
        else {
        __label__ = 29; break;
        }
        
      case 9: // $bb8
        var $42=$end_addr; //@line 101 "xmltok_impl.c"
        var $43=($42); //@line 101 "xmltok_impl.c"
        var $44=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $45=($44); //@line 101 "xmltok_impl.c"
        var $46=($43) - ($45); //@line 101 "xmltok_impl.c"
        var $47=($46) <= 1; //@line 101 "xmltok_impl.c"
        if ($47) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 101 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 11: // $bb10
        var $48=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $49=$48+2; //@line 101 "xmltok_impl.c"
        $ptr_addr=$49; //@line 101 "xmltok_impl.c"
        __label__ = 30; break; //@line 101 "xmltok_impl.c"
      case 12: // $bb11
        var $50=$end_addr; //@line 101 "xmltok_impl.c"
        var $51=($50); //@line 101 "xmltok_impl.c"
        var $52=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $53=($52); //@line 101 "xmltok_impl.c"
        var $54=($51) - ($53); //@line 101 "xmltok_impl.c"
        var $55=($54) <= 2; //@line 101 "xmltok_impl.c"
        if ($55) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 101 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 14: // $bb13
        var $56=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $57=$56+3; //@line 101 "xmltok_impl.c"
        $ptr_addr=$57; //@line 101 "xmltok_impl.c"
        __label__ = 30; break; //@line 101 "xmltok_impl.c"
      case 15: // $bb14
        var $58=$end_addr; //@line 101 "xmltok_impl.c"
        var $59=($58); //@line 101 "xmltok_impl.c"
        var $60=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $61=($60); //@line 101 "xmltok_impl.c"
        var $62=($59) - ($61); //@line 101 "xmltok_impl.c"
        var $63=($62) <= 3; //@line 101 "xmltok_impl.c"
        if ($63) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 101 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 17: // $bb16
        var $64=$ptr_addr; //@line 101 "xmltok_impl.c"
        var $65=$64+4; //@line 101 "xmltok_impl.c"
        $ptr_addr=$65; //@line 101 "xmltok_impl.c"
        __label__ = 30; break; //@line 101 "xmltok_impl.c"
      case 18: // $bb17
        var $66=$nextTokPtr_addr; //@line 101 "xmltok_impl.c"
        var $67=$ptr_addr; //@line 101 "xmltok_impl.c"
        HEAP[$66]=$67; //@line 101 "xmltok_impl.c"
        $0=0; //@line 101 "xmltok_impl.c"
        __label__ = 32; break; //@line 101 "xmltok_impl.c"
      case 19: // $bb18
        var $68=$ptr_addr; //@line 103 "xmltok_impl.c"
        var $69=$68+2; //@line 103 "xmltok_impl.c"
        $ptr_addr=$69; //@line 103 "xmltok_impl.c"
        var $70=$ptr_addr; //@line 103 "xmltok_impl.c"
        var $71=$end_addr; //@line 103 "xmltok_impl.c"
        var $72=($70)==($71); //@line 103 "xmltok_impl.c"
        if ($72) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 103 "xmltok_impl.c"
      case 20: // $bb19
        $0=-1; //@line 104 "xmltok_impl.c"
        __label__ = 32; break; //@line 104 "xmltok_impl.c"
      case 21: // $bb20
        var $73=$ptr_addr; //@line 105 "xmltok_impl.c"
        var $74=$73; //@line 105 "xmltok_impl.c"
        var $75=HEAP[$74]; //@line 105 "xmltok_impl.c"
        var $76=($75)==0; //@line 105 "xmltok_impl.c"
        if ($76) { __label__ = 22; break; } else { __label__ = 30; break; } //@line 105 "xmltok_impl.c"
      case 22: // $bb21
        var $77=$ptr_addr; //@line 105 "xmltok_impl.c"
        var $78=$77+1; //@line 105 "xmltok_impl.c"
        var $79=HEAP[$78]; //@line 105 "xmltok_impl.c"
        var $80=($79)==45; //@line 105 "xmltok_impl.c"
        if ($80) { __label__ = 23; break; } else { __label__ = 30; break; } //@line 105 "xmltok_impl.c"
      case 23: // $bb22
        var $81=$ptr_addr; //@line 106 "xmltok_impl.c"
        var $82=$81+2; //@line 106 "xmltok_impl.c"
        $ptr_addr=$82; //@line 106 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 106 "xmltok_impl.c"
        var $84=$end_addr; //@line 106 "xmltok_impl.c"
        var $85=($83)==($84); //@line 106 "xmltok_impl.c"
        if ($85) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 106 "xmltok_impl.c"
      case 24: // $bb23
        $0=-1; //@line 107 "xmltok_impl.c"
        __label__ = 32; break; //@line 107 "xmltok_impl.c"
      case 25: // $bb24
        var $86=$ptr_addr; //@line 108 "xmltok_impl.c"
        var $87=$86; //@line 108 "xmltok_impl.c"
        var $88=HEAP[$87]; //@line 108 "xmltok_impl.c"
        var $89=($88)!=0; //@line 108 "xmltok_impl.c"
        if ($89) { __label__ = 27; break; } else { __label__ = 26; break; } //@line 108 "xmltok_impl.c"
      case 26: // $bb25
        var $90=$ptr_addr; //@line 108 "xmltok_impl.c"
        var $91=$90+1; //@line 108 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 108 "xmltok_impl.c"
        var $93=($92)!=62; //@line 108 "xmltok_impl.c"
        if ($93) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 108 "xmltok_impl.c"
      case 27: // $bb26
        var $94=$nextTokPtr_addr; //@line 109 "xmltok_impl.c"
        var $95=$ptr_addr; //@line 109 "xmltok_impl.c"
        HEAP[$94]=$95; //@line 109 "xmltok_impl.c"
        $0=0; //@line 110 "xmltok_impl.c"
        __label__ = 32; break; //@line 110 "xmltok_impl.c"
      case 28: // $bb27
        var $96=$ptr_addr; //@line 112 "xmltok_impl.c"
        var $97=$96+2; //@line 112 "xmltok_impl.c"
        var $98=$nextTokPtr_addr; //@line 112 "xmltok_impl.c"
        HEAP[$98]=$97; //@line 112 "xmltok_impl.c"
        $0=13; //@line 113 "xmltok_impl.c"
        __label__ = 32; break; //@line 113 "xmltok_impl.c"
      case 29: // $bb29
        var $99=$ptr_addr; //@line 117 "xmltok_impl.c"
        var $100=$99+2; //@line 117 "xmltok_impl.c"
        $ptr_addr=$100; //@line 117 "xmltok_impl.c"
        __label__ = 30; break; //@line 117 "xmltok_impl.c"
      case 30: // $bb30
        var $101=$ptr_addr; //@line 99 "xmltok_impl.c"
        var $102=$end_addr; //@line 99 "xmltok_impl.c"
        var $103=($101)!=($102); //@line 99 "xmltok_impl.c"
        if ($103) { __label__ = 5; break; } else { __label__ = 31; break; } //@line 99 "xmltok_impl.c"
      case 31: // $bb31
        $0=-1; //@line 122 "xmltok_impl.c"
        __label__ = 32; break; //@line 122 "xmltok_impl.c"
      case 32: // $bb32
        var $104=$0; //@line 96 "xmltok_impl.c"
        $retval=$104; //@line 96 "xmltok_impl.c"
        var $retval33=$retval; //@line 96 "xmltok_impl.c"
        ;
        return $retval33; //@line 96 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanDecl($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_961;
        var $iftmp_959;
        var $iftmp_957;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 131 "xmltok_impl.c"
        var $2=$end_addr; //@line 131 "xmltok_impl.c"
        var $3=($1)==($2); //@line 131 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 131 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 132 "xmltok_impl.c"
        __label__ = 26; break; //@line 132 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 133 "xmltok_impl.c"
        var $5=$4; //@line 133 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 133 "xmltok_impl.c"
        var $7=($6)==0; //@line 133 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 133 "xmltok_impl.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 133 "xmltok_impl.c"
        var $9=$8; //@line 133 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 133 "xmltok_impl.c"
        var $11=$10+1; //@line 133 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 133 "xmltok_impl.c"
        var $13=($12); //@line 133 "xmltok_impl.c"
        var $14=$9+76; //@line 133 "xmltok_impl.c"
        var $15=$14+$13; //@line 133 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 133 "xmltok_impl.c"
        var $17=($16); //@line 133 "xmltok_impl.c"
        $iftmp_957=$17; //@line 133 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 133 "xmltok_impl.c"
      case 4: // $bb3
        var $18=$ptr_addr; //@line 133 "xmltok_impl.c"
        var $19=$18+1; //@line 133 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 133 "xmltok_impl.c"
        var $21=($20); //@line 133 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 133 "xmltok_impl.c"
        var $23=$22; //@line 133 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 133 "xmltok_impl.c"
        var $25=($24); //@line 133 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 133 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 133 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 133 "xmltok_impl.c"
        $iftmp_957=$28; //@line 133 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 133 "xmltok_impl.c"
      case 5: // $bb4
        var $29=__lastLabel__ == 4 ? $28 : ($17);
        if ($29 == 20) {
          __label__ = 7; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 27) {
          __label__ = 6; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 6: // $bb5
        var $30=$ptr_addr; //@line 135 "xmltok_impl.c"
        var $31=$30+2; //@line 135 "xmltok_impl.c"
        var $32=$enc_addr; //@line 135 "xmltok_impl.c"
        var $33=$end_addr; //@line 135 "xmltok_impl.c"
        var $34=$nextTokPtr_addr; //@line 135 "xmltok_impl.c"
        var $35=_big2_scanComment($32, $31, $33, $34); //@line 135 "xmltok_impl.c"
        $0=$35; //@line 135 "xmltok_impl.c"
        __label__ = 26; break; //@line 135 "xmltok_impl.c"
      case 7: // $bb6
        var $36=$ptr_addr; //@line 137 "xmltok_impl.c"
        var $37=$36+2; //@line 137 "xmltok_impl.c"
        var $38=$nextTokPtr_addr; //@line 137 "xmltok_impl.c"
        HEAP[$38]=$37; //@line 137 "xmltok_impl.c"
        $0=33; //@line 138 "xmltok_impl.c"
        __label__ = 26; break; //@line 138 "xmltok_impl.c"
      case 8: // $bb7
        var $39=$ptr_addr; //@line 141 "xmltok_impl.c"
        var $40=$39+2; //@line 141 "xmltok_impl.c"
        $ptr_addr=$40; //@line 141 "xmltok_impl.c"
        __label__ = 24; break; //@line 141 "xmltok_impl.c"
      case 9: // $bb8
        var $41=$nextTokPtr_addr; //@line 144 "xmltok_impl.c"
        var $42=$ptr_addr; //@line 144 "xmltok_impl.c"
        HEAP[$41]=$42; //@line 144 "xmltok_impl.c"
        $0=0; //@line 145 "xmltok_impl.c"
        __label__ = 26; break; //@line 145 "xmltok_impl.c"
      case 10: // $bb9
        var $43=$ptr_addr; //@line 148 "xmltok_impl.c"
        var $44=$43; //@line 148 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 148 "xmltok_impl.c"
        var $46=($45)==0; //@line 148 "xmltok_impl.c"
        if ($46) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 148 "xmltok_impl.c"
      case 11: // $bb10
        var $47=$enc_addr; //@line 148 "xmltok_impl.c"
        var $48=$47; //@line 148 "xmltok_impl.c"
        var $49=$ptr_addr; //@line 148 "xmltok_impl.c"
        var $50=$49+1; //@line 148 "xmltok_impl.c"
        var $51=HEAP[$50]; //@line 148 "xmltok_impl.c"
        var $52=($51); //@line 148 "xmltok_impl.c"
        var $53=$48+76; //@line 148 "xmltok_impl.c"
        var $54=$53+$52; //@line 148 "xmltok_impl.c"
        var $55=HEAP[$54]; //@line 148 "xmltok_impl.c"
        var $56=($55); //@line 148 "xmltok_impl.c"
        $iftmp_959=$56; //@line 148 "xmltok_impl.c"
        __lastLabel__ = 11; __label__ = 13; break; //@line 148 "xmltok_impl.c"
      case 12: // $bb11
        var $57=$ptr_addr; //@line 148 "xmltok_impl.c"
        var $58=$57+1; //@line 148 "xmltok_impl.c"
        var $59=HEAP[$58]; //@line 148 "xmltok_impl.c"
        var $60=($59); //@line 148 "xmltok_impl.c"
        var $61=$ptr_addr; //@line 148 "xmltok_impl.c"
        var $62=$61; //@line 148 "xmltok_impl.c"
        var $63=HEAP[$62]; //@line 148 "xmltok_impl.c"
        var $64=($63); //@line 148 "xmltok_impl.c"
        var $65=((($64)) & 255); //@line 148 "xmltok_impl.c"
        var $66=((($60)) & 255); //@line 148 "xmltok_impl.c"
        var $67=_unicode_byte_type($65, $66); //@line 148 "xmltok_impl.c"
        $iftmp_959=$67; //@line 148 "xmltok_impl.c"
        __lastLabel__ = 12; __label__ = 13; break; //@line 148 "xmltok_impl.c"
      case 13: // $bb12
        var $68=__lastLabel__ == 12 ? $67 : ($56);
        if ($68 == 9) {
          __label__ = 21; break;
        }
        else if ($68 == 10) {
          __label__ = 21; break;
        }
        else if ($68 == 21) {
          __label__ = 21; break;
        }
        else if ($68 == 22) {
          __label__ = 22; break;
        }
        else if ($68 == 24) {
          __label__ = 22; break;
        }
        else if ($68 == 30) {
          __label__ = 14; break;
        }
        else {
        __label__ = 23; break;
        }
        
      case 14: // $bb13
        var $69=$ptr_addr; //@line 150 "xmltok_impl.c"
        var $70=$69+2; //@line 150 "xmltok_impl.c"
        var $71=$end_addr; //@line 150 "xmltok_impl.c"
        var $72=($70)==($71); //@line 150 "xmltok_impl.c"
        if ($72) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 150 "xmltok_impl.c"
      case 15: // $bb14
        $0=-1; //@line 151 "xmltok_impl.c"
        __label__ = 26; break; //@line 151 "xmltok_impl.c"
      case 16: // $bb15
        var $73=$ptr_addr; //@line 153 "xmltok_impl.c"
        var $74=$73+2; //@line 153 "xmltok_impl.c"
        var $75=$74; //@line 153 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 153 "xmltok_impl.c"
        var $77=($76)==0; //@line 153 "xmltok_impl.c"
        if ($77) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 153 "xmltok_impl.c"
      case 17: // $bb16
        var $78=$enc_addr; //@line 153 "xmltok_impl.c"
        var $79=$78; //@line 153 "xmltok_impl.c"
        var $80=$ptr_addr; //@line 153 "xmltok_impl.c"
        var $81=$80+2; //@line 153 "xmltok_impl.c"
        var $82=$81+1; //@line 153 "xmltok_impl.c"
        var $83=HEAP[$82]; //@line 153 "xmltok_impl.c"
        var $84=($83); //@line 153 "xmltok_impl.c"
        var $85=$79+76; //@line 153 "xmltok_impl.c"
        var $86=$85+$84; //@line 153 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 153 "xmltok_impl.c"
        var $88=($87); //@line 153 "xmltok_impl.c"
        $iftmp_961=$88; //@line 153 "xmltok_impl.c"
        __lastLabel__ = 17; __label__ = 19; break; //@line 153 "xmltok_impl.c"
      case 18: // $bb17
        var $89=$ptr_addr; //@line 153 "xmltok_impl.c"
        var $90=$89+2; //@line 153 "xmltok_impl.c"
        var $91=$90+1; //@line 153 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 153 "xmltok_impl.c"
        var $93=($92); //@line 153 "xmltok_impl.c"
        var $94=$ptr_addr; //@line 153 "xmltok_impl.c"
        var $95=$94+2; //@line 153 "xmltok_impl.c"
        var $96=$95; //@line 153 "xmltok_impl.c"
        var $97=HEAP[$96]; //@line 153 "xmltok_impl.c"
        var $98=($97); //@line 153 "xmltok_impl.c"
        var $99=((($98)) & 255); //@line 153 "xmltok_impl.c"
        var $100=((($93)) & 255); //@line 153 "xmltok_impl.c"
        var $101=_unicode_byte_type($99, $100); //@line 153 "xmltok_impl.c"
        $iftmp_961=$101; //@line 153 "xmltok_impl.c"
        __lastLabel__ = 18; __label__ = 19; break; //@line 153 "xmltok_impl.c"
      case 19: // $bb18
        var $102=__lastLabel__ == 18 ? $101 : ($88);
        if ($102 == 9) {
          __label__ = 20; break;
        }
        else if ($102 == 10) {
          __label__ = 20; break;
        }
        else if ($102 == 21) {
          __label__ = 20; break;
        }
        else if ($102 == 30) {
          __label__ = 20; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 20: // $bb19
        var $103=$nextTokPtr_addr; //@line 155 "xmltok_impl.c"
        var $104=$ptr_addr; //@line 155 "xmltok_impl.c"
        HEAP[$103]=$104; //@line 155 "xmltok_impl.c"
        $0=0; //@line 156 "xmltok_impl.c"
        __label__ = 26; break; //@line 156 "xmltok_impl.c"
      case 21: // $bb20
        var $105=$nextTokPtr_addr; //@line 160 "xmltok_impl.c"
        var $106=$ptr_addr; //@line 160 "xmltok_impl.c"
        HEAP[$105]=$106; //@line 160 "xmltok_impl.c"
        $0=16; //@line 161 "xmltok_impl.c"
        __label__ = 26; break; //@line 161 "xmltok_impl.c"
      case 22: // $bb21
        var $107=$ptr_addr; //@line 164 "xmltok_impl.c"
        var $108=$107+2; //@line 164 "xmltok_impl.c"
        $ptr_addr=$108; //@line 164 "xmltok_impl.c"
        __label__ = 24; break; //@line 164 "xmltok_impl.c"
      case 23: // $bb22
        var $109=$nextTokPtr_addr; //@line 167 "xmltok_impl.c"
        var $110=$ptr_addr; //@line 167 "xmltok_impl.c"
        HEAP[$109]=$110; //@line 167 "xmltok_impl.c"
        $0=0; //@line 168 "xmltok_impl.c"
        __label__ = 26; break; //@line 168 "xmltok_impl.c"
      case 24: // $bb23
        var $111=$ptr_addr; //@line 147 "xmltok_impl.c"
        var $112=$end_addr; //@line 147 "xmltok_impl.c"
        var $113=($111)!=($112); //@line 147 "xmltok_impl.c"
        if ($113) { __label__ = 10; break; } else { __label__ = 25; break; } //@line 147 "xmltok_impl.c"
      case 25: // $bb24
        $0=-1; //@line 171 "xmltok_impl.c"
        __label__ = 26; break; //@line 171 "xmltok_impl.c"
      case 26: // $bb25
        var $114=$0; //@line 132 "xmltok_impl.c"
        $retval=$114; //@line 132 "xmltok_impl.c"
        var $retval26=$retval; //@line 132 "xmltok_impl.c"
        ;
        return $retval26; //@line 132 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_checkPiTarget($enc, $ptr, $end, $tokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $tokPtr_addr;
        var $retval;
        var $iftmp_967;
        var $iftmp_966;
        var $iftmp_965;
        var $0;
        var $upper;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $tokPtr_addr=$tokPtr;
        $upper=0; //@line 178 "xmltok_impl.c"
        var $1=$tokPtr_addr; //@line 179 "xmltok_impl.c"
        HEAP[$1]=11; //@line 179 "xmltok_impl.c"
        var $2=$end_addr; //@line 180 "xmltok_impl.c"
        var $3=($2); //@line 180 "xmltok_impl.c"
        var $4=$ptr_addr; //@line 180 "xmltok_impl.c"
        var $5=($4); //@line 180 "xmltok_impl.c"
        var $6=($3) - ($5); //@line 180 "xmltok_impl.c"
        var $7=($6)!=6; //@line 180 "xmltok_impl.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 180 "xmltok_impl.c"
      case 1: // $bb
        $0=1; //@line 181 "xmltok_impl.c"
        __label__ = 20; break; //@line 181 "xmltok_impl.c"
      case 2: // $bb1
        var $8=$ptr_addr; //@line 182 "xmltok_impl.c"
        var $9=$8; //@line 182 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 182 "xmltok_impl.c"
        var $11=($10)==0; //@line 182 "xmltok_impl.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 182 "xmltok_impl.c"
      case 3: // $bb4_thread
        $iftmp_965=-1; //@line 182 "xmltok_impl.c"
        __label__ = 6; break;
      case 4: // $bb4
        var $12=$ptr_addr; //@line 182 "xmltok_impl.c"
        var $13=$12+1; //@line 182 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 182 "xmltok_impl.c"
        var $15=($14); //@line 182 "xmltok_impl.c"
        $iftmp_965=$15; //@line 182 "xmltok_impl.c"
        if ($15 == 88) {
          __label__ = 5; break;
        }
        else if ($15 == 120) {
          __label__ = 7; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 5: // $bb6
        $upper=1; //@line 186 "xmltok_impl.c"
        __label__ = 7; break; //@line 186 "xmltok_impl.c"
      case 6: // $bb7
        $0=1; //@line 189 "xmltok_impl.c"
        __label__ = 20; break; //@line 189 "xmltok_impl.c"
      case 7: // $bb8
        var $16=$ptr_addr; //@line 191 "xmltok_impl.c"
        var $17=$16+2; //@line 191 "xmltok_impl.c"
        $ptr_addr=$17; //@line 191 "xmltok_impl.c"
        var $18=$ptr_addr; //@line 192 "xmltok_impl.c"
        var $19=$18; //@line 192 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 192 "xmltok_impl.c"
        var $21=($20)==0; //@line 192 "xmltok_impl.c"
        if ($21) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 192 "xmltok_impl.c"
      case 8: // $bb11_thread
        $iftmp_966=-1; //@line 192 "xmltok_impl.c"
        __label__ = 11; break;
      case 9: // $bb11
        var $22=$ptr_addr; //@line 192 "xmltok_impl.c"
        var $23=$22+1; //@line 192 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 192 "xmltok_impl.c"
        var $25=($24); //@line 192 "xmltok_impl.c"
        $iftmp_966=$25; //@line 192 "xmltok_impl.c"
        if ($25 == 77) {
          __label__ = 10; break;
        }
        else if ($25 == 109) {
          __label__ = 12; break;
        }
        else {
        __label__ = 11; break;
        }
        
      case 10: // $bb13
        $upper=1; //@line 196 "xmltok_impl.c"
        __label__ = 12; break; //@line 196 "xmltok_impl.c"
      case 11: // $bb14
        $0=1; //@line 199 "xmltok_impl.c"
        __label__ = 20; break; //@line 199 "xmltok_impl.c"
      case 12: // $bb15
        var $26=$ptr_addr; //@line 201 "xmltok_impl.c"
        var $27=$26+2; //@line 201 "xmltok_impl.c"
        $ptr_addr=$27; //@line 201 "xmltok_impl.c"
        var $28=$ptr_addr; //@line 202 "xmltok_impl.c"
        var $29=$28; //@line 202 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 202 "xmltok_impl.c"
        var $31=($30)==0; //@line 202 "xmltok_impl.c"
        if ($31) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 202 "xmltok_impl.c"
      case 13: // $bb18_thread
        $iftmp_967=-1; //@line 202 "xmltok_impl.c"
        __label__ = 16; break;
      case 14: // $bb18
        var $32=$ptr_addr; //@line 202 "xmltok_impl.c"
        var $33=$32+1; //@line 202 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 202 "xmltok_impl.c"
        var $35=($34); //@line 202 "xmltok_impl.c"
        $iftmp_967=$35; //@line 202 "xmltok_impl.c"
        if ($35 == 76) {
          __label__ = 15; break;
        }
        else if ($35 == 108) {
          __label__ = 17; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 15: // $bb22_thread
        $upper=1; //@line 206 "xmltok_impl.c"
        __label__ = 18; break;
      case 16: // $bb21
        $0=1; //@line 209 "xmltok_impl.c"
        __label__ = 20; break; //@line 209 "xmltok_impl.c"
      case 17: // $bb22
        var $_pr=$upper;
        var $36=($_pr)!=0; //@line 211 "xmltok_impl.c"
        if ($36) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 211 "xmltok_impl.c"
      case 18: // $bb23
        $0=0; //@line 212 "xmltok_impl.c"
        __label__ = 20; break; //@line 212 "xmltok_impl.c"
      case 19: // $bb24
        var $37=$tokPtr_addr; //@line 213 "xmltok_impl.c"
        HEAP[$37]=12; //@line 213 "xmltok_impl.c"
        $0=1; //@line 214 "xmltok_impl.c"
        __label__ = 20; break; //@line 214 "xmltok_impl.c"
      case 20: // $bb25
        var $38=$0; //@line 181 "xmltok_impl.c"
        $retval=$38; //@line 181 "xmltok_impl.c"
        var $retval26=$retval; //@line 181 "xmltok_impl.c"
        ;
        return $retval26; //@line 181 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanPi($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_984;
        var $iftmp_976;
        var $iftmp_968;
        var $0;
        var $tok=__stackBase__;
        var $target;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 224 "xmltok_impl.c"
        $target=$1; //@line 224 "xmltok_impl.c"
        var $2=$ptr_addr; //@line 225 "xmltok_impl.c"
        var $3=$end_addr; //@line 225 "xmltok_impl.c"
        var $4=($2)==($3); //@line 225 "xmltok_impl.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 225 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 226 "xmltok_impl.c"
        __label__ = 70; break; //@line 226 "xmltok_impl.c"
      case 2: // $bb1
        var $5=$ptr_addr; //@line 227 "xmltok_impl.c"
        var $6=$5; //@line 227 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 227 "xmltok_impl.c"
        var $8=($7)==0; //@line 227 "xmltok_impl.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 227 "xmltok_impl.c"
      case 3: // $bb2
        var $9=$enc_addr; //@line 227 "xmltok_impl.c"
        var $10=$9; //@line 227 "xmltok_impl.c"
        var $11=$ptr_addr; //@line 227 "xmltok_impl.c"
        var $12=$11+1; //@line 227 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 227 "xmltok_impl.c"
        var $14=($13); //@line 227 "xmltok_impl.c"
        var $15=$10+76; //@line 227 "xmltok_impl.c"
        var $16=$15+$14; //@line 227 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 227 "xmltok_impl.c"
        var $18=($17); //@line 227 "xmltok_impl.c"
        $iftmp_968=$18; //@line 227 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 227 "xmltok_impl.c"
      case 4: // $bb3
        var $19=$ptr_addr; //@line 227 "xmltok_impl.c"
        var $20=$19+1; //@line 227 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 227 "xmltok_impl.c"
        var $22=($21); //@line 227 "xmltok_impl.c"
        var $23=$ptr_addr; //@line 227 "xmltok_impl.c"
        var $24=$23; //@line 227 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 227 "xmltok_impl.c"
        var $26=($25); //@line 227 "xmltok_impl.c"
        var $27=((($26)) & 255); //@line 227 "xmltok_impl.c"
        var $28=((($22)) & 255); //@line 227 "xmltok_impl.c"
        var $29=_unicode_byte_type($27, $28); //@line 227 "xmltok_impl.c"
        $iftmp_968=$29; //@line 227 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 227 "xmltok_impl.c"
      case 5: // $bb4
        var $30=__lastLabel__ == 4 ? $29 : ($18);
        if ($30 == 5) {
          __label__ = 9; break;
        }
        else if ($30 == 6) {
          __label__ = 12; break;
        }
        else if ($30 == 7) {
          __label__ = 15; break;
        }
        else if ($30 == 22) {
          __label__ = 8; break;
        }
        else if ($30 == 24) {
          __label__ = 8; break;
        }
        else if ($30 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 6: // $bb5
        var $31=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $32=$31; //@line 228 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 228 "xmltok_impl.c"
        var $34=($33); //@line 228 "xmltok_impl.c"
        var $35=_nmstrtPages+$34; //@line 228 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 228 "xmltok_impl.c"
        var $37=($36); //@line 228 "xmltok_impl.c"
        var $38=($37) * 8;
        var $39=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $40=$39+1; //@line 228 "xmltok_impl.c"
        var $41=HEAP[$40]; //@line 228 "xmltok_impl.c"
        var $42=($41) >>> 5; //@line 228 "xmltok_impl.c"
        var $43=($42); //@line 228 "xmltok_impl.c"
        var $44=($43) + ($38); //@line 228 "xmltok_impl.c"
        var $45=_namingBitmap+$44*4; //@line 228 "xmltok_impl.c"
        var $46=HEAP[$45]; //@line 228 "xmltok_impl.c"
        var $47=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $48=$47+1; //@line 228 "xmltok_impl.c"
        var $49=HEAP[$48]; //@line 228 "xmltok_impl.c"
        var $50=($49); //@line 228 "xmltok_impl.c"
        var $51=($50) & 31; //@line 228 "xmltok_impl.c"
        var $52=1 << ($51); //@line 228 "xmltok_impl.c"
        var $53=($52) & ($46); //@line 228 "xmltok_impl.c"
        var $54=($53)==0; //@line 228 "xmltok_impl.c"
        if ($54) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 228 "xmltok_impl.c"
      case 7: // $bb6
        var $55=$nextTokPtr_addr; //@line 228 "xmltok_impl.c"
        var $56=$ptr_addr; //@line 228 "xmltok_impl.c"
        HEAP[$55]=$56; //@line 228 "xmltok_impl.c"
        $0=0; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 8: // $bb7
        var $57=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $58=$57+2; //@line 228 "xmltok_impl.c"
        $ptr_addr=$58; //@line 228 "xmltok_impl.c"
        __label__ = 68; break; //@line 228 "xmltok_impl.c"
      case 9: // $bb8
        var $59=$end_addr; //@line 228 "xmltok_impl.c"
        var $60=($59); //@line 228 "xmltok_impl.c"
        var $61=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $62=($61); //@line 228 "xmltok_impl.c"
        var $63=($60) - ($62); //@line 228 "xmltok_impl.c"
        var $64=($63) <= 1; //@line 228 "xmltok_impl.c"
        if ($64) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 228 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 11: // $bb10
        var $65=$nextTokPtr_addr; //@line 228 "xmltok_impl.c"
        var $66=$ptr_addr; //@line 228 "xmltok_impl.c"
        HEAP[$65]=$66; //@line 228 "xmltok_impl.c"
        $0=0; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 12: // $bb11
        var $67=$end_addr; //@line 228 "xmltok_impl.c"
        var $68=($67); //@line 228 "xmltok_impl.c"
        var $69=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $70=($69); //@line 228 "xmltok_impl.c"
        var $71=($68) - ($70); //@line 228 "xmltok_impl.c"
        var $72=($71) <= 2; //@line 228 "xmltok_impl.c"
        if ($72) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 228 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 14: // $bb13
        var $73=$nextTokPtr_addr; //@line 228 "xmltok_impl.c"
        var $74=$ptr_addr; //@line 228 "xmltok_impl.c"
        HEAP[$73]=$74; //@line 228 "xmltok_impl.c"
        $0=0; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 15: // $bb14
        var $75=$end_addr; //@line 228 "xmltok_impl.c"
        var $76=($75); //@line 228 "xmltok_impl.c"
        var $77=$ptr_addr; //@line 228 "xmltok_impl.c"
        var $78=($77); //@line 228 "xmltok_impl.c"
        var $79=($76) - ($78); //@line 228 "xmltok_impl.c"
        var $80=($79) <= 3; //@line 228 "xmltok_impl.c"
        if ($80) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 228 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 17: // $bb16
        var $81=$nextTokPtr_addr; //@line 228 "xmltok_impl.c"
        var $82=$ptr_addr; //@line 228 "xmltok_impl.c"
        HEAP[$81]=$82; //@line 228 "xmltok_impl.c"
        $0=0; //@line 228 "xmltok_impl.c"
        __label__ = 70; break; //@line 228 "xmltok_impl.c"
      case 18: // $bb17
        var $83=$nextTokPtr_addr; //@line 230 "xmltok_impl.c"
        var $84=$ptr_addr; //@line 230 "xmltok_impl.c"
        HEAP[$83]=$84; //@line 230 "xmltok_impl.c"
        $0=0; //@line 231 "xmltok_impl.c"
        __label__ = 70; break; //@line 231 "xmltok_impl.c"
      case 19: // $bb18
        var $85=$ptr_addr; //@line 234 "xmltok_impl.c"
        var $86=$85; //@line 234 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 234 "xmltok_impl.c"
        var $88=($87)==0; //@line 234 "xmltok_impl.c"
        if ($88) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 234 "xmltok_impl.c"
      case 20: // $bb19
        var $89=$enc_addr; //@line 234 "xmltok_impl.c"
        var $90=$89; //@line 234 "xmltok_impl.c"
        var $91=$ptr_addr; //@line 234 "xmltok_impl.c"
        var $92=$91+1; //@line 234 "xmltok_impl.c"
        var $93=HEAP[$92]; //@line 234 "xmltok_impl.c"
        var $94=($93); //@line 234 "xmltok_impl.c"
        var $95=$90+76; //@line 234 "xmltok_impl.c"
        var $96=$95+$94; //@line 234 "xmltok_impl.c"
        var $97=HEAP[$96]; //@line 234 "xmltok_impl.c"
        var $98=($97); //@line 234 "xmltok_impl.c"
        $iftmp_976=$98; //@line 234 "xmltok_impl.c"
        __lastLabel__ = 20; __label__ = 22; break; //@line 234 "xmltok_impl.c"
      case 21: // $bb20
        var $99=$ptr_addr; //@line 234 "xmltok_impl.c"
        var $100=$99+1; //@line 234 "xmltok_impl.c"
        var $101=HEAP[$100]; //@line 234 "xmltok_impl.c"
        var $102=($101); //@line 234 "xmltok_impl.c"
        var $103=$ptr_addr; //@line 234 "xmltok_impl.c"
        var $104=$103; //@line 234 "xmltok_impl.c"
        var $105=HEAP[$104]; //@line 234 "xmltok_impl.c"
        var $106=($105); //@line 234 "xmltok_impl.c"
        var $107=((($106)) & 255); //@line 234 "xmltok_impl.c"
        var $108=((($102)) & 255); //@line 234 "xmltok_impl.c"
        var $109=_unicode_byte_type($107, $108); //@line 234 "xmltok_impl.c"
        $iftmp_976=$109; //@line 234 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 22; break; //@line 234 "xmltok_impl.c"
      case 22: // $bb21
        var $110=__lastLabel__ == 21 ? $109 : ($98);
        if ($110 == 5) {
          __label__ = 26; break;
        }
        else if ($110 == 6) {
          __label__ = 29; break;
        }
        else if ($110 == 7) {
          __label__ = 32; break;
        }
        else if ($110 == 9) {
          __label__ = 35; break;
        }
        else if ($110 == 10) {
          __label__ = 35; break;
        }
        else if ($110 == 15) {
          __label__ = 60; break;
        }
        else if ($110 == 21) {
          __label__ = 35; break;
        }
        else if ($110 == 22) {
          __label__ = 25; break;
        }
        else if ($110 == 24) {
          __label__ = 25; break;
        }
        else if ($110 == 25) {
          __label__ = 25; break;
        }
        else if ($110 == 26) {
          __label__ = 25; break;
        }
        else if ($110 == 27) {
          __label__ = 25; break;
        }
        else if ($110 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 67; break;
        }
        
      case 23: // $bb22
        var $111=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $112=$111; //@line 235 "xmltok_impl.c"
        var $113=HEAP[$112]; //@line 235 "xmltok_impl.c"
        var $114=($113); //@line 235 "xmltok_impl.c"
        var $115=_namePages+$114; //@line 235 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 235 "xmltok_impl.c"
        var $117=($116); //@line 235 "xmltok_impl.c"
        var $118=($117) * 8;
        var $119=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $120=$119+1; //@line 235 "xmltok_impl.c"
        var $121=HEAP[$120]; //@line 235 "xmltok_impl.c"
        var $122=($121) >>> 5; //@line 235 "xmltok_impl.c"
        var $123=($122); //@line 235 "xmltok_impl.c"
        var $124=($123) + ($118); //@line 235 "xmltok_impl.c"
        var $125=_namingBitmap+$124*4; //@line 235 "xmltok_impl.c"
        var $126=HEAP[$125]; //@line 235 "xmltok_impl.c"
        var $127=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $128=$127+1; //@line 235 "xmltok_impl.c"
        var $129=HEAP[$128]; //@line 235 "xmltok_impl.c"
        var $130=($129); //@line 235 "xmltok_impl.c"
        var $131=($130) & 31; //@line 235 "xmltok_impl.c"
        var $132=1 << ($131); //@line 235 "xmltok_impl.c"
        var $133=($132) & ($126); //@line 235 "xmltok_impl.c"
        var $134=($133)==0; //@line 235 "xmltok_impl.c"
        if ($134) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 235 "xmltok_impl.c"
      case 24: // $bb23
        var $135=$nextTokPtr_addr; //@line 235 "xmltok_impl.c"
        var $136=$ptr_addr; //@line 235 "xmltok_impl.c"
        HEAP[$135]=$136; //@line 235 "xmltok_impl.c"
        $0=0; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 25: // $bb24
        var $137=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $138=$137+2; //@line 235 "xmltok_impl.c"
        $ptr_addr=$138; //@line 235 "xmltok_impl.c"
        __label__ = 68; break; //@line 235 "xmltok_impl.c"
      case 26: // $bb25
        var $139=$end_addr; //@line 235 "xmltok_impl.c"
        var $140=($139); //@line 235 "xmltok_impl.c"
        var $141=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $142=($141); //@line 235 "xmltok_impl.c"
        var $143=($140) - ($142); //@line 235 "xmltok_impl.c"
        var $144=($143) <= 1; //@line 235 "xmltok_impl.c"
        if ($144) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 235 "xmltok_impl.c"
      case 27: // $bb26
        $0=-2; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 28: // $bb27
        var $145=$nextTokPtr_addr; //@line 235 "xmltok_impl.c"
        var $146=$ptr_addr; //@line 235 "xmltok_impl.c"
        HEAP[$145]=$146; //@line 235 "xmltok_impl.c"
        $0=0; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 29: // $bb28
        var $147=$end_addr; //@line 235 "xmltok_impl.c"
        var $148=($147); //@line 235 "xmltok_impl.c"
        var $149=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $150=($149); //@line 235 "xmltok_impl.c"
        var $151=($148) - ($150); //@line 235 "xmltok_impl.c"
        var $152=($151) <= 2; //@line 235 "xmltok_impl.c"
        if ($152) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 235 "xmltok_impl.c"
      case 30: // $bb29
        $0=-2; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 31: // $bb30
        var $153=$nextTokPtr_addr; //@line 235 "xmltok_impl.c"
        var $154=$ptr_addr; //@line 235 "xmltok_impl.c"
        HEAP[$153]=$154; //@line 235 "xmltok_impl.c"
        $0=0; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 32: // $bb31
        var $155=$end_addr; //@line 235 "xmltok_impl.c"
        var $156=($155); //@line 235 "xmltok_impl.c"
        var $157=$ptr_addr; //@line 235 "xmltok_impl.c"
        var $158=($157); //@line 235 "xmltok_impl.c"
        var $159=($156) - ($158); //@line 235 "xmltok_impl.c"
        var $160=($159) <= 3; //@line 235 "xmltok_impl.c"
        if ($160) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 235 "xmltok_impl.c"
      case 33: // $bb32
        $0=-2; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 34: // $bb33
        var $161=$nextTokPtr_addr; //@line 235 "xmltok_impl.c"
        var $162=$ptr_addr; //@line 235 "xmltok_impl.c"
        HEAP[$161]=$162; //@line 235 "xmltok_impl.c"
        $0=0; //@line 235 "xmltok_impl.c"
        __label__ = 70; break; //@line 235 "xmltok_impl.c"
      case 35: // $bb34
        var $163=$enc_addr; //@line 237 "xmltok_impl.c"
        var $164=$target; //@line 237 "xmltok_impl.c"
        var $165=$ptr_addr; //@line 237 "xmltok_impl.c"
        var $166=_big2_checkPiTarget($163, $164, $165, $tok); //@line 237 "xmltok_impl.c"
        var $167=($166)==0; //@line 237 "xmltok_impl.c"
        if ($167) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 237 "xmltok_impl.c"
      case 36: // $bb35
        var $168=$nextTokPtr_addr; //@line 238 "xmltok_impl.c"
        var $169=$ptr_addr; //@line 238 "xmltok_impl.c"
        HEAP[$168]=$169; //@line 238 "xmltok_impl.c"
        $0=0; //@line 239 "xmltok_impl.c"
        __label__ = 70; break; //@line 239 "xmltok_impl.c"
      case 37: // $bb36
        var $170=$ptr_addr; //@line 241 "xmltok_impl.c"
        var $171=$170+2; //@line 241 "xmltok_impl.c"
        $ptr_addr=$171; //@line 241 "xmltok_impl.c"
        __label__ = 58; break; //@line 241 "xmltok_impl.c"
      case 38: // $bb37
        var $172=$ptr_addr; //@line 243 "xmltok_impl.c"
        var $173=$172; //@line 243 "xmltok_impl.c"
        var $174=HEAP[$173]; //@line 243 "xmltok_impl.c"
        var $175=($174)==0; //@line 243 "xmltok_impl.c"
        if ($175) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 243 "xmltok_impl.c"
      case 39: // $bb38
        var $176=$enc_addr; //@line 243 "xmltok_impl.c"
        var $177=$176; //@line 243 "xmltok_impl.c"
        var $178=$ptr_addr; //@line 243 "xmltok_impl.c"
        var $179=$178+1; //@line 243 "xmltok_impl.c"
        var $180=HEAP[$179]; //@line 243 "xmltok_impl.c"
        var $181=($180); //@line 243 "xmltok_impl.c"
        var $182=$177+76; //@line 243 "xmltok_impl.c"
        var $183=$182+$181; //@line 243 "xmltok_impl.c"
        var $184=HEAP[$183]; //@line 243 "xmltok_impl.c"
        var $185=($184); //@line 243 "xmltok_impl.c"
        $iftmp_984=$185; //@line 243 "xmltok_impl.c"
        __lastLabel__ = 39; __label__ = 41; break; //@line 243 "xmltok_impl.c"
      case 40: // $bb39
        var $186=$ptr_addr; //@line 243 "xmltok_impl.c"
        var $187=$186+1; //@line 243 "xmltok_impl.c"
        var $188=HEAP[$187]; //@line 243 "xmltok_impl.c"
        var $189=($188); //@line 243 "xmltok_impl.c"
        var $190=$ptr_addr; //@line 243 "xmltok_impl.c"
        var $191=$190; //@line 243 "xmltok_impl.c"
        var $192=HEAP[$191]; //@line 243 "xmltok_impl.c"
        var $193=($192); //@line 243 "xmltok_impl.c"
        var $194=((($193)) & 255); //@line 243 "xmltok_impl.c"
        var $195=((($189)) & 255); //@line 243 "xmltok_impl.c"
        var $196=_unicode_byte_type($194, $195); //@line 243 "xmltok_impl.c"
        $iftmp_984=$196; //@line 243 "xmltok_impl.c"
        __lastLabel__ = 40; __label__ = 41; break; //@line 243 "xmltok_impl.c"
      case 41: // $bb40
        var $197=__lastLabel__ == 40 ? $196 : ($185);
        if ($197 == 0) {
          __label__ = 51; break;
        }
        else if ($197 == 1) {
          __label__ = 51; break;
        }
        else if ($197 == 5) {
          __label__ = 42; break;
        }
        else if ($197 == 6) {
          __label__ = 45; break;
        }
        else if ($197 == 7) {
          __label__ = 48; break;
        }
        else if ($197 == 8) {
          __label__ = 51; break;
        }
        else if ($197 == 15) {
          __label__ = 52; break;
        }
        else {
        __label__ = 57; break;
        }
        
      case 42: // $bb41
        var $198=$end_addr; //@line 244 "xmltok_impl.c"
        var $199=($198); //@line 244 "xmltok_impl.c"
        var $200=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $201=($200); //@line 244 "xmltok_impl.c"
        var $202=($199) - ($201); //@line 244 "xmltok_impl.c"
        var $203=($202) <= 1; //@line 244 "xmltok_impl.c"
        if ($203) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 244 "xmltok_impl.c"
      case 43: // $bb42
        $0=-2; //@line 244 "xmltok_impl.c"
        __label__ = 70; break; //@line 244 "xmltok_impl.c"
      case 44: // $bb43
        var $204=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $205=$204+2; //@line 244 "xmltok_impl.c"
        $ptr_addr=$205; //@line 244 "xmltok_impl.c"
        __label__ = 58; break; //@line 244 "xmltok_impl.c"
      case 45: // $bb44
        var $206=$end_addr; //@line 244 "xmltok_impl.c"
        var $207=($206); //@line 244 "xmltok_impl.c"
        var $208=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $209=($208); //@line 244 "xmltok_impl.c"
        var $210=($207) - ($209); //@line 244 "xmltok_impl.c"
        var $211=($210) <= 2; //@line 244 "xmltok_impl.c"
        if ($211) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 244 "xmltok_impl.c"
      case 46: // $bb45
        $0=-2; //@line 244 "xmltok_impl.c"
        __label__ = 70; break; //@line 244 "xmltok_impl.c"
      case 47: // $bb46
        var $212=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $213=$212+3; //@line 244 "xmltok_impl.c"
        $ptr_addr=$213; //@line 244 "xmltok_impl.c"
        __label__ = 58; break; //@line 244 "xmltok_impl.c"
      case 48: // $bb47
        var $214=$end_addr; //@line 244 "xmltok_impl.c"
        var $215=($214); //@line 244 "xmltok_impl.c"
        var $216=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $217=($216); //@line 244 "xmltok_impl.c"
        var $218=($215) - ($217); //@line 244 "xmltok_impl.c"
        var $219=($218) <= 3; //@line 244 "xmltok_impl.c"
        if ($219) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 244 "xmltok_impl.c"
      case 49: // $bb48
        $0=-2; //@line 244 "xmltok_impl.c"
        __label__ = 70; break; //@line 244 "xmltok_impl.c"
      case 50: // $bb49
        var $220=$ptr_addr; //@line 244 "xmltok_impl.c"
        var $221=$220+4; //@line 244 "xmltok_impl.c"
        $ptr_addr=$221; //@line 244 "xmltok_impl.c"
        __label__ = 58; break; //@line 244 "xmltok_impl.c"
      case 51: // $bb50
        var $222=$nextTokPtr_addr; //@line 244 "xmltok_impl.c"
        var $223=$ptr_addr; //@line 244 "xmltok_impl.c"
        HEAP[$222]=$223; //@line 244 "xmltok_impl.c"
        $0=0; //@line 244 "xmltok_impl.c"
        __label__ = 70; break; //@line 244 "xmltok_impl.c"
      case 52: // $bb51
        var $224=$ptr_addr; //@line 246 "xmltok_impl.c"
        var $225=$224+2; //@line 246 "xmltok_impl.c"
        $ptr_addr=$225; //@line 246 "xmltok_impl.c"
        var $226=$ptr_addr; //@line 247 "xmltok_impl.c"
        var $227=$end_addr; //@line 247 "xmltok_impl.c"
        var $228=($226)==($227); //@line 247 "xmltok_impl.c"
        if ($228) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 247 "xmltok_impl.c"
      case 53: // $bb52
        $0=-1; //@line 248 "xmltok_impl.c"
        __label__ = 70; break; //@line 248 "xmltok_impl.c"
      case 54: // $bb53
        var $229=$ptr_addr; //@line 249 "xmltok_impl.c"
        var $230=$229; //@line 249 "xmltok_impl.c"
        var $231=HEAP[$230]; //@line 249 "xmltok_impl.c"
        var $232=($231)==0; //@line 249 "xmltok_impl.c"
        if ($232) { __label__ = 55; break; } else { __label__ = 58; break; } //@line 249 "xmltok_impl.c"
      case 55: // $bb54
        var $233=$ptr_addr; //@line 249 "xmltok_impl.c"
        var $234=$233+1; //@line 249 "xmltok_impl.c"
        var $235=HEAP[$234]; //@line 249 "xmltok_impl.c"
        var $236=($235)==62; //@line 249 "xmltok_impl.c"
        if ($236) { __label__ = 56; break; } else { __label__ = 58; break; } //@line 249 "xmltok_impl.c"
      case 56: // $bb55
        var $237=$ptr_addr; //@line 250 "xmltok_impl.c"
        var $238=$237+2; //@line 250 "xmltok_impl.c"
        var $239=$nextTokPtr_addr; //@line 250 "xmltok_impl.c"
        HEAP[$239]=$238; //@line 250 "xmltok_impl.c"
        var $240=HEAP[$tok]; //@line 251 "xmltok_impl.c"
        $0=$240; //@line 251 "xmltok_impl.c"
        __label__ = 70; break; //@line 251 "xmltok_impl.c"
      case 57: // $bb57
        var $241=$ptr_addr; //@line 255 "xmltok_impl.c"
        var $242=$241+2; //@line 255 "xmltok_impl.c"
        $ptr_addr=$242; //@line 255 "xmltok_impl.c"
        __label__ = 58; break; //@line 255 "xmltok_impl.c"
      case 58: // $bb58
        var $243=$ptr_addr; //@line 242 "xmltok_impl.c"
        var $244=$end_addr; //@line 242 "xmltok_impl.c"
        var $245=($243)!=($244); //@line 242 "xmltok_impl.c"
        if ($245) { __label__ = 38; break; } else { __label__ = 59; break; } //@line 242 "xmltok_impl.c"
      case 59: // $bb59
        $0=-1; //@line 259 "xmltok_impl.c"
        __label__ = 70; break; //@line 259 "xmltok_impl.c"
      case 60: // $bb60
        var $246=$enc_addr; //@line 261 "xmltok_impl.c"
        var $247=$target; //@line 261 "xmltok_impl.c"
        var $248=$ptr_addr; //@line 261 "xmltok_impl.c"
        var $249=_big2_checkPiTarget($246, $247, $248, $tok); //@line 261 "xmltok_impl.c"
        var $250=($249)==0; //@line 261 "xmltok_impl.c"
        if ($250) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 261 "xmltok_impl.c"
      case 61: // $bb61
        var $251=$nextTokPtr_addr; //@line 262 "xmltok_impl.c"
        var $252=$ptr_addr; //@line 262 "xmltok_impl.c"
        HEAP[$251]=$252; //@line 262 "xmltok_impl.c"
        $0=0; //@line 263 "xmltok_impl.c"
        __label__ = 70; break; //@line 263 "xmltok_impl.c"
      case 62: // $bb62
        var $253=$ptr_addr; //@line 265 "xmltok_impl.c"
        var $254=$253+2; //@line 265 "xmltok_impl.c"
        $ptr_addr=$254; //@line 265 "xmltok_impl.c"
        var $255=$ptr_addr; //@line 266 "xmltok_impl.c"
        var $256=$end_addr; //@line 266 "xmltok_impl.c"
        var $257=($255)==($256); //@line 266 "xmltok_impl.c"
        if ($257) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 266 "xmltok_impl.c"
      case 63: // $bb63
        $0=-1; //@line 267 "xmltok_impl.c"
        __label__ = 70; break; //@line 267 "xmltok_impl.c"
      case 64: // $bb64
        var $258=$ptr_addr; //@line 268 "xmltok_impl.c"
        var $259=$258; //@line 268 "xmltok_impl.c"
        var $260=HEAP[$259]; //@line 268 "xmltok_impl.c"
        var $261=($260)==0; //@line 268 "xmltok_impl.c"
        if ($261) { __label__ = 65; break; } else { __label__ = 67; break; } //@line 268 "xmltok_impl.c"
      case 65: // $bb65
        var $262=$ptr_addr; //@line 268 "xmltok_impl.c"
        var $263=$262+1; //@line 268 "xmltok_impl.c"
        var $264=HEAP[$263]; //@line 268 "xmltok_impl.c"
        var $265=($264)==62; //@line 268 "xmltok_impl.c"
        if ($265) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 268 "xmltok_impl.c"
      case 66: // $bb66
        var $266=$ptr_addr; //@line 269 "xmltok_impl.c"
        var $267=$266+2; //@line 269 "xmltok_impl.c"
        var $268=$nextTokPtr_addr; //@line 269 "xmltok_impl.c"
        HEAP[$268]=$267; //@line 269 "xmltok_impl.c"
        var $269=HEAP[$tok]; //@line 270 "xmltok_impl.c"
        $0=$269; //@line 270 "xmltok_impl.c"
        __label__ = 70; break; //@line 270 "xmltok_impl.c"
      case 67: // $bb67
        var $270=$nextTokPtr_addr; //@line 274 "xmltok_impl.c"
        var $271=$ptr_addr; //@line 274 "xmltok_impl.c"
        HEAP[$270]=$271; //@line 274 "xmltok_impl.c"
        $0=0; //@line 275 "xmltok_impl.c"
        __label__ = 70; break; //@line 275 "xmltok_impl.c"
      case 68: // $bb68
        var $272=$ptr_addr; //@line 233 "xmltok_impl.c"
        var $273=$end_addr; //@line 233 "xmltok_impl.c"
        var $274=($272)!=($273); //@line 233 "xmltok_impl.c"
        if ($274) { __label__ = 19; break; } else { __label__ = 69; break; } //@line 233 "xmltok_impl.c"
      case 69: // $bb69
        $0=-1; //@line 278 "xmltok_impl.c"
        __label__ = 70; break; //@line 278 "xmltok_impl.c"
      case 70: // $bb70
        var $275=$0; //@line 226 "xmltok_impl.c"
        $retval=$275; //@line 226 "xmltok_impl.c"
        var $retval71=$retval; //@line 226 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval71; //@line 226 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanCdataSection($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $i;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$end_addr; //@line 289 "xmltok_impl.c"
        var $2=($1); //@line 289 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 289 "xmltok_impl.c"
        var $4=($3); //@line 289 "xmltok_impl.c"
        var $5=($2) - ($4); //@line 289 "xmltok_impl.c"
        var $6=($5) <= 11; //@line 289 "xmltok_impl.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 289 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 290 "xmltok_impl.c"
        __label__ = 9; break; //@line 290 "xmltok_impl.c"
      case 2: // $bb1
        $i=0; //@line 291 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 7; break; //@line 291 "xmltok_impl.c"
      case 3: // $bb2
        var $7=$ptr_addr; //@line 292 "xmltok_impl.c"
        var $8=$7; //@line 292 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 292 "xmltok_impl.c"
        var $10=($9)!=0; //@line 292 "xmltok_impl.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 292 "xmltok_impl.c"
      case 4: // $bb3
        var $11=$ptr_addr; //@line 292 "xmltok_impl.c"
        var $12=$11+1; //@line 292 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 292 "xmltok_impl.c"
        var $14=$i; //@line 292 "xmltok_impl.c"
        var $15=_CDATA_LSQB_9078+$14; //@line 292 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 292 "xmltok_impl.c"
        var $17=($13)!=($16); //@line 292 "xmltok_impl.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 292 "xmltok_impl.c"
      case 5: // $bb4
        var $18=$nextTokPtr_addr; //@line 293 "xmltok_impl.c"
        var $19=$ptr_addr; //@line 293 "xmltok_impl.c"
        HEAP[$18]=$19; //@line 293 "xmltok_impl.c"
        $0=0; //@line 294 "xmltok_impl.c"
        __label__ = 9; break; //@line 294 "xmltok_impl.c"
      case 6: // $bb5
        var $20=$i; //@line 291 "xmltok_impl.c"
        var $21=($20) + 1; //@line 291 "xmltok_impl.c"
        $i=$21; //@line 291 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 291 "xmltok_impl.c"
        var $23=$22+2; //@line 291 "xmltok_impl.c"
        $ptr_addr=$23; //@line 291 "xmltok_impl.c"
        __lastLabel__ = 6; __label__ = 7; break; //@line 291 "xmltok_impl.c"
      case 7: // $bb6
        var $24=__lastLabel__ == 6 ? $21 : (0);
        var $25=($24) <= 5; //@line 291 "xmltok_impl.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 291 "xmltok_impl.c"
      case 8: // $bb7
        var $26=$nextTokPtr_addr; //@line 297 "xmltok_impl.c"
        var $27=$ptr_addr; //@line 297 "xmltok_impl.c"
        HEAP[$26]=$27; //@line 297 "xmltok_impl.c"
        $0=8; //@line 298 "xmltok_impl.c"
        __label__ = 9; break; //@line 298 "xmltok_impl.c"
      case 9: // $bb8
        var $28=$0; //@line 290 "xmltok_impl.c"
        $retval=$28; //@line 290 "xmltok_impl.c"
        var $retval9=$retval; //@line 290 "xmltok_impl.c"
        ;
        return $retval9; //@line 290 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_cdataSectionTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1008;
        var $iftmp_1000;
        var $iftmp_998;
        var $0;
        var $n;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 305 "xmltok_impl.c"
        var $2=$end_addr; //@line 305 "xmltok_impl.c"
        var $3=($1)==($2); //@line 305 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 305 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 306 "xmltok_impl.c"
        __label__ = 57; break; //@line 306 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$end_addr; //@line 308 "xmltok_impl.c"
        var $5=($4); //@line 308 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 308 "xmltok_impl.c"
        var $7=($6); //@line 308 "xmltok_impl.c"
        var $8=($5) - ($7); //@line 308 "xmltok_impl.c"
        $n=$8; //@line 308 "xmltok_impl.c"
        var $9=$n; //@line 309 "xmltok_impl.c"
        var $10=($9) & 1; //@line 309 "xmltok_impl.c"
        var $11=((($10)) & 255); //@line 309 "xmltok_impl.c"
        var $toBool=($11)!=0; //@line 309 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 309 "xmltok_impl.c"
      case 3: // $bb2
        var $12=$n; //@line 310 "xmltok_impl.c"
        var $13=($12) & -2; //@line 310 "xmltok_impl.c"
        $n=$13; //@line 310 "xmltok_impl.c"
        var $14=$n; //@line 311 "xmltok_impl.c"
        var $15=($14)==0; //@line 311 "xmltok_impl.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 311 "xmltok_impl.c"
      case 4: // $bb3
        $0=-1; //@line 312 "xmltok_impl.c"
        __label__ = 57; break; //@line 312 "xmltok_impl.c"
      case 5: // $bb4
        var $16=$ptr_addr; //@line 313 "xmltok_impl.c"
        var $17=$n; //@line 313 "xmltok_impl.c"
        var $18=$16+$17; //@line 313 "xmltok_impl.c"
        $end_addr=$18; //@line 313 "xmltok_impl.c"
        __label__ = 6; break; //@line 313 "xmltok_impl.c"
      case 6: // $bb5
        var $19=$ptr_addr; //@line 316 "xmltok_impl.c"
        var $20=$19; //@line 316 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 316 "xmltok_impl.c"
        var $22=($21)==0; //@line 316 "xmltok_impl.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 316 "xmltok_impl.c"
      case 7: // $bb6
        var $23=$enc_addr; //@line 316 "xmltok_impl.c"
        var $24=$23; //@line 316 "xmltok_impl.c"
        var $25=$ptr_addr; //@line 316 "xmltok_impl.c"
        var $26=$25+1; //@line 316 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 316 "xmltok_impl.c"
        var $28=($27); //@line 316 "xmltok_impl.c"
        var $29=$24+76; //@line 316 "xmltok_impl.c"
        var $30=$29+$28; //@line 316 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 316 "xmltok_impl.c"
        var $32=($31); //@line 316 "xmltok_impl.c"
        $iftmp_998=$32; //@line 316 "xmltok_impl.c"
        __lastLabel__ = 7; __label__ = 9; break; //@line 316 "xmltok_impl.c"
      case 8: // $bb7
        var $33=$ptr_addr; //@line 316 "xmltok_impl.c"
        var $34=$33+1; //@line 316 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 316 "xmltok_impl.c"
        var $36=($35); //@line 316 "xmltok_impl.c"
        var $37=$ptr_addr; //@line 316 "xmltok_impl.c"
        var $38=$37; //@line 316 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 316 "xmltok_impl.c"
        var $40=($39); //@line 316 "xmltok_impl.c"
        var $41=((($40)) & 255); //@line 316 "xmltok_impl.c"
        var $42=((($36)) & 255); //@line 316 "xmltok_impl.c"
        var $43=_unicode_byte_type($41, $42); //@line 316 "xmltok_impl.c"
        $iftmp_998=$43; //@line 316 "xmltok_impl.c"
        __lastLabel__ = 8; __label__ = 9; break; //@line 316 "xmltok_impl.c"
      case 9: // $bb8
        var $44=__lastLabel__ == 8 ? $43 : ($32);
        if ($44 == 0) {
          __label__ = 38; break;
        }
        else if ($44 == 1) {
          __label__ = 38; break;
        }
        else if ($44 == 4) {
          __label__ = 10; break;
        }
        else if ($44 == 5) {
          __label__ = 29; break;
        }
        else if ($44 == 6) {
          __label__ = 32; break;
        }
        else if ($44 == 7) {
          __label__ = 35; break;
        }
        else if ($44 == 8) {
          __label__ = 38; break;
        }
        else if ($44 == 9) {
          __label__ = 20; break;
        }
        else if ($44 == 10) {
          __label__ = 28; break;
        }
        else {
        __label__ = 39; break;
        }
        
      case 10: // $bb9
        var $45=$ptr_addr; //@line 318 "xmltok_impl.c"
        var $46=$45+2; //@line 318 "xmltok_impl.c"
        $ptr_addr=$46; //@line 318 "xmltok_impl.c"
        var $47=$ptr_addr; //@line 319 "xmltok_impl.c"
        var $48=$end_addr; //@line 319 "xmltok_impl.c"
        var $49=($47)==($48); //@line 319 "xmltok_impl.c"
        if ($49) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 319 "xmltok_impl.c"
      case 11: // $bb10
        $0=-1; //@line 320 "xmltok_impl.c"
        __label__ = 57; break; //@line 320 "xmltok_impl.c"
      case 12: // $bb11
        var $50=$ptr_addr; //@line 321 "xmltok_impl.c"
        var $51=$50; //@line 321 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 321 "xmltok_impl.c"
        var $53=($52)!=0; //@line 321 "xmltok_impl.c"
        if ($53) { __label__ = 55; break; } else { __label__ = 13; break; } //@line 321 "xmltok_impl.c"
      case 13: // $bb12
        var $54=$ptr_addr; //@line 321 "xmltok_impl.c"
        var $55=$54+1; //@line 321 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 321 "xmltok_impl.c"
        var $57=($56)!=93; //@line 321 "xmltok_impl.c"
        if ($57) { __label__ = 55; break; } else { __label__ = 14; break; } //@line 321 "xmltok_impl.c"
      case 14: // $bb13
        var $58=$ptr_addr; //@line 323 "xmltok_impl.c"
        var $59=$58+2; //@line 323 "xmltok_impl.c"
        $ptr_addr=$59; //@line 323 "xmltok_impl.c"
        var $60=$ptr_addr; //@line 324 "xmltok_impl.c"
        var $61=$end_addr; //@line 324 "xmltok_impl.c"
        var $62=($60)==($61); //@line 324 "xmltok_impl.c"
        if ($62) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 324 "xmltok_impl.c"
      case 15: // $bb14
        $0=-1; //@line 325 "xmltok_impl.c"
        __label__ = 57; break; //@line 325 "xmltok_impl.c"
      case 16: // $bb15
        var $63=$ptr_addr; //@line 326 "xmltok_impl.c"
        var $64=$63; //@line 326 "xmltok_impl.c"
        var $65=HEAP[$64]; //@line 326 "xmltok_impl.c"
        var $66=($65)!=0; //@line 326 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 326 "xmltok_impl.c"
      case 17: // $bb16
        var $67=$ptr_addr; //@line 326 "xmltok_impl.c"
        var $68=$67+1; //@line 326 "xmltok_impl.c"
        var $69=HEAP[$68]; //@line 326 "xmltok_impl.c"
        var $70=($69)!=62; //@line 326 "xmltok_impl.c"
        if ($70) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 326 "xmltok_impl.c"
      case 18: // $bb17
        var $71=$ptr_addr; //@line 327 "xmltok_impl.c"
        var $72=$71+-2; //@line 327 "xmltok_impl.c"
        $ptr_addr=$72; //@line 327 "xmltok_impl.c"
        __label__ = 55; break; //@line 327 "xmltok_impl.c"
      case 19: // $bb18
        var $73=$ptr_addr; //@line 330 "xmltok_impl.c"
        var $74=$73+2; //@line 330 "xmltok_impl.c"
        var $75=$nextTokPtr_addr; //@line 330 "xmltok_impl.c"
        HEAP[$75]=$74; //@line 330 "xmltok_impl.c"
        $0=40; //@line 331 "xmltok_impl.c"
        __label__ = 57; break; //@line 331 "xmltok_impl.c"
      case 20: // $bb19
        var $76=$ptr_addr; //@line 333 "xmltok_impl.c"
        var $77=$76+2; //@line 333 "xmltok_impl.c"
        $ptr_addr=$77; //@line 333 "xmltok_impl.c"
        var $78=$ptr_addr; //@line 334 "xmltok_impl.c"
        var $79=$end_addr; //@line 334 "xmltok_impl.c"
        var $80=($78)==($79); //@line 334 "xmltok_impl.c"
        if ($80) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 334 "xmltok_impl.c"
      case 21: // $bb20
        $0=-1; //@line 335 "xmltok_impl.c"
        __label__ = 57; break; //@line 335 "xmltok_impl.c"
      case 22: // $bb21
        var $81=$ptr_addr; //@line 336 "xmltok_impl.c"
        var $82=$81; //@line 336 "xmltok_impl.c"
        var $83=HEAP[$82]; //@line 336 "xmltok_impl.c"
        var $84=($83)==0; //@line 336 "xmltok_impl.c"
        if ($84) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 336 "xmltok_impl.c"
      case 23: // $bb22
        var $85=$enc_addr; //@line 336 "xmltok_impl.c"
        var $86=$85; //@line 336 "xmltok_impl.c"
        var $87=$ptr_addr; //@line 336 "xmltok_impl.c"
        var $88=$87+1; //@line 336 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 336 "xmltok_impl.c"
        var $90=($89); //@line 336 "xmltok_impl.c"
        var $91=$86+76; //@line 336 "xmltok_impl.c"
        var $92=$91+$90; //@line 336 "xmltok_impl.c"
        var $93=HEAP[$92]; //@line 336 "xmltok_impl.c"
        var $94=($93)==10; //@line 336 "xmltok_impl.c"
        var $95=($94); //@line 336 "xmltok_impl.c"
        $iftmp_1000=$95; //@line 336 "xmltok_impl.c"
        __lastLabel__ = 23; __label__ = 25; break; //@line 336 "xmltok_impl.c"
      case 24: // $bb23
        var $96=$ptr_addr; //@line 336 "xmltok_impl.c"
        var $97=$96+1; //@line 336 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 336 "xmltok_impl.c"
        var $99=($98); //@line 336 "xmltok_impl.c"
        var $100=$ptr_addr; //@line 336 "xmltok_impl.c"
        var $101=$100; //@line 336 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 336 "xmltok_impl.c"
        var $103=($102); //@line 336 "xmltok_impl.c"
        var $104=((($103)) & 255); //@line 336 "xmltok_impl.c"
        var $105=((($99)) & 255); //@line 336 "xmltok_impl.c"
        var $106=_unicode_byte_type($104, $105); //@line 336 "xmltok_impl.c"
        var $107=($106)==10; //@line 336 "xmltok_impl.c"
        var $108=($107); //@line 336 "xmltok_impl.c"
        $iftmp_1000=$108; //@line 336 "xmltok_impl.c"
        __lastLabel__ = 24; __label__ = 25; break; //@line 336 "xmltok_impl.c"
      case 25: // $bb24
        var $109=__lastLabel__ == 24 ? $108 : ($95);
        var $toBool25=($109)!=0; //@line 336 "xmltok_impl.c"
        if ($toBool25) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 336 "xmltok_impl.c"
      case 26: // $bb26
        var $110=$ptr_addr; //@line 337 "xmltok_impl.c"
        var $111=$110+2; //@line 337 "xmltok_impl.c"
        $ptr_addr=$111; //@line 337 "xmltok_impl.c"
        __label__ = 27; break; //@line 337 "xmltok_impl.c"
      case 27: // $bb27
        var $112=$nextTokPtr_addr; //@line 338 "xmltok_impl.c"
        var $113=$ptr_addr; //@line 338 "xmltok_impl.c"
        HEAP[$112]=$113; //@line 338 "xmltok_impl.c"
        $0=7; //@line 339 "xmltok_impl.c"
        __label__ = 57; break; //@line 339 "xmltok_impl.c"
      case 28: // $bb28
        var $114=$ptr_addr; //@line 341 "xmltok_impl.c"
        var $115=$114+2; //@line 341 "xmltok_impl.c"
        var $116=$nextTokPtr_addr; //@line 341 "xmltok_impl.c"
        HEAP[$116]=$115; //@line 341 "xmltok_impl.c"
        $0=7; //@line 342 "xmltok_impl.c"
        __label__ = 57; break; //@line 342 "xmltok_impl.c"
      case 29: // $bb29
        var $117=$end_addr; //@line 343 "xmltok_impl.c"
        var $118=($117); //@line 343 "xmltok_impl.c"
        var $119=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $120=($119); //@line 343 "xmltok_impl.c"
        var $121=($118) - ($120); //@line 343 "xmltok_impl.c"
        var $122=($121) <= 1; //@line 343 "xmltok_impl.c"
        if ($122) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 343 "xmltok_impl.c"
      case 30: // $bb30
        $0=-2; //@line 343 "xmltok_impl.c"
        __label__ = 57; break; //@line 343 "xmltok_impl.c"
      case 31: // $bb31
        var $123=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $124=$123+2; //@line 343 "xmltok_impl.c"
        $ptr_addr=$124; //@line 343 "xmltok_impl.c"
        __label__ = 55; break; //@line 343 "xmltok_impl.c"
      case 32: // $bb32
        var $125=$end_addr; //@line 343 "xmltok_impl.c"
        var $126=($125); //@line 343 "xmltok_impl.c"
        var $127=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $128=($127); //@line 343 "xmltok_impl.c"
        var $129=($126) - ($128); //@line 343 "xmltok_impl.c"
        var $130=($129) <= 2; //@line 343 "xmltok_impl.c"
        if ($130) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 343 "xmltok_impl.c"
      case 33: // $bb33
        $0=-2; //@line 343 "xmltok_impl.c"
        __label__ = 57; break; //@line 343 "xmltok_impl.c"
      case 34: // $bb34
        var $131=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $132=$131+3; //@line 343 "xmltok_impl.c"
        $ptr_addr=$132; //@line 343 "xmltok_impl.c"
        __label__ = 55; break; //@line 343 "xmltok_impl.c"
      case 35: // $bb35
        var $133=$end_addr; //@line 343 "xmltok_impl.c"
        var $134=($133); //@line 343 "xmltok_impl.c"
        var $135=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $136=($135); //@line 343 "xmltok_impl.c"
        var $137=($134) - ($136); //@line 343 "xmltok_impl.c"
        var $138=($137) <= 3; //@line 343 "xmltok_impl.c"
        if ($138) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 343 "xmltok_impl.c"
      case 36: // $bb36
        $0=-2; //@line 343 "xmltok_impl.c"
        __label__ = 57; break; //@line 343 "xmltok_impl.c"
      case 37: // $bb37
        var $139=$ptr_addr; //@line 343 "xmltok_impl.c"
        var $140=$139+4; //@line 343 "xmltok_impl.c"
        $ptr_addr=$140; //@line 343 "xmltok_impl.c"
        __label__ = 55; break; //@line 343 "xmltok_impl.c"
      case 38: // $bb38
        var $141=$nextTokPtr_addr; //@line 343 "xmltok_impl.c"
        var $142=$ptr_addr; //@line 343 "xmltok_impl.c"
        HEAP[$141]=$142; //@line 343 "xmltok_impl.c"
        $0=0; //@line 343 "xmltok_impl.c"
        __label__ = 57; break; //@line 343 "xmltok_impl.c"
      case 39: // $bb39
        var $143=$ptr_addr; //@line 345 "xmltok_impl.c"
        var $144=$143+2; //@line 345 "xmltok_impl.c"
        $ptr_addr=$144; //@line 345 "xmltok_impl.c"
        __label__ = 55; break; //@line 345 "xmltok_impl.c"
      case 40: // $bb41
        var $145=$ptr_addr; //@line 349 "xmltok_impl.c"
        var $146=$145; //@line 349 "xmltok_impl.c"
        var $147=HEAP[$146]; //@line 349 "xmltok_impl.c"
        var $148=($147)==0; //@line 349 "xmltok_impl.c"
        if ($148) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 349 "xmltok_impl.c"
      case 41: // $bb42
        var $149=$enc_addr; //@line 349 "xmltok_impl.c"
        var $150=$149; //@line 349 "xmltok_impl.c"
        var $151=$ptr_addr; //@line 349 "xmltok_impl.c"
        var $152=$151+1; //@line 349 "xmltok_impl.c"
        var $153=HEAP[$152]; //@line 349 "xmltok_impl.c"
        var $154=($153); //@line 349 "xmltok_impl.c"
        var $155=$150+76; //@line 349 "xmltok_impl.c"
        var $156=$155+$154; //@line 349 "xmltok_impl.c"
        var $157=HEAP[$156]; //@line 349 "xmltok_impl.c"
        var $158=($157); //@line 349 "xmltok_impl.c"
        $iftmp_1008=$158; //@line 349 "xmltok_impl.c"
        __lastLabel__ = 41; __label__ = 43; break; //@line 349 "xmltok_impl.c"
      case 42: // $bb43
        var $159=$ptr_addr; //@line 349 "xmltok_impl.c"
        var $160=$159+1; //@line 349 "xmltok_impl.c"
        var $161=HEAP[$160]; //@line 349 "xmltok_impl.c"
        var $162=($161); //@line 349 "xmltok_impl.c"
        var $163=$ptr_addr; //@line 349 "xmltok_impl.c"
        var $164=$163; //@line 349 "xmltok_impl.c"
        var $165=HEAP[$164]; //@line 349 "xmltok_impl.c"
        var $166=($165); //@line 349 "xmltok_impl.c"
        var $167=((($166)) & 255); //@line 349 "xmltok_impl.c"
        var $168=((($162)) & 255); //@line 349 "xmltok_impl.c"
        var $169=_unicode_byte_type($167, $168); //@line 349 "xmltok_impl.c"
        $iftmp_1008=$169; //@line 349 "xmltok_impl.c"
        __lastLabel__ = 42; __label__ = 43; break; //@line 349 "xmltok_impl.c"
      case 43: // $bb44
        var $170=__lastLabel__ == 42 ? $169 : ($158);
        if ($170 == 0) {
          __label__ = 53; break;
        }
        else if ($170 == 1) {
          __label__ = 53; break;
        }
        else if ($170 == 4) {
          __label__ = 53; break;
        }
        else if ($170 == 5) {
          __label__ = 44; break;
        }
        else if ($170 == 6) {
          __label__ = 47; break;
        }
        else if ($170 == 7) {
          __label__ = 50; break;
        }
        else if ($170 == 8) {
          __label__ = 53; break;
        }
        else if ($170 == 9) {
          __label__ = 53; break;
        }
        else if ($170 == 10) {
          __label__ = 53; break;
        }
        else {
        __label__ = 54; break;
        }
        
      case 44: // $bb45
        var $171=$end_addr; //@line 358 "xmltok_impl.c"
        var $172=($171); //@line 358 "xmltok_impl.c"
        var $173=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $174=($173); //@line 358 "xmltok_impl.c"
        var $175=($172) - ($174); //@line 358 "xmltok_impl.c"
        var $176=($175) <= 1; //@line 358 "xmltok_impl.c"
        if ($176) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 358 "xmltok_impl.c"
      case 45: // $bb46
        var $177=$nextTokPtr_addr; //@line 358 "xmltok_impl.c"
        var $178=$ptr_addr; //@line 358 "xmltok_impl.c"
        HEAP[$177]=$178; //@line 358 "xmltok_impl.c"
        $0=6; //@line 358 "xmltok_impl.c"
        __label__ = 57; break; //@line 358 "xmltok_impl.c"
      case 46: // $bb47
        var $179=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $180=$179+2; //@line 358 "xmltok_impl.c"
        $ptr_addr=$180; //@line 358 "xmltok_impl.c"
        __label__ = 55; break; //@line 358 "xmltok_impl.c"
      case 47: // $bb48
        var $181=$end_addr; //@line 358 "xmltok_impl.c"
        var $182=($181); //@line 358 "xmltok_impl.c"
        var $183=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $184=($183); //@line 358 "xmltok_impl.c"
        var $185=($182) - ($184); //@line 358 "xmltok_impl.c"
        var $186=($185) <= 2; //@line 358 "xmltok_impl.c"
        if ($186) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 358 "xmltok_impl.c"
      case 48: // $bb49
        var $187=$nextTokPtr_addr; //@line 358 "xmltok_impl.c"
        var $188=$ptr_addr; //@line 358 "xmltok_impl.c"
        HEAP[$187]=$188; //@line 358 "xmltok_impl.c"
        $0=6; //@line 358 "xmltok_impl.c"
        __label__ = 57; break; //@line 358 "xmltok_impl.c"
      case 49: // $bb50
        var $189=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $190=$189+3; //@line 358 "xmltok_impl.c"
        $ptr_addr=$190; //@line 358 "xmltok_impl.c"
        __label__ = 55; break; //@line 358 "xmltok_impl.c"
      case 50: // $bb51
        var $191=$end_addr; //@line 358 "xmltok_impl.c"
        var $192=($191); //@line 358 "xmltok_impl.c"
        var $193=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $194=($193); //@line 358 "xmltok_impl.c"
        var $195=($192) - ($194); //@line 358 "xmltok_impl.c"
        var $196=($195) <= 3; //@line 358 "xmltok_impl.c"
        if ($196) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 358 "xmltok_impl.c"
      case 51: // $bb52
        var $197=$nextTokPtr_addr; //@line 358 "xmltok_impl.c"
        var $198=$ptr_addr; //@line 358 "xmltok_impl.c"
        HEAP[$197]=$198; //@line 358 "xmltok_impl.c"
        $0=6; //@line 358 "xmltok_impl.c"
        __label__ = 57; break; //@line 358 "xmltok_impl.c"
      case 52: // $bb53
        var $199=$ptr_addr; //@line 358 "xmltok_impl.c"
        var $200=$199+4; //@line 358 "xmltok_impl.c"
        $ptr_addr=$200; //@line 358 "xmltok_impl.c"
        __label__ = 55; break; //@line 358 "xmltok_impl.c"
      case 53: // $bb54
        var $201=$nextTokPtr_addr; //@line 366 "xmltok_impl.c"
        var $202=$ptr_addr; //@line 366 "xmltok_impl.c"
        HEAP[$201]=$202; //@line 366 "xmltok_impl.c"
        $0=6; //@line 367 "xmltok_impl.c"
        __label__ = 57; break; //@line 367 "xmltok_impl.c"
      case 54: // $bb55
        var $203=$ptr_addr; //@line 369 "xmltok_impl.c"
        var $204=$203+2; //@line 369 "xmltok_impl.c"
        $ptr_addr=$204; //@line 369 "xmltok_impl.c"
        __label__ = 55; break; //@line 369 "xmltok_impl.c"
      case 55: // $bb56
        var $205=$ptr_addr; //@line 348 "xmltok_impl.c"
        var $206=$end_addr; //@line 348 "xmltok_impl.c"
        var $207=($205)!=($206); //@line 348 "xmltok_impl.c"
        if ($207) { __label__ = 40; break; } else { __label__ = 56; break; } //@line 348 "xmltok_impl.c"
      case 56: // $bb57
        var $208=$nextTokPtr_addr; //@line 373 "xmltok_impl.c"
        var $209=$ptr_addr; //@line 373 "xmltok_impl.c"
        HEAP[$208]=$209; //@line 373 "xmltok_impl.c"
        $0=6; //@line 374 "xmltok_impl.c"
        __label__ = 57; break; //@line 374 "xmltok_impl.c"
      case 57: // $bb58
        var $210=$0; //@line 306 "xmltok_impl.c"
        $retval=$210; //@line 306 "xmltok_impl.c"
        var $retval59=$retval; //@line 306 "xmltok_impl.c"
        ;
        return $retval59; //@line 306 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanEndTag($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1032;
        var $iftmp_1024;
        var $iftmp_1016;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 383 "xmltok_impl.c"
        var $2=$end_addr; //@line 383 "xmltok_impl.c"
        var $3=($1)==($2); //@line 383 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 383 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 384 "xmltok_impl.c"
        __label__ = 50; break; //@line 384 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 385 "xmltok_impl.c"
        var $5=$4; //@line 385 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 385 "xmltok_impl.c"
        var $7=($6)==0; //@line 385 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 385 "xmltok_impl.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 385 "xmltok_impl.c"
        var $9=$8; //@line 385 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 385 "xmltok_impl.c"
        var $11=$10+1; //@line 385 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 385 "xmltok_impl.c"
        var $13=($12); //@line 385 "xmltok_impl.c"
        var $14=$9+76; //@line 385 "xmltok_impl.c"
        var $15=$14+$13; //@line 385 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 385 "xmltok_impl.c"
        var $17=($16); //@line 385 "xmltok_impl.c"
        $iftmp_1016=$17; //@line 385 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 385 "xmltok_impl.c"
      case 4: // $bb3
        var $18=$ptr_addr; //@line 385 "xmltok_impl.c"
        var $19=$18+1; //@line 385 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 385 "xmltok_impl.c"
        var $21=($20); //@line 385 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 385 "xmltok_impl.c"
        var $23=$22; //@line 385 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 385 "xmltok_impl.c"
        var $25=($24); //@line 385 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 385 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 385 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 385 "xmltok_impl.c"
        $iftmp_1016=$28; //@line 385 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 385 "xmltok_impl.c"
      case 5: // $bb4
        var $29=__lastLabel__ == 4 ? $28 : ($17);
        if ($29 == 5) {
          __label__ = 9; break;
        }
        else if ($29 == 6) {
          __label__ = 12; break;
        }
        else if ($29 == 7) {
          __label__ = 15; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 6: // $bb5
        var $30=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $31=$30; //@line 386 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 386 "xmltok_impl.c"
        var $33=($32); //@line 386 "xmltok_impl.c"
        var $34=_nmstrtPages+$33; //@line 386 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 386 "xmltok_impl.c"
        var $36=($35); //@line 386 "xmltok_impl.c"
        var $37=($36) * 8;
        var $38=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $39=$38+1; //@line 386 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 386 "xmltok_impl.c"
        var $41=($40) >>> 5; //@line 386 "xmltok_impl.c"
        var $42=($41); //@line 386 "xmltok_impl.c"
        var $43=($42) + ($37); //@line 386 "xmltok_impl.c"
        var $44=_namingBitmap+$43*4; //@line 386 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 386 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $47=$46+1; //@line 386 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 386 "xmltok_impl.c"
        var $49=($48); //@line 386 "xmltok_impl.c"
        var $50=($49) & 31; //@line 386 "xmltok_impl.c"
        var $51=1 << ($50); //@line 386 "xmltok_impl.c"
        var $52=($51) & ($45); //@line 386 "xmltok_impl.c"
        var $53=($52)==0; //@line 386 "xmltok_impl.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 386 "xmltok_impl.c"
      case 7: // $bb6
        var $54=$nextTokPtr_addr; //@line 386 "xmltok_impl.c"
        var $55=$ptr_addr; //@line 386 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 386 "xmltok_impl.c"
        $0=0; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 8: // $bb7
        var $56=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $57=$56+2; //@line 386 "xmltok_impl.c"
        $ptr_addr=$57; //@line 386 "xmltok_impl.c"
        __label__ = 48; break; //@line 386 "xmltok_impl.c"
      case 9: // $bb8
        var $58=$end_addr; //@line 386 "xmltok_impl.c"
        var $59=($58); //@line 386 "xmltok_impl.c"
        var $60=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $61=($60); //@line 386 "xmltok_impl.c"
        var $62=($59) - ($61); //@line 386 "xmltok_impl.c"
        var $63=($62) <= 1; //@line 386 "xmltok_impl.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 386 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 11: // $bb10
        var $64=$nextTokPtr_addr; //@line 386 "xmltok_impl.c"
        var $65=$ptr_addr; //@line 386 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 386 "xmltok_impl.c"
        $0=0; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 12: // $bb11
        var $66=$end_addr; //@line 386 "xmltok_impl.c"
        var $67=($66); //@line 386 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $69=($68); //@line 386 "xmltok_impl.c"
        var $70=($67) - ($69); //@line 386 "xmltok_impl.c"
        var $71=($70) <= 2; //@line 386 "xmltok_impl.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 386 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 14: // $bb13
        var $72=$nextTokPtr_addr; //@line 386 "xmltok_impl.c"
        var $73=$ptr_addr; //@line 386 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 386 "xmltok_impl.c"
        $0=0; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 15: // $bb14
        var $74=$end_addr; //@line 386 "xmltok_impl.c"
        var $75=($74); //@line 386 "xmltok_impl.c"
        var $76=$ptr_addr; //@line 386 "xmltok_impl.c"
        var $77=($76); //@line 386 "xmltok_impl.c"
        var $78=($75) - ($77); //@line 386 "xmltok_impl.c"
        var $79=($78) <= 3; //@line 386 "xmltok_impl.c"
        if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 386 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 17: // $bb16
        var $80=$nextTokPtr_addr; //@line 386 "xmltok_impl.c"
        var $81=$ptr_addr; //@line 386 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 386 "xmltok_impl.c"
        $0=0; //@line 386 "xmltok_impl.c"
        __label__ = 50; break; //@line 386 "xmltok_impl.c"
      case 18: // $bb17
        var $82=$nextTokPtr_addr; //@line 388 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 388 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 388 "xmltok_impl.c"
        $0=0; //@line 389 "xmltok_impl.c"
        __label__ = 50; break; //@line 389 "xmltok_impl.c"
      case 19: // $bb18
        var $84=$ptr_addr; //@line 392 "xmltok_impl.c"
        var $85=$84; //@line 392 "xmltok_impl.c"
        var $86=HEAP[$85]; //@line 392 "xmltok_impl.c"
        var $87=($86)==0; //@line 392 "xmltok_impl.c"
        if ($87) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 392 "xmltok_impl.c"
      case 20: // $bb19
        var $88=$enc_addr; //@line 392 "xmltok_impl.c"
        var $89=$88; //@line 392 "xmltok_impl.c"
        var $90=$ptr_addr; //@line 392 "xmltok_impl.c"
        var $91=$90+1; //@line 392 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 392 "xmltok_impl.c"
        var $93=($92); //@line 392 "xmltok_impl.c"
        var $94=$89+76; //@line 392 "xmltok_impl.c"
        var $95=$94+$93; //@line 392 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 392 "xmltok_impl.c"
        var $97=($96); //@line 392 "xmltok_impl.c"
        $iftmp_1024=$97; //@line 392 "xmltok_impl.c"
        __lastLabel__ = 20; __label__ = 22; break; //@line 392 "xmltok_impl.c"
      case 21: // $bb20
        var $98=$ptr_addr; //@line 392 "xmltok_impl.c"
        var $99=$98+1; //@line 392 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 392 "xmltok_impl.c"
        var $101=($100); //@line 392 "xmltok_impl.c"
        var $102=$ptr_addr; //@line 392 "xmltok_impl.c"
        var $103=$102; //@line 392 "xmltok_impl.c"
        var $104=HEAP[$103]; //@line 392 "xmltok_impl.c"
        var $105=($104); //@line 392 "xmltok_impl.c"
        var $106=((($105)) & 255); //@line 392 "xmltok_impl.c"
        var $107=((($101)) & 255); //@line 392 "xmltok_impl.c"
        var $108=_unicode_byte_type($106, $107); //@line 392 "xmltok_impl.c"
        $iftmp_1024=$108; //@line 392 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 22; break; //@line 392 "xmltok_impl.c"
      case 22: // $bb21
        var $109=__lastLabel__ == 21 ? $108 : ($97);
        if ($109 == 5) {
          __label__ = 26; break;
        }
        else if ($109 == 6) {
          __label__ = 29; break;
        }
        else if ($109 == 7) {
          __label__ = 32; break;
        }
        else if ($109 == 9) {
          __label__ = 35; break;
        }
        else if ($109 == 10) {
          __label__ = 35; break;
        }
        else if ($109 == 11) {
          __label__ = 46; break;
        }
        else if ($109 == 21) {
          __label__ = 35; break;
        }
        else if ($109 == 22) {
          __label__ = 25; break;
        }
        else if ($109 == 23) {
          __label__ = 45; break;
        }
        else if ($109 == 24) {
          __label__ = 25; break;
        }
        else if ($109 == 25) {
          __label__ = 25; break;
        }
        else if ($109 == 26) {
          __label__ = 25; break;
        }
        else if ($109 == 27) {
          __label__ = 25; break;
        }
        else if ($109 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 47; break;
        }
        
      case 23: // $bb22
        var $110=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $111=$110; //@line 393 "xmltok_impl.c"
        var $112=HEAP[$111]; //@line 393 "xmltok_impl.c"
        var $113=($112); //@line 393 "xmltok_impl.c"
        var $114=_namePages+$113; //@line 393 "xmltok_impl.c"
        var $115=HEAP[$114]; //@line 393 "xmltok_impl.c"
        var $116=($115); //@line 393 "xmltok_impl.c"
        var $117=($116) * 8;
        var $118=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $119=$118+1; //@line 393 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 393 "xmltok_impl.c"
        var $121=($120) >>> 5; //@line 393 "xmltok_impl.c"
        var $122=($121); //@line 393 "xmltok_impl.c"
        var $123=($122) + ($117); //@line 393 "xmltok_impl.c"
        var $124=_namingBitmap+$123*4; //@line 393 "xmltok_impl.c"
        var $125=HEAP[$124]; //@line 393 "xmltok_impl.c"
        var $126=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $127=$126+1; //@line 393 "xmltok_impl.c"
        var $128=HEAP[$127]; //@line 393 "xmltok_impl.c"
        var $129=($128); //@line 393 "xmltok_impl.c"
        var $130=($129) & 31; //@line 393 "xmltok_impl.c"
        var $131=1 << ($130); //@line 393 "xmltok_impl.c"
        var $132=($131) & ($125); //@line 393 "xmltok_impl.c"
        var $133=($132)==0; //@line 393 "xmltok_impl.c"
        if ($133) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 393 "xmltok_impl.c"
      case 24: // $bb23
        var $134=$nextTokPtr_addr; //@line 393 "xmltok_impl.c"
        var $135=$ptr_addr; //@line 393 "xmltok_impl.c"
        HEAP[$134]=$135; //@line 393 "xmltok_impl.c"
        $0=0; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 25: // $bb24
        var $136=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $137=$136+2; //@line 393 "xmltok_impl.c"
        $ptr_addr=$137; //@line 393 "xmltok_impl.c"
        __label__ = 48; break; //@line 393 "xmltok_impl.c"
      case 26: // $bb25
        var $138=$end_addr; //@line 393 "xmltok_impl.c"
        var $139=($138); //@line 393 "xmltok_impl.c"
        var $140=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $141=($140); //@line 393 "xmltok_impl.c"
        var $142=($139) - ($141); //@line 393 "xmltok_impl.c"
        var $143=($142) <= 1; //@line 393 "xmltok_impl.c"
        if ($143) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 393 "xmltok_impl.c"
      case 27: // $bb26
        $0=-2; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 28: // $bb27
        var $144=$nextTokPtr_addr; //@line 393 "xmltok_impl.c"
        var $145=$ptr_addr; //@line 393 "xmltok_impl.c"
        HEAP[$144]=$145; //@line 393 "xmltok_impl.c"
        $0=0; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 29: // $bb28
        var $146=$end_addr; //@line 393 "xmltok_impl.c"
        var $147=($146); //@line 393 "xmltok_impl.c"
        var $148=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $149=($148); //@line 393 "xmltok_impl.c"
        var $150=($147) - ($149); //@line 393 "xmltok_impl.c"
        var $151=($150) <= 2; //@line 393 "xmltok_impl.c"
        if ($151) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 393 "xmltok_impl.c"
      case 30: // $bb29
        $0=-2; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 31: // $bb30
        var $152=$nextTokPtr_addr; //@line 393 "xmltok_impl.c"
        var $153=$ptr_addr; //@line 393 "xmltok_impl.c"
        HEAP[$152]=$153; //@line 393 "xmltok_impl.c"
        $0=0; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 32: // $bb31
        var $154=$end_addr; //@line 393 "xmltok_impl.c"
        var $155=($154); //@line 393 "xmltok_impl.c"
        var $156=$ptr_addr; //@line 393 "xmltok_impl.c"
        var $157=($156); //@line 393 "xmltok_impl.c"
        var $158=($155) - ($157); //@line 393 "xmltok_impl.c"
        var $159=($158) <= 3; //@line 393 "xmltok_impl.c"
        if ($159) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 393 "xmltok_impl.c"
      case 33: // $bb32
        $0=-2; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 34: // $bb33
        var $160=$nextTokPtr_addr; //@line 393 "xmltok_impl.c"
        var $161=$ptr_addr; //@line 393 "xmltok_impl.c"
        HEAP[$160]=$161; //@line 393 "xmltok_impl.c"
        $0=0; //@line 393 "xmltok_impl.c"
        __label__ = 50; break; //@line 393 "xmltok_impl.c"
      case 35: // $bb34
        var $162=$ptr_addr; //@line 395 "xmltok_impl.c"
        var $163=$162+2; //@line 395 "xmltok_impl.c"
        $ptr_addr=$163; //@line 395 "xmltok_impl.c"
        __label__ = 43; break; //@line 395 "xmltok_impl.c"
      case 36: // $bb35
        var $164=$ptr_addr; //@line 396 "xmltok_impl.c"
        var $165=$164; //@line 396 "xmltok_impl.c"
        var $166=HEAP[$165]; //@line 396 "xmltok_impl.c"
        var $167=($166)==0; //@line 396 "xmltok_impl.c"
        if ($167) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 396 "xmltok_impl.c"
      case 37: // $bb36
        var $168=$enc_addr; //@line 396 "xmltok_impl.c"
        var $169=$168; //@line 396 "xmltok_impl.c"
        var $170=$ptr_addr; //@line 396 "xmltok_impl.c"
        var $171=$170+1; //@line 396 "xmltok_impl.c"
        var $172=HEAP[$171]; //@line 396 "xmltok_impl.c"
        var $173=($172); //@line 396 "xmltok_impl.c"
        var $174=$169+76; //@line 396 "xmltok_impl.c"
        var $175=$174+$173; //@line 396 "xmltok_impl.c"
        var $176=HEAP[$175]; //@line 396 "xmltok_impl.c"
        var $177=($176); //@line 396 "xmltok_impl.c"
        $iftmp_1032=$177; //@line 396 "xmltok_impl.c"
        __lastLabel__ = 37; __label__ = 39; break; //@line 396 "xmltok_impl.c"
      case 38: // $bb37
        var $178=$ptr_addr; //@line 396 "xmltok_impl.c"
        var $179=$178+1; //@line 396 "xmltok_impl.c"
        var $180=HEAP[$179]; //@line 396 "xmltok_impl.c"
        var $181=($180); //@line 396 "xmltok_impl.c"
        var $182=$ptr_addr; //@line 396 "xmltok_impl.c"
        var $183=$182; //@line 396 "xmltok_impl.c"
        var $184=HEAP[$183]; //@line 396 "xmltok_impl.c"
        var $185=($184); //@line 396 "xmltok_impl.c"
        var $186=((($185)) & 255); //@line 396 "xmltok_impl.c"
        var $187=((($181)) & 255); //@line 396 "xmltok_impl.c"
        var $188=_unicode_byte_type($186, $187); //@line 396 "xmltok_impl.c"
        $iftmp_1032=$188; //@line 396 "xmltok_impl.c"
        __lastLabel__ = 38; __label__ = 39; break; //@line 396 "xmltok_impl.c"
      case 39: // $bb38
        var $189=__lastLabel__ == 38 ? $188 : ($177);
        if ($189 == 9) {
          __label__ = 40; break;
        }
        else if ($189 == 10) {
          __label__ = 40; break;
        }
        else if ($189 == 11) {
          __label__ = 41; break;
        }
        else if ($189 == 21) {
          __label__ = 40; break;
        }
        else {
        __label__ = 42; break;
        }
        
      case 40: // $bb39
        var $190=$ptr_addr; //@line 395 "xmltok_impl.c"
        var $191=$190+2; //@line 395 "xmltok_impl.c"
        $ptr_addr=$191; //@line 395 "xmltok_impl.c"
        __label__ = 43; break; //@line 395 "xmltok_impl.c"
      case 41: // $bb40
        var $192=$ptr_addr; //@line 400 "xmltok_impl.c"
        var $193=$192+2; //@line 400 "xmltok_impl.c"
        var $194=$nextTokPtr_addr; //@line 400 "xmltok_impl.c"
        HEAP[$194]=$193; //@line 400 "xmltok_impl.c"
        $0=5; //@line 401 "xmltok_impl.c"
        __label__ = 50; break; //@line 401 "xmltok_impl.c"
      case 42: // $bb41
        var $195=$nextTokPtr_addr; //@line 403 "xmltok_impl.c"
        var $196=$ptr_addr; //@line 403 "xmltok_impl.c"
        HEAP[$195]=$196; //@line 403 "xmltok_impl.c"
        $0=0; //@line 404 "xmltok_impl.c"
        __label__ = 50; break; //@line 404 "xmltok_impl.c"
      case 43: // $bb42
        var $197=$ptr_addr; //@line 395 "xmltok_impl.c"
        var $198=$end_addr; //@line 395 "xmltok_impl.c"
        var $199=($197)!=($198); //@line 395 "xmltok_impl.c"
        if ($199) { __label__ = 36; break; } else { __label__ = 44; break; } //@line 395 "xmltok_impl.c"
      case 44: // $bb43
        $0=-1; //@line 407 "xmltok_impl.c"
        __label__ = 50; break; //@line 407 "xmltok_impl.c"
      case 45: // $bb44
        var $200=$ptr_addr; //@line 412 "xmltok_impl.c"
        var $201=$200+2; //@line 412 "xmltok_impl.c"
        $ptr_addr=$201; //@line 412 "xmltok_impl.c"
        __label__ = 48; break; //@line 412 "xmltok_impl.c"
      case 46: // $bb45
        var $202=$ptr_addr; //@line 416 "xmltok_impl.c"
        var $203=$202+2; //@line 416 "xmltok_impl.c"
        var $204=$nextTokPtr_addr; //@line 416 "xmltok_impl.c"
        HEAP[$204]=$203; //@line 416 "xmltok_impl.c"
        $0=5; //@line 417 "xmltok_impl.c"
        __label__ = 50; break; //@line 417 "xmltok_impl.c"
      case 47: // $bb46
        var $205=$nextTokPtr_addr; //@line 419 "xmltok_impl.c"
        var $206=$ptr_addr; //@line 419 "xmltok_impl.c"
        HEAP[$205]=$206; //@line 419 "xmltok_impl.c"
        $0=0; //@line 420 "xmltok_impl.c"
        __label__ = 50; break; //@line 420 "xmltok_impl.c"
      case 48: // $bb47
        var $207=$ptr_addr; //@line 391 "xmltok_impl.c"
        var $208=$end_addr; //@line 391 "xmltok_impl.c"
        var $209=($207)!=($208); //@line 391 "xmltok_impl.c"
        if ($209) { __label__ = 19; break; } else { __label__ = 49; break; } //@line 391 "xmltok_impl.c"
      case 49: // $bb48
        $0=-1; //@line 423 "xmltok_impl.c"
        __label__ = 50; break; //@line 423 "xmltok_impl.c"
      case 50: // $bb49
        var $210=$0; //@line 384 "xmltok_impl.c"
        $retval=$210; //@line 384 "xmltok_impl.c"
        var $retval50=$retval; //@line 384 "xmltok_impl.c"
        ;
        return $retval50; //@line 384 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanHexCharRef($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1036;
        var $0;
        var $iftmp_1034;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 432 "xmltok_impl.c"
        var $2=$end_addr; //@line 432 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 432 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 15; break; } //@line 432 "xmltok_impl.c"
      case 1: // $bb
        var $4=$ptr_addr; //@line 433 "xmltok_impl.c"
        var $5=$4; //@line 433 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 433 "xmltok_impl.c"
        var $7=($6)==0; //@line 433 "xmltok_impl.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 433 "xmltok_impl.c"
      case 2: // $bb1
        var $8=$enc_addr; //@line 433 "xmltok_impl.c"
        var $9=$8; //@line 433 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 433 "xmltok_impl.c"
        var $11=$10+1; //@line 433 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 433 "xmltok_impl.c"
        var $13=($12); //@line 433 "xmltok_impl.c"
        var $14=$9+76; //@line 433 "xmltok_impl.c"
        var $15=$14+$13; //@line 433 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 433 "xmltok_impl.c"
        var $17=($16); //@line 433 "xmltok_impl.c"
        $iftmp_1034=$17; //@line 433 "xmltok_impl.c"
        __label__ = 4; break; //@line 433 "xmltok_impl.c"
      case 3: // $bb2
        var $18=$ptr_addr; //@line 433 "xmltok_impl.c"
        var $19=$18+1; //@line 433 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 433 "xmltok_impl.c"
        var $21=($20); //@line 433 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 433 "xmltok_impl.c"
        var $23=$22; //@line 433 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 433 "xmltok_impl.c"
        var $25=($24); //@line 433 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 433 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 433 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 433 "xmltok_impl.c"
        $iftmp_1034=$28; //@line 433 "xmltok_impl.c"
        __label__ = 4; break; //@line 433 "xmltok_impl.c"
      case 4: // $bb3
        var $29=$iftmp_1034; //@line 433 "xmltok_impl.c"
        var $_off=($29) + -24;
        var $switch=($_off) < 2;
        if ($switch) { __label__ = 5; break; } else { __label__ = 6; break; }
      case 5: // $bb4
        var $30=$ptr_addr; //@line 441 "xmltok_impl.c"
        var $31=$30+2; //@line 441 "xmltok_impl.c"
        $ptr_addr=$31; //@line 441 "xmltok_impl.c"
        __label__ = 14; break; //@line 441 "xmltok_impl.c"
      case 6: // $bb5
        var $32=$nextTokPtr_addr; //@line 438 "xmltok_impl.c"
        var $33=$ptr_addr; //@line 438 "xmltok_impl.c"
        HEAP[$32]=$33; //@line 438 "xmltok_impl.c"
        $0=0; //@line 439 "xmltok_impl.c"
        __label__ = 16; break; //@line 439 "xmltok_impl.c"
      case 7: // $bb6
        var $34=$ptr_addr; //@line 442 "xmltok_impl.c"
        var $35=$34; //@line 442 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 442 "xmltok_impl.c"
        var $37=($36)==0; //@line 442 "xmltok_impl.c"
        if ($37) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 442 "xmltok_impl.c"
      case 8: // $bb7
        var $38=$enc_addr; //@line 442 "xmltok_impl.c"
        var $39=$38; //@line 442 "xmltok_impl.c"
        var $40=$ptr_addr; //@line 442 "xmltok_impl.c"
        var $41=$40+1; //@line 442 "xmltok_impl.c"
        var $42=HEAP[$41]; //@line 442 "xmltok_impl.c"
        var $43=($42); //@line 442 "xmltok_impl.c"
        var $44=$39+76; //@line 442 "xmltok_impl.c"
        var $45=$44+$43; //@line 442 "xmltok_impl.c"
        var $46=HEAP[$45]; //@line 442 "xmltok_impl.c"
        var $47=($46); //@line 442 "xmltok_impl.c"
        $iftmp_1036=$47; //@line 442 "xmltok_impl.c"
        __lastLabel__ = 8; __label__ = 10; break; //@line 442 "xmltok_impl.c"
      case 9: // $bb8
        var $48=$ptr_addr; //@line 442 "xmltok_impl.c"
        var $49=$48+1; //@line 442 "xmltok_impl.c"
        var $50=HEAP[$49]; //@line 442 "xmltok_impl.c"
        var $51=($50); //@line 442 "xmltok_impl.c"
        var $52=$ptr_addr; //@line 442 "xmltok_impl.c"
        var $53=$52; //@line 442 "xmltok_impl.c"
        var $54=HEAP[$53]; //@line 442 "xmltok_impl.c"
        var $55=($54); //@line 442 "xmltok_impl.c"
        var $56=((($55)) & 255); //@line 442 "xmltok_impl.c"
        var $57=((($51)) & 255); //@line 442 "xmltok_impl.c"
        var $58=_unicode_byte_type($56, $57); //@line 442 "xmltok_impl.c"
        $iftmp_1036=$58; //@line 442 "xmltok_impl.c"
        __lastLabel__ = 9; __label__ = 10; break; //@line 442 "xmltok_impl.c"
      case 10: // $bb9
        var $59=__lastLabel__ == 9 ? $58 : ($47);
        if ($59 == 18) {
          __label__ = 12; break;
        }
        else if ($59 == 24) {
          __label__ = 11; break;
        }
        else if ($59 == 25) {
          __label__ = 11; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 11: // $bb10
        var $60=$ptr_addr; //@line 441 "xmltok_impl.c"
        var $61=$60+2; //@line 441 "xmltok_impl.c"
        $ptr_addr=$61; //@line 441 "xmltok_impl.c"
        __label__ = 14; break; //@line 441 "xmltok_impl.c"
      case 12: // $bb11
        var $62=$ptr_addr; //@line 447 "xmltok_impl.c"
        var $63=$62+2; //@line 447 "xmltok_impl.c"
        var $64=$nextTokPtr_addr; //@line 447 "xmltok_impl.c"
        HEAP[$64]=$63; //@line 447 "xmltok_impl.c"
        $0=10; //@line 448 "xmltok_impl.c"
        __label__ = 16; break; //@line 448 "xmltok_impl.c"
      case 13: // $bb12
        var $65=$nextTokPtr_addr; //@line 450 "xmltok_impl.c"
        var $66=$ptr_addr; //@line 450 "xmltok_impl.c"
        HEAP[$65]=$66; //@line 450 "xmltok_impl.c"
        $0=0; //@line 451 "xmltok_impl.c"
        __label__ = 16; break; //@line 451 "xmltok_impl.c"
      case 14: // $bb13
        var $67=$ptr_addr; //@line 441 "xmltok_impl.c"
        var $68=$end_addr; //@line 441 "xmltok_impl.c"
        var $69=($67)!=($68); //@line 441 "xmltok_impl.c"
        if ($69) { __label__ = 7; break; } else { __label__ = 15; break; } //@line 441 "xmltok_impl.c"
      case 15: // $bb14
        $0=-1; //@line 455 "xmltok_impl.c"
        __label__ = 16; break; //@line 455 "xmltok_impl.c"
      case 16: // $bb15
        var $70=$0; //@line 439 "xmltok_impl.c"
        $retval=$70; //@line 439 "xmltok_impl.c"
        var $retval16=$retval; //@line 439 "xmltok_impl.c"
        ;
        return $retval16; //@line 439 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanCharRef($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1040;
        var $iftmp_1038;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 464 "xmltok_impl.c"
        var $2=$end_addr; //@line 464 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 464 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 18; break; } //@line 464 "xmltok_impl.c"
      case 1: // $bb
        var $4=$ptr_addr; //@line 465 "xmltok_impl.c"
        var $5=$4; //@line 465 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 465 "xmltok_impl.c"
        var $7=($6)==0; //@line 465 "xmltok_impl.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 465 "xmltok_impl.c"
      case 2: // $bb1
        var $8=$ptr_addr; //@line 465 "xmltok_impl.c"
        var $9=$8+1; //@line 465 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 465 "xmltok_impl.c"
        var $11=($10)==120; //@line 465 "xmltok_impl.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 465 "xmltok_impl.c"
      case 3: // $bb2
        var $12=$ptr_addr; //@line 466 "xmltok_impl.c"
        var $13=$12+2; //@line 466 "xmltok_impl.c"
        var $14=$enc_addr; //@line 466 "xmltok_impl.c"
        var $15=$end_addr; //@line 466 "xmltok_impl.c"
        var $16=$nextTokPtr_addr; //@line 466 "xmltok_impl.c"
        var $17=_big2_scanHexCharRef($14, $13, $15, $16); //@line 466 "xmltok_impl.c"
        $0=$17; //@line 466 "xmltok_impl.c"
        __label__ = 19; break; //@line 466 "xmltok_impl.c"
      case 4: // $bb3
        var $18=$ptr_addr; //@line 467 "xmltok_impl.c"
        var $19=$18; //@line 467 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 467 "xmltok_impl.c"
        var $21=($20)==0; //@line 467 "xmltok_impl.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 467 "xmltok_impl.c"
      case 5: // $bb4
        var $22=$enc_addr; //@line 467 "xmltok_impl.c"
        var $23=$22; //@line 467 "xmltok_impl.c"
        var $24=$ptr_addr; //@line 467 "xmltok_impl.c"
        var $25=$24+1; //@line 467 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 467 "xmltok_impl.c"
        var $27=($26); //@line 467 "xmltok_impl.c"
        var $28=$23+76; //@line 467 "xmltok_impl.c"
        var $29=$28+$27; //@line 467 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 467 "xmltok_impl.c"
        var $31=($30); //@line 467 "xmltok_impl.c"
        $iftmp_1038=$31; //@line 467 "xmltok_impl.c"
        __lastLabel__ = 5; __label__ = 7; break; //@line 467 "xmltok_impl.c"
      case 6: // $bb5
        var $32=$ptr_addr; //@line 467 "xmltok_impl.c"
        var $33=$32+1; //@line 467 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 467 "xmltok_impl.c"
        var $35=($34); //@line 467 "xmltok_impl.c"
        var $36=$ptr_addr; //@line 467 "xmltok_impl.c"
        var $37=$36; //@line 467 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 467 "xmltok_impl.c"
        var $39=($38); //@line 467 "xmltok_impl.c"
        var $40=((($39)) & 255); //@line 467 "xmltok_impl.c"
        var $41=((($35)) & 255); //@line 467 "xmltok_impl.c"
        var $42=_unicode_byte_type($40, $41); //@line 467 "xmltok_impl.c"
        $iftmp_1038=$42; //@line 467 "xmltok_impl.c"
        __lastLabel__ = 6; __label__ = 7; break; //@line 467 "xmltok_impl.c"
      case 7: // $bb6
        var $43=__lastLabel__ == 6 ? $42 : ($31);
        var $cond=($43)==25;
        if ($cond) { __label__ = 8; break; } else { __label__ = 9; break; }
      case 8: // $bb7
        var $44=$ptr_addr; //@line 474 "xmltok_impl.c"
        var $45=$44+2; //@line 474 "xmltok_impl.c"
        $ptr_addr=$45; //@line 474 "xmltok_impl.c"
        __label__ = 17; break; //@line 474 "xmltok_impl.c"
      case 9: // $bb8
        var $46=$nextTokPtr_addr; //@line 471 "xmltok_impl.c"
        var $47=$ptr_addr; //@line 471 "xmltok_impl.c"
        HEAP[$46]=$47; //@line 471 "xmltok_impl.c"
        $0=0; //@line 472 "xmltok_impl.c"
        __label__ = 19; break; //@line 472 "xmltok_impl.c"
      case 10: // $bb9
        var $48=$ptr_addr; //@line 475 "xmltok_impl.c"
        var $49=$48; //@line 475 "xmltok_impl.c"
        var $50=HEAP[$49]; //@line 475 "xmltok_impl.c"
        var $51=($50)==0; //@line 475 "xmltok_impl.c"
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 475 "xmltok_impl.c"
      case 11: // $bb10
        var $52=$enc_addr; //@line 475 "xmltok_impl.c"
        var $53=$52; //@line 475 "xmltok_impl.c"
        var $54=$ptr_addr; //@line 475 "xmltok_impl.c"
        var $55=$54+1; //@line 475 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 475 "xmltok_impl.c"
        var $57=($56); //@line 475 "xmltok_impl.c"
        var $58=$53+76; //@line 475 "xmltok_impl.c"
        var $59=$58+$57; //@line 475 "xmltok_impl.c"
        var $60=HEAP[$59]; //@line 475 "xmltok_impl.c"
        var $61=($60); //@line 475 "xmltok_impl.c"
        $iftmp_1040=$61; //@line 475 "xmltok_impl.c"
        __lastLabel__ = 11; __label__ = 13; break; //@line 475 "xmltok_impl.c"
      case 12: // $bb11
        var $62=$ptr_addr; //@line 475 "xmltok_impl.c"
        var $63=$62+1; //@line 475 "xmltok_impl.c"
        var $64=HEAP[$63]; //@line 475 "xmltok_impl.c"
        var $65=($64); //@line 475 "xmltok_impl.c"
        var $66=$ptr_addr; //@line 475 "xmltok_impl.c"
        var $67=$66; //@line 475 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 475 "xmltok_impl.c"
        var $69=($68); //@line 475 "xmltok_impl.c"
        var $70=((($69)) & 255); //@line 475 "xmltok_impl.c"
        var $71=((($65)) & 255); //@line 475 "xmltok_impl.c"
        var $72=_unicode_byte_type($70, $71); //@line 475 "xmltok_impl.c"
        $iftmp_1040=$72; //@line 475 "xmltok_impl.c"
        __lastLabel__ = 12; __label__ = 13; break; //@line 475 "xmltok_impl.c"
      case 13: // $bb12
        var $73=__lastLabel__ == 12 ? $72 : ($61);
        if ($73 == 18) {
          __label__ = 15; break;
        }
        else if ($73 == 25) {
          __label__ = 14; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 14: // $bb13
        var $74=$ptr_addr; //@line 474 "xmltok_impl.c"
        var $75=$74+2; //@line 474 "xmltok_impl.c"
        $ptr_addr=$75; //@line 474 "xmltok_impl.c"
        __label__ = 17; break; //@line 474 "xmltok_impl.c"
      case 15: // $bb14
        var $76=$ptr_addr; //@line 479 "xmltok_impl.c"
        var $77=$76+2; //@line 479 "xmltok_impl.c"
        var $78=$nextTokPtr_addr; //@line 479 "xmltok_impl.c"
        HEAP[$78]=$77; //@line 479 "xmltok_impl.c"
        $0=10; //@line 480 "xmltok_impl.c"
        __label__ = 19; break; //@line 480 "xmltok_impl.c"
      case 16: // $bb15
        var $79=$nextTokPtr_addr; //@line 482 "xmltok_impl.c"
        var $80=$ptr_addr; //@line 482 "xmltok_impl.c"
        HEAP[$79]=$80; //@line 482 "xmltok_impl.c"
        $0=0; //@line 483 "xmltok_impl.c"
        __label__ = 19; break; //@line 483 "xmltok_impl.c"
      case 17: // $bb16
        var $81=$ptr_addr; //@line 474 "xmltok_impl.c"
        var $82=$end_addr; //@line 474 "xmltok_impl.c"
        var $83=($81)!=($82); //@line 474 "xmltok_impl.c"
        if ($83) { __label__ = 10; break; } else { __label__ = 18; break; } //@line 474 "xmltok_impl.c"
      case 18: // $bb17
        $0=-1; //@line 487 "xmltok_impl.c"
        __label__ = 19; break; //@line 487 "xmltok_impl.c"
      case 19: // $bb18
        var $84=$0; //@line 466 "xmltok_impl.c"
        $retval=$84; //@line 466 "xmltok_impl.c"
        var $retval19=$retval; //@line 466 "xmltok_impl.c"
        ;
        return $retval19; //@line 466 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanRef($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1050;
        var $iftmp_1042;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 496 "xmltok_impl.c"
        var $2=$end_addr; //@line 496 "xmltok_impl.c"
        var $3=($1)==($2); //@line 496 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 496 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 497 "xmltok_impl.c"
        __label__ = 40; break; //@line 497 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 498 "xmltok_impl.c"
        var $5=$4; //@line 498 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 498 "xmltok_impl.c"
        var $7=($6)==0; //@line 498 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 498 "xmltok_impl.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 498 "xmltok_impl.c"
        var $9=$8; //@line 498 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 498 "xmltok_impl.c"
        var $11=$10+1; //@line 498 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 498 "xmltok_impl.c"
        var $13=($12); //@line 498 "xmltok_impl.c"
        var $14=$9+76; //@line 498 "xmltok_impl.c"
        var $15=$14+$13; //@line 498 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 498 "xmltok_impl.c"
        var $17=($16); //@line 498 "xmltok_impl.c"
        $iftmp_1042=$17; //@line 498 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 498 "xmltok_impl.c"
      case 4: // $bb3
        var $18=$ptr_addr; //@line 498 "xmltok_impl.c"
        var $19=$18+1; //@line 498 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 498 "xmltok_impl.c"
        var $21=($20); //@line 498 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 498 "xmltok_impl.c"
        var $23=$22; //@line 498 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 498 "xmltok_impl.c"
        var $25=($24); //@line 498 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 498 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 498 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 498 "xmltok_impl.c"
        $iftmp_1042=$28; //@line 498 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 498 "xmltok_impl.c"
      case 5: // $bb4
        var $29=__lastLabel__ == 4 ? $28 : ($17);
        if ($29 == 5) {
          __label__ = 9; break;
        }
        else if ($29 == 6) {
          __label__ = 12; break;
        }
        else if ($29 == 7) {
          __label__ = 15; break;
        }
        else if ($29 == 19) {
          __label__ = 18; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 6: // $bb5
        var $30=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $31=$30; //@line 499 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 499 "xmltok_impl.c"
        var $33=($32); //@line 499 "xmltok_impl.c"
        var $34=_nmstrtPages+$33; //@line 499 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 499 "xmltok_impl.c"
        var $36=($35); //@line 499 "xmltok_impl.c"
        var $37=($36) * 8;
        var $38=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $39=$38+1; //@line 499 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 499 "xmltok_impl.c"
        var $41=($40) >>> 5; //@line 499 "xmltok_impl.c"
        var $42=($41); //@line 499 "xmltok_impl.c"
        var $43=($42) + ($37); //@line 499 "xmltok_impl.c"
        var $44=_namingBitmap+$43*4; //@line 499 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 499 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $47=$46+1; //@line 499 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 499 "xmltok_impl.c"
        var $49=($48); //@line 499 "xmltok_impl.c"
        var $50=($49) & 31; //@line 499 "xmltok_impl.c"
        var $51=1 << ($50); //@line 499 "xmltok_impl.c"
        var $52=($51) & ($45); //@line 499 "xmltok_impl.c"
        var $53=($52)==0; //@line 499 "xmltok_impl.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 499 "xmltok_impl.c"
      case 7: // $bb6
        var $54=$nextTokPtr_addr; //@line 499 "xmltok_impl.c"
        var $55=$ptr_addr; //@line 499 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 499 "xmltok_impl.c"
        $0=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 8: // $bb7
        var $56=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $57=$56+2; //@line 499 "xmltok_impl.c"
        $ptr_addr=$57; //@line 499 "xmltok_impl.c"
        __label__ = 38; break; //@line 499 "xmltok_impl.c"
      case 9: // $bb8
        var $58=$end_addr; //@line 499 "xmltok_impl.c"
        var $59=($58); //@line 499 "xmltok_impl.c"
        var $60=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $61=($60); //@line 499 "xmltok_impl.c"
        var $62=($59) - ($61); //@line 499 "xmltok_impl.c"
        var $63=($62) <= 1; //@line 499 "xmltok_impl.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 499 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 11: // $bb10
        var $64=$nextTokPtr_addr; //@line 499 "xmltok_impl.c"
        var $65=$ptr_addr; //@line 499 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 499 "xmltok_impl.c"
        $0=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 12: // $bb11
        var $66=$end_addr; //@line 499 "xmltok_impl.c"
        var $67=($66); //@line 499 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $69=($68); //@line 499 "xmltok_impl.c"
        var $70=($67) - ($69); //@line 499 "xmltok_impl.c"
        var $71=($70) <= 2; //@line 499 "xmltok_impl.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 499 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 14: // $bb13
        var $72=$nextTokPtr_addr; //@line 499 "xmltok_impl.c"
        var $73=$ptr_addr; //@line 499 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 499 "xmltok_impl.c"
        $0=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 15: // $bb14
        var $74=$end_addr; //@line 499 "xmltok_impl.c"
        var $75=($74); //@line 499 "xmltok_impl.c"
        var $76=$ptr_addr; //@line 499 "xmltok_impl.c"
        var $77=($76); //@line 499 "xmltok_impl.c"
        var $78=($75) - ($77); //@line 499 "xmltok_impl.c"
        var $79=($78) <= 3; //@line 499 "xmltok_impl.c"
        if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 499 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 17: // $bb16
        var $80=$nextTokPtr_addr; //@line 499 "xmltok_impl.c"
        var $81=$ptr_addr; //@line 499 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 499 "xmltok_impl.c"
        $0=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 18: // $bb17
        var $82=$ptr_addr; //@line 501 "xmltok_impl.c"
        var $83=$82+2; //@line 501 "xmltok_impl.c"
        var $84=$enc_addr; //@line 501 "xmltok_impl.c"
        var $85=$end_addr; //@line 501 "xmltok_impl.c"
        var $86=$nextTokPtr_addr; //@line 501 "xmltok_impl.c"
        var $87=_big2_scanCharRef($84, $83, $85, $86); //@line 501 "xmltok_impl.c"
        $0=$87; //@line 501 "xmltok_impl.c"
        __label__ = 40; break; //@line 501 "xmltok_impl.c"
      case 19: // $bb18
        var $88=$nextTokPtr_addr; //@line 503 "xmltok_impl.c"
        var $89=$ptr_addr; //@line 503 "xmltok_impl.c"
        HEAP[$88]=$89; //@line 503 "xmltok_impl.c"
        $0=0; //@line 504 "xmltok_impl.c"
        __label__ = 40; break; //@line 504 "xmltok_impl.c"
      case 20: // $bb19
        var $90=$ptr_addr; //@line 507 "xmltok_impl.c"
        var $91=$90; //@line 507 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 507 "xmltok_impl.c"
        var $93=($92)==0; //@line 507 "xmltok_impl.c"
        if ($93) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 507 "xmltok_impl.c"
      case 21: // $bb20
        var $94=$enc_addr; //@line 507 "xmltok_impl.c"
        var $95=$94; //@line 507 "xmltok_impl.c"
        var $96=$ptr_addr; //@line 507 "xmltok_impl.c"
        var $97=$96+1; //@line 507 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 507 "xmltok_impl.c"
        var $99=($98); //@line 507 "xmltok_impl.c"
        var $100=$95+76; //@line 507 "xmltok_impl.c"
        var $101=$100+$99; //@line 507 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 507 "xmltok_impl.c"
        var $103=($102); //@line 507 "xmltok_impl.c"
        $iftmp_1050=$103; //@line 507 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 23; break; //@line 507 "xmltok_impl.c"
      case 22: // $bb21
        var $104=$ptr_addr; //@line 507 "xmltok_impl.c"
        var $105=$104+1; //@line 507 "xmltok_impl.c"
        var $106=HEAP[$105]; //@line 507 "xmltok_impl.c"
        var $107=($106); //@line 507 "xmltok_impl.c"
        var $108=$ptr_addr; //@line 507 "xmltok_impl.c"
        var $109=$108; //@line 507 "xmltok_impl.c"
        var $110=HEAP[$109]; //@line 507 "xmltok_impl.c"
        var $111=($110); //@line 507 "xmltok_impl.c"
        var $112=((($111)) & 255); //@line 507 "xmltok_impl.c"
        var $113=((($107)) & 255); //@line 507 "xmltok_impl.c"
        var $114=_unicode_byte_type($112, $113); //@line 507 "xmltok_impl.c"
        $iftmp_1050=$114; //@line 507 "xmltok_impl.c"
        __lastLabel__ = 22; __label__ = 23; break; //@line 507 "xmltok_impl.c"
      case 23: // $bb22
        var $115=__lastLabel__ == 22 ? $114 : ($103);
        if ($115 == 5) {
          __label__ = 27; break;
        }
        else if ($115 == 6) {
          __label__ = 30; break;
        }
        else if ($115 == 7) {
          __label__ = 33; break;
        }
        else if ($115 == 18) {
          __label__ = 36; break;
        }
        else if ($115 == 22) {
          __label__ = 26; break;
        }
        else if ($115 == 24) {
          __label__ = 26; break;
        }
        else if ($115 == 25) {
          __label__ = 26; break;
        }
        else if ($115 == 26) {
          __label__ = 26; break;
        }
        else if ($115 == 27) {
          __label__ = 26; break;
        }
        else if ($115 == 29) {
          __label__ = 24; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 24: // $bb23
        var $116=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $117=$116; //@line 508 "xmltok_impl.c"
        var $118=HEAP[$117]; //@line 508 "xmltok_impl.c"
        var $119=($118); //@line 508 "xmltok_impl.c"
        var $120=_namePages+$119; //@line 508 "xmltok_impl.c"
        var $121=HEAP[$120]; //@line 508 "xmltok_impl.c"
        var $122=($121); //@line 508 "xmltok_impl.c"
        var $123=($122) * 8;
        var $124=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $125=$124+1; //@line 508 "xmltok_impl.c"
        var $126=HEAP[$125]; //@line 508 "xmltok_impl.c"
        var $127=($126) >>> 5; //@line 508 "xmltok_impl.c"
        var $128=($127); //@line 508 "xmltok_impl.c"
        var $129=($128) + ($123); //@line 508 "xmltok_impl.c"
        var $130=_namingBitmap+$129*4; //@line 508 "xmltok_impl.c"
        var $131=HEAP[$130]; //@line 508 "xmltok_impl.c"
        var $132=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $133=$132+1; //@line 508 "xmltok_impl.c"
        var $134=HEAP[$133]; //@line 508 "xmltok_impl.c"
        var $135=($134); //@line 508 "xmltok_impl.c"
        var $136=($135) & 31; //@line 508 "xmltok_impl.c"
        var $137=1 << ($136); //@line 508 "xmltok_impl.c"
        var $138=($137) & ($131); //@line 508 "xmltok_impl.c"
        var $139=($138)==0; //@line 508 "xmltok_impl.c"
        if ($139) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 508 "xmltok_impl.c"
      case 25: // $bb24
        var $140=$nextTokPtr_addr; //@line 508 "xmltok_impl.c"
        var $141=$ptr_addr; //@line 508 "xmltok_impl.c"
        HEAP[$140]=$141; //@line 508 "xmltok_impl.c"
        $0=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 26: // $bb25
        var $142=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $143=$142+2; //@line 508 "xmltok_impl.c"
        $ptr_addr=$143; //@line 508 "xmltok_impl.c"
        __label__ = 38; break; //@line 508 "xmltok_impl.c"
      case 27: // $bb26
        var $144=$end_addr; //@line 508 "xmltok_impl.c"
        var $145=($144); //@line 508 "xmltok_impl.c"
        var $146=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $147=($146); //@line 508 "xmltok_impl.c"
        var $148=($145) - ($147); //@line 508 "xmltok_impl.c"
        var $149=($148) <= 1; //@line 508 "xmltok_impl.c"
        if ($149) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 508 "xmltok_impl.c"
      case 28: // $bb27
        $0=-2; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 29: // $bb28
        var $150=$nextTokPtr_addr; //@line 508 "xmltok_impl.c"
        var $151=$ptr_addr; //@line 508 "xmltok_impl.c"
        HEAP[$150]=$151; //@line 508 "xmltok_impl.c"
        $0=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 30: // $bb29
        var $152=$end_addr; //@line 508 "xmltok_impl.c"
        var $153=($152); //@line 508 "xmltok_impl.c"
        var $154=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $155=($154); //@line 508 "xmltok_impl.c"
        var $156=($153) - ($155); //@line 508 "xmltok_impl.c"
        var $157=($156) <= 2; //@line 508 "xmltok_impl.c"
        if ($157) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 508 "xmltok_impl.c"
      case 31: // $bb30
        $0=-2; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 32: // $bb31
        var $158=$nextTokPtr_addr; //@line 508 "xmltok_impl.c"
        var $159=$ptr_addr; //@line 508 "xmltok_impl.c"
        HEAP[$158]=$159; //@line 508 "xmltok_impl.c"
        $0=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 33: // $bb32
        var $160=$end_addr; //@line 508 "xmltok_impl.c"
        var $161=($160); //@line 508 "xmltok_impl.c"
        var $162=$ptr_addr; //@line 508 "xmltok_impl.c"
        var $163=($162); //@line 508 "xmltok_impl.c"
        var $164=($161) - ($163); //@line 508 "xmltok_impl.c"
        var $165=($164) <= 3; //@line 508 "xmltok_impl.c"
        if ($165) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 508 "xmltok_impl.c"
      case 34: // $bb33
        $0=-2; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 35: // $bb34
        var $166=$nextTokPtr_addr; //@line 508 "xmltok_impl.c"
        var $167=$ptr_addr; //@line 508 "xmltok_impl.c"
        HEAP[$166]=$167; //@line 508 "xmltok_impl.c"
        $0=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 36: // $bb35
        var $168=$ptr_addr; //@line 510 "xmltok_impl.c"
        var $169=$168+2; //@line 510 "xmltok_impl.c"
        var $170=$nextTokPtr_addr; //@line 510 "xmltok_impl.c"
        HEAP[$170]=$169; //@line 510 "xmltok_impl.c"
        $0=9; //@line 511 "xmltok_impl.c"
        __label__ = 40; break; //@line 511 "xmltok_impl.c"
      case 37: // $bb36
        var $171=$nextTokPtr_addr; //@line 513 "xmltok_impl.c"
        var $172=$ptr_addr; //@line 513 "xmltok_impl.c"
        HEAP[$171]=$172; //@line 513 "xmltok_impl.c"
        $0=0; //@line 514 "xmltok_impl.c"
        __label__ = 40; break; //@line 514 "xmltok_impl.c"
      case 38: // $bb37
        var $173=$ptr_addr; //@line 506 "xmltok_impl.c"
        var $174=$end_addr; //@line 506 "xmltok_impl.c"
        var $175=($173)!=($174); //@line 506 "xmltok_impl.c"
        if ($175) { __label__ = 20; break; } else { __label__ = 39; break; } //@line 506 "xmltok_impl.c"
      case 39: // $bb38
        $0=-1; //@line 517 "xmltok_impl.c"
        __label__ = 40; break; //@line 517 "xmltok_impl.c"
      case 40: // $bb39
        var $176=$0; //@line 497 "xmltok_impl.c"
        $retval=$176; //@line 497 "xmltok_impl.c"
        var $retval40=$retval; //@line 497 "xmltok_impl.c"
        ;
        return $retval40; //@line 497 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanAtts($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr=__stackBase__;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1171;
        var $iftmp_1162;
        var $iftmp_1134;
        var $iftmp_1125;
        var $iftmp_1116;
        var $iftmp_1087;
        var $0;
        var $iftmp_1058;
        var $hadColon;
        var $t;
        var $open;
        var $t59;
        var $tok;
        $enc_addr=$enc;
        HEAP[$ptr_addr]=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        $hadColon=0; //@line 527 "xmltok_impl.c"
        __label__ = 113; break; //@line 527 "xmltok_impl.c"
      case 1: // $bb
        var $1=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $2=$1; //@line 530 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 530 "xmltok_impl.c"
        var $4=($3)==0; //@line 530 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 530 "xmltok_impl.c"
      case 2: // $bb1
        var $5=$enc_addr; //@line 530 "xmltok_impl.c"
        var $6=$5; //@line 530 "xmltok_impl.c"
        var $7=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $8=$7+1; //@line 530 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 530 "xmltok_impl.c"
        var $10=($9); //@line 530 "xmltok_impl.c"
        var $11=$6+76; //@line 530 "xmltok_impl.c"
        var $12=$11+$10; //@line 530 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 530 "xmltok_impl.c"
        var $14=($13); //@line 530 "xmltok_impl.c"
        $iftmp_1058=$14; //@line 530 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 530 "xmltok_impl.c"
      case 3: // $bb2
        var $15=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $16=$15+1; //@line 530 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 530 "xmltok_impl.c"
        var $18=($17); //@line 530 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $20=$19; //@line 530 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 530 "xmltok_impl.c"
        var $22=($21); //@line 530 "xmltok_impl.c"
        var $23=((($22)) & 255); //@line 530 "xmltok_impl.c"
        var $24=((($18)) & 255); //@line 530 "xmltok_impl.c"
        var $25=_unicode_byte_type($23, $24); //@line 530 "xmltok_impl.c"
        $iftmp_1058=$25; //@line 530 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 530 "xmltok_impl.c"
      case 4: // $bb3
        var $26=__lastLabel__ == 3 ? $25 : ($14);
        if ($26 == 5) {
          __label__ = 8; break;
        }
        else if ($26 == 6) {
          __label__ = 11; break;
        }
        else if ($26 == 7) {
          __label__ = 14; break;
        }
        else if ($26 == 9) {
          __label__ = 38; break;
        }
        else if ($26 == 10) {
          __label__ = 38; break;
        }
        else if ($26 == 14) {
          __label__ = 46; break;
        }
        else if ($26 == 21) {
          __label__ = 38; break;
        }
        else if ($26 == 22) {
          __label__ = 7; break;
        }
        else if ($26 == 23) {
          __label__ = 17; break;
        }
        else if ($26 == 24) {
          __label__ = 7; break;
        }
        else if ($26 == 25) {
          __label__ = 7; break;
        }
        else if ($26 == 26) {
          __label__ = 7; break;
        }
        else if ($26 == 27) {
          __label__ = 7; break;
        }
        else if ($26 == 29) {
          __label__ = 5; break;
        }
        else {
        __label__ = 112; break;
        }
        
      case 5: // $bb4
        var $27=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $28=$27; //@line 531 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 531 "xmltok_impl.c"
        var $30=($29); //@line 531 "xmltok_impl.c"
        var $31=_namePages+$30; //@line 531 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 531 "xmltok_impl.c"
        var $33=($32); //@line 531 "xmltok_impl.c"
        var $34=($33) * 8;
        var $35=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $36=$35+1; //@line 531 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 531 "xmltok_impl.c"
        var $38=($37) >>> 5; //@line 531 "xmltok_impl.c"
        var $39=($38); //@line 531 "xmltok_impl.c"
        var $40=($39) + ($34); //@line 531 "xmltok_impl.c"
        var $41=_namingBitmap+$40*4; //@line 531 "xmltok_impl.c"
        var $42=HEAP[$41]; //@line 531 "xmltok_impl.c"
        var $43=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $44=$43+1; //@line 531 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 531 "xmltok_impl.c"
        var $46=($45); //@line 531 "xmltok_impl.c"
        var $47=($46) & 31; //@line 531 "xmltok_impl.c"
        var $48=1 << ($47); //@line 531 "xmltok_impl.c"
        var $49=($48) & ($42); //@line 531 "xmltok_impl.c"
        var $50=($49)==0; //@line 531 "xmltok_impl.c"
        if ($50) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 531 "xmltok_impl.c"
      case 6: // $bb5
        var $51=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $52=$nextTokPtr_addr; //@line 531 "xmltok_impl.c"
        HEAP[$52]=$51; //@line 531 "xmltok_impl.c"
        $0=0; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 7: // $bb6
        var $53=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $54=$53+2; //@line 531 "xmltok_impl.c"
        HEAP[$ptr_addr]=$54; //@line 531 "xmltok_impl.c"
        __label__ = 113; break; //@line 531 "xmltok_impl.c"
      case 8: // $bb7
        var $55=$end_addr; //@line 531 "xmltok_impl.c"
        var $56=($55); //@line 531 "xmltok_impl.c"
        var $57=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $58=($57); //@line 531 "xmltok_impl.c"
        var $59=($56) - ($58); //@line 531 "xmltok_impl.c"
        var $60=($59) <= 1; //@line 531 "xmltok_impl.c"
        if ($60) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 531 "xmltok_impl.c"
      case 9: // $bb8
        $0=-2; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 10: // $bb9
        var $61=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $62=$nextTokPtr_addr; //@line 531 "xmltok_impl.c"
        HEAP[$62]=$61; //@line 531 "xmltok_impl.c"
        $0=0; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 11: // $bb10
        var $63=$end_addr; //@line 531 "xmltok_impl.c"
        var $64=($63); //@line 531 "xmltok_impl.c"
        var $65=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $66=($65); //@line 531 "xmltok_impl.c"
        var $67=($64) - ($66); //@line 531 "xmltok_impl.c"
        var $68=($67) <= 2; //@line 531 "xmltok_impl.c"
        if ($68) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 531 "xmltok_impl.c"
      case 12: // $bb11
        $0=-2; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 13: // $bb12
        var $69=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $70=$nextTokPtr_addr; //@line 531 "xmltok_impl.c"
        HEAP[$70]=$69; //@line 531 "xmltok_impl.c"
        $0=0; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 14: // $bb13
        var $71=$end_addr; //@line 531 "xmltok_impl.c"
        var $72=($71); //@line 531 "xmltok_impl.c"
        var $73=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $74=($73); //@line 531 "xmltok_impl.c"
        var $75=($72) - ($74); //@line 531 "xmltok_impl.c"
        var $76=($75) <= 3; //@line 531 "xmltok_impl.c"
        if ($76) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 531 "xmltok_impl.c"
      case 15: // $bb14
        $0=-2; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 16: // $bb15
        var $77=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $78=$nextTokPtr_addr; //@line 531 "xmltok_impl.c"
        HEAP[$78]=$77; //@line 531 "xmltok_impl.c"
        $0=0; //@line 531 "xmltok_impl.c"
        __label__ = 115; break; //@line 531 "xmltok_impl.c"
      case 17: // $bb16
        var $79=$hadColon; //@line 534 "xmltok_impl.c"
        var $80=($79)!=0; //@line 534 "xmltok_impl.c"
        if ($80) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 534 "xmltok_impl.c"
      case 18: // $bb17
        var $81=HEAP[$ptr_addr]; //@line 535 "xmltok_impl.c"
        var $82=$nextTokPtr_addr; //@line 535 "xmltok_impl.c"
        HEAP[$82]=$81; //@line 535 "xmltok_impl.c"
        $0=0; //@line 536 "xmltok_impl.c"
        __label__ = 115; break; //@line 536 "xmltok_impl.c"
      case 19: // $bb18
        $hadColon=1; //@line 538 "xmltok_impl.c"
        var $83=HEAP[$ptr_addr]; //@line 539 "xmltok_impl.c"
        var $84=$83+2; //@line 539 "xmltok_impl.c"
        HEAP[$ptr_addr]=$84; //@line 539 "xmltok_impl.c"
        var $85=HEAP[$ptr_addr]; //@line 540 "xmltok_impl.c"
        var $86=$end_addr; //@line 540 "xmltok_impl.c"
        var $87=($85)==($86); //@line 540 "xmltok_impl.c"
        if ($87) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 540 "xmltok_impl.c"
      case 20: // $bb19
        $0=-1; //@line 541 "xmltok_impl.c"
        __label__ = 115; break; //@line 541 "xmltok_impl.c"
      case 21: // $bb20
        var $88=HEAP[$ptr_addr]; //@line 542 "xmltok_impl.c"
        var $89=$88; //@line 542 "xmltok_impl.c"
        var $90=HEAP[$89]; //@line 542 "xmltok_impl.c"
        var $91=($90)==0; //@line 542 "xmltok_impl.c"
        if ($91) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 542 "xmltok_impl.c"
      case 22: // $bb21
        var $92=$enc_addr; //@line 542 "xmltok_impl.c"
        var $93=$92; //@line 542 "xmltok_impl.c"
        var $94=HEAP[$ptr_addr]; //@line 542 "xmltok_impl.c"
        var $95=$94+1; //@line 542 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 542 "xmltok_impl.c"
        var $97=($96); //@line 542 "xmltok_impl.c"
        var $98=$93+76; //@line 542 "xmltok_impl.c"
        var $99=$98+$97; //@line 542 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 542 "xmltok_impl.c"
        var $101=($100); //@line 542 "xmltok_impl.c"
        $iftmp_1087=$101; //@line 542 "xmltok_impl.c"
        __lastLabel__ = 22; __label__ = 24; break; //@line 542 "xmltok_impl.c"
      case 23: // $bb22
        var $102=HEAP[$ptr_addr]; //@line 542 "xmltok_impl.c"
        var $103=$102+1; //@line 542 "xmltok_impl.c"
        var $104=HEAP[$103]; //@line 542 "xmltok_impl.c"
        var $105=($104); //@line 542 "xmltok_impl.c"
        var $106=HEAP[$ptr_addr]; //@line 542 "xmltok_impl.c"
        var $107=$106; //@line 542 "xmltok_impl.c"
        var $108=HEAP[$107]; //@line 542 "xmltok_impl.c"
        var $109=($108); //@line 542 "xmltok_impl.c"
        var $110=((($109)) & 255); //@line 542 "xmltok_impl.c"
        var $111=((($105)) & 255); //@line 542 "xmltok_impl.c"
        var $112=_unicode_byte_type($110, $111); //@line 542 "xmltok_impl.c"
        $iftmp_1087=$112; //@line 542 "xmltok_impl.c"
        __lastLabel__ = 23; __label__ = 24; break; //@line 542 "xmltok_impl.c"
      case 24: // $bb23
        var $113=__lastLabel__ == 23 ? $112 : ($101);
        if ($113 == 5) {
          __label__ = 28; break;
        }
        else if ($113 == 6) {
          __label__ = 31; break;
        }
        else if ($113 == 7) {
          __label__ = 34; break;
        }
        else if ($113 == 22) {
          __label__ = 27; break;
        }
        else if ($113 == 24) {
          __label__ = 27; break;
        }
        else if ($113 == 29) {
          __label__ = 25; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 25: // $bb24
        var $114=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $115=$114; //@line 543 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 543 "xmltok_impl.c"
        var $117=($116); //@line 543 "xmltok_impl.c"
        var $118=_nmstrtPages+$117; //@line 543 "xmltok_impl.c"
        var $119=HEAP[$118]; //@line 543 "xmltok_impl.c"
        var $120=($119); //@line 543 "xmltok_impl.c"
        var $121=($120) * 8;
        var $122=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $123=$122+1; //@line 543 "xmltok_impl.c"
        var $124=HEAP[$123]; //@line 543 "xmltok_impl.c"
        var $125=($124) >>> 5; //@line 543 "xmltok_impl.c"
        var $126=($125); //@line 543 "xmltok_impl.c"
        var $127=($126) + ($121); //@line 543 "xmltok_impl.c"
        var $128=_namingBitmap+$127*4; //@line 543 "xmltok_impl.c"
        var $129=HEAP[$128]; //@line 543 "xmltok_impl.c"
        var $130=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $131=$130+1; //@line 543 "xmltok_impl.c"
        var $132=HEAP[$131]; //@line 543 "xmltok_impl.c"
        var $133=($132); //@line 543 "xmltok_impl.c"
        var $134=($133) & 31; //@line 543 "xmltok_impl.c"
        var $135=1 << ($134); //@line 543 "xmltok_impl.c"
        var $136=($135) & ($129); //@line 543 "xmltok_impl.c"
        var $137=($136)==0; //@line 543 "xmltok_impl.c"
        if ($137) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 543 "xmltok_impl.c"
      case 26: // $bb25
        var $138=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $139=$nextTokPtr_addr; //@line 543 "xmltok_impl.c"
        HEAP[$139]=$138; //@line 543 "xmltok_impl.c"
        $0=0; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 27: // $bb26
        var $140=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $141=$140+2; //@line 543 "xmltok_impl.c"
        HEAP[$ptr_addr]=$141; //@line 543 "xmltok_impl.c"
        __label__ = 113; break; //@line 543 "xmltok_impl.c"
      case 28: // $bb27
        var $142=$end_addr; //@line 543 "xmltok_impl.c"
        var $143=($142); //@line 543 "xmltok_impl.c"
        var $144=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $145=($144); //@line 543 "xmltok_impl.c"
        var $146=($143) - ($145); //@line 543 "xmltok_impl.c"
        var $147=($146) <= 1; //@line 543 "xmltok_impl.c"
        if ($147) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 543 "xmltok_impl.c"
      case 29: // $bb28
        $0=-2; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 30: // $bb29
        var $148=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $149=$nextTokPtr_addr; //@line 543 "xmltok_impl.c"
        HEAP[$149]=$148; //@line 543 "xmltok_impl.c"
        $0=0; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 31: // $bb30
        var $150=$end_addr; //@line 543 "xmltok_impl.c"
        var $151=($150); //@line 543 "xmltok_impl.c"
        var $152=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $153=($152); //@line 543 "xmltok_impl.c"
        var $154=($151) - ($153); //@line 543 "xmltok_impl.c"
        var $155=($154) <= 2; //@line 543 "xmltok_impl.c"
        if ($155) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 543 "xmltok_impl.c"
      case 32: // $bb31
        $0=-2; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 33: // $bb32
        var $156=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $157=$nextTokPtr_addr; //@line 543 "xmltok_impl.c"
        HEAP[$157]=$156; //@line 543 "xmltok_impl.c"
        $0=0; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 34: // $bb33
        var $158=$end_addr; //@line 543 "xmltok_impl.c"
        var $159=($158); //@line 543 "xmltok_impl.c"
        var $160=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $161=($160); //@line 543 "xmltok_impl.c"
        var $162=($159) - ($161); //@line 543 "xmltok_impl.c"
        var $163=($162) <= 3; //@line 543 "xmltok_impl.c"
        if ($163) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 543 "xmltok_impl.c"
      case 35: // $bb34
        $0=-2; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 36: // $bb35
        var $164=HEAP[$ptr_addr]; //@line 543 "xmltok_impl.c"
        var $165=$nextTokPtr_addr; //@line 543 "xmltok_impl.c"
        HEAP[$165]=$164; //@line 543 "xmltok_impl.c"
        $0=0; //@line 543 "xmltok_impl.c"
        __label__ = 115; break; //@line 543 "xmltok_impl.c"
      case 37: // $bb36
        var $166=HEAP[$ptr_addr]; //@line 545 "xmltok_impl.c"
        var $167=$nextTokPtr_addr; //@line 545 "xmltok_impl.c"
        HEAP[$167]=$166; //@line 545 "xmltok_impl.c"
        $0=0; //@line 546 "xmltok_impl.c"
        __label__ = 115; break; //@line 546 "xmltok_impl.c"
      case 38: // $bb37
        var $168=HEAP[$ptr_addr]; //@line 554 "xmltok_impl.c"
        var $169=$168+2; //@line 554 "xmltok_impl.c"
        HEAP[$ptr_addr]=$169; //@line 554 "xmltok_impl.c"
        var $170=HEAP[$ptr_addr]; //@line 555 "xmltok_impl.c"
        var $171=$end_addr; //@line 555 "xmltok_impl.c"
        var $172=($170)==($171); //@line 555 "xmltok_impl.c"
        if ($172) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 555 "xmltok_impl.c"
      case 39: // $bb38
        $0=-1; //@line 556 "xmltok_impl.c"
        __label__ = 115; break; //@line 556 "xmltok_impl.c"
      case 40: // $bb39
        var $173=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $174=$173; //@line 557 "xmltok_impl.c"
        var $175=HEAP[$174]; //@line 557 "xmltok_impl.c"
        var $176=($175)==0; //@line 557 "xmltok_impl.c"
        if ($176) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 557 "xmltok_impl.c"
      case 41: // $bb40
        var $177=$enc_addr; //@line 557 "xmltok_impl.c"
        var $178=$177; //@line 557 "xmltok_impl.c"
        var $179=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $180=$179+1; //@line 557 "xmltok_impl.c"
        var $181=HEAP[$180]; //@line 557 "xmltok_impl.c"
        var $182=($181); //@line 557 "xmltok_impl.c"
        var $183=$178+76; //@line 557 "xmltok_impl.c"
        var $184=$183+$182; //@line 557 "xmltok_impl.c"
        var $185=HEAP[$184]; //@line 557 "xmltok_impl.c"
        var $186=($185); //@line 557 "xmltok_impl.c"
        $iftmp_1116=$186; //@line 557 "xmltok_impl.c"
        __lastLabel__ = 41; __label__ = 43; break; //@line 557 "xmltok_impl.c"
      case 42: // $bb41
        var $187=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $188=$187+1; //@line 557 "xmltok_impl.c"
        var $189=HEAP[$188]; //@line 557 "xmltok_impl.c"
        var $190=($189); //@line 557 "xmltok_impl.c"
        var $191=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $192=$191; //@line 557 "xmltok_impl.c"
        var $193=HEAP[$192]; //@line 557 "xmltok_impl.c"
        var $194=($193); //@line 557 "xmltok_impl.c"
        var $195=((($194)) & 255); //@line 557 "xmltok_impl.c"
        var $196=((($190)) & 255); //@line 557 "xmltok_impl.c"
        var $197=_unicode_byte_type($195, $196); //@line 557 "xmltok_impl.c"
        $iftmp_1116=$197; //@line 557 "xmltok_impl.c"
        __lastLabel__ = 42; __label__ = 43; break; //@line 557 "xmltok_impl.c"
      case 43: // $bb42
        var $198=__lastLabel__ == 42 ? $197 : ($186);
        $t=$198; //@line 557 "xmltok_impl.c"
        var $199=($198)==14; //@line 558 "xmltok_impl.c"
        if ($199) { __label__ = 46; break; } else { __label__ = 44; break; } //@line 558 "xmltok_impl.c"
      case 44: // $bb43
        var $200=$t; //@line 560 "xmltok_impl.c"
        if ($200 == 9) {
          __label__ = 38; break;
        }
        else if ($200 == 10) {
          __label__ = 38; break;
        }
        else if ($200 == 21) {
          __label__ = 38; break;
        }
        else {
        __label__ = 45; break;
        }
        
      case 45: // $bb45
        var $201=HEAP[$ptr_addr]; //@line 566 "xmltok_impl.c"
        var $202=$nextTokPtr_addr; //@line 566 "xmltok_impl.c"
        HEAP[$202]=$201; //@line 566 "xmltok_impl.c"
        $0=0; //@line 567 "xmltok_impl.c"
        __label__ = 115; break; //@line 567 "xmltok_impl.c"
      case 46: // $bb46
        $hadColon=0; //@line 575 "xmltok_impl.c"
        __label__ = 47; break; //@line 575 "xmltok_impl.c"
      case 47: // $bb47
        var $203=HEAP[$ptr_addr]; //@line 578 "xmltok_impl.c"
        var $204=$203+2; //@line 578 "xmltok_impl.c"
        HEAP[$ptr_addr]=$204; //@line 578 "xmltok_impl.c"
        var $205=HEAP[$ptr_addr]; //@line 579 "xmltok_impl.c"
        var $206=$end_addr; //@line 579 "xmltok_impl.c"
        var $207=($205)==($206); //@line 579 "xmltok_impl.c"
        if ($207) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 579 "xmltok_impl.c"
      case 48: // $bb48
        $0=-1; //@line 580 "xmltok_impl.c"
        __label__ = 115; break; //@line 580 "xmltok_impl.c"
      case 49: // $bb49
        var $208=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $209=$208; //@line 581 "xmltok_impl.c"
        var $210=HEAP[$209]; //@line 581 "xmltok_impl.c"
        var $211=($210)==0; //@line 581 "xmltok_impl.c"
        if ($211) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 581 "xmltok_impl.c"
      case 50: // $bb50
        var $212=$enc_addr; //@line 581 "xmltok_impl.c"
        var $213=$212; //@line 581 "xmltok_impl.c"
        var $214=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $215=$214+1; //@line 581 "xmltok_impl.c"
        var $216=HEAP[$215]; //@line 581 "xmltok_impl.c"
        var $217=($216); //@line 581 "xmltok_impl.c"
        var $218=$213+76; //@line 581 "xmltok_impl.c"
        var $219=$218+$217; //@line 581 "xmltok_impl.c"
        var $220=HEAP[$219]; //@line 581 "xmltok_impl.c"
        var $221=($220); //@line 581 "xmltok_impl.c"
        $iftmp_1125=$221; //@line 581 "xmltok_impl.c"
        __label__ = 52; break; //@line 581 "xmltok_impl.c"
      case 51: // $bb51
        var $222=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $223=$222+1; //@line 581 "xmltok_impl.c"
        var $224=HEAP[$223]; //@line 581 "xmltok_impl.c"
        var $225=($224); //@line 581 "xmltok_impl.c"
        var $226=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $227=$226; //@line 581 "xmltok_impl.c"
        var $228=HEAP[$227]; //@line 581 "xmltok_impl.c"
        var $229=($228); //@line 581 "xmltok_impl.c"
        var $230=((($229)) & 255); //@line 581 "xmltok_impl.c"
        var $231=((($225)) & 255); //@line 581 "xmltok_impl.c"
        var $232=_unicode_byte_type($230, $231); //@line 581 "xmltok_impl.c"
        $iftmp_1125=$232; //@line 581 "xmltok_impl.c"
        __label__ = 52; break; //@line 581 "xmltok_impl.c"
      case 52: // $bb52
        var $233=$iftmp_1125; //@line 581 "xmltok_impl.c"
        $open=$233; //@line 581 "xmltok_impl.c"
        var $234=$open; //@line 582 "xmltok_impl.c"
        var $235=($234)==12; //@line 582 "xmltok_impl.c"
        var $236=$open; //@line 582 "xmltok_impl.c"
        var $237=($236)==13; //@line 582 "xmltok_impl.c"
        var $or_cond=($235) | ($237);
        if ($or_cond) { __label__ = 55; break; } else { __label__ = 53; break; } //@line 582 "xmltok_impl.c"
      case 53: // $bb54
        var $238=$open; //@line 584 "xmltok_impl.c"
        if ($238 == 9) {
          __label__ = 47; break;
        }
        else if ($238 == 10) {
          __label__ = 47; break;
        }
        else if ($238 == 21) {
          __label__ = 47; break;
        }
        else {
        __label__ = 54; break;
        }
        
      case 54: // $bb56
        var $239=HEAP[$ptr_addr]; //@line 590 "xmltok_impl.c"
        var $240=$nextTokPtr_addr; //@line 590 "xmltok_impl.c"
        HEAP[$240]=$239; //@line 590 "xmltok_impl.c"
        $0=0; //@line 591 "xmltok_impl.c"
        __label__ = 115; break; //@line 591 "xmltok_impl.c"
      case 55: // $bb57
        var $241=HEAP[$ptr_addr]; //@line 594 "xmltok_impl.c"
        var $242=$241+2; //@line 594 "xmltok_impl.c"
        HEAP[$ptr_addr]=$242; //@line 594 "xmltok_impl.c"
        __label__ = 56; break; //@line 594 "xmltok_impl.c"
      case 56: // $bb58
        var $243=HEAP[$ptr_addr]; //@line 598 "xmltok_impl.c"
        var $244=$end_addr; //@line 598 "xmltok_impl.c"
        var $245=($243)==($244); //@line 598 "xmltok_impl.c"
        if ($245) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 598 "xmltok_impl.c"
      case 57: // $bb60
        $0=-1; //@line 599 "xmltok_impl.c"
        __label__ = 115; break; //@line 599 "xmltok_impl.c"
      case 58: // $bb61
        var $246=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $247=$246; //@line 600 "xmltok_impl.c"
        var $248=HEAP[$247]; //@line 600 "xmltok_impl.c"
        var $249=($248)==0; //@line 600 "xmltok_impl.c"
        if ($249) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 600 "xmltok_impl.c"
      case 59: // $bb62
        var $250=$enc_addr; //@line 600 "xmltok_impl.c"
        var $251=$250; //@line 600 "xmltok_impl.c"
        var $252=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $253=$252+1; //@line 600 "xmltok_impl.c"
        var $254=HEAP[$253]; //@line 600 "xmltok_impl.c"
        var $255=($254); //@line 600 "xmltok_impl.c"
        var $256=$251+76; //@line 600 "xmltok_impl.c"
        var $257=$256+$255; //@line 600 "xmltok_impl.c"
        var $258=HEAP[$257]; //@line 600 "xmltok_impl.c"
        var $259=($258); //@line 600 "xmltok_impl.c"
        $iftmp_1134=$259; //@line 600 "xmltok_impl.c"
        __label__ = 61; break; //@line 600 "xmltok_impl.c"
      case 60: // $bb63
        var $260=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $261=$260+1; //@line 600 "xmltok_impl.c"
        var $262=HEAP[$261]; //@line 600 "xmltok_impl.c"
        var $263=($262); //@line 600 "xmltok_impl.c"
        var $264=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $265=$264; //@line 600 "xmltok_impl.c"
        var $266=HEAP[$265]; //@line 600 "xmltok_impl.c"
        var $267=($266); //@line 600 "xmltok_impl.c"
        var $268=((($267)) & 255); //@line 600 "xmltok_impl.c"
        var $269=((($263)) & 255); //@line 600 "xmltok_impl.c"
        var $270=_unicode_byte_type($268, $269); //@line 600 "xmltok_impl.c"
        $iftmp_1134=$270; //@line 600 "xmltok_impl.c"
        __label__ = 61; break; //@line 600 "xmltok_impl.c"
      case 61: // $bb64
        var $271=$iftmp_1134; //@line 600 "xmltok_impl.c"
        $t59=$271; //@line 600 "xmltok_impl.c"
        var $272=$t59; //@line 601 "xmltok_impl.c"
        var $273=$open; //@line 601 "xmltok_impl.c"
        var $274=($272)==($273); //@line 601 "xmltok_impl.c"
        if ($274) { __label__ = 79; break; } else { __label__ = 62; break; } //@line 601 "xmltok_impl.c"
      case 62: // $bb65
        var $275=$t59; //@line 603 "xmltok_impl.c"
        if ($275 == 0) {
          __label__ = 72; break;
        }
        else if ($275 == 1) {
          __label__ = 72; break;
        }
        else if ($275 == 2) {
          __label__ = 77; break;
        }
        else if ($275 == 3) {
          __label__ = 73; break;
        }
        else if ($275 == 5) {
          __label__ = 63; break;
        }
        else if ($275 == 6) {
          __label__ = 66; break;
        }
        else if ($275 == 7) {
          __label__ = 69; break;
        }
        else if ($275 == 8) {
          __label__ = 72; break;
        }
        else {
        __label__ = 78; break;
        }
        
      case 63: // $bb66
        var $276=$end_addr; //@line 604 "xmltok_impl.c"
        var $277=($276); //@line 604 "xmltok_impl.c"
        var $278=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $279=($278); //@line 604 "xmltok_impl.c"
        var $280=($277) - ($279); //@line 604 "xmltok_impl.c"
        var $281=($280) <= 1; //@line 604 "xmltok_impl.c"
        if ($281) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 604 "xmltok_impl.c"
      case 64: // $bb67
        $0=-2; //@line 604 "xmltok_impl.c"
        __label__ = 115; break; //@line 604 "xmltok_impl.c"
      case 65: // $bb68
        var $282=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $283=$282+2; //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$283; //@line 604 "xmltok_impl.c"
        __label__ = 56; break; //@line 604 "xmltok_impl.c"
      case 66: // $bb69
        var $284=$end_addr; //@line 604 "xmltok_impl.c"
        var $285=($284); //@line 604 "xmltok_impl.c"
        var $286=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $287=($286); //@line 604 "xmltok_impl.c"
        var $288=($285) - ($287); //@line 604 "xmltok_impl.c"
        var $289=($288) <= 2; //@line 604 "xmltok_impl.c"
        if ($289) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 604 "xmltok_impl.c"
      case 67: // $bb70
        $0=-2; //@line 604 "xmltok_impl.c"
        __label__ = 115; break; //@line 604 "xmltok_impl.c"
      case 68: // $bb71
        var $290=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $291=$290+3; //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$291; //@line 604 "xmltok_impl.c"
        __label__ = 56; break; //@line 604 "xmltok_impl.c"
      case 69: // $bb72
        var $292=$end_addr; //@line 604 "xmltok_impl.c"
        var $293=($292); //@line 604 "xmltok_impl.c"
        var $294=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $295=($294); //@line 604 "xmltok_impl.c"
        var $296=($293) - ($295); //@line 604 "xmltok_impl.c"
        var $297=($296) <= 3; //@line 604 "xmltok_impl.c"
        if ($297) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 604 "xmltok_impl.c"
      case 70: // $bb73
        $0=-2; //@line 604 "xmltok_impl.c"
        __label__ = 115; break; //@line 604 "xmltok_impl.c"
      case 71: // $bb74
        var $298=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $299=$298+4; //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$299; //@line 604 "xmltok_impl.c"
        __label__ = 56; break; //@line 604 "xmltok_impl.c"
      case 72: // $bb75
        var $300=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $301=$nextTokPtr_addr; //@line 604 "xmltok_impl.c"
        HEAP[$301]=$300; //@line 604 "xmltok_impl.c"
        $0=0; //@line 604 "xmltok_impl.c"
        __label__ = 115; break; //@line 604 "xmltok_impl.c"
      case 73: // $bb76
        var $302=HEAP[$ptr_addr]; //@line 607 "xmltok_impl.c"
        var $303=$302+2; //@line 607 "xmltok_impl.c"
        var $304=$enc_addr; //@line 607 "xmltok_impl.c"
        var $305=$end_addr; //@line 607 "xmltok_impl.c"
        var $306=_big2_scanRef($304, $303, $305, $ptr_addr); //@line 607 "xmltok_impl.c"
        $tok=$306; //@line 607 "xmltok_impl.c"
        var $307=$tok; //@line 608 "xmltok_impl.c"
        var $308=($307) <= 0; //@line 608 "xmltok_impl.c"
        if ($308) { __label__ = 74; break; } else { __label__ = 56; break; } //@line 608 "xmltok_impl.c"
      case 74: // $bb77
        var $309=$tok; //@line 609 "xmltok_impl.c"
        var $310=($309)==0; //@line 609 "xmltok_impl.c"
        if ($310) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 609 "xmltok_impl.c"
      case 75: // $bb78
        var $311=HEAP[$ptr_addr]; //@line 610 "xmltok_impl.c"
        var $312=$nextTokPtr_addr; //@line 610 "xmltok_impl.c"
        HEAP[$312]=$311; //@line 610 "xmltok_impl.c"
        __label__ = 76; break; //@line 610 "xmltok_impl.c"
      case 76: // $bb79
        var $313=$tok; //@line 611 "xmltok_impl.c"
        $0=$313; //@line 611 "xmltok_impl.c"
        __label__ = 115; break; //@line 611 "xmltok_impl.c"
      case 77: // $bb81
        var $314=HEAP[$ptr_addr]; //@line 616 "xmltok_impl.c"
        var $315=$nextTokPtr_addr; //@line 616 "xmltok_impl.c"
        HEAP[$315]=$314; //@line 616 "xmltok_impl.c"
        $0=0; //@line 617 "xmltok_impl.c"
        __label__ = 115; break; //@line 617 "xmltok_impl.c"
      case 78: // $bb82
        var $316=HEAP[$ptr_addr]; //@line 619 "xmltok_impl.c"
        var $317=$316+2; //@line 619 "xmltok_impl.c"
        HEAP[$ptr_addr]=$317; //@line 619 "xmltok_impl.c"
        __label__ = 56; break; //@line 619 "xmltok_impl.c"
      case 79: // $bb84
        var $318=HEAP[$ptr_addr]; //@line 623 "xmltok_impl.c"
        var $319=$318+2; //@line 623 "xmltok_impl.c"
        HEAP[$ptr_addr]=$319; //@line 623 "xmltok_impl.c"
        var $320=HEAP[$ptr_addr]; //@line 624 "xmltok_impl.c"
        var $321=$end_addr; //@line 624 "xmltok_impl.c"
        var $322=($320)==($321); //@line 624 "xmltok_impl.c"
        if ($322) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 624 "xmltok_impl.c"
      case 80: // $bb85
        $0=-1; //@line 625 "xmltok_impl.c"
        __label__ = 115; break; //@line 625 "xmltok_impl.c"
      case 81: // $bb86
        var $323=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $324=$323; //@line 626 "xmltok_impl.c"
        var $325=HEAP[$324]; //@line 626 "xmltok_impl.c"
        var $326=($325)==0; //@line 626 "xmltok_impl.c"
        if ($326) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 626 "xmltok_impl.c"
      case 82: // $bb87
        var $327=$enc_addr; //@line 626 "xmltok_impl.c"
        var $328=$327; //@line 626 "xmltok_impl.c"
        var $329=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $330=$329+1; //@line 626 "xmltok_impl.c"
        var $331=HEAP[$330]; //@line 626 "xmltok_impl.c"
        var $332=($331); //@line 626 "xmltok_impl.c"
        var $333=$328+76; //@line 626 "xmltok_impl.c"
        var $334=$333+$332; //@line 626 "xmltok_impl.c"
        var $335=HEAP[$334]; //@line 626 "xmltok_impl.c"
        var $336=($335); //@line 626 "xmltok_impl.c"
        $iftmp_1162=$336; //@line 626 "xmltok_impl.c"
        __lastLabel__ = 82; __label__ = 84; break; //@line 626 "xmltok_impl.c"
      case 83: // $bb88
        var $337=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $338=$337+1; //@line 626 "xmltok_impl.c"
        var $339=HEAP[$338]; //@line 626 "xmltok_impl.c"
        var $340=($339); //@line 626 "xmltok_impl.c"
        var $341=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $342=$341; //@line 626 "xmltok_impl.c"
        var $343=HEAP[$342]; //@line 626 "xmltok_impl.c"
        var $344=($343); //@line 626 "xmltok_impl.c"
        var $345=((($344)) & 255); //@line 626 "xmltok_impl.c"
        var $346=((($340)) & 255); //@line 626 "xmltok_impl.c"
        var $347=_unicode_byte_type($345, $346); //@line 626 "xmltok_impl.c"
        $iftmp_1162=$347; //@line 626 "xmltok_impl.c"
        __lastLabel__ = 83; __label__ = 84; break; //@line 626 "xmltok_impl.c"
      case 84: // $bb89
        var $348=__lastLabel__ == 83 ? $347 : ($336);
        if ($348 == 9) {
          __label__ = 86; break;
        }
        else if ($348 == 10) {
          __label__ = 86; break;
        }
        else if ($348 == 11) {
          __label__ = 104; break;
        }
        else if ($348 == 17) {
          __label__ = 105; break;
        }
        else if ($348 == 21) {
          __label__ = 86; break;
        }
        else {
        __label__ = 85; break;
        }
        
      case 85: // $bb93
        var $349=HEAP[$ptr_addr]; //@line 636 "xmltok_impl.c"
        var $350=$nextTokPtr_addr; //@line 636 "xmltok_impl.c"
        HEAP[$350]=$349; //@line 636 "xmltok_impl.c"
        $0=0; //@line 637 "xmltok_impl.c"
        __label__ = 115; break; //@line 637 "xmltok_impl.c"
      case 86: // $bb94
        var $351=HEAP[$ptr_addr]; //@line 641 "xmltok_impl.c"
        var $352=$351+2; //@line 641 "xmltok_impl.c"
        HEAP[$ptr_addr]=$352; //@line 641 "xmltok_impl.c"
        var $353=HEAP[$ptr_addr]; //@line 642 "xmltok_impl.c"
        var $354=$end_addr; //@line 642 "xmltok_impl.c"
        var $355=($353)==($354); //@line 642 "xmltok_impl.c"
        if ($355) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 642 "xmltok_impl.c"
      case 87: // $bb95
        $0=-1; //@line 643 "xmltok_impl.c"
        __label__ = 115; break; //@line 643 "xmltok_impl.c"
      case 88: // $bb96
        var $356=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $357=$356; //@line 644 "xmltok_impl.c"
        var $358=HEAP[$357]; //@line 644 "xmltok_impl.c"
        var $359=($358)==0; //@line 644 "xmltok_impl.c"
        if ($359) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 644 "xmltok_impl.c"
      case 89: // $bb97
        var $360=$enc_addr; //@line 644 "xmltok_impl.c"
        var $361=$360; //@line 644 "xmltok_impl.c"
        var $362=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $363=$362+1; //@line 644 "xmltok_impl.c"
        var $364=HEAP[$363]; //@line 644 "xmltok_impl.c"
        var $365=($364); //@line 644 "xmltok_impl.c"
        var $366=$361+76; //@line 644 "xmltok_impl.c"
        var $367=$366+$365; //@line 644 "xmltok_impl.c"
        var $368=HEAP[$367]; //@line 644 "xmltok_impl.c"
        var $369=($368); //@line 644 "xmltok_impl.c"
        $iftmp_1171=$369; //@line 644 "xmltok_impl.c"
        __lastLabel__ = 89; __label__ = 91; break; //@line 644 "xmltok_impl.c"
      case 90: // $bb98
        var $370=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $371=$370+1; //@line 644 "xmltok_impl.c"
        var $372=HEAP[$371]; //@line 644 "xmltok_impl.c"
        var $373=($372); //@line 644 "xmltok_impl.c"
        var $374=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $375=$374; //@line 644 "xmltok_impl.c"
        var $376=HEAP[$375]; //@line 644 "xmltok_impl.c"
        var $377=($376); //@line 644 "xmltok_impl.c"
        var $378=((($377)) & 255); //@line 644 "xmltok_impl.c"
        var $379=((($373)) & 255); //@line 644 "xmltok_impl.c"
        var $380=_unicode_byte_type($378, $379); //@line 644 "xmltok_impl.c"
        $iftmp_1171=$380; //@line 644 "xmltok_impl.c"
        __lastLabel__ = 90; __label__ = 91; break; //@line 644 "xmltok_impl.c"
      case 91: // $bb99
        var $381=__lastLabel__ == 90 ? $380 : ($369);
        if ($381 == 5) {
          __label__ = 95; break;
        }
        else if ($381 == 6) {
          __label__ = 98; break;
        }
        else if ($381 == 7) {
          __label__ = 101; break;
        }
        else if ($381 == 9) {
          __label__ = 86; break;
        }
        else if ($381 == 10) {
          __label__ = 86; break;
        }
        else if ($381 == 11) {
          __label__ = 104; break;
        }
        else if ($381 == 17) {
          __label__ = 105; break;
        }
        else if ($381 == 21) {
          __label__ = 86; break;
        }
        else if ($381 == 22) {
          __label__ = 94; break;
        }
        else if ($381 == 24) {
          __label__ = 94; break;
        }
        else if ($381 == 29) {
          __label__ = 92; break;
        }
        else {
        __label__ = 111; break;
        }
        
      case 92: // $bb100
        var $382=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $383=$382; //@line 645 "xmltok_impl.c"
        var $384=HEAP[$383]; //@line 645 "xmltok_impl.c"
        var $385=($384); //@line 645 "xmltok_impl.c"
        var $386=_nmstrtPages+$385; //@line 645 "xmltok_impl.c"
        var $387=HEAP[$386]; //@line 645 "xmltok_impl.c"
        var $388=($387); //@line 645 "xmltok_impl.c"
        var $389=($388) * 8;
        var $390=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $391=$390+1; //@line 645 "xmltok_impl.c"
        var $392=HEAP[$391]; //@line 645 "xmltok_impl.c"
        var $393=($392) >>> 5; //@line 645 "xmltok_impl.c"
        var $394=($393); //@line 645 "xmltok_impl.c"
        var $395=($394) + ($389); //@line 645 "xmltok_impl.c"
        var $396=_namingBitmap+$395*4; //@line 645 "xmltok_impl.c"
        var $397=HEAP[$396]; //@line 645 "xmltok_impl.c"
        var $398=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $399=$398+1; //@line 645 "xmltok_impl.c"
        var $400=HEAP[$399]; //@line 645 "xmltok_impl.c"
        var $401=($400); //@line 645 "xmltok_impl.c"
        var $402=($401) & 31; //@line 645 "xmltok_impl.c"
        var $403=1 << ($402); //@line 645 "xmltok_impl.c"
        var $404=($403) & ($397); //@line 645 "xmltok_impl.c"
        var $405=($404)==0; //@line 645 "xmltok_impl.c"
        if ($405) { __label__ = 93; break; } else { __label__ = 94; break; } //@line 645 "xmltok_impl.c"
      case 93: // $bb101
        var $406=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $407=$nextTokPtr_addr; //@line 645 "xmltok_impl.c"
        HEAP[$407]=$406; //@line 645 "xmltok_impl.c"
        $0=0; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 94: // $bb102
        var $408=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $409=$408+2; //@line 645 "xmltok_impl.c"
        HEAP[$ptr_addr]=$409; //@line 645 "xmltok_impl.c"
        __label__ = 113; break; //@line 645 "xmltok_impl.c"
      case 95: // $bb103
        var $410=$end_addr; //@line 645 "xmltok_impl.c"
        var $411=($410); //@line 645 "xmltok_impl.c"
        var $412=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $413=($412); //@line 645 "xmltok_impl.c"
        var $414=($411) - ($413); //@line 645 "xmltok_impl.c"
        var $415=($414) <= 1; //@line 645 "xmltok_impl.c"
        if ($415) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 645 "xmltok_impl.c"
      case 96: // $bb104
        $0=-2; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 97: // $bb105
        var $416=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $417=$nextTokPtr_addr; //@line 645 "xmltok_impl.c"
        HEAP[$417]=$416; //@line 645 "xmltok_impl.c"
        $0=0; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 98: // $bb106
        var $418=$end_addr; //@line 645 "xmltok_impl.c"
        var $419=($418); //@line 645 "xmltok_impl.c"
        var $420=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $421=($420); //@line 645 "xmltok_impl.c"
        var $422=($419) - ($421); //@line 645 "xmltok_impl.c"
        var $423=($422) <= 2; //@line 645 "xmltok_impl.c"
        if ($423) { __label__ = 99; break; } else { __label__ = 100; break; } //@line 645 "xmltok_impl.c"
      case 99: // $bb107
        $0=-2; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 100: // $bb108
        var $424=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $425=$nextTokPtr_addr; //@line 645 "xmltok_impl.c"
        HEAP[$425]=$424; //@line 645 "xmltok_impl.c"
        $0=0; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 101: // $bb109
        var $426=$end_addr; //@line 645 "xmltok_impl.c"
        var $427=($426); //@line 645 "xmltok_impl.c"
        var $428=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $429=($428); //@line 645 "xmltok_impl.c"
        var $430=($427) - ($429); //@line 645 "xmltok_impl.c"
        var $431=($430) <= 3; //@line 645 "xmltok_impl.c"
        if ($431) { __label__ = 102; break; } else { __label__ = 103; break; } //@line 645 "xmltok_impl.c"
      case 102: // $bb110
        $0=-2; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 103: // $bb111
        var $432=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $433=$nextTokPtr_addr; //@line 645 "xmltok_impl.c"
        HEAP[$433]=$432; //@line 645 "xmltok_impl.c"
        $0=0; //@line 645 "xmltok_impl.c"
        __label__ = 115; break; //@line 645 "xmltok_impl.c"
      case 104: // $gt
        var $434=HEAP[$ptr_addr]; //@line 650 "xmltok_impl.c"
        var $435=$434+2; //@line 650 "xmltok_impl.c"
        var $436=$nextTokPtr_addr; //@line 650 "xmltok_impl.c"
        HEAP[$436]=$435; //@line 650 "xmltok_impl.c"
        $0=1; //@line 651 "xmltok_impl.c"
        __label__ = 115; break; //@line 651 "xmltok_impl.c"
      case 105: // $sol
        var $437=HEAP[$ptr_addr]; //@line 654 "xmltok_impl.c"
        var $438=$437+2; //@line 654 "xmltok_impl.c"
        HEAP[$ptr_addr]=$438; //@line 654 "xmltok_impl.c"
        var $439=HEAP[$ptr_addr]; //@line 655 "xmltok_impl.c"
        var $440=$end_addr; //@line 655 "xmltok_impl.c"
        var $441=($439)==($440); //@line 655 "xmltok_impl.c"
        if ($441) { __label__ = 106; break; } else { __label__ = 107; break; } //@line 655 "xmltok_impl.c"
      case 106: // $bb113
        $0=-1; //@line 656 "xmltok_impl.c"
        __label__ = 115; break; //@line 656 "xmltok_impl.c"
      case 107: // $bb114
        var $442=HEAP[$ptr_addr]; //@line 657 "xmltok_impl.c"
        var $443=$442; //@line 657 "xmltok_impl.c"
        var $444=HEAP[$443]; //@line 657 "xmltok_impl.c"
        var $445=($444)!=0; //@line 657 "xmltok_impl.c"
        if ($445) { __label__ = 109; break; } else { __label__ = 108; break; } //@line 657 "xmltok_impl.c"
      case 108: // $bb115
        var $446=HEAP[$ptr_addr]; //@line 657 "xmltok_impl.c"
        var $447=$446+1; //@line 657 "xmltok_impl.c"
        var $448=HEAP[$447]; //@line 657 "xmltok_impl.c"
        var $449=($448)!=62; //@line 657 "xmltok_impl.c"
        if ($449) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 657 "xmltok_impl.c"
      case 109: // $bb116
        var $450=HEAP[$ptr_addr]; //@line 658 "xmltok_impl.c"
        var $451=$nextTokPtr_addr; //@line 658 "xmltok_impl.c"
        HEAP[$451]=$450; //@line 658 "xmltok_impl.c"
        $0=0; //@line 659 "xmltok_impl.c"
        __label__ = 115; break; //@line 659 "xmltok_impl.c"
      case 110: // $bb117
        var $452=HEAP[$ptr_addr]; //@line 661 "xmltok_impl.c"
        var $453=$452+2; //@line 661 "xmltok_impl.c"
        var $454=$nextTokPtr_addr; //@line 661 "xmltok_impl.c"
        HEAP[$454]=$453; //@line 661 "xmltok_impl.c"
        $0=3; //@line 662 "xmltok_impl.c"
        __label__ = 115; break; //@line 662 "xmltok_impl.c"
      case 111: // $bb118
        var $455=HEAP[$ptr_addr]; //@line 664 "xmltok_impl.c"
        var $456=$nextTokPtr_addr; //@line 664 "xmltok_impl.c"
        HEAP[$456]=$455; //@line 664 "xmltok_impl.c"
        $0=0; //@line 665 "xmltok_impl.c"
        __label__ = 115; break; //@line 665 "xmltok_impl.c"
      case 112: // $bb119
        var $457=HEAP[$ptr_addr]; //@line 672 "xmltok_impl.c"
        var $458=$nextTokPtr_addr; //@line 672 "xmltok_impl.c"
        HEAP[$458]=$457; //@line 672 "xmltok_impl.c"
        $0=0; //@line 673 "xmltok_impl.c"
        __label__ = 115; break; //@line 673 "xmltok_impl.c"
      case 113: // $bb120
        var $459=HEAP[$ptr_addr]; //@line 529 "xmltok_impl.c"
        var $460=$end_addr; //@line 529 "xmltok_impl.c"
        var $461=($459)!=($460); //@line 529 "xmltok_impl.c"
        if ($461) { __label__ = 1; break; } else { __label__ = 114; break; } //@line 529 "xmltok_impl.c"
      case 114: // $bb121
        $0=-1; //@line 676 "xmltok_impl.c"
        __label__ = 115; break; //@line 676 "xmltok_impl.c"
      case 115: // $bb122
        var $462=$0; //@line 531 "xmltok_impl.c"
        $retval=$462; //@line 531 "xmltok_impl.c"
        var $retval123=$retval; //@line 531 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval123; //@line 531 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanLt($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1233;
        var $iftmp_1225;
        var $iftmp_1217;
        var $iftmp_1215;
        var $iftmp_1207;
        var $0;
        var $hadColon;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 688 "xmltok_impl.c"
        var $2=$end_addr; //@line 688 "xmltok_impl.c"
        var $3=($1)==($2); //@line 688 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 688 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 689 "xmltok_impl.c"
        __label__ = 98; break; //@line 689 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 690 "xmltok_impl.c"
        var $5=$4; //@line 690 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 690 "xmltok_impl.c"
        var $7=($6)==0; //@line 690 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 690 "xmltok_impl.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 690 "xmltok_impl.c"
        var $9=$8; //@line 690 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 690 "xmltok_impl.c"
        var $11=$10+1; //@line 690 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 690 "xmltok_impl.c"
        var $13=($12); //@line 690 "xmltok_impl.c"
        var $14=$9+76; //@line 690 "xmltok_impl.c"
        var $15=$14+$13; //@line 690 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 690 "xmltok_impl.c"
        var $17=($16); //@line 690 "xmltok_impl.c"
        $iftmp_1207=$17; //@line 690 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 690 "xmltok_impl.c"
      case 4: // $bb3
        var $18=$ptr_addr; //@line 690 "xmltok_impl.c"
        var $19=$18+1; //@line 690 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 690 "xmltok_impl.c"
        var $21=($20); //@line 690 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 690 "xmltok_impl.c"
        var $23=$22; //@line 690 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 690 "xmltok_impl.c"
        var $25=($24); //@line 690 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 690 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 690 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 690 "xmltok_impl.c"
        $iftmp_1207=$28; //@line 690 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 690 "xmltok_impl.c"
      case 5: // $bb4
        var $29=__lastLabel__ == 4 ? $28 : ($17);
        if ($29 == 5) {
          __label__ = 9; break;
        }
        else if ($29 == 6) {
          __label__ = 12; break;
        }
        else if ($29 == 7) {
          __label__ = 15; break;
        }
        else if ($29 == 15) {
          __label__ = 27; break;
        }
        else if ($29 == 16) {
          __label__ = 18; break;
        }
        else if ($29 == 17) {
          __label__ = 28; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 29; break;
        }
        
      case 6: // $bb5
        var $30=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $31=$30; //@line 691 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 691 "xmltok_impl.c"
        var $33=($32); //@line 691 "xmltok_impl.c"
        var $34=_nmstrtPages+$33; //@line 691 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 691 "xmltok_impl.c"
        var $36=($35); //@line 691 "xmltok_impl.c"
        var $37=($36) * 8;
        var $38=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $39=$38+1; //@line 691 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 691 "xmltok_impl.c"
        var $41=($40) >>> 5; //@line 691 "xmltok_impl.c"
        var $42=($41); //@line 691 "xmltok_impl.c"
        var $43=($42) + ($37); //@line 691 "xmltok_impl.c"
        var $44=_namingBitmap+$43*4; //@line 691 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 691 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $47=$46+1; //@line 691 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 691 "xmltok_impl.c"
        var $49=($48); //@line 691 "xmltok_impl.c"
        var $50=($49) & 31; //@line 691 "xmltok_impl.c"
        var $51=1 << ($50); //@line 691 "xmltok_impl.c"
        var $52=($51) & ($45); //@line 691 "xmltok_impl.c"
        var $53=($52)==0; //@line 691 "xmltok_impl.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 691 "xmltok_impl.c"
      case 7: // $bb6
        var $54=$nextTokPtr_addr; //@line 691 "xmltok_impl.c"
        var $55=$ptr_addr; //@line 691 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 691 "xmltok_impl.c"
        $0=0; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 8: // $bb7
        var $56=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $57=$56+2; //@line 691 "xmltok_impl.c"
        $ptr_addr=$57; //@line 691 "xmltok_impl.c"
        $hadColon=0; //@line 713 "xmltok_impl.c"
        __label__ = 96; break; //@line 713 "xmltok_impl.c"
      case 9: // $bb8
        var $58=$end_addr; //@line 691 "xmltok_impl.c"
        var $59=($58); //@line 691 "xmltok_impl.c"
        var $60=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $61=($60); //@line 691 "xmltok_impl.c"
        var $62=($59) - ($61); //@line 691 "xmltok_impl.c"
        var $63=($62) <= 1; //@line 691 "xmltok_impl.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 691 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 11: // $bb10
        var $64=$nextTokPtr_addr; //@line 691 "xmltok_impl.c"
        var $65=$ptr_addr; //@line 691 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 691 "xmltok_impl.c"
        $0=0; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 12: // $bb11
        var $66=$end_addr; //@line 691 "xmltok_impl.c"
        var $67=($66); //@line 691 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $69=($68); //@line 691 "xmltok_impl.c"
        var $70=($67) - ($69); //@line 691 "xmltok_impl.c"
        var $71=($70) <= 2; //@line 691 "xmltok_impl.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 691 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 14: // $bb13
        var $72=$nextTokPtr_addr; //@line 691 "xmltok_impl.c"
        var $73=$ptr_addr; //@line 691 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 691 "xmltok_impl.c"
        $0=0; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 15: // $bb14
        var $74=$end_addr; //@line 691 "xmltok_impl.c"
        var $75=($74); //@line 691 "xmltok_impl.c"
        var $76=$ptr_addr; //@line 691 "xmltok_impl.c"
        var $77=($76); //@line 691 "xmltok_impl.c"
        var $78=($75) - ($77); //@line 691 "xmltok_impl.c"
        var $79=($78) <= 3; //@line 691 "xmltok_impl.c"
        if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 691 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 17: // $bb16
        var $80=$nextTokPtr_addr; //@line 691 "xmltok_impl.c"
        var $81=$ptr_addr; //@line 691 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 691 "xmltok_impl.c"
        $0=0; //@line 691 "xmltok_impl.c"
        __label__ = 98; break; //@line 691 "xmltok_impl.c"
      case 18: // $bb17
        var $82=$ptr_addr; //@line 693 "xmltok_impl.c"
        var $83=$82+2; //@line 693 "xmltok_impl.c"
        $ptr_addr=$83; //@line 693 "xmltok_impl.c"
        var $84=$ptr_addr; //@line 693 "xmltok_impl.c"
        var $85=$end_addr; //@line 693 "xmltok_impl.c"
        var $86=($84)==($85); //@line 693 "xmltok_impl.c"
        if ($86) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 693 "xmltok_impl.c"
      case 19: // $bb18
        $0=-1; //@line 694 "xmltok_impl.c"
        __label__ = 98; break; //@line 694 "xmltok_impl.c"
      case 20: // $bb19
        var $87=$ptr_addr; //@line 695 "xmltok_impl.c"
        var $88=$87; //@line 695 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 695 "xmltok_impl.c"
        var $90=($89)==0; //@line 695 "xmltok_impl.c"
        if ($90) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 695 "xmltok_impl.c"
      case 21: // $bb20
        var $91=$enc_addr; //@line 695 "xmltok_impl.c"
        var $92=$91; //@line 695 "xmltok_impl.c"
        var $93=$ptr_addr; //@line 695 "xmltok_impl.c"
        var $94=$93+1; //@line 695 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 695 "xmltok_impl.c"
        var $96=($95); //@line 695 "xmltok_impl.c"
        var $97=$92+76; //@line 695 "xmltok_impl.c"
        var $98=$97+$96; //@line 695 "xmltok_impl.c"
        var $99=HEAP[$98]; //@line 695 "xmltok_impl.c"
        var $100=($99); //@line 695 "xmltok_impl.c"
        $iftmp_1215=$100; //@line 695 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 23; break; //@line 695 "xmltok_impl.c"
      case 22: // $bb21
        var $101=$ptr_addr; //@line 695 "xmltok_impl.c"
        var $102=$101+1; //@line 695 "xmltok_impl.c"
        var $103=HEAP[$102]; //@line 695 "xmltok_impl.c"
        var $104=($103); //@line 695 "xmltok_impl.c"
        var $105=$ptr_addr; //@line 695 "xmltok_impl.c"
        var $106=$105; //@line 695 "xmltok_impl.c"
        var $107=HEAP[$106]; //@line 695 "xmltok_impl.c"
        var $108=($107); //@line 695 "xmltok_impl.c"
        var $109=((($108)) & 255); //@line 695 "xmltok_impl.c"
        var $110=((($104)) & 255); //@line 695 "xmltok_impl.c"
        var $111=_unicode_byte_type($109, $110); //@line 695 "xmltok_impl.c"
        $iftmp_1215=$111; //@line 695 "xmltok_impl.c"
        __lastLabel__ = 22; __label__ = 23; break; //@line 695 "xmltok_impl.c"
      case 23: // $bb22
        var $112=__lastLabel__ == 22 ? $111 : ($100);
        if ($112 == 20) {
          __label__ = 25; break;
        }
        else if ($112 == 27) {
          __label__ = 24; break;
        }
        else {
        __label__ = 26; break;
        }
        
      case 24: // $bb23
        var $113=$ptr_addr; //@line 697 "xmltok_impl.c"
        var $114=$113+2; //@line 697 "xmltok_impl.c"
        var $115=$enc_addr; //@line 697 "xmltok_impl.c"
        var $116=$end_addr; //@line 697 "xmltok_impl.c"
        var $117=$nextTokPtr_addr; //@line 697 "xmltok_impl.c"
        var $118=_big2_scanComment($115, $114, $116, $117); //@line 697 "xmltok_impl.c"
        $0=$118; //@line 697 "xmltok_impl.c"
        __label__ = 98; break; //@line 697 "xmltok_impl.c"
      case 25: // $bb24
        var $119=$ptr_addr; //@line 699 "xmltok_impl.c"
        var $120=$119+2; //@line 699 "xmltok_impl.c"
        var $121=$enc_addr; //@line 699 "xmltok_impl.c"
        var $122=$end_addr; //@line 699 "xmltok_impl.c"
        var $123=$nextTokPtr_addr; //@line 699 "xmltok_impl.c"
        var $124=_big2_scanCdataSection($121, $120, $122, $123); //@line 699 "xmltok_impl.c"
        $0=$124; //@line 699 "xmltok_impl.c"
        __label__ = 98; break; //@line 699 "xmltok_impl.c"
      case 26: // $bb25
        var $125=$nextTokPtr_addr; //@line 702 "xmltok_impl.c"
        var $126=$ptr_addr; //@line 702 "xmltok_impl.c"
        HEAP[$125]=$126; //@line 702 "xmltok_impl.c"
        $0=0; //@line 703 "xmltok_impl.c"
        __label__ = 98; break; //@line 703 "xmltok_impl.c"
      case 27: // $bb26
        var $127=$ptr_addr; //@line 705 "xmltok_impl.c"
        var $128=$127+2; //@line 705 "xmltok_impl.c"
        var $129=$enc_addr; //@line 705 "xmltok_impl.c"
        var $130=$end_addr; //@line 705 "xmltok_impl.c"
        var $131=$nextTokPtr_addr; //@line 705 "xmltok_impl.c"
        var $132=_big2_scanPi($129, $128, $130, $131); //@line 705 "xmltok_impl.c"
        $0=$132; //@line 705 "xmltok_impl.c"
        __label__ = 98; break; //@line 705 "xmltok_impl.c"
      case 28: // $bb27
        var $133=$ptr_addr; //@line 707 "xmltok_impl.c"
        var $134=$133+2; //@line 707 "xmltok_impl.c"
        var $135=$enc_addr; //@line 707 "xmltok_impl.c"
        var $136=$end_addr; //@line 707 "xmltok_impl.c"
        var $137=$nextTokPtr_addr; //@line 707 "xmltok_impl.c"
        var $138=_big2_scanEndTag($135, $134, $136, $137); //@line 707 "xmltok_impl.c"
        $0=$138; //@line 707 "xmltok_impl.c"
        __label__ = 98; break; //@line 707 "xmltok_impl.c"
      case 29: // $bb28
        var $139=$nextTokPtr_addr; //@line 709 "xmltok_impl.c"
        var $140=$ptr_addr; //@line 709 "xmltok_impl.c"
        HEAP[$139]=$140; //@line 709 "xmltok_impl.c"
        $0=0; //@line 710 "xmltok_impl.c"
        __label__ = 98; break; //@line 710 "xmltok_impl.c"
      case 30: // $bb29
        var $141=$ptr_addr; //@line 717 "xmltok_impl.c"
        var $142=$141; //@line 717 "xmltok_impl.c"
        var $143=HEAP[$142]; //@line 717 "xmltok_impl.c"
        var $144=($143)==0; //@line 717 "xmltok_impl.c"
        if ($144) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 717 "xmltok_impl.c"
      case 31: // $bb30
        var $145=$enc_addr; //@line 717 "xmltok_impl.c"
        var $146=$145; //@line 717 "xmltok_impl.c"
        var $147=$ptr_addr; //@line 717 "xmltok_impl.c"
        var $148=$147+1; //@line 717 "xmltok_impl.c"
        var $149=HEAP[$148]; //@line 717 "xmltok_impl.c"
        var $150=($149); //@line 717 "xmltok_impl.c"
        var $151=$146+76; //@line 717 "xmltok_impl.c"
        var $152=$151+$150; //@line 717 "xmltok_impl.c"
        var $153=HEAP[$152]; //@line 717 "xmltok_impl.c"
        var $154=($153); //@line 717 "xmltok_impl.c"
        $iftmp_1217=$154; //@line 717 "xmltok_impl.c"
        __lastLabel__ = 31; __label__ = 33; break; //@line 717 "xmltok_impl.c"
      case 32: // $bb31
        var $155=$ptr_addr; //@line 717 "xmltok_impl.c"
        var $156=$155+1; //@line 717 "xmltok_impl.c"
        var $157=HEAP[$156]; //@line 717 "xmltok_impl.c"
        var $158=($157); //@line 717 "xmltok_impl.c"
        var $159=$ptr_addr; //@line 717 "xmltok_impl.c"
        var $160=$159; //@line 717 "xmltok_impl.c"
        var $161=HEAP[$160]; //@line 717 "xmltok_impl.c"
        var $162=($161); //@line 717 "xmltok_impl.c"
        var $163=((($162)) & 255); //@line 717 "xmltok_impl.c"
        var $164=((($158)) & 255); //@line 717 "xmltok_impl.c"
        var $165=_unicode_byte_type($163, $164); //@line 717 "xmltok_impl.c"
        $iftmp_1217=$165; //@line 717 "xmltok_impl.c"
        __lastLabel__ = 32; __label__ = 33; break; //@line 717 "xmltok_impl.c"
      case 33: // $bb32
        var $166=__lastLabel__ == 32 ? $165 : ($154);
        if ($166 == 5) {
          __label__ = 37; break;
        }
        else if ($166 == 6) {
          __label__ = 40; break;
        }
        else if ($166 == 7) {
          __label__ = 43; break;
        }
        else if ($166 == 9) {
          __label__ = 67; break;
        }
        else if ($166 == 10) {
          __label__ = 67; break;
        }
        else if ($166 == 11) {
          __label__ = 88; break;
        }
        else if ($166 == 17) {
          __label__ = 89; break;
        }
        else if ($166 == 21) {
          __label__ = 67; break;
        }
        else if ($166 == 22) {
          __label__ = 36; break;
        }
        else if ($166 == 23) {
          __label__ = 46; break;
        }
        else if ($166 == 24) {
          __label__ = 36; break;
        }
        else if ($166 == 25) {
          __label__ = 36; break;
        }
        else if ($166 == 26) {
          __label__ = 36; break;
        }
        else if ($166 == 27) {
          __label__ = 36; break;
        }
        else if ($166 == 29) {
          __label__ = 34; break;
        }
        else {
        __label__ = 95; break;
        }
        
      case 34: // $bb33
        var $167=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $168=$167; //@line 718 "xmltok_impl.c"
        var $169=HEAP[$168]; //@line 718 "xmltok_impl.c"
        var $170=($169); //@line 718 "xmltok_impl.c"
        var $171=_namePages+$170; //@line 718 "xmltok_impl.c"
        var $172=HEAP[$171]; //@line 718 "xmltok_impl.c"
        var $173=($172); //@line 718 "xmltok_impl.c"
        var $174=($173) * 8;
        var $175=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $176=$175+1; //@line 718 "xmltok_impl.c"
        var $177=HEAP[$176]; //@line 718 "xmltok_impl.c"
        var $178=($177) >>> 5; //@line 718 "xmltok_impl.c"
        var $179=($178); //@line 718 "xmltok_impl.c"
        var $180=($179) + ($174); //@line 718 "xmltok_impl.c"
        var $181=_namingBitmap+$180*4; //@line 718 "xmltok_impl.c"
        var $182=HEAP[$181]; //@line 718 "xmltok_impl.c"
        var $183=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $184=$183+1; //@line 718 "xmltok_impl.c"
        var $185=HEAP[$184]; //@line 718 "xmltok_impl.c"
        var $186=($185); //@line 718 "xmltok_impl.c"
        var $187=($186) & 31; //@line 718 "xmltok_impl.c"
        var $188=1 << ($187); //@line 718 "xmltok_impl.c"
        var $189=($188) & ($182); //@line 718 "xmltok_impl.c"
        var $190=($189)==0; //@line 718 "xmltok_impl.c"
        if ($190) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 718 "xmltok_impl.c"
      case 35: // $bb34
        var $191=$nextTokPtr_addr; //@line 718 "xmltok_impl.c"
        var $192=$ptr_addr; //@line 718 "xmltok_impl.c"
        HEAP[$191]=$192; //@line 718 "xmltok_impl.c"
        $0=0; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 36: // $bb35
        var $193=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $194=$193+2; //@line 718 "xmltok_impl.c"
        $ptr_addr=$194; //@line 718 "xmltok_impl.c"
        __label__ = 96; break; //@line 718 "xmltok_impl.c"
      case 37: // $bb36
        var $195=$end_addr; //@line 718 "xmltok_impl.c"
        var $196=($195); //@line 718 "xmltok_impl.c"
        var $197=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $198=($197); //@line 718 "xmltok_impl.c"
        var $199=($196) - ($198); //@line 718 "xmltok_impl.c"
        var $200=($199) <= 1; //@line 718 "xmltok_impl.c"
        if ($200) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 718 "xmltok_impl.c"
      case 38: // $bb37
        $0=-2; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 39: // $bb38
        var $201=$nextTokPtr_addr; //@line 718 "xmltok_impl.c"
        var $202=$ptr_addr; //@line 718 "xmltok_impl.c"
        HEAP[$201]=$202; //@line 718 "xmltok_impl.c"
        $0=0; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 40: // $bb39
        var $203=$end_addr; //@line 718 "xmltok_impl.c"
        var $204=($203); //@line 718 "xmltok_impl.c"
        var $205=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $206=($205); //@line 718 "xmltok_impl.c"
        var $207=($204) - ($206); //@line 718 "xmltok_impl.c"
        var $208=($207) <= 2; //@line 718 "xmltok_impl.c"
        if ($208) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 718 "xmltok_impl.c"
      case 41: // $bb40
        $0=-2; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 42: // $bb41
        var $209=$nextTokPtr_addr; //@line 718 "xmltok_impl.c"
        var $210=$ptr_addr; //@line 718 "xmltok_impl.c"
        HEAP[$209]=$210; //@line 718 "xmltok_impl.c"
        $0=0; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 43: // $bb42
        var $211=$end_addr; //@line 718 "xmltok_impl.c"
        var $212=($211); //@line 718 "xmltok_impl.c"
        var $213=$ptr_addr; //@line 718 "xmltok_impl.c"
        var $214=($213); //@line 718 "xmltok_impl.c"
        var $215=($212) - ($214); //@line 718 "xmltok_impl.c"
        var $216=($215) <= 3; //@line 718 "xmltok_impl.c"
        if ($216) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 718 "xmltok_impl.c"
      case 44: // $bb43
        $0=-2; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 45: // $bb44
        var $217=$nextTokPtr_addr; //@line 718 "xmltok_impl.c"
        var $218=$ptr_addr; //@line 718 "xmltok_impl.c"
        HEAP[$217]=$218; //@line 718 "xmltok_impl.c"
        $0=0; //@line 718 "xmltok_impl.c"
        __label__ = 98; break; //@line 718 "xmltok_impl.c"
      case 46: // $bb45
        var $219=$hadColon; //@line 721 "xmltok_impl.c"
        var $220=($219)!=0; //@line 721 "xmltok_impl.c"
        if ($220) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 721 "xmltok_impl.c"
      case 47: // $bb46
        var $221=$nextTokPtr_addr; //@line 722 "xmltok_impl.c"
        var $222=$ptr_addr; //@line 722 "xmltok_impl.c"
        HEAP[$221]=$222; //@line 722 "xmltok_impl.c"
        $0=0; //@line 723 "xmltok_impl.c"
        __label__ = 98; break; //@line 723 "xmltok_impl.c"
      case 48: // $bb47
        $hadColon=1; //@line 725 "xmltok_impl.c"
        var $223=$ptr_addr; //@line 726 "xmltok_impl.c"
        var $224=$223+2; //@line 726 "xmltok_impl.c"
        $ptr_addr=$224; //@line 726 "xmltok_impl.c"
        var $225=$ptr_addr; //@line 727 "xmltok_impl.c"
        var $226=$end_addr; //@line 727 "xmltok_impl.c"
        var $227=($225)==($226); //@line 727 "xmltok_impl.c"
        if ($227) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 727 "xmltok_impl.c"
      case 49: // $bb48
        $0=-1; //@line 728 "xmltok_impl.c"
        __label__ = 98; break; //@line 728 "xmltok_impl.c"
      case 50: // $bb49
        var $228=$ptr_addr; //@line 729 "xmltok_impl.c"
        var $229=$228; //@line 729 "xmltok_impl.c"
        var $230=HEAP[$229]; //@line 729 "xmltok_impl.c"
        var $231=($230)==0; //@line 729 "xmltok_impl.c"
        if ($231) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 729 "xmltok_impl.c"
      case 51: // $bb50
        var $232=$enc_addr; //@line 729 "xmltok_impl.c"
        var $233=$232; //@line 729 "xmltok_impl.c"
        var $234=$ptr_addr; //@line 729 "xmltok_impl.c"
        var $235=$234+1; //@line 729 "xmltok_impl.c"
        var $236=HEAP[$235]; //@line 729 "xmltok_impl.c"
        var $237=($236); //@line 729 "xmltok_impl.c"
        var $238=$233+76; //@line 729 "xmltok_impl.c"
        var $239=$238+$237; //@line 729 "xmltok_impl.c"
        var $240=HEAP[$239]; //@line 729 "xmltok_impl.c"
        var $241=($240); //@line 729 "xmltok_impl.c"
        $iftmp_1225=$241; //@line 729 "xmltok_impl.c"
        __lastLabel__ = 51; __label__ = 53; break; //@line 729 "xmltok_impl.c"
      case 52: // $bb51
        var $242=$ptr_addr; //@line 729 "xmltok_impl.c"
        var $243=$242+1; //@line 729 "xmltok_impl.c"
        var $244=HEAP[$243]; //@line 729 "xmltok_impl.c"
        var $245=($244); //@line 729 "xmltok_impl.c"
        var $246=$ptr_addr; //@line 729 "xmltok_impl.c"
        var $247=$246; //@line 729 "xmltok_impl.c"
        var $248=HEAP[$247]; //@line 729 "xmltok_impl.c"
        var $249=($248); //@line 729 "xmltok_impl.c"
        var $250=((($249)) & 255); //@line 729 "xmltok_impl.c"
        var $251=((($245)) & 255); //@line 729 "xmltok_impl.c"
        var $252=_unicode_byte_type($250, $251); //@line 729 "xmltok_impl.c"
        $iftmp_1225=$252; //@line 729 "xmltok_impl.c"
        __lastLabel__ = 52; __label__ = 53; break; //@line 729 "xmltok_impl.c"
      case 53: // $bb52
        var $253=__lastLabel__ == 52 ? $252 : ($241);
        if ($253 == 5) {
          __label__ = 57; break;
        }
        else if ($253 == 6) {
          __label__ = 60; break;
        }
        else if ($253 == 7) {
          __label__ = 63; break;
        }
        else if ($253 == 22) {
          __label__ = 56; break;
        }
        else if ($253 == 24) {
          __label__ = 56; break;
        }
        else if ($253 == 29) {
          __label__ = 54; break;
        }
        else {
        __label__ = 66; break;
        }
        
      case 54: // $bb53
        var $254=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $255=$254; //@line 730 "xmltok_impl.c"
        var $256=HEAP[$255]; //@line 730 "xmltok_impl.c"
        var $257=($256); //@line 730 "xmltok_impl.c"
        var $258=_nmstrtPages+$257; //@line 730 "xmltok_impl.c"
        var $259=HEAP[$258]; //@line 730 "xmltok_impl.c"
        var $260=($259); //@line 730 "xmltok_impl.c"
        var $261=($260) * 8;
        var $262=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $263=$262+1; //@line 730 "xmltok_impl.c"
        var $264=HEAP[$263]; //@line 730 "xmltok_impl.c"
        var $265=($264) >>> 5; //@line 730 "xmltok_impl.c"
        var $266=($265); //@line 730 "xmltok_impl.c"
        var $267=($266) + ($261); //@line 730 "xmltok_impl.c"
        var $268=_namingBitmap+$267*4; //@line 730 "xmltok_impl.c"
        var $269=HEAP[$268]; //@line 730 "xmltok_impl.c"
        var $270=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $271=$270+1; //@line 730 "xmltok_impl.c"
        var $272=HEAP[$271]; //@line 730 "xmltok_impl.c"
        var $273=($272); //@line 730 "xmltok_impl.c"
        var $274=($273) & 31; //@line 730 "xmltok_impl.c"
        var $275=1 << ($274); //@line 730 "xmltok_impl.c"
        var $276=($275) & ($269); //@line 730 "xmltok_impl.c"
        var $277=($276)==0; //@line 730 "xmltok_impl.c"
        if ($277) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 730 "xmltok_impl.c"
      case 55: // $bb54
        var $278=$nextTokPtr_addr; //@line 730 "xmltok_impl.c"
        var $279=$ptr_addr; //@line 730 "xmltok_impl.c"
        HEAP[$278]=$279; //@line 730 "xmltok_impl.c"
        $0=0; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 56: // $bb55
        var $280=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $281=$280+2; //@line 730 "xmltok_impl.c"
        $ptr_addr=$281; //@line 730 "xmltok_impl.c"
        __label__ = 96; break; //@line 730 "xmltok_impl.c"
      case 57: // $bb56
        var $282=$end_addr; //@line 730 "xmltok_impl.c"
        var $283=($282); //@line 730 "xmltok_impl.c"
        var $284=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $285=($284); //@line 730 "xmltok_impl.c"
        var $286=($283) - ($285); //@line 730 "xmltok_impl.c"
        var $287=($286) <= 1; //@line 730 "xmltok_impl.c"
        if ($287) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 730 "xmltok_impl.c"
      case 58: // $bb57
        $0=-2; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 59: // $bb58
        var $288=$nextTokPtr_addr; //@line 730 "xmltok_impl.c"
        var $289=$ptr_addr; //@line 730 "xmltok_impl.c"
        HEAP[$288]=$289; //@line 730 "xmltok_impl.c"
        $0=0; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 60: // $bb59
        var $290=$end_addr; //@line 730 "xmltok_impl.c"
        var $291=($290); //@line 730 "xmltok_impl.c"
        var $292=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $293=($292); //@line 730 "xmltok_impl.c"
        var $294=($291) - ($293); //@line 730 "xmltok_impl.c"
        var $295=($294) <= 2; //@line 730 "xmltok_impl.c"
        if ($295) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 730 "xmltok_impl.c"
      case 61: // $bb60
        $0=-2; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 62: // $bb61
        var $296=$nextTokPtr_addr; //@line 730 "xmltok_impl.c"
        var $297=$ptr_addr; //@line 730 "xmltok_impl.c"
        HEAP[$296]=$297; //@line 730 "xmltok_impl.c"
        $0=0; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 63: // $bb62
        var $298=$end_addr; //@line 730 "xmltok_impl.c"
        var $299=($298); //@line 730 "xmltok_impl.c"
        var $300=$ptr_addr; //@line 730 "xmltok_impl.c"
        var $301=($300); //@line 730 "xmltok_impl.c"
        var $302=($299) - ($301); //@line 730 "xmltok_impl.c"
        var $303=($302) <= 3; //@line 730 "xmltok_impl.c"
        if ($303) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 730 "xmltok_impl.c"
      case 64: // $bb63
        $0=-2; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 65: // $bb64
        var $304=$nextTokPtr_addr; //@line 730 "xmltok_impl.c"
        var $305=$ptr_addr; //@line 730 "xmltok_impl.c"
        HEAP[$304]=$305; //@line 730 "xmltok_impl.c"
        $0=0; //@line 730 "xmltok_impl.c"
        __label__ = 98; break; //@line 730 "xmltok_impl.c"
      case 66: // $bb65
        var $306=$nextTokPtr_addr; //@line 732 "xmltok_impl.c"
        var $307=$ptr_addr; //@line 732 "xmltok_impl.c"
        HEAP[$306]=$307; //@line 732 "xmltok_impl.c"
        $0=0; //@line 733 "xmltok_impl.c"
        __label__ = 98; break; //@line 733 "xmltok_impl.c"
      case 67: // $bb66
        var $308=$ptr_addr; //@line 739 "xmltok_impl.c"
        var $309=$308+2; //@line 739 "xmltok_impl.c"
        $ptr_addr=$309; //@line 739 "xmltok_impl.c"
        __label__ = 86; break; //@line 739 "xmltok_impl.c"
      case 68: // $bb67
        var $310=$ptr_addr; //@line 741 "xmltok_impl.c"
        var $311=$310; //@line 741 "xmltok_impl.c"
        var $312=HEAP[$311]; //@line 741 "xmltok_impl.c"
        var $313=($312)==0; //@line 741 "xmltok_impl.c"
        if ($313) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 741 "xmltok_impl.c"
      case 69: // $bb68
        var $314=$enc_addr; //@line 741 "xmltok_impl.c"
        var $315=$314; //@line 741 "xmltok_impl.c"
        var $316=$ptr_addr; //@line 741 "xmltok_impl.c"
        var $317=$316+1; //@line 741 "xmltok_impl.c"
        var $318=HEAP[$317]; //@line 741 "xmltok_impl.c"
        var $319=($318); //@line 741 "xmltok_impl.c"
        var $320=$315+76; //@line 741 "xmltok_impl.c"
        var $321=$320+$319; //@line 741 "xmltok_impl.c"
        var $322=HEAP[$321]; //@line 741 "xmltok_impl.c"
        var $323=($322); //@line 741 "xmltok_impl.c"
        $iftmp_1233=$323; //@line 741 "xmltok_impl.c"
        __lastLabel__ = 69; __label__ = 71; break; //@line 741 "xmltok_impl.c"
      case 70: // $bb69
        var $324=$ptr_addr; //@line 741 "xmltok_impl.c"
        var $325=$324+1; //@line 741 "xmltok_impl.c"
        var $326=HEAP[$325]; //@line 741 "xmltok_impl.c"
        var $327=($326); //@line 741 "xmltok_impl.c"
        var $328=$ptr_addr; //@line 741 "xmltok_impl.c"
        var $329=$328; //@line 741 "xmltok_impl.c"
        var $330=HEAP[$329]; //@line 741 "xmltok_impl.c"
        var $331=($330); //@line 741 "xmltok_impl.c"
        var $332=((($331)) & 255); //@line 741 "xmltok_impl.c"
        var $333=((($327)) & 255); //@line 741 "xmltok_impl.c"
        var $334=_unicode_byte_type($332, $333); //@line 741 "xmltok_impl.c"
        $iftmp_1233=$334; //@line 741 "xmltok_impl.c"
        __lastLabel__ = 70; __label__ = 71; break; //@line 741 "xmltok_impl.c"
      case 71: // $bb70
        var $335=__lastLabel__ == 70 ? $334 : ($323);
        if ($335 == 5) {
          __label__ = 75; break;
        }
        else if ($335 == 6) {
          __label__ = 78; break;
        }
        else if ($335 == 7) {
          __label__ = 81; break;
        }
        else if ($335 == 9) {
          __label__ = 84; break;
        }
        else if ($335 == 10) {
          __label__ = 84; break;
        }
        else if ($335 == 11) {
          __label__ = 88; break;
        }
        else if ($335 == 17) {
          __label__ = 89; break;
        }
        else if ($335 == 21) {
          __label__ = 84; break;
        }
        else if ($335 == 22) {
          __label__ = 74; break;
        }
        else if ($335 == 24) {
          __label__ = 74; break;
        }
        else if ($335 == 29) {
          __label__ = 72; break;
        }
        else {
        __label__ = 85; break;
        }
        
      case 72: // $bb71
        var $336=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $337=$336; //@line 742 "xmltok_impl.c"
        var $338=HEAP[$337]; //@line 742 "xmltok_impl.c"
        var $339=($338); //@line 742 "xmltok_impl.c"
        var $340=_nmstrtPages+$339; //@line 742 "xmltok_impl.c"
        var $341=HEAP[$340]; //@line 742 "xmltok_impl.c"
        var $342=($341); //@line 742 "xmltok_impl.c"
        var $343=($342) * 8;
        var $344=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $345=$344+1; //@line 742 "xmltok_impl.c"
        var $346=HEAP[$345]; //@line 742 "xmltok_impl.c"
        var $347=($346) >>> 5; //@line 742 "xmltok_impl.c"
        var $348=($347); //@line 742 "xmltok_impl.c"
        var $349=($348) + ($343); //@line 742 "xmltok_impl.c"
        var $350=_namingBitmap+$349*4; //@line 742 "xmltok_impl.c"
        var $351=HEAP[$350]; //@line 742 "xmltok_impl.c"
        var $352=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $353=$352+1; //@line 742 "xmltok_impl.c"
        var $354=HEAP[$353]; //@line 742 "xmltok_impl.c"
        var $355=($354); //@line 742 "xmltok_impl.c"
        var $356=($355) & 31; //@line 742 "xmltok_impl.c"
        var $357=1 << ($356); //@line 742 "xmltok_impl.c"
        var $358=($357) & ($351); //@line 742 "xmltok_impl.c"
        var $359=($358)==0; //@line 742 "xmltok_impl.c"
        if ($359) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 742 "xmltok_impl.c"
      case 73: // $bb72
        var $360=$nextTokPtr_addr; //@line 742 "xmltok_impl.c"
        var $361=$ptr_addr; //@line 742 "xmltok_impl.c"
        HEAP[$360]=$361; //@line 742 "xmltok_impl.c"
        $0=0; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 74: // $bb73
        var $362=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $363=$362+2; //@line 742 "xmltok_impl.c"
        $ptr_addr=$363; //@line 742 "xmltok_impl.c"
        var $364=$enc_addr; //@line 754 "xmltok_impl.c"
        var $365=$ptr_addr; //@line 754 "xmltok_impl.c"
        var $366=$end_addr; //@line 754 "xmltok_impl.c"
        var $367=$nextTokPtr_addr; //@line 754 "xmltok_impl.c"
        var $368=_big2_scanAtts($364, $365, $366, $367); //@line 754 "xmltok_impl.c"
        $0=$368; //@line 754 "xmltok_impl.c"
        __label__ = 98; break; //@line 754 "xmltok_impl.c"
      case 75: // $bb74
        var $369=$end_addr; //@line 742 "xmltok_impl.c"
        var $370=($369); //@line 742 "xmltok_impl.c"
        var $371=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $372=($371); //@line 742 "xmltok_impl.c"
        var $373=($370) - ($372); //@line 742 "xmltok_impl.c"
        var $374=($373) <= 1; //@line 742 "xmltok_impl.c"
        if ($374) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 742 "xmltok_impl.c"
      case 76: // $bb75
        $0=-2; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 77: // $bb76
        var $375=$nextTokPtr_addr; //@line 742 "xmltok_impl.c"
        var $376=$ptr_addr; //@line 742 "xmltok_impl.c"
        HEAP[$375]=$376; //@line 742 "xmltok_impl.c"
        $0=0; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 78: // $bb77
        var $377=$end_addr; //@line 742 "xmltok_impl.c"
        var $378=($377); //@line 742 "xmltok_impl.c"
        var $379=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $380=($379); //@line 742 "xmltok_impl.c"
        var $381=($378) - ($380); //@line 742 "xmltok_impl.c"
        var $382=($381) <= 2; //@line 742 "xmltok_impl.c"
        if ($382) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 742 "xmltok_impl.c"
      case 79: // $bb78
        $0=-2; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 80: // $bb79
        var $383=$nextTokPtr_addr; //@line 742 "xmltok_impl.c"
        var $384=$ptr_addr; //@line 742 "xmltok_impl.c"
        HEAP[$383]=$384; //@line 742 "xmltok_impl.c"
        $0=0; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 81: // $bb80
        var $385=$end_addr; //@line 742 "xmltok_impl.c"
        var $386=($385); //@line 742 "xmltok_impl.c"
        var $387=$ptr_addr; //@line 742 "xmltok_impl.c"
        var $388=($387); //@line 742 "xmltok_impl.c"
        var $389=($386) - ($388); //@line 742 "xmltok_impl.c"
        var $390=($389) <= 3; //@line 742 "xmltok_impl.c"
        if ($390) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 742 "xmltok_impl.c"
      case 82: // $bb81
        $0=-2; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 83: // $bb82
        var $391=$nextTokPtr_addr; //@line 742 "xmltok_impl.c"
        var $392=$ptr_addr; //@line 742 "xmltok_impl.c"
        HEAP[$391]=$392; //@line 742 "xmltok_impl.c"
        $0=0; //@line 742 "xmltok_impl.c"
        __label__ = 98; break; //@line 742 "xmltok_impl.c"
      case 84: // $bb85
        var $393=$ptr_addr; //@line 748 "xmltok_impl.c"
        var $394=$393+2; //@line 748 "xmltok_impl.c"
        $ptr_addr=$394; //@line 748 "xmltok_impl.c"
        __label__ = 86; break; //@line 748 "xmltok_impl.c"
      case 85: // $bb86
        var $395=$nextTokPtr_addr; //@line 751 "xmltok_impl.c"
        var $396=$ptr_addr; //@line 751 "xmltok_impl.c"
        HEAP[$395]=$396; //@line 751 "xmltok_impl.c"
        $0=0; //@line 752 "xmltok_impl.c"
        __label__ = 98; break; //@line 752 "xmltok_impl.c"
      case 86: // $bb87
        var $397=$ptr_addr; //@line 740 "xmltok_impl.c"
        var $398=$end_addr; //@line 740 "xmltok_impl.c"
        var $399=($397)!=($398); //@line 740 "xmltok_impl.c"
        if ($399) { __label__ = 68; break; } else { __label__ = 87; break; } //@line 740 "xmltok_impl.c"
      case 87: // $bb88
        $0=-1; //@line 756 "xmltok_impl.c"
        __label__ = 98; break; //@line 756 "xmltok_impl.c"
      case 88: // $gt
        var $400=$ptr_addr; //@line 760 "xmltok_impl.c"
        var $401=$400+2; //@line 760 "xmltok_impl.c"
        var $402=$nextTokPtr_addr; //@line 760 "xmltok_impl.c"
        HEAP[$402]=$401; //@line 760 "xmltok_impl.c"
        $0=2; //@line 761 "xmltok_impl.c"
        __label__ = 98; break; //@line 761 "xmltok_impl.c"
      case 89: // $sol
        var $403=$ptr_addr; //@line 764 "xmltok_impl.c"
        var $404=$403+2; //@line 764 "xmltok_impl.c"
        $ptr_addr=$404; //@line 764 "xmltok_impl.c"
        var $405=$ptr_addr; //@line 765 "xmltok_impl.c"
        var $406=$end_addr; //@line 765 "xmltok_impl.c"
        var $407=($405)==($406); //@line 765 "xmltok_impl.c"
        if ($407) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 765 "xmltok_impl.c"
      case 90: // $bb89
        $0=-1; //@line 766 "xmltok_impl.c"
        __label__ = 98; break; //@line 766 "xmltok_impl.c"
      case 91: // $bb90
        var $408=$ptr_addr; //@line 767 "xmltok_impl.c"
        var $409=$408; //@line 767 "xmltok_impl.c"
        var $410=HEAP[$409]; //@line 767 "xmltok_impl.c"
        var $411=($410)!=0; //@line 767 "xmltok_impl.c"
        if ($411) { __label__ = 93; break; } else { __label__ = 92; break; } //@line 767 "xmltok_impl.c"
      case 92: // $bb91
        var $412=$ptr_addr; //@line 767 "xmltok_impl.c"
        var $413=$412+1; //@line 767 "xmltok_impl.c"
        var $414=HEAP[$413]; //@line 767 "xmltok_impl.c"
        var $415=($414)!=62; //@line 767 "xmltok_impl.c"
        if ($415) { __label__ = 93; break; } else { __label__ = 94; break; } //@line 767 "xmltok_impl.c"
      case 93: // $bb92
        var $416=$nextTokPtr_addr; //@line 768 "xmltok_impl.c"
        var $417=$ptr_addr; //@line 768 "xmltok_impl.c"
        HEAP[$416]=$417; //@line 768 "xmltok_impl.c"
        $0=0; //@line 769 "xmltok_impl.c"
        __label__ = 98; break; //@line 769 "xmltok_impl.c"
      case 94: // $bb93
        var $418=$ptr_addr; //@line 771 "xmltok_impl.c"
        var $419=$418+2; //@line 771 "xmltok_impl.c"
        var $420=$nextTokPtr_addr; //@line 771 "xmltok_impl.c"
        HEAP[$420]=$419; //@line 771 "xmltok_impl.c"
        $0=4; //@line 772 "xmltok_impl.c"
        __label__ = 98; break; //@line 772 "xmltok_impl.c"
      case 95: // $bb94
        var $421=$nextTokPtr_addr; //@line 774 "xmltok_impl.c"
        var $422=$ptr_addr; //@line 774 "xmltok_impl.c"
        HEAP[$421]=$422; //@line 774 "xmltok_impl.c"
        $0=0; //@line 775 "xmltok_impl.c"
        __label__ = 98; break; //@line 775 "xmltok_impl.c"
      case 96: // $bb95
        var $423=$ptr_addr; //@line 716 "xmltok_impl.c"
        var $424=$end_addr; //@line 716 "xmltok_impl.c"
        var $425=($423)!=($424); //@line 716 "xmltok_impl.c"
        if ($425) { __label__ = 30; break; } else { __label__ = 97; break; } //@line 716 "xmltok_impl.c"
      case 97: // $bb96
        $0=-1; //@line 778 "xmltok_impl.c"
        __label__ = 98; break; //@line 778 "xmltok_impl.c"
      case 98: // $bb97
        var $426=$0; //@line 689 "xmltok_impl.c"
        $retval=$426; //@line 689 "xmltok_impl.c"
        var $retval98=$retval; //@line 689 "xmltok_impl.c"
        ;
        return $retval98; //@line 689 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_contentTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1254;
        var $iftmp_1246;
        var $iftmp_1244;
        var $0;
        var $n;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 785 "xmltok_impl.c"
        var $2=$end_addr; //@line 785 "xmltok_impl.c"
        var $3=($1)==($2); //@line 785 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 785 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 786 "xmltok_impl.c"
        __label__ = 68; break; //@line 786 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$end_addr; //@line 788 "xmltok_impl.c"
        var $5=($4); //@line 788 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 788 "xmltok_impl.c"
        var $7=($6); //@line 788 "xmltok_impl.c"
        var $8=($5) - ($7); //@line 788 "xmltok_impl.c"
        $n=$8; //@line 788 "xmltok_impl.c"
        var $9=$n; //@line 789 "xmltok_impl.c"
        var $10=($9) & 1; //@line 789 "xmltok_impl.c"
        var $11=((($10)) & 255); //@line 789 "xmltok_impl.c"
        var $toBool=($11)!=0; //@line 789 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 789 "xmltok_impl.c"
      case 3: // $bb2
        var $12=$n; //@line 790 "xmltok_impl.c"
        var $13=($12) & -2; //@line 790 "xmltok_impl.c"
        $n=$13; //@line 790 "xmltok_impl.c"
        var $14=$n; //@line 791 "xmltok_impl.c"
        var $15=($14)==0; //@line 791 "xmltok_impl.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 791 "xmltok_impl.c"
      case 4: // $bb3
        $0=-1; //@line 792 "xmltok_impl.c"
        __label__ = 68; break; //@line 792 "xmltok_impl.c"
      case 5: // $bb4
        var $16=$ptr_addr; //@line 793 "xmltok_impl.c"
        var $17=$n; //@line 793 "xmltok_impl.c"
        var $18=$16+$17; //@line 793 "xmltok_impl.c"
        $end_addr=$18; //@line 793 "xmltok_impl.c"
        __label__ = 6; break; //@line 793 "xmltok_impl.c"
      case 6: // $bb5
        var $19=$ptr_addr; //@line 796 "xmltok_impl.c"
        var $20=$19; //@line 796 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 796 "xmltok_impl.c"
        var $22=($21)==0; //@line 796 "xmltok_impl.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 796 "xmltok_impl.c"
      case 7: // $bb6
        var $23=$enc_addr; //@line 796 "xmltok_impl.c"
        var $24=$23; //@line 796 "xmltok_impl.c"
        var $25=$ptr_addr; //@line 796 "xmltok_impl.c"
        var $26=$25+1; //@line 796 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 796 "xmltok_impl.c"
        var $28=($27); //@line 796 "xmltok_impl.c"
        var $29=$24+76; //@line 796 "xmltok_impl.c"
        var $30=$29+$28; //@line 796 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 796 "xmltok_impl.c"
        var $32=($31); //@line 796 "xmltok_impl.c"
        $iftmp_1244=$32; //@line 796 "xmltok_impl.c"
        __lastLabel__ = 7; __label__ = 9; break; //@line 796 "xmltok_impl.c"
      case 8: // $bb7
        var $33=$ptr_addr; //@line 796 "xmltok_impl.c"
        var $34=$33+1; //@line 796 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 796 "xmltok_impl.c"
        var $36=($35); //@line 796 "xmltok_impl.c"
        var $37=$ptr_addr; //@line 796 "xmltok_impl.c"
        var $38=$37; //@line 796 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 796 "xmltok_impl.c"
        var $40=($39); //@line 796 "xmltok_impl.c"
        var $41=((($40)) & 255); //@line 796 "xmltok_impl.c"
        var $42=((($36)) & 255); //@line 796 "xmltok_impl.c"
        var $43=_unicode_byte_type($41, $42); //@line 796 "xmltok_impl.c"
        $iftmp_1244=$43; //@line 796 "xmltok_impl.c"
        __lastLabel__ = 8; __label__ = 9; break; //@line 796 "xmltok_impl.c"
      case 9: // $bb8
        var $44=__lastLabel__ == 8 ? $43 : ($32);
        if ($44 == 0) {
          __label__ = 40; break;
        }
        else if ($44 == 1) {
          __label__ = 40; break;
        }
        else if ($44 == 2) {
          __label__ = 10; break;
        }
        else if ($44 == 3) {
          __label__ = 11; break;
        }
        else if ($44 == 4) {
          __label__ = 21; break;
        }
        else if ($44 == 5) {
          __label__ = 31; break;
        }
        else if ($44 == 6) {
          __label__ = 34; break;
        }
        else if ($44 == 7) {
          __label__ = 37; break;
        }
        else if ($44 == 8) {
          __label__ = 40; break;
        }
        else if ($44 == 9) {
          __label__ = 12; break;
        }
        else if ($44 == 10) {
          __label__ = 20; break;
        }
        else {
        __label__ = 41; break;
        }
        
      case 10: // $bb9
        var $45=$ptr_addr; //@line 798 "xmltok_impl.c"
        var $46=$45+2; //@line 798 "xmltok_impl.c"
        var $47=$enc_addr; //@line 798 "xmltok_impl.c"
        var $48=$end_addr; //@line 798 "xmltok_impl.c"
        var $49=$nextTokPtr_addr; //@line 798 "xmltok_impl.c"
        var $50=_big2_scanLt($47, $46, $48, $49); //@line 798 "xmltok_impl.c"
        $0=$50; //@line 798 "xmltok_impl.c"
        __label__ = 68; break; //@line 798 "xmltok_impl.c"
      case 11: // $bb10
        var $51=$ptr_addr; //@line 800 "xmltok_impl.c"
        var $52=$51+2; //@line 800 "xmltok_impl.c"
        var $53=$enc_addr; //@line 800 "xmltok_impl.c"
        var $54=$end_addr; //@line 800 "xmltok_impl.c"
        var $55=$nextTokPtr_addr; //@line 800 "xmltok_impl.c"
        var $56=_big2_scanRef($53, $52, $54, $55); //@line 800 "xmltok_impl.c"
        $0=$56; //@line 800 "xmltok_impl.c"
        __label__ = 68; break; //@line 800 "xmltok_impl.c"
      case 12: // $bb11
        var $57=$ptr_addr; //@line 802 "xmltok_impl.c"
        var $58=$57+2; //@line 802 "xmltok_impl.c"
        $ptr_addr=$58; //@line 802 "xmltok_impl.c"
        var $59=$ptr_addr; //@line 803 "xmltok_impl.c"
        var $60=$end_addr; //@line 803 "xmltok_impl.c"
        var $61=($59)==($60); //@line 803 "xmltok_impl.c"
        if ($61) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 803 "xmltok_impl.c"
      case 13: // $bb12
        $0=-3; //@line 804 "xmltok_impl.c"
        __label__ = 68; break; //@line 804 "xmltok_impl.c"
      case 14: // $bb13
        var $62=$ptr_addr; //@line 805 "xmltok_impl.c"
        var $63=$62; //@line 805 "xmltok_impl.c"
        var $64=HEAP[$63]; //@line 805 "xmltok_impl.c"
        var $65=($64)==0; //@line 805 "xmltok_impl.c"
        if ($65) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 805 "xmltok_impl.c"
      case 15: // $bb14
        var $66=$enc_addr; //@line 805 "xmltok_impl.c"
        var $67=$66; //@line 805 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 805 "xmltok_impl.c"
        var $69=$68+1; //@line 805 "xmltok_impl.c"
        var $70=HEAP[$69]; //@line 805 "xmltok_impl.c"
        var $71=($70); //@line 805 "xmltok_impl.c"
        var $72=$67+76; //@line 805 "xmltok_impl.c"
        var $73=$72+$71; //@line 805 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 805 "xmltok_impl.c"
        var $75=($74)==10; //@line 805 "xmltok_impl.c"
        var $76=($75); //@line 805 "xmltok_impl.c"
        $iftmp_1246=$76; //@line 805 "xmltok_impl.c"
        __lastLabel__ = 15; __label__ = 17; break; //@line 805 "xmltok_impl.c"
      case 16: // $bb15
        var $77=$ptr_addr; //@line 805 "xmltok_impl.c"
        var $78=$77+1; //@line 805 "xmltok_impl.c"
        var $79=HEAP[$78]; //@line 805 "xmltok_impl.c"
        var $80=($79); //@line 805 "xmltok_impl.c"
        var $81=$ptr_addr; //@line 805 "xmltok_impl.c"
        var $82=$81; //@line 805 "xmltok_impl.c"
        var $83=HEAP[$82]; //@line 805 "xmltok_impl.c"
        var $84=($83); //@line 805 "xmltok_impl.c"
        var $85=((($84)) & 255); //@line 805 "xmltok_impl.c"
        var $86=((($80)) & 255); //@line 805 "xmltok_impl.c"
        var $87=_unicode_byte_type($85, $86); //@line 805 "xmltok_impl.c"
        var $88=($87)==10; //@line 805 "xmltok_impl.c"
        var $89=($88); //@line 805 "xmltok_impl.c"
        $iftmp_1246=$89; //@line 805 "xmltok_impl.c"
        __lastLabel__ = 16; __label__ = 17; break; //@line 805 "xmltok_impl.c"
      case 17: // $bb16
        var $90=__lastLabel__ == 16 ? $89 : ($76);
        var $toBool17=($90)!=0; //@line 805 "xmltok_impl.c"
        if ($toBool17) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 805 "xmltok_impl.c"
      case 18: // $bb18
        var $91=$ptr_addr; //@line 806 "xmltok_impl.c"
        var $92=$91+2; //@line 806 "xmltok_impl.c"
        $ptr_addr=$92; //@line 806 "xmltok_impl.c"
        __label__ = 19; break; //@line 806 "xmltok_impl.c"
      case 19: // $bb19
        var $93=$nextTokPtr_addr; //@line 807 "xmltok_impl.c"
        var $94=$ptr_addr; //@line 807 "xmltok_impl.c"
        HEAP[$93]=$94; //@line 807 "xmltok_impl.c"
        $0=7; //@line 808 "xmltok_impl.c"
        __label__ = 68; break; //@line 808 "xmltok_impl.c"
      case 20: // $bb20
        var $95=$ptr_addr; //@line 810 "xmltok_impl.c"
        var $96=$95+2; //@line 810 "xmltok_impl.c"
        var $97=$nextTokPtr_addr; //@line 810 "xmltok_impl.c"
        HEAP[$97]=$96; //@line 810 "xmltok_impl.c"
        $0=7; //@line 811 "xmltok_impl.c"
        __label__ = 68; break; //@line 811 "xmltok_impl.c"
      case 21: // $bb21
        var $98=$ptr_addr; //@line 813 "xmltok_impl.c"
        var $99=$98+2; //@line 813 "xmltok_impl.c"
        $ptr_addr=$99; //@line 813 "xmltok_impl.c"
        var $100=$ptr_addr; //@line 814 "xmltok_impl.c"
        var $101=$end_addr; //@line 814 "xmltok_impl.c"
        var $102=($100)==($101); //@line 814 "xmltok_impl.c"
        if ($102) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 814 "xmltok_impl.c"
      case 22: // $bb22
        $0=-5; //@line 815 "xmltok_impl.c"
        __label__ = 68; break; //@line 815 "xmltok_impl.c"
      case 23: // $bb23
        var $103=$ptr_addr; //@line 816 "xmltok_impl.c"
        var $104=$103; //@line 816 "xmltok_impl.c"
        var $105=HEAP[$104]; //@line 816 "xmltok_impl.c"
        var $106=($105)!=0; //@line 816 "xmltok_impl.c"
        if ($106) { __label__ = 66; break; } else { __label__ = 24; break; } //@line 816 "xmltok_impl.c"
      case 24: // $bb24
        var $107=$ptr_addr; //@line 816 "xmltok_impl.c"
        var $108=$107+1; //@line 816 "xmltok_impl.c"
        var $109=HEAP[$108]; //@line 816 "xmltok_impl.c"
        var $110=($109)!=93; //@line 816 "xmltok_impl.c"
        if ($110) { __label__ = 66; break; } else { __label__ = 25; break; } //@line 816 "xmltok_impl.c"
      case 25: // $bb25
        var $111=$ptr_addr; //@line 818 "xmltok_impl.c"
        var $112=$111+2; //@line 818 "xmltok_impl.c"
        $ptr_addr=$112; //@line 818 "xmltok_impl.c"
        var $113=$ptr_addr; //@line 819 "xmltok_impl.c"
        var $114=$end_addr; //@line 819 "xmltok_impl.c"
        var $115=($113)==($114); //@line 819 "xmltok_impl.c"
        if ($115) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 819 "xmltok_impl.c"
      case 26: // $bb26
        $0=-5; //@line 820 "xmltok_impl.c"
        __label__ = 68; break; //@line 820 "xmltok_impl.c"
      case 27: // $bb27
        var $116=$ptr_addr; //@line 821 "xmltok_impl.c"
        var $117=$116; //@line 821 "xmltok_impl.c"
        var $118=HEAP[$117]; //@line 821 "xmltok_impl.c"
        var $119=($118)!=0; //@line 821 "xmltok_impl.c"
        if ($119) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 821 "xmltok_impl.c"
      case 28: // $bb28
        var $120=$ptr_addr; //@line 821 "xmltok_impl.c"
        var $121=$120+1; //@line 821 "xmltok_impl.c"
        var $122=HEAP[$121]; //@line 821 "xmltok_impl.c"
        var $123=($122)!=62; //@line 821 "xmltok_impl.c"
        if ($123) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 821 "xmltok_impl.c"
      case 29: // $bb29
        var $124=$ptr_addr; //@line 822 "xmltok_impl.c"
        var $125=$124+-2; //@line 822 "xmltok_impl.c"
        $ptr_addr=$125; //@line 822 "xmltok_impl.c"
        __label__ = 66; break; //@line 822 "xmltok_impl.c"
      case 30: // $bb30
        var $126=$nextTokPtr_addr; //@line 825 "xmltok_impl.c"
        var $127=$ptr_addr; //@line 825 "xmltok_impl.c"
        HEAP[$126]=$127; //@line 825 "xmltok_impl.c"
        $0=0; //@line 826 "xmltok_impl.c"
        __label__ = 68; break; //@line 826 "xmltok_impl.c"
      case 31: // $bb31
        var $128=$end_addr; //@line 827 "xmltok_impl.c"
        var $129=($128); //@line 827 "xmltok_impl.c"
        var $130=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $131=($130); //@line 827 "xmltok_impl.c"
        var $132=($129) - ($131); //@line 827 "xmltok_impl.c"
        var $133=($132) <= 1; //@line 827 "xmltok_impl.c"
        if ($133) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 827 "xmltok_impl.c"
      case 32: // $bb32
        $0=-2; //@line 827 "xmltok_impl.c"
        __label__ = 68; break; //@line 827 "xmltok_impl.c"
      case 33: // $bb33
        var $134=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $135=$134+2; //@line 827 "xmltok_impl.c"
        $ptr_addr=$135; //@line 827 "xmltok_impl.c"
        __label__ = 66; break; //@line 827 "xmltok_impl.c"
      case 34: // $bb34
        var $136=$end_addr; //@line 827 "xmltok_impl.c"
        var $137=($136); //@line 827 "xmltok_impl.c"
        var $138=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $139=($138); //@line 827 "xmltok_impl.c"
        var $140=($137) - ($139); //@line 827 "xmltok_impl.c"
        var $141=($140) <= 2; //@line 827 "xmltok_impl.c"
        if ($141) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 827 "xmltok_impl.c"
      case 35: // $bb35
        $0=-2; //@line 827 "xmltok_impl.c"
        __label__ = 68; break; //@line 827 "xmltok_impl.c"
      case 36: // $bb36
        var $142=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $143=$142+3; //@line 827 "xmltok_impl.c"
        $ptr_addr=$143; //@line 827 "xmltok_impl.c"
        __label__ = 66; break; //@line 827 "xmltok_impl.c"
      case 37: // $bb37
        var $144=$end_addr; //@line 827 "xmltok_impl.c"
        var $145=($144); //@line 827 "xmltok_impl.c"
        var $146=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $147=($146); //@line 827 "xmltok_impl.c"
        var $148=($145) - ($147); //@line 827 "xmltok_impl.c"
        var $149=($148) <= 3; //@line 827 "xmltok_impl.c"
        if ($149) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 827 "xmltok_impl.c"
      case 38: // $bb38
        $0=-2; //@line 827 "xmltok_impl.c"
        __label__ = 68; break; //@line 827 "xmltok_impl.c"
      case 39: // $bb39
        var $150=$ptr_addr; //@line 827 "xmltok_impl.c"
        var $151=$150+4; //@line 827 "xmltok_impl.c"
        $ptr_addr=$151; //@line 827 "xmltok_impl.c"
        __label__ = 66; break; //@line 827 "xmltok_impl.c"
      case 40: // $bb40
        var $152=$nextTokPtr_addr; //@line 827 "xmltok_impl.c"
        var $153=$ptr_addr; //@line 827 "xmltok_impl.c"
        HEAP[$152]=$153; //@line 827 "xmltok_impl.c"
        $0=0; //@line 827 "xmltok_impl.c"
        __label__ = 68; break; //@line 827 "xmltok_impl.c"
      case 41: // $bb41
        var $154=$ptr_addr; //@line 829 "xmltok_impl.c"
        var $155=$154+2; //@line 829 "xmltok_impl.c"
        $ptr_addr=$155; //@line 829 "xmltok_impl.c"
        __label__ = 66; break; //@line 829 "xmltok_impl.c"
      case 42: // $bb43
        var $156=$ptr_addr; //@line 833 "xmltok_impl.c"
        var $157=$156; //@line 833 "xmltok_impl.c"
        var $158=HEAP[$157]; //@line 833 "xmltok_impl.c"
        var $159=($158)==0; //@line 833 "xmltok_impl.c"
        if ($159) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 833 "xmltok_impl.c"
      case 43: // $bb44
        var $160=$enc_addr; //@line 833 "xmltok_impl.c"
        var $161=$160; //@line 833 "xmltok_impl.c"
        var $162=$ptr_addr; //@line 833 "xmltok_impl.c"
        var $163=$162+1; //@line 833 "xmltok_impl.c"
        var $164=HEAP[$163]; //@line 833 "xmltok_impl.c"
        var $165=($164); //@line 833 "xmltok_impl.c"
        var $166=$161+76; //@line 833 "xmltok_impl.c"
        var $167=$166+$165; //@line 833 "xmltok_impl.c"
        var $168=HEAP[$167]; //@line 833 "xmltok_impl.c"
        var $169=($168); //@line 833 "xmltok_impl.c"
        $iftmp_1254=$169; //@line 833 "xmltok_impl.c"
        __lastLabel__ = 43; __label__ = 45; break; //@line 833 "xmltok_impl.c"
      case 44: // $bb45
        var $170=$ptr_addr; //@line 833 "xmltok_impl.c"
        var $171=$170+1; //@line 833 "xmltok_impl.c"
        var $172=HEAP[$171]; //@line 833 "xmltok_impl.c"
        var $173=($172); //@line 833 "xmltok_impl.c"
        var $174=$ptr_addr; //@line 833 "xmltok_impl.c"
        var $175=$174; //@line 833 "xmltok_impl.c"
        var $176=HEAP[$175]; //@line 833 "xmltok_impl.c"
        var $177=($176); //@line 833 "xmltok_impl.c"
        var $178=((($177)) & 255); //@line 833 "xmltok_impl.c"
        var $179=((($173)) & 255); //@line 833 "xmltok_impl.c"
        var $180=_unicode_byte_type($178, $179); //@line 833 "xmltok_impl.c"
        $iftmp_1254=$180; //@line 833 "xmltok_impl.c"
        __lastLabel__ = 44; __label__ = 45; break; //@line 833 "xmltok_impl.c"
      case 45: // $bb46
        var $181=__lastLabel__ == 44 ? $180 : ($169);
        if ($181 == 0) {
          __label__ = 64; break;
        }
        else if ($181 == 1) {
          __label__ = 64; break;
        }
        else if ($181 == 2) {
          __label__ = 64; break;
        }
        else if ($181 == 3) {
          __label__ = 64; break;
        }
        else if ($181 == 4) {
          __label__ = 55; break;
        }
        else if ($181 == 5) {
          __label__ = 46; break;
        }
        else if ($181 == 6) {
          __label__ = 49; break;
        }
        else if ($181 == 7) {
          __label__ = 52; break;
        }
        else if ($181 == 8) {
          __label__ = 64; break;
        }
        else if ($181 == 9) {
          __label__ = 64; break;
        }
        else if ($181 == 10) {
          __label__ = 64; break;
        }
        else {
        __label__ = 65; break;
        }
        
      case 46: // $bb47
        var $182=$end_addr; //@line 842 "xmltok_impl.c"
        var $183=($182); //@line 842 "xmltok_impl.c"
        var $184=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $185=($184); //@line 842 "xmltok_impl.c"
        var $186=($183) - ($185); //@line 842 "xmltok_impl.c"
        var $187=($186) <= 1; //@line 842 "xmltok_impl.c"
        if ($187) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 842 "xmltok_impl.c"
      case 47: // $bb48
        var $188=$nextTokPtr_addr; //@line 842 "xmltok_impl.c"
        var $189=$ptr_addr; //@line 842 "xmltok_impl.c"
        HEAP[$188]=$189; //@line 842 "xmltok_impl.c"
        $0=6; //@line 842 "xmltok_impl.c"
        __label__ = 68; break; //@line 842 "xmltok_impl.c"
      case 48: // $bb49
        var $190=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $191=$190+2; //@line 842 "xmltok_impl.c"
        $ptr_addr=$191; //@line 842 "xmltok_impl.c"
        __label__ = 66; break; //@line 842 "xmltok_impl.c"
      case 49: // $bb50
        var $192=$end_addr; //@line 842 "xmltok_impl.c"
        var $193=($192); //@line 842 "xmltok_impl.c"
        var $194=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $195=($194); //@line 842 "xmltok_impl.c"
        var $196=($193) - ($195); //@line 842 "xmltok_impl.c"
        var $197=($196) <= 2; //@line 842 "xmltok_impl.c"
        if ($197) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 842 "xmltok_impl.c"
      case 50: // $bb51
        var $198=$nextTokPtr_addr; //@line 842 "xmltok_impl.c"
        var $199=$ptr_addr; //@line 842 "xmltok_impl.c"
        HEAP[$198]=$199; //@line 842 "xmltok_impl.c"
        $0=6; //@line 842 "xmltok_impl.c"
        __label__ = 68; break; //@line 842 "xmltok_impl.c"
      case 51: // $bb52
        var $200=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $201=$200+3; //@line 842 "xmltok_impl.c"
        $ptr_addr=$201; //@line 842 "xmltok_impl.c"
        __label__ = 66; break; //@line 842 "xmltok_impl.c"
      case 52: // $bb53
        var $202=$end_addr; //@line 842 "xmltok_impl.c"
        var $203=($202); //@line 842 "xmltok_impl.c"
        var $204=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $205=($204); //@line 842 "xmltok_impl.c"
        var $206=($203) - ($205); //@line 842 "xmltok_impl.c"
        var $207=($206) <= 3; //@line 842 "xmltok_impl.c"
        if ($207) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 842 "xmltok_impl.c"
      case 53: // $bb54
        var $208=$nextTokPtr_addr; //@line 842 "xmltok_impl.c"
        var $209=$ptr_addr; //@line 842 "xmltok_impl.c"
        HEAP[$208]=$209; //@line 842 "xmltok_impl.c"
        $0=6; //@line 842 "xmltok_impl.c"
        __label__ = 68; break; //@line 842 "xmltok_impl.c"
      case 54: // $bb55
        var $210=$ptr_addr; //@line 842 "xmltok_impl.c"
        var $211=$210+4; //@line 842 "xmltok_impl.c"
        $ptr_addr=$211; //@line 842 "xmltok_impl.c"
        __label__ = 66; break; //@line 842 "xmltok_impl.c"
      case 55: // $bb56
        var $212=$ptr_addr; //@line 845 "xmltok_impl.c"
        var $213=$212+2; //@line 845 "xmltok_impl.c"
        var $214=$end_addr; //@line 845 "xmltok_impl.c"
        var $215=($213)!=($214); //@line 845 "xmltok_impl.c"
        if ($215) { __label__ = 56; break; } else { __label__ = 64; break; } //@line 845 "xmltok_impl.c"
      case 56: // $bb57
        var $216=$ptr_addr; //@line 846 "xmltok_impl.c"
        var $217=$216+2; //@line 846 "xmltok_impl.c"
        var $218=$217; //@line 846 "xmltok_impl.c"
        var $219=HEAP[$218]; //@line 846 "xmltok_impl.c"
        var $220=($219)!=0; //@line 846 "xmltok_impl.c"
        if ($220) { __label__ = 58; break; } else { __label__ = 57; break; } //@line 846 "xmltok_impl.c"
      case 57: // $bb58
        var $221=$ptr_addr; //@line 846 "xmltok_impl.c"
        var $222=$221+2; //@line 846 "xmltok_impl.c"
        var $223=$222+1; //@line 846 "xmltok_impl.c"
        var $224=HEAP[$223]; //@line 846 "xmltok_impl.c"
        var $225=($224)!=93; //@line 846 "xmltok_impl.c"
        if ($225) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 846 "xmltok_impl.c"
      case 58: // $bb59
        var $226=$ptr_addr; //@line 847 "xmltok_impl.c"
        var $227=$226+2; //@line 847 "xmltok_impl.c"
        $ptr_addr=$227; //@line 847 "xmltok_impl.c"
        __label__ = 66; break; //@line 847 "xmltok_impl.c"
      case 59: // $bb60
        var $228=$ptr_addr; //@line 850 "xmltok_impl.c"
        var $229=$228+4; //@line 850 "xmltok_impl.c"
        var $230=$end_addr; //@line 850 "xmltok_impl.c"
        var $231=($229)!=($230); //@line 850 "xmltok_impl.c"
        if ($231) { __label__ = 60; break; } else { __label__ = 64; break; } //@line 850 "xmltok_impl.c"
      case 60: // $bb61
        var $232=$ptr_addr; //@line 851 "xmltok_impl.c"
        var $233=$232+4; //@line 851 "xmltok_impl.c"
        var $234=$233; //@line 851 "xmltok_impl.c"
        var $235=HEAP[$234]; //@line 851 "xmltok_impl.c"
        var $236=($235)!=0; //@line 851 "xmltok_impl.c"
        if ($236) { __label__ = 62; break; } else { __label__ = 61; break; } //@line 851 "xmltok_impl.c"
      case 61: // $bb62
        var $237=$ptr_addr; //@line 851 "xmltok_impl.c"
        var $238=$237+4; //@line 851 "xmltok_impl.c"
        var $239=$238+1; //@line 851 "xmltok_impl.c"
        var $240=HEAP[$239]; //@line 851 "xmltok_impl.c"
        var $241=($240)!=62; //@line 851 "xmltok_impl.c"
        if ($241) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 851 "xmltok_impl.c"
      case 62: // $bb63
        var $242=$ptr_addr; //@line 852 "xmltok_impl.c"
        var $243=$242+2; //@line 852 "xmltok_impl.c"
        $ptr_addr=$243; //@line 852 "xmltok_impl.c"
        __label__ = 66; break; //@line 852 "xmltok_impl.c"
      case 63: // $bb64
        var $244=$ptr_addr; //@line 855 "xmltok_impl.c"
        var $245=$244+4; //@line 855 "xmltok_impl.c"
        var $246=$nextTokPtr_addr; //@line 855 "xmltok_impl.c"
        HEAP[$246]=$245; //@line 855 "xmltok_impl.c"
        $0=0; //@line 856 "xmltok_impl.c"
        __label__ = 68; break; //@line 856 "xmltok_impl.c"
      case 64: // $bb65
        var $247=$nextTokPtr_addr; //@line 867 "xmltok_impl.c"
        var $248=$ptr_addr; //@line 867 "xmltok_impl.c"
        HEAP[$247]=$248; //@line 867 "xmltok_impl.c"
        $0=6; //@line 868 "xmltok_impl.c"
        __label__ = 68; break; //@line 868 "xmltok_impl.c"
      case 65: // $bb66
        var $249=$ptr_addr; //@line 870 "xmltok_impl.c"
        var $250=$249+2; //@line 870 "xmltok_impl.c"
        $ptr_addr=$250; //@line 870 "xmltok_impl.c"
        __label__ = 66; break; //@line 870 "xmltok_impl.c"
      case 66: // $bb67
        var $251=$ptr_addr; //@line 832 "xmltok_impl.c"
        var $252=$end_addr; //@line 832 "xmltok_impl.c"
        var $253=($251)!=($252); //@line 832 "xmltok_impl.c"
        if ($253) { __label__ = 42; break; } else { __label__ = 67; break; } //@line 832 "xmltok_impl.c"
      case 67: // $bb68
        var $254=$nextTokPtr_addr; //@line 874 "xmltok_impl.c"
        var $255=$ptr_addr; //@line 874 "xmltok_impl.c"
        HEAP[$254]=$255; //@line 874 "xmltok_impl.c"
        $0=6; //@line 875 "xmltok_impl.c"
        __label__ = 68; break; //@line 875 "xmltok_impl.c"
      case 68: // $bb69
        var $256=$0; //@line 786 "xmltok_impl.c"
        $retval=$256; //@line 786 "xmltok_impl.c"
        var $retval70=$retval; //@line 786 "xmltok_impl.c"
        ;
        return $retval70; //@line 786 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanPercent($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1270;
        var $iftmp_1262;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 884 "xmltok_impl.c"
        var $2=$end_addr; //@line 884 "xmltok_impl.c"
        var $3=($1)==($2); //@line 884 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 884 "xmltok_impl.c"
      case 1: // $bb
        $0=-22; //@line 885 "xmltok_impl.c"
        __label__ = 40; break; //@line 885 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 886 "xmltok_impl.c"
        var $5=$4; //@line 886 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 886 "xmltok_impl.c"
        var $7=($6)==0; //@line 886 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 886 "xmltok_impl.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 886 "xmltok_impl.c"
        var $9=$8; //@line 886 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 886 "xmltok_impl.c"
        var $11=$10+1; //@line 886 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 886 "xmltok_impl.c"
        var $13=($12); //@line 886 "xmltok_impl.c"
        var $14=$9+76; //@line 886 "xmltok_impl.c"
        var $15=$14+$13; //@line 886 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 886 "xmltok_impl.c"
        var $17=($16); //@line 886 "xmltok_impl.c"
        $iftmp_1262=$17; //@line 886 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 886 "xmltok_impl.c"
      case 4: // $bb3
        var $18=$ptr_addr; //@line 886 "xmltok_impl.c"
        var $19=$18+1; //@line 886 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 886 "xmltok_impl.c"
        var $21=($20); //@line 886 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 886 "xmltok_impl.c"
        var $23=$22; //@line 886 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 886 "xmltok_impl.c"
        var $25=($24); //@line 886 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 886 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 886 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 886 "xmltok_impl.c"
        $iftmp_1262=$28; //@line 886 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 886 "xmltok_impl.c"
      case 5: // $bb4
        var $29=__lastLabel__ == 4 ? $28 : ($17);
        if ($29 == 5) {
          __label__ = 9; break;
        }
        else if ($29 == 6) {
          __label__ = 12; break;
        }
        else if ($29 == 7) {
          __label__ = 15; break;
        }
        else if ($29 == 9) {
          __label__ = 18; break;
        }
        else if ($29 == 10) {
          __label__ = 18; break;
        }
        else if ($29 == 21) {
          __label__ = 18; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 29) {
          __label__ = 6; break;
        }
        else if ($29 == 30) {
          __label__ = 18; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 6: // $bb5
        var $30=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $31=$30; //@line 887 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 887 "xmltok_impl.c"
        var $33=($32); //@line 887 "xmltok_impl.c"
        var $34=_nmstrtPages+$33; //@line 887 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 887 "xmltok_impl.c"
        var $36=($35); //@line 887 "xmltok_impl.c"
        var $37=($36) * 8;
        var $38=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $39=$38+1; //@line 887 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 887 "xmltok_impl.c"
        var $41=($40) >>> 5; //@line 887 "xmltok_impl.c"
        var $42=($41); //@line 887 "xmltok_impl.c"
        var $43=($42) + ($37); //@line 887 "xmltok_impl.c"
        var $44=_namingBitmap+$43*4; //@line 887 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 887 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $47=$46+1; //@line 887 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 887 "xmltok_impl.c"
        var $49=($48); //@line 887 "xmltok_impl.c"
        var $50=($49) & 31; //@line 887 "xmltok_impl.c"
        var $51=1 << ($50); //@line 887 "xmltok_impl.c"
        var $52=($51) & ($45); //@line 887 "xmltok_impl.c"
        var $53=($52)==0; //@line 887 "xmltok_impl.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 887 "xmltok_impl.c"
      case 7: // $bb6
        var $54=$nextTokPtr_addr; //@line 887 "xmltok_impl.c"
        var $55=$ptr_addr; //@line 887 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 887 "xmltok_impl.c"
        $0=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 8: // $bb7
        var $56=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $57=$56+2; //@line 887 "xmltok_impl.c"
        $ptr_addr=$57; //@line 887 "xmltok_impl.c"
        __label__ = 38; break; //@line 887 "xmltok_impl.c"
      case 9: // $bb8
        var $58=$end_addr; //@line 887 "xmltok_impl.c"
        var $59=($58); //@line 887 "xmltok_impl.c"
        var $60=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $61=($60); //@line 887 "xmltok_impl.c"
        var $62=($59) - ($61); //@line 887 "xmltok_impl.c"
        var $63=($62) <= 1; //@line 887 "xmltok_impl.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 887 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 11: // $bb10
        var $64=$nextTokPtr_addr; //@line 887 "xmltok_impl.c"
        var $65=$ptr_addr; //@line 887 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 887 "xmltok_impl.c"
        $0=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 12: // $bb11
        var $66=$end_addr; //@line 887 "xmltok_impl.c"
        var $67=($66); //@line 887 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $69=($68); //@line 887 "xmltok_impl.c"
        var $70=($67) - ($69); //@line 887 "xmltok_impl.c"
        var $71=($70) <= 2; //@line 887 "xmltok_impl.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 887 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 14: // $bb13
        var $72=$nextTokPtr_addr; //@line 887 "xmltok_impl.c"
        var $73=$ptr_addr; //@line 887 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 887 "xmltok_impl.c"
        $0=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 15: // $bb14
        var $74=$end_addr; //@line 887 "xmltok_impl.c"
        var $75=($74); //@line 887 "xmltok_impl.c"
        var $76=$ptr_addr; //@line 887 "xmltok_impl.c"
        var $77=($76); //@line 887 "xmltok_impl.c"
        var $78=($75) - ($77); //@line 887 "xmltok_impl.c"
        var $79=($78) <= 3; //@line 887 "xmltok_impl.c"
        if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 887 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 17: // $bb16
        var $80=$nextTokPtr_addr; //@line 887 "xmltok_impl.c"
        var $81=$ptr_addr; //@line 887 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 887 "xmltok_impl.c"
        $0=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 18: // $bb17
        var $82=$nextTokPtr_addr; //@line 889 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 889 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 889 "xmltok_impl.c"
        $0=22; //@line 890 "xmltok_impl.c"
        __label__ = 40; break; //@line 890 "xmltok_impl.c"
      case 19: // $bb18
        var $84=$nextTokPtr_addr; //@line 892 "xmltok_impl.c"
        var $85=$ptr_addr; //@line 892 "xmltok_impl.c"
        HEAP[$84]=$85; //@line 892 "xmltok_impl.c"
        $0=0; //@line 893 "xmltok_impl.c"
        __label__ = 40; break; //@line 893 "xmltok_impl.c"
      case 20: // $bb19
        var $86=$ptr_addr; //@line 896 "xmltok_impl.c"
        var $87=$86; //@line 896 "xmltok_impl.c"
        var $88=HEAP[$87]; //@line 896 "xmltok_impl.c"
        var $89=($88)==0; //@line 896 "xmltok_impl.c"
        if ($89) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 896 "xmltok_impl.c"
      case 21: // $bb20
        var $90=$enc_addr; //@line 896 "xmltok_impl.c"
        var $91=$90; //@line 896 "xmltok_impl.c"
        var $92=$ptr_addr; //@line 896 "xmltok_impl.c"
        var $93=$92+1; //@line 896 "xmltok_impl.c"
        var $94=HEAP[$93]; //@line 896 "xmltok_impl.c"
        var $95=($94); //@line 896 "xmltok_impl.c"
        var $96=$91+76; //@line 896 "xmltok_impl.c"
        var $97=$96+$95; //@line 896 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 896 "xmltok_impl.c"
        var $99=($98); //@line 896 "xmltok_impl.c"
        $iftmp_1270=$99; //@line 896 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 23; break; //@line 896 "xmltok_impl.c"
      case 22: // $bb21
        var $100=$ptr_addr; //@line 896 "xmltok_impl.c"
        var $101=$100+1; //@line 896 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 896 "xmltok_impl.c"
        var $103=($102); //@line 896 "xmltok_impl.c"
        var $104=$ptr_addr; //@line 896 "xmltok_impl.c"
        var $105=$104; //@line 896 "xmltok_impl.c"
        var $106=HEAP[$105]; //@line 896 "xmltok_impl.c"
        var $107=($106); //@line 896 "xmltok_impl.c"
        var $108=((($107)) & 255); //@line 896 "xmltok_impl.c"
        var $109=((($103)) & 255); //@line 896 "xmltok_impl.c"
        var $110=_unicode_byte_type($108, $109); //@line 896 "xmltok_impl.c"
        $iftmp_1270=$110; //@line 896 "xmltok_impl.c"
        __lastLabel__ = 22; __label__ = 23; break; //@line 896 "xmltok_impl.c"
      case 23: // $bb22
        var $111=__lastLabel__ == 22 ? $110 : ($99);
        if ($111 == 5) {
          __label__ = 27; break;
        }
        else if ($111 == 6) {
          __label__ = 30; break;
        }
        else if ($111 == 7) {
          __label__ = 33; break;
        }
        else if ($111 == 18) {
          __label__ = 36; break;
        }
        else if ($111 == 22) {
          __label__ = 26; break;
        }
        else if ($111 == 24) {
          __label__ = 26; break;
        }
        else if ($111 == 25) {
          __label__ = 26; break;
        }
        else if ($111 == 26) {
          __label__ = 26; break;
        }
        else if ($111 == 27) {
          __label__ = 26; break;
        }
        else if ($111 == 29) {
          __label__ = 24; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 24: // $bb23
        var $112=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $113=$112; //@line 897 "xmltok_impl.c"
        var $114=HEAP[$113]; //@line 897 "xmltok_impl.c"
        var $115=($114); //@line 897 "xmltok_impl.c"
        var $116=_namePages+$115; //@line 897 "xmltok_impl.c"
        var $117=HEAP[$116]; //@line 897 "xmltok_impl.c"
        var $118=($117); //@line 897 "xmltok_impl.c"
        var $119=($118) * 8;
        var $120=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $121=$120+1; //@line 897 "xmltok_impl.c"
        var $122=HEAP[$121]; //@line 897 "xmltok_impl.c"
        var $123=($122) >>> 5; //@line 897 "xmltok_impl.c"
        var $124=($123); //@line 897 "xmltok_impl.c"
        var $125=($124) + ($119); //@line 897 "xmltok_impl.c"
        var $126=_namingBitmap+$125*4; //@line 897 "xmltok_impl.c"
        var $127=HEAP[$126]; //@line 897 "xmltok_impl.c"
        var $128=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $129=$128+1; //@line 897 "xmltok_impl.c"
        var $130=HEAP[$129]; //@line 897 "xmltok_impl.c"
        var $131=($130); //@line 897 "xmltok_impl.c"
        var $132=($131) & 31; //@line 897 "xmltok_impl.c"
        var $133=1 << ($132); //@line 897 "xmltok_impl.c"
        var $134=($133) & ($127); //@line 897 "xmltok_impl.c"
        var $135=($134)==0; //@line 897 "xmltok_impl.c"
        if ($135) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 897 "xmltok_impl.c"
      case 25: // $bb24
        var $136=$nextTokPtr_addr; //@line 897 "xmltok_impl.c"
        var $137=$ptr_addr; //@line 897 "xmltok_impl.c"
        HEAP[$136]=$137; //@line 897 "xmltok_impl.c"
        $0=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 26: // $bb25
        var $138=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $139=$138+2; //@line 897 "xmltok_impl.c"
        $ptr_addr=$139; //@line 897 "xmltok_impl.c"
        __label__ = 38; break; //@line 897 "xmltok_impl.c"
      case 27: // $bb26
        var $140=$end_addr; //@line 897 "xmltok_impl.c"
        var $141=($140); //@line 897 "xmltok_impl.c"
        var $142=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $143=($142); //@line 897 "xmltok_impl.c"
        var $144=($141) - ($143); //@line 897 "xmltok_impl.c"
        var $145=($144) <= 1; //@line 897 "xmltok_impl.c"
        if ($145) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 897 "xmltok_impl.c"
      case 28: // $bb27
        $0=-2; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 29: // $bb28
        var $146=$nextTokPtr_addr; //@line 897 "xmltok_impl.c"
        var $147=$ptr_addr; //@line 897 "xmltok_impl.c"
        HEAP[$146]=$147; //@line 897 "xmltok_impl.c"
        $0=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 30: // $bb29
        var $148=$end_addr; //@line 897 "xmltok_impl.c"
        var $149=($148); //@line 897 "xmltok_impl.c"
        var $150=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $151=($150); //@line 897 "xmltok_impl.c"
        var $152=($149) - ($151); //@line 897 "xmltok_impl.c"
        var $153=($152) <= 2; //@line 897 "xmltok_impl.c"
        if ($153) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 897 "xmltok_impl.c"
      case 31: // $bb30
        $0=-2; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 32: // $bb31
        var $154=$nextTokPtr_addr; //@line 897 "xmltok_impl.c"
        var $155=$ptr_addr; //@line 897 "xmltok_impl.c"
        HEAP[$154]=$155; //@line 897 "xmltok_impl.c"
        $0=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 33: // $bb32
        var $156=$end_addr; //@line 897 "xmltok_impl.c"
        var $157=($156); //@line 897 "xmltok_impl.c"
        var $158=$ptr_addr; //@line 897 "xmltok_impl.c"
        var $159=($158); //@line 897 "xmltok_impl.c"
        var $160=($157) - ($159); //@line 897 "xmltok_impl.c"
        var $161=($160) <= 3; //@line 897 "xmltok_impl.c"
        if ($161) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 897 "xmltok_impl.c"
      case 34: // $bb33
        $0=-2; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 35: // $bb34
        var $162=$nextTokPtr_addr; //@line 897 "xmltok_impl.c"
        var $163=$ptr_addr; //@line 897 "xmltok_impl.c"
        HEAP[$162]=$163; //@line 897 "xmltok_impl.c"
        $0=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 36: // $bb35
        var $164=$ptr_addr; //@line 899 "xmltok_impl.c"
        var $165=$164+2; //@line 899 "xmltok_impl.c"
        var $166=$nextTokPtr_addr; //@line 899 "xmltok_impl.c"
        HEAP[$166]=$165; //@line 899 "xmltok_impl.c"
        $0=28; //@line 900 "xmltok_impl.c"
        __label__ = 40; break; //@line 900 "xmltok_impl.c"
      case 37: // $bb36
        var $167=$nextTokPtr_addr; //@line 902 "xmltok_impl.c"
        var $168=$ptr_addr; //@line 902 "xmltok_impl.c"
        HEAP[$167]=$168; //@line 902 "xmltok_impl.c"
        $0=0; //@line 903 "xmltok_impl.c"
        __label__ = 40; break; //@line 903 "xmltok_impl.c"
      case 38: // $bb37
        var $169=$ptr_addr; //@line 895 "xmltok_impl.c"
        var $170=$end_addr; //@line 895 "xmltok_impl.c"
        var $171=($169)!=($170); //@line 895 "xmltok_impl.c"
        if ($171) { __label__ = 20; break; } else { __label__ = 39; break; } //@line 895 "xmltok_impl.c"
      case 39: // $bb38
        $0=-1; //@line 906 "xmltok_impl.c"
        __label__ = 40; break; //@line 906 "xmltok_impl.c"
      case 40: // $bb39
        var $172=$0; //@line 885 "xmltok_impl.c"
        $retval=$172; //@line 885 "xmltok_impl.c"
        var $retval40=$retval; //@line 885 "xmltok_impl.c"
        ;
        return $retval40; //@line 885 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanPoundName($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1286;
        var $iftmp_1278;
        var $0;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 913 "xmltok_impl.c"
        var $2=$end_addr; //@line 913 "xmltok_impl.c"
        var $3=($1)==($2); //@line 913 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 913 "xmltok_impl.c"
      case 1: // $bb
        $0=-1; //@line 914 "xmltok_impl.c"
        __label__ = 39; break; //@line 914 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 915 "xmltok_impl.c"
        var $5=$4; //@line 915 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 915 "xmltok_impl.c"
        var $7=($6)==0; //@line 915 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 915 "xmltok_impl.c"
      case 3: // $bb2
        var $8=$enc_addr; //@line 915 "xmltok_impl.c"
        var $9=$8; //@line 915 "xmltok_impl.c"
        var $10=$ptr_addr; //@line 915 "xmltok_impl.c"
        var $11=$10+1; //@line 915 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 915 "xmltok_impl.c"
        var $13=($12); //@line 915 "xmltok_impl.c"
        var $14=$9+76; //@line 915 "xmltok_impl.c"
        var $15=$14+$13; //@line 915 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 915 "xmltok_impl.c"
        var $17=($16); //@line 915 "xmltok_impl.c"
        $iftmp_1278=$17; //@line 915 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 915 "xmltok_impl.c"
      case 4: // $bb3
        var $18=$ptr_addr; //@line 915 "xmltok_impl.c"
        var $19=$18+1; //@line 915 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 915 "xmltok_impl.c"
        var $21=($20); //@line 915 "xmltok_impl.c"
        var $22=$ptr_addr; //@line 915 "xmltok_impl.c"
        var $23=$22; //@line 915 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 915 "xmltok_impl.c"
        var $25=($24); //@line 915 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 915 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 915 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 915 "xmltok_impl.c"
        $iftmp_1278=$28; //@line 915 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 915 "xmltok_impl.c"
      case 5: // $bb4
        var $29=__lastLabel__ == 4 ? $28 : ($17);
        if ($29 == 5) {
          __label__ = 9; break;
        }
        else if ($29 == 6) {
          __label__ = 12; break;
        }
        else if ($29 == 7) {
          __label__ = 15; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 6: // $bb5
        var $30=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $31=$30; //@line 916 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 916 "xmltok_impl.c"
        var $33=($32); //@line 916 "xmltok_impl.c"
        var $34=_nmstrtPages+$33; //@line 916 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 916 "xmltok_impl.c"
        var $36=($35); //@line 916 "xmltok_impl.c"
        var $37=($36) * 8;
        var $38=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $39=$38+1; //@line 916 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 916 "xmltok_impl.c"
        var $41=($40) >>> 5; //@line 916 "xmltok_impl.c"
        var $42=($41); //@line 916 "xmltok_impl.c"
        var $43=($42) + ($37); //@line 916 "xmltok_impl.c"
        var $44=_namingBitmap+$43*4; //@line 916 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 916 "xmltok_impl.c"
        var $46=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $47=$46+1; //@line 916 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 916 "xmltok_impl.c"
        var $49=($48); //@line 916 "xmltok_impl.c"
        var $50=($49) & 31; //@line 916 "xmltok_impl.c"
        var $51=1 << ($50); //@line 916 "xmltok_impl.c"
        var $52=($51) & ($45); //@line 916 "xmltok_impl.c"
        var $53=($52)==0; //@line 916 "xmltok_impl.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 916 "xmltok_impl.c"
      case 7: // $bb6
        var $54=$nextTokPtr_addr; //@line 916 "xmltok_impl.c"
        var $55=$ptr_addr; //@line 916 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 916 "xmltok_impl.c"
        $0=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 8: // $bb7
        var $56=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $57=$56+2; //@line 916 "xmltok_impl.c"
        $ptr_addr=$57; //@line 916 "xmltok_impl.c"
        __label__ = 37; break; //@line 916 "xmltok_impl.c"
      case 9: // $bb8
        var $58=$end_addr; //@line 916 "xmltok_impl.c"
        var $59=($58); //@line 916 "xmltok_impl.c"
        var $60=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $61=($60); //@line 916 "xmltok_impl.c"
        var $62=($59) - ($61); //@line 916 "xmltok_impl.c"
        var $63=($62) <= 1; //@line 916 "xmltok_impl.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 916 "xmltok_impl.c"
      case 10: // $bb9
        $0=-2; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 11: // $bb10
        var $64=$nextTokPtr_addr; //@line 916 "xmltok_impl.c"
        var $65=$ptr_addr; //@line 916 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 916 "xmltok_impl.c"
        $0=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 12: // $bb11
        var $66=$end_addr; //@line 916 "xmltok_impl.c"
        var $67=($66); //@line 916 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $69=($68); //@line 916 "xmltok_impl.c"
        var $70=($67) - ($69); //@line 916 "xmltok_impl.c"
        var $71=($70) <= 2; //@line 916 "xmltok_impl.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 916 "xmltok_impl.c"
      case 13: // $bb12
        $0=-2; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 14: // $bb13
        var $72=$nextTokPtr_addr; //@line 916 "xmltok_impl.c"
        var $73=$ptr_addr; //@line 916 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 916 "xmltok_impl.c"
        $0=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 15: // $bb14
        var $74=$end_addr; //@line 916 "xmltok_impl.c"
        var $75=($74); //@line 916 "xmltok_impl.c"
        var $76=$ptr_addr; //@line 916 "xmltok_impl.c"
        var $77=($76); //@line 916 "xmltok_impl.c"
        var $78=($75) - ($77); //@line 916 "xmltok_impl.c"
        var $79=($78) <= 3; //@line 916 "xmltok_impl.c"
        if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 916 "xmltok_impl.c"
      case 16: // $bb15
        $0=-2; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 17: // $bb16
        var $80=$nextTokPtr_addr; //@line 916 "xmltok_impl.c"
        var $81=$ptr_addr; //@line 916 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 916 "xmltok_impl.c"
        $0=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 18: // $bb17
        var $82=$nextTokPtr_addr; //@line 918 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 918 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 918 "xmltok_impl.c"
        $0=0; //@line 919 "xmltok_impl.c"
        __label__ = 39; break; //@line 919 "xmltok_impl.c"
      case 19: // $bb18
        var $84=$ptr_addr; //@line 922 "xmltok_impl.c"
        var $85=$84; //@line 922 "xmltok_impl.c"
        var $86=HEAP[$85]; //@line 922 "xmltok_impl.c"
        var $87=($86)==0; //@line 922 "xmltok_impl.c"
        if ($87) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 922 "xmltok_impl.c"
      case 20: // $bb19
        var $88=$enc_addr; //@line 922 "xmltok_impl.c"
        var $89=$88; //@line 922 "xmltok_impl.c"
        var $90=$ptr_addr; //@line 922 "xmltok_impl.c"
        var $91=$90+1; //@line 922 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 922 "xmltok_impl.c"
        var $93=($92); //@line 922 "xmltok_impl.c"
        var $94=$89+76; //@line 922 "xmltok_impl.c"
        var $95=$94+$93; //@line 922 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 922 "xmltok_impl.c"
        var $97=($96); //@line 922 "xmltok_impl.c"
        $iftmp_1286=$97; //@line 922 "xmltok_impl.c"
        __lastLabel__ = 20; __label__ = 22; break; //@line 922 "xmltok_impl.c"
      case 21: // $bb20
        var $98=$ptr_addr; //@line 922 "xmltok_impl.c"
        var $99=$98+1; //@line 922 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 922 "xmltok_impl.c"
        var $101=($100); //@line 922 "xmltok_impl.c"
        var $102=$ptr_addr; //@line 922 "xmltok_impl.c"
        var $103=$102; //@line 922 "xmltok_impl.c"
        var $104=HEAP[$103]; //@line 922 "xmltok_impl.c"
        var $105=($104); //@line 922 "xmltok_impl.c"
        var $106=((($105)) & 255); //@line 922 "xmltok_impl.c"
        var $107=((($101)) & 255); //@line 922 "xmltok_impl.c"
        var $108=_unicode_byte_type($106, $107); //@line 922 "xmltok_impl.c"
        $iftmp_1286=$108; //@line 922 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 22; break; //@line 922 "xmltok_impl.c"
      case 22: // $bb21
        var $109=__lastLabel__ == 21 ? $108 : ($97);
        if ($109 == 5) {
          __label__ = 26; break;
        }
        else if ($109 == 6) {
          __label__ = 29; break;
        }
        else if ($109 == 7) {
          __label__ = 32; break;
        }
        else if ($109 == 9) {
          __label__ = 35; break;
        }
        else if ($109 == 10) {
          __label__ = 35; break;
        }
        else if ($109 == 11) {
          __label__ = 35; break;
        }
        else if ($109 == 21) {
          __label__ = 35; break;
        }
        else if ($109 == 22) {
          __label__ = 25; break;
        }
        else if ($109 == 24) {
          __label__ = 25; break;
        }
        else if ($109 == 25) {
          __label__ = 25; break;
        }
        else if ($109 == 26) {
          __label__ = 25; break;
        }
        else if ($109 == 27) {
          __label__ = 25; break;
        }
        else if ($109 == 29) {
          __label__ = 23; break;
        }
        else if ($109 == 30) {
          __label__ = 35; break;
        }
        else if ($109 == 32) {
          __label__ = 35; break;
        }
        else if ($109 == 36) {
          __label__ = 35; break;
        }
        else {
        __label__ = 36; break;
        }
        
      case 23: // $bb22
        var $110=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $111=$110; //@line 923 "xmltok_impl.c"
        var $112=HEAP[$111]; //@line 923 "xmltok_impl.c"
        var $113=($112); //@line 923 "xmltok_impl.c"
        var $114=_namePages+$113; //@line 923 "xmltok_impl.c"
        var $115=HEAP[$114]; //@line 923 "xmltok_impl.c"
        var $116=($115); //@line 923 "xmltok_impl.c"
        var $117=($116) * 8;
        var $118=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $119=$118+1; //@line 923 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 923 "xmltok_impl.c"
        var $121=($120) >>> 5; //@line 923 "xmltok_impl.c"
        var $122=($121); //@line 923 "xmltok_impl.c"
        var $123=($122) + ($117); //@line 923 "xmltok_impl.c"
        var $124=_namingBitmap+$123*4; //@line 923 "xmltok_impl.c"
        var $125=HEAP[$124]; //@line 923 "xmltok_impl.c"
        var $126=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $127=$126+1; //@line 923 "xmltok_impl.c"
        var $128=HEAP[$127]; //@line 923 "xmltok_impl.c"
        var $129=($128); //@line 923 "xmltok_impl.c"
        var $130=($129) & 31; //@line 923 "xmltok_impl.c"
        var $131=1 << ($130); //@line 923 "xmltok_impl.c"
        var $132=($131) & ($125); //@line 923 "xmltok_impl.c"
        var $133=($132)==0; //@line 923 "xmltok_impl.c"
        if ($133) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 923 "xmltok_impl.c"
      case 24: // $bb23
        var $134=$nextTokPtr_addr; //@line 923 "xmltok_impl.c"
        var $135=$ptr_addr; //@line 923 "xmltok_impl.c"
        HEAP[$134]=$135; //@line 923 "xmltok_impl.c"
        $0=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 25: // $bb24
        var $136=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $137=$136+2; //@line 923 "xmltok_impl.c"
        $ptr_addr=$137; //@line 923 "xmltok_impl.c"
        __label__ = 37; break; //@line 923 "xmltok_impl.c"
      case 26: // $bb25
        var $138=$end_addr; //@line 923 "xmltok_impl.c"
        var $139=($138); //@line 923 "xmltok_impl.c"
        var $140=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $141=($140); //@line 923 "xmltok_impl.c"
        var $142=($139) - ($141); //@line 923 "xmltok_impl.c"
        var $143=($142) <= 1; //@line 923 "xmltok_impl.c"
        if ($143) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 923 "xmltok_impl.c"
      case 27: // $bb26
        $0=-2; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 28: // $bb27
        var $144=$nextTokPtr_addr; //@line 923 "xmltok_impl.c"
        var $145=$ptr_addr; //@line 923 "xmltok_impl.c"
        HEAP[$144]=$145; //@line 923 "xmltok_impl.c"
        $0=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 29: // $bb28
        var $146=$end_addr; //@line 923 "xmltok_impl.c"
        var $147=($146); //@line 923 "xmltok_impl.c"
        var $148=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $149=($148); //@line 923 "xmltok_impl.c"
        var $150=($147) - ($149); //@line 923 "xmltok_impl.c"
        var $151=($150) <= 2; //@line 923 "xmltok_impl.c"
        if ($151) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 923 "xmltok_impl.c"
      case 30: // $bb29
        $0=-2; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 31: // $bb30
        var $152=$nextTokPtr_addr; //@line 923 "xmltok_impl.c"
        var $153=$ptr_addr; //@line 923 "xmltok_impl.c"
        HEAP[$152]=$153; //@line 923 "xmltok_impl.c"
        $0=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 32: // $bb31
        var $154=$end_addr; //@line 923 "xmltok_impl.c"
        var $155=($154); //@line 923 "xmltok_impl.c"
        var $156=$ptr_addr; //@line 923 "xmltok_impl.c"
        var $157=($156); //@line 923 "xmltok_impl.c"
        var $158=($155) - ($157); //@line 923 "xmltok_impl.c"
        var $159=($158) <= 3; //@line 923 "xmltok_impl.c"
        if ($159) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 923 "xmltok_impl.c"
      case 33: // $bb32
        $0=-2; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 34: // $bb33
        var $160=$nextTokPtr_addr; //@line 923 "xmltok_impl.c"
        var $161=$ptr_addr; //@line 923 "xmltok_impl.c"
        HEAP[$160]=$161; //@line 923 "xmltok_impl.c"
        $0=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 35: // $bb34
        var $162=$nextTokPtr_addr; //@line 926 "xmltok_impl.c"
        var $163=$ptr_addr; //@line 926 "xmltok_impl.c"
        HEAP[$162]=$163; //@line 926 "xmltok_impl.c"
        $0=20; //@line 927 "xmltok_impl.c"
        __label__ = 39; break; //@line 927 "xmltok_impl.c"
      case 36: // $bb35
        var $164=$nextTokPtr_addr; //@line 929 "xmltok_impl.c"
        var $165=$ptr_addr; //@line 929 "xmltok_impl.c"
        HEAP[$164]=$165; //@line 929 "xmltok_impl.c"
        $0=0; //@line 930 "xmltok_impl.c"
        __label__ = 39; break; //@line 930 "xmltok_impl.c"
      case 37: // $bb36
        var $166=$ptr_addr; //@line 921 "xmltok_impl.c"
        var $167=$end_addr; //@line 921 "xmltok_impl.c"
        var $168=($166)!=($167); //@line 921 "xmltok_impl.c"
        if ($168) { __label__ = 19; break; } else { __label__ = 38; break; } //@line 921 "xmltok_impl.c"
      case 38: // $bb37
        $0=-20; //@line 933 "xmltok_impl.c"
        __label__ = 39; break; //@line 933 "xmltok_impl.c"
      case 39: // $bb38
        var $169=$0; //@line 914 "xmltok_impl.c"
        $retval=$169; //@line 914 "xmltok_impl.c"
        var $retval39=$retval; //@line 914 "xmltok_impl.c"
        ;
        return $retval39; //@line 914 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanLit($open, $enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $open_addr;
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1302;
        var $0;
        var $iftmp_1294;
        var $t;
        $open_addr=$open;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        __label__ = 25; break; //@line 941 "xmltok_impl.c"
      case 1: // $bb
        var $1=$ptr_addr; //@line 942 "xmltok_impl.c"
        var $2=$1; //@line 942 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 942 "xmltok_impl.c"
        var $4=($3)==0; //@line 942 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 942 "xmltok_impl.c"
      case 2: // $bb1
        var $5=$enc_addr; //@line 942 "xmltok_impl.c"
        var $6=$5; //@line 942 "xmltok_impl.c"
        var $7=$ptr_addr; //@line 942 "xmltok_impl.c"
        var $8=$7+1; //@line 942 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 942 "xmltok_impl.c"
        var $10=($9); //@line 942 "xmltok_impl.c"
        var $11=$6+76; //@line 942 "xmltok_impl.c"
        var $12=$11+$10; //@line 942 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 942 "xmltok_impl.c"
        var $14=($13); //@line 942 "xmltok_impl.c"
        $iftmp_1294=$14; //@line 942 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 942 "xmltok_impl.c"
      case 3: // $bb2
        var $15=$ptr_addr; //@line 942 "xmltok_impl.c"
        var $16=$15+1; //@line 942 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 942 "xmltok_impl.c"
        var $18=($17); //@line 942 "xmltok_impl.c"
        var $19=$ptr_addr; //@line 942 "xmltok_impl.c"
        var $20=$19; //@line 942 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 942 "xmltok_impl.c"
        var $22=($21); //@line 942 "xmltok_impl.c"
        var $23=((($22)) & 255); //@line 942 "xmltok_impl.c"
        var $24=((($18)) & 255); //@line 942 "xmltok_impl.c"
        var $25=_unicode_byte_type($23, $24); //@line 942 "xmltok_impl.c"
        $iftmp_1294=$25; //@line 942 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 942 "xmltok_impl.c"
      case 4: // $bb3
        var $26=__lastLabel__ == 3 ? $25 : ($14);
        $t=$26; //@line 942 "xmltok_impl.c"
        if ($26 == 0) {
          __label__ = 14; break;
        }
        else if ($26 == 1) {
          __label__ = 14; break;
        }
        else if ($26 == 5) {
          __label__ = 5; break;
        }
        else if ($26 == 6) {
          __label__ = 8; break;
        }
        else if ($26 == 7) {
          __label__ = 11; break;
        }
        else if ($26 == 8) {
          __label__ = 14; break;
        }
        else if ($26 == 12) {
          __label__ = 15; break;
        }
        else if ($26 == 13) {
          __label__ = 15; break;
        }
        else {
        __label__ = 24; break;
        }
        
      case 5: // $bb4
        var $27=$end_addr; //@line 944 "xmltok_impl.c"
        var $28=($27); //@line 944 "xmltok_impl.c"
        var $29=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $30=($29); //@line 944 "xmltok_impl.c"
        var $31=($28) - ($30); //@line 944 "xmltok_impl.c"
        var $32=($31) <= 1; //@line 944 "xmltok_impl.c"
        if ($32) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 944 "xmltok_impl.c"
      case 6: // $bb5
        $0=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 7: // $bb6
        var $33=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $34=$33+2; //@line 944 "xmltok_impl.c"
        $ptr_addr=$34; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 8: // $bb7
        var $35=$end_addr; //@line 944 "xmltok_impl.c"
        var $36=($35); //@line 944 "xmltok_impl.c"
        var $37=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $38=($37); //@line 944 "xmltok_impl.c"
        var $39=($36) - ($38); //@line 944 "xmltok_impl.c"
        var $40=($39) <= 2; //@line 944 "xmltok_impl.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 944 "xmltok_impl.c"
      case 9: // $bb8
        $0=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 10: // $bb9
        var $41=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $42=$41+3; //@line 944 "xmltok_impl.c"
        $ptr_addr=$42; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 11: // $bb10
        var $43=$end_addr; //@line 944 "xmltok_impl.c"
        var $44=($43); //@line 944 "xmltok_impl.c"
        var $45=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $46=($45); //@line 944 "xmltok_impl.c"
        var $47=($44) - ($46); //@line 944 "xmltok_impl.c"
        var $48=($47) <= 3; //@line 944 "xmltok_impl.c"
        if ($48) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 944 "xmltok_impl.c"
      case 12: // $bb11
        $0=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 13: // $bb12
        var $49=$ptr_addr; //@line 944 "xmltok_impl.c"
        var $50=$49+4; //@line 944 "xmltok_impl.c"
        $ptr_addr=$50; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 14: // $bb13
        var $51=$nextTokPtr_addr; //@line 944 "xmltok_impl.c"
        var $52=$ptr_addr; //@line 944 "xmltok_impl.c"
        HEAP[$51]=$52; //@line 944 "xmltok_impl.c"
        $0=0; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 15: // $bb14
        var $53=$ptr_addr; //@line 947 "xmltok_impl.c"
        var $54=$53+2; //@line 947 "xmltok_impl.c"
        $ptr_addr=$54; //@line 947 "xmltok_impl.c"
        var $55=$t; //@line 948 "xmltok_impl.c"
        var $56=$open_addr; //@line 948 "xmltok_impl.c"
        var $57=($55)!=($56); //@line 948 "xmltok_impl.c"
        if ($57) { __label__ = 25; break; } else { __label__ = 16; break; } //@line 948 "xmltok_impl.c"
      case 16: // $bb15
        var $58=$ptr_addr; //@line 950 "xmltok_impl.c"
        var $59=$end_addr; //@line 950 "xmltok_impl.c"
        var $60=($58)==($59); //@line 950 "xmltok_impl.c"
        if ($60) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 950 "xmltok_impl.c"
      case 17: // $bb16
        $0=-27; //@line 951 "xmltok_impl.c"
        __label__ = 27; break; //@line 951 "xmltok_impl.c"
      case 18: // $bb17
        var $61=$nextTokPtr_addr; //@line 952 "xmltok_impl.c"
        var $62=$ptr_addr; //@line 952 "xmltok_impl.c"
        HEAP[$61]=$62; //@line 952 "xmltok_impl.c"
        var $63=$ptr_addr; //@line 953 "xmltok_impl.c"
        var $64=$63; //@line 953 "xmltok_impl.c"
        var $65=HEAP[$64]; //@line 953 "xmltok_impl.c"
        var $66=($65)==0; //@line 953 "xmltok_impl.c"
        if ($66) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 953 "xmltok_impl.c"
      case 19: // $bb18
        var $67=$enc_addr; //@line 953 "xmltok_impl.c"
        var $68=$67; //@line 953 "xmltok_impl.c"
        var $69=$ptr_addr; //@line 953 "xmltok_impl.c"
        var $70=$69+1; //@line 953 "xmltok_impl.c"
        var $71=HEAP[$70]; //@line 953 "xmltok_impl.c"
        var $72=($71); //@line 953 "xmltok_impl.c"
        var $73=$68+76; //@line 953 "xmltok_impl.c"
        var $74=$73+$72; //@line 953 "xmltok_impl.c"
        var $75=HEAP[$74]; //@line 953 "xmltok_impl.c"
        var $76=($75); //@line 953 "xmltok_impl.c"
        $iftmp_1302=$76; //@line 953 "xmltok_impl.c"
        __lastLabel__ = 19; __label__ = 21; break; //@line 953 "xmltok_impl.c"
      case 20: // $bb19
        var $77=$ptr_addr; //@line 953 "xmltok_impl.c"
        var $78=$77+1; //@line 953 "xmltok_impl.c"
        var $79=HEAP[$78]; //@line 953 "xmltok_impl.c"
        var $80=($79); //@line 953 "xmltok_impl.c"
        var $81=$ptr_addr; //@line 953 "xmltok_impl.c"
        var $82=$81; //@line 953 "xmltok_impl.c"
        var $83=HEAP[$82]; //@line 953 "xmltok_impl.c"
        var $84=($83); //@line 953 "xmltok_impl.c"
        var $85=((($84)) & 255); //@line 953 "xmltok_impl.c"
        var $86=((($80)) & 255); //@line 953 "xmltok_impl.c"
        var $87=_unicode_byte_type($85, $86); //@line 953 "xmltok_impl.c"
        $iftmp_1302=$87; //@line 953 "xmltok_impl.c"
        __lastLabel__ = 20; __label__ = 21; break; //@line 953 "xmltok_impl.c"
      case 21: // $bb20
        var $88=__lastLabel__ == 20 ? $87 : ($76);
        if ($88 == 9) {
          __label__ = 22; break;
        }
        else if ($88 == 10) {
          __label__ = 22; break;
        }
        else if ($88 == 11) {
          __label__ = 22; break;
        }
        else if ($88 == 20) {
          __label__ = 22; break;
        }
        else if ($88 == 21) {
          __label__ = 22; break;
        }
        else if ($88 == 30) {
          __label__ = 22; break;
        }
        else {
        __label__ = 23; break;
        }
        
      case 22: // $bb21
        $0=27; //@line 956 "xmltok_impl.c"
        __label__ = 27; break; //@line 956 "xmltok_impl.c"
      case 23: // $bb22
        $0=0; //@line 958 "xmltok_impl.c"
        __label__ = 27; break; //@line 958 "xmltok_impl.c"
      case 24: // $bb23
        var $89=$ptr_addr; //@line 961 "xmltok_impl.c"
        var $90=$89+2; //@line 961 "xmltok_impl.c"
        $ptr_addr=$90; //@line 961 "xmltok_impl.c"
        __label__ = 25; break; //@line 961 "xmltok_impl.c"
      case 25: // $bb24
        var $91=$ptr_addr; //@line 941 "xmltok_impl.c"
        var $92=$end_addr; //@line 941 "xmltok_impl.c"
        var $93=($91)!=($92); //@line 941 "xmltok_impl.c"
        if ($93) { __label__ = 1; break; } else { __label__ = 26; break; } //@line 941 "xmltok_impl.c"
      case 26: // $bb25
        $0=-1; //@line 965 "xmltok_impl.c"
        __label__ = 27; break; //@line 965 "xmltok_impl.c"
      case 27: // $bb26
        var $94=$0; //@line 944 "xmltok_impl.c"
        $retval=$94; //@line 944 "xmltok_impl.c"
        var $retval27=$retval; //@line 944 "xmltok_impl.c"
        ;
        return $retval27; //@line 944 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_prologTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1329;
        var $iftmp_1321;
        var $iftmp_1313;
        var $iftmp_1311;
        var $iftmp_1309;
        var $iftmp_1307;
        var $0;
        var $tok;
        var $n;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 973 "xmltok_impl.c"
        var $2=$end_addr; //@line 973 "xmltok_impl.c"
        var $3=($1)==($2); //@line 973 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 973 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 974 "xmltok_impl.c"
        __label__ = 126; break; //@line 974 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$end_addr; //@line 976 "xmltok_impl.c"
        var $5=($4); //@line 976 "xmltok_impl.c"
        var $6=$ptr_addr; //@line 976 "xmltok_impl.c"
        var $7=($6); //@line 976 "xmltok_impl.c"
        var $8=($5) - ($7); //@line 976 "xmltok_impl.c"
        $n=$8; //@line 976 "xmltok_impl.c"
        var $9=$n; //@line 977 "xmltok_impl.c"
        var $10=($9) & 1; //@line 977 "xmltok_impl.c"
        var $11=((($10)) & 255); //@line 977 "xmltok_impl.c"
        var $toBool=($11)!=0; //@line 977 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 977 "xmltok_impl.c"
      case 3: // $bb2
        var $12=$n; //@line 978 "xmltok_impl.c"
        var $13=($12) & -2; //@line 978 "xmltok_impl.c"
        $n=$13; //@line 978 "xmltok_impl.c"
        var $14=$n; //@line 979 "xmltok_impl.c"
        var $15=($14)==0; //@line 979 "xmltok_impl.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 979 "xmltok_impl.c"
      case 4: // $bb3
        $0=-1; //@line 980 "xmltok_impl.c"
        __label__ = 126; break; //@line 980 "xmltok_impl.c"
      case 5: // $bb4
        var $16=$ptr_addr; //@line 981 "xmltok_impl.c"
        var $17=$n; //@line 981 "xmltok_impl.c"
        var $18=$16+$17; //@line 981 "xmltok_impl.c"
        $end_addr=$18; //@line 981 "xmltok_impl.c"
        __label__ = 6; break; //@line 981 "xmltok_impl.c"
      case 6: // $bb5
        var $19=$ptr_addr; //@line 984 "xmltok_impl.c"
        var $20=$19; //@line 984 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 984 "xmltok_impl.c"
        var $22=($21)==0; //@line 984 "xmltok_impl.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 984 "xmltok_impl.c"
      case 7: // $bb6
        var $23=$enc_addr; //@line 984 "xmltok_impl.c"
        var $24=$23; //@line 984 "xmltok_impl.c"
        var $25=$ptr_addr; //@line 984 "xmltok_impl.c"
        var $26=$25+1; //@line 984 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 984 "xmltok_impl.c"
        var $28=($27); //@line 984 "xmltok_impl.c"
        var $29=$24+76; //@line 984 "xmltok_impl.c"
        var $30=$29+$28; //@line 984 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 984 "xmltok_impl.c"
        var $32=($31); //@line 984 "xmltok_impl.c"
        $iftmp_1307=$32; //@line 984 "xmltok_impl.c"
        __lastLabel__ = 7; __label__ = 9; break; //@line 984 "xmltok_impl.c"
      case 8: // $bb7
        var $33=$ptr_addr; //@line 984 "xmltok_impl.c"
        var $34=$33+1; //@line 984 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 984 "xmltok_impl.c"
        var $36=($35); //@line 984 "xmltok_impl.c"
        var $37=$ptr_addr; //@line 984 "xmltok_impl.c"
        var $38=$37; //@line 984 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 984 "xmltok_impl.c"
        var $40=($39); //@line 984 "xmltok_impl.c"
        var $41=((($40)) & 255); //@line 984 "xmltok_impl.c"
        var $42=((($36)) & 255); //@line 984 "xmltok_impl.c"
        var $43=_unicode_byte_type($41, $42); //@line 984 "xmltok_impl.c"
        $iftmp_1307=$43; //@line 984 "xmltok_impl.c"
        __lastLabel__ = 8; __label__ = 9; break; //@line 984 "xmltok_impl.c"
      case 9: // $bb8
        var $44=__lastLabel__ == 8 ? $43 : ($32);
        if ($44 == 2) {
          __label__ = 12; break;
        }
        else if ($44 == 4) {
          __label__ = 35; break;
        }
        else if ($44 == 5) {
          __label__ = 60; break;
        }
        else if ($44 == 6) {
          __label__ = 63; break;
        }
        else if ($44 == 7) {
          __label__ = 66; break;
        }
        else if ($44 == 9) {
          __label__ = 22; break;
        }
        else if ($44 == 10) {
          __label__ = 24; break;
        }
        else if ($44 == 11) {
          __label__ = 58; break;
        }
        else if ($44 == 12) {
          __label__ = 10; break;
        }
        else if ($44 == 13) {
          __label__ = 11; break;
        }
        else if ($44 == 19) {
          __label__ = 59; break;
        }
        else if ($44 == 20) {
          __label__ = 34; break;
        }
        else if ($44 == 21) {
          __label__ = 24; break;
        }
        else if ($44 == 22) {
          __label__ = 69; break;
        }
        else if ($44 == 23) {
          __label__ = 70; break;
        }
        else if ($44 == 24) {
          __label__ = 69; break;
        }
        else if ($44 == 25) {
          __label__ = 70; break;
        }
        else if ($44 == 26) {
          __label__ = 70; break;
        }
        else if ($44 == 27) {
          __label__ = 70; break;
        }
        else if ($44 == 29) {
          __label__ = 71; break;
        }
        else if ($44 == 30) {
          __label__ = 32; break;
        }
        else if ($44 == 31) {
          __label__ = 45; break;
        }
        else if ($44 == 32) {
          __label__ = 46; break;
        }
        else if ($44 == 35) {
          __label__ = 33; break;
        }
        else if ($44 == 36) {
          __label__ = 57; break;
        }
        else {
        __label__ = 75; break;
        }
        
      case 10: // $bb9
        var $45=$ptr_addr; //@line 986 "xmltok_impl.c"
        var $46=$45+2; //@line 986 "xmltok_impl.c"
        var $47=$enc_addr; //@line 986 "xmltok_impl.c"
        var $48=$end_addr; //@line 986 "xmltok_impl.c"
        var $49=$nextTokPtr_addr; //@line 986 "xmltok_impl.c"
        var $50=_big2_scanLit(12, $47, $46, $48, $49); //@line 986 "xmltok_impl.c"
        $0=$50; //@line 986 "xmltok_impl.c"
        __label__ = 126; break; //@line 986 "xmltok_impl.c"
      case 11: // $bb10
        var $51=$ptr_addr; //@line 988 "xmltok_impl.c"
        var $52=$51+2; //@line 988 "xmltok_impl.c"
        var $53=$enc_addr; //@line 988 "xmltok_impl.c"
        var $54=$end_addr; //@line 988 "xmltok_impl.c"
        var $55=$nextTokPtr_addr; //@line 988 "xmltok_impl.c"
        var $56=_big2_scanLit(13, $53, $52, $54, $55); //@line 988 "xmltok_impl.c"
        $0=$56; //@line 988 "xmltok_impl.c"
        __label__ = 126; break; //@line 988 "xmltok_impl.c"
      case 12: // $bb11
        var $57=$ptr_addr; //@line 991 "xmltok_impl.c"
        var $58=$57+2; //@line 991 "xmltok_impl.c"
        $ptr_addr=$58; //@line 991 "xmltok_impl.c"
        var $59=$ptr_addr; //@line 992 "xmltok_impl.c"
        var $60=$end_addr; //@line 992 "xmltok_impl.c"
        var $61=($59)==($60); //@line 992 "xmltok_impl.c"
        if ($61) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 992 "xmltok_impl.c"
      case 13: // $bb12
        $0=-1; //@line 993 "xmltok_impl.c"
        __label__ = 126; break; //@line 993 "xmltok_impl.c"
      case 14: // $bb13
        var $62=$ptr_addr; //@line 994 "xmltok_impl.c"
        var $63=$62; //@line 994 "xmltok_impl.c"
        var $64=HEAP[$63]; //@line 994 "xmltok_impl.c"
        var $65=($64)==0; //@line 994 "xmltok_impl.c"
        if ($65) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 994 "xmltok_impl.c"
      case 15: // $bb14
        var $66=$enc_addr; //@line 994 "xmltok_impl.c"
        var $67=$66; //@line 994 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 994 "xmltok_impl.c"
        var $69=$68+1; //@line 994 "xmltok_impl.c"
        var $70=HEAP[$69]; //@line 994 "xmltok_impl.c"
        var $71=($70); //@line 994 "xmltok_impl.c"
        var $72=$67+76; //@line 994 "xmltok_impl.c"
        var $73=$72+$71; //@line 994 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 994 "xmltok_impl.c"
        var $75=($74); //@line 994 "xmltok_impl.c"
        $iftmp_1309=$75; //@line 994 "xmltok_impl.c"
        __lastLabel__ = 15; __label__ = 17; break; //@line 994 "xmltok_impl.c"
      case 16: // $bb15
        var $76=$ptr_addr; //@line 994 "xmltok_impl.c"
        var $77=$76+1; //@line 994 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 994 "xmltok_impl.c"
        var $79=($78); //@line 994 "xmltok_impl.c"
        var $80=$ptr_addr; //@line 994 "xmltok_impl.c"
        var $81=$80; //@line 994 "xmltok_impl.c"
        var $82=HEAP[$81]; //@line 994 "xmltok_impl.c"
        var $83=($82); //@line 994 "xmltok_impl.c"
        var $84=((($83)) & 255); //@line 994 "xmltok_impl.c"
        var $85=((($79)) & 255); //@line 994 "xmltok_impl.c"
        var $86=_unicode_byte_type($84, $85); //@line 994 "xmltok_impl.c"
        $iftmp_1309=$86; //@line 994 "xmltok_impl.c"
        __lastLabel__ = 16; __label__ = 17; break; //@line 994 "xmltok_impl.c"
      case 17: // $bb16
        var $87=__lastLabel__ == 16 ? $86 : ($75);
        if ($87 == 5) {
          __label__ = 20; break;
        }
        else if ($87 == 6) {
          __label__ = 20; break;
        }
        else if ($87 == 7) {
          __label__ = 20; break;
        }
        else if ($87 == 15) {
          __label__ = 19; break;
        }
        else if ($87 == 16) {
          __label__ = 18; break;
        }
        else if ($87 == 22) {
          __label__ = 20; break;
        }
        else if ($87 == 24) {
          __label__ = 20; break;
        }
        else if ($87 == 29) {
          __label__ = 20; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 18: // $bb17
        var $88=$ptr_addr; //@line 996 "xmltok_impl.c"
        var $89=$88+2; //@line 996 "xmltok_impl.c"
        var $90=$enc_addr; //@line 996 "xmltok_impl.c"
        var $91=$end_addr; //@line 996 "xmltok_impl.c"
        var $92=$nextTokPtr_addr; //@line 996 "xmltok_impl.c"
        var $93=_big2_scanDecl($90, $89, $91, $92); //@line 996 "xmltok_impl.c"
        $0=$93; //@line 996 "xmltok_impl.c"
        __label__ = 126; break; //@line 996 "xmltok_impl.c"
      case 19: // $bb18
        var $94=$ptr_addr; //@line 998 "xmltok_impl.c"
        var $95=$94+2; //@line 998 "xmltok_impl.c"
        var $96=$enc_addr; //@line 998 "xmltok_impl.c"
        var $97=$end_addr; //@line 998 "xmltok_impl.c"
        var $98=$nextTokPtr_addr; //@line 998 "xmltok_impl.c"
        var $99=_big2_scanPi($96, $95, $97, $98); //@line 998 "xmltok_impl.c"
        $0=$99; //@line 998 "xmltok_impl.c"
        __label__ = 126; break; //@line 998 "xmltok_impl.c"
      case 20: // $bb19
        var $100=$ptr_addr; //@line 1005 "xmltok_impl.c"
        var $101=$100+-2; //@line 1005 "xmltok_impl.c"
        var $102=$nextTokPtr_addr; //@line 1005 "xmltok_impl.c"
        HEAP[$102]=$101; //@line 1005 "xmltok_impl.c"
        $0=29; //@line 1006 "xmltok_impl.c"
        __label__ = 126; break; //@line 1006 "xmltok_impl.c"
      case 21: // $bb20
        var $103=$nextTokPtr_addr; //@line 1008 "xmltok_impl.c"
        var $104=$ptr_addr; //@line 1008 "xmltok_impl.c"
        HEAP[$103]=$104; //@line 1008 "xmltok_impl.c"
        $0=0; //@line 1009 "xmltok_impl.c"
        __label__ = 126; break; //@line 1009 "xmltok_impl.c"
      case 22: // $bb21
        var $105=$ptr_addr; //@line 1012 "xmltok_impl.c"
        var $106=$105+2; //@line 1012 "xmltok_impl.c"
        var $107=$end_addr; //@line 1012 "xmltok_impl.c"
        var $108=($106)==($107); //@line 1012 "xmltok_impl.c"
        if ($108) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1012 "xmltok_impl.c"
      case 23: // $bb22
        var $109=$nextTokPtr_addr; //@line 1013 "xmltok_impl.c"
        var $110=$end_addr; //@line 1013 "xmltok_impl.c"
        HEAP[$109]=$110; //@line 1013 "xmltok_impl.c"
        $0=-15; //@line 1015 "xmltok_impl.c"
        __label__ = 126; break; //@line 1015 "xmltok_impl.c"
      case 24: // $bb23
        var $111=$ptr_addr; //@line 1020 "xmltok_impl.c"
        var $112=$111+2; //@line 1020 "xmltok_impl.c"
        $ptr_addr=$112; //@line 1020 "xmltok_impl.c"
        var $113=$ptr_addr; //@line 1021 "xmltok_impl.c"
        var $114=$end_addr; //@line 1021 "xmltok_impl.c"
        var $115=($113)==($114); //@line 1021 "xmltok_impl.c"
        if ($115) { __label__ = 31; break; } else { __label__ = 25; break; } //@line 1021 "xmltok_impl.c"
      case 25: // $bb24
        var $116=$ptr_addr; //@line 1023 "xmltok_impl.c"
        var $117=$116; //@line 1023 "xmltok_impl.c"
        var $118=HEAP[$117]; //@line 1023 "xmltok_impl.c"
        var $119=($118)==0; //@line 1023 "xmltok_impl.c"
        if ($119) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1023 "xmltok_impl.c"
      case 26: // $bb25
        var $120=$enc_addr; //@line 1023 "xmltok_impl.c"
        var $121=$120; //@line 1023 "xmltok_impl.c"
        var $122=$ptr_addr; //@line 1023 "xmltok_impl.c"
        var $123=$122+1; //@line 1023 "xmltok_impl.c"
        var $124=HEAP[$123]; //@line 1023 "xmltok_impl.c"
        var $125=($124); //@line 1023 "xmltok_impl.c"
        var $126=$121+76; //@line 1023 "xmltok_impl.c"
        var $127=$126+$125; //@line 1023 "xmltok_impl.c"
        var $128=HEAP[$127]; //@line 1023 "xmltok_impl.c"
        var $129=($128); //@line 1023 "xmltok_impl.c"
        $iftmp_1311=$129; //@line 1023 "xmltok_impl.c"
        __lastLabel__ = 26; __label__ = 28; break; //@line 1023 "xmltok_impl.c"
      case 27: // $bb26
        var $130=$ptr_addr; //@line 1023 "xmltok_impl.c"
        var $131=$130+1; //@line 1023 "xmltok_impl.c"
        var $132=HEAP[$131]; //@line 1023 "xmltok_impl.c"
        var $133=($132); //@line 1023 "xmltok_impl.c"
        var $134=$ptr_addr; //@line 1023 "xmltok_impl.c"
        var $135=$134; //@line 1023 "xmltok_impl.c"
        var $136=HEAP[$135]; //@line 1023 "xmltok_impl.c"
        var $137=($136); //@line 1023 "xmltok_impl.c"
        var $138=((($137)) & 255); //@line 1023 "xmltok_impl.c"
        var $139=((($133)) & 255); //@line 1023 "xmltok_impl.c"
        var $140=_unicode_byte_type($138, $139); //@line 1023 "xmltok_impl.c"
        $iftmp_1311=$140; //@line 1023 "xmltok_impl.c"
        __lastLabel__ = 27; __label__ = 28; break; //@line 1023 "xmltok_impl.c"
      case 28: // $bb27
        var $141=__lastLabel__ == 27 ? $140 : ($129);
        if ($141 == 9) {
          __label__ = 29; break;
        }
        else if ($141 == 10) {
          __label__ = 24; break;
        }
        else if ($141 == 21) {
          __label__ = 24; break;
        }
        else {
        __label__ = 30; break;
        }
        
      case 29: // $bb29
        var $142=$ptr_addr; //@line 1028 "xmltok_impl.c"
        var $143=$142+2; //@line 1028 "xmltok_impl.c"
        var $144=$end_addr; //@line 1028 "xmltok_impl.c"
        var $145=($143)!=($144); //@line 1028 "xmltok_impl.c"
        if ($145) { __label__ = 24; break; } else { __label__ = 30; break; } //@line 1028 "xmltok_impl.c"
      case 30: // $bb30
        var $146=$nextTokPtr_addr; //@line 1032 "xmltok_impl.c"
        var $147=$ptr_addr; //@line 1032 "xmltok_impl.c"
        HEAP[$146]=$147; //@line 1032 "xmltok_impl.c"
        $0=15; //@line 1033 "xmltok_impl.c"
        __label__ = 126; break; //@line 1033 "xmltok_impl.c"
      case 31: // $bb32
        var $148=$nextTokPtr_addr; //@line 1036 "xmltok_impl.c"
        var $149=$ptr_addr; //@line 1036 "xmltok_impl.c"
        HEAP[$148]=$149; //@line 1036 "xmltok_impl.c"
        $0=15; //@line 1037 "xmltok_impl.c"
        __label__ = 126; break; //@line 1037 "xmltok_impl.c"
      case 32: // $bb33
        var $150=$ptr_addr; //@line 1039 "xmltok_impl.c"
        var $151=$150+2; //@line 1039 "xmltok_impl.c"
        var $152=$enc_addr; //@line 1039 "xmltok_impl.c"
        var $153=$end_addr; //@line 1039 "xmltok_impl.c"
        var $154=$nextTokPtr_addr; //@line 1039 "xmltok_impl.c"
        var $155=_big2_scanPercent($152, $151, $153, $154); //@line 1039 "xmltok_impl.c"
        $0=$155; //@line 1039 "xmltok_impl.c"
        __label__ = 126; break; //@line 1039 "xmltok_impl.c"
      case 33: // $bb34
        var $156=$ptr_addr; //@line 1041 "xmltok_impl.c"
        var $157=$156+2; //@line 1041 "xmltok_impl.c"
        var $158=$nextTokPtr_addr; //@line 1041 "xmltok_impl.c"
        HEAP[$158]=$157; //@line 1041 "xmltok_impl.c"
        $0=38; //@line 1042 "xmltok_impl.c"
        __label__ = 126; break; //@line 1042 "xmltok_impl.c"
      case 34: // $bb35
        var $159=$ptr_addr; //@line 1044 "xmltok_impl.c"
        var $160=$159+2; //@line 1044 "xmltok_impl.c"
        var $161=$nextTokPtr_addr; //@line 1044 "xmltok_impl.c"
        HEAP[$161]=$160; //@line 1044 "xmltok_impl.c"
        $0=25; //@line 1045 "xmltok_impl.c"
        __label__ = 126; break; //@line 1045 "xmltok_impl.c"
      case 35: // $bb36
        var $162=$ptr_addr; //@line 1047 "xmltok_impl.c"
        var $163=$162+2; //@line 1047 "xmltok_impl.c"
        $ptr_addr=$163; //@line 1047 "xmltok_impl.c"
        var $164=$ptr_addr; //@line 1048 "xmltok_impl.c"
        var $165=$end_addr; //@line 1048 "xmltok_impl.c"
        var $166=($164)==($165); //@line 1048 "xmltok_impl.c"
        if ($166) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1048 "xmltok_impl.c"
      case 36: // $bb37
        $0=-26; //@line 1049 "xmltok_impl.c"
        __label__ = 126; break; //@line 1049 "xmltok_impl.c"
      case 37: // $bb38
        var $167=$ptr_addr; //@line 1050 "xmltok_impl.c"
        var $168=$167; //@line 1050 "xmltok_impl.c"
        var $169=HEAP[$168]; //@line 1050 "xmltok_impl.c"
        var $170=($169)==0; //@line 1050 "xmltok_impl.c"
        if ($170) { __label__ = 38; break; } else { __label__ = 44; break; } //@line 1050 "xmltok_impl.c"
      case 38: // $bb39
        var $171=$ptr_addr; //@line 1050 "xmltok_impl.c"
        var $172=$171+1; //@line 1050 "xmltok_impl.c"
        var $173=HEAP[$172]; //@line 1050 "xmltok_impl.c"
        var $174=($173)==93; //@line 1050 "xmltok_impl.c"
        if ($174) { __label__ = 39; break; } else { __label__ = 44; break; } //@line 1050 "xmltok_impl.c"
      case 39: // $bb40
        var $175=$ptr_addr; //@line 1051 "xmltok_impl.c"
        var $176=$175+2; //@line 1051 "xmltok_impl.c"
        var $177=$end_addr; //@line 1051 "xmltok_impl.c"
        var $178=($176)==($177); //@line 1051 "xmltok_impl.c"
        if ($178) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1051 "xmltok_impl.c"
      case 40: // $bb41
        $0=-1; //@line 1052 "xmltok_impl.c"
        __label__ = 126; break; //@line 1052 "xmltok_impl.c"
      case 41: // $bb42
        var $179=$ptr_addr; //@line 1053 "xmltok_impl.c"
        var $180=$179+2; //@line 1053 "xmltok_impl.c"
        var $181=$180; //@line 1053 "xmltok_impl.c"
        var $182=HEAP[$181]; //@line 1053 "xmltok_impl.c"
        var $183=($182)==0; //@line 1053 "xmltok_impl.c"
        if ($183) { __label__ = 42; break; } else { __label__ = 44; break; } //@line 1053 "xmltok_impl.c"
      case 42: // $bb43
        var $184=$ptr_addr; //@line 1053 "xmltok_impl.c"
        var $185=$184+2; //@line 1053 "xmltok_impl.c"
        var $186=$185+1; //@line 1053 "xmltok_impl.c"
        var $187=HEAP[$186]; //@line 1053 "xmltok_impl.c"
        var $188=($187)==62; //@line 1053 "xmltok_impl.c"
        if ($188) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 1053 "xmltok_impl.c"
      case 43: // $bb44
        var $189=$ptr_addr; //@line 1054 "xmltok_impl.c"
        var $190=$189+4; //@line 1054 "xmltok_impl.c"
        var $191=$nextTokPtr_addr; //@line 1054 "xmltok_impl.c"
        HEAP[$191]=$190; //@line 1054 "xmltok_impl.c"
        $0=34; //@line 1055 "xmltok_impl.c"
        __label__ = 126; break; //@line 1055 "xmltok_impl.c"
      case 44: // $bb45
        var $192=$nextTokPtr_addr; //@line 1058 "xmltok_impl.c"
        var $193=$ptr_addr; //@line 1058 "xmltok_impl.c"
        HEAP[$192]=$193; //@line 1058 "xmltok_impl.c"
        $0=26; //@line 1059 "xmltok_impl.c"
        __label__ = 126; break; //@line 1059 "xmltok_impl.c"
      case 45: // $bb46
        var $194=$ptr_addr; //@line 1061 "xmltok_impl.c"
        var $195=$194+2; //@line 1061 "xmltok_impl.c"
        var $196=$nextTokPtr_addr; //@line 1061 "xmltok_impl.c"
        HEAP[$196]=$195; //@line 1061 "xmltok_impl.c"
        $0=23; //@line 1062 "xmltok_impl.c"
        __label__ = 126; break; //@line 1062 "xmltok_impl.c"
      case 46: // $bb47
        var $197=$ptr_addr; //@line 1064 "xmltok_impl.c"
        var $198=$197+2; //@line 1064 "xmltok_impl.c"
        $ptr_addr=$198; //@line 1064 "xmltok_impl.c"
        var $199=$ptr_addr; //@line 1065 "xmltok_impl.c"
        var $200=$end_addr; //@line 1065 "xmltok_impl.c"
        var $201=($199)==($200); //@line 1065 "xmltok_impl.c"
        if ($201) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1065 "xmltok_impl.c"
      case 47: // $bb48
        $0=-24; //@line 1066 "xmltok_impl.c"
        __label__ = 126; break; //@line 1066 "xmltok_impl.c"
      case 48: // $bb49
        var $202=$ptr_addr; //@line 1067 "xmltok_impl.c"
        var $203=$202; //@line 1067 "xmltok_impl.c"
        var $204=HEAP[$203]; //@line 1067 "xmltok_impl.c"
        var $205=($204)==0; //@line 1067 "xmltok_impl.c"
        if ($205) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 1067 "xmltok_impl.c"
      case 49: // $bb50
        var $206=$enc_addr; //@line 1067 "xmltok_impl.c"
        var $207=$206; //@line 1067 "xmltok_impl.c"
        var $208=$ptr_addr; //@line 1067 "xmltok_impl.c"
        var $209=$208+1; //@line 1067 "xmltok_impl.c"
        var $210=HEAP[$209]; //@line 1067 "xmltok_impl.c"
        var $211=($210); //@line 1067 "xmltok_impl.c"
        var $212=$207+76; //@line 1067 "xmltok_impl.c"
        var $213=$212+$211; //@line 1067 "xmltok_impl.c"
        var $214=HEAP[$213]; //@line 1067 "xmltok_impl.c"
        var $215=($214); //@line 1067 "xmltok_impl.c"
        $iftmp_1313=$215; //@line 1067 "xmltok_impl.c"
        __lastLabel__ = 49; __label__ = 51; break; //@line 1067 "xmltok_impl.c"
      case 50: // $bb51
        var $216=$ptr_addr; //@line 1067 "xmltok_impl.c"
        var $217=$216+1; //@line 1067 "xmltok_impl.c"
        var $218=HEAP[$217]; //@line 1067 "xmltok_impl.c"
        var $219=($218); //@line 1067 "xmltok_impl.c"
        var $220=$ptr_addr; //@line 1067 "xmltok_impl.c"
        var $221=$220; //@line 1067 "xmltok_impl.c"
        var $222=HEAP[$221]; //@line 1067 "xmltok_impl.c"
        var $223=($222); //@line 1067 "xmltok_impl.c"
        var $224=((($223)) & 255); //@line 1067 "xmltok_impl.c"
        var $225=((($219)) & 255); //@line 1067 "xmltok_impl.c"
        var $226=_unicode_byte_type($224, $225); //@line 1067 "xmltok_impl.c"
        $iftmp_1313=$226; //@line 1067 "xmltok_impl.c"
        __lastLabel__ = 50; __label__ = 51; break; //@line 1067 "xmltok_impl.c"
      case 51: // $bb52
        var $227=__lastLabel__ == 50 ? $226 : ($215);
        if ($227 == 9) {
          __label__ = 55; break;
        }
        else if ($227 == 10) {
          __label__ = 55; break;
        }
        else if ($227 == 11) {
          __label__ = 55; break;
        }
        else if ($227 == 15) {
          __label__ = 53; break;
        }
        else if ($227 == 21) {
          __label__ = 55; break;
        }
        else if ($227 == 32) {
          __label__ = 55; break;
        }
        else if ($227 == 33) {
          __label__ = 52; break;
        }
        else if ($227 == 34) {
          __label__ = 54; break;
        }
        else if ($227 == 35) {
          __label__ = 55; break;
        }
        else if ($227 == 36) {
          __label__ = 55; break;
        }
        else {
        __label__ = 56; break;
        }
        
      case 52: // $bb53
        var $228=$ptr_addr; //@line 1069 "xmltok_impl.c"
        var $229=$228+2; //@line 1069 "xmltok_impl.c"
        var $230=$nextTokPtr_addr; //@line 1069 "xmltok_impl.c"
        HEAP[$230]=$229; //@line 1069 "xmltok_impl.c"
        $0=36; //@line 1070 "xmltok_impl.c"
        __label__ = 126; break; //@line 1070 "xmltok_impl.c"
      case 53: // $bb54
        var $231=$ptr_addr; //@line 1072 "xmltok_impl.c"
        var $232=$231+2; //@line 1072 "xmltok_impl.c"
        var $233=$nextTokPtr_addr; //@line 1072 "xmltok_impl.c"
        HEAP[$233]=$232; //@line 1072 "xmltok_impl.c"
        $0=35; //@line 1073 "xmltok_impl.c"
        __label__ = 126; break; //@line 1073 "xmltok_impl.c"
      case 54: // $bb55
        var $234=$ptr_addr; //@line 1075 "xmltok_impl.c"
        var $235=$234+2; //@line 1075 "xmltok_impl.c"
        var $236=$nextTokPtr_addr; //@line 1075 "xmltok_impl.c"
        HEAP[$236]=$235; //@line 1075 "xmltok_impl.c"
        $0=37; //@line 1076 "xmltok_impl.c"
        __label__ = 126; break; //@line 1076 "xmltok_impl.c"
      case 55: // $bb56
        var $237=$nextTokPtr_addr; //@line 1080 "xmltok_impl.c"
        var $238=$ptr_addr; //@line 1080 "xmltok_impl.c"
        HEAP[$237]=$238; //@line 1080 "xmltok_impl.c"
        $0=24; //@line 1081 "xmltok_impl.c"
        __label__ = 126; break; //@line 1081 "xmltok_impl.c"
      case 56: // $bb57
        var $239=$nextTokPtr_addr; //@line 1083 "xmltok_impl.c"
        var $240=$ptr_addr; //@line 1083 "xmltok_impl.c"
        HEAP[$239]=$240; //@line 1083 "xmltok_impl.c"
        $0=0; //@line 1084 "xmltok_impl.c"
        __label__ = 126; break; //@line 1084 "xmltok_impl.c"
      case 57: // $bb58
        var $241=$ptr_addr; //@line 1086 "xmltok_impl.c"
        var $242=$241+2; //@line 1086 "xmltok_impl.c"
        var $243=$nextTokPtr_addr; //@line 1086 "xmltok_impl.c"
        HEAP[$243]=$242; //@line 1086 "xmltok_impl.c"
        $0=21; //@line 1087 "xmltok_impl.c"
        __label__ = 126; break; //@line 1087 "xmltok_impl.c"
      case 58: // $bb59
        var $244=$ptr_addr; //@line 1089 "xmltok_impl.c"
        var $245=$244+2; //@line 1089 "xmltok_impl.c"
        var $246=$nextTokPtr_addr; //@line 1089 "xmltok_impl.c"
        HEAP[$246]=$245; //@line 1089 "xmltok_impl.c"
        $0=17; //@line 1090 "xmltok_impl.c"
        __label__ = 126; break; //@line 1090 "xmltok_impl.c"
      case 59: // $bb60
        var $247=$ptr_addr; //@line 1092 "xmltok_impl.c"
        var $248=$247+2; //@line 1092 "xmltok_impl.c"
        var $249=$enc_addr; //@line 1092 "xmltok_impl.c"
        var $250=$end_addr; //@line 1092 "xmltok_impl.c"
        var $251=$nextTokPtr_addr; //@line 1092 "xmltok_impl.c"
        var $252=_big2_scanPoundName($249, $248, $250, $251); //@line 1092 "xmltok_impl.c"
        $0=$252; //@line 1092 "xmltok_impl.c"
        __label__ = 126; break; //@line 1092 "xmltok_impl.c"
      case 60: // $bb61
        var $253=$end_addr; //@line 1109 "xmltok_impl.c"
        var $254=($253); //@line 1109 "xmltok_impl.c"
        var $255=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $256=($255); //@line 1109 "xmltok_impl.c"
        var $257=($254) - ($256); //@line 1109 "xmltok_impl.c"
        var $258=($257) <= 1; //@line 1109 "xmltok_impl.c"
        if ($258) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 1109 "xmltok_impl.c"
      case 61: // $bb62
        $0=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 126; break; //@line 1109 "xmltok_impl.c"
      case 62: // $bb63
        var $259=$nextTokPtr_addr; //@line 1109 "xmltok_impl.c"
        var $260=$ptr_addr; //@line 1109 "xmltok_impl.c"
        HEAP[$259]=$260; //@line 1109 "xmltok_impl.c"
        $0=0; //@line 1109 "xmltok_impl.c"
        __label__ = 126; break; //@line 1109 "xmltok_impl.c"
      case 63: // $bb64
        var $261=$end_addr; //@line 1109 "xmltok_impl.c"
        var $262=($261); //@line 1109 "xmltok_impl.c"
        var $263=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $264=($263); //@line 1109 "xmltok_impl.c"
        var $265=($262) - ($264); //@line 1109 "xmltok_impl.c"
        var $266=($265) <= 2; //@line 1109 "xmltok_impl.c"
        if ($266) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 1109 "xmltok_impl.c"
      case 64: // $bb65
        $0=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 126; break; //@line 1109 "xmltok_impl.c"
      case 65: // $bb66
        var $267=$nextTokPtr_addr; //@line 1109 "xmltok_impl.c"
        var $268=$ptr_addr; //@line 1109 "xmltok_impl.c"
        HEAP[$267]=$268; //@line 1109 "xmltok_impl.c"
        $0=0; //@line 1109 "xmltok_impl.c"
        __label__ = 126; break; //@line 1109 "xmltok_impl.c"
      case 66: // $bb67
        var $269=$end_addr; //@line 1109 "xmltok_impl.c"
        var $270=($269); //@line 1109 "xmltok_impl.c"
        var $271=$ptr_addr; //@line 1109 "xmltok_impl.c"
        var $272=($271); //@line 1109 "xmltok_impl.c"
        var $273=($270) - ($272); //@line 1109 "xmltok_impl.c"
        var $274=($273) <= 3; //@line 1109 "xmltok_impl.c"
        if ($274) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 1109 "xmltok_impl.c"
      case 67: // $bb68
        $0=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 126; break; //@line 1109 "xmltok_impl.c"
      case 68: // $bb69
        var $275=$nextTokPtr_addr; //@line 1109 "xmltok_impl.c"
        var $276=$ptr_addr; //@line 1109 "xmltok_impl.c"
        HEAP[$275]=$276; //@line 1109 "xmltok_impl.c"
        $0=0; //@line 1109 "xmltok_impl.c"
        __label__ = 126; break; //@line 1109 "xmltok_impl.c"
      case 69: // $bb70
        $tok=18; //@line 1113 "xmltok_impl.c"
        var $277=$ptr_addr; //@line 1114 "xmltok_impl.c"
        var $278=$277+2; //@line 1114 "xmltok_impl.c"
        $ptr_addr=$278; //@line 1114 "xmltok_impl.c"
        __label__ = 124; break; //@line 1114 "xmltok_impl.c"
      case 70: // $bb71
        $tok=19; //@line 1122 "xmltok_impl.c"
        var $279=$ptr_addr; //@line 1123 "xmltok_impl.c"
        var $280=$279+2; //@line 1123 "xmltok_impl.c"
        $ptr_addr=$280; //@line 1123 "xmltok_impl.c"
        __label__ = 124; break; //@line 1123 "xmltok_impl.c"
      case 71: // $bb72
        var $281=$ptr_addr; //@line 1126 "xmltok_impl.c"
        var $282=$281; //@line 1126 "xmltok_impl.c"
        var $283=HEAP[$282]; //@line 1126 "xmltok_impl.c"
        var $284=($283); //@line 1126 "xmltok_impl.c"
        var $285=_nmstrtPages+$284; //@line 1126 "xmltok_impl.c"
        var $286=HEAP[$285]; //@line 1126 "xmltok_impl.c"
        var $287=($286); //@line 1126 "xmltok_impl.c"
        var $288=($287) * 8;
        var $289=$ptr_addr; //@line 1126 "xmltok_impl.c"
        var $290=$289+1; //@line 1126 "xmltok_impl.c"
        var $291=HEAP[$290]; //@line 1126 "xmltok_impl.c"
        var $292=($291) >>> 5; //@line 1126 "xmltok_impl.c"
        var $293=($292); //@line 1126 "xmltok_impl.c"
        var $294=($293) + ($288); //@line 1126 "xmltok_impl.c"
        var $295=_namingBitmap+$294*4; //@line 1126 "xmltok_impl.c"
        var $296=HEAP[$295]; //@line 1126 "xmltok_impl.c"
        var $297=$ptr_addr; //@line 1126 "xmltok_impl.c"
        var $298=$297+1; //@line 1126 "xmltok_impl.c"
        var $299=HEAP[$298]; //@line 1126 "xmltok_impl.c"
        var $300=($299); //@line 1126 "xmltok_impl.c"
        var $301=($300) & 31; //@line 1126 "xmltok_impl.c"
        var $302=1 << ($301); //@line 1126 "xmltok_impl.c"
        var $303=($302) & ($296); //@line 1126 "xmltok_impl.c"
        var $304=($303)!=0; //@line 1126 "xmltok_impl.c"
        var $305=$ptr_addr; //@line 1127 "xmltok_impl.c"
        if ($304) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 1126 "xmltok_impl.c"
      case 72: // $bb73
        var $306=$305+2; //@line 1127 "xmltok_impl.c"
        $ptr_addr=$306; //@line 1127 "xmltok_impl.c"
        $tok=18; //@line 1128 "xmltok_impl.c"
        __label__ = 124; break; //@line 1128 "xmltok_impl.c"
      case 73: // $bb74
        var $307=$305; //@line 1131 "xmltok_impl.c"
        var $308=HEAP[$307]; //@line 1131 "xmltok_impl.c"
        var $309=($308); //@line 1131 "xmltok_impl.c"
        var $310=_namePages+$309; //@line 1131 "xmltok_impl.c"
        var $311=HEAP[$310]; //@line 1131 "xmltok_impl.c"
        var $312=($311); //@line 1131 "xmltok_impl.c"
        var $313=($312) * 8;
        var $314=$ptr_addr; //@line 1131 "xmltok_impl.c"
        var $315=$314+1; //@line 1131 "xmltok_impl.c"
        var $316=HEAP[$315]; //@line 1131 "xmltok_impl.c"
        var $317=($316) >>> 5; //@line 1131 "xmltok_impl.c"
        var $318=($317); //@line 1131 "xmltok_impl.c"
        var $319=($318) + ($313); //@line 1131 "xmltok_impl.c"
        var $320=_namingBitmap+$319*4; //@line 1131 "xmltok_impl.c"
        var $321=HEAP[$320]; //@line 1131 "xmltok_impl.c"
        var $322=$ptr_addr; //@line 1131 "xmltok_impl.c"
        var $323=$322+1; //@line 1131 "xmltok_impl.c"
        var $324=HEAP[$323]; //@line 1131 "xmltok_impl.c"
        var $325=($324); //@line 1131 "xmltok_impl.c"
        var $326=($325) & 31; //@line 1131 "xmltok_impl.c"
        var $327=1 << ($326); //@line 1131 "xmltok_impl.c"
        var $328=($327) & ($321); //@line 1131 "xmltok_impl.c"
        var $329=($328)!=0; //@line 1131 "xmltok_impl.c"
        if ($329) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 1131 "xmltok_impl.c"
      case 74: // $bb75
        var $330=$ptr_addr; //@line 1132 "xmltok_impl.c"
        var $331=$330+2; //@line 1132 "xmltok_impl.c"
        $ptr_addr=$331; //@line 1132 "xmltok_impl.c"
        $tok=19; //@line 1133 "xmltok_impl.c"
        __label__ = 124; break; //@line 1133 "xmltok_impl.c"
      case 75: // $bb76
        var $332=$nextTokPtr_addr; //@line 1138 "xmltok_impl.c"
        var $333=$ptr_addr; //@line 1138 "xmltok_impl.c"
        HEAP[$332]=$333; //@line 1138 "xmltok_impl.c"
        $0=0; //@line 1139 "xmltok_impl.c"
        __label__ = 126; break; //@line 1139 "xmltok_impl.c"
      case 76: // $bb78
        var $334=$ptr_addr; //@line 1142 "xmltok_impl.c"
        var $335=$334; //@line 1142 "xmltok_impl.c"
        var $336=HEAP[$335]; //@line 1142 "xmltok_impl.c"
        var $337=($336)==0; //@line 1142 "xmltok_impl.c"
        if ($337) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 1142 "xmltok_impl.c"
      case 77: // $bb79
        var $338=$enc_addr; //@line 1142 "xmltok_impl.c"
        var $339=$338; //@line 1142 "xmltok_impl.c"
        var $340=$ptr_addr; //@line 1142 "xmltok_impl.c"
        var $341=$340+1; //@line 1142 "xmltok_impl.c"
        var $342=HEAP[$341]; //@line 1142 "xmltok_impl.c"
        var $343=($342); //@line 1142 "xmltok_impl.c"
        var $344=$339+76; //@line 1142 "xmltok_impl.c"
        var $345=$344+$343; //@line 1142 "xmltok_impl.c"
        var $346=HEAP[$345]; //@line 1142 "xmltok_impl.c"
        var $347=($346); //@line 1142 "xmltok_impl.c"
        $iftmp_1321=$347; //@line 1142 "xmltok_impl.c"
        __lastLabel__ = 77; __label__ = 79; break; //@line 1142 "xmltok_impl.c"
      case 78: // $bb80
        var $348=$ptr_addr; //@line 1142 "xmltok_impl.c"
        var $349=$348+1; //@line 1142 "xmltok_impl.c"
        var $350=HEAP[$349]; //@line 1142 "xmltok_impl.c"
        var $351=($350); //@line 1142 "xmltok_impl.c"
        var $352=$ptr_addr; //@line 1142 "xmltok_impl.c"
        var $353=$352; //@line 1142 "xmltok_impl.c"
        var $354=HEAP[$353]; //@line 1142 "xmltok_impl.c"
        var $355=($354); //@line 1142 "xmltok_impl.c"
        var $356=((($355)) & 255); //@line 1142 "xmltok_impl.c"
        var $357=((($351)) & 255); //@line 1142 "xmltok_impl.c"
        var $358=_unicode_byte_type($356, $357); //@line 1142 "xmltok_impl.c"
        $iftmp_1321=$358; //@line 1142 "xmltok_impl.c"
        __lastLabel__ = 78; __label__ = 79; break; //@line 1142 "xmltok_impl.c"
      case 79: // $bb81
        var $359=__lastLabel__ == 78 ? $358 : ($347);
        if ($359 == 5) {
          __label__ = 83; break;
        }
        else if ($359 == 6) {
          __label__ = 86; break;
        }
        else if ($359 == 7) {
          __label__ = 89; break;
        }
        else if ($359 == 9) {
          __label__ = 92; break;
        }
        else if ($359 == 10) {
          __label__ = 92; break;
        }
        else if ($359 == 11) {
          __label__ = 92; break;
        }
        else if ($359 == 15) {
          __label__ = 120; break;
        }
        else if ($359 == 20) {
          __label__ = 92; break;
        }
        else if ($359 == 21) {
          __label__ = 92; break;
        }
        else if ($359 == 22) {
          __label__ = 82; break;
        }
        else if ($359 == 23) {
          __label__ = 93; break;
        }
        else if ($359 == 24) {
          __label__ = 82; break;
        }
        else if ($359 == 25) {
          __label__ = 82; break;
        }
        else if ($359 == 26) {
          __label__ = 82; break;
        }
        else if ($359 == 27) {
          __label__ = 82; break;
        }
        else if ($359 == 29) {
          __label__ = 80; break;
        }
        else if ($359 == 30) {
          __label__ = 92; break;
        }
        else if ($359 == 32) {
          __label__ = 92; break;
        }
        else if ($359 == 33) {
          __label__ = 117; break;
        }
        else if ($359 == 34) {
          __label__ = 114; break;
        }
        else if ($359 == 35) {
          __label__ = 92; break;
        }
        else if ($359 == 36) {
          __label__ = 92; break;
        }
        else {
        __label__ = 123; break;
        }
        
      case 80: // $bb82
        var $360=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $361=$360; //@line 1143 "xmltok_impl.c"
        var $362=HEAP[$361]; //@line 1143 "xmltok_impl.c"
        var $363=($362); //@line 1143 "xmltok_impl.c"
        var $364=_namePages+$363; //@line 1143 "xmltok_impl.c"
        var $365=HEAP[$364]; //@line 1143 "xmltok_impl.c"
        var $366=($365); //@line 1143 "xmltok_impl.c"
        var $367=($366) * 8;
        var $368=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $369=$368+1; //@line 1143 "xmltok_impl.c"
        var $370=HEAP[$369]; //@line 1143 "xmltok_impl.c"
        var $371=($370) >>> 5; //@line 1143 "xmltok_impl.c"
        var $372=($371); //@line 1143 "xmltok_impl.c"
        var $373=($372) + ($367); //@line 1143 "xmltok_impl.c"
        var $374=_namingBitmap+$373*4; //@line 1143 "xmltok_impl.c"
        var $375=HEAP[$374]; //@line 1143 "xmltok_impl.c"
        var $376=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $377=$376+1; //@line 1143 "xmltok_impl.c"
        var $378=HEAP[$377]; //@line 1143 "xmltok_impl.c"
        var $379=($378); //@line 1143 "xmltok_impl.c"
        var $380=($379) & 31; //@line 1143 "xmltok_impl.c"
        var $381=1 << ($380); //@line 1143 "xmltok_impl.c"
        var $382=($381) & ($375); //@line 1143 "xmltok_impl.c"
        var $383=($382)==0; //@line 1143 "xmltok_impl.c"
        if ($383) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 1143 "xmltok_impl.c"
      case 81: // $bb83
        var $384=$nextTokPtr_addr; //@line 1143 "xmltok_impl.c"
        var $385=$ptr_addr; //@line 1143 "xmltok_impl.c"
        HEAP[$384]=$385; //@line 1143 "xmltok_impl.c"
        $0=0; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 82: // $bb84
        var $386=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $387=$386+2; //@line 1143 "xmltok_impl.c"
        $ptr_addr=$387; //@line 1143 "xmltok_impl.c"
        __label__ = 124; break; //@line 1143 "xmltok_impl.c"
      case 83: // $bb85
        var $388=$end_addr; //@line 1143 "xmltok_impl.c"
        var $389=($388); //@line 1143 "xmltok_impl.c"
        var $390=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $391=($390); //@line 1143 "xmltok_impl.c"
        var $392=($389) - ($391); //@line 1143 "xmltok_impl.c"
        var $393=($392) <= 1; //@line 1143 "xmltok_impl.c"
        if ($393) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 1143 "xmltok_impl.c"
      case 84: // $bb86
        $0=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 85: // $bb87
        var $394=$nextTokPtr_addr; //@line 1143 "xmltok_impl.c"
        var $395=$ptr_addr; //@line 1143 "xmltok_impl.c"
        HEAP[$394]=$395; //@line 1143 "xmltok_impl.c"
        $0=0; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 86: // $bb88
        var $396=$end_addr; //@line 1143 "xmltok_impl.c"
        var $397=($396); //@line 1143 "xmltok_impl.c"
        var $398=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $399=($398); //@line 1143 "xmltok_impl.c"
        var $400=($397) - ($399); //@line 1143 "xmltok_impl.c"
        var $401=($400) <= 2; //@line 1143 "xmltok_impl.c"
        if ($401) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 1143 "xmltok_impl.c"
      case 87: // $bb89
        $0=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 88: // $bb90
        var $402=$nextTokPtr_addr; //@line 1143 "xmltok_impl.c"
        var $403=$ptr_addr; //@line 1143 "xmltok_impl.c"
        HEAP[$402]=$403; //@line 1143 "xmltok_impl.c"
        $0=0; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 89: // $bb91
        var $404=$end_addr; //@line 1143 "xmltok_impl.c"
        var $405=($404); //@line 1143 "xmltok_impl.c"
        var $406=$ptr_addr; //@line 1143 "xmltok_impl.c"
        var $407=($406); //@line 1143 "xmltok_impl.c"
        var $408=($405) - ($407); //@line 1143 "xmltok_impl.c"
        var $409=($408) <= 3; //@line 1143 "xmltok_impl.c"
        if ($409) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 1143 "xmltok_impl.c"
      case 90: // $bb92
        $0=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 91: // $bb93
        var $410=$nextTokPtr_addr; //@line 1143 "xmltok_impl.c"
        var $411=$ptr_addr; //@line 1143 "xmltok_impl.c"
        HEAP[$410]=$411; //@line 1143 "xmltok_impl.c"
        $0=0; //@line 1143 "xmltok_impl.c"
        __label__ = 126; break; //@line 1143 "xmltok_impl.c"
      case 92: // $bb94
        var $412=$nextTokPtr_addr; //@line 1147 "xmltok_impl.c"
        var $413=$ptr_addr; //@line 1147 "xmltok_impl.c"
        HEAP[$412]=$413; //@line 1147 "xmltok_impl.c"
        var $414=$tok; //@line 1148 "xmltok_impl.c"
        $0=$414; //@line 1148 "xmltok_impl.c"
        __label__ = 126; break; //@line 1148 "xmltok_impl.c"
      case 93: // $bb95
        var $415=$ptr_addr; //@line 1151 "xmltok_impl.c"
        var $416=$415+2; //@line 1151 "xmltok_impl.c"
        $ptr_addr=$416; //@line 1151 "xmltok_impl.c"
        var $417=$tok; //@line 1152 "xmltok_impl.c"
        if ($417 == 18) {
          __label__ = 94; break;
        }
        else if ($417 == 41) {
          __label__ = 113; break;
        }
        else {
        __label__ = 124; break;
        }
        
      case 94: // $bb96
        var $418=$ptr_addr; //@line 1154 "xmltok_impl.c"
        var $419=$end_addr; //@line 1154 "xmltok_impl.c"
        var $420=($418)==($419); //@line 1154 "xmltok_impl.c"
        if ($420) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 1154 "xmltok_impl.c"
      case 95: // $bb97
        $0=-1; //@line 1155 "xmltok_impl.c"
        __label__ = 126; break; //@line 1155 "xmltok_impl.c"
      case 96: // $bb98
        $tok=41; //@line 1156 "xmltok_impl.c"
        var $421=$ptr_addr; //@line 1157 "xmltok_impl.c"
        var $422=$421; //@line 1157 "xmltok_impl.c"
        var $423=HEAP[$422]; //@line 1157 "xmltok_impl.c"
        var $424=($423)==0; //@line 1157 "xmltok_impl.c"
        if ($424) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 1157 "xmltok_impl.c"
      case 97: // $bb99
        var $425=$enc_addr; //@line 1157 "xmltok_impl.c"
        var $426=$425; //@line 1157 "xmltok_impl.c"
        var $427=$ptr_addr; //@line 1157 "xmltok_impl.c"
        var $428=$427+1; //@line 1157 "xmltok_impl.c"
        var $429=HEAP[$428]; //@line 1157 "xmltok_impl.c"
        var $430=($429); //@line 1157 "xmltok_impl.c"
        var $431=$426+76; //@line 1157 "xmltok_impl.c"
        var $432=$431+$430; //@line 1157 "xmltok_impl.c"
        var $433=HEAP[$432]; //@line 1157 "xmltok_impl.c"
        var $434=($433); //@line 1157 "xmltok_impl.c"
        $iftmp_1329=$434; //@line 1157 "xmltok_impl.c"
        __lastLabel__ = 97; __label__ = 99; break; //@line 1157 "xmltok_impl.c"
      case 98: // $bb100
        var $435=$ptr_addr; //@line 1157 "xmltok_impl.c"
        var $436=$435+1; //@line 1157 "xmltok_impl.c"
        var $437=HEAP[$436]; //@line 1157 "xmltok_impl.c"
        var $438=($437); //@line 1157 "xmltok_impl.c"
        var $439=$ptr_addr; //@line 1157 "xmltok_impl.c"
        var $440=$439; //@line 1157 "xmltok_impl.c"
        var $441=HEAP[$440]; //@line 1157 "xmltok_impl.c"
        var $442=($441); //@line 1157 "xmltok_impl.c"
        var $443=((($442)) & 255); //@line 1157 "xmltok_impl.c"
        var $444=((($438)) & 255); //@line 1157 "xmltok_impl.c"
        var $445=_unicode_byte_type($443, $444); //@line 1157 "xmltok_impl.c"
        $iftmp_1329=$445; //@line 1157 "xmltok_impl.c"
        __lastLabel__ = 98; __label__ = 99; break; //@line 1157 "xmltok_impl.c"
      case 99: // $bb101
        var $446=__lastLabel__ == 98 ? $445 : ($434);
        if ($446 == 5) {
          __label__ = 103; break;
        }
        else if ($446 == 6) {
          __label__ = 106; break;
        }
        else if ($446 == 7) {
          __label__ = 109; break;
        }
        else if ($446 == 22) {
          __label__ = 102; break;
        }
        else if ($446 == 24) {
          __label__ = 102; break;
        }
        else if ($446 == 25) {
          __label__ = 102; break;
        }
        else if ($446 == 26) {
          __label__ = 102; break;
        }
        else if ($446 == 27) {
          __label__ = 102; break;
        }
        else if ($446 == 29) {
          __label__ = 100; break;
        }
        else {
        __label__ = 112; break;
        }
        
      case 100: // $bb102
        var $447=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $448=$447; //@line 1158 "xmltok_impl.c"
        var $449=HEAP[$448]; //@line 1158 "xmltok_impl.c"
        var $450=($449); //@line 1158 "xmltok_impl.c"
        var $451=_namePages+$450; //@line 1158 "xmltok_impl.c"
        var $452=HEAP[$451]; //@line 1158 "xmltok_impl.c"
        var $453=($452); //@line 1158 "xmltok_impl.c"
        var $454=($453) * 8;
        var $455=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $456=$455+1; //@line 1158 "xmltok_impl.c"
        var $457=HEAP[$456]; //@line 1158 "xmltok_impl.c"
        var $458=($457) >>> 5; //@line 1158 "xmltok_impl.c"
        var $459=($458); //@line 1158 "xmltok_impl.c"
        var $460=($459) + ($454); //@line 1158 "xmltok_impl.c"
        var $461=_namingBitmap+$460*4; //@line 1158 "xmltok_impl.c"
        var $462=HEAP[$461]; //@line 1158 "xmltok_impl.c"
        var $463=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $464=$463+1; //@line 1158 "xmltok_impl.c"
        var $465=HEAP[$464]; //@line 1158 "xmltok_impl.c"
        var $466=($465); //@line 1158 "xmltok_impl.c"
        var $467=($466) & 31; //@line 1158 "xmltok_impl.c"
        var $468=1 << ($467); //@line 1158 "xmltok_impl.c"
        var $469=($468) & ($462); //@line 1158 "xmltok_impl.c"
        var $470=($469)==0; //@line 1158 "xmltok_impl.c"
        if ($470) { __label__ = 101; break; } else { __label__ = 102; break; } //@line 1158 "xmltok_impl.c"
      case 101: // $bb103
        var $471=$nextTokPtr_addr; //@line 1158 "xmltok_impl.c"
        var $472=$ptr_addr; //@line 1158 "xmltok_impl.c"
        HEAP[$471]=$472; //@line 1158 "xmltok_impl.c"
        $0=0; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 102: // $bb104
        var $473=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $474=$473+2; //@line 1158 "xmltok_impl.c"
        $ptr_addr=$474; //@line 1158 "xmltok_impl.c"
        __label__ = 124; break; //@line 1158 "xmltok_impl.c"
      case 103: // $bb105
        var $475=$end_addr; //@line 1158 "xmltok_impl.c"
        var $476=($475); //@line 1158 "xmltok_impl.c"
        var $477=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $478=($477); //@line 1158 "xmltok_impl.c"
        var $479=($476) - ($478); //@line 1158 "xmltok_impl.c"
        var $480=($479) <= 1; //@line 1158 "xmltok_impl.c"
        if ($480) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 1158 "xmltok_impl.c"
      case 104: // $bb106
        $0=-2; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 105: // $bb107
        var $481=$nextTokPtr_addr; //@line 1158 "xmltok_impl.c"
        var $482=$ptr_addr; //@line 1158 "xmltok_impl.c"
        HEAP[$481]=$482; //@line 1158 "xmltok_impl.c"
        $0=0; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 106: // $bb108
        var $483=$end_addr; //@line 1158 "xmltok_impl.c"
        var $484=($483); //@line 1158 "xmltok_impl.c"
        var $485=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $486=($485); //@line 1158 "xmltok_impl.c"
        var $487=($484) - ($486); //@line 1158 "xmltok_impl.c"
        var $488=($487) <= 2; //@line 1158 "xmltok_impl.c"
        if ($488) { __label__ = 107; break; } else { __label__ = 108; break; } //@line 1158 "xmltok_impl.c"
      case 107: // $bb109
        $0=-2; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 108: // $bb110
        var $489=$nextTokPtr_addr; //@line 1158 "xmltok_impl.c"
        var $490=$ptr_addr; //@line 1158 "xmltok_impl.c"
        HEAP[$489]=$490; //@line 1158 "xmltok_impl.c"
        $0=0; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 109: // $bb111
        var $491=$end_addr; //@line 1158 "xmltok_impl.c"
        var $492=($491); //@line 1158 "xmltok_impl.c"
        var $493=$ptr_addr; //@line 1158 "xmltok_impl.c"
        var $494=($493); //@line 1158 "xmltok_impl.c"
        var $495=($492) - ($494); //@line 1158 "xmltok_impl.c"
        var $496=($495) <= 3; //@line 1158 "xmltok_impl.c"
        if ($496) { __label__ = 110; break; } else { __label__ = 111; break; } //@line 1158 "xmltok_impl.c"
      case 110: // $bb112
        $0=-2; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 111: // $bb113
        var $497=$nextTokPtr_addr; //@line 1158 "xmltok_impl.c"
        var $498=$ptr_addr; //@line 1158 "xmltok_impl.c"
        HEAP[$497]=$498; //@line 1158 "xmltok_impl.c"
        $0=0; //@line 1158 "xmltok_impl.c"
        __label__ = 126; break; //@line 1158 "xmltok_impl.c"
      case 112: // $bb114
        $tok=19; //@line 1160 "xmltok_impl.c"
        __label__ = 124; break; //@line 1160 "xmltok_impl.c"
      case 113: // $bb116
        $tok=19; //@line 1165 "xmltok_impl.c"
        __label__ = 124; break; //@line 1165 "xmltok_impl.c"
      case 114: // $bb118
        var $499=$tok; //@line 1171 "xmltok_impl.c"
        var $500=($499)==19; //@line 1171 "xmltok_impl.c"
        if ($500) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 1171 "xmltok_impl.c"
      case 115: // $bb119
        var $501=$nextTokPtr_addr; //@line 1172 "xmltok_impl.c"
        var $502=$ptr_addr; //@line 1172 "xmltok_impl.c"
        HEAP[$501]=$502; //@line 1172 "xmltok_impl.c"
        $0=0; //@line 1173 "xmltok_impl.c"
        __label__ = 126; break; //@line 1173 "xmltok_impl.c"
      case 116: // $bb120
        var $503=$ptr_addr; //@line 1175 "xmltok_impl.c"
        var $504=$503+2; //@line 1175 "xmltok_impl.c"
        var $505=$nextTokPtr_addr; //@line 1175 "xmltok_impl.c"
        HEAP[$505]=$504; //@line 1175 "xmltok_impl.c"
        $0=32; //@line 1176 "xmltok_impl.c"
        __label__ = 126; break; //@line 1176 "xmltok_impl.c"
      case 117: // $bb121
        var $506=$tok; //@line 1178 "xmltok_impl.c"
        var $507=($506)==19; //@line 1178 "xmltok_impl.c"
        if ($507) { __label__ = 118; break; } else { __label__ = 119; break; } //@line 1178 "xmltok_impl.c"
      case 118: // $bb122
        var $508=$nextTokPtr_addr; //@line 1179 "xmltok_impl.c"
        var $509=$ptr_addr; //@line 1179 "xmltok_impl.c"
        HEAP[$508]=$509; //@line 1179 "xmltok_impl.c"
        $0=0; //@line 1180 "xmltok_impl.c"
        __label__ = 126; break; //@line 1180 "xmltok_impl.c"
      case 119: // $bb123
        var $510=$ptr_addr; //@line 1182 "xmltok_impl.c"
        var $511=$510+2; //@line 1182 "xmltok_impl.c"
        var $512=$nextTokPtr_addr; //@line 1182 "xmltok_impl.c"
        HEAP[$512]=$511; //@line 1182 "xmltok_impl.c"
        $0=31; //@line 1183 "xmltok_impl.c"
        __label__ = 126; break; //@line 1183 "xmltok_impl.c"
      case 120: // $bb124
        var $513=$tok; //@line 1185 "xmltok_impl.c"
        var $514=($513)==19; //@line 1185 "xmltok_impl.c"
        if ($514) { __label__ = 121; break; } else { __label__ = 122; break; } //@line 1185 "xmltok_impl.c"
      case 121: // $bb125
        var $515=$nextTokPtr_addr; //@line 1186 "xmltok_impl.c"
        var $516=$ptr_addr; //@line 1186 "xmltok_impl.c"
        HEAP[$515]=$516; //@line 1186 "xmltok_impl.c"
        $0=0; //@line 1187 "xmltok_impl.c"
        __label__ = 126; break; //@line 1187 "xmltok_impl.c"
      case 122: // $bb126
        var $517=$ptr_addr; //@line 1189 "xmltok_impl.c"
        var $518=$517+2; //@line 1189 "xmltok_impl.c"
        var $519=$nextTokPtr_addr; //@line 1189 "xmltok_impl.c"
        HEAP[$519]=$518; //@line 1189 "xmltok_impl.c"
        $0=30; //@line 1190 "xmltok_impl.c"
        __label__ = 126; break; //@line 1190 "xmltok_impl.c"
      case 123: // $bb127
        var $520=$nextTokPtr_addr; //@line 1192 "xmltok_impl.c"
        var $521=$ptr_addr; //@line 1192 "xmltok_impl.c"
        HEAP[$520]=$521; //@line 1192 "xmltok_impl.c"
        $0=0; //@line 1193 "xmltok_impl.c"
        __label__ = 126; break; //@line 1193 "xmltok_impl.c"
      case 124: // $bb128
        var $522=$ptr_addr; //@line 1141 "xmltok_impl.c"
        var $523=$end_addr; //@line 1141 "xmltok_impl.c"
        var $524=($522)!=($523); //@line 1141 "xmltok_impl.c"
        if ($524) { __label__ = 76; break; } else { __label__ = 125; break; } //@line 1141 "xmltok_impl.c"
      case 125: // $bb129
        var $525=$tok; //@line 1196 "xmltok_impl.c"
        var $526=0 - ($525); //@line 1196 "xmltok_impl.c"
        $0=$526; //@line 1196 "xmltok_impl.c"
        __label__ = 126; break; //@line 1196 "xmltok_impl.c"
      case 126: // $bb130
        var $527=$0; //@line 974 "xmltok_impl.c"
        $retval=$527; //@line 974 "xmltok_impl.c"
        var $retval131=$retval; //@line 974 "xmltok_impl.c"
        ;
        return $retval131; //@line 974 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_attributeValueTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1339;
        var $iftmp_1337;
        var $0;
        var $start;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 1204 "xmltok_impl.c"
        var $2=$end_addr; //@line 1204 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1204 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1204 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 1205 "xmltok_impl.c"
        __label__ = 33; break; //@line 1205 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 1206 "xmltok_impl.c"
        $start=$4; //@line 1206 "xmltok_impl.c"
        __label__ = 31; break; //@line 1206 "xmltok_impl.c"
      case 3: // $bb2
        var $5=$ptr_addr; //@line 1208 "xmltok_impl.c"
        var $6=$5; //@line 1208 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1208 "xmltok_impl.c"
        var $8=($7)==0; //@line 1208 "xmltok_impl.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1208 "xmltok_impl.c"
      case 4: // $bb3
        var $9=$enc_addr; //@line 1208 "xmltok_impl.c"
        var $10=$9; //@line 1208 "xmltok_impl.c"
        var $11=$ptr_addr; //@line 1208 "xmltok_impl.c"
        var $12=$11+1; //@line 1208 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1208 "xmltok_impl.c"
        var $14=($13); //@line 1208 "xmltok_impl.c"
        var $15=$10+76; //@line 1208 "xmltok_impl.c"
        var $16=$15+$14; //@line 1208 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 1208 "xmltok_impl.c"
        var $18=($17); //@line 1208 "xmltok_impl.c"
        $iftmp_1337=$18; //@line 1208 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 6; break; //@line 1208 "xmltok_impl.c"
      case 5: // $bb4
        var $19=$ptr_addr; //@line 1208 "xmltok_impl.c"
        var $20=$19+1; //@line 1208 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1208 "xmltok_impl.c"
        var $22=($21); //@line 1208 "xmltok_impl.c"
        var $23=$ptr_addr; //@line 1208 "xmltok_impl.c"
        var $24=$23; //@line 1208 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 1208 "xmltok_impl.c"
        var $26=($25); //@line 1208 "xmltok_impl.c"
        var $27=((($26)) & 255); //@line 1208 "xmltok_impl.c"
        var $28=((($22)) & 255); //@line 1208 "xmltok_impl.c"
        var $29=_unicode_byte_type($27, $28); //@line 1208 "xmltok_impl.c"
        $iftmp_1337=$29; //@line 1208 "xmltok_impl.c"
        __lastLabel__ = 5; __label__ = 6; break; //@line 1208 "xmltok_impl.c"
      case 6: // $bb5
        var $30=__lastLabel__ == 5 ? $29 : ($18);
        if ($30 == 2) {
          __label__ = 13; break;
        }
        else if ($30 == 3) {
          __label__ = 10; break;
        }
        else if ($30 == 5) {
          __label__ = 7; break;
        }
        else if ($30 == 6) {
          __label__ = 8; break;
        }
        else if ($30 == 7) {
          __label__ = 9; break;
        }
        else if ($30 == 9) {
          __label__ = 17; break;
        }
        else if ($30 == 10) {
          __label__ = 14; break;
        }
        else if ($30 == 21) {
          __label__ = 27; break;
        }
        else {
        __label__ = 30; break;
        }
        
      case 7: // $bb6
        var $31=$ptr_addr; //@line 1211 "xmltok_impl.c"
        var $32=$31+2; //@line 1211 "xmltok_impl.c"
        $ptr_addr=$32; //@line 1211 "xmltok_impl.c"
        __label__ = 31; break; //@line 1211 "xmltok_impl.c"
      case 8: // $bb7
        var $33=$ptr_addr; //@line 1211 "xmltok_impl.c"
        var $34=$33+3; //@line 1211 "xmltok_impl.c"
        $ptr_addr=$34; //@line 1211 "xmltok_impl.c"
        __label__ = 31; break; //@line 1211 "xmltok_impl.c"
      case 9: // $bb8
        var $35=$ptr_addr; //@line 1211 "xmltok_impl.c"
        var $36=$35+4; //@line 1211 "xmltok_impl.c"
        $ptr_addr=$36; //@line 1211 "xmltok_impl.c"
        __label__ = 31; break; //@line 1211 "xmltok_impl.c"
      case 10: // $bb9
        var $37=$ptr_addr; //@line 1214 "xmltok_impl.c"
        var $38=$start; //@line 1214 "xmltok_impl.c"
        var $39=($37)==($38); //@line 1214 "xmltok_impl.c"
        if ($39) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1214 "xmltok_impl.c"
      case 11: // $bb10
        var $40=$ptr_addr; //@line 1215 "xmltok_impl.c"
        var $41=$40+2; //@line 1215 "xmltok_impl.c"
        var $42=$enc_addr; //@line 1215 "xmltok_impl.c"
        var $43=$end_addr; //@line 1215 "xmltok_impl.c"
        var $44=$nextTokPtr_addr; //@line 1215 "xmltok_impl.c"
        var $45=_big2_scanRef($42, $41, $43, $44); //@line 1215 "xmltok_impl.c"
        $0=$45; //@line 1215 "xmltok_impl.c"
        __label__ = 33; break; //@line 1215 "xmltok_impl.c"
      case 12: // $bb11
        var $46=$nextTokPtr_addr; //@line 1216 "xmltok_impl.c"
        var $47=$ptr_addr; //@line 1216 "xmltok_impl.c"
        HEAP[$46]=$47; //@line 1216 "xmltok_impl.c"
        $0=6; //@line 1217 "xmltok_impl.c"
        __label__ = 33; break; //@line 1217 "xmltok_impl.c"
      case 13: // $bb12
        var $48=$nextTokPtr_addr; //@line 1220 "xmltok_impl.c"
        var $49=$ptr_addr; //@line 1220 "xmltok_impl.c"
        HEAP[$48]=$49; //@line 1220 "xmltok_impl.c"
        $0=0; //@line 1221 "xmltok_impl.c"
        __label__ = 33; break; //@line 1221 "xmltok_impl.c"
      case 14: // $bb13
        var $50=$ptr_addr; //@line 1223 "xmltok_impl.c"
        var $51=$start; //@line 1223 "xmltok_impl.c"
        var $52=($50)==($51); //@line 1223 "xmltok_impl.c"
        if ($52) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1223 "xmltok_impl.c"
      case 15: // $bb14
        var $53=$ptr_addr; //@line 1224 "xmltok_impl.c"
        var $54=$53+2; //@line 1224 "xmltok_impl.c"
        var $55=$nextTokPtr_addr; //@line 1224 "xmltok_impl.c"
        HEAP[$55]=$54; //@line 1224 "xmltok_impl.c"
        $0=7; //@line 1225 "xmltok_impl.c"
        __label__ = 33; break; //@line 1225 "xmltok_impl.c"
      case 16: // $bb15
        var $56=$nextTokPtr_addr; //@line 1227 "xmltok_impl.c"
        var $57=$ptr_addr; //@line 1227 "xmltok_impl.c"
        HEAP[$56]=$57; //@line 1227 "xmltok_impl.c"
        $0=6; //@line 1228 "xmltok_impl.c"
        __label__ = 33; break; //@line 1228 "xmltok_impl.c"
      case 17: // $bb16
        var $58=$ptr_addr; //@line 1230 "xmltok_impl.c"
        var $59=$start; //@line 1230 "xmltok_impl.c"
        var $60=($58)==($59); //@line 1230 "xmltok_impl.c"
        if ($60) { __label__ = 18; break; } else { __label__ = 26; break; } //@line 1230 "xmltok_impl.c"
      case 18: // $bb17
        var $61=$ptr_addr; //@line 1231 "xmltok_impl.c"
        var $62=$61+2; //@line 1231 "xmltok_impl.c"
        $ptr_addr=$62; //@line 1231 "xmltok_impl.c"
        var $63=$ptr_addr; //@line 1232 "xmltok_impl.c"
        var $64=$end_addr; //@line 1232 "xmltok_impl.c"
        var $65=($63)==($64); //@line 1232 "xmltok_impl.c"
        if ($65) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1232 "xmltok_impl.c"
      case 19: // $bb18
        $0=-3; //@line 1233 "xmltok_impl.c"
        __label__ = 33; break; //@line 1233 "xmltok_impl.c"
      case 20: // $bb19
        var $66=$ptr_addr; //@line 1234 "xmltok_impl.c"
        var $67=$66; //@line 1234 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 1234 "xmltok_impl.c"
        var $69=($68)==0; //@line 1234 "xmltok_impl.c"
        if ($69) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1234 "xmltok_impl.c"
      case 21: // $bb20
        var $70=$enc_addr; //@line 1234 "xmltok_impl.c"
        var $71=$70; //@line 1234 "xmltok_impl.c"
        var $72=$ptr_addr; //@line 1234 "xmltok_impl.c"
        var $73=$72+1; //@line 1234 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 1234 "xmltok_impl.c"
        var $75=($74); //@line 1234 "xmltok_impl.c"
        var $76=$71+76; //@line 1234 "xmltok_impl.c"
        var $77=$76+$75; //@line 1234 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 1234 "xmltok_impl.c"
        var $79=($78)==10; //@line 1234 "xmltok_impl.c"
        var $80=($79); //@line 1234 "xmltok_impl.c"
        $iftmp_1339=$80; //@line 1234 "xmltok_impl.c"
        __lastLabel__ = 21; __label__ = 23; break; //@line 1234 "xmltok_impl.c"
      case 22: // $bb21
        var $81=$ptr_addr; //@line 1234 "xmltok_impl.c"
        var $82=$81+1; //@line 1234 "xmltok_impl.c"
        var $83=HEAP[$82]; //@line 1234 "xmltok_impl.c"
        var $84=($83); //@line 1234 "xmltok_impl.c"
        var $85=$ptr_addr; //@line 1234 "xmltok_impl.c"
        var $86=$85; //@line 1234 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 1234 "xmltok_impl.c"
        var $88=($87); //@line 1234 "xmltok_impl.c"
        var $89=((($88)) & 255); //@line 1234 "xmltok_impl.c"
        var $90=((($84)) & 255); //@line 1234 "xmltok_impl.c"
        var $91=_unicode_byte_type($89, $90); //@line 1234 "xmltok_impl.c"
        var $92=($91)==10; //@line 1234 "xmltok_impl.c"
        var $93=($92); //@line 1234 "xmltok_impl.c"
        $iftmp_1339=$93; //@line 1234 "xmltok_impl.c"
        __lastLabel__ = 22; __label__ = 23; break; //@line 1234 "xmltok_impl.c"
      case 23: // $bb22
        var $94=__lastLabel__ == 22 ? $93 : ($80);
        var $toBool=($94)!=0; //@line 1234 "xmltok_impl.c"
        if ($toBool) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1234 "xmltok_impl.c"
      case 24: // $bb23
        var $95=$ptr_addr; //@line 1235 "xmltok_impl.c"
        var $96=$95+2; //@line 1235 "xmltok_impl.c"
        $ptr_addr=$96; //@line 1235 "xmltok_impl.c"
        __label__ = 25; break; //@line 1235 "xmltok_impl.c"
      case 25: // $bb24
        var $97=$nextTokPtr_addr; //@line 1236 "xmltok_impl.c"
        var $98=$ptr_addr; //@line 1236 "xmltok_impl.c"
        HEAP[$97]=$98; //@line 1236 "xmltok_impl.c"
        $0=7; //@line 1237 "xmltok_impl.c"
        __label__ = 33; break; //@line 1237 "xmltok_impl.c"
      case 26: // $bb25
        var $99=$nextTokPtr_addr; //@line 1239 "xmltok_impl.c"
        var $100=$ptr_addr; //@line 1239 "xmltok_impl.c"
        HEAP[$99]=$100; //@line 1239 "xmltok_impl.c"
        $0=6; //@line 1240 "xmltok_impl.c"
        __label__ = 33; break; //@line 1240 "xmltok_impl.c"
      case 27: // $bb26
        var $101=$ptr_addr; //@line 1242 "xmltok_impl.c"
        var $102=$start; //@line 1242 "xmltok_impl.c"
        var $103=($101)==($102); //@line 1242 "xmltok_impl.c"
        if ($103) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1242 "xmltok_impl.c"
      case 28: // $bb27
        var $104=$ptr_addr; //@line 1243 "xmltok_impl.c"
        var $105=$104+2; //@line 1243 "xmltok_impl.c"
        var $106=$nextTokPtr_addr; //@line 1243 "xmltok_impl.c"
        HEAP[$106]=$105; //@line 1243 "xmltok_impl.c"
        $0=39; //@line 1244 "xmltok_impl.c"
        __label__ = 33; break; //@line 1244 "xmltok_impl.c"
      case 29: // $bb28
        var $107=$nextTokPtr_addr; //@line 1246 "xmltok_impl.c"
        var $108=$ptr_addr; //@line 1246 "xmltok_impl.c"
        HEAP[$107]=$108; //@line 1246 "xmltok_impl.c"
        $0=6; //@line 1247 "xmltok_impl.c"
        __label__ = 33; break; //@line 1247 "xmltok_impl.c"
      case 30: // $bb29
        var $109=$ptr_addr; //@line 1249 "xmltok_impl.c"
        var $110=$109+2; //@line 1249 "xmltok_impl.c"
        $ptr_addr=$110; //@line 1249 "xmltok_impl.c"
        __label__ = 31; break; //@line 1249 "xmltok_impl.c"
      case 31: // $bb30
        var $111=$ptr_addr; //@line 1207 "xmltok_impl.c"
        var $112=$end_addr; //@line 1207 "xmltok_impl.c"
        var $113=($111)!=($112); //@line 1207 "xmltok_impl.c"
        if ($113) { __label__ = 3; break; } else { __label__ = 32; break; } //@line 1207 "xmltok_impl.c"
      case 32: // $bb31
        var $114=$nextTokPtr_addr; //@line 1253 "xmltok_impl.c"
        var $115=$ptr_addr; //@line 1253 "xmltok_impl.c"
        HEAP[$114]=$115; //@line 1253 "xmltok_impl.c"
        $0=6; //@line 1254 "xmltok_impl.c"
        __label__ = 33; break; //@line 1254 "xmltok_impl.c"
      case 33: // $bb32
        var $116=$0; //@line 1205 "xmltok_impl.c"
        $retval=$116; //@line 1205 "xmltok_impl.c"
        var $retval33=$retval; //@line 1205 "xmltok_impl.c"
        ;
        return $retval33; //@line 1205 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_entityValueTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $iftmp_1344;
        var $iftmp_1343;
        var $iftmp_1341;
        var $0;
        var $start;
        var $tok;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 1262 "xmltok_impl.c"
        var $2=$end_addr; //@line 1262 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1262 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1262 "xmltok_impl.c"
      case 1: // $bb
        $0=-4; //@line 1263 "xmltok_impl.c"
        __label__ = 35; break; //@line 1263 "xmltok_impl.c"
      case 2: // $bb1
        var $4=$ptr_addr; //@line 1264 "xmltok_impl.c"
        $start=$4; //@line 1264 "xmltok_impl.c"
        __label__ = 33; break; //@line 1264 "xmltok_impl.c"
      case 3: // $bb2
        var $5=$ptr_addr; //@line 1266 "xmltok_impl.c"
        var $6=$5; //@line 1266 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1266 "xmltok_impl.c"
        var $8=($7)==0; //@line 1266 "xmltok_impl.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1266 "xmltok_impl.c"
      case 4: // $bb3
        var $9=$enc_addr; //@line 1266 "xmltok_impl.c"
        var $10=$9; //@line 1266 "xmltok_impl.c"
        var $11=$ptr_addr; //@line 1266 "xmltok_impl.c"
        var $12=$11+1; //@line 1266 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1266 "xmltok_impl.c"
        var $14=($13); //@line 1266 "xmltok_impl.c"
        var $15=$10+76; //@line 1266 "xmltok_impl.c"
        var $16=$15+$14; //@line 1266 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 1266 "xmltok_impl.c"
        var $18=($17); //@line 1266 "xmltok_impl.c"
        $iftmp_1341=$18; //@line 1266 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 6; break; //@line 1266 "xmltok_impl.c"
      case 5: // $bb4
        var $19=$ptr_addr; //@line 1266 "xmltok_impl.c"
        var $20=$19+1; //@line 1266 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1266 "xmltok_impl.c"
        var $22=($21); //@line 1266 "xmltok_impl.c"
        var $23=$ptr_addr; //@line 1266 "xmltok_impl.c"
        var $24=$23; //@line 1266 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 1266 "xmltok_impl.c"
        var $26=($25); //@line 1266 "xmltok_impl.c"
        var $27=((($26)) & 255); //@line 1266 "xmltok_impl.c"
        var $28=((($22)) & 255); //@line 1266 "xmltok_impl.c"
        var $29=_unicode_byte_type($27, $28); //@line 1266 "xmltok_impl.c"
        $iftmp_1341=$29; //@line 1266 "xmltok_impl.c"
        __lastLabel__ = 5; __label__ = 6; break; //@line 1266 "xmltok_impl.c"
      case 6: // $bb5
        var $30=__lastLabel__ == 5 ? $29 : ($18);
        if ($30 == 3) {
          __label__ = 10; break;
        }
        else if ($30 == 5) {
          __label__ = 7; break;
        }
        else if ($30 == 6) {
          __label__ = 8; break;
        }
        else if ($30 == 7) {
          __label__ = 9; break;
        }
        else if ($30 == 9) {
          __label__ = 22; break;
        }
        else if ($30 == 10) {
          __label__ = 19; break;
        }
        else if ($30 == 30) {
          __label__ = 13; break;
        }
        else {
        __label__ = 32; break;
        }
        
      case 7: // $bb6
        var $31=$ptr_addr; //@line 1269 "xmltok_impl.c"
        var $32=$31+2; //@line 1269 "xmltok_impl.c"
        $ptr_addr=$32; //@line 1269 "xmltok_impl.c"
        __label__ = 33; break; //@line 1269 "xmltok_impl.c"
      case 8: // $bb7
        var $33=$ptr_addr; //@line 1269 "xmltok_impl.c"
        var $34=$33+3; //@line 1269 "xmltok_impl.c"
        $ptr_addr=$34; //@line 1269 "xmltok_impl.c"
        __label__ = 33; break; //@line 1269 "xmltok_impl.c"
      case 9: // $bb8
        var $35=$ptr_addr; //@line 1269 "xmltok_impl.c"
        var $36=$35+4; //@line 1269 "xmltok_impl.c"
        $ptr_addr=$36; //@line 1269 "xmltok_impl.c"
        __label__ = 33; break; //@line 1269 "xmltok_impl.c"
      case 10: // $bb9
        var $37=$ptr_addr; //@line 1272 "xmltok_impl.c"
        var $38=$start; //@line 1272 "xmltok_impl.c"
        var $39=($37)==($38); //@line 1272 "xmltok_impl.c"
        if ($39) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1272 "xmltok_impl.c"
      case 11: // $bb10
        var $40=$ptr_addr; //@line 1273 "xmltok_impl.c"
        var $41=$40+2; //@line 1273 "xmltok_impl.c"
        var $42=$enc_addr; //@line 1273 "xmltok_impl.c"
        var $43=$end_addr; //@line 1273 "xmltok_impl.c"
        var $44=$nextTokPtr_addr; //@line 1273 "xmltok_impl.c"
        var $45=_big2_scanRef($42, $41, $43, $44); //@line 1273 "xmltok_impl.c"
        $0=$45; //@line 1273 "xmltok_impl.c"
        __label__ = 35; break; //@line 1273 "xmltok_impl.c"
      case 12: // $bb11
        var $46=$nextTokPtr_addr; //@line 1274 "xmltok_impl.c"
        var $47=$ptr_addr; //@line 1274 "xmltok_impl.c"
        HEAP[$46]=$47; //@line 1274 "xmltok_impl.c"
        $0=6; //@line 1275 "xmltok_impl.c"
        __label__ = 35; break; //@line 1275 "xmltok_impl.c"
      case 13: // $bb12
        var $48=$ptr_addr; //@line 1277 "xmltok_impl.c"
        var $49=$start; //@line 1277 "xmltok_impl.c"
        var $50=($48)==($49); //@line 1277 "xmltok_impl.c"
        if ($50) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 1277 "xmltok_impl.c"
      case 14: // $bb13
        var $51=$ptr_addr; //@line 1279 "xmltok_impl.c"
        var $52=$51+2; //@line 1279 "xmltok_impl.c"
        var $53=$enc_addr; //@line 1279 "xmltok_impl.c"
        var $54=$end_addr; //@line 1279 "xmltok_impl.c"
        var $55=$nextTokPtr_addr; //@line 1279 "xmltok_impl.c"
        var $56=_big2_scanPercent($53, $52, $54, $55); //@line 1279 "xmltok_impl.c"
        $tok=$56; //@line 1279 "xmltok_impl.c"
        var $57=$tok; //@line 1280 "xmltok_impl.c"
        var $58=($57)!=22; //@line 1280 "xmltok_impl.c"
        if ($58) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1280 "xmltok_impl.c"
      case 15: // $bb14
        var $59=$tok; //@line 1280 "xmltok_impl.c"
        $iftmp_1343=$59; //@line 1280 "xmltok_impl.c"
        __label__ = 17; break; //@line 1280 "xmltok_impl.c"
      case 16: // $bb15
        $iftmp_1343=0; //@line 1280 "xmltok_impl.c"
        __label__ = 17; break; //@line 1280 "xmltok_impl.c"
      case 17: // $bb16
        var $60=$iftmp_1343; //@line 1280 "xmltok_impl.c"
        $0=$60; //@line 1280 "xmltok_impl.c"
        __label__ = 35; break; //@line 1280 "xmltok_impl.c"
      case 18: // $bb17
        var $61=$nextTokPtr_addr; //@line 1282 "xmltok_impl.c"
        var $62=$ptr_addr; //@line 1282 "xmltok_impl.c"
        HEAP[$61]=$62; //@line 1282 "xmltok_impl.c"
        $0=6; //@line 1283 "xmltok_impl.c"
        __label__ = 35; break; //@line 1283 "xmltok_impl.c"
      case 19: // $bb18
        var $63=$ptr_addr; //@line 1285 "xmltok_impl.c"
        var $64=$start; //@line 1285 "xmltok_impl.c"
        var $65=($63)==($64); //@line 1285 "xmltok_impl.c"
        if ($65) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1285 "xmltok_impl.c"
      case 20: // $bb19
        var $66=$ptr_addr; //@line 1286 "xmltok_impl.c"
        var $67=$66+2; //@line 1286 "xmltok_impl.c"
        var $68=$nextTokPtr_addr; //@line 1286 "xmltok_impl.c"
        HEAP[$68]=$67; //@line 1286 "xmltok_impl.c"
        $0=7; //@line 1287 "xmltok_impl.c"
        __label__ = 35; break; //@line 1287 "xmltok_impl.c"
      case 21: // $bb20
        var $69=$nextTokPtr_addr; //@line 1289 "xmltok_impl.c"
        var $70=$ptr_addr; //@line 1289 "xmltok_impl.c"
        HEAP[$69]=$70; //@line 1289 "xmltok_impl.c"
        $0=6; //@line 1290 "xmltok_impl.c"
        __label__ = 35; break; //@line 1290 "xmltok_impl.c"
      case 22: // $bb21
        var $71=$ptr_addr; //@line 1292 "xmltok_impl.c"
        var $72=$start; //@line 1292 "xmltok_impl.c"
        var $73=($71)==($72); //@line 1292 "xmltok_impl.c"
        if ($73) { __label__ = 23; break; } else { __label__ = 31; break; } //@line 1292 "xmltok_impl.c"
      case 23: // $bb22
        var $74=$ptr_addr; //@line 1293 "xmltok_impl.c"
        var $75=$74+2; //@line 1293 "xmltok_impl.c"
        $ptr_addr=$75; //@line 1293 "xmltok_impl.c"
        var $76=$ptr_addr; //@line 1294 "xmltok_impl.c"
        var $77=$end_addr; //@line 1294 "xmltok_impl.c"
        var $78=($76)==($77); //@line 1294 "xmltok_impl.c"
        if ($78) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1294 "xmltok_impl.c"
      case 24: // $bb23
        $0=-3; //@line 1295 "xmltok_impl.c"
        __label__ = 35; break; //@line 1295 "xmltok_impl.c"
      case 25: // $bb24
        var $79=$ptr_addr; //@line 1296 "xmltok_impl.c"
        var $80=$79; //@line 1296 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 1296 "xmltok_impl.c"
        var $82=($81)==0; //@line 1296 "xmltok_impl.c"
        if ($82) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1296 "xmltok_impl.c"
      case 26: // $bb25
        var $83=$enc_addr; //@line 1296 "xmltok_impl.c"
        var $84=$83; //@line 1296 "xmltok_impl.c"
        var $85=$ptr_addr; //@line 1296 "xmltok_impl.c"
        var $86=$85+1; //@line 1296 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 1296 "xmltok_impl.c"
        var $88=($87); //@line 1296 "xmltok_impl.c"
        var $89=$84+76; //@line 1296 "xmltok_impl.c"
        var $90=$89+$88; //@line 1296 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 1296 "xmltok_impl.c"
        var $92=($91)==10; //@line 1296 "xmltok_impl.c"
        var $93=($92); //@line 1296 "xmltok_impl.c"
        $iftmp_1344=$93; //@line 1296 "xmltok_impl.c"
        __lastLabel__ = 26; __label__ = 28; break; //@line 1296 "xmltok_impl.c"
      case 27: // $bb26
        var $94=$ptr_addr; //@line 1296 "xmltok_impl.c"
        var $95=$94+1; //@line 1296 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 1296 "xmltok_impl.c"
        var $97=($96); //@line 1296 "xmltok_impl.c"
        var $98=$ptr_addr; //@line 1296 "xmltok_impl.c"
        var $99=$98; //@line 1296 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 1296 "xmltok_impl.c"
        var $101=($100); //@line 1296 "xmltok_impl.c"
        var $102=((($101)) & 255); //@line 1296 "xmltok_impl.c"
        var $103=((($97)) & 255); //@line 1296 "xmltok_impl.c"
        var $104=_unicode_byte_type($102, $103); //@line 1296 "xmltok_impl.c"
        var $105=($104)==10; //@line 1296 "xmltok_impl.c"
        var $106=($105); //@line 1296 "xmltok_impl.c"
        $iftmp_1344=$106; //@line 1296 "xmltok_impl.c"
        __lastLabel__ = 27; __label__ = 28; break; //@line 1296 "xmltok_impl.c"
      case 28: // $bb27
        var $107=__lastLabel__ == 27 ? $106 : ($93);
        var $toBool=($107)!=0; //@line 1296 "xmltok_impl.c"
        if ($toBool) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1296 "xmltok_impl.c"
      case 29: // $bb28
        var $108=$ptr_addr; //@line 1297 "xmltok_impl.c"
        var $109=$108+2; //@line 1297 "xmltok_impl.c"
        $ptr_addr=$109; //@line 1297 "xmltok_impl.c"
        __label__ = 30; break; //@line 1297 "xmltok_impl.c"
      case 30: // $bb29
        var $110=$nextTokPtr_addr; //@line 1298 "xmltok_impl.c"
        var $111=$ptr_addr; //@line 1298 "xmltok_impl.c"
        HEAP[$110]=$111; //@line 1298 "xmltok_impl.c"
        $0=7; //@line 1299 "xmltok_impl.c"
        __label__ = 35; break; //@line 1299 "xmltok_impl.c"
      case 31: // $bb30
        var $112=$nextTokPtr_addr; //@line 1301 "xmltok_impl.c"
        var $113=$ptr_addr; //@line 1301 "xmltok_impl.c"
        HEAP[$112]=$113; //@line 1301 "xmltok_impl.c"
        $0=6; //@line 1302 "xmltok_impl.c"
        __label__ = 35; break; //@line 1302 "xmltok_impl.c"
      case 32: // $bb31
        var $114=$ptr_addr; //@line 1304 "xmltok_impl.c"
        var $115=$114+2; //@line 1304 "xmltok_impl.c"
        $ptr_addr=$115; //@line 1304 "xmltok_impl.c"
        __label__ = 33; break; //@line 1304 "xmltok_impl.c"
      case 33: // $bb32
        var $116=$ptr_addr; //@line 1265 "xmltok_impl.c"
        var $117=$end_addr; //@line 1265 "xmltok_impl.c"
        var $118=($116)!=($117); //@line 1265 "xmltok_impl.c"
        if ($118) { __label__ = 3; break; } else { __label__ = 34; break; } //@line 1265 "xmltok_impl.c"
      case 34: // $bb33
        var $119=$nextTokPtr_addr; //@line 1308 "xmltok_impl.c"
        var $120=$ptr_addr; //@line 1308 "xmltok_impl.c"
        HEAP[$119]=$120; //@line 1308 "xmltok_impl.c"
        $0=6; //@line 1309 "xmltok_impl.c"
        __label__ = 35; break; //@line 1309 "xmltok_impl.c"
      case 35: // $bb34
        var $121=$0; //@line 1263 "xmltok_impl.c"
        $retval=$121; //@line 1263 "xmltok_impl.c"
        var $retval35=$retval; //@line 1263 "xmltok_impl.c"
        ;
        return $retval35; //@line 1263 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_ignoreSectionTok($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $iftmp_1349;
        var $level;
        var $n;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        $level=0; //@line 1318 "xmltok_impl.c"
        var $1=$end_addr; //@line 1320 "xmltok_impl.c"
        var $2=($1); //@line 1320 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 1320 "xmltok_impl.c"
        var $4=($3); //@line 1320 "xmltok_impl.c"
        var $5=($2) - ($4); //@line 1320 "xmltok_impl.c"
        $n=$5; //@line 1320 "xmltok_impl.c"
        var $6=$n; //@line 1321 "xmltok_impl.c"
        var $7=($6) & 1; //@line 1321 "xmltok_impl.c"
        var $8=((($7)) & 255); //@line 1321 "xmltok_impl.c"
        var $toBool=($8)!=0; //@line 1321 "xmltok_impl.c"
        if ($toBool) { __label__ = 1; break; } else { __label__ = 37; break; } //@line 1321 "xmltok_impl.c"
      case 1: // $bb
        var $9=$n; //@line 1322 "xmltok_impl.c"
        var $10=($9) & -2; //@line 1322 "xmltok_impl.c"
        $n=$10; //@line 1322 "xmltok_impl.c"
        var $11=$ptr_addr; //@line 1323 "xmltok_impl.c"
        var $12=$n; //@line 1323 "xmltok_impl.c"
        var $13=$11+$12; //@line 1323 "xmltok_impl.c"
        $end_addr=$13; //@line 1323 "xmltok_impl.c"
        __label__ = 37; break; //@line 1323 "xmltok_impl.c"
      case 2: // $bb2
        var $14=$ptr_addr; //@line 1327 "xmltok_impl.c"
        var $15=$14; //@line 1327 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1327 "xmltok_impl.c"
        var $17=($16)==0; //@line 1327 "xmltok_impl.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1327 "xmltok_impl.c"
      case 3: // $bb3
        var $18=$enc_addr; //@line 1327 "xmltok_impl.c"
        var $19=$18; //@line 1327 "xmltok_impl.c"
        var $20=$ptr_addr; //@line 1327 "xmltok_impl.c"
        var $21=$20+1; //@line 1327 "xmltok_impl.c"
        var $22=HEAP[$21]; //@line 1327 "xmltok_impl.c"
        var $23=($22); //@line 1327 "xmltok_impl.c"
        var $24=$19+76; //@line 1327 "xmltok_impl.c"
        var $25=$24+$23; //@line 1327 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 1327 "xmltok_impl.c"
        var $27=($26); //@line 1327 "xmltok_impl.c"
        $iftmp_1349=$27; //@line 1327 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 5; break; //@line 1327 "xmltok_impl.c"
      case 4: // $bb4
        var $28=$ptr_addr; //@line 1327 "xmltok_impl.c"
        var $29=$28+1; //@line 1327 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 1327 "xmltok_impl.c"
        var $31=($30); //@line 1327 "xmltok_impl.c"
        var $32=$ptr_addr; //@line 1327 "xmltok_impl.c"
        var $33=$32; //@line 1327 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 1327 "xmltok_impl.c"
        var $35=($34); //@line 1327 "xmltok_impl.c"
        var $36=((($35)) & 255); //@line 1327 "xmltok_impl.c"
        var $37=((($31)) & 255); //@line 1327 "xmltok_impl.c"
        var $38=_unicode_byte_type($36, $37); //@line 1327 "xmltok_impl.c"
        $iftmp_1349=$38; //@line 1327 "xmltok_impl.c"
        __lastLabel__ = 4; __label__ = 5; break; //@line 1327 "xmltok_impl.c"
      case 5: // $bb5
        var $39=__lastLabel__ == 4 ? $38 : ($27);
        if ($39 == 0) {
          __label__ = 15; break;
        }
        else if ($39 == 1) {
          __label__ = 15; break;
        }
        else if ($39 == 2) {
          __label__ = 16; break;
        }
        else if ($39 == 4) {
          __label__ = 25; break;
        }
        else if ($39 == 5) {
          __label__ = 6; break;
        }
        else if ($39 == 6) {
          __label__ = 9; break;
        }
        else if ($39 == 7) {
          __label__ = 12; break;
        }
        else if ($39 == 8) {
          __label__ = 15; break;
        }
        else {
        __label__ = 36; break;
        }
        
      case 6: // $bb6
        var $40=$end_addr; //@line 1328 "xmltok_impl.c"
        var $41=($40); //@line 1328 "xmltok_impl.c"
        var $42=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $43=($42); //@line 1328 "xmltok_impl.c"
        var $44=($41) - ($43); //@line 1328 "xmltok_impl.c"
        var $45=($44) <= 1; //@line 1328 "xmltok_impl.c"
        if ($45) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1328 "xmltok_impl.c"
      case 7: // $bb7
        $0=-2; //@line 1328 "xmltok_impl.c"
        __label__ = 39; break; //@line 1328 "xmltok_impl.c"
      case 8: // $bb8
        var $46=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $47=$46+2; //@line 1328 "xmltok_impl.c"
        $ptr_addr=$47; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 9: // $bb9
        var $48=$end_addr; //@line 1328 "xmltok_impl.c"
        var $49=($48); //@line 1328 "xmltok_impl.c"
        var $50=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $51=($50); //@line 1328 "xmltok_impl.c"
        var $52=($49) - ($51); //@line 1328 "xmltok_impl.c"
        var $53=($52) <= 2; //@line 1328 "xmltok_impl.c"
        if ($53) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1328 "xmltok_impl.c"
      case 10: // $bb10
        $0=-2; //@line 1328 "xmltok_impl.c"
        __label__ = 39; break; //@line 1328 "xmltok_impl.c"
      case 11: // $bb11
        var $54=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $55=$54+3; //@line 1328 "xmltok_impl.c"
        $ptr_addr=$55; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 12: // $bb12
        var $56=$end_addr; //@line 1328 "xmltok_impl.c"
        var $57=($56); //@line 1328 "xmltok_impl.c"
        var $58=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $59=($58); //@line 1328 "xmltok_impl.c"
        var $60=($57) - ($59); //@line 1328 "xmltok_impl.c"
        var $61=($60) <= 3; //@line 1328 "xmltok_impl.c"
        if ($61) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1328 "xmltok_impl.c"
      case 13: // $bb13
        $0=-2; //@line 1328 "xmltok_impl.c"
        __label__ = 39; break; //@line 1328 "xmltok_impl.c"
      case 14: // $bb14
        var $62=$ptr_addr; //@line 1328 "xmltok_impl.c"
        var $63=$62+4; //@line 1328 "xmltok_impl.c"
        $ptr_addr=$63; //@line 1328 "xmltok_impl.c"
        __label__ = 37; break; //@line 1328 "xmltok_impl.c"
      case 15: // $bb15
        var $64=$nextTokPtr_addr; //@line 1328 "xmltok_impl.c"
        var $65=$ptr_addr; //@line 1328 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 1328 "xmltok_impl.c"
        $0=0; //@line 1328 "xmltok_impl.c"
        __label__ = 39; break; //@line 1328 "xmltok_impl.c"
      case 16: // $bb16
        var $66=$ptr_addr; //@line 1330 "xmltok_impl.c"
        var $67=$66+2; //@line 1330 "xmltok_impl.c"
        $ptr_addr=$67; //@line 1330 "xmltok_impl.c"
        var $68=$ptr_addr; //@line 1330 "xmltok_impl.c"
        var $69=$end_addr; //@line 1330 "xmltok_impl.c"
        var $70=($68)==($69); //@line 1330 "xmltok_impl.c"
        if ($70) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1330 "xmltok_impl.c"
      case 17: // $bb17
        $0=-1; //@line 1331 "xmltok_impl.c"
        __label__ = 39; break; //@line 1331 "xmltok_impl.c"
      case 18: // $bb18
        var $71=$ptr_addr; //@line 1332 "xmltok_impl.c"
        var $72=$71; //@line 1332 "xmltok_impl.c"
        var $73=HEAP[$72]; //@line 1332 "xmltok_impl.c"
        var $74=($73)==0; //@line 1332 "xmltok_impl.c"
        if ($74) { __label__ = 19; break; } else { __label__ = 37; break; } //@line 1332 "xmltok_impl.c"
      case 19: // $bb19
        var $75=$ptr_addr; //@line 1332 "xmltok_impl.c"
        var $76=$75+1; //@line 1332 "xmltok_impl.c"
        var $77=HEAP[$76]; //@line 1332 "xmltok_impl.c"
        var $78=($77)==33; //@line 1332 "xmltok_impl.c"
        if ($78) { __label__ = 20; break; } else { __label__ = 37; break; } //@line 1332 "xmltok_impl.c"
      case 20: // $bb20
        var $79=$ptr_addr; //@line 1333 "xmltok_impl.c"
        var $80=$79+2; //@line 1333 "xmltok_impl.c"
        $ptr_addr=$80; //@line 1333 "xmltok_impl.c"
        var $81=$ptr_addr; //@line 1333 "xmltok_impl.c"
        var $82=$end_addr; //@line 1333 "xmltok_impl.c"
        var $83=($81)==($82); //@line 1333 "xmltok_impl.c"
        if ($83) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1333 "xmltok_impl.c"
      case 21: // $bb21
        $0=-1; //@line 1334 "xmltok_impl.c"
        __label__ = 39; break; //@line 1334 "xmltok_impl.c"
      case 22: // $bb22
        var $84=$ptr_addr; //@line 1335 "xmltok_impl.c"
        var $85=$84; //@line 1335 "xmltok_impl.c"
        var $86=HEAP[$85]; //@line 1335 "xmltok_impl.c"
        var $87=($86)==0; //@line 1335 "xmltok_impl.c"
        if ($87) { __label__ = 23; break; } else { __label__ = 37; break; } //@line 1335 "xmltok_impl.c"
      case 23: // $bb23
        var $88=$ptr_addr; //@line 1335 "xmltok_impl.c"
        var $89=$88+1; //@line 1335 "xmltok_impl.c"
        var $90=HEAP[$89]; //@line 1335 "xmltok_impl.c"
        var $91=($90)==91; //@line 1335 "xmltok_impl.c"
        if ($91) { __label__ = 24; break; } else { __label__ = 37; break; } //@line 1335 "xmltok_impl.c"
      case 24: // $bb24
        var $92=$level; //@line 1336 "xmltok_impl.c"
        var $93=($92) + 1; //@line 1336 "xmltok_impl.c"
        $level=$93; //@line 1336 "xmltok_impl.c"
        var $94=$ptr_addr; //@line 1337 "xmltok_impl.c"
        var $95=$94+2; //@line 1337 "xmltok_impl.c"
        $ptr_addr=$95; //@line 1337 "xmltok_impl.c"
        __label__ = 37; break; //@line 1337 "xmltok_impl.c"
      case 25: // $bb26
        var $96=$ptr_addr; //@line 1342 "xmltok_impl.c"
        var $97=$96+2; //@line 1342 "xmltok_impl.c"
        $ptr_addr=$97; //@line 1342 "xmltok_impl.c"
        var $98=$ptr_addr; //@line 1342 "xmltok_impl.c"
        var $99=$end_addr; //@line 1342 "xmltok_impl.c"
        var $100=($98)==($99); //@line 1342 "xmltok_impl.c"
        if ($100) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1342 "xmltok_impl.c"
      case 26: // $bb27
        $0=-1; //@line 1343 "xmltok_impl.c"
        __label__ = 39; break; //@line 1343 "xmltok_impl.c"
      case 27: // $bb28
        var $101=$ptr_addr; //@line 1344 "xmltok_impl.c"
        var $102=$101; //@line 1344 "xmltok_impl.c"
        var $103=HEAP[$102]; //@line 1344 "xmltok_impl.c"
        var $104=($103)==0; //@line 1344 "xmltok_impl.c"
        if ($104) { __label__ = 28; break; } else { __label__ = 37; break; } //@line 1344 "xmltok_impl.c"
      case 28: // $bb29
        var $105=$ptr_addr; //@line 1344 "xmltok_impl.c"
        var $106=$105+1; //@line 1344 "xmltok_impl.c"
        var $107=HEAP[$106]; //@line 1344 "xmltok_impl.c"
        var $108=($107)==93; //@line 1344 "xmltok_impl.c"
        if ($108) { __label__ = 29; break; } else { __label__ = 37; break; } //@line 1344 "xmltok_impl.c"
      case 29: // $bb30
        var $109=$ptr_addr; //@line 1345 "xmltok_impl.c"
        var $110=$109+2; //@line 1345 "xmltok_impl.c"
        $ptr_addr=$110; //@line 1345 "xmltok_impl.c"
        var $111=$ptr_addr; //@line 1345 "xmltok_impl.c"
        var $112=$end_addr; //@line 1345 "xmltok_impl.c"
        var $113=($111)==($112); //@line 1345 "xmltok_impl.c"
        if ($113) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1345 "xmltok_impl.c"
      case 30: // $bb31
        $0=-1; //@line 1346 "xmltok_impl.c"
        __label__ = 39; break; //@line 1346 "xmltok_impl.c"
      case 31: // $bb32
        var $114=$ptr_addr; //@line 1347 "xmltok_impl.c"
        var $115=$114; //@line 1347 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 1347 "xmltok_impl.c"
        var $117=($116)==0; //@line 1347 "xmltok_impl.c"
        if ($117) { __label__ = 32; break; } else { __label__ = 37; break; } //@line 1347 "xmltok_impl.c"
      case 32: // $bb33
        var $118=$ptr_addr; //@line 1347 "xmltok_impl.c"
        var $119=$118+1; //@line 1347 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 1347 "xmltok_impl.c"
        var $121=($120)==62; //@line 1347 "xmltok_impl.c"
        if ($121) { __label__ = 33; break; } else { __label__ = 37; break; } //@line 1347 "xmltok_impl.c"
      case 33: // $bb34
        var $122=$ptr_addr; //@line 1348 "xmltok_impl.c"
        var $123=$122+2; //@line 1348 "xmltok_impl.c"
        $ptr_addr=$123; //@line 1348 "xmltok_impl.c"
        var $124=$level; //@line 1349 "xmltok_impl.c"
        var $125=($124)==0; //@line 1349 "xmltok_impl.c"
        if ($125) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1349 "xmltok_impl.c"
      case 34: // $bb35
        var $126=$nextTokPtr_addr; //@line 1350 "xmltok_impl.c"
        var $127=$ptr_addr; //@line 1350 "xmltok_impl.c"
        HEAP[$126]=$127; //@line 1350 "xmltok_impl.c"
        $0=42; //@line 1351 "xmltok_impl.c"
        __label__ = 39; break; //@line 1351 "xmltok_impl.c"
      case 35: // $bb36
        var $128=$level; //@line 1353 "xmltok_impl.c"
        var $129=($128) - 1; //@line 1353 "xmltok_impl.c"
        $level=$129; //@line 1353 "xmltok_impl.c"
        __label__ = 37; break; //@line 1353 "xmltok_impl.c"
      case 36: // $bb38
        var $130=$ptr_addr; //@line 1358 "xmltok_impl.c"
        var $131=$130+2; //@line 1358 "xmltok_impl.c"
        $ptr_addr=$131; //@line 1358 "xmltok_impl.c"
        __label__ = 37; break; //@line 1358 "xmltok_impl.c"
      case 37: // $bb39
        var $132=$ptr_addr; //@line 1326 "xmltok_impl.c"
        var $133=$end_addr; //@line 1326 "xmltok_impl.c"
        var $134=($132)!=($133); //@line 1326 "xmltok_impl.c"
        if ($134) { __label__ = 2; break; } else { __label__ = 38; break; } //@line 1326 "xmltok_impl.c"
      case 38: // $bb40
        $0=-1; //@line 1362 "xmltok_impl.c"
        __label__ = 39; break; //@line 1362 "xmltok_impl.c"
      case 39: // $bb41
        var $135=$0; //@line 1328 "xmltok_impl.c"
        $retval=$135; //@line 1328 "xmltok_impl.c"
        var $retval42=$retval; //@line 1328 "xmltok_impl.c"
        ;
        return $retval42; //@line 1328 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_isPublicId($enc, $ptr, $end, $badPtr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $badPtr_addr;
        var $retval;
        var $iftmp_1359;
        var $0;
        var $iftmp_1357;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $badPtr_addr=$badPtr;
        var $1=$ptr_addr; //@line 1371 "xmltok_impl.c"
        var $2=$1+2; //@line 1371 "xmltok_impl.c"
        $ptr_addr=$2; //@line 1371 "xmltok_impl.c"
        var $3=$end_addr; //@line 1372 "xmltok_impl.c"
        var $4=$3+-2; //@line 1372 "xmltok_impl.c"
        $end_addr=$4; //@line 1372 "xmltok_impl.c"
        __label__ = 15; break; //@line 1372 "xmltok_impl.c"
      case 1: // $bb
        var $5=$ptr_addr; //@line 1374 "xmltok_impl.c"
        var $6=$5; //@line 1374 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1374 "xmltok_impl.c"
        var $8=($7)==0; //@line 1374 "xmltok_impl.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1374 "xmltok_impl.c"
      case 2: // $bb1
        var $9=$enc_addr; //@line 1374 "xmltok_impl.c"
        var $10=$9; //@line 1374 "xmltok_impl.c"
        var $11=$ptr_addr; //@line 1374 "xmltok_impl.c"
        var $12=$11+1; //@line 1374 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1374 "xmltok_impl.c"
        var $14=($13); //@line 1374 "xmltok_impl.c"
        var $15=$10+76; //@line 1374 "xmltok_impl.c"
        var $16=$15+$14; //@line 1374 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 1374 "xmltok_impl.c"
        var $18=($17); //@line 1374 "xmltok_impl.c"
        $iftmp_1357=$18; //@line 1374 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1374 "xmltok_impl.c"
      case 3: // $bb2
        var $19=$ptr_addr; //@line 1374 "xmltok_impl.c"
        var $20=$19+1; //@line 1374 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1374 "xmltok_impl.c"
        var $22=($21); //@line 1374 "xmltok_impl.c"
        var $23=$ptr_addr; //@line 1374 "xmltok_impl.c"
        var $24=$23; //@line 1374 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 1374 "xmltok_impl.c"
        var $26=($25); //@line 1374 "xmltok_impl.c"
        var $27=((($26)) & 255); //@line 1374 "xmltok_impl.c"
        var $28=((($22)) & 255); //@line 1374 "xmltok_impl.c"
        var $29=_unicode_byte_type($27, $28); //@line 1374 "xmltok_impl.c"
        $iftmp_1357=$29; //@line 1374 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1374 "xmltok_impl.c"
      case 4: // $bb3
        var $30=__lastLabel__ == 3 ? $29 : ($18);
        if ($30 == 9) {
          __label__ = 14; break;
        }
        else if ($30 == 10) {
          __label__ = 14; break;
        }
        else if ($30 == 13) {
          __label__ = 14; break;
        }
        else if ($30 == 14) {
          __label__ = 14; break;
        }
        else if ($30 == 15) {
          __label__ = 14; break;
        }
        else if ($30 == 16) {
          __label__ = 14; break;
        }
        else if ($30 == 17) {
          __label__ = 14; break;
        }
        else if ($30 == 18) {
          __label__ = 14; break;
        }
        else if ($30 == 19) {
          __label__ = 14; break;
        }
        else if ($30 == 21) {
          __label__ = 5; break;
        }
        else if ($30 == 22) {
          __label__ = 8; break;
        }
        else if ($30 == 23) {
          __label__ = 14; break;
        }
        else if ($30 == 24) {
          __label__ = 14; break;
        }
        else if ($30 == 25) {
          __label__ = 14; break;
        }
        else if ($30 == 26) {
          __label__ = 8; break;
        }
        else if ($30 == 27) {
          __label__ = 14; break;
        }
        else if ($30 == 30) {
          __label__ = 14; break;
        }
        else if ($30 == 31) {
          __label__ = 14; break;
        }
        else if ($30 == 32) {
          __label__ = 14; break;
        }
        else if ($30 == 33) {
          __label__ = 14; break;
        }
        else if ($30 == 34) {
          __label__ = 14; break;
        }
        else if ($30 == 35) {
          __label__ = 14; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 5: // $bb5
        var $31=$ptr_addr; //@line 1398 "xmltok_impl.c"
        var $32=$31; //@line 1398 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 1398 "xmltok_impl.c"
        var $34=($33)==0; //@line 1398 "xmltok_impl.c"
        if ($34) { __label__ = 6; break; } else { __label__ = 14; break; } //@line 1398 "xmltok_impl.c"
      case 6: // $bb6
        var $35=$ptr_addr; //@line 1398 "xmltok_impl.c"
        var $36=$35+1; //@line 1398 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 1398 "xmltok_impl.c"
        var $38=($37)==9; //@line 1398 "xmltok_impl.c"
        if ($38) { __label__ = 7; break; } else { __label__ = 14; break; } //@line 1398 "xmltok_impl.c"
      case 7: // $bb7
        var $39=$badPtr_addr; //@line 1399 "xmltok_impl.c"
        var $40=$ptr_addr; //@line 1399 "xmltok_impl.c"
        HEAP[$39]=$40; //@line 1399 "xmltok_impl.c"
        $0=0; //@line 1400 "xmltok_impl.c"
        __label__ = 17; break; //@line 1400 "xmltok_impl.c"
      case 8: // $bb9
        var $41=$ptr_addr; //@line 1405 "xmltok_impl.c"
        var $42=$41; //@line 1405 "xmltok_impl.c"
        var $43=HEAP[$42]; //@line 1405 "xmltok_impl.c"
        var $44=($43)==0; //@line 1405 "xmltok_impl.c"
        if ($44) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1405 "xmltok_impl.c"
      case 9: // $bb10
        var $45=$ptr_addr; //@line 1405 "xmltok_impl.c"
        var $46=$45+1; //@line 1405 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 1405 "xmltok_impl.c"
        var $48=($47); //@line 1405 "xmltok_impl.c"
        var $49=($48) & -128; //@line 1405 "xmltok_impl.c"
        var $50=($49)==0; //@line 1405 "xmltok_impl.c"
        if ($50) { __label__ = 14; break; } else { __label__ = 10; break; } //@line 1405 "xmltok_impl.c"
      case 10: // $bb11
        var $51=$ptr_addr; //@line 1408 "xmltok_impl.c"
        var $52=$51; //@line 1408 "xmltok_impl.c"
        var $53=HEAP[$52]; //@line 1408 "xmltok_impl.c"
        var $54=($53)==0; //@line 1408 "xmltok_impl.c"
        if ($54) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 1408 "xmltok_impl.c"
      case 11: // $bb14_thread
        $iftmp_1359=-1; //@line 1408 "xmltok_impl.c"
        __label__ = 13; break;
      case 12: // $bb14
        var $55=$ptr_addr; //@line 1408 "xmltok_impl.c"
        var $56=$55+1; //@line 1408 "xmltok_impl.c"
        var $57=HEAP[$56]; //@line 1408 "xmltok_impl.c"
        var $58=($57); //@line 1408 "xmltok_impl.c"
        $iftmp_1359=$58; //@line 1408 "xmltok_impl.c"
        if ($58 == 36) {
          __label__ = 14; break;
        }
        else if ($58 == 64) {
          __label__ = 14; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 13: // $bb16
        var $59=$badPtr_addr; //@line 1413 "xmltok_impl.c"
        var $60=$ptr_addr; //@line 1413 "xmltok_impl.c"
        HEAP[$59]=$60; //@line 1413 "xmltok_impl.c"
        $0=0; //@line 1414 "xmltok_impl.c"
        __label__ = 17; break; //@line 1414 "xmltok_impl.c"
      case 14: // $bb17
        var $61=$ptr_addr; //@line 1373 "xmltok_impl.c"
        var $62=$61+2; //@line 1373 "xmltok_impl.c"
        $ptr_addr=$62; //@line 1373 "xmltok_impl.c"
        __label__ = 15; break; //@line 1373 "xmltok_impl.c"
      case 15: // $bb18
        var $63=$ptr_addr; //@line 1373 "xmltok_impl.c"
        var $64=$end_addr; //@line 1373 "xmltok_impl.c"
        var $65=($63)!=($64); //@line 1373 "xmltok_impl.c"
        if ($65) { __label__ = 1; break; } else { __label__ = 16; break; } //@line 1373 "xmltok_impl.c"
      case 16: // $bb19
        $0=1; //@line 1419 "xmltok_impl.c"
        __label__ = 17; break; //@line 1419 "xmltok_impl.c"
      case 17: // $bb20
        var $66=$0; //@line 1400 "xmltok_impl.c"
        $retval=$66; //@line 1400 "xmltok_impl.c"
        var $retval21=$retval; //@line 1400 "xmltok_impl.c"
        ;
        return $retval21; //@line 1400 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_getAtts($enc, $ptr, $attsMax, $atts) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $attsMax_addr;
        var $atts_addr;
        var $retval;
        var $0;
        var $iftmp_1362;
        var $iftmp_1360;
        var $state;
        var $nAtts;
        var $open;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $attsMax_addr=$attsMax;
        $atts_addr=$atts;
        $state=1; //@line 1431 "xmltok_impl.c"
        $nAtts=0; //@line 1432 "xmltok_impl.c"
        $open=0; //@line 1433 "xmltok_impl.c"
        var $1=$ptr_addr; //@line 1436 "xmltok_impl.c"
        var $2=$1+2; //@line 1436 "xmltok_impl.c"
        $ptr_addr=$2; //@line 1436 "xmltok_impl.c"
        __label__ = 1; break; //@line 1436 "xmltok_impl.c"
      case 1: // $bb
        var $3=$ptr_addr; //@line 1437 "xmltok_impl.c"
        var $4=$3; //@line 1437 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1437 "xmltok_impl.c"
        var $6=($5)==0; //@line 1437 "xmltok_impl.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1437 "xmltok_impl.c"
      case 2: // $bb1
        var $7=$enc_addr; //@line 1437 "xmltok_impl.c"
        var $8=$7; //@line 1437 "xmltok_impl.c"
        var $9=$ptr_addr; //@line 1437 "xmltok_impl.c"
        var $10=$9+1; //@line 1437 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 1437 "xmltok_impl.c"
        var $12=($11); //@line 1437 "xmltok_impl.c"
        var $13=$8+76; //@line 1437 "xmltok_impl.c"
        var $14=$13+$12; //@line 1437 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1437 "xmltok_impl.c"
        var $16=($15); //@line 1437 "xmltok_impl.c"
        $iftmp_1360=$16; //@line 1437 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1437 "xmltok_impl.c"
      case 3: // $bb2
        var $17=$ptr_addr; //@line 1437 "xmltok_impl.c"
        var $18=$17+1; //@line 1437 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1437 "xmltok_impl.c"
        var $20=($19); //@line 1437 "xmltok_impl.c"
        var $21=$ptr_addr; //@line 1437 "xmltok_impl.c"
        var $22=$21; //@line 1437 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 1437 "xmltok_impl.c"
        var $24=($23); //@line 1437 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 1437 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 1437 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 1437 "xmltok_impl.c"
        $iftmp_1360=$27; //@line 1437 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1437 "xmltok_impl.c"
      case 4: // $bb3
        var $28=__lastLabel__ == 3 ? $27 : ($16);
        if ($28 == 3) {
          __label__ = 40; break;
        }
        else if ($28 == 5) {
          __label__ = 5; break;
        }
        else if ($28 == 6) {
          __label__ = 10; break;
        }
        else if ($28 == 7) {
          __label__ = 15; break;
        }
        else if ($28 == 9) {
          __label__ = 57; break;
        }
        else if ($28 == 10) {
          __label__ = 57; break;
        }
        else if ($28 == 11) {
          __label__ = 62; break;
        }
        else if ($28 == 12) {
          __label__ = 24; break;
        }
        else if ($28 == 13) {
          __label__ = 32; break;
        }
        else if ($28 == 17) {
          __label__ = 62; break;
        }
        else if ($28 == 21) {
          __label__ = 42; break;
        }
        else if ($28 == 22) {
          __label__ = 20; break;
        }
        else if ($28 == 24) {
          __label__ = 20; break;
        }
        else if ($28 == 29) {
          __label__ = 20; break;
        }
        else {
        __label__ = 64; break;
        }
        
      case 5: // $bb4
        var $29=$state; //@line 1448 "xmltok_impl.c"
        var $30=($29)==0; //@line 1448 "xmltok_impl.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 1448 "xmltok_impl.c"
      case 6: // $bb5
        var $31=$nAtts; //@line 1448 "xmltok_impl.c"
        var $32=$attsMax_addr; //@line 1448 "xmltok_impl.c"
        var $33=($31) < ($32); //@line 1448 "xmltok_impl.c"
        if ($33) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1448 "xmltok_impl.c"
      case 7: // $bb6
        var $34=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $35=$nAtts; //@line 1448 "xmltok_impl.c"
        var $36=$34+16*$35; //@line 1448 "xmltok_impl.c"
        var $37=$36; //@line 1448 "xmltok_impl.c"
        var $38=$ptr_addr; //@line 1448 "xmltok_impl.c"
        HEAP[$37]=$38; //@line 1448 "xmltok_impl.c"
        var $39=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $40=$nAtts; //@line 1448 "xmltok_impl.c"
        var $41=$39+16*$40; //@line 1448 "xmltok_impl.c"
        var $42=$41+12; //@line 1448 "xmltok_impl.c"
        HEAP[$42]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 8; break; //@line 1448 "xmltok_impl.c"
      case 8: // $bb7
        $state=1; //@line 1448 "xmltok_impl.c"
        __label__ = 9; break; //@line 1448 "xmltok_impl.c"
      case 9: // $bb8
        var $43=$ptr_addr; //@line 1448 "xmltok_impl.c"
        var $44=$43; //@line 1448 "xmltok_impl.c"
        $ptr_addr=$44; //@line 1448 "xmltok_impl.c"
        __label__ = 64; break; //@line 1448 "xmltok_impl.c"
      case 10: // $bb9
        var $45=$state; //@line 1448 "xmltok_impl.c"
        var $46=($45)==0; //@line 1448 "xmltok_impl.c"
        if ($46) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 1448 "xmltok_impl.c"
      case 11: // $bb10
        var $47=$nAtts; //@line 1448 "xmltok_impl.c"
        var $48=$attsMax_addr; //@line 1448 "xmltok_impl.c"
        var $49=($47) < ($48); //@line 1448 "xmltok_impl.c"
        if ($49) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1448 "xmltok_impl.c"
      case 12: // $bb11
        var $50=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $51=$nAtts; //@line 1448 "xmltok_impl.c"
        var $52=$50+16*$51; //@line 1448 "xmltok_impl.c"
        var $53=$52; //@line 1448 "xmltok_impl.c"
        var $54=$ptr_addr; //@line 1448 "xmltok_impl.c"
        HEAP[$53]=$54; //@line 1448 "xmltok_impl.c"
        var $55=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $56=$nAtts; //@line 1448 "xmltok_impl.c"
        var $57=$55+16*$56; //@line 1448 "xmltok_impl.c"
        var $58=$57+12; //@line 1448 "xmltok_impl.c"
        HEAP[$58]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 13; break; //@line 1448 "xmltok_impl.c"
      case 13: // $bb12
        $state=1; //@line 1448 "xmltok_impl.c"
        __label__ = 14; break; //@line 1448 "xmltok_impl.c"
      case 14: // $bb13
        var $59=$ptr_addr; //@line 1448 "xmltok_impl.c"
        var $60=$59+1; //@line 1448 "xmltok_impl.c"
        $ptr_addr=$60; //@line 1448 "xmltok_impl.c"
        __label__ = 64; break; //@line 1448 "xmltok_impl.c"
      case 15: // $bb14
        var $61=$state; //@line 1448 "xmltok_impl.c"
        var $62=($61)==0; //@line 1448 "xmltok_impl.c"
        if ($62) { __label__ = 16; break; } else { __label__ = 19; break; } //@line 1448 "xmltok_impl.c"
      case 16: // $bb15
        var $63=$nAtts; //@line 1448 "xmltok_impl.c"
        var $64=$attsMax_addr; //@line 1448 "xmltok_impl.c"
        var $65=($63) < ($64); //@line 1448 "xmltok_impl.c"
        if ($65) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1448 "xmltok_impl.c"
      case 17: // $bb16
        var $66=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $67=$nAtts; //@line 1448 "xmltok_impl.c"
        var $68=$66+16*$67; //@line 1448 "xmltok_impl.c"
        var $69=$68; //@line 1448 "xmltok_impl.c"
        var $70=$ptr_addr; //@line 1448 "xmltok_impl.c"
        HEAP[$69]=$70; //@line 1448 "xmltok_impl.c"
        var $71=$atts_addr; //@line 1448 "xmltok_impl.c"
        var $72=$nAtts; //@line 1448 "xmltok_impl.c"
        var $73=$71+16*$72; //@line 1448 "xmltok_impl.c"
        var $74=$73+12; //@line 1448 "xmltok_impl.c"
        HEAP[$74]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 18; break; //@line 1448 "xmltok_impl.c"
      case 18: // $bb17
        $state=1; //@line 1448 "xmltok_impl.c"
        __label__ = 19; break; //@line 1448 "xmltok_impl.c"
      case 19: // $bb18
        var $75=$ptr_addr; //@line 1448 "xmltok_impl.c"
        var $76=$75+2; //@line 1448 "xmltok_impl.c"
        $ptr_addr=$76; //@line 1448 "xmltok_impl.c"
        __label__ = 64; break; //@line 1448 "xmltok_impl.c"
      case 20: // $bb19
        var $77=$state; //@line 1453 "xmltok_impl.c"
        var $78=($77)==0; //@line 1453 "xmltok_impl.c"
        if ($78) { __label__ = 21; break; } else { __label__ = 64; break; } //@line 1453 "xmltok_impl.c"
      case 21: // $bb20
        var $79=$nAtts; //@line 1453 "xmltok_impl.c"
        var $80=$attsMax_addr; //@line 1453 "xmltok_impl.c"
        var $81=($79) < ($80); //@line 1453 "xmltok_impl.c"
        if ($81) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1453 "xmltok_impl.c"
      case 22: // $bb21
        var $82=$atts_addr; //@line 1453 "xmltok_impl.c"
        var $83=$nAtts; //@line 1453 "xmltok_impl.c"
        var $84=$82+16*$83; //@line 1453 "xmltok_impl.c"
        var $85=$84; //@line 1453 "xmltok_impl.c"
        var $86=$ptr_addr; //@line 1453 "xmltok_impl.c"
        HEAP[$85]=$86; //@line 1453 "xmltok_impl.c"
        var $87=$atts_addr; //@line 1453 "xmltok_impl.c"
        var $88=$nAtts; //@line 1453 "xmltok_impl.c"
        var $89=$87+16*$88; //@line 1453 "xmltok_impl.c"
        var $90=$89+12; //@line 1453 "xmltok_impl.c"
        HEAP[$90]=1; //@line 1453 "xmltok_impl.c"
        __label__ = 23; break; //@line 1453 "xmltok_impl.c"
      case 23: // $bb22
        $state=1; //@line 1453 "xmltok_impl.c"
        __label__ = 64; break; //@line 1453 "xmltok_impl.c"
      case 24: // $bb24
        var $91=$state; //@line 1457 "xmltok_impl.c"
        var $92=($91)!=2; //@line 1457 "xmltok_impl.c"
        if ($92) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 1457 "xmltok_impl.c"
      case 25: // $bb25
        var $93=$nAtts; //@line 1458 "xmltok_impl.c"
        var $94=$attsMax_addr; //@line 1458 "xmltok_impl.c"
        var $95=($93) < ($94); //@line 1458 "xmltok_impl.c"
        if ($95) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1458 "xmltok_impl.c"
      case 26: // $bb26
        var $96=$atts_addr; //@line 1459 "xmltok_impl.c"
        var $97=$nAtts; //@line 1459 "xmltok_impl.c"
        var $98=$96+16*$97; //@line 1459 "xmltok_impl.c"
        var $99=$ptr_addr; //@line 1459 "xmltok_impl.c"
        var $100=$99+2; //@line 1459 "xmltok_impl.c"
        var $101=$98+4; //@line 1459 "xmltok_impl.c"
        HEAP[$101]=$100; //@line 1459 "xmltok_impl.c"
        __label__ = 27; break; //@line 1459 "xmltok_impl.c"
      case 27: // $bb27
        $state=2; //@line 1460 "xmltok_impl.c"
        $open=12; //@line 1461 "xmltok_impl.c"
        __label__ = 64; break; //@line 1461 "xmltok_impl.c"
      case 28: // $bb28
        var $102=$open; //@line 1463 "xmltok_impl.c"
        var $103=($102)==12; //@line 1463 "xmltok_impl.c"
        if ($103) { __label__ = 29; break; } else { __label__ = 64; break; } //@line 1463 "xmltok_impl.c"
      case 29: // $bb29
        $state=0; //@line 1464 "xmltok_impl.c"
        var $104=$nAtts; //@line 1465 "xmltok_impl.c"
        var $105=$attsMax_addr; //@line 1465 "xmltok_impl.c"
        var $106=($104) < ($105); //@line 1465 "xmltok_impl.c"
        if ($106) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1465 "xmltok_impl.c"
      case 30: // $bb30
        var $107=$atts_addr; //@line 1466 "xmltok_impl.c"
        var $108=$nAtts; //@line 1466 "xmltok_impl.c"
        var $109=$107+16*$108; //@line 1466 "xmltok_impl.c"
        var $110=$109+8; //@line 1466 "xmltok_impl.c"
        var $111=$ptr_addr; //@line 1466 "xmltok_impl.c"
        HEAP[$110]=$111; //@line 1466 "xmltok_impl.c"
        __label__ = 31; break; //@line 1466 "xmltok_impl.c"
      case 31: // $bb31
        var $112=$nAtts; //@line 1467 "xmltok_impl.c"
        var $113=($112) + 1; //@line 1467 "xmltok_impl.c"
        $nAtts=$113; //@line 1467 "xmltok_impl.c"
        __label__ = 64; break; //@line 1467 "xmltok_impl.c"
      case 32: // $bb33
        var $114=$state; //@line 1471 "xmltok_impl.c"
        var $115=($114)!=2; //@line 1471 "xmltok_impl.c"
        if ($115) { __label__ = 33; break; } else { __label__ = 36; break; } //@line 1471 "xmltok_impl.c"
      case 33: // $bb34
        var $116=$nAtts; //@line 1472 "xmltok_impl.c"
        var $117=$attsMax_addr; //@line 1472 "xmltok_impl.c"
        var $118=($116) < ($117); //@line 1472 "xmltok_impl.c"
        if ($118) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1472 "xmltok_impl.c"
      case 34: // $bb35
        var $119=$atts_addr; //@line 1473 "xmltok_impl.c"
        var $120=$nAtts; //@line 1473 "xmltok_impl.c"
        var $121=$119+16*$120; //@line 1473 "xmltok_impl.c"
        var $122=$ptr_addr; //@line 1473 "xmltok_impl.c"
        var $123=$122+2; //@line 1473 "xmltok_impl.c"
        var $124=$121+4; //@line 1473 "xmltok_impl.c"
        HEAP[$124]=$123; //@line 1473 "xmltok_impl.c"
        __label__ = 35; break; //@line 1473 "xmltok_impl.c"
      case 35: // $bb36
        $state=2; //@line 1474 "xmltok_impl.c"
        $open=13; //@line 1475 "xmltok_impl.c"
        __label__ = 64; break; //@line 1475 "xmltok_impl.c"
      case 36: // $bb37
        var $125=$open; //@line 1477 "xmltok_impl.c"
        var $126=($125)==13; //@line 1477 "xmltok_impl.c"
        if ($126) { __label__ = 37; break; } else { __label__ = 64; break; } //@line 1477 "xmltok_impl.c"
      case 37: // $bb38
        $state=0; //@line 1478 "xmltok_impl.c"
        var $127=$nAtts; //@line 1479 "xmltok_impl.c"
        var $128=$attsMax_addr; //@line 1479 "xmltok_impl.c"
        var $129=($127) < ($128); //@line 1479 "xmltok_impl.c"
        if ($129) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1479 "xmltok_impl.c"
      case 38: // $bb39
        var $130=$atts_addr; //@line 1480 "xmltok_impl.c"
        var $131=$nAtts; //@line 1480 "xmltok_impl.c"
        var $132=$130+16*$131; //@line 1480 "xmltok_impl.c"
        var $133=$132+8; //@line 1480 "xmltok_impl.c"
        var $134=$ptr_addr; //@line 1480 "xmltok_impl.c"
        HEAP[$133]=$134; //@line 1480 "xmltok_impl.c"
        __label__ = 39; break; //@line 1480 "xmltok_impl.c"
      case 39: // $bb40
        var $135=$nAtts; //@line 1481 "xmltok_impl.c"
        var $136=($135) + 1; //@line 1481 "xmltok_impl.c"
        $nAtts=$136; //@line 1481 "xmltok_impl.c"
        __label__ = 64; break; //@line 1481 "xmltok_impl.c"
      case 40: // $bb42
        var $137=$nAtts; //@line 1485 "xmltok_impl.c"
        var $138=$attsMax_addr; //@line 1485 "xmltok_impl.c"
        var $139=($137) < ($138); //@line 1485 "xmltok_impl.c"
        if ($139) { __label__ = 41; break; } else { __label__ = 64; break; } //@line 1485 "xmltok_impl.c"
      case 41: // $bb43
        var $140=$atts_addr; //@line 1486 "xmltok_impl.c"
        var $141=$nAtts; //@line 1486 "xmltok_impl.c"
        var $142=$140+16*$141; //@line 1486 "xmltok_impl.c"
        var $143=$142+12; //@line 1486 "xmltok_impl.c"
        HEAP[$143]=0; //@line 1486 "xmltok_impl.c"
        __label__ = 64; break; //@line 1486 "xmltok_impl.c"
      case 42: // $bb45
        var $144=$state; //@line 1489 "xmltok_impl.c"
        var $145=($144)==1; //@line 1489 "xmltok_impl.c"
        if ($145) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 1489 "xmltok_impl.c"
      case 43: // $bb46
        $state=0; //@line 1490 "xmltok_impl.c"
        __label__ = 64; break; //@line 1490 "xmltok_impl.c"
      case 44: // $bb47
        var $146=$state; //@line 1491 "xmltok_impl.c"
        var $147=($146)==2; //@line 1491 "xmltok_impl.c"
        if ($147) { __label__ = 45; break; } else { __label__ = 64; break; } //@line 1491 "xmltok_impl.c"
      case 45: // $bb48
        var $148=$nAtts; //@line 1491 "xmltok_impl.c"
        var $149=$attsMax_addr; //@line 1491 "xmltok_impl.c"
        var $150=($148) < ($149); //@line 1491 "xmltok_impl.c"
        if ($150) { __label__ = 46; break; } else { __label__ = 64; break; } //@line 1491 "xmltok_impl.c"
      case 46: // $bb49
        var $151=$atts_addr; //@line 1491 "xmltok_impl.c"
        var $152=$nAtts; //@line 1491 "xmltok_impl.c"
        var $153=$151+16*$152; //@line 1491 "xmltok_impl.c"
        var $154=$153+12; //@line 1491 "xmltok_impl.c"
        var $155=HEAP[$154]; //@line 1491 "xmltok_impl.c"
        var $156=($155)!=0; //@line 1491 "xmltok_impl.c"
        if ($156) { __label__ = 47; break; } else { __label__ = 64; break; } //@line 1491 "xmltok_impl.c"
      case 47: // $bb50
        var $157=$atts_addr; //@line 1491 "xmltok_impl.c"
        var $158=$nAtts; //@line 1491 "xmltok_impl.c"
        var $159=$157+16*$158; //@line 1491 "xmltok_impl.c"
        var $160=$159+4; //@line 1491 "xmltok_impl.c"
        var $161=HEAP[$160]; //@line 1491 "xmltok_impl.c"
        var $162=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $163=($161)==($162); //@line 1491 "xmltok_impl.c"
        if ($163) { __label__ = 56; break; } else { __label__ = 48; break; } //@line 1491 "xmltok_impl.c"
      case 48: // $bb51
        var $164=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $165=$164; //@line 1491 "xmltok_impl.c"
        var $166=HEAP[$165]; //@line 1491 "xmltok_impl.c"
        var $167=($166)!=0; //@line 1491 "xmltok_impl.c"
        if ($167) { __label__ = 56; break; } else { __label__ = 49; break; } //@line 1491 "xmltok_impl.c"
      case 49: // $bb52
        var $168=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $169=$168+1; //@line 1491 "xmltok_impl.c"
        var $170=HEAP[$169]; //@line 1491 "xmltok_impl.c"
        var $171=($170)!=32; //@line 1491 "xmltok_impl.c"
        if ($171) { __label__ = 56; break; } else { __label__ = 50; break; } //@line 1491 "xmltok_impl.c"
      case 50: // $bb53
        var $172=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $173=$172+2; //@line 1491 "xmltok_impl.c"
        var $174=$173; //@line 1491 "xmltok_impl.c"
        var $175=HEAP[$174]; //@line 1491 "xmltok_impl.c"
        var $176=($175)!=0; //@line 1491 "xmltok_impl.c"
        if ($176) { __label__ = 52; break; } else { __label__ = 51; break; } //@line 1491 "xmltok_impl.c"
      case 51: // $bb54
        var $177=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $178=$177+2; //@line 1491 "xmltok_impl.c"
        var $179=$178+1; //@line 1491 "xmltok_impl.c"
        var $180=HEAP[$179]; //@line 1491 "xmltok_impl.c"
        var $181=($180)==32; //@line 1491 "xmltok_impl.c"
        if ($181) { __label__ = 56; break; } else { __label__ = 52; break; } //@line 1491 "xmltok_impl.c"
      case 52: // $bb55
        var $182=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $183=$182+2; //@line 1491 "xmltok_impl.c"
        var $184=$183; //@line 1491 "xmltok_impl.c"
        var $185=HEAP[$184]; //@line 1491 "xmltok_impl.c"
        var $186=($185)==0; //@line 1491 "xmltok_impl.c"
        if ($186) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 1491 "xmltok_impl.c"
      case 53: // $bb56
        var $187=$enc_addr; //@line 1491 "xmltok_impl.c"
        var $188=$187; //@line 1491 "xmltok_impl.c"
        var $189=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $190=$189+2; //@line 1491 "xmltok_impl.c"
        var $191=$190+1; //@line 1491 "xmltok_impl.c"
        var $192=HEAP[$191]; //@line 1491 "xmltok_impl.c"
        var $193=($192); //@line 1491 "xmltok_impl.c"
        var $194=$188+76; //@line 1491 "xmltok_impl.c"
        var $195=$194+$193; //@line 1491 "xmltok_impl.c"
        var $196=HEAP[$195]; //@line 1491 "xmltok_impl.c"
        var $197=($196); //@line 1491 "xmltok_impl.c"
        $iftmp_1362=$197; //@line 1491 "xmltok_impl.c"
        __label__ = 55; break; //@line 1491 "xmltok_impl.c"
      case 54: // $bb57
        var $198=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $199=$198+2; //@line 1491 "xmltok_impl.c"
        var $200=$199+1; //@line 1491 "xmltok_impl.c"
        var $201=HEAP[$200]; //@line 1491 "xmltok_impl.c"
        var $202=($201); //@line 1491 "xmltok_impl.c"
        var $203=$ptr_addr; //@line 1491 "xmltok_impl.c"
        var $204=$203+2; //@line 1491 "xmltok_impl.c"
        var $205=$204; //@line 1491 "xmltok_impl.c"
        var $206=HEAP[$205]; //@line 1491 "xmltok_impl.c"
        var $207=($206); //@line 1491 "xmltok_impl.c"
        var $208=((($207)) & 255); //@line 1491 "xmltok_impl.c"
        var $209=((($202)) & 255); //@line 1491 "xmltok_impl.c"
        var $210=_unicode_byte_type($208, $209); //@line 1491 "xmltok_impl.c"
        $iftmp_1362=$210; //@line 1491 "xmltok_impl.c"
        __label__ = 55; break; //@line 1491 "xmltok_impl.c"
      case 55: // $bb58
        var $211=$iftmp_1362; //@line 1491 "xmltok_impl.c"
        var $212=$open; //@line 1491 "xmltok_impl.c"
        var $213=($211)==($212); //@line 1491 "xmltok_impl.c"
        if ($213) { __label__ = 56; break; } else { __label__ = 64; break; } //@line 1491 "xmltok_impl.c"
      case 56: // $bb59
        var $214=$atts_addr; //@line 1498 "xmltok_impl.c"
        var $215=$nAtts; //@line 1498 "xmltok_impl.c"
        var $216=$214+16*$215; //@line 1498 "xmltok_impl.c"
        var $217=$216+12; //@line 1498 "xmltok_impl.c"
        HEAP[$217]=0; //@line 1498 "xmltok_impl.c"
        __label__ = 64; break; //@line 1498 "xmltok_impl.c"
      case 57: // $bb61
        var $218=$state; //@line 1503 "xmltok_impl.c"
        var $219=($218)==1; //@line 1503 "xmltok_impl.c"
        if ($219) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 1503 "xmltok_impl.c"
      case 58: // $bb62
        $state=0; //@line 1504 "xmltok_impl.c"
        __label__ = 64; break; //@line 1504 "xmltok_impl.c"
      case 59: // $bb63
        var $220=$state; //@line 1505 "xmltok_impl.c"
        var $221=($220)==2; //@line 1505 "xmltok_impl.c"
        if ($221) { __label__ = 60; break; } else { __label__ = 64; break; } //@line 1505 "xmltok_impl.c"
      case 60: // $bb64
        var $222=$nAtts; //@line 1505 "xmltok_impl.c"
        var $223=$attsMax_addr; //@line 1505 "xmltok_impl.c"
        var $224=($222) < ($223); //@line 1505 "xmltok_impl.c"
        if ($224) { __label__ = 61; break; } else { __label__ = 64; break; } //@line 1505 "xmltok_impl.c"
      case 61: // $bb65
        var $225=$atts_addr; //@line 1506 "xmltok_impl.c"
        var $226=$nAtts; //@line 1506 "xmltok_impl.c"
        var $227=$225+16*$226; //@line 1506 "xmltok_impl.c"
        var $228=$227+12; //@line 1506 "xmltok_impl.c"
        HEAP[$228]=0; //@line 1506 "xmltok_impl.c"
        __label__ = 64; break; //@line 1506 "xmltok_impl.c"
      case 62: // $bb67
        var $229=$state; //@line 1510 "xmltok_impl.c"
        var $230=($229)!=2; //@line 1510 "xmltok_impl.c"
        if ($230) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 1510 "xmltok_impl.c"
      case 63: // $bb68
        var $231=$nAtts; //@line 1511 "xmltok_impl.c"
        $0=$231; //@line 1511 "xmltok_impl.c"
        var $232=$0; //@line 1511 "xmltok_impl.c"
        $retval=$232; //@line 1511 "xmltok_impl.c"
        var $retval70=$retval; //@line 1436 "xmltok_impl.c"
        ;
        return $retval70; //@line 1436 "xmltok_impl.c"
      case 64: // $bb69
        var $233=$ptr_addr; //@line 1436 "xmltok_impl.c"
        var $234=$233+2; //@line 1436 "xmltok_impl.c"
        $ptr_addr=$234; //@line 1436 "xmltok_impl.c"
        __label__ = 1; break; //@line 1436 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_charRefNumber($enc, $ptr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $retval;
        var $iftmp_1365;
        var $0;
        var $iftmp_1364;
        var $result;
        var $c;
        var $c17;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $result=0; //@line 1523 "xmltok_impl.c"
        var $1=$ptr_addr; //@line 1525 "xmltok_impl.c"
        var $2=$1+4; //@line 1525 "xmltok_impl.c"
        $ptr_addr=$2; //@line 1525 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 1526 "xmltok_impl.c"
        var $4=$3; //@line 1526 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1526 "xmltok_impl.c"
        var $6=($5)!=0; //@line 1526 "xmltok_impl.c"
        if ($6) { __label__ = 21; break; } else { __label__ = 1; break; } //@line 1526 "xmltok_impl.c"
      case 1: // $bb
        var $7=$ptr_addr; //@line 1526 "xmltok_impl.c"
        var $8=$7+1; //@line 1526 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1526 "xmltok_impl.c"
        var $10=($9)!=120; //@line 1526 "xmltok_impl.c"
        if ($10) { __label__ = 21; break; } else { __label__ = 2; break; } //@line 1526 "xmltok_impl.c"
      case 2: // $bb1
        var $11=$ptr_addr; //@line 1527 "xmltok_impl.c"
        var $12=$11+2; //@line 1527 "xmltok_impl.c"
        $ptr_addr=$12; //@line 1527 "xmltok_impl.c"
        __label__ = 13; break; //@line 1527 "xmltok_impl.c"
      case 3: // $bb2
        var $13=$ptr_addr; //@line 1530 "xmltok_impl.c"
        var $14=$13; //@line 1530 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1530 "xmltok_impl.c"
        var $16=($15)==0; //@line 1530 "xmltok_impl.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 1530 "xmltok_impl.c"
      case 4: // $bb5_thread
        $iftmp_1364=-1; //@line 1530 "xmltok_impl.c"
        $c=-1; //@line 1530 "xmltok_impl.c"
        __label__ = 9; break;
      case 5: // $bb5
        var $17=$ptr_addr; //@line 1530 "xmltok_impl.c"
        var $18=$17+1; //@line 1530 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1530 "xmltok_impl.c"
        var $20=($19); //@line 1530 "xmltok_impl.c"
        $iftmp_1364=$20; //@line 1530 "xmltok_impl.c"
        $c=$20; //@line 1530 "xmltok_impl.c"
        if ($20 == 48) {
          __label__ = 6; break;
        }
        else if ($20 == 49) {
          __label__ = 6; break;
        }
        else if ($20 == 50) {
          __label__ = 6; break;
        }
        else if ($20 == 51) {
          __label__ = 6; break;
        }
        else if ($20 == 52) {
          __label__ = 6; break;
        }
        else if ($20 == 53) {
          __label__ = 6; break;
        }
        else if ($20 == 54) {
          __label__ = 6; break;
        }
        else if ($20 == 55) {
          __label__ = 6; break;
        }
        else if ($20 == 56) {
          __label__ = 6; break;
        }
        else if ($20 == 57) {
          __label__ = 6; break;
        }
        else if ($20 == 65) {
          __label__ = 7; break;
        }
        else if ($20 == 66) {
          __label__ = 7; break;
        }
        else if ($20 == 67) {
          __label__ = 7; break;
        }
        else if ($20 == 68) {
          __label__ = 7; break;
        }
        else if ($20 == 69) {
          __label__ = 7; break;
        }
        else if ($20 == 70) {
          __label__ = 7; break;
        }
        else if ($20 == 97) {
          __label__ = 8; break;
        }
        else if ($20 == 98) {
          __label__ = 8; break;
        }
        else if ($20 == 99) {
          __label__ = 8; break;
        }
        else if ($20 == 100) {
          __label__ = 8; break;
        }
        else if ($20 == 101) {
          __label__ = 8; break;
        }
        else if ($20 == 102) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 6: // $bb6
        var $21=$result; //@line 1534 "xmltok_impl.c"
        var $22=($21) << 4; //@line 1534 "xmltok_impl.c"
        $result=$22; //@line 1534 "xmltok_impl.c"
        var $23=$c; //@line 1535 "xmltok_impl.c"
        var $24=($23) - 48; //@line 1535 "xmltok_impl.c"
        var $25=$result; //@line 1535 "xmltok_impl.c"
        var $26=($24) | ($25); //@line 1535 "xmltok_impl.c"
        $result=$26; //@line 1535 "xmltok_impl.c"
        __lastLabel__ = 6; __label__ = 10; break; //@line 1535 "xmltok_impl.c"
      case 7: // $bb7
        var $27=$result; //@line 1539 "xmltok_impl.c"
        var $28=($27) << 4; //@line 1539 "xmltok_impl.c"
        $result=$28; //@line 1539 "xmltok_impl.c"
        var $29=$c; //@line 1540 "xmltok_impl.c"
        var $30=($29) - 55; //@line 1540 "xmltok_impl.c"
        var $31=$result; //@line 1540 "xmltok_impl.c"
        var $32=($30) + ($31); //@line 1540 "xmltok_impl.c"
        $result=$32; //@line 1540 "xmltok_impl.c"
        __lastLabel__ = 7; __label__ = 10; break; //@line 1540 "xmltok_impl.c"
      case 8: // $bb8
        var $33=$result; //@line 1544 "xmltok_impl.c"
        var $34=($33) << 4; //@line 1544 "xmltok_impl.c"
        $result=$34; //@line 1544 "xmltok_impl.c"
        var $35=$c; //@line 1545 "xmltok_impl.c"
        var $36=($35) - 87; //@line 1545 "xmltok_impl.c"
        var $37=$result; //@line 1545 "xmltok_impl.c"
        var $38=($36) + ($37); //@line 1545 "xmltok_impl.c"
        $result=$38; //@line 1545 "xmltok_impl.c"
        __lastLabel__ = 8; __label__ = 10; break; //@line 1545 "xmltok_impl.c"
      case 9: // $bb9thread_pre_split
        var $_pr=$result;
        __lastLabel__ = 9; __label__ = 10; break;
      case 10: // $bb9
        var $39=__lastLabel__ == 9 ? $_pr : (__lastLabel__ == 8 ? $38 : (__lastLabel__ == 7 ? $32 : ($26)));
        var $40=($39) > 1114111; //@line 1548 "xmltok_impl.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1548 "xmltok_impl.c"
      case 11: // $bb10
        $0=-1; //@line 1549 "xmltok_impl.c"
        __label__ = 24; break; //@line 1549 "xmltok_impl.c"
      case 12: // $bb11
        var $41=$ptr_addr; //@line 1529 "xmltok_impl.c"
        var $42=$41+2; //@line 1529 "xmltok_impl.c"
        $ptr_addr=$42; //@line 1529 "xmltok_impl.c"
        __label__ = 13; break; //@line 1529 "xmltok_impl.c"
      case 13: // $bb12
        var $43=$ptr_addr; //@line 1528 "xmltok_impl.c"
        var $44=$43; //@line 1528 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 1528 "xmltok_impl.c"
        var $46=($45)!=0; //@line 1528 "xmltok_impl.c"
        if ($46) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 1528 "xmltok_impl.c"
      case 14: // $bb13
        var $47=$ptr_addr; //@line 1528 "xmltok_impl.c"
        var $48=$47+1; //@line 1528 "xmltok_impl.c"
        var $49=HEAP[$48]; //@line 1528 "xmltok_impl.c"
        var $50=($49)!=59; //@line 1528 "xmltok_impl.c"
        if ($50) { __label__ = 3; break; } else { __label__ = 23; break; } //@line 1528 "xmltok_impl.c"
      case 15: // $bb16
        var $51=$ptr_addr; //@line 1554 "xmltok_impl.c"
        var $52=$51; //@line 1554 "xmltok_impl.c"
        var $53=HEAP[$52]; //@line 1554 "xmltok_impl.c"
        var $54=($53)==0; //@line 1554 "xmltok_impl.c"
        if ($54) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1554 "xmltok_impl.c"
      case 16: // $bb18
        var $55=$ptr_addr; //@line 1554 "xmltok_impl.c"
        var $56=$55+1; //@line 1554 "xmltok_impl.c"
        var $57=HEAP[$56]; //@line 1554 "xmltok_impl.c"
        var $58=($57); //@line 1554 "xmltok_impl.c"
        $iftmp_1365=$58; //@line 1554 "xmltok_impl.c"
        __label__ = 18; break; //@line 1554 "xmltok_impl.c"
      case 17: // $bb19
        $iftmp_1365=-1; //@line 1554 "xmltok_impl.c"
        __label__ = 18; break; //@line 1554 "xmltok_impl.c"
      case 18: // $bb20
        var $59=$iftmp_1365; //@line 1554 "xmltok_impl.c"
        $c17=$59; //@line 1554 "xmltok_impl.c"
        var $60=$result; //@line 1555 "xmltok_impl.c"
        var $61=($60) * 10; //@line 1555 "xmltok_impl.c"
        $result=$61; //@line 1555 "xmltok_impl.c"
        var $62=$c17; //@line 1556 "xmltok_impl.c"
        var $63=($62) - 48; //@line 1556 "xmltok_impl.c"
        var $64=$result; //@line 1556 "xmltok_impl.c"
        var $65=($63) + ($64); //@line 1556 "xmltok_impl.c"
        $result=$65; //@line 1556 "xmltok_impl.c"
        var $66=($65) > 1114111; //@line 1557 "xmltok_impl.c"
        if ($66) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1557 "xmltok_impl.c"
      case 19: // $bb21
        $0=-1; //@line 1558 "xmltok_impl.c"
        __label__ = 24; break; //@line 1558 "xmltok_impl.c"
      case 20: // $bb22
        var $67=$ptr_addr; //@line 1553 "xmltok_impl.c"
        var $68=$67+2; //@line 1553 "xmltok_impl.c"
        $ptr_addr=$68; //@line 1553 "xmltok_impl.c"
        __label__ = 21; break; //@line 1553 "xmltok_impl.c"
      case 21: // $bb23
        var $69=$ptr_addr; //@line 1553 "xmltok_impl.c"
        var $70=$69; //@line 1553 "xmltok_impl.c"
        var $71=HEAP[$70]; //@line 1553 "xmltok_impl.c"
        var $72=($71)!=0; //@line 1553 "xmltok_impl.c"
        if ($72) { __label__ = 15; break; } else { __label__ = 22; break; } //@line 1553 "xmltok_impl.c"
      case 22: // $bb24
        var $73=$ptr_addr; //@line 1553 "xmltok_impl.c"
        var $74=$73+1; //@line 1553 "xmltok_impl.c"
        var $75=HEAP[$74]; //@line 1553 "xmltok_impl.c"
        var $76=($75)!=59; //@line 1553 "xmltok_impl.c"
        if ($76) { __label__ = 15; break; } else { __label__ = 23; break; } //@line 1553 "xmltok_impl.c"
      case 23: // $bb25
        var $77=$result; //@line 1561 "xmltok_impl.c"
        var $78=_checkCharRefNumber($77); //@line 1561 "xmltok_impl.c"
        $0=$78; //@line 1561 "xmltok_impl.c"
        __label__ = 24; break; //@line 1561 "xmltok_impl.c"
      case 24: // $bb26
        var $79=$0; //@line 1549 "xmltok_impl.c"
        $retval=$79; //@line 1549 "xmltok_impl.c"
        var $retval27=$retval; //@line 1549 "xmltok_impl.c"
        ;
        return $retval27; //@line 1549 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_predefinedEntityName($enc, $ptr, $end) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $retval;
        var $iftmp_1369;
        var $0;
        var $iftmp_1368;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        var $1=$end_addr; //@line 1568 "xmltok_impl.c"
        var $2=($1); //@line 1568 "xmltok_impl.c"
        var $3=$ptr_addr; //@line 1568 "xmltok_impl.c"
        var $4=($3); //@line 1568 "xmltok_impl.c"
        var $5=($2) - ($4); //@line 1568 "xmltok_impl.c"
        var $6=((($5)/2)|0); //@line 1568 "xmltok_impl.c"
        if ($6 == 2) {
          __label__ = 1; break;
        }
        else if ($6 == 3) {
          __label__ = 8; break;
        }
        else if ($6 == 4) {
          __label__ = 15; break;
        }
        else {
        __label__ = 32; break;
        }
        
      case 1: // $bb
        var $7=$ptr_addr; //@line 1570 "xmltok_impl.c"
        var $8=$7+2; //@line 1570 "xmltok_impl.c"
        var $9=$8; //@line 1570 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1570 "xmltok_impl.c"
        var $11=($10)==0; //@line 1570 "xmltok_impl.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 32; break; } //@line 1570 "xmltok_impl.c"
      case 2: // $bb1
        var $12=$ptr_addr; //@line 1570 "xmltok_impl.c"
        var $13=$12+2; //@line 1570 "xmltok_impl.c"
        var $14=$13+1; //@line 1570 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1570 "xmltok_impl.c"
        var $16=($15)==116; //@line 1570 "xmltok_impl.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 32; break; } //@line 1570 "xmltok_impl.c"
      case 3: // $bb2
        var $17=$ptr_addr; //@line 1571 "xmltok_impl.c"
        var $18=$17; //@line 1571 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1571 "xmltok_impl.c"
        var $20=($19)==0; //@line 1571 "xmltok_impl.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 1571 "xmltok_impl.c"
      case 4: // $bb5_thread
        $iftmp_1368=-1; //@line 1571 "xmltok_impl.c"
        __label__ = 32; break;
      case 5: // $bb5
        var $21=$ptr_addr; //@line 1571 "xmltok_impl.c"
        var $22=$21+1; //@line 1571 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 1571 "xmltok_impl.c"
        var $24=($23); //@line 1571 "xmltok_impl.c"
        $iftmp_1368=$24; //@line 1571 "xmltok_impl.c"
        if ($24 == 103) {
          __label__ = 7; break;
        }
        else if ($24 == 108) {
          __label__ = 6; break;
        }
        else {
        __label__ = 32; break;
        }
        
      case 6: // $bb6
        $0=60; //@line 1573 "xmltok_impl.c"
        __label__ = 33; break; //@line 1573 "xmltok_impl.c"
      case 7: // $bb7
        $0=62; //@line 1575 "xmltok_impl.c"
        __label__ = 33; break; //@line 1575 "xmltok_impl.c"
      case 8: // $bb9
        var $25=$ptr_addr; //@line 1580 "xmltok_impl.c"
        var $26=$25; //@line 1580 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 1580 "xmltok_impl.c"
        var $28=($27)==0; //@line 1580 "xmltok_impl.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 32; break; } //@line 1580 "xmltok_impl.c"
      case 9: // $bb10
        var $29=$ptr_addr; //@line 1580 "xmltok_impl.c"
        var $30=$29+1; //@line 1580 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 1580 "xmltok_impl.c"
        var $32=($31)==97; //@line 1580 "xmltok_impl.c"
        if ($32) { __label__ = 10; break; } else { __label__ = 32; break; } //@line 1580 "xmltok_impl.c"
      case 10: // $bb11
        var $33=$ptr_addr; //@line 1581 "xmltok_impl.c"
        var $34=$33+2; //@line 1581 "xmltok_impl.c"
        $ptr_addr=$34; //@line 1581 "xmltok_impl.c"
        var $35=$ptr_addr; //@line 1582 "xmltok_impl.c"
        var $36=$35; //@line 1582 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 1582 "xmltok_impl.c"
        var $38=($37)==0; //@line 1582 "xmltok_impl.c"
        if ($38) { __label__ = 11; break; } else { __label__ = 32; break; } //@line 1582 "xmltok_impl.c"
      case 11: // $bb12
        var $39=$ptr_addr; //@line 1582 "xmltok_impl.c"
        var $40=$39+1; //@line 1582 "xmltok_impl.c"
        var $41=HEAP[$40]; //@line 1582 "xmltok_impl.c"
        var $42=($41)==109; //@line 1582 "xmltok_impl.c"
        if ($42) { __label__ = 12; break; } else { __label__ = 32; break; } //@line 1582 "xmltok_impl.c"
      case 12: // $bb13
        var $43=$ptr_addr; //@line 1583 "xmltok_impl.c"
        var $44=$43+2; //@line 1583 "xmltok_impl.c"
        $ptr_addr=$44; //@line 1583 "xmltok_impl.c"
        var $45=$ptr_addr; //@line 1584 "xmltok_impl.c"
        var $46=$45; //@line 1584 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 1584 "xmltok_impl.c"
        var $48=($47)==0; //@line 1584 "xmltok_impl.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 32; break; } //@line 1584 "xmltok_impl.c"
      case 13: // $bb14
        var $49=$ptr_addr; //@line 1584 "xmltok_impl.c"
        var $50=$49+1; //@line 1584 "xmltok_impl.c"
        var $51=HEAP[$50]; //@line 1584 "xmltok_impl.c"
        var $52=($51)==112; //@line 1584 "xmltok_impl.c"
        if ($52) { __label__ = 14; break; } else { __label__ = 32; break; } //@line 1584 "xmltok_impl.c"
      case 14: // $bb15
        $0=38; //@line 1585 "xmltok_impl.c"
        __label__ = 33; break; //@line 1585 "xmltok_impl.c"
      case 15: // $bb17
        var $53=$ptr_addr; //@line 1590 "xmltok_impl.c"
        var $54=$53; //@line 1590 "xmltok_impl.c"
        var $55=HEAP[$54]; //@line 1590 "xmltok_impl.c"
        var $56=($55)==0; //@line 1590 "xmltok_impl.c"
        if ($56) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 1590 "xmltok_impl.c"
      case 16: // $bb20_thread
        $iftmp_1369=-1; //@line 1590 "xmltok_impl.c"
        __label__ = 32; break;
      case 17: // $bb20
        var $57=$ptr_addr; //@line 1590 "xmltok_impl.c"
        var $58=$57+1; //@line 1590 "xmltok_impl.c"
        var $59=HEAP[$58]; //@line 1590 "xmltok_impl.c"
        var $60=($59); //@line 1590 "xmltok_impl.c"
        $iftmp_1369=$60; //@line 1590 "xmltok_impl.c"
        if ($60 == 97) {
          __label__ = 25; break;
        }
        else if ($60 == 113) {
          __label__ = 18; break;
        }
        else {
        __label__ = 32; break;
        }
        
      case 18: // $bb21
        var $61=$ptr_addr; //@line 1592 "xmltok_impl.c"
        var $62=$61+2; //@line 1592 "xmltok_impl.c"
        $ptr_addr=$62; //@line 1592 "xmltok_impl.c"
        var $63=$ptr_addr; //@line 1593 "xmltok_impl.c"
        var $64=$63; //@line 1593 "xmltok_impl.c"
        var $65=HEAP[$64]; //@line 1593 "xmltok_impl.c"
        var $66=($65)==0; //@line 1593 "xmltok_impl.c"
        if ($66) { __label__ = 19; break; } else { __label__ = 32; break; } //@line 1593 "xmltok_impl.c"
      case 19: // $bb22
        var $67=$ptr_addr; //@line 1593 "xmltok_impl.c"
        var $68=$67+1; //@line 1593 "xmltok_impl.c"
        var $69=HEAP[$68]; //@line 1593 "xmltok_impl.c"
        var $70=($69)==117; //@line 1593 "xmltok_impl.c"
        if ($70) { __label__ = 20; break; } else { __label__ = 32; break; } //@line 1593 "xmltok_impl.c"
      case 20: // $bb23
        var $71=$ptr_addr; //@line 1594 "xmltok_impl.c"
        var $72=$71+2; //@line 1594 "xmltok_impl.c"
        $ptr_addr=$72; //@line 1594 "xmltok_impl.c"
        var $73=$ptr_addr; //@line 1595 "xmltok_impl.c"
        var $74=$73; //@line 1595 "xmltok_impl.c"
        var $75=HEAP[$74]; //@line 1595 "xmltok_impl.c"
        var $76=($75)==0; //@line 1595 "xmltok_impl.c"
        if ($76) { __label__ = 21; break; } else { __label__ = 32; break; } //@line 1595 "xmltok_impl.c"
      case 21: // $bb24
        var $77=$ptr_addr; //@line 1595 "xmltok_impl.c"
        var $78=$77+1; //@line 1595 "xmltok_impl.c"
        var $79=HEAP[$78]; //@line 1595 "xmltok_impl.c"
        var $80=($79)==111; //@line 1595 "xmltok_impl.c"
        if ($80) { __label__ = 22; break; } else { __label__ = 32; break; } //@line 1595 "xmltok_impl.c"
      case 22: // $bb25
        var $81=$ptr_addr; //@line 1596 "xmltok_impl.c"
        var $82=$81+2; //@line 1596 "xmltok_impl.c"
        $ptr_addr=$82; //@line 1596 "xmltok_impl.c"
        var $83=$ptr_addr; //@line 1597 "xmltok_impl.c"
        var $84=$83; //@line 1597 "xmltok_impl.c"
        var $85=HEAP[$84]; //@line 1597 "xmltok_impl.c"
        var $86=($85)==0; //@line 1597 "xmltok_impl.c"
        if ($86) { __label__ = 23; break; } else { __label__ = 32; break; } //@line 1597 "xmltok_impl.c"
      case 23: // $bb26
        var $87=$ptr_addr; //@line 1597 "xmltok_impl.c"
        var $88=$87+1; //@line 1597 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 1597 "xmltok_impl.c"
        var $90=($89)==116; //@line 1597 "xmltok_impl.c"
        if ($90) { __label__ = 24; break; } else { __label__ = 32; break; } //@line 1597 "xmltok_impl.c"
      case 24: // $bb27
        $0=34; //@line 1598 "xmltok_impl.c"
        __label__ = 33; break; //@line 1598 "xmltok_impl.c"
      case 25: // $bb29
        var $91=$ptr_addr; //@line 1603 "xmltok_impl.c"
        var $92=$91+2; //@line 1603 "xmltok_impl.c"
        $ptr_addr=$92; //@line 1603 "xmltok_impl.c"
        var $93=$ptr_addr; //@line 1604 "xmltok_impl.c"
        var $94=$93; //@line 1604 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 1604 "xmltok_impl.c"
        var $96=($95)==0; //@line 1604 "xmltok_impl.c"
        if ($96) { __label__ = 26; break; } else { __label__ = 32; break; } //@line 1604 "xmltok_impl.c"
      case 26: // $bb30
        var $97=$ptr_addr; //@line 1604 "xmltok_impl.c"
        var $98=$97+1; //@line 1604 "xmltok_impl.c"
        var $99=HEAP[$98]; //@line 1604 "xmltok_impl.c"
        var $100=($99)==112; //@line 1604 "xmltok_impl.c"
        if ($100) { __label__ = 27; break; } else { __label__ = 32; break; } //@line 1604 "xmltok_impl.c"
      case 27: // $bb31
        var $101=$ptr_addr; //@line 1605 "xmltok_impl.c"
        var $102=$101+2; //@line 1605 "xmltok_impl.c"
        $ptr_addr=$102; //@line 1605 "xmltok_impl.c"
        var $103=$ptr_addr; //@line 1606 "xmltok_impl.c"
        var $104=$103; //@line 1606 "xmltok_impl.c"
        var $105=HEAP[$104]; //@line 1606 "xmltok_impl.c"
        var $106=($105)==0; //@line 1606 "xmltok_impl.c"
        if ($106) { __label__ = 28; break; } else { __label__ = 32; break; } //@line 1606 "xmltok_impl.c"
      case 28: // $bb32
        var $107=$ptr_addr; //@line 1606 "xmltok_impl.c"
        var $108=$107+1; //@line 1606 "xmltok_impl.c"
        var $109=HEAP[$108]; //@line 1606 "xmltok_impl.c"
        var $110=($109)==111; //@line 1606 "xmltok_impl.c"
        if ($110) { __label__ = 29; break; } else { __label__ = 32; break; } //@line 1606 "xmltok_impl.c"
      case 29: // $bb33
        var $111=$ptr_addr; //@line 1607 "xmltok_impl.c"
        var $112=$111+2; //@line 1607 "xmltok_impl.c"
        $ptr_addr=$112; //@line 1607 "xmltok_impl.c"
        var $113=$ptr_addr; //@line 1608 "xmltok_impl.c"
        var $114=$113; //@line 1608 "xmltok_impl.c"
        var $115=HEAP[$114]; //@line 1608 "xmltok_impl.c"
        var $116=($115)==0; //@line 1608 "xmltok_impl.c"
        if ($116) { __label__ = 30; break; } else { __label__ = 32; break; } //@line 1608 "xmltok_impl.c"
      case 30: // $bb34
        var $117=$ptr_addr; //@line 1608 "xmltok_impl.c"
        var $118=$117+1; //@line 1608 "xmltok_impl.c"
        var $119=HEAP[$118]; //@line 1608 "xmltok_impl.c"
        var $120=($119)==115; //@line 1608 "xmltok_impl.c"
        if ($120) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1608 "xmltok_impl.c"
      case 31: // $bb35
        $0=39; //@line 1609 "xmltok_impl.c"
        __label__ = 33; break; //@line 1609 "xmltok_impl.c"
      case 32: // $bb36
        $0=0; //@line 1615 "xmltok_impl.c"
        __label__ = 33; break; //@line 1615 "xmltok_impl.c"
      case 33: // $bb37
        var $121=$0; //@line 1573 "xmltok_impl.c"
        $retval=$121; //@line 1573 "xmltok_impl.c"
        var $retval38=$retval; //@line 1573 "xmltok_impl.c"
        ;
        return $retval38; //@line 1573 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_sameName($enc, $ptr1, $ptr2) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr1_addr;
        var $ptr2_addr;
        var $retval;
        var $iftmp_1372;
        var $0;
        var $iftmp_1370;
        $enc_addr=$enc;
        $ptr1_addr=$ptr1;
        $ptr2_addr=$ptr2;
        __label__ = 1; break; //@line 1620 "xmltok.c"
      case 1: // $bb
        var $1=$ptr1_addr; //@line 1622 "xmltok_impl.c"
        var $2=$1; //@line 1622 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 1622 "xmltok_impl.c"
        var $4=($3)==0; //@line 1622 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1622 "xmltok_impl.c"
      case 2: // $bb1
        var $5=$enc_addr; //@line 1622 "xmltok_impl.c"
        var $6=$5; //@line 1622 "xmltok_impl.c"
        var $7=$ptr1_addr; //@line 1622 "xmltok_impl.c"
        var $8=$7+1; //@line 1622 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1622 "xmltok_impl.c"
        var $10=($9); //@line 1622 "xmltok_impl.c"
        var $11=$6+76; //@line 1622 "xmltok_impl.c"
        var $12=$11+$10; //@line 1622 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1622 "xmltok_impl.c"
        var $14=($13); //@line 1622 "xmltok_impl.c"
        $iftmp_1370=$14; //@line 1622 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1622 "xmltok_impl.c"
      case 3: // $bb2
        var $15=$ptr1_addr; //@line 1622 "xmltok_impl.c"
        var $16=$15+1; //@line 1622 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 1622 "xmltok_impl.c"
        var $18=($17); //@line 1622 "xmltok_impl.c"
        var $19=$ptr1_addr; //@line 1622 "xmltok_impl.c"
        var $20=$19; //@line 1622 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1622 "xmltok_impl.c"
        var $22=($21); //@line 1622 "xmltok_impl.c"
        var $23=((($22)) & 255); //@line 1622 "xmltok_impl.c"
        var $24=((($18)) & 255); //@line 1622 "xmltok_impl.c"
        var $25=_unicode_byte_type($23, $24); //@line 1622 "xmltok_impl.c"
        $iftmp_1370=$25; //@line 1622 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1622 "xmltok_impl.c"
      case 4: // $bb3
        var $26=__lastLabel__ == 3 ? $25 : ($14);
        if ($26 == 5) {
          __label__ = 9; break;
        }
        else if ($26 == 6) {
          __label__ = 7; break;
        }
        else if ($26 == 7) {
          __label__ = 5; break;
        }
        else if ($26 == 22) {
          __label__ = 13; break;
        }
        else if ($26 == 23) {
          __label__ = 13; break;
        }
        else if ($26 == 24) {
          __label__ = 13; break;
        }
        else if ($26 == 25) {
          __label__ = 13; break;
        }
        else if ($26 == 26) {
          __label__ = 13; break;
        }
        else if ($26 == 27) {
          __label__ = 13; break;
        }
        else if ($26 == 29) {
          __label__ = 13; break;
        }
        else {
        __label__ = 17; break;
        }
        
      case 5: // $bb4
        var $27=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $28=HEAP[$27]; //@line 1627 "xmltok_impl.c"
        var $29=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 1627 "xmltok_impl.c"
        var $31=($28)!=($30); //@line 1627 "xmltok_impl.c"
        var $32=($31); //@line 1627 "xmltok_impl.c"
        var $33=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $34=$33+1; //@line 1627 "xmltok_impl.c"
        $ptr1_addr=$34; //@line 1627 "xmltok_impl.c"
        var $35=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $36=$35+1; //@line 1627 "xmltok_impl.c"
        $ptr2_addr=$36; //@line 1627 "xmltok_impl.c"
        var $toBool=($32)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1627 "xmltok_impl.c"
      case 6: // $bb5
        $0=0; //@line 1627 "xmltok_impl.c"
        __label__ = 23; break; //@line 1627 "xmltok_impl.c"
      case 7: // $bb6
        var $37=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 1627 "xmltok_impl.c"
        var $39=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 1627 "xmltok_impl.c"
        var $41=($38)!=($40); //@line 1627 "xmltok_impl.c"
        var $42=($41); //@line 1627 "xmltok_impl.c"
        var $43=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $44=$43+1; //@line 1627 "xmltok_impl.c"
        $ptr1_addr=$44; //@line 1627 "xmltok_impl.c"
        var $45=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $46=$45+1; //@line 1627 "xmltok_impl.c"
        $ptr2_addr=$46; //@line 1627 "xmltok_impl.c"
        var $toBool7=($42)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool7) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1627 "xmltok_impl.c"
      case 8: // $bb8
        $0=0; //@line 1627 "xmltok_impl.c"
        __label__ = 23; break; //@line 1627 "xmltok_impl.c"
      case 9: // $bb9
        var $47=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 1627 "xmltok_impl.c"
        var $49=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $50=HEAP[$49]; //@line 1627 "xmltok_impl.c"
        var $51=($48)!=($50); //@line 1627 "xmltok_impl.c"
        var $52=($51); //@line 1627 "xmltok_impl.c"
        var $53=$ptr1_addr; //@line 1627 "xmltok_impl.c"
        var $54=$53+1; //@line 1627 "xmltok_impl.c"
        $ptr1_addr=$54; //@line 1627 "xmltok_impl.c"
        var $55=$ptr2_addr; //@line 1627 "xmltok_impl.c"
        var $56=$55+1; //@line 1627 "xmltok_impl.c"
        $ptr2_addr=$56; //@line 1627 "xmltok_impl.c"
        var $toBool10=($52)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool10) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1627 "xmltok_impl.c"
      case 10: // $bb11
        $0=0; //@line 1627 "xmltok_impl.c"
        __label__ = 23; break; //@line 1627 "xmltok_impl.c"
      case 11: // $bb12
        var $57=$ptr1_addr; //@line 1630 "xmltok_impl.c"
        var $58=HEAP[$57]; //@line 1630 "xmltok_impl.c"
        var $59=$ptr2_addr; //@line 1630 "xmltok_impl.c"
        var $60=HEAP[$59]; //@line 1630 "xmltok_impl.c"
        var $61=($58)!=($60); //@line 1630 "xmltok_impl.c"
        var $62=($61); //@line 1630 "xmltok_impl.c"
        var $63=$ptr1_addr; //@line 1630 "xmltok_impl.c"
        var $64=$63+1; //@line 1630 "xmltok_impl.c"
        $ptr1_addr=$64; //@line 1630 "xmltok_impl.c"
        var $65=$ptr2_addr; //@line 1630 "xmltok_impl.c"
        var $66=$65+1; //@line 1630 "xmltok_impl.c"
        $ptr2_addr=$66; //@line 1630 "xmltok_impl.c"
        var $toBool13=($62)!=0; //@line 1630 "xmltok_impl.c"
        if ($toBool13) { __label__ = 12; break; } else { __label__ = 1; break; } //@line 1630 "xmltok_impl.c"
      case 12: // $bb14
        $0=0; //@line 1631 "xmltok_impl.c"
        __label__ = 23; break; //@line 1631 "xmltok_impl.c"
      case 13: // $bb16
        var $67=$ptr2_addr; //@line 1642 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 1642 "xmltok_impl.c"
        var $69=$ptr1_addr; //@line 1642 "xmltok_impl.c"
        var $70=HEAP[$69]; //@line 1642 "xmltok_impl.c"
        var $71=($68)!=($70); //@line 1642 "xmltok_impl.c"
        var $72=($71); //@line 1642 "xmltok_impl.c"
        var $73=$ptr2_addr; //@line 1642 "xmltok_impl.c"
        var $74=$73+1; //@line 1642 "xmltok_impl.c"
        $ptr2_addr=$74; //@line 1642 "xmltok_impl.c"
        var $75=$ptr1_addr; //@line 1642 "xmltok_impl.c"
        var $76=$75+1; //@line 1642 "xmltok_impl.c"
        $ptr1_addr=$76; //@line 1642 "xmltok_impl.c"
        var $toBool17=($72)!=0; //@line 1642 "xmltok_impl.c"
        if ($toBool17) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1642 "xmltok_impl.c"
      case 14: // $bb18
        $0=0; //@line 1643 "xmltok_impl.c"
        __label__ = 23; break; //@line 1643 "xmltok_impl.c"
      case 15: // $bb19
        var $77=$ptr2_addr; //@line 1645 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 1645 "xmltok_impl.c"
        var $79=$ptr1_addr; //@line 1645 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 1645 "xmltok_impl.c"
        var $81=($78)!=($80); //@line 1645 "xmltok_impl.c"
        var $82=($81); //@line 1645 "xmltok_impl.c"
        var $83=$ptr2_addr; //@line 1645 "xmltok_impl.c"
        var $84=$83+1; //@line 1645 "xmltok_impl.c"
        $ptr2_addr=$84; //@line 1645 "xmltok_impl.c"
        var $85=$ptr1_addr; //@line 1645 "xmltok_impl.c"
        var $86=$85+1; //@line 1645 "xmltok_impl.c"
        $ptr1_addr=$86; //@line 1645 "xmltok_impl.c"
        var $toBool20=($82)!=0; //@line 1645 "xmltok_impl.c"
        if ($toBool20) { __label__ = 16; break; } else { __label__ = 1; break; } //@line 1645 "xmltok_impl.c"
      case 16: // $bb21
        $0=0; //@line 1646 "xmltok_impl.c"
        __label__ = 23; break; //@line 1646 "xmltok_impl.c"
      case 17: // $bb23
        var $87=$ptr2_addr; //@line 1660 "xmltok_impl.c"
        var $88=$87; //@line 1660 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 1660 "xmltok_impl.c"
        var $90=($89)==0; //@line 1660 "xmltok_impl.c"
        if ($90) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1660 "xmltok_impl.c"
      case 18: // $bb24
        var $91=$enc_addr; //@line 1660 "xmltok_impl.c"
        var $92=$91; //@line 1660 "xmltok_impl.c"
        var $93=$ptr2_addr; //@line 1660 "xmltok_impl.c"
        var $94=$93+1; //@line 1660 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 1660 "xmltok_impl.c"
        var $96=($95); //@line 1660 "xmltok_impl.c"
        var $97=$92+76; //@line 1660 "xmltok_impl.c"
        var $98=$97+$96; //@line 1660 "xmltok_impl.c"
        var $99=HEAP[$98]; //@line 1660 "xmltok_impl.c"
        var $100=($99); //@line 1660 "xmltok_impl.c"
        $iftmp_1372=$100; //@line 1660 "xmltok_impl.c"
        __lastLabel__ = 18; __label__ = 20; break; //@line 1660 "xmltok_impl.c"
      case 19: // $bb25
        var $101=$ptr2_addr; //@line 1660 "xmltok_impl.c"
        var $102=$101+1; //@line 1660 "xmltok_impl.c"
        var $103=HEAP[$102]; //@line 1660 "xmltok_impl.c"
        var $104=($103); //@line 1660 "xmltok_impl.c"
        var $105=$ptr2_addr; //@line 1660 "xmltok_impl.c"
        var $106=$105; //@line 1660 "xmltok_impl.c"
        var $107=HEAP[$106]; //@line 1660 "xmltok_impl.c"
        var $108=($107); //@line 1660 "xmltok_impl.c"
        var $109=((($108)) & 255); //@line 1660 "xmltok_impl.c"
        var $110=((($104)) & 255); //@line 1660 "xmltok_impl.c"
        var $111=_unicode_byte_type($109, $110); //@line 1660 "xmltok_impl.c"
        $iftmp_1372=$111; //@line 1660 "xmltok_impl.c"
        __lastLabel__ = 19; __label__ = 20; break; //@line 1660 "xmltok_impl.c"
      case 20: // $bb26
        var $112=__lastLabel__ == 19 ? $111 : ($100);
        if ($112 == 5) {
          __label__ = 21; break;
        }
        else if ($112 == 6) {
          __label__ = 21; break;
        }
        else if ($112 == 7) {
          __label__ = 21; break;
        }
        else if ($112 == 22) {
          __label__ = 21; break;
        }
        else if ($112 == 23) {
          __label__ = 21; break;
        }
        else if ($112 == 24) {
          __label__ = 21; break;
        }
        else if ($112 == 25) {
          __label__ = 21; break;
        }
        else if ($112 == 26) {
          __label__ = 21; break;
        }
        else if ($112 == 27) {
          __label__ = 21; break;
        }
        else if ($112 == 29) {
          __label__ = 21; break;
        }
        else {
        __label__ = 22; break;
        }
        
      case 21: // $bb27
        $0=0; //@line 1673 "xmltok_impl.c"
        __label__ = 23; break; //@line 1673 "xmltok_impl.c"
      case 22: // $bb28
        $0=1; //@line 1675 "xmltok_impl.c"
        __label__ = 23; break; //@line 1675 "xmltok_impl.c"
      case 23: // $bb30
        var $113=$0; //@line 1627 "xmltok_impl.c"
        $retval=$113; //@line 1627 "xmltok_impl.c"
        var $retval31=$retval; //@line 1627 "xmltok_impl.c"
        ;
        return $retval31; //@line 1627 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_nameMatchesAscii($enc, $ptr1, $end1, $ptr2) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr1_addr;
        var $end1_addr;
        var $ptr2_addr;
        var $retval;
        var $0;
        $enc_addr=$enc;
        $ptr1_addr=$ptr1;
        $end1_addr=$end1;
        $ptr2_addr=$ptr2;
        __label__ = 7; break; //@line 1686 "xmltok_impl.c"
      case 1: // $bb
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1687 "xmltok_impl.c"
      case 2: // $bb1
        $0=0; //@line 1688 "xmltok_impl.c"
        __label__ = 9; break; //@line 1688 "xmltok_impl.c"
      case 3: // $bb2
        var $1=$ptr1_addr; //@line 1689 "xmltok_impl.c"
        var $2=$1; //@line 1689 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 1689 "xmltok_impl.c"
        var $4=($3)!=0; //@line 1689 "xmltok_impl.c"
        if ($4) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 1689 "xmltok_impl.c"
      case 4: // $bb3
        var $5=$ptr1_addr; //@line 1689 "xmltok_impl.c"
        var $6=$5+1; //@line 1689 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1689 "xmltok_impl.c"
        var $8=$ptr2_addr; //@line 1689 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1689 "xmltok_impl.c"
        var $10=($7)!=($9); //@line 1689 "xmltok_impl.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1689 "xmltok_impl.c"
      case 5: // $bb4
        $0=0; //@line 1690 "xmltok_impl.c"
        __label__ = 9; break; //@line 1690 "xmltok_impl.c"
      case 6: // $bb5
        var $11=$ptr1_addr; //@line 1686 "xmltok_impl.c"
        var $12=$11+2; //@line 1686 "xmltok_impl.c"
        $ptr1_addr=$12; //@line 1686 "xmltok_impl.c"
        var $13=$ptr2_addr; //@line 1686 "xmltok_impl.c"
        var $14=$13+1; //@line 1686 "xmltok_impl.c"
        $ptr2_addr=$14; //@line 1686 "xmltok_impl.c"
        __label__ = 7; break; //@line 1686 "xmltok_impl.c"
      case 7: // $bb6
        var $15=$ptr2_addr; //@line 1686 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1686 "xmltok_impl.c"
        var $17=($16)!=0; //@line 1686 "xmltok_impl.c"
        var $18=$ptr1_addr; //@line 1687 "xmltok_impl.c"
        var $19=$end1_addr; //@line 1687 "xmltok_impl.c"
        var $20=($18)==($19); //@line 1687 "xmltok_impl.c"
        if ($17) { __label__ = 1; break; } else { __label__ = 8; break; } //@line 1686 "xmltok_impl.c"
      case 8: // $bb7
        var $21=($20); //@line 1692 "xmltok_impl.c"
        $0=$21; //@line 1692 "xmltok_impl.c"
        __label__ = 9; break; //@line 1692 "xmltok_impl.c"
      case 9: // $bb8
        var $22=$0; //@line 1688 "xmltok_impl.c"
        $retval=$22; //@line 1688 "xmltok_impl.c"
        var $retval9=$retval; //@line 1688 "xmltok_impl.c"
        ;
        return $retval9; //@line 1688 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_nameLength($enc, $ptr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $retval;
        var $0;
        var $iftmp_1374;
        var $start;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        var $1=$ptr_addr; //@line 1698 "xmltok_impl.c"
        $start=$1; //@line 1698 "xmltok_impl.c"
        __label__ = 1; break; //@line 1698 "xmltok_impl.c"
      case 1: // $bb
        var $2=$ptr_addr; //@line 1700 "xmltok_impl.c"
        var $3=$2; //@line 1700 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 1700 "xmltok_impl.c"
        var $5=($4)==0; //@line 1700 "xmltok_impl.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1700 "xmltok_impl.c"
      case 2: // $bb1
        var $6=$enc_addr; //@line 1700 "xmltok_impl.c"
        var $7=$6; //@line 1700 "xmltok_impl.c"
        var $8=$ptr_addr; //@line 1700 "xmltok_impl.c"
        var $9=$8+1; //@line 1700 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1700 "xmltok_impl.c"
        var $11=($10); //@line 1700 "xmltok_impl.c"
        var $12=$7+76; //@line 1700 "xmltok_impl.c"
        var $13=$12+$11; //@line 1700 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 1700 "xmltok_impl.c"
        var $15=($14); //@line 1700 "xmltok_impl.c"
        $iftmp_1374=$15; //@line 1700 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1700 "xmltok_impl.c"
      case 3: // $bb2
        var $16=$ptr_addr; //@line 1700 "xmltok_impl.c"
        var $17=$16+1; //@line 1700 "xmltok_impl.c"
        var $18=HEAP[$17]; //@line 1700 "xmltok_impl.c"
        var $19=($18); //@line 1700 "xmltok_impl.c"
        var $20=$ptr_addr; //@line 1700 "xmltok_impl.c"
        var $21=$20; //@line 1700 "xmltok_impl.c"
        var $22=HEAP[$21]; //@line 1700 "xmltok_impl.c"
        var $23=($22); //@line 1700 "xmltok_impl.c"
        var $24=((($23)) & 255); //@line 1700 "xmltok_impl.c"
        var $25=((($19)) & 255); //@line 1700 "xmltok_impl.c"
        var $26=_unicode_byte_type($24, $25); //@line 1700 "xmltok_impl.c"
        $iftmp_1374=$26; //@line 1700 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1700 "xmltok_impl.c"
      case 4: // $bb3
        var $27=__lastLabel__ == 3 ? $26 : ($15);
        if ($27 == 5) {
          __label__ = 5; break;
        }
        else if ($27 == 6) {
          __label__ = 6; break;
        }
        else if ($27 == 7) {
          __label__ = 7; break;
        }
        else if ($27 == 22) {
          __label__ = 8; break;
        }
        else if ($27 == 23) {
          __label__ = 8; break;
        }
        else if ($27 == 24) {
          __label__ = 8; break;
        }
        else if ($27 == 25) {
          __label__ = 8; break;
        }
        else if ($27 == 26) {
          __label__ = 8; break;
        }
        else if ($27 == 27) {
          __label__ = 8; break;
        }
        else if ($27 == 29) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 5: // $bb4
        var $28=$ptr_addr; //@line 1703 "xmltok_impl.c"
        var $29=$28+2; //@line 1703 "xmltok_impl.c"
        $ptr_addr=$29; //@line 1703 "xmltok_impl.c"
        __label__ = 1; break; //@line 1703 "xmltok_impl.c"
      case 6: // $bb5
        var $30=$ptr_addr; //@line 1703 "xmltok_impl.c"
        var $31=$30+3; //@line 1703 "xmltok_impl.c"
        $ptr_addr=$31; //@line 1703 "xmltok_impl.c"
        __label__ = 1; break; //@line 1703 "xmltok_impl.c"
      case 7: // $bb6
        var $32=$ptr_addr; //@line 1703 "xmltok_impl.c"
        var $33=$32+4; //@line 1703 "xmltok_impl.c"
        $ptr_addr=$33; //@line 1703 "xmltok_impl.c"
        __label__ = 1; break; //@line 1703 "xmltok_impl.c"
      case 8: // $bb7
        var $34=$ptr_addr; //@line 1714 "xmltok_impl.c"
        var $35=$34+2; //@line 1714 "xmltok_impl.c"
        $ptr_addr=$35; //@line 1714 "xmltok_impl.c"
        __label__ = 1; break; //@line 1714 "xmltok_impl.c"
      case 9: // $bb8
        var $36=$ptr_addr; //@line 1717 "xmltok_impl.c"
        var $37=($36); //@line 1717 "xmltok_impl.c"
        var $38=$start; //@line 1717 "xmltok_impl.c"
        var $39=($38); //@line 1717 "xmltok_impl.c"
        var $40=($37) - ($39); //@line 1717 "xmltok_impl.c"
        $0=$40; //@line 1717 "xmltok_impl.c"
        var $41=$0; //@line 1717 "xmltok_impl.c"
        $retval=$41; //@line 1717 "xmltok_impl.c"
        var $retval10=$retval; //@line 1717 "xmltok_impl.c"
        ;
        return $retval10; //@line 1717 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_skipS($enc, $ptr) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $retval;
        var $0;
        var $iftmp_1378;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        __label__ = 1; break; //@line 1724 "xmltok.c"
      case 1: // $bb
        var $1=$ptr_addr; //@line 1726 "xmltok_impl.c"
        var $2=$1; //@line 1726 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 1726 "xmltok_impl.c"
        var $4=($3)==0; //@line 1726 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1726 "xmltok_impl.c"
      case 2: // $bb1
        var $5=$enc_addr; //@line 1726 "xmltok_impl.c"
        var $6=$5; //@line 1726 "xmltok_impl.c"
        var $7=$ptr_addr; //@line 1726 "xmltok_impl.c"
        var $8=$7+1; //@line 1726 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1726 "xmltok_impl.c"
        var $10=($9); //@line 1726 "xmltok_impl.c"
        var $11=$6+76; //@line 1726 "xmltok_impl.c"
        var $12=$11+$10; //@line 1726 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1726 "xmltok_impl.c"
        var $14=($13); //@line 1726 "xmltok_impl.c"
        $iftmp_1378=$14; //@line 1726 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1726 "xmltok_impl.c"
      case 3: // $bb2
        var $15=$ptr_addr; //@line 1726 "xmltok_impl.c"
        var $16=$15+1; //@line 1726 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 1726 "xmltok_impl.c"
        var $18=($17); //@line 1726 "xmltok_impl.c"
        var $19=$ptr_addr; //@line 1726 "xmltok_impl.c"
        var $20=$19; //@line 1726 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1726 "xmltok_impl.c"
        var $22=($21); //@line 1726 "xmltok_impl.c"
        var $23=((($22)) & 255); //@line 1726 "xmltok_impl.c"
        var $24=((($18)) & 255); //@line 1726 "xmltok_impl.c"
        var $25=_unicode_byte_type($23, $24); //@line 1726 "xmltok_impl.c"
        $iftmp_1378=$25; //@line 1726 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1726 "xmltok_impl.c"
      case 4: // $bb3
        var $26=__lastLabel__ == 3 ? $25 : ($14);
        if ($26 == 9) {
          __label__ = 5; break;
        }
        else if ($26 == 10) {
          __label__ = 5; break;
        }
        else if ($26 == 21) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 5: // $bb4
        var $27=$ptr_addr; //@line 1730 "xmltok_impl.c"
        var $28=$27+2; //@line 1730 "xmltok_impl.c"
        $ptr_addr=$28; //@line 1730 "xmltok_impl.c"
        __label__ = 1; break; //@line 1730 "xmltok_impl.c"
      case 6: // $bb5
        var $29=$ptr_addr; //@line 1733 "xmltok_impl.c"
        $0=$29; //@line 1733 "xmltok_impl.c"
        var $30=$0; //@line 1733 "xmltok_impl.c"
        $retval=$30; //@line 1733 "xmltok_impl.c"
        var $retval6=$retval; //@line 1733 "xmltok_impl.c"
        ;
        return $retval6; //@line 1733 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_updatePosition($enc, $ptr, $end, $pos) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $pos_addr;
        var $iftmp_1382;
        var $iftmp_1380;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $pos_addr=$pos;
        var $0=$ptr_addr; //@line 1744 "xmltok_impl.c"
        var $1=$end_addr; //@line 1744 "xmltok_impl.c"
        var $2=($0) < ($1); //@line 1744 "xmltok_impl.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 18; break; } //@line 1744 "xmltok_impl.c"
      case 1: // $bb
        var $3=$ptr_addr; //@line 1745 "xmltok_impl.c"
        var $4=$3; //@line 1745 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1745 "xmltok_impl.c"
        var $6=($5)==0; //@line 1745 "xmltok_impl.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1745 "xmltok_impl.c"
      case 2: // $bb1
        var $7=$enc_addr; //@line 1745 "xmltok_impl.c"
        var $8=$7; //@line 1745 "xmltok_impl.c"
        var $9=$ptr_addr; //@line 1745 "xmltok_impl.c"
        var $10=$9+1; //@line 1745 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 1745 "xmltok_impl.c"
        var $12=($11); //@line 1745 "xmltok_impl.c"
        var $13=$8+76; //@line 1745 "xmltok_impl.c"
        var $14=$13+$12; //@line 1745 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1745 "xmltok_impl.c"
        var $16=($15); //@line 1745 "xmltok_impl.c"
        $iftmp_1380=$16; //@line 1745 "xmltok_impl.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1745 "xmltok_impl.c"
      case 3: // $bb2
        var $17=$ptr_addr; //@line 1745 "xmltok_impl.c"
        var $18=$17+1; //@line 1745 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1745 "xmltok_impl.c"
        var $20=($19); //@line 1745 "xmltok_impl.c"
        var $21=$ptr_addr; //@line 1745 "xmltok_impl.c"
        var $22=$21; //@line 1745 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 1745 "xmltok_impl.c"
        var $24=($23); //@line 1745 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 1745 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 1745 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 1745 "xmltok_impl.c"
        $iftmp_1380=$27; //@line 1745 "xmltok_impl.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1745 "xmltok_impl.c"
      case 4: // $bb3
        var $28=__lastLabel__ == 3 ? $27 : ($16);
        if ($28 == 5) {
          __label__ = 5; break;
        }
        else if ($28 == 6) {
          __label__ = 6; break;
        }
        else if ($28 == 7) {
          __label__ = 7; break;
        }
        else if ($28 == 9) {
          __label__ = 9; break;
        }
        else if ($28 == 10) {
          __label__ = 8; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 5: // $bb4
        var $29=$ptr_addr; //@line 1750 "xmltok_impl.c"
        var $30=$29+2; //@line 1750 "xmltok_impl.c"
        $ptr_addr=$30; //@line 1750 "xmltok_impl.c"
        __label__ = 17; break; //@line 1750 "xmltok_impl.c"
      case 6: // $bb5
        var $31=$ptr_addr; //@line 1750 "xmltok_impl.c"
        var $32=$31+3; //@line 1750 "xmltok_impl.c"
        $ptr_addr=$32; //@line 1750 "xmltok_impl.c"
        __label__ = 17; break; //@line 1750 "xmltok_impl.c"
      case 7: // $bb6
        var $33=$ptr_addr; //@line 1750 "xmltok_impl.c"
        var $34=$33+4; //@line 1750 "xmltok_impl.c"
        $ptr_addr=$34; //@line 1750 "xmltok_impl.c"
        __label__ = 17; break; //@line 1750 "xmltok_impl.c"
      case 8: // $bb7
        var $35=$pos_addr; //@line 1753 "xmltok_impl.c"
        var $36=$35+4; //@line 1753 "xmltok_impl.c"
        HEAP[$36]=-1; //@line 1753 "xmltok_impl.c"
        var $37=$pos_addr; //@line 1754 "xmltok_impl.c"
        var $38=$37; //@line 1754 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 1754 "xmltok_impl.c"
        var $40=($39) + 1; //@line 1754 "xmltok_impl.c"
        var $41=$pos_addr; //@line 1754 "xmltok_impl.c"
        var $42=$41; //@line 1754 "xmltok_impl.c"
        HEAP[$42]=$40; //@line 1754 "xmltok_impl.c"
        var $43=$ptr_addr; //@line 1755 "xmltok_impl.c"
        var $44=$43+2; //@line 1755 "xmltok_impl.c"
        $ptr_addr=$44; //@line 1755 "xmltok_impl.c"
        __label__ = 17; break; //@line 1755 "xmltok_impl.c"
      case 9: // $bb8
        var $45=$pos_addr; //@line 1758 "xmltok_impl.c"
        var $46=$45; //@line 1758 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 1758 "xmltok_impl.c"
        var $48=($47) + 1; //@line 1758 "xmltok_impl.c"
        var $49=$pos_addr; //@line 1758 "xmltok_impl.c"
        var $50=$49; //@line 1758 "xmltok_impl.c"
        HEAP[$50]=$48; //@line 1758 "xmltok_impl.c"
        var $51=$ptr_addr; //@line 1759 "xmltok_impl.c"
        var $52=$51+2; //@line 1759 "xmltok_impl.c"
        $ptr_addr=$52; //@line 1759 "xmltok_impl.c"
        var $53=$ptr_addr; //@line 1760 "xmltok_impl.c"
        var $54=$end_addr; //@line 1760 "xmltok_impl.c"
        var $55=($53)!=($54); //@line 1760 "xmltok_impl.c"
        if ($55) { __label__ = 10; break; } else { __label__ = 15; break; } //@line 1760 "xmltok_impl.c"
      case 10: // $bb9
        var $56=$ptr_addr; //@line 1760 "xmltok_impl.c"
        var $57=$56; //@line 1760 "xmltok_impl.c"
        var $58=HEAP[$57]; //@line 1760 "xmltok_impl.c"
        var $59=($58)==0; //@line 1760 "xmltok_impl.c"
        if ($59) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1760 "xmltok_impl.c"
      case 11: // $bb10
        var $60=$enc_addr; //@line 1760 "xmltok_impl.c"
        var $61=$60; //@line 1760 "xmltok_impl.c"
        var $62=$ptr_addr; //@line 1760 "xmltok_impl.c"
        var $63=$62+1; //@line 1760 "xmltok_impl.c"
        var $64=HEAP[$63]; //@line 1760 "xmltok_impl.c"
        var $65=($64); //@line 1760 "xmltok_impl.c"
        var $66=$61+76; //@line 1760 "xmltok_impl.c"
        var $67=$66+$65; //@line 1760 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 1760 "xmltok_impl.c"
        var $69=($68)==10; //@line 1760 "xmltok_impl.c"
        var $70=($69); //@line 1760 "xmltok_impl.c"
        $iftmp_1382=$70; //@line 1760 "xmltok_impl.c"
        __lastLabel__ = 11; __label__ = 13; break; //@line 1760 "xmltok_impl.c"
      case 12: // $bb11
        var $71=$ptr_addr; //@line 1760 "xmltok_impl.c"
        var $72=$71+1; //@line 1760 "xmltok_impl.c"
        var $73=HEAP[$72]; //@line 1760 "xmltok_impl.c"
        var $74=($73); //@line 1760 "xmltok_impl.c"
        var $75=$ptr_addr; //@line 1760 "xmltok_impl.c"
        var $76=$75; //@line 1760 "xmltok_impl.c"
        var $77=HEAP[$76]; //@line 1760 "xmltok_impl.c"
        var $78=($77); //@line 1760 "xmltok_impl.c"
        var $79=((($78)) & 255); //@line 1760 "xmltok_impl.c"
        var $80=((($74)) & 255); //@line 1760 "xmltok_impl.c"
        var $81=_unicode_byte_type($79, $80); //@line 1760 "xmltok_impl.c"
        var $82=($81)==10; //@line 1760 "xmltok_impl.c"
        var $83=($82); //@line 1760 "xmltok_impl.c"
        $iftmp_1382=$83; //@line 1760 "xmltok_impl.c"
        __lastLabel__ = 12; __label__ = 13; break; //@line 1760 "xmltok_impl.c"
      case 13: // $bb12
        var $84=__lastLabel__ == 12 ? $83 : ($70);
        var $toBool=($84)!=0; //@line 1760 "xmltok_impl.c"
        if ($toBool) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1760 "xmltok_impl.c"
      case 14: // $bb13
        var $85=$ptr_addr; //@line 1761 "xmltok_impl.c"
        var $86=$85+2; //@line 1761 "xmltok_impl.c"
        $ptr_addr=$86; //@line 1761 "xmltok_impl.c"
        __label__ = 15; break; //@line 1761 "xmltok_impl.c"
      case 15: // $bb14
        var $87=$pos_addr; //@line 1762 "xmltok_impl.c"
        var $88=$87+4; //@line 1762 "xmltok_impl.c"
        HEAP[$88]=-1; //@line 1762 "xmltok_impl.c"
        __label__ = 17; break; //@line 1762 "xmltok_impl.c"
      case 16: // $bb15
        var $89=$ptr_addr; //@line 1765 "xmltok_impl.c"
        var $90=$89+2; //@line 1765 "xmltok_impl.c"
        $ptr_addr=$90; //@line 1765 "xmltok_impl.c"
        __label__ = 17; break; //@line 1765 "xmltok_impl.c"
      case 17: // $bb16
        var $91=$pos_addr; //@line 1768 "xmltok_impl.c"
        var $92=$91+4; //@line 1768 "xmltok_impl.c"
        var $93=HEAP[$92]; //@line 1768 "xmltok_impl.c"
        var $94=($93) + 1; //@line 1768 "xmltok_impl.c"
        var $95=$pos_addr; //@line 1768 "xmltok_impl.c"
        var $96=$95+4; //@line 1768 "xmltok_impl.c"
        HEAP[$96]=$94; //@line 1768 "xmltok_impl.c"
        var $97=$ptr_addr; //@line 1744 "xmltok_impl.c"
        var $98=$end_addr; //@line 1744 "xmltok_impl.c"
        var $99=($97) < ($98); //@line 1744 "xmltok_impl.c"
        if ($99) { __label__ = 1; break; } else { __label__ = 18; break; } //@line 1744 "xmltok_impl.c"
      case 18: // $return
        ;
        return; //@line 1770 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _streqci($s1, $s2) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s1_addr;
        var $s2_addr;
        var $retval;
        var $0;
        var $c1;
        var $c2;
        $s1_addr=$s1;
        $s2_addr=$s2;
        __label__ = 1; break; //@line 916 "xmltok.c"
      case 1: // $bb
        var $1=$s1_addr; //@line 918 "xmltok.c"
        var $2=HEAP[$1]; //@line 918 "xmltok.c"
        $c1=$2; //@line 918 "xmltok.c"
        var $3=$s1_addr; //@line 918 "xmltok.c"
        var $4=$3+1; //@line 918 "xmltok.c"
        $s1_addr=$4; //@line 918 "xmltok.c"
        var $5=$s2_addr; //@line 919 "xmltok.c"
        var $6=HEAP[$5]; //@line 919 "xmltok.c"
        $c2=$6; //@line 919 "xmltok.c"
        var $7=$s2_addr; //@line 919 "xmltok.c"
        var $8=$7+1; //@line 919 "xmltok.c"
        $s2_addr=$8; //@line 919 "xmltok.c"
        var $9=$c1; //@line 920 "xmltok.c"
        var $10=($9) > 96; //@line 920 "xmltok.c"
        var $11=$c1; //@line 920 "xmltok.c"
        var $12=($11) <= 122; //@line 920 "xmltok.c"
        var $or_cond=($10) & ($12);
        if ($or_cond) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 920 "xmltok.c"
      case 2: // $bb2
        var $13=$c1; //@line 921 "xmltok.c"
        var $14=($13) + -32; //@line 921 "xmltok.c"
        $c1=$14; //@line 921 "xmltok.c"
        __label__ = 3; break; //@line 921 "xmltok.c"
      case 3: // $bb3
        var $15=$c2; //@line 922 "xmltok.c"
        var $16=($15) > 96; //@line 922 "xmltok.c"
        var $17=$c2; //@line 922 "xmltok.c"
        var $18=($17) <= 122; //@line 922 "xmltok.c"
        var $or_cond3=($16) & ($18);
        if ($or_cond3) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 922 "xmltok.c"
      case 4: // $bb5
        var $19=$c2; //@line 923 "xmltok.c"
        var $20=($19) + -32; //@line 923 "xmltok.c"
        $c2=$20; //@line 923 "xmltok.c"
        __label__ = 5; break; //@line 923 "xmltok.c"
      case 5: // $bb6
        var $21=$c1; //@line 924 "xmltok.c"
        var $22=$c2; //@line 924 "xmltok.c"
        var $23=($21)!=($22); //@line 924 "xmltok.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 924 "xmltok.c"
      case 6: // $bb7
        $0=0; //@line 925 "xmltok.c"
        __label__ = 9; break; //@line 925 "xmltok.c"
      case 7: // $bb8
        var $24=$c1; //@line 926 "xmltok.c"
        var $25=($24)==0; //@line 926 "xmltok.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 1; break; } //@line 926 "xmltok.c"
      case 8: // $bb10
        $0=1; //@line 929 "xmltok.c"
        __label__ = 9; break; //@line 929 "xmltok.c"
      case 9: // $bb11
        var $26=$0; //@line 925 "xmltok.c"
        $retval=$26; //@line 925 "xmltok.c"
        var $retval12=$retval; //@line 925 "xmltok.c"
        ;
        return $retval12; //@line 925 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initUpdatePosition($enc, $ptr, $end, $pos) {
    ;
    var __label__;
  
    var $enc_addr;
    var $ptr_addr;
    var $end_addr;
    var $pos_addr;
    $enc_addr=$enc;
    $ptr_addr=$ptr;
    $end_addr=$end;
    $pos_addr=$pos;
    var $0=$ptr_addr; //@line 936 "xmltok.c"
    var $1=$end_addr; //@line 936 "xmltok.c"
    var $2=$pos_addr; //@line 936 "xmltok.c"
    _normal_updatePosition(_utf8_encoding, $0, $1, $2); //@line 936 "xmltok.c"
    ;
    return; //@line 937 "xmltok.c"
  }
  

  function _toAscii($enc, $ptr, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 9; _memset(__stackBase__, 0, 9);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr=__stackBase__;
        var $end_addr;
        var $retval;
        var $0;
        var $buf=__stackBase__+4;
        var $p=__stackBase__+5;
        $enc_addr=$enc;
        HEAP[$ptr_addr]=$ptr;
        $end_addr=$end;
        var $buf1=$buf; //@line 943 "xmltok.c"
        HEAP[$p]=$buf1; //@line 943 "xmltok.c"
        var $1=$enc_addr; //@line 944 "xmltok.c"
        var $2=$1+60; //@line 944 "xmltok.c"
        var $3=HEAP[$2]; //@line 944 "xmltok.c"
        var $4=HEAP[$p]; //@line 944 "xmltok.c"
        var $5=$4+1; //@line 944 "xmltok.c"
        var $6=$enc_addr; //@line 944 "xmltok.c"
        var $7=$end_addr; //@line 944 "xmltok.c"
        FUNCTION_TABLE[$3]($6, $ptr_addr, $7, $p, $5); //@line 944 "xmltok.c"
        var $8=HEAP[$p]; //@line 945 "xmltok.c"
        var $buf2=$buf; //@line 945 "xmltok.c"
        var $9=($buf2)==($8); //@line 945 "xmltok.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 945 "xmltok.c"
      case 1: // $bb
        $0=-1; //@line 946 "xmltok.c"
        __label__ = 3; break; //@line 946 "xmltok.c"
      case 2: // $bb3
        var $10=$buf; //@line 948 "xmltok.c"
        var $11=HEAP[$10]; //@line 948 "xmltok.c"
        var $12=($11); //@line 948 "xmltok.c"
        $0=$12; //@line 948 "xmltok.c"
        __label__ = 3; break; //@line 948 "xmltok.c"
      case 3: // $bb4
        var $13=$0; //@line 946 "xmltok.c"
        $retval=$13; //@line 946 "xmltok.c"
        var $retval5=$retval; //@line 946 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 946 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _isSpace($c) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $c_addr;
        var $retval;
        var $0;
        $c_addr=$c;
        var $1=$c_addr; //@line 954 "xmltok.c"
        if ($1 == 9) {
          __label__ = 1; break;
        }
        else if ($1 == 10) {
          __label__ = 1; break;
        }
        else if ($1 == 13) {
          __label__ = 1; break;
        }
        else if ($1 == 32) {
          __label__ = 1; break;
        }
        else {
        __label__ = 2; break;
        }
        
      case 1: // $bb
        $0=1; //@line 959 "xmltok.c"
        __label__ = 3; break; //@line 959 "xmltok.c"
      case 2: // $bb1
        $0=0; //@line 961 "xmltok.c"
        __label__ = 3; break; //@line 961 "xmltok.c"
      case 3: // $bb2
        var $2=$0; //@line 959 "xmltok.c"
        $retval=$2; //@line 959 "xmltok.c"
        var $retval3=$retval; //@line 959 "xmltok.c"
        ;
        return $retval3; //@line 959 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _parsePseudoAttribute($enc, $ptr, $end, $namePtr, $nameEndPtr, $valPtr, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr;
        var $end_addr;
        var $namePtr_addr;
        var $nameEndPtr_addr;
        var $valPtr_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $c;
        var $open;
        $enc_addr=$enc;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $namePtr_addr=$namePtr;
        $nameEndPtr_addr=$nameEndPtr;
        $valPtr_addr=$valPtr;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 978 "xmltok.c"
        var $2=$end_addr; //@line 978 "xmltok.c"
        var $3=($1)==($2); //@line 978 "xmltok.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 978 "xmltok.c"
      case 1: // $bb
        var $4=$namePtr_addr; //@line 979 "xmltok.c"
        HEAP[$4]=0; //@line 979 "xmltok.c"
        $0=1; //@line 980 "xmltok.c"
        __label__ = 32; break; //@line 980 "xmltok.c"
      case 2: // $bb1
        var $5=$enc_addr; //@line 982 "xmltok.c"
        var $6=$ptr_addr; //@line 982 "xmltok.c"
        var $7=$end_addr; //@line 982 "xmltok.c"
        var $8=_toAscii($5, $6, $7); //@line 982 "xmltok.c"
        var $9=_isSpace($8); //@line 982 "xmltok.c"
        var $10=($9)==0; //@line 982 "xmltok.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 982 "xmltok.c"
      case 3: // $bb2
        var $11=$nextTokPtr_addr; //@line 983 "xmltok.c"
        var $12=$ptr_addr; //@line 983 "xmltok.c"
        HEAP[$11]=$12; //@line 983 "xmltok.c"
        $0=0; //@line 984 "xmltok.c"
        __label__ = 32; break; //@line 984 "xmltok.c"
      case 4: // $bb3
        var $13=$enc_addr; //@line 987 "xmltok.c"
        var $14=$13+68; //@line 987 "xmltok.c"
        var $15=HEAP[$14]; //@line 987 "xmltok.c"
        var $16=$ptr_addr; //@line 987 "xmltok.c"
        var $17=$16+$15; //@line 987 "xmltok.c"
        $ptr_addr=$17; //@line 987 "xmltok.c"
        var $18=$enc_addr; //@line 988 "xmltok.c"
        var $19=$ptr_addr; //@line 988 "xmltok.c"
        var $20=$end_addr; //@line 988 "xmltok.c"
        var $21=_toAscii($18, $19, $20); //@line 988 "xmltok.c"
        var $22=_isSpace($21); //@line 988 "xmltok.c"
        var $23=($22)!=0; //@line 988 "xmltok.c"
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 988 "xmltok.c"
      case 5: // $bb4
        var $24=$ptr_addr; //@line 989 "xmltok.c"
        var $25=$end_addr; //@line 989 "xmltok.c"
        var $26=($24)==($25); //@line 989 "xmltok.c"
        var $27=$namePtr_addr; //@line 990 "xmltok.c"
        if ($26) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 989 "xmltok.c"
      case 6: // $bb5
        HEAP[$27]=0; //@line 990 "xmltok.c"
        $0=1; //@line 991 "xmltok.c"
        __label__ = 32; break; //@line 991 "xmltok.c"
      case 7: // $bb6
        var $28=$ptr_addr; //@line 993 "xmltok.c"
        HEAP[$27]=$28; //@line 993 "xmltok.c"
        __label__ = 8; break; //@line 993 "xmltok.c"
      case 8: // $bb7
        var $29=$enc_addr; //@line 995 "xmltok.c"
        var $30=$ptr_addr; //@line 995 "xmltok.c"
        var $31=$end_addr; //@line 995 "xmltok.c"
        var $32=_toAscii($29, $30, $31); //@line 995 "xmltok.c"
        $c=$32; //@line 995 "xmltok.c"
        var $33=($32)==-1; //@line 996 "xmltok.c"
        if ($33) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 996 "xmltok.c"
      case 9: // $bb8
        var $34=$nextTokPtr_addr; //@line 997 "xmltok.c"
        var $35=$ptr_addr; //@line 997 "xmltok.c"
        HEAP[$34]=$35; //@line 997 "xmltok.c"
        $0=0; //@line 998 "xmltok.c"
        __label__ = 32; break; //@line 998 "xmltok.c"
      case 10: // $bb9
        var $36=$c; //@line 1000 "xmltok.c"
        var $37=($36)==61; //@line 1000 "xmltok.c"
        if ($37) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1000 "xmltok.c"
      case 11: // $bb10
        var $38=$nameEndPtr_addr; //@line 1001 "xmltok.c"
        var $39=$ptr_addr; //@line 1001 "xmltok.c"
        HEAP[$38]=$39; //@line 1001 "xmltok.c"
        __label__ = 18; break; //@line 1001 "xmltok.c"
      case 12: // $bb11
        var $40=$c; //@line 1004 "xmltok.c"
        var $41=_isSpace($40); //@line 1004 "xmltok.c"
        var $42=($41)!=0; //@line 1004 "xmltok.c"
        if ($42) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 1004 "xmltok.c"
      case 13: // $bb12
        var $43=$nameEndPtr_addr; //@line 1005 "xmltok.c"
        var $44=$ptr_addr; //@line 1005 "xmltok.c"
        HEAP[$43]=$44; //@line 1005 "xmltok.c"
        __label__ = 14; break; //@line 1005 "xmltok.c"
      case 14: // $bb13
        var $45=$enc_addr; //@line 1007 "xmltok.c"
        var $46=$45+68; //@line 1007 "xmltok.c"
        var $47=HEAP[$46]; //@line 1007 "xmltok.c"
        var $48=$ptr_addr; //@line 1007 "xmltok.c"
        var $49=$48+$47; //@line 1007 "xmltok.c"
        $ptr_addr=$49; //@line 1007 "xmltok.c"
        var $50=$enc_addr; //@line 1008 "xmltok.c"
        var $51=$ptr_addr; //@line 1008 "xmltok.c"
        var $52=$end_addr; //@line 1008 "xmltok.c"
        var $53=_toAscii($50, $51, $52); //@line 1008 "xmltok.c"
        $c=$53; //@line 1008 "xmltok.c"
        var $54=$c; //@line 1008 "xmltok.c"
        var $55=_isSpace($54); //@line 1008 "xmltok.c"
        var $56=($55)!=0; //@line 1008 "xmltok.c"
        if ($56) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1008 "xmltok.c"
      case 15: // $bb14
        var $57=$c; //@line 1009 "xmltok.c"
        var $58=($57)!=61; //@line 1009 "xmltok.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 1009 "xmltok.c"
      case 16: // $bb15
        var $59=$nextTokPtr_addr; //@line 1010 "xmltok.c"
        var $60=$ptr_addr; //@line 1010 "xmltok.c"
        HEAP[$59]=$60; //@line 1010 "xmltok.c"
        $0=0; //@line 1011 "xmltok.c"
        __label__ = 32; break; //@line 1011 "xmltok.c"
      case 17: // $bb17
        var $61=$enc_addr; //@line 1015 "xmltok.c"
        var $62=$61+68; //@line 1015 "xmltok.c"
        var $63=HEAP[$62]; //@line 1015 "xmltok.c"
        var $64=$ptr_addr; //@line 1015 "xmltok.c"
        var $65=$64+$63; //@line 1015 "xmltok.c"
        $ptr_addr=$65; //@line 1015 "xmltok.c"
        __label__ = 8; break; //@line 1015 "xmltok.c"
      case 18: // $bb18
        var $66=$namePtr_addr; //@line 1017 "xmltok.c"
        var $67=HEAP[$66]; //@line 1017 "xmltok.c"
        var $68=$ptr_addr; //@line 1017 "xmltok.c"
        var $69=($67)==($68); //@line 1017 "xmltok.c"
        if ($69) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1017 "xmltok.c"
      case 19: // $bb19
        var $70=$nextTokPtr_addr; //@line 1018 "xmltok.c"
        var $71=$ptr_addr; //@line 1018 "xmltok.c"
        HEAP[$70]=$71; //@line 1018 "xmltok.c"
        $0=0; //@line 1019 "xmltok.c"
        __label__ = 32; break; //@line 1019 "xmltok.c"
      case 20: // $bb20
        var $72=$enc_addr; //@line 1021 "xmltok.c"
        var $73=$72+68; //@line 1021 "xmltok.c"
        var $74=HEAP[$73]; //@line 1021 "xmltok.c"
        var $75=$ptr_addr; //@line 1021 "xmltok.c"
        var $76=$75+$74; //@line 1021 "xmltok.c"
        $ptr_addr=$76; //@line 1021 "xmltok.c"
        var $77=$enc_addr; //@line 1022 "xmltok.c"
        var $78=$ptr_addr; //@line 1022 "xmltok.c"
        var $79=$end_addr; //@line 1022 "xmltok.c"
        var $80=_toAscii($77, $78, $79); //@line 1022 "xmltok.c"
        $c=$80; //@line 1022 "xmltok.c"
        var $81=$c; //@line 1023 "xmltok.c"
        var $82=_isSpace($81); //@line 1023 "xmltok.c"
        var $83=($82)!=0; //@line 1023 "xmltok.c"
        if ($83) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1023 "xmltok.c"
      case 21: // $bb21
        var $84=$enc_addr; //@line 1024 "xmltok.c"
        var $85=$84+68; //@line 1024 "xmltok.c"
        var $86=HEAP[$85]; //@line 1024 "xmltok.c"
        var $87=$ptr_addr; //@line 1024 "xmltok.c"
        var $88=$87+$86; //@line 1024 "xmltok.c"
        $ptr_addr=$88; //@line 1024 "xmltok.c"
        var $89=$enc_addr; //@line 1025 "xmltok.c"
        var $90=$ptr_addr; //@line 1025 "xmltok.c"
        var $91=$end_addr; //@line 1025 "xmltok.c"
        var $92=_toAscii($89, $90, $91); //@line 1025 "xmltok.c"
        $c=$92; //@line 1025 "xmltok.c"
        var $93=$c; //@line 1023 "xmltok.c"
        var $94=_isSpace($93); //@line 1023 "xmltok.c"
        var $95=($94)!=0; //@line 1023 "xmltok.c"
        if ($95) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1023 "xmltok.c"
      case 22: // $bb23
        var $96=$c; //@line 1027 "xmltok.c"
        var $97=($96)!=34; //@line 1027 "xmltok.c"
        var $98=$c; //@line 1027 "xmltok.c"
        var $99=($98)!=39; //@line 1027 "xmltok.c"
        var $or_cond=($97) & ($99);
        if ($or_cond) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1027 "xmltok.c"
      case 23: // $bb25
        var $100=$nextTokPtr_addr; //@line 1028 "xmltok.c"
        var $101=$ptr_addr; //@line 1028 "xmltok.c"
        HEAP[$100]=$101; //@line 1028 "xmltok.c"
        $0=0; //@line 1029 "xmltok.c"
        __label__ = 32; break; //@line 1029 "xmltok.c"
      case 24: // $bb26
        var $102=$c; //@line 1031 "xmltok.c"
        var $103=((($102)) & 255); //@line 1031 "xmltok.c"
        $open=$103; //@line 1031 "xmltok.c"
        var $104=$enc_addr; //@line 1032 "xmltok.c"
        var $105=$104+68; //@line 1032 "xmltok.c"
        var $106=HEAP[$105]; //@line 1032 "xmltok.c"
        var $107=$ptr_addr; //@line 1032 "xmltok.c"
        var $108=$107+$106; //@line 1032 "xmltok.c"
        $ptr_addr=$108; //@line 1032 "xmltok.c"
        var $109=$valPtr_addr; //@line 1033 "xmltok.c"
        var $110=$ptr_addr; //@line 1033 "xmltok.c"
        HEAP[$109]=$110; //@line 1033 "xmltok.c"
        __label__ = 25; break; //@line 1033 "xmltok.c"
      case 25: // $bb27
        var $111=$enc_addr; //@line 1035 "xmltok.c"
        var $112=$ptr_addr; //@line 1035 "xmltok.c"
        var $113=$end_addr; //@line 1035 "xmltok.c"
        var $114=_toAscii($111, $112, $113); //@line 1035 "xmltok.c"
        $c=$114; //@line 1035 "xmltok.c"
        var $115=$open; //@line 1036 "xmltok.c"
        var $116=($115); //@line 1036 "xmltok.c"
        var $117=$c; //@line 1036 "xmltok.c"
        var $118=($116)==($117); //@line 1036 "xmltok.c"
        if ($118) { __label__ = 31; break; } else { __label__ = 26; break; } //@line 1036 "xmltok.c"
      case 26: // $bb28
        var $119=$c; //@line 1038 "xmltok.c"
        var $120=($119) <= 96; //@line 1038 "xmltok.c"
        var $121=$c; //@line 1038 "xmltok.c"
        var $122=($121) > 122; //@line 1038 "xmltok.c"
        var $or_cond3=($120) | ($122);
        if ($or_cond3) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 1038 "xmltok.c"
      case 27: // $bb30
        var $123=$c; //@line 1038 "xmltok.c"
        var $124=($123) <= 64; //@line 1038 "xmltok.c"
        var $125=$c; //@line 1038 "xmltok.c"
        var $126=($125) > 90; //@line 1038 "xmltok.c"
        var $or_cond5=($124) | ($126);
        if ($or_cond5) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 1038 "xmltok.c"
      case 28: // $bb32
        var $127=$c; //@line 1038 "xmltok.c"
        var $128=($127) <= 47; //@line 1038 "xmltok.c"
        var $129=$c; //@line 1038 "xmltok.c"
        var $130=($129) > 57; //@line 1038 "xmltok.c"
        var $or_cond7=($128) | ($130);
        var $131=$c; //@line 1038 "xmltok.c"
        var $132=($131)!=46; //@line 1038 "xmltok.c"
        var $or_cond9=($or_cond7) & ($132);
        var $133=$c; //@line 1038 "xmltok.c"
        var $134=($133)!=45; //@line 1038 "xmltok.c"
        var $or_cond11=($or_cond9) & ($134);
        var $135=$c; //@line 1038 "xmltok.c"
        var $136=($135)!=95; //@line 1038 "xmltok.c"
        var $or_cond13=($or_cond11) & ($136);
        if ($or_cond13) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1038 "xmltok.c"
      case 29: // $bb37
        var $137=$nextTokPtr_addr; //@line 1044 "xmltok.c"
        var $138=$ptr_addr; //@line 1044 "xmltok.c"
        HEAP[$137]=$138; //@line 1044 "xmltok.c"
        $0=0; //@line 1045 "xmltok.c"
        __label__ = 32; break; //@line 1045 "xmltok.c"
      case 30: // $bb38
        var $139=$enc_addr; //@line 1034 "xmltok.c"
        var $140=$139+68; //@line 1034 "xmltok.c"
        var $141=HEAP[$140]; //@line 1034 "xmltok.c"
        var $142=$ptr_addr; //@line 1034 "xmltok.c"
        var $143=$142+$141; //@line 1034 "xmltok.c"
        $ptr_addr=$143; //@line 1034 "xmltok.c"
        __label__ = 25; break; //@line 1034 "xmltok.c"
      case 31: // $bb39
        var $144=$enc_addr; //@line 1048 "xmltok.c"
        var $145=$144+68; //@line 1048 "xmltok.c"
        var $146=HEAP[$145]; //@line 1048 "xmltok.c"
        var $147=$ptr_addr; //@line 1048 "xmltok.c"
        var $148=$147+$146; //@line 1048 "xmltok.c"
        var $149=$nextTokPtr_addr; //@line 1048 "xmltok.c"
        HEAP[$149]=$148; //@line 1048 "xmltok.c"
        $0=1; //@line 1049 "xmltok.c"
        __label__ = 32; break; //@line 1049 "xmltok.c"
      case 32: // $bb40
        var $150=$0; //@line 980 "xmltok.c"
        $retval=$150; //@line 980 "xmltok.c"
        var $retval41=$retval; //@line 980 "xmltok.c"
        ;
        return $retval41; //@line 980 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doParseXmlDecl($encodingFinder, $isGeneralTextEntity, $enc, $ptr, $end, $badPtr, $versionPtr, $versionEndPtr, $encodingName, $encoding, $standalone) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; _memset(__stackBase__, 0, 16);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encodingFinder_addr;
        var $isGeneralTextEntity_addr;
        var $enc_addr;
        var $ptr_addr=__stackBase__;
        var $end_addr;
        var $badPtr_addr;
        var $versionPtr_addr;
        var $versionEndPtr_addr;
        var $encodingName_addr;
        var $encoding_addr;
        var $standalone_addr;
        var $retval;
        var $0;
        var $val=__stackBase__+4;
        var $name=__stackBase__+8;
        var $nameEnd=__stackBase__+12;
        var $c;
        $encodingFinder_addr=$encodingFinder;
        $isGeneralTextEntity_addr=$isGeneralTextEntity;
        $enc_addr=$enc;
        HEAP[$ptr_addr]=$ptr;
        $end_addr=$end;
        $badPtr_addr=$badPtr;
        $versionPtr_addr=$versionPtr;
        $versionEndPtr_addr=$versionEndPtr;
        $encodingName_addr=$encodingName;
        $encoding_addr=$encoding;
        $standalone_addr=$standalone;
        HEAP[$val]=0; //@line 1088 "xmltok.c"
        HEAP[$name]=0; //@line 1089 "xmltok.c"
        HEAP[$nameEnd]=0; //@line 1090 "xmltok.c"
        var $1=HEAP[$ptr_addr]; //@line 1091 "xmltok.c"
        var $2=$enc_addr; //@line 1091 "xmltok.c"
        var $3=$2+68; //@line 1091 "xmltok.c"
        var $4=HEAP[$3]; //@line 1091 "xmltok.c"
        var $5=($4) * 5; //@line 1091 "xmltok.c"
        var $6=$1+$5; //@line 1091 "xmltok.c"
        HEAP[$ptr_addr]=$6; //@line 1091 "xmltok.c"
        var $7=$enc_addr; //@line 1092 "xmltok.c"
        var $8=$7+68; //@line 1092 "xmltok.c"
        var $9=HEAP[$8]; //@line 1092 "xmltok.c"
        var $10=($9) * -2; //@line 1092 "xmltok.c"
        var $11=$end_addr; //@line 1092 "xmltok.c"
        var $12=$11+$10; //@line 1092 "xmltok.c"
        $end_addr=$12; //@line 1092 "xmltok.c"
        var $13=HEAP[$ptr_addr]; //@line 1093 "xmltok.c"
        var $14=$enc_addr; //@line 1093 "xmltok.c"
        var $15=$end_addr; //@line 1093 "xmltok.c"
        var $16=_parsePseudoAttribute($14, $13, $15, $name, $nameEnd, $val, $ptr_addr); //@line 1093 "xmltok.c"
        var $17=($16)==0; //@line 1093 "xmltok.c"
        var $18=HEAP[$name]; //@line 1093 "xmltok.c"
        var $19=($18)==0; //@line 1093 "xmltok.c"
        var $or_cond=($17) | ($19);
        if ($or_cond) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1093 "xmltok.c"
      case 1: // $bb1
        var $20=HEAP[$ptr_addr]; //@line 1095 "xmltok.c"
        var $21=$badPtr_addr; //@line 1095 "xmltok.c"
        HEAP[$21]=$20; //@line 1095 "xmltok.c"
        $0=0; //@line 1096 "xmltok.c"
        __label__ = 42; break; //@line 1096 "xmltok.c"
      case 2: // $bb2
        var $22=$enc_addr; //@line 1098 "xmltok.c"
        var $23=$22+28; //@line 1098 "xmltok.c"
        var $24=HEAP[$23]; //@line 1098 "xmltok.c"
        var $25=HEAP[$nameEnd]; //@line 1098 "xmltok.c"
        var $26=HEAP[$name]; //@line 1098 "xmltok.c"
        var $27=$enc_addr; //@line 1098 "xmltok.c"
        var $28=FUNCTION_TABLE[$24]($27, $26, $25, _KW_version); //@line 1098 "xmltok.c"
        var $29=($28)==0; //@line 1098 "xmltok.c"
        if ($29) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1098 "xmltok.c"
      case 3: // $bb3
        var $30=$isGeneralTextEntity_addr; //@line 1099 "xmltok.c"
        var $31=($30)==0; //@line 1099 "xmltok.c"
        if ($31) { __label__ = 4; break; } else { __label__ = 15; break; } //@line 1099 "xmltok.c"
      case 4: // $bb4
        var $32=HEAP[$name]; //@line 1100 "xmltok.c"
        var $33=$badPtr_addr; //@line 1100 "xmltok.c"
        HEAP[$33]=$32; //@line 1100 "xmltok.c"
        $0=0; //@line 1101 "xmltok.c"
        __label__ = 42; break; //@line 1101 "xmltok.c"
      case 5: // $bb6
        var $34=$versionPtr_addr; //@line 1105 "xmltok.c"
        var $35=($34)!=0; //@line 1105 "xmltok.c"
        if ($35) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1105 "xmltok.c"
      case 6: // $bb7
        var $36=HEAP[$val]; //@line 1106 "xmltok.c"
        var $37=$versionPtr_addr; //@line 1106 "xmltok.c"
        HEAP[$37]=$36; //@line 1106 "xmltok.c"
        __label__ = 7; break; //@line 1106 "xmltok.c"
      case 7: // $bb8
        var $38=$versionEndPtr_addr; //@line 1107 "xmltok.c"
        var $39=($38)!=0; //@line 1107 "xmltok.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1107 "xmltok.c"
      case 8: // $bb9
        var $40=HEAP[$ptr_addr]; //@line 1108 "xmltok.c"
        var $41=$versionEndPtr_addr; //@line 1108 "xmltok.c"
        HEAP[$41]=$40; //@line 1108 "xmltok.c"
        __label__ = 9; break; //@line 1108 "xmltok.c"
      case 9: // $bb10
        var $42=HEAP[$ptr_addr]; //@line 1109 "xmltok.c"
        var $43=$enc_addr; //@line 1109 "xmltok.c"
        var $44=$end_addr; //@line 1109 "xmltok.c"
        var $45=_parsePseudoAttribute($43, $42, $44, $name, $nameEnd, $val, $ptr_addr); //@line 1109 "xmltok.c"
        var $46=($45)==0; //@line 1109 "xmltok.c"
        if ($46) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1109 "xmltok.c"
      case 10: // $bb11
        var $47=HEAP[$ptr_addr]; //@line 1110 "xmltok.c"
        var $48=$badPtr_addr; //@line 1110 "xmltok.c"
        HEAP[$48]=$47; //@line 1110 "xmltok.c"
        $0=0; //@line 1111 "xmltok.c"
        __label__ = 42; break; //@line 1111 "xmltok.c"
      case 11: // $bb12
        var $49=HEAP[$name]; //@line 1113 "xmltok.c"
        var $50=($49)==0; //@line 1113 "xmltok.c"
        if ($50) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 1113 "xmltok.c"
      case 12: // $bb13
        var $51=$isGeneralTextEntity_addr; //@line 1114 "xmltok.c"
        var $52=($51)!=0; //@line 1114 "xmltok.c"
        if ($52) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1114 "xmltok.c"
      case 13: // $bb14
        var $53=HEAP[$ptr_addr]; //@line 1116 "xmltok.c"
        var $54=$badPtr_addr; //@line 1116 "xmltok.c"
        HEAP[$54]=$53; //@line 1116 "xmltok.c"
        $0=0; //@line 1117 "xmltok.c"
        __label__ = 42; break; //@line 1117 "xmltok.c"
      case 14: // $bb15
        $0=1; //@line 1119 "xmltok.c"
        __label__ = 42; break; //@line 1119 "xmltok.c"
      case 15: // $bb16
        var $55=$enc_addr; //@line 1122 "xmltok.c"
        var $56=$55+28; //@line 1122 "xmltok.c"
        var $57=HEAP[$56]; //@line 1122 "xmltok.c"
        var $58=HEAP[$nameEnd]; //@line 1122 "xmltok.c"
        var $59=HEAP[$name]; //@line 1122 "xmltok.c"
        var $60=$enc_addr; //@line 1122 "xmltok.c"
        var $61=FUNCTION_TABLE[$57]($60, $59, $58, __str86); //@line 1122 "xmltok.c"
        var $62=($61)!=0; //@line 1122 "xmltok.c"
        if ($62) { __label__ = 16; break; } else { __label__ = 27; break; } //@line 1122 "xmltok.c"
      case 16: // $bb17
        var $63=HEAP[$val]; //@line 1123 "xmltok.c"
        var $64=$enc_addr; //@line 1123 "xmltok.c"
        var $65=$end_addr; //@line 1123 "xmltok.c"
        var $66=_toAscii($64, $63, $65); //@line 1123 "xmltok.c"
        $c=$66; //@line 1123 "xmltok.c"
        var $67=$c; //@line 1124 "xmltok.c"
        var $68=($67) <= 96; //@line 1124 "xmltok.c"
        var $69=$c; //@line 1124 "xmltok.c"
        var $70=($69) > 122; //@line 1124 "xmltok.c"
        var $or_cond3=($68) | ($70);
        if ($or_cond3) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 1124 "xmltok.c"
      case 17: // $bb19
        var $71=$c; //@line 1124 "xmltok.c"
        var $72=($71) <= 64; //@line 1124 "xmltok.c"
        var $73=$c; //@line 1124 "xmltok.c"
        var $74=($73) > 90; //@line 1124 "xmltok.c"
        var $or_cond5=($72) | ($74);
        if ($or_cond5) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1124 "xmltok.c"
      case 18: // $bb21
        var $75=HEAP[$val]; //@line 1125 "xmltok.c"
        var $76=$badPtr_addr; //@line 1125 "xmltok.c"
        HEAP[$76]=$75; //@line 1125 "xmltok.c"
        $0=0; //@line 1126 "xmltok.c"
        __label__ = 42; break; //@line 1126 "xmltok.c"
      case 19: // $bb22
        var $77=$encodingName_addr; //@line 1128 "xmltok.c"
        var $78=($77)!=0; //@line 1128 "xmltok.c"
        if ($78) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1128 "xmltok.c"
      case 20: // $bb23
        var $79=HEAP[$val]; //@line 1129 "xmltok.c"
        var $80=$encodingName_addr; //@line 1129 "xmltok.c"
        HEAP[$80]=$79; //@line 1129 "xmltok.c"
        __label__ = 21; break; //@line 1129 "xmltok.c"
      case 21: // $bb24
        var $81=$encoding_addr; //@line 1130 "xmltok.c"
        var $82=($81)!=0; //@line 1130 "xmltok.c"
        if ($82) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1130 "xmltok.c"
      case 22: // $bb25
        var $83=HEAP[$ptr_addr]; //@line 1131 "xmltok.c"
        var $84=$enc_addr; //@line 1131 "xmltok.c"
        var $85=$84+68; //@line 1131 "xmltok.c"
        var $86=HEAP[$85]; //@line 1131 "xmltok.c"
        var $87=0 - ($86); //@line 1131 "xmltok.c"
        var $88=$83+$87; //@line 1131 "xmltok.c"
        var $89=HEAP[$val]; //@line 1131 "xmltok.c"
        var $90=$encodingFinder_addr; //@line 1131 "xmltok.c"
        var $91=$enc_addr; //@line 1131 "xmltok.c"
        var $92=FUNCTION_TABLE[$90]($91, $89, $88); //@line 1131 "xmltok.c"
        var $93=$encoding_addr; //@line 1131 "xmltok.c"
        HEAP[$93]=$92; //@line 1131 "xmltok.c"
        __label__ = 23; break; //@line 1131 "xmltok.c"
      case 23: // $bb26
        var $94=HEAP[$ptr_addr]; //@line 1132 "xmltok.c"
        var $95=$enc_addr; //@line 1132 "xmltok.c"
        var $96=$end_addr; //@line 1132 "xmltok.c"
        var $97=_parsePseudoAttribute($95, $94, $96, $name, $nameEnd, $val, $ptr_addr); //@line 1132 "xmltok.c"
        var $98=($97)==0; //@line 1132 "xmltok.c"
        if ($98) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1132 "xmltok.c"
      case 24: // $bb27
        var $99=HEAP[$ptr_addr]; //@line 1133 "xmltok.c"
        var $100=$badPtr_addr; //@line 1133 "xmltok.c"
        HEAP[$100]=$99; //@line 1133 "xmltok.c"
        $0=0; //@line 1134 "xmltok.c"
        __label__ = 42; break; //@line 1134 "xmltok.c"
      case 25: // $bb28
        var $101=HEAP[$name]; //@line 1136 "xmltok.c"
        var $102=($101)==0; //@line 1136 "xmltok.c"
        if ($102) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1136 "xmltok.c"
      case 26: // $bb29
        $0=1; //@line 1137 "xmltok.c"
        __label__ = 42; break; //@line 1137 "xmltok.c"
      case 27: // $bb30
        var $103=$enc_addr; //@line 1139 "xmltok.c"
        var $104=$103+28; //@line 1139 "xmltok.c"
        var $105=HEAP[$104]; //@line 1139 "xmltok.c"
        var $106=HEAP[$nameEnd]; //@line 1139 "xmltok.c"
        var $107=HEAP[$name]; //@line 1139 "xmltok.c"
        var $108=$enc_addr; //@line 1139 "xmltok.c"
        var $109=FUNCTION_TABLE[$105]($108, $107, $106, _KW_standalone); //@line 1139 "xmltok.c"
        var $110=($109)==0; //@line 1139 "xmltok.c"
        if ($110) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 1139 "xmltok.c"
      case 28: // $bb31
        var $111=$isGeneralTextEntity_addr; //@line 1139 "xmltok.c"
        var $112=($111)!=0; //@line 1139 "xmltok.c"
        if ($112) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1139 "xmltok.c"
      case 29: // $bb32
        var $113=HEAP[$name]; //@line 1141 "xmltok.c"
        var $114=$badPtr_addr; //@line 1141 "xmltok.c"
        HEAP[$114]=$113; //@line 1141 "xmltok.c"
        $0=0; //@line 1142 "xmltok.c"
        __label__ = 42; break; //@line 1142 "xmltok.c"
      case 30: // $bb33
        var $115=$enc_addr; //@line 1144 "xmltok.c"
        var $116=$115+28; //@line 1144 "xmltok.c"
        var $117=HEAP[$116]; //@line 1144 "xmltok.c"
        var $118=HEAP[$ptr_addr]; //@line 1144 "xmltok.c"
        var $119=$enc_addr; //@line 1144 "xmltok.c"
        var $120=$119+68; //@line 1144 "xmltok.c"
        var $121=HEAP[$120]; //@line 1144 "xmltok.c"
        var $122=0 - ($121); //@line 1144 "xmltok.c"
        var $123=$118+$122; //@line 1144 "xmltok.c"
        var $124=HEAP[$val]; //@line 1144 "xmltok.c"
        var $125=$enc_addr; //@line 1144 "xmltok.c"
        var $126=FUNCTION_TABLE[$117]($125, $124, $123, _KW_yes); //@line 1144 "xmltok.c"
        var $127=($126)!=0; //@line 1144 "xmltok.c"
        if ($127) { __label__ = 31; break; } else { __label__ = 34; break; } //@line 1144 "xmltok.c"
      case 31: // $bb34
        var $128=$standalone_addr; //@line 1145 "xmltok.c"
        var $129=($128)!=0; //@line 1145 "xmltok.c"
        if ($129) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1145 "xmltok.c"
      case 32: // $bb35
        var $130=$standalone_addr; //@line 1146 "xmltok.c"
        HEAP[$130]=1; //@line 1146 "xmltok.c"
        __label__ = 33; break; //@line 1146 "xmltok.c"
      case 33: // $bb44_preheader
        var $131=HEAP[$ptr_addr]; //@line 1156 "xmltok.c"
        var $132=$enc_addr; //@line 1156 "xmltok.c"
        var $133=$end_addr; //@line 1156 "xmltok.c"
        var $134=_toAscii($132, $131, $133); //@line 1156 "xmltok.c"
        var $135=_isSpace($134); //@line 1156 "xmltok.c"
        var $136=($135)!=0; //@line 1156 "xmltok.c"
        var $137=HEAP[$ptr_addr]; //@line 1157 "xmltok.c"
        if ($136) { __lastLabel__ = 33; __label__ = 38; break; } else { __lastLabel__ = 33; __label__ = 39; break; } //@line 1156 "xmltok.c"
      case 34: // $bb37
        var $138=$enc_addr; //@line 1148 "xmltok.c"
        var $139=$138+28; //@line 1148 "xmltok.c"
        var $140=HEAP[$139]; //@line 1148 "xmltok.c"
        var $141=HEAP[$ptr_addr]; //@line 1148 "xmltok.c"
        var $142=$enc_addr; //@line 1148 "xmltok.c"
        var $143=$142+68; //@line 1148 "xmltok.c"
        var $144=HEAP[$143]; //@line 1148 "xmltok.c"
        var $145=0 - ($144); //@line 1148 "xmltok.c"
        var $146=$141+$145; //@line 1148 "xmltok.c"
        var $147=HEAP[$val]; //@line 1148 "xmltok.c"
        var $148=$enc_addr; //@line 1148 "xmltok.c"
        var $149=FUNCTION_TABLE[$140]($148, $147, $146, _KW_no); //@line 1148 "xmltok.c"
        var $150=($149)!=0; //@line 1148 "xmltok.c"
        if ($150) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 1148 "xmltok.c"
      case 35: // $bb38
        var $151=$standalone_addr; //@line 1149 "xmltok.c"
        var $152=($151)!=0; //@line 1149 "xmltok.c"
        if ($152) { __label__ = 36; break; } else { __label__ = 33; break; } //@line 1149 "xmltok.c"
      case 36: // $bb39
        var $153=$standalone_addr; //@line 1150 "xmltok.c"
        HEAP[$153]=0; //@line 1150 "xmltok.c"
        __label__ = 33; break; //@line 1150 "xmltok.c"
      case 37: // $bb41
        var $154=HEAP[$val]; //@line 1153 "xmltok.c"
        var $155=$badPtr_addr; //@line 1153 "xmltok.c"
        HEAP[$155]=$154; //@line 1153 "xmltok.c"
        $0=0; //@line 1154 "xmltok.c"
        __label__ = 42; break; //@line 1154 "xmltok.c"
      case 38: // $bb43
        var $156=__lastLabel__ == 38 ? $167 : ($137);
        var $157=$enc_addr; //@line 1157 "xmltok.c"
        var $158=$157+68; //@line 1157 "xmltok.c"
        var $159=HEAP[$158]; //@line 1157 "xmltok.c"
        var $160=$156+$159; //@line 1157 "xmltok.c"
        HEAP[$ptr_addr]=$160; //@line 1157 "xmltok.c"
        var $161=HEAP[$ptr_addr]; //@line 1156 "xmltok.c"
        var $162=$enc_addr; //@line 1156 "xmltok.c"
        var $163=$end_addr; //@line 1156 "xmltok.c"
        var $164=_toAscii($162, $161, $163); //@line 1156 "xmltok.c"
        var $165=_isSpace($164); //@line 1156 "xmltok.c"
        var $166=($165)!=0; //@line 1156 "xmltok.c"
        var $167=HEAP[$ptr_addr]; //@line 1157 "xmltok.c"
        if ($166) { __lastLabel__ = 38; __label__ = 38; break; } else { __lastLabel__ = 38; __label__ = 39; break; } //@line 1156 "xmltok.c"
      case 39: // $bb45
        var $_lcssa=__lastLabel__ == 33 ? $137 : ($167);
        var $168=$end_addr; //@line 1158 "xmltok.c"
        var $169=($_lcssa)!=($168); //@line 1158 "xmltok.c"
        if ($169) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1158 "xmltok.c"
      case 40: // $bb46
        var $170=HEAP[$ptr_addr]; //@line 1159 "xmltok.c"
        var $171=$badPtr_addr; //@line 1159 "xmltok.c"
        HEAP[$171]=$170; //@line 1159 "xmltok.c"
        $0=0; //@line 1160 "xmltok.c"
        __label__ = 42; break; //@line 1160 "xmltok.c"
      case 41: // $bb47
        $0=1; //@line 1162 "xmltok.c"
        __label__ = 42; break; //@line 1162 "xmltok.c"
      case 42: // $bb48
        var $172=$0; //@line 1096 "xmltok.c"
        $retval=$172; //@line 1096 "xmltok.c"
        var $retval49=$retval; //@line 1096 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval49; //@line 1096 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _checkCharRefNumber($result) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $result_addr;
        var $retval;
        var $0;
        $result_addr=$result;
        var $1=$result_addr; //@line 1168 "xmltok.c"
        var $2=($1) >> 8; //@line 1168 "xmltok.c"
        if ($2 == 0) {
          __label__ = 2; break;
        }
        else if ($2 == 216) {
          __label__ = 1; break;
        }
        else if ($2 == 217) {
          __label__ = 1; break;
        }
        else if ($2 == 218) {
          __label__ = 1; break;
        }
        else if ($2 == 219) {
          __label__ = 1; break;
        }
        else if ($2 == 220) {
          __label__ = 1; break;
        }
        else if ($2 == 221) {
          __label__ = 1; break;
        }
        else if ($2 == 222) {
          __label__ = 1; break;
        }
        else if ($2 == 223) {
          __label__ = 1; break;
        }
        else if ($2 == 255) {
          __label__ = 4; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 1: // $bb
        $0=-1; //@line 1171 "xmltok.c"
        __label__ = 7; break; //@line 1171 "xmltok.c"
      case 2: // $bb1
        var $3=$result_addr; //@line 1173 "xmltok.c"
        var $4=_latin1_encoding+76+$3; //@line 1173 "xmltok.c"
        var $5=HEAP[$4]; //@line 1173 "xmltok.c"
        var $6=($5)==0; //@line 1173 "xmltok.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 1173 "xmltok.c"
      case 3: // $bb2
        $0=-1; //@line 1174 "xmltok.c"
        __label__ = 7; break; //@line 1174 "xmltok.c"
      case 4: // $bb4
        var $7=$result_addr; //@line 1177 "xmltok.c"
        var $8=($7)==65534; //@line 1177 "xmltok.c"
        var $9=$result_addr; //@line 1177 "xmltok.c"
        var $10=($9)==65535; //@line 1177 "xmltok.c"
        var $or_cond=($8) | ($10);
        if ($or_cond) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1177 "xmltok.c"
      case 5: // $bb6
        $0=-1; //@line 1178 "xmltok.c"
        __label__ = 7; break; //@line 1178 "xmltok.c"
      case 6: // $bb7
        var $11=$result_addr; //@line 1181 "xmltok.c"
        $0=$11; //@line 1181 "xmltok.c"
        __label__ = 7; break; //@line 1181 "xmltok.c"
      case 7: // $bb8
        var $12=$0; //@line 1171 "xmltok.c"
        $retval=$12; //@line 1171 "xmltok.c"
        var $retval9=$retval; //@line 1171 "xmltok.c"
        ;
        return $retval9; //@line 1171 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlUtf8Encode($c, $buf) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $c_addr;
        var $buf_addr;
        var $retval;
        var $0;
        $c_addr=$c;
        $buf_addr=$buf;
        var $1=$c_addr; //@line 1194 "xmltok.c"
        var $2=($1) < 0; //@line 1194 "xmltok.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1194 "xmltok.c"
      case 1: // $bb
        $0=0; //@line 1195 "xmltok.c"
        __label__ = 11; break; //@line 1195 "xmltok.c"
      case 2: // $bb1
        var $3=$c_addr; //@line 1196 "xmltok.c"
        var $4=($3) <= 127; //@line 1196 "xmltok.c"
        var $5=$c_addr; //@line 1197 "xmltok.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1196 "xmltok.c"
      case 3: // $bb2
        var $6=((($5)) & 255); //@line 1197 "xmltok.c"
        var $7=$buf_addr; //@line 1197 "xmltok.c"
        var $8=$7; //@line 1197 "xmltok.c"
        HEAP[$8]=$6; //@line 1197 "xmltok.c"
        $0=1; //@line 1198 "xmltok.c"
        __label__ = 11; break; //@line 1198 "xmltok.c"
      case 4: // $bb3
        var $9=($5) <= 2047; //@line 1200 "xmltok.c"
        var $10=$c_addr; //@line 1201 "xmltok.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1200 "xmltok.c"
      case 5: // $bb4
        var $11=($10) >> 6; //@line 1201 "xmltok.c"
        var $12=((($11)) & 255); //@line 1201 "xmltok.c"
        var $13=($12) | -64; //@line 1201 "xmltok.c"
        var $14=$buf_addr; //@line 1201 "xmltok.c"
        var $15=$14; //@line 1201 "xmltok.c"
        HEAP[$15]=$13; //@line 1201 "xmltok.c"
        var $16=$c_addr; //@line 1202 "xmltok.c"
        var $17=((($16)) & 255); //@line 1202 "xmltok.c"
        var $18=($17) & 63; //@line 1202 "xmltok.c"
        var $19=($18) | -128; //@line 1202 "xmltok.c"
        var $20=$buf_addr; //@line 1202 "xmltok.c"
        var $21=$20+1; //@line 1202 "xmltok.c"
        HEAP[$21]=$19; //@line 1202 "xmltok.c"
        $0=2; //@line 1203 "xmltok.c"
        __label__ = 11; break; //@line 1203 "xmltok.c"
      case 6: // $bb5
        var $22=($10) <= 65535; //@line 1205 "xmltok.c"
        var $23=$c_addr; //@line 1206 "xmltok.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1205 "xmltok.c"
      case 7: // $bb6
        var $24=($23) >> 12; //@line 1206 "xmltok.c"
        var $25=((($24)) & 255); //@line 1206 "xmltok.c"
        var $26=($25) | -32; //@line 1206 "xmltok.c"
        var $27=$buf_addr; //@line 1206 "xmltok.c"
        var $28=$27; //@line 1206 "xmltok.c"
        HEAP[$28]=$26; //@line 1206 "xmltok.c"
        var $29=$c_addr; //@line 1207 "xmltok.c"
        var $30=($29) >> 6; //@line 1207 "xmltok.c"
        var $31=((($30)) & 255); //@line 1207 "xmltok.c"
        var $32=($31) & 63; //@line 1207 "xmltok.c"
        var $33=($32) | -128; //@line 1207 "xmltok.c"
        var $34=$buf_addr; //@line 1207 "xmltok.c"
        var $35=$34+1; //@line 1207 "xmltok.c"
        HEAP[$35]=$33; //@line 1207 "xmltok.c"
        var $36=$c_addr; //@line 1208 "xmltok.c"
        var $37=((($36)) & 255); //@line 1208 "xmltok.c"
        var $38=($37) & 63; //@line 1208 "xmltok.c"
        var $39=($38) | -128; //@line 1208 "xmltok.c"
        var $40=$buf_addr; //@line 1208 "xmltok.c"
        var $41=$40+2; //@line 1208 "xmltok.c"
        HEAP[$41]=$39; //@line 1208 "xmltok.c"
        $0=3; //@line 1209 "xmltok.c"
        __label__ = 11; break; //@line 1209 "xmltok.c"
      case 8: // $bb7
        var $42=($23) <= 1114111; //@line 1211 "xmltok.c"
        if ($42) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1211 "xmltok.c"
      case 9: // $bb8
        var $43=$c_addr; //@line 1212 "xmltok.c"
        var $44=($43) >> 18; //@line 1212 "xmltok.c"
        var $45=((($44)) & 255); //@line 1212 "xmltok.c"
        var $46=($45) | -16; //@line 1212 "xmltok.c"
        var $47=$buf_addr; //@line 1212 "xmltok.c"
        var $48=$47; //@line 1212 "xmltok.c"
        HEAP[$48]=$46; //@line 1212 "xmltok.c"
        var $49=$c_addr; //@line 1213 "xmltok.c"
        var $50=($49) >> 12; //@line 1213 "xmltok.c"
        var $51=((($50)) & 255); //@line 1213 "xmltok.c"
        var $52=($51) & 63; //@line 1213 "xmltok.c"
        var $53=($52) | -128; //@line 1213 "xmltok.c"
        var $54=$buf_addr; //@line 1213 "xmltok.c"
        var $55=$54+1; //@line 1213 "xmltok.c"
        HEAP[$55]=$53; //@line 1213 "xmltok.c"
        var $56=$c_addr; //@line 1214 "xmltok.c"
        var $57=($56) >> 6; //@line 1214 "xmltok.c"
        var $58=((($57)) & 255); //@line 1214 "xmltok.c"
        var $59=($58) & 63; //@line 1214 "xmltok.c"
        var $60=($59) | -128; //@line 1214 "xmltok.c"
        var $61=$buf_addr; //@line 1214 "xmltok.c"
        var $62=$61+2; //@line 1214 "xmltok.c"
        HEAP[$62]=$60; //@line 1214 "xmltok.c"
        var $63=$c_addr; //@line 1215 "xmltok.c"
        var $64=((($63)) & 255); //@line 1215 "xmltok.c"
        var $65=($64) & 63; //@line 1215 "xmltok.c"
        var $66=($65) | -128; //@line 1215 "xmltok.c"
        var $67=$buf_addr; //@line 1215 "xmltok.c"
        var $68=$67+3; //@line 1215 "xmltok.c"
        HEAP[$68]=$66; //@line 1215 "xmltok.c"
        $0=4; //@line 1216 "xmltok.c"
        __label__ = 11; break; //@line 1216 "xmltok.c"
      case 10: // $bb9
        $0=0; //@line 1218 "xmltok.c"
        __label__ = 11; break; //@line 1218 "xmltok.c"
      case 11: // $bb10
        var $69=$0; //@line 1195 "xmltok.c"
        $retval=$69; //@line 1195 "xmltok.c"
        var $retval11=$retval; //@line 1195 "xmltok.c"
        ;
        return $retval11; //@line 1195 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlUtf16Encode($charNum, $buf) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $charNum_addr;
        var $buf_addr;
        var $retval;
        var $0;
        $charNum_addr=$charNum;
        $buf_addr=$buf;
        var $1=$charNum_addr; //@line 1224 "xmltok.c"
        var $2=($1) < 0; //@line 1224 "xmltok.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1224 "xmltok.c"
      case 1: // $bb
        $0=0; //@line 1225 "xmltok.c"
        __label__ = 7; break; //@line 1225 "xmltok.c"
      case 2: // $bb1
        var $3=$charNum_addr; //@line 1226 "xmltok.c"
        var $4=($3) <= 65535; //@line 1226 "xmltok.c"
        var $5=$charNum_addr; //@line 1227 "xmltok.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1226 "xmltok.c"
      case 3: // $bb2
        var $6=((($5)) & 65535); //@line 1227 "xmltok.c"
        var $7=$buf_addr; //@line 1227 "xmltok.c"
        var $8=$7; //@line 1227 "xmltok.c"
        HEAP[$8]=$6; //@line 1227 "xmltok.c"
        $0=1; //@line 1228 "xmltok.c"
        __label__ = 7; break; //@line 1228 "xmltok.c"
      case 4: // $bb3
        var $9=($5) <= 1114111; //@line 1230 "xmltok.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1230 "xmltok.c"
      case 5: // $bb4
        var $10=$charNum_addr; //@line 1231 "xmltok.c"
        var $11=($10) - 65536; //@line 1231 "xmltok.c"
        $charNum_addr=$11; //@line 1231 "xmltok.c"
        var $12=$charNum_addr; //@line 1232 "xmltok.c"
        var $13=($12) >> 10; //@line 1232 "xmltok.c"
        var $14=((($13)) & 65535); //@line 1232 "xmltok.c"
        var $15=($14) + -10240; //@line 1232 "xmltok.c"
        var $16=$buf_addr; //@line 1232 "xmltok.c"
        var $17=$16; //@line 1232 "xmltok.c"
        HEAP[$17]=$15; //@line 1232 "xmltok.c"
        var $18=$charNum_addr; //@line 1233 "xmltok.c"
        var $19=((($18)) & 65535); //@line 1233 "xmltok.c"
        var $20=($19) & 1023; //@line 1233 "xmltok.c"
        var $21=($20) + -9216; //@line 1233 "xmltok.c"
        var $22=$buf_addr; //@line 1233 "xmltok.c"
        var $23=$22+2; //@line 1233 "xmltok.c"
        HEAP[$23]=$21; //@line 1233 "xmltok.c"
        $0=2; //@line 1234 "xmltok.c"
        __label__ = 7; break; //@line 1234 "xmltok.c"
      case 6: // $bb5
        $0=0; //@line 1236 "xmltok.c"
        __label__ = 7; break; //@line 1236 "xmltok.c"
      case 7: // $bb6
        var $24=$0; //@line 1225 "xmltok.c"
        $retval=$24; //@line 1225 "xmltok.c"
        var $retval7=$retval; //@line 1225 "xmltok.c"
        ;
        return $retval7; //@line 1225 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlSizeOfUnknownEncoding() {
    ;
    var __label__;
  
    var $retval;
    var $0;
    $0=1912; //@line 1252 "xmltok.c"
    var $1=$0; //@line 1252 "xmltok.c"
    $retval=$1; //@line 1252 "xmltok.c"
    var $retval1=$retval; //@line 1252 "xmltok.c"
    ;
    return $retval1; //@line 1252 "xmltok.c"
  }
  

  function _unknown_isName($enc, $p) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $p_addr;
        var $retval;
        var $0;
        var $uenc;
        var $c;
        $enc_addr=$enc;
        $p_addr=$p;
        var $1=$enc_addr; //@line 1258 "xmltok.c"
        var $2=$1; //@line 1258 "xmltok.c"
        $uenc=$2; //@line 1258 "xmltok.c"
        var $3=$uenc; //@line 1259 "xmltok.c"
        var $4=$3+368; //@line 1259 "xmltok.c"
        var $5=HEAP[$4]; //@line 1259 "xmltok.c"
        var $6=$uenc; //@line 1259 "xmltok.c"
        var $7=$6+372; //@line 1259 "xmltok.c"
        var $8=HEAP[$7]; //@line 1259 "xmltok.c"
        var $9=$p_addr; //@line 1259 "xmltok.c"
        var $10=FUNCTION_TABLE[$5]($8, $9); //@line 1259 "xmltok.c"
        $c=$10; //@line 1259 "xmltok.c"
        var $11=$c; //@line 1260 "xmltok.c"
        var $12=($11) & -65536; //@line 1260 "xmltok.c"
        var $13=($12)!=0; //@line 1260 "xmltok.c"
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1260 "xmltok.c"
      case 1: // $bb
        $0=0; //@line 1261 "xmltok.c"
        __label__ = 3; break; //@line 1261 "xmltok.c"
      case 2: // $bb1
        var $14=$c; //@line 1262 "xmltok.c"
        var $15=($14) >> 8; //@line 1262 "xmltok.c"
        var $16=_namePages+$15; //@line 1262 "xmltok.c"
        var $17=HEAP[$16]; //@line 1262 "xmltok.c"
        var $18=($17); //@line 1262 "xmltok.c"
        var $19=($18) * 8;
        var $20=$c; //@line 1262 "xmltok.c"
        var $21=($20) & 255; //@line 1262 "xmltok.c"
        var $22=($21) >> 5; //@line 1262 "xmltok.c"
        var $23=($22) + ($19); //@line 1262 "xmltok.c"
        var $24=_namingBitmap+$23*4; //@line 1262 "xmltok.c"
        var $25=HEAP[$24]; //@line 1262 "xmltok.c"
        var $26=$c; //@line 1262 "xmltok.c"
        var $27=($26) & 31; //@line 1262 "xmltok.c"
        var $28=1 << ($27); //@line 1262 "xmltok.c"
        var $29=($28) & ($25); //@line 1262 "xmltok.c"
        $0=$29; //@line 1262 "xmltok.c"
        __label__ = 3; break; //@line 1262 "xmltok.c"
      case 3: // $bb2
        var $30=$0; //@line 1261 "xmltok.c"
        $retval=$30; //@line 1261 "xmltok.c"
        var $retval3=$retval; //@line 1261 "xmltok.c"
        ;
        return $retval3; //@line 1261 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unknown_isNmstrt($enc, $p) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $p_addr;
        var $retval;
        var $0;
        var $uenc;
        var $c;
        $enc_addr=$enc;
        $p_addr=$p;
        var $1=$enc_addr; //@line 1268 "xmltok.c"
        var $2=$1; //@line 1268 "xmltok.c"
        $uenc=$2; //@line 1268 "xmltok.c"
        var $3=$uenc; //@line 1269 "xmltok.c"
        var $4=$3+368; //@line 1269 "xmltok.c"
        var $5=HEAP[$4]; //@line 1269 "xmltok.c"
        var $6=$uenc; //@line 1269 "xmltok.c"
        var $7=$6+372; //@line 1269 "xmltok.c"
        var $8=HEAP[$7]; //@line 1269 "xmltok.c"
        var $9=$p_addr; //@line 1269 "xmltok.c"
        var $10=FUNCTION_TABLE[$5]($8, $9); //@line 1269 "xmltok.c"
        $c=$10; //@line 1269 "xmltok.c"
        var $11=$c; //@line 1270 "xmltok.c"
        var $12=($11) & -65536; //@line 1270 "xmltok.c"
        var $13=($12)!=0; //@line 1270 "xmltok.c"
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1270 "xmltok.c"
      case 1: // $bb
        $0=0; //@line 1271 "xmltok.c"
        __label__ = 3; break; //@line 1271 "xmltok.c"
      case 2: // $bb1
        var $14=$c; //@line 1272 "xmltok.c"
        var $15=($14) >> 8; //@line 1272 "xmltok.c"
        var $16=_nmstrtPages+$15; //@line 1272 "xmltok.c"
        var $17=HEAP[$16]; //@line 1272 "xmltok.c"
        var $18=($17); //@line 1272 "xmltok.c"
        var $19=($18) * 8;
        var $20=$c; //@line 1272 "xmltok.c"
        var $21=($20) & 255; //@line 1272 "xmltok.c"
        var $22=($21) >> 5; //@line 1272 "xmltok.c"
        var $23=($22) + ($19); //@line 1272 "xmltok.c"
        var $24=_namingBitmap+$23*4; //@line 1272 "xmltok.c"
        var $25=HEAP[$24]; //@line 1272 "xmltok.c"
        var $26=$c; //@line 1272 "xmltok.c"
        var $27=($26) & 31; //@line 1272 "xmltok.c"
        var $28=1 << ($27); //@line 1272 "xmltok.c"
        var $29=($28) & ($25); //@line 1272 "xmltok.c"
        $0=$29; //@line 1272 "xmltok.c"
        __label__ = 3; break; //@line 1272 "xmltok.c"
      case 3: // $bb2
        var $30=$0; //@line 1271 "xmltok.c"
        $retval=$30; //@line 1271 "xmltok.c"
        var $retval3=$retval; //@line 1271 "xmltok.c"
        ;
        return $retval3; //@line 1271 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unknown_isInvalid($enc, $p) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $p_addr;
        var $retval;
        var $iftmp_1424;
        var $0;
        var $uenc;
        var $c;
        $enc_addr=$enc;
        $p_addr=$p;
        var $1=$enc_addr; //@line 1278 "xmltok.c"
        var $2=$1; //@line 1278 "xmltok.c"
        $uenc=$2; //@line 1278 "xmltok.c"
        var $3=$uenc; //@line 1279 "xmltok.c"
        var $4=$3+368; //@line 1279 "xmltok.c"
        var $5=HEAP[$4]; //@line 1279 "xmltok.c"
        var $6=$uenc; //@line 1279 "xmltok.c"
        var $7=$6+372; //@line 1279 "xmltok.c"
        var $8=HEAP[$7]; //@line 1279 "xmltok.c"
        var $9=$p_addr; //@line 1279 "xmltok.c"
        var $10=FUNCTION_TABLE[$5]($8, $9); //@line 1279 "xmltok.c"
        $c=$10; //@line 1279 "xmltok.c"
        var $11=$c; //@line 1280 "xmltok.c"
        var $12=($11) & -65536; //@line 1280 "xmltok.c"
        var $13=($12)!=0; //@line 1280 "xmltok.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1280 "xmltok.c"
      case 1: // $bb
        var $14=$c; //@line 1280 "xmltok.c"
        var $15=_checkCharRefNumber($14); //@line 1280 "xmltok.c"
        var $16=($15) < 0; //@line 1280 "xmltok.c"
        if ($16) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1280 "xmltok.c"
      case 2: // $bb1
        $iftmp_1424=1; //@line 1280 "xmltok.c"
        __label__ = 4; break; //@line 1280 "xmltok.c"
      case 3: // $bb2
        $iftmp_1424=0; //@line 1280 "xmltok.c"
        __label__ = 4; break; //@line 1280 "xmltok.c"
      case 4: // $bb3
        var $17=$iftmp_1424; //@line 1280 "xmltok.c"
        $0=$17; //@line 1280 "xmltok.c"
        var $18=$0; //@line 1280 "xmltok.c"
        $retval=$18; //@line 1280 "xmltok.c"
        var $retval4=$retval; //@line 1280 "xmltok.c"
        ;
        return $retval4; //@line 1280 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unknown_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $fromP_addr;
        var $fromLim_addr;
        var $toP_addr;
        var $toLim_addr;
        var $uenc;
        var $buf=__stackBase__;
        var $utf8;
        var $n;
        var $c;
        $enc_addr=$enc;
        $fromP_addr=$fromP;
        $fromLim_addr=$fromLim;
        $toP_addr=$toP;
        $toLim_addr=$toLim;
        var $0=$enc_addr; //@line 1288 "xmltok.c"
        var $1=$0; //@line 1288 "xmltok.c"
        $uenc=$1; //@line 1288 "xmltok.c"
        var $buf3=$buf; //@line 1299 "xmltok.c"
        var $buf5=$buf; //@line 1302 "xmltok.c"
        __label__ = 1; break; //@line 1288 "xmltok.c"
      case 1: // $bb
        var $2=$fromP_addr; //@line 1293 "xmltok.c"
        var $3=HEAP[$2]; //@line 1293 "xmltok.c"
        var $4=$fromLim_addr; //@line 1293 "xmltok.c"
        var $5=($3)==($4); //@line 1293 "xmltok.c"
        if ($5) { __label__ = 8; break; } else { __label__ = 2; break; } //@line 1293 "xmltok.c"
      case 2: // $bb1
        var $6=$fromP_addr; //@line 1295 "xmltok.c"
        var $7=HEAP[$6]; //@line 1295 "xmltok.c"
        var $8=HEAP[$7]; //@line 1295 "xmltok.c"
        var $9=($8); //@line 1295 "xmltok.c"
        var $10=$uenc; //@line 1295 "xmltok.c"
        var $11=$10+888; //@line 1295 "xmltok.c"
        var $12=$11+$9*4; //@line 1295 "xmltok.c"
        var $13=$12; //@line 1295 "xmltok.c"
        $utf8=$13; //@line 1295 "xmltok.c"
        var $14=$utf8; //@line 1296 "xmltok.c"
        var $15=HEAP[$14]; //@line 1296 "xmltok.c"
        var $16=($15); //@line 1296 "xmltok.c"
        $n=$16; //@line 1296 "xmltok.c"
        var $17=$utf8; //@line 1296 "xmltok.c"
        var $18=$17+1; //@line 1296 "xmltok.c"
        $utf8=$18; //@line 1296 "xmltok.c"
        var $19=$n; //@line 1297 "xmltok.c"
        var $20=($19)==0; //@line 1297 "xmltok.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1297 "xmltok.c"
      case 3: // $bb2
        var $21=$uenc; //@line 1298 "xmltok.c"
        var $22=$21+368; //@line 1298 "xmltok.c"
        var $23=HEAP[$22]; //@line 1298 "xmltok.c"
        var $24=$fromP_addr; //@line 1298 "xmltok.c"
        var $25=HEAP[$24]; //@line 1298 "xmltok.c"
        var $26=$uenc; //@line 1298 "xmltok.c"
        var $27=$26+372; //@line 1298 "xmltok.c"
        var $28=HEAP[$27]; //@line 1298 "xmltok.c"
        var $29=FUNCTION_TABLE[$23]($28, $25); //@line 1298 "xmltok.c"
        $c=$29; //@line 1298 "xmltok.c"
        var $30=$c; //@line 1299 "xmltok.c"
        var $31=_PyExpat_XmlUtf8Encode($30, $buf3); //@line 1299 "xmltok.c"
        $n=$31; //@line 1299 "xmltok.c"
        var $32=$toLim_addr; //@line 1300 "xmltok.c"
        var $33=($32); //@line 1300 "xmltok.c"
        var $34=$toP_addr; //@line 1300 "xmltok.c"
        var $35=HEAP[$34]; //@line 1300 "xmltok.c"
        var $36=($35); //@line 1300 "xmltok.c"
        var $37=($33) - ($36); //@line 1300 "xmltok.c"
        var $38=$n; //@line 1300 "xmltok.c"
        var $39=($37) < ($38); //@line 1300 "xmltok.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 4; break; } //@line 1300 "xmltok.c"
      case 4: // $bb4
        $utf8=$buf5; //@line 1302 "xmltok.c"
        var $40=$fromP_addr; //@line 1303 "xmltok.c"
        var $41=HEAP[$40]; //@line 1303 "xmltok.c"
        var $42=$enc_addr; //@line 1303 "xmltok.c"
        var $43=$42; //@line 1303 "xmltok.c"
        var $44=$fromP_addr; //@line 1303 "xmltok.c"
        var $45=HEAP[$44]; //@line 1303 "xmltok.c"
        var $46=HEAP[$45]; //@line 1303 "xmltok.c"
        var $47=($46); //@line 1303 "xmltok.c"
        var $48=$43+76; //@line 1303 "xmltok.c"
        var $49=$48+$47; //@line 1303 "xmltok.c"
        var $50=HEAP[$49]; //@line 1303 "xmltok.c"
        var $51=($50); //@line 1303 "xmltok.c"
        var $52=($51) - 3; //@line 1303 "xmltok.c"
        var $53=$41+$52; //@line 1303 "xmltok.c"
        var $54=$fromP_addr; //@line 1303 "xmltok.c"
        HEAP[$54]=$53; //@line 1303 "xmltok.c"
        __label__ = 7; break; //@line 1303 "xmltok.c"
      case 5: // $bb6
        var $55=$toLim_addr; //@line 1307 "xmltok.c"
        var $56=($55); //@line 1307 "xmltok.c"
        var $57=$toP_addr; //@line 1307 "xmltok.c"
        var $58=HEAP[$57]; //@line 1307 "xmltok.c"
        var $59=($58); //@line 1307 "xmltok.c"
        var $60=($56) - ($59); //@line 1307 "xmltok.c"
        var $61=$n; //@line 1307 "xmltok.c"
        var $62=($60) < ($61); //@line 1307 "xmltok.c"
        if ($62) { __label__ = 8; break; } else { __label__ = 6; break; } //@line 1307 "xmltok.c"
      case 6: // $bb7
        var $63=$fromP_addr; //@line 1309 "xmltok.c"
        var $64=HEAP[$63]; //@line 1309 "xmltok.c"
        var $65=$64+1; //@line 1309 "xmltok.c"
        var $66=$fromP_addr; //@line 1309 "xmltok.c"
        HEAP[$66]=$65; //@line 1309 "xmltok.c"
        __label__ = 7; break; //@line 1309 "xmltok.c"
      case 7: // $bb8
        var $67=$toP_addr; //@line 1312 "xmltok.c"
        var $68=HEAP[$67]; //@line 1312 "xmltok.c"
        var $69=$utf8; //@line 1312 "xmltok.c"
        var $70=HEAP[$69]; //@line 1312 "xmltok.c"
        HEAP[$68]=$70; //@line 1312 "xmltok.c"
        var $71=$68+1; //@line 1312 "xmltok.c"
        var $72=$toP_addr; //@line 1312 "xmltok.c"
        HEAP[$72]=$71; //@line 1312 "xmltok.c"
        var $73=$utf8; //@line 1312 "xmltok.c"
        var $74=$73+1; //@line 1312 "xmltok.c"
        $utf8=$74; //@line 1312 "xmltok.c"
        var $75=$n; //@line 1313 "xmltok.c"
        var $76=($75) - 1; //@line 1313 "xmltok.c"
        $n=$76; //@line 1313 "xmltok.c"
        var $77=($76)!=0; //@line 1313 "xmltok.c"
        if ($77) { __label__ = 7; break; } else { __label__ = 1; break; } //@line 1313 "xmltok.c"
      case 8: // $return
        STACKTOP = __stackBase__;
        return; //@line 1315 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unknown_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $fromP_addr;
        var $fromLim_addr;
        var $toP_addr;
        var $toLim_addr;
        var $uenc;
        var $c;
        $enc_addr=$enc;
        $fromP_addr=$fromP;
        $fromLim_addr=$fromLim;
        $toP_addr=$toP;
        $toLim_addr=$toLim;
        var $0=$enc_addr; //@line 1322 "xmltok.c"
        var $1=$0; //@line 1322 "xmltok.c"
        $uenc=$1; //@line 1322 "xmltok.c"
        __label__ = 5; break; //@line 1322 "xmltok.c"
      case 1: // $bb
        var $2=$fromP_addr; //@line 1324 "xmltok.c"
        var $3=HEAP[$2]; //@line 1324 "xmltok.c"
        var $4=HEAP[$3]; //@line 1324 "xmltok.c"
        var $5=($4); //@line 1324 "xmltok.c"
        var $6=$uenc; //@line 1324 "xmltok.c"
        var $7=$6+376; //@line 1324 "xmltok.c"
        var $8=$7+$5*2; //@line 1324 "xmltok.c"
        var $9=HEAP[$8]; //@line 1324 "xmltok.c"
        $c=$9; //@line 1324 "xmltok.c"
        var $10=$c; //@line 1325 "xmltok.c"
        var $11=($10)==0; //@line 1325 "xmltok.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1325 "xmltok.c"
      case 2: // $bb1
        var $12=$uenc; //@line 1326 "xmltok.c"
        var $13=$12+368; //@line 1326 "xmltok.c"
        var $14=HEAP[$13]; //@line 1326 "xmltok.c"
        var $15=$fromP_addr; //@line 1326 "xmltok.c"
        var $16=HEAP[$15]; //@line 1326 "xmltok.c"
        var $17=$uenc; //@line 1326 "xmltok.c"
        var $18=$17+372; //@line 1326 "xmltok.c"
        var $19=HEAP[$18]; //@line 1326 "xmltok.c"
        var $20=FUNCTION_TABLE[$14]($19, $16); //@line 1326 "xmltok.c"
        var $21=((($20)) & 65535); //@line 1326 "xmltok.c"
        $c=$21; //@line 1326 "xmltok.c"
        var $22=$fromP_addr; //@line 1328 "xmltok.c"
        var $23=HEAP[$22]; //@line 1328 "xmltok.c"
        var $24=$enc_addr; //@line 1328 "xmltok.c"
        var $25=$24; //@line 1328 "xmltok.c"
        var $26=$fromP_addr; //@line 1328 "xmltok.c"
        var $27=HEAP[$26]; //@line 1328 "xmltok.c"
        var $28=HEAP[$27]; //@line 1328 "xmltok.c"
        var $29=($28); //@line 1328 "xmltok.c"
        var $30=$25+76; //@line 1328 "xmltok.c"
        var $31=$30+$29; //@line 1328 "xmltok.c"
        var $32=HEAP[$31]; //@line 1328 "xmltok.c"
        var $33=($32); //@line 1328 "xmltok.c"
        var $34=($33) - 3; //@line 1328 "xmltok.c"
        var $35=$23+$34; //@line 1328 "xmltok.c"
        var $36=$fromP_addr; //@line 1328 "xmltok.c"
        HEAP[$36]=$35; //@line 1328 "xmltok.c"
        __label__ = 4; break; //@line 1328 "xmltok.c"
      case 3: // $bb2
        var $37=$fromP_addr; //@line 1332 "xmltok.c"
        var $38=HEAP[$37]; //@line 1332 "xmltok.c"
        var $39=$38+1; //@line 1332 "xmltok.c"
        var $40=$fromP_addr; //@line 1332 "xmltok.c"
        HEAP[$40]=$39; //@line 1332 "xmltok.c"
        __label__ = 4; break; //@line 1332 "xmltok.c"
      case 4: // $bb3
        var $41=$toP_addr; //@line 1333 "xmltok.c"
        var $42=HEAP[$41]; //@line 1333 "xmltok.c"
        var $43=$c; //@line 1333 "xmltok.c"
        HEAP[$42]=$43; //@line 1333 "xmltok.c"
        var $44=$42+2; //@line 1333 "xmltok.c"
        var $45=$toP_addr; //@line 1333 "xmltok.c"
        HEAP[$45]=$44; //@line 1333 "xmltok.c"
        __label__ = 5; break; //@line 1333 "xmltok.c"
      case 5: // $bb4
        var $46=$fromP_addr; //@line 1323 "xmltok.c"
        var $47=HEAP[$46]; //@line 1323 "xmltok.c"
        var $48=$fromLim_addr; //@line 1323 "xmltok.c"
        var $49=($47)==($48); //@line 1323 "xmltok.c"
        if ($49) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 1323 "xmltok.c"
      case 6: // $bb5
        var $50=$toP_addr; //@line 1323 "xmltok.c"
        var $51=HEAP[$50]; //@line 1323 "xmltok.c"
        var $52=$toLim_addr; //@line 1323 "xmltok.c"
        var $53=($51)!=($52); //@line 1323 "xmltok.c"
        if ($53) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 1323 "xmltok.c"
      case 7: // $return
        ;
        return; //@line 1335 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlInitUnknownEncoding($mem, $table, $convert, $userData) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $mem_addr;
        var $table_addr;
        var $convert_addr;
        var $userData_addr;
        var $retval;
        var $iftmp_1447;
        var $0;
        var $i;
        var $e;
        var $c;
        $mem_addr=$mem;
        $table_addr=$table;
        $convert_addr=$convert;
        $userData_addr=$userData;
        var $1=$mem_addr; //@line 1344 "xmltok.c"
        var $2=$1; //@line 1344 "xmltok.c"
        $e=$2; //@line 1344 "xmltok.c"
        $i=0; //@line 1345 "xmltok.c"
        __label__ = 1; break;
      case 1: // $bb
        var $3=$mem_addr; //@line 1346 "xmltok.c"
        var $4=$i; //@line 1346 "xmltok.c"
        var $5=_latin1_encoding+$4; //@line 1346 "xmltok.c"
        var $6=HEAP[$5]; //@line 1346 "xmltok.c"
        var $7=$i; //@line 1346 "xmltok.c"
        var $8=$3+$7; //@line 1346 "xmltok.c"
        HEAP[$8]=$6; //@line 1346 "xmltok.c"
        var $9=$i; //@line 1345 "xmltok.c"
        var $10=($9) + 1; //@line 1345 "xmltok.c"
        $i=$10; //@line 1345 "xmltok.c"
        var $11=($10) <= 367; //@line 1345 "xmltok.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1345 "xmltok.c"
      case 2: // $bb2
        $i=0; //@line 1347 "xmltok.c"
        __lastLabel__ = 2; __label__ = 8; break; //@line 1347 "xmltok.c"
      case 3: // $bb3
        var $12=$i; //@line 1348 "xmltok.c"
        var $13=_latin1_encoding+76+$12; //@line 1348 "xmltok.c"
        var $14=HEAP[$13]; //@line 1348 "xmltok.c"
        var $15=($14)!=28; //@line 1348 "xmltok.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 1348 "xmltok.c"
      case 4: // $bb4
        var $16=$i; //@line 1348 "xmltok.c"
        var $17=_latin1_encoding+76+$16; //@line 1348 "xmltok.c"
        var $18=HEAP[$17]; //@line 1348 "xmltok.c"
        var $19=($18)!=0; //@line 1348 "xmltok.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 1348 "xmltok.c"
      case 5: // $bb5
        var $20=$table_addr; //@line 1348 "xmltok.c"
        var $21=$i; //@line 1348 "xmltok.c"
        var $22=$20+4*$21; //@line 1348 "xmltok.c"
        var $23=HEAP[$22]; //@line 1348 "xmltok.c"
        var $24=$i; //@line 1348 "xmltok.c"
        var $25=($23)!=($24); //@line 1348 "xmltok.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1348 "xmltok.c"
      case 6: // $bb6
        $0=0; //@line 1351 "xmltok.c"
        __label__ = 40; break; //@line 1351 "xmltok.c"
      case 7: // $bb7
        var $26=$i; //@line 1347 "xmltok.c"
        var $27=($26) + 1; //@line 1347 "xmltok.c"
        $i=$27; //@line 1347 "xmltok.c"
        __lastLabel__ = 7; __label__ = 8; break; //@line 1347 "xmltok.c"
      case 8: // $bb8
        var $28=__lastLabel__ == 7 ? $27 : (0);
        var $29=($28) <= 127; //@line 1347 "xmltok.c"
        if ($29) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 1347 "xmltok.c"
      case 9: // $bb9
        $i=0; //@line 1352 "xmltok.c"
        __lastLabel__ = 9; __label__ = 36; break; //@line 1352 "xmltok.c"
      case 10: // $bb10
        var $30=$table_addr; //@line 1353 "xmltok.c"
        var $31=$i; //@line 1353 "xmltok.c"
        var $32=$30+4*$31; //@line 1353 "xmltok.c"
        var $33=HEAP[$32]; //@line 1353 "xmltok.c"
        $c=$33; //@line 1353 "xmltok.c"
        var $34=$c; //@line 1354 "xmltok.c"
        var $35=($34)==-1; //@line 1354 "xmltok.c"
        if ($35) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1354 "xmltok.c"
      case 11: // $bb11
        var $36=$i; //@line 1355 "xmltok.c"
        var $37=$e; //@line 1355 "xmltok.c"
        var $38=$37; //@line 1355 "xmltok.c"
        var $39=$38+76; //@line 1355 "xmltok.c"
        var $40=$39+$36; //@line 1355 "xmltok.c"
        HEAP[$40]=1; //@line 1355 "xmltok.c"
        var $41=$i; //@line 1357 "xmltok.c"
        var $42=$e; //@line 1357 "xmltok.c"
        var $43=$42+376; //@line 1357 "xmltok.c"
        var $44=$43+$41*2; //@line 1357 "xmltok.c"
        HEAP[$44]=-1; //@line 1357 "xmltok.c"
        var $45=$i; //@line 1358 "xmltok.c"
        var $46=$e; //@line 1358 "xmltok.c"
        var $47=$46+888; //@line 1358 "xmltok.c"
        var $48=$47+$45*4; //@line 1358 "xmltok.c"
        var $49=$48; //@line 1358 "xmltok.c"
        HEAP[$49]=1; //@line 1358 "xmltok.c"
        var $50=$i; //@line 1359 "xmltok.c"
        var $51=$e; //@line 1359 "xmltok.c"
        var $52=$51+888; //@line 1359 "xmltok.c"
        var $53=$52+$50*4; //@line 1359 "xmltok.c"
        var $54=$53+1; //@line 1359 "xmltok.c"
        HEAP[$54]=0; //@line 1359 "xmltok.c"
        __label__ = 35; break; //@line 1359 "xmltok.c"
      case 12: // $bb12
        var $55=$c; //@line 1361 "xmltok.c"
        var $56=($55) < 0; //@line 1361 "xmltok.c"
        var $57=$c; //@line 1362 "xmltok.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 1361 "xmltok.c"
      case 13: // $bb13
        var $58=($57) < -4; //@line 1362 "xmltok.c"
        if ($58) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1362 "xmltok.c"
      case 14: // $bb14
        $0=0; //@line 1363 "xmltok.c"
        __label__ = 40; break; //@line 1363 "xmltok.c"
      case 15: // $bb15
        var $59=$i; //@line 1364 "xmltok.c"
        var $60=$c; //@line 1364 "xmltok.c"
        var $61=((($60)) & 255); //@line 1364 "xmltok.c"
        var $62=3 - ($61); //@line 1364 "xmltok.c"
        var $63=$e; //@line 1364 "xmltok.c"
        var $64=$63; //@line 1364 "xmltok.c"
        var $65=$64+76; //@line 1364 "xmltok.c"
        var $66=$65+$59; //@line 1364 "xmltok.c"
        HEAP[$66]=$62; //@line 1364 "xmltok.c"
        var $67=$i; //@line 1365 "xmltok.c"
        var $68=$e; //@line 1365 "xmltok.c"
        var $69=$68+888; //@line 1365 "xmltok.c"
        var $70=$69+$67*4; //@line 1365 "xmltok.c"
        var $71=$70; //@line 1365 "xmltok.c"
        HEAP[$71]=0; //@line 1365 "xmltok.c"
        var $72=$i; //@line 1366 "xmltok.c"
        var $73=$e; //@line 1366 "xmltok.c"
        var $74=$73+376; //@line 1366 "xmltok.c"
        var $75=$74+$72*2; //@line 1366 "xmltok.c"
        HEAP[$75]=0; //@line 1366 "xmltok.c"
        __label__ = 35; break; //@line 1366 "xmltok.c"
      case 16: // $bb16
        var $76=($57) <= 127; //@line 1368 "xmltok.c"
        var $77=$c; //@line 1369 "xmltok.c"
        if ($76) { __label__ = 17; break; } else { __label__ = 25; break; } //@line 1368 "xmltok.c"
      case 17: // $bb17
        var $78=_latin1_encoding+76+$77; //@line 1369 "xmltok.c"
        var $79=HEAP[$78]; //@line 1369 "xmltok.c"
        var $80=($79)!=28; //@line 1369 "xmltok.c"
        if ($80) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 1369 "xmltok.c"
      case 18: // $bb18
        var $81=$c; //@line 1369 "xmltok.c"
        var $82=_latin1_encoding+76+$81; //@line 1369 "xmltok.c"
        var $83=HEAP[$82]; //@line 1369 "xmltok.c"
        var $84=($83)!=0; //@line 1369 "xmltok.c"
        if ($84) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 1369 "xmltok.c"
      case 19: // $bb19
        var $85=$c; //@line 1369 "xmltok.c"
        var $86=$i; //@line 1369 "xmltok.c"
        var $87=($85)!=($86); //@line 1369 "xmltok.c"
        if ($87) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1369 "xmltok.c"
      case 20: // $bb20
        $0=0; //@line 1372 "xmltok.c"
        __label__ = 40; break; //@line 1372 "xmltok.c"
      case 21: // $bb21
        var $88=$i; //@line 1373 "xmltok.c"
        var $89=$c; //@line 1373 "xmltok.c"
        var $90=_latin1_encoding+76+$89; //@line 1373 "xmltok.c"
        var $91=HEAP[$90]; //@line 1373 "xmltok.c"
        var $92=$e; //@line 1373 "xmltok.c"
        var $93=$92; //@line 1373 "xmltok.c"
        var $94=$93+76; //@line 1373 "xmltok.c"
        var $95=$94+$88; //@line 1373 "xmltok.c"
        HEAP[$95]=$91; //@line 1373 "xmltok.c"
        var $96=$i; //@line 1374 "xmltok.c"
        var $97=$e; //@line 1374 "xmltok.c"
        var $98=$97+888; //@line 1374 "xmltok.c"
        var $99=$98+$96*4; //@line 1374 "xmltok.c"
        var $100=$99; //@line 1374 "xmltok.c"
        HEAP[$100]=1; //@line 1374 "xmltok.c"
        var $101=$i; //@line 1375 "xmltok.c"
        var $102=$c; //@line 1375 "xmltok.c"
        var $103=((($102)) & 255); //@line 1375 "xmltok.c"
        var $104=$e; //@line 1375 "xmltok.c"
        var $105=$104+888; //@line 1375 "xmltok.c"
        var $106=$105+$101*4; //@line 1375 "xmltok.c"
        var $107=$106+1; //@line 1375 "xmltok.c"
        HEAP[$107]=$103; //@line 1375 "xmltok.c"
        var $108=$i; //@line 1376 "xmltok.c"
        var $109=$c; //@line 1376 "xmltok.c"
        var $110=($109)!=0; //@line 1376 "xmltok.c"
        if ($110) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1376 "xmltok.c"
      case 22: // $bb22
        var $111=$c; //@line 1376 "xmltok.c"
        var $112=((($111)) & 65535); //@line 1376 "xmltok.c"
        $iftmp_1447=$112; //@line 1376 "xmltok.c"
        __label__ = 24; break; //@line 1376 "xmltok.c"
      case 23: // $bb23
        $iftmp_1447=-1; //@line 1376 "xmltok.c"
        __label__ = 24; break; //@line 1376 "xmltok.c"
      case 24: // $bb24
        var $113=$e; //@line 1376 "xmltok.c"
        var $114=$113+376; //@line 1376 "xmltok.c"
        var $115=$114+$108*2; //@line 1376 "xmltok.c"
        var $116=$iftmp_1447; //@line 1376 "xmltok.c"
        HEAP[$115]=$116; //@line 1376 "xmltok.c"
        __label__ = 35; break; //@line 1376 "xmltok.c"
      case 25: // $bb25
        var $117=_checkCharRefNumber($77); //@line 1378 "xmltok.c"
        var $118=($117) < 0; //@line 1378 "xmltok.c"
        if ($118) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1378 "xmltok.c"
      case 26: // $bb26
        var $119=$i; //@line 1379 "xmltok.c"
        var $120=$e; //@line 1379 "xmltok.c"
        var $121=$120; //@line 1379 "xmltok.c"
        var $122=$121+76; //@line 1379 "xmltok.c"
        var $123=$122+$119; //@line 1379 "xmltok.c"
        HEAP[$123]=0; //@line 1379 "xmltok.c"
        var $124=$i; //@line 1381 "xmltok.c"
        var $125=$e; //@line 1381 "xmltok.c"
        var $126=$125+376; //@line 1381 "xmltok.c"
        var $127=$126+$124*2; //@line 1381 "xmltok.c"
        HEAP[$127]=-1; //@line 1381 "xmltok.c"
        var $128=$i; //@line 1382 "xmltok.c"
        var $129=$e; //@line 1382 "xmltok.c"
        var $130=$129+888; //@line 1382 "xmltok.c"
        var $131=$130+$128*4; //@line 1382 "xmltok.c"
        var $132=$131; //@line 1382 "xmltok.c"
        HEAP[$132]=1; //@line 1382 "xmltok.c"
        var $133=$i; //@line 1383 "xmltok.c"
        var $134=$e; //@line 1383 "xmltok.c"
        var $135=$134+888; //@line 1383 "xmltok.c"
        var $136=$135+$133*4; //@line 1383 "xmltok.c"
        var $137=$136+1; //@line 1383 "xmltok.c"
        HEAP[$137]=0; //@line 1383 "xmltok.c"
        __label__ = 35; break; //@line 1383 "xmltok.c"
      case 27: // $bb27
        var $138=$c; //@line 1386 "xmltok.c"
        var $139=($138) > 65535; //@line 1386 "xmltok.c"
        if ($139) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1386 "xmltok.c"
      case 28: // $bb28
        $0=0; //@line 1387 "xmltok.c"
        __label__ = 40; break; //@line 1387 "xmltok.c"
      case 29: // $bb29
        var $140=$c; //@line 1388 "xmltok.c"
        var $141=($140) >> 8; //@line 1388 "xmltok.c"
        var $142=_nmstrtPages+$141; //@line 1388 "xmltok.c"
        var $143=HEAP[$142]; //@line 1388 "xmltok.c"
        var $144=($143); //@line 1388 "xmltok.c"
        var $145=($144) * 8;
        var $146=$c; //@line 1388 "xmltok.c"
        var $147=($146) & 255; //@line 1388 "xmltok.c"
        var $148=($147) >> 5; //@line 1388 "xmltok.c"
        var $149=($148) + ($145); //@line 1388 "xmltok.c"
        var $150=_namingBitmap+$149*4; //@line 1388 "xmltok.c"
        var $151=HEAP[$150]; //@line 1388 "xmltok.c"
        var $152=$c; //@line 1388 "xmltok.c"
        var $153=($152) & 31; //@line 1388 "xmltok.c"
        var $154=1 << ($153); //@line 1388 "xmltok.c"
        var $155=($154) & ($151); //@line 1388 "xmltok.c"
        var $156=($155)!=0; //@line 1388 "xmltok.c"
        if ($156) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1388 "xmltok.c"
      case 30: // $bb30
        var $157=$i; //@line 1389 "xmltok.c"
        var $158=$e; //@line 1389 "xmltok.c"
        var $159=$158; //@line 1389 "xmltok.c"
        var $160=$159+76; //@line 1389 "xmltok.c"
        var $161=$160+$157; //@line 1389 "xmltok.c"
        HEAP[$161]=22; //@line 1389 "xmltok.c"
        __label__ = 34; break; //@line 1389 "xmltok.c"
      case 31: // $bb31
        var $162=$c; //@line 1390 "xmltok.c"
        var $163=($162) >> 8; //@line 1390 "xmltok.c"
        var $164=_namePages+$163; //@line 1390 "xmltok.c"
        var $165=HEAP[$164]; //@line 1390 "xmltok.c"
        var $166=($165); //@line 1390 "xmltok.c"
        var $167=($166) * 8;
        var $168=$c; //@line 1390 "xmltok.c"
        var $169=($168) & 255; //@line 1390 "xmltok.c"
        var $170=($169) >> 5; //@line 1390 "xmltok.c"
        var $171=($170) + ($167); //@line 1390 "xmltok.c"
        var $172=_namingBitmap+$171*4; //@line 1390 "xmltok.c"
        var $173=HEAP[$172]; //@line 1390 "xmltok.c"
        var $174=$c; //@line 1390 "xmltok.c"
        var $175=($174) & 31; //@line 1390 "xmltok.c"
        var $176=1 << ($175); //@line 1390 "xmltok.c"
        var $177=($176) & ($173); //@line 1390 "xmltok.c"
        var $178=($177)!=0; //@line 1390 "xmltok.c"
        var $179=$i; //@line 1391 "xmltok.c"
        var $180=$e; //@line 1391 "xmltok.c"
        var $181=$180; //@line 1391 "xmltok.c"
        var $182=$181+76; //@line 1391 "xmltok.c"
        var $183=$182+$179; //@line 1391 "xmltok.c"
        if ($178) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1390 "xmltok.c"
      case 32: // $bb32
        HEAP[$183]=26; //@line 1391 "xmltok.c"
        __label__ = 34; break; //@line 1391 "xmltok.c"
      case 33: // $bb33
        HEAP[$183]=28; //@line 1393 "xmltok.c"
        __label__ = 34; break; //@line 1393 "xmltok.c"
      case 34: // $bb34
        var $184=$i; //@line 1394 "xmltok.c"
        var $185=$i; //@line 1394 "xmltok.c"
        var $186=$e; //@line 1394 "xmltok.c"
        var $187=$186+888; //@line 1394 "xmltok.c"
        var $188=$187+$185*4; //@line 1394 "xmltok.c"
        var $189=$188; //@line 1394 "xmltok.c"
        var $190=$189+1; //@line 1394 "xmltok.c"
        var $191=$c; //@line 1394 "xmltok.c"
        var $192=_PyExpat_XmlUtf8Encode($191, $190); //@line 1394 "xmltok.c"
        var $193=((($192)) & 255); //@line 1394 "xmltok.c"
        var $194=$e; //@line 1394 "xmltok.c"
        var $195=$194+888; //@line 1394 "xmltok.c"
        var $196=$195+$184*4; //@line 1394 "xmltok.c"
        var $197=$196; //@line 1394 "xmltok.c"
        HEAP[$197]=$193; //@line 1394 "xmltok.c"
        var $198=$i; //@line 1395 "xmltok.c"
        var $199=$c; //@line 1395 "xmltok.c"
        var $200=((($199)) & 65535); //@line 1395 "xmltok.c"
        var $201=$e; //@line 1395 "xmltok.c"
        var $202=$201+376; //@line 1395 "xmltok.c"
        var $203=$202+$198*2; //@line 1395 "xmltok.c"
        HEAP[$203]=$200; //@line 1395 "xmltok.c"
        __label__ = 35; break; //@line 1395 "xmltok.c"
      case 35: // $bb35
        var $204=$i; //@line 1352 "xmltok.c"
        var $205=($204) + 1; //@line 1352 "xmltok.c"
        $i=$205; //@line 1352 "xmltok.c"
        __lastLabel__ = 35; __label__ = 36; break; //@line 1352 "xmltok.c"
      case 36: // $bb36
        var $206=__lastLabel__ == 35 ? $205 : (0);
        var $207=($206) <= 255; //@line 1352 "xmltok.c"
        if ($207) { __label__ = 10; break; } else { __label__ = 37; break; } //@line 1352 "xmltok.c"
      case 37: // $bb37
        var $208=$e; //@line 1398 "xmltok.c"
        var $209=$208+372; //@line 1398 "xmltok.c"
        var $210=$userData_addr; //@line 1398 "xmltok.c"
        HEAP[$209]=$210; //@line 1398 "xmltok.c"
        var $211=$e; //@line 1399 "xmltok.c"
        var $212=$211+368; //@line 1399 "xmltok.c"
        var $213=$convert_addr; //@line 1399 "xmltok.c"
        HEAP[$212]=$213; //@line 1399 "xmltok.c"
        var $214=$convert_addr; //@line 1400 "xmltok.c"
        var $215=($214)!=0; //@line 1400 "xmltok.c"
        if ($215) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1400 "xmltok.c"
      case 38: // $bb38
        var $216=$e; //@line 1401 "xmltok.c"
        var $217=$216; //@line 1401 "xmltok.c"
        var $218=$217+332; //@line 1401 "xmltok.c"
        HEAP[$218]=(FUNCTION_TABLE_OFFSET + 194); //@line 1401 "xmltok.c"
        var $219=$e; //@line 1402 "xmltok.c"
        var $220=$219; //@line 1402 "xmltok.c"
        var $221=$220+336; //@line 1402 "xmltok.c"
        HEAP[$221]=(FUNCTION_TABLE_OFFSET + 194); //@line 1402 "xmltok.c"
        var $222=$e; //@line 1403 "xmltok.c"
        var $223=$222; //@line 1403 "xmltok.c"
        var $224=$223+340; //@line 1403 "xmltok.c"
        HEAP[$224]=(FUNCTION_TABLE_OFFSET + 194); //@line 1403 "xmltok.c"
        var $225=$e; //@line 1404 "xmltok.c"
        var $226=$225; //@line 1404 "xmltok.c"
        var $227=$226+344; //@line 1404 "xmltok.c"
        HEAP[$227]=(FUNCTION_TABLE_OFFSET + 196); //@line 1404 "xmltok.c"
        var $228=$e; //@line 1405 "xmltok.c"
        var $229=$228; //@line 1405 "xmltok.c"
        var $230=$229+348; //@line 1405 "xmltok.c"
        HEAP[$230]=(FUNCTION_TABLE_OFFSET + 196); //@line 1405 "xmltok.c"
        var $231=$e; //@line 1406 "xmltok.c"
        var $232=$231; //@line 1406 "xmltok.c"
        var $233=$232+352; //@line 1406 "xmltok.c"
        HEAP[$233]=(FUNCTION_TABLE_OFFSET + 196); //@line 1406 "xmltok.c"
        var $234=$e; //@line 1407 "xmltok.c"
        var $235=$234; //@line 1407 "xmltok.c"
        var $236=$235+356; //@line 1407 "xmltok.c"
        HEAP[$236]=(FUNCTION_TABLE_OFFSET + 198); //@line 1407 "xmltok.c"
        var $237=$e; //@line 1408 "xmltok.c"
        var $238=$237; //@line 1408 "xmltok.c"
        var $239=$238+360; //@line 1408 "xmltok.c"
        HEAP[$239]=(FUNCTION_TABLE_OFFSET + 198); //@line 1408 "xmltok.c"
        var $240=$e; //@line 1409 "xmltok.c"
        var $241=$240; //@line 1409 "xmltok.c"
        var $242=$241+364; //@line 1409 "xmltok.c"
        HEAP[$242]=(FUNCTION_TABLE_OFFSET + 198); //@line 1409 "xmltok.c"
        __label__ = 39; break; //@line 1409 "xmltok.c"
      case 39: // $bb39
        var $243=$e; //@line 1411 "xmltok.c"
        var $244=$243; //@line 1411 "xmltok.c"
        var $245=$244; //@line 1411 "xmltok.c"
        var $246=$245+60; //@line 1411 "xmltok.c"
        HEAP[$246]=(FUNCTION_TABLE_OFFSET + 200); //@line 1411 "xmltok.c"
        var $247=$e; //@line 1412 "xmltok.c"
        var $248=$247; //@line 1412 "xmltok.c"
        var $249=$248; //@line 1412 "xmltok.c"
        var $250=$249+64; //@line 1412 "xmltok.c"
        HEAP[$250]=(FUNCTION_TABLE_OFFSET + 202); //@line 1412 "xmltok.c"
        var $251=$e; //@line 1413 "xmltok.c"
        var $252=$251; //@line 1413 "xmltok.c"
        var $253=$252; //@line 1413 "xmltok.c"
        $0=$253; //@line 1413 "xmltok.c"
        __label__ = 40; break; //@line 1413 "xmltok.c"
      case 40: // $bb40
        var $254=$0; //@line 1351 "xmltok.c"
        $retval=$254; //@line 1351 "xmltok.c"
        var $retval41=$retval; //@line 1351 "xmltok.c"
        ;
        return $retval41; //@line 1351 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getEncodingIndex($name) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $name_addr;
        var $retval;
        var $0;
        var $i;
        $name_addr=$name;
        var $1=$name_addr; //@line 1465 "xmltok.c"
        var $2=($1)==0; //@line 1465 "xmltok.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1465 "xmltok.c"
      case 1: // $bb
        $0=6; //@line 1466 "xmltok.c"
        __label__ = 8; break; //@line 1466 "xmltok.c"
      case 2: // $bb1
        $i=0; //@line 1467 "xmltok.c"
        __lastLabel__ = 2; __label__ = 6; break; //@line 1467 "xmltok.c"
      case 3: // $bb2
        var $3=$i; //@line 1468 "xmltok.c"
        var $4=_encodingNames_12955+$3*4; //@line 1468 "xmltok.c"
        var $5=HEAP[$4]; //@line 1468 "xmltok.c"
        var $6=$name_addr; //@line 1468 "xmltok.c"
        var $7=_streqci($6, $5); //@line 1468 "xmltok.c"
        var $8=($7)!=0; //@line 1468 "xmltok.c"
        var $9=$i; //@line 1469 "xmltok.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1468 "xmltok.c"
      case 4: // $bb3
        $0=$9; //@line 1469 "xmltok.c"
        __label__ = 8; break; //@line 1469 "xmltok.c"
      case 5: // $bb4
        var $10=($9) + 1; //@line 1467 "xmltok.c"
        $i=$10; //@line 1467 "xmltok.c"
        __lastLabel__ = 5; __label__ = 6; break; //@line 1467 "xmltok.c"
      case 6: // $bb5
        var $11=__lastLabel__ == 5 ? $10 : (0);
        var $12=($11) <= 5; //@line 1467 "xmltok.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 1467 "xmltok.c"
      case 7: // $bb6
        $0=-1; //@line 1470 "xmltok.c"
        __label__ = 8; break; //@line 1470 "xmltok.c"
      case 8: // $bb7
        var $13=$0; //@line 1466 "xmltok.c"
        $retval=$13; //@line 1466 "xmltok.c"
        var $retval8=$retval; //@line 1466 "xmltok.c"
        ;
        return $retval8; //@line 1466 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initScan($encodingTable, $enc, $state, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encodingTable_addr;
        var $enc_addr;
        var $state_addr;
        var $ptr_addr;
        var $end_addr;
        var $nextTokPtr_addr;
        var $retval;
        var $0;
        var $encPtr;
        var $e;
        $encodingTable_addr=$encodingTable;
        $enc_addr=$enc;
        $state_addr=$state;
        $ptr_addr=$ptr;
        $end_addr=$end;
        $nextTokPtr_addr=$nextTokPtr;
        var $1=$ptr_addr; //@line 1498 "xmltok.c"
        var $2=$end_addr; //@line 1498 "xmltok.c"
        var $3=($1)==($2); //@line 1498 "xmltok.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1498 "xmltok.c"
      case 1: // $bb
        $0=-4; //@line 1499 "xmltok.c"
        __label__ = 34; break; //@line 1499 "xmltok.c"
      case 2: // $bb1
        var $4=$enc_addr; //@line 1500 "xmltok.c"
        var $5=$4+76; //@line 1500 "xmltok.c"
        var $6=HEAP[$5]; //@line 1500 "xmltok.c"
        $encPtr=$6; //@line 1500 "xmltok.c"
        var $7=$ptr_addr; //@line 1501 "xmltok.c"
        var $8=$7+1; //@line 1501 "xmltok.c"
        var $9=$end_addr; //@line 1501 "xmltok.c"
        var $10=($8)==($9); //@line 1501 "xmltok.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 1501 "xmltok.c"
      case 3: // $bb2
        var $11=$enc_addr; //@line 1510 "xmltok.c"
        var $12=$11; //@line 1510 "xmltok.c"
        var $13=$12+73; //@line 1510 "xmltok.c"
        var $14=HEAP[$13]; //@line 1510 "xmltok.c"
        var $15=($14); //@line 1510 "xmltok.c"
        var $_off=($15) + -3;
        var $switch=($_off) < 3;
        if ($switch) { __label__ = 4; break; } else { __label__ = 5; break; }
      case 4: // $bb3
        $0=-1; //@line 1514 "xmltok.c"
        __label__ = 34; break; //@line 1514 "xmltok.c"
      case 5: // $bb4
        var $16=$ptr_addr; //@line 1516 "xmltok.c"
        var $17=HEAP[$16]; //@line 1516 "xmltok.c"
        var $18=($17); //@line 1516 "xmltok.c"
        if ($18 == 0) {
          __label__ = 8; break;
        }
        else if ($18 == 60) {
          __label__ = 8; break;
        }
        else if ($18 == 239) {
          __label__ = 6; break;
        }
        else if ($18 == 254) {
          __label__ = 6; break;
        }
        else if ($18 == 255) {
          __label__ = 6; break;
        }
        else {
        __label__ = 33; break;
        }
        
      case 6: // $bb5
        var $19=$enc_addr; //@line 1520 "xmltok.c"
        var $20=$19; //@line 1520 "xmltok.c"
        var $21=$20+73; //@line 1520 "xmltok.c"
        var $22=HEAP[$21]; //@line 1520 "xmltok.c"
        var $23=($22)==0; //@line 1520 "xmltok.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1520 "xmltok.c"
      case 7: // $bb6
        var $24=$state_addr; //@line 1520 "xmltok.c"
        var $25=($24)==1; //@line 1520 "xmltok.c"
        if ($25) { __label__ = 33; break; } else { __label__ = 8; break; } //@line 1520 "xmltok.c"
      case 8: // $bb7
        $0=-1; //@line 1526 "xmltok.c"
        __label__ = 34; break; //@line 1526 "xmltok.c"
      case 9: // $bb9
        var $26=$ptr_addr; //@line 1530 "xmltok.c"
        var $27=$26; //@line 1530 "xmltok.c"
        var $28=HEAP[$27]; //@line 1530 "xmltok.c"
        var $29=($28); //@line 1530 "xmltok.c"
        var $30=($29) << 8; //@line 1530 "xmltok.c"
        var $31=$ptr_addr; //@line 1530 "xmltok.c"
        var $32=$31+1; //@line 1530 "xmltok.c"
        var $33=HEAP[$32]; //@line 1530 "xmltok.c"
        var $34=($33); //@line 1530 "xmltok.c"
        var $35=($34) | ($30); //@line 1530 "xmltok.c"
        if ($35 == 15360) {
          __label__ = 13; break;
        }
        else if ($35 == 61371) {
          __label__ = 20; break;
        }
        else if ($35 == 65279) {
          __label__ = 10; break;
        }
        else if ($35 == 65534) {
          __label__ = 17; break;
        }
        else {
        __label__ = 26; break;
        }
        
      case 10: // $bb10
        var $36=$enc_addr; //@line 1532 "xmltok.c"
        var $37=$36; //@line 1532 "xmltok.c"
        var $38=$37+73; //@line 1532 "xmltok.c"
        var $39=HEAP[$38]; //@line 1532 "xmltok.c"
        var $40=($39)==0; //@line 1532 "xmltok.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1532 "xmltok.c"
      case 11: // $bb11
        var $41=$state_addr; //@line 1532 "xmltok.c"
        var $42=($41)==1; //@line 1532 "xmltok.c"
        if ($42) { __label__ = 33; break; } else { __label__ = 12; break; } //@line 1532 "xmltok.c"
      case 12: // $bb12
        var $43=$ptr_addr; //@line 1535 "xmltok.c"
        var $44=$43+2; //@line 1535 "xmltok.c"
        var $45=$nextTokPtr_addr; //@line 1535 "xmltok.c"
        HEAP[$45]=$44; //@line 1535 "xmltok.c"
        var $46=$encodingTable_addr; //@line 1536 "xmltok.c"
        var $47=$46+16; //@line 1536 "xmltok.c"
        var $48=HEAP[$47]; //@line 1536 "xmltok.c"
        var $49=$encPtr; //@line 1536 "xmltok.c"
        HEAP[$49]=$48; //@line 1536 "xmltok.c"
        $0=14; //@line 1537 "xmltok.c"
        __label__ = 34; break; //@line 1537 "xmltok.c"
      case 13: // $bb13
        var $50=$enc_addr; //@line 1540 "xmltok.c"
        var $51=$50; //@line 1540 "xmltok.c"
        var $52=$51+73; //@line 1540 "xmltok.c"
        var $53=HEAP[$52]; //@line 1540 "xmltok.c"
        var $54=($53)==4; //@line 1540 "xmltok.c"
        if ($54) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 1540 "xmltok.c"
      case 14: // $bb14
        var $55=$enc_addr; //@line 1540 "xmltok.c"
        var $56=$55; //@line 1540 "xmltok.c"
        var $57=$56+73; //@line 1540 "xmltok.c"
        var $58=HEAP[$57]; //@line 1540 "xmltok.c"
        var $59=($58)==3; //@line 1540 "xmltok.c"
        if ($59) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1540 "xmltok.c"
      case 15: // $bb15
        var $60=$state_addr; //@line 1540 "xmltok.c"
        var $61=($60)==1; //@line 1540 "xmltok.c"
        if ($61) { __label__ = 33; break; } else { __label__ = 16; break; } //@line 1540 "xmltok.c"
      case 16: // $bb16
        var $62=$encodingTable_addr; //@line 1544 "xmltok.c"
        var $63=$62+20; //@line 1544 "xmltok.c"
        var $64=HEAP[$63]; //@line 1544 "xmltok.c"
        var $65=$encPtr; //@line 1544 "xmltok.c"
        HEAP[$65]=$64; //@line 1544 "xmltok.c"
        var $66=$encPtr; //@line 1545 "xmltok.c"
        var $67=HEAP[$66]; //@line 1545 "xmltok.c"
        var $68=$state_addr; //@line 1545 "xmltok.c"
        var $69=$67; //@line 1545 "xmltok.c"
        var $70=$69+$68*4; //@line 1545 "xmltok.c"
        var $71=HEAP[$70]; //@line 1545 "xmltok.c"
        var $72=$encPtr; //@line 1545 "xmltok.c"
        var $73=HEAP[$72]; //@line 1545 "xmltok.c"
        var $74=$ptr_addr; //@line 1545 "xmltok.c"
        var $75=$end_addr; //@line 1545 "xmltok.c"
        var $76=$nextTokPtr_addr; //@line 1545 "xmltok.c"
        var $77=FUNCTION_TABLE[$71]($73, $74, $75, $76); //@line 1545 "xmltok.c"
        $0=$77; //@line 1545 "xmltok.c"
        __label__ = 34; break; //@line 1545 "xmltok.c"
      case 17: // $bb17
        var $78=$enc_addr; //@line 1547 "xmltok.c"
        var $79=$78; //@line 1547 "xmltok.c"
        var $80=$79+73; //@line 1547 "xmltok.c"
        var $81=HEAP[$80]; //@line 1547 "xmltok.c"
        var $82=($81)==0; //@line 1547 "xmltok.c"
        if ($82) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1547 "xmltok.c"
      case 18: // $bb18
        var $83=$state_addr; //@line 1547 "xmltok.c"
        var $84=($83)==1; //@line 1547 "xmltok.c"
        if ($84) { __label__ = 33; break; } else { __label__ = 19; break; } //@line 1547 "xmltok.c"
      case 19: // $bb19
        var $85=$ptr_addr; //@line 1550 "xmltok.c"
        var $86=$85+2; //@line 1550 "xmltok.c"
        var $87=$nextTokPtr_addr; //@line 1550 "xmltok.c"
        HEAP[$87]=$86; //@line 1550 "xmltok.c"
        var $88=$encodingTable_addr; //@line 1551 "xmltok.c"
        var $89=$88+20; //@line 1551 "xmltok.c"
        var $90=HEAP[$89]; //@line 1551 "xmltok.c"
        var $91=$encPtr; //@line 1551 "xmltok.c"
        HEAP[$91]=$90; //@line 1551 "xmltok.c"
        $0=14; //@line 1552 "xmltok.c"
        __label__ = 34; break; //@line 1552 "xmltok.c"
      case 20: // $bb20
        var $92=$state_addr; //@line 1561 "xmltok.c"
        var $93=($92)==1; //@line 1561 "xmltok.c"
        if ($93) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1561 "xmltok.c"
      case 21: // $bb21
        var $94=$enc_addr; //@line 1562 "xmltok.c"
        var $95=$94; //@line 1562 "xmltok.c"
        var $96=$95+73; //@line 1562 "xmltok.c"
        var $97=HEAP[$96]; //@line 1562 "xmltok.c"
        var $98=($97); //@line 1562 "xmltok.c"
        $e=$98; //@line 1562 "xmltok.c"
        var $99=$e; //@line 1563 "xmltok.c"
        var $100=($99)==0; //@line 1563 "xmltok.c"
        var $101=$e; //@line 1563 "xmltok.c"
        var $102=($101)==4; //@line 1563 "xmltok.c"
        var $or_cond=($100) | ($102);
        var $103=$e; //@line 1563 "xmltok.c"
        var $104=($103)==5; //@line 1563 "xmltok.c"
        var $or_cond3=($or_cond) | ($104);
        var $105=$e; //@line 1563 "xmltok.c"
        var $106=($105)==3; //@line 1563 "xmltok.c"
        var $or_cond5=($or_cond3) | ($106);
        if ($or_cond5) { __label__ = 33; break; } else { __label__ = 22; break; } //@line 1563 "xmltok.c"
      case 22: // $bb25
        var $107=$ptr_addr; //@line 1567 "xmltok.c"
        var $108=$107+2; //@line 1567 "xmltok.c"
        var $109=$end_addr; //@line 1567 "xmltok.c"
        var $110=($108)==($109); //@line 1567 "xmltok.c"
        if ($110) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1567 "xmltok.c"
      case 23: // $bb26
        $0=-1; //@line 1568 "xmltok.c"
        __label__ = 34; break; //@line 1568 "xmltok.c"
      case 24: // $bb27
        var $111=$ptr_addr; //@line 1569 "xmltok.c"
        var $112=$111+2; //@line 1569 "xmltok.c"
        var $113=HEAP[$112]; //@line 1569 "xmltok.c"
        var $114=($113)==-65; //@line 1569 "xmltok.c"
        if ($114) { __label__ = 25; break; } else { __label__ = 33; break; } //@line 1569 "xmltok.c"
      case 25: // $bb28
        var $115=$ptr_addr; //@line 1570 "xmltok.c"
        var $116=$115+3; //@line 1570 "xmltok.c"
        var $117=$nextTokPtr_addr; //@line 1570 "xmltok.c"
        HEAP[$117]=$116; //@line 1570 "xmltok.c"
        var $118=$encodingTable_addr; //@line 1571 "xmltok.c"
        var $119=$118+8; //@line 1571 "xmltok.c"
        var $120=HEAP[$119]; //@line 1571 "xmltok.c"
        var $121=$encPtr; //@line 1571 "xmltok.c"
        HEAP[$121]=$120; //@line 1571 "xmltok.c"
        $0=14; //@line 1572 "xmltok.c"
        __label__ = 34; break; //@line 1572 "xmltok.c"
      case 26: // $bb30
        var $122=$ptr_addr; //@line 1576 "xmltok.c"
        var $123=$122; //@line 1576 "xmltok.c"
        var $124=HEAP[$123]; //@line 1576 "xmltok.c"
        var $125=($124)==0; //@line 1576 "xmltok.c"
        if ($125) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 1576 "xmltok.c"
      case 27: // $bb31
        var $126=$state_addr; //@line 1583 "xmltok.c"
        var $127=($126)==1; //@line 1583 "xmltok.c"
        if ($127) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1583 "xmltok.c"
      case 28: // $bb32
        var $128=$enc_addr; //@line 1583 "xmltok.c"
        var $129=$128; //@line 1583 "xmltok.c"
        var $130=$129+73; //@line 1583 "xmltok.c"
        var $131=HEAP[$130]; //@line 1583 "xmltok.c"
        var $132=($131)==5; //@line 1583 "xmltok.c"
        if ($132) { __label__ = 33; break; } else { __label__ = 29; break; } //@line 1583 "xmltok.c"
      case 29: // $bb33
        var $133=$encodingTable_addr; //@line 1585 "xmltok.c"
        var $134=$133+16; //@line 1585 "xmltok.c"
        var $135=HEAP[$134]; //@line 1585 "xmltok.c"
        var $136=$encPtr; //@line 1585 "xmltok.c"
        HEAP[$136]=$135; //@line 1585 "xmltok.c"
        var $137=$encPtr; //@line 1586 "xmltok.c"
        var $138=HEAP[$137]; //@line 1586 "xmltok.c"
        var $139=$state_addr; //@line 1586 "xmltok.c"
        var $140=$138; //@line 1586 "xmltok.c"
        var $141=$140+$139*4; //@line 1586 "xmltok.c"
        var $142=HEAP[$141]; //@line 1586 "xmltok.c"
        var $143=$encPtr; //@line 1586 "xmltok.c"
        var $144=HEAP[$143]; //@line 1586 "xmltok.c"
        var $145=$ptr_addr; //@line 1586 "xmltok.c"
        var $146=$end_addr; //@line 1586 "xmltok.c"
        var $147=$nextTokPtr_addr; //@line 1586 "xmltok.c"
        var $148=FUNCTION_TABLE[$142]($144, $145, $146, $147); //@line 1586 "xmltok.c"
        $0=$148; //@line 1586 "xmltok.c"
        __label__ = 34; break; //@line 1586 "xmltok.c"
      case 30: // $bb34
        var $149=$ptr_addr; //@line 1588 "xmltok.c"
        var $150=$149+1; //@line 1588 "xmltok.c"
        var $151=HEAP[$150]; //@line 1588 "xmltok.c"
        var $152=($151)==0; //@line 1588 "xmltok.c"
        if ($152) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 1588 "xmltok.c"
      case 31: // $bb35
        var $153=$state_addr; //@line 1598 "xmltok.c"
        var $154=($153)==1; //@line 1598 "xmltok.c"
        if ($154) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 1598 "xmltok.c"
      case 32: // $bb36
        var $155=$encodingTable_addr; //@line 1600 "xmltok.c"
        var $156=$155+20; //@line 1600 "xmltok.c"
        var $157=HEAP[$156]; //@line 1600 "xmltok.c"
        var $158=$encPtr; //@line 1600 "xmltok.c"
        HEAP[$158]=$157; //@line 1600 "xmltok.c"
        var $159=$encPtr; //@line 1601 "xmltok.c"
        var $160=HEAP[$159]; //@line 1601 "xmltok.c"
        var $161=$state_addr; //@line 1601 "xmltok.c"
        var $162=$160; //@line 1601 "xmltok.c"
        var $163=$162+$161*4; //@line 1601 "xmltok.c"
        var $164=HEAP[$163]; //@line 1601 "xmltok.c"
        var $165=$encPtr; //@line 1601 "xmltok.c"
        var $166=HEAP[$165]; //@line 1601 "xmltok.c"
        var $167=$ptr_addr; //@line 1601 "xmltok.c"
        var $168=$end_addr; //@line 1601 "xmltok.c"
        var $169=$nextTokPtr_addr; //@line 1601 "xmltok.c"
        var $170=FUNCTION_TABLE[$164]($166, $167, $168, $169); //@line 1601 "xmltok.c"
        $0=$170; //@line 1601 "xmltok.c"
        __label__ = 34; break; //@line 1601 "xmltok.c"
      case 33: // $bb37
        var $171=$enc_addr; //@line 1606 "xmltok.c"
        var $172=$171; //@line 1606 "xmltok.c"
        var $173=$172+73; //@line 1606 "xmltok.c"
        var $174=HEAP[$173]; //@line 1606 "xmltok.c"
        var $175=($174); //@line 1606 "xmltok.c"
        var $176=$encodingTable_addr; //@line 1606 "xmltok.c"
        var $177=$176+4*$175; //@line 1606 "xmltok.c"
        var $178=HEAP[$177]; //@line 1606 "xmltok.c"
        var $179=$encPtr; //@line 1606 "xmltok.c"
        HEAP[$179]=$178; //@line 1606 "xmltok.c"
        var $180=$encPtr; //@line 1607 "xmltok.c"
        var $181=HEAP[$180]; //@line 1607 "xmltok.c"
        var $182=$state_addr; //@line 1607 "xmltok.c"
        var $183=$181; //@line 1607 "xmltok.c"
        var $184=$183+$182*4; //@line 1607 "xmltok.c"
        var $185=HEAP[$184]; //@line 1607 "xmltok.c"
        var $186=$encPtr; //@line 1607 "xmltok.c"
        var $187=HEAP[$186]; //@line 1607 "xmltok.c"
        var $188=$ptr_addr; //@line 1607 "xmltok.c"
        var $189=$end_addr; //@line 1607 "xmltok.c"
        var $190=$nextTokPtr_addr; //@line 1607 "xmltok.c"
        var $191=FUNCTION_TABLE[$185]($187, $188, $189, $190); //@line 1607 "xmltok.c"
        $0=$191; //@line 1607 "xmltok.c"
        __label__ = 34; break; //@line 1607 "xmltok.c"
      case 34: // $bb38
        var $192=$0; //@line 1499 "xmltok.c"
        $retval=$192; //@line 1499 "xmltok.c"
        var $retval39=$retval; //@line 1499 "xmltok.c"
        ;
        return $retval39; //@line 1499 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlGetUtf8InternalEncoding() {
    ;
    var __label__;
  
    var $retval;
    var $0;
    $0=_internal_utf8_encoding; //@line 4 "xmltok_ns.c"
    var $1=$0; //@line 4 "xmltok_ns.c"
    $retval=$1; //@line 4 "xmltok_ns.c"
    var $retval1=$retval; //@line 4 "xmltok_ns.c"
    ;
    return $retval1; //@line 4 "xmltok_ns.c"
  }
  

  function _PyExpat_XmlGetUtf16InternalEncoding() {
    ;
    var __label__;
  
    var $retval;
    var $0;
    $0=_internal_little2_encoding; //@line 11 "xmltok_ns.c"
    var $1=$0; //@line 11 "xmltok_ns.c"
    $retval=$1; //@line 11 "xmltok_ns.c"
    var $retval1=$retval; //@line 11 "xmltok_ns.c"
    ;
    return $retval1; //@line 11 "xmltok_ns.c"
  }
  

  function _initScanProlog($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
  
    var $enc_addr;
    var $ptr_addr;
    var $end_addr;
    var $nextTokPtr_addr;
    var $retval;
    var $0;
    $enc_addr=$enc;
    $ptr_addr=$ptr;
    $end_addr=$end;
    $nextTokPtr_addr=$nextTokPtr;
    var $1=$enc_addr; //@line 36 "xmltok_ns.c"
    var $2=$1; //@line 36 "xmltok_ns.c"
    var $3=$ptr_addr; //@line 36 "xmltok_ns.c"
    var $4=$end_addr; //@line 36 "xmltok_ns.c"
    var $5=$nextTokPtr_addr; //@line 36 "xmltok_ns.c"
    var $6=_initScan(_encodings, $2, 0, $3, $4, $5); //@line 36 "xmltok_ns.c"
    $0=$6; //@line 36 "xmltok_ns.c"
    var $7=$0; //@line 36 "xmltok_ns.c"
    $retval=$7; //@line 36 "xmltok_ns.c"
    var $retval1=$retval; //@line 36 "xmltok_ns.c"
    ;
    return $retval1; //@line 36 "xmltok_ns.c"
  }
  

  function _initScanContent($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
  
    var $enc_addr;
    var $ptr_addr;
    var $end_addr;
    var $nextTokPtr_addr;
    var $retval;
    var $0;
    $enc_addr=$enc;
    $ptr_addr=$ptr;
    $end_addr=$end;
    $nextTokPtr_addr=$nextTokPtr;
    var $1=$enc_addr; //@line 44 "xmltok_ns.c"
    var $2=$1; //@line 44 "xmltok_ns.c"
    var $3=$ptr_addr; //@line 44 "xmltok_ns.c"
    var $4=$end_addr; //@line 44 "xmltok_ns.c"
    var $5=$nextTokPtr_addr; //@line 44 "xmltok_ns.c"
    var $6=_initScan(_encodings, $2, 1, $3, $4, $5); //@line 44 "xmltok_ns.c"
    $0=$6; //@line 44 "xmltok_ns.c"
    var $7=$0; //@line 44 "xmltok_ns.c"
    $retval=$7; //@line 44 "xmltok_ns.c"
    var $retval1=$retval; //@line 44 "xmltok_ns.c"
    ;
    return $retval1; //@line 44 "xmltok_ns.c"
  }
  

  function _PyExpat_XmlInitEncoding($p, $encPtr, $name) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $encPtr_addr;
        var $name_addr;
        var $retval;
        var $0;
        var $i;
        $p_addr=$p;
        $encPtr_addr=$encPtr;
        $name_addr=$name;
        var $1=$name_addr; //@line 52 "xmltok_ns.c"
        var $2=_getEncodingIndex($1); //@line 52 "xmltok_ns.c"
        $i=$2; //@line 52 "xmltok_ns.c"
        var $3=$i; //@line 53 "xmltok_ns.c"
        var $4=($3)==-1; //@line 53 "xmltok_ns.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 53 "xmltok_ns.c"
      case 1: // $bb
        $0=0; //@line 54 "xmltok_ns.c"
        __label__ = 3; break; //@line 54 "xmltok_ns.c"
      case 2: // $bb1
        var $5=$i; //@line 55 "xmltok_ns.c"
        var $6=((($5)) & 255); //@line 55 "xmltok_ns.c"
        var $7=$p_addr; //@line 55 "xmltok_ns.c"
        var $8=$7; //@line 55 "xmltok_ns.c"
        var $9=$8+73; //@line 55 "xmltok_ns.c"
        HEAP[$9]=$6; //@line 55 "xmltok_ns.c"
        var $10=$p_addr; //@line 56 "xmltok_ns.c"
        var $11=$10; //@line 56 "xmltok_ns.c"
        var $12=$11; //@line 56 "xmltok_ns.c"
        var $13=$12; //@line 56 "xmltok_ns.c"
        HEAP[$13]=(FUNCTION_TABLE_OFFSET + 204); //@line 56 "xmltok_ns.c"
        var $14=$p_addr; //@line 57 "xmltok_ns.c"
        var $15=$14; //@line 57 "xmltok_ns.c"
        var $16=$15; //@line 57 "xmltok_ns.c"
        var $17=$16+4; //@line 57 "xmltok_ns.c"
        HEAP[$17]=(FUNCTION_TABLE_OFFSET + 206); //@line 57 "xmltok_ns.c"
        var $18=$p_addr; //@line 58 "xmltok_ns.c"
        var $19=$18; //@line 58 "xmltok_ns.c"
        var $20=$19+52; //@line 58 "xmltok_ns.c"
        HEAP[$20]=(FUNCTION_TABLE_OFFSET + 208); //@line 58 "xmltok_ns.c"
        var $21=$p_addr; //@line 59 "xmltok_ns.c"
        var $22=$21+76; //@line 59 "xmltok_ns.c"
        var $23=$encPtr_addr; //@line 59 "xmltok_ns.c"
        HEAP[$22]=$23; //@line 59 "xmltok_ns.c"
        var $24=$p_addr; //@line 60 "xmltok_ns.c"
        var $25=$24; //@line 60 "xmltok_ns.c"
        var $26=$encPtr_addr; //@line 60 "xmltok_ns.c"
        HEAP[$26]=$25; //@line 60 "xmltok_ns.c"
        $0=1; //@line 61 "xmltok_ns.c"
        __label__ = 3; break; //@line 61 "xmltok_ns.c"
      case 3: // $bb2
        var $27=$0; //@line 54 "xmltok_ns.c"
        $retval=$27; //@line 54 "xmltok_ns.c"
        var $retval3=$retval; //@line 54 "xmltok_ns.c"
        ;
        return $retval3; //@line 54 "xmltok_ns.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _findEncoding($enc, $ptr, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 136; _memset(__stackBase__, 0, 136);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr=__stackBase__;
        var $end_addr;
        var $retval;
        var $0;
        var $buf=__stackBase__+4;
        var $p=__stackBase__+132;
        var $i;
        $enc_addr=$enc;
        HEAP[$ptr_addr]=$ptr;
        $end_addr=$end;
        var $buf1=$buf; //@line 69 "xmltok_ns.c"
        HEAP[$p]=$buf1; //@line 69 "xmltok_ns.c"
        var $1=$enc_addr; //@line 71 "xmltok_ns.c"
        var $2=$1+60; //@line 71 "xmltok_ns.c"
        var $3=HEAP[$2]; //@line 71 "xmltok_ns.c"
        var $4=HEAP[$p]; //@line 71 "xmltok_ns.c"
        var $5=$4+128; //@line 71 "xmltok_ns.c"
        var $6=$5+-1; //@line 71 "xmltok_ns.c"
        var $7=$enc_addr; //@line 71 "xmltok_ns.c"
        var $8=$end_addr; //@line 71 "xmltok_ns.c"
        FUNCTION_TABLE[$3]($7, $ptr_addr, $8, $p, $6); //@line 71 "xmltok_ns.c"
        var $9=HEAP[$ptr_addr]; //@line 72 "xmltok_ns.c"
        var $10=$end_addr; //@line 72 "xmltok_ns.c"
        var $11=($9)!=($10); //@line 72 "xmltok_ns.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 72 "xmltok_ns.c"
      case 1: // $bb
        $0=0; //@line 73 "xmltok_ns.c"
        __label__ = 8; break; //@line 73 "xmltok_ns.c"
      case 2: // $bb2
        var $12=HEAP[$p]; //@line 74 "xmltok_ns.c"
        HEAP[$12]=0; //@line 74 "xmltok_ns.c"
        var $buf3=$buf; //@line 75 "xmltok_ns.c"
        var $13=_streqci($buf3, _KW_UTF_16); //@line 75 "xmltok_ns.c"
        var $14=($13)!=0; //@line 75 "xmltok_ns.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 75 "xmltok_ns.c"
      case 3: // $bb4
        var $15=$enc_addr; //@line 75 "xmltok_ns.c"
        var $16=$15+68; //@line 75 "xmltok_ns.c"
        var $17=HEAP[$16]; //@line 75 "xmltok_ns.c"
        var $18=($17)==2; //@line 75 "xmltok_ns.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 75 "xmltok_ns.c"
      case 4: // $bb5
        var $19=$enc_addr; //@line 76 "xmltok_ns.c"
        $0=$19; //@line 76 "xmltok_ns.c"
        __label__ = 8; break; //@line 76 "xmltok_ns.c"
      case 5: // $bb6
        var $buf7=$buf; //@line 77 "xmltok_ns.c"
        var $20=_getEncodingIndex($buf7); //@line 77 "xmltok_ns.c"
        $i=$20; //@line 77 "xmltok_ns.c"
        var $21=($20)==-1; //@line 78 "xmltok_ns.c"
        if ($21) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 78 "xmltok_ns.c"
      case 6: // $bb8
        $0=0; //@line 79 "xmltok_ns.c"
        __label__ = 8; break; //@line 79 "xmltok_ns.c"
      case 7: // $bb9
        var $22=$i; //@line 80 "xmltok_ns.c"
        var $23=_encodings+$22*4; //@line 80 "xmltok_ns.c"
        var $24=HEAP[$23]; //@line 80 "xmltok_ns.c"
        $0=$24; //@line 80 "xmltok_ns.c"
        __label__ = 8; break; //@line 80 "xmltok_ns.c"
      case 8: // $bb10
        var $25=$0; //@line 73 "xmltok_ns.c"
        $retval=$25; //@line 73 "xmltok_ns.c"
        var $retval11=$retval; //@line 73 "xmltok_ns.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 73 "xmltok_ns.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlParseXmlDecl($isGeneralTextEntity, $enc, $ptr, $end, $badPtr, $versionPtr, $versionEndPtr, $encodingName, $encoding, $standalone) {
    ;
    var __label__;
  
    var $isGeneralTextEntity_addr;
    var $enc_addr;
    var $ptr_addr;
    var $end_addr;
    var $badPtr_addr;
    var $versionPtr_addr;
    var $versionEndPtr_addr;
    var $encodingName_addr;
    var $encoding_addr;
    var $standalone_addr;
    var $retval;
    var $0;
    $isGeneralTextEntity_addr=$isGeneralTextEntity;
    $enc_addr=$enc;
    $ptr_addr=$ptr;
    $end_addr=$end;
    $badPtr_addr=$badPtr;
    $versionPtr_addr=$versionPtr;
    $versionEndPtr_addr=$versionEndPtr;
    $encodingName_addr=$encodingName;
    $encoding_addr=$encoding;
    $standalone_addr=$standalone;
    var $1=$isGeneralTextEntity_addr; //@line 95 "xmltok_ns.c"
    var $2=$enc_addr; //@line 95 "xmltok_ns.c"
    var $3=$ptr_addr; //@line 95 "xmltok_ns.c"
    var $4=$end_addr; //@line 95 "xmltok_ns.c"
    var $5=$badPtr_addr; //@line 95 "xmltok_ns.c"
    var $6=$versionPtr_addr; //@line 95 "xmltok_ns.c"
    var $7=$versionEndPtr_addr; //@line 95 "xmltok_ns.c"
    var $8=$encodingName_addr; //@line 95 "xmltok_ns.c"
    var $9=$encoding_addr; //@line 95 "xmltok_ns.c"
    var $10=$standalone_addr; //@line 95 "xmltok_ns.c"
    var $11=_doParseXmlDecl((FUNCTION_TABLE_OFFSET + 210), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10); //@line 95 "xmltok_ns.c"
    $0=$11; //@line 95 "xmltok_ns.c"
    var $12=$0; //@line 95 "xmltok_ns.c"
    $retval=$12; //@line 95 "xmltok_ns.c"
    var $retval1=$retval; //@line 95 "xmltok_ns.c"
    ;
    return $retval1; //@line 95 "xmltok_ns.c"
  }
  

  function _PyExpat_XmlGetUtf8InternalEncodingNS() {
    ;
    var __label__;
  
    var $retval;
    var $0;
    $0=_internal_utf8_encoding_ns; //@line 4 "xmltok_ns.c"
    var $1=$0; //@line 4 "xmltok_ns.c"
    $retval=$1; //@line 4 "xmltok_ns.c"
    var $retval1=$retval; //@line 4 "xmltok_ns.c"
    ;
    return $retval1; //@line 4 "xmltok_ns.c"
  }
  

  function _PyExpat_XmlGetUtf16InternalEncodingNS() {
    ;
    var __label__;
  
    var $retval;
    var $0;
    $0=_internal_little2_encoding_ns; //@line 11 "xmltok_ns.c"
    var $1=$0; //@line 11 "xmltok_ns.c"
    $retval=$1; //@line 11 "xmltok_ns.c"
    var $retval1=$retval; //@line 11 "xmltok_ns.c"
    ;
    return $retval1; //@line 11 "xmltok_ns.c"
  }
  

  function _initScanPrologNS($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
  
    var $enc_addr;
    var $ptr_addr;
    var $end_addr;
    var $nextTokPtr_addr;
    var $retval;
    var $0;
    $enc_addr=$enc;
    $ptr_addr=$ptr;
    $end_addr=$end;
    $nextTokPtr_addr=$nextTokPtr;
    var $1=$enc_addr; //@line 36 "xmltok_ns.c"
    var $2=$1; //@line 36 "xmltok_ns.c"
    var $3=$ptr_addr; //@line 36 "xmltok_ns.c"
    var $4=$end_addr; //@line 36 "xmltok_ns.c"
    var $5=$nextTokPtr_addr; //@line 36 "xmltok_ns.c"
    var $6=_initScan(_encodingsNS, $2, 0, $3, $4, $5); //@line 36 "xmltok_ns.c"
    $0=$6; //@line 36 "xmltok_ns.c"
    var $7=$0; //@line 36 "xmltok_ns.c"
    $retval=$7; //@line 36 "xmltok_ns.c"
    var $retval1=$retval; //@line 36 "xmltok_ns.c"
    ;
    return $retval1; //@line 36 "xmltok_ns.c"
  }
  

  function _initScanContentNS($enc, $ptr, $end, $nextTokPtr) {
    ;
    var __label__;
  
    var $enc_addr;
    var $ptr_addr;
    var $end_addr;
    var $nextTokPtr_addr;
    var $retval;
    var $0;
    $enc_addr=$enc;
    $ptr_addr=$ptr;
    $end_addr=$end;
    $nextTokPtr_addr=$nextTokPtr;
    var $1=$enc_addr; //@line 44 "xmltok_ns.c"
    var $2=$1; //@line 44 "xmltok_ns.c"
    var $3=$ptr_addr; //@line 44 "xmltok_ns.c"
    var $4=$end_addr; //@line 44 "xmltok_ns.c"
    var $5=$nextTokPtr_addr; //@line 44 "xmltok_ns.c"
    var $6=_initScan(_encodingsNS, $2, 1, $3, $4, $5); //@line 44 "xmltok_ns.c"
    $0=$6; //@line 44 "xmltok_ns.c"
    var $7=$0; //@line 44 "xmltok_ns.c"
    $retval=$7; //@line 44 "xmltok_ns.c"
    var $retval1=$retval; //@line 44 "xmltok_ns.c"
    ;
    return $retval1; //@line 44 "xmltok_ns.c"
  }
  

  function _PyExpat_XmlInitEncodingNS($p, $encPtr, $name) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $encPtr_addr;
        var $name_addr;
        var $retval;
        var $0;
        var $i;
        $p_addr=$p;
        $encPtr_addr=$encPtr;
        $name_addr=$name;
        var $1=$name_addr; //@line 52 "xmltok_ns.c"
        var $2=_getEncodingIndex($1); //@line 52 "xmltok_ns.c"
        $i=$2; //@line 52 "xmltok_ns.c"
        var $3=$i; //@line 53 "xmltok_ns.c"
        var $4=($3)==-1; //@line 53 "xmltok_ns.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 53 "xmltok_ns.c"
      case 1: // $bb
        $0=0; //@line 54 "xmltok_ns.c"
        __label__ = 3; break; //@line 54 "xmltok_ns.c"
      case 2: // $bb1
        var $5=$i; //@line 55 "xmltok_ns.c"
        var $6=((($5)) & 255); //@line 55 "xmltok_ns.c"
        var $7=$p_addr; //@line 55 "xmltok_ns.c"
        var $8=$7; //@line 55 "xmltok_ns.c"
        var $9=$8+73; //@line 55 "xmltok_ns.c"
        HEAP[$9]=$6; //@line 55 "xmltok_ns.c"
        var $10=$p_addr; //@line 56 "xmltok_ns.c"
        var $11=$10; //@line 56 "xmltok_ns.c"
        var $12=$11; //@line 56 "xmltok_ns.c"
        var $13=$12; //@line 56 "xmltok_ns.c"
        HEAP[$13]=(FUNCTION_TABLE_OFFSET + 212); //@line 56 "xmltok_ns.c"
        var $14=$p_addr; //@line 57 "xmltok_ns.c"
        var $15=$14; //@line 57 "xmltok_ns.c"
        var $16=$15; //@line 57 "xmltok_ns.c"
        var $17=$16+4; //@line 57 "xmltok_ns.c"
        HEAP[$17]=(FUNCTION_TABLE_OFFSET + 214); //@line 57 "xmltok_ns.c"
        var $18=$p_addr; //@line 58 "xmltok_ns.c"
        var $19=$18; //@line 58 "xmltok_ns.c"
        var $20=$19+52; //@line 58 "xmltok_ns.c"
        HEAP[$20]=(FUNCTION_TABLE_OFFSET + 208); //@line 58 "xmltok_ns.c"
        var $21=$p_addr; //@line 59 "xmltok_ns.c"
        var $22=$21+76; //@line 59 "xmltok_ns.c"
        var $23=$encPtr_addr; //@line 59 "xmltok_ns.c"
        HEAP[$22]=$23; //@line 59 "xmltok_ns.c"
        var $24=$p_addr; //@line 60 "xmltok_ns.c"
        var $25=$24; //@line 60 "xmltok_ns.c"
        var $26=$encPtr_addr; //@line 60 "xmltok_ns.c"
        HEAP[$26]=$25; //@line 60 "xmltok_ns.c"
        $0=1; //@line 61 "xmltok_ns.c"
        __label__ = 3; break; //@line 61 "xmltok_ns.c"
      case 3: // $bb2
        var $27=$0; //@line 54 "xmltok_ns.c"
        $retval=$27; //@line 54 "xmltok_ns.c"
        var $retval3=$retval; //@line 54 "xmltok_ns.c"
        ;
        return $retval3; //@line 54 "xmltok_ns.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _findEncodingNS($enc, $ptr, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 136; _memset(__stackBase__, 0, 136);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr;
        var $ptr_addr=__stackBase__;
        var $end_addr;
        var $retval;
        var $0;
        var $buf=__stackBase__+4;
        var $p=__stackBase__+132;
        var $i;
        $enc_addr=$enc;
        HEAP[$ptr_addr]=$ptr;
        $end_addr=$end;
        var $buf1=$buf; //@line 69 "xmltok_ns.c"
        HEAP[$p]=$buf1; //@line 69 "xmltok_ns.c"
        var $1=$enc_addr; //@line 71 "xmltok_ns.c"
        var $2=$1+60; //@line 71 "xmltok_ns.c"
        var $3=HEAP[$2]; //@line 71 "xmltok_ns.c"
        var $4=HEAP[$p]; //@line 71 "xmltok_ns.c"
        var $5=$4+128; //@line 71 "xmltok_ns.c"
        var $6=$5+-1; //@line 71 "xmltok_ns.c"
        var $7=$enc_addr; //@line 71 "xmltok_ns.c"
        var $8=$end_addr; //@line 71 "xmltok_ns.c"
        FUNCTION_TABLE[$3]($7, $ptr_addr, $8, $p, $6); //@line 71 "xmltok_ns.c"
        var $9=HEAP[$ptr_addr]; //@line 72 "xmltok_ns.c"
        var $10=$end_addr; //@line 72 "xmltok_ns.c"
        var $11=($9)!=($10); //@line 72 "xmltok_ns.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 72 "xmltok_ns.c"
      case 1: // $bb
        $0=0; //@line 73 "xmltok_ns.c"
        __label__ = 8; break; //@line 73 "xmltok_ns.c"
      case 2: // $bb2
        var $12=HEAP[$p]; //@line 74 "xmltok_ns.c"
        HEAP[$12]=0; //@line 74 "xmltok_ns.c"
        var $buf3=$buf; //@line 75 "xmltok_ns.c"
        var $13=_streqci($buf3, _KW_UTF_16); //@line 75 "xmltok_ns.c"
        var $14=($13)!=0; //@line 75 "xmltok_ns.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 75 "xmltok_ns.c"
      case 3: // $bb4
        var $15=$enc_addr; //@line 75 "xmltok_ns.c"
        var $16=$15+68; //@line 75 "xmltok_ns.c"
        var $17=HEAP[$16]; //@line 75 "xmltok_ns.c"
        var $18=($17)==2; //@line 75 "xmltok_ns.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 75 "xmltok_ns.c"
      case 4: // $bb5
        var $19=$enc_addr; //@line 76 "xmltok_ns.c"
        $0=$19; //@line 76 "xmltok_ns.c"
        __label__ = 8; break; //@line 76 "xmltok_ns.c"
      case 5: // $bb6
        var $buf7=$buf; //@line 77 "xmltok_ns.c"
        var $20=_getEncodingIndex($buf7); //@line 77 "xmltok_ns.c"
        $i=$20; //@line 77 "xmltok_ns.c"
        var $21=($20)==-1; //@line 78 "xmltok_ns.c"
        if ($21) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 78 "xmltok_ns.c"
      case 6: // $bb8
        $0=0; //@line 79 "xmltok_ns.c"
        __label__ = 8; break; //@line 79 "xmltok_ns.c"
      case 7: // $bb9
        var $22=$i; //@line 80 "xmltok_ns.c"
        var $23=_encodingsNS+$22*4; //@line 80 "xmltok_ns.c"
        var $24=HEAP[$23]; //@line 80 "xmltok_ns.c"
        $0=$24; //@line 80 "xmltok_ns.c"
        __label__ = 8; break; //@line 80 "xmltok_ns.c"
      case 8: // $bb10
        var $25=$0; //@line 73 "xmltok_ns.c"
        $retval=$25; //@line 73 "xmltok_ns.c"
        var $retval11=$retval; //@line 73 "xmltok_ns.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 73 "xmltok_ns.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlParseXmlDeclNS($isGeneralTextEntity, $enc, $ptr, $end, $badPtr, $versionPtr, $versionEndPtr, $encodingName, $encoding, $standalone) {
    ;
    var __label__;
  
    var $isGeneralTextEntity_addr;
    var $enc_addr;
    var $ptr_addr;
    var $end_addr;
    var $badPtr_addr;
    var $versionPtr_addr;
    var $versionEndPtr_addr;
    var $encodingName_addr;
    var $encoding_addr;
    var $standalone_addr;
    var $retval;
    var $0;
    $isGeneralTextEntity_addr=$isGeneralTextEntity;
    $enc_addr=$enc;
    $ptr_addr=$ptr;
    $end_addr=$end;
    $badPtr_addr=$badPtr;
    $versionPtr_addr=$versionPtr;
    $versionEndPtr_addr=$versionEndPtr;
    $encodingName_addr=$encodingName;
    $encoding_addr=$encoding;
    $standalone_addr=$standalone;
    var $1=$isGeneralTextEntity_addr; //@line 95 "xmltok_ns.c"
    var $2=$enc_addr; //@line 95 "xmltok_ns.c"
    var $3=$ptr_addr; //@line 95 "xmltok_ns.c"
    var $4=$end_addr; //@line 95 "xmltok_ns.c"
    var $5=$badPtr_addr; //@line 95 "xmltok_ns.c"
    var $6=$versionPtr_addr; //@line 95 "xmltok_ns.c"
    var $7=$versionEndPtr_addr; //@line 95 "xmltok_ns.c"
    var $8=$encodingName_addr; //@line 95 "xmltok_ns.c"
    var $9=$encoding_addr; //@line 95 "xmltok_ns.c"
    var $10=$standalone_addr; //@line 95 "xmltok_ns.c"
    var $11=_doParseXmlDecl((FUNCTION_TABLE_OFFSET + 216), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10); //@line 95 "xmltok_ns.c"
    $0=$11; //@line 95 "xmltok_ns.c"
    var $12=$0; //@line 95 "xmltok_ns.c"
    $retval=$12; //@line 95 "xmltok_ns.c"
    var $retval1=$retval; //@line 95 "xmltok_ns.c"
    ;
    return $retval1; //@line 95 "xmltok_ns.c"
  }
  

  function _PyExpat_XmlInitUnknownEncodingNS($mem, $table, $convert, $userData) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $mem_addr;
        var $table_addr;
        var $convert_addr;
        var $userData_addr;
        var $retval;
        var $0;
        var $enc;
        $mem_addr=$mem;
        $table_addr=$table;
        $convert_addr=$convert;
        $userData_addr=$userData;
        var $1=$mem_addr; //@line 1633 "xmltok.c"
        var $2=$table_addr; //@line 1633 "xmltok.c"
        var $3=$convert_addr; //@line 1633 "xmltok.c"
        var $4=$userData_addr; //@line 1633 "xmltok.c"
        var $5=_PyExpat_XmlInitUnknownEncoding($1, $2, $3, $4); //@line 1633 "xmltok.c"
        $enc=$5; //@line 1633 "xmltok.c"
        var $6=$enc; //@line 1634 "xmltok.c"
        var $7=($6)!=0; //@line 1634 "xmltok.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1634 "xmltok.c"
      case 1: // $bb
        var $8=$enc; //@line 1635 "xmltok.c"
        var $9=$8; //@line 1635 "xmltok.c"
        var $10=$9+76; //@line 1635 "xmltok.c"
        var $11=$10+58; //@line 1635 "xmltok.c"
        HEAP[$11]=23; //@line 1635 "xmltok.c"
        __label__ = 2; break; //@line 1635 "xmltok.c"
      case 2: // $bb1
        var $12=$enc; //@line 1636 "xmltok.c"
        $0=$12; //@line 1636 "xmltok.c"
        var $13=$0; //@line 1636 "xmltok.c"
        $retval=$13; //@line 1636 "xmltok.c"
        var $retval2=$retval; //@line 1636 "xmltok.c"
        ;
        return $retval2; //@line 1636 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  
FUNCTION_TABLE = FUNCTION_TABLE.concat([0,0,_error_external_entity_ref_handler,0,_conv_string_to_unicode,0,_conv_string_to_utf8,0,_noop_character_data_handler,0,_PyUnknownEncodingHandler,0,_PyExpat_XML_ErrorString,0,_PyExpat_XML_GetErrorCode,0,_PyExpat_XML_GetCurrentColumnNumber,0,_PyExpat_XML_GetCurrentLineNumber,0,_PyExpat_XML_Parse,0,_PyExpat_XML_ParserCreate_MM,0,_PyExpat_XML_ParserFree,0,_PyExpat_XML_SetCharacterDataHandler,0,_PyExpat_XML_SetCommentHandler,0,_PyExpat_XML_SetDefaultHandlerExpand,0,_PyExpat_XML_SetElementHandler,0,_PyExpat_XML_SetNamespaceDeclHandler,0,_PyExpat_XML_SetProcessingInstructionHandler,0,_PyExpat_XML_SetUnknownEncodingHandler,0,_PyExpat_XML_SetUserData,0,_malloc,0,_realloc,0,_free,0,_prologInitProcessor,0,_externalEntityInitProcessor,0,_externalParEntInitProcessor,0,_errorProcessor,0,_externalEntityInitProcessor2,0,_externalEntityInitProcessor3,0,_externalEntityContentProcessor,0,_cdataSectionProcessor,0,_contentProcessor,0,_prologProcessor,0,_PyExpat_XmlInitEncodingNS,0,_PyExpat_XmlInitEncoding,0,_PyExpat_XmlParseXmlDeclNS,0,_PyExpat_XmlParseXmlDecl,0,_PyExpat_XmlInitUnknownEncodingNS,0,_PyExpat_XmlInitUnknownEncoding,0,_entityValueInitProcessor,0,_externalParEntProcessor,0,_entityValueProcessor,0,_ignoreSectionProcessor,0,_epilogProcessor,0,_internalEntityProcessor,0,_prolog1,0,_doctype0,0,_error,0,_doctype1,0,_internalSubset,0,_prolog2,0,_doctype3,0,_doctype2,0,_doctype4,0,_entity0,0,_attlist0,0,_element0,0,_notation0,0,_doctype5,0,_externalSubset1,0,_condSect0,0,_entity1,0,_entity2,0,_entity7,0,_entity4,0,_entity3,0,_declClose,0,_entity5,0,_entity6,0,_entity9,0,_entity8,0,_entity10,0,_notation1,0,_notation3,0,_notation2,0,_notation4,0,_attlist1,0,_attlist2,0,_attlist8,0,_attlist5,0,_attlist3,0,_attlist4,0,_attlist6,0,_attlist7,0,_attlist9,0,_element1,0,_element2,0,_element3,0,_element6,0,_element7,0,_element4,0,_element5,0,_condSect1,0,_condSect2,0,_prolog0,0,_externalSubset0,0,_unknown_isName,0,_unknown_isNmstrt,0,_unknown_isInvalid,0,_unknown_toUtf8,0,_unknown_toUtf16,0,_initScanProlog,0,_initScanContent,0,_initUpdatePosition,0,_findEncoding,0,_initScanPrologNS,0,_initScanContentNS,0,_findEncodingNS,0,_xmlparse_Parse,0,_xmlparse_ParseFile,0,_xmlparse_SetBase,0,_xmlparse_GetBase,0,_xmlparse_ExternalEntityParserCreate,0,_xmlparse_SetParamEntityParsing,0,_xmlparse_GetInputContext,0,_xmlparse_UseForeignDTD,0,_xmlparse_dealloc,0,_xmlparse_getattr,0,_xmlparse_setattr,0,_xmlparse_traverse,0,_xmlparse_clear,0,_pyexpat_ParserCreate,0,_pyexpat_ErrorString,0,_PyExpat_XML_SetStartElementHandler,0,_my_StartElementHandler,0,_PyExpat_XML_SetEndElementHandler,0,_my_EndElementHandler,0,_my_ProcessingInstructionHandler,0,_my_CharacterDataHandler,0,_PyExpat_XML_SetUnparsedEntityDeclHandler,0,_my_UnparsedEntityDeclHandler,0,_PyExpat_XML_SetNotationDeclHandler,0,_my_NotationDeclHandler,0,_PyExpat_XML_SetStartNamespaceDeclHandler,0,_my_StartNamespaceDeclHandler,0,_PyExpat_XML_SetEndNamespaceDeclHandler,0,_my_EndNamespaceDeclHandler,0,_my_CommentHandler,0,_PyExpat_XML_SetStartCdataSectionHandler,0,_my_StartCdataSectionHandler,0,_PyExpat_XML_SetEndCdataSectionHandler,0,_my_EndCdataSectionHandler,0,_PyExpat_XML_SetDefaultHandler,0,_my_DefaultHandler,0,_my_DefaultHandlerExpandHandler,0,_PyExpat_XML_SetNotStandaloneHandler,0,_my_NotStandaloneHandler,0,_PyExpat_XML_SetExternalEntityRefHandler,0,_my_ExternalEntityRefHandler,0,_PyExpat_XML_SetStartDoctypeDeclHandler,0,_my_StartDoctypeDeclHandler,0,_PyExpat_XML_SetEndDoctypeDeclHandler,0,_my_EndDoctypeDeclHandler,0,_PyExpat_XML_SetEntityDeclHandler,0,_my_EntityDeclHandler,0,_PyExpat_XML_SetXmlDeclHandler,0,_my_XmlDeclHandler,0,_PyExpat_XML_SetElementDeclHandler,0,_my_ElementDeclHandler,0,_PyExpat_XML_SetAttlistDeclHandler,0,_my_AttlistDeclHandler,0,_PyExpat_XML_SetSkippedEntityHandler,0,_my_SkippedEntityHandler,0,_normal_prologTok,0,_normal_contentTok,0,_normal_cdataSectionTok,0,_normal_ignoreSectionTok,0,_normal_attributeValueTok,0,_normal_entityValueTok,0,_normal_sameName,0,_normal_nameMatchesAscii,0,_normal_nameLength,0,_normal_skipS,0,_normal_getAtts,0,_normal_charRefNumber,0,_normal_predefinedEntityName,0,_normal_updatePosition,0,_normal_isPublicId,0,_utf8_toUtf8,0,_utf8_toUtf16,0,_utf8_isName2,0,_utf8_isName3,0,_isNever,0,_utf8_isNmstrt2,0,_utf8_isNmstrt3,0,_utf8_isInvalid2,0,_utf8_isInvalid3,0,_utf8_isInvalid4,0,_latin1_toUtf8,0,_latin1_toUtf16,0,_ascii_toUtf8,0,_little2_prologTok,0,_little2_contentTok,0,_little2_cdataSectionTok,0,_little2_ignoreSectionTok,0,_little2_attributeValueTok,0,_little2_entityValueTok,0,_little2_sameName,0,_little2_nameMatchesAscii,0,_little2_nameLength,0,_little2_skipS,0,_little2_getAtts,0,_little2_charRefNumber,0,_little2_predefinedEntityName,0,_little2_updatePosition,0,_little2_isPublicId,0,_little2_toUtf8,0,_little2_toUtf16,0,_big2_prologTok,0,_big2_contentTok,0,_big2_cdataSectionTok,0,_big2_ignoreSectionTok,0,_big2_attributeValueTok,0,_big2_entityValueTok,0,_big2_sameName,0,_big2_nameMatchesAscii,0,_big2_nameLength,0,_big2_skipS,0,_big2_getAtts,0,_big2_charRefNumber,0,_big2_predefinedEntityName,0,_big2_updatePosition,0,_big2_isPublicId,0,_big2_toUtf8,0,_big2_toUtf16,0]);

// === Auto-generated postamble setup entry stuff ===

function run(args) {
  
__str=allocate([37,46,50,48,48,115,58,32,108,105,110,101,32,37,105,44,32,99,111,108,117,109,110,32,37,105,0] /* %.200s: line %i, col */, "i8", ALLOC_NORMAL);
_ErrorObject=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str1=allocate([115,0] /* s\00 */, "i8", ALLOC_NORMAL);
__str2=allocate([99,111,100,101,0] /* code\00 */, "i8", ALLOC_NORMAL);
__str3=allocate([111,102,102,115,101,116,0] /* offset\00 */, "i8", ALLOC_NORMAL);
__str4=allocate([108,105,110,101,110,111,0] /* lineno\00 */, "i8", ALLOC_NORMAL);
__str5=allocate([115,116,114,105,99,116,0] /* strict\00 */, "i8", ALLOC_NORMAL);
__str6=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,112,121,101,120,112,97,116,46,99,0] /* ../cpython/Modules/p */, "i8", ALLOC_NORMAL);
__str7=allocate([67,104,97,114,97,99,116,101,114,68,97,116,97,0] /* CharacterData\00 */, "i8", ALLOC_NORMAL);
__str8=allocate([40,78,78,41,0] /* (NN)\00 */, "i8", ALLOC_NORMAL);
__str9=allocate([83,116,97,114,116,69,108,101,109,101,110,116,0] /* StartElement\00 */, "i8", ALLOC_NORMAL);
__str10=allocate([40,78,41,0] /* (N)\00 */, "i8", ALLOC_NORMAL);
__str11=allocate([69,110,100,69,108,101,109,101,110,116,0] /* EndElement\00 */, "i8", ALLOC_NORMAL);
__str12=allocate([40,78,79,38,41,0] /* (NO&)\00 */, "i8", ALLOC_NORMAL);
__str13=allocate([80,114,111,99,101,115,115,105,110,103,73,110,115,116,114,117,99,116,105,111,110,0] /* ProcessingInstructio */, "i8", ALLOC_NORMAL);
__str14=allocate([40,78,78,78,78,78,41,0] /* (NNNNN)\00 */, "i8", ALLOC_NORMAL);
__str15=allocate([85,110,112,97,114,115,101,100,69,110,116,105,116,121,68,101,99,108,0] /* UnparsedEntityDecl\0 */, "i8", ALLOC_NORMAL);
__str16=allocate([78,105,78,78,78,78,78,0] /* NiNNNNN\00 */, "i8", ALLOC_NORMAL);
__str17=allocate([69,110,116,105,116,121,68,101,99,108,0] /* EntityDecl\00 */, "i8", ALLOC_NORMAL);
__str18=allocate([40,79,38,79,38,105,41,0] /* (O&O&i)\00 */, "i8", ALLOC_NORMAL);
__str19=allocate([88,109,108,68,101,99,108,0] /* XmlDecl\00 */, "i8", ALLOC_NORMAL);
__str20=allocate([109,111,100,101,108,45,62,110,117,109,99,104,105,108,100,114,101,110,32,60,32,50,49,52,55,52,56,51,54,52,55,0] /* model->numchildren < */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9747=allocate([99,111,110,118,95,99,111,110,116,101,110,116,95,109,111,100,101,108,0] /* conv_content_model\0 */, "i8", ALLOC_NORMAL);
__str21=allocate([40,105,105,79,38,78,41,0] /* (iiO&N)\00 */, "i8", ALLOC_NORMAL);
__str22=allocate([78,78,0] /* NN\00 */, "i8", ALLOC_NORMAL);
__str23=allocate([69,108,101,109,101,110,116,68,101,99,108,0] /* ElementDecl\00 */, "i8", ALLOC_NORMAL);
__str24=allocate([40,78,78,79,38,79,38,105,41,0] /* (NNO&O&i)\00 */, "i8", ALLOC_NORMAL);
__str25=allocate([65,116,116,108,105,115,116,68,101,99,108,0] /* AttlistDecl\00 */, "i8", ALLOC_NORMAL);
__str26=allocate([78,105,0] /* Ni\00 */, "i8", ALLOC_NORMAL);
__str27=allocate([83,107,105,112,112,101,100,69,110,116,105,116,121,0] /* SkippedEntity\00 */, "i8", ALLOC_NORMAL);
__str28=allocate([40,78,78,78,78,41,0] /* (NNNN)\00 */, "i8", ALLOC_NORMAL);
__str29=allocate([78,111,116,97,116,105,111,110,68,101,99,108,0] /* NotationDecl\00 */, "i8", ALLOC_NORMAL);
__str30=allocate([83,116,97,114,116,78,97,109,101,115,112,97,99,101,68,101,99,108,0] /* StartNamespaceDecl\0 */, "i8", ALLOC_NORMAL);
__str31=allocate([69,110,100,78,97,109,101,115,112,97,99,101,68,101,99,108,0] /* EndNamespaceDecl\00 */, "i8", ALLOC_NORMAL);
__str32=allocate([40,79,38,41,0] /* (O&)\00 */, "i8", ALLOC_NORMAL);
__str33=allocate([67,111,109,109,101,110,116,0] /* Comment\00 */, "i8", ALLOC_NORMAL);
__str34=allocate([40,41,0] /* ()\00 */, "i8", ALLOC_NORMAL);
__str35=allocate([83,116,97,114,116,67,100,97,116,97,83,101,99,116,105,111,110,0] /* StartCdataSection\00 */, "i8", ALLOC_NORMAL);
__str36=allocate([69,110,100,67,100,97,116,97,83,101,99,116,105,111,110,0] /* EndCdataSection\00 */, "i8", ALLOC_NORMAL);
__str37=allocate([68,101,102,97,117,108,116,0] /* Default\00 */, "i8", ALLOC_NORMAL);
__str38=allocate([68,101,102,97,117,108,116,72,97,110,100,108,101,114,69,120,112,97,110,100,0] /* DefaultHandlerExpand */, "i8", ALLOC_NORMAL);
__str39=allocate([78,111,116,83,116,97,110,100,97,108,111,110,101,0] /* NotStandalone\00 */, "i8", ALLOC_NORMAL);
__str40=allocate([40,79,38,78,78,78,41,0] /* (O&NNN)\00 */, "i8", ALLOC_NORMAL);
__str41=allocate([69,120,116,101,114,110,97,108,69,110,116,105,116,121,82,101,102,0] /* ExternalEntityRef\00 */, "i8", ALLOC_NORMAL);
__str42=allocate([40,78,78,78,105,41,0] /* (NNNi)\00 */, "i8", ALLOC_NORMAL);
__str43=allocate([83,116,97,114,116,68,111,99,116,121,112,101,68,101,99,108,0] /* StartDoctypeDecl\00 */, "i8", ALLOC_NORMAL);
__str44=allocate([69,110,100,68,111,99,116,121,112,101,68,101,99,108,0] /* EndDoctypeDecl\00 */, "i8", ALLOC_NORMAL);
_xmlparse_Parse__doc__=allocate([80,97,114,115,101,40,100,97,116,97,91,44,32,105,115,102,105,110,97,108,93,41,10,80,97,114,115,101,32,88,77,76,32,100,97,116,97,46,32,32,96,105,115,102,105,110,97,108,39,32,115,104,111,117,108,100,32,98,101,32,116,114,117,101,32,97,116,32,101,110,100,32,111,102,32,105,110,112,117,116,46,0] /* Parse(data[, isfinal */, "i8", ALLOC_NORMAL);
__str45=allocate([115,35,124,105,58,80,97,114,115,101,0] /* s#|i:Parse\00 */, "i8", ALLOC_NORMAL);
__str46=allocate([114,101,97,100,40,41,32,100,105,100,32,110,111,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,111,98,106,101,99,116,32,40,116,121,112,101,61,37,46,52,48,48,115,41,0] /* read() did not retur */, "i8", ALLOC_NORMAL);
__str47=allocate([114,101,97,100,40,41,32,114,101,116,117,114,110,101,100,32,116,111,111,32,109,117,99,104,32,100,97,116,97,58,32,37,105,32,98,121,116,101,115,32,114,101,113,117,101,115,116,101,100,44,32,37,105,32,114,101,116,117,114,110,101,100,0] /* read() returned too  */, "i8", ALLOC_NORMAL);
_xmlparse_ParseFile__doc__=allocate([80,97,114,115,101,70,105,108,101,40,102,105,108,101,41,10,80,97,114,115,101,32,88,77,76,32,100,97,116,97,32,102,114,111,109,32,102,105,108,101,45,108,105,107,101,32,111,98,106,101,99,116,46,0] /* ParseFile(file)\0APa */, "i8", ALLOC_NORMAL);
__str48=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str49=allocate([97,114,103,117,109,101,110,116,32,109,117,115,116,32,104,97,118,101,32,39,114,101,97,100,39,32,97,116,116,114,105,98,117,116,101,0] /* argument must have ' */, "i8", ALLOC_NORMAL);
_xmlparse_SetBase__doc__=allocate([83,101,116,66,97,115,101,40,98,97,115,101,95,117,114,108,41,10,83,101,116,32,116,104,101,32,98,97,115,101,32,85,82,76,32,102,111,114,32,116,104,101,32,112,97,114,115,101,114,46,0] /* SetBase(base_url)\0A */, "i8", ALLOC_NORMAL);
__str50=allocate([115,58,83,101,116,66,97,115,101,0] /* s:SetBase\00 */, "i8", ALLOC_NORMAL);
_xmlparse_GetBase__doc__=allocate([71,101,116,66,97,115,101,40,41,32,45,62,32,117,114,108,10,82,101,116,117,114,110,32,98,97,115,101,32,85,82,76,32,115,116,114,105,110,103,32,102,111,114,32,116,104,101,32,112,97,114,115,101,114,46,0] /* GetBase() -> url\0AR */, "i8", ALLOC_NORMAL);
__str51=allocate([122,0] /* z\00 */, "i8", ALLOC_NORMAL);
_xmlparse_GetInputContext__doc__=allocate([71,101,116,73,110,112,117,116,67,111,110,116,101,120,116,40,41,32,45,62,32,115,116,114,105,110,103,10,82,101,116,117,114,110,32,116,104,101,32,117,110,116,114,97,110,115,108,97,116,101,100,32,116,101,120,116,32,111,102,32,116,104,101,32,105,110,112,117,116,32,116,104,97,116,32,99,97,117,115,101,100,32,116,104,101,32,99,117,114,114,101,110,116,32,101,118,101,110,116,46,10,73,102,32,116,104,101,32,101,118,101,110,116,32,119,97,115,32,103,101,110,101,114,97,116,101,100,32,98,121,32,97,32,108,97,114,103,101,32,97,109,111,117,110,116,32,111,102,32,116,101,120,116,32,40,115,117,99,104,32,97,115,32,97,32,115,116,97,114,116,32,116,97,103,10,102,111,114,32,97,110,32,101,108,101,109,101,110,116,32,119,105,116,104,32,109,97,110,121,32,97,116,116,114,105,98,117,116,101,115,41,44,32,110,111,116,32,97,108,108,32,111,102,32,116,104,101,32,116,101,120,116,32,109,97,121,32,98,101,32,97,118,97,105,108,97,98,108,101,46,0] /* GetInputContext() -> */, "i8", ALLOC_NORMAL);
_xmlparse_ExternalEntityParserCreate__doc__=allocate([69,120,116,101,114,110,97,108,69,110,116,105,116,121,80,97,114,115,101,114,67,114,101,97,116,101,40,99,111,110,116,101,120,116,91,44,32,101,110,99,111,100,105,110,103,93,41,10,67,114,101,97,116,101,32,97,32,112,97,114,115,101,114,32,102,111,114,32,112,97,114,115,105,110,103,32,97,110,32,101,120,116,101,114,110,97,108,32,101,110,116,105,116,121,32,98,97,115,101,100,32,111,110,32,116,104,101,10,105,110,102,111,114,109,97,116,105,111,110,32,112,97,115,115,101,100,32,116,111,32,116,104,101,32,69,120,116,101,114,110,97,108,69,110,116,105,116,121,82,101,102,72,97,110,100,108,101,114,46,0] /* ExternalEntityParser */, "i8", ALLOC_NORMAL);
__str52=allocate([122,124,115,58,69,120,116,101,114,110,97,108,69,110,116,105,116,121,80,97,114,115,101,114,67,114,101,97,116,101,0] /* z|s:ExternalEntityPa */, "i8", ALLOC_NORMAL);
_xmlparse_SetParamEntityParsing__doc__=allocate([83,101,116,80,97,114,97,109,69,110,116,105,116,121,80,97,114,115,105,110,103,40,102,108,97,103,41,32,45,62,32,115,117,99,99,101,115,115,10,67,111,110,116,114,111,108,115,32,112,97,114,115,105,110,103,32,111,102,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,105,101,115,32,40,105,110,99,108,117,100,105,110,103,32,116,104,101,32,101,120,116,101,114,110,97,108,32,68,84,68,10,115,117,98,115,101,116,41,46,32,80,111,115,115,105,98,108,101,32,102,108,97,103,32,118,97,108,117,101,115,32,97,114,101,32,88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,78,69,86,69,82,44,10,88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,85,78,76,69,83,83,95,83,84,65,78,68,65,76,79,78,69,32,97,110,100,10,88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,65,76,87,65,89,83,46,32,82,101,116,117,114,110,115,32,116,114,117,101,32,105,102,32,115,101,116,116,105,110,103,32,116,104,101,32,102,108,97,103,10,119,97,115,32,115,117,99,99,101,115,115,102,117,108,46,0] /* SetParamEntityParsin */, "i8", ALLOC_NORMAL);
__str53=allocate([105,0] /* i\00 */, "i8", ALLOC_NORMAL);
_xmlparse_UseForeignDTD__doc__=allocate([85,115,101,70,111,114,101,105,103,110,68,84,68,40,91,102,108,97,103,93,41,10,65,108,108,111,119,115,32,116,104,101,32,97,112,112,108,105,99,97,116,105,111,110,32,116,111,32,112,114,111,118,105,100,101,32,97,110,32,97,114,116,105,102,105,99,105,97,108,32,101,120,116,101,114,110,97,108,32,115,117,98,115,101,116,32,105,102,32,111,110,101,32,105,115,10,110,111,116,32,115,112,101,99,105,102,105,101,100,32,97,115,32,112,97,114,116,32,111,102,32,116,104,101,32,100,111,99,117,109,101,110,116,32,105,110,115,116,97,110,99,101,46,32,32,84,104,105,115,32,114,101,97,100,105,108,121,32,97,108,108,111,119,115,32,116,104,101,10,117,115,101,32,111,102,32,97,32,39,100,101,102,97,117,108,116,39,32,100,111,99,117,109,101,110,116,32,116,121,112,101,32,99,111,110,116,114,111,108,108,101,100,32,98,121,32,116,104,101,32,97,112,112,108,105,99,97,116,105,111,110,44,32,119,104,105,108,101,32,115,116,105,108,108,10,103,101,116,116,105,110,103,32,116,104,101,32,97,100,118,97,110,116,97,103,101,32,111,102,32,112,114,111,118,105,100,105,110,103,32,100,111,99,117,109,101,110,116,32,116,121,112,101,32,105,110,102,111,114,109,97,116,105,111,110,32,116,111,32,116,104,101,32,112,97,114,115,101,114,46,10,39,102,108,97,103,39,32,100,101,102,97,117,108,116,115,32,116,111,32,84,114,117,101,32,105,102,32,110,111,116,32,112,114,111,118,105,100,101,100,46,0] /* UseForeignDTD([flag] */, "i8", ALLOC_NORMAL);
__str54=allocate([85,115,101,70,111,114,101,105,103,110,68,84,68,0] /* UseForeignDTD\00 */, "i8", ALLOC_NORMAL);
__str55=allocate([80,97,114,115,101,0] /* Parse\00 */, "i8", ALLOC_NORMAL);
__str56=allocate([80,97,114,115,101,70,105,108,101,0] /* ParseFile\00 */, "i8", ALLOC_NORMAL);
__str57=allocate([83,101,116,66,97,115,101,0] /* SetBase\00 */, "i8", ALLOC_NORMAL);
__str58=allocate([71,101,116,66,97,115,101,0] /* GetBase\00 */, "i8", ALLOC_NORMAL);
__str59=allocate([69,120,116,101,114,110,97,108,69,110,116,105,116,121,80,97,114,115,101,114,67,114,101,97,116,101,0] /* ExternalEntityParser */, "i8", ALLOC_NORMAL);
__str60=allocate([83,101,116,80,97,114,97,109,69,110,116,105,116,121,80,97,114,115,105,110,103,0] /* SetParamEntityParsin */, "i8", ALLOC_NORMAL);
__str61=allocate([71,101,116,73,110,112,117,116,67,111,110,116,101,120,116,0] /* GetInputContext\00 */, "i8", ALLOC_NORMAL);
_xmlparse_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_template_string=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_template_buffer=allocate(257, "i8", ALLOC_NORMAL);
__str62=allocate([114,101,112,108,97,99,101,0] /* replace\00 */, "i8", ALLOC_NORMAL);
__str63=allocate([88,77,76,95,80,97,114,115,101,114,67,114,101,97,116,101,32,102,97,105,108,101,100,0] /* XML_ParserCreate fai */, "i8", ALLOC_NORMAL);
__str64=allocate([69,114,114,111,114,67,111,100,101,0] /* ErrorCode\00 */, "i8", ALLOC_NORMAL);
__str65=allocate([69,114,114,111,114,76,105,110,101,78,117,109,98,101,114,0] /* ErrorLineNumber\00 */, "i8", ALLOC_NORMAL);
__str66=allocate([69,114,114,111,114,67,111,108,117,109,110,78,117,109,98,101,114,0] /* ErrorColumnNumber\00 */, "i8", ALLOC_NORMAL);
__str67=allocate([69,114,114,111,114,66,121,116,101,73,110,100,101,120,0] /* ErrorByteIndex\00 */, "i8", ALLOC_NORMAL);
__str68=allocate([67,117,114,114,101,110,116,76,105,110,101,78,117,109,98,101,114,0] /* CurrentLineNumber\00 */, "i8", ALLOC_NORMAL);
__str69=allocate([67,117,114,114,101,110,116,67,111,108,117,109,110,78,117,109,98,101,114,0] /* CurrentColumnNumber\ */, "i8", ALLOC_NORMAL);
__str70=allocate([67,117,114,114,101,110,116,66,121,116,101,73,110,100,101,120,0] /* CurrentByteIndex\00 */, "i8", ALLOC_NORMAL);
__str71=allocate([98,117,102,102,101,114,95,115,105,122,101,0] /* buffer_size\00 */, "i8", ALLOC_NORMAL);
__str72=allocate([98,117,102,102,101,114,95,116,101,120,116,0] /* buffer_text\00 */, "i8", ALLOC_NORMAL);
__str73=allocate([98,117,102,102,101,114,95,117,115,101,100,0] /* buffer_used\00 */, "i8", ALLOC_NORMAL);
__str74=allocate([110,97,109,101,115,112,97,99,101,95,112,114,101,102,105,120,101,115,0] /* namespace_prefixes\0 */, "i8", ALLOC_NORMAL);
__str75=allocate([111,114,100,101,114,101,100,95,97,116,116,114,105,98,117,116,101,115,0] /* ordered_attributes\0 */, "i8", ALLOC_NORMAL);
__str76=allocate([114,101,116,117,114,110,115,95,117,110,105,99,111,100,101,0] /* returns_unicode\00 */, "i8", ALLOC_NORMAL);
__str77=allocate([115,112,101,99,105,102,105,101,100,95,97,116,116,114,105,98,117,116,101,115,0] /* specified_attributes */, "i8", ALLOC_NORMAL);
__str78=allocate([105,110,116,101,114,110,0] /* intern\00 */, "i8", ALLOC_NORMAL);
__str79=allocate([95,95,109,101,109,98,101,114,115,95,95,0] /* __members__\00 */, "i8", ALLOC_NORMAL);
__str80=allocate([67,97,110,110,111,116,32,100,101,108,101,116,101,32,97,116,116,114,105,98,117,116,101,0] /* Cannot delete attrib */, "i8", ALLOC_NORMAL);
__str81=allocate([98,117,102,102,101,114,95,115,105,122,101,32,109,117,115,116,32,98,101,32,97,110,32,105,110,116,101,103,101,114,0] /* buffer_size must be  */, "i8", ALLOC_NORMAL);
__str82=allocate([98,117,102,102,101,114,95,115,105,122,101,32,109,117,115,116,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,122,101,114,111,0] /* buffer_size must be  */, "i8", ALLOC_NORMAL);
__str83=allocate([67,104,97,114,97,99,116,101,114,68,97,116,97,72,97,110,100,108,101,114,0] /* CharacterDataHandler */, "i8", ALLOC_NORMAL);
_Xmlparsetype__doc__=allocate([88,77,76,32,112,97,114,115,101,114,0] /* XML parser\00 */, "i8", ALLOC_NORMAL);
__str84=allocate([112,121,101,120,112,97,116,46,120,109,108,112,97,114,115,101,114,0] /* pyexpat.xmlparser\00 */, "i8", ALLOC_NORMAL);
_Xmlparsetype=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_pyexpat_ParserCreate__doc__=allocate([80,97,114,115,101,114,67,114,101,97,116,101,40,91,101,110,99,111,100,105,110,103,91,44,32,110,97,109,101,115,112,97,99,101,95,115,101,112,97,114,97,116,111,114,93,93,41,32,45,62,32,112,97,114,115,101,114,10,82,101,116,117,114,110,32,97,32,110,101,119,32,88,77,76,32,112,97,114,115,101,114,32,111,98,106,101,99,116,46,0] /* ParserCreate([encodi */, "i8", ALLOC_NORMAL);
__str85=allocate([124,122,122,79,58,80,97,114,115,101,114,67,114,101,97,116,101,0] /* |zzO:ParserCreate\00 */, "i8", ALLOC_NORMAL);
_kwlist_11530=allocate(16, "i8*", ALLOC_NORMAL);
__str86=allocate([101,110,99,111,100,105,110,103,0] /* encoding\00 */, "i8", ALLOC_NORMAL);
__str87=allocate([110,97,109,101,115,112,97,99,101,95,115,101,112,97,114,97,116,111,114,0] /* namespace_separator\ */, "i8", ALLOC_NORMAL);
__str88=allocate([110,97,109,101,115,112,97,99,101,95,115,101,112,97,114,97,116,111,114,32,109,117,115,116,32,98,101,32,97,116,32,109,111,115,116,32,111,110,101,32,99,104,97,114,97,99,116,101,114,44,32,111,109,105,116,116,101,100,44,32,111,114,32,78,111,110,101,0] /* namespace_separator  */, "i8", ALLOC_NORMAL);
__str89=allocate([105,110,116,101,114,110,32,109,117,115,116,32,98,101,32,97,32,100,105,99,116,105,111,110,97,114,121,0] /* intern must be a dic */, "i8", ALLOC_NORMAL);
_pyexpat_ErrorString__doc__=allocate([69,114,114,111,114,83,116,114,105,110,103,40,101,114,114,110,111,41,32,45,62,32,115,116,114,105,110,103,10,82,101,116,117,114,110,115,32,115,116,114,105,110,103,32,101,114,114,111,114,32,102,111,114,32,103,105,118,101,110,32,110,117,109,98,101,114,46,0] /* ErrorString(errno) - */, "i8", ALLOC_NORMAL);
__str90=allocate([108,58,69,114,114,111,114,83,116,114,105,110,103,0] /* l:ErrorString\00 */, "i8", ALLOC_NORMAL);
_pyexpat_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0], ALLOC_NORMAL);
__str91=allocate([80,97,114,115,101,114,67,114,101,97,116,101,0] /* ParserCreate\00 */, "i8", ALLOC_NORMAL);
__str92=allocate([69,114,114,111,114,83,116,114,105,110,103,0] /* ErrorString\00 */, "i8", ALLOC_NORMAL);
_pyexpat_module_documentation=allocate([80,121,116,104,111,110,32,119,114,97,112,112,101,114,32,102,111,114,32,69,120,112,97,116,32,112,97,114,115,101,114,46,0] /* Python wrapper for E */, "i8", ALLOC_NORMAL);
__str93=allocate([112,121,101,120,112,97,116,46,101,114,114,111,114,115,0] /* pyexpat.errors\00 */, "i8", ALLOC_NORMAL);
__str94=allocate([112,121,101,120,112,97,116,46,109,111,100,101,108,0] /* pyexpat.model\00 */, "i8", ALLOC_NORMAL);
__str95=allocate([112,121,101,120,112,97,116,0] /* pyexpat\00 */, "i8", ALLOC_NORMAL);
__str96=allocate([120,109,108,46,112,97,114,115,101,114,115,46,101,120,112,97,116,46,69,120,112,97,116,69,114,114,111,114,0] /* xml.parsers.expat.Ex */, "i8", ALLOC_NORMAL);
__str97=allocate([101,114,114,111,114,0] /* error\00 */, "i8", ALLOC_NORMAL);
__str98=allocate([69,120,112,97,116,69,114,114,111,114,0] /* ExpatError\00 */, "i8", ALLOC_NORMAL);
__str99=allocate([88,77,76,80,97,114,115,101,114,84,121,112,101,0] /* XMLParserType\00 */, "i8", ALLOC_NORMAL);
__str100=allocate([50,46,55,46,50,0] /* 2.7.2\00 */, "i8", ALLOC_NORMAL);
__str101=allocate([95,95,118,101,114,115,105,111,110,95,95,0] /* __version__\00 */, "i8", ALLOC_NORMAL);
__str102=allocate([69,88,80,65,84,95,86,69,82,83,73,79,78,0] /* EXPAT_VERSION\00 */, "i8", ALLOC_NORMAL);
__str103=allocate([40,105,105,105,41,0] /* (iii)\00 */, "i8", ALLOC_NORMAL);
__str104=allocate([118,101,114,115,105,111,110,95,105,110,102,111,0] /* version_info\00 */, "i8", ALLOC_NORMAL);
__str105=allocate([110,97,116,105,118,101,95,101,110,99,111,100,105,110,103,0] /* native_encoding\00 */, "i8", ALLOC_NORMAL);
__str106=allocate([85,84,70,45,56,0] /* UTF-8\00 */, "i8", ALLOC_NORMAL);
__str107=allocate([109,111,100,117,108,101,115,0] /* modules\00 */, "i8", ALLOC_NORMAL);
__str108=allocate([101,114,114,111,114,115,0] /* errors\00 */, "i8", ALLOC_NORMAL);
__str109=allocate([109,111,100,101,108,0] /* model\00 */, "i8", ALLOC_NORMAL);
__str110=allocate([115,105,0] /* si\00 */, "i8", ALLOC_NORMAL);
__str111=allocate([102,101,97,116,117,114,101,115,0] /* features\00 */, "i8", ALLOC_NORMAL);
__str112=allocate([88,77,76,95,69,82,82,79,82,95,78,79,95,77,69,77,79,82,89,0] /* XML_ERROR_NO_MEMORY\ */, "i8", ALLOC_NORMAL);
__str113=allocate([88,77,76,95,69,82,82,79,82,95,83,89,78,84,65,88,0] /* XML_ERROR_SYNTAX\00 */, "i8", ALLOC_NORMAL);
__str114=allocate([88,77,76,95,69,82,82,79,82,95,78,79,95,69,76,69,77,69,78,84,83,0] /* XML_ERROR_NO_ELEMENT */, "i8", ALLOC_NORMAL);
__str115=allocate([88,77,76,95,69,82,82,79,82,95,73,78,86,65,76,73,68,95,84,79,75,69,78,0] /* XML_ERROR_INVALID_TO */, "i8", ALLOC_NORMAL);
__str116=allocate([88,77,76,95,69,82,82,79,82,95,85,78,67,76,79,83,69,68,95,84,79,75,69,78,0] /* XML_ERROR_UNCLOSED_T */, "i8", ALLOC_NORMAL);
__str117=allocate([88,77,76,95,69,82,82,79,82,95,80,65,82,84,73,65,76,95,67,72,65,82,0] /* XML_ERROR_PARTIAL_CH */, "i8", ALLOC_NORMAL);
__str118=allocate([88,77,76,95,69,82,82,79,82,95,84,65,71,95,77,73,83,77,65,84,67,72,0] /* XML_ERROR_TAG_MISMAT */, "i8", ALLOC_NORMAL);
__str119=allocate([88,77,76,95,69,82,82,79,82,95,68,85,80,76,73,67,65,84,69,95,65,84,84,82,73,66,85,84,69,0] /* XML_ERROR_DUPLICATE_ */, "i8", ALLOC_NORMAL);
__str120=allocate([88,77,76,95,69,82,82,79,82,95,74,85,78,75,95,65,70,84,69,82,95,68,79,67,95,69,76,69,77,69,78,84,0] /* XML_ERROR_JUNK_AFTER */, "i8", ALLOC_NORMAL);
__str121=allocate([88,77,76,95,69,82,82,79,82,95,80,65,82,65,77,95,69,78,84,73,84,89,95,82,69,70,0] /* XML_ERROR_PARAM_ENTI */, "i8", ALLOC_NORMAL);
__str122=allocate([88,77,76,95,69,82,82,79,82,95,85,78,68,69,70,73,78,69,68,95,69,78,84,73,84,89,0] /* XML_ERROR_UNDEFINED_ */, "i8", ALLOC_NORMAL);
__str123=allocate([88,77,76,95,69,82,82,79,82,95,82,69,67,85,82,83,73,86,69,95,69,78,84,73,84,89,95,82,69,70,0] /* XML_ERROR_RECURSIVE_ */, "i8", ALLOC_NORMAL);
__str124=allocate([88,77,76,95,69,82,82,79,82,95,65,83,89,78,67,95,69,78,84,73,84,89,0] /* XML_ERROR_ASYNC_ENTI */, "i8", ALLOC_NORMAL);
__str125=allocate([88,77,76,95,69,82,82,79,82,95,66,65,68,95,67,72,65,82,95,82,69,70,0] /* XML_ERROR_BAD_CHAR_R */, "i8", ALLOC_NORMAL);
__str126=allocate([88,77,76,95,69,82,82,79,82,95,66,73,78,65,82,89,95,69,78,84,73,84,89,95,82,69,70,0] /* XML_ERROR_BINARY_ENT */, "i8", ALLOC_NORMAL);
__str127=allocate([88,77,76,95,69,82,82,79,82,95,65,84,84,82,73,66,85,84,69,95,69,88,84,69,82,78,65,76,95,69,78,84,73,84,89,95,82,69,70,0] /* XML_ERROR_ATTRIBUTE_ */, "i8", ALLOC_NORMAL);
__str128=allocate([88,77,76,95,69,82,82,79,82,95,77,73,83,80,76,65,67,69,68,95,88,77,76,95,80,73,0] /* XML_ERROR_MISPLACED_ */, "i8", ALLOC_NORMAL);
__str129=allocate([88,77,76,95,69,82,82,79,82,95,85,78,75,78,79,87,78,95,69,78,67,79,68,73,78,71,0] /* XML_ERROR_UNKNOWN_EN */, "i8", ALLOC_NORMAL);
__str130=allocate([88,77,76,95,69,82,82,79,82,95,73,78,67,79,82,82,69,67,84,95,69,78,67,79,68,73,78,71,0] /* XML_ERROR_INCORRECT_ */, "i8", ALLOC_NORMAL);
__str131=allocate([88,77,76,95,69,82,82,79,82,95,85,78,67,76,79,83,69,68,95,67,68,65,84,65,95,83,69,67,84,73,79,78,0] /* XML_ERROR_UNCLOSED_C */, "i8", ALLOC_NORMAL);
__str132=allocate([88,77,76,95,69,82,82,79,82,95,69,88,84,69,82,78,65,76,95,69,78,84,73,84,89,95,72,65,78,68,76,73,78,71,0] /* XML_ERROR_EXTERNAL_E */, "i8", ALLOC_NORMAL);
__str133=allocate([88,77,76,95,69,82,82,79,82,95,78,79,84,95,83,84,65,78,68,65,76,79,78,69,0] /* XML_ERROR_NOT_STANDA */, "i8", ALLOC_NORMAL);
__str134=allocate([88,77,76,95,69,82,82,79,82,95,85,78,69,88,80,69,67,84,69,68,95,83,84,65,84,69,0] /* XML_ERROR_UNEXPECTED */, "i8", ALLOC_NORMAL);
__str135=allocate([88,77,76,95,69,82,82,79,82,95,69,78,84,73,84,89,95,68,69,67,76,65,82,69,68,95,73,78,95,80,69,0] /* XML_ERROR_ENTITY_DEC */, "i8", ALLOC_NORMAL);
__str136=allocate([88,77,76,95,69,82,82,79,82,95,70,69,65,84,85,82,69,95,82,69,81,85,73,82,69,83,95,88,77,76,95,68,84,68,0] /* XML_ERROR_FEATURE_RE */, "i8", ALLOC_NORMAL);
__str137=allocate([88,77,76,95,69,82,82,79,82,95,67,65,78,84,95,67,72,65,78,71,69,95,70,69,65,84,85,82,69,95,79,78,67,69,95,80,65,82,83,73,78,71,0] /* XML_ERROR_CANT_CHANG */, "i8", ALLOC_NORMAL);
__str138=allocate([88,77,76,95,69,82,82,79,82,95,85,78,66,79,85,78,68,95,80,82,69,70,73,88,0] /* XML_ERROR_UNBOUND_PR */, "i8", ALLOC_NORMAL);
__str139=allocate([88,77,76,95,69,82,82,79,82,95,85,78,68,69,67,76,65,82,73,78,71,95,80,82,69,70,73,88,0] /* XML_ERROR_UNDECLARIN */, "i8", ALLOC_NORMAL);
__str140=allocate([88,77,76,95,69,82,82,79,82,95,73,78,67,79,77,80,76,69,84,69,95,80,69,0] /* XML_ERROR_INCOMPLETE */, "i8", ALLOC_NORMAL);
__str141=allocate([88,77,76,95,69,82,82,79,82,95,88,77,76,95,68,69,67,76,0] /* XML_ERROR_XML_DECL\0 */, "i8", ALLOC_NORMAL);
__str142=allocate([88,77,76,95,69,82,82,79,82,95,84,69,88,84,95,68,69,67,76,0] /* XML_ERROR_TEXT_DECL\ */, "i8", ALLOC_NORMAL);
__str143=allocate([88,77,76,95,69,82,82,79,82,95,80,85,66,76,73,67,73,68,0] /* XML_ERROR_PUBLICID\0 */, "i8", ALLOC_NORMAL);
__str144=allocate([88,77,76,95,69,82,82,79,82,95,83,85,83,80,69,78,68,69,68,0] /* XML_ERROR_SUSPENDED\ */, "i8", ALLOC_NORMAL);
__str145=allocate([88,77,76,95,69,82,82,79,82,95,78,79,84,95,83,85,83,80,69,78,68,69,68,0] /* XML_ERROR_NOT_SUSPEN */, "i8", ALLOC_NORMAL);
__str146=allocate([88,77,76,95,69,82,82,79,82,95,65,66,79,82,84,69,68,0] /* XML_ERROR_ABORTED\00 */, "i8", ALLOC_NORMAL);
__str147=allocate([88,77,76,95,69,82,82,79,82,95,70,73,78,73,83,72,69,68,0] /* XML_ERROR_FINISHED\0 */, "i8", ALLOC_NORMAL);
__str148=allocate([88,77,76,95,69,82,82,79,82,95,83,85,83,80,69,78,68,95,80,69,0] /* XML_ERROR_SUSPEND_PE */, "i8", ALLOC_NORMAL);
__str149=allocate([95,95,100,111,99,95,95,0] /* __doc__\00 */, "i8", ALLOC_NORMAL);
__str150=allocate([67,111,110,115,116,97,110,116,115,32,117,115,101,100,32,116,111,32,100,101,115,99,114,105,98,101,32,101,114,114,111,114,32,99,111,110,100,105,116,105,111,110,115,46,0] /* Constants used to de */, "i8", ALLOC_NORMAL);
__str151=allocate([88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,78,69,86,69,82,0] /* XML_PARAM_ENTITY_PAR */, "i8", ALLOC_NORMAL);
__str152=allocate([88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,85,78,76,69,83,83,95,83,84,65,78,68,65,76,79,78,69,0] /* XML_PARAM_ENTITY_PAR */, "i8", ALLOC_NORMAL);
__str153=allocate([88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,65,76,87,65,89,83,0] /* XML_PARAM_ENTITY_PAR */, "i8", ALLOC_NORMAL);
__str154=allocate([67,111,110,115,116,97,110,116,115,32,117,115,101,100,32,116,111,32,105,110,116,101,114,112,114,101,116,32,99,111,110,116,101,110,116,32,109,111,100,101,108,32,105,110,102,111,114,109,97,116,105,111,110,46,0] /* Constants used to in */, "i8", ALLOC_NORMAL);
__str155=allocate([88,77,76,95,67,84,89,80,69,95,69,77,80,84,89,0] /* XML_CTYPE_EMPTY\00 */, "i8", ALLOC_NORMAL);
__str156=allocate([88,77,76,95,67,84,89,80,69,95,65,78,89,0] /* XML_CTYPE_ANY\00 */, "i8", ALLOC_NORMAL);
__str157=allocate([88,77,76,95,67,84,89,80,69,95,77,73,88,69,68,0] /* XML_CTYPE_MIXED\00 */, "i8", ALLOC_NORMAL);
__str158=allocate([88,77,76,95,67,84,89,80,69,95,78,65,77,69,0] /* XML_CTYPE_NAME\00 */, "i8", ALLOC_NORMAL);
__str159=allocate([88,77,76,95,67,84,89,80,69,95,67,72,79,73,67,69,0] /* XML_CTYPE_CHOICE\00 */, "i8", ALLOC_NORMAL);
__str160=allocate([88,77,76,95,67,84,89,80,69,95,83,69,81,0] /* XML_CTYPE_SEQ\00 */, "i8", ALLOC_NORMAL);
__str161=allocate([88,77,76,95,67,81,85,65,78,84,95,78,79,78,69,0] /* XML_CQUANT_NONE\00 */, "i8", ALLOC_NORMAL);
__str162=allocate([88,77,76,95,67,81,85,65,78,84,95,79,80,84,0] /* XML_CQUANT_OPT\00 */, "i8", ALLOC_NORMAL);
__str163=allocate([88,77,76,95,67,81,85,65,78,84,95,82,69,80,0] /* XML_CQUANT_REP\00 */, "i8", ALLOC_NORMAL);
__str164=allocate([88,77,76,95,67,81,85,65,78,84,95,80,76,85,83,0] /* XML_CQUANT_PLUS\00 */, "i8", ALLOC_NORMAL);
_capi_11609=allocate(80, ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8* (i32)*",0,0,0,"i32 (%struct.XML_ParserStruct*)*",0,0,0,"i32 (%struct.XML_ParserStruct*)*",0,0,0,"i32 (%struct.XML_ParserStruct*)*",0,0,0,"i32 (%struct.XML_ParserStruct*, i8*, i32, i32)*",0,0,0,"%struct.XML_ParserStruct* (i8*, %struct.XML_Memory_Handling_Suite*, i8*)*",0,0,0,"void (%struct.XML_ParserStruct*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i32)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i32)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i8**)*, void (i8*, i8*)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i8*)*, void (i8*, i8*)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i8*)*)*",0,0,0,"void (%struct.XML_ParserStruct*, i32 (i8*, i8*, %struct.XML_Encoding*)*, i8*)*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0], ALLOC_NORMAL);
__str165=allocate([112,121,101,120,112,97,116,46,101,120,112,97,116,95,67,65,80,73,32,49,46,48,0] /* pyexpat.expat_CAPI 1 */, "i8", ALLOC_NORMAL);
__str166=allocate([112,121,101,120,112,97,116,46,101,120,112,97,116,95,67,65,80,73,0] /* pyexpat.expat_CAPI\0 */, "i8", ALLOC_NORMAL);
__str167=allocate([101,120,112,97,116,95,67,65,80,73,0] /* expat_CAPI\00 */, "i8", ALLOC_NORMAL);
__str168=allocate([83,116,97,114,116,69,108,101,109,101,110,116,72,97,110,100,108,101,114,0] /* StartElementHandler\ */, "i8", ALLOC_NORMAL);
__str169=allocate([69,110,100,69,108,101,109,101,110,116,72,97,110,100,108,101,114,0] /* EndElementHandler\00 */, "i8", ALLOC_NORMAL);
__str170=allocate([80,114,111,99,101,115,115,105,110,103,73,110,115,116,114,117,99,116,105,111,110,72,97,110,100,108,101,114,0] /* ProcessingInstructio */, "i8", ALLOC_NORMAL);
__str171=allocate([85,110,112,97,114,115,101,100,69,110,116,105,116,121,68,101,99,108,72,97,110,100,108,101,114,0] /* UnparsedEntityDeclHa */, "i8", ALLOC_NORMAL);
__str172=allocate([78,111,116,97,116,105,111,110,68,101,99,108,72,97,110,100,108,101,114,0] /* NotationDeclHandler\ */, "i8", ALLOC_NORMAL);
__str173=allocate([83,116,97,114,116,78,97,109,101,115,112,97,99,101,68,101,99,108,72,97,110,100,108,101,114,0] /* StartNamespaceDeclHa */, "i8", ALLOC_NORMAL);
__str174=allocate([69,110,100,78,97,109,101,115,112,97,99,101,68,101,99,108,72,97,110,100,108,101,114,0] /* EndNamespaceDeclHand */, "i8", ALLOC_NORMAL);
__str175=allocate([67,111,109,109,101,110,116,72,97,110,100,108,101,114,0] /* CommentHandler\00 */, "i8", ALLOC_NORMAL);
__str176=allocate([83,116,97,114,116,67,100,97,116,97,83,101,99,116,105,111,110,72,97,110,100,108,101,114,0] /* StartCdataSectionHan */, "i8", ALLOC_NORMAL);
__str177=allocate([69,110,100,67,100,97,116,97,83,101,99,116,105,111,110,72,97,110,100,108,101,114,0] /* EndCdataSectionHandl */, "i8", ALLOC_NORMAL);
__str178=allocate([68,101,102,97,117,108,116,72,97,110,100,108,101,114,0] /* DefaultHandler\00 */, "i8", ALLOC_NORMAL);
__str179=allocate([78,111,116,83,116,97,110,100,97,108,111,110,101,72,97,110,100,108,101,114,0] /* NotStandaloneHandler */, "i8", ALLOC_NORMAL);
__str180=allocate([69,120,116,101,114,110,97,108,69,110,116,105,116,121,82,101,102,72,97,110,100,108,101,114,0] /* ExternalEntityRefHan */, "i8", ALLOC_NORMAL);
__str181=allocate([83,116,97,114,116,68,111,99,116,121,112,101,68,101,99,108,72,97,110,100,108,101,114,0] /* StartDoctypeDeclHand */, "i8", ALLOC_NORMAL);
__str182=allocate([69,110,100,68,111,99,116,121,112,101,68,101,99,108,72,97,110,100,108,101,114,0] /* EndDoctypeDeclHandle */, "i8", ALLOC_NORMAL);
__str183=allocate([69,110,116,105,116,121,68,101,99,108,72,97,110,100,108,101,114,0] /* EntityDeclHandler\00 */, "i8", ALLOC_NORMAL);
__str184=allocate([88,109,108,68,101,99,108,72,97,110,100,108,101,114,0] /* XmlDeclHandler\00 */, "i8", ALLOC_NORMAL);
__str185=allocate([69,108,101,109,101,110,116,68,101,99,108,72,97,110,100,108,101,114,0] /* ElementDeclHandler\0 */, "i8", ALLOC_NORMAL);
__str186=allocate([65,116,116,108,105,115,116,68,101,99,108,72,97,110,100,108,101,114,0] /* AttlistDeclHandler\0 */, "i8", ALLOC_NORMAL);
__str187=allocate([83,107,105,112,112,101,100,69,110,116,105,116,121,72,97,110,100,108,101,114,0] /* SkippedEntityHandler */, "i8", ALLOC_NORMAL);
_handler_info=allocate(1280, ["i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_implicitContext=allocate([120,109,108,61,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,88,77,76,47,49,57,57,56,47,110,97,109,101,115,112,97,99,101,0] /* xml=http://www.w3.or */, "i8", ALLOC_NORMAL);
__str188=allocate([115,116,97,116,117,115,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* status != ((void _)0 */, "i8", ALLOC_NORMAL);
__str1189=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,101,120,112,97,116,47,120,109,108,112,97,114,115,101,46,99,0] /* ../cpython/Modules/e */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___3819=allocate([80,121,69,120,112,97,116,95,88,77,76,95,71,101,116,80,97,114,115,105,110,103,83,116,97,116,117,115,0] /* PyExpat_XML_GetParsi */, "i8", ALLOC_NORMAL);
_message_3967=allocate(164, "i8*", ALLOC_NORMAL);
__str2190=allocate([111,117,116,32,111,102,32,109,101,109,111,114,121,0] /* out of memory\00 */, "i8", ALLOC_NORMAL);
__str3191=allocate([115,121,110,116,97,120,32,101,114,114,111,114,0] /* syntax error\00 */, "i8", ALLOC_NORMAL);
__str4192=allocate([110,111,32,101,108,101,109,101,110,116,32,102,111,117,110,100,0] /* no element found\00 */, "i8", ALLOC_NORMAL);
__str5193=allocate([110,111,116,32,119,101,108,108,45,102,111,114,109,101,100,32,40,105,110,118,97,108,105,100,32,116,111,107,101,110,41,0] /* not well-formed (inv */, "i8", ALLOC_NORMAL);
__str6194=allocate([117,110,99,108,111,115,101,100,32,116,111,107,101,110,0] /* unclosed token\00 */, "i8", ALLOC_NORMAL);
__str7195=allocate([112,97,114,116,105,97,108,32,99,104,97,114,97,99,116,101,114,0] /* partial character\00 */, "i8", ALLOC_NORMAL);
__str8196=allocate([109,105,115,109,97,116,99,104,101,100,32,116,97,103,0] /* mismatched tag\00 */, "i8", ALLOC_NORMAL);
__str9197=allocate([100,117,112,108,105,99,97,116,101,32,97,116,116,114,105,98,117,116,101,0] /* duplicate attribute\ */, "i8", ALLOC_NORMAL);
__str10198=allocate([106,117,110,107,32,97,102,116,101,114,32,100,111,99,117,109,101,110,116,32,101,108,101,109,101,110,116,0] /* junk after document  */, "i8", ALLOC_NORMAL);
__str11199=allocate([105,108,108,101,103,97,108,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,121,32,114,101,102,101,114,101,110,99,101,0] /* illegal parameter en */, "i8", ALLOC_NORMAL);
__str12200=allocate([117,110,100,101,102,105,110,101,100,32,101,110,116,105,116,121,0] /* undefined entity\00 */, "i8", ALLOC_NORMAL);
__str13201=allocate([114,101,99,117,114,115,105,118,101,32,101,110,116,105,116,121,32,114,101,102,101,114,101,110,99,101,0] /* recursive entity ref */, "i8", ALLOC_NORMAL);
__str14202=allocate([97,115,121,110,99,104,114,111,110,111,117,115,32,101,110,116,105,116,121,0] /* asynchronous entity\ */, "i8", ALLOC_NORMAL);
__str15203=allocate([114,101,102,101,114,101,110,99,101,32,116,111,32,105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,110,117,109,98,101,114,0] /* reference to invalid */, "i8", ALLOC_NORMAL);
__str16204=allocate([114,101,102,101,114,101,110,99,101,32,116,111,32,98,105,110,97,114,121,32,101,110,116,105,116,121,0] /* reference to binary  */, "i8", ALLOC_NORMAL);
__str17205=allocate([114,101,102,101,114,101,110,99,101,32,116,111,32,101,120,116,101,114,110,97,108,32,101,110,116,105,116,121,32,105,110,32,97,116,116,114,105,98,117,116,101,0] /* reference to externa */, "i8", ALLOC_NORMAL);
__str18206=allocate([88,77,76,32,111,114,32,116,101,120,116,32,100,101,99,108,97,114,97,116,105,111,110,32,110,111,116,32,97,116,32,115,116,97,114,116,32,111,102,32,101,110,116,105,116,121,0] /* XML or text declarat */, "i8", ALLOC_NORMAL);
__str19207=allocate([117,110,107,110,111,119,110,32,101,110,99,111,100,105,110,103,0] /* unknown encoding\00 */, "i8", ALLOC_NORMAL);
__str20208=allocate([101,110,99,111,100,105,110,103,32,115,112,101,99,105,102,105,101,100,32,105,110,32,88,77,76,32,100,101,99,108,97,114,97,116,105,111,110,32,105,115,32,105,110,99,111,114,114,101,99,116,0] /* encoding specified i */, "i8", ALLOC_NORMAL);
__str21209=allocate([117,110,99,108,111,115,101,100,32,67,68,65,84,65,32,115,101,99,116,105,111,110,0] /* unclosed CDATA secti */, "i8", ALLOC_NORMAL);
__str22210=allocate([101,114,114,111,114,32,105,110,32,112,114,111,99,101,115,115,105,110,103,32,101,120,116,101,114,110,97,108,32,101,110,116,105,116,121,32,114,101,102,101,114,101,110,99,101,0] /* error in processing  */, "i8", ALLOC_NORMAL);
__str23211=allocate([100,111,99,117,109,101,110,116,32,105,115,32,110,111,116,32,115,116,97,110,100,97,108,111,110,101,0] /* document is not stan */, "i8", ALLOC_NORMAL);
__str24212=allocate([117,110,101,120,112,101,99,116,101,100,32,112,97,114,115,101,114,32,115,116,97,116,101,32,45,32,112,108,101,97,115,101,32,115,101,110,100,32,97,32,98,117,103,32,114,101,112,111,114,116,0] /* unexpected parser st */, "i8", ALLOC_NORMAL);
__str25213=allocate([101,110,116,105,116,121,32,100,101,99,108,97,114,101,100,32,105,110,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,121,0] /* entity declared in p */, "i8", ALLOC_NORMAL);
__str26214=allocate([114,101,113,117,101,115,116,101,100,32,102,101,97,116,117,114,101,32,114,101,113,117,105,114,101,115,32,88,77,76,95,68,84,68,32,115,117,112,112,111,114,116,32,105,110,32,69,120,112,97,116,0] /* requested feature re */, "i8", ALLOC_NORMAL);
__str27215=allocate([99,97,110,110,111,116,32,99,104,97,110,103,101,32,115,101,116,116,105,110,103,32,111,110,99,101,32,112,97,114,115,105,110,103,32,104,97,115,32,98,101,103,117,110,0] /* cannot change settin */, "i8", ALLOC_NORMAL);
__str28216=allocate([117,110,98,111,117,110,100,32,112,114,101,102,105,120,0] /* unbound prefix\00 */, "i8", ALLOC_NORMAL);
__str29217=allocate([109,117,115,116,32,110,111,116,32,117,110,100,101,99,108,97,114,101,32,112,114,101,102,105,120,0] /* must not undeclare p */, "i8", ALLOC_NORMAL);
__str30218=allocate([105,110,99,111,109,112,108,101,116,101,32,109,97,114,107,117,112,32,105,110,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,121,0] /* incomplete markup in */, "i8", ALLOC_NORMAL);
__str31219=allocate([88,77,76,32,100,101,99,108,97,114,97,116,105,111,110,32,110,111,116,32,119,101,108,108,45,102,111,114,109,101,100,0] /* XML declaration not  */, "i8", ALLOC_NORMAL);
__str32220=allocate([116,101,120,116,32,100,101,99,108,97,114,97,116,105,111,110,32,110,111,116,32,119,101,108,108,45,102,111,114,109,101,100,0] /* text declaration not */, "i8", ALLOC_NORMAL);
__str33221=allocate([105,108,108,101,103,97,108,32,99,104,97,114,97,99,116,101,114,40,115,41,32,105,110,32,112,117,98,108,105,99,32,105,100,0] /* illegal character(s) */, "i8", ALLOC_NORMAL);
__str34222=allocate([112,97,114,115,101,114,32,115,117,115,112,101,110,100,101,100,0] /* parser suspended\00 */, "i8", ALLOC_NORMAL);
__str35223=allocate([112,97,114,115,101,114,32,110,111,116,32,115,117,115,112,101,110,100,101,100,0] /* parser not suspended */, "i8", ALLOC_NORMAL);
__str36224=allocate([112,97,114,115,105,110,103,32,97,98,111,114,116,101,100,0] /* parsing aborted\00 */, "i8", ALLOC_NORMAL);
__str37225=allocate([112,97,114,115,105,110,103,32,102,105,110,105,115,104,101,100,0] /* parsing finished\00 */, "i8", ALLOC_NORMAL);
__str38226=allocate([99,97,110,110,111,116,32,115,117,115,112,101,110,100,32,105,110,32,101,120,116,101,114,110,97,108,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,121,0] /* cannot suspend in ex */, "i8", ALLOC_NORMAL);
__str39227=allocate([114,101,115,101,114,118,101,100,32,112,114,101,102,105,120,32,40,120,109,108,41,32,109,117,115,116,32,110,111,116,32,98,101,32,117,110,100,101,99,108,97,114,101,100,32,111,114,32,98,111,117,110,100,32,116,111,32,97,110,111,116,104,101,114,32,110,97,109,101,115,112,97,99,101,32,110,97,109,101,0] /* reserved prefix (xml */, "i8", ALLOC_NORMAL);
__str40228=allocate([114,101,115,101,114,118,101,100,32,112,114,101,102,105,120,32,40,120,109,108,110,115,41,32,109,117,115,116,32,110,111,116,32,98,101,32,100,101,99,108,97,114,101,100,32,111,114,32,117,110,100,101,99,108,97,114,101,100,0] /* reserved prefix (xml */, "i8", ALLOC_NORMAL);
__str41229=allocate([112,114,101,102,105,120,32,109,117,115,116,32,110,111,116,32,98,101,32,98,111,117,110,100,32,116,111,32,111,110,101,32,111,102,32,116,104,101,32,114,101,115,101,114,118,101,100,32,110,97,109,101,115,112,97,99,101,32,110,97,109,101,115,0] /* prefix must not be b */, "i8", ALLOC_NORMAL);
__str42230=allocate([101,120,112,97,116,95,50,46,48,46,48,0] /* expat_2.0.0\00 */, "i8", ALLOC_NORMAL);
_features_3989=allocate([6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0], ALLOC_NORMAL);
__str43231=allocate([115,105,122,101,111,102,40,88,77,76,95,67,104,97,114,41,0] /* sizeof(XML_Char)\00 */, "i8", ALLOC_NORMAL);
__str44232=allocate([115,105,122,101,111,102,40,88,77,76,95,76,67,104,97,114,41,0] /* sizeof(XML_LChar)\00 */, "i8", ALLOC_NORMAL);
__str45233=allocate([88,77,76,95,68,84,68,0] /* XML_DTD\00 */, "i8", ALLOC_NORMAL);
__str46234=allocate([88,77,76,95,67,79,78,84,69,88,84,95,66,89,84,69,83,0] /* XML_CONTEXT_BYTES\00 */, "i8", ALLOC_NORMAL);
__str47235=allocate([88,77,76,95,78,83,0] /* XML_NS\00 */, "i8", ALLOC_NORMAL);
_xmlNamespace_5259=allocate([104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,88,77,76,47,49,57,57,56,47,110,97,109,101,115,112,97,99,101,0] /* http://www.w3.org/XM */, "i8", ALLOC_NORMAL);
_xmlnsNamespace_5261=allocate([104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,50,48,48,48,47,120,109,108,110,115,47,0] /* http://www.w3.org/20 */, "i8", ALLOC_NORMAL);
_externalSubsetName_6003=allocate([35,0] /* #\00 */, "i8", ALLOC_NORMAL);
_atypeCDATA_6004=allocate([67,68,65,84,65,0] /* CDATA\00 */, "i8", ALLOC_NORMAL);
_atypeID_6005=allocate([73,68,0] /* ID\00 */, "i8", ALLOC_NORMAL);
_atypeIDREF_6006=allocate([73,68,82,69,70,0] /* IDREF\00 */, "i8", ALLOC_NORMAL);
_atypeIDREFS_6007=allocate([73,68,82,69,70,83,0] /* IDREFS\00 */, "i8", ALLOC_NORMAL);
_atypeENTITY_6008=allocate([69,78,84,73,84,89,0] /* ENTITY\00 */, "i8", ALLOC_NORMAL);
_atypeENTITIES_6009=allocate([69,78,84,73,84,73,69,83,0] /* ENTITIES\00 */, "i8", ALLOC_NORMAL);
_atypeNMTOKEN_6010=allocate([78,77,84,79,75,69,78,0] /* NMTOKEN\00 */, "i8", ALLOC_NORMAL);
_atypeNMTOKENS_6011=allocate([78,77,84,79,75,69,78,83,0] /* NMTOKENS\00 */, "i8", ALLOC_NORMAL);
_enumValueSep_6013=allocate([124,0] /* |\00 */, "i8", ALLOC_NORMAL);
_notationPrefix_6012=allocate([78,79,84,65,84,73,79,78,40,0] /* NOTATION(\00 */, "i8", ALLOC_NORMAL);
_enumValueStart_6014=allocate([40,0] /* (\00 */, "i8", ALLOC_NORMAL);
_KW_ANY=allocate([65,78,89,0] /* ANY\00 */, "i8", ALLOC_NORMAL);
_KW_ATTLIST=allocate([65,84,84,76,73,83,84,0] /* ATTLIST\00 */, "i8", ALLOC_NORMAL);
_KW_CDATA=allocate([67,68,65,84,65,0] /* CDATA\00 */, "i8", ALLOC_NORMAL);
_KW_DOCTYPE=allocate([68,79,67,84,89,80,69,0] /* DOCTYPE\00 */, "i8", ALLOC_NORMAL);
_KW_ELEMENT=allocate([69,76,69,77,69,78,84,0] /* ELEMENT\00 */, "i8", ALLOC_NORMAL);
_KW_EMPTY=allocate([69,77,80,84,89,0] /* EMPTY\00 */, "i8", ALLOC_NORMAL);
_KW_ENTITIES=allocate([69,78,84,73,84,73,69,83,0] /* ENTITIES\00 */, "i8", ALLOC_NORMAL);
_KW_ENTITY=allocate([69,78,84,73,84,89,0] /* ENTITY\00 */, "i8", ALLOC_NORMAL);
_KW_FIXED=allocate([70,73,88,69,68,0] /* FIXED\00 */, "i8", ALLOC_NORMAL);
_KW_ID=allocate([73,68,0] /* ID\00 */, "i8", ALLOC_NORMAL);
_KW_IDREF=allocate([73,68,82,69,70,0] /* IDREF\00 */, "i8", ALLOC_NORMAL);
_KW_IDREFS=allocate([73,68,82,69,70,83,0] /* IDREFS\00 */, "i8", ALLOC_NORMAL);
_KW_IGNORE=allocate([73,71,78,79,82,69,0] /* IGNORE\00 */, "i8", ALLOC_NORMAL);
_KW_IMPLIED=allocate([73,77,80,76,73,69,68,0] /* IMPLIED\00 */, "i8", ALLOC_NORMAL);
_KW_INCLUDE=allocate([73,78,67,76,85,68,69,0] /* INCLUDE\00 */, "i8", ALLOC_NORMAL);
_KW_NDATA=allocate([78,68,65,84,65,0] /* NDATA\00 */, "i8", ALLOC_NORMAL);
_KW_NMTOKEN=allocate([78,77,84,79,75,69,78,0] /* NMTOKEN\00 */, "i8", ALLOC_NORMAL);
_KW_NMTOKENS=allocate([78,77,84,79,75,69,78,83,0] /* NMTOKENS\00 */, "i8", ALLOC_NORMAL);
_KW_NOTATION=allocate([78,79,84,65,84,73,79,78,0] /* NOTATION\00 */, "i8", ALLOC_NORMAL);
_KW_PCDATA=allocate([80,67,68,65,84,65,0] /* PCDATA\00 */, "i8", ALLOC_NORMAL);
_KW_PUBLIC=allocate([80,85,66,76,73,67,0] /* PUBLIC\00 */, "i8", ALLOC_NORMAL);
_KW_REQUIRED=allocate([82,69,81,85,73,82,69,68,0] /* REQUIRED\00 */, "i8", ALLOC_NORMAL);
_KW_SYSTEM=allocate([83,89,83,84,69,77,0] /* SYSTEM\00 */, "i8", ALLOC_NORMAL);
_types_1939=allocate(32, "i8*", ALLOC_NORMAL);
_namingBitmap=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 67108864, 0, 0, 0, -2013265922, 0, 0, 0, 134217726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8388609, 0, 0, 0, -8388609, 0, 0, 0, -1, 0, 0, 0, 2146697215, 0, 0, 0, -514, 0, 0, 0, 2147483647, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -8177, 0, 0, 0, -63832065, 0, 0, 0, 16777215, 0, 0, 0, 0, 0, 0, 0, -65536, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -134217217, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10432, 0, 0, 0, -5, 0, 0, 0, 1417641983, 0, 0, 0, 1048573, 0, 0, 0, -8194, 0, 0, 0, -1, 0, 0, 0, -536936449, 0, 0, 0, -1, 0, 0, 0, -65533, 0, 0, 0, -1, 0, 0, 0, -58977, 0, 0, 0, 54513663, 0, 0, 0, 0, 0, 0, 0, -131072, 0, 0, 0, 41943039, 0, 0, 0, -2, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, -65536, 0, 0, 0, 460799, 0, 0, 0, 0, 0, 0, 0, 134217726, 0, 0, 0, 2046, 0, 0, 0, -131072, 0, 0, 0, -1, 0, 0, 0, 2097151999, 0, 0, 0, 3112959, 0, 0, 0, 96, 0, 0, 0, -32, 0, 0, 0, 603979775, 0, 0, 0, -16777216, 0, 0, 0, 3, 0, 0, 0, -417824, 0, 0, 0, 63307263, 0, 0, 0, -1342177280, 0, 0, 0, 196611, 0, 0, 0, -423968, 0, 0, 0, 57540095, 0, 0, 0, 1577058304, 0, 0, 0, 1835008, 0, 0, 0, -282656, 0, 0, 0, 602799615, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -417824, 0, 0, 0, 600702463, 0, 0, 0, -1342177280, 0, 0, 0, 3, 0, 0, 0, -700594208, 0, 0, 0, 62899992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139296, 0, 0, 0, 66059775, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, -139296, 0, 0, 0, 66059775, 0, 0, 0, 1073741824, 0, 0, 0, 3, 0, 0, 0, -139296, 0, 0, 0, 67108351, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 884735, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, -17816170, 0, 0, 0, 537750702, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -257, 0, 0, 0, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -65473, 0, 0, 0, 8388607, 0, 0, 0, 514797, 0, 0, 0, 1342177280, 0, 0, 0, -2110697471, 0, 0, 0, 2908843, 0, 0, 0, 1073741824, 0, 0, 0, -176109312, 0, 0, 0, 7, 0, 0, 0, 33622016, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 268435455, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 67108863, 0, 0, 0, 1061158911, 0, 0, 0, -1, 0, 0, 0, -1426112705, 0, 0, 0, 1073741823, 0, 0, 0, -1, 0, 0, 0, 1608515583, 0, 0, 0, 265232348, 0, 0, 0, 534519807, 0, 0, 0, 0, 0, 0, 0, 19520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 1022, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 2097151, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 134217727, 0, 0, 0, -32, 0, 0, 0, 8191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134176768, 0, 0, 0, -2013265922, 0, 0, 0, 134217726, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, -8388609, 0, 0, 0, -8388609, 0, 0, 0, 16777215, 0, 0, 0, 0, 0, 0, 0, -65536, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -134217217, 0, 0, 0, 196611, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 63, 0, 0, 0, 3, 0, 0, 0, -10304, 0, 0, 0, -5, 0, 0, 0, 1417641983, 0, 0, 0, 1048573, 0, 0, 0, -8194, 0, 0, 0, -1, 0, 0, 0, -536936449, 0, 0, 0, -1, 0, 0, 0, -65413, 0, 0, 0, -1, 0, 0, 0, -58977, 0, 0, 0, 54513663, 0, 0, 0, 0, 0, 0, 0, -131072, 0, 0, 0, 41943039, 0, 0, 0, -2, 0, 0, 0, -130945, 0, 0, 0, -1140850693, 0, 0, 0, -65514, 0, 0, 0, 460799, 0, 0, 0, 0, 0, 0, 0, 134217726, 0, 0, 0, 524287, 0, 0, 0, -64513, 0, 0, 0, -1, 0, 0, 0, 2097151999, 0, 0, 0, -1081345, 0, 0, 0, 67059199, 0, 0, 0, -18, 0, 0, 0, -201326593, 0, 0, 0, -14794753, 0, 0, 0, 65487, 0, 0, 0, -417810, 0, 0, 0, -741999105, 0, 0, 0, -1333773921, 0, 0, 0, 262095, 0, 0, 0, -423964, 0, 0, 0, -747766273, 0, 0, 0, 1577073031, 0, 0, 0, 2097088, 0, 0, 0, -282642, 0, 0, 0, -202506753, 0, 0, 0, 15295, 0, 0, 0, 65473, 0, 0, 0, -417810, 0, 0, 0, -204603905, 0, 0, 0, -1329579633, 0, 0, 0, 65475, 0, 0, 0, -700594196, 0, 0, 0, -1010841832, 0, 0, 0, 8404423, 0, 0, 0, 65408, 0, 0, 0, -139282, 0, 0, 0, -1007682049, 0, 0, 0, 6307295, 0, 0, 0, 65475, 0, 0, 0, -139284, 0, 0, 0, -1007682049, 0, 0, 0, 1080049119, 0, 0, 0, 65475, 0, 0, 0, -139284, 0, 0, 0, -1006633473, 0, 0, 0, 8404431, 0, 0, 0, 65475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 134184959, 0, 0, 0, 67076095, 0, 0, 0, 0, 0, 0, 0, -17816170, 0, 0, 0, 1006595246, 0, 0, 0, 67059551, 0, 0, 0, 0, 0, 0, 0, 50331648, 0, 0, 0, -1029700609, 0, 0, 0, -257, 0, 0, 0, -130049, 0, 0, 0, -21032993, 0, 0, 0, 50216959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536805376, 0, 0, 0, 2, 0, 0, 0, 160, 0, 0, 0, 4128766, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 1713373183, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 2013265919, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_NORMAL);
_nmstrtPages=allocate([2,3,4,5,6,7,8,0,0,9,10,11,12,13,14,15,16,17,0,0,0,0,0,0,0,0,0,0,0,0,18,19,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,23,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /* \02\03\04\05\06\07\0 */, "i8", ALLOC_NORMAL);
_namePages=allocate([25,3,26,27,28,29,30,0,0,31,32,33,34,35,36,37,16,17,0,0,0,0,0,0,0,0,0,0,0,0,18,19,38,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,23,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /* \19\03\1A\1B\1C\1D\1 */, "i8", ALLOC_NORMAL);
_utf8_encoding_ns=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0], ALLOC_NORMAL);
_utf8_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0], ALLOC_NORMAL);
_internal_utf8_encoding_ns=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0], ALLOC_NORMAL);
_internal_utf8_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0], ALLOC_NORMAL);
_latin1_encoding_ns=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_latin1_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_ascii_encoding_ns=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_ascii_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_little2_encoding_ns=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_little2_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_internal_little2_encoding_ns=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_internal_little2_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_CDATA_LSQB_9078=allocate([67,68,65,84,65,91] /* CDATA[ */, "i8", ALLOC_NORMAL);
_big2_encoding_ns=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_big2_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_KW_version=allocate([118,101,114,115,105,111,110,0] /* version\00 */, "i8", ALLOC_NORMAL);
_KW_standalone=allocate([115,116,97,110,100,97,108,111,110,101,0] /* standalone\00 */, "i8", ALLOC_NORMAL);
_KW_yes=allocate([121,101,115,0] /* yes\00 */, "i8", ALLOC_NORMAL);
_KW_no=allocate([110,111,0] /* no\00 */, "i8", ALLOC_NORMAL);
_KW_ISO_8859_1=allocate([73,83,79,45,56,56,53,57,45,49,0] /* ISO-8859-1\00 */, "i8", ALLOC_NORMAL);
_KW_US_ASCII=allocate([85,83,45,65,83,67,73,73,0] /* US-ASCII\00 */, "i8", ALLOC_NORMAL);
_KW_UTF_16=allocate([85,84,70,45,49,54,0] /* UTF-16\00 */, "i8", ALLOC_NORMAL);
_KW_UTF_16BE=allocate([85,84,70,45,49,54,66,69,0] /* UTF-16BE\00 */, "i8", ALLOC_NORMAL);
_KW_UTF_16LE=allocate([85,84,70,45,49,54,76,69,0] /* UTF-16LE\00 */, "i8", ALLOC_NORMAL);
_encodingNames_12955=allocate(24, "i8*", ALLOC_NORMAL);
_encodings=allocate(28, "%struct.ENCODING*", ALLOC_NORMAL);
_encodingsNS=allocate(28, "%struct.ENCODING*", ALLOC_NORMAL);
HEAP[_xmlparse_methods]=__str55;
HEAP[_xmlparse_methods+4]=(FUNCTION_TABLE_OFFSET + 218);
HEAP[_xmlparse_methods+12]=_xmlparse_Parse__doc__;
HEAP[_xmlparse_methods+16]=__str56;
HEAP[_xmlparse_methods+20]=(FUNCTION_TABLE_OFFSET + 220);
HEAP[_xmlparse_methods+28]=_xmlparse_ParseFile__doc__;
HEAP[_xmlparse_methods+32]=__str57;
HEAP[_xmlparse_methods+36]=(FUNCTION_TABLE_OFFSET + 222);
HEAP[_xmlparse_methods+44]=_xmlparse_SetBase__doc__;
HEAP[_xmlparse_methods+48]=__str58;
HEAP[_xmlparse_methods+52]=(FUNCTION_TABLE_OFFSET + 224);
HEAP[_xmlparse_methods+60]=_xmlparse_GetBase__doc__;
HEAP[_xmlparse_methods+64]=__str59;
HEAP[_xmlparse_methods+68]=(FUNCTION_TABLE_OFFSET + 226);
HEAP[_xmlparse_methods+76]=_xmlparse_ExternalEntityParserCreate__doc__;
HEAP[_xmlparse_methods+80]=__str60;
HEAP[_xmlparse_methods+84]=(FUNCTION_TABLE_OFFSET + 228);
HEAP[_xmlparse_methods+92]=_xmlparse_SetParamEntityParsing__doc__;
HEAP[_xmlparse_methods+96]=__str61;
HEAP[_xmlparse_methods+100]=(FUNCTION_TABLE_OFFSET + 230);
HEAP[_xmlparse_methods+108]=_xmlparse_GetInputContext__doc__;
HEAP[_xmlparse_methods+112]=__str54;
HEAP[_xmlparse_methods+116]=(FUNCTION_TABLE_OFFSET + 232);
HEAP[_xmlparse_methods+124]=_xmlparse_UseForeignDTD__doc__;
HEAP[_Xmlparsetype+12]=__str84;
HEAP[_Xmlparsetype+24]=(FUNCTION_TABLE_OFFSET + 234);
HEAP[_Xmlparsetype+32]=(FUNCTION_TABLE_OFFSET + 236);
HEAP[_Xmlparsetype+36]=(FUNCTION_TABLE_OFFSET + 238);
HEAP[_Xmlparsetype+88]=_Xmlparsetype__doc__;
HEAP[_Xmlparsetype+92]=(FUNCTION_TABLE_OFFSET + 240);
HEAP[_Xmlparsetype+96]=(FUNCTION_TABLE_OFFSET + 242);
HEAP[_kwlist_11530]=__str86;
HEAP[_kwlist_11530+4]=__str87;
HEAP[_kwlist_11530+8]=__str78;
HEAP[_pyexpat_methods]=__str91;
HEAP[_pyexpat_methods+4]=(FUNCTION_TABLE_OFFSET + 244);
HEAP[_pyexpat_methods+12]=_pyexpat_ParserCreate__doc__;
HEAP[_pyexpat_methods+16]=__str92;
HEAP[_pyexpat_methods+20]=(FUNCTION_TABLE_OFFSET + 246);
HEAP[_pyexpat_methods+28]=_pyexpat_ErrorString__doc__;
HEAP[_handler_info]=__str168;
HEAP[_handler_info+4]=(FUNCTION_TABLE_OFFSET + 248);
HEAP[_handler_info+8]=(FUNCTION_TABLE_OFFSET + 250);
HEAP[_handler_info+20]=__str169;
HEAP[_handler_info+24]=(FUNCTION_TABLE_OFFSET + 252);
HEAP[_handler_info+28]=(FUNCTION_TABLE_OFFSET + 254);
HEAP[_handler_info+40]=__str170;
HEAP[_handler_info+44]=(FUNCTION_TABLE_OFFSET + 36);
HEAP[_handler_info+48]=(FUNCTION_TABLE_OFFSET + 256);
HEAP[_handler_info+60]=__str83;
HEAP[_handler_info+64]=(FUNCTION_TABLE_OFFSET + 26);
HEAP[_handler_info+68]=(FUNCTION_TABLE_OFFSET + 258);
HEAP[_handler_info+80]=__str171;
HEAP[_handler_info+84]=(FUNCTION_TABLE_OFFSET + 260);
HEAP[_handler_info+88]=(FUNCTION_TABLE_OFFSET + 262);
HEAP[_handler_info+100]=__str172;
HEAP[_handler_info+104]=(FUNCTION_TABLE_OFFSET + 264);
HEAP[_handler_info+108]=(FUNCTION_TABLE_OFFSET + 266);
HEAP[_handler_info+120]=__str173;
HEAP[_handler_info+124]=(FUNCTION_TABLE_OFFSET + 268);
HEAP[_handler_info+128]=(FUNCTION_TABLE_OFFSET + 270);
HEAP[_handler_info+140]=__str174;
HEAP[_handler_info+144]=(FUNCTION_TABLE_OFFSET + 272);
HEAP[_handler_info+148]=(FUNCTION_TABLE_OFFSET + 274);
HEAP[_handler_info+160]=__str175;
HEAP[_handler_info+164]=(FUNCTION_TABLE_OFFSET + 28);
HEAP[_handler_info+168]=(FUNCTION_TABLE_OFFSET + 276);
HEAP[_handler_info+180]=__str176;
HEAP[_handler_info+184]=(FUNCTION_TABLE_OFFSET + 278);
HEAP[_handler_info+188]=(FUNCTION_TABLE_OFFSET + 280);
HEAP[_handler_info+200]=__str177;
HEAP[_handler_info+204]=(FUNCTION_TABLE_OFFSET + 282);
HEAP[_handler_info+208]=(FUNCTION_TABLE_OFFSET + 284);
HEAP[_handler_info+220]=__str178;
HEAP[_handler_info+224]=(FUNCTION_TABLE_OFFSET + 286);
HEAP[_handler_info+228]=(FUNCTION_TABLE_OFFSET + 288);
HEAP[_handler_info+240]=__str38;
HEAP[_handler_info+244]=(FUNCTION_TABLE_OFFSET + 30);
HEAP[_handler_info+248]=(FUNCTION_TABLE_OFFSET + 290);
HEAP[_handler_info+260]=__str179;
HEAP[_handler_info+264]=(FUNCTION_TABLE_OFFSET + 292);
HEAP[_handler_info+268]=(FUNCTION_TABLE_OFFSET + 294);
HEAP[_handler_info+280]=__str180;
HEAP[_handler_info+284]=(FUNCTION_TABLE_OFFSET + 296);
HEAP[_handler_info+288]=(FUNCTION_TABLE_OFFSET + 298);
HEAP[_handler_info+300]=__str181;
HEAP[_handler_info+304]=(FUNCTION_TABLE_OFFSET + 300);
HEAP[_handler_info+308]=(FUNCTION_TABLE_OFFSET + 302);
HEAP[_handler_info+320]=__str182;
HEAP[_handler_info+324]=(FUNCTION_TABLE_OFFSET + 304);
HEAP[_handler_info+328]=(FUNCTION_TABLE_OFFSET + 306);
HEAP[_handler_info+340]=__str183;
HEAP[_handler_info+344]=(FUNCTION_TABLE_OFFSET + 308);
HEAP[_handler_info+348]=(FUNCTION_TABLE_OFFSET + 310);
HEAP[_handler_info+360]=__str184;
HEAP[_handler_info+364]=(FUNCTION_TABLE_OFFSET + 312);
HEAP[_handler_info+368]=(FUNCTION_TABLE_OFFSET + 314);
HEAP[_handler_info+380]=__str185;
HEAP[_handler_info+384]=(FUNCTION_TABLE_OFFSET + 316);
HEAP[_handler_info+388]=(FUNCTION_TABLE_OFFSET + 318);
HEAP[_handler_info+400]=__str186;
HEAP[_handler_info+404]=(FUNCTION_TABLE_OFFSET + 320);
HEAP[_handler_info+408]=(FUNCTION_TABLE_OFFSET + 322);
HEAP[_handler_info+420]=__str187;
HEAP[_handler_info+424]=(FUNCTION_TABLE_OFFSET + 324);
HEAP[_handler_info+428]=(FUNCTION_TABLE_OFFSET + 326);
HEAP[_message_3967+4]=__str2190;
HEAP[_message_3967+8]=__str3191;
HEAP[_message_3967+12]=__str4192;
HEAP[_message_3967+16]=__str5193;
HEAP[_message_3967+20]=__str6194;
HEAP[_message_3967+24]=__str7195;
HEAP[_message_3967+28]=__str8196;
HEAP[_message_3967+32]=__str9197;
HEAP[_message_3967+36]=__str10198;
HEAP[_message_3967+40]=__str11199;
HEAP[_message_3967+44]=__str12200;
HEAP[_message_3967+48]=__str13201;
HEAP[_message_3967+52]=__str14202;
HEAP[_message_3967+56]=__str15203;
HEAP[_message_3967+60]=__str16204;
HEAP[_message_3967+64]=__str17205;
HEAP[_message_3967+68]=__str18206;
HEAP[_message_3967+72]=__str19207;
HEAP[_message_3967+76]=__str20208;
HEAP[_message_3967+80]=__str21209;
HEAP[_message_3967+84]=__str22210;
HEAP[_message_3967+88]=__str23211;
HEAP[_message_3967+92]=__str24212;
HEAP[_message_3967+96]=__str25213;
HEAP[_message_3967+100]=__str26214;
HEAP[_message_3967+104]=__str27215;
HEAP[_message_3967+108]=__str28216;
HEAP[_message_3967+112]=__str29217;
HEAP[_message_3967+116]=__str30218;
HEAP[_message_3967+120]=__str31219;
HEAP[_message_3967+124]=__str32220;
HEAP[_message_3967+128]=__str33221;
HEAP[_message_3967+132]=__str34222;
HEAP[_message_3967+136]=__str35223;
HEAP[_message_3967+140]=__str36224;
HEAP[_message_3967+144]=__str37225;
HEAP[_message_3967+148]=__str38226;
HEAP[_message_3967+152]=__str39227;
HEAP[_message_3967+156]=__str40228;
HEAP[_message_3967+160]=__str41229;
HEAP[_features_3989+4]=__str43231;
HEAP[_features_3989+16]=__str44232;
HEAP[_features_3989+28]=__str45233;
HEAP[_features_3989+40]=__str46234;
HEAP[_features_3989+52]=__str47235;
HEAP[_types_1939]=_KW_CDATA;
HEAP[_types_1939+4]=_KW_ID;
HEAP[_types_1939+8]=_KW_IDREF;
HEAP[_types_1939+12]=_KW_IDREFS;
HEAP[_types_1939+16]=_KW_ENTITY;
HEAP[_types_1939+20]=_KW_ENTITIES;
HEAP[_types_1939+24]=_KW_NMTOKEN;
HEAP[_types_1939+28]=_KW_NMTOKENS;
HEAP[_utf8_encoding_ns]=(FUNCTION_TABLE_OFFSET + 328);
HEAP[_utf8_encoding_ns+4]=(FUNCTION_TABLE_OFFSET + 330);
HEAP[_utf8_encoding_ns+8]=(FUNCTION_TABLE_OFFSET + 332);
HEAP[_utf8_encoding_ns+12]=(FUNCTION_TABLE_OFFSET + 334);
HEAP[_utf8_encoding_ns+16]=(FUNCTION_TABLE_OFFSET + 336);
HEAP[_utf8_encoding_ns+20]=(FUNCTION_TABLE_OFFSET + 338);
HEAP[_utf8_encoding_ns+24]=(FUNCTION_TABLE_OFFSET + 340);
HEAP[_utf8_encoding_ns+28]=(FUNCTION_TABLE_OFFSET + 342);
HEAP[_utf8_encoding_ns+32]=(FUNCTION_TABLE_OFFSET + 344);
HEAP[_utf8_encoding_ns+36]=(FUNCTION_TABLE_OFFSET + 346);
HEAP[_utf8_encoding_ns+40]=(FUNCTION_TABLE_OFFSET + 348);
HEAP[_utf8_encoding_ns+44]=(FUNCTION_TABLE_OFFSET + 350);
HEAP[_utf8_encoding_ns+48]=(FUNCTION_TABLE_OFFSET + 352);
HEAP[_utf8_encoding_ns+52]=(FUNCTION_TABLE_OFFSET + 354);
HEAP[_utf8_encoding_ns+56]=(FUNCTION_TABLE_OFFSET + 356);
HEAP[_utf8_encoding_ns+60]=(FUNCTION_TABLE_OFFSET + 358);
HEAP[_utf8_encoding_ns+64]=(FUNCTION_TABLE_OFFSET + 360);
HEAP[_utf8_encoding_ns+332]=(FUNCTION_TABLE_OFFSET + 362);
HEAP[_utf8_encoding_ns+336]=(FUNCTION_TABLE_OFFSET + 364);
HEAP[_utf8_encoding_ns+340]=(FUNCTION_TABLE_OFFSET + 366);
HEAP[_utf8_encoding_ns+344]=(FUNCTION_TABLE_OFFSET + 368);
HEAP[_utf8_encoding_ns+348]=(FUNCTION_TABLE_OFFSET + 370);
HEAP[_utf8_encoding_ns+352]=(FUNCTION_TABLE_OFFSET + 366);
HEAP[_utf8_encoding_ns+356]=(FUNCTION_TABLE_OFFSET + 372);
HEAP[_utf8_encoding_ns+360]=(FUNCTION_TABLE_OFFSET + 374);
HEAP[_utf8_encoding_ns+364]=(FUNCTION_TABLE_OFFSET + 376);
HEAP[_utf8_encoding]=(FUNCTION_TABLE_OFFSET + 328);
HEAP[_utf8_encoding+4]=(FUNCTION_TABLE_OFFSET + 330);
HEAP[_utf8_encoding+8]=(FUNCTION_TABLE_OFFSET + 332);
HEAP[_utf8_encoding+12]=(FUNCTION_TABLE_OFFSET + 334);
HEAP[_utf8_encoding+16]=(FUNCTION_TABLE_OFFSET + 336);
HEAP[_utf8_encoding+20]=(FUNCTION_TABLE_OFFSET + 338);
HEAP[_utf8_encoding+24]=(FUNCTION_TABLE_OFFSET + 340);
HEAP[_utf8_encoding+28]=(FUNCTION_TABLE_OFFSET + 342);
HEAP[_utf8_encoding+32]=(FUNCTION_TABLE_OFFSET + 344);
HEAP[_utf8_encoding+36]=(FUNCTION_TABLE_OFFSET + 346);
HEAP[_utf8_encoding+40]=(FUNCTION_TABLE_OFFSET + 348);
HEAP[_utf8_encoding+44]=(FUNCTION_TABLE_OFFSET + 350);
HEAP[_utf8_encoding+48]=(FUNCTION_TABLE_OFFSET + 352);
HEAP[_utf8_encoding+52]=(FUNCTION_TABLE_OFFSET + 354);
HEAP[_utf8_encoding+56]=(FUNCTION_TABLE_OFFSET + 356);
HEAP[_utf8_encoding+60]=(FUNCTION_TABLE_OFFSET + 358);
HEAP[_utf8_encoding+64]=(FUNCTION_TABLE_OFFSET + 360);
HEAP[_utf8_encoding+332]=(FUNCTION_TABLE_OFFSET + 362);
HEAP[_utf8_encoding+336]=(FUNCTION_TABLE_OFFSET + 364);
HEAP[_utf8_encoding+340]=(FUNCTION_TABLE_OFFSET + 366);
HEAP[_utf8_encoding+344]=(FUNCTION_TABLE_OFFSET + 368);
HEAP[_utf8_encoding+348]=(FUNCTION_TABLE_OFFSET + 370);
HEAP[_utf8_encoding+352]=(FUNCTION_TABLE_OFFSET + 366);
HEAP[_utf8_encoding+356]=(FUNCTION_TABLE_OFFSET + 372);
HEAP[_utf8_encoding+360]=(FUNCTION_TABLE_OFFSET + 374);
HEAP[_utf8_encoding+364]=(FUNCTION_TABLE_OFFSET + 376);
HEAP[_internal_utf8_encoding_ns]=(FUNCTION_TABLE_OFFSET + 328);
HEAP[_internal_utf8_encoding_ns+4]=(FUNCTION_TABLE_OFFSET + 330);
HEAP[_internal_utf8_encoding_ns+8]=(FUNCTION_TABLE_OFFSET + 332);
HEAP[_internal_utf8_encoding_ns+12]=(FUNCTION_TABLE_OFFSET + 334);
HEAP[_internal_utf8_encoding_ns+16]=(FUNCTION_TABLE_OFFSET + 336);
HEAP[_internal_utf8_encoding_ns+20]=(FUNCTION_TABLE_OFFSET + 338);
HEAP[_internal_utf8_encoding_ns+24]=(FUNCTION_TABLE_OFFSET + 340);
HEAP[_internal_utf8_encoding_ns+28]=(FUNCTION_TABLE_OFFSET + 342);
HEAP[_internal_utf8_encoding_ns+32]=(FUNCTION_TABLE_OFFSET + 344);
HEAP[_internal_utf8_encoding_ns+36]=(FUNCTION_TABLE_OFFSET + 346);
HEAP[_internal_utf8_encoding_ns+40]=(FUNCTION_TABLE_OFFSET + 348);
HEAP[_internal_utf8_encoding_ns+44]=(FUNCTION_TABLE_OFFSET + 350);
HEAP[_internal_utf8_encoding_ns+48]=(FUNCTION_TABLE_OFFSET + 352);
HEAP[_internal_utf8_encoding_ns+52]=(FUNCTION_TABLE_OFFSET + 354);
HEAP[_internal_utf8_encoding_ns+56]=(FUNCTION_TABLE_OFFSET + 356);
HEAP[_internal_utf8_encoding_ns+60]=(FUNCTION_TABLE_OFFSET + 358);
HEAP[_internal_utf8_encoding_ns+64]=(FUNCTION_TABLE_OFFSET + 360);
HEAP[_internal_utf8_encoding_ns+332]=(FUNCTION_TABLE_OFFSET + 362);
HEAP[_internal_utf8_encoding_ns+336]=(FUNCTION_TABLE_OFFSET + 364);
HEAP[_internal_utf8_encoding_ns+340]=(FUNCTION_TABLE_OFFSET + 366);
HEAP[_internal_utf8_encoding_ns+344]=(FUNCTION_TABLE_OFFSET + 368);
HEAP[_internal_utf8_encoding_ns+348]=(FUNCTION_TABLE_OFFSET + 370);
HEAP[_internal_utf8_encoding_ns+352]=(FUNCTION_TABLE_OFFSET + 366);
HEAP[_internal_utf8_encoding_ns+356]=(FUNCTION_TABLE_OFFSET + 372);
HEAP[_internal_utf8_encoding_ns+360]=(FUNCTION_TABLE_OFFSET + 374);
HEAP[_internal_utf8_encoding_ns+364]=(FUNCTION_TABLE_OFFSET + 376);
HEAP[_internal_utf8_encoding]=(FUNCTION_TABLE_OFFSET + 328);
HEAP[_internal_utf8_encoding+4]=(FUNCTION_TABLE_OFFSET + 330);
HEAP[_internal_utf8_encoding+8]=(FUNCTION_TABLE_OFFSET + 332);
HEAP[_internal_utf8_encoding+12]=(FUNCTION_TABLE_OFFSET + 334);
HEAP[_internal_utf8_encoding+16]=(FUNCTION_TABLE_OFFSET + 336);
HEAP[_internal_utf8_encoding+20]=(FUNCTION_TABLE_OFFSET + 338);
HEAP[_internal_utf8_encoding+24]=(FUNCTION_TABLE_OFFSET + 340);
HEAP[_internal_utf8_encoding+28]=(FUNCTION_TABLE_OFFSET + 342);
HEAP[_internal_utf8_encoding+32]=(FUNCTION_TABLE_OFFSET + 344);
HEAP[_internal_utf8_encoding+36]=(FUNCTION_TABLE_OFFSET + 346);
HEAP[_internal_utf8_encoding+40]=(FUNCTION_TABLE_OFFSET + 348);
HEAP[_internal_utf8_encoding+44]=(FUNCTION_TABLE_OFFSET + 350);
HEAP[_internal_utf8_encoding+48]=(FUNCTION_TABLE_OFFSET + 352);
HEAP[_internal_utf8_encoding+52]=(FUNCTION_TABLE_OFFSET + 354);
HEAP[_internal_utf8_encoding+56]=(FUNCTION_TABLE_OFFSET + 356);
HEAP[_internal_utf8_encoding+60]=(FUNCTION_TABLE_OFFSET + 358);
HEAP[_internal_utf8_encoding+64]=(FUNCTION_TABLE_OFFSET + 360);
HEAP[_internal_utf8_encoding+332]=(FUNCTION_TABLE_OFFSET + 362);
HEAP[_internal_utf8_encoding+336]=(FUNCTION_TABLE_OFFSET + 364);
HEAP[_internal_utf8_encoding+340]=(FUNCTION_TABLE_OFFSET + 366);
HEAP[_internal_utf8_encoding+344]=(FUNCTION_TABLE_OFFSET + 368);
HEAP[_internal_utf8_encoding+348]=(FUNCTION_TABLE_OFFSET + 370);
HEAP[_internal_utf8_encoding+352]=(FUNCTION_TABLE_OFFSET + 366);
HEAP[_internal_utf8_encoding+356]=(FUNCTION_TABLE_OFFSET + 372);
HEAP[_internal_utf8_encoding+360]=(FUNCTION_TABLE_OFFSET + 374);
HEAP[_internal_utf8_encoding+364]=(FUNCTION_TABLE_OFFSET + 376);
HEAP[_latin1_encoding_ns]=(FUNCTION_TABLE_OFFSET + 328);
HEAP[_latin1_encoding_ns+4]=(FUNCTION_TABLE_OFFSET + 330);
HEAP[_latin1_encoding_ns+8]=(FUNCTION_TABLE_OFFSET + 332);
HEAP[_latin1_encoding_ns+12]=(FUNCTION_TABLE_OFFSET + 334);
HEAP[_latin1_encoding_ns+16]=(FUNCTION_TABLE_OFFSET + 336);
HEAP[_latin1_encoding_ns+20]=(FUNCTION_TABLE_OFFSET + 338);
HEAP[_latin1_encoding_ns+24]=(FUNCTION_TABLE_OFFSET + 340);
HEAP[_latin1_encoding_ns+28]=(FUNCTION_TABLE_OFFSET + 342);
HEAP[_latin1_encoding_ns+32]=(FUNCTION_TABLE_OFFSET + 344);
HEAP[_latin1_encoding_ns+36]=(FUNCTION_TABLE_OFFSET + 346);
HEAP[_latin1_encoding_ns+40]=(FUNCTION_TABLE_OFFSET + 348);
HEAP[_latin1_encoding_ns+44]=(FUNCTION_TABLE_OFFSET + 350);
HEAP[_latin1_encoding_ns+48]=(FUNCTION_TABLE_OFFSET + 352);
HEAP[_latin1_encoding_ns+52]=(FUNCTION_TABLE_OFFSET + 354);
HEAP[_latin1_encoding_ns+56]=(FUNCTION_TABLE_OFFSET + 356);
HEAP[_latin1_encoding_ns+60]=(FUNCTION_TABLE_OFFSET + 378);
HEAP[_latin1_encoding_ns+64]=(FUNCTION_TABLE_OFFSET + 380);
HEAP[_latin1_encoding]=(FUNCTION_TABLE_OFFSET + 328);
HEAP[_latin1_encoding+4]=(FUNCTION_TABLE_OFFSET + 330);
HEAP[_latin1_encoding+8]=(FUNCTION_TABLE_OFFSET + 332);
HEAP[_latin1_encoding+12]=(FUNCTION_TABLE_OFFSET + 334);
HEAP[_latin1_encoding+16]=(FUNCTION_TABLE_OFFSET + 336);
HEAP[_latin1_encoding+20]=(FUNCTION_TABLE_OFFSET + 338);
HEAP[_latin1_encoding+24]=(FUNCTION_TABLE_OFFSET + 340);
HEAP[_latin1_encoding+28]=(FUNCTION_TABLE_OFFSET + 342);
HEAP[_latin1_encoding+32]=(FUNCTION_TABLE_OFFSET + 344);
HEAP[_latin1_encoding+36]=(FUNCTION_TABLE_OFFSET + 346);
HEAP[_latin1_encoding+40]=(FUNCTION_TABLE_OFFSET + 348);
HEAP[_latin1_encoding+44]=(FUNCTION_TABLE_OFFSET + 350);
HEAP[_latin1_encoding+48]=(FUNCTION_TABLE_OFFSET + 352);
HEAP[_latin1_encoding+52]=(FUNCTION_TABLE_OFFSET + 354);
HEAP[_latin1_encoding+56]=(FUNCTION_TABLE_OFFSET + 356);
HEAP[_latin1_encoding+60]=(FUNCTION_TABLE_OFFSET + 378);
HEAP[_latin1_encoding+64]=(FUNCTION_TABLE_OFFSET + 380);
HEAP[_ascii_encoding_ns]=(FUNCTION_TABLE_OFFSET + 328);
HEAP[_ascii_encoding_ns+4]=(FUNCTION_TABLE_OFFSET + 330);
HEAP[_ascii_encoding_ns+8]=(FUNCTION_TABLE_OFFSET + 332);
HEAP[_ascii_encoding_ns+12]=(FUNCTION_TABLE_OFFSET + 334);
HEAP[_ascii_encoding_ns+16]=(FUNCTION_TABLE_OFFSET + 336);
HEAP[_ascii_encoding_ns+20]=(FUNCTION_TABLE_OFFSET + 338);
HEAP[_ascii_encoding_ns+24]=(FUNCTION_TABLE_OFFSET + 340);
HEAP[_ascii_encoding_ns+28]=(FUNCTION_TABLE_OFFSET + 342);
HEAP[_ascii_encoding_ns+32]=(FUNCTION_TABLE_OFFSET + 344);
HEAP[_ascii_encoding_ns+36]=(FUNCTION_TABLE_OFFSET + 346);
HEAP[_ascii_encoding_ns+40]=(FUNCTION_TABLE_OFFSET + 348);
HEAP[_ascii_encoding_ns+44]=(FUNCTION_TABLE_OFFSET + 350);
HEAP[_ascii_encoding_ns+48]=(FUNCTION_TABLE_OFFSET + 352);
HEAP[_ascii_encoding_ns+52]=(FUNCTION_TABLE_OFFSET + 354);
HEAP[_ascii_encoding_ns+56]=(FUNCTION_TABLE_OFFSET + 356);
HEAP[_ascii_encoding_ns+60]=(FUNCTION_TABLE_OFFSET + 382);
HEAP[_ascii_encoding_ns+64]=(FUNCTION_TABLE_OFFSET + 380);
HEAP[_ascii_encoding]=(FUNCTION_TABLE_OFFSET + 328);
HEAP[_ascii_encoding+4]=(FUNCTION_TABLE_OFFSET + 330);
HEAP[_ascii_encoding+8]=(FUNCTION_TABLE_OFFSET + 332);
HEAP[_ascii_encoding+12]=(FUNCTION_TABLE_OFFSET + 334);
HEAP[_ascii_encoding+16]=(FUNCTION_TABLE_OFFSET + 336);
HEAP[_ascii_encoding+20]=(FUNCTION_TABLE_OFFSET + 338);
HEAP[_ascii_encoding+24]=(FUNCTION_TABLE_OFFSET + 340);
HEAP[_ascii_encoding+28]=(FUNCTION_TABLE_OFFSET + 342);
HEAP[_ascii_encoding+32]=(FUNCTION_TABLE_OFFSET + 344);
HEAP[_ascii_encoding+36]=(FUNCTION_TABLE_OFFSET + 346);
HEAP[_ascii_encoding+40]=(FUNCTION_TABLE_OFFSET + 348);
HEAP[_ascii_encoding+44]=(FUNCTION_TABLE_OFFSET + 350);
HEAP[_ascii_encoding+48]=(FUNCTION_TABLE_OFFSET + 352);
HEAP[_ascii_encoding+52]=(FUNCTION_TABLE_OFFSET + 354);
HEAP[_ascii_encoding+56]=(FUNCTION_TABLE_OFFSET + 356);
HEAP[_ascii_encoding+60]=(FUNCTION_TABLE_OFFSET + 382);
HEAP[_ascii_encoding+64]=(FUNCTION_TABLE_OFFSET + 380);
HEAP[_little2_encoding_ns]=(FUNCTION_TABLE_OFFSET + 384);
HEAP[_little2_encoding_ns+4]=(FUNCTION_TABLE_OFFSET + 386);
HEAP[_little2_encoding_ns+8]=(FUNCTION_TABLE_OFFSET + 388);
HEAP[_little2_encoding_ns+12]=(FUNCTION_TABLE_OFFSET + 390);
HEAP[_little2_encoding_ns+16]=(FUNCTION_TABLE_OFFSET + 392);
HEAP[_little2_encoding_ns+20]=(FUNCTION_TABLE_OFFSET + 394);
HEAP[_little2_encoding_ns+24]=(FUNCTION_TABLE_OFFSET + 396);
HEAP[_little2_encoding_ns+28]=(FUNCTION_TABLE_OFFSET + 398);
HEAP[_little2_encoding_ns+32]=(FUNCTION_TABLE_OFFSET + 400);
HEAP[_little2_encoding_ns+36]=(FUNCTION_TABLE_OFFSET + 402);
HEAP[_little2_encoding_ns+40]=(FUNCTION_TABLE_OFFSET + 404);
HEAP[_little2_encoding_ns+44]=(FUNCTION_TABLE_OFFSET + 406);
HEAP[_little2_encoding_ns+48]=(FUNCTION_TABLE_OFFSET + 408);
HEAP[_little2_encoding_ns+52]=(FUNCTION_TABLE_OFFSET + 410);
HEAP[_little2_encoding_ns+56]=(FUNCTION_TABLE_OFFSET + 412);
HEAP[_little2_encoding_ns+60]=(FUNCTION_TABLE_OFFSET + 414);
HEAP[_little2_encoding_ns+64]=(FUNCTION_TABLE_OFFSET + 416);
HEAP[_little2_encoding]=(FUNCTION_TABLE_OFFSET + 384);
HEAP[_little2_encoding+4]=(FUNCTION_TABLE_OFFSET + 386);
HEAP[_little2_encoding+8]=(FUNCTION_TABLE_OFFSET + 388);
HEAP[_little2_encoding+12]=(FUNCTION_TABLE_OFFSET + 390);
HEAP[_little2_encoding+16]=(FUNCTION_TABLE_OFFSET + 392);
HEAP[_little2_encoding+20]=(FUNCTION_TABLE_OFFSET + 394);
HEAP[_little2_encoding+24]=(FUNCTION_TABLE_OFFSET + 396);
HEAP[_little2_encoding+28]=(FUNCTION_TABLE_OFFSET + 398);
HEAP[_little2_encoding+32]=(FUNCTION_TABLE_OFFSET + 400);
HEAP[_little2_encoding+36]=(FUNCTION_TABLE_OFFSET + 402);
HEAP[_little2_encoding+40]=(FUNCTION_TABLE_OFFSET + 404);
HEAP[_little2_encoding+44]=(FUNCTION_TABLE_OFFSET + 406);
HEAP[_little2_encoding+48]=(FUNCTION_TABLE_OFFSET + 408);
HEAP[_little2_encoding+52]=(FUNCTION_TABLE_OFFSET + 410);
HEAP[_little2_encoding+56]=(FUNCTION_TABLE_OFFSET + 412);
HEAP[_little2_encoding+60]=(FUNCTION_TABLE_OFFSET + 414);
HEAP[_little2_encoding+64]=(FUNCTION_TABLE_OFFSET + 416);
HEAP[_internal_little2_encoding_ns]=(FUNCTION_TABLE_OFFSET + 384);
HEAP[_internal_little2_encoding_ns+4]=(FUNCTION_TABLE_OFFSET + 386);
HEAP[_internal_little2_encoding_ns+8]=(FUNCTION_TABLE_OFFSET + 388);
HEAP[_internal_little2_encoding_ns+12]=(FUNCTION_TABLE_OFFSET + 390);
HEAP[_internal_little2_encoding_ns+16]=(FUNCTION_TABLE_OFFSET + 392);
HEAP[_internal_little2_encoding_ns+20]=(FUNCTION_TABLE_OFFSET + 394);
HEAP[_internal_little2_encoding_ns+24]=(FUNCTION_TABLE_OFFSET + 396);
HEAP[_internal_little2_encoding_ns+28]=(FUNCTION_TABLE_OFFSET + 398);
HEAP[_internal_little2_encoding_ns+32]=(FUNCTION_TABLE_OFFSET + 400);
HEAP[_internal_little2_encoding_ns+36]=(FUNCTION_TABLE_OFFSET + 402);
HEAP[_internal_little2_encoding_ns+40]=(FUNCTION_TABLE_OFFSET + 404);
HEAP[_internal_little2_encoding_ns+44]=(FUNCTION_TABLE_OFFSET + 406);
HEAP[_internal_little2_encoding_ns+48]=(FUNCTION_TABLE_OFFSET + 408);
HEAP[_internal_little2_encoding_ns+52]=(FUNCTION_TABLE_OFFSET + 410);
HEAP[_internal_little2_encoding_ns+56]=(FUNCTION_TABLE_OFFSET + 412);
HEAP[_internal_little2_encoding_ns+60]=(FUNCTION_TABLE_OFFSET + 414);
HEAP[_internal_little2_encoding_ns+64]=(FUNCTION_TABLE_OFFSET + 416);
HEAP[_internal_little2_encoding]=(FUNCTION_TABLE_OFFSET + 384);
HEAP[_internal_little2_encoding+4]=(FUNCTION_TABLE_OFFSET + 386);
HEAP[_internal_little2_encoding+8]=(FUNCTION_TABLE_OFFSET + 388);
HEAP[_internal_little2_encoding+12]=(FUNCTION_TABLE_OFFSET + 390);
HEAP[_internal_little2_encoding+16]=(FUNCTION_TABLE_OFFSET + 392);
HEAP[_internal_little2_encoding+20]=(FUNCTION_TABLE_OFFSET + 394);
HEAP[_internal_little2_encoding+24]=(FUNCTION_TABLE_OFFSET + 396);
HEAP[_internal_little2_encoding+28]=(FUNCTION_TABLE_OFFSET + 398);
HEAP[_internal_little2_encoding+32]=(FUNCTION_TABLE_OFFSET + 400);
HEAP[_internal_little2_encoding+36]=(FUNCTION_TABLE_OFFSET + 402);
HEAP[_internal_little2_encoding+40]=(FUNCTION_TABLE_OFFSET + 404);
HEAP[_internal_little2_encoding+44]=(FUNCTION_TABLE_OFFSET + 406);
HEAP[_internal_little2_encoding+48]=(FUNCTION_TABLE_OFFSET + 408);
HEAP[_internal_little2_encoding+52]=(FUNCTION_TABLE_OFFSET + 410);
HEAP[_internal_little2_encoding+56]=(FUNCTION_TABLE_OFFSET + 412);
HEAP[_internal_little2_encoding+60]=(FUNCTION_TABLE_OFFSET + 414);
HEAP[_internal_little2_encoding+64]=(FUNCTION_TABLE_OFFSET + 416);
HEAP[_big2_encoding_ns]=(FUNCTION_TABLE_OFFSET + 418);
HEAP[_big2_encoding_ns+4]=(FUNCTION_TABLE_OFFSET + 420);
HEAP[_big2_encoding_ns+8]=(FUNCTION_TABLE_OFFSET + 422);
HEAP[_big2_encoding_ns+12]=(FUNCTION_TABLE_OFFSET + 424);
HEAP[_big2_encoding_ns+16]=(FUNCTION_TABLE_OFFSET + 426);
HEAP[_big2_encoding_ns+20]=(FUNCTION_TABLE_OFFSET + 428);
HEAP[_big2_encoding_ns+24]=(FUNCTION_TABLE_OFFSET + 430);
HEAP[_big2_encoding_ns+28]=(FUNCTION_TABLE_OFFSET + 432);
HEAP[_big2_encoding_ns+32]=(FUNCTION_TABLE_OFFSET + 434);
HEAP[_big2_encoding_ns+36]=(FUNCTION_TABLE_OFFSET + 436);
HEAP[_big2_encoding_ns+40]=(FUNCTION_TABLE_OFFSET + 438);
HEAP[_big2_encoding_ns+44]=(FUNCTION_TABLE_OFFSET + 440);
HEAP[_big2_encoding_ns+48]=(FUNCTION_TABLE_OFFSET + 442);
HEAP[_big2_encoding_ns+52]=(FUNCTION_TABLE_OFFSET + 444);
HEAP[_big2_encoding_ns+56]=(FUNCTION_TABLE_OFFSET + 446);
HEAP[_big2_encoding_ns+60]=(FUNCTION_TABLE_OFFSET + 448);
HEAP[_big2_encoding_ns+64]=(FUNCTION_TABLE_OFFSET + 450);
HEAP[_big2_encoding]=(FUNCTION_TABLE_OFFSET + 418);
HEAP[_big2_encoding+4]=(FUNCTION_TABLE_OFFSET + 420);
HEAP[_big2_encoding+8]=(FUNCTION_TABLE_OFFSET + 422);
HEAP[_big2_encoding+12]=(FUNCTION_TABLE_OFFSET + 424);
HEAP[_big2_encoding+16]=(FUNCTION_TABLE_OFFSET + 426);
HEAP[_big2_encoding+20]=(FUNCTION_TABLE_OFFSET + 428);
HEAP[_big2_encoding+24]=(FUNCTION_TABLE_OFFSET + 430);
HEAP[_big2_encoding+28]=(FUNCTION_TABLE_OFFSET + 432);
HEAP[_big2_encoding+32]=(FUNCTION_TABLE_OFFSET + 434);
HEAP[_big2_encoding+36]=(FUNCTION_TABLE_OFFSET + 436);
HEAP[_big2_encoding+40]=(FUNCTION_TABLE_OFFSET + 438);
HEAP[_big2_encoding+44]=(FUNCTION_TABLE_OFFSET + 440);
HEAP[_big2_encoding+48]=(FUNCTION_TABLE_OFFSET + 442);
HEAP[_big2_encoding+52]=(FUNCTION_TABLE_OFFSET + 444);
HEAP[_big2_encoding+56]=(FUNCTION_TABLE_OFFSET + 446);
HEAP[_big2_encoding+60]=(FUNCTION_TABLE_OFFSET + 448);
HEAP[_big2_encoding+64]=(FUNCTION_TABLE_OFFSET + 450);
HEAP[_encodingNames_12955]=_KW_ISO_8859_1;
HEAP[_encodingNames_12955+4]=_KW_US_ASCII;
HEAP[_encodingNames_12955+8]=__str106;
HEAP[_encodingNames_12955+12]=_KW_UTF_16;
HEAP[_encodingNames_12955+16]=_KW_UTF_16BE;
HEAP[_encodingNames_12955+20]=_KW_UTF_16LE;
HEAP[_encodings]=_latin1_encoding;
HEAP[_encodings+4]=_ascii_encoding;
HEAP[_encodings+8]=_utf8_encoding;
HEAP[_encodings+12]=_big2_encoding;
HEAP[_encodings+16]=_big2_encoding;
HEAP[_encodings+20]=_little2_encoding;
HEAP[_encodings+24]=_utf8_encoding;
HEAP[_encodingsNS]=_latin1_encoding_ns;
HEAP[_encodingsNS+4]=_ascii_encoding_ns;
HEAP[_encodingsNS+8]=_utf8_encoding_ns;
HEAP[_encodingsNS+12]=_big2_encoding_ns;
HEAP[_encodingsNS+16]=_big2_encoding_ns;
HEAP[_encodingsNS+20]=_little2_encoding_ns;
HEAP[_encodingsNS+24]=_utf8_encoding_ns;

  __globalConstructor__();
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

run();

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}

  return Module;
});

>>>>>>> f1726142f40cb660652d789a0d51be1d72d90630
