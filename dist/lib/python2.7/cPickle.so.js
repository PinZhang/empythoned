<<<<<<< HEAD
(function(g){function e(){var a;for(a=-1;;)switch(a){case -1:var b,c;c=__PyObject_New(qa);a=c==0?1:2;break;case 1:b=0;a=7;break;case 2:HEAP[c+12]=8;HEAP[c+8]=0;a=_malloc(HEAP[c+12]*4);HEAP[c+16]=a;var d=c;a=HEAP[c+16]!=0?3:4;break;case 3:b=d;a=7;break;case 4:HEAP[d]-=1;a=HEAP[d]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[c+4]+24]](c);a=6;break;case 6:b=_PyErr_NoMemory();a=7;break;case 7:return b;default:assert(0,"bad label: "+a)}}function b(){_PyErr_SetString(HEAP[P],
hb);return-1}function a(a,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k;e=a;f=c;d=f<0?1:2;break;case 1:g=b();d=10;break;case 2:d=HEAP[e+8]<=f?3:4;break;case 3:g=0;d=10;break;case 4:h=HEAP[e+8];j=HEAP[e+16]+4*f;h-=1;d=h>=f?5:9;break;case 5:d=HEAP[j]!=0?6:8;break;case 6:k=HEAP[j];HEAP[j]=0;HEAP[k]-=1;d=HEAP[k]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[k+4]+24]](k);d=8;break;case 8:j+=4;h-=1;d=h>=f?5:9;break;case 9:HEAP[e+8]=f;g=0;d=10;break;case 10:return d=g;default:assert(0,"bad label: "+
d)}}function c(a){var b;for(b=-1;;)switch(b){case -1:var c,d,e,f,g;c=a;e=HEAP[c+12]<<1;b=e<=0?4:1;break;case 1:f=e*4;b=Math.floor(f/4)!=e?4:2;break;case 2:g=_realloc(HEAP[c+16],f);b=g==0?4:3;break;case 3:HEAP[c+16]=g;HEAP[c+12]=e;d=0;b=5;break;case 4:_PyErr_NoMemory();d=-1;b=5;break;case 5:return a=d;default:assert(0,"bad label: "+b)}}function d(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g,h,j,k;d=a;e=b;k=HEAP[d+8]-e;g=_PyTuple_New(k);c=g==0?1:2;break;case 1:f=0;c=5;break;case 2:h=e;j=0;c=
j<k?3:4;break;case 3:HEAP[g+12+j*4]=HEAP[HEAP[d+16]+4*h];h+=1;j+=1;c=j<k?3:4;break;case 4:HEAP[d+8]=e;f=g;c=5;break;case 5:return c=f;default:assert(0,"bad label: "+c)}}function f(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g,h,j,k;d=a;e=b;k=HEAP[d+8]-e;g=_PyList_New(k);c=g==0?1:2;break;case 1:f=0;c=5;break;case 2:h=e;j=0;c=j<k?3:4;break;case 3:HEAP[HEAP[g+12]+4*j]=HEAP[HEAP[d+16]+4*h];h+=1;j+=1;c=j<k?3:4;break;case 4:HEAP[d+8]=e;f=g;c=5;break;case 5:return c=f;default:assert(0,"bad label: "+
c)}}function h(a,b,c){var d=STACKTOP;STACKTOP+=4;_memset(d,0,4);var e;for(e=-1;;)switch(e){case -1:var f,g,j,k=d,l,m,n;f=a;g=b;j=c;m=l=0;HEAP[k]=arguments[h.length];e=j!=0?1:2;break;case 1:l=_Py_VaBuildValue(j,HEAP[k]);e=2;break;case 2:e=j!=0?3:5;break;case 3:e=l==0?4:5;break;case 4:e=24;break;case 5:e=g!=0?6:9;break;case 6:m=_PyString_FromString(g);e=m==0?8:7;break;case 7:e=l!=0?11:21;break;case 8:e=24;break;case 9:var o=l!=0;e=m!=0?10:18;break;case 10:e=o?11:21;break;case 11:n=_PyString_Format(m,
l);HEAP[m]-=1;e=HEAP[m]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);e=13;break;case 13:HEAP[l]-=1;e=HEAP[l]==0?14:15;break;case 14:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);e=15;break;case 15:e=n==0?16:17;break;case 16:e=24;break;case 17:m=n;e=21;break;case 18:e=o?19:20;break;case 19:m=l;e=21;break;case 20:_PyErr_SetObject(f,__Py_NoneStruct);e=24;break;case 21:_PyErr_SetObject(f,m);HEAP[m]-=1;e=HEAP[m]==0?22:23;break;case 22:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);e=23;break;case 23:e=
24;break;case 24:STACKTOP=d;return;default:assert(0,"bad label: "+e)}}function j(a,b,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,k,l,m,n;g=a;h=b;k=d;n=m=0;var o=HEAP[g+56];e=h==0?1:5;break;case 1:e=o==0?2:3;break;case 2:l=0;e=39;break;case 3:m=_PyString_FromStringAndSize(HEAP[g+52],HEAP[g+56]);e=m==0?4:14;break;case 4:l=-1;e=39;break;case 5:e=o!=0?6:9;break;case 6:var p=k;p+HEAP[g+56]>256?(f=6,e=7):(f=6,e=10);break;case 7:e=j(g,0,0)<0?8:9;break;case 8:l=-1;e=39;break;case 9:var q=k,f=9;e=
10;break;case 10:e=(f==9?q:p)>256?11:13;break;case 11:m=_PyString_FromStringAndSize(h,k);e=m==0?12:14;break;case 12:l=-1;e=39;break;case 13:_llvm_memcpy_p0i8_p0i8_i32(HEAP[g+52]+HEAP[g+56],h,k,1,0);HEAP[g+56]=k+HEAP[g+56];l=k;e=39;break;case 14:var r=g;e=HEAP[g+12]!=0?15:32;break;case 15:e=HEAP[r+24]!=0?17:16;break;case 16:e=_PyTuple_New(1);HEAP[g+24]=e;e=HEAP[g+24]!=0?17:21;break;case 17:e=HEAP[HEAP[g+24]+12]!=0?18:20;break;case 18:e=HEAP[HEAP[g+24]+12];HEAP[e]-=1;e=HEAP[e]==0?19:20;break;case 19:FUNCTION_TABLE[HEAP[HEAP[HEAP[HEAP[g+
24]+12]+4]+24]](HEAP[HEAP[g+24]+12]);e=20;break;case 20:HEAP[HEAP[g+24]+12]=m;e=23;break;case 21:HEAP[m]-=1;e=HEAP[m]==0?22:23;break;case 22:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);e=23;break;case 23:e=HEAP[g+24]!=0?24:28;break;case 24:n=_PyObject_Call(HEAP[g+12],HEAP[g+24],0);e=HEAP[HEAP[g+24]]>1?25:28;break;case 25:e=HEAP[g+24];HEAP[e]-=1;e=HEAP[e]==0?26:27;break;case 26:FUNCTION_TABLE[HEAP[HEAP[HEAP[g+24]+4]+24]](HEAP[g+24]);e=27;break;case 27:HEAP[g+24]=0;e=28;break;case 28:e=n!=0?29:31;break;case 29:HEAP[n]-=
1;e=HEAP[n]==0?30:38;break;case 30:FUNCTION_TABLE[HEAP[HEAP[n+4]+24]](n);e=38;break;case 31:l=-1;e=39;break;case 32:e=HEAP[HEAP[r+16]+8]==HEAP[HEAP[g+16]+12]?33:37;break;case 33:e=c(HEAP[g+16])<0?34:37;break;case 34:HEAP[m]-=1;e=HEAP[m]==0?35:36;break;case 35:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);e=36;break;case 36:l=-1;e=39;break;case 37:e=HEAP[g+16];var s=HEAP[e+8];HEAP[HEAP[HEAP[g+16]+16]+4*s]=m;HEAP[e+8]=s+1;e=38;break;case 38:HEAP[g+56]=0;l=k;e=39;break;case 39:return a=l;default:assert(0,"bad label: "+
e)}}function k(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g;d=a;e=b;g=_malloc(e+1);c=g==0?1:2;break;case 1:f=_PyErr_NoMemory();c=3;break;case 2:_llvm_memcpy_p0i8_p0i8_i32(g,d,e,1,0);HEAP[g+e]=0;f=g;c=3;break;case 3:return c=f;default:assert(0,"bad label: "+c)}}function l(a,b){var d=STACKTOP;STACKTOP+=30;_memset(d,0,30);var e;for(e=-1;;)switch(e){case -1:var f,g,h,k,l,m,n=d,o;f=a;g=b;l=_PyDict_GetItem(HEAP[f+20],g);e=l==0?1:2;break;case 1:_PyErr_SetObject(HEAP[_PyExc_KeyError],g);h=-1;e=21;
break;case 2:k=_PyTuple_GetItem(l,0);e=k==0?3:4;break;case 3:h=-1;e=21;break;case 4:e=(HEAP[HEAP[k+4]+84]&8388608)==0?5:6;break;case 5:_PyErr_SetString(HEAP[S],Ca);h=-1;e=21;break;case 6:m=HEAP[k+8];e=HEAP[f+40]==0?7:8;break;case 7:HEAP[n]=103;_PyOS_snprintf(n+1,29,pa,allocate([m,0,0,0],["i32",0,0,0],ALLOC_STACK));o=_strlen(n);e=18;break;case 8:e=HEAP[HEAP[f+16]+4]==qa?9:15;break;case 9:e=j(f,0,0)<0?10:11;break;case 10:h=-1;e=21;break;case 11:e=HEAP[HEAP[f+16]+8]==HEAP[HEAP[f+16]+12]?12:14;break;
case 12:e=c(HEAP[f+16])<0?13:14;break;case 13:h=-1;e=21;break;case 14:HEAP[l]+=1;e=HEAP[f+16];h=HEAP[e+8];HEAP[HEAP[HEAP[f+16]+16]+4*h]=l;HEAP[e+8]=h+1;h=0;e=21;break;case 15:var p=n;e=m<=255?16:17;break;case 16:HEAP[p]=104;HEAP[n+1]=m&255;o=2;e=18;break;case 17:HEAP[p]=106;HEAP[n+1]=m&255;HEAP[n+2]=m>>8&255;HEAP[n+3]=m>>16&255;HEAP[n+4]=m>>24&255;o=5;e=18;break;case 18:e=FUNCTION_TABLE[HEAP[f+48]](f,n,o)<0?19:20;break;case 19:h=-1;e=21;break;case 20:h=0;e=21;break;case 21:return f=h,STACKTOP=d,f;
default:assert(0,"bad label: "+e)}}function m(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f;d=a;e=b;c=HEAP[e]<=1?2:1;break;case 1:c=HEAP[d+44]!=0?2:3;break;case 2:f=0;c=4;break;case 3:f=n(d,e);c=4;break;case 4:return c=f;default:assert(0,"bad label: "+c)}}function n(a,b){var d=STACKTOP;STACKTOP+=30;_memset(d,0,30);var e;for(e=-1;;)switch(e){case -1:var f,g,h,k=d,l,m,n,o,p,q;f=a;g=b;n=-1;q=p=o=0;e=HEAP[f+44]!=0?1:2;break;case 1:h=0;e=31;break;case 2:l=_PyDict_Size(HEAP[f+20]);e=l<0?21:3;break;
case 3:l+=1;o=_PyLong_FromVoidPtr(g);e=o==0?24:4;break;case 4:p=_PyInt_FromLong(l);e=p==0?21:5;break;case 5:q=_PyTuple_New(2);e=q==0?21:6;break;case 6:HEAP[q+12]=p;HEAP[p]+=1;HEAP[q+12+4]=g;HEAP[g]+=1;e=_PyDict_SetItem(HEAP[f+20],o,q)<0?21:7;break;case 7:e=HEAP[f+40]==0?8:9;break;case 8:HEAP[k]=112;_PyOS_snprintf(k+1,29,Aa,allocate([l,0,0,0],["i32",0,0,0],ALLOC_STACK));m=_strlen(k);e=19;break;case 9:e=HEAP[HEAP[f+16]+4]==qa?10:16;break;case 10:e=j(f,0,0)<0?11:12;break;case 11:h=-1;e=31;break;case 12:e=
HEAP[HEAP[f+16]+8]==HEAP[HEAP[f+16]+12]?13:15;break;case 13:e=c(HEAP[f+16])<0?14:15;break;case 14:h=-1;e=31;break;case 15:HEAP[p]+=1;e=HEAP[f+16];n=HEAP[e+8];HEAP[HEAP[HEAP[f+16]+16]+4*n]=p;HEAP[e+8]=n+1;n=0;e=21;break;case 16:var r=k;e=l>255?17:18;break;case 17:HEAP[r]=114;HEAP[k+1]=l&255;HEAP[k+2]=l>>8&255;HEAP[k+3]=l>>16&255;HEAP[k+4]=l>>24&255;m=5;e=19;break;case 18:HEAP[r]=113;HEAP[k+1]=l&255;m=2;e=19;break;case 19:e=FUNCTION_TABLE[HEAP[f+48]](f,k,m)<0?21:20;break;case 20:n=0;e=21;break;case 21:e=
o!=0?22:24;break;case 22:HEAP[o]-=1;e=HEAP[o]==0?23:24;break;case 23:FUNCTION_TABLE[HEAP[HEAP[o+4]+24]](o);e=24;break;case 24:e=p!=0?25:27;break;case 25:HEAP[p]-=1;e=HEAP[p]==0?26:27;break;case 26:FUNCTION_TABLE[HEAP[HEAP[p+4]+24]](p);e=27;break;case 27:e=q!=0?28:30;break;case 28:HEAP[q]-=1;e=HEAP[q]==0?29:30;break;case 29:FUNCTION_TABLE[HEAP[HEAP[q+4]+24]](q);e=30;break;case 30:h=n;e=31;break;case 31:return f=h,STACKTOP=d,f;default:assert(0,"bad label: "+e)}}function o(a,b){var c=STACKTOP;STACKTOP+=
12;_memset(c,0,12);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h=c,j,k=c+4,l,m,n=c+8;e=a;f=b;m=l=HEAP[k]=0;HEAP[n]=0;d=_PyObject_GetAttrString(e,ob);HEAP[k]=d;d=HEAP[k]!=0?1:2;break;case 1:g=HEAP[k];d=21;break;case 2:d=_PyErr_ExceptionMatches(HEAP[_PyExc_AttributeError])!=0?3:4;break;case 3:_PyErr_Clear();l=_PySys_GetObject(ib);d=l==0?5:6;break;case 4:g=0;d=21;break;case 5:g=0;d=21;break;case 6:HEAP[h]=0;d=17;break;case 7:d=_PyObject_Compare(HEAP[n],HEAP[ca])==0?17:8;break;case 8:m=_PyObject_GetAttr(HEAP[k],
f);d=m==0?9:12;break;case 9:d=_PyErr_ExceptionMatches(HEAP[_PyExc_AttributeError])!=0?10:11;break;case 10:_PyErr_Clear();d=17;break;case 11:g=0;d=21;break;case 12:HEAP[m]-=1;var o=HEAP[m]==0;d=m!=e?13:15;break;case 13:d=o?14:17;break;case 14:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);d=17;break;case 15:d=o?16:18;break;case 16:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);d=18;break;case 17:j=d=_PyDict_Next(l,h,n,k);d=d!=0?7:19;break;case 18:d=j==0?19:20;break;case 19:HEAP[n]=HEAP[ca];d=20;break;case 20:HEAP[HEAP[n]]+=
1;g=HEAP[n];d=21;break;case 21:return e=g,STACKTOP=c,e;default:assert(0,"bad label: "+d)}}function p(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g;d=a;e=b;HEAP[d+64]+=1;c=HEAP[d+64]>49?1:16;break;case 1:g=0;c=HEAP[d+68]==0?2:4;break;case 2:c=_PyDict_New();HEAP[d+68]=c;c=HEAP[d+68]==0?3:4;break;case 3:HEAP[d+64]=-1;f=0;c=17;break;case 4:g=c=_PyLong_FromVoidPtr(e);c=c==0?5:6;break;case 5:f=0;c=17;break;case 6:c=_PyDict_GetItem(HEAP[d+68],g)!=0?7:10;break;case 7:HEAP[g]-=1;c=HEAP[g]==0?8:9;break;
case 8:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);c=9;break;case 9:_PyErr_Format(HEAP[_PyExc_ValueError],na,allocate([HEAP[HEAP[e+4]+12],0,0,0,e,0,0,0],["i8*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));HEAP[d+64]=-1;f=0;c=17;break;case 10:c=_PyDict_SetItem(HEAP[d+68],g,__Py_NoneStruct)<0;HEAP[g]-=1;var h=HEAP[g]==0;c=c?11:14;break;case 11:c=h?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);c=13;break;case 13:HEAP[d+64]=-1;f=0;c=17;break;case 14:c=h?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[g+
4]+24]](g);c=16;break;case 16:f=1;c=17;break;case 17:return d=f;default:assert(0,"bad label: "+c)}}function q(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g;d=a;e=b;c=HEAP[d+64]>49;HEAP[d+64]-=1;c=c!=0?1:9;break;case 1:g=_PyLong_FromVoidPtr(e);c=g==0?2:3;break;case 2:f=0;c=10;break;case 3:c=_PyDict_DelItem(HEAP[d+68],g)<0;HEAP[g]-=1;var h=HEAP[g]==0;c=c?4:7;break;case 4:c=h?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);c=6;break;case 6:f=0;c=10;break;case 7:c=h?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[g+
4]+24]](g);c=9;break;case 9:f=1;c=10;break;case 10:return d=f;default:assert(0,"bad label: "+c)}}function r(a,b,d){var e=STACKTOP;STACKTOP+=5;_memset(e,0,5);var f;for(f=-1;;)switch(f){case -1:var g,h,k,l,n,o,p,q,r,s=e;g=a;h=b;k=d;p=0;n=_PyString_Size(h);f=n<0?1:2;break;case 1:l=-1;f=37;break;case 2:f=HEAP[g+40]==0?3:12;break;case 3:p=_PyObject_Repr(h);f=p==0?4:5;break;case 4:l=-1;f=37;break;case 5:o=_PyString_Size(p);f=o<0?33:6;break;case 6:q=p+20;f=FUNCTION_TABLE[HEAP[g+48]](g,Oa,1)<0?33:7;break;
case 7:f=FUNCTION_TABLE[HEAP[g+48]](g,q,o)<0?33:8;break;case 8:f=FUNCTION_TABLE[HEAP[g+48]](g,ab,1)<0?33:9;break;case 9:f=p!=0?10:29;break;case 10:HEAP[p]-=1;f=HEAP[p]==0?11:29;break;case 11:FUNCTION_TABLE[HEAP[HEAP[p+4]+24]](p);f=29;break;case 12:var t=s;f=n<=255?13:14;break;case 13:HEAP[t]=85;HEAP[s+1]=n&255;o=2;f=17;break;case 14:HEAP[t]=84;r=1;f=15;break;case 15:HEAP[s+r]=n>>r*8+-8&255;r=f=r+1;f=f<=4?15:16;break;case 16:o=5;f=17;break;case 17:f=FUNCTION_TABLE[HEAP[g+48]](g,s,o)<0?18:19;break;
case 18:l=-1;f=37;break;case 19:f=n<=128?27:20;break;case 20:f=HEAP[HEAP[g+16]+4]!=qa?27:21;break;case 21:f=j(g,0,0)<0?22:23;break;case 22:l=-1;f=37;break;case 23:f=HEAP[HEAP[g+16]+8]==HEAP[HEAP[g+16]+12]?24:26;break;case 24:f=c(HEAP[g+16])<0?25:26;break;case 25:l=-1;f=37;break;case 26:HEAP[h]+=1;f=HEAP[g+16];var u=HEAP[f+8];HEAP[HEAP[HEAP[g+16]+16]+4*u]=h;HEAP[f+8]=u+1;f=29;break;case 27:f=FUNCTION_TABLE[HEAP[g+48]](g,h+20,n)<0?28:29;break;case 28:l=-1;f=37;break;case 29:f=k!=0?30:32;break;case 30:f=
m(g,h)<0?31:32;break;case 31:l=-1;f=37;break;case 32:l=0;f=37;break;case 33:f=p!=0?34:36;break;case 34:HEAP[p]-=1;f=HEAP[p]==0?35:36;break;case 35:FUNCTION_TABLE[HEAP[HEAP[p+4]+24]](p);f=36;break;case 36:l=-1;f=37;break;case 37:return a=l,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function u(a,b,d){var e=STACKTOP;STACKTOP+=5;_memset(e,0,5);var f;for(f=-1;;)switch(f){case -1:var g,h,k,l,n,o,p,q,r,s=e;g=a;h=b;k=d;p=0;f=(HEAP[HEAP[h+4]+84]&268435456)==0?1:2;break;case 1:l=-1;f=36;break;case 2:var t=
h;f=HEAP[g+40]==0?3:12;break;case 3:a:{f=HEAP[h+12];var u=HEAP[t+8];p=STACKTOP;STACKTOP+=4;_memset(p,0,4);for(var B=void 0,B=-1;;)switch(B){case -1:var v,w,x,O=p,H,y,F,z,A;v=f;w=u;F=6;B=(2147483647/F|0)<w?1:2;break;case 1:x=_PyErr_NoMemory();B=16;break;case 2:B=_PyString_FromStringAndSize(0,w*F);HEAP[O]=B;B=HEAP[O]==0?3:4;break;case 3:x=0;B=16;break;case 4:var xa=HEAP[O],B=w==0?5:6;break;case 5:x=xa;B=16;break;case 6:H=y=xa+20;B=w>0;w-=1;B=B?7:15;break;case 7:z=HEAP[v];v+=2;B=z>55295&z<=56319?8:12;
break;case 8:A=HEAP[v];v+=2;w-=1;B=A>56319&A<=57343?9:11;break;case 9:B=((z&1023)<<10|A&1023)+65536;HEAP[H]=92;H+=1;HEAP[H]=85;H+=1;HEAP[H]=HEAP[va+(B>>>28&15)];H+=1;HEAP[H]=HEAP[va+(B>>>24&15)];H+=1;HEAP[H]=HEAP[va+(B>>>20&15)];H+=1;HEAP[H]=HEAP[va+(B>>>16&15)];H+=1;HEAP[H]=HEAP[va+(B>>>12&15)];H+=1;HEAP[H]=HEAP[va+(B>>>8&15)];H+=1;HEAP[H]=HEAP[va+(B>>>4&15)];H+=1;HEAP[H]=HEAP[va+(B&15)];H+=1;B=10;break;case 10:B=w>0;w-=1;B=B!=0?7:15;break;case 11:v+=-2;w+=1;B=12;break;case 12:B=z>255|z==92|z==10?
13:14;break;case 13:HEAP[H]=92;H+=1;HEAP[H]=117;H+=1;HEAP[H]=HEAP[va+(z>>>12&15)];H+=1;HEAP[H]=HEAP[va+(z>>>8&15)];H+=1;HEAP[H]=HEAP[va+(z>>>4&15)];H+=1;HEAP[H]=HEAP[va+(z&15)];H+=1;B=10;break;case 14:HEAP[H]=z&255;H+=1;B=10;break;case 15:HEAP[H]=0;__PyString_Resize(O,H-y);x=HEAP[O];B=16;break;case 16:f=x;STACKTOP=p;p=f;break a;default:assert(0,"bad label: "+B)}p=void 0}f=p==0?4:5;break;case 4:l=-1;f=36;break;case 5:o=_PyString_Size(p);f=o<0?32:6;break;case 6:q=p+20;f=FUNCTION_TABLE[HEAP[g+48]](g,
U,1)<0?32:7;break;case 7:f=FUNCTION_TABLE[HEAP[g+48]](g,q,o)<0?32:8;break;case 8:f=FUNCTION_TABLE[HEAP[g+48]](g,ab,1)<0?32:9;break;case 9:f=p!=0?10:28;break;case 10:HEAP[p]-=1;f=HEAP[p]==0?11:28;break;case 11:FUNCTION_TABLE[HEAP[HEAP[p+4]+24]](p);f=28;break;case 12:p=_PyUnicodeUCS2_AsUTF8String(t);f=p==0?13:14;break;case 13:l=-1;f=36;break;case 14:n=_PyString_Size(p);f=n<0?32:15;break;case 15:HEAP[s]=88;r=1;f=16;break;case 16:HEAP[s+r]=n>>r*8+-8&255;r=f=r+1;f=f<=4?16:17;break;case 17:o=5;f=FUNCTION_TABLE[HEAP[g+
48]](g,s,o)<0?32:18;break;case 18:f=n<=128?25:19;break;case 19:f=HEAP[HEAP[g+16]+4]!=qa?25:20;break;case 20:f=j(g,0,0)<0?32:21;break;case 21:f=HEAP[HEAP[g+16]+8]==HEAP[HEAP[g+16]+12]?22:24;break;case 22:f=c(HEAP[g+16])<0?23:24;break;case 23:l=-1;f=36;break;case 24:HEAP[p]+=1;f=HEAP[g+16];u=HEAP[f+8];HEAP[HEAP[HEAP[g+16]+16]+4*u]=p;HEAP[f+8]=u+1;f=26;break;case 25:f=FUNCTION_TABLE[HEAP[g+48]](g,p+20,n)<0?32:26;break;case 26:HEAP[p]-=1;f=HEAP[p]==0?27:28;break;case 27:FUNCTION_TABLE[HEAP[HEAP[p+4]+
24]](p);f=28;break;case 28:f=k!=0?29:31;break;case 29:f=m(g,h)<0?30:31;break;case 30:l=-1;f=36;break;case 31:l=0;f=36;break;case 32:f=p!=0?33:35;break;case 33:HEAP[p]-=1;f=HEAP[p]==0?34:35;break;case 34:FUNCTION_TABLE[HEAP[HEAP[p+4]+24]](p);f=35;break;case 35:l=-1;f=36;break;case 36:return a=l,STACKTOP=e,a;default:assert(0,"bad label: "+f)}}function s(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k;e=a;f=b;g=c;j=-1;d=_PyTuple_Size(f)!=g?1:2;break;case 1:throw ___assert_fail(fb,Cb,1454,xb),
"Reached an unreachable!";case 2:h=0;d=6;break;case 3:k=HEAP[f+12+h*4];d=k==0?8:4;break;case 4:d=z(e,k,0)<0?8:5;break;case 5:h+=1;d=6;break;case 6:d=h<g?3:7;break;case 7:j=0;d=8;break;case 8:return a=j;default:assert(0,"bad label: "+d)}}function t(a,b){var c=STACKTOP;STACKTOP+=2;_memset(c,0,2);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k,n=c;e=a;f=b;g=0;k=-1;h=_PyTuple_Size(f);d=h<0?33:1;break;case 1:d=h==0?2:7;break;case 2:var o=n;d=HEAP[e+36]!=0?3:4;break;case 3:HEAP[o]=41;h=1;d=5;break;case 4:HEAP[o]=
40;HEAP[n+1]=116;h=2;d=5;break;case 5:d=FUNCTION_TABLE[HEAP[e+48]](e,n,h)>=0?6:33;break;case 6:k=0;d=33;break;case 7:g=_PyLong_FromVoidPtr(f);d=g==0?36:8;break;case 8:d=h<=3?9:19;break;case 9:d=HEAP[e+36]>1?10:19;break;case 10:d=s(e,f,h)<0?33:11;break;case 11:d=_PyDict_GetItem(HEAP[e+20],g)!=0?12:18;break;case 12:j=0;d=15;break;case 13:d=FUNCTION_TABLE[HEAP[p+48]](e,db,1)<0?33:14;break;case 14:j+=1;d=15;break;case 15:var p=e;d=j<h?13:16;break;case 16:d=l(p,g)<0?33:17;break;case 17:k=0;d=33;break;
case 18:d=FUNCTION_TABLE[HEAP[e+48]](e,gb+h,1)<0?33:31;break;case 19:d=FUNCTION_TABLE[HEAP[e+48]](e,ja,1)<0?33:20;break;case 20:d=s(e,f,h)<0?33:21;break;case 21:d=_PyDict_GetItem(HEAP[e+20],g);var q=e;d=d!=0?22:30;break;case 22:d=HEAP[q+40]!=0?23:24;break;case 23:d=FUNCTION_TABLE[HEAP[e+48]](e,rb,1)<0?33:28;break;case 24:j=0;d=27;break;case 25:d=FUNCTION_TABLE[HEAP[e+48]](e,db,1)<0?33:26;break;case 26:j+=1;d=27;break;case 27:d=j<=h?25:28;break;case 28:d=l(e,g)>=0?29:33;break;case 29:k=0;d=33;break;
case 30:d=FUNCTION_TABLE[HEAP[q+48]](e,sb,1)<0?33:31;break;case 31:d=m(e,f)>=0?32:33;break;case 32:k=0;d=33;break;case 33:d=g!=0?34:36;break;case 34:HEAP[g]-=1;d=HEAP[g]==0?35:36;break;case 35:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=36;break;case 36:return e=k,STACKTOP=c,e;default:assert(0,"bad label: "+d)}}function v(a,b){var c,d=null;for(c=-1;;)switch(c){case -1:var e,f,g,h,j,k,l,m,n,o;e=a;f=b;j=h=0;c=f==0?1:2;break;case 1:throw ___assert_fail(Kb,Cb,1599,Gb),"Reached an unreachable!";case 2:c=HEAP[e+
36]==0?3:13;break;case 3:h=c=_PyIter_Next(f);c=c==0?4:7;break;case 4:c=_PyErr_Occurred()!=0?5:6;break;case 5:g=-1;c=46;break;case 6:g=0;c=46;break;case 7:k=z(e,h,0);HEAP[h]-=1;c=HEAP[h]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);c=9;break;case 9:c=k<0?10:11;break;case 10:g=-1;c=46;break;case 11:c=FUNCTION_TABLE[HEAP[e+48]](e,Nb,1)<0?12:3;break;case 12:g=-1;c=46;break;case 13:j=c=_PyIter_Next(f);c=c==0?14:15;break;case 14:c=_PyErr_Occurred()!=0?39:38;break;case 15:h=_PyIter_Next(f);
c=h==0?16:22;break;case 16:c=_PyErr_Occurred()!=0?39:17;break;case 17:c=z(e,j,0)<0?39:18;break;case 18:c=FUNCTION_TABLE[HEAP[e+48]](e,Nb,1)<0?39:19;break;case 19:c=j!=0?20:38;break;case 20:m=j;j=0;HEAP[m]-=1;c=HEAP[m]==0?21:38;break;case 21:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);c=38;break;case 22:c=FUNCTION_TABLE[HEAP[e+48]](e,ja,1)<0?39:23;break;case 23:c=z(e,j,0)<0?39:24;break;case 24:c=j!=0?25:27;break;case 25:n=j;j=0;HEAP[n]-=1;c=HEAP[n]==0?26:27;break;case 26:FUNCTION_TABLE[HEAP[HEAP[n+4]+24]](n);
c=27;break;case 27:l=1;var p=h,d=27;c=35;break;case 28:c=z(e,h,0)<0?39:29;break;case 29:c=h!=0?30:32;break;case 30:o=h;h=0;HEAP[o]-=1;c=HEAP[o]==0?31:32;break;case 31:FUNCTION_TABLE[HEAP[HEAP[o+4]+24]](o);c=32;break;case 32:l=c=l+1;c=c==1E3?36:33;break;case 33:var q=h=_PyIter_Next(f);q==0?(d=33,c=34):(d=33,c=35);break;case 34:c=_PyErr_Occurred()!=0?39:36;break;case 35:c=(d==33?q:p)!=0?28:36;break;case 36:c=FUNCTION_TABLE[HEAP[e+48]](e,Ab,1)<0?39:37;break;case 37:c=l==1E3?13:38;break;case 38:g=0;c=
46;break;case 39:c=j!=0?40:42;break;case 40:HEAP[j]-=1;c=HEAP[j]==0?41:42;break;case 41:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);c=42;break;case 42:c=h!=0?43:45;break;case 43:HEAP[h]-=1;c=HEAP[h]==0?44:45;break;case 44:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);c=45;break;case 45:g=-1;c=46;break;case 46:return d=g;default:assert(0,"bad label: "+c)}}function w(a,b){var c,d=null;for(c=-1;;)switch(c){case -1:var e,f,g,h,j,k,l,m,n,o;e=a;f=b;j=h=0;c=f==0?1:2;break;case 1:throw ___assert_fail(Kb,Cb,1767,pb),"Reached an unreachable!";
case 2:c=HEAP[e+36]==0?3:18;break;case 3:h=c=_PyIter_Next(f);c=c==0?4:7;break;case 4:c=_PyErr_Occurred()!=0?5:6;break;case 5:g=-1;c=60;break;case 6:g=0;c=60;break;case 7:c=(HEAP[HEAP[h+4]+84]&67108864)==0?9:8;break;case 8:c=_PyTuple_Size(h)!=2?9:10;break;case 9:_PyErr_SetString(HEAP[_PyExc_TypeError],Mb);g=-1;c=60;break;case 10:k=z(e,HEAP[h+12],0);c=k>=0?11:12;break;case 11:k=z(e,HEAP[h+12+4],0);c=12;break;case 12:HEAP[h]-=1;c=HEAP[h]==0?13:14;break;case 13:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);c=
14;break;case 14:c=k<0?15:16;break;case 15:g=-1;c=60;break;case 16:c=FUNCTION_TABLE[HEAP[e+48]](e,tb,1)<0?17:3;break;case 17:g=-1;c=60;break;case 18:j=c=_PyIter_Next(f);c=c==0?19:20;break;case 19:c=_PyErr_Occurred()!=0?53:52;break;case 20:c=(HEAP[HEAP[j+4]+84]&67108864)==0?22:21;break;case 21:c=_PyTuple_Size(j)!=2?22:23;break;case 22:_PyErr_SetString(HEAP[_PyExc_TypeError],Mb);c=53;break;case 23:h=_PyIter_Next(f);c=h==0?24:31;break;case 24:c=_PyErr_Occurred()!=0?53:25;break;case 25:c=z(e,HEAP[j+12],
0)<0?53:26;break;case 26:c=z(e,HEAP[j+12+4],0)<0?53:27;break;case 27:c=FUNCTION_TABLE[HEAP[e+48]](e,tb,1)<0?53:28;break;case 28:c=j!=0?29:52;break;case 29:m=j;j=0;HEAP[m]-=1;c=HEAP[m]==0?30:52;break;case 30:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);c=52;break;case 31:c=FUNCTION_TABLE[HEAP[e+48]](e,ja,1)<0?53:32;break;case 32:c=z(e,HEAP[j+12],0)<0?53:33;break;case 33:c=z(e,HEAP[j+12+4],0)<0?53:34;break;case 34:c=j!=0?35:37;break;case 35:n=j;j=0;HEAP[n]-=1;c=HEAP[n]==0?36:37;break;case 36:FUNCTION_TABLE[HEAP[HEAP[n+
4]+24]](n);c=37;break;case 37:l=1;var p=h,d=37;c=49;break;case 38:c=(HEAP[HEAP[h+4]+84]&67108864)==0?40:39;break;case 39:c=_PyTuple_Size(h)!=2?40:41;break;case 40:_PyErr_SetString(HEAP[_PyExc_TypeError],Mb);c=53;break;case 41:c=z(e,HEAP[h+12],0)<0?53:42;break;case 42:c=z(e,HEAP[h+12+4],0)<0?53:43;break;case 43:c=h!=0?44:46;break;case 44:o=h;h=0;HEAP[o]-=1;c=HEAP[o]==0?45:46;break;case 45:FUNCTION_TABLE[HEAP[HEAP[o+4]+24]](o);c=46;break;case 46:l=c=l+1;c=c==1E3?50:47;break;case 47:var q=h=_PyIter_Next(f);
q==0?(d=47,c=48):(d=47,c=49);break;case 48:c=_PyErr_Occurred()!=0?53:50;break;case 49:c=(d==47?q:p)!=0?38:50;break;case 50:c=FUNCTION_TABLE[HEAP[e+48]](e,Hb,1)<0?53:51;break;case 51:c=l==1E3?18:52;break;case 52:g=0;c=60;break;case 53:c=j!=0?54:56;break;case 54:HEAP[j]-=1;c=HEAP[j]==0?55:56;break;case 55:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);c=56;break;case 56:c=h!=0?57:59;break;case 57:HEAP[h]-=1;c=HEAP[h]==0?58:59;break;case 58:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);c=59;break;case 59:g=-1;c=60;break;
case 60:return d=g;default:assert(0,"bad label: "+c)}}function x(a,b,c){var d=STACKTOP;STACKTOP+=5;_memset(d,0,5);var e;for(e=-1;;)switch(e){case -1:var f,g,j,k,l,n,p,q,r,s,t,u,B,v,w=d,x;f=a;g=b;j=c;p=n=l=k=0;u=-1;e=j!=0?1:2;break;case 1:k=j;HEAP[k]+=1;e=3;break;case 2:k=_PyObject_GetAttr(g,HEAP[qc]);e=k==0?36:3;break;case 3:l=e=o(g,k);e=e==0?39:4;break;case 4:s=_PyString_Size(l);e=s<0?36:5;break;case 5:t=_PyString_Size(k);e=t<0?36:6;break;case 6:r=l+20;q=k+20;n=_PyImport_ImportModule(r);e=n==0?7:
8;break;case 7:h(HEAP[S],tc,vb,allocate([g,0,0,0,l,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));e=36;break;case 8:p=_PyObject_GetAttrString(n,q);e=p==0?9:10;break;case 9:h(HEAP[S],eb,Tb,allocate([g,0,0,0,l,0,0,0,k,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));e=36;break;case 10:HEAP[p]-=1;var O=HEAP[p]==0;e=p!=g?11:14;break;case 11:e=O?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[p+4]+24]](p);e=13;break;case 13:h(HEAP[S],
oc,Tb,allocate([g,0,0,0,l,0,0,0,k,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));e=36;break;case 14:e=O?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[p+4]+24]](p);e=16;break;case 16:e=HEAP[f+36]>1?17:29;break;case 17:HEAP[HEAP[Fb]+12]=l;HEAP[HEAP[Fb]+12+4]=k;B=_PyDict_GetItem(HEAP[Pb],HEAP[Fb]);e=B==0?29:18;break;case 18:e=(HEAP[HEAP[B+4]+84]&8388608)==0?19:20;break;case 19:h(HEAP[S],Vb,Dc,allocate([g,0,0,0,B,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",
0,0,0],ALLOC_STACK));e=36;break;case 20:v=HEAP[B+8];e=v<=0?21:22;break;case 21:h(HEAP[S],yc,Kc,allocate([g,0,0,0,v,0,0,0],["%struct.PyObject*",0,0,0,"i32",0,0,0],ALLOC_STACK));e=36;break;case 22:e=v<=255?23:24;break;case 23:HEAP[w]=-126;HEAP[w+1]=v&255;x=2;e=27;break;case 24:var H=w;e=v<=65535?25:26;break;case 25:HEAP[H]=-125;HEAP[w+1]=v&255;HEAP[w+2]=v>>8&255;x=3;e=27;break;case 26:HEAP[H]=-124;HEAP[w+1]=v&255;HEAP[w+2]=v>>8&255;HEAP[w+3]=v>>16&255;HEAP[w+4]=v>>24&255;x=5;e=27;break;case 27:e=FUNCTION_TABLE[HEAP[f+
48]](f,w,x)>=0?28:36;break;case 28:u=0;e=36;break;case 29:e=FUNCTION_TABLE[HEAP[f+48]](f,sa,1)<0?36:30;break;case 30:e=FUNCTION_TABLE[HEAP[f+48]](f,r,s)<0?36:31;break;case 31:e=FUNCTION_TABLE[HEAP[f+48]](f,ab,1)<0?36:32;break;case 32:e=FUNCTION_TABLE[HEAP[f+48]](f,q,t)<0?36:33;break;case 33:e=FUNCTION_TABLE[HEAP[f+48]](f,ab,1)<0?36:34;break;case 34:e=m(f,g)<0?36:35;break;case 35:u=0;e=36;break;case 36:e=l!=0?37:39;break;case 37:HEAP[l]-=1;e=HEAP[l]==0?38:39;break;case 38:FUNCTION_TABLE[HEAP[HEAP[l+
4]+24]](l);e=39;break;case 39:e=k!=0?40:42;break;case 40:HEAP[k]-=1;e=HEAP[k]==0?41:42;break;case 41:FUNCTION_TABLE[HEAP[HEAP[k+4]+24]](k);e=42;break;case 42:e=n!=0?43:45;break;case 43:HEAP[n]-=1;e=HEAP[n]==0?44:45;break;case 44:FUNCTION_TABLE[HEAP[HEAP[n+4]+24]](n);e=45;break;case 45:return a=u,STACKTOP=d,a;default:assert(0,"bad label: "+e)}}function y(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k,l;e=a;f=b;g=c;j=0;l=-1;HEAP[f]+=1;d=HEAP[e+24]!=0?2:1;break;case 1:d=_PyTuple_New(1);HEAP[e+
24]=d;d=HEAP[e+24]!=0?2:6;break;case 2:d=HEAP[HEAP[e+24]+12]!=0?3:5;break;case 3:d=HEAP[HEAP[e+24]+12];HEAP[d]-=1;d=HEAP[d]==0?4:5;break;case 4:FUNCTION_TABLE[HEAP[HEAP[HEAP[HEAP[e+24]+12]+4]+24]](HEAP[HEAP[e+24]+12]);d=5;break;case 5:HEAP[HEAP[e+24]+12]=f;d=8;break;case 6:HEAP[f]-=1;d=HEAP[f]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[f+4]+24]](f);d=8;break;case 8:d=HEAP[e+24]!=0?9:13;break;case 9:j=_PyObject_Call(g,HEAP[e+24],0);d=HEAP[HEAP[e+24]]>1?10:13;break;case 10:d=HEAP[e+24];HEAP[d]-=1;
d=HEAP[d]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[HEAP[e+24]+4]+24]](HEAP[e+24]);d=12;break;case 12:HEAP[e+24]=0;d=13;break;case 13:d=j==0?14:15;break;case 14:h=-1;d=33;break;case 15:d=j!=__Py_NoneStruct?16:28;break;case 16:d=HEAP[e+40]==0?17:24;break;case 17:d=(HEAP[HEAP[j+4]+84]&134217728)==0?18:19;break;case 18:_PyErr_SetString(HEAP[S],Bb);d=29;break;case 19:d=FUNCTION_TABLE[HEAP[e+48]](e,cb,1)<0?29:20;break;case 20:k=_PyString_Size(j);d=k<0?29:21;break;case 21:d=FUNCTION_TABLE[HEAP[e+
48]](e,j+20,k)<0?29:22;break;case 22:d=FUNCTION_TABLE[HEAP[e+48]](e,ab,1)<0?29:23;break;case 23:l=1;d=29;break;case 24:d=z(e,j,1)>=0?25:29;break;case 25:d=FUNCTION_TABLE[HEAP[e+48]](e,Nc,1)<0?26:27;break;case 26:l=-1;d=29;break;case 27:l=1;d=29;break;case 28:l=0;d=29;break;case 29:d=j!=0?30:32;break;case 30:HEAP[j]-=1;d=HEAP[j]==0?31:32;break;case 31:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);d=32;break;case 32:h=l;d=33;break;case 33:return a=h;default:assert(0,"bad label: "+d)}}function z(a,b,c){var d,
e=null;for(d=-1;;)switch(d){case -1:var f,j,k,s,B,H,U,F,A,xa;f=a;j=b;k=c;F=U=H=0;A=-1;d=HEAP[__PyThreadState_Current];HEAP[d+12]+=1;d=HEAP[d+12]>HEAP[__Py_CheckRecursionLimit]?1:3;break;case 1:d=__Py_CheckRecursiveCall(Sb)!=0?2:3;break;case 2:s=-1;d=111;break;case 3:d=k==0?4:7;break;case 4:d=HEAP[f+28]!=0?5:7;break;case 5:xa=y(f,j,HEAP[f+28]);d=xa!=0?6:7;break;case 6:A=xa;d=101;break;case 7:d=j==__Py_NoneStruct?8:9;break;case 8:a:{A=f;d=void 0;for(d=-1;;)switch(d){case -1:var C;d=A;d=FUNCTION_TABLE[HEAP[d+
48]](d,O,1)<0?1:2;break;case 1:C=-1;d=3;break;case 2:C=0;d=3;break;case 3:A=C;break a;default:assert(0,"bad label: "+d)}A=void 0}d=101;break;case 9:B=HEAP[j+4];d=HEAP[HEAP[B+12]];d=d==98?10:d==102?16:d==105?12:d==108?14:d==115?21:d==116?18:d==117?24:27;break;case 10:d=j==__Py_ZeroStruct|j==__Py_TrueStruct?11:27;break;case 11:a:{d=f;var N=j;A=STACKTOP;STACKTOP+=1;_memset(A,0,1);for(var K=void 0,K=-1;;)switch(K){case -1:var I,ga,va,D,E=A;I=d;D=HEAP[N+8];K=HEAP[I+36]>1?1:6;break;case 1:K=D!=0?2:3;break;
case 2:va=-120;K=4;break;case 3:va=-119;K=4;break;case 4:HEAP[E]=va;K=FUNCTION_TABLE[HEAP[I+48]](I,E,1)<0?5:8;break;case 5:ga=-1;K=9;break;case 6:K=FUNCTION_TABLE[HEAP[I+48]](I,HEAP[$+D*4],HEAP[Ma+D])<0?7:8;break;case 7:ga=-1;K=9;break;case 8:ga=0;K=9;break;case 9:d=ga;STACKTOP=A;A=d;break a;default:assert(0,"bad label: "+K)}A=void 0}d=101;break;case 12:d=B==_PyInt_Type?13:27;break;case 13:a:{d=f;N=j;A=STACKTOP;STACKTOP+=32;_memset(A,0,32);K=void 0;for(K=-1;;)switch(K){case -1:var Q,G,J=A,Oa,W;Q=
d;Oa=HEAP[N+8];W=0;K=HEAP[Q+40]==0?1:3;break;case 1:HEAP[J]=73;_PyOS_snprintf(J+1,31,pa,allocate([Oa,0,0,0],["i32",0,0,0],ALLOC_STACK));var K=HEAP[Q+48],Y=_strlen(J),K=FUNCTION_TABLE[K](Q,J,Y)<0?2:11;break;case 2:G=-1;K=12;break;case 3:HEAP[J+1]=Oa&255;HEAP[J+2]=Oa>>8&255;HEAP[J+3]=Oa>>16&255;HEAP[J+4]=Oa>>24&255;K=HEAP[J+4]!=0?8:4;break;case 4:K=HEAP[J+3]!=0?8:5;break;case 5:var M=J,K=HEAP[J+2]==0?6:7;break;case 6:HEAP[M]=75;W=2;K=9;break;case 7:HEAP[M]=77;W=3;K=9;break;case 8:HEAP[J]=74;W=5;K=9;
break;case 9:K=FUNCTION_TABLE[HEAP[Q+48]](Q,J,W)<0?10:11;break;case 10:G=-1;K=12;break;case 11:G=0;K=12;break;case 12:d=G;STACKTOP=A;A=d;break a;default:assert(0,"bad label: "+K)}A=void 0}d=101;break;case 14:d=B==_PyLong_Type?15:27;break;case 15:a:{d=f;N=j;A=STACKTOP;STACKTOP+=5;_memset(A,0,5);Y=void 0;K=null;for(Y=-1;;)switch(Y){case -1:var ba,P,gc,nc,L,Da,Z,db,V=A,Sa,R;ba=d;P=N;nc=-1;L=0;var Wa=P,Y=HEAP[ba+36]>1?1:25;break;case 1:R=__PyLong_Sign(Wa);Y=R==0?2:4;break;case 2:HEAP[V]=-118;HEAP[V+1]=
0;Sa=FUNCTION_TABLE[HEAP[ba+48]](ba,V,2);Y=Sa<0?31:3;break;case 3:nc=0;Y=31;break;case 4:Da=__PyLong_NumBits(P);Y=Da==-1?5:6;break;case 5:Y=_PyErr_Occurred()!=0?31:6;break;case 6:Z=(Da>>>3)+1;Y=(Da>>>3)+1<0?7:8;break;case 7:_PyErr_SetString(HEAP[_PyExc_OverflowError],X);Y=31;break;case 8:L=_PyString_FromStringAndSize(0,Z);Y=L==0?34:9;break;case 9:db=L+20;Sa=__PyLong_AsByteArray(P,db,Z,1,1);Y=Sa<0?31:10;break;case 10:Y=R<0?11:16;break;case 11:Y=Z>1?13:12;break;case 12:var na=V,K=12,Y=18;break;case 13:Y=
HEAP[db+(Z-1)]==-1?14:16;break;case 14:Y=HEAP[db+(Z-2)]<0?15:16;break;case 15:var Ea=Z-1;Z=Ea;K=15;Y=17;break;case 16:var fa=Z,K=16,Y=17;break;case 17:var Ia=V;(K==16?fa:Ea)<=255?(K=17,Y=18):(K=17,Y=19);break;case 18:HEAP[K==12?na:Ia]=-118;HEAP[V+1]=Z&255;gc=2;Y=22;break;case 19:HEAP[Ia]=-117;gc=Z;Sa=1;Y=20;break;case 20:HEAP[V+Sa]=gc&255;gc>>=8;Sa=Y=Sa+1;Y=Y<=4?20:21;break;case 21:gc=5;Y=22;break;case 22:Sa=Y=FUNCTION_TABLE[HEAP[ba+48]](ba,V,gc);Y=Y<0?31:23;break;case 23:Sa=FUNCTION_TABLE[HEAP[ba+
48]](ba,db,Z);Y=Sa<0?31:24;break;case 24:nc=0;Y=31;break;case 25:L=_PyObject_Repr(Wa);Y=L==0?34:26;break;case 26:gc=_PyString_Size(L);Y=gc<0?31:27;break;case 27:Y=FUNCTION_TABLE[HEAP[ba+48]](ba,oa,1)<0?31:28;break;case 28:Y=FUNCTION_TABLE[HEAP[ba+48]](ba,L+20,gc)<0?31:29;break;case 29:Y=FUNCTION_TABLE[HEAP[ba+48]](ba,ab,1)<0?31:30;break;case 30:nc=0;Y=31;break;case 31:Y=L!=0?32:34;break;case 32:HEAP[L]-=1;Y=HEAP[L]==0?33:34;break;case 33:FUNCTION_TABLE[HEAP[HEAP[L+4]+24]](L);Y=34;break;case 34:d=
nc;STACKTOP=A;A=d;break a;default:assert(0,"bad label: "+Y)}A=void 0}d=101;break;case 16:d=B==_PyFloat_Type?17:27;break;case 17:a:{d=f;N=j;A=STACKTOP;STACKTOP+=10;_memset(A,0,10);K=void 0;for(K=-1;;)switch(K){case -1:var fb,cc,xb,ia=A,ha,la,Lc=A+9;fb=d;xb=HEAP[N+8];K=HEAP[fb+40]!=0?1:6;break;case 1:HEAP[ia]=71;K=__PyFloat_Pack8(xb,ia+1,0)<0?2:3;break;case 2:cc=-1;K=13;break;case 3:K=FUNCTION_TABLE[HEAP[fb+48]](fb,ia,9)<0?4:5;break;case 4:cc=-1;K=13;break;case 5:cc=0;K=13;break;case 6:ha=-1;la=0;HEAP[Lc]=
70;K=FUNCTION_TABLE[HEAP[fb+48]](fb,Lc,1)<0?12:7;break;case 7:la=_PyOS_double_to_string(xb,103,17,0,0);K=la==0?8:9;break;case 8:_PyErr_NoMemory();K=12;break;case 9:K=HEAP[fb+48];Y=_strlen(la);K=FUNCTION_TABLE[K](fb,la,Y)<0?12:10;break;case 10:K=FUNCTION_TABLE[HEAP[fb+48]](fb,ab,1)<0?12:11;break;case 11:ha=0;K=12;break;case 12:_PyMem_Free(la);cc=ha;K=13;break;case 13:d=cc;STACKTOP=A;A=d;break a;default:assert(0,"bad label: "+K)}A=void 0}d=101;break;case 18:d=B==_PyTuple_Type?19:27;break;case 19:d=
_PyTuple_Size(j)==0?20:27;break;case 20:A=t(f,j);d=101;break;case 21:d=B==_PyString_Type?22:27;break;case 22:d=HEAP[j+8]<=1?23:27;break;case 23:A=r(f,j,0);d=101;break;case 24:d=B==_PyUnicode_Type?25:27;break;case 25:d=HEAP[j+8]<=1?26:27;break;case 26:A=u(f,j,0);d=101;break;case 27:d=HEAP[j]>1?28:32;break;case 28:H=_PyLong_FromVoidPtr(j);d=H==0?101:29;break;case 29:d=_PyDict_GetItem(HEAP[f+20],H)!=0?30:32;break;case 30:d=l(f,H)<0?101:31;break;case 31:A=0;d=101;break;case 32:d=HEAP[HEAP[B+12]];d=d==
98?53:d==99?47:d==100?43:d==102?49:d==105?45:d==108?41:d==115?33:d==116?37:d==117?35:55;break;case 33:d=B==_PyString_Type?34:55;break;case 34:A=r(f,j,1);d=101;break;case 35:d=B==_PyUnicode_Type?36:55;break;case 36:A=u(f,j,1);d=101;break;case 37:d=B==_PyTuple_Type?38:39;break;case 38:A=t(f,j);d=101;break;case 39:d=B==_PyType_Type?40:55;break;case 40:A=x(f,j,0);d=101;break;case 41:d=B==_PyList_Type?42:55;break;case 42:a:{d=f;N=j;A=STACKTOP;STACKTOP+=3;_memset(A,0,3);K=void 0;for(K=-1;;)switch(K){case -1:var Ic,
xc,Pb,ca=A,ya,Ga;Ic=d;xc=N;Pb=-1;K=HEAP[Ic+44]!=0?1:2;break;case 1:K=p(Ic,xc)==0?18:2;break;case 2:var ka=ca,K=HEAP[Ic+40]!=0?3:4;break;case 3:HEAP[ka]=93;ya=1;K=5;break;case 4:HEAP[ka]=40;HEAP[ca+1]=108;ya=2;K=5;break;case 5:K=FUNCTION_TABLE[HEAP[Ic+48]](Ic,ca,ya)<0?18:6;break;case 6:ya=_PyList_Size(xc);K=ya<0?18:7;break;case 7:var gb=Ic,aa=xc,K=ya==0?8:10;break;case 8:K=m(gb,aa)>=0?9:18;break;case 9:Pb=0;K=18;break;case 10:K=n(gb,aa)<0?18:11;break;case 11:Ga=_PyObject_GetIter(xc);K=Ga==0?18:12;
break;case 12:K=HEAP[__PyThreadState_Current];HEAP[K+12]+=1;K=HEAP[K+12]<=HEAP[__Py_CheckRecursionLimit]?15:13;break;case 13:K=__Py_CheckRecursiveCall(Sb)==0?15:14;break;case 14:K=16;break;case 15:Pb=v(Ic,Ga);HEAP[HEAP[__PyThreadState_Current]+12]-=1;K=16;break;case 16:HEAP[Ga]-=1;K=HEAP[Ga]==0?17:18;break;case 17:FUNCTION_TABLE[HEAP[HEAP[Ga+4]+24]](Ga);K=18;break;case 18:K=HEAP[Ic+44]!=0?19:21;break;case 19:K=q(Ic,xc)==0?20:21;break;case 20:Pb=-1;K=21;break;case 21:d=Pb;STACKTOP=A;A=d;break a;default:assert(0,
"bad label: "+K)}A=void 0}d=101;break;case 43:d=B==_PyDict_Type?44:55;break;case 44:a:{d=f;N=j;A=STACKTOP;STACKTOP+=3;_memset(A,0,3);K=void 0;for(K=-1;;)switch(K){case -1:var sb,Ja,ma,kd=A,$a,Ba;sb=d;Ja=N;ma=-1;K=HEAP[sb+44]!=0?1:2;break;case 1:K=p(sb,Ja)==0?24:2;break;case 2:var Ua=kd,K=HEAP[sb+40]!=0?3:4;break;case 3:HEAP[Ua]=125;$a=1;K=5;break;case 4:HEAP[Ua]=40;HEAP[kd+1]=100;$a=2;K=5;break;case 5:K=FUNCTION_TABLE[HEAP[sb+48]](sb,kd,$a)<0?24:6;break;case 6:$a=_PyDict_Size(Ja);K=$a<0?24:7;break;
case 7:var rb=sb,sa=Ja,K=$a==0?8:10;break;case 8:K=m(rb,sa)>=0?9:24;break;case 9:ma=0;K=24;break;case 10:K=n(rb,sa)<0?24:11;break;case 11:K=HEAP[Ja+4]!=_PyDict_Type?17:12;break;case 12:K=HEAP[sb+36]<=0?17:13;break;case 13:K=HEAP[__PyThreadState_Current];HEAP[K+12]+=1;K=HEAP[K+12]<=HEAP[__Py_CheckRecursionLimit]?16:14;break;case 14:K=__Py_CheckRecursiveCall(Sb)==0?16:15;break;case 15:K=24;break;case 16:b:{K=sb;Y=Ja;ma=STACKTOP;STACKTOP+=12;_memset(ma,0,12);for(var ua=void 0,ua=-1;;)switch(ua){case -1:var ra,
Na,ta,vb=ma,Fa=ma+4,Ad,wa,La=ma+8;ra=K;Na=Y;HEAP[vb]=0;HEAP[Fa]=0;HEAP[La]=0;ua=Na==0?1:2;break;case 1:throw ___assert_fail(da,Cb,1898,Jb),"Reached an unreachable!";case 2:ua=HEAP[ra+36]<=0?3:4;break;case 3:throw ___assert_fail(jb,Cb,1899,Jb),"Reached an unreachable!";case 4:wa=_PyDict_Size(Na);ua=wa==1?5:12;break;case 5:_PyDict_Next(Na,La,vb,Fa);ua=z(ra,HEAP[vb],0)<0?6:7;break;case 6:ta=-1;ua=26;break;case 7:ua=z(ra,HEAP[Fa],0)<0?8:9;break;case 8:ta=-1;ua=26;break;case 9:ua=FUNCTION_TABLE[HEAP[ra+
48]](ra,bc,1)<0?10:11;break;case 10:ta=-1;ua=26;break;case 11:ta=0;ua=26;break;case 12:Ad=0;ua=FUNCTION_TABLE[HEAP[ra+48]](ra,ja,1)<0?13:19;break;case 13:ta=-1;ua=26;break;case 14:ua=z(ra,HEAP[vb],0)<0?15:16;break;case 15:ta=-1;ua=26;break;case 16:ua=z(ra,HEAP[Fa],0)<0?17:18;break;case 17:ta=-1;ua=26;break;case 18:Ad+=1;ua=Ad==1E3?20:19;break;case 19:ua=_PyDict_Next(Na,La,vb,Fa)!=0?14:20;break;case 20:ua=FUNCTION_TABLE[HEAP[ra+48]](ra,Wb,1)<0?21:22;break;case 21:ta=-1;ua=26;break;case 22:ua=_PyDict_Size(Na)!=
wa?23:24;break;case 23:_PyErr_Format(HEAP[_PyExc_RuntimeError],lb,allocate(1,"i32",ALLOC_STACK));ta=-1;ua=26;break;case 24:ua=Ad==1E3?12:25;break;case 25:ta=0;ua=26;break;case 26:K=ta;STACKTOP=ma;ma=K;break b;default:assert(0,"bad label: "+ua)}ma=void 0}HEAP[HEAP[__PyThreadState_Current]+12]-=1;K=24;break;case 17:Ba=K=_PyObject_CallMethod(Ja,kb,Lb,allocate(1,"i32",ALLOC_STACK));K=K==0?24:18;break;case 18:K=HEAP[__PyThreadState_Current];HEAP[K+12]+=1;K=HEAP[K+12]<=HEAP[__Py_CheckRecursionLimit]?21:
19;break;case 19:K=__Py_CheckRecursiveCall(Sb)==0?21:20;break;case 20:K=22;break;case 21:ma=w(sb,Ba);HEAP[HEAP[__PyThreadState_Current]+12]-=1;K=22;break;case 22:HEAP[Ba]-=1;K=HEAP[Ba]==0?23:24;break;case 23:FUNCTION_TABLE[HEAP[HEAP[Ba+4]+24]](Ba);K=24;break;case 24:K=HEAP[sb+44]!=0?25:27;break;case 25:K=q(sb,Ja)==0?26:27;break;case 26:ma=-1;K=27;break;case 27:d=ma;STACKTOP=A;A=d;break a;default:assert(0,"bad label: "+K)}A=void 0}d=101;break;case 45:d=B==_PyInstance_Type?46:55;break;case 46:a:{A=
f;d=j;N=void 0;for(N=-1;;)switch(N){case -1:var Ra,qa,Gb,Ka,Pa,Ha,Va,Fb,Kb,Ya,Bd,$c,Za,Xa,Ta,Nb,Sd;Ra=A;qa=d;Kb=Fb=Va=Ha=Pa=Ka=Gb=0;Xa=-1;N=HEAP[Ra+44]!=0?1:2;break;case 1:N=p(Ra,qa)==0?44:2;break;case 2:N=FUNCTION_TABLE[HEAP[Ra+48]](Ra,ja,1)<0?44:3;break;case 3:Gb=_PyObject_GetAttr(qa,HEAP[Eb]);N=Gb==0?44:4;break;case 4:N=HEAP[Ra+40]!=0?5:6;break;case 5:N=z(Ra,Gb,0)<0?44:6;break;case 6:Va=N=_PyObject_GetAttr(qa,HEAP[Yb]);N=N!=0?7:18;break;case 7:Ta=0;Kb=_PyObject_Call(Va,HEAP[mb],0);N=Kb==0?44:8;
break;case 8:Sd=_PyObject_Size(Kb);N=Sd<0?44:9;break;case 9:Nb=0;N=17;break;case 10:Ta=_PySequence_GetItem(Kb,Nb);N=Ta==0?44:11;break;case 11:N=z(Ra,Ta,0)<0;HEAP[Ta]-=1;var tc=HEAP[Ta]==0,N=N?12:14;break;case 12:N=tc?13:44;break;case 13:FUNCTION_TABLE[HEAP[HEAP[Ta+4]+24]](Ta);N=44;break;case 14:N=tc?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[Ta+4]+24]](Ta);N=16;break;case 16:Nb+=1;N=17;break;case 17:N=Nb<Sd?10:20;break;case 18:N=_PyErr_ExceptionMatches(HEAP[_PyExc_AttributeError])!=0?19:44;break;
case 19:_PyErr_Clear();N=20;break;case 20:N=HEAP[Ra+40]==0?21:31;break;case 21:Pa=HEAP[Gb+16];N=Pa==0?22:23;break;case 22:_PyErr_SetString(HEAP[S],yb);N=44;break;case 23:Ka=o(Gb,Pa);N=Ka==0?44:24;break;case 24:$c=_PyString_Size(Ka);N=$c<0?44:25;break;case 25:Za=_PyString_Size(Pa);N=Za<0?44:26;break;case 26:Ya=Ka+20;Bd=Pa+20;N=FUNCTION_TABLE[HEAP[Ra+48]](Ra,fc,1)<0?44:27;break;case 27:N=FUNCTION_TABLE[HEAP[Ra+48]](Ra,Ya,$c)<0?44:28;break;case 28:N=FUNCTION_TABLE[HEAP[Ra+48]](Ra,ab,1)<0?44:29;break;
case 29:N=FUNCTION_TABLE[HEAP[Ra+48]](Ra,Bd,Za)<0?44:30;break;case 30:N=FUNCTION_TABLE[HEAP[Ra+48]](Ra,ab,1)<0?44:32;break;case 31:N=FUNCTION_TABLE[HEAP[Ra+48]](Ra,zb,1)<0?44:32;break;case 32:Fb=N=_PyObject_GetAttr(qa,HEAP[jc]);N=N!=0?33:34;break;case 33:Ha=_PyObject_Call(Fb,HEAP[mb],0);N=Ha==0?44:38;break;case 34:N=_PyErr_ExceptionMatches(HEAP[_PyExc_AttributeError])!=0?35:44;break;case 35:_PyErr_Clear();Ha=_PyObject_GetAttr(qa,HEAP[mc]);N=Ha==0?36:38;break;case 36:N=_PyErr_ExceptionMatches(HEAP[_PyExc_AttributeError])!=
0?37:44;break;case 37:_PyErr_Clear();Xa=0;N=44;break;case 38:var qd=Ra,Ca=qa,N=(HEAP[HEAP[Ha+4]+84]&536870912)==0?39:40;break;case 39:N=n(qd,Ca)<0?44:41;break;case 40:N=m(qd,Ca)<0?44:41;break;case 41:N=z(Ra,Ha,0)<0?44:42;break;case 42:N=FUNCTION_TABLE[HEAP[Ra+48]](Ra,Xb,1)<0?44:43;break;case 43:Xa=0;N=44;break;case 44:N=HEAP[Ra+44]!=0?45:47;break;case 45:N=q(Ra,qa)==0?46:47;break;case 46:Xa=-1;N=47;break;case 47:N=Ka!=0?48:50;break;case 48:HEAP[Ka]-=1;N=HEAP[Ka]==0?49:50;break;case 49:FUNCTION_TABLE[HEAP[HEAP[Ka+
4]+24]](Ka);N=50;break;case 50:N=Gb!=0?51:53;break;case 51:HEAP[Gb]-=1;N=HEAP[Gb]==0?52:53;break;case 52:FUNCTION_TABLE[HEAP[HEAP[Gb+4]+24]](Gb);N=53;break;case 53:N=Ha!=0?54:56;break;case 54:HEAP[Ha]-=1;N=HEAP[Ha]==0?55:56;break;case 55:FUNCTION_TABLE[HEAP[HEAP[Ha+4]+24]](Ha);N=56;break;case 56:N=Va!=0?57:59;break;case 57:HEAP[Va]-=1;N=HEAP[Va]==0?58:59;break;case 58:FUNCTION_TABLE[HEAP[HEAP[Va+4]+24]](Va);N=59;break;case 59:N=Fb!=0?60:62;break;case 60:HEAP[Fb]-=1;N=HEAP[Fb]==0?61:62;break;case 61:FUNCTION_TABLE[HEAP[HEAP[Fb+
4]+24]](Fb);N=62;break;case 62:N=Kb!=0?63:65;break;case 63:HEAP[Kb]-=1;N=HEAP[Kb]==0?64:65;break;case 64:FUNCTION_TABLE[HEAP[HEAP[Kb+4]+24]](Kb);N=65;break;case 65:A=Xa;break a;default:assert(0,"bad label: "+N)}A=void 0}d=101;break;case 47:d=B==_PyClass_Type?48:55;break;case 48:A=x(f,j,0);d=101;break;case 49:d=B==_PyFunction_Type?50:55;break;case 50:A=x(f,j,0);d=A!=0?51:101;break;case 51:d=_PyErr_ExceptionMatches(HEAP[zc])!=0?52:101;break;case 52:_PyErr_Clear();d=55;break;case 53:d=B==_PyCFunction_Type?
54:55;break;case 54:A=x(f,j,0);d=101;break;case 55:d=k==0?56:59;break;case 56:d=HEAP[f+32]!=0?57:59;break;case 57:xa=y(f,j,HEAP[f+32]);d=xa!=0?58:59;break;case 58:A=xa;d=101;break;case 59:d=_PyType_IsSubtype(B,_PyType_Type)!=0?60:61;break;case 60:A=x(f,j,0);d=101;break;case 61:U=_PyDict_GetItem(HEAP[Pc],B);d=U!=0?62:75;break;case 62:HEAP[U]+=1;HEAP[j]+=1;d=HEAP[f+24]!=0?64:63;break;case 63:d=_PyTuple_New(1);HEAP[f+24]=d;d=HEAP[f+24]!=0?64:68;break;case 64:d=HEAP[HEAP[f+24]+12]!=0?65:67;break;case 65:d=
HEAP[HEAP[f+24]+12];HEAP[d]-=1;d=HEAP[d]==0?66:67;break;case 66:FUNCTION_TABLE[HEAP[HEAP[HEAP[HEAP[f+24]+12]+4]+24]](HEAP[HEAP[f+24]+12]);d=67;break;case 67:HEAP[HEAP[f+24]+12]=j;d=70;break;case 68:HEAP[j]-=1;d=HEAP[j]==0?69:70;break;case 69:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);d=70;break;case 70:d=HEAP[f+24]!=0?71:94;break;case 71:F=_PyObject_Call(U,HEAP[f+24],0);d=HEAP[HEAP[f+24]]>1?72:94;break;case 72:d=HEAP[f+24];HEAP[d]-=1;d=HEAP[d]==0?73:74;break;case 73:FUNCTION_TABLE[HEAP[HEAP[HEAP[f+24]+
4]+24]](HEAP[f+24]);d=74;break;case 74:HEAP[f+24]=0;d=94;break;case 75:U=_PyObject_GetAttr(j,HEAP[Ec]);d=U!=0?76:90;break;case 76:F=_PyInt_FromLong(HEAP[f+36]);d=F!=0?77:101;break;case 77:d=HEAP[f+24]!=0?79:78;break;case 78:d=_PyTuple_New(1);HEAP[f+24]=d;d=HEAP[f+24]!=0?79:83;break;case 79:d=HEAP[HEAP[f+24]+12]!=0?80:82;break;case 80:d=HEAP[HEAP[f+24]+12];HEAP[d]-=1;d=HEAP[d]==0?81:82;break;case 81:FUNCTION_TABLE[HEAP[HEAP[HEAP[HEAP[f+24]+12]+4]+24]](HEAP[HEAP[f+24]+12]);d=82;break;case 82:HEAP[HEAP[f+
24]+12]=F;d=85;break;case 83:HEAP[F]-=1;d=HEAP[F]==0?84:85;break;case 84:FUNCTION_TABLE[HEAP[HEAP[F+4]+24]](F);d=85;break;case 85:F=0;d=HEAP[f+24]!=0?86:101;break;case 86:F=_PyObject_Call(U,HEAP[f+24],0);d=HEAP[HEAP[f+24]]>1?87:94;break;case 87:d=HEAP[f+24];HEAP[d]-=1;d=HEAP[d]==0?88:89;break;case 88:FUNCTION_TABLE[HEAP[HEAP[HEAP[f+24]+4]+24]](HEAP[f+24]);d=89;break;case 89:HEAP[f+24]=0;d=94;break;case 90:d=_PyErr_ExceptionMatches(HEAP[_PyExc_AttributeError])!=0?91:101;break;case 91:_PyErr_Clear();
U=_PyObject_GetAttr(j,HEAP[zd]);d=U!=0?92:93;break;case 92:var bb=_PyObject_Call(U,HEAP[mb],0);F=bb;e=92;d=95;break;case 93:_PyErr_SetObject(HEAP[Uc],j);d=101;break;case 94:var Aa=F,e=94;d=95;break;case 95:d=(e==94?Aa:bb)==0?101:96;break;case 96:d=(HEAP[HEAP[F+4]+84]&134217728)!=0?97:98;break;case 97:A=x(f,j,F);d=101;break;case 98:d=(HEAP[HEAP[F+4]+84]&67108864)==0?99:100;break;case 99:h(HEAP[S],ec,$b,allocate([U,0,0,0],["%struct.PyObject*",0,0,0],ALLOC_STACK));d=101;break;case 100:a:{d=f;N=F;K=U;
Y=j;A=STACKTOP;STACKTOP+=20;_memset(A,0,20);for(var nb=void 0,ua=null,nb=-1;;)switch(nb){case -1:var eb,yc,za,cb,hb,Qa,tb=A,ib=A+4,Ab=A+8,Vb=A+12,Bb=A+16,pb,jd,Mb,Tb,Kd,Hb,ob;eb=d;yc=N;za=K;cb=Y;HEAP[Ab]=0;HEAP[Vb]=__Py_NoneStruct;HEAP[Bb]=__Py_NoneStruct;pb=HEAP[eb+36]>1;nb=_PyTuple_Size(yc);nb=nb<=1|nb>5?1:2;break;case 1:h(HEAP[S],ic,$b,allocate([za,0,0,0],["%struct.PyObject*",0,0,0],ALLOC_STACK));Qa=-1;nb=81;break;case 2:nb=_PyArg_UnpackTuple(yc,Qb,2,5,allocate([tb,0,0,0,ib,0,0,0,Ab,0,0,0,Vb,0,
0,0,Bb,0,0,0],["%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0],ALLOC_STACK))==0?3:4;break;case 3:Qa=-1;nb=81;break;case 4:nb=(HEAP[HEAP[HEAP[ib]+4]+84]&67108864)==0?5:6;break;case 5:h(HEAP[S],uc,$b,allocate([za,0,0,0],["%struct.PyObject*",0,0,0],ALLOC_STACK));Qa=-1;nb=81;break;case 6:nb=HEAP[Ab]==__Py_NoneStruct?7:8;break;case 7:HEAP[Ab]=0;nb=8;break;case 8:nb=HEAP[Vb]==__Py_NoneStruct?9:10;break;case 9:HEAP[Vb]=
0;nb=14;break;case 10:nb=(HEAP[HEAP[HEAP[Vb]+4]+84]&128)==0?13:11;break;case 11:nb=HEAP[HEAP[HEAP[Vb]+4]+112]==0?13:12;break;case 12:nb=HEAP[HEAP[HEAP[Vb]+4]+112]==g+2?13:14;break;case 13:h(HEAP[S],Gc,pc,allocate([za,0,0,0,HEAP[HEAP[HEAP[Vb]+4]+12],0,0,0],["%struct.PyObject*",0,0,0,"i8*",0,0,0],ALLOC_STACK));Qa=-1;nb=81;break;case 14:nb=HEAP[Bb]==__Py_NoneStruct?15:16;break;case 15:HEAP[Bb]=0;nb=20;break;case 16:nb=(HEAP[HEAP[HEAP[Bb]+4]+84]&128)==0?19:17;break;case 17:nb=HEAP[HEAP[HEAP[Bb]+4]+112]==
0?19:18;break;case 18:nb=HEAP[HEAP[HEAP[Bb]+4]+112]==g+2?19:20;break;case 19:h(HEAP[S],Zb,pc,allocate([za,0,0,0,HEAP[HEAP[HEAP[Bb]+4]+12],0,0,0],["%struct.PyObject*",0,0,0,"i8*",0,0,0],ALLOC_STACK));Qa=-1;nb=81;break;case 20:nb=pb!=0?21:59;break;case 21:jd=_PyObject_GetAttr(HEAP[tb],HEAP[qc]);nb=jd==0?22:25;break;case 22:nb=_PyErr_ExceptionMatches(HEAP[_PyExc_AttributeError])!=0?23:24;break;case 23:_PyErr_Clear();pb=0;nb=59;break;case 24:Qa=-1;nb=81;break;case 25:nb=(HEAP[HEAP[jd+4]+84]&134217728)==
0?28:26;break;case 26:nb=_strcmp(jd+20,wc)!=0?28:27;break;case 27:hb=1;nb=29;break;case 28:hb=0;nb=29;break;case 29:pb=hb;HEAP[jd]-=1;nb=HEAP[jd]==0?30:31;break;case 30:FUNCTION_TABLE[HEAP[HEAP[jd+4]+24]](jd);nb=31;break;case 31:nb=pb!=0?32:59;break;case 32:Kd=_PyTuple_Size(HEAP[ib]);nb=Kd<=0?33:34;break;case 33:_PyErr_SetString(HEAP[S],sc);Qa=-1;nb=81;break;case 34:Mb=HEAP[HEAP[ib]+12];nb=_PyObject_HasAttrString(Mb,Oc)==0?35:36;break;case 35:_PyErr_SetString(HEAP[S],Zc);Qa=-1;nb=81;break;case 36:nb=
cb!=0?37:47;break;case 37:var Ye=ob=_PyObject_GetAttr(cb,HEAP[Eb]),nb=Ye==0?39:38;break;case 38:Hb=Ye!=Mb;nb=42;break;case 39:nb=_PyErr_ExceptionMatches(HEAP[_PyExc_AttributeError])!=0?41:40;break;case 40:Qa=-1;nb=81;break;case 41:_PyErr_Clear();var oc=ob!=Mb;Hb=oc;ob!=0?(ua=41,nb=42):(ua=41,nb=45);break;case 42:HEAP[ob]-=1;nb=HEAP[ob]==0?43:44;break;case 43:FUNCTION_TABLE[HEAP[HEAP[ob+4]+24]](ob);nb=44;break;case 44:var Dc=Hb,ua=44,nb=45;break;case 45:nb=(ua==44?Dc:oc)!=0?46:47;break;case 46:_PyErr_SetString(HEAP[S],
yd);Qa=-1;nb=81;break;case 47:nb=z(eb,Mb,0)<0?48:49;break;case 48:Qa=-1;nb=81;break;case 49:Tb=_PyTuple_New(Kd-1);nb=Tb==0?50:51;break;case 50:Qa=-1;nb=81;break;case 51:Hb=1;nb=Hb<Kd?52:53;break;case 52:nb=HEAP[HEAP[ib]+12+Hb*4];HEAP[nb]+=1;HEAP[Tb+12+(Hb-1)*4]=nb;Hb+=1;nb=Hb<Kd?52:53;break;case 53:Hb=z(eb,Tb,0);HEAP[Tb]-=1;nb=HEAP[Tb]==0?54:55;break;case 54:FUNCTION_TABLE[HEAP[HEAP[Tb+4]+24]](Tb);nb=55;break;case 55:nb=Hb<0?56:57;break;case 56:Qa=-1;nb=81;break;case 57:nb=FUNCTION_TABLE[HEAP[eb+
48]](eb,Tc,1)<0?58:63;break;case 58:Qa=-1;nb=81;break;case 59:nb=z(eb,HEAP[tb],0)<0?62:60;break;case 60:nb=z(eb,HEAP[ib],0)<0?62:61;break;case 61:nb=FUNCTION_TABLE[HEAP[eb+48]](eb,sd,1)<0?62:63;break;case 62:Qa=-1;nb=81;break;case 63:nb=cb!=0?64:70;break;case 64:nb=HEAP[Ab]==0?68:65;break;case 65:nb=(HEAP[HEAP[HEAP[Ab]+4]+84]&536870912)!=0?68:66;break;case 66:nb=n(eb,cb)<0?67:70;break;case 67:Qa=-1;nb=81;break;case 68:nb=m(eb,cb)<0?69:70;break;case 69:Qa=-1;nb=81;break;case 70:nb=HEAP[Vb]!=0?71:73;
break;case 71:nb=v(eb,HEAP[Vb])<0?72:73;break;case 72:Qa=-1;nb=81;break;case 73:nb=HEAP[Bb]!=0?74:76;break;case 74:nb=w(eb,HEAP[Bb])<0?75:76;break;case 75:Qa=-1;nb=81;break;case 76:nb=HEAP[Ab]!=0?77:80;break;case 77:nb=z(eb,HEAP[Ab],0)<0?79:78;break;case 78:nb=FUNCTION_TABLE[HEAP[eb+48]](eb,nd,1)<0?79:80;break;case 79:Qa=-1;nb=81;break;case 80:Qa=0;nb=81;break;case 81:d=Qa;STACKTOP=A;A=d;break a;default:assert(0,"bad label: "+nb)}A=void 0}d=101;break;case 101:HEAP[HEAP[__PyThreadState_Current]+12]-=
1;d=H!=0?102:104;break;case 102:HEAP[H]-=1;d=HEAP[H]==0?103:104;break;case 103:FUNCTION_TABLE[HEAP[HEAP[H+4]+24]](H);d=104;break;case 104:d=U!=0?105:107;break;case 105:HEAP[U]-=1;d=HEAP[U]==0?106:107;break;case 106:FUNCTION_TABLE[HEAP[HEAP[U+4]+24]](U);d=107;break;case 107:d=F!=0?108:110;break;case 108:HEAP[F]-=1;d=HEAP[F]==0?109:110;break;case 109:FUNCTION_TABLE[HEAP[HEAP[F+4]+24]](F);d=110;break;case 110:s=A;d=111;break;case 111:return a=s;default:assert(0,"bad label: "+d)}}function C(a,b){var c=
STACKTOP;STACKTOP+=2;_memset(c,0,2);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h=c;e=a;f=b;d=HEAP[e+36]>1?1:6;break;case 1:HEAP[h]=-128;d=HEAP[e+36]<0?3:2;break;case 2:d=HEAP[e+36]>255?3:4;break;case 3:throw ___assert_fail(xa,Cb,2788,nb),"Reached an unreachable!";case 4:HEAP[h+1]=HEAP[e+36]&255;d=FUNCTION_TABLE[HEAP[e+48]](e,h,2)<0?5:6;break;case 5:g=-1;d=13;break;case 6:d=z(e,f,0)<0?7:8;break;case 7:g=-1;d=13;break;case 8:d=FUNCTION_TABLE[HEAP[e+48]](e,gc,1)<0?9:10;break;case 9:g=-1;d=13;break;
case 10:d=FUNCTION_TABLE[HEAP[e+48]](e,0,0)<0?11:12;break;case 11:g=-1;d=13;break;case 12:g=0;d=13;break;case 13:return d=g,STACKTOP=c,d;default:assert(0,"bad label: "+d)}}function A(b,c){var d=STACKTOP;STACKTOP+=4;_memset(d,0,4);var e;for(e=-1;;)switch(e){case -1:var f,g,h,k,l,m,n,o,p,q=d,r,s,t,u,B,v,w,x;f=b;g=c;HEAP[q]=1;e=g!=0?1:3;break;case 1:e=_PyArg_ParseTuple(g,Lc,allocate([q,0,0,0],["i32*",0,0,0],ALLOC_STACK))==0?2:3;break;case 2:l=0;e=52;break;case 3:e=HEAP[HEAP[f+16]+4]!=qa?4:5;break;case 4:_PyErr_SetString(HEAP[S],
xc);l=0;e=52;break;case 5:e=j(f,0,0)<0?6:7;break;case 6:l=0;e=52;break;case 7:x=HEAP[f+16];m=HEAP[x+8];r=_PyDict_Size(HEAP[f+20]);e=r<0?8:9;break;case 8:l=0;e=52;break;case 9:r+=1;w=_malloc(r);e=w==0?10:11;break;case 10:l=_PyErr_NoMemory();e=52;break;case 11:_llvm_memset_p0i8_i32(w,0,r,1,0);o=0;n=m;e=32;break;case 12:var O=t=HEAP[HEAP[x+16]+4*n];e=(HEAP[HEAP[t+4]+84]&134217728)!=0?13:14;break;case 13:o+=HEAP[O+8];e=32;break;case 14:var H=t;e=(HEAP[HEAP[O+4]+84]&8388608)!=0?15:22;break;case 15:s=HEAP[H+
8];e=s>=r|s==0?16:17;break;case 16:_PyErr_SetString(HEAP[S],cc);e=51;break;case 17:e=HEAP[w+s]!=0?18:32;break;case 18:e=s<=255?19:20;break;case 19:k=2;e=21;break;case 20:k=5;e=21;break;case 21:o+=k;e=32;break;case 22:e=(HEAP[HEAP[H+4]+84]&67108864)==0?25:23;break;case 23:e=HEAP[t+8]!=2?25:24;break;case 24:t=HEAP[t+12];e=(HEAP[HEAP[t+4]+84]&8388608)==0?25:26;break;case 25:_PyErr_SetString(HEAP[S],Ad);e=51;break;case 26:s=HEAP[t+8];e=s>=r|s==0?27:28;break;case 27:_PyErr_SetString(HEAP[S],cc);l=0;e=
52;break;case 28:HEAP[w+s]=1;e=s<=255?29:30;break;case 29:h=2;e=31;break;case 30:h=5;e=31;break;case 31:o+=h;e=32;break;case 32:n=e=n-1;e=e>=0?12:33;break;case 33:u=_PyString_FromStringAndSize(0,o);e=u==0?51:34;break;case 34:B=u+20;n=0;e=n<m?35:48;break;case 35:var y=t=HEAP[HEAP[x+16]+4*n];e=(HEAP[HEAP[t+4]+84]&134217728)!=0?36:39;break;case 36:p=HEAP[y+8];e=p!=0?37:47;break;case 37:v=t+20;p=e=p-1;e=e>=0?38:47;break;case 38:HEAP[B]=HEAP[v];B+=1;v+=1;p=e=p-1;e=e>=0?38:47;break;case 39:var U=t;e=(HEAP[HEAP[y+
4]+84]&67108864)!=0?40:43;break;case 40:s=HEAP[HEAP[U+12]+8];var F=B;e=s<=255?41:42;break;case 41:HEAP[F]=104;B+=1;HEAP[B]=s&255;B+=1;e=47;break;case 42:HEAP[F]=106;B+=1;HEAP[B]=s&255;B+=1;HEAP[B]=s>>8&255;B+=1;HEAP[B]=s>>16&255;B+=1;HEAP[B]=s>>24&255;B+=1;e=47;break;case 43:s=HEAP[U+8];e=HEAP[w+s]!=0?44:47;break;case 44:var A=B;e=s<=255?45:46;break;case 45:HEAP[A]=113;B+=1;HEAP[B]=s&255;B+=1;e=47;break;case 46:HEAP[A]=114;B+=1;HEAP[B]=s&255;B+=1;HEAP[B]=s>>8&255;B+=1;HEAP[B]=s>>16&255;B+=1;HEAP[B]=
s>>24&255;B+=1;e=47;break;case 47:n+=1;e=n<m?35:48;break;case 48:e=HEAP[q]!=0?49:50;break;case 49:_PyDict_Clear(HEAP[f+20]);a(x,0);e=50;break;case 50:_free(w);l=u;e=52;break;case 51:_free(w);l=0;e=52;break;case 52:return f=l,STACKTOP=d,f;default:assert(0,"bad label: "+e)}}function G(a,b){var c;for(c=-1;;)switch(c){case -1:var d,f,h,j,k;d=a;var l=f=b;c=l<0?1:2;break;case 1:f=2;c=4;break;case 2:c=l>2?3:4;break;case 3:_PyErr_Format(HEAP[_PyExc_ValueError],Ld,allocate([f,0,0,0,2,0,0,0],["i32",0,0,0,"i32",
0,0,0],ALLOC_STACK));h=0;c=34;break;case 4:j=c=__PyObject_GC_New(Qc);c=c==0?5:6;break;case 5:h=0;c=34;break;case 6:HEAP[j+36]=f;HEAP[j+40]=f>0;HEAP[j+8]=0;HEAP[j+12]=0;HEAP[j+20]=0;HEAP[j+24]=0;HEAP[j+28]=0;HEAP[j+32]=0;HEAP[j+52]=0;HEAP[j+44]=0;HEAP[j+64]=0;HEAP[j+68]=0;HEAP[j+56]=0;HEAP[j+60]=0;HEAP[j+16]=0;c=d!=0?7:8;break;case 7:HEAP[d]+=1;c=9;break;case 8:d=e();c=d==0?31:9;break;case 9:HEAP[j+16]=d;c=_PyDict_New();HEAP[j+20]=c;c=HEAP[j+20]==0?31:10;break;case 10:c=HEAP[d+4]==_PyFile_Type?12:
11;break;case 11:c=_PyType_IsSubtype(HEAP[d+4],_PyFile_Type)!=0?12:15;break;case 12:c=_PyFile_AsFile(d);HEAP[j+8]=c;c=HEAP[j+8]==0?13:14;break;case 13:_PyErr_SetString(HEAP[_PyExc_ValueError],oe);c=31;break;case 14:HEAP[j+48]=g+4;c=24;break;case 15:c=HEAP[d+4]==HEAP[HEAP[Qa]+28]?16:17;break;case 16:HEAP[j+48]=g+6;c=24;break;case 17:var m=j+48;c=d==__Py_NoneStruct?18:19;break;case 18:HEAP[m]=g+8;c=24;break;case 19:HEAP[m]=g+10;c=HEAP[d+4]!=qa?20:22;break;case 20:c=_PyObject_GetAttr(d,HEAP[Yd]);HEAP[j+
12]=c;c=HEAP[j+12]==0?21:22;break;case 21:_PyErr_Clear();_PyErr_SetString(HEAP[_PyExc_TypeError],Pd);c=31;break;case 22:c=_PyMem_Malloc(256);HEAP[j+52]=c;c=HEAP[j+52]==0?23:24;break;case 23:_PyErr_NoMemory();c=31;break;case 24:c=_PyEval_GetRestricted()!=0?25:29;break;case 25:k=_PyImport_ImportModule(vc);c=k==0?31:26;break;case 26:c=_PyObject_GetAttr(k,HEAP[Md]);HEAP[j+60]=c;HEAP[k]-=1;c=HEAP[k]==0?27:28;break;case 27:FUNCTION_TABLE[HEAP[HEAP[k+4]+24]](k);c=28;break;case 28:c=HEAP[j+60]==0?31:30;break;
case 29:HEAP[j+60]=HEAP[Pc];HEAP[HEAP[Pc]]+=1;c=30;break;case 30:_PyObject_GC_Track(j);h=j;c=34;break;case 31:HEAP[j]-=1;c=HEAP[j]==0?32:33;break;case 32:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);c=33;break;case 33:h=0;c=34;break;case 34:return d=h;default:assert(0,"bad label: "+c)}}function E(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k;e=a;f=b;g=c;j=0;d=g!=0?1:4;break;case 1:d=g==__Py_NoneStruct?2:3;break;case 2:_PyErr_SetString(HEAP[P],je);h=0;d=13;break;case 3:h=_PyObject_CallFunctionObjArgs(g,
allocate([e,0,0,0,f,0,0,0,0,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"i8*",0,0,0],ALLOC_STACK));d=13;break;case 4:k=_PySys_GetObject(ib);d=k==0?5:6;break;case 5:h=0;d=13;break;case 6:k=_PyDict_GetItem(k,e);d=k==0?7:11;break;case 7:k=_PyImport_Import(e);d=k==0?8:9;break;case 8:h=0;d=13;break;case 9:j=_PyObject_GetAttr(k,f);HEAP[k]-=1;d=HEAP[k]==0?10:12;break;case 10:FUNCTION_TABLE[HEAP[HEAP[k+4]+24]](k);d=12;break;case 11:j=_PyObject_GetAttr(k,f);d=12;break;case 12:h=j;d=13;break;
case 13:return a=h;default:assert(0,"bad label: "+d)}}function D(a){var b;for(b=-1;;)switch(b){case -1:var c,d;c=a;b=HEAP[c+52]<=0?1:2;break;case 1:_PyErr_SetString(HEAP[P],re);d=-1;b=3;break;case 2:b=HEAP[c+48];HEAP[c+52]-=1;d=HEAP[b+4*HEAP[c+52]];b=3;break;case 3:return a=d;default:assert(0,"bad label: "+b)}}function R(a){var b;for(b=-1;;)switch(b){case -1:var d,e;d=a;b=HEAP[HEAP[d+32]+8]==HEAP[HEAP[d+32]+12]?1:3;break;case 1:b=c(HEAP[d+32])<0?2:3;break;case 2:e=-1;b=4;break;case 3:HEAP[__Py_NoneStruct]+=
1;b=HEAP[d+32];e=HEAP[b+8];HEAP[HEAP[HEAP[d+32]+16]+4*e]=__Py_NoneStruct;HEAP[b+8]=e+1;e=0;b=4;break;case 4:return a=e;default:assert(0,"bad label: "+b)}}function M(){_PyErr_SetString(HEAP[P],se);return-1}function L(a){var b=STACKTOP;STACKTOP+=8;_memset(b,0,8);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h=b,j=b+4,l,m,n;e=a;g=0;m=-1;l=FUNCTION_TABLE[HEAP[e+64]](e,j);d=l<0?1:2;break;case 1:f=-1;d=22;break;case 2:d=l<=1?3:4;break;case 3:f=M();d=22;break;case 4:d=k(HEAP[j],l);HEAP[j]=d;d=HEAP[j]==0?
5:6;break;case 5:f=-1;d=22;break;case 6:n=___errno_location();HEAP[n]=0;n=_strtol(HEAP[j],h,0);d=___errno_location();d=HEAP[d]!=0?9:7;break;case 7:d=HEAP[HEAP[h]]!=10?9:8;break;case 8:d=HEAP[HEAP[h]+1]!=0?9:11;break;case 9:g=___errno_location();HEAP[g]=0;g=d=_PyLong_FromString(HEAP[j],0,0);d=d==0?10:15;break;case 10:_PyErr_SetString(HEAP[_PyExc_ValueError],Ob);d=21;break;case 11:d=l!=3?14:12;break;case 12:d=n==0|n==1?13:14;break;case 13:g=_PyBool_FromLong(n);d=g==0?21:15;break;case 14:g=d=_PyInt_FromLong(n);
d=d==0?21:15;break;case 15:_free(HEAP[j]);d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?16:20;break;case 16:d=c(HEAP[e+32])<0?17:20;break;case 17:HEAP[g]-=1;d=HEAP[g]==0?18:19;break;case 18:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=19;break;case 19:f=-1;d=22;break;case 20:f=HEAP[e+32];d=HEAP[f+8];HEAP[HEAP[HEAP[e+32]+16]+4*d]=g;HEAP[f+8]=d+1;f=0;d=22;break;case 21:_free(HEAP[j]);f=m;d=22;break;case 22:return a=f,STACKTOP=b,a;default:assert(0,"bad label: "+d)}}function I(a,b){var d;for(d=-1;;)switch(d){case -1:var e,
f,g;e=a;f=b;d=f!=__Py_TrueStruct&f!=__Py_ZeroStruct?1:2;break;case 1:throw ___assert_fail(Be,Cb,3391,te),"Reached an unreachable!";case 2:d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?3:5;break;case 3:d=c(HEAP[e+32])<0?4:5;break;case 4:g=-1;d=6;break;case 5:HEAP[f]+=1;d=HEAP[e+32];g=HEAP[d+8];HEAP[HEAP[HEAP[e+32]+16]+4*g]=f;HEAP[d+8]=g+1;g=0;d=6;break;case 6:return e=g;default:assert(0,"bad label: "+d)}}function J(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g;d=a;e=b;g=f=0;c=f<e?1:2;break;case 1:c=
HEAP[d+f];g|=c<<f*8;f+=1;c=f<e?1:2;break;case 2:return d=g;default:assert(0,"bad label: "+c)}}function F(a,b,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h;f=a;h=J(b,d);h=_PyInt_FromLong(h);e=h==0?1:2;break;case 1:g=-1;e=8;break;case 2:e=HEAP[HEAP[f+32]+8]==HEAP[HEAP[f+32]+12]?3:7;break;case 3:e=c(HEAP[f+32])<0?4:7;break;case 4:HEAP[h]-=1;e=HEAP[h]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);e=6;break;case 6:g=-1;e=8;break;case 7:g=HEAP[f+32];e=HEAP[g+8];HEAP[HEAP[HEAP[f+32]+16]+4*
e]=h;HEAP[g+8]=e+1;g=0;e=8;break;case 8:return a=g;default:assert(0,"bad label: "+e)}}function V(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var c;for(c=-1;;)switch(c){case -1:var d,e,f=b;d=a;c=FUNCTION_TABLE[HEAP[d+60]](d,f,4)<0?1:2;break;case 1:e=-1;c=3;break;case 2:e=F(d,HEAP[f],4);c=3;break;case 3:return a=e,STACKTOP=b,a;default:assert(0,"bad label: "+c)}}function Q(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var c;for(c=-1;;)switch(c){case -1:var d,e,f=b;d=a;c=FUNCTION_TABLE[HEAP[d+60]](d,
f,1)<0?1:2;break;case 1:e=-1;c=3;break;case 2:e=F(d,HEAP[f],1);c=3;break;case 3:return a=e,STACKTOP=b,a;default:assert(0,"bad label: "+c)}}function Z(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var c;for(c=-1;;)switch(c){case -1:var d,e,f=b;d=a;c=FUNCTION_TABLE[HEAP[d+60]](d,f,2)<0?1:2;break;case 1:e=-1;c=3;break;case 2:e=F(d,HEAP[f],2);c=3;break;case 3:return a=e,STACKTOP=b,a;default:assert(0,"bad label: "+c)}}function K(a){var b=STACKTOP;STACKTOP+=8;_memset(b,0,8);var d;for(d=-1;;)switch(d){case -1:var e,
f,g,h=b,j=b+4,l,m;e=a;g=0;m=-1;l=FUNCTION_TABLE[HEAP[e+64]](e,j);d=l<0?1:2;break;case 1:f=-1;d=14;break;case 2:d=l<=1?3:4;break;case 3:f=M();d=14;break;case 4:d=k(HEAP[j],l);HEAP[j]=d;d=HEAP[j]==0?5:6;break;case 5:f=-1;d=14;break;case 6:g=_PyLong_FromString(HEAP[j],h,0);d=g==0;_free(HEAP[j]);d=d?13:7;break;case 7:d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?8:12;break;case 8:d=c(HEAP[e+32])<0?9:12;break;case 9:HEAP[g]-=1;d=HEAP[g]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=11;break;
case 11:f=-1;d=14;break;case 12:f=HEAP[e+32];d=HEAP[f+8];HEAP[HEAP[HEAP[e+32]+16]+4*d]=g;HEAP[f+8]=d+1;f=0;d=14;break;case 13:f=m;d=14;break;case 14:return a=f,STACKTOP=b,a;default:assert(0,"bad label: "+d)}}function N(a,b){var d=STACKTOP;STACKTOP+=8;_memset(d,0,8);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j,k=d,l=d+4,m;g=a;h=b;e=h!=1&h!=4?1:2;break;case 1:throw ___assert_fail(wb,Cb,3510,aa),"Reached an unreachable!";case 2:e=FUNCTION_TABLE[HEAP[g+60]](g,k,h);e=e<0?3:4;break;case 3:j=-1;e=
19;break;case 4:h=J(HEAP[k],h);e=h<0?5:6;break;case 5:_PyErr_SetString(HEAP[P],Hc);j=-1;e=19;break;case 6:e=h==0?7:8;break;case 7:var n=_PyLong_FromLong(0);m=n;f=7;e=11;break;case 8:e=FUNCTION_TABLE[HEAP[g+60]](g,l,h);e=e<0?9:10;break;case 9:j=-1;e=19;break;case 10:var o=__PyLong_FromByteArray(HEAP[l],h,1,1);m=o;f=10;e=11;break;case 11:e=(f==10?o:n)==0?12:13;break;case 12:j=-1;e=19;break;case 13:e=HEAP[HEAP[g+32]+8]==HEAP[HEAP[g+32]+12]?14:18;break;case 14:e=c(HEAP[g+32])<0?15:18;break;case 15:HEAP[m]-=
1;e=HEAP[m]==0?16:17;break;case 16:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);e=17;break;case 17:j=-1;e=19;break;case 18:j=HEAP[g+32];e=HEAP[j+8];HEAP[HEAP[HEAP[g+32]+16]+4*e]=m;HEAP[j+8]=e+1;j=0;e=19;break;case 19:return f=j,STACKTOP=d,f;default:assert(0,"bad label: "+e)}}function H(a){var b=STACKTOP;STACKTOP+=8;_memset(b,0,8);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h=b,j=b+4,l,m,n;e=a;g=0;m=-1;l=FUNCTION_TABLE[HEAP[e+64]](e,j);d=l<0?1:2;break;case 1:f=-1;d=19;break;case 2:d=l<=1?3:4;break;case 3:f=
M();d=19;break;case 4:d=k(HEAP[j],l);HEAP[j]=d;d=HEAP[j]==0?5:6;break;case 5:f=-1;d=19;break;case 6:n=_PyOS_string_to_double(HEAP[j],h,HEAP[_PyExc_OverflowError]);d=n!=-1?8:7;break;case 7:d=_PyErr_Occurred()!=0?18:8;break;case 8:d=HEAP[HEAP[h]]!=10?10:9;break;case 9:d=HEAP[HEAP[h]+1]!=0?10:11;break;case 10:_PyErr_SetString(HEAP[_PyExc_ValueError],ae);d=18;break;case 11:g=_PyFloat_FromDouble(n);d=g==0?18:12;break;case 12:_free(HEAP[j]);d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?13:17;break;case 13:d=
c(HEAP[e+32])<0?14:17;break;case 14:HEAP[g]-=1;d=HEAP[g]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=16;break;case 16:f=-1;d=19;break;case 17:f=HEAP[e+32];d=HEAP[f+8];HEAP[HEAP[HEAP[e+32]+16]+4*d]=g;HEAP[f+8]=d+1;f=0;d=19;break;case 18:_free(HEAP[j]);f=m;d=19;break;case 19:return a=f,STACKTOP=b,a;default:assert(0,"bad label: "+d)}}function ba(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j=b;e=a;d=FUNCTION_TABLE[HEAP[e+60]](e,j,8)<0?
1:2;break;case 1:f=-1;d=13;break;case 2:h=__PyFloat_Unpack8(HEAP[j],0);d=h==-1?3:5;break;case 3:d=_PyErr_Occurred()!=0?4:5;break;case 4:f=-1;d=13;break;case 5:g=d=_PyFloat_FromDouble(h);d=d==0?6:7;break;case 6:f=-1;d=13;break;case 7:d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?8:12;break;case 8:d=c(HEAP[e+32])<0?9:12;break;case 9:HEAP[g]-=1;d=HEAP[g]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=11;break;case 11:f=-1;d=13;break;case 12:f=HEAP[e+32];d=HEAP[f+8];HEAP[HEAP[HEAP[e+32]+16]+
4*d]=g;HEAP[f+8]=d+1;f=0;d=13;break;case 13:return a=f,STACKTOP=b,a;default:assert(0,"bad label: "+d)}}function W(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,l=b,m;e=a;g=0;j=-1;h=FUNCTION_TABLE[HEAP[e+64]](e,l);d=h<0?1:2;break;case 1:f=-1;d=23;break;case 2:d=h<=1?3:4;break;case 3:f=M();d=23;break;case 4:d=k(HEAP[l],h);HEAP[l]=d;d=HEAP[l]==0?6:5;break;case 5:d=HEAP[HEAP[l]+(h-1)]<=32?7:8;break;case 6:f=-1;d=23;break;case 7:h-=1;d=HEAP[HEAP[l]+(h-1)]<=
32?7:8;break;case 8:d=HEAP[HEAP[l]]!=34?11:9;break;case 9:d=HEAP[HEAP[l]+(h-1)]!=34?11:10;break;case 10:HEAP[HEAP[l]+(h-1)]=0;m=HEAP[l]+1;h-=2;d=14;break;case 11:d=HEAP[HEAP[l]]!=39?22:12;break;case 12:d=HEAP[HEAP[l]+(h-1)]!=39?22:13;break;case 13:HEAP[HEAP[l]+(h-1)]=0;m=HEAP[l]+1;h-=2;d=14;break;case 14:g=_PyString_DecodeEscape(m,h,0,0,0);_free(HEAP[l]);d=g!=0?15:21;break;case 15:d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?16:20;break;case 16:d=c(HEAP[e+32])<0?17:20;break;case 17:HEAP[g]-=1;d=HEAP[g]==
0?18:19;break;case 18:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=19;break;case 19:f=-1;d=23;break;case 20:j=HEAP[e+32];d=HEAP[j+8];HEAP[HEAP[HEAP[e+32]+16]+4*d]=g;HEAP[j+8]=d+1;j=0;d=21;break;case 21:f=j;d=23;break;case 22:_free(HEAP[l]);_PyErr_SetString(HEAP[_PyExc_ValueError],qe);f=-1;d=23;break;case 23:return a=f,STACKTOP=b,a;default:assert(0,"bad label: "+d)}}function B(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j=b;e=a;g=0;d=FUNCTION_TABLE[HEAP[e+
60]](e,j,4)<0?1:2;break;case 1:f=-1;d=14;break;case 2:h=J(HEAP[j],4);d=h<0?3:4;break;case 3:_PyErr_SetString(HEAP[P],ue);f=-1;d=14;break;case 4:d=FUNCTION_TABLE[HEAP[e+60]](e,j,h)<0?5:6;break;case 5:f=-1;d=14;break;case 6:g=_PyString_FromStringAndSize(HEAP[j],h);d=g==0?7:8;break;case 7:f=-1;d=14;break;case 8:d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?9:13;break;case 9:d=c(HEAP[e+32])<0?10:13;break;case 10:HEAP[g]-=1;d=HEAP[g]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=12;break;
case 12:f=-1;d=14;break;case 13:d=HEAP[e+32];f=HEAP[d+8];HEAP[HEAP[HEAP[e+32]+16]+4*f]=g;HEAP[d+8]=f+1;f=0;d=14;break;case 14:return a=f,STACKTOP=b,a;default:assert(0,"bad label: "+d)}}function Y(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j=b;e=a;g=0;d=FUNCTION_TABLE[HEAP[e+60]](e,j,1)<0?1:2;break;case 1:f=-1;d=12;break;case 2:h=HEAP[HEAP[j]];d=FUNCTION_TABLE[HEAP[e+60]](e,j,h)<0?3:4;break;case 3:f=-1;d=12;break;case 4:g=_PyString_FromStringAndSize(HEAP[j],
h);d=g==0?5:6;break;case 5:f=-1;d=12;break;case 6:d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?7:11;break;case 7:d=c(HEAP[e+32])<0?8:11;break;case 8:HEAP[g]-=1;d=HEAP[g]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=10;break;case 10:f=-1;d=12;break;case 11:d=HEAP[e+32];f=HEAP[d+8];HEAP[HEAP[HEAP[e+32]+16]+4*f]=g;HEAP[d+8]=f+1;f=0;d=12;break;case 12:return a=f,STACKTOP=b,a;default:assert(0,"bad label: "+d)}}function fa(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var d;for(d=-1;;)switch(d){case -1:var e,
f,g,h,j,k=b;e=a;g=0;j=-1;h=FUNCTION_TABLE[HEAP[e+64]](e,k);d=h<0?1:2;break;case 1:f=-1;d=12;break;case 2:d=h<=0?3:4;break;case 3:f=M();d=12;break;case 4:g=_PyUnicodeUCS2_DecodeRawUnicodeEscape(HEAP[k],h-1,0);d=g==0?11:5;break;case 5:d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?6:10;break;case 6:d=c(HEAP[e+32])<0?7:10;break;case 7:HEAP[g]-=1;d=HEAP[g]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=9;break;case 9:f=-1;d=12;break;case 10:d=HEAP[e+32];f=HEAP[d+8];HEAP[HEAP[HEAP[e+32]+16]+4*
f]=g;HEAP[d+8]=f+1;f=0;d=12;break;case 11:f=j;d=12;break;case 12:return a=f,STACKTOP=b,a;default:assert(0,"bad label: "+d)}}function ha(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j=b;e=a;d=FUNCTION_TABLE[HEAP[e+60]](e,j,4)<0?1:2;break;case 1:f=-1;d=14;break;case 2:h=J(HEAP[j],4);d=h<0?3:4;break;case 3:_PyErr_SetString(HEAP[P],wd);f=-1;d=14;break;case 4:d=FUNCTION_TABLE[HEAP[e+60]](e,j,h)<0?5:6;break;case 5:f=-1;d=14;break;case 6:g=_PyUnicodeUCS2_DecodeUTF8(HEAP[j],
h,0);d=g==0?7:8;break;case 7:f=-1;d=14;break;case 8:d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?9:13;break;case 9:d=c(HEAP[e+32])<0?10:13;break;case 10:HEAP[g]-=1;d=HEAP[g]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=12;break;case 12:f=-1;d=14;break;case 13:d=HEAP[e+32];f=HEAP[d+8];HEAP[HEAP[HEAP[e+32]+16]+4*f]=g;HEAP[d+8]=f+1;f=0;d=14;break;case 14:return a=f,STACKTOP=b,a;default:assert(0,"bad label: "+d)}}function la(a){var b;for(b=-1;;)switch(b){case -1:var e,f,g,h;e=a;h=D(e);
b=h<0?1:2;break;case 1:f=-1;b=10;break;case 2:g=d(HEAP[e+32],h);b=g==0?3:4;break;case 3:f=-1;b=10;break;case 4:b=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?5:9;break;case 5:b=c(HEAP[e+32])<0?6:9;break;case 6:HEAP[g]-=1;b=HEAP[g]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);b=8;break;case 8:f=-1;b=10;break;case 9:b=HEAP[e+32];f=HEAP[b+8];HEAP[HEAP[HEAP[e+32]+16]+4*f]=g;HEAP[b+8]=f+1;f=0;b=10;break;case 10:return a=f;default:assert(0,"bad label: "+b)}}function ra(a,b){var d;for(d=-1;;)switch(d){case -1:var e,
f,g,h,j;e=a;f=b;h=_PyTuple_New(f);d=h==0?1:7;break;case 1:g=-1;d=14;break;case 2:d=l!=0?4:3;break;case 3:_PyErr_SetString(HEAP[P],Vc);j=0;d=5;break;case 4:d=HEAP[HEAP[e+32]+16];var k=HEAP[e+32];HEAP[k+8]-=1;j=HEAP[d+4*HEAP[k+8]];d=HEAP[d+4*HEAP[k+8]]==0?5:6;break;case 5:g=-1;d=14;break;case 6:HEAP[h+12+f*4]=j;d=7;break;case 7:f=d=f-1;var l=HEAP[HEAP[e+32]+8];d=d>=0?2:8;break;case 8:d=l==HEAP[HEAP[e+32]+12]?9:13;break;case 9:d=c(HEAP[e+32])<0?10:13;break;case 10:HEAP[h]-=1;d=HEAP[h]==0?11:12;break;
case 11:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);d=12;break;case 12:g=-1;d=14;break;case 13:g=HEAP[e+32];d=HEAP[g+8];HEAP[HEAP[HEAP[e+32]+16]+4*d]=h;HEAP[g+8]=d+1;g=0;d=14;break;case 14:return e=g;default:assert(0,"bad label: "+d)}}function ya(a){var b;for(b=-1;;)switch(b){case -1:var d,e,f;d=a;f=_PyList_New(0);b=f==0?1:2;break;case 1:e=-1;b=8;break;case 2:b=HEAP[HEAP[d+32]+8]==HEAP[HEAP[d+32]+12]?3:7;break;case 3:b=c(HEAP[d+32])<0?4:7;break;case 4:HEAP[f]-=1;b=HEAP[f]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[f+
4]+24]](f);b=6;break;case 6:e=-1;b=8;break;case 7:b=HEAP[d+32];e=HEAP[b+8];HEAP[HEAP[HEAP[d+32]+16]+4*e]=f;HEAP[b+8]=e+1;e=0;b=8;break;case 8:return a=e;default:assert(0,"bad label: "+b)}}function Da(a){var b;for(b=-1;;)switch(b){case -1:var d,e,f;d=a;f=_PyDict_New();b=f==0?1:2;break;case 1:e=-1;b=8;break;case 2:b=HEAP[HEAP[d+32]+8]==HEAP[HEAP[d+32]+12]?3:7;break;case 3:b=c(HEAP[d+32])<0?4:7;break;case 4:HEAP[f]-=1;b=HEAP[f]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[f+4]+24]](f);b=6;break;case 6:e=
-1;b=8;break;case 7:b=HEAP[d+32];e=HEAP[b+8];HEAP[HEAP[HEAP[d+32]+16]+4*e]=f;HEAP[b+8]=e+1;e=0;b=8;break;case 8:return a=e;default:assert(0,"bad label: "+b)}}function Ua(a){var b;for(b=-1;;)switch(b){case -1:var d,e,g,h;d=a;g=0;h=D(d);b=h<0?1:2;break;case 1:e=-1;b=10;break;case 2:g=f(HEAP[d+32],h);b=g==0?3:4;break;case 3:e=-1;b=10;break;case 4:b=HEAP[HEAP[d+32]+8]==HEAP[HEAP[d+32]+12]?5:9;break;case 5:b=c(HEAP[d+32])<0?6:9;break;case 6:HEAP[g]-=1;b=HEAP[g]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[g+
4]+24]](g);b=8;break;case 8:e=-1;b=10;break;case 9:b=HEAP[d+32];e=HEAP[b+8];HEAP[HEAP[HEAP[d+32]+16]+4*e]=g;HEAP[b+8]=e+1;e=0;b=10;break;case 10:return a=e;default:assert(0,"bad label: "+b)}}function Na(b){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k,l;e=b;j=D(e);d=j<0?1:2;break;case 1:f=-1;d=17;break;case 2:k=HEAP[HEAP[e+32]+8];g=_PyDict_New();d=g==0?3:4;break;case 3:f=-1;d=17;break;case 4:l=j+1;d=10;break;case 5:d=HEAP[HEAP[m+16]+4*(l-1)];h=HEAP[HEAP[HEAP[e+32]+16]+4*l];d=_PyDict_SetItem(g,
d,h)<0?6:9;break;case 6:HEAP[g]-=1;d=HEAP[g]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=8;break;case 8:f=-1;d=17;break;case 9:l+=2;d=10;break;case 10:var m=HEAP[e+32];d=l<k?5:11;break;case 11:a(m,j);d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?12:16;break;case 12:d=c(HEAP[e+32])<0?13:16;break;case 13:HEAP[g]-=1;d=HEAP[g]==0?14:15;break;case 14:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=15;break;case 15:f=-1;d=17;break;case 16:f=HEAP[e+32];d=HEAP[f+8];HEAP[HEAP[HEAP[e+32]+16]+4*d]=g;HEAP[f+
8]=d+1;f=0;d=17;break;case 17:return b=f;default:assert(0,"bad label: "+d)}}function Pa(a,b){var c=STACKTOP;STACKTOP+=12;_memset(c,0,12);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k,l,m=c,n=c+4,o=c+8,p;e=a;f=b;h=0;d=HEAP[e+4]==_PyClass_Type?1:10;break;case 1:j=_PyObject_Size(f);d=j<0?12:2;break;case 2:d=j==0?3:8;break;case 3:k=_PyObject_GetAttr(e,HEAP[Yb]);d=k==0?4:6;break;case 4:_PyErr_Clear();l=_PyInstance_NewRaw(e,0);d=l==0?12:5;break;case 5:g=l;d=20;break;case 6:HEAP[k]-=1;d=HEAP[k]==0?
7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[k+4]+24]](k);d=8;break;case 8:h=d=_PyInstance_New(e,f,0);d=d!=0?9:12;break;case 9:g=h;d=20;break;case 10:h=_PyObject_CallObject(e,f);d=h!=0?11:12;break;case 11:g=h;d=20;break;case 12:_PyErr_Fetch(m,n,o);p=HEAP[n];d=HEAP[n]==0?13:14;break;case 13:p=__Py_NoneStruct;d=14;break;case 14:h=d=_PyTuple_Pack(3,allocate([p,0,0,0,e,0,0,0,f,0,0,0],["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));d=d!=0?15:19;break;case 15:d=
HEAP[n]!=0?16:18;break;case 16:d=HEAP[n];HEAP[d]-=1;d=HEAP[d]==0?17:18;break;case 17:FUNCTION_TABLE[HEAP[HEAP[HEAP[n]+4]+24]](HEAP[n]);d=18;break;case 18:HEAP[n]=h;d=19;break;case 19:_PyErr_Restore(HEAP[m],HEAP[n],HEAP[o]);g=0;d=20;break;case 20:return e=g,STACKTOP=c,e;default:assert(0,"bad label: "+d)}}function wa(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j=b;e=a;g=0;d=HEAP[e+40]!=0?1:33;break;case 1:h=FUNCTION_TABLE[HEAP[e+64]](e,j);d=h<0?2:3;break;
case 2:f=-1;d=34;break;case 3:d=h<=1?4:5;break;case 4:f=M();d=34;break;case 5:g=_PyString_FromStringAndSize(HEAP[j],h-1);d=g==0?6:7;break;case 6:f=-1;d=34;break;case 7:var k=e;d=(HEAP[HEAP[HEAP[e+40]+4]+84]&33554432)!=0?8:12;break;case 8:d=_PyList_Append(HEAP[k+40],g)<0?9:25;break;case 9:HEAP[g]-=1;d=HEAP[g]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=11;break;case 11:f=-1;d=34;break;case 12:d=HEAP[k+28]!=0?14:13;break;case 13:d=_PyTuple_New(1);HEAP[e+28]=d;d=HEAP[e+28]!=0?14:18;
break;case 14:d=HEAP[HEAP[e+28]+12]!=0?15:17;break;case 15:d=HEAP[HEAP[e+28]+12];HEAP[d]-=1;d=HEAP[d]==0?16:17;break;case 16:FUNCTION_TABLE[HEAP[HEAP[HEAP[HEAP[e+28]+12]+4]+24]](HEAP[HEAP[e+28]+12]);d=17;break;case 17:HEAP[HEAP[e+28]+12]=g;d=20;break;case 18:HEAP[g]-=1;d=HEAP[g]==0?19:20;break;case 19:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=20;break;case 20:d=HEAP[e+28]!=0?21:25;break;case 21:g=_PyObject_Call(HEAP[e+40],HEAP[e+28],0);d=HEAP[HEAP[e+28]]>1?22:25;break;case 22:d=HEAP[e+28];HEAP[d]-=
1;d=HEAP[d]==0?23:24;break;case 23:FUNCTION_TABLE[HEAP[HEAP[HEAP[e+28]+4]+24]](HEAP[e+28]);d=24;break;case 24:HEAP[e+28]=0;d=25;break;case 25:d=g==0?26:27;break;case 26:f=-1;d=34;break;case 27:d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?28:32;break;case 28:d=c(HEAP[e+32])<0?29:32;break;case 29:HEAP[g]-=1;d=HEAP[g]==0?30:31;break;case 30:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=31;break;case 31:f=-1;d=34;break;case 32:f=HEAP[e+32];d=HEAP[f+8];HEAP[HEAP[HEAP[e+32]+16]+4*d]=g;HEAP[f+8]=d+1;f=0;d=34;break;
case 33:_PyErr_SetString(HEAP[P],Ce);f=-1;d=34;break;case 34:return a=f,STACKTOP=b,a;default:assert(0,"bad label: "+d)}}function Ya(a){var b;for(b=-1;;)switch(b){case -1:var d,e,f;d=a;f=0;b=HEAP[d+40]!=0?1:31;break;case 1:b=HEAP[HEAP[d+32]+8]!=0?3:2;break;case 2:_PyErr_SetString(HEAP[P],Vc);f=0;b=4;break;case 3:b=HEAP[HEAP[d+32]+16];var g=HEAP[d+32];HEAP[g+8]-=1;f=HEAP[b+4*HEAP[g+8]];b=HEAP[b+4*HEAP[g+8]]==0?4:5;break;case 4:e=-1;b=32;break;case 5:var h=d;b=(HEAP[HEAP[HEAP[d+40]+4]+84]&33554432)!=
0?6:10;break;case 6:b=_PyList_Append(HEAP[h+40],f)<0?7:25;break;case 7:HEAP[f]-=1;b=HEAP[f]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[f+4]+24]](f);b=9;break;case 9:e=-1;b=32;break;case 10:b=HEAP[h+28]!=0?12:11;break;case 11:b=_PyTuple_New(1);HEAP[d+28]=b;b=HEAP[d+28]!=0?12:16;break;case 12:b=HEAP[HEAP[d+28]+12]!=0?13:15;break;case 13:b=HEAP[HEAP[d+28]+12];HEAP[b]-=1;b=HEAP[b]==0?14:15;break;case 14:FUNCTION_TABLE[HEAP[HEAP[HEAP[HEAP[d+28]+12]+4]+24]](HEAP[HEAP[d+28]+12]);b=15;break;case 15:HEAP[HEAP[d+
28]+12]=f;b=18;break;case 16:HEAP[f]-=1;b=HEAP[f]==0?17:18;break;case 17:FUNCTION_TABLE[HEAP[HEAP[f+4]+24]](f);b=18;break;case 18:b=HEAP[d+28]!=0?19:23;break;case 19:f=_PyObject_Call(HEAP[d+40],HEAP[d+28],0);b=HEAP[HEAP[d+28]]>1?20:23;break;case 20:b=HEAP[d+28];HEAP[b]-=1;b=HEAP[b]==0?21:22;break;case 21:FUNCTION_TABLE[HEAP[HEAP[HEAP[d+28]+4]+24]](HEAP[d+28]);b=22;break;case 22:HEAP[d+28]=0;b=23;break;case 23:b=f==0?24:25;break;case 24:e=-1;b=32;break;case 25:b=HEAP[HEAP[d+32]+8]==HEAP[HEAP[d+32]+
12]?26:30;break;case 26:b=c(HEAP[d+32])<0?27:30;break;case 27:HEAP[f]-=1;b=HEAP[f]==0?28:29;break;case 28:FUNCTION_TABLE[HEAP[HEAP[f+4]+24]](f);b=29;break;case 29:e=-1;b=32;break;case 30:e=HEAP[d+32];b=HEAP[e+8];HEAP[HEAP[HEAP[d+32]+16]+4*b]=f;HEAP[e+8]=b+1;e=0;b=32;break;case 31:_PyErr_SetString(HEAP[P],Ce);e=-1;b=32;break;case 32:return a=e;default:assert(0,"bad label: "+b)}}function Ha(a){var c,d=null;for(c=-1;;)switch(c){case -1:var e,f,g;e=a;var h=HEAP[HEAP[e+32]+8];g=h;HEAP[e+52]<=0?(d=-1,c=
3):(d=-1,c=1);break;case 1:var j=g;HEAP[HEAP[e+48]+4*(HEAP[e+52]-1)]!=j?(d=1,c=3):(d=1,c=2);break;case 2:HEAP[e+52]-=1;c=8;break;case 3:c=(d==1?j:h)>0?4:7;break;case 4:g-=1;c=HEAP[HEAP[HEAP[e+32]+16]+4*g];HEAP[c]-=1;c=HEAP[c]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[HEAP[HEAP[HEAP[e+32]+16]+4*g]+4]+24]](HEAP[HEAP[HEAP[e+32]+16]+4*g]);c=6;break;case 6:HEAP[HEAP[e+32]+8]=g;c=8;break;case 7:f=b();c=9;break;case 8:f=0;c=9;break;case 9:return a=f;default:assert(0,"bad label: "+c)}}function ta(b){var c;
for(c=-1;;)switch(c){case -1:var d,e,f;d=b;f=D(d);c=f<0?1:2;break;case 1:e=-1;c=3;break;case 2:a(HEAP[d+32],f);e=0;c=3;break;case 3:return b=e;default:assert(0,"bad label: "+c)}}function Va(a){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h;e=a;h=HEAP[HEAP[e+32]+8];d=h<=0?1:2;break;case 1:f=b();d=8;break;case 2:g=HEAP[HEAP[HEAP[e+32]+16]+4*(h-1)];HEAP[g]+=1;d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?3:7;break;case 3:d=c(HEAP[e+32])<0?4:7;break;case 4:HEAP[g]-=1;d=HEAP[g]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[g+
4]+24]](g);d=6;break;case 6:f=-1;d=8;break;case 7:d=HEAP[e+32];f=HEAP[d+8];HEAP[HEAP[HEAP[e+32]+16]+4*f]=g;HEAP[d+8]=f+1;f=0;d=8;break;case 8:return a=f;default:assert(0,"bad label: "+d)}}function Ia(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k=b,l;e=a;h=g=0;j=FUNCTION_TABLE[HEAP[e+64]](e,k);d=j<0?1:2;break;case 1:f=-1;d=15;break;case 2:d=j<=1?3:4;break;case 3:f=M();d=15;break;case 4:g=_PyString_FromStringAndSize(HEAP[k],j-1);d=g==0?5:6;break;case 5:f=
-1;d=15;break;case 6:h=_PyDict_GetItem(HEAP[e+24],g);d=h==0?7:8;break;case 7:_PyErr_SetObject(HEAP[Fc],g);l=-1;d=12;break;case 8:d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?9:11;break;case 9:d=c(HEAP[e+32])<0?10:11;break;case 10:f=-1;d=15;break;case 11:HEAP[h]+=1;d=HEAP[e+32];l=HEAP[d+8];HEAP[HEAP[HEAP[e+32]+16]+4*l]=h;HEAP[d+8]=l+1;l=0;d=12;break;case 12:HEAP[g]-=1;d=HEAP[g]==0?13:14;break;case 13:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=14;break;case 14:f=l;d=15;break;case 15:return a=f,STACKTOP=b,
a;default:assert(0,"bad label: "+d)}}function Wa(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j=b,k;e=a;h=g=0;d=FUNCTION_TABLE[HEAP[e+60]](e,j,1)<0?1:2;break;case 1:f=-1;d=13;break;case 2:g=HEAP[HEAP[j]];g=_PyInt_FromLong(g);d=g==0?3:4;break;case 3:f=-1;d=13;break;case 4:h=_PyDict_GetItem(HEAP[e+24],g);d=h==0?5:6;break;case 5:_PyErr_SetObject(HEAP[Fc],g);k=-1;d=10;break;case 6:d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?7:9;break;case 7:d=c(HEAP[e+32])<
0?8:9;break;case 8:f=-1;d=13;break;case 9:HEAP[h]+=1;k=HEAP[e+32];d=HEAP[k+8];HEAP[HEAP[HEAP[e+32]+16]+4*d]=h;HEAP[k+8]=d+1;k=0;d=10;break;case 10:HEAP[g]-=1;d=HEAP[g]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=12;break;case 12:f=k;d=13;break;case 13:return a=f,STACKTOP=b,a;default:assert(0,"bad label: "+d)}}function ia(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j=b,k;e=a;h=g=0;d=FUNCTION_TABLE[HEAP[e+60]](e,j,4)<0?1:2;break;case 1:f=
-1;d=13;break;case 2:d=g=HEAP[HEAP[j]];g=HEAP[HEAP[j]+1];d|=g<<8;g=HEAP[HEAP[j]+2];d|=g<<16;g=HEAP[HEAP[j]+3];d|=g<<24;g=_PyInt_FromLong(d);d=g==0?3:4;break;case 3:f=-1;d=13;break;case 4:h=_PyDict_GetItem(HEAP[e+24],g);d=h==0?5:6;break;case 5:_PyErr_SetObject(HEAP[Fc],g);k=-1;d=10;break;case 6:d=HEAP[HEAP[e+32]+8]==HEAP[HEAP[e+32]+12]?7:9;break;case 7:d=c(HEAP[e+32])<0?8:9;break;case 8:f=-1;d=13;break;case 9:HEAP[h]+=1;k=HEAP[e+32];d=HEAP[k+8];HEAP[HEAP[HEAP[e+32]+16]+4*d]=h;HEAP[k+8]=d+1;k=0;d=10;
break;case 10:HEAP[g]-=1;d=HEAP[g]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=12;break;case 12:f=k;d=13;break;case 13:return a=f,STACKTOP=b,a;default:assert(0,"bad label: "+d)}}function Ba(a,b){var d=STACKTOP;STACKTOP+=4;_memset(d,0,4);var e;for(e=-1;;)switch(e){case -1:var f,g,h,j=d,k,l,m,n,o,p;f=a;g=b;e=g!=1&g!=2&g!=4?1:2;break;case 1:throw ___assert_fail(Dd,Cb,4260,De),"Reached an unreachable!";case 2:e=FUNCTION_TABLE[HEAP[f+60]](f,j,g)<0?3:4;break;case 3:h=-1;e=42;break;case 4:k=
J(HEAP[j],g);e=k<=0?5:6;break;case 5:_PyErr_SetString(HEAP[P],xd);h=-1;e=42;break;case 6:l=_PyInt_FromLong(k);e=l==0?7:8;break;case 7:h=-1;e=42;break;case 8:m=_PyDict_GetItem(HEAP[cd],l);e=m!=0?9:15;break;case 9:HEAP[l]-=1;e=HEAP[l]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);e=11;break;case 11:e=HEAP[HEAP[f+32]+8]==HEAP[HEAP[f+32]+12]?12:14;break;case 12:e=c(HEAP[f+32])<0?13:14;break;case 13:h=-1;e=42;break;case 14:HEAP[m]+=1;e=HEAP[f+32];h=HEAP[e+8];HEAP[HEAP[HEAP[f+32]+16]+4*h]=
m;HEAP[e+8]=h+1;h=0;e=42;break;case 15:n=_PyDict_GetItem(HEAP[Ed],l);e=n==0?16:19;break;case 16:HEAP[l]-=1;e=HEAP[l]==0?17:18;break;case 17:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);e=18;break;case 18:_PyErr_Format(HEAP[_PyExc_ValueError],Ge,allocate([k,0,0,0],["i32",0,0,0],ALLOC_STACK));h=-1;e=42;break;case 19:e=(HEAP[HEAP[n+4]+84]&67108864)==0?23:20;break;case 20:e=_PyTuple_Size(n)!=2?23:21;break;case 21:o=HEAP[n+12];e=(HEAP[HEAP[o+4]+84]&134217728)==0?23:22;break;case 22:p=HEAP[n+12+4];e=(HEAP[HEAP[p+
4]+84]&134217728)==0?23:26;break;case 23:HEAP[l]-=1;e=HEAP[l]==0?24:25;break;case 24:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);e=25;break;case 25:_PyErr_Format(HEAP[_PyExc_ValueError],ub,allocate([k,0,0,0],["i32",0,0,0],ALLOC_STACK));h=-1;e=42;break;case 26:m=E(o,p,HEAP[f+76]);e=m==0?27:30;break;case 27:HEAP[l]-=1;e=HEAP[l]==0?28:29;break;case 28:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);e=29;break;case 29:h=-1;e=42;break;case 30:k=_PyDict_SetItem(HEAP[cd],l,m);HEAP[l]-=1;e=HEAP[l]==0?31:32;break;case 31:FUNCTION_TABLE[HEAP[HEAP[l+
4]+24]](l);e=32;break;case 32:e=k<0?33:36;break;case 33:HEAP[m]-=1;e=HEAP[m]==0?34:35;break;case 34:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);e=35;break;case 35:h=-1;e=42;break;case 36:e=HEAP[HEAP[f+32]+8]==HEAP[HEAP[f+32]+12]?37:41;break;case 37:e=c(HEAP[f+32])<0?38:41;break;case 38:HEAP[m]-=1;e=HEAP[m]==0?39:40;break;case 39:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);e=40;break;case 40:h=-1;e=42;break;case 41:e=HEAP[f+32];h=HEAP[e+8];HEAP[HEAP[HEAP[f+32]+16]+4*h]=m;HEAP[e+8]=h+1;h=0;e=42;break;case 42:return f=
h,STACKTOP=d,f;default:assert(0,"bad label: "+e)}}function Xa(a){var c=STACKTOP;STACKTOP+=4;_memset(c,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k=c;e=a;g=0;j=FUNCTION_TABLE[HEAP[e+64]](e,k);d=j<0?1:2;break;case 1:f=-1;d=11;break;case 2:d=j<=1?3:4;break;case 3:f=M();d=11;break;case 4:h=HEAP[HEAP[e+32]+8];d=h==0?5:6;break;case 5:f=b();d=11;break;case 6:g=_PyString_FromStringAndSize(HEAP[k],j-1);d=g==0?7:8;break;case 7:f=-1;d=11;break;case 8:d=HEAP[HEAP[HEAP[e+32]+16]+4*(h-1)];j=_PyDict_SetItem(HEAP[e+
24],g,d);HEAP[g]-=1;d=HEAP[g]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=10;break;case 10:f=j;d=11;break;case 11:return a=f,STACKTOP=c,a;default:assert(0,"bad label: "+d)}}function Ta(a){var c=STACKTOP;STACKTOP+=4;_memset(c,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j=c;e=a;g=0;d=FUNCTION_TABLE[HEAP[e+60]](e,j,1)<0?1:2;break;case 1:f=-1;d=9;break;case 2:h=HEAP[HEAP[e+32]+8];d=h<=0?3:4;break;case 3:f=b();d=9;break;case 4:g=HEAP[HEAP[j]];g=_PyInt_FromLong(g);d=g==0?5:6;break;
case 5:f=-1;d=9;break;case 6:h=HEAP[HEAP[HEAP[e+32]+16]+4*(h-1)];h=_PyDict_SetItem(HEAP[e+24],g,h);HEAP[g]-=1;d=HEAP[g]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=8;break;case 8:f=h;d=9;break;case 9:return a=f,STACKTOP=c,a;default:assert(0,"bad label: "+d)}}function Ea(a){var c=STACKTOP;STACKTOP+=4;_memset(c,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j=c;e=a;g=0;d=FUNCTION_TABLE[HEAP[e+60]](e,j,4)<0?1:2;break;case 1:f=-1;d=9;break;case 2:h=HEAP[HEAP[e+32]+8];d=h==0?3:4;break;
case 3:f=b();d=9;break;case 4:g=d=HEAP[HEAP[j]];d=HEAP[HEAP[j]+1];g|=d<<8;d=HEAP[HEAP[j]+2];g|=d<<16;d=HEAP[HEAP[j]+3];g|=d<<24;g=_PyInt_FromLong(g);d=g==0?5:6;break;case 5:f=-1;d=9;break;case 6:h=HEAP[HEAP[HEAP[e+32]+16]+4*(h-1)];h=_PyDict_SetItem(HEAP[e+24],g,h);HEAP[g]-=1;d=HEAP[g]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=8;break;case 8:f=h;d=9;break;case 9:return a=f,STACKTOP=c,a;default:assert(0,"bad label: "+d)}}function Ga(c,d){var e;for(e=-1;;)switch(e){case -1:var g,h,
j,k,l,m,n,o,p,q;g=c;h=d;m=l=k=0;n=HEAP[HEAP[g+32]+8];e=n<h|h<=0?1:2;break;case 1:j=b();e=37;break;case 2:e=n==h?3:4;break;case 3:j=0;e=37;break;case 4:l=HEAP[HEAP[HEAP[g+32]+16]+4*(h-1)];e=(HEAP[HEAP[l+4]+84]&33554432)!=0?5:10;break;case 5:p=f(HEAP[g+32],h);e=p==0?6:7;break;case 6:j=-1;e=37;break;case 7:o=HEAP[l+8];o=_PyList_SetSlice(l,o,o,p);HEAP[p]-=1;e=HEAP[p]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[p+4]+24]](p);e=9;break;case 9:j=o;e=37;break;case 10:m=_PyObject_GetAttr(l,HEAP[gd]);e=m==
0?11:12;break;case 11:j=-1;e=37;break;case 12:o=h;e=33;break;case 13:k=HEAP[HEAP[r+16]+4*o];q=0;e=HEAP[g+28]!=0?15:14;break;case 14:e=_PyTuple_New(1);HEAP[g+28]=e;e=HEAP[g+28]!=0?15:19;break;case 15:e=HEAP[HEAP[g+28]+12]!=0?16:18;break;case 16:e=HEAP[HEAP[g+28]+12];HEAP[e]-=1;e=HEAP[e]==0?17:18;break;case 17:FUNCTION_TABLE[HEAP[HEAP[HEAP[HEAP[g+28]+12]+4]+24]](HEAP[HEAP[g+28]+12]);e=18;break;case 18:HEAP[HEAP[g+28]+12]=k;e=21;break;case 19:HEAP[k]-=1;e=HEAP[k]==0?20:21;break;case 20:FUNCTION_TABLE[HEAP[HEAP[k+
4]+24]](k);e=21;break;case 21:e=HEAP[g+28]!=0?22:26;break;case 22:q=_PyObject_Call(m,HEAP[g+28],0);e=HEAP[HEAP[g+28]]>1?23:26;break;case 23:e=HEAP[g+28];HEAP[e]-=1;e=HEAP[e]==0?24:25;break;case 24:FUNCTION_TABLE[HEAP[HEAP[HEAP[g+28]+4]+24]](HEAP[g+28]);e=25;break;case 25:HEAP[g+28]=0;e=26;break;case 26:e=q==0?27:30;break;case 27:a(HEAP[g+32],o+1);HEAP[HEAP[g+32]+8]=h;HEAP[m]-=1;e=HEAP[m]==0?28:29;break;case 28:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);e=29;break;case 29:j=-1;e=37;break;case 30:HEAP[q]-=
1;e=HEAP[q]==0?31:32;break;case 31:FUNCTION_TABLE[HEAP[HEAP[q+4]+24]](q);e=32;break;case 32:o+=1;e=33;break;case 33:var r=HEAP[g+32];e=o<n?13:34;break;case 34:HEAP[r+8]=h;HEAP[m]-=1;e=HEAP[m]==0?35:36;break;case 35:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);e=36;break;case 36:j=0;e=37;break;case 37:return g=j;default:assert(0,"bad label: "+e)}}function ka(c,d){var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,k,l,m,n;f=c;g=d;n=k=0;l=HEAP[HEAP[f+32]+8];e=l<g|g<=0?1:2;break;case 1:h=b();e=8;break;case 2:k=
HEAP[HEAP[HEAP[f+32]+16]+4*(g-1)];m=g+1;e=6;break;case 3:j=HEAP[HEAP[HEAP[f+32]+16]+4*(m-1)];e=HEAP[HEAP[HEAP[f+32]+16]+4*m];e=_PyObject_SetItem(k,j,e)<0?4:5;break;case 4:n=-1;e=7;break;case 5:m+=2;e=6;break;case 6:e=m<l?3:7;break;case 7:a(HEAP[f+32],g);h=n;e=8;break;case 8:return f=h;default:assert(0,"bad label: "+e)}}function Fa(a){var b,c=null;for(b=-1;;)switch(b){case -1:var d,e,f,g;d=a;b=HEAP[d+52]+1>=HEAP[d+56]?1:9;break;case 1:f=HEAP[d+56]+20;b=HEAP[d+52]>=f?2:3;break;case 2:f=HEAP[d+52]+1;
b=3;break;case 3:var h=f*4;b=HEAP[d+48]==0?4:5;break;case 4:var j=_malloc(h);g=j;c=4;b=6;break;case 5:var k=_realloc(HEAP[d+48],h);g=k;c=5;b=6;break;case 6:b=(c==5?k:j)==0?7:8;break;case 7:_PyErr_NoMemory();e=-1;b=10;break;case 8:HEAP[d+48]=g;HEAP[d+56]=f;b=9;break;case 9:b=HEAP[d+52];HEAP[HEAP[d+48]+4*b]=HEAP[HEAP[d+32]+8];HEAP[d+52]=b+1;e=0;b=10;break;case 10:return a=e;default:assert(0,"bad label: "+b)}}function ma(a){var b=STACKTOP;STACKTOP+=4;_memset(b,0,4);var c;for(c=-1;;)switch(c){case -1:var d,
e,f=b;c=a;e=FUNCTION_TABLE[HEAP[c+60]](c,f,1);c=e<0?1:2;break;case 1:d=-1;c=7;break;case 2:e=J(HEAP[f],1);c=e<0?3:4;break;case 3:throw ___assert_fail(dd,Cb,4665,id),"Reached an unreachable!";case 4:c=e<=2?5:6;break;case 5:d=0;c=7;break;case 6:_PyErr_Format(HEAP[_PyExc_ValueError],jd,allocate([e,0,0,0],["i32",0,0,0],ALLOC_STACK));d=-1;c=7;break;case 7:return a=d,STACKTOP=b,a;default:assert(0,"bad label: "+c)}}function La(e){var f=STACKTOP;STACKTOP+=4;_memset(f,0,4);var g;for(g=-1;;)switch(g){case -1:var j,
k,l,m,n=f;j=e;m=l=0;HEAP[j+52]=0;g=HEAP[HEAP[j+32]+8]!=0?1:2;break;case 1:a(HEAP[j+32],0);g=2;break;case 2:g=FUNCTION_TABLE[HEAP[j+60]](j,n,1)<0?58:3;break;case 3:g=reSign(HEAP[HEAP[n]],8,1);g=g==-128?53:g==-127?30:g==-126?39:g==-125?40:g==-124?41:g==-123?20:g==-122?21:g==-121?22:g==-120?54:g==-119?55:g==-118?10:g==-117?11:g==0?56:g==40?42:g==41?19:g==46?58:g==48?46:g==49?47:g==50?35:g==70?12:g==71?13:g==73?8:g==74?5:g==75?6:g==76?9:g==77?7:g==78?4:g==80?50:g==81?51:g==82?52:g==83?16:g==84?14:g==
85?15:g==86?17:g==88?18:g==93?24:g==97?32:g==98?34:g==99?31:g==100?27:g==101?33:g==103?38:g==104?36:g==105?29:g==106?37:g==108?25:g==111?28:g==112?45:g==113?43:g==114?44:g==115?48:g==116?23:g==117?49:g==125?26:57;break;case 4:g=R(j)<0?58:2;break;case 5:g=V(j)<0?58:2;break;case 6:g=Q(j)<0?58:2;break;case 7:g=Z(j)<0?58:2;break;case 8:g=L(j)<0?58:2;break;case 9:g=K(j)<0?58:2;break;case 10:g=N(j,1)<0?58:2;break;case 11:g=N(j,4)<0?58:2;break;case 12:g=H(j)<0?58:2;break;case 13:g=ba(j)<0?58:2;break;case 14:g=
B(j)<0?58:2;break;case 15:g=Y(j)<0?58:2;break;case 16:g=W(j)<0?58:2;break;case 17:g=fa(j)<0?58:2;break;case 18:g=ha(j)<0?58:2;break;case 19:g=ra(j,0)<0?58:2;break;case 20:g=ra(j,1)<0?58:2;break;case 21:g=ra(j,2)<0?58:2;break;case 22:g=ra(j,3)<0?58:2;break;case 23:g=la(j)<0?58:2;break;case 24:g=ya(j)<0?58:2;break;case 25:g=Ua(j)<0?58:2;break;case 26:g=Da(j)<0?58:2;break;case 27:g=Na(j)<0?58:2;break;case 28:a:{g=j;for(var o=void 0,o=-1;;)switch(o){case -1:var p,q,r,s,t,u;p=g;t=0;u=D(p);o=u<0?1:2;break;
case 1:q=-1;o=19;break;case 2:s=d(HEAP[p+32],u+1);o=s==0?3:4;break;case 3:q=-1;o=19;break;case 4:o=HEAP[HEAP[p+32]+8]!=0?6:5;break;case 5:_PyErr_SetString(HEAP[P],Vc);r=0;o=9;break;case 6:var o=HEAP[HEAP[p+32]+16],v=HEAP[p+32];HEAP[v+8]-=1;r=HEAP[o+4*HEAP[v+8]];o=HEAP[o+4*HEAP[v+8]]!=0?7:9;break;case 7:t=Pa(r,s);HEAP[r]-=1;o=HEAP[r]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);o=9;break;case 9:HEAP[s]-=1;o=HEAP[s]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[s+4]+24]](s);o=11;break;
case 11:o=t==0?12:13;break;case 12:q=-1;o=19;break;case 13:o=HEAP[HEAP[p+32]+8]==HEAP[HEAP[p+32]+12]?14:18;break;case 14:o=c(HEAP[p+32])<0?15:18;break;case 15:HEAP[t]-=1;o=HEAP[t]==0?16:17;break;case 16:FUNCTION_TABLE[HEAP[HEAP[t+4]+24]](t);o=17;break;case 17:q=-1;o=19;break;case 18:q=HEAP[p+32];o=HEAP[q+8];HEAP[HEAP[HEAP[p+32]+16]+4*o]=t;HEAP[q+8]=o+1;q=0;o=19;break;case 19:g=q;break a;default:assert(0,"bad label: "+o)}g=void 0}g=g<0?58:2;break;case 29:a:{o=j;g=STACKTOP;STACKTOP+=4;_memset(g,0,4);
v=void 0;for(v=-1;;)switch(v){case -1:var w,x,O,y,U,F,A,z,xa,C=g;w=o;U=y=0;z=D(w);v=z<0?1:2;break;case 1:x=-1;v=31;break;case 2:xa=FUNCTION_TABLE[HEAP[w+64]](w,C);v=xa<0?3:4;break;case 3:x=-1;v=31;break;case 4:v=xa<=1?5:6;break;case 5:x=M();v=31;break;case 6:F=_PyString_FromStringAndSize(HEAP[C],xa-1);v=F==0?7:8;break;case 7:x=-1;v=31;break;case 8:xa=FUNCTION_TABLE[HEAP[w+64]](w,C);v=xa>=0?9:14;break;case 9:v=xa<=1?10:11;break;case 10:x=M();v=31;break;case 11:A=_PyString_FromStringAndSize(HEAP[C],
xa-1);v=A!=0?12:14;break;case 12:y=E(F,A,HEAP[w+76]);HEAP[A]-=1;v=HEAP[A]==0?13:14;break;case 13:FUNCTION_TABLE[HEAP[HEAP[A+4]+24]](A);v=14;break;case 14:HEAP[F]-=1;v=HEAP[F]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[F+4]+24]](F);v=16;break;case 16:v=y==0?17:18;break;case 17:x=-1;v=31;break;case 18:O=d(HEAP[w+32],z);v=O!=0?19:21;break;case 19:U=Pa(y,O);HEAP[O]-=1;v=HEAP[O]==0?20:21;break;case 20:FUNCTION_TABLE[HEAP[HEAP[O+4]+24]](O);v=21;break;case 21:HEAP[y]-=1;v=HEAP[y]==0?22:23;break;case 22:FUNCTION_TABLE[HEAP[HEAP[y+
4]+24]](y);v=23;break;case 23:v=U==0?24:25;break;case 24:x=-1;v=31;break;case 25:v=HEAP[HEAP[w+32]+8]==HEAP[HEAP[w+32]+12]?26:30;break;case 26:v=c(HEAP[w+32])<0?27:30;break;case 27:HEAP[U]-=1;v=HEAP[U]==0?28:29;break;case 28:FUNCTION_TABLE[HEAP[HEAP[U+4]+24]](U);v=29;break;case 29:x=-1;v=31;break;case 30:x=HEAP[w+32];v=HEAP[x+8];HEAP[HEAP[HEAP[w+32]+16]+4*v]=U;HEAP[x+8]=v+1;x=0;v=31;break;case 31:o=x;STACKTOP=g;g=o;break a;default:assert(0,"bad label: "+v)}g=void 0}g=g<0?58:2;break;case 30:a:{g=j;
o=void 0;for(o=-1;;)switch(o){case -1:var ga,va,X,G,J,Oa;ga=g;G=X=0;o=HEAP[HEAP[ga+32]+8]!=0?2:1;break;case 1:_PyErr_SetString(HEAP[P],Vc);X=0;o=27;break;case 2:o=HEAP[HEAP[ga+32]+16];v=HEAP[ga+32];HEAP[v+8]-=1;X=HEAP[o+4*HEAP[v+8]];o=HEAP[o+4*HEAP[v+8]]==0?27:3;break;case 3:o=(HEAP[HEAP[X+4]+84]&67108864)==0?4:5;break;case 4:_PyErr_SetString(HEAP[P],Ke);o=24;break;case 5:o=HEAP[HEAP[ga+32]+8]!=0?6:7;break;case 6:G=HEAP[HEAP[ga+32]+16];o=HEAP[ga+32];HEAP[o+8]-=1;G=HEAP[G+4*HEAP[o+8]];o=8;break;case 7:_PyErr_SetString(HEAP[P],
Vc);G=0;o=8;break;case 8:J=G;o=G==0?24:9;break;case 9:o=HEAP[HEAP[J+4]+84]>=0?10:11;break;case 10:_PyErr_SetString(HEAP[P],Le);o=24;break;case 11:o=HEAP[J+156]==0?12:13;break;case 12:_PyErr_SetString(HEAP[P],Wc);o=24;break;case 13:Oa=FUNCTION_TABLE[HEAP[J+156]](J,X,0);o=Oa==0?24:14;break;case 14:HEAP[X]-=1;o=HEAP[X]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[X+4]+24]](X);o=16;break;case 16:HEAP[G]-=1;o=HEAP[G]==0?17:18;break;case 17:FUNCTION_TABLE[HEAP[HEAP[G+4]+24]](G);o=18;break;case 18:o=
HEAP[HEAP[ga+32]+8]==HEAP[HEAP[ga+32]+12]?19:23;break;case 19:o=c(HEAP[ga+32])<0?20:23;break;case 20:HEAP[Oa]-=1;o=HEAP[Oa]==0?21:22;break;case 21:FUNCTION_TABLE[HEAP[HEAP[Oa+4]+24]](Oa);o=22;break;case 22:va=-1;o=31;break;case 23:va=HEAP[ga+32];o=HEAP[va+8];HEAP[HEAP[HEAP[ga+32]+16]+4*o]=Oa;HEAP[va+8]=o+1;va=0;o=31;break;case 24:o=X!=0?25:27;break;case 25:HEAP[X]-=1;o=HEAP[X]==0?26:27;break;case 26:FUNCTION_TABLE[HEAP[HEAP[X+4]+24]](X);o=27;break;case 27:o=G!=0?28:30;break;case 28:HEAP[G]-=1;o=HEAP[G]==
0?29:30;break;case 29:FUNCTION_TABLE[HEAP[HEAP[G+4]+24]](G);o=30;break;case 30:va=-1;o=31;break;case 31:g=va;break a;default:assert(0,"bad label: "+o)}g=void 0}g=g<0?58:2;break;case 31:a:{o=j;g=STACKTOP;STACKTOP+=4;_memset(g,0,4);v=void 0;for(v=-1;;)switch(v){case -1:var oa,ec,$,Ma,gc,ab,nc=g;oa=o;gc=Ma=$=0;ab=FUNCTION_TABLE[HEAP[oa+64]](oa,nc);v=ab<0?1:2;break;case 1:ec=-1;v=24;break;case 2:v=ab<=1?3:4;break;case 3:ec=M();v=24;break;case 4:Ma=_PyString_FromStringAndSize(HEAP[nc],ab-1);v=Ma==0?5:
6;break;case 5:ec=-1;v=24;break;case 6:ab=FUNCTION_TABLE[HEAP[oa+64]](oa,nc);v=ab>=0?7:14;break;case 7:v=ab<=1?8:11;break;case 8:HEAP[Ma]-=1;v=HEAP[Ma]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[Ma+4]+24]](Ma);v=10;break;case 10:ec=M();v=24;break;case 11:gc=_PyString_FromStringAndSize(HEAP[nc],ab-1);v=gc!=0?12:14;break;case 12:$=E(Ma,gc,HEAP[oa+76]);HEAP[gc]-=1;v=HEAP[gc]==0?13:14;break;case 13:FUNCTION_TABLE[HEAP[HEAP[gc+4]+24]](gc);v=14;break;case 14:HEAP[Ma]-=1;v=HEAP[Ma]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[Ma+
4]+24]](Ma);v=16;break;case 16:v=$==0?17:18;break;case 17:ec=-1;v=24;break;case 18:v=HEAP[HEAP[oa+32]+8]==HEAP[HEAP[oa+32]+12]?19:23;break;case 19:v=c(HEAP[oa+32])<0?20:23;break;case 20:HEAP[$]-=1;v=HEAP[$]==0?21:22;break;case 21:FUNCTION_TABLE[HEAP[HEAP[$+4]+24]]($);v=22;break;case 22:ec=-1;v=24;break;case 23:ec=HEAP[oa+32];v=HEAP[ec+8];HEAP[HEAP[HEAP[oa+32]+16]+4*v]=$;HEAP[ec+8]=v+1;ec=0;v=24;break;case 24:o=ec;STACKTOP=g;g=o;break a;default:assert(0,"bad label: "+v)}g=void 0}g=g<0?58:2;break;case 32:g=
void 0;g=Ga(j,HEAP[HEAP[j+32]+8]-1);g=g<0?58:2;break;case 33:g=j;o=void 0;o=D(g);o=Ga(g,o);g=o<0?58:2;break;case 34:a:{o=j;g=STACKTOP;STACKTOP+=12;_memset(g,0,12);v=void 0;for(v=-1;;)switch(v){case -1:var Sa,db,zb,na,S,Uc,fb=g,cc=g+4,ja=g+8,xb,Cb,Lc,xc;Sa=o;xb=-1;v=HEAP[HEAP[Sa+32]+8]<=1?1:2;break;case 1:db=b();v=62;break;case 2:v=HEAP[HEAP[Sa+32]+8]!=0?4:3;break;case 3:_PyErr_SetString(HEAP[P],Vc);zb=0;v=5;break;case 4:var v=HEAP[HEAP[Sa+32]+16],Pb=HEAP[Sa+32];HEAP[Pb+8]-=1;zb=HEAP[v+4*HEAP[Pb+8]];
v=HEAP[v+4*HEAP[Pb+8]]==0?5:6;break;case 5:db=-1;v=62;break;case 6:na=HEAP[HEAP[HEAP[Sa+32]+16]+4*(HEAP[HEAP[Sa+32]+8]-1)];Uc=_PyObject_GetAttr(na,HEAP[Rb]);v=Uc!=0?7:27;break;case 7:Cb=0;v=HEAP[Sa+28]!=0?9:8;break;case 8:v=_PyTuple_New(1);HEAP[Sa+28]=v;v=HEAP[Sa+28]!=0?9:13;break;case 9:v=HEAP[HEAP[Sa+28]+12]!=0?10:12;break;case 10:v=HEAP[HEAP[Sa+28]+12];HEAP[v]-=1;v=HEAP[v]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[HEAP[HEAP[Sa+28]+12]+4]+24]](HEAP[HEAP[Sa+28]+12]);v=12;break;case 12:HEAP[HEAP[Sa+
28]+12]=zb;v=15;break;case 13:HEAP[zb]-=1;v=HEAP[zb]==0?14:15;break;case 14:FUNCTION_TABLE[HEAP[HEAP[zb+4]+24]](zb);v=15;break;case 15:v=HEAP[Sa+28]!=0?16:20;break;case 16:Cb=_PyObject_Call(Uc,HEAP[Sa+28],0);v=HEAP[HEAP[Sa+28]]>1?17:20;break;case 17:v=HEAP[Sa+28];HEAP[v]-=1;v=HEAP[v]==0?18:19;break;case 18:FUNCTION_TABLE[HEAP[HEAP[HEAP[Sa+28]+4]+24]](HEAP[Sa+28]);v=19;break;case 19:HEAP[Sa+28]=0;v=20;break;case 20:HEAP[Uc]-=1;v=HEAP[Uc]==0?21:22;break;case 21:FUNCTION_TABLE[HEAP[HEAP[Uc+4]+24]](Uc);
v=22;break;case 22:v=Cb==0?23:24;break;case 23:db=-1;v=62;break;case 24:HEAP[Cb]-=1;v=HEAP[Cb]==0?25:26;break;case 25:FUNCTION_TABLE[HEAP[HEAP[Cb+4]+24]](Cb);v=26;break;case 26:db=0;v=62;break;case 27:v=_PyErr_ExceptionMatches(HEAP[_PyExc_AttributeError])==0?28:29;break;case 28:db=-1;v=62;break;case 29:_PyErr_Clear();v=(HEAP[HEAP[zb+4]+84]&67108864)==0?33:30;break;case 30:v=_PyTuple_Size(zb)!=2?33:31;break;case 31:Lc=zb;zb=HEAP[Lc+12];S=HEAP[Lc+12+4];HEAP[zb]+=1;HEAP[S]+=1;HEAP[Lc]-=1;v=HEAP[Lc]==
0?32:34;break;case 32:FUNCTION_TABLE[HEAP[HEAP[Lc+4]+24]](Lc);v=34;break;case 33:S=0;v=34;break;case 34:v=zb!=__Py_NoneStruct?35:49;break;case 35:v=(HEAP[HEAP[zb+4]+84]&536870912)==0?36:37;break;case 36:_PyErr_SetString(HEAP[P],be);v=56;break;case 37:xc=_PyObject_GetAttr(na,HEAP[mc]);v=xc==0?56:38;break;case 38:HEAP[ja]=0;v=46;break;case 39:HEAP[HEAP[fb]]+=1;v=HEAP[HEAP[fb]+4]==_PyString_Type?40:41;break;case 40:_PyString_InternInPlace(fb);v=41;break;case 41:var v=_PyObject_SetItem(xc,HEAP[fb],HEAP[cc])<
0,ca=HEAP[fb];HEAP[ca]-=1;ca=HEAP[ca]==0;v=v?42:44;break;case 42:v=ca?43:56;break;case 43:FUNCTION_TABLE[HEAP[HEAP[HEAP[fb]+4]+24]](HEAP[fb]);v=56;break;case 44:v=ca?45:46;break;case 45:FUNCTION_TABLE[HEAP[HEAP[HEAP[fb]+4]+24]](HEAP[fb]);v=46;break;case 46:v=_PyDict_Next(zb,ja,fb,cc)!=0?39:47;break;case 47:HEAP[xc]-=1;v=HEAP[xc]==0?48:49;break;case 48:FUNCTION_TABLE[HEAP[HEAP[xc+4]+24]](xc);v=49;break;case 49:v=S!=0?50:55;break;case 50:v=(HEAP[HEAP[S+4]+84]&536870912)==0?51:52;break;case 51:_PyErr_SetString(HEAP[P],
hd);v=56;break;case 52:HEAP[ja]=0;v=54;break;case 53:v=_PyObject_SetAttr(na,HEAP[fb],HEAP[cc])<0?56:54;break;case 54:v=_PyDict_Next(S,ja,fb,cc)!=0?53:55;break;case 55:xb=0;v=56;break;case 56:HEAP[zb]-=1;v=HEAP[zb]==0?57:58;break;case 57:FUNCTION_TABLE[HEAP[HEAP[zb+4]+24]](zb);v=58;break;case 58:v=S!=0?59:61;break;case 59:HEAP[S]-=1;v=HEAP[S]==0?60:61;break;case 60:FUNCTION_TABLE[HEAP[HEAP[S+4]+24]](S);v=61;break;case 61:db=xb;v=62;break;case 62:o=db;STACKTOP=g;g=o;break a;default:assert(0,"bad label: "+
v)}g=void 0}g=g<0?58:2;break;case 35:g=Va(j)<0?58:2;break;case 36:g=Wa(j)<0?58:2;break;case 37:g=ia(j)<0?58:2;break;case 38:g=Ia(j)<0?58:2;break;case 39:g=Ba(j,1)<0?58:2;break;case 40:g=Ba(j,2)<0?58:2;break;case 41:g=Ba(j,4)<0?58:2;break;case 42:g=Fa(j)<0?58:2;break;case 43:g=Ta(j)<0?58:2;break;case 44:g=Ea(j)<0?58:2;break;case 45:g=Xa(j)<0?58:2;break;case 46:g=Ha(j)<0?58:2;break;case 47:g=ta(j)<0?58:2;break;case 48:g=void 0;g=ka(j,HEAP[HEAP[j+32]+8]-2);g=g<0?58:2;break;case 49:g=j;o=void 0;o=D(g);
o=ka(g,o);g=o<0?58:2;break;case 50:g=wa(j)<0?58:2;break;case 51:g=Ya(j)<0?58:2;break;case 52:a:{g=j;o=void 0;for(o=-1;;)switch(o){case -1:var sb,gb,aa,Ja,ua;sb=g;ua=Ja=aa=0;o=HEAP[HEAP[sb+32]+8]!=0?2:1;break;case 1:_PyErr_SetString(HEAP[P],Vc);Ja=0;o=3;break;case 2:o=HEAP[HEAP[sb+32]+16];v=HEAP[sb+32];HEAP[v+8]-=1;Ja=HEAP[o+4*HEAP[v+8]];o=HEAP[o+4*HEAP[v+8]]==0?3:4;break;case 3:gb=-1;o=19;break;case 4:o=HEAP[HEAP[sb+32]+8]!=0?6:5;break;case 5:_PyErr_SetString(HEAP[P],Vc);aa=0;o=9;break;case 6:o=HEAP[HEAP[sb+
32]+16];v=HEAP[sb+32];HEAP[v+8]-=1;aa=HEAP[o+4*HEAP[v+8]];o=HEAP[o+4*HEAP[v+8]]!=0?7:9;break;case 7:ua=Pa(aa,Ja);HEAP[aa]-=1;o=HEAP[aa]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[aa+4]+24]](aa);o=9;break;case 9:HEAP[Ja]-=1;o=HEAP[Ja]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[Ja+4]+24]](Ja);o=11;break;case 11:o=ua==0?12:13;break;case 12:gb=-1;o=19;break;case 13:o=HEAP[HEAP[sb+32]+8]==HEAP[HEAP[sb+32]+12]?14:18;break;case 14:o=c(HEAP[sb+32])<0?15:18;break;case 15:HEAP[ua]-=1;o=HEAP[ua]==0?16:
17;break;case 16:FUNCTION_TABLE[HEAP[HEAP[ua+4]+24]](ua);o=17;break;case 17:gb=-1;o=19;break;case 18:gb=HEAP[sb+32];o=HEAP[gb+8];HEAP[HEAP[HEAP[sb+32]+16]+4*o]=ua;HEAP[gb+8]=o+1;gb=0;o=19;break;case 19:g=gb;break a;default:assert(0,"bad label: "+o)}g=void 0}g=g<0?58:2;break;case 53:g=ma(j)<0?58:2;break;case 54:g=I(j,__Py_TrueStruct)<0?58:2;break;case 55:g=I(j,__Py_ZeroStruct)<0?58:2;break;case 56:_PyErr_SetNone(HEAP[_PyExc_EOFError]);g=58;break;case 57:h(HEAP[P],qd,Ic,allocate([HEAP[HEAP[n]],0,0,
0],["i32",0,0,0],ALLOC_STACK));k=0;g=66;break;case 58:l=g=_PyErr_Occurred();g=g!=0?59:62;break;case 59:g=l==HEAP[_PyExc_EOFError]?60:61;break;case 60:_PyErr_SetNone(HEAP[_PyExc_EOFError]);g=61;break;case 61:k=0;g=66;break;case 62:g=HEAP[HEAP[j+32]+8]!=0?63:64;break;case 63:m=HEAP[HEAP[j+32]+16];g=HEAP[j+32];HEAP[g+8]-=1;m=HEAP[m+4*HEAP[g+8]];g=65;break;case 64:_PyErr_SetString(HEAP[P],Vc);m=0;g=65;break;case 65:k=m;g=66;break;case 66:return e=k,STACKTOP=f,e;default:assert(0,"bad label: "+g)}}function Za(a,
b){var d=STACKTOP;STACKTOP+=4;_memset(d,0,4);var e;for(e=-1;;)switch(e){case -1:var f,g,h,j=d;f=a;g=b;e=g!=1&g!=2&g!=4?1:2;break;case 1:throw ___assert_fail(Dd,Cb,5056,nc),"Reached an unreachable!";case 2:e=FUNCTION_TABLE[HEAP[f+60]](f,j,g)<0?3:4;break;case 3:h=-1;e=8;break;case 4:e=HEAP[HEAP[f+32]+8]==HEAP[HEAP[f+32]+12]?5:7;break;case 5:e=c(HEAP[f+32])<0?6:7;break;case 6:h=-1;e=8;break;case 7:HEAP[__Py_NoneStruct]+=1;e=HEAP[f+32];h=HEAP[e+8];HEAP[HEAP[HEAP[f+32]+16]+4*h]=__Py_NoneStruct;HEAP[e+
8]=h+1;h=0;e=8;break;case 8:return f=h,STACKTOP=d,f;default:assert(0,"bad label: "+e)}}function Ka(a){var b;for(b=-1;;)switch(b){case -1:var c,d,f;c=a;f=__PyObject_GC_New(ld);b=f==0?1:2;break;case 1:d=0;b=18;break;case 2:HEAP[f+12]=0;HEAP[f+28]=0;b=e();HEAP[f+32]=b;HEAP[f+40]=0;HEAP[f+44]=0;HEAP[f+48]=0;HEAP[f+52]=0;HEAP[f+56]=0;HEAP[f+68]=0;HEAP[f+20]=0;HEAP[f+16]=0;HEAP[f+76]=0;b=_PyDict_New();HEAP[f+24]=b;b=HEAP[f+24]==0?15:3;break;case 3:b=HEAP[f+32]==0?15:4;break;case 4:HEAP[c]+=1;HEAP[f+12]=
c;b=HEAP[c+4]==_PyFile_Type?6:5;break;case 5:b=_PyType_IsSubtype(HEAP[c+4],_PyFile_Type)!=0?6:9;break;case 6:b=_PyFile_AsFile(c);HEAP[f+8]=b;b=HEAP[f+8]==0?7:8;break;case 7:_PyErr_SetString(HEAP[_PyExc_ValueError],oe);b=15;break;case 8:HEAP[f+60]=g+12;HEAP[f+64]=g+14;b=14;break;case 9:b=HEAP[c+4]==HEAP[HEAP[Qa]+24];HEAP[f+8]=0;var h=f+60;b=b?10:11;break;case 10:HEAP[h]=g+16;HEAP[f+64]=g+18;b=14;break;case 11:HEAP[h]=g+20;HEAP[f+64]=g+22;b=_PyObject_GetAttr(c,HEAP[Ze]);HEAP[f+16]=b;b=HEAP[f+16]==0?
13:12;break;case 12:b=_PyObject_GetAttr(c,HEAP[Pe]);HEAP[f+20]=b;b=HEAP[f+20]==0?13:14;break;case 13:_PyErr_Clear();_PyErr_SetString(HEAP[_PyExc_TypeError],nf);b=15;break;case 14:_PyObject_GC_Track(f);d=f;b=18;break;case 15:HEAP[f]-=1;b=HEAP[f]==0?16:17;break;case 16:FUNCTION_TABLE[HEAP[HEAP[f+4]+24]](f);b=17;break;case 17:d=0;b=18;break;case 18:return a=d;default:assert(0,"bad label: "+b)}}function Ra(){Ja=allocate([67,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,97,110,100,32,111,
112,116,105,109,105,122,97,116,105,111,110,32,111,102,32,116,104,101,32,80,121,116,104,111,110,32,112,105,99,107,108,101,32,109,111,100,117,108,101,46,0],"i8",ALLOC_NORMAL);ja=allocate([40],["i8",0,0,0,0],ALLOC_NORMAL);ua=allocate([99,80,105,99,107,108,101,46,80,100,97,116,97,0],"i8",ALLOC_NORMAL);bb=allocate(1,"i8",ALLOC_NORMAL);qa=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",
0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",
0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);P=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);hb=allocate([117,110,112,105,99,107,108,105,110,103,32,115,116,97,99,107,32,117,110,100,101,114,102,108,111,119,0],"i8",ALLOC_NORMAL);Qa=allocate(1,"%struct.PycStringIO_CAPI*",ALLOC_NORMAL);mb=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);S=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Ca=allocate([110,111,32,105,110,116,32,119,104,101,114,101,32,105,110,116,
32,101,120,112,101,99,116,101,100,32,105,110,32,109,101,109,111,0],"i8",ALLOC_NORMAL);pa=allocate([37,108,100,10,0],"i8",ALLOC_NORMAL);Aa=allocate([37,100,10,0],"i8",ALLOC_NORMAL);ob=allocate([95,95,109,111,100,117,108,101,95,95,0],"i8",ALLOC_NORMAL);ib=allocate([109,111,100,117,108,101,115,0],"i8",ALLOC_NORMAL);ca=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);na=allocate([102,97,115,116,32,109,111,100,101,58,32,99,97,110,39,116,32,112,105,99,107,108,101,32,99,121,99,108,105,99,32,111,98,106,101,99,
116,115,32,105,110,99,108,117,100,105,110,103,32,111,98,106,101,99,116,32,116,121,112,101,32,37,115,32,97,116,32,37,112,0],"i8",ALLOC_NORMAL);O=allocate([78],["i8",0,0,0,0],ALLOC_NORMAL);Ma=allocate([4,4],"i8",ALLOC_NORMAL);$=allocate(8,"i8*",ALLOC_NORMAL);ga=allocate([73,48,48,10,0],"i8",ALLOC_NORMAL);Sa=allocate([73,48,49,10,0],"i8",ALLOC_NORMAL);X=allocate([108,111,110,103,32,116,111,111,32,108,97,114,103,101,32,116,111,32,112,105,99,107,108,101,0],"i8",ALLOC_NORMAL);oa=allocate([76],["i8",0,0,
0,0],ALLOC_NORMAL);ab=allocate([10,0],"i8",ALLOC_NORMAL);Oa=allocate([83],["i8",0,0,0,0],ALLOC_NORMAL);va=allocate([48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0],"i8",ALLOC_NORMAL);U=allocate([86],["i8",0,0,0,0],ALLOC_NORMAL);fb=allocate([80,121,84,117,112,108,101,95,83,105,122,101,40,116,41,32,61,61,32,108,101,110,0],"i8",ALLOC_NORMAL);Cb=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,99,80,105,99,107,108,101,46,99,0],"i8",ALLOC_NORMAL);xb=allocate([115,116,
111,114,101,95,116,117,112,108,101,95,101,108,101,109,101,110,116,115,0],"i8",ALLOC_NORMAL);db=allocate([48],["i8",0,0,0,0],ALLOC_NORMAL);gb=allocate([41,133,134,135],"i8",ALLOC_NORMAL);rb=allocate([49],["i8",0,0,0,0],ALLOC_NORMAL);sb=allocate([116],["i8",0,0,0,0],ALLOC_NORMAL);Kb=allocate([105,116,101,114,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0],"i8",ALLOC_NORMAL);Gb=allocate([98,97,116,99,104,95,108,105,115,116,0],"i8",ALLOC_NORMAL);Nb=allocate([97],["i8",0,0,0,0],ALLOC_NORMAL);Ab=allocate([101],
["i8",0,0,0,0],ALLOC_NORMAL);Sb=allocate([32,119,104,105,108,101,32,112,105,99,107,108,105,110,103,32,97,110,32,111,98,106,101,99,116,0],"i8",ALLOC_NORMAL);pb=allocate([98,97,116,99,104,95,100,105,99,116,0],"i8",ALLOC_NORMAL);Mb=allocate([100,105,99,116,32,105,116,101,109,115,32,105,116,101,114,97,116,111,114,32,109,117,115,116,32,114,101,116,117,114,110,32,50,45,116,117,112,108,101,115,0],"i8",ALLOC_NORMAL);tb=allocate([115],["i8",0,0,0,0],ALLOC_NORMAL);Hb=allocate([117],["i8",0,0,0,0],ALLOC_NORMAL);
da=allocate([111,98,106,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0],"i8",ALLOC_NORMAL);Jb=allocate([98,97,116,99,104,95,100,105,99,116,95,101,120,97,99,116,0],"i8",ALLOC_NORMAL);jb=allocate([115,101,108,102,45,62,112,114,111,116,111,32,62,32,48,0],"i8",ALLOC_NORMAL);bc=allocate([115],["i8",0,0,0,0],ALLOC_NORMAL);Wb=allocate([117],["i8",0,0,0,0],ALLOC_NORMAL);lb=allocate([100,105,99,116,105,111,110,97,114,121,32,99,104,97,110,103,101,100,32,115,105,122,101,32,100,117,114,105,110,103,32,105,
116,101,114,97,116,105,111,110,0],"i8",ALLOC_NORMAL);kb=allocate([105,116,101,114,105,116,101,109,115,0],"i8",ALLOC_NORMAL);Lb=allocate([40,41,0],"i8",ALLOC_NORMAL);Eb=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Yb=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);yb=allocate([99,108,97,115,115,32,104,97,115,32,110,111,32,110,97,109,101,0],"i8",ALLOC_NORMAL);fc=allocate([105],["i8",0,0,0,0],ALLOC_NORMAL);zb=allocate([111],["i8",0,0,0,0],ALLOC_NORMAL);jc=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);mc=
allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Xb=allocate([98],["i8",0,0,0,0],ALLOC_NORMAL);qc=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);tc=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,105,109,112,111,114,116,32,111,102,32,109,111,100,117,108,101,32,37,115,32,102,97,105,108,101,100,0],"i8",ALLOC_NORMAL);vb=allocate([79,83,0],"i8",ALLOC_NORMAL);eb=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,97,116,116,114,105,98,117,116,101,32,108,111,111,107,117,
112,32,37,115,46,37,115,32,102,97,105,108,101,100,0],"i8",ALLOC_NORMAL);Tb=allocate([79,83,83,0],"i8",ALLOC_NORMAL);oc=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,105,116,39,115,32,110,111,116,32,116,104,101,32,115,97,109,101,32,111,98,106,101,99,116,32,97,115,32,37,115,46,37,115,0],"i8",ALLOC_NORMAL);Fb=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Pb=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Vb=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,101,120,
116,101,110,115,105,111,110,32,99,111,100,101,32,37,115,32,105,115,110,39,116,32,97,110,32,105,110,116,101,103,101,114,0],"i8",ALLOC_NORMAL);Dc=allocate([79,79,0],"i8",ALLOC_NORMAL);yc=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,101,120,116,101,110,115,105,111,110,32,99,111,100,101,32,37,108,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0],"i8",ALLOC_NORMAL);Kc=allocate([79,108,0],"i8",ALLOC_NORMAL);sa=allocate([99],["i8",0,0,0,0],ALLOC_NORMAL);Bb=allocate([112,
101,114,115,105,115,116,101,110,116,32,105,100,32,109,117,115,116,32,98,101,32,115,116,114,105,110,103,0],"i8",ALLOC_NORMAL);cb=allocate([80],["i8",0,0,0,0],ALLOC_NORMAL);Nc=allocate([81],["i8",0,0,0,0],ALLOC_NORMAL);ic=allocate([116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,99,111,110,116,97,105,110,32,50,32,116,104,114,111,117,103,104,32,53,32,101,108,101,109,101,110,116,115,0],"i8",ALLOC_NORMAL);$b=allocate([79,0],"i8",ALLOC_NORMAL);Qb=allocate([115,
97,118,101,95,114,101,100,117,99,101,0],"i8",ALLOC_NORMAL);uc=allocate([83,101,99,111,110,100,32,101,108,101,109,101,110,116,32,111,102,32,116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,97,32,116,117,112,108,101,0],"i8",ALLOC_NORMAL);Gc=allocate([70,111,117,114,116,104,32,101,108,101,109,101,110,116,32,111,102,32,116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,97,110,32,105,116,101,
114,97,116,111,114,44,32,110,111,116,32,37,115,0],"i8",ALLOC_NORMAL);pc=allocate([79,115,0],"i8",ALLOC_NORMAL);Zb=allocate([70,105,102,116,104,32,101,108,101,109,101,110,116,32,111,102,32,116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,97,110,32,105,116,101,114,97,116,111,114,44,32,110,111,116,32,37,115,0],"i8",ALLOC_NORMAL);wc=allocate([95,95,110,101,119,111,98,106,95,95,0],"i8",ALLOC_NORMAL);sc=allocate([95,95,110,101,119,111,98,106,95,
95,32,97,114,103,108,105,115,116,32,105,115,32,101,109,112,116,121,0],"i8",ALLOC_NORMAL);Oc=allocate([95,95,110,101,119,95,95,0],"i8",ALLOC_NORMAL);Zc=allocate([97,114,103,115,91,48,93,32,102,114,111,109,32,95,95,110,101,119,111,98,106,95,95,32,97,114,103,115,32,104,97,115,32,110,111,32,95,95,110,101,119,95,95,0],"i8",ALLOC_NORMAL);yd=allocate([97,114,103,115,91,48,93,32,102,114,111,109,32,95,95,110,101,119,111,98,106,95,95,32,97,114,103,115,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,
99,108,97,115,115,0],"i8",ALLOC_NORMAL);Tc=allocate([-127],["i8",0,0,0,0],ALLOC_NORMAL);sd=allocate([82],["i8",0,0,0,0],ALLOC_NORMAL);nd=allocate([98],["i8",0,0,0,0],ALLOC_NORMAL);zc=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Pc=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Ec=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);zd=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Uc=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);ec=allocate([86,97,108,117,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,
115,32,109,117,115,116,32,98,101,32,115,116,114,105,110,103,32,111,114,32,116,117,112,108,101,0],"i8",ALLOC_NORMAL);xa=allocate([115,101,108,102,45,62,112,114,111,116,111,32,62,61,32,48,32,38,38,32,115,101,108,102,45,62,112,114,111,116,111,32,60,32,50,53,54,0],"i8",ALLOC_NORMAL);gc=allocate([46],["i8",0,0,0,0],ALLOC_NORMAL);Lc=allocate([124,105,58,103,101,116,118,97,108,117,101,0],"i8",ALLOC_NORMAL);xc=allocate([65,116,116,101,109,112,116,32,116,111,32,103,101,116,118,97,108,117,101,40,41,32,97,32,
110,111,110,45,108,105,115,116,45,98,97,115,101,100,32,112,105,99,107,108,101,114,0],"i8",ALLOC_NORMAL);cc=allocate([73,110,118,97,108,105,100,32,103,101,116,32,100,97,116,97,0],"i8",ALLOC_NORMAL);Ad=allocate([85,110,101,120,112,101,99,116,101,100,32,100,97,116,97,32,105,110,32,105,110,116,101,114,110,97,108,32,108,105,115,116,0],"i8",ALLOC_NORMAL);Bd=allocate([79,124,105,58,100,117,109,112,0],"i8",ALLOC_NORMAL);nb=allocate([100,117,109,112,0],"i8",ALLOC_NORMAL);Kd=allocate([100,117,109,112,40,111,
98,106,101,99,116,41,32,45,45,32,87,114,105,116,101,32,97,110,32,111,98,106,101,99,116,32,105,110,32,112,105,99,107,108,101,32,102,111,114,109,97,116,32,116,111,32,116,104,101,32,111,98,106,101,99,116,39,115,32,112,105,99,107,108,101,32,115,116,114,101,97,109,0],"i8",ALLOC_NORMAL);Nd=allocate([99,108,101,97,114,95,109,101,109,111,0],"i8",ALLOC_NORMAL);Gd=allocate([99,108,101,97,114,95,109,101,109,111,40,41,32,45,45,32,67,108,101,97,114,32,116,104,101,32,112,105,99,107,108,101,114,115,32,109,101,109,
111,0],"i8",ALLOC_NORMAL);Je=allocate([103,101,116,118,97,108,117,101,0],"i8",ALLOC_NORMAL);Od=allocate([103,101,116,118,97,108,117,101,40,41,32,45,45,32,70,105,110,105,115,104,32,112,105,99,107,105,110,103,32,97,32,108,105,115,116,45,98,97,115,101,100,32,112,105,99,107,108,101,0],"i8",ALLOC_NORMAL);fd=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",
0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);Ld=allocate([112,105,99,107,108,101,32,112,114,111,116,111,99,111,108,32,37,100,32,97,115,107,101,100,32,102,111,114,59,32,116,104,101,
32,104,105,103,104,101,115,116,32,97,118,97,105,108,97,98,108,101,32,112,114,111,116,111,99,111,108,32,105,115,32,37,100,0],"i8",ALLOC_NORMAL);oe=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,0],"i8",ALLOC_NORMAL);Yd=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Pd=allocate([97,114,103,117,109,101,110,116,32,109,117,115,116,32,104,97,118,101,32,39,119,114,105,116,101,39,32,97,116,116,114,105,98,117,116,101,0],"i8",ALLOC_NORMAL);vc=
allocate([99,111,112,121,95,114,101,103,0],"i8",ALLOC_NORMAL);Md=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Fe=allocate([124,105,58,80,105,99,107,108,101,114,0],"i8",ALLOC_NORMAL);ye=allocate([79,124,105,58,80,105,99,107,108,101,114,0],"i8",ALLOC_NORMAL);Hd=allocate(12,"i8*",ALLOC_NORMAL);ze=allocate([102,105,108,101,0],"i8",ALLOC_NORMAL);Id=allocate([112,114,111,116,111,99,111,108,0],"i8",ALLOC_NORMAL);de=allocate([112,101,114,115,105,115,116,101,110,116,95,105,100,0],"i8",ALLOC_NORMAL);ee=allocate([97,
116,116,114,105,98,117,116,101,32,100,101,108,101,116,105,111,110,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0],"i8",ALLOC_NORMAL);fe=allocate([109,101,109,111,0],"i8",ALLOC_NORMAL);pe=allocate([109,101,109,111,32,109,117,115,116,32,98,101,32,97,32,100,105,99,116,105,111,110,97,114,121,0],"i8",ALLOC_NORMAL);Db=allocate([98,105,110,97,114,121,0],"i8",ALLOC_NORMAL);ge=allocate([102,97,115,116,0],"i8",ALLOC_NORMAL);Zd=allocate([0,0,0,0,1,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);$d=allocate([105,110,115,116,95,112,101,114,115,105,115,116,101,110,116,95,105,100,0],"i8",ALLOC_NORMAL);ie=allocate([80,105,99,107,108,105,110,103,69,114,114,111,114,0],
"i8",ALLOC_NORMAL);ad=allocate(100,["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8",
"i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);Rd=allocate([79,98,106,101,99,116,115,32,116,104,97,116,32,107,110,111,119,32,104,111,119,32,116,111,32,112,105,99,107,108,101,32,111,98,106,101,99,116,115,10,0],"i8",ALLOC_NORMAL);vd=allocate([99,80,105,99,107,108,101,
46,80,105,99,107,108,101,114,0],"i8",ALLOC_NORMAL);Qc=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148971,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32",0,0,0,"%struct._typeobject*",0,
0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",
0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",
0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);je=allocate([71,108,111,98,97,108,32,97,110,100,32,105,
110,115,116,97,110,99,101,32,112,105,99,107,108,101,115,32,97,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0],"i8",ALLOC_NORMAL);re=allocate([99,111,117,108,100,32,110,111,116,32,102,105,110,100,32,77,65,82,75,0],"i8",ALLOC_NORMAL);se=allocate([112,105,99,107,108,101,32,100,97,116,97,32,119,97,115,32,116,114,117,110,99,97,116,101,100,0],"i8",ALLOC_NORMAL);Ob=allocate([99,111,117,108,100,32,110,111,116,32,99,111,110,118,101,114,116,32,115,116,114,105,110,103,32,116,111,32,105,110,
116,0],"i8",ALLOC_NORMAL);Be=allocate([98,111,111,108,101,97,110,32,61,61,32,40,40,80,121,79,98,106,101,99,116,32,42,41,32,38,95,80,121,95,84,114,117,101,83,116,114,117,99,116,41,32,124,124,32,98,111,111,108,101,97,110,32,61,61,32,40,40,80,121,79,98,106,101,99,116,32,42,41,32,38,95,80,121,95,90,101,114,111,83,116,114,117,99,116,41,0],"i8",ALLOC_NORMAL);te=allocate([108,111,97,100,95,98,111,111,108,0],"i8",ALLOC_NORMAL);wb=allocate([115,105,122,101,32,61,61,32,49,32,124,124,32,115,105,122,101,32,61,
61,32,52,0],"i8",ALLOC_NORMAL);aa=allocate([108,111,97,100,95,99,111,117,110,116,101,100,95,108,111,110,103,0],"i8",ALLOC_NORMAL);Hc=allocate([76,79,78,71,32,112,105,99,107,108,101,32,104,97,115,32,110,101,103,97,116,105,118,101,32,98,121,116,101,32,99,111,117,110,116,0],"i8",ALLOC_NORMAL);ae=allocate([99,111,117,108,100,32,110,111,116,32,99,111,110,118,101,114,116,32,115,116,114,105,110,103,32,116,111,32,102,108,111,97,116,0],"i8",ALLOC_NORMAL);qe=allocate([105,110,115,101,99,117,114,101,32,115,
116,114,105,110,103,32,112,105,99,107,108,101,0],"i8",ALLOC_NORMAL);ue=allocate([66,73,78,83,84,82,73,78,71,32,112,105,99,107,108,101,32,104,97,115,32,110,101,103,97,116,105,118,101,32,98,121,116,101,32,99,111,117,110,116,0],"i8",ALLOC_NORMAL);wd=allocate([66,73,78,85,78,73,67,79,68,69,32,112,105,99,107,108,101,32,104,97,115,32,110,101,103,97,116,105,118,101,32,98,121,116,101,32,99,111,117,110,116,0],"i8",ALLOC_NORMAL);Vc=allocate([98,97,100,32,112,105,99,107,108,101,32,100,97,116,97,0],"i8",ALLOC_NORMAL);
Ke=allocate([78,69,87,79,66,74,32,101,120,112,101,99,116,101,100,32,97,110,32,97,114,103,32,116,117,112,108,101,46,0],"i8",ALLOC_NORMAL);Le=allocate([78,69,87,79,66,74,32,99,108,97,115,115,32,97,114,103,117,109,101,110,116,32,105,115,110,39,116,32,97,32,116,121,112,101,32,111,98,106,101,99,116,0],"i8",ALLOC_NORMAL);Wc=allocate([78,69,87,79,66,74,32,99,108,97,115,115,32,97,114,103,117,109,101,110,116,32,104,97,115,32,78,85,76,76,32,116,112,95,110,101,119,0],"i8",ALLOC_NORMAL);Ce=allocate([65,32,108,
111,97,100,32,112,101,114,115,105,115,116,101,110,116,32,105,100,32,105,110,115,116,114,117,99,116,105,111,110,32,119,97,115,32,101,110,99,111,117,110,116,101,114,101,100,44,10,98,117,116,32,110,111,32,112,101,114,115,105,115,116,101,110,116,95,108,111,97,100,32,102,117,110,99,116,105,111,110,32,119,97,115,32,115,112,101,99,105,102,105,101,100,46,0],"i8",ALLOC_NORMAL);Fc=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Dd=allocate([110,98,121,116,101,115,32,61,61,32,49,32,124,124,32,110,98,121,116,101,
115,32,61,61,32,50,32,124,124,32,110,98,121,116,101,115,32,61,61,32,52,0],"i8",ALLOC_NORMAL);De=allocate([108,111,97,100,95,101,120,116,101,110,115,105,111,110,0],"i8",ALLOC_NORMAL);xd=allocate([69,88,84,32,115,112,101,99,105,102,105,101,115,32,99,111,100,101,32,60,61,32,48,0],"i8",ALLOC_NORMAL);cd=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Ed=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Ge=allocate([117,110,114,101,103,105,115,116,101,114,101,100,32,101,120,116,101,110,115,105,111,110,32,99,111,
100,101,32,37,108,100,0],"i8",ALLOC_NORMAL);ub=allocate([95,105,110,118,101,114,116,101,100,95,114,101,103,105,115,116,114,121,91,37,108,100,93,32,105,115,110,39,116,32,97,32,50,45,116,117,112,108,101,32,111,102,32,115,116,114,105,110,103,115,0],"i8",ALLOC_NORMAL);gd=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Rb=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);be=allocate([115,116,97,116,101,32,105,115,32,110,111,116,32,97,32,100,105,99,116,105,111,110,97,114,121,0],"i8",ALLOC_NORMAL);hd=allocate([115,
108,111,116,32,115,116,97,116,101,32,105,115,32,110,111,116,32,97,32,100,105,99,116,105,111,110,97,114,121,0],"i8",ALLOC_NORMAL);dd=allocate([105,32,62,61,32,48,0],"i8",ALLOC_NORMAL);id=allocate([108,111,97,100,95,112,114,111,116,111,0],"i8",ALLOC_NORMAL);jd=allocate([117,110,115,117,112,112,111,114,116,101,100,32,112,105,99,107,108,101,32,112,114,111,116,111,99,111,108,58,32,37,100,0],"i8",ALLOC_NORMAL);qd=allocate([105,110,118,97,108,105,100,32,108,111,97,100,32,107,101,121,44,32,39,37,115,39,46,
0],"i8",ALLOC_NORMAL);Ic=allocate([99,0],"i8",ALLOC_NORMAL);nc=allocate([110,111,108,111,97,100,95,101,120,116,101,110,115,105,111,110,0],"i8",ALLOC_NORMAL);kd=allocate([108,111,97,100,0],"i8",ALLOC_NORMAL);Sd=allocate([108,111,97,100,40,41,32,45,45,32,76,111,97,100,32,97,32,112,105,99,107,108,101,0],"i8",ALLOC_NORMAL);$c=allocate([110,111,108,111,97,100,0],"i8",ALLOC_NORMAL);Ye=allocate([110,111,108,111,97,100,40,41,32,45,45,32,110,111,116,32,108,111,97,100,32,97,32,112,105,99,107,108,101,44,32,
98,117,116,32,103,111,32,116,104,114,111,117,103,104,32,109,111,115,116,32,111,102,32,116,104,101,32,109,111,116,105,111,110,115,10,10,84,104,105,115,32,102,117,110,99,116,105,111,110,32,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,114,101,97,100,32,112,97,115,116,32,97,32,112,105,99,107,108,101,32,119,105,116,104,111,117,116,32,105,110,115,116,97,110,116,105,97,116,105,110,103,10,97,110,121,32,111,98,106,101,99,116,115,32,111,114,32,105,109,112,111,114,116,105,110,103,32,97,110,121,32,109,
111,100,117,108,101,115,46,32,32,73,116,32,99,97,110,32,97,108,115,111,32,98,101,32,117,115,101,100,32,116,111,32,102,105,110,100,32,97,108,108,10,112,101,114,115,105,115,116,101,110,116,32,114,101,102,101,114,101,110,99,101,115,32,119,105,116,104,111,117,116,32,105,110,115,116,97,110,116,105,97,116,105,110,103,32,97,110,121,32,111,98,106,101,99,116,115,32,111,114,32,105,109,112,111,114,116,105,110,103,10,97,110,121,32,109,111,100,117,108,101,115,46,10,0],"i8",ALLOC_NORMAL);Bc=allocate([0,0,0,0,0,
0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);Ze=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);Pe=allocate(1,"%struct.PyObject*",
ALLOC_NORMAL);nf=allocate([97,114,103,117,109,101,110,116,32,109,117,115,116,32,104,97,118,101,32,39,114,101,97,100,39,32,97,110,100,32,39,114,101,97,100,108,105,110,101,39,32,97,116,116,114,105,98,117,116,101,115,0],"i8",ALLOC_NORMAL);sf=allocate([112,101,114,115,105,115,116,101,110,116,95,108,111,97,100,0],"i8",ALLOC_NORMAL);ce=allocate([102,105,110,100,95,103,108,111,98,97,108,0],"i8",ALLOC_NORMAL);Me=allocate([85,110,112,105,99,107,108,105,110,103,69,114,114,111,114,0],"i8",ALLOC_NORMAL);Qe=allocate([79,
79,124,105,0],"i8",ALLOC_NORMAL);Td=allocate(16,"i8*",ALLOC_NORMAL);$e=allocate([111,98,106,0],"i8",ALLOC_NORMAL);ff=allocate([79,124,105,58,100,117,109,112,115,0],"i8",ALLOC_NORMAL);af=allocate(12,"i8*",ALLOC_NORMAL);Ub=allocate([83,58,108,111,97,100,115,0],"i8",ALLOC_NORMAL);Se=allocate([79,98,106,101,99,116,115,32,116,104,97,116,32,107,110,111,119,32,104,111,119,32,116,111,32,117,110,112,105,99,107,108,101,0],"i8",ALLOC_NORMAL);bd=allocate([99,80,105,99,107,108,101,46,85,110,112,105,99,107,108,
101,114,0],"i8",ALLOC_NORMAL);ld=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148971,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",
0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",
0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);of=allocate([100,117,109,112,40,111,98,106,44,32,102,105,108,101,44,32,112,114,111,116,111,99,111,108,61,48,41,32,45,45,32,87,114,105,116,101,32,97,110,32,111,98,
106,101,99,116,32,105,110,32,112,105,99,107,108,101,32,102,111,114,109,97,116,32,116,111,32,116,104,101,32,103,105,118,101,110,32,102,105,108,101,46,10,10,83,101,101,32,116,104,101,32,80,105,99,107,108,101,114,32,100,111,99,115,116,114,105,110,103,32,102,111,114,32,116,104,101,32,109,101,97,110,105,110,103,32,111,102,32,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,112,114,111,116,111,46,0],"i8",ALLOC_NORMAL);tf=allocate([100,117,109,112,115,0],"i8",ALLOC_NORMAL);pf=allocate([100,
117,109,112,115,40,111,98,106,44,32,112,114,111,116,111,99,111,108,61,48,41,32,45,45,32,82,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,99,111,110,116,97,105,110,105,110,103,32,97,110,32,111,98,106,101,99,116,32,105,110,32,112,105,99,107,108,101,32,102,111,114,109,97,116,46,10,10,83,101,101,32,116,104,101,32,80,105,99,107,108,101,114,32,100,111,99,115,116,114,105,110,103,32,102,111,114,32,116,104,101,32,109,101,97,110,105,110,103,32,111,102,32,111,112,116,105,111,110,97,108,32,97,114,103,
117,109,101,110,116,32,112,114,111,116,111,46,0],"i8",ALLOC_NORMAL);xf=allocate([108,111,97,100,40,102,105,108,101,41,32,45,45,32,76,111,97,100,32,97,32,112,105,99,107,108,101,32,102,114,111,109,32,116,104,101,32,103,105,118,101,110,32,102,105,108,101,0],"i8",ALLOC_NORMAL);yf=allocate([108,111,97,100,115,0],"i8",ALLOC_NORMAL);zf=allocate([108,111,97,100,115,40,115,116,114,105,110,103,41,32,45,45,32,76,111,97,100,32,97,32,112,105,99,107,108,101,32,102,114,111,109,32,116,104,101,32,103,105,118,101,
110,32,115,116,114,105,110,103,0],"i8",ALLOC_NORMAL);Af=allocate([80,105,99,107,108,101,114,0],"i8",ALLOC_NORMAL);Bf=allocate([80,105,99,107,108,101,114,40,102,105,108,101,44,32,112,114,111,116,111,99,111,108,61,48,41,32,45,45,32,67,114,101,97,116,101,32,97,32,112,105,99,107,108,101,114,46,10,10,84,104,105,115,32,116,97,107,101,115,32,97,32,102,105,108,101,45,108,105,107,101,32,111,98,106,101,99,116,32,102,111,114,32,119,114,105,116,105,110,103,32,97,32,112,105,99,107,108,101,32,100,97,116,97,32,
115,116,114,101,97,109,46,10,84,104,101,32,111,112,116,105,111,110,97,108,32,112,114,111,116,111,32,97,114,103,117,109,101,110,116,32,116,101,108,108,115,32,116,104,101,32,112,105,99,107,108,101,114,32,116,111,32,117,115,101,32,116,104,101,32,103,105,118,101,110,10,112,114,111,116,111,99,111,108,59,32,115,117,112,112,111,114,116,101,100,32,112,114,111,116,111,99,111,108,115,32,97,114,101,32,48,44,32,49,44,32,50,46,32,32,84,104,101,32,100,101,102,97,117,108,116,10,112,114,111,116,111,99,111,108,32,
105,115,32,48,44,32,116,111,32,98,101,32,98,97,99,107,119,97,114,100,115,32,99,111,109,112,97,116,105,98,108,101,46,32,32,40,80,114,111,116,111,99,111,108,32,48,32,105,115,32,116,104,101,10,111,110,108,121,32,112,114,111,116,111,99,111,108,32,116,104,97,116,32,99,97,110,32,98,101,32,119,114,105,116,116,101,110,32,116,111,32,97,32,102,105,108,101,32,111,112,101,110,101,100,32,105,110,32,116,101,120,116,10,109,111,100,101,32,97,110,100,32,114,101,97,100,32,98,97,99,107,32,115,117,99,99,101,115,115,
102,117,108,108,121,46,32,32,87,104,101,110,32,117,115,105,110,103,32,97,32,112,114,111,116,111,99,111,108,32,104,105,103,104,101,114,10,116,104,97,110,32,48,44,32,109,97,107,101,32,115,117,114,101,32,116,104,101,32,102,105,108,101,32,105,115,32,111,112,101,110,101,100,32,105,110,32,98,105,110,97,114,121,32,109,111,100,101,44,32,98,111,116,104,32,119,104,101,110,10,112,105,99,107,108,105,110,103,32,97,110,100,32,117,110,112,105,99,107,108,105,110,103,46,41,10,10,80,114,111,116,111,99,111,108,32,49,
32,105,115,32,109,111,114,101,32,101,102,102,105,99,105,101,110,116,32,116,104,97,110,32,112,114,111,116,111,99,111,108,32,48,59,32,112,114,111,116,111,99,111,108,32,50,32,105,115,10,109,111,114,101,32,101,102,102,105,99,105,101,110,116,32,116,104,97,110,32,112,114,111,116,111,99,111,108,32,49,46,10,10,83,112,101,99,105,102,121,105,110,103,32,97,32,110,101,103,97,116,105,118,101,32,112,114,111,116,111,99,111,108,32,118,101,114,115,105,111,110,32,115,101,108,101,99,116,115,32,116,104,101,32,104,105,
103,104,101,115,116,10,112,114,111,116,111,99,111,108,32,118,101,114,115,105,111,110,32,115,117,112,112,111,114,116,101,100,46,32,32,84,104,101,32,104,105,103,104,101,114,32,116,104,101,32,112,114,111,116,111,99,111,108,32,117,115,101,100,44,32,116,104,101,10,109,111,114,101,32,114,101,99,101,110,116,32,116,104,101,32,118,101,114,115,105,111,110,32,111,102,32,80,121,116,104,111,110,32,110,101,101,100,101,100,32,116,111,32,114,101,97,100,32,116,104,101,32,112,105,99,107,108,101,10,112,114,111,100,
117,99,101,100,46,10,10,84,104,101,32,102,105,108,101,32,112,97,114,97,109,101,116,101,114,32,109,117,115,116,32,104,97,118,101,32,97,32,119,114,105,116,101,40,41,32,109,101,116,104,111,100,32,116,104,97,116,32,97,99,99,101,112,116,115,32,97,32,115,105,110,103,108,101,10,115,116,114,105,110,103,32,97,114,103,117,109,101,110,116,46,32,32,73,116,32,99,97,110,32,116,104,117,115,32,98,101,32,97,110,32,111,112,101,110,32,102,105,108,101,32,111,98,106,101,99,116,44,32,97,32,83,116,114,105,110,103,73,79,
10,111,98,106,101,99,116,44,32,111,114,32,97,110,121,32,111,116,104,101,114,32,99,117,115,116,111,109,32,111,98,106,101,99,116,32,116,104,97,116,32,109,101,101,116,115,32,116,104,105,115,32,105,110,116,101,114,102,97,99,101,46,10,0],"i8",ALLOC_NORMAL);Cf=allocate([85,110,112,105,99,107,108,101,114,0],"i8",ALLOC_NORMAL);Df=allocate([85,110,112,105,99,107,108,101,114,40,102,105,108,101,41,32,45,45,32,67,114,101,97,116,101,32,97,110,32,117,110,112,105,99,107,108,101,114,46,0],"i8",ALLOC_NORMAL);md=allocate([0,
0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,
0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);uf=allocate([95,95,99,108,97,115,115,
95,95,0],"i8",ALLOC_NORMAL);Ef=allocate([95,95,103,101,116,105,110,105,116,97,114,103,115,95,95,0],"i8",ALLOC_NORMAL);hc=allocate([95,95,100,105,99,116,95,95,0],"i8",ALLOC_NORMAL);Ff=allocate([95,95,103,101,116,115,116,97,116,101,95,95,0],"i8",ALLOC_NORMAL);lc=allocate([95,95,115,101,116,115,116,97,116,101,95,95,0],"i8",ALLOC_NORMAL);vf=allocate([95,95,110,97,109,101,95,95,0],"i8",ALLOC_NORMAL);Cc=allocate([95,95,109,97,105,110,95,95,0],"i8",ALLOC_NORMAL);Gf=allocate([95,95,114,101,100,117,99,101,
95,95,0],"i8",ALLOC_NORMAL);Hf=allocate([95,95,114,101,100,117,99,101,95,101,120,95,95,0],"i8",ALLOC_NORMAL);He=allocate([119,114,105,116,101,0],"i8",ALLOC_NORMAL);If=allocate([97,112,112,101,110,100,0],"i8",ALLOC_NORMAL);Rc=allocate([114,101,97,100,0],"i8",ALLOC_NORMAL);Jf=allocate([114,101,97,100,108,105,110,101,0],"i8",ALLOC_NORMAL);Kf=allocate([100,105,115,112,97,116,99,104,95,116,97,98,108,101,0],"i8",ALLOC_NORMAL);qf=allocate([95,101,120,116,101,110,115,105,111,110,95,114,101,103,105,115,116,
114,121,0],"i8",ALLOC_NORMAL);Lf=allocate([95,105,110,118,101,114,116,101,100,95,114,101,103,105,115,116,114,121,0],"i8",ALLOC_NORMAL);Mf=allocate([95,101,120,116,101,110,115,105,111,110,95,99,97,99,104,101,0],"i8",ALLOC_NORMAL);lg=allocate([95,95,98,117,105,108,116,105,110,95,95,0],"i8",ALLOC_NORMAL);za=allocate([95,95,98,117,105,108,116,105,110,115,95,95,0],"i8",ALLOC_NORMAL);Nf=allocate([100,101,102,32,95,95,115,116,114,95,95,40,115,101,108,102,41,58,10,32,32,114,101,116,117,114,110,32,115,101,
108,102,46,97,114,103,115,32,97,110,100,32,40,39,37,115,39,32,37,32,115,101,108,102,46,97,114,103,115,91,48,93,41,32,111,114,32,39,40,119,104,97,116,41,39,10,0],"i8",ALLOC_NORMAL);Ne=allocate([99,80,105,99,107,108,101,46,80,105,99,107,108,101,69,114,114,111,114,0],"i8",ALLOC_NORMAL);cg=allocate([99,80,105,99,107,108,101,46,80,105,99,107,108,105,110,103,69,114,114,111,114,0],"i8",ALLOC_NORMAL);ve=allocate([100,101,102,32,95,95,115,116,114,95,95,40,115,101,108,102,41,58,10,32,32,97,61,115,101,108,102,
46,97,114,103,115,10,32,32,97,61,97,32,97,110,100,32,116,121,112,101,40,97,91,48,93,41,32,111,114,32,39,40,119,104,97,116,41,39,10,32,32,114,101,116,117,114,110,32,39,67,97,110,110,111,116,32,112,105,99,107,108,101,32,37,115,32,111,98,106,101,99,116,115,39,32,37,32,97,10,0],"i8",ALLOC_NORMAL);mg=allocate([99,80,105,99,107,108,101,46,85,110,112,105,99,107,108,101,97,98,108,101,69,114,114,111,114,0],"i8",ALLOC_NORMAL);gf=allocate([99,80,105,99,107,108,101,46,85,110,112,105,99,107,108,105,110,103,69,
114,114,111,114,0],"i8",ALLOC_NORMAL);Jc=allocate([99,80,105,99,107,108,101,46,66,97,100,80,105,99,107,108,101,71,101,116,0],"i8",ALLOC_NORMAL);Of=allocate([80,105,99,107,108,101,69,114,114,111,114,0],"i8",ALLOC_NORMAL);Pf=allocate([85,110,112,105,99,107,108,101,97,98,108,101,69,114,114,111,114,0],"i8",ALLOC_NORMAL);Qf=allocate([66,97,100,80,105,99,107,108,101,71,101,116,0],"i8",ALLOC_NORMAL);Rf=allocate([99,83,116,114,105,110,103,73,79,46,99,83,116,114,105,110,103,73,79,95,67,65,80,73,0],"i8",ALLOC_NORMAL);
Re=allocate([49,46,55,49,0],"i8",ALLOC_NORMAL);hf=allocate([99,80,105,99,107,108,101,0],"i8",ALLOC_NORMAL);dg=allocate([95,95,118,101,114,115,105,111,110,95,95,0],"i8",ALLOC_NORMAL);eg=allocate([72,73,71,72,69,83,84,95,80,82,79,84,79,67,79,76,0],"i8",ALLOC_NORMAL);fg=allocate([50,46,48,0],"i8",ALLOC_NORMAL);gg=allocate([91,115,115,115,115,115,93,0],"i8",ALLOC_NORMAL);Vf=allocate([49,46,48,0],"i8",ALLOC_NORMAL);ng=allocate([49,46,49,0],"i8",ALLOC_NORMAL);Wf=allocate([49,46,50,0],"i8",ALLOC_NORMAL);
og=allocate([49,46,51,0],"i8",ALLOC_NORMAL);bf=allocate([102,111,114,109,97,116,95,118,101,114,115,105,111,110,0],"i8",ALLOC_NORMAL);cf=allocate([99,111,109,112,97,116,105,98,108,101,95,102,111,114,109,97,116,115,0],"i8",ALLOC_NORMAL);HEAP[qa+12]=ua;HEAP[qa+24]=g+24;HEAP[qa+88]=bb;HEAP[$]=ga;HEAP[$+4]=Sa;HEAP[fd]=nb;HEAP[fd+4]=g+26;HEAP[fd+12]=Kd;HEAP[fd+16]=Nd;HEAP[fd+20]=g+28;HEAP[fd+28]=Gd;HEAP[fd+32]=Je;HEAP[fd+36]=g+30;HEAP[fd+44]=Od;HEAP[Hd]=ze;HEAP[Hd+4]=Id;HEAP[Zd]=Db;HEAP[Zd+20]=ge;HEAP[ad]=
de;HEAP[ad+4]=g+32;HEAP[ad+8]=g+34;HEAP[ad+20]=$d;HEAP[ad+28]=g+36;HEAP[ad+40]=fe;HEAP[ad+44]=g+38;HEAP[ad+48]=g+40;HEAP[ad+60]=ie;HEAP[ad+64]=g+42;HEAP[Qc+12]=vd;HEAP[Qc+24]=g+44;HEAP[Qc+72]=g+46;HEAP[Qc+76]=g+48;HEAP[Qc+88]=Rd;HEAP[Qc+92]=g+50;HEAP[Qc+96]=g+52;HEAP[Qc+116]=fd;HEAP[Qc+120]=Zd;HEAP[Qc+124]=ad;HEAP[Bc]=kd;HEAP[Bc+4]=g+54;HEAP[Bc+12]=Sd;HEAP[Bc+16]=$c;HEAP[Bc+20]=g+56;HEAP[Bc+28]=Ye;HEAP[Td]=$e;HEAP[Td+4]=ze;HEAP[Td+8]=Id;HEAP[af]=$e;HEAP[af+4]=Id;HEAP[ld+12]=bd;HEAP[ld+24]=g+58;HEAP[ld+
32]=g+60;HEAP[ld+36]=g+62;HEAP[ld+88]=Se;HEAP[ld+92]=g+64;HEAP[ld+96]=g+66;HEAP[md]=nb;HEAP[md+4]=g+68;HEAP[md+12]=of;HEAP[md+16]=tf;HEAP[md+20]=g+70;HEAP[md+28]=pf;HEAP[md+32]=kd;HEAP[md+36]=g+72;HEAP[md+44]=xf;HEAP[md+48]=yf;HEAP[md+52]=g+74;HEAP[md+60]=zf;HEAP[md+64]=Af;HEAP[md+68]=g+76;HEAP[md+76]=Bf;HEAP[md+80]=Cf;HEAP[md+84]=g+78;HEAP[md+92]=Df}var $a={arguments:[]},Ja,ja,ua,bb,qa,P,hb,Qa,mb,S,Ca,pa,Aa,ob,ib,ca,na,O,Ma,$,ga,Sa,X,oa,ab,Oa,va,U,fb,Cb,xb,db,gb,rb,sb,Kb,Gb,Nb,Ab,Sb,pb,Mb,tb,Hb,
da,Jb,jb,bc,Wb,lb,kb,Lb,Eb,Yb,yb,fc,zb,jc,mc,Xb,qc,tc,vb,eb,Tb,oc,Fb,Pb,Vb,Dc,yc,Kc,sa,Bb,cb,Nc,ic,$b,Qb,uc,Gc,pc,Zb,wc,sc,Oc,Zc,yd,Tc,sd,nd,zc,Pc,Ec,zd,Uc,ec,xa,gc,Lc,xc,cc,Ad,Bd,nb,Kd,Nd,Gd,Je,Od,fd,Ld,oe,Yd,Pd,vc,Md,Fe,ye,Hd,ze,Id,de,ee,fe,pe,Db,ge,Zd,$d,ie,ad,Rd,vd,Qc,je,re,se,Ob,Be,te,wb,aa,Hc,ae,qe,ue,wd,Vc,Ke,Le,Wc,Ce,Fc,Dd,De,xd,cd,Ed,Ge,ub,gd,Rb,be,hd,dd,id,jd,qd,Ic,nc,kd,Sd,$c,Ye,Bc,Ze,Pe,nf,sf,ce,Me,Qe,Td,$e,ff,af,Ub,Se,bd,ld,of,tf,pf,xf,yf,zf,Af,Bf,Cf,Df,md,uf,Ef,hc,Ff,lc,vf,Cc,Gf,Hf,
He,If,Rc,Jf,Kf,qf,Lf,Mf,lg,za,Nf,Ne,cg,ve,mg,gf,Jc,Of,Pf,Qf,Rf,Re,hf,dg,eg,fg,gg,Vf,ng,Wf,og,bf,cf;$a._initcPickle=function(){var a=STACKTOP;STACKTOP+=12;_memset(a,0,12);var b;for(b=-1;;)switch(b){case -1:var c,d,e,f=a,g=a+4,h=a+8,j,k,l;j=Re;HEAP[Qc+4]=_PyType_Type;HEAP[ld+4]=_PyType_Type;HEAP[qa+4]=_PyType_Type;e=_PyDict_New();b=e==0?20:1;break;case 1:a:{b=e;for(var m=void 0,m=-1;;)switch(m){case -1:var n,o,p,q,r;n=b;m=_PyType_Ready(ld)<0?1:2;break;case 1:o=-1;m=89;break;case 2:m=_PyType_Ready(Qc)<
0?3:4;break;case 3:o=-1;m=89;break;case 4:m=_PyString_InternFromString(uf);HEAP[Eb]=m;m=HEAP[Eb]==0?5:6;break;case 5:o=-1;m=89;break;case 6:m=_PyString_InternFromString(Ef);HEAP[Yb]=m;m=HEAP[Yb]==0?7:8;break;case 7:o=-1;m=89;break;case 8:m=_PyString_InternFromString(hc);HEAP[mc]=m;m=HEAP[mc]==0?9:10;break;case 9:o=-1;m=89;break;case 10:m=_PyString_InternFromString(Ff);HEAP[jc]=m;m=HEAP[jc]==0?11:12;break;case 11:o=-1;m=89;break;case 12:m=_PyString_InternFromString(lc);HEAP[Rb]=m;m=HEAP[Rb]==0?13:
14;break;case 13:o=-1;m=89;break;case 14:m=_PyString_InternFromString(vf);HEAP[qc]=m;m=HEAP[qc]==0?15:16;break;case 15:o=-1;m=89;break;case 16:m=_PyString_InternFromString(Cc);HEAP[ca]=m;m=HEAP[ca]==0?17:18;break;case 17:o=-1;m=89;break;case 18:m=_PyString_InternFromString(Gf);HEAP[zd]=m;m=HEAP[zd]==0?19:20;break;case 19:o=-1;m=89;break;case 20:m=_PyString_InternFromString(Hf);HEAP[Ec]=m;m=HEAP[Ec]==0?21:22;break;case 21:o=-1;m=89;break;case 22:m=_PyString_InternFromString(He);HEAP[Yd]=m;m=HEAP[Yd]==
0?23:24;break;case 23:o=-1;m=89;break;case 24:m=_PyString_InternFromString(If);HEAP[gd]=m;m=HEAP[gd]==0?25:26;break;case 25:o=-1;m=89;break;case 26:m=_PyString_InternFromString(Rc);HEAP[Pe]=m;m=HEAP[Pe]==0?27:28;break;case 27:o=-1;m=89;break;case 28:m=_PyString_InternFromString(Jf);HEAP[Ze]=m;m=HEAP[Ze]==0?29:30;break;case 29:o=-1;m=89;break;case 30:m=_PyString_InternFromString(Kf);HEAP[Md]=m;m=HEAP[Md]==0?31:32;break;case 31:o=-1;m=89;break;case 32:p=_PyImport_ImportModule(vc);m=p==0?33:34;break;
case 33:o=-1;m=89;break;case 34:m=_PyObject_GetAttr(p,HEAP[Md]);HEAP[Pc]=m;m=HEAP[Pc]==0?35:36;break;case 35:o=-1;m=89;break;case 36:m=_PyObject_GetAttrString(p,qf);HEAP[Pb]=m;m=HEAP[Pb]==0?37:38;break;case 37:o=-1;m=89;break;case 38:m=_PyObject_GetAttrString(p,Lf);HEAP[Ed]=m;m=HEAP[Ed]==0?39:40;break;case 39:o=-1;m=89;break;case 40:m=_PyObject_GetAttrString(p,Mf);HEAP[cd]=m;m=HEAP[cd]==0?41:42;break;case 41:o=-1;m=89;break;case 42:HEAP[p]-=1;m=HEAP[p]==0?43:44;break;case 43:FUNCTION_TABLE[HEAP[HEAP[p+
4]+24]](p);m=44;break;case 44:m=_PyTuple_New(0);HEAP[mb]=m;m=m==0?45:46;break;case 45:o=-1;m=89;break;case 46:m=_PyTuple_New(2);HEAP[Fb]=m;m=HEAP[Fb]==0?47:48;break;case 47:o=-1;m=89;break;case 48:_PyObject_GC_UnTrack(HEAP[Fb]);q=_PyImport_ImportModule(lg);m=q==0?49:50;break;case 49:o=-1;m=89;break;case 50:m=_PyDict_SetItemString(n,za,q)<0?51:52;break;case 51:o=-1;m=89;break;case 52:q=_PyDict_New();m=q==0?53:54;break;case 53:o=-1;m=89;break;case 54:r=_PyRun_StringFlags(Nf,257,n,q,0);m=r==0?55:56;
break;case 55:o=-1;m=89;break;case 56:HEAP[r]-=1;m=HEAP[r]==0?57:58;break;case 57:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);m=58;break;case 58:m=_PyErr_NewException(Ne,0,q);HEAP[zc]=m;m=m==0?59:60;break;case 59:o=-1;m=89;break;case 60:HEAP[q]-=1;m=HEAP[q]==0?61:62;break;case 61:FUNCTION_TABLE[HEAP[HEAP[q+4]+24]](q);m=62;break;case 62:m=_PyErr_NewException(cg,HEAP[zc],0);HEAP[S]=m;m=m==0?63:64;break;case 63:o=-1;m=89;break;case 64:q=_PyDict_New();m=q==0?65:66;break;case 65:o=-1;m=89;break;case 66:r=_PyRun_StringFlags(ve,
257,n,q,0);m=r==0?67:68;break;case 67:o=-1;m=89;break;case 68:HEAP[r]-=1;m=HEAP[r]==0?69:70;break;case 69:FUNCTION_TABLE[HEAP[HEAP[r+4]+24]](r);m=70;break;case 70:m=_PyErr_NewException(mg,HEAP[S],q);HEAP[Uc]=m;m=m==0?71:72;break;case 71:o=-1;m=89;break;case 72:HEAP[q]-=1;m=HEAP[q]==0?73:74;break;case 73:FUNCTION_TABLE[HEAP[HEAP[q+4]+24]](q);m=74;break;case 74:m=_PyErr_NewException(gf,HEAP[zc],0);HEAP[P]=m;m=m==0?75:76;break;case 75:o=-1;m=89;break;case 76:m=_PyErr_NewException(Jc,HEAP[P],0);HEAP[Fc]=
m;m=HEAP[Fc]==0?77:78;break;case 77:o=-1;m=89;break;case 78:m=_PyDict_SetItemString(n,Of,HEAP[zc])<0?79:80;break;case 79:o=-1;m=89;break;case 80:m=_PyDict_SetItemString(n,ie,HEAP[S])<0?81:82;break;case 81:o=-1;m=89;break;case 82:m=_PyDict_SetItemString(n,Me,HEAP[P])<0?83:84;break;case 83:o=-1;m=89;break;case 84:m=_PyDict_SetItemString(n,Pf,HEAP[Uc])<0?85:86;break;case 85:o=-1;m=89;break;case 86:m=_PyDict_SetItemString(n,Qf,HEAP[Fc])<0?87:88;break;case 87:o=-1;m=89;break;case 88:o=_PyCapsule_Import(Rf,
0);HEAP[Qa]=o;o=0;m=89;break;case 89:b=o;break a;default:assert(0,"bad label: "+m)}b=void 0}b=b<0?20:2;break;case 2:c=_Py_InitModule4(hf,md,Ja,0,1013);b=c==0?20:3;break;case 3:d=_PyModule_GetDict(c);b=_PyString_FromString(j);HEAP[f]=b;_PyDict_SetItemString(d,dg,HEAP[f]);b=HEAP[f]!=0?4:6;break;case 4:b=HEAP[f];HEAP[b]-=1;b=HEAP[b]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[HEAP[f]+4]+24]](HEAP[f]);b=6;break;case 6:HEAP[h]=0;b=10;break;case 7:b=_PyObject_SetItem(d,HEAP[g],HEAP[f])<0?8:10;break;case 8:HEAP[e]-=
1;b=HEAP[e]==0?9:20;break;case 9:FUNCTION_TABLE[HEAP[HEAP[e+4]+24]](e);b=20;break;case 10:b=_PyDict_Next(e,h,g,f)!=0?7:11;break;case 11:HEAP[e]-=1;b=HEAP[e]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[e+4]+24]](e);b=13;break;case 13:b=_PyModule_AddIntConstant(c,eg,2);HEAP[h]=b;b=b<0?20:14;break;case 14:k=_PyString_FromString(fg);l=_Py_BuildValue(gg,allocate([Vf,0,0,0,ng,0,0,0,Wf,0,0,0,og,0,0,0,fg,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],ALLOC_STACK));_PyDict_SetItemString(d,
bf,k);_PyDict_SetItemString(d,cf,l);b=k!=0?15:17;break;case 15:HEAP[k]-=1;b=HEAP[k]==0?16:17;break;case 16:FUNCTION_TABLE[HEAP[HEAP[k+4]+24]](k);b=17;break;case 17:b=l!=0?18:20;break;case 18:HEAP[l]-=1;b=HEAP[l]==0?19:20;break;case 19:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);b=20;break;case 20:STACKTOP=a;return;default:assert(0,"bad label: "+b)}};FUNCTION_TABLE=FUNCTION_TABLE.concat([0,0,__PyObject_NextNotImplemented,0,function(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h;e=a;f=b;g=c;d=f==0?
1:2;break;case 1:h=0;d=5;break;case 2:_PyFile_IncUseCount(HEAP[e+16]);d=_fwrite(f,1,g,HEAP[e+8]);_PyFile_DecUseCount(HEAP[e+16]);d=g!=d?3:4;break;case 3:_PyErr_SetFromErrno(HEAP[_PyExc_IOError]);h=-1;d=5;break;case 4:h=g;d=5;break;case 5:return a=h;default:assert(0,"bad label: "+d)}},0,function(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h;e=a;f=b;g=c;d=f==0?1:2;break;case 1:h=0;d=5;break;case 2:d=FUNCTION_TABLE[HEAP[HEAP[Qa]+8]](HEAP[e+16],f,g)!=g?3:4;break;case 3:h=-1;d=5;break;case 4:h=
g;d=5;break;case 5:return a=h;default:assert(0,"bad label: "+d)}},0,function(a,b,c){for(a=-1;;)switch(a){case -1:var d,e,a=b;d=c;a=a==0?1:2;break;case 1:e=0;a=3;break;case 2:e=d;a=3;break;case 3:return b=e;default:assert(0,"bad label: "+a)}},0,j,0,function(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k;e=a;f=b;g=c;d=HEAP[e+68]==0?1:4;break;case 1:j=g>=32?g:32;d=_malloc(j);HEAP[e+72]=d;d=HEAP[e+72]==0?2:3;break;case 2:_PyErr_NoMemory();h=-1;d=13;break;case 3:HEAP[e+68]=j;d=8;break;case 4:d=
HEAP[e+68]<g?5:8;break;case 5:k=_realloc(HEAP[e+72],g);d=k==0?6:7;break;case 6:_PyErr_NoMemory();h=-1;d=13;break;case 7:HEAP[e+72]=k;HEAP[e+68]=g;d=8;break;case 8:_PyFile_IncUseCount(HEAP[e+12]);d=_fread(HEAP[e+72],1,g,HEAP[e+8]);_PyFile_DecUseCount(HEAP[e+12]);var l=e;d=g!=d?9:12;break;case 9:d=_feof(HEAP[l+8])!=0?10:11;break;case 10:_PyErr_SetNone(HEAP[_PyExc_EOFError]);h=-1;d=13;break;case 11:_PyErr_SetFromErrno(HEAP[_PyExc_IOError]);h=-1;d=13;break;case 12:HEAP[f]=HEAP[l+72];h=g;d=13;break;case 13:return a=
h;default:assert(0,"bad label: "+d)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g,h,j;d=a;e=b;c=HEAP[d+68]==0?1:4;break;case 1:c=_malloc(40);HEAP[d+72]=c;c=HEAP[d+72]==0?2:3;break;case 2:_PyErr_NoMemory();f=-1;c=15;break;case 3:HEAP[d+68]=40;c=4;break;case 4:g=0;c=9;break;case 5:c=_feof(HEAP[l+8])!=0?7:6;break;case 6:c=HEAP[d+72];var k=__IO_getc(HEAP[d+8])&255;HEAP[c+g]=k;c=HEAP[c+g]==10?7:8;break;case 7:HEAP[HEAP[d+72]+(g+1)]=0;HEAP[e]=HEAP[d+72];f=g+1;c=15;break;case 8:g+=1;c=
9;break;case 9:var l=d;c=HEAP[d+68]-1>g?5:10;break;case 10:h=HEAP[l+68]<<1;c=h<=0?11:12;break;case 11:_PyErr_NoMemory();f=-1;c=15;break;case 12:j=_realloc(HEAP[d+72],h);c=j==0?13:14;break;case 13:_PyErr_NoMemory();f=-1;c=15;break;case 14:HEAP[d+72]=j;HEAP[d+68]=h;c=9;break;case 15:return d=f;default:assert(0,"bad label: "+c)}},0,function(a,b,c){var d=STACKTOP;STACKTOP+=4;_memset(d,0,4);var e;for(e=-1;;)switch(e){case -1:var f,g,h,j=d;e=a;f=b;g=c;e=FUNCTION_TABLE[HEAP[HEAP[Qa]]](HEAP[e+12],j,g)!=g?
1:2;break;case 1:_PyErr_SetNone(HEAP[_PyExc_EOFError]);h=-1;e=3;break;case 2:HEAP[f]=HEAP[j];h=g;e=3;break;case 3:return a=h,STACKTOP=d,a;default:assert(0,"bad label: "+e)}},0,function(a,b){var c=STACKTOP;STACKTOP+=4;_memset(c,0,4);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h=c;d=a;e=b;g=FUNCTION_TABLE[HEAP[HEAP[Qa]+4]](HEAP[d+12],h);d=g<0?1:2;break;case 1:f=-1;d=3;break;case 2:HEAP[e]=HEAP[h];f=g;d=3;break;case 3:return e=f,STACKTOP=c,e;default:assert(0,"bad label: "+d)}},0,function(a,b,c){var d;
for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k;e=a;f=b;g=c;k=0;j=_PyInt_FromSsize_t(g);d=j==0?1:2;break;case 1:h=-1;d=25;break;case 2:d=HEAP[e+28]!=0?4:3;break;case 3:d=_PyTuple_New(1);HEAP[e+28]=d;d=HEAP[e+28]!=0?4:8;break;case 4:d=HEAP[HEAP[e+28]+12]!=0?5:7;break;case 5:d=HEAP[HEAP[e+28]+12];HEAP[d]-=1;d=HEAP[d]==0?6:7;break;case 6:FUNCTION_TABLE[HEAP[HEAP[HEAP[HEAP[e+28]+12]+4]+24]](HEAP[HEAP[e+28]+12]);d=7;break;case 7:HEAP[HEAP[e+28]+12]=j;d=10;break;case 8:HEAP[j]-=1;d=HEAP[j]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[j+
4]+24]](j);d=10;break;case 10:d=HEAP[e+28]!=0?11:15;break;case 11:k=_PyObject_Call(HEAP[e+20],HEAP[e+28],0);d=HEAP[HEAP[e+28]]>1?12:15;break;case 12:d=HEAP[e+28];HEAP[d]-=1;d=HEAP[d]==0?13:14;break;case 13:FUNCTION_TABLE[HEAP[HEAP[HEAP[e+28]+4]+24]](HEAP[e+28]);d=14;break;case 14:HEAP[e+28]=0;d=15;break;case 15:d=k==0?16:17;break;case 16:h=-1;d=25;break;case 17:d=HEAP[e+44]!=0?18:20;break;case 18:d=HEAP[e+44];HEAP[d]-=1;d=HEAP[d]==0?19:20;break;case 19:FUNCTION_TABLE[HEAP[HEAP[HEAP[e+44]+4]+24]](HEAP[e+
44]);d=20;break;case 20:HEAP[e+44]=k;d=_PyString_AsString(k);HEAP[f]=d;d=HEAP[f]==0?21:22;break;case 21:h=-1;d=25;break;case 22:d=HEAP[k+8]!=g?23:24;break;case 23:_PyErr_SetNone(HEAP[_PyExc_EOFError]);h=-1;d=25;break;case 24:h=g;d=25;break;case 25:return a=h;default:assert(0,"bad label: "+d)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g,h;d=a;e=b;g=_PyObject_CallObject(HEAP[d+16],HEAP[mb]);c=g==0?1:2;break;case 1:f=-1;c=10;break;case 2:h=_PyString_Size(g);c=h<0?3:4;break;case 3:f=
-1;c=10;break;case 4:c=HEAP[d+44]!=0?5:7;break;case 5:c=HEAP[d+44];HEAP[c]-=1;c=HEAP[c]==0?6:7;break;case 6:FUNCTION_TABLE[HEAP[HEAP[HEAP[d+44]+4]+24]](HEAP[d+44]);c=7;break;case 7:HEAP[d+44]=g;c=_PyString_AsString(g);HEAP[e]=c;c=HEAP[e]==0?8:9;break;case 8:f=-1;c=10;break;case 9:f=h;c=10;break;case 10:return d=f;default:assert(0,"bad label: "+c)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c,d,e;c=a;d=HEAP[c+8];e=HEAP[c+16];d=b=d-1;b=b>=0?1:4;break;case 1:b=HEAP[e];HEAP[b]-=1;b=HEAP[b]==
0?2:3;break;case 2:FUNCTION_TABLE[HEAP[HEAP[HEAP[e]+4]+24]](HEAP[e]);b=3;break;case 3:e+=4;d=b=d-1;b=b>=0?1:4;break;case 4:b=HEAP[c+16]!=0?5:6;break;case 5:_free(HEAP[c+16]);b=6;break;case 6:_PyObject_Free(c);return;default:assert(0,"bad label: "+b)}},0,function(a,b){var c=STACKTOP;STACKTOP+=8;_memset(c,0,8);var d;for(d=-1;;)switch(d){case -1:var e,f,g=c,h=c+4;e=a;d=b;HEAP[h]=0;d=_PyArg_ParseTuple(d,Bd,allocate([g,0,0,0,h,0,0,0],["%struct.PyObject**",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;
case 1:f=0;d=7;break;case 2:d=C(e,HEAP[g])<0?3:4;break;case 3:f=0;d=7;break;case 4:var j=e;d=HEAP[h]!=0?5:6;break;case 5:f=A(j,0);d=7;break;case 6:HEAP[j]+=1;f=e;d=7;break;case 7:return e=f,STACKTOP=c,e;default:assert(0,"bad label: "+d)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;c=a;b=HEAP[c+20]!=0?1:2;break;case 1:_PyDict_Clear(HEAP[c+20]);b=2;break;case 2:return HEAP[__Py_NoneStruct]+=1,a=__Py_NoneStruct;default:assert(0,"bad label: "+b)}},0,A,0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;
c=a;b=HEAP[c+28]==0?1:2;break;case 1:_PyErr_SetString(HEAP[_PyExc_AttributeError],de);b=3;break;case 2:HEAP[HEAP[c+28]]+=1;b=3;break;case 3:return a=HEAP[c+28];default:assert(0,"bad label: "+b)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f;d=a;e=b;c=e==0?1:2;break;case 1:_PyErr_SetString(HEAP[_PyExc_TypeError],ee);f=-1;c=6;break;case 2:c=HEAP[d+28]!=0?3:5;break;case 3:c=HEAP[d+28];HEAP[c]-=1;c=HEAP[c]==0?4:5;break;case 4:FUNCTION_TABLE[HEAP[HEAP[HEAP[d+28]+4]+24]](HEAP[d+28]);c=5;
break;case 5:HEAP[e]+=1;HEAP[d+28]=e;f=0;c=6;break;case 6:return d=f;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f;d=a;e=b;c=e==0?1:2;break;case 1:_PyErr_SetString(HEAP[_PyExc_TypeError],ee);f=-1;c=6;break;case 2:c=HEAP[d+32]!=0?3:5;break;case 3:c=HEAP[d+32];HEAP[c]-=1;c=HEAP[c]==0?4:5;break;case 4:FUNCTION_TABLE[HEAP[HEAP[HEAP[d+32]+4]+24]](HEAP[d+32]);c=5;break;case 5:HEAP[e]+=1;HEAP[d+32]=e;f=0;c=6;break;case 6:return d=f;default:assert(0,"bad label: "+
c)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;c=a;b=HEAP[c+20]==0?1:2;break;case 1:_PyErr_SetString(HEAP[_PyExc_AttributeError],fe);b=3;break;case 2:HEAP[HEAP[c+20]]+=1;b=3;break;case 3:return a=HEAP[c+20];default:assert(0,"bad label: "+b)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f;d=a;e=b;c=e==0?1:2;break;case 1:_PyErr_SetString(HEAP[_PyExc_TypeError],ee);f=-1;c=8;break;case 2:c=(HEAP[HEAP[e+4]+84]&536870912)==0?3:4;break;case 3:_PyErr_SetString(HEAP[_PyExc_TypeError],
pe);f=-1;c=8;break;case 4:c=HEAP[d+20]!=0?5:7;break;case 5:c=HEAP[d+20];HEAP[c]-=1;c=HEAP[c]==0?6:7;break;case 6:FUNCTION_TABLE[HEAP[HEAP[HEAP[d+20]+4]+24]](HEAP[d+20]);c=7;break;case 7:HEAP[e]+=1;HEAP[d+20]=e;f=0;c=8;break;case 8:return d=f;default:assert(0,"bad label: "+c)}},0,function(){HEAP[HEAP[S]]+=1;return HEAP[S]},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;c=a;_PyObject_GC_UnTrack(c);b=HEAP[c+12]!=0?1:3;break;case 1:b=HEAP[c+12];HEAP[b]-=1;b=HEAP[b]==0?2:3;break;case 2:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+
12]+4]+24]](HEAP[c+12]);b=3;break;case 3:b=HEAP[c+20]!=0?4:6;break;case 4:b=HEAP[c+20];HEAP[b]-=1;b=HEAP[b]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+20]+4]+24]](HEAP[c+20]);b=6;break;case 6:b=HEAP[c+68]!=0?7:9;break;case 7:b=HEAP[c+68];HEAP[b]-=1;b=HEAP[b]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+68]+4]+24]](HEAP[c+68]);b=9;break;case 9:b=HEAP[c+24]!=0?10:12;break;case 10:b=HEAP[c+24];HEAP[b]-=1;b=HEAP[b]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+24]+4]+24]](HEAP[c+
24]);b=12;break;case 12:b=HEAP[c+16]!=0?13:15;break;case 13:b=HEAP[c+16];HEAP[b]-=1;b=HEAP[b]==0?14:15;break;case 14:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+16]+4]+24]](HEAP[c+16]);b=15;break;case 15:b=HEAP[c+28]!=0?16:18;break;case 16:b=HEAP[c+28];HEAP[b]-=1;b=HEAP[b]==0?17:18;break;case 17:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+28]+4]+24]](HEAP[c+28]);b=18;break;case 18:b=HEAP[c+32]!=0?19:21;break;case 19:b=HEAP[c+32];HEAP[b]-=1;b=HEAP[b]==0?20:21;break;case 20:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+32]+4]+24]](HEAP[c+
32]);b=21;break;case 21:b=HEAP[c+60]!=0?22:24;break;case 22:b=HEAP[c+60];HEAP[b]-=1;b=HEAP[b]==0?23:24;break;case 23:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+60]+4]+24]](HEAP[c+60]);b=24;break;case 24:_PyMem_Free(HEAP[c+52]);FUNCTION_TABLE[HEAP[HEAP[c+4]+160]](c);return;default:assert(0,"bad label: "+b)}},0,_PyObject_GenericGetAttr,0,_PyObject_GenericSetAttr,0,function(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k,l,m,n,o,p,q;e=a;f=b;g=c;d=HEAP[e+12]!=0?1:3;break;case 1:j=FUNCTION_TABLE[f](HEAP[e+
12],g);d=j!=0?2:3;break;case 2:h=j;d=25;break;case 3:d=HEAP[e+20]!=0?4:6;break;case 4:k=FUNCTION_TABLE[f](HEAP[e+20],g);d=k!=0?5:6;break;case 5:h=k;d=25;break;case 6:d=HEAP[e+68]!=0?7:9;break;case 7:l=FUNCTION_TABLE[f](HEAP[e+68],g);d=l!=0?8:9;break;case 8:h=l;d=25;break;case 9:d=HEAP[e+24]!=0?10:12;break;case 10:m=FUNCTION_TABLE[f](HEAP[e+24],g);d=m!=0?11:12;break;case 11:h=m;d=25;break;case 12:d=HEAP[e+16]!=0?13:15;break;case 13:n=FUNCTION_TABLE[f](HEAP[e+16],g);d=n!=0?14:15;break;case 14:h=n;d=
25;break;case 15:d=HEAP[e+28]!=0?16:18;break;case 16:o=FUNCTION_TABLE[f](HEAP[e+28],g);d=o!=0?17:18;break;case 17:h=o;d=25;break;case 18:d=HEAP[e+32]!=0?19:21;break;case 19:p=FUNCTION_TABLE[f](HEAP[e+32],g);d=p!=0?20:21;break;case 20:h=p;d=25;break;case 21:d=HEAP[e+60]!=0?22:24;break;case 22:q=FUNCTION_TABLE[f](HEAP[e+60],g);d=q!=0?23:24;break;case 23:h=q;d=25;break;case 24:h=0;d=25;break;case 25:return a=h;default:assert(0,"bad label: "+d)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c,
d,e,f,g,h,j,k,l;c=a;b=HEAP[c+12]!=0?1:3;break;case 1:d=HEAP[c+12];HEAP[c+12]=0;HEAP[d]-=1;b=HEAP[d]==0?2:3;break;case 2:FUNCTION_TABLE[HEAP[HEAP[d+4]+24]](d);b=3;break;case 3:b=HEAP[c+20]!=0?4:6;break;case 4:e=HEAP[c+20];HEAP[c+20]=0;HEAP[e]-=1;b=HEAP[e]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[e+4]+24]](e);b=6;break;case 6:b=HEAP[c+68]!=0?7:9;break;case 7:f=HEAP[c+68];HEAP[c+68]=0;HEAP[f]-=1;b=HEAP[f]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[f+4]+24]](f);b=9;break;case 9:b=HEAP[c+24]!=0?
10:12;break;case 10:g=HEAP[c+24];HEAP[c+24]=0;HEAP[g]-=1;b=HEAP[g]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);b=12;break;case 12:b=HEAP[c+16]!=0?13:15;break;case 13:h=HEAP[c+16];HEAP[c+16]=0;HEAP[h]-=1;b=HEAP[h]==0?14:15;break;case 14:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);b=15;break;case 15:b=HEAP[c+28]!=0?16:18;break;case 16:j=HEAP[c+28];HEAP[c+28]=0;HEAP[j]-=1;b=HEAP[j]==0?17:18;break;case 17:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);b=18;break;case 18:b=HEAP[c+32]!=0?19:21;break;
case 19:k=HEAP[c+32];HEAP[c+32]=0;HEAP[k]-=1;b=HEAP[k]==0?20:21;break;case 20:FUNCTION_TABLE[HEAP[HEAP[k+4]+24]](k);b=21;break;case 21:b=HEAP[c+60]!=0?22:24;break;case 22:l=HEAP[c+60];HEAP[c+60]=0;HEAP[l]-=1;b=HEAP[l]==0?23:24;break;case 23:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);b=24;break;case 24:return 0;default:assert(0,"bad label: "+b)}},0,function(a){return La(a)},0,function(d){var e;a:{e=STACKTOP;STACKTOP+=4;_memset(e,0,4);var f;for(f=-1;;)switch(f){case -1:var g,j,k,l,m=e;g=d;l=k=0;HEAP[g+52]=
0;a(HEAP[g+32],0);f=1;break;case 1:f=FUNCTION_TABLE[HEAP[g+60]](g,m,1)<0?56:2;break;case 2:f=HEAP[HEAP[m]];f=f==-128?52:f==-127?29:f==-126?38:f==-125?39:f==-124?40:f==-123?19:f==-122?20:f==-121?21:f==-120?53:f==-119?54:f==-118?9:f==-117?10:f==40?41:f==41?18:f==46?56:f==48?45:f==49?46:f==50?34:f==70?11:f==71?12:f==73?7:f==74?4:f==75?5:f==76?8:f==77?6:f==78?3:f==80?49:f==81?50:f==82?51:f==83?15:f==84?13:f==85?14:f==86?16:f==88?17:f==93?23:f==97?31:f==98?33:f==99?30:f==100?26:f==101?32:f==103?37:f==
104?35:f==105?28:f==106?36:f==108?24:f==111?27:f==112?44:f==113?42:f==114?43:f==115?47:f==116?22:f==117?48:f==125?25:55;break;case 3:f=R(g)<0?56:1;break;case 4:f=V(g)<0?56:1;break;case 5:f=Q(g)<0?56:1;break;case 6:f=Z(g)<0?56:1;break;case 7:f=L(g)<0?56:1;break;case 8:f=K(g)<0?56:1;break;case 9:f=N(g,1)<0?56:1;break;case 10:f=N(g,4)<0?56:1;break;case 11:f=H(g)<0?56:1;break;case 12:f=ba(g)<0?56:1;break;case 13:f=B(g)<0?56:1;break;case 14:f=Y(g)<0?56:1;break;case 15:f=W(g)<0?56:1;break;case 16:f=fa(g)<
0?56:1;break;case 17:f=ha(g)<0?56:1;break;case 18:f=ra(g,0)<0?56:1;break;case 19:f=ra(g,1)<0?56:1;break;case 20:f=ra(g,2)<0?56:1;break;case 21:f=ra(g,3)<0?56:1;break;case 22:f=la(g)<0?56:1;break;case 23:f=ya(g)<0?56:1;break;case 24:f=Ua(g)<0?56:1;break;case 25:f=Da(g)<0?56:1;break;case 26:f=Na(g)<0?56:1;break;case 27:b:{f=g;for(var n=void 0,n=-1;;)switch(n){case -1:var o,p,q;o=f;q=D(o);n=q<0?1:2;break;case 1:p=-1;n=3;break;case 2:p=a(HEAP[o+32],q+1);n=3;break;case 3:f=p;break b;default:assert(0,"bad label: "+
n)}f=void 0}f=f<0?56:1;break;case 28:b:{n=g;f=STACKTOP;STACKTOP+=4;_memset(f,0,4);for(var r=void 0,r=-1;;)switch(r){case -1:var s,t,u,v=f;s=n;u=D(s);r=u<0?1:2;break;case 1:t=-1;r=10;break;case 2:a(HEAP[s+32],u);r=FUNCTION_TABLE[HEAP[s+64]](s,v)<0?3:4;break;case 3:t=-1;r=10;break;case 4:r=FUNCTION_TABLE[HEAP[s+64]](s,v)<0?5:6;break;case 5:t=-1;r=10;break;case 6:r=HEAP[HEAP[s+32]+8]==HEAP[HEAP[s+32]+12]?7:9;break;case 7:r=c(HEAP[s+32])<0?8:9;break;case 8:t=-1;r=10;break;case 9:HEAP[__Py_NoneStruct]+=
1;t=HEAP[s+32];r=HEAP[t+8];HEAP[HEAP[HEAP[s+32]+16]+4*r]=__Py_NoneStruct;HEAP[t+8]=r+1;t=0;r=10;break;case 10:n=t;STACKTOP=f;f=n;break b;default:assert(0,"bad label: "+r)}f=void 0}f=f<0?56:1;break;case 29:b:{f=g;n=void 0;for(n=-1;;)switch(n){case -1:var w,x,O;w=f;n=HEAP[HEAP[w+32]+8]!=0?2:1;break;case 1:_PyErr_SetString(HEAP[P],Vc);O=0;n=3;break;case 2:n=HEAP[HEAP[w+32]+16];r=HEAP[w+32];HEAP[r+8]-=1;O=HEAP[n+4*HEAP[r+8]];n=HEAP[n+4*HEAP[r+8]]==0?3:4;break;case 3:x=-1;n=16;break;case 4:HEAP[O]-=1;
n=HEAP[O]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[O+4]+24]](O);n=6;break;case 6:n=HEAP[HEAP[w+32]+8]!=0?8:7;break;case 7:_PyErr_SetString(HEAP[P],Vc);O=0;n=9;break;case 8:n=HEAP[HEAP[w+32]+16];r=HEAP[w+32];HEAP[r+8]-=1;O=HEAP[n+4*HEAP[r+8]];n=HEAP[n+4*HEAP[r+8]]==0?9:10;break;case 9:x=-1;n=16;break;case 10:HEAP[O]-=1;n=HEAP[O]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[O+4]+24]](O);n=12;break;case 12:n=HEAP[HEAP[w+32]+8]==HEAP[HEAP[w+32]+12]?13:15;break;case 13:n=c(HEAP[w+32])<0?14:15;break;
case 14:x=-1;n=16;break;case 15:HEAP[__Py_NoneStruct]+=1;x=HEAP[w+32];n=HEAP[x+8];HEAP[HEAP[HEAP[w+32]+16]+4*n]=__Py_NoneStruct;HEAP[x+8]=n+1;x=0;n=16;break;case 16:f=x;break b;default:assert(0,"bad label: "+n)}f=void 0}f=f<0?56:1;break;case 30:b:{n=g;f=STACKTOP;STACKTOP+=4;_memset(f,0,4);r=void 0;for(r=-1;;)switch(r){case -1:var y,U,F=f;y=n;r=FUNCTION_TABLE[HEAP[y+64]](y,F)<0?1:2;break;case 1:U=-1;r=8;break;case 2:r=FUNCTION_TABLE[HEAP[y+64]](y,F)<0?3:4;break;case 3:U=-1;r=8;break;case 4:r=HEAP[HEAP[y+
32]+8]==HEAP[HEAP[y+32]+12]?5:7;break;case 5:r=c(HEAP[y+32])<0?6:7;break;case 6:U=-1;r=8;break;case 7:HEAP[__Py_NoneStruct]+=1;U=HEAP[y+32];r=HEAP[U+8];HEAP[HEAP[HEAP[y+32]+16]+4*r]=__Py_NoneStruct;HEAP[U+8]=r+1;U=0;r=8;break;case 8:n=U;STACKTOP=f;f=n;break b;default:assert(0,"bad label: "+r)}f=void 0}f=f<0?56:1;break;case 31:f=a(HEAP[g+32],HEAP[HEAP[g+32]+8]-1)<0?56:1;break;case 32:b:{f=g;n=void 0;for(n=-1;;)switch(n){case -1:var A,z,xa;A=f;xa=D(A);n=xa<0?1:2;break;case 1:z=-1;n=3;break;case 2:z=
a(HEAP[A+32],xa);n=3;break;case 3:f=z;break b;default:assert(0,"bad label: "+n)}f=void 0}f=f<0?56:1;break;case 33:b:{f=g;n=void 0;for(n=-1;;)switch(n){case -1:var C,ga;C=f;n=HEAP[HEAP[C+32]+8]<=0?1:2;break;case 1:ga=b();n=3;break;case 2:a(HEAP[C+32],HEAP[HEAP[C+32]+8]-1);ga=0;n=3;break;case 3:f=ga;break b;default:assert(0,"bad label: "+n)}f=void 0}f=f<0?56:1;break;case 34:f=Va(g)<0?56:1;break;case 35:f=Wa(g)<0?56:1;break;case 36:f=ia(g)<0?56:1;break;case 37:f=Ia(g)<0?56:1;break;case 38:f=Za(g,1)<
0?56:1;break;case 39:f=Za(g,2)<0?56:1;break;case 40:f=Za(g,4)<0?56:1;break;case 41:f=Fa(g)<0?56:1;break;case 42:f=Ta(g)<0?56:1;break;case 43:f=Ea(g)<0?56:1;break;case 44:f=Xa(g)<0?56:1;break;case 45:f=Ha(g)<0?56:1;break;case 46:f=ta(g)<0?56:1;break;case 47:f=a(HEAP[g+32],HEAP[HEAP[g+32]+8]-2)<0?56:1;break;case 48:b:{f=g;n=void 0;for(n=-1;;)switch(n){case -1:var X,va,E;X=f;E=D(X);n=E<0?1:2;break;case 1:va=-1;n=3;break;case 2:va=a(HEAP[X+32],E);n=3;break;case 3:f=va;break b;default:assert(0,"bad label: "+
n)}f=void 0}f=f<0?56:1;break;case 49:f=wa(g)<0?56:1;break;case 50:f=Ya(g)<0?56:1;break;case 51:b:{f=g;n=void 0;for(n=-1;;)switch(n){case -1:var G,J;G=f;n=HEAP[HEAP[G+32]+8]<=1?1:2;break;case 1:J=b();n=6;break;case 2:a(HEAP[G+32],HEAP[HEAP[G+32]+8]-2);n=HEAP[HEAP[G+32]+8]==HEAP[HEAP[G+32]+12]?3:5;break;case 3:n=c(HEAP[G+32])<0?4:5;break;case 4:J=-1;n=6;break;case 5:HEAP[__Py_NoneStruct]+=1;J=HEAP[G+32];n=HEAP[J+8];HEAP[HEAP[HEAP[G+32]+16]+4*n]=__Py_NoneStruct;HEAP[J+8]=n+1;J=0;n=6;break;case 6:f=J;
break b;default:assert(0,"bad label: "+n)}f=void 0}f=f<0?56:1;break;case 52:f=ma(g)<0?56:1;break;case 53:f=I(g,__Py_TrueStruct)<0?56:1;break;case 54:f=I(g,__Py_ZeroStruct)<0?56:1;break;case 55:h(HEAP[P],qd,Ic,allocate([HEAP[HEAP[m]],0,0,0],["i32",0,0,0],ALLOC_STACK));j=0;f=64;break;case 56:k=f=_PyErr_Occurred();f=f!=0?57:60;break;case 57:f=k==HEAP[_PyExc_EOFError]?58:59;break;case 58:_PyErr_SetNone(HEAP[_PyExc_EOFError]);f=59;break;case 59:j=0;f=64;break;case 60:f=HEAP[HEAP[g+32]+8]!=0?61:62;break;
case 61:l=HEAP[HEAP[g+32]+16];f=HEAP[g+32];HEAP[f+8]-=1;l=HEAP[l+4*HEAP[f+8]];f=63;break;case 62:_PyErr_SetString(HEAP[P],Vc);l=0;f=63;break;case 63:j=l;f=64;break;case 64:d=j;STACKTOP=e;e=d;break a;default:assert(0,"bad label: "+f)}e=void 0}return e},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;c=a;_PyObject_GC_UnTrack(c);b=HEAP[c+16]!=0?1:3;break;case 1:b=HEAP[c+16];HEAP[b]-=1;b=HEAP[b]==0?2:3;break;case 2:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+16]+4]+24]](HEAP[c+16]);b=3;break;case 3:b=HEAP[c+
20]!=0?4:6;break;case 4:b=HEAP[c+20];HEAP[b]-=1;b=HEAP[b]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+20]+4]+24]](HEAP[c+20]);b=6;break;case 6:b=HEAP[c+12]!=0?7:9;break;case 7:b=HEAP[c+12];HEAP[b]-=1;b=HEAP[b]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+12]+4]+24]](HEAP[c+12]);b=9;break;case 9:b=HEAP[c+24]!=0?10:12;break;case 10:b=HEAP[c+24];HEAP[b]-=1;b=HEAP[b]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+24]+4]+24]](HEAP[c+24]);b=12;break;case 12:b=HEAP[c+32]!=0?13:15;
break;case 13:b=HEAP[c+32];HEAP[b]-=1;b=HEAP[b]==0?14:15;break;case 14:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+32]+4]+24]](HEAP[c+32]);b=15;break;case 15:b=HEAP[c+40]!=0?16:18;break;case 16:b=HEAP[c+40];HEAP[b]-=1;b=HEAP[b]==0?17:18;break;case 17:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+40]+4]+24]](HEAP[c+40]);b=18;break;case 18:b=HEAP[c+28]!=0?19:21;break;case 19:b=HEAP[c+28];HEAP[b]-=1;b=HEAP[b]==0?20:21;break;case 20:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+28]+4]+24]](HEAP[c+28]);b=21;break;case 21:b=HEAP[c+44]!=0?22:
24;break;case 22:b=HEAP[c+44];HEAP[b]-=1;b=HEAP[b]==0?23:24;break;case 23:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+44]+4]+24]](HEAP[c+44]);b=24;break;case 24:b=HEAP[c+76]!=0?25:27;break;case 25:b=HEAP[c+76];HEAP[b]-=1;b=HEAP[b]==0?26:27;break;case 26:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+76]+4]+24]](HEAP[c+76]);b=27;break;case 27:b=HEAP[c+48]!=0?28:29;break;case 28:_free(HEAP[c+48]);b=29;break;case 29:b=HEAP[c+68]!=0?30:31;break;case 30:_free(HEAP[c+72]);b=31;break;case 31:FUNCTION_TABLE[HEAP[HEAP[c+4]+160]](c);
return;default:assert(0,"bad label: "+b)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f;d=a;e=b;c=_strcmp(e,sf)==0?1:4;break;case 1:c=HEAP[d+40]==0?2:3;break;case 2:_PyErr_SetString(HEAP[_PyExc_AttributeError],e);f=0;c=15;break;case 3:HEAP[HEAP[d+40]]+=1;f=HEAP[d+40];c=15;break;case 4:c=_strcmp(e,ce)==0?5:8;break;case 5:c=HEAP[d+76]==0?6:7;break;case 6:_PyErr_SetString(HEAP[_PyExc_AttributeError],e);f=0;c=15;break;case 7:HEAP[HEAP[d+76]]+=1;f=HEAP[d+76];c=15;break;case 8:c=_strcmp(e,
fe)==0?9:12;break;case 9:c=HEAP[d+24]==0?10:11;break;case 10:_PyErr_SetString(HEAP[_PyExc_AttributeError],e);f=0;c=15;break;case 11:HEAP[HEAP[d+24]]+=1;f=HEAP[d+24];c=15;break;case 12:c=_strcmp(e,Me)==0?13:14;break;case 13:HEAP[HEAP[P]]+=1;f=HEAP[P];c=15;break;case 14:f=_Py_FindMethod(Bc,d,e);c=15;break;case 15:return c=f;default:assert(0,"bad label: "+c)}},0,function(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h;e=a;f=b;g=c;d=_strcmp(f,sf)==0?1:7;break;case 1:d=HEAP[e+40]!=0?2:4;break;case 2:d=
HEAP[e+40];HEAP[d]-=1;d=HEAP[d]==0?3:4;break;case 3:FUNCTION_TABLE[HEAP[HEAP[HEAP[e+40]+4]+24]](HEAP[e+40]);d=4;break;case 4:HEAP[e+40]=g;d=g!=0?5:6;break;case 5:HEAP[g]+=1;d=6;break;case 6:h=0;d=24;break;case 7:d=_strcmp(f,ce)==0?8:14;break;case 8:d=HEAP[e+76]!=0?9:11;break;case 9:d=HEAP[e+76];HEAP[d]-=1;d=HEAP[d]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[HEAP[e+76]+4]+24]](HEAP[e+76]);d=11;break;case 11:HEAP[e+76]=g;d=g!=0?12:13;break;case 12:HEAP[g]+=1;d=13;break;case 13:h=0;d=24;break;case 14:d=
g==0?15:16;break;case 15:_PyErr_SetString(HEAP[_PyExc_TypeError],ee);h=-1;d=24;break;case 16:d=_strcmp(f,fe)==0?17:23;break;case 17:d=(HEAP[HEAP[g+4]+84]&536870912)==0?18:19;break;case 18:_PyErr_SetString(HEAP[_PyExc_TypeError],pe);h=-1;d=24;break;case 19:d=HEAP[e+24]!=0?20:22;break;case 20:d=HEAP[e+24];HEAP[d]-=1;d=HEAP[d]==0?21:22;break;case 21:FUNCTION_TABLE[HEAP[HEAP[HEAP[e+24]+4]+24]](HEAP[e+24]);d=22;break;case 22:HEAP[e+24]=g;HEAP[g]+=1;h=0;d=24;break;case 23:_PyErr_SetString(HEAP[_PyExc_AttributeError],
f);h=-1;d=24;break;case 24:return a=h;default:assert(0,"bad label: "+d)}},0,function(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j,k,l,m,n,o,p,q,r;e=a;f=b;g=c;d=HEAP[e+16]!=0?1:3;break;case 1:j=FUNCTION_TABLE[f](HEAP[e+16],g);d=j!=0?2:3;break;case 2:h=j;d=28;break;case 3:d=HEAP[e+20]!=0?4:6;break;case 4:k=FUNCTION_TABLE[f](HEAP[e+20],g);d=k!=0?5:6;break;case 5:h=k;d=28;break;case 6:d=HEAP[e+12]!=0?7:9;break;case 7:l=FUNCTION_TABLE[f](HEAP[e+12],g);d=l!=0?8:9;break;case 8:h=l;d=28;break;
case 9:d=HEAP[e+24]!=0?10:12;break;case 10:m=FUNCTION_TABLE[f](HEAP[e+24],g);d=m!=0?11:12;break;case 11:h=m;d=28;break;case 12:d=HEAP[e+32]!=0?13:15;break;case 13:n=FUNCTION_TABLE[f](HEAP[e+32],g);d=n!=0?14:15;break;case 14:h=n;d=28;break;case 15:d=HEAP[e+40]!=0?16:18;break;case 16:o=FUNCTION_TABLE[f](HEAP[e+40],g);d=o!=0?17:18;break;case 17:h=o;d=28;break;case 18:d=HEAP[e+28]!=0?19:21;break;case 19:p=FUNCTION_TABLE[f](HEAP[e+28],g);d=p!=0?20:21;break;case 20:h=p;d=28;break;case 21:d=HEAP[e+44]!=
0?22:24;break;case 22:q=FUNCTION_TABLE[f](HEAP[e+44],g);d=q!=0?23:24;break;case 23:h=q;d=28;break;case 24:d=HEAP[e+76]!=0?25:27;break;case 25:r=FUNCTION_TABLE[f](HEAP[e+76],g);d=r!=0?26:27;break;case 26:h=r;d=28;break;case 27:h=0;d=28;break;case 28:return a=h;default:assert(0,"bad label: "+d)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c,d,e,f,g,h,j,k,l,m;c=a;b=HEAP[c+16]!=0?1:3;break;case 1:d=HEAP[c+16];HEAP[c+16]=0;HEAP[d]-=1;b=HEAP[d]==0?2:3;break;case 2:FUNCTION_TABLE[HEAP[HEAP[d+4]+
24]](d);b=3;break;case 3:b=HEAP[c+20]!=0?4:6;break;case 4:e=HEAP[c+20];HEAP[c+20]=0;HEAP[e]-=1;b=HEAP[e]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[e+4]+24]](e);b=6;break;case 6:b=HEAP[c+12]!=0?7:9;break;case 7:f=HEAP[c+12];HEAP[c+12]=0;HEAP[f]-=1;b=HEAP[f]==0?8:9;break;case 8:FUNCTION_TABLE[HEAP[HEAP[f+4]+24]](f);b=9;break;case 9:b=HEAP[c+24]!=0?10:12;break;case 10:g=HEAP[c+24];HEAP[c+24]=0;HEAP[g]-=1;b=HEAP[g]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);b=12;break;case 12:b=HEAP[c+
32]!=0?13:15;break;case 13:h=HEAP[c+32];HEAP[c+32]=0;HEAP[h]-=1;b=HEAP[h]==0?14:15;break;case 14:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);b=15;break;case 15:b=HEAP[c+40]!=0?16:18;break;case 16:j=HEAP[c+40];HEAP[c+40]=0;HEAP[j]-=1;b=HEAP[j]==0?17:18;break;case 17:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);b=18;break;case 18:b=HEAP[c+28]!=0?19:21;break;case 19:k=HEAP[c+28];HEAP[c+28]=0;HEAP[k]-=1;b=HEAP[k]==0?20:21;break;case 20:FUNCTION_TABLE[HEAP[HEAP[k+4]+24]](k);b=21;break;case 21:b=HEAP[c+44]!=0?22:24;
break;case 22:l=HEAP[c+44];HEAP[c+44]=0;HEAP[l]-=1;b=HEAP[l]==0?23:24;break;case 23:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);b=24;break;case 24:b=HEAP[c+76]!=0?25:27;break;case 25:m=HEAP[c+76];HEAP[c+76]=0;HEAP[m]-=1;b=HEAP[m]==0?26:27;break;case 26:FUNCTION_TABLE[HEAP[HEAP[m+4]+24]](m);b=27;break;case 27:return 0;default:assert(0,"bad label: "+b)}},0,function(a,b,c){a=STACKTOP;STACKTOP+=12;_memset(a,0,12);var d;for(d=-1;;)switch(d){case -1:var e,f=a,g=a+4,h,j,k=a+8;d=b;e=c;j=h=0;HEAP[k]=0;d=_PyArg_ParseTupleAndKeywords(d,
e,Qe,Td,allocate([f,0,0,0,g,0,0,0,k,0,0,0],["%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?4:1;break;case 1:j=G(HEAP[g],HEAP[k]);d=j==0?7:2;break;case 2:d=C(j,HEAP[f])<0?4:3;break;case 3:HEAP[__Py_NoneStruct]+=1;h=__Py_NoneStruct;d=4;break;case 4:d=j!=0?5:7;break;case 5:HEAP[j]-=1;d=HEAP[j]==0?6:7;break;case 6:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);d=7;break;case 7:return b=h,STACKTOP=a,b;default:assert(0,"bad label: "+d)}},0,function(a,b,c){a=STACKTOP;STACKTOP+=
8;_memset(a,0,8);var d;for(d=-1;;)switch(d){case -1:var e,f=a,g,h,j,k=a+4;d=b;e=c;j=h=g=0;HEAP[k]=0;d=_PyArg_ParseTupleAndKeywords(d,e,ff,af,allocate([f,0,0,0,k,0,0,0],["%struct.PyObject**",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?5:1;break;case 1:g=FUNCTION_TABLE[HEAP[HEAP[Qa]+16]](128);d=g==0?5:2;break;case 2:j=G(g,HEAP[k]);d=j==0?8:3;break;case 3:d=C(j,HEAP[f])<0?5:4;break;case 4:h=FUNCTION_TABLE[HEAP[HEAP[Qa]+12]](g);d=5;break;case 5:d=j!=0?6:8;break;case 6:HEAP[j]-=1;d=HEAP[j]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[j+
4]+24]](j);d=8;break;case 8:d=g!=0?9:11;break;case 9:HEAP[g]-=1;d=HEAP[g]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);d=11;break;case 11:return b=h,STACKTOP=a,b;default:assert(0,"bad label: "+d)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e;c=b;d=0;e=Ka(c);c=e==0?4:1;break;case 1:d=La(e);c=e!=0?2:4;break;case 2:HEAP[e]-=1;c=HEAP[e]==0?3:4;break;case 3:FUNCTION_TABLE[HEAP[HEAP[e+4]+24]](e);c=4;break;case 4:return d;default:assert(0,"bad label: "+c)}},0,function(a,b){var c=
STACKTOP;STACKTOP+=4;_memset(c,0,4);var d;for(d=-1;;)switch(d){case -1:var e;e=c;var f,g,h;d=b;h=g=f=0;d=_PyArg_ParseTuple(d,Ub,allocate([e,0,0,0],["%struct.PyObject**",0,0,0],ALLOC_STACK))==0?4:1;break;case 1:f=FUNCTION_TABLE[HEAP[HEAP[Qa]+20]](HEAP[e]);d=f==0?7:2;break;case 2:h=Ka(f);d=h==0?4:3;break;case 3:g=La(h);d=4;break;case 4:d=f!=0?5:7;break;case 5:HEAP[f]-=1;d=HEAP[f]==0?6:7;break;case 6:FUNCTION_TABLE[HEAP[HEAP[f+4]+24]](f);d=7;break;case 7:d=h!=0?8:10;break;case 8:HEAP[h]-=1;d=HEAP[h]==
0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);d=10;break;case 10:return e=g,STACKTOP=c,e;default:assert(0,"bad label: "+d)}},0,function(a,b,c){a=STACKTOP;STACKTOP+=8;_memset(a,0,8);var d;for(d=-1;;)switch(d){case -1:var e,f,g,h=a,j=a+4;e=b;f=c;HEAP[h]=0;HEAP[j]=0;d=_PyArg_ParseTuple(e,Fe,allocate([j,0,0,0],["i32*",0,0,0],ALLOC_STACK))==0?1:3;break;case 1:_PyErr_Clear();HEAP[j]=0;d=_PyArg_ParseTupleAndKeywords(e,f,ye,Hd,allocate([h,0,0,0,j,0,0,0],["%struct.PyObject**",0,0,0,"i32*",0,0,
0],ALLOC_STACK))==0?2:3;break;case 2:g=0;d=4;break;case 3:g=G(HEAP[h],HEAP[j]);d=4;break;case 4:return b=g,STACKTOP=a,b;default:assert(0,"bad label: "+d)}},0,function(a,b){return Ka(b)},0]);$a.run=Ra;Ra();return $a});
=======
"use strict";

// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET) {
  var Module = {};
  var args = [];
  Module.arguments = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime essentials
//========================================

var __globalConstructor__ = function globalConstructor() {
}

// === Body ===



var $0___SIZE = 196; // %0
  
var $1___SIZE = 64; // %1
  
var $2___SIZE = 16; // %2
  
var $3___SIZE = 60; // %3
  
var $4___SIZE = 20; // %4
  
var $5___SIZE = 20; // %5
  
var $6___SIZE = 100; // %6
  
var $7___SIZE = 20; // %7
  
var $8___SIZE = 196; // %8
  
var $9___SIZE = 48; // %9
  
var $10___SIZE = 196; // %10
  
var $11___SIZE = 112; // %11
  
var $struct_FILE___SIZE = 148; // %struct.FILE
  var $struct_FILE___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,70,71,72,76,84,88,92,96,100,104,108];
var $struct_Pdata___SIZE = 20; // %struct.Pdata
  
var $struct_Picklerobject___SIZE = 72; // %struct.Picklerobject
  
var $struct_PyBufferProcs___SIZE = 24; // %struct.PyBufferProcs
  
var $struct_PyClassObject___SIZE = 36; // %struct.PyClassObject
  
var $struct_PyCompilerFlags___SIZE = 4; // %struct.PyCompilerFlags
  
var $struct_PyFileObject___SIZE = 84; // %struct.PyFileObject
  
var $struct_PyFloatObject___SIZE = 16; // %struct.PyFloatObject
  
var $struct_PyGetSetDef___SIZE = 20; // %struct.PyGetSetDef
  
var $struct_PyIntObject___SIZE = 12; // %struct.PyIntObject
  
var $struct_PyInterpreterState___SIZE = 40; // %struct.PyInterpreterState
  
var $struct_PyListObject___SIZE = 20; // %struct.PyListObject
  
var $struct_PyLongObject___SIZE = 0; // %struct.PyLongObject
  var $struct_PyLongObject___FLATTENER = [];
var $struct_PyMappingMethods___SIZE = 12; // %struct.PyMappingMethods
  
var $struct_PyMemberDef___SIZE = 20; // %struct.PyMemberDef
  
var $struct_PyMethodDef___SIZE = 16; // %struct.PyMethodDef
  
var $struct_PyNumberMethods___SIZE = 156; // %struct.PyNumberMethods
  
var $struct_PyObject___SIZE = 8; // %struct.PyObject
  
var $struct_PySequenceMethods___SIZE = 40; // %struct.PySequenceMethods
  
var $struct_PyStringObject___SIZE = 24; // %struct.PyStringObject
  
var $struct_PyThreadState___SIZE = 84; // %struct.PyThreadState
  
var $struct_PyTupleObject___SIZE = 16; // %struct.PyTupleObject
  
var $struct_PyUnicodeObject___SIZE = 24; // %struct.PyUnicodeObject
  
var $struct_Py_buffer___SIZE = 52; // %struct.Py_buffer
  var $struct_Py_buffer___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,48];
var $struct_PycStringIO_CAPI___SIZE = 32; // %struct.PycStringIO_CAPI
  
var $struct_Unpicklerobject___SIZE = 80; // %struct.Unpicklerobject
  
var $struct__IO_marker___SIZE = 12; // %struct._IO_marker
  
var $struct__frame___SIZE = 0; // %struct._frame
  var $struct__frame___FLATTENER = [];
var $struct__typeobject___SIZE = 196; // %struct._typeobject
  
var _cPickle_module_documentation;
var _MARKv;
var __str;
var __str1;
var _PdataType;
var _UnpicklingError;
var __str2;


var _PycStringIO;

var _empty_tuple;

var _PicklingError;
var __str3;
var __str4;
var __str5;
var __str6;

var __str7;
var ___main___str;

var __str8;
var _none_9451;
var _len_9463;
var _buf_9462;
var __str9;
var __str10;

var __str11;
var _l_9538;
var __str12;
var _string_9677;
var __str13;
var _string_9895;
var __str14;
var __str15;
var ___PRETTY_FUNCTION___10017;
var _pop_10042;
var _len2opcode_10044;
var _pop_mark_10043;
var _tuple_10041;
var __str16;
var ___PRETTY_FUNCTION___10137;
var _append_10135;
var _appends_10136;


var __str17;
var ___PRETTY_FUNCTION___10326;

var __str18;
var _setitem_10324;
var _setitems_10325;
var __str19;
var ___PRETTY_FUNCTION___10501;
var __str20;
var _setitem_10499;
var _setitems_10500;

var __str21;

var __str22;
var __str23;
var ___class___str;
var ___getinitargs___str;
var __str24;
var _inst_10654;
var _obj_10655;
var ___getstate___str;
var ___dict___str;
var _build_10656;
var ___name___str;
var __str25;
var __str26;
var __str27;
var __str28;
var __str29;
var _two_tuple;
var _extension_registry;
var __str30;
var __str31;
var __str32;
var __str33;
var _global_10855;
var __str34;
var _persid_10999;
var _binpersid_11000;
var __str35;
var __str36;
var __str37;
var __str38;
var __str39;
var __str40;
var __str41;
var __str42;
var __str43;
var __str44;
var __str45;
var __str46;
var _newobj_11120;
var _reduce_11118;
var _build_11119;













var _PickleError;

var _dispatch_table;
var ___reduce_ex___str;
var ___reduce___str;
var _UnpickleableError;
var __str47;
var __str48;
var _stop_11690;
var __str49;
var __str50;
var __str51;
var __str52;
var __str53;
var __str54;
var __str55;
var __str56;
var __str57;
var __str58;
var __str59;
var _Pickler_methods;
var __str60;

var __str61;
var _write_str;
var __str62;
var __str63;
var _dispatch_table_str;
var __str64;
var __str65;
var _kwlist_12011;
var __str66;
var __str67;
var __str68;
var __str69;
var __str70;
var __str71;
var __str72;
var __str73;
var _Pickler_members;
var __str74;
var __str75;
var _Pickler_getsets;
var _Picklertype__doc__;
var __str76;
var _Picklertype;
var __str77;
var __str78;
var __str79;
var __str80;
var __str81;
var ___PRETTY_FUNCTION___12572;
var __str82;
var ___PRETTY_FUNCTION___12743;
var __str83;
var __str84;
var __str85;
var __str86;
var __str87;
var __str88;
var __str89;
var __str90;
var __str91;
var __str92;
var _BadPickleGet;
var __str93;
var ___PRETTY_FUNCTION___14342;
var __str94;
var _extension_cache;
var _inverted_registry;
var __str95;
var __str96;
var _append_str;
var ___setstate___str;
var __str97;
var __str98;
var __str99;
var ___PRETTY_FUNCTION___15142;
var __str100;
var __str101;
var __str102;
var ___PRETTY_FUNCTION___15558;
var __str103;
var __str104;
var __str105;
var __str106;
var _Unpickler_methods;
var _readline_str;
var _read_str;
var __str107;
var __str108;
var __str109;
var __str110;
var __str111;
var _kwlist_16354;
var __str112;
var __str113;
var _kwlist_16391;
var __str114;
var _Unpicklertype__doc__;
var __str115;
var _Unpicklertype;
var __str116;
var __str117;
var __str118;
var __str119;
var __str120;
var __str121;
var __str122;
var __str123;
var __str124;
var __str125;
var _cPickle_methods;
var __str126;
var __str127;
var __str128;
var __str129;
var __str130;
var __str131;
var __str132;
var __str133;
var __str134;
var __str135;
var __str136;
var __str137;
var __str138;
var __str139;
var __str140;
var __str141;
var __str142;
var __str143;
var __str144;
var __str145;
var __str146;
var __str147;
var __str148;
var __str149;
var __str150;
var __str151;
var __str152;
var __str153;
var __str154;
var __str155;
var __str156;
var __str157;
var __str158;
var __str159;
var __str160;
var __str161;
var __str162;
var __str163;
var __str164;
var __str165;
var __str166;
var __str167;





























































































































  function _Pdata_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $i;
        var $p;
        $self_addr=$self;
        var $0=$self_addr; //@line 153 "cPickle.c"
        var $1=$0+8; //@line 153 "cPickle.c"
        var $2=HEAP[$1]; //@line 153 "cPickle.c"
        $i=$2; //@line 153 "cPickle.c"
        var $3=$self_addr; //@line 153 "cPickle.c"
        var $4=$3+16; //@line 153 "cPickle.c"
        var $5=HEAP[$4]; //@line 153 "cPickle.c"
        $p=$5; //@line 153 "cPickle.c"
        var $6=$i; //@line 153 "cPickle.c"
        var $7=($6) - 1; //@line 153 "cPickle.c"
        $i=$7; //@line 153 "cPickle.c"
        var $8=($7) >= 0; //@line 153 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 153 "cPickle.c"
      case 1: // $bb
        var $9=$p; //@line 154 "cPickle.c"
        var $10=HEAP[$9]; //@line 154 "cPickle.c"
        var $11=$10; //@line 154 "cPickle.c"
        var $12=HEAP[$11]; //@line 154 "cPickle.c"
        var $13=($12) - 1; //@line 154 "cPickle.c"
        var $14=$10; //@line 154 "cPickle.c"
        HEAP[$14]=$13; //@line 154 "cPickle.c"
        var $15=$10; //@line 154 "cPickle.c"
        var $16=HEAP[$15]; //@line 154 "cPickle.c"
        var $17=($16)==0; //@line 154 "cPickle.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 154 "cPickle.c"
      case 2: // $bb1
        var $18=$p; //@line 154 "cPickle.c"
        var $19=HEAP[$18]; //@line 154 "cPickle.c"
        var $20=$19+4; //@line 154 "cPickle.c"
        var $21=HEAP[$20]; //@line 154 "cPickle.c"
        var $22=$21+24; //@line 154 "cPickle.c"
        var $23=HEAP[$22]; //@line 154 "cPickle.c"
        var $24=$p; //@line 154 "cPickle.c"
        var $25=HEAP[$24]; //@line 154 "cPickle.c"
        FUNCTION_TABLE[$23]($25); //@line 154 "cPickle.c"
        __label__ = 3; break; //@line 154 "cPickle.c"
      case 3: // $bb2
        var $26=$p; //@line 153 "cPickle.c"
        var $27=$26+4; //@line 153 "cPickle.c"
        $p=$27; //@line 153 "cPickle.c"
        var $28=$i; //@line 153 "cPickle.c"
        var $29=($28) - 1; //@line 153 "cPickle.c"
        $i=$29; //@line 153 "cPickle.c"
        var $30=($29) >= 0; //@line 153 "cPickle.c"
        if ($30) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 153 "cPickle.c"
      case 4: // $bb4
        var $31=$self_addr; //@line 156 "cPickle.c"
        var $32=$31+16; //@line 156 "cPickle.c"
        var $33=HEAP[$32]; //@line 156 "cPickle.c"
        var $34=($33)!=0; //@line 156 "cPickle.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 156 "cPickle.c"
      case 5: // $bb5
        var $35=$self_addr; //@line 157 "cPickle.c"
        var $36=$35+16; //@line 157 "cPickle.c"
        var $37=HEAP[$36]; //@line 157 "cPickle.c"
        var $38=$37; //@line 157 "cPickle.c"
        _free($38); //@line 157 "cPickle.c"
        __label__ = 6; break; //@line 157 "cPickle.c"
      case 6: // $bb6
        var $39=$self_addr; //@line 158 "cPickle.c"
        var $40=$39; //@line 158 "cPickle.c"
        _PyObject_Free($40); //@line 158 "cPickle.c"
        ;
        return; //@line 159 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_New() {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval;
        var $0;
        var $self;
        var $1=__PyObject_New(_PdataType); //@line 174 "cPickle.c"
        var $2=$1; //@line 174 "cPickle.c"
        $self=$2; //@line 174 "cPickle.c"
        var $3=$self; //@line 174 "cPickle.c"
        var $4=($3)==0; //@line 174 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 174 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 175 "cPickle.c"
        __label__ = 7; break; //@line 175 "cPickle.c"
      case 2: // $bb1
        var $5=$self; //@line 176 "cPickle.c"
        var $6=$5+12; //@line 176 "cPickle.c"
        HEAP[$6]=8; //@line 176 "cPickle.c"
        var $7=$self; //@line 177 "cPickle.c"
        var $8=$7+8; //@line 177 "cPickle.c"
        HEAP[$8]=0; //@line 177 "cPickle.c"
        var $9=$self; //@line 178 "cPickle.c"
        var $10=$9+12; //@line 178 "cPickle.c"
        var $11=HEAP[$10]; //@line 178 "cPickle.c"
        var $12=($11) * 4; //@line 178 "cPickle.c"
        var $13=_malloc($12); //@line 178 "cPickle.c"
        var $14=$13; //@line 178 "cPickle.c"
        var $15=$self; //@line 178 "cPickle.c"
        var $16=$15+16; //@line 178 "cPickle.c"
        HEAP[$16]=$14; //@line 178 "cPickle.c"
        var $17=$self; //@line 179 "cPickle.c"
        var $18=$17+16; //@line 179 "cPickle.c"
        var $19=HEAP[$18]; //@line 179 "cPickle.c"
        var $20=($19)!=0; //@line 179 "cPickle.c"
        var $21=$self; //@line 180 "cPickle.c"
        var $22=$21; //@line 180 "cPickle.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 179 "cPickle.c"
      case 3: // $bb2
        $0=$22; //@line 180 "cPickle.c"
        __label__ = 7; break; //@line 180 "cPickle.c"
      case 4: // $bb3
        var $23=$22; //@line 181 "cPickle.c"
        var $24=HEAP[$23]; //@line 181 "cPickle.c"
        var $25=($24) - 1; //@line 181 "cPickle.c"
        var $26=$22; //@line 181 "cPickle.c"
        HEAP[$26]=$25; //@line 181 "cPickle.c"
        var $27=$22; //@line 181 "cPickle.c"
        var $28=HEAP[$27]; //@line 181 "cPickle.c"
        var $29=($28)==0; //@line 181 "cPickle.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 181 "cPickle.c"
      case 5: // $bb4
        var $30=$self; //@line 181 "cPickle.c"
        var $31=$30; //@line 181 "cPickle.c"
        var $32=$31+4; //@line 181 "cPickle.c"
        var $33=HEAP[$32]; //@line 181 "cPickle.c"
        var $34=$33+24; //@line 181 "cPickle.c"
        var $35=HEAP[$34]; //@line 181 "cPickle.c"
        var $36=$self; //@line 181 "cPickle.c"
        var $37=$36; //@line 181 "cPickle.c"
        FUNCTION_TABLE[$35]($37); //@line 181 "cPickle.c"
        __label__ = 6; break; //@line 181 "cPickle.c"
      case 6: // $bb5
        var $38=_PyErr_NoMemory(); //@line 182 "cPickle.c"
        $0=$38; //@line 182 "cPickle.c"
        __label__ = 7; break; //@line 182 "cPickle.c"
      case 7: // $bb6
        var $39=$0; //@line 175 "cPickle.c"
        $retval=$39; //@line 175 "cPickle.c"
        var $retval7=$retval; //@line 175 "cPickle.c"
        ;
        return $retval7; //@line 175 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stackUnderflow() {
    ;
    var __label__;
  
    var $retval;
    var $0;
    var $1=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
    _PyErr_SetString($1, __str2); //@line 188 "cPickle.c"
    $0=-1; //@line 189 "cPickle.c"
    var $2=$0; //@line 189 "cPickle.c"
    $retval=$2; //@line 189 "cPickle.c"
    var $retval1=$retval; //@line 189 "cPickle.c"
    ;
    return $retval1; //@line 189 "cPickle.c"
  }
  

  function _Pdata_clear($self, $clearto) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $clearto_addr;
        var $retval;
        var $0;
        var $i;
        var $p;
        var $_py_tmp;
        $self_addr=$self;
        $clearto_addr=$clearto;
        var $1=$clearto_addr; //@line 201 "cPickle.c"
        var $2=($1) < 0; //@line 201 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 201 "cPickle.c"
      case 1: // $bb
        var $3=_stackUnderflow(); //@line 201 "cPickle.c"
        $0=$3; //@line 201 "cPickle.c"
        __label__ = 10; break; //@line 201 "cPickle.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 202 "cPickle.c"
        var $5=$4+8; //@line 202 "cPickle.c"
        var $6=HEAP[$5]; //@line 202 "cPickle.c"
        var $7=$clearto_addr; //@line 202 "cPickle.c"
        var $8=($6) <= ($7); //@line 202 "cPickle.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 202 "cPickle.c"
      case 3: // $bb2
        $0=0; //@line 202 "cPickle.c"
        __label__ = 10; break; //@line 202 "cPickle.c"
      case 4: // $bb3
        var $9=$self_addr; //@line 204 "cPickle.c"
        var $10=$9+8; //@line 204 "cPickle.c"
        var $11=HEAP[$10]; //@line 204 "cPickle.c"
        $i=$11; //@line 204 "cPickle.c"
        var $12=$self_addr; //@line 204 "cPickle.c"
        var $13=$12+16; //@line 204 "cPickle.c"
        var $14=HEAP[$13]; //@line 204 "cPickle.c"
        var $15=$clearto_addr; //@line 204 "cPickle.c"
        var $16=$14+4*$15; //@line 204 "cPickle.c"
        $p=$16; //@line 204 "cPickle.c"
        var $17=$i; //@line 205 "cPickle.c"
        var $18=($17) - 1; //@line 205 "cPickle.c"
        $i=$18; //@line 205 "cPickle.c"
        var $19=$i; //@line 205 "cPickle.c"
        var $20=$clearto_addr; //@line 205 "cPickle.c"
        var $21=($19) >= ($20); //@line 205 "cPickle.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 205 "cPickle.c"
      case 5: // $bb4
        var $22=$p; //@line 207 "cPickle.c"
        var $23=HEAP[$22]; //@line 207 "cPickle.c"
        var $24=($23)!=0; //@line 207 "cPickle.c"
        if ($24) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 207 "cPickle.c"
      case 6: // $bb5
        var $25=$p; //@line 207 "cPickle.c"
        var $26=HEAP[$25]; //@line 207 "cPickle.c"
        $_py_tmp=$26; //@line 207 "cPickle.c"
        var $27=$p; //@line 207 "cPickle.c"
        HEAP[$27]=0; //@line 207 "cPickle.c"
        var $28=$_py_tmp; //@line 207 "cPickle.c"
        var $29=$28; //@line 207 "cPickle.c"
        var $30=HEAP[$29]; //@line 207 "cPickle.c"
        var $31=($30) - 1; //@line 207 "cPickle.c"
        var $32=$_py_tmp; //@line 207 "cPickle.c"
        var $33=$32; //@line 207 "cPickle.c"
        HEAP[$33]=$31; //@line 207 "cPickle.c"
        var $34=$_py_tmp; //@line 207 "cPickle.c"
        var $35=$34; //@line 207 "cPickle.c"
        var $36=HEAP[$35]; //@line 207 "cPickle.c"
        var $37=($36)==0; //@line 207 "cPickle.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 207 "cPickle.c"
      case 7: // $bb6
        var $38=$_py_tmp; //@line 207 "cPickle.c"
        var $39=$38+4; //@line 207 "cPickle.c"
        var $40=HEAP[$39]; //@line 207 "cPickle.c"
        var $41=$40+24; //@line 207 "cPickle.c"
        var $42=HEAP[$41]; //@line 207 "cPickle.c"
        var $43=$_py_tmp; //@line 207 "cPickle.c"
        FUNCTION_TABLE[$42]($43); //@line 207 "cPickle.c"
        __label__ = 8; break; //@line 207 "cPickle.c"
      case 8: // $bb7
        var $44=$p; //@line 206 "cPickle.c"
        var $45=$44+4; //@line 206 "cPickle.c"
        $p=$45; //@line 206 "cPickle.c"
        var $46=$i; //@line 205 "cPickle.c"
        var $47=($46) - 1; //@line 205 "cPickle.c"
        $i=$47; //@line 205 "cPickle.c"
        var $48=$i; //@line 205 "cPickle.c"
        var $49=$clearto_addr; //@line 205 "cPickle.c"
        var $50=($48) >= ($49); //@line 205 "cPickle.c"
        if ($50) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 205 "cPickle.c"
      case 9: // $bb9
        var $51=$self_addr; //@line 209 "cPickle.c"
        var $52=$51+8; //@line 209 "cPickle.c"
        var $53=$clearto_addr; //@line 209 "cPickle.c"
        HEAP[$52]=$53; //@line 209 "cPickle.c"
        $0=0; //@line 211 "cPickle.c"
        __label__ = 10; break; //@line 211 "cPickle.c"
      case 10: // $bb10
        var $54=$0; //@line 201 "cPickle.c"
        $retval=$54; //@line 201 "cPickle.c"
        var $retval11=$retval; //@line 201 "cPickle.c"
        ;
        return $retval11; //@line 201 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_grow($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $bigger;
        var $nbytes;
        var $tmp;
        $self_addr=$self;
        var $1=$self_addr; //@line 221 "cPickle.c"
        var $2=$1+12; //@line 221 "cPickle.c"
        var $3=HEAP[$2]; //@line 221 "cPickle.c"
        var $4=($3) << 1; //@line 221 "cPickle.c"
        $bigger=$4; //@line 221 "cPickle.c"
        var $5=$bigger; //@line 222 "cPickle.c"
        var $6=($5) <= 0; //@line 222 "cPickle.c"
        if ($6) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 222 "cPickle.c"
      case 1: // $bb
        var $7=$bigger; //@line 226 "cPickle.c"
        var $8=($7) * 4; //@line 226 "cPickle.c"
        $nbytes=$8; //@line 226 "cPickle.c"
        var $9=$nbytes; //@line 227 "cPickle.c"
        var $10=Math.floor(($9)/4); //@line 227 "cPickle.c"
        var $11=$bigger; //@line 227 "cPickle.c"
        var $12=($10)!=($11); //@line 227 "cPickle.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 227 "cPickle.c"
      case 2: // $bb1
        var $13=$self_addr; //@line 229 "cPickle.c"
        var $14=$13+16; //@line 229 "cPickle.c"
        var $15=HEAP[$14]; //@line 229 "cPickle.c"
        var $16=$15; //@line 229 "cPickle.c"
        var $17=$nbytes; //@line 229 "cPickle.c"
        var $18=_realloc($16, $17); //@line 229 "cPickle.c"
        var $19=$18; //@line 229 "cPickle.c"
        $tmp=$19; //@line 229 "cPickle.c"
        var $20=$tmp; //@line 230 "cPickle.c"
        var $21=($20)==0; //@line 230 "cPickle.c"
        if ($21) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 230 "cPickle.c"
      case 3: // $bb2
        var $22=$self_addr; //@line 232 "cPickle.c"
        var $23=$22+16; //@line 232 "cPickle.c"
        var $24=$tmp; //@line 232 "cPickle.c"
        HEAP[$23]=$24; //@line 232 "cPickle.c"
        var $25=$self_addr; //@line 233 "cPickle.c"
        var $26=$25+12; //@line 233 "cPickle.c"
        var $27=$bigger; //@line 233 "cPickle.c"
        HEAP[$26]=$27; //@line 233 "cPickle.c"
        $0=0; //@line 234 "cPickle.c"
        __label__ = 5; break; //@line 234 "cPickle.c"
      case 4: // $nomemory
        var $28=_PyErr_NoMemory(); //@line 237 "cPickle.c"
        $0=-1; //@line 238 "cPickle.c"
        __label__ = 5; break; //@line 238 "cPickle.c"
      case 5: // $bb3
        var $29=$0; //@line 234 "cPickle.c"
        $retval=$29; //@line 234 "cPickle.c"
        var $retval4=$retval; //@line 234 "cPickle.c"
        ;
        return $retval4; //@line 234 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_popTuple($self, $start) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $start_addr;
        var $retval;
        var $0;
        var $r;
        var $i;
        var $j;
        var $l;
        $self_addr=$self;
        $start_addr=$start;
        var $1=$self_addr; //@line 288 "cPickle.c"
        var $2=$1+8; //@line 288 "cPickle.c"
        var $3=HEAP[$2]; //@line 288 "cPickle.c"
        var $4=$start_addr; //@line 288 "cPickle.c"
        var $5=($3) - ($4); //@line 288 "cPickle.c"
        $l=$5; //@line 288 "cPickle.c"
        var $6=$l; //@line 289 "cPickle.c"
        var $7=_PyTuple_New($6); //@line 289 "cPickle.c"
        $r=$7; //@line 289 "cPickle.c"
        var $8=$r; //@line 290 "cPickle.c"
        var $9=($8)==0; //@line 290 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 290 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 291 "cPickle.c"
        __label__ = 5; break; //@line 291 "cPickle.c"
      case 2: // $bb1
        var $10=$start_addr; //@line 292 "cPickle.c"
        $i=$10; //@line 292 "cPickle.c"
        $j=0; //@line 292 "cPickle.c"
        var $11=$j; //@line 292 "cPickle.c"
        var $12=$l; //@line 292 "cPickle.c"
        var $13=($11) < ($12); //@line 292 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 292 "cPickle.c"
      case 3: // $bb2
        var $14=$r; //@line 293 "cPickle.c"
        var $15=$14; //@line 293 "cPickle.c"
        var $16=$j; //@line 293 "cPickle.c"
        var $17=$self_addr; //@line 293 "cPickle.c"
        var $18=$17+16; //@line 293 "cPickle.c"
        var $19=HEAP[$18]; //@line 293 "cPickle.c"
        var $20=$i; //@line 293 "cPickle.c"
        var $21=$19+4*$20; //@line 293 "cPickle.c"
        var $22=HEAP[$21]; //@line 293 "cPickle.c"
        var $23=$15+12; //@line 293 "cPickle.c"
        var $24=$23+$16*4; //@line 293 "cPickle.c"
        HEAP[$24]=$22; //@line 293 "cPickle.c"
        var $25=$i; //@line 292 "cPickle.c"
        var $26=($25) + 1; //@line 292 "cPickle.c"
        $i=$26; //@line 292 "cPickle.c"
        var $27=$j; //@line 292 "cPickle.c"
        var $28=($27) + 1; //@line 292 "cPickle.c"
        $j=$28; //@line 292 "cPickle.c"
        var $29=$j; //@line 292 "cPickle.c"
        var $30=$l; //@line 292 "cPickle.c"
        var $31=($29) < ($30); //@line 292 "cPickle.c"
        if ($31) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 292 "cPickle.c"
      case 4: // $bb4
        var $32=$self_addr; //@line 295 "cPickle.c"
        var $33=$32+8; //@line 295 "cPickle.c"
        var $34=$start_addr; //@line 295 "cPickle.c"
        HEAP[$33]=$34; //@line 295 "cPickle.c"
        var $35=$r; //@line 296 "cPickle.c"
        $0=$35; //@line 296 "cPickle.c"
        __label__ = 5; break; //@line 296 "cPickle.c"
      case 5: // $bb5
        var $36=$0; //@line 291 "cPickle.c"
        $retval=$36; //@line 291 "cPickle.c"
        var $retval6=$retval; //@line 291 "cPickle.c"
        ;
        return $retval6; //@line 291 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_popList($self, $start) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $start_addr;
        var $retval;
        var $0;
        var $r;
        var $i;
        var $j;
        var $l;
        $self_addr=$self;
        $start_addr=$start;
        var $1=$self_addr; //@line 305 "cPickle.c"
        var $2=$1+8; //@line 305 "cPickle.c"
        var $3=HEAP[$2]; //@line 305 "cPickle.c"
        var $4=$start_addr; //@line 305 "cPickle.c"
        var $5=($3) - ($4); //@line 305 "cPickle.c"
        $l=$5; //@line 305 "cPickle.c"
        var $6=$l; //@line 306 "cPickle.c"
        var $7=_PyList_New($6); //@line 306 "cPickle.c"
        $r=$7; //@line 306 "cPickle.c"
        var $8=$r; //@line 306 "cPickle.c"
        var $9=($8)==0; //@line 306 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 306 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 306 "cPickle.c"
        __label__ = 5; break; //@line 306 "cPickle.c"
      case 2: // $bb1
        var $10=$start_addr; //@line 307 "cPickle.c"
        $i=$10; //@line 307 "cPickle.c"
        $j=0; //@line 307 "cPickle.c"
        var $11=$j; //@line 307 "cPickle.c"
        var $12=$l; //@line 307 "cPickle.c"
        var $13=($11) < ($12); //@line 307 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 307 "cPickle.c"
      case 3: // $bb2
        var $14=$r; //@line 308 "cPickle.c"
        var $15=$14; //@line 308 "cPickle.c"
        var $16=$15+12; //@line 308 "cPickle.c"
        var $17=HEAP[$16]; //@line 308 "cPickle.c"
        var $18=$self_addr; //@line 308 "cPickle.c"
        var $19=$18+16; //@line 308 "cPickle.c"
        var $20=HEAP[$19]; //@line 308 "cPickle.c"
        var $21=$i; //@line 308 "cPickle.c"
        var $22=$20+4*$21; //@line 308 "cPickle.c"
        var $23=HEAP[$22]; //@line 308 "cPickle.c"
        var $24=$j; //@line 308 "cPickle.c"
        var $25=$17+4*$24; //@line 308 "cPickle.c"
        HEAP[$25]=$23; //@line 308 "cPickle.c"
        var $26=$i; //@line 307 "cPickle.c"
        var $27=($26) + 1; //@line 307 "cPickle.c"
        $i=$27; //@line 307 "cPickle.c"
        var $28=$j; //@line 307 "cPickle.c"
        var $29=($28) + 1; //@line 307 "cPickle.c"
        $j=$29; //@line 307 "cPickle.c"
        var $30=$j; //@line 307 "cPickle.c"
        var $31=$l; //@line 307 "cPickle.c"
        var $32=($30) < ($31); //@line 307 "cPickle.c"
        if ($32) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 307 "cPickle.c"
      case 4: // $bb4
        var $33=$self_addr; //@line 310 "cPickle.c"
        var $34=$33+8; //@line 310 "cPickle.c"
        var $35=$start_addr; //@line 310 "cPickle.c"
        HEAP[$34]=$35; //@line 310 "cPickle.c"
        var $36=$r; //@line 311 "cPickle.c"
        $0=$36; //@line 311 "cPickle.c"
        __label__ = 5; break; //@line 311 "cPickle.c"
      case 5: // $bb5
        var $37=$0; //@line 306 "cPickle.c"
        $retval=$37; //@line 306 "cPickle.c"
        var $retval6=$retval; //@line 306 "cPickle.c"
        ;
        return $retval6; //@line 306 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cPickle_ErrFormat($ErrType, $stringformat, $format) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $ErrType_addr;
        var $stringformat_addr;
        var $format_addr;
        var $0;
        var $va=__stackBase__;
        var $args;
        var $retval1;
        var $v;
        $ErrType_addr=$ErrType;
        $stringformat_addr=$stringformat;
        $format_addr=$format;
        $args=0; //@line 397 "cPickle.c"
        $retval1=0; //@line 397 "cPickle.c"
        var $va2=$va; //@line 398 "cPickle.c"
        HEAP[$va2]=arguments[_cPickle_ErrFormat.length];; //@line 398 "cPickle.c"
        var $1=$format_addr; //@line 400 "cPickle.c"
        var $2=($1)!=0; //@line 400 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 400 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[$va]; //@line 400 "cPickle.c"
        var $4=$format_addr; //@line 400 "cPickle.c"
        var $5=_Py_VaBuildValue($4, $3); //@line 400 "cPickle.c"
        $args=$5; //@line 400 "cPickle.c"
        __label__ = 2; break; //@line 400 "cPickle.c"
      case 2: // $bb3
        var $va4=$va; //@line 401 "cPickle.c"
        ;; //@line 401 "cPickle.c"
        var $6=$format_addr; //@line 402 "cPickle.c"
        var $7=($6)!=0; //@line 402 "cPickle.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 402 "cPickle.c"
      case 3: // $bb5
        var $8=$args; //@line 402 "cPickle.c"
        var $9=($8)==0; //@line 402 "cPickle.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 402 "cPickle.c"
      case 4: // $bb6
        $0=0; //@line 402 "cPickle.c"
        __label__ = 24; break; //@line 402 "cPickle.c"
      case 5: // $bb7
        var $10=$stringformat_addr; //@line 403 "cPickle.c"
        var $11=($10)!=0; //@line 403 "cPickle.c"
        if ($11) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 403 "cPickle.c"
      case 6: // $bb8
        var $12=$stringformat_addr; //@line 403 "cPickle.c"
        var $13=_PyString_FromString($12); //@line 403 "cPickle.c"
        $retval1=$13; //@line 403 "cPickle.c"
        var $14=$retval1; //@line 403 "cPickle.c"
        var $15=($14)==0; //@line 403 "cPickle.c"
        if ($15) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 403 "cPickle.c"
      case 7: // $bb10_thread
        var $16=$args; //@line 407 "cPickle.c"
        var $17=($16)!=0; //@line 407 "cPickle.c"
        if ($17) { __label__ = 11; break; } else { __label__ = 21; break; } //@line 407 "cPickle.c"
      case 8: // $bb9
        $0=0; //@line 404 "cPickle.c"
        __label__ = 24; break; //@line 404 "cPickle.c"
      case 9: // $bb10
        var $_pr=$retval1;
        var $18=($_pr)!=0; //@line 406 "cPickle.c"
        var $19=$args; //@line 407 "cPickle.c"
        var $20=($19)!=0; //@line 407 "cPickle.c"
        if ($18) { __label__ = 10; break; } else { __label__ = 18; break; } //@line 406 "cPickle.c"
      case 10: // $bb11
        if ($20) { __label__ = 11; break; } else { __label__ = 21; break; } //@line 407 "cPickle.c"
      case 11: // $bb12
        var $21=$retval1; //@line 409 "cPickle.c"
        var $22=$args; //@line 409 "cPickle.c"
        var $23=_PyString_Format($21, $22); //@line 409 "cPickle.c"
        $v=$23; //@line 409 "cPickle.c"
        var $24=$retval1; //@line 410 "cPickle.c"
        var $25=$24; //@line 410 "cPickle.c"
        var $26=HEAP[$25]; //@line 410 "cPickle.c"
        var $27=($26) - 1; //@line 410 "cPickle.c"
        var $28=$retval1; //@line 410 "cPickle.c"
        var $29=$28; //@line 410 "cPickle.c"
        HEAP[$29]=$27; //@line 410 "cPickle.c"
        var $30=$retval1; //@line 410 "cPickle.c"
        var $31=$30; //@line 410 "cPickle.c"
        var $32=HEAP[$31]; //@line 410 "cPickle.c"
        var $33=($32)==0; //@line 410 "cPickle.c"
        if ($33) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 410 "cPickle.c"
      case 12: // $bb13
        var $34=$retval1; //@line 410 "cPickle.c"
        var $35=$34+4; //@line 410 "cPickle.c"
        var $36=HEAP[$35]; //@line 410 "cPickle.c"
        var $37=$36+24; //@line 410 "cPickle.c"
        var $38=HEAP[$37]; //@line 410 "cPickle.c"
        var $39=$retval1; //@line 410 "cPickle.c"
        FUNCTION_TABLE[$38]($39); //@line 410 "cPickle.c"
        __label__ = 13; break; //@line 410 "cPickle.c"
      case 13: // $bb14
        var $40=$args; //@line 411 "cPickle.c"
        var $41=$40; //@line 411 "cPickle.c"
        var $42=HEAP[$41]; //@line 411 "cPickle.c"
        var $43=($42) - 1; //@line 411 "cPickle.c"
        var $44=$args; //@line 411 "cPickle.c"
        var $45=$44; //@line 411 "cPickle.c"
        HEAP[$45]=$43; //@line 411 "cPickle.c"
        var $46=$args; //@line 411 "cPickle.c"
        var $47=$46; //@line 411 "cPickle.c"
        var $48=HEAP[$47]; //@line 411 "cPickle.c"
        var $49=($48)==0; //@line 411 "cPickle.c"
        if ($49) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 411 "cPickle.c"
      case 14: // $bb15
        var $50=$args; //@line 411 "cPickle.c"
        var $51=$50+4; //@line 411 "cPickle.c"
        var $52=HEAP[$51]; //@line 411 "cPickle.c"
        var $53=$52+24; //@line 411 "cPickle.c"
        var $54=HEAP[$53]; //@line 411 "cPickle.c"
        var $55=$args; //@line 411 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 411 "cPickle.c"
        __label__ = 15; break; //@line 411 "cPickle.c"
      case 15: // $bb16
        var $56=$v; //@line 412 "cPickle.c"
        var $57=($56)==0; //@line 412 "cPickle.c"
        if ($57) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 412 "cPickle.c"
      case 16: // $bb17
        $0=0; //@line 412 "cPickle.c"
        __label__ = 24; break; //@line 412 "cPickle.c"
      case 17: // $bb18
        var $58=$v; //@line 413 "cPickle.c"
        $retval1=$58; //@line 413 "cPickle.c"
        __label__ = 21; break; //@line 413 "cPickle.c"
      case 18: // $bb20
        if ($20) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 417 "cPickle.c"
      case 19: // $bb21
        var $59=$args; //@line 417 "cPickle.c"
        $retval1=$59; //@line 417 "cPickle.c"
        __label__ = 21; break; //@line 417 "cPickle.c"
      case 20: // $bb22
        var $60=$ErrType_addr; //@line 419 "cPickle.c"
        _PyErr_SetObject($60, __Py_NoneStruct); //@line 419 "cPickle.c"
        $0=0; //@line 420 "cPickle.c"
        __label__ = 24; break; //@line 420 "cPickle.c"
      case 21: // $bb23
        var $61=$ErrType_addr; //@line 422 "cPickle.c"
        var $62=$retval1; //@line 422 "cPickle.c"
        _PyErr_SetObject($61, $62); //@line 422 "cPickle.c"
        var $63=$retval1; //@line 423 "cPickle.c"
        var $64=$63; //@line 423 "cPickle.c"
        var $65=HEAP[$64]; //@line 423 "cPickle.c"
        var $66=($65) - 1; //@line 423 "cPickle.c"
        var $67=$retval1; //@line 423 "cPickle.c"
        var $68=$67; //@line 423 "cPickle.c"
        HEAP[$68]=$66; //@line 423 "cPickle.c"
        var $69=$retval1; //@line 423 "cPickle.c"
        var $70=$69; //@line 423 "cPickle.c"
        var $71=HEAP[$70]; //@line 423 "cPickle.c"
        var $72=($71)==0; //@line 423 "cPickle.c"
        if ($72) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 423 "cPickle.c"
      case 22: // $bb24
        var $73=$retval1; //@line 423 "cPickle.c"
        var $74=$73+4; //@line 423 "cPickle.c"
        var $75=HEAP[$74]; //@line 423 "cPickle.c"
        var $76=$75+24; //@line 423 "cPickle.c"
        var $77=HEAP[$76]; //@line 423 "cPickle.c"
        var $78=$retval1; //@line 423 "cPickle.c"
        FUNCTION_TABLE[$77]($78); //@line 423 "cPickle.c"
        __label__ = 23; break; //@line 423 "cPickle.c"
      case 23: // $bb25
        $0=0; //@line 424 "cPickle.c"
        __label__ = 24; break; //@line 424 "cPickle.c"
      case 24: // $bb26
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_file($self, $s, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $nbyteswritten;
        $self_addr=$self;
        $s_addr=$s;
        $n_addr=$n;
        var $1=$s_addr; //@line 432 "cPickle.c"
        var $2=($1)==0; //@line 432 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 432 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 433 "cPickle.c"
        __label__ = 5; break; //@line 433 "cPickle.c"
      case 2: // $bb1
        var $3=$self_addr; //@line 441 "cPickle.c"
        var $4=$3+16; //@line 441 "cPickle.c"
        var $5=HEAP[$4]; //@line 441 "cPickle.c"
        var $6=$5; //@line 441 "cPickle.c"
        _PyFile_IncUseCount($6); //@line 441 "cPickle.c"
        var $7=$self_addr; //@line 443 "cPickle.c"
        var $8=$7+8; //@line 443 "cPickle.c"
        var $9=HEAP[$8]; //@line 443 "cPickle.c"
        var $10=$n_addr; //@line 443 "cPickle.c"
        var $11=$s_addr; //@line 443 "cPickle.c"
        var $12=_fwrite($11, 1, $10, $9); //@line 443 "cPickle.c"
        $nbyteswritten=$12; //@line 443 "cPickle.c"
        var $13=$self_addr; //@line 445 "cPickle.c"
        var $14=$13+16; //@line 445 "cPickle.c"
        var $15=HEAP[$14]; //@line 445 "cPickle.c"
        var $16=$15; //@line 445 "cPickle.c"
        _PyFile_DecUseCount($16); //@line 445 "cPickle.c"
        var $17=$n_addr; //@line 446 "cPickle.c"
        var $18=$nbyteswritten; //@line 446 "cPickle.c"
        var $19=($17)!=($18); //@line 446 "cPickle.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 446 "cPickle.c"
      case 3: // $bb2
        var $20=HEAP[_PyExc_IOError]; //@line 447 "cPickle.c"
        var $21=_PyErr_SetFromErrno($20); //@line 447 "cPickle.c"
        $0=-1; //@line 448 "cPickle.c"
        __label__ = 5; break; //@line 448 "cPickle.c"
      case 4: // $bb3
        var $22=$n_addr; //@line 451 "cPickle.c"
        $0=$22; //@line 451 "cPickle.c"
        __label__ = 5; break; //@line 451 "cPickle.c"
      case 5: // $bb4
        var $23=$0; //@line 433 "cPickle.c"
        $retval=$23; //@line 433 "cPickle.c"
        var $retval5=$retval; //@line 433 "cPickle.c"
        ;
        return $retval5; //@line 433 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_cStringIO($self, $s, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $s_addr=$s;
        $n_addr=$n;
        var $1=$s_addr; //@line 457 "cPickle.c"
        var $2=($1)==0; //@line 457 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 457 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 458 "cPickle.c"
        __label__ = 5; break; //@line 458 "cPickle.c"
      case 2: // $bb1
        var $3=HEAP[_PycStringIO]; //@line 461 "cPickle.c"
        var $4=$3+8; //@line 461 "cPickle.c"
        var $5=HEAP[$4]; //@line 461 "cPickle.c"
        var $6=$self_addr; //@line 461 "cPickle.c"
        var $7=$6+16; //@line 461 "cPickle.c"
        var $8=HEAP[$7]; //@line 461 "cPickle.c"
        var $9=$s_addr; //@line 461 "cPickle.c"
        var $10=$n_addr; //@line 461 "cPickle.c"
        var $11=FUNCTION_TABLE[$5]($8, $9, $10); //@line 461 "cPickle.c"
        var $12=$n_addr; //@line 461 "cPickle.c"
        var $13=($11)!=($12); //@line 461 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 461 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 462 "cPickle.c"
        __label__ = 5; break; //@line 462 "cPickle.c"
      case 4: // $bb3
        var $14=$n_addr; //@line 465 "cPickle.c"
        $0=$14; //@line 465 "cPickle.c"
        __label__ = 5; break; //@line 465 "cPickle.c"
      case 5: // $bb4
        var $15=$0; //@line 458 "cPickle.c"
        $retval=$15; //@line 458 "cPickle.c"
        var $retval5=$retval; //@line 458 "cPickle.c"
        ;
        return $retval5; //@line 458 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_none($self, $s, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $s_addr=$s;
        $n_addr=$n;
        var $1=$s_addr; //@line 471 "cPickle.c"
        var $2=($1)==0; //@line 471 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 471 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 471 "cPickle.c"
        __label__ = 3; break; //@line 471 "cPickle.c"
      case 2: // $bb1
        var $3=$n_addr; //@line 473 "cPickle.c"
        $0=$3; //@line 473 "cPickle.c"
        __label__ = 3; break; //@line 473 "cPickle.c"
      case 3: // $bb2
        var $4=$0; //@line 471 "cPickle.c"
        $retval=$4; //@line 471 "cPickle.c"
        var $retval3=$retval; //@line 471 "cPickle.c"
        ;
        return $retval3; //@line 471 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_other($self, $s, $_n) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $_n_addr;
        var $retval;
        var $0;
        var $py_str;
        var $junk;
        var $n;
        $self_addr=$self;
        $s_addr=$s;
        $_n_addr=$_n;
        $py_str=0; //@line 479 "cPickle.c"
        $junk=0; //@line 479 "cPickle.c"
        var $1=$_n_addr; //@line 484 "cPickle.c"
        $n=$1; //@line 484 "cPickle.c"
        var $2=$s_addr; //@line 485 "cPickle.c"
        var $3=($2)==0; //@line 485 "cPickle.c"
        var $4=$self_addr; //@line 486 "cPickle.c"
        var $5=$4+56; //@line 486 "cPickle.c"
        var $6=HEAP[$5]; //@line 486 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 485 "cPickle.c"
      case 1: // $bb
        var $7=($6)==0; //@line 486 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 486 "cPickle.c"
      case 2: // $bb1
        $0=0; //@line 486 "cPickle.c"
        __label__ = 39; break; //@line 486 "cPickle.c"
      case 3: // $bb2
        var $8=$self_addr; //@line 487 "cPickle.c"
        var $9=$8+56; //@line 487 "cPickle.c"
        var $10=HEAP[$9]; //@line 487 "cPickle.c"
        var $11=$self_addr; //@line 487 "cPickle.c"
        var $12=$11+52; //@line 487 "cPickle.c"
        var $13=HEAP[$12]; //@line 487 "cPickle.c"
        var $14=_PyString_FromStringAndSize($13, $10); //@line 487 "cPickle.c"
        $py_str=$14; //@line 487 "cPickle.c"
        var $15=$py_str; //@line 489 "cPickle.c"
        var $16=($15)==0; //@line 489 "cPickle.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 14; break; } //@line 489 "cPickle.c"
      case 4: // $bb3
        $0=-1; //@line 490 "cPickle.c"
        __label__ = 39; break; //@line 490 "cPickle.c"
      case 5: // $bb5
        var $17=($6)!=0; //@line 493 "cPickle.c"
        if ($17) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 493 "cPickle.c"
      case 6: // $bb6
        var $18=$self_addr; //@line 493 "cPickle.c"
        var $19=$18+56; //@line 493 "cPickle.c"
        var $20=HEAP[$19]; //@line 493 "cPickle.c"
        var $21=$n; //@line 493 "cPickle.c"
        var $22=($21) + ($20); //@line 493 "cPickle.c"
        var $23=($22) > 256; //@line 493 "cPickle.c"
        if ($23) { __lastLabel__ = 6; __label__ = 7; break; } else { __lastLabel__ = 6; __label__ = 10; break; } //@line 493 "cPickle.c"
      case 7: // $bb7
        var $24=$self_addr; //@line 494 "cPickle.c"
        var $25=_write_other($24, 0, 0); //@line 494 "cPickle.c"
        var $26=($25) < 0; //@line 494 "cPickle.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 494 "cPickle.c"
      case 8: // $bb8
        $0=-1; //@line 495 "cPickle.c"
        __label__ = 39; break; //@line 495 "cPickle.c"
      case 9: // $bb9thread_pre_split
        var $_pr=$n;
        __lastLabel__ = 9; __label__ = 10; break;
      case 10: // $bb9
        var $27=__lastLabel__ == 9 ? $_pr : ($21);
        var $28=($27) > 256; //@line 498 "cPickle.c"
        if ($28) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 498 "cPickle.c"
      case 11: // $bb10
        var $29=$s_addr; //@line 499 "cPickle.c"
        var $30=$n; //@line 499 "cPickle.c"
        var $31=_PyString_FromStringAndSize($29, $30); //@line 499 "cPickle.c"
        $py_str=$31; //@line 499 "cPickle.c"
        var $32=$py_str; //@line 499 "cPickle.c"
        var $33=($32)==0; //@line 499 "cPickle.c"
        if ($33) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 499 "cPickle.c"
      case 12: // $bb11
        $0=-1; //@line 501 "cPickle.c"
        __label__ = 39; break; //@line 501 "cPickle.c"
      case 13: // $bb13
        var $34=$n; //@line 504 "cPickle.c"
        var $35=$self_addr; //@line 504 "cPickle.c"
        var $36=$35+52; //@line 504 "cPickle.c"
        var $37=HEAP[$36]; //@line 504 "cPickle.c"
        var $38=$self_addr; //@line 504 "cPickle.c"
        var $39=$38+56; //@line 504 "cPickle.c"
        var $40=HEAP[$39]; //@line 504 "cPickle.c"
        var $41=$37+$40; //@line 504 "cPickle.c"
        var $42=$s_addr; //@line 504 "cPickle.c"
        _llvm_memcpy_p0i8_p0i8_i32($41, $42, $34, 1, 0); //@line 504 "cPickle.c"
        var $43=$self_addr; //@line 505 "cPickle.c"
        var $44=$43+56; //@line 505 "cPickle.c"
        var $45=HEAP[$44]; //@line 505 "cPickle.c"
        var $46=$n; //@line 505 "cPickle.c"
        var $47=($46) + ($45); //@line 505 "cPickle.c"
        var $48=$self_addr; //@line 505 "cPickle.c"
        var $49=$48+56; //@line 505 "cPickle.c"
        HEAP[$49]=$47; //@line 505 "cPickle.c"
        var $50=$n; //@line 506 "cPickle.c"
        $0=$50; //@line 506 "cPickle.c"
        __label__ = 39; break; //@line 506 "cPickle.c"
      case 14: // $bb14
        var $51=$self_addr; //@line 510 "cPickle.c"
        var $52=$51+12; //@line 510 "cPickle.c"
        var $53=HEAP[$52]; //@line 510 "cPickle.c"
        var $54=($53)!=0; //@line 510 "cPickle.c"
        var $55=$self_addr; //@line 512 "cPickle.c"
        if ($54) { __label__ = 15; break; } else { __label__ = 32; break; } //@line 510 "cPickle.c"
      case 15: // $bb15
        var $56=$55+24; //@line 512 "cPickle.c"
        var $57=HEAP[$56]; //@line 512 "cPickle.c"
        var $58=($57)!=0; //@line 512 "cPickle.c"
        if ($58) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 512 "cPickle.c"
      case 16: // $bb16
        var $59=_PyTuple_New(1); //@line 512 "cPickle.c"
        var $60=$self_addr; //@line 512 "cPickle.c"
        var $61=$60+24; //@line 512 "cPickle.c"
        HEAP[$61]=$59; //@line 512 "cPickle.c"
        var $62=$self_addr; //@line 512 "cPickle.c"
        var $63=$62+24; //@line 512 "cPickle.c"
        var $64=HEAP[$63]; //@line 512 "cPickle.c"
        var $65=($64)!=0; //@line 512 "cPickle.c"
        if ($65) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 512 "cPickle.c"
      case 17: // $bb17
        var $66=$self_addr; //@line 512 "cPickle.c"
        var $67=$66+24; //@line 512 "cPickle.c"
        var $68=HEAP[$67]; //@line 512 "cPickle.c"
        var $69=$68; //@line 512 "cPickle.c"
        var $70=$69+12; //@line 512 "cPickle.c"
        var $71=$70; //@line 512 "cPickle.c"
        var $72=HEAP[$71]; //@line 512 "cPickle.c"
        var $73=($72)!=0; //@line 512 "cPickle.c"
        if ($73) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 512 "cPickle.c"
      case 18: // $bb18
        var $74=$self_addr; //@line 512 "cPickle.c"
        var $75=$74+24; //@line 512 "cPickle.c"
        var $76=HEAP[$75]; //@line 512 "cPickle.c"
        var $77=$76; //@line 512 "cPickle.c"
        var $78=$77+12; //@line 512 "cPickle.c"
        var $79=$78; //@line 512 "cPickle.c"
        var $80=HEAP[$79]; //@line 512 "cPickle.c"
        var $81=$80; //@line 512 "cPickle.c"
        var $82=HEAP[$81]; //@line 512 "cPickle.c"
        var $83=($82) - 1; //@line 512 "cPickle.c"
        var $84=$80; //@line 512 "cPickle.c"
        HEAP[$84]=$83; //@line 512 "cPickle.c"
        var $85=$80; //@line 512 "cPickle.c"
        var $86=HEAP[$85]; //@line 512 "cPickle.c"
        var $87=($86)==0; //@line 512 "cPickle.c"
        if ($87) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 512 "cPickle.c"
      case 19: // $bb19
        var $88=$self_addr; //@line 512 "cPickle.c"
        var $89=$88+24; //@line 512 "cPickle.c"
        var $90=HEAP[$89]; //@line 512 "cPickle.c"
        var $91=$90; //@line 512 "cPickle.c"
        var $92=$91+12; //@line 512 "cPickle.c"
        var $93=$92; //@line 512 "cPickle.c"
        var $94=HEAP[$93]; //@line 512 "cPickle.c"
        var $95=$94+4; //@line 512 "cPickle.c"
        var $96=HEAP[$95]; //@line 512 "cPickle.c"
        var $97=$96+24; //@line 512 "cPickle.c"
        var $98=HEAP[$97]; //@line 512 "cPickle.c"
        var $99=$self_addr; //@line 512 "cPickle.c"
        var $100=$99+24; //@line 512 "cPickle.c"
        var $101=HEAP[$100]; //@line 512 "cPickle.c"
        var $102=$101; //@line 512 "cPickle.c"
        var $103=$102+12; //@line 512 "cPickle.c"
        var $104=$103; //@line 512 "cPickle.c"
        var $105=HEAP[$104]; //@line 512 "cPickle.c"
        FUNCTION_TABLE[$98]($105); //@line 512 "cPickle.c"
        __label__ = 20; break; //@line 512 "cPickle.c"
      case 20: // $bb20
        var $106=$self_addr; //@line 512 "cPickle.c"
        var $107=$106+24; //@line 512 "cPickle.c"
        var $108=HEAP[$107]; //@line 512 "cPickle.c"
        var $109=$108; //@line 512 "cPickle.c"
        var $110=$109+12; //@line 512 "cPickle.c"
        var $111=$110; //@line 512 "cPickle.c"
        var $112=$py_str; //@line 512 "cPickle.c"
        HEAP[$111]=$112; //@line 512 "cPickle.c"
        __label__ = 23; break; //@line 512 "cPickle.c"
      case 21: // $bb21
        var $113=$py_str; //@line 512 "cPickle.c"
        var $114=$113; //@line 512 "cPickle.c"
        var $115=HEAP[$114]; //@line 512 "cPickle.c"
        var $116=($115) - 1; //@line 512 "cPickle.c"
        var $117=$py_str; //@line 512 "cPickle.c"
        var $118=$117; //@line 512 "cPickle.c"
        HEAP[$118]=$116; //@line 512 "cPickle.c"
        var $119=$py_str; //@line 512 "cPickle.c"
        var $120=$119; //@line 512 "cPickle.c"
        var $121=HEAP[$120]; //@line 512 "cPickle.c"
        var $122=($121)==0; //@line 512 "cPickle.c"
        if ($122) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 512 "cPickle.c"
      case 22: // $bb22
        var $123=$py_str; //@line 512 "cPickle.c"
        var $124=$123+4; //@line 512 "cPickle.c"
        var $125=HEAP[$124]; //@line 512 "cPickle.c"
        var $126=$125+24; //@line 512 "cPickle.c"
        var $127=HEAP[$126]; //@line 512 "cPickle.c"
        var $128=$py_str; //@line 512 "cPickle.c"
        FUNCTION_TABLE[$127]($128); //@line 512 "cPickle.c"
        __label__ = 23; break; //@line 512 "cPickle.c"
      case 23: // $bb23
        var $129=$self_addr; //@line 513 "cPickle.c"
        var $130=$129+24; //@line 513 "cPickle.c"
        var $131=HEAP[$130]; //@line 513 "cPickle.c"
        var $132=($131)!=0; //@line 513 "cPickle.c"
        if ($132) { __label__ = 24; break; } else { __label__ = 28; break; } //@line 513 "cPickle.c"
      case 24: // $bb24
        var $133=$self_addr; //@line 514 "cPickle.c"
        var $134=$133+24; //@line 514 "cPickle.c"
        var $135=HEAP[$134]; //@line 514 "cPickle.c"
        var $136=$self_addr; //@line 514 "cPickle.c"
        var $137=$136+12; //@line 514 "cPickle.c"
        var $138=HEAP[$137]; //@line 514 "cPickle.c"
        var $139=_PyObject_Call($138, $135, 0); //@line 514 "cPickle.c"
        $junk=$139; //@line 514 "cPickle.c"
        var $140=$self_addr; //@line 515 "cPickle.c"
        var $141=$140+24; //@line 515 "cPickle.c"
        var $142=HEAP[$141]; //@line 515 "cPickle.c"
        var $143=$142; //@line 515 "cPickle.c"
        var $144=HEAP[$143]; //@line 515 "cPickle.c"
        var $145=($144) > 1; //@line 515 "cPickle.c"
        if ($145) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 515 "cPickle.c"
      case 25: // $bb25
        var $146=$self_addr; //@line 515 "cPickle.c"
        var $147=$146+24; //@line 515 "cPickle.c"
        var $148=HEAP[$147]; //@line 515 "cPickle.c"
        var $149=$148; //@line 515 "cPickle.c"
        var $150=HEAP[$149]; //@line 515 "cPickle.c"
        var $151=($150) - 1; //@line 515 "cPickle.c"
        var $152=$148; //@line 515 "cPickle.c"
        HEAP[$152]=$151; //@line 515 "cPickle.c"
        var $153=$148; //@line 515 "cPickle.c"
        var $154=HEAP[$153]; //@line 515 "cPickle.c"
        var $155=($154)==0; //@line 515 "cPickle.c"
        if ($155) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 515 "cPickle.c"
      case 26: // $bb26
        var $156=$self_addr; //@line 515 "cPickle.c"
        var $157=$156+24; //@line 515 "cPickle.c"
        var $158=HEAP[$157]; //@line 515 "cPickle.c"
        var $159=$158+4; //@line 515 "cPickle.c"
        var $160=HEAP[$159]; //@line 515 "cPickle.c"
        var $161=$160+24; //@line 515 "cPickle.c"
        var $162=HEAP[$161]; //@line 515 "cPickle.c"
        var $163=$self_addr; //@line 515 "cPickle.c"
        var $164=$163+24; //@line 515 "cPickle.c"
        var $165=HEAP[$164]; //@line 515 "cPickle.c"
        FUNCTION_TABLE[$162]($165); //@line 515 "cPickle.c"
        __label__ = 27; break; //@line 515 "cPickle.c"
      case 27: // $bb27
        var $166=$self_addr; //@line 515 "cPickle.c"
        var $167=$166+24; //@line 515 "cPickle.c"
        HEAP[$167]=0; //@line 515 "cPickle.c"
        __label__ = 28; break; //@line 515 "cPickle.c"
      case 28: // $bb28
        var $168=$junk; //@line 517 "cPickle.c"
        var $169=($168)!=0; //@line 517 "cPickle.c"
        if ($169) { __label__ = 29; break; } else { __label__ = 31; break; } //@line 517 "cPickle.c"
      case 29: // $bb29
        var $170=$junk; //@line 517 "cPickle.c"
        var $171=$170; //@line 517 "cPickle.c"
        var $172=HEAP[$171]; //@line 517 "cPickle.c"
        var $173=($172) - 1; //@line 517 "cPickle.c"
        var $174=$junk; //@line 517 "cPickle.c"
        var $175=$174; //@line 517 "cPickle.c"
        HEAP[$175]=$173; //@line 517 "cPickle.c"
        var $176=$junk; //@line 517 "cPickle.c"
        var $177=$176; //@line 517 "cPickle.c"
        var $178=HEAP[$177]; //@line 517 "cPickle.c"
        var $179=($178)==0; //@line 517 "cPickle.c"
        if ($179) { __label__ = 30; break; } else { __label__ = 38; break; } //@line 517 "cPickle.c"
      case 30: // $bb30
        var $180=$junk; //@line 517 "cPickle.c"
        var $181=$180+4; //@line 517 "cPickle.c"
        var $182=HEAP[$181]; //@line 517 "cPickle.c"
        var $183=$182+24; //@line 517 "cPickle.c"
        var $184=HEAP[$183]; //@line 517 "cPickle.c"
        var $185=$junk; //@line 517 "cPickle.c"
        FUNCTION_TABLE[$184]($185); //@line 517 "cPickle.c"
        __label__ = 38; break; //@line 517 "cPickle.c"
      case 31: // $bb32
        $0=-1; //@line 518 "cPickle.c"
        __label__ = 39; break; //@line 518 "cPickle.c"
      case 32: // $bb33
        var $186=$55+16; //@line 521 "cPickle.c"
        var $187=HEAP[$186]; //@line 521 "cPickle.c"
        var $188=$187; //@line 521 "cPickle.c"
        var $189=$188+8; //@line 521 "cPickle.c"
        var $190=HEAP[$189]; //@line 521 "cPickle.c"
        var $191=$self_addr; //@line 521 "cPickle.c"
        var $192=$191+16; //@line 521 "cPickle.c"
        var $193=HEAP[$192]; //@line 521 "cPickle.c"
        var $194=$193; //@line 521 "cPickle.c"
        var $195=$194+12; //@line 521 "cPickle.c"
        var $196=HEAP[$195]; //@line 521 "cPickle.c"
        var $197=($190)==($196); //@line 521 "cPickle.c"
        if ($197) { __label__ = 33; break; } else { __label__ = 37; break; } //@line 521 "cPickle.c"
      case 33: // $bb34
        var $198=$self_addr; //@line 521 "cPickle.c"
        var $199=$198+16; //@line 521 "cPickle.c"
        var $200=HEAP[$199]; //@line 521 "cPickle.c"
        var $201=$200; //@line 521 "cPickle.c"
        var $202=_Pdata_grow($201); //@line 521 "cPickle.c"
        var $203=($202) < 0; //@line 521 "cPickle.c"
        if ($203) { __label__ = 34; break; } else { __label__ = 37; break; } //@line 521 "cPickle.c"
      case 34: // $bb35
        var $204=$py_str; //@line 521 "cPickle.c"
        var $205=$204; //@line 521 "cPickle.c"
        var $206=HEAP[$205]; //@line 521 "cPickle.c"
        var $207=($206) - 1; //@line 521 "cPickle.c"
        var $208=$py_str; //@line 521 "cPickle.c"
        var $209=$208; //@line 521 "cPickle.c"
        HEAP[$209]=$207; //@line 521 "cPickle.c"
        var $210=$py_str; //@line 521 "cPickle.c"
        var $211=$210; //@line 521 "cPickle.c"
        var $212=HEAP[$211]; //@line 521 "cPickle.c"
        var $213=($212)==0; //@line 521 "cPickle.c"
        if ($213) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 521 "cPickle.c"
      case 35: // $bb36
        var $214=$py_str; //@line 521 "cPickle.c"
        var $215=$214+4; //@line 521 "cPickle.c"
        var $216=HEAP[$215]; //@line 521 "cPickle.c"
        var $217=$216+24; //@line 521 "cPickle.c"
        var $218=HEAP[$217]; //@line 521 "cPickle.c"
        var $219=$py_str; //@line 521 "cPickle.c"
        FUNCTION_TABLE[$218]($219); //@line 521 "cPickle.c"
        __label__ = 36; break; //@line 521 "cPickle.c"
      case 36: // $bb37
        $0=-1; //@line 521 "cPickle.c"
        __label__ = 39; break; //@line 521 "cPickle.c"
      case 37: // $bb38
        var $220=$self_addr; //@line 521 "cPickle.c"
        var $221=$220+16; //@line 521 "cPickle.c"
        var $222=HEAP[$221]; //@line 521 "cPickle.c"
        var $223=$222; //@line 521 "cPickle.c"
        var $224=$223+16; //@line 521 "cPickle.c"
        var $225=HEAP[$224]; //@line 521 "cPickle.c"
        var $226=$self_addr; //@line 521 "cPickle.c"
        var $227=$226+16; //@line 521 "cPickle.c"
        var $228=HEAP[$227]; //@line 521 "cPickle.c"
        var $229=$228; //@line 521 "cPickle.c"
        var $230=$229+8; //@line 521 "cPickle.c"
        var $231=HEAP[$230]; //@line 521 "cPickle.c"
        var $232=$225+4*$231; //@line 521 "cPickle.c"
        var $233=$py_str; //@line 521 "cPickle.c"
        HEAP[$232]=$233; //@line 521 "cPickle.c"
        var $234=($231) + 1; //@line 521 "cPickle.c"
        var $235=$229+8; //@line 521 "cPickle.c"
        HEAP[$235]=$234; //@line 521 "cPickle.c"
        __label__ = 38; break; //@line 521 "cPickle.c"
      case 38: // $bb39
        var $236=$self_addr; //@line 523 "cPickle.c"
        var $237=$236+56; //@line 523 "cPickle.c"
        HEAP[$237]=0; //@line 523 "cPickle.c"
        var $238=$n; //@line 524 "cPickle.c"
        $0=$238; //@line 524 "cPickle.c"
        __label__ = 39; break; //@line 524 "cPickle.c"
      case 39: // $bb40
        var $239=$0; //@line 486 "cPickle.c"
        $retval=$239; //@line 486 "cPickle.c"
        var $retval41=$retval; //@line 486 "cPickle.c"
        ;
        return $retval41; //@line 486 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_file($self, $s, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $nbytesread;
        var $size;
        var $newbuf;
        $self_addr=$self;
        $s_addr=$s;
        $n_addr=$n;
        var $1=$self_addr; //@line 533 "cPickle.c"
        var $2=$1+68; //@line 533 "cPickle.c"
        var $3=HEAP[$2]; //@line 533 "cPickle.c"
        var $4=($3)==0; //@line 533 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 533 "cPickle.c"
      case 1: // $bb
        var $5=$n_addr; //@line 536 "cPickle.c"
        var $6=($5) >= 32; //@line 536 "cPickle.c"
        var $max=($6) ? ($5) : 32; //@line 536 "cPickle.c"
        $size=$max; //@line 536 "cPickle.c"
        var $7=$size; //@line 537 "cPickle.c"
        var $8=_malloc($7); //@line 537 "cPickle.c"
        var $9=$self_addr; //@line 537 "cPickle.c"
        var $10=$9+72; //@line 537 "cPickle.c"
        HEAP[$10]=$8; //@line 537 "cPickle.c"
        var $11=$self_addr; //@line 537 "cPickle.c"
        var $12=$11+72; //@line 537 "cPickle.c"
        var $13=HEAP[$12]; //@line 537 "cPickle.c"
        var $14=($13)==0; //@line 537 "cPickle.c"
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 537 "cPickle.c"
      case 2: // $bb1
        var $15=_PyErr_NoMemory(); //@line 538 "cPickle.c"
        $0=-1; //@line 539 "cPickle.c"
        __label__ = 13; break; //@line 539 "cPickle.c"
      case 3: // $bb2
        var $16=$self_addr; //@line 542 "cPickle.c"
        var $17=$16+68; //@line 542 "cPickle.c"
        var $18=$size; //@line 542 "cPickle.c"
        HEAP[$17]=$18; //@line 542 "cPickle.c"
        __label__ = 8; break; //@line 542 "cPickle.c"
      case 4: // $bb3
        var $19=$self_addr; //@line 544 "cPickle.c"
        var $20=$19+68; //@line 544 "cPickle.c"
        var $21=HEAP[$20]; //@line 544 "cPickle.c"
        var $22=$n_addr; //@line 544 "cPickle.c"
        var $23=($21) < ($22); //@line 544 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 544 "cPickle.c"
      case 5: // $bb4
        var $24=$n_addr; //@line 545 "cPickle.c"
        var $25=$self_addr; //@line 545 "cPickle.c"
        var $26=$25+72; //@line 545 "cPickle.c"
        var $27=HEAP[$26]; //@line 545 "cPickle.c"
        var $28=_realloc($27, $24); //@line 545 "cPickle.c"
        $newbuf=$28; //@line 545 "cPickle.c"
        var $29=$newbuf; //@line 546 "cPickle.c"
        var $30=($29)==0; //@line 546 "cPickle.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 546 "cPickle.c"
      case 6: // $bb5
        var $31=_PyErr_NoMemory(); //@line 547 "cPickle.c"
        $0=-1; //@line 548 "cPickle.c"
        __label__ = 13; break; //@line 548 "cPickle.c"
      case 7: // $bb6
        var $32=$self_addr; //@line 550 "cPickle.c"
        var $33=$32+72; //@line 550 "cPickle.c"
        var $34=$newbuf; //@line 550 "cPickle.c"
        HEAP[$33]=$34; //@line 550 "cPickle.c"
        var $35=$self_addr; //@line 551 "cPickle.c"
        var $36=$35+68; //@line 551 "cPickle.c"
        var $37=$n_addr; //@line 551 "cPickle.c"
        HEAP[$36]=$37; //@line 551 "cPickle.c"
        __label__ = 8; break; //@line 551 "cPickle.c"
      case 8: // $bb7
        var $38=$self_addr; //@line 554 "cPickle.c"
        var $39=$38+12; //@line 554 "cPickle.c"
        var $40=HEAP[$39]; //@line 554 "cPickle.c"
        var $41=$40; //@line 554 "cPickle.c"
        _PyFile_IncUseCount($41); //@line 554 "cPickle.c"
        var $42=$self_addr; //@line 556 "cPickle.c"
        var $43=$42+8; //@line 556 "cPickle.c"
        var $44=HEAP[$43]; //@line 556 "cPickle.c"
        var $45=$n_addr; //@line 556 "cPickle.c"
        var $46=$self_addr; //@line 556 "cPickle.c"
        var $47=$46+72; //@line 556 "cPickle.c"
        var $48=HEAP[$47]; //@line 556 "cPickle.c"
        var $49=_fread($48, 1, $45, $44); //@line 556 "cPickle.c"
        $nbytesread=$49; //@line 556 "cPickle.c"
        var $50=$self_addr; //@line 558 "cPickle.c"
        var $51=$50+12; //@line 558 "cPickle.c"
        var $52=HEAP[$51]; //@line 558 "cPickle.c"
        var $53=$52; //@line 558 "cPickle.c"
        _PyFile_DecUseCount($53); //@line 558 "cPickle.c"
        var $54=$n_addr; //@line 559 "cPickle.c"
        var $55=$nbytesread; //@line 559 "cPickle.c"
        var $56=($54)!=($55); //@line 559 "cPickle.c"
        var $57=$self_addr; //@line 560 "cPickle.c"
        if ($56) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 559 "cPickle.c"
      case 9: // $bb8
        var $58=$57+8; //@line 560 "cPickle.c"
        var $59=HEAP[$58]; //@line 560 "cPickle.c"
        var $60=_feof($59); //@line 560 "cPickle.c"
        var $61=($60)!=0; //@line 560 "cPickle.c"
        if ($61) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 560 "cPickle.c"
      case 10: // $bb9
        var $62=HEAP[_PyExc_EOFError]; //@line 561 "cPickle.c"
        _PyErr_SetNone($62); //@line 561 "cPickle.c"
        $0=-1; //@line 562 "cPickle.c"
        __label__ = 13; break; //@line 562 "cPickle.c"
      case 11: // $bb10
        var $63=HEAP[_PyExc_IOError]; //@line 565 "cPickle.c"
        var $64=_PyErr_SetFromErrno($63); //@line 565 "cPickle.c"
        $0=-1; //@line 566 "cPickle.c"
        __label__ = 13; break; //@line 566 "cPickle.c"
      case 12: // $bb11
        var $65=$57+72; //@line 569 "cPickle.c"
        var $66=HEAP[$65]; //@line 569 "cPickle.c"
        var $67=$s_addr; //@line 569 "cPickle.c"
        HEAP[$67]=$66; //@line 569 "cPickle.c"
        var $68=$n_addr; //@line 571 "cPickle.c"
        $0=$68; //@line 571 "cPickle.c"
        __label__ = 13; break; //@line 571 "cPickle.c"
      case 13: // $bb12
        var $69=$0; //@line 539 "cPickle.c"
        $retval=$69; //@line 539 "cPickle.c"
        var $retval13=$retval; //@line 539 "cPickle.c"
        ;
        return $retval13; //@line 539 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _readline_file($self, $s) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $retval;
        var $0;
        var $i;
        var $bigger;
        var $newbuf;
        $self_addr=$self;
        $s_addr=$s;
        var $1=$self_addr; //@line 580 "cPickle.c"
        var $2=$1+68; //@line 580 "cPickle.c"
        var $3=HEAP[$2]; //@line 580 "cPickle.c"
        var $4=($3)==0; //@line 580 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 580 "cPickle.c"
      case 1: // $bb
        var $5=_malloc(40); //@line 581 "cPickle.c"
        var $6=$self_addr; //@line 581 "cPickle.c"
        var $7=$6+72; //@line 581 "cPickle.c"
        HEAP[$7]=$5; //@line 581 "cPickle.c"
        var $8=$self_addr; //@line 581 "cPickle.c"
        var $9=$8+72; //@line 581 "cPickle.c"
        var $10=HEAP[$9]; //@line 581 "cPickle.c"
        var $11=($10)==0; //@line 581 "cPickle.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 581 "cPickle.c"
      case 2: // $bb1
        var $12=_PyErr_NoMemory(); //@line 582 "cPickle.c"
        $0=-1; //@line 583 "cPickle.c"
        __label__ = 15; break; //@line 583 "cPickle.c"
      case 3: // $bb2
        var $13=$self_addr; //@line 585 "cPickle.c"
        var $14=$13+68; //@line 585 "cPickle.c"
        HEAP[$14]=40; //@line 585 "cPickle.c"
        __label__ = 4; break; //@line 585 "cPickle.c"
      case 4: // $bb3
        $i=0; //@line 588 "cPickle.c"
        __label__ = 9; break; //@line 588 "cPickle.c"
      case 5: // $bb5
        var $15=$53+8; //@line 593 "cPickle.c"
        var $16=HEAP[$15]; //@line 593 "cPickle.c"
        var $17=_feof($16); //@line 593 "cPickle.c"
        var $18=($17)!=0; //@line 593 "cPickle.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 593 "cPickle.c"
      case 6: // $bb6
        var $19=$self_addr; //@line 593 "cPickle.c"
        var $20=$19+72; //@line 593 "cPickle.c"
        var $21=HEAP[$20]; //@line 593 "cPickle.c"
        var $22=$self_addr; //@line 593 "cPickle.c"
        var $23=$22+8; //@line 593 "cPickle.c"
        var $24=HEAP[$23]; //@line 593 "cPickle.c"
        var $25=__IO_getc($24); //@line 593 "cPickle.c"
        var $26=((($25)) & 255); //@line 593 "cPickle.c"
        var $27=$i; //@line 593 "cPickle.c"
        var $28=$21+$27; //@line 593 "cPickle.c"
        HEAP[$28]=$26; //@line 593 "cPickle.c"
        var $29=$i; //@line 593 "cPickle.c"
        var $30=$21+$29; //@line 593 "cPickle.c"
        var $31=HEAP[$30]; //@line 593 "cPickle.c"
        var $32=($31)==10; //@line 593 "cPickle.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 593 "cPickle.c"
      case 7: // $bb7
        var $33=$self_addr; //@line 595 "cPickle.c"
        var $34=$33+72; //@line 595 "cPickle.c"
        var $35=HEAP[$34]; //@line 595 "cPickle.c"
        var $36=$i; //@line 595 "cPickle.c"
        var $37=($36) + 1; //@line 595 "cPickle.c"
        var $38=$35+$37; //@line 595 "cPickle.c"
        HEAP[$38]=0; //@line 595 "cPickle.c"
        var $39=$self_addr; //@line 596 "cPickle.c"
        var $40=$39+72; //@line 596 "cPickle.c"
        var $41=HEAP[$40]; //@line 596 "cPickle.c"
        var $42=$s_addr; //@line 596 "cPickle.c"
        HEAP[$42]=$41; //@line 596 "cPickle.c"
        var $43=$i; //@line 597 "cPickle.c"
        var $44=($43) + 1; //@line 597 "cPickle.c"
        $0=$44; //@line 597 "cPickle.c"
        __label__ = 15; break; //@line 597 "cPickle.c"
      case 8: // $bb8
        var $45=$i; //@line 592 "cPickle.c"
        var $46=($45) + 1; //@line 592 "cPickle.c"
        $i=$46; //@line 592 "cPickle.c"
        __label__ = 9; break; //@line 592 "cPickle.c"
      case 9: // $bb9
        var $47=$self_addr; //@line 592 "cPickle.c"
        var $48=$47+68; //@line 592 "cPickle.c"
        var $49=HEAP[$48]; //@line 592 "cPickle.c"
        var $50=($49) - 1; //@line 592 "cPickle.c"
        var $51=$i; //@line 592 "cPickle.c"
        var $52=($50) > ($51); //@line 592 "cPickle.c"
        var $53=$self_addr; //@line 593 "cPickle.c"
        if ($52) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 592 "cPickle.c"
      case 10: // $bb10
        var $54=$53+68; //@line 600 "cPickle.c"
        var $55=HEAP[$54]; //@line 600 "cPickle.c"
        var $56=($55) << 1; //@line 600 "cPickle.c"
        $bigger=$56; //@line 600 "cPickle.c"
        var $57=$bigger; //@line 601 "cPickle.c"
        var $58=($57) <= 0; //@line 601 "cPickle.c"
        if ($58) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 601 "cPickle.c"
      case 11: // $bb11
        var $59=_PyErr_NoMemory(); //@line 602 "cPickle.c"
        $0=-1; //@line 603 "cPickle.c"
        __label__ = 15; break; //@line 603 "cPickle.c"
      case 12: // $bb12
        var $60=$bigger; //@line 605 "cPickle.c"
        var $61=$self_addr; //@line 605 "cPickle.c"
        var $62=$61+72; //@line 605 "cPickle.c"
        var $63=HEAP[$62]; //@line 605 "cPickle.c"
        var $64=_realloc($63, $60); //@line 605 "cPickle.c"
        $newbuf=$64; //@line 605 "cPickle.c"
        var $65=$newbuf; //@line 606 "cPickle.c"
        var $66=($65)==0; //@line 606 "cPickle.c"
        if ($66) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 606 "cPickle.c"
      case 13: // $bb13
        var $67=_PyErr_NoMemory(); //@line 607 "cPickle.c"
        $0=-1; //@line 608 "cPickle.c"
        __label__ = 15; break; //@line 608 "cPickle.c"
      case 14: // $bb14
        var $68=$self_addr; //@line 610 "cPickle.c"
        var $69=$68+72; //@line 610 "cPickle.c"
        var $70=$newbuf; //@line 610 "cPickle.c"
        HEAP[$69]=$70; //@line 610 "cPickle.c"
        var $71=$self_addr; //@line 611 "cPickle.c"
        var $72=$71+68; //@line 611 "cPickle.c"
        var $73=$bigger; //@line 611 "cPickle.c"
        HEAP[$72]=$73; //@line 611 "cPickle.c"
        __label__ = 9; break; //@line 611 "cPickle.c"
      case 15: // $bb15
        var $74=$0; //@line 583 "cPickle.c"
        $retval=$74; //@line 583 "cPickle.c"
        var $retval16=$retval; //@line 583 "cPickle.c"
        ;
        return $retval16; //@line 583 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_cStringIO($self, $s, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $ptr=__stackBase__;
        $self_addr=$self;
        $s_addr=$s;
        $n_addr=$n;
        var $1=HEAP[_PycStringIO]; //@line 621 "cPickle.c"
        var $2=$1; //@line 621 "cPickle.c"
        var $3=HEAP[$2]; //@line 621 "cPickle.c"
        var $4=$self_addr; //@line 621 "cPickle.c"
        var $5=$4+12; //@line 621 "cPickle.c"
        var $6=HEAP[$5]; //@line 621 "cPickle.c"
        var $7=$n_addr; //@line 621 "cPickle.c"
        var $8=FUNCTION_TABLE[$3]($6, $ptr, $7); //@line 621 "cPickle.c"
        var $9=$n_addr; //@line 621 "cPickle.c"
        var $10=($8)!=($9); //@line 621 "cPickle.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 621 "cPickle.c"
      case 1: // $bb
        var $11=HEAP[_PyExc_EOFError]; //@line 622 "cPickle.c"
        _PyErr_SetNone($11); //@line 622 "cPickle.c"
        $0=-1; //@line 623 "cPickle.c"
        __label__ = 3; break; //@line 623 "cPickle.c"
      case 2: // $bb1
        var $12=HEAP[$ptr]; //@line 626 "cPickle.c"
        var $13=$s_addr; //@line 626 "cPickle.c"
        HEAP[$13]=$12; //@line 626 "cPickle.c"
        var $14=$n_addr; //@line 628 "cPickle.c"
        $0=$14; //@line 628 "cPickle.c"
        __label__ = 3; break; //@line 628 "cPickle.c"
      case 3: // $bb2
        var $15=$0; //@line 623 "cPickle.c"
        $retval=$15; //@line 623 "cPickle.c"
        var $retval3=$retval; //@line 623 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 623 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _readline_cStringIO($self, $s) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $retval;
        var $0;
        var $n;
        var $ptr=__stackBase__;
        $self_addr=$self;
        $s_addr=$s;
        var $1=HEAP[_PycStringIO]; //@line 638 "cPickle.c"
        var $2=$1+4; //@line 638 "cPickle.c"
        var $3=HEAP[$2]; //@line 638 "cPickle.c"
        var $4=$self_addr; //@line 638 "cPickle.c"
        var $5=$4+12; //@line 638 "cPickle.c"
        var $6=HEAP[$5]; //@line 638 "cPickle.c"
        var $7=FUNCTION_TABLE[$3]($6, $ptr); //@line 638 "cPickle.c"
        $n=$7; //@line 638 "cPickle.c"
        var $8=$n; //@line 638 "cPickle.c"
        var $9=($8) < 0; //@line 638 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 638 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 639 "cPickle.c"
        __label__ = 3; break; //@line 639 "cPickle.c"
      case 2: // $bb1
        var $10=HEAP[$ptr]; //@line 642 "cPickle.c"
        var $11=$s_addr; //@line 642 "cPickle.c"
        HEAP[$11]=$10; //@line 642 "cPickle.c"
        var $12=$n; //@line 644 "cPickle.c"
        $0=$12; //@line 644 "cPickle.c"
        __label__ = 3; break; //@line 644 "cPickle.c"
      case 3: // $bb2
        var $13=$0; //@line 639 "cPickle.c"
        $retval=$13; //@line 639 "cPickle.c"
        var $retval3=$retval; //@line 639 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 639 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_other($self, $s, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $bytes;
        var $str;
        $self_addr=$self;
        $s_addr=$s;
        $n_addr=$n;
        $str=0; //@line 651 "cPickle.c"
        var $1=$n_addr; //@line 653 "cPickle.c"
        var $2=_PyInt_FromSsize_t($1); //@line 653 "cPickle.c"
        $bytes=$2; //@line 653 "cPickle.c"
        var $3=$bytes; //@line 653 "cPickle.c"
        var $4=($3)==0; //@line 653 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 653 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 653 "cPickle.c"
        __label__ = 25; break; //@line 653 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 655 "cPickle.c"
        var $6=$5+28; //@line 655 "cPickle.c"
        var $7=HEAP[$6]; //@line 655 "cPickle.c"
        var $8=($7)!=0; //@line 655 "cPickle.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 655 "cPickle.c"
      case 3: // $bb2
        var $9=_PyTuple_New(1); //@line 655 "cPickle.c"
        var $10=$self_addr; //@line 655 "cPickle.c"
        var $11=$10+28; //@line 655 "cPickle.c"
        HEAP[$11]=$9; //@line 655 "cPickle.c"
        var $12=$self_addr; //@line 655 "cPickle.c"
        var $13=$12+28; //@line 655 "cPickle.c"
        var $14=HEAP[$13]; //@line 655 "cPickle.c"
        var $15=($14)!=0; //@line 655 "cPickle.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 655 "cPickle.c"
      case 4: // $bb3
        var $16=$self_addr; //@line 655 "cPickle.c"
        var $17=$16+28; //@line 655 "cPickle.c"
        var $18=HEAP[$17]; //@line 655 "cPickle.c"
        var $19=$18; //@line 655 "cPickle.c"
        var $20=$19+12; //@line 655 "cPickle.c"
        var $21=$20; //@line 655 "cPickle.c"
        var $22=HEAP[$21]; //@line 655 "cPickle.c"
        var $23=($22)!=0; //@line 655 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 655 "cPickle.c"
      case 5: // $bb4
        var $24=$self_addr; //@line 655 "cPickle.c"
        var $25=$24+28; //@line 655 "cPickle.c"
        var $26=HEAP[$25]; //@line 655 "cPickle.c"
        var $27=$26; //@line 655 "cPickle.c"
        var $28=$27+12; //@line 655 "cPickle.c"
        var $29=$28; //@line 655 "cPickle.c"
        var $30=HEAP[$29]; //@line 655 "cPickle.c"
        var $31=$30; //@line 655 "cPickle.c"
        var $32=HEAP[$31]; //@line 655 "cPickle.c"
        var $33=($32) - 1; //@line 655 "cPickle.c"
        var $34=$30; //@line 655 "cPickle.c"
        HEAP[$34]=$33; //@line 655 "cPickle.c"
        var $35=$30; //@line 655 "cPickle.c"
        var $36=HEAP[$35]; //@line 655 "cPickle.c"
        var $37=($36)==0; //@line 655 "cPickle.c"
        if ($37) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 655 "cPickle.c"
      case 6: // $bb5
        var $38=$self_addr; //@line 655 "cPickle.c"
        var $39=$38+28; //@line 655 "cPickle.c"
        var $40=HEAP[$39]; //@line 655 "cPickle.c"
        var $41=$40; //@line 655 "cPickle.c"
        var $42=$41+12; //@line 655 "cPickle.c"
        var $43=$42; //@line 655 "cPickle.c"
        var $44=HEAP[$43]; //@line 655 "cPickle.c"
        var $45=$44+4; //@line 655 "cPickle.c"
        var $46=HEAP[$45]; //@line 655 "cPickle.c"
        var $47=$46+24; //@line 655 "cPickle.c"
        var $48=HEAP[$47]; //@line 655 "cPickle.c"
        var $49=$self_addr; //@line 655 "cPickle.c"
        var $50=$49+28; //@line 655 "cPickle.c"
        var $51=HEAP[$50]; //@line 655 "cPickle.c"
        var $52=$51; //@line 655 "cPickle.c"
        var $53=$52+12; //@line 655 "cPickle.c"
        var $54=$53; //@line 655 "cPickle.c"
        var $55=HEAP[$54]; //@line 655 "cPickle.c"
        FUNCTION_TABLE[$48]($55); //@line 655 "cPickle.c"
        __label__ = 7; break; //@line 655 "cPickle.c"
      case 7: // $bb6
        var $56=$self_addr; //@line 655 "cPickle.c"
        var $57=$56+28; //@line 655 "cPickle.c"
        var $58=HEAP[$57]; //@line 655 "cPickle.c"
        var $59=$58; //@line 655 "cPickle.c"
        var $60=$59+12; //@line 655 "cPickle.c"
        var $61=$60; //@line 655 "cPickle.c"
        var $62=$bytes; //@line 655 "cPickle.c"
        HEAP[$61]=$62; //@line 655 "cPickle.c"
        __label__ = 10; break; //@line 655 "cPickle.c"
      case 8: // $bb7
        var $63=$bytes; //@line 655 "cPickle.c"
        var $64=$63; //@line 655 "cPickle.c"
        var $65=HEAP[$64]; //@line 655 "cPickle.c"
        var $66=($65) - 1; //@line 655 "cPickle.c"
        var $67=$bytes; //@line 655 "cPickle.c"
        var $68=$67; //@line 655 "cPickle.c"
        HEAP[$68]=$66; //@line 655 "cPickle.c"
        var $69=$bytes; //@line 655 "cPickle.c"
        var $70=$69; //@line 655 "cPickle.c"
        var $71=HEAP[$70]; //@line 655 "cPickle.c"
        var $72=($71)==0; //@line 655 "cPickle.c"
        if ($72) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 655 "cPickle.c"
      case 9: // $bb8
        var $73=$bytes; //@line 655 "cPickle.c"
        var $74=$73+4; //@line 655 "cPickle.c"
        var $75=HEAP[$74]; //@line 655 "cPickle.c"
        var $76=$75+24; //@line 655 "cPickle.c"
        var $77=HEAP[$76]; //@line 655 "cPickle.c"
        var $78=$bytes; //@line 655 "cPickle.c"
        FUNCTION_TABLE[$77]($78); //@line 655 "cPickle.c"
        __label__ = 10; break; //@line 655 "cPickle.c"
      case 10: // $bb9
        var $79=$self_addr; //@line 656 "cPickle.c"
        var $80=$79+28; //@line 656 "cPickle.c"
        var $81=HEAP[$80]; //@line 656 "cPickle.c"
        var $82=($81)!=0; //@line 656 "cPickle.c"
        if ($82) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 656 "cPickle.c"
      case 11: // $bb10
        var $83=$self_addr; //@line 657 "cPickle.c"
        var $84=$83+28; //@line 657 "cPickle.c"
        var $85=HEAP[$84]; //@line 657 "cPickle.c"
        var $86=$self_addr; //@line 657 "cPickle.c"
        var $87=$86+20; //@line 657 "cPickle.c"
        var $88=HEAP[$87]; //@line 657 "cPickle.c"
        var $89=_PyObject_Call($88, $85, 0); //@line 657 "cPickle.c"
        $str=$89; //@line 657 "cPickle.c"
        var $90=$self_addr; //@line 658 "cPickle.c"
        var $91=$90+28; //@line 658 "cPickle.c"
        var $92=HEAP[$91]; //@line 658 "cPickle.c"
        var $93=$92; //@line 658 "cPickle.c"
        var $94=HEAP[$93]; //@line 658 "cPickle.c"
        var $95=($94) > 1; //@line 658 "cPickle.c"
        if ($95) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 658 "cPickle.c"
      case 12: // $bb11
        var $96=$self_addr; //@line 658 "cPickle.c"
        var $97=$96+28; //@line 658 "cPickle.c"
        var $98=HEAP[$97]; //@line 658 "cPickle.c"
        var $99=$98; //@line 658 "cPickle.c"
        var $100=HEAP[$99]; //@line 658 "cPickle.c"
        var $101=($100) - 1; //@line 658 "cPickle.c"
        var $102=$98; //@line 658 "cPickle.c"
        HEAP[$102]=$101; //@line 658 "cPickle.c"
        var $103=$98; //@line 658 "cPickle.c"
        var $104=HEAP[$103]; //@line 658 "cPickle.c"
        var $105=($104)==0; //@line 658 "cPickle.c"
        if ($105) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 658 "cPickle.c"
      case 13: // $bb12
        var $106=$self_addr; //@line 658 "cPickle.c"
        var $107=$106+28; //@line 658 "cPickle.c"
        var $108=HEAP[$107]; //@line 658 "cPickle.c"
        var $109=$108+4; //@line 658 "cPickle.c"
        var $110=HEAP[$109]; //@line 658 "cPickle.c"
        var $111=$110+24; //@line 658 "cPickle.c"
        var $112=HEAP[$111]; //@line 658 "cPickle.c"
        var $113=$self_addr; //@line 658 "cPickle.c"
        var $114=$113+28; //@line 658 "cPickle.c"
        var $115=HEAP[$114]; //@line 658 "cPickle.c"
        FUNCTION_TABLE[$112]($115); //@line 658 "cPickle.c"
        __label__ = 14; break; //@line 658 "cPickle.c"
      case 14: // $bb13
        var $116=$self_addr; //@line 658 "cPickle.c"
        var $117=$116+28; //@line 658 "cPickle.c"
        HEAP[$117]=0; //@line 658 "cPickle.c"
        __label__ = 15; break; //@line 658 "cPickle.c"
      case 15: // $bb14
        var $118=$str; //@line 660 "cPickle.c"
        var $119=($118)==0; //@line 660 "cPickle.c"
        if ($119) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 660 "cPickle.c"
      case 16: // $bb15
        $0=-1; //@line 660 "cPickle.c"
        __label__ = 25; break; //@line 660 "cPickle.c"
      case 17: // $bb16
        var $120=$self_addr; //@line 662 "cPickle.c"
        var $121=$120+44; //@line 662 "cPickle.c"
        var $122=HEAP[$121]; //@line 662 "cPickle.c"
        var $123=($122)!=0; //@line 662 "cPickle.c"
        if ($123) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 662 "cPickle.c"
      case 18: // $bb17
        var $124=$self_addr; //@line 662 "cPickle.c"
        var $125=$124+44; //@line 662 "cPickle.c"
        var $126=HEAP[$125]; //@line 662 "cPickle.c"
        var $127=$126; //@line 662 "cPickle.c"
        var $128=HEAP[$127]; //@line 662 "cPickle.c"
        var $129=($128) - 1; //@line 662 "cPickle.c"
        var $130=$126; //@line 662 "cPickle.c"
        HEAP[$130]=$129; //@line 662 "cPickle.c"
        var $131=$126; //@line 662 "cPickle.c"
        var $132=HEAP[$131]; //@line 662 "cPickle.c"
        var $133=($132)==0; //@line 662 "cPickle.c"
        if ($133) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 662 "cPickle.c"
      case 19: // $bb18
        var $134=$self_addr; //@line 662 "cPickle.c"
        var $135=$134+44; //@line 662 "cPickle.c"
        var $136=HEAP[$135]; //@line 662 "cPickle.c"
        var $137=$136+4; //@line 662 "cPickle.c"
        var $138=HEAP[$137]; //@line 662 "cPickle.c"
        var $139=$138+24; //@line 662 "cPickle.c"
        var $140=HEAP[$139]; //@line 662 "cPickle.c"
        var $141=$self_addr; //@line 662 "cPickle.c"
        var $142=$141+44; //@line 662 "cPickle.c"
        var $143=HEAP[$142]; //@line 662 "cPickle.c"
        FUNCTION_TABLE[$140]($143); //@line 662 "cPickle.c"
        __label__ = 20; break; //@line 662 "cPickle.c"
      case 20: // $bb19
        var $144=$self_addr; //@line 663 "cPickle.c"
        var $145=$144+44; //@line 663 "cPickle.c"
        var $146=$str; //@line 663 "cPickle.c"
        HEAP[$145]=$146; //@line 663 "cPickle.c"
        var $147=$str; //@line 665 "cPickle.c"
        var $148=_PyString_AsString($147); //@line 665 "cPickle.c"
        var $149=$s_addr; //@line 665 "cPickle.c"
        HEAP[$149]=$148; //@line 665 "cPickle.c"
        var $150=$s_addr; //@line 665 "cPickle.c"
        var $151=HEAP[$150]; //@line 665 "cPickle.c"
        var $152=($151)==0; //@line 665 "cPickle.c"
        if ($152) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 665 "cPickle.c"
      case 21: // $bb20
        $0=-1; //@line 665 "cPickle.c"
        __label__ = 25; break; //@line 665 "cPickle.c"
      case 22: // $bb21
        var $153=$str; //@line 667 "cPickle.c"
        var $154=$153; //@line 667 "cPickle.c"
        var $155=$154+8; //@line 667 "cPickle.c"
        var $156=HEAP[$155]; //@line 667 "cPickle.c"
        var $157=$n_addr; //@line 667 "cPickle.c"
        var $158=($156)!=($157); //@line 667 "cPickle.c"
        if ($158) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 667 "cPickle.c"
      case 23: // $bb22
        var $159=HEAP[_PyExc_EOFError]; //@line 668 "cPickle.c"
        _PyErr_SetNone($159); //@line 668 "cPickle.c"
        $0=-1; //@line 669 "cPickle.c"
        __label__ = 25; break; //@line 669 "cPickle.c"
      case 24: // $bb23
        var $160=$n_addr; //@line 672 "cPickle.c"
        $0=$160; //@line 672 "cPickle.c"
        __label__ = 25; break; //@line 672 "cPickle.c"
      case 25: // $bb24
        var $161=$0; //@line 653 "cPickle.c"
        $retval=$161; //@line 653 "cPickle.c"
        var $retval25=$retval; //@line 653 "cPickle.c"
        ;
        return $retval25; //@line 653 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _readline_other($self, $s) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $retval;
        var $0;
        var $str;
        var $str_size;
        $self_addr=$self;
        $s_addr=$s;
        var $1=HEAP[_empty_tuple]; //@line 682 "cPickle.c"
        var $2=$self_addr; //@line 682 "cPickle.c"
        var $3=$2+16; //@line 682 "cPickle.c"
        var $4=HEAP[$3]; //@line 682 "cPickle.c"
        var $5=_PyObject_CallObject($4, $1); //@line 682 "cPickle.c"
        $str=$5; //@line 682 "cPickle.c"
        var $6=$str; //@line 682 "cPickle.c"
        var $7=($6)==0; //@line 682 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 682 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 683 "cPickle.c"
        __label__ = 10; break; //@line 683 "cPickle.c"
      case 2: // $bb1
        var $8=$str; //@line 686 "cPickle.c"
        var $9=_PyString_Size($8); //@line 686 "cPickle.c"
        $str_size=$9; //@line 686 "cPickle.c"
        var $10=$str_size; //@line 686 "cPickle.c"
        var $11=($10) < 0; //@line 686 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 686 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 687 "cPickle.c"
        __label__ = 10; break; //@line 687 "cPickle.c"
      case 4: // $bb3
        var $12=$self_addr; //@line 689 "cPickle.c"
        var $13=$12+44; //@line 689 "cPickle.c"
        var $14=HEAP[$13]; //@line 689 "cPickle.c"
        var $15=($14)!=0; //@line 689 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 689 "cPickle.c"
      case 5: // $bb4
        var $16=$self_addr; //@line 689 "cPickle.c"
        var $17=$16+44; //@line 689 "cPickle.c"
        var $18=HEAP[$17]; //@line 689 "cPickle.c"
        var $19=$18; //@line 689 "cPickle.c"
        var $20=HEAP[$19]; //@line 689 "cPickle.c"
        var $21=($20) - 1; //@line 689 "cPickle.c"
        var $22=$18; //@line 689 "cPickle.c"
        HEAP[$22]=$21; //@line 689 "cPickle.c"
        var $23=$18; //@line 689 "cPickle.c"
        var $24=HEAP[$23]; //@line 689 "cPickle.c"
        var $25=($24)==0; //@line 689 "cPickle.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 689 "cPickle.c"
      case 6: // $bb5
        var $26=$self_addr; //@line 689 "cPickle.c"
        var $27=$26+44; //@line 689 "cPickle.c"
        var $28=HEAP[$27]; //@line 689 "cPickle.c"
        var $29=$28+4; //@line 689 "cPickle.c"
        var $30=HEAP[$29]; //@line 689 "cPickle.c"
        var $31=$30+24; //@line 689 "cPickle.c"
        var $32=HEAP[$31]; //@line 689 "cPickle.c"
        var $33=$self_addr; //@line 689 "cPickle.c"
        var $34=$33+44; //@line 689 "cPickle.c"
        var $35=HEAP[$34]; //@line 689 "cPickle.c"
        FUNCTION_TABLE[$32]($35); //@line 689 "cPickle.c"
        __label__ = 7; break; //@line 689 "cPickle.c"
      case 7: // $bb6
        var $36=$self_addr; //@line 690 "cPickle.c"
        var $37=$36+44; //@line 690 "cPickle.c"
        var $38=$str; //@line 690 "cPickle.c"
        HEAP[$37]=$38; //@line 690 "cPickle.c"
        var $39=$str; //@line 692 "cPickle.c"
        var $40=_PyString_AsString($39); //@line 692 "cPickle.c"
        var $41=$s_addr; //@line 692 "cPickle.c"
        HEAP[$41]=$40; //@line 692 "cPickle.c"
        var $42=$s_addr; //@line 692 "cPickle.c"
        var $43=HEAP[$42]; //@line 692 "cPickle.c"
        var $44=($43)==0; //@line 692 "cPickle.c"
        if ($44) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 692 "cPickle.c"
      case 8: // $bb7
        $0=-1; //@line 693 "cPickle.c"
        __label__ = 10; break; //@line 693 "cPickle.c"
      case 9: // $bb8
        var $45=$str_size; //@line 695 "cPickle.c"
        $0=$45; //@line 695 "cPickle.c"
        __label__ = 10; break; //@line 695 "cPickle.c"
      case 10: // $bb9
        var $46=$0; //@line 683 "cPickle.c"
        $retval=$46; //@line 683 "cPickle.c"
        var $retval10=$retval; //@line 683 "cPickle.c"
        ;
        return $retval10; //@line 683 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _pystrndup($s, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $r;
        $s_addr=$s;
        $n_addr=$n;
        var $1=$n_addr; //@line 705 "cPickle.c"
        var $2=($1) + 1; //@line 705 "cPickle.c"
        var $3=_malloc($2); //@line 705 "cPickle.c"
        $r=$3; //@line 705 "cPickle.c"
        var $4=$r; //@line 706 "cPickle.c"
        var $5=($4)==0; //@line 706 "cPickle.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 706 "cPickle.c"
      case 1: // $bb
        var $6=_PyErr_NoMemory(); //@line 707 "cPickle.c"
        var $7=$6; //@line 707 "cPickle.c"
        $0=$7; //@line 707 "cPickle.c"
        __label__ = 3; break; //@line 707 "cPickle.c"
      case 2: // $bb1
        var $8=$n_addr; //@line 708 "cPickle.c"
        var $9=$r; //@line 708 "cPickle.c"
        var $10=$s_addr; //@line 708 "cPickle.c"
        _llvm_memcpy_p0i8_p0i8_i32($9, $10, $8, 1, 0); //@line 708 "cPickle.c"
        var $11=$r; //@line 709 "cPickle.c"
        var $12=$n_addr; //@line 709 "cPickle.c"
        var $13=$11+$12; //@line 709 "cPickle.c"
        HEAP[$13]=0; //@line 709 "cPickle.c"
        var $14=$r; //@line 710 "cPickle.c"
        $0=$14; //@line 710 "cPickle.c"
        __label__ = 3; break; //@line 710 "cPickle.c"
      case 3: // $bb2
        var $15=$0; //@line 707 "cPickle.c"
        $retval=$15; //@line 707 "cPickle.c"
        var $retval3=$retval; //@line 707 "cPickle.c"
        ;
        return $retval3; //@line 707 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get($self, $id) {
    var __stackBase__  = STACKTOP; STACKTOP += 30; _memset(__stackBase__, 0, 30);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $id_addr;
        var $retval;
        var $0;
        var $value;
        var $mv;
        var $c_value;
        var $s=__stackBase__;
        var $len;
        $self_addr=$self;
        $id_addr=$id;
        var $1=$self_addr; //@line 722 "cPickle.c"
        var $2=$1+20; //@line 722 "cPickle.c"
        var $3=HEAP[$2]; //@line 722 "cPickle.c"
        var $4=$id_addr; //@line 722 "cPickle.c"
        var $5=_PyDict_GetItem($3, $4); //@line 722 "cPickle.c"
        $mv=$5; //@line 722 "cPickle.c"
        var $6=$mv; //@line 722 "cPickle.c"
        var $7=($6)==0; //@line 722 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 722 "cPickle.c"
      case 1: // $bb
        var $8=HEAP[_PyExc_KeyError]; //@line 723 "cPickle.c"
        var $9=$id_addr; //@line 723 "cPickle.c"
        _PyErr_SetObject($8, $9); //@line 723 "cPickle.c"
        $0=-1; //@line 724 "cPickle.c"
        __label__ = 21; break; //@line 724 "cPickle.c"
      case 2: // $bb1
        var $10=$mv; //@line 727 "cPickle.c"
        var $11=_PyTuple_GetItem($10, 0); //@line 727 "cPickle.c"
        $value=$11; //@line 727 "cPickle.c"
        var $12=$value; //@line 727 "cPickle.c"
        var $13=($12)==0; //@line 727 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 727 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 728 "cPickle.c"
        __label__ = 21; break; //@line 728 "cPickle.c"
      case 4: // $bb3
        var $14=$value; //@line 730 "cPickle.c"
        var $15=$14+4; //@line 730 "cPickle.c"
        var $16=HEAP[$15]; //@line 730 "cPickle.c"
        var $17=$16+84; //@line 730 "cPickle.c"
        var $18=HEAP[$17]; //@line 730 "cPickle.c"
        var $19=($18) & 8388608; //@line 730 "cPickle.c"
        var $20=($19)==0; //@line 730 "cPickle.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 730 "cPickle.c"
      case 5: // $bb4
        var $21=HEAP[_PicklingError]; //@line 731 "cPickle.c"
        _PyErr_SetString($21, __str3); //@line 731 "cPickle.c"
        $0=-1; //@line 732 "cPickle.c"
        __label__ = 21; break; //@line 732 "cPickle.c"
      case 6: // $bb5
        var $22=$value; //@line 734 "cPickle.c"
        var $23=$22; //@line 734 "cPickle.c"
        var $24=$23+8; //@line 734 "cPickle.c"
        var $25=HEAP[$24]; //@line 734 "cPickle.c"
        $c_value=$25; //@line 734 "cPickle.c"
        var $26=$self_addr; //@line 736 "cPickle.c"
        var $27=$26+40; //@line 736 "cPickle.c"
        var $28=HEAP[$27]; //@line 736 "cPickle.c"
        var $29=($28)==0; //@line 736 "cPickle.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 736 "cPickle.c"
      case 7: // $bb6
        var $30=$s; //@line 737 "cPickle.c"
        HEAP[$30]=103; //@line 737 "cPickle.c"
        var $s7=$s; //@line 738 "cPickle.c"
        var $31=$s7+1; //@line 738 "cPickle.c"
        var $32=$c_value; //@line 738 "cPickle.c"
        var $33=_PyOS_snprintf($31, 29, __str4, allocate([$32,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 738 "cPickle.c"
        var $s8=$s; //@line 739 "cPickle.c"
        var $34=_strlen($s8); //@line 739 "cPickle.c"
        $len=$34; //@line 739 "cPickle.c"
        __label__ = 18; break; //@line 739 "cPickle.c"
      case 8: // $bb9
        var $35=$self_addr; //@line 741 "cPickle.c"
        var $36=$35+16; //@line 741 "cPickle.c"
        var $37=HEAP[$36]; //@line 741 "cPickle.c"
        var $38=$37+4; //@line 741 "cPickle.c"
        var $39=HEAP[$38]; //@line 741 "cPickle.c"
        var $40=($39)==(_PdataType); //@line 741 "cPickle.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 15; break; } //@line 741 "cPickle.c"
      case 9: // $bb10
        var $41=$self_addr; //@line 742 "cPickle.c"
        var $42=_write_other($41, 0, 0); //@line 742 "cPickle.c"
        var $43=($42) < 0; //@line 742 "cPickle.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 742 "cPickle.c"
      case 10: // $bb11
        $0=-1; //@line 742 "cPickle.c"
        __label__ = 21; break; //@line 742 "cPickle.c"
      case 11: // $bb12
        var $44=$self_addr; //@line 743 "cPickle.c"
        var $45=$44+16; //@line 743 "cPickle.c"
        var $46=HEAP[$45]; //@line 743 "cPickle.c"
        var $47=$46; //@line 743 "cPickle.c"
        var $48=$47+8; //@line 743 "cPickle.c"
        var $49=HEAP[$48]; //@line 743 "cPickle.c"
        var $50=$self_addr; //@line 743 "cPickle.c"
        var $51=$50+16; //@line 743 "cPickle.c"
        var $52=HEAP[$51]; //@line 743 "cPickle.c"
        var $53=$52; //@line 743 "cPickle.c"
        var $54=$53+12; //@line 743 "cPickle.c"
        var $55=HEAP[$54]; //@line 743 "cPickle.c"
        var $56=($49)==($55); //@line 743 "cPickle.c"
        if ($56) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 743 "cPickle.c"
      case 12: // $bb13
        var $57=$self_addr; //@line 743 "cPickle.c"
        var $58=$57+16; //@line 743 "cPickle.c"
        var $59=HEAP[$58]; //@line 743 "cPickle.c"
        var $60=$59; //@line 743 "cPickle.c"
        var $61=_Pdata_grow($60); //@line 743 "cPickle.c"
        var $62=($61) < 0; //@line 743 "cPickle.c"
        if ($62) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 743 "cPickle.c"
      case 13: // $bb14
        $0=-1; //@line 743 "cPickle.c"
        __label__ = 21; break; //@line 743 "cPickle.c"
      case 14: // $bb15
        var $63=$mv; //@line 743 "cPickle.c"
        var $64=$63; //@line 743 "cPickle.c"
        var $65=HEAP[$64]; //@line 743 "cPickle.c"
        var $66=($65) + 1; //@line 743 "cPickle.c"
        var $67=$mv; //@line 743 "cPickle.c"
        var $68=$67; //@line 743 "cPickle.c"
        HEAP[$68]=$66; //@line 743 "cPickle.c"
        var $69=$self_addr; //@line 743 "cPickle.c"
        var $70=$69+16; //@line 743 "cPickle.c"
        var $71=HEAP[$70]; //@line 743 "cPickle.c"
        var $72=$71; //@line 743 "cPickle.c"
        var $73=$72+16; //@line 743 "cPickle.c"
        var $74=HEAP[$73]; //@line 743 "cPickle.c"
        var $75=$self_addr; //@line 743 "cPickle.c"
        var $76=$75+16; //@line 743 "cPickle.c"
        var $77=HEAP[$76]; //@line 743 "cPickle.c"
        var $78=$77; //@line 743 "cPickle.c"
        var $79=$78+8; //@line 743 "cPickle.c"
        var $80=HEAP[$79]; //@line 743 "cPickle.c"
        var $81=$74+4*$80; //@line 743 "cPickle.c"
        var $82=$mv; //@line 743 "cPickle.c"
        HEAP[$81]=$82; //@line 743 "cPickle.c"
        var $83=($80) + 1; //@line 743 "cPickle.c"
        var $84=$78+8; //@line 743 "cPickle.c"
        HEAP[$84]=$83; //@line 743 "cPickle.c"
        $0=0; //@line 744 "cPickle.c"
        __label__ = 21; break; //@line 744 "cPickle.c"
      case 15: // $bb16
        var $85=$c_value; //@line 747 "cPickle.c"
        var $86=($85) <= 255; //@line 747 "cPickle.c"
        var $87=$s; //@line 748 "cPickle.c"
        if ($86) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 747 "cPickle.c"
      case 16: // $bb17
        HEAP[$87]=104; //@line 748 "cPickle.c"
        var $88=$c_value; //@line 749 "cPickle.c"
        var $89=((($88)) & 255); //@line 749 "cPickle.c"
        var $90=$s+1; //@line 749 "cPickle.c"
        HEAP[$90]=$89; //@line 749 "cPickle.c"
        $len=2; //@line 750 "cPickle.c"
        __label__ = 18; break; //@line 750 "cPickle.c"
      case 17: // $bb18
        HEAP[$87]=106; //@line 753 "cPickle.c"
        var $91=$c_value; //@line 754 "cPickle.c"
        var $92=((($91)) & 255); //@line 754 "cPickle.c"
        var $93=$s+1; //@line 754 "cPickle.c"
        HEAP[$93]=$92; //@line 754 "cPickle.c"
        var $94=$c_value; //@line 755 "cPickle.c"
        var $95=($94) >> 8; //@line 755 "cPickle.c"
        var $96=((($95)) & 255); //@line 755 "cPickle.c"
        var $97=$s+2; //@line 755 "cPickle.c"
        HEAP[$97]=$96; //@line 755 "cPickle.c"
        var $98=$c_value; //@line 756 "cPickle.c"
        var $99=($98) >> 16; //@line 756 "cPickle.c"
        var $100=((($99)) & 255); //@line 756 "cPickle.c"
        var $101=$s+3; //@line 756 "cPickle.c"
        HEAP[$101]=$100; //@line 756 "cPickle.c"
        var $102=$c_value; //@line 757 "cPickle.c"
        var $103=($102) >> 24; //@line 757 "cPickle.c"
        var $104=((($103)) & 255); //@line 757 "cPickle.c"
        var $105=$s+4; //@line 757 "cPickle.c"
        HEAP[$105]=$104; //@line 757 "cPickle.c"
        $len=5; //@line 758 "cPickle.c"
        __label__ = 18; break; //@line 758 "cPickle.c"
      case 18: // $bb19
        var $106=$self_addr; //@line 762 "cPickle.c"
        var $107=$106+48; //@line 762 "cPickle.c"
        var $108=HEAP[$107]; //@line 762 "cPickle.c"
        var $109=$len; //@line 762 "cPickle.c"
        var $110=$self_addr; //@line 762 "cPickle.c"
        var $s20=$s; //@line 762 "cPickle.c"
        var $111=FUNCTION_TABLE[$108]($110, $s20, $109); //@line 762 "cPickle.c"
        var $112=($111) < 0; //@line 762 "cPickle.c"
        if ($112) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 762 "cPickle.c"
      case 19: // $bb21
        $0=-1; //@line 763 "cPickle.c"
        __label__ = 21; break; //@line 763 "cPickle.c"
      case 20: // $bb22
        $0=0; //@line 765 "cPickle.c"
        __label__ = 21; break; //@line 765 "cPickle.c"
      case 21: // $bb23
        var $113=$0; //@line 724 "cPickle.c"
        $retval=$113; //@line 724 "cPickle.c"
        var $retval24=$retval; //@line 724 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 724 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _put($self, $ob) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $ob_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $ob_addr=$ob;
        var $1=$ob_addr; //@line 772 "cPickle.c"
        var $2=$1; //@line 772 "cPickle.c"
        var $3=HEAP[$2]; //@line 772 "cPickle.c"
        var $4=($3) <= 1; //@line 772 "cPickle.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 772 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 772 "cPickle.c"
        var $6=$5+44; //@line 772 "cPickle.c"
        var $7=HEAP[$6]; //@line 772 "cPickle.c"
        var $8=($7)!=0; //@line 772 "cPickle.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 772 "cPickle.c"
      case 2: // $bb1
        $0=0; //@line 773 "cPickle.c"
        __label__ = 4; break; //@line 773 "cPickle.c"
      case 3: // $bb2
        var $9=$self_addr; //@line 775 "cPickle.c"
        var $10=$ob_addr; //@line 775 "cPickle.c"
        var $11=_put2($9, $10); //@line 775 "cPickle.c"
        $0=$11; //@line 775 "cPickle.c"
        __label__ = 4; break; //@line 775 "cPickle.c"
      case 4: // $bb3
        var $12=$0; //@line 773 "cPickle.c"
        $retval=$12; //@line 773 "cPickle.c"
        var $retval4=$retval; //@line 773 "cPickle.c"
        ;
        return $retval4; //@line 773 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _put2($self, $ob) {
    var __stackBase__  = STACKTOP; STACKTOP += 30; _memset(__stackBase__, 0, 30);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $ob_addr;
        var $retval;
        var $0;
        var $c_str=__stackBase__;
        var $p;
        var $len;
        var $res;
        var $py_ob_id;
        var $memo_len;
        var $t;
        $self_addr=$self;
        $ob_addr=$ob;
        $res=-1; //@line 785 "cPickle.c"
        $py_ob_id=0; //@line 786 "cPickle.c"
        $memo_len=0; //@line 786 "cPickle.c"
        $t=0; //@line 786 "cPickle.c"
        var $1=$self_addr; //@line 788 "cPickle.c"
        var $2=$1+44; //@line 788 "cPickle.c"
        var $3=HEAP[$2]; //@line 788 "cPickle.c"
        var $4=($3)!=0; //@line 788 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 788 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 789 "cPickle.c"
        __label__ = 31; break; //@line 789 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 791 "cPickle.c"
        var $6=$5+20; //@line 791 "cPickle.c"
        var $7=HEAP[$6]; //@line 791 "cPickle.c"
        var $8=_PyDict_Size($7); //@line 791 "cPickle.c"
        $p=$8; //@line 791 "cPickle.c"
        var $9=$p; //@line 791 "cPickle.c"
        var $10=($9) < 0; //@line 791 "cPickle.c"
        if ($10) { __label__ = 21; break; } else { __label__ = 3; break; } //@line 791 "cPickle.c"
      case 3: // $bb2
        var $11=$p; //@line 800 "cPickle.c"
        var $12=($11) + 1; //@line 800 "cPickle.c"
        $p=$12; //@line 800 "cPickle.c"
        var $13=$ob_addr; //@line 802 "cPickle.c"
        var $14=$13; //@line 802 "cPickle.c"
        var $15=_PyLong_FromVoidPtr($14); //@line 802 "cPickle.c"
        $py_ob_id=$15; //@line 802 "cPickle.c"
        var $16=$py_ob_id; //@line 802 "cPickle.c"
        var $17=($16)==0; //@line 802 "cPickle.c"
        if ($17) { __label__ = 24; break; } else { __label__ = 4; break; } //@line 802 "cPickle.c"
      case 4: // $bb3
        var $18=$p; //@line 805 "cPickle.c"
        var $19=_PyInt_FromLong($18); //@line 805 "cPickle.c"
        $memo_len=$19; //@line 805 "cPickle.c"
        var $20=$memo_len; //@line 805 "cPickle.c"
        var $21=($20)==0; //@line 805 "cPickle.c"
        if ($21) { __label__ = 21; break; } else { __label__ = 5; break; } //@line 805 "cPickle.c"
      case 5: // $bb4
        var $22=_PyTuple_New(2); //@line 808 "cPickle.c"
        $t=$22; //@line 808 "cPickle.c"
        var $23=$t; //@line 808 "cPickle.c"
        var $24=($23)==0; //@line 808 "cPickle.c"
        if ($24) { __label__ = 21; break; } else { __label__ = 6; break; } //@line 808 "cPickle.c"
      case 6: // $bb5
        var $25=$t; //@line 811 "cPickle.c"
        var $26=$25; //@line 811 "cPickle.c"
        var $27=$26+12; //@line 811 "cPickle.c"
        var $28=$27; //@line 811 "cPickle.c"
        var $29=$memo_len; //@line 811 "cPickle.c"
        HEAP[$28]=$29; //@line 811 "cPickle.c"
        var $30=$memo_len; //@line 812 "cPickle.c"
        var $31=$30; //@line 812 "cPickle.c"
        var $32=HEAP[$31]; //@line 812 "cPickle.c"
        var $33=($32) + 1; //@line 812 "cPickle.c"
        var $34=$memo_len; //@line 812 "cPickle.c"
        var $35=$34; //@line 812 "cPickle.c"
        HEAP[$35]=$33; //@line 812 "cPickle.c"
        var $36=$t; //@line 813 "cPickle.c"
        var $37=$36; //@line 813 "cPickle.c"
        var $38=$37+12; //@line 813 "cPickle.c"
        var $39=$38+4; //@line 813 "cPickle.c"
        var $40=$ob_addr; //@line 813 "cPickle.c"
        HEAP[$39]=$40; //@line 813 "cPickle.c"
        var $41=$ob_addr; //@line 814 "cPickle.c"
        var $42=$41; //@line 814 "cPickle.c"
        var $43=HEAP[$42]; //@line 814 "cPickle.c"
        var $44=($43) + 1; //@line 814 "cPickle.c"
        var $45=$ob_addr; //@line 814 "cPickle.c"
        var $46=$45; //@line 814 "cPickle.c"
        HEAP[$46]=$44; //@line 814 "cPickle.c"
        var $47=$self_addr; //@line 816 "cPickle.c"
        var $48=$47+20; //@line 816 "cPickle.c"
        var $49=HEAP[$48]; //@line 816 "cPickle.c"
        var $50=$py_ob_id; //@line 816 "cPickle.c"
        var $51=$t; //@line 816 "cPickle.c"
        var $52=_PyDict_SetItem($49, $50, $51); //@line 816 "cPickle.c"
        var $53=($52) < 0; //@line 816 "cPickle.c"
        if ($53) { __label__ = 21; break; } else { __label__ = 7; break; } //@line 816 "cPickle.c"
      case 7: // $bb6
        var $54=$self_addr; //@line 819 "cPickle.c"
        var $55=$54+40; //@line 819 "cPickle.c"
        var $56=HEAP[$55]; //@line 819 "cPickle.c"
        var $57=($56)==0; //@line 819 "cPickle.c"
        if ($57) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 819 "cPickle.c"
      case 8: // $bb7
        var $58=$c_str; //@line 820 "cPickle.c"
        HEAP[$58]=112; //@line 820 "cPickle.c"
        var $c_str8=$c_str; //@line 821 "cPickle.c"
        var $59=$c_str8+1; //@line 821 "cPickle.c"
        var $60=$p; //@line 821 "cPickle.c"
        var $61=_PyOS_snprintf($59, 29, __str5, allocate([$60,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 821 "cPickle.c"
        var $c_str9=$c_str; //@line 822 "cPickle.c"
        var $62=_strlen($c_str9); //@line 822 "cPickle.c"
        $len=$62; //@line 822 "cPickle.c"
        __label__ = 19; break; //@line 822 "cPickle.c"
      case 9: // $bb10
        var $63=$self_addr; //@line 824 "cPickle.c"
        var $64=$63+16; //@line 824 "cPickle.c"
        var $65=HEAP[$64]; //@line 824 "cPickle.c"
        var $66=$65+4; //@line 824 "cPickle.c"
        var $67=HEAP[$66]; //@line 824 "cPickle.c"
        var $68=($67)==(_PdataType); //@line 824 "cPickle.c"
        if ($68) { __label__ = 10; break; } else { __label__ = 16; break; } //@line 824 "cPickle.c"
      case 10: // $bb11
        var $69=$self_addr; //@line 825 "cPickle.c"
        var $70=_write_other($69, 0, 0); //@line 825 "cPickle.c"
        var $71=($70) < 0; //@line 825 "cPickle.c"
        if ($71) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 825 "cPickle.c"
      case 11: // $bb12
        $0=-1; //@line 825 "cPickle.c"
        __label__ = 31; break; //@line 825 "cPickle.c"
      case 12: // $bb13
        var $72=$self_addr; //@line 826 "cPickle.c"
        var $73=$72+16; //@line 826 "cPickle.c"
        var $74=HEAP[$73]; //@line 826 "cPickle.c"
        var $75=$74; //@line 826 "cPickle.c"
        var $76=$75+8; //@line 826 "cPickle.c"
        var $77=HEAP[$76]; //@line 826 "cPickle.c"
        var $78=$self_addr; //@line 826 "cPickle.c"
        var $79=$78+16; //@line 826 "cPickle.c"
        var $80=HEAP[$79]; //@line 826 "cPickle.c"
        var $81=$80; //@line 826 "cPickle.c"
        var $82=$81+12; //@line 826 "cPickle.c"
        var $83=HEAP[$82]; //@line 826 "cPickle.c"
        var $84=($77)==($83); //@line 826 "cPickle.c"
        if ($84) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 826 "cPickle.c"
      case 13: // $bb14
        var $85=$self_addr; //@line 826 "cPickle.c"
        var $86=$85+16; //@line 826 "cPickle.c"
        var $87=HEAP[$86]; //@line 826 "cPickle.c"
        var $88=$87; //@line 826 "cPickle.c"
        var $89=_Pdata_grow($88); //@line 826 "cPickle.c"
        var $90=($89) < 0; //@line 826 "cPickle.c"
        if ($90) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 826 "cPickle.c"
      case 14: // $bb15
        $0=-1; //@line 826 "cPickle.c"
        __label__ = 31; break; //@line 826 "cPickle.c"
      case 15: // $bb16
        var $91=$memo_len; //@line 826 "cPickle.c"
        var $92=$91; //@line 826 "cPickle.c"
        var $93=HEAP[$92]; //@line 826 "cPickle.c"
        var $94=($93) + 1; //@line 826 "cPickle.c"
        var $95=$memo_len; //@line 826 "cPickle.c"
        var $96=$95; //@line 826 "cPickle.c"
        HEAP[$96]=$94; //@line 826 "cPickle.c"
        var $97=$self_addr; //@line 826 "cPickle.c"
        var $98=$97+16; //@line 826 "cPickle.c"
        var $99=HEAP[$98]; //@line 826 "cPickle.c"
        var $100=$99; //@line 826 "cPickle.c"
        var $101=$100+16; //@line 826 "cPickle.c"
        var $102=HEAP[$101]; //@line 826 "cPickle.c"
        var $103=$self_addr; //@line 826 "cPickle.c"
        var $104=$103+16; //@line 826 "cPickle.c"
        var $105=HEAP[$104]; //@line 826 "cPickle.c"
        var $106=$105; //@line 826 "cPickle.c"
        var $107=$106+8; //@line 826 "cPickle.c"
        var $108=HEAP[$107]; //@line 826 "cPickle.c"
        var $109=$102+4*$108; //@line 826 "cPickle.c"
        var $110=$memo_len; //@line 826 "cPickle.c"
        HEAP[$109]=$110; //@line 826 "cPickle.c"
        var $111=($108) + 1; //@line 826 "cPickle.c"
        var $112=$106+8; //@line 826 "cPickle.c"
        HEAP[$112]=$111; //@line 826 "cPickle.c"
        $res=0; //@line 827 "cPickle.c"
        __label__ = 21; break; //@line 827 "cPickle.c"
      case 16: // $bb17
        var $113=$p; //@line 831 "cPickle.c"
        var $114=($113) > 255; //@line 831 "cPickle.c"
        var $115=$c_str; //@line 832 "cPickle.c"
        if ($114) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 831 "cPickle.c"
      case 17: // $bb18
        HEAP[$115]=114; //@line 832 "cPickle.c"
        var $116=$p; //@line 833 "cPickle.c"
        var $117=((($116)) & 255); //@line 833 "cPickle.c"
        var $118=$c_str+1; //@line 833 "cPickle.c"
        HEAP[$118]=$117; //@line 833 "cPickle.c"
        var $119=$p; //@line 834 "cPickle.c"
        var $120=($119) >> 8; //@line 834 "cPickle.c"
        var $121=((($120)) & 255); //@line 834 "cPickle.c"
        var $122=$c_str+2; //@line 834 "cPickle.c"
        HEAP[$122]=$121; //@line 834 "cPickle.c"
        var $123=$p; //@line 835 "cPickle.c"
        var $124=($123) >> 16; //@line 835 "cPickle.c"
        var $125=((($124)) & 255); //@line 835 "cPickle.c"
        var $126=$c_str+3; //@line 835 "cPickle.c"
        HEAP[$126]=$125; //@line 835 "cPickle.c"
        var $127=$p; //@line 836 "cPickle.c"
        var $128=($127) >> 24; //@line 836 "cPickle.c"
        var $129=((($128)) & 255); //@line 836 "cPickle.c"
        var $130=$c_str+4; //@line 836 "cPickle.c"
        HEAP[$130]=$129; //@line 836 "cPickle.c"
        $len=5; //@line 837 "cPickle.c"
        __label__ = 19; break; //@line 837 "cPickle.c"
      case 18: // $bb19
        HEAP[$115]=113; //@line 840 "cPickle.c"
        var $131=$p; //@line 841 "cPickle.c"
        var $132=((($131)) & 255); //@line 841 "cPickle.c"
        var $133=$c_str+1; //@line 841 "cPickle.c"
        HEAP[$133]=$132; //@line 841 "cPickle.c"
        $len=2; //@line 842 "cPickle.c"
        __label__ = 19; break; //@line 842 "cPickle.c"
      case 19: // $bb20
        var $134=$self_addr; //@line 846 "cPickle.c"
        var $135=$134+48; //@line 846 "cPickle.c"
        var $136=HEAP[$135]; //@line 846 "cPickle.c"
        var $137=$len; //@line 846 "cPickle.c"
        var $138=$self_addr; //@line 846 "cPickle.c"
        var $c_str21=$c_str; //@line 846 "cPickle.c"
        var $139=FUNCTION_TABLE[$136]($138, $c_str21, $137); //@line 846 "cPickle.c"
        var $140=($139) < 0; //@line 846 "cPickle.c"
        if ($140) { __label__ = 21; break; } else { __label__ = 20; break; } //@line 846 "cPickle.c"
      case 20: // $bb22
        $res=0; //@line 849 "cPickle.c"
        __label__ = 21; break; //@line 851 "cPickle.c"
      case 21: // $finally
        var $_pr=$py_ob_id;
        var $141=($_pr)!=0; //@line 852 "cPickle.c"
        if ($141) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 852 "cPickle.c"
      case 22: // $bb23
        var $142=$py_ob_id; //@line 852 "cPickle.c"
        var $143=$142; //@line 852 "cPickle.c"
        var $144=HEAP[$143]; //@line 852 "cPickle.c"
        var $145=($144) - 1; //@line 852 "cPickle.c"
        var $146=$py_ob_id; //@line 852 "cPickle.c"
        var $147=$146; //@line 852 "cPickle.c"
        HEAP[$147]=$145; //@line 852 "cPickle.c"
        var $148=$py_ob_id; //@line 852 "cPickle.c"
        var $149=$148; //@line 852 "cPickle.c"
        var $150=HEAP[$149]; //@line 852 "cPickle.c"
        var $151=($150)==0; //@line 852 "cPickle.c"
        if ($151) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 852 "cPickle.c"
      case 23: // $bb24
        var $152=$py_ob_id; //@line 852 "cPickle.c"
        var $153=$152+4; //@line 852 "cPickle.c"
        var $154=HEAP[$153]; //@line 852 "cPickle.c"
        var $155=$154+24; //@line 852 "cPickle.c"
        var $156=HEAP[$155]; //@line 852 "cPickle.c"
        var $157=$py_ob_id; //@line 852 "cPickle.c"
        FUNCTION_TABLE[$156]($157); //@line 852 "cPickle.c"
        __label__ = 24; break; //@line 852 "cPickle.c"
      case 24: // $bb25
        var $158=$memo_len; //@line 853 "cPickle.c"
        var $159=($158)!=0; //@line 853 "cPickle.c"
        if ($159) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 853 "cPickle.c"
      case 25: // $bb26
        var $160=$memo_len; //@line 853 "cPickle.c"
        var $161=$160; //@line 853 "cPickle.c"
        var $162=HEAP[$161]; //@line 853 "cPickle.c"
        var $163=($162) - 1; //@line 853 "cPickle.c"
        var $164=$memo_len; //@line 853 "cPickle.c"
        var $165=$164; //@line 853 "cPickle.c"
        HEAP[$165]=$163; //@line 853 "cPickle.c"
        var $166=$memo_len; //@line 853 "cPickle.c"
        var $167=$166; //@line 853 "cPickle.c"
        var $168=HEAP[$167]; //@line 853 "cPickle.c"
        var $169=($168)==0; //@line 853 "cPickle.c"
        if ($169) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 853 "cPickle.c"
      case 26: // $bb27
        var $170=$memo_len; //@line 853 "cPickle.c"
        var $171=$170+4; //@line 853 "cPickle.c"
        var $172=HEAP[$171]; //@line 853 "cPickle.c"
        var $173=$172+24; //@line 853 "cPickle.c"
        var $174=HEAP[$173]; //@line 853 "cPickle.c"
        var $175=$memo_len; //@line 853 "cPickle.c"
        FUNCTION_TABLE[$174]($175); //@line 853 "cPickle.c"
        __label__ = 27; break; //@line 853 "cPickle.c"
      case 27: // $bb28
        var $176=$t; //@line 854 "cPickle.c"
        var $177=($176)!=0; //@line 854 "cPickle.c"
        if ($177) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 854 "cPickle.c"
      case 28: // $bb29
        var $178=$t; //@line 854 "cPickle.c"
        var $179=$178; //@line 854 "cPickle.c"
        var $180=HEAP[$179]; //@line 854 "cPickle.c"
        var $181=($180) - 1; //@line 854 "cPickle.c"
        var $182=$t; //@line 854 "cPickle.c"
        var $183=$182; //@line 854 "cPickle.c"
        HEAP[$183]=$181; //@line 854 "cPickle.c"
        var $184=$t; //@line 854 "cPickle.c"
        var $185=$184; //@line 854 "cPickle.c"
        var $186=HEAP[$185]; //@line 854 "cPickle.c"
        var $187=($186)==0; //@line 854 "cPickle.c"
        if ($187) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 854 "cPickle.c"
      case 29: // $bb30
        var $188=$t; //@line 854 "cPickle.c"
        var $189=$188+4; //@line 854 "cPickle.c"
        var $190=HEAP[$189]; //@line 854 "cPickle.c"
        var $191=$190+24; //@line 854 "cPickle.c"
        var $192=HEAP[$191]; //@line 854 "cPickle.c"
        var $193=$t; //@line 854 "cPickle.c"
        FUNCTION_TABLE[$192]($193); //@line 854 "cPickle.c"
        __label__ = 30; break; //@line 854 "cPickle.c"
      case 30: // $bb31
        var $194=$res; //@line 856 "cPickle.c"
        $0=$194; //@line 856 "cPickle.c"
        __label__ = 31; break; //@line 856 "cPickle.c"
      case 31: // $bb32
        var $195=$0; //@line 789 "cPickle.c"
        $retval=$195; //@line 789 "cPickle.c"
        var $retval33=$retval; //@line 789 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 789 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _whichmodule($global, $global_name) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $global_addr;
        var $global_name_addr;
        var $retval;
        var $0;
        var $i=__stackBase__;
        var $j;
        var $module=__stackBase__+4;
        var $modules_dict;
        var $global_name_attr;
        var $name=__stackBase__+8;
        $global_addr=$global;
        $global_name_addr=$global_name;
        HEAP[$module]=0; //@line 863 "cPickle.c"
        $modules_dict=0; //@line 863 "cPickle.c"
        $global_name_attr=0; //@line 864 "cPickle.c"
        HEAP[$name]=0; //@line 864 "cPickle.c"
        var $1=$global_addr; //@line 866 "cPickle.c"
        var $2=_PyObject_GetAttrString($1, __str6); //@line 866 "cPickle.c"
        HEAP[$module]=$2; //@line 866 "cPickle.c"
        var $3=HEAP[$module]; //@line 867 "cPickle.c"
        var $4=($3)!=0; //@line 867 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 867 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$module]; //@line 868 "cPickle.c"
        $0=$5; //@line 868 "cPickle.c"
        __label__ = 21; break; //@line 868 "cPickle.c"
      case 2: // $bb1
        var $6=HEAP[_PyExc_AttributeError]; //@line 869 "cPickle.c"
        var $7=_PyErr_ExceptionMatches($6); //@line 869 "cPickle.c"
        var $8=($7)!=0; //@line 869 "cPickle.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 869 "cPickle.c"
      case 3: // $bb2
        _PyErr_Clear(); //@line 870 "cPickle.c"
        var $9=_PySys_GetObject(__str7); //@line 874 "cPickle.c"
        $modules_dict=$9; //@line 874 "cPickle.c"
        var $10=$modules_dict; //@line 874 "cPickle.c"
        var $11=($10)==0; //@line 874 "cPickle.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 874 "cPickle.c"
      case 4: // $bb3
        $0=0; //@line 872 "cPickle.c"
        __label__ = 21; break; //@line 872 "cPickle.c"
      case 5: // $bb4
        $0=0; //@line 875 "cPickle.c"
        __label__ = 21; break; //@line 875 "cPickle.c"
      case 6: // $bb5
        HEAP[$i]=0; //@line 877 "cPickle.c"
        __label__ = 17; break; //@line 877 "cPickle.c"
      case 7: // $bb6
        var $12=HEAP[___main___str]; //@line 880 "cPickle.c"
        var $13=HEAP[$name]; //@line 880 "cPickle.c"
        var $14=_PyObject_Compare($13, $12); //@line 880 "cPickle.c"
        var $15=($14)==0; //@line 880 "cPickle.c"
        if ($15) { __label__ = 17; break; } else { __label__ = 8; break; } //@line 880 "cPickle.c"
      case 8: // $bb7
        var $16=HEAP[$module]; //@line 882 "cPickle.c"
        var $17=$global_name_addr; //@line 882 "cPickle.c"
        var $18=_PyObject_GetAttr($16, $17); //@line 882 "cPickle.c"
        $global_name_attr=$18; //@line 882 "cPickle.c"
        var $19=$global_name_attr; //@line 883 "cPickle.c"
        var $20=($19)==0; //@line 883 "cPickle.c"
        if ($20) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 883 "cPickle.c"
      case 9: // $bb8
        var $21=HEAP[_PyExc_AttributeError]; //@line 884 "cPickle.c"
        var $22=_PyErr_ExceptionMatches($21); //@line 884 "cPickle.c"
        var $23=($22)!=0; //@line 884 "cPickle.c"
        if ($23) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 884 "cPickle.c"
      case 10: // $bb9
        _PyErr_Clear(); //@line 885 "cPickle.c"
        __label__ = 17; break; //@line 885 "cPickle.c"
      case 11: // $bb10
        $0=0; //@line 887 "cPickle.c"
        __label__ = 21; break; //@line 887 "cPickle.c"
      case 12: // $bb11
        var $24=$global_name_attr; //@line 891 "cPickle.c"
        var $25=$global_addr; //@line 891 "cPickle.c"
        var $26=($24)!=($25); //@line 891 "cPickle.c"
        var $27=$global_name_attr; //@line 892 "cPickle.c"
        var $28=$27; //@line 892 "cPickle.c"
        var $29=HEAP[$28]; //@line 892 "cPickle.c"
        var $30=($29) - 1; //@line 892 "cPickle.c"
        var $31=$global_name_attr; //@line 892 "cPickle.c"
        var $32=$31; //@line 892 "cPickle.c"
        HEAP[$32]=$30; //@line 892 "cPickle.c"
        var $33=$global_name_attr; //@line 892 "cPickle.c"
        var $34=$33; //@line 892 "cPickle.c"
        var $35=HEAP[$34]; //@line 892 "cPickle.c"
        var $36=($35)==0; //@line 892 "cPickle.c"
        if ($26) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 891 "cPickle.c"
      case 13: // $bb12
        if ($36) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 892 "cPickle.c"
      case 14: // $bb13
        var $37=$global_name_attr; //@line 892 "cPickle.c"
        var $38=$37+4; //@line 892 "cPickle.c"
        var $39=HEAP[$38]; //@line 892 "cPickle.c"
        var $40=$39+24; //@line 892 "cPickle.c"
        var $41=HEAP[$40]; //@line 892 "cPickle.c"
        var $42=$global_name_attr; //@line 892 "cPickle.c"
        FUNCTION_TABLE[$41]($42); //@line 892 "cPickle.c"
        __label__ = 17; break; //@line 892 "cPickle.c"
      case 15: // $bb15
        if ($36) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 896 "cPickle.c"
      case 16: // $bb16
        var $43=$global_name_attr; //@line 896 "cPickle.c"
        var $44=$43+4; //@line 896 "cPickle.c"
        var $45=HEAP[$44]; //@line 896 "cPickle.c"
        var $46=$45+24; //@line 896 "cPickle.c"
        var $47=HEAP[$46]; //@line 896 "cPickle.c"
        var $48=$global_name_attr; //@line 896 "cPickle.c"
        FUNCTION_TABLE[$47]($48); //@line 896 "cPickle.c"
        __label__ = 18; break; //@line 896 "cPickle.c"
      case 17: // $bb18
        var $49=$modules_dict; //@line 878 "cPickle.c"
        var $50=_PyDict_Next($49, $i, $name, $module); //@line 878 "cPickle.c"
        $j=$50; //@line 878 "cPickle.c"
        var $51=($50)!=0; //@line 878 "cPickle.c"
        if ($51) { __label__ = 7; break; } else { __label__ = 19; break; } //@line 878 "cPickle.c"
      case 18: // $bb19
        var $_pr=$j;
        var $52=($_pr)==0; //@line 905 "cPickle.c"
        if ($52) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 905 "cPickle.c"
      case 19: // $bb20
        var $53=HEAP[___main___str]; //@line 906 "cPickle.c"
        HEAP[$name]=$53; //@line 906 "cPickle.c"
        __label__ = 20; break; //@line 906 "cPickle.c"
      case 20: // $bb21
        var $54=HEAP[$name]; //@line 909 "cPickle.c"
        var $55=$54; //@line 909 "cPickle.c"
        var $56=HEAP[$55]; //@line 909 "cPickle.c"
        var $57=($56) + 1; //@line 909 "cPickle.c"
        var $58=$54; //@line 909 "cPickle.c"
        HEAP[$58]=$57; //@line 909 "cPickle.c"
        var $59=HEAP[$name]; //@line 910 "cPickle.c"
        $0=$59; //@line 910 "cPickle.c"
        __label__ = 21; break; //@line 910 "cPickle.c"
      case 21: // $bb22
        var $60=$0; //@line 868 "cPickle.c"
        $retval=$60; //@line 868 "cPickle.c"
        var $retval23=$retval; //@line 868 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 868 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fast_save_enter($self, $obj) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $obj_addr;
        var $retval;
        var $0;
        var $key;
        $self_addr=$self;
        $obj_addr=$obj;
        var $1=$self_addr; //@line 918 "cPickle.c"
        var $2=$1+64; //@line 918 "cPickle.c"
        var $3=HEAP[$2]; //@line 918 "cPickle.c"
        var $4=($3) + 1; //@line 918 "cPickle.c"
        var $5=$self_addr; //@line 918 "cPickle.c"
        var $6=$5+64; //@line 918 "cPickle.c"
        HEAP[$6]=$4; //@line 918 "cPickle.c"
        var $7=$self_addr; //@line 918 "cPickle.c"
        var $8=$7+64; //@line 918 "cPickle.c"
        var $9=HEAP[$8]; //@line 918 "cPickle.c"
        var $10=($9) > 49; //@line 918 "cPickle.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 16; break; } //@line 918 "cPickle.c"
      case 1: // $bb
        $key=0; //@line 919 "cPickle.c"
        var $11=$self_addr; //@line 920 "cPickle.c"
        var $12=$11+68; //@line 920 "cPickle.c"
        var $13=HEAP[$12]; //@line 920 "cPickle.c"
        var $14=($13)==0; //@line 920 "cPickle.c"
        if ($14) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 920 "cPickle.c"
      case 2: // $bb1
        var $15=_PyDict_New(); //@line 921 "cPickle.c"
        var $16=$self_addr; //@line 921 "cPickle.c"
        var $17=$16+68; //@line 921 "cPickle.c"
        HEAP[$17]=$15; //@line 921 "cPickle.c"
        var $18=$self_addr; //@line 922 "cPickle.c"
        var $19=$18+68; //@line 922 "cPickle.c"
        var $20=HEAP[$19]; //@line 922 "cPickle.c"
        var $21=($20)==0; //@line 922 "cPickle.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 922 "cPickle.c"
      case 3: // $bb2
        var $22=$self_addr; //@line 923 "cPickle.c"
        var $23=$22+64; //@line 923 "cPickle.c"
        HEAP[$23]=-1; //@line 923 "cPickle.c"
        $0=0; //@line 924 "cPickle.c"
        __label__ = 17; break; //@line 924 "cPickle.c"
      case 4: // $bb3
        var $24=$obj_addr; //@line 927 "cPickle.c"
        var $25=$24; //@line 927 "cPickle.c"
        var $26=_PyLong_FromVoidPtr($25); //@line 927 "cPickle.c"
        $key=$26; //@line 927 "cPickle.c"
        var $27=($26)==0; //@line 928 "cPickle.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 928 "cPickle.c"
      case 5: // $bb4
        $0=0; //@line 929 "cPickle.c"
        __label__ = 17; break; //@line 929 "cPickle.c"
      case 6: // $bb5
        var $28=$self_addr; //@line 930 "cPickle.c"
        var $29=$28+68; //@line 930 "cPickle.c"
        var $30=HEAP[$29]; //@line 930 "cPickle.c"
        var $31=$key; //@line 930 "cPickle.c"
        var $32=_PyDict_GetItem($30, $31); //@line 930 "cPickle.c"
        var $33=($32)!=0; //@line 930 "cPickle.c"
        if ($33) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 930 "cPickle.c"
      case 7: // $bb6
        var $34=$key; //@line 931 "cPickle.c"
        var $35=$34; //@line 931 "cPickle.c"
        var $36=HEAP[$35]; //@line 931 "cPickle.c"
        var $37=($36) - 1; //@line 931 "cPickle.c"
        var $38=$key; //@line 931 "cPickle.c"
        var $39=$38; //@line 931 "cPickle.c"
        HEAP[$39]=$37; //@line 931 "cPickle.c"
        var $40=$key; //@line 931 "cPickle.c"
        var $41=$40; //@line 931 "cPickle.c"
        var $42=HEAP[$41]; //@line 931 "cPickle.c"
        var $43=($42)==0; //@line 931 "cPickle.c"
        if ($43) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 931 "cPickle.c"
      case 8: // $bb7
        var $44=$key; //@line 931 "cPickle.c"
        var $45=$44+4; //@line 931 "cPickle.c"
        var $46=HEAP[$45]; //@line 931 "cPickle.c"
        var $47=$46+24; //@line 931 "cPickle.c"
        var $48=HEAP[$47]; //@line 931 "cPickle.c"
        var $49=$key; //@line 931 "cPickle.c"
        FUNCTION_TABLE[$48]($49); //@line 931 "cPickle.c"
        __label__ = 9; break; //@line 931 "cPickle.c"
      case 9: // $bb8
        var $50=$obj_addr; //@line 932 "cPickle.c"
        var $51=$50+4; //@line 932 "cPickle.c"
        var $52=HEAP[$51]; //@line 932 "cPickle.c"
        var $53=$52+12; //@line 932 "cPickle.c"
        var $54=HEAP[$53]; //@line 932 "cPickle.c"
        var $55=HEAP[_PyExc_ValueError]; //@line 932 "cPickle.c"
        var $56=$obj_addr; //@line 932 "cPickle.c"
        var $57=_PyErr_Format($55, __str8, allocate([$54,0,0,0,$56,0,0,0], ["i8*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 932 "cPickle.c"
        var $58=$self_addr; //@line 936 "cPickle.c"
        var $59=$58+64; //@line 936 "cPickle.c"
        HEAP[$59]=-1; //@line 936 "cPickle.c"
        $0=0; //@line 937 "cPickle.c"
        __label__ = 17; break; //@line 937 "cPickle.c"
      case 10: // $bb9
        var $60=$self_addr; //@line 939 "cPickle.c"
        var $61=$60+68; //@line 939 "cPickle.c"
        var $62=HEAP[$61]; //@line 939 "cPickle.c"
        var $63=$key; //@line 939 "cPickle.c"
        var $64=_PyDict_SetItem($62, $63, __Py_NoneStruct); //@line 939 "cPickle.c"
        var $65=($64) < 0; //@line 939 "cPickle.c"
        var $66=$key; //@line 940 "cPickle.c"
        var $67=$66; //@line 940 "cPickle.c"
        var $68=HEAP[$67]; //@line 940 "cPickle.c"
        var $69=($68) - 1; //@line 940 "cPickle.c"
        var $70=$key; //@line 940 "cPickle.c"
        var $71=$70; //@line 940 "cPickle.c"
        HEAP[$71]=$69; //@line 940 "cPickle.c"
        var $72=$key; //@line 940 "cPickle.c"
        var $73=$72; //@line 940 "cPickle.c"
        var $74=HEAP[$73]; //@line 940 "cPickle.c"
        var $75=($74)==0; //@line 940 "cPickle.c"
        if ($65) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 939 "cPickle.c"
      case 11: // $bb10
        if ($75) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 940 "cPickle.c"
      case 12: // $bb11
        var $76=$key; //@line 940 "cPickle.c"
        var $77=$76+4; //@line 940 "cPickle.c"
        var $78=HEAP[$77]; //@line 940 "cPickle.c"
        var $79=$78+24; //@line 940 "cPickle.c"
        var $80=HEAP[$79]; //@line 940 "cPickle.c"
        var $81=$key; //@line 940 "cPickle.c"
        FUNCTION_TABLE[$80]($81); //@line 940 "cPickle.c"
        __label__ = 13; break; //@line 940 "cPickle.c"
      case 13: // $bb12
        var $82=$self_addr; //@line 941 "cPickle.c"
        var $83=$82+64; //@line 941 "cPickle.c"
        HEAP[$83]=-1; //@line 941 "cPickle.c"
        $0=0; //@line 942 "cPickle.c"
        __label__ = 17; break; //@line 942 "cPickle.c"
      case 14: // $bb13
        if ($75) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 944 "cPickle.c"
      case 15: // $bb14
        var $84=$key; //@line 944 "cPickle.c"
        var $85=$84+4; //@line 944 "cPickle.c"
        var $86=HEAP[$85]; //@line 944 "cPickle.c"
        var $87=$86+24; //@line 944 "cPickle.c"
        var $88=HEAP[$87]; //@line 944 "cPickle.c"
        var $89=$key; //@line 944 "cPickle.c"
        FUNCTION_TABLE[$88]($89); //@line 944 "cPickle.c"
        __label__ = 16; break; //@line 944 "cPickle.c"
      case 16: // $bb15
        $0=1; //@line 946 "cPickle.c"
        __label__ = 17; break; //@line 946 "cPickle.c"
      case 17: // $bb16
        var $90=$0; //@line 924 "cPickle.c"
        $retval=$90; //@line 924 "cPickle.c"
        var $retval17=$retval; //@line 924 "cPickle.c"
        ;
        return $retval17; //@line 924 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fast_save_leave($self, $obj) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $obj_addr;
        var $retval;
        var $0;
        var $key;
        $self_addr=$self;
        $obj_addr=$obj;
        var $1=$self_addr; //@line 952 "cPickle.c"
        var $2=$1+64; //@line 952 "cPickle.c"
        var $3=HEAP[$2]; //@line 952 "cPickle.c"
        var $4=($3) > 49; //@line 952 "cPickle.c"
        var $5=($4); //@line 952 "cPickle.c"
        var $6=($3) - 1; //@line 952 "cPickle.c"
        var $7=$self_addr; //@line 952 "cPickle.c"
        var $8=$7+64; //@line 952 "cPickle.c"
        HEAP[$8]=$6; //@line 952 "cPickle.c"
        var $toBool=($5)!=0; //@line 952 "cPickle.c"
        if ($toBool) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 952 "cPickle.c"
      case 1: // $bb
        var $9=$obj_addr; //@line 953 "cPickle.c"
        var $10=$9; //@line 953 "cPickle.c"
        var $11=_PyLong_FromVoidPtr($10); //@line 953 "cPickle.c"
        $key=$11; //@line 953 "cPickle.c"
        var $12=$key; //@line 954 "cPickle.c"
        var $13=($12)==0; //@line 954 "cPickle.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 954 "cPickle.c"
      case 2: // $bb1
        $0=0; //@line 955 "cPickle.c"
        __label__ = 10; break; //@line 955 "cPickle.c"
      case 3: // $bb2
        var $14=$self_addr; //@line 956 "cPickle.c"
        var $15=$14+68; //@line 956 "cPickle.c"
        var $16=HEAP[$15]; //@line 956 "cPickle.c"
        var $17=$key; //@line 956 "cPickle.c"
        var $18=_PyDict_DelItem($16, $17); //@line 956 "cPickle.c"
        var $19=($18) < 0; //@line 956 "cPickle.c"
        var $20=$key; //@line 957 "cPickle.c"
        var $21=$20; //@line 957 "cPickle.c"
        var $22=HEAP[$21]; //@line 957 "cPickle.c"
        var $23=($22) - 1; //@line 957 "cPickle.c"
        var $24=$key; //@line 957 "cPickle.c"
        var $25=$24; //@line 957 "cPickle.c"
        HEAP[$25]=$23; //@line 957 "cPickle.c"
        var $26=$key; //@line 957 "cPickle.c"
        var $27=$26; //@line 957 "cPickle.c"
        var $28=HEAP[$27]; //@line 957 "cPickle.c"
        var $29=($28)==0; //@line 957 "cPickle.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 956 "cPickle.c"
      case 4: // $bb3
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 957 "cPickle.c"
      case 5: // $bb4
        var $30=$key; //@line 957 "cPickle.c"
        var $31=$30+4; //@line 957 "cPickle.c"
        var $32=HEAP[$31]; //@line 957 "cPickle.c"
        var $33=$32+24; //@line 957 "cPickle.c"
        var $34=HEAP[$33]; //@line 957 "cPickle.c"
        var $35=$key; //@line 957 "cPickle.c"
        FUNCTION_TABLE[$34]($35); //@line 957 "cPickle.c"
        __label__ = 6; break; //@line 957 "cPickle.c"
      case 6: // $bb5
        $0=0; //@line 958 "cPickle.c"
        __label__ = 10; break; //@line 958 "cPickle.c"
      case 7: // $bb6
        if ($29) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 960 "cPickle.c"
      case 8: // $bb7
        var $36=$key; //@line 960 "cPickle.c"
        var $37=$36+4; //@line 960 "cPickle.c"
        var $38=HEAP[$37]; //@line 960 "cPickle.c"
        var $39=$38+24; //@line 960 "cPickle.c"
        var $40=HEAP[$39]; //@line 960 "cPickle.c"
        var $41=$key; //@line 960 "cPickle.c"
        FUNCTION_TABLE[$40]($41); //@line 960 "cPickle.c"
        __label__ = 9; break; //@line 960 "cPickle.c"
      case 9: // $bb8
        $0=1; //@line 962 "cPickle.c"
        __label__ = 10; break; //@line 962 "cPickle.c"
      case 10: // $bb9
        var $42=$0; //@line 955 "cPickle.c"
        $retval=$42; //@line 955 "cPickle.c"
        var $retval10=$retval; //@line 955 "cPickle.c"
        ;
        return $retval10; //@line 955 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_none($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 969 "cPickle.c"
        var $2=$1+48; //@line 969 "cPickle.c"
        var $3=HEAP[$2]; //@line 969 "cPickle.c"
        var $4=$self_addr; //@line 969 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, _none_9451, 1); //@line 969 "cPickle.c"
        var $6=($5) < 0; //@line 969 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 969 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 970 "cPickle.c"
        __label__ = 3; break; //@line 970 "cPickle.c"
      case 2: // $bb1
        $0=0; //@line 972 "cPickle.c"
        __label__ = 3; break; //@line 972 "cPickle.c"
      case 3: // $bb2
        var $7=$0; //@line 970 "cPickle.c"
        $retval=$7; //@line 970 "cPickle.c"
        var $retval3=$retval; //@line 970 "cPickle.c"
        ;
        return $retval3; //@line 970 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_bool($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 1; _memset(__stackBase__, 0, 1);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $iftmp_52;
        var $l;
        var $opcode=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$args_addr; //@line 980 "cPickle.c"
        var $2=$1; //@line 980 "cPickle.c"
        var $3=$2+8; //@line 980 "cPickle.c"
        var $4=HEAP[$3]; //@line 980 "cPickle.c"
        $l=$4; //@line 980 "cPickle.c"
        var $5=$self_addr; //@line 982 "cPickle.c"
        var $6=$5+36; //@line 982 "cPickle.c"
        var $7=HEAP[$6]; //@line 982 "cPickle.c"
        var $8=($7) > 1; //@line 982 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 982 "cPickle.c"
      case 1: // $bb
        var $9=$l; //@line 983 "cPickle.c"
        var $10=($9)!=0; //@line 983 "cPickle.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 983 "cPickle.c"
      case 2: // $bb1
        $iftmp_52=-120; //@line 983 "cPickle.c"
        __label__ = 4; break; //@line 983 "cPickle.c"
      case 3: // $bb2
        $iftmp_52=-119; //@line 983 "cPickle.c"
        __label__ = 4; break; //@line 983 "cPickle.c"
      case 4: // $bb3
        var $11=$iftmp_52; //@line 983 "cPickle.c"
        HEAP[$opcode]=$11; //@line 983 "cPickle.c"
        var $12=$self_addr; //@line 984 "cPickle.c"
        var $13=$12+48; //@line 984 "cPickle.c"
        var $14=HEAP[$13]; //@line 984 "cPickle.c"
        var $15=$self_addr; //@line 984 "cPickle.c"
        var $16=FUNCTION_TABLE[$14]($15, $opcode, 1); //@line 984 "cPickle.c"
        var $17=($16) < 0; //@line 984 "cPickle.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 984 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 985 "cPickle.c"
        __label__ = 9; break; //@line 985 "cPickle.c"
      case 6: // $bb6
        var $18=$self_addr; //@line 987 "cPickle.c"
        var $19=$18+48; //@line 987 "cPickle.c"
        var $20=HEAP[$19]; //@line 987 "cPickle.c"
        var $21=$l; //@line 987 "cPickle.c"
        var $22=_len_9463+$21; //@line 987 "cPickle.c"
        var $23=HEAP[$22]; //@line 987 "cPickle.c"
        var $24=($23); //@line 987 "cPickle.c"
        var $25=$l; //@line 987 "cPickle.c"
        var $26=_buf_9462+$25*4; //@line 987 "cPickle.c"
        var $27=HEAP[$26]; //@line 987 "cPickle.c"
        var $28=$self_addr; //@line 987 "cPickle.c"
        var $29=FUNCTION_TABLE[$20]($28, $27, $24); //@line 987 "cPickle.c"
        var $30=($29) < 0; //@line 987 "cPickle.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 987 "cPickle.c"
      case 7: // $bb7
        $0=-1; //@line 988 "cPickle.c"
        __label__ = 9; break; //@line 988 "cPickle.c"
      case 8: // $bb8
        $0=0; //@line 989 "cPickle.c"
        __label__ = 9; break; //@line 989 "cPickle.c"
      case 9: // $bb9
        var $31=$0; //@line 985 "cPickle.c"
        $retval=$31; //@line 985 "cPickle.c"
        var $retval10=$retval; //@line 985 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 985 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_int($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $c_str=__stackBase__;
        var $l;
        var $len;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$args_addr; //@line 996 "cPickle.c"
        var $2=$1; //@line 996 "cPickle.c"
        var $3=$2+8; //@line 996 "cPickle.c"
        var $4=HEAP[$3]; //@line 996 "cPickle.c"
        $l=$4; //@line 996 "cPickle.c"
        $len=0; //@line 997 "cPickle.c"
        var $5=$self_addr; //@line 999 "cPickle.c"
        var $6=$5+40; //@line 999 "cPickle.c"
        var $7=HEAP[$6]; //@line 999 "cPickle.c"
        var $8=($7)==0; //@line 999 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 999 "cPickle.c"
      case 1: // $bb
        var $9=$c_str; //@line 1008 "cPickle.c"
        HEAP[$9]=73; //@line 1008 "cPickle.c"
        var $c_str1=$c_str; //@line 1009 "cPickle.c"
        var $10=$c_str1+1; //@line 1009 "cPickle.c"
        var $11=$l; //@line 1009 "cPickle.c"
        var $12=_PyOS_snprintf($10, 31, __str4, allocate([$11,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 1009 "cPickle.c"
        var $13=$self_addr; //@line 1010 "cPickle.c"
        var $14=$13+48; //@line 1010 "cPickle.c"
        var $15=HEAP[$14]; //@line 1010 "cPickle.c"
        var $c_str2=$c_str; //@line 1010 "cPickle.c"
        var $16=_strlen($c_str2); //@line 1010 "cPickle.c"
        var $17=$self_addr; //@line 1010 "cPickle.c"
        var $c_str3=$c_str; //@line 1010 "cPickle.c"
        var $18=FUNCTION_TABLE[$15]($17, $c_str3, $16); //@line 1010 "cPickle.c"
        var $19=($18) < 0; //@line 1010 "cPickle.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 11; break; } //@line 1010 "cPickle.c"
      case 2: // $bb4
        $0=-1; //@line 1011 "cPickle.c"
        __label__ = 12; break; //@line 1011 "cPickle.c"
      case 3: // $bb6
        var $20=$l; //@line 1015 "cPickle.c"
        var $21=((($20)) & 255); //@line 1015 "cPickle.c"
        var $22=$c_str+1; //@line 1015 "cPickle.c"
        HEAP[$22]=$21; //@line 1015 "cPickle.c"
        var $23=$l; //@line 1016 "cPickle.c"
        var $24=($23) >> 8; //@line 1016 "cPickle.c"
        var $25=((($24)) & 255); //@line 1016 "cPickle.c"
        var $26=$c_str+2; //@line 1016 "cPickle.c"
        HEAP[$26]=$25; //@line 1016 "cPickle.c"
        var $27=$l; //@line 1017 "cPickle.c"
        var $28=($27) >> 16; //@line 1017 "cPickle.c"
        var $29=((($28)) & 255); //@line 1017 "cPickle.c"
        var $30=$c_str+3; //@line 1017 "cPickle.c"
        HEAP[$30]=$29; //@line 1017 "cPickle.c"
        var $31=$l; //@line 1018 "cPickle.c"
        var $32=($31) >> 24; //@line 1018 "cPickle.c"
        var $33=((($32)) & 255); //@line 1018 "cPickle.c"
        var $34=$c_str+4; //@line 1018 "cPickle.c"
        HEAP[$34]=$33; //@line 1018 "cPickle.c"
        var $35=$c_str+4; //@line 1020 "cPickle.c"
        var $36=HEAP[$35]; //@line 1020 "cPickle.c"
        var $37=($36)!=0; //@line 1020 "cPickle.c"
        if ($37) { __label__ = 8; break; } else { __label__ = 4; break; } //@line 1020 "cPickle.c"
      case 4: // $bb7
        var $38=$c_str+3; //@line 1020 "cPickle.c"
        var $39=HEAP[$38]; //@line 1020 "cPickle.c"
        var $40=($39)!=0; //@line 1020 "cPickle.c"
        if ($40) { __label__ = 8; break; } else { __label__ = 5; break; } //@line 1020 "cPickle.c"
      case 5: // $bb8
        var $41=$c_str+2; //@line 1021 "cPickle.c"
        var $42=HEAP[$41]; //@line 1021 "cPickle.c"
        var $43=($42)==0; //@line 1021 "cPickle.c"
        var $44=$c_str; //@line 1022 "cPickle.c"
        if ($43) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1021 "cPickle.c"
      case 6: // $bb9
        HEAP[$44]=75; //@line 1022 "cPickle.c"
        $len=2; //@line 1023 "cPickle.c"
        __label__ = 9; break; //@line 1023 "cPickle.c"
      case 7: // $bb10
        HEAP[$44]=77; //@line 1026 "cPickle.c"
        $len=3; //@line 1027 "cPickle.c"
        __label__ = 9; break; //@line 1027 "cPickle.c"
      case 8: // $bb12
        var $45=$c_str; //@line 1031 "cPickle.c"
        HEAP[$45]=74; //@line 1031 "cPickle.c"
        $len=5; //@line 1032 "cPickle.c"
        __label__ = 9; break; //@line 1032 "cPickle.c"
      case 9: // $bb13
        var $46=$self_addr; //@line 1035 "cPickle.c"
        var $47=$46+48; //@line 1035 "cPickle.c"
        var $48=HEAP[$47]; //@line 1035 "cPickle.c"
        var $49=$self_addr; //@line 1035 "cPickle.c"
        var $c_str14=$c_str; //@line 1035 "cPickle.c"
        var $50=$len; //@line 1035 "cPickle.c"
        var $51=FUNCTION_TABLE[$48]($49, $c_str14, $50); //@line 1035 "cPickle.c"
        var $52=($51) < 0; //@line 1035 "cPickle.c"
        if ($52) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1035 "cPickle.c"
      case 10: // $bb15
        $0=-1; //@line 1036 "cPickle.c"
        __label__ = 12; break; //@line 1036 "cPickle.c"
      case 11: // $bb16
        $0=0; //@line 1039 "cPickle.c"
        __label__ = 12; break; //@line 1039 "cPickle.c"
      case 12: // $bb17
        var $53=$0; //@line 1011 "cPickle.c"
        $retval=$53; //@line 1011 "cPickle.c"
        var $retval18=$retval; //@line 1011 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 1011 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_long($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 5; _memset(__stackBase__, 0, 5);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $size;
        var $res;
        var $repr;
        var $nbits;
        var $nbytes;
        var $pdata;
        var $c_str=__stackBase__;
        var $i;
        var $sign;
        $self_addr=$self;
        $args_addr=$args;
        $res=-1; //@line 1047 "cPickle.c"
        $repr=0; //@line 1048 "cPickle.c"
        var $1=$self_addr; //@line 1052 "cPickle.c"
        var $2=$1+36; //@line 1052 "cPickle.c"
        var $3=HEAP[$2]; //@line 1052 "cPickle.c"
        var $4=($3) > 1; //@line 1052 "cPickle.c"
        var $5=$args_addr; //@line 1059 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 25; break; } //@line 1052 "cPickle.c"
      case 1: // $bb
        var $6=__PyLong_Sign($5); //@line 1059 "cPickle.c"
        $sign=$6; //@line 1059 "cPickle.c"
        var $7=$sign; //@line 1061 "cPickle.c"
        var $8=($7)==0; //@line 1061 "cPickle.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 1061 "cPickle.c"
      case 2: // $bb1
        var $9=$c_str; //@line 1063 "cPickle.c"
        HEAP[$9]=-118; //@line 1063 "cPickle.c"
        var $10=$c_str+1; //@line 1064 "cPickle.c"
        HEAP[$10]=0; //@line 1064 "cPickle.c"
        var $11=$self_addr; //@line 1065 "cPickle.c"
        var $12=$11+48; //@line 1065 "cPickle.c"
        var $13=HEAP[$12]; //@line 1065 "cPickle.c"
        var $14=$self_addr; //@line 1065 "cPickle.c"
        var $c_str2=$c_str; //@line 1065 "cPickle.c"
        var $15=FUNCTION_TABLE[$13]($14, $c_str2, 2); //@line 1065 "cPickle.c"
        $i=$15; //@line 1065 "cPickle.c"
        var $16=$i; //@line 1066 "cPickle.c"
        var $17=($16) < 0; //@line 1066 "cPickle.c"
        if ($17) { __label__ = 31; break; } else { __label__ = 3; break; } //@line 1066 "cPickle.c"
      case 3: // $bb3
        $res=0; //@line 1067 "cPickle.c"
        __label__ = 31; break; //@line 1067 "cPickle.c"
      case 4: // $bb4
        var $18=$args_addr; //@line 1070 "cPickle.c"
        var $19=__PyLong_NumBits($18); //@line 1070 "cPickle.c"
        $nbits=$19; //@line 1070 "cPickle.c"
        var $20=$nbits; //@line 1071 "cPickle.c"
        var $21=($20)==-1; //@line 1071 "cPickle.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1071 "cPickle.c"
      case 5: // $bb5
        var $22=_PyErr_Occurred(); //@line 1071 "cPickle.c"
        var $23=($22)!=0; //@line 1071 "cPickle.c"
        if ($23) { __label__ = 31; break; } else { __label__ = 6; break; } //@line 1071 "cPickle.c"
      case 6: // $bb6
        var $24=$nbits; //@line 1087 "cPickle.c"
        var $25=($24) >>> 3; //@line 1087 "cPickle.c"
        var $26=($25) + 1; //@line 1087 "cPickle.c"
        $nbytes=$26; //@line 1087 "cPickle.c"
        var $27=($26) < 0; //@line 1088 "cPickle.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1088 "cPickle.c"
      case 7: // $bb7
        var $28=HEAP[_PyExc_OverflowError]; //@line 1089 "cPickle.c"
        _PyErr_SetString($28, __str11); //@line 1089 "cPickle.c"
        __label__ = 31; break; //@line 1089 "cPickle.c"
      case 8: // $bb8
        var $29=$nbytes; //@line 1093 "cPickle.c"
        var $30=_PyString_FromStringAndSize(0, $29); //@line 1093 "cPickle.c"
        $repr=$30; //@line 1093 "cPickle.c"
        var $31=$repr; //@line 1094 "cPickle.c"
        var $32=($31)==0; //@line 1094 "cPickle.c"
        if ($32) { __label__ = 34; break; } else { __label__ = 9; break; } //@line 1094 "cPickle.c"
      case 9: // $bb9
        var $33=$repr; //@line 1095 "cPickle.c"
        var $34=$33; //@line 1095 "cPickle.c"
        var $35=$34+20; //@line 1095 "cPickle.c"
        var $36=$35; //@line 1095 "cPickle.c"
        $pdata=$36; //@line 1095 "cPickle.c"
        var $37=$args_addr; //@line 1096 "cPickle.c"
        var $38=$37; //@line 1096 "cPickle.c"
        var $39=$pdata; //@line 1096 "cPickle.c"
        var $40=$nbytes; //@line 1096 "cPickle.c"
        var $41=__PyLong_AsByteArray($38, $39, $40, 1, 1); //@line 1096 "cPickle.c"
        $i=$41; //@line 1096 "cPickle.c"
        var $42=$i; //@line 1099 "cPickle.c"
        var $43=($42) < 0; //@line 1099 "cPickle.c"
        if ($43) { __label__ = 31; break; } else { __label__ = 10; break; } //@line 1099 "cPickle.c"
      case 10: // $bb10
        var $44=$sign; //@line 1104 "cPickle.c"
        var $45=($44) < 0; //@line 1104 "cPickle.c"
        if ($45) { __label__ = 11; break; } else { __label__ = 16; break; } //@line 1104 "cPickle.c"
      case 11: // $bb11
        var $46=$nbytes; //@line 1104 "cPickle.c"
        var $47=($46) > 1; //@line 1104 "cPickle.c"
        if ($47) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 1104 "cPickle.c"
      case 12: // $bb15_thread
        var $48=$c_str; //@line 1109 "cPickle.c"
        __lastLabel__ = 12; __label__ = 18; break;
      case 13: // $bb12
        var $49=$nbytes; //@line 1104 "cPickle.c"
        var $50=($49) - 1; //@line 1104 "cPickle.c"
        var $51=$pdata; //@line 1104 "cPickle.c"
        var $52=$51+$50; //@line 1104 "cPickle.c"
        var $53=HEAP[$52]; //@line 1104 "cPickle.c"
        var $54=($53)==-1; //@line 1104 "cPickle.c"
        if ($54) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 1104 "cPickle.c"
      case 14: // $bb13
        var $55=$nbytes; //@line 1104 "cPickle.c"
        var $56=($55) - 2; //@line 1104 "cPickle.c"
        var $57=$pdata; //@line 1104 "cPickle.c"
        var $58=$57+$56; //@line 1104 "cPickle.c"
        var $59=HEAP[$58]; //@line 1104 "cPickle.c"
        var $60=($59) < 0; //@line 1104 "cPickle.c"
        if ($60) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1104 "cPickle.c"
      case 15: // $bb14
        var $61=$nbytes; //@line 1106 "cPickle.c"
        var $62=($61) - 1; //@line 1106 "cPickle.c"
        $nbytes=$62; //@line 1106 "cPickle.c"
        __lastLabel__ = 15; __label__ = 17; break; //@line 1106 "cPickle.c"
      case 16: // $bb15thread_pre_split
        var $_pr=$nbytes;
        __lastLabel__ = 16; __label__ = 17; break;
      case 17: // $bb15
        var $63=__lastLabel__ == 16 ? $_pr : ($62);
        var $64=($63) <= 255; //@line 1108 "cPickle.c"
        var $65=$c_str; //@line 1109 "cPickle.c"
        if ($64) { __lastLabel__ = 17; __label__ = 18; break; } else { __lastLabel__ = 17; __label__ = 19; break; } //@line 1108 "cPickle.c"
      case 18: // $bb16
        var $66=__lastLabel__ == 12 ? $48 : ($65);
        HEAP[$66]=-118; //@line 1109 "cPickle.c"
        var $67=$nbytes; //@line 1110 "cPickle.c"
        var $68=((($67)) & 255); //@line 1110 "cPickle.c"
        var $69=$c_str+1; //@line 1110 "cPickle.c"
        HEAP[$69]=$68; //@line 1110 "cPickle.c"
        $size=2; //@line 1111 "cPickle.c"
        __label__ = 22; break; //@line 1111 "cPickle.c"
      case 19: // $bb17
        HEAP[$65]=-117; //@line 1114 "cPickle.c"
        var $70=$nbytes; //@line 1115 "cPickle.c"
        $size=$70; //@line 1115 "cPickle.c"
        $i=1; //@line 1116 "cPickle.c"
        __label__ = 20; break;
      case 20: // $bb18
        var $71=$i; //@line 1117 "cPickle.c"
        var $72=$size; //@line 1117 "cPickle.c"
        var $73=((($72)) & 255); //@line 1117 "cPickle.c"
        var $74=$c_str+$71; //@line 1117 "cPickle.c"
        HEAP[$74]=$73; //@line 1117 "cPickle.c"
        var $75=$size; //@line 1118 "cPickle.c"
        var $76=($75) >> 8; //@line 1118 "cPickle.c"
        $size=$76; //@line 1118 "cPickle.c"
        var $77=$i; //@line 1116 "cPickle.c"
        var $78=($77) + 1; //@line 1116 "cPickle.c"
        $i=$78; //@line 1116 "cPickle.c"
        var $79=($78) <= 4; //@line 1116 "cPickle.c"
        if ($79) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1116 "cPickle.c"
      case 21: // $bb20
        $size=5; //@line 1120 "cPickle.c"
        __label__ = 22; break; //@line 1120 "cPickle.c"
      case 22: // $bb21
        var $80=$self_addr; //@line 1122 "cPickle.c"
        var $81=$80+48; //@line 1122 "cPickle.c"
        var $82=HEAP[$81]; //@line 1122 "cPickle.c"
        var $83=$self_addr; //@line 1122 "cPickle.c"
        var $c_str22=$c_str; //@line 1122 "cPickle.c"
        var $84=$size; //@line 1122 "cPickle.c"
        var $85=FUNCTION_TABLE[$82]($83, $c_str22, $84); //@line 1122 "cPickle.c"
        $i=$85; //@line 1122 "cPickle.c"
        var $86=($85) < 0; //@line 1123 "cPickle.c"
        if ($86) { __label__ = 31; break; } else { __label__ = 23; break; } //@line 1123 "cPickle.c"
      case 23: // $bb23
        var $87=$self_addr; //@line 1124 "cPickle.c"
        var $88=$87+48; //@line 1124 "cPickle.c"
        var $89=HEAP[$88]; //@line 1124 "cPickle.c"
        var $90=$nbytes; //@line 1124 "cPickle.c"
        var $91=$pdata; //@line 1124 "cPickle.c"
        var $92=$self_addr; //@line 1124 "cPickle.c"
        var $93=FUNCTION_TABLE[$89]($92, $91, $90); //@line 1124 "cPickle.c"
        $i=$93; //@line 1124 "cPickle.c"
        var $94=$i; //@line 1125 "cPickle.c"
        var $95=($94) < 0; //@line 1125 "cPickle.c"
        if ($95) { __label__ = 31; break; } else { __label__ = 24; break; } //@line 1125 "cPickle.c"
      case 24: // $bb24
        $res=0; //@line 1126 "cPickle.c"
        __label__ = 31; break; //@line 1126 "cPickle.c"
      case 25: // $bb25
        var $96=_PyObject_Repr($5); //@line 1133 "cPickle.c"
        $repr=$96; //@line 1133 "cPickle.c"
        var $97=$repr; //@line 1133 "cPickle.c"
        var $98=($97)==0; //@line 1133 "cPickle.c"
        if ($98) { __label__ = 34; break; } else { __label__ = 26; break; } //@line 1133 "cPickle.c"
      case 26: // $bb26
        var $99=$repr; //@line 1136 "cPickle.c"
        var $100=_PyString_Size($99); //@line 1136 "cPickle.c"
        $size=$100; //@line 1136 "cPickle.c"
        var $101=$size; //@line 1136 "cPickle.c"
        var $102=($101) < 0; //@line 1136 "cPickle.c"
        if ($102) { __label__ = 31; break; } else { __label__ = 27; break; } //@line 1136 "cPickle.c"
      case 27: // $bb27
        var $103=$self_addr; //@line 1139 "cPickle.c"
        var $104=$103+48; //@line 1139 "cPickle.c"
        var $105=HEAP[$104]; //@line 1139 "cPickle.c"
        var $106=$self_addr; //@line 1139 "cPickle.c"
        var $107=FUNCTION_TABLE[$105]($106, _l_9538, 1); //@line 1139 "cPickle.c"
        var $108=($107) < 0; //@line 1139 "cPickle.c"
        if ($108) { __label__ = 31; break; } else { __label__ = 28; break; } //@line 1139 "cPickle.c"
      case 28: // $bb28
        var $109=$self_addr; //@line 1142 "cPickle.c"
        var $110=$109+48; //@line 1142 "cPickle.c"
        var $111=HEAP[$110]; //@line 1142 "cPickle.c"
        var $112=$repr; //@line 1142 "cPickle.c"
        var $113=$112; //@line 1142 "cPickle.c"
        var $114=$113+20; //@line 1142 "cPickle.c"
        var $115=$114; //@line 1142 "cPickle.c"
        var $116=$self_addr; //@line 1142 "cPickle.c"
        var $117=$size; //@line 1142 "cPickle.c"
        var $118=FUNCTION_TABLE[$111]($116, $115, $117); //@line 1142 "cPickle.c"
        var $119=($118) < 0; //@line 1142 "cPickle.c"
        if ($119) { __label__ = 31; break; } else { __label__ = 29; break; } //@line 1142 "cPickle.c"
      case 29: // $bb29
        var $120=$self_addr; //@line 1147 "cPickle.c"
        var $121=$120+48; //@line 1147 "cPickle.c"
        var $122=HEAP[$121]; //@line 1147 "cPickle.c"
        var $123=$self_addr; //@line 1147 "cPickle.c"
        var $124=FUNCTION_TABLE[$122]($123, __str12, 1); //@line 1147 "cPickle.c"
        var $125=($124) < 0; //@line 1147 "cPickle.c"
        if ($125) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 1147 "cPickle.c"
      case 30: // $bb30
        $res=0; //@line 1150 "cPickle.c"
        __label__ = 31; break; //@line 1152 "cPickle.c"
      case 31: // $finally
        var $_pr1=$repr;
        var $126=($_pr1)!=0; //@line 1153 "cPickle.c"
        if ($126) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 1153 "cPickle.c"
      case 32: // $bb31
        var $127=$repr; //@line 1153 "cPickle.c"
        var $128=$127; //@line 1153 "cPickle.c"
        var $129=HEAP[$128]; //@line 1153 "cPickle.c"
        var $130=($129) - 1; //@line 1153 "cPickle.c"
        var $131=$repr; //@line 1153 "cPickle.c"
        var $132=$131; //@line 1153 "cPickle.c"
        HEAP[$132]=$130; //@line 1153 "cPickle.c"
        var $133=$repr; //@line 1153 "cPickle.c"
        var $134=$133; //@line 1153 "cPickle.c"
        var $135=HEAP[$134]; //@line 1153 "cPickle.c"
        var $136=($135)==0; //@line 1153 "cPickle.c"
        if ($136) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 1153 "cPickle.c"
      case 33: // $bb32
        var $137=$repr; //@line 1153 "cPickle.c"
        var $138=$137+4; //@line 1153 "cPickle.c"
        var $139=HEAP[$138]; //@line 1153 "cPickle.c"
        var $140=$139+24; //@line 1153 "cPickle.c"
        var $141=HEAP[$140]; //@line 1153 "cPickle.c"
        var $142=$repr; //@line 1153 "cPickle.c"
        FUNCTION_TABLE[$141]($142); //@line 1153 "cPickle.c"
        __label__ = 34; break; //@line 1153 "cPickle.c"
      case 34: // $bb33
        var $143=$res; //@line 1154 "cPickle.c"
        $0=$143; //@line 1154 "cPickle.c"
        var $144=$0; //@line 1154 "cPickle.c"
        $retval=$144; //@line 1154 "cPickle.c"
        var $retval34=$retval; //@line 1154 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval34; //@line 1154 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_float($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 10; _memset(__stackBase__, 0, 10);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $x;
        var $str=__stackBase__;
        var $result;
        var $buf;
        var $op=__stackBase__+9;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$args_addr; //@line 1161 "cPickle.c"
        var $2=$1; //@line 1161 "cPickle.c"
        var $3=$2+8; //@line 1161 "cPickle.c"
        var $4=HEAP[$3]; //@line 1161 "cPickle.c"
        $x=$4; //@line 1161 "cPickle.c"
        var $5=$self_addr; //@line 1163 "cPickle.c"
        var $6=$5+40; //@line 1163 "cPickle.c"
        var $7=HEAP[$6]; //@line 1163 "cPickle.c"
        var $8=($7)!=0; //@line 1163 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 1163 "cPickle.c"
      case 1: // $bb
        var $9=$str; //@line 1165 "cPickle.c"
        HEAP[$9]=71; //@line 1165 "cPickle.c"
        var $10=$str+1; //@line 1166 "cPickle.c"
        var $11=$x; //@line 1166 "cPickle.c"
        var $12=__PyFloat_Pack8($11, $10, 0); //@line 1166 "cPickle.c"
        var $13=($12) < 0; //@line 1166 "cPickle.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1166 "cPickle.c"
      case 2: // $bb1
        $0=-1; //@line 1167 "cPickle.c"
        __label__ = 13; break; //@line 1167 "cPickle.c"
      case 3: // $bb2
        var $14=$self_addr; //@line 1168 "cPickle.c"
        var $15=$14+48; //@line 1168 "cPickle.c"
        var $16=HEAP[$15]; //@line 1168 "cPickle.c"
        var $17=$self_addr; //@line 1168 "cPickle.c"
        var $str3=$str; //@line 1168 "cPickle.c"
        var $18=FUNCTION_TABLE[$16]($17, $str3, 9); //@line 1168 "cPickle.c"
        var $19=($18) < 0; //@line 1168 "cPickle.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1168 "cPickle.c"
      case 4: // $bb4
        $0=-1; //@line 1169 "cPickle.c"
        __label__ = 13; break; //@line 1169 "cPickle.c"
      case 5: // $bb5
        $0=0; //@line 1197 "cPickle.c"
        __label__ = 13; break; //@line 1197 "cPickle.c"
      case 6: // $bb6
        $result=-1; //@line 1172 "cPickle.c"
        $buf=0; //@line 1173 "cPickle.c"
        HEAP[$op]=70; //@line 1174 "cPickle.c"
        var $20=$self_addr; //@line 1176 "cPickle.c"
        var $21=$20+48; //@line 1176 "cPickle.c"
        var $22=HEAP[$21]; //@line 1176 "cPickle.c"
        var $23=$self_addr; //@line 1176 "cPickle.c"
        var $24=FUNCTION_TABLE[$22]($23, $op, 1); //@line 1176 "cPickle.c"
        var $25=($24) < 0; //@line 1176 "cPickle.c"
        if ($25) { __label__ = 12; break; } else { __label__ = 7; break; } //@line 1176 "cPickle.c"
      case 7: // $bb7
        var $26=$x; //@line 1179 "cPickle.c"
        var $27=_PyOS_double_to_string($26, 103, 17, 0, 0); //@line 1179 "cPickle.c"
        $buf=$27; //@line 1179 "cPickle.c"
        var $28=$buf; //@line 1180 "cPickle.c"
        var $29=($28)==0; //@line 1180 "cPickle.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1180 "cPickle.c"
      case 8: // $bb8
        var $30=_PyErr_NoMemory(); //@line 1181 "cPickle.c"
        __label__ = 12; break; //@line 1181 "cPickle.c"
      case 9: // $bb9
        var $31=$self_addr; //@line 1185 "cPickle.c"
        var $32=$31+48; //@line 1185 "cPickle.c"
        var $33=HEAP[$32]; //@line 1185 "cPickle.c"
        var $34=$buf; //@line 1185 "cPickle.c"
        var $35=_strlen($34); //@line 1185 "cPickle.c"
        var $36=$self_addr; //@line 1185 "cPickle.c"
        var $37=$buf; //@line 1185 "cPickle.c"
        var $38=FUNCTION_TABLE[$33]($36, $37, $35); //@line 1185 "cPickle.c"
        var $39=($38) < 0; //@line 1185 "cPickle.c"
        if ($39) { __label__ = 12; break; } else { __label__ = 10; break; } //@line 1185 "cPickle.c"
      case 10: // $bb10
        var $40=$self_addr; //@line 1188 "cPickle.c"
        var $41=$40+48; //@line 1188 "cPickle.c"
        var $42=HEAP[$41]; //@line 1188 "cPickle.c"
        var $43=$self_addr; //@line 1188 "cPickle.c"
        var $44=FUNCTION_TABLE[$42]($43, __str12, 1); //@line 1188 "cPickle.c"
        var $45=($44) < 0; //@line 1188 "cPickle.c"
        if ($45) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 1188 "cPickle.c"
      case 11: // $bb11
        $result=0; //@line 1191 "cPickle.c"
        __label__ = 12; break; //@line 1192 "cPickle.c"
      case 12: // $done
        var $46=$buf; //@line 1193 "cPickle.c"
        _PyMem_Free($46); //@line 1193 "cPickle.c"
        var $47=$result; //@line 1194 "cPickle.c"
        $0=$47; //@line 1194 "cPickle.c"
        __label__ = 13; break; //@line 1194 "cPickle.c"
      case 13: // $bb12
        var $48=$0; //@line 1167 "cPickle.c"
        $retval=$48; //@line 1167 "cPickle.c"
        var $retval13=$retval; //@line 1167 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 1167 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_string($self, $args, $doput) {
    var __stackBase__  = STACKTOP; STACKTOP += 5; _memset(__stackBase__, 0, 5);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $doput_addr;
        var $retval;
        var $0;
        var $size;
        var $len;
        var $repr;
        var $repr_str;
        var $i;
        var $c_str=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        $doput_addr=$doput;
        $repr=0; //@line 1205 "cPickle.c"
        var $1=$args_addr; //@line 1207 "cPickle.c"
        var $2=_PyString_Size($1); //@line 1207 "cPickle.c"
        $size=$2; //@line 1207 "cPickle.c"
        var $3=$size; //@line 1207 "cPickle.c"
        var $4=($3) < 0; //@line 1207 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1207 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 1208 "cPickle.c"
        __label__ = 37; break; //@line 1208 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 1210 "cPickle.c"
        var $6=$5+40; //@line 1210 "cPickle.c"
        var $7=HEAP[$6]; //@line 1210 "cPickle.c"
        var $8=($7)==0; //@line 1210 "cPickle.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 1210 "cPickle.c"
      case 3: // $bb2
        var $9=$args_addr; //@line 1215 "cPickle.c"
        var $10=_PyObject_Repr($9); //@line 1215 "cPickle.c"
        $repr=$10; //@line 1215 "cPickle.c"
        var $11=$repr; //@line 1215 "cPickle.c"
        var $12=($11)==0; //@line 1215 "cPickle.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1215 "cPickle.c"
      case 4: // $bb3
        $0=-1; //@line 1216 "cPickle.c"
        __label__ = 37; break; //@line 1216 "cPickle.c"
      case 5: // $bb4
        var $13=$repr; //@line 1218 "cPickle.c"
        var $14=_PyString_Size($13); //@line 1218 "cPickle.c"
        $len=$14; //@line 1218 "cPickle.c"
        var $15=$len; //@line 1218 "cPickle.c"
        var $16=($15) < 0; //@line 1218 "cPickle.c"
        if ($16) { __label__ = 33; break; } else { __label__ = 6; break; } //@line 1218 "cPickle.c"
      case 6: // $bb5
        var $17=$repr; //@line 1220 "cPickle.c"
        var $18=$17; //@line 1220 "cPickle.c"
        var $19=$18+20; //@line 1220 "cPickle.c"
        var $20=$19; //@line 1220 "cPickle.c"
        $repr_str=$20; //@line 1220 "cPickle.c"
        var $21=$self_addr; //@line 1222 "cPickle.c"
        var $22=$21+48; //@line 1222 "cPickle.c"
        var $23=HEAP[$22]; //@line 1222 "cPickle.c"
        var $24=$self_addr; //@line 1222 "cPickle.c"
        var $25=FUNCTION_TABLE[$23]($24, _string_9677, 1); //@line 1222 "cPickle.c"
        var $26=($25) < 0; //@line 1222 "cPickle.c"
        if ($26) { __label__ = 33; break; } else { __label__ = 7; break; } //@line 1222 "cPickle.c"
      case 7: // $bb6
        var $27=$self_addr; //@line 1225 "cPickle.c"
        var $28=$27+48; //@line 1225 "cPickle.c"
        var $29=HEAP[$28]; //@line 1225 "cPickle.c"
        var $30=$self_addr; //@line 1225 "cPickle.c"
        var $31=$repr_str; //@line 1225 "cPickle.c"
        var $32=$len; //@line 1225 "cPickle.c"
        var $33=FUNCTION_TABLE[$29]($30, $31, $32); //@line 1225 "cPickle.c"
        var $34=($33) < 0; //@line 1225 "cPickle.c"
        if ($34) { __label__ = 33; break; } else { __label__ = 8; break; } //@line 1225 "cPickle.c"
      case 8: // $bb7
        var $35=$self_addr; //@line 1228 "cPickle.c"
        var $36=$35+48; //@line 1228 "cPickle.c"
        var $37=HEAP[$36]; //@line 1228 "cPickle.c"
        var $38=$self_addr; //@line 1228 "cPickle.c"
        var $39=FUNCTION_TABLE[$37]($38, __str12, 1); //@line 1228 "cPickle.c"
        var $40=($39) < 0; //@line 1228 "cPickle.c"
        if ($40) { __label__ = 33; break; } else { __label__ = 9; break; } //@line 1228 "cPickle.c"
      case 9: // $bb8
        var $41=$repr; //@line 1231 "cPickle.c"
        var $42=($41)!=0; //@line 1231 "cPickle.c"
        if ($42) { __label__ = 10; break; } else { __label__ = 29; break; } //@line 1231 "cPickle.c"
      case 10: // $bb9
        var $43=$repr; //@line 1231 "cPickle.c"
        var $44=$43; //@line 1231 "cPickle.c"
        var $45=HEAP[$44]; //@line 1231 "cPickle.c"
        var $46=($45) - 1; //@line 1231 "cPickle.c"
        var $47=$repr; //@line 1231 "cPickle.c"
        var $48=$47; //@line 1231 "cPickle.c"
        HEAP[$48]=$46; //@line 1231 "cPickle.c"
        var $49=$repr; //@line 1231 "cPickle.c"
        var $50=$49; //@line 1231 "cPickle.c"
        var $51=HEAP[$50]; //@line 1231 "cPickle.c"
        var $52=($51)==0; //@line 1231 "cPickle.c"
        if ($52) { __label__ = 11; break; } else { __label__ = 29; break; } //@line 1231 "cPickle.c"
      case 11: // $bb10
        var $53=$repr; //@line 1231 "cPickle.c"
        var $54=$53+4; //@line 1231 "cPickle.c"
        var $55=HEAP[$54]; //@line 1231 "cPickle.c"
        var $56=$55+24; //@line 1231 "cPickle.c"
        var $57=HEAP[$56]; //@line 1231 "cPickle.c"
        var $58=$repr; //@line 1231 "cPickle.c"
        FUNCTION_TABLE[$57]($58); //@line 1231 "cPickle.c"
        __label__ = 29; break; //@line 1231 "cPickle.c"
      case 12: // $bb12
        var $59=$size; //@line 1237 "cPickle.c"
        var $60=($59) <= 255; //@line 1237 "cPickle.c"
        var $61=$c_str; //@line 1238 "cPickle.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1237 "cPickle.c"
      case 13: // $bb13
        HEAP[$61]=85; //@line 1238 "cPickle.c"
        var $62=$size; //@line 1239 "cPickle.c"
        var $63=((($62)) & 255); //@line 1239 "cPickle.c"
        var $64=$c_str+1; //@line 1239 "cPickle.c"
        HEAP[$64]=$63; //@line 1239 "cPickle.c"
        $len=2; //@line 1240 "cPickle.c"
        __label__ = 17; break; //@line 1240 "cPickle.c"
      case 14: // $bb14
        HEAP[$61]=84; //@line 1243 "cPickle.c"
        $i=1; //@line 1244 "cPickle.c"
        __label__ = 15; break;
      case 15: // $bb15
        var $65=$i; //@line 1245 "cPickle.c"
        var $66=$i; //@line 1245 "cPickle.c"
        var $67=($66) * 8; //@line 1245 "cPickle.c"
        var $68=($67) + -8; //@line 1245 "cPickle.c"
        var $69=$size; //@line 1245 "cPickle.c"
        var $70=($69) >> ($68); //@line 1245 "cPickle.c"
        var $71=((($70)) & 255); //@line 1245 "cPickle.c"
        var $72=$c_str+$65; //@line 1245 "cPickle.c"
        HEAP[$72]=$71; //@line 1245 "cPickle.c"
        var $73=$i; //@line 1244 "cPickle.c"
        var $74=($73) + 1; //@line 1244 "cPickle.c"
        $i=$74; //@line 1244 "cPickle.c"
        var $75=($74) <= 4; //@line 1244 "cPickle.c"
        if ($75) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1244 "cPickle.c"
      case 16: // $bb17
        $len=5; //@line 1246 "cPickle.c"
        __label__ = 17; break; //@line 1246 "cPickle.c"
      case 17: // $bb18
        var $76=$self_addr; //@line 1251 "cPickle.c"
        var $77=$76+48; //@line 1251 "cPickle.c"
        var $78=HEAP[$77]; //@line 1251 "cPickle.c"
        var $79=$self_addr; //@line 1251 "cPickle.c"
        var $c_str19=$c_str; //@line 1251 "cPickle.c"
        var $80=$len; //@line 1251 "cPickle.c"
        var $81=FUNCTION_TABLE[$78]($79, $c_str19, $80); //@line 1251 "cPickle.c"
        var $82=($81) < 0; //@line 1251 "cPickle.c"
        if ($82) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1251 "cPickle.c"
      case 18: // $bb20
        $0=-1; //@line 1252 "cPickle.c"
        __label__ = 37; break; //@line 1252 "cPickle.c"
      case 19: // $bb21
        var $83=$size; //@line 1254 "cPickle.c"
        var $84=($83) <= 128; //@line 1254 "cPickle.c"
        if ($84) { __label__ = 27; break; } else { __label__ = 20; break; } //@line 1254 "cPickle.c"
      case 20: // $bb22
        var $85=$self_addr; //@line 1254 "cPickle.c"
        var $86=$85+16; //@line 1254 "cPickle.c"
        var $87=HEAP[$86]; //@line 1254 "cPickle.c"
        var $88=$87+4; //@line 1254 "cPickle.c"
        var $89=HEAP[$88]; //@line 1254 "cPickle.c"
        var $90=($89)!=(_PdataType); //@line 1254 "cPickle.c"
        if ($90) { __label__ = 27; break; } else { __label__ = 21; break; } //@line 1254 "cPickle.c"
      case 21: // $bb23
        var $91=$self_addr; //@line 1255 "cPickle.c"
        var $92=_write_other($91, 0, 0); //@line 1255 "cPickle.c"
        var $93=($92) < 0; //@line 1255 "cPickle.c"
        if ($93) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1255 "cPickle.c"
      case 22: // $bb24
        $0=-1; //@line 1255 "cPickle.c"
        __label__ = 37; break; //@line 1255 "cPickle.c"
      case 23: // $bb25
        var $94=$self_addr; //@line 1256 "cPickle.c"
        var $95=$94+16; //@line 1256 "cPickle.c"
        var $96=HEAP[$95]; //@line 1256 "cPickle.c"
        var $97=$96; //@line 1256 "cPickle.c"
        var $98=$97+8; //@line 1256 "cPickle.c"
        var $99=HEAP[$98]; //@line 1256 "cPickle.c"
        var $100=$self_addr; //@line 1256 "cPickle.c"
        var $101=$100+16; //@line 1256 "cPickle.c"
        var $102=HEAP[$101]; //@line 1256 "cPickle.c"
        var $103=$102; //@line 1256 "cPickle.c"
        var $104=$103+12; //@line 1256 "cPickle.c"
        var $105=HEAP[$104]; //@line 1256 "cPickle.c"
        var $106=($99)==($105); //@line 1256 "cPickle.c"
        if ($106) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 1256 "cPickle.c"
      case 24: // $bb26
        var $107=$self_addr; //@line 1256 "cPickle.c"
        var $108=$107+16; //@line 1256 "cPickle.c"
        var $109=HEAP[$108]; //@line 1256 "cPickle.c"
        var $110=$109; //@line 1256 "cPickle.c"
        var $111=_Pdata_grow($110); //@line 1256 "cPickle.c"
        var $112=($111) < 0; //@line 1256 "cPickle.c"
        if ($112) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1256 "cPickle.c"
      case 25: // $bb27
        $0=-1; //@line 1256 "cPickle.c"
        __label__ = 37; break; //@line 1256 "cPickle.c"
      case 26: // $bb28
        var $113=$args_addr; //@line 1256 "cPickle.c"
        var $114=$113; //@line 1256 "cPickle.c"
        var $115=HEAP[$114]; //@line 1256 "cPickle.c"
        var $116=($115) + 1; //@line 1256 "cPickle.c"
        var $117=$args_addr; //@line 1256 "cPickle.c"
        var $118=$117; //@line 1256 "cPickle.c"
        HEAP[$118]=$116; //@line 1256 "cPickle.c"
        var $119=$self_addr; //@line 1256 "cPickle.c"
        var $120=$119+16; //@line 1256 "cPickle.c"
        var $121=HEAP[$120]; //@line 1256 "cPickle.c"
        var $122=$121; //@line 1256 "cPickle.c"
        var $123=$122+16; //@line 1256 "cPickle.c"
        var $124=HEAP[$123]; //@line 1256 "cPickle.c"
        var $125=$self_addr; //@line 1256 "cPickle.c"
        var $126=$125+16; //@line 1256 "cPickle.c"
        var $127=HEAP[$126]; //@line 1256 "cPickle.c"
        var $128=$127; //@line 1256 "cPickle.c"
        var $129=$128+8; //@line 1256 "cPickle.c"
        var $130=HEAP[$129]; //@line 1256 "cPickle.c"
        var $131=$124+4*$130; //@line 1256 "cPickle.c"
        var $132=$args_addr; //@line 1256 "cPickle.c"
        HEAP[$131]=$132; //@line 1256 "cPickle.c"
        var $133=($130) + 1; //@line 1256 "cPickle.c"
        var $134=$128+8; //@line 1256 "cPickle.c"
        HEAP[$134]=$133; //@line 1256 "cPickle.c"
        __label__ = 29; break; //@line 1256 "cPickle.c"
      case 27: // $bb29
        var $135=$self_addr; //@line 1259 "cPickle.c"
        var $136=$135+48; //@line 1259 "cPickle.c"
        var $137=HEAP[$136]; //@line 1259 "cPickle.c"
        var $138=$args_addr; //@line 1259 "cPickle.c"
        var $139=$138; //@line 1259 "cPickle.c"
        var $140=$139+20; //@line 1259 "cPickle.c"
        var $141=$140; //@line 1259 "cPickle.c"
        var $142=$self_addr; //@line 1259 "cPickle.c"
        var $143=$size; //@line 1259 "cPickle.c"
        var $144=FUNCTION_TABLE[$137]($142, $141, $143); //@line 1259 "cPickle.c"
        var $145=($144) < 0; //@line 1259 "cPickle.c"
        if ($145) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1259 "cPickle.c"
      case 28: // $bb30
        $0=-1; //@line 1263 "cPickle.c"
        __label__ = 37; break; //@line 1263 "cPickle.c"
      case 29: // $bb31
        var $146=$doput_addr; //@line 1267 "cPickle.c"
        var $147=($146)!=0; //@line 1267 "cPickle.c"
        if ($147) { __label__ = 30; break; } else { __label__ = 32; break; } //@line 1267 "cPickle.c"
      case 30: // $bb32
        var $148=$self_addr; //@line 1268 "cPickle.c"
        var $149=$args_addr; //@line 1268 "cPickle.c"
        var $150=_put($148, $149); //@line 1268 "cPickle.c"
        var $151=($150) < 0; //@line 1268 "cPickle.c"
        if ($151) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1268 "cPickle.c"
      case 31: // $bb33
        $0=-1; //@line 1269 "cPickle.c"
        __label__ = 37; break; //@line 1269 "cPickle.c"
      case 32: // $bb34
        $0=0; //@line 1271 "cPickle.c"
        __label__ = 37; break; //@line 1271 "cPickle.c"
      case 33: // $err
        var $152=$repr; //@line 1274 "cPickle.c"
        var $153=($152)!=0; //@line 1274 "cPickle.c"
        if ($153) { __label__ = 34; break; } else { __label__ = 36; break; } //@line 1274 "cPickle.c"
      case 34: // $bb35
        var $154=$repr; //@line 1274 "cPickle.c"
        var $155=$154; //@line 1274 "cPickle.c"
        var $156=HEAP[$155]; //@line 1274 "cPickle.c"
        var $157=($156) - 1; //@line 1274 "cPickle.c"
        var $158=$repr; //@line 1274 "cPickle.c"
        var $159=$158; //@line 1274 "cPickle.c"
        HEAP[$159]=$157; //@line 1274 "cPickle.c"
        var $160=$repr; //@line 1274 "cPickle.c"
        var $161=$160; //@line 1274 "cPickle.c"
        var $162=HEAP[$161]; //@line 1274 "cPickle.c"
        var $163=($162)==0; //@line 1274 "cPickle.c"
        if ($163) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 1274 "cPickle.c"
      case 35: // $bb36
        var $164=$repr; //@line 1274 "cPickle.c"
        var $165=$164+4; //@line 1274 "cPickle.c"
        var $166=HEAP[$165]; //@line 1274 "cPickle.c"
        var $167=$166+24; //@line 1274 "cPickle.c"
        var $168=HEAP[$167]; //@line 1274 "cPickle.c"
        var $169=$repr; //@line 1274 "cPickle.c"
        FUNCTION_TABLE[$168]($169); //@line 1274 "cPickle.c"
        __label__ = 36; break; //@line 1274 "cPickle.c"
      case 36: // $bb37
        $0=-1; //@line 1275 "cPickle.c"
        __label__ = 37; break; //@line 1275 "cPickle.c"
      case 37: // $bb38
        var $170=$0; //@line 1208 "cPickle.c"
        $retval=$170; //@line 1208 "cPickle.c"
        var $retval39=$retval; //@line 1208 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval39; //@line 1208 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _modified_EncodeRawUnicodeEscape($s, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr;
        var $size_addr;
        var $retval;
        var $0;
        var $repr=__stackBase__;
        var $p;
        var $q;
        var $expandsize;
        var $ch;
        var $ch2;
        var $ucs;
        $s_addr=$s;
        $size_addr=$size;
        $expandsize=6; //@line 1293 "cPickle.c"
        var $1=$expandsize; //@line 1296 "cPickle.c"
        var $2=((2147483647/($1))|0); //@line 1296 "cPickle.c"
        var $3=$size_addr; //@line 1296 "cPickle.c"
        var $4=($2) < ($3); //@line 1296 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1296 "cPickle.c"
      case 1: // $bb
        var $5=_PyErr_NoMemory(); //@line 1297 "cPickle.c"
        $0=$5; //@line 1297 "cPickle.c"
        __label__ = 16; break; //@line 1297 "cPickle.c"
      case 2: // $bb1
        var $6=$expandsize; //@line 1299 "cPickle.c"
        var $7=$size_addr; //@line 1299 "cPickle.c"
        var $8=($7) * ($6); //@line 1299 "cPickle.c"
        var $9=_PyString_FromStringAndSize(0, $8); //@line 1299 "cPickle.c"
        HEAP[$repr]=$9; //@line 1299 "cPickle.c"
        var $10=HEAP[$repr]; //@line 1300 "cPickle.c"
        var $11=($10)==0; //@line 1300 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1300 "cPickle.c"
      case 3: // $bb2
        $0=0; //@line 1301 "cPickle.c"
        __label__ = 16; break; //@line 1301 "cPickle.c"
      case 4: // $bb3
        var $12=$size_addr; //@line 1302 "cPickle.c"
        var $13=($12)==0; //@line 1302 "cPickle.c"
        var $14=HEAP[$repr]; //@line 1303 "cPickle.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1302 "cPickle.c"
      case 5: // $bb4
        $0=$14; //@line 1303 "cPickle.c"
        __label__ = 16; break; //@line 1303 "cPickle.c"
      case 6: // $bb5
        var $15=$14; //@line 1305 "cPickle.c"
        var $16=$15+20; //@line 1305 "cPickle.c"
        var $17=$16; //@line 1305 "cPickle.c"
        $q=$17; //@line 1305 "cPickle.c"
        var $18=$q; //@line 1305 "cPickle.c"
        $p=$18; //@line 1305 "cPickle.c"
        var $19=$size_addr; //@line 1306 "cPickle.c"
        var $20=($19) > 0; //@line 1306 "cPickle.c"
        var $21=$size_addr; //@line 1306 "cPickle.c"
        var $22=($21) - 1; //@line 1306 "cPickle.c"
        $size_addr=$22; //@line 1306 "cPickle.c"
        if ($20) { __label__ = 7; break; } else { __label__ = 15; break; } //@line 1306 "cPickle.c"
      case 7: // $bb6
        var $23=$s_addr; //@line 1307 "cPickle.c"
        var $24=HEAP[$23]; //@line 1307 "cPickle.c"
        $ch=$24; //@line 1307 "cPickle.c"
        var $25=$s_addr; //@line 1307 "cPickle.c"
        var $26=$25+2; //@line 1307 "cPickle.c"
        $s_addr=$26; //@line 1307 "cPickle.c"
        var $27=$ch; //@line 1325 "cPickle.c"
        var $28=($27) > 55295; //@line 1325 "cPickle.c"
        var $29=$ch; //@line 1325 "cPickle.c"
        var $30=($29) <= 56319; //@line 1325 "cPickle.c"
        var $or_cond=($28) & ($30);
        if ($or_cond) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 1325 "cPickle.c"
      case 8: // $bb8
        var $31=$s_addr; //@line 1329 "cPickle.c"
        var $32=HEAP[$31]; //@line 1329 "cPickle.c"
        $ch2=$32; //@line 1329 "cPickle.c"
        var $33=$s_addr; //@line 1329 "cPickle.c"
        var $34=$33+2; //@line 1329 "cPickle.c"
        $s_addr=$34; //@line 1329 "cPickle.c"
        var $35=$size_addr; //@line 1330 "cPickle.c"
        var $36=($35) - 1; //@line 1330 "cPickle.c"
        $size_addr=$36; //@line 1330 "cPickle.c"
        var $37=$ch2; //@line 1331 "cPickle.c"
        var $38=($37) > 56319; //@line 1331 "cPickle.c"
        var $39=$ch2; //@line 1331 "cPickle.c"
        var $40=($39) <= 57343; //@line 1331 "cPickle.c"
        var $or_cond3=($38) & ($40);
        if ($or_cond3) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 1331 "cPickle.c"
      case 9: // $bb10
        var $41=$ch; //@line 1332 "cPickle.c"
        var $42=($41); //@line 1332 "cPickle.c"
        var $43=($42) & 1023; //@line 1332 "cPickle.c"
        var $44=($43) << 10; //@line 1332 "cPickle.c"
        var $45=$ch2; //@line 1332 "cPickle.c"
        var $46=($45); //@line 1332 "cPickle.c"
        var $47=($46) & 1023; //@line 1332 "cPickle.c"
        var $48=($44) | ($47); //@line 1332 "cPickle.c"
        var $49=($48) + 65536; //@line 1332 "cPickle.c"
        $ucs=$49; //@line 1332 "cPickle.c"
        var $50=$p; //@line 1333 "cPickle.c"
        HEAP[$50]=92; //@line 1333 "cPickle.c"
        var $51=$p; //@line 1333 "cPickle.c"
        var $52=$51+1; //@line 1333 "cPickle.c"
        $p=$52; //@line 1333 "cPickle.c"
        var $53=$p; //@line 1334 "cPickle.c"
        HEAP[$53]=85; //@line 1334 "cPickle.c"
        var $54=$p; //@line 1334 "cPickle.c"
        var $55=$54+1; //@line 1334 "cPickle.c"
        $p=$55; //@line 1334 "cPickle.c"
        var $56=$ucs; //@line 1335 "cPickle.c"
        var $57=($56) >>> 28; //@line 1335 "cPickle.c"
        var $58=($57) & 15; //@line 1335 "cPickle.c"
        var $59=__str13+$58; //@line 1335 "cPickle.c"
        var $60=HEAP[$59]; //@line 1335 "cPickle.c"
        var $61=$p; //@line 1335 "cPickle.c"
        HEAP[$61]=$60; //@line 1335 "cPickle.c"
        var $62=$p; //@line 1335 "cPickle.c"
        var $63=$62+1; //@line 1335 "cPickle.c"
        $p=$63; //@line 1335 "cPickle.c"
        var $64=$ucs; //@line 1336 "cPickle.c"
        var $65=($64) >>> 24; //@line 1336 "cPickle.c"
        var $66=($65) & 15; //@line 1336 "cPickle.c"
        var $67=__str13+$66; //@line 1336 "cPickle.c"
        var $68=HEAP[$67]; //@line 1336 "cPickle.c"
        var $69=$p; //@line 1336 "cPickle.c"
        HEAP[$69]=$68; //@line 1336 "cPickle.c"
        var $70=$p; //@line 1336 "cPickle.c"
        var $71=$70+1; //@line 1336 "cPickle.c"
        $p=$71; //@line 1336 "cPickle.c"
        var $72=$ucs; //@line 1337 "cPickle.c"
        var $73=($72) >>> 20; //@line 1337 "cPickle.c"
        var $74=($73) & 15; //@line 1337 "cPickle.c"
        var $75=__str13+$74; //@line 1337 "cPickle.c"
        var $76=HEAP[$75]; //@line 1337 "cPickle.c"
        var $77=$p; //@line 1337 "cPickle.c"
        HEAP[$77]=$76; //@line 1337 "cPickle.c"
        var $78=$p; //@line 1337 "cPickle.c"
        var $79=$78+1; //@line 1337 "cPickle.c"
        $p=$79; //@line 1337 "cPickle.c"
        var $80=$ucs; //@line 1338 "cPickle.c"
        var $81=($80) >>> 16; //@line 1338 "cPickle.c"
        var $82=($81) & 15; //@line 1338 "cPickle.c"
        var $83=__str13+$82; //@line 1338 "cPickle.c"
        var $84=HEAP[$83]; //@line 1338 "cPickle.c"
        var $85=$p; //@line 1338 "cPickle.c"
        HEAP[$85]=$84; //@line 1338 "cPickle.c"
        var $86=$p; //@line 1338 "cPickle.c"
        var $87=$86+1; //@line 1338 "cPickle.c"
        $p=$87; //@line 1338 "cPickle.c"
        var $88=$ucs; //@line 1339 "cPickle.c"
        var $89=($88) >>> 12; //@line 1339 "cPickle.c"
        var $90=($89) & 15; //@line 1339 "cPickle.c"
        var $91=__str13+$90; //@line 1339 "cPickle.c"
        var $92=HEAP[$91]; //@line 1339 "cPickle.c"
        var $93=$p; //@line 1339 "cPickle.c"
        HEAP[$93]=$92; //@line 1339 "cPickle.c"
        var $94=$p; //@line 1339 "cPickle.c"
        var $95=$94+1; //@line 1339 "cPickle.c"
        $p=$95; //@line 1339 "cPickle.c"
        var $96=$ucs; //@line 1340 "cPickle.c"
        var $97=($96) >>> 8; //@line 1340 "cPickle.c"
        var $98=($97) & 15; //@line 1340 "cPickle.c"
        var $99=__str13+$98; //@line 1340 "cPickle.c"
        var $100=HEAP[$99]; //@line 1340 "cPickle.c"
        var $101=$p; //@line 1340 "cPickle.c"
        HEAP[$101]=$100; //@line 1340 "cPickle.c"
        var $102=$p; //@line 1340 "cPickle.c"
        var $103=$102+1; //@line 1340 "cPickle.c"
        $p=$103; //@line 1340 "cPickle.c"
        var $104=$ucs; //@line 1341 "cPickle.c"
        var $105=($104) >>> 4; //@line 1341 "cPickle.c"
        var $106=($105) & 15; //@line 1341 "cPickle.c"
        var $107=__str13+$106; //@line 1341 "cPickle.c"
        var $108=HEAP[$107]; //@line 1341 "cPickle.c"
        var $109=$p; //@line 1341 "cPickle.c"
        HEAP[$109]=$108; //@line 1341 "cPickle.c"
        var $110=$p; //@line 1341 "cPickle.c"
        var $111=$110+1; //@line 1341 "cPickle.c"
        $p=$111; //@line 1341 "cPickle.c"
        var $112=$ucs; //@line 1342 "cPickle.c"
        var $113=($112) & 15; //@line 1342 "cPickle.c"
        var $114=__str13+$113; //@line 1342 "cPickle.c"
        var $115=HEAP[$114]; //@line 1342 "cPickle.c"
        var $116=$p; //@line 1342 "cPickle.c"
        HEAP[$116]=$115; //@line 1342 "cPickle.c"
        var $117=$p; //@line 1342 "cPickle.c"
        var $118=$117+1; //@line 1342 "cPickle.c"
        $p=$118; //@line 1342 "cPickle.c"
        __label__ = 10; break; //@line 1342 "cPickle.c"
      case 10: // $bb17_backedge
        var $119=$size_addr; //@line 1306 "cPickle.c"
        var $120=($119) > 0; //@line 1306 "cPickle.c"
        var $121=($120); //@line 1306 "cPickle.c"
        var $122=$size_addr; //@line 1306 "cPickle.c"
        var $123=($122) - 1; //@line 1306 "cPickle.c"
        $size_addr=$123; //@line 1306 "cPickle.c"
        var $toBool=($121)!=0; //@line 1306 "cPickle.c"
        if ($toBool) { __label__ = 7; break; } else { __label__ = 15; break; } //@line 1306 "cPickle.c"
      case 11: // $bb11
        var $124=$s_addr; //@line 1346 "cPickle.c"
        var $125=$124+-2; //@line 1346 "cPickle.c"
        $s_addr=$125; //@line 1346 "cPickle.c"
        var $126=$size_addr; //@line 1347 "cPickle.c"
        var $127=($126) + 1; //@line 1347 "cPickle.c"
        $size_addr=$127; //@line 1347 "cPickle.c"
        __label__ = 12; break; //@line 1347 "cPickle.c"
      case 12: // $bb12
        var $128=$ch; //@line 1351 "cPickle.c"
        var $129=($128) > 255; //@line 1351 "cPickle.c"
        var $130=$ch; //@line 1351 "cPickle.c"
        var $131=($130)==92; //@line 1351 "cPickle.c"
        var $or_cond5=($129) | ($131);
        var $132=$ch; //@line 1351 "cPickle.c"
        var $133=($132)==10; //@line 1351 "cPickle.c"
        var $or_cond7=($or_cond5) | ($133);
        if ($or_cond7) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1351 "cPickle.c"
      case 13: // $bb15
        var $134=$p; //@line 1352 "cPickle.c"
        HEAP[$134]=92; //@line 1352 "cPickle.c"
        var $135=$p; //@line 1352 "cPickle.c"
        var $136=$135+1; //@line 1352 "cPickle.c"
        $p=$136; //@line 1352 "cPickle.c"
        var $137=$p; //@line 1353 "cPickle.c"
        HEAP[$137]=117; //@line 1353 "cPickle.c"
        var $138=$p; //@line 1353 "cPickle.c"
        var $139=$138+1; //@line 1353 "cPickle.c"
        $p=$139; //@line 1353 "cPickle.c"
        var $140=$ch; //@line 1354 "cPickle.c"
        var $141=($140) >>> 12; //@line 1354 "cPickle.c"
        var $142=($141); //@line 1354 "cPickle.c"
        var $143=($142) & 15; //@line 1354 "cPickle.c"
        var $144=__str13+$143; //@line 1354 "cPickle.c"
        var $145=HEAP[$144]; //@line 1354 "cPickle.c"
        var $146=$p; //@line 1354 "cPickle.c"
        HEAP[$146]=$145; //@line 1354 "cPickle.c"
        var $147=$p; //@line 1354 "cPickle.c"
        var $148=$147+1; //@line 1354 "cPickle.c"
        $p=$148; //@line 1354 "cPickle.c"
        var $149=$ch; //@line 1355 "cPickle.c"
        var $150=($149) >>> 8; //@line 1355 "cPickle.c"
        var $151=($150); //@line 1355 "cPickle.c"
        var $152=($151) & 15; //@line 1355 "cPickle.c"
        var $153=__str13+$152; //@line 1355 "cPickle.c"
        var $154=HEAP[$153]; //@line 1355 "cPickle.c"
        var $155=$p; //@line 1355 "cPickle.c"
        HEAP[$155]=$154; //@line 1355 "cPickle.c"
        var $156=$p; //@line 1355 "cPickle.c"
        var $157=$156+1; //@line 1355 "cPickle.c"
        $p=$157; //@line 1355 "cPickle.c"
        var $158=$ch; //@line 1356 "cPickle.c"
        var $159=($158) >>> 4; //@line 1356 "cPickle.c"
        var $160=($159); //@line 1356 "cPickle.c"
        var $161=($160) & 15; //@line 1356 "cPickle.c"
        var $162=__str13+$161; //@line 1356 "cPickle.c"
        var $163=HEAP[$162]; //@line 1356 "cPickle.c"
        var $164=$p; //@line 1356 "cPickle.c"
        HEAP[$164]=$163; //@line 1356 "cPickle.c"
        var $165=$p; //@line 1356 "cPickle.c"
        var $166=$165+1; //@line 1356 "cPickle.c"
        $p=$166; //@line 1356 "cPickle.c"
        var $167=$ch; //@line 1357 "cPickle.c"
        var $168=($167); //@line 1357 "cPickle.c"
        var $169=($168) & 15; //@line 1357 "cPickle.c"
        var $170=__str13+$169; //@line 1357 "cPickle.c"
        var $171=HEAP[$170]; //@line 1357 "cPickle.c"
        var $172=$p; //@line 1357 "cPickle.c"
        HEAP[$172]=$171; //@line 1357 "cPickle.c"
        var $173=$p; //@line 1357 "cPickle.c"
        var $174=$173+1; //@line 1357 "cPickle.c"
        $p=$174; //@line 1357 "cPickle.c"
        __label__ = 10; break; //@line 1357 "cPickle.c"
      case 14: // $bb16
        var $175=$ch; //@line 1361 "cPickle.c"
        var $176=((($175)) & 255); //@line 1361 "cPickle.c"
        var $177=$p; //@line 1361 "cPickle.c"
        HEAP[$177]=$176; //@line 1361 "cPickle.c"
        var $178=$p; //@line 1361 "cPickle.c"
        var $179=$178+1; //@line 1361 "cPickle.c"
        $p=$179; //@line 1361 "cPickle.c"
        __label__ = 10; break; //@line 1361 "cPickle.c"
      case 15: // $bb18
        var $180=$p; //@line 1363 "cPickle.c"
        HEAP[$180]=0; //@line 1363 "cPickle.c"
        var $181=$p; //@line 1364 "cPickle.c"
        var $182=($181); //@line 1364 "cPickle.c"
        var $183=$q; //@line 1364 "cPickle.c"
        var $184=($183); //@line 1364 "cPickle.c"
        var $185=($182) - ($184); //@line 1364 "cPickle.c"
        var $186=__PyString_Resize($repr, $185); //@line 1364 "cPickle.c"
        var $187=HEAP[$repr]; //@line 1365 "cPickle.c"
        $0=$187; //@line 1365 "cPickle.c"
        __label__ = 16; break; //@line 1365 "cPickle.c"
      case 16: // $bb19
        var $188=$0; //@line 1297 "cPickle.c"
        $retval=$188; //@line 1297 "cPickle.c"
        var $retval20=$retval; //@line 1297 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval20; //@line 1297 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_unicode($self, $args, $doput) {
    var __stackBase__  = STACKTOP; STACKTOP += 5; _memset(__stackBase__, 0, 5);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $doput_addr;
        var $retval;
        var $0;
        var $size;
        var $len;
        var $repr;
        var $repr_str;
        var $i;
        var $c_str=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        $doput_addr=$doput;
        $repr=0; //@line 1372 "cPickle.c"
        var $1=$args_addr; //@line 1374 "cPickle.c"
        var $2=$1+4; //@line 1374 "cPickle.c"
        var $3=HEAP[$2]; //@line 1374 "cPickle.c"
        var $4=$3+84; //@line 1374 "cPickle.c"
        var $5=HEAP[$4]; //@line 1374 "cPickle.c"
        var $6=($5) & 268435456; //@line 1374 "cPickle.c"
        var $7=($6)==0; //@line 1374 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1374 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 1375 "cPickle.c"
        __label__ = 36; break; //@line 1375 "cPickle.c"
      case 2: // $bb1
        var $8=$self_addr; //@line 1377 "cPickle.c"
        var $9=$8+40; //@line 1377 "cPickle.c"
        var $10=HEAP[$9]; //@line 1377 "cPickle.c"
        var $11=($10)==0; //@line 1377 "cPickle.c"
        var $12=$args_addr; //@line 1381 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 1377 "cPickle.c"
      case 3: // $bb2
        var $13=$12; //@line 1381 "cPickle.c"
        var $14=$13+8; //@line 1381 "cPickle.c"
        var $15=HEAP[$14]; //@line 1381 "cPickle.c"
        var $16=$args_addr; //@line 1381 "cPickle.c"
        var $17=$16; //@line 1381 "cPickle.c"
        var $18=$17+12; //@line 1381 "cPickle.c"
        var $19=HEAP[$18]; //@line 1381 "cPickle.c"
        var $20=_modified_EncodeRawUnicodeEscape($19, $15); //@line 1381 "cPickle.c"
        $repr=$20; //@line 1381 "cPickle.c"
        var $21=$repr; //@line 1383 "cPickle.c"
        var $22=($21)==0; //@line 1383 "cPickle.c"
        if ($22) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1383 "cPickle.c"
      case 4: // $bb3
        $0=-1; //@line 1384 "cPickle.c"
        __label__ = 36; break; //@line 1384 "cPickle.c"
      case 5: // $bb4
        var $23=$repr; //@line 1386 "cPickle.c"
        var $24=_PyString_Size($23); //@line 1386 "cPickle.c"
        $len=$24; //@line 1386 "cPickle.c"
        var $25=$len; //@line 1386 "cPickle.c"
        var $26=($25) < 0; //@line 1386 "cPickle.c"
        if ($26) { __label__ = 32; break; } else { __label__ = 6; break; } //@line 1386 "cPickle.c"
      case 6: // $bb5
        var $27=$repr; //@line 1388 "cPickle.c"
        var $28=$27; //@line 1388 "cPickle.c"
        var $29=$28+20; //@line 1388 "cPickle.c"
        var $30=$29; //@line 1388 "cPickle.c"
        $repr_str=$30; //@line 1388 "cPickle.c"
        var $31=$self_addr; //@line 1390 "cPickle.c"
        var $32=$31+48; //@line 1390 "cPickle.c"
        var $33=HEAP[$32]; //@line 1390 "cPickle.c"
        var $34=$self_addr; //@line 1390 "cPickle.c"
        var $35=FUNCTION_TABLE[$33]($34, _string_9895, 1); //@line 1390 "cPickle.c"
        var $36=($35) < 0; //@line 1390 "cPickle.c"
        if ($36) { __label__ = 32; break; } else { __label__ = 7; break; } //@line 1390 "cPickle.c"
      case 7: // $bb6
        var $37=$self_addr; //@line 1393 "cPickle.c"
        var $38=$37+48; //@line 1393 "cPickle.c"
        var $39=HEAP[$38]; //@line 1393 "cPickle.c"
        var $40=$self_addr; //@line 1393 "cPickle.c"
        var $41=$repr_str; //@line 1393 "cPickle.c"
        var $42=$len; //@line 1393 "cPickle.c"
        var $43=FUNCTION_TABLE[$39]($40, $41, $42); //@line 1393 "cPickle.c"
        var $44=($43) < 0; //@line 1393 "cPickle.c"
        if ($44) { __label__ = 32; break; } else { __label__ = 8; break; } //@line 1393 "cPickle.c"
      case 8: // $bb7
        var $45=$self_addr; //@line 1396 "cPickle.c"
        var $46=$45+48; //@line 1396 "cPickle.c"
        var $47=HEAP[$46]; //@line 1396 "cPickle.c"
        var $48=$self_addr; //@line 1396 "cPickle.c"
        var $49=FUNCTION_TABLE[$47]($48, __str12, 1); //@line 1396 "cPickle.c"
        var $50=($49) < 0; //@line 1396 "cPickle.c"
        if ($50) { __label__ = 32; break; } else { __label__ = 9; break; } //@line 1396 "cPickle.c"
      case 9: // $bb8
        var $51=$repr; //@line 1399 "cPickle.c"
        var $52=($51)!=0; //@line 1399 "cPickle.c"
        if ($52) { __label__ = 10; break; } else { __label__ = 28; break; } //@line 1399 "cPickle.c"
      case 10: // $bb9
        var $53=$repr; //@line 1399 "cPickle.c"
        var $54=$53; //@line 1399 "cPickle.c"
        var $55=HEAP[$54]; //@line 1399 "cPickle.c"
        var $56=($55) - 1; //@line 1399 "cPickle.c"
        var $57=$repr; //@line 1399 "cPickle.c"
        var $58=$57; //@line 1399 "cPickle.c"
        HEAP[$58]=$56; //@line 1399 "cPickle.c"
        var $59=$repr; //@line 1399 "cPickle.c"
        var $60=$59; //@line 1399 "cPickle.c"
        var $61=HEAP[$60]; //@line 1399 "cPickle.c"
        var $62=($61)==0; //@line 1399 "cPickle.c"
        if ($62) { __label__ = 11; break; } else { __label__ = 28; break; } //@line 1399 "cPickle.c"
      case 11: // $bb10
        var $63=$repr; //@line 1399 "cPickle.c"
        var $64=$63+4; //@line 1399 "cPickle.c"
        var $65=HEAP[$64]; //@line 1399 "cPickle.c"
        var $66=$65+24; //@line 1399 "cPickle.c"
        var $67=HEAP[$66]; //@line 1399 "cPickle.c"
        var $68=$repr; //@line 1399 "cPickle.c"
        FUNCTION_TABLE[$67]($68); //@line 1399 "cPickle.c"
        __label__ = 28; break; //@line 1399 "cPickle.c"
      case 12: // $bb12
        var $69=_PyUnicodeUCS2_AsUTF8String($12); //@line 1405 "cPickle.c"
        $repr=$69; //@line 1405 "cPickle.c"
        var $70=$repr; //@line 1405 "cPickle.c"
        var $71=($70)==0; //@line 1405 "cPickle.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1405 "cPickle.c"
      case 13: // $bb13
        $0=-1; //@line 1406 "cPickle.c"
        __label__ = 36; break; //@line 1406 "cPickle.c"
      case 14: // $bb14
        var $72=$repr; //@line 1408 "cPickle.c"
        var $73=_PyString_Size($72); //@line 1408 "cPickle.c"
        $size=$73; //@line 1408 "cPickle.c"
        var $74=$size; //@line 1408 "cPickle.c"
        var $75=($74) < 0; //@line 1408 "cPickle.c"
        if ($75) { __label__ = 32; break; } else { __label__ = 15; break; } //@line 1408 "cPickle.c"
      case 15: // $bb15
        var $76=$c_str; //@line 1413 "cPickle.c"
        HEAP[$76]=88; //@line 1413 "cPickle.c"
        $i=1; //@line 1414 "cPickle.c"
        __label__ = 16; break;
      case 16: // $bb16
        var $77=$i; //@line 1415 "cPickle.c"
        var $78=$i; //@line 1415 "cPickle.c"
        var $79=($78) * 8; //@line 1415 "cPickle.c"
        var $80=($79) + -8; //@line 1415 "cPickle.c"
        var $81=$size; //@line 1415 "cPickle.c"
        var $82=($81) >> ($80); //@line 1415 "cPickle.c"
        var $83=((($82)) & 255); //@line 1415 "cPickle.c"
        var $84=$c_str+$77; //@line 1415 "cPickle.c"
        HEAP[$84]=$83; //@line 1415 "cPickle.c"
        var $85=$i; //@line 1414 "cPickle.c"
        var $86=($85) + 1; //@line 1414 "cPickle.c"
        $i=$86; //@line 1414 "cPickle.c"
        var $87=($86) <= 4; //@line 1414 "cPickle.c"
        if ($87) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1414 "cPickle.c"
      case 17: // $bb18
        $len=5; //@line 1416 "cPickle.c"
        var $88=$self_addr; //@line 1418 "cPickle.c"
        var $89=$88+48; //@line 1418 "cPickle.c"
        var $90=HEAP[$89]; //@line 1418 "cPickle.c"
        var $91=$self_addr; //@line 1418 "cPickle.c"
        var $c_str19=$c_str; //@line 1418 "cPickle.c"
        var $92=$len; //@line 1418 "cPickle.c"
        var $93=FUNCTION_TABLE[$90]($91, $c_str19, $92); //@line 1418 "cPickle.c"
        var $94=($93) < 0; //@line 1418 "cPickle.c"
        if ($94) { __label__ = 32; break; } else { __label__ = 18; break; } //@line 1418 "cPickle.c"
      case 18: // $bb20
        var $95=$size; //@line 1421 "cPickle.c"
        var $96=($95) <= 128; //@line 1421 "cPickle.c"
        if ($96) { __label__ = 25; break; } else { __label__ = 19; break; } //@line 1421 "cPickle.c"
      case 19: // $bb21
        var $97=$self_addr; //@line 1421 "cPickle.c"
        var $98=$97+16; //@line 1421 "cPickle.c"
        var $99=HEAP[$98]; //@line 1421 "cPickle.c"
        var $100=$99+4; //@line 1421 "cPickle.c"
        var $101=HEAP[$100]; //@line 1421 "cPickle.c"
        var $102=($101)!=(_PdataType); //@line 1421 "cPickle.c"
        if ($102) { __label__ = 25; break; } else { __label__ = 20; break; } //@line 1421 "cPickle.c"
      case 20: // $bb22
        var $103=$self_addr; //@line 1422 "cPickle.c"
        var $104=_write_other($103, 0, 0); //@line 1422 "cPickle.c"
        var $105=($104) < 0; //@line 1422 "cPickle.c"
        if ($105) { __label__ = 32; break; } else { __label__ = 21; break; } //@line 1422 "cPickle.c"
      case 21: // $bb23
        var $106=$self_addr; //@line 1424 "cPickle.c"
        var $107=$106+16; //@line 1424 "cPickle.c"
        var $108=HEAP[$107]; //@line 1424 "cPickle.c"
        var $109=$108; //@line 1424 "cPickle.c"
        var $110=$109+8; //@line 1424 "cPickle.c"
        var $111=HEAP[$110]; //@line 1424 "cPickle.c"
        var $112=$self_addr; //@line 1424 "cPickle.c"
        var $113=$112+16; //@line 1424 "cPickle.c"
        var $114=HEAP[$113]; //@line 1424 "cPickle.c"
        var $115=$114; //@line 1424 "cPickle.c"
        var $116=$115+12; //@line 1424 "cPickle.c"
        var $117=HEAP[$116]; //@line 1424 "cPickle.c"
        var $118=($111)==($117); //@line 1424 "cPickle.c"
        if ($118) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 1424 "cPickle.c"
      case 22: // $bb24
        var $119=$self_addr; //@line 1424 "cPickle.c"
        var $120=$119+16; //@line 1424 "cPickle.c"
        var $121=HEAP[$120]; //@line 1424 "cPickle.c"
        var $122=$121; //@line 1424 "cPickle.c"
        var $123=_Pdata_grow($122); //@line 1424 "cPickle.c"
        var $124=($123) < 0; //@line 1424 "cPickle.c"
        if ($124) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1424 "cPickle.c"
      case 23: // $bb25
        $0=-1; //@line 1424 "cPickle.c"
        __label__ = 36; break; //@line 1424 "cPickle.c"
      case 24: // $bb26
        var $125=$repr; //@line 1424 "cPickle.c"
        var $126=$125; //@line 1424 "cPickle.c"
        var $127=HEAP[$126]; //@line 1424 "cPickle.c"
        var $128=($127) + 1; //@line 1424 "cPickle.c"
        var $129=$repr; //@line 1424 "cPickle.c"
        var $130=$129; //@line 1424 "cPickle.c"
        HEAP[$130]=$128; //@line 1424 "cPickle.c"
        var $131=$self_addr; //@line 1424 "cPickle.c"
        var $132=$131+16; //@line 1424 "cPickle.c"
        var $133=HEAP[$132]; //@line 1424 "cPickle.c"
        var $134=$133; //@line 1424 "cPickle.c"
        var $135=$134+16; //@line 1424 "cPickle.c"
        var $136=HEAP[$135]; //@line 1424 "cPickle.c"
        var $137=$self_addr; //@line 1424 "cPickle.c"
        var $138=$137+16; //@line 1424 "cPickle.c"
        var $139=HEAP[$138]; //@line 1424 "cPickle.c"
        var $140=$139; //@line 1424 "cPickle.c"
        var $141=$140+8; //@line 1424 "cPickle.c"
        var $142=HEAP[$141]; //@line 1424 "cPickle.c"
        var $143=$136+4*$142; //@line 1424 "cPickle.c"
        var $144=$repr; //@line 1424 "cPickle.c"
        HEAP[$143]=$144; //@line 1424 "cPickle.c"
        var $145=($142) + 1; //@line 1424 "cPickle.c"
        var $146=$140+8; //@line 1424 "cPickle.c"
        HEAP[$146]=$145; //@line 1424 "cPickle.c"
        __label__ = 26; break; //@line 1424 "cPickle.c"
      case 25: // $bb27
        var $147=$self_addr; //@line 1427 "cPickle.c"
        var $148=$147+48; //@line 1427 "cPickle.c"
        var $149=HEAP[$148]; //@line 1427 "cPickle.c"
        var $150=$repr; //@line 1427 "cPickle.c"
        var $151=$150; //@line 1427 "cPickle.c"
        var $152=$151+20; //@line 1427 "cPickle.c"
        var $153=$152; //@line 1427 "cPickle.c"
        var $154=$self_addr; //@line 1427 "cPickle.c"
        var $155=$size; //@line 1427 "cPickle.c"
        var $156=FUNCTION_TABLE[$149]($154, $153, $155); //@line 1427 "cPickle.c"
        var $157=($156) < 0; //@line 1427 "cPickle.c"
        if ($157) { __label__ = 32; break; } else { __label__ = 26; break; } //@line 1427 "cPickle.c"
      case 26: // $bb28
        var $158=$repr; //@line 1432 "cPickle.c"
        var $159=$158; //@line 1432 "cPickle.c"
        var $160=HEAP[$159]; //@line 1432 "cPickle.c"
        var $161=($160) - 1; //@line 1432 "cPickle.c"
        var $162=$repr; //@line 1432 "cPickle.c"
        var $163=$162; //@line 1432 "cPickle.c"
        HEAP[$163]=$161; //@line 1432 "cPickle.c"
        var $164=$repr; //@line 1432 "cPickle.c"
        var $165=$164; //@line 1432 "cPickle.c"
        var $166=HEAP[$165]; //@line 1432 "cPickle.c"
        var $167=($166)==0; //@line 1432 "cPickle.c"
        if ($167) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1432 "cPickle.c"
      case 27: // $bb29
        var $168=$repr; //@line 1432 "cPickle.c"
        var $169=$168+4; //@line 1432 "cPickle.c"
        var $170=HEAP[$169]; //@line 1432 "cPickle.c"
        var $171=$170+24; //@line 1432 "cPickle.c"
        var $172=HEAP[$171]; //@line 1432 "cPickle.c"
        var $173=$repr; //@line 1432 "cPickle.c"
        FUNCTION_TABLE[$172]($173); //@line 1432 "cPickle.c"
        __label__ = 28; break; //@line 1432 "cPickle.c"
      case 28: // $bb30
        var $174=$doput_addr; //@line 1435 "cPickle.c"
        var $175=($174)!=0; //@line 1435 "cPickle.c"
        if ($175) { __label__ = 29; break; } else { __label__ = 31; break; } //@line 1435 "cPickle.c"
      case 29: // $bb31
        var $176=$self_addr; //@line 1436 "cPickle.c"
        var $177=$args_addr; //@line 1436 "cPickle.c"
        var $178=_put($176, $177); //@line 1436 "cPickle.c"
        var $179=($178) < 0; //@line 1436 "cPickle.c"
        if ($179) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1436 "cPickle.c"
      case 30: // $bb32
        $0=-1; //@line 1437 "cPickle.c"
        __label__ = 36; break; //@line 1437 "cPickle.c"
      case 31: // $bb33
        $0=0; //@line 1439 "cPickle.c"
        __label__ = 36; break; //@line 1439 "cPickle.c"
      case 32: // $err
        var $180=$repr; //@line 1442 "cPickle.c"
        var $181=($180)!=0; //@line 1442 "cPickle.c"
        if ($181) { __label__ = 33; break; } else { __label__ = 35; break; } //@line 1442 "cPickle.c"
      case 33: // $bb34
        var $182=$repr; //@line 1442 "cPickle.c"
        var $183=$182; //@line 1442 "cPickle.c"
        var $184=HEAP[$183]; //@line 1442 "cPickle.c"
        var $185=($184) - 1; //@line 1442 "cPickle.c"
        var $186=$repr; //@line 1442 "cPickle.c"
        var $187=$186; //@line 1442 "cPickle.c"
        HEAP[$187]=$185; //@line 1442 "cPickle.c"
        var $188=$repr; //@line 1442 "cPickle.c"
        var $189=$188; //@line 1442 "cPickle.c"
        var $190=HEAP[$189]; //@line 1442 "cPickle.c"
        var $191=($190)==0; //@line 1442 "cPickle.c"
        if ($191) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1442 "cPickle.c"
      case 34: // $bb35
        var $192=$repr; //@line 1442 "cPickle.c"
        var $193=$192+4; //@line 1442 "cPickle.c"
        var $194=HEAP[$193]; //@line 1442 "cPickle.c"
        var $195=$194+24; //@line 1442 "cPickle.c"
        var $196=HEAP[$195]; //@line 1442 "cPickle.c"
        var $197=$repr; //@line 1442 "cPickle.c"
        FUNCTION_TABLE[$196]($197); //@line 1442 "cPickle.c"
        __label__ = 35; break; //@line 1442 "cPickle.c"
      case 35: // $bb36
        $0=-1; //@line 1443 "cPickle.c"
        __label__ = 36; break; //@line 1443 "cPickle.c"
      case 36: // $bb37
        var $198=$0; //@line 1375 "cPickle.c"
        $retval=$198; //@line 1375 "cPickle.c"
        var $retval38=$retval; //@line 1375 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval38; //@line 1375 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _store_tuple_elements($self, $t, $len) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $t_addr;
        var $len_addr;
        var $retval;
        var $0;
        var $i;
        var $res;
        var $element;
        $self_addr=$self;
        $t_addr=$t;
        $len_addr=$len;
        $res=-1; //@line 1452 "cPickle.c"
        var $1=$t_addr; //@line 1454 "cPickle.c"
        var $2=_PyTuple_Size($1); //@line 1454 "cPickle.c"
        var $3=$len_addr; //@line 1454 "cPickle.c"
        var $4=($2)!=($3); //@line 1454 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1454 "cPickle.c"
      case 1: // $bb
        ___assert_fail(__str14, __str15, 1454, ___PRETTY_FUNCTION___10017); //@line 1454 "cPickle.c"
        throw "Reached an unreachable!" //@line 1454 "cPickle.c"
      case 2: // $bb1
        $i=0; //@line 1456 "cPickle.c"
        __label__ = 6; break; //@line 1456 "cPickle.c"
      case 3: // $bb2
        var $5=$t_addr; //@line 1457 "cPickle.c"
        var $6=$5; //@line 1457 "cPickle.c"
        var $7=$i; //@line 1457 "cPickle.c"
        var $8=$6+12; //@line 1457 "cPickle.c"
        var $9=$8+$7*4; //@line 1457 "cPickle.c"
        var $10=HEAP[$9]; //@line 1457 "cPickle.c"
        $element=$10; //@line 1457 "cPickle.c"
        var $11=$element; //@line 1459 "cPickle.c"
        var $12=($11)==0; //@line 1459 "cPickle.c"
        if ($12) { __label__ = 8; break; } else { __label__ = 4; break; } //@line 1459 "cPickle.c"
      case 4: // $bb3
        var $13=$self_addr; //@line 1461 "cPickle.c"
        var $14=$element; //@line 1461 "cPickle.c"
        var $15=_save($13, $14, 0); //@line 1461 "cPickle.c"
        var $16=($15) < 0; //@line 1461 "cPickle.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 5; break; } //@line 1461 "cPickle.c"
      case 5: // $bb4
        var $17=$i; //@line 1456 "cPickle.c"
        var $18=($17) + 1; //@line 1456 "cPickle.c"
        $i=$18; //@line 1456 "cPickle.c"
        __label__ = 6; break; //@line 1456 "cPickle.c"
      case 6: // $bb5
        var $19=$i; //@line 1456 "cPickle.c"
        var $20=$len_addr; //@line 1456 "cPickle.c"
        var $21=($19) < ($20); //@line 1456 "cPickle.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 1456 "cPickle.c"
      case 7: // $bb6
        $res=0; //@line 1464 "cPickle.c"
        __label__ = 8; break; //@line 1466 "cPickle.c"
      case 8: // $finally
        var $22=$res; //@line 1467 "cPickle.c"
        $0=$22; //@line 1467 "cPickle.c"
        var $23=$0; //@line 1467 "cPickle.c"
        $retval=$23; //@line 1467 "cPickle.c"
        var $retval7=$retval; //@line 1467 "cPickle.c"
        ;
        return $retval7; //@line 1467 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_tuple($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 2; _memset(__stackBase__, 0, 2);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $py_tuple_id;
        var $len;
        var $i;
        var $res;
        var $c_str=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        $py_tuple_id=0; //@line 1479 "cPickle.c"
        $res=-1; //@line 1481 "cPickle.c"
        var $1=$args_addr; //@line 1488 "cPickle.c"
        var $2=_PyTuple_Size($1); //@line 1488 "cPickle.c"
        $len=$2; //@line 1488 "cPickle.c"
        var $3=$len; //@line 1488 "cPickle.c"
        var $4=($3) < 0; //@line 1488 "cPickle.c"
        if ($4) { __label__ = 33; break; } else { __label__ = 1; break; } //@line 1488 "cPickle.c"
      case 1: // $bb
        var $5=$len; //@line 1491 "cPickle.c"
        var $6=($5)==0; //@line 1491 "cPickle.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 7; break; } //@line 1491 "cPickle.c"
      case 2: // $bb1
        var $7=$self_addr; //@line 1494 "cPickle.c"
        var $8=$7+36; //@line 1494 "cPickle.c"
        var $9=HEAP[$8]; //@line 1494 "cPickle.c"
        var $10=($9)!=0; //@line 1494 "cPickle.c"
        var $11=$c_str; //@line 1495 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1494 "cPickle.c"
      case 3: // $bb2
        HEAP[$11]=41; //@line 1495 "cPickle.c"
        $len=1; //@line 1496 "cPickle.c"
        __label__ = 5; break; //@line 1496 "cPickle.c"
      case 4: // $bb3
        HEAP[$11]=40; //@line 1499 "cPickle.c"
        var $12=$c_str+1; //@line 1500 "cPickle.c"
        HEAP[$12]=116; //@line 1500 "cPickle.c"
        $len=2; //@line 1501 "cPickle.c"
        __label__ = 5; break; //@line 1501 "cPickle.c"
      case 5: // $bb4
        var $13=$self_addr; //@line 1503 "cPickle.c"
        var $14=$13+48; //@line 1503 "cPickle.c"
        var $15=HEAP[$14]; //@line 1503 "cPickle.c"
        var $16=$self_addr; //@line 1503 "cPickle.c"
        var $c_str5=$c_str; //@line 1503 "cPickle.c"
        var $17=$len; //@line 1503 "cPickle.c"
        var $18=FUNCTION_TABLE[$15]($16, $c_str5, $17); //@line 1503 "cPickle.c"
        var $19=($18) >= 0; //@line 1503 "cPickle.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 33; break; } //@line 1503 "cPickle.c"
      case 6: // $bb6
        $res=0; //@line 1504 "cPickle.c"
        __label__ = 33; break; //@line 1504 "cPickle.c"
      case 7: // $bb8
        var $20=$args_addr; //@line 1516 "cPickle.c"
        var $21=$20; //@line 1516 "cPickle.c"
        var $22=_PyLong_FromVoidPtr($21); //@line 1516 "cPickle.c"
        $py_tuple_id=$22; //@line 1516 "cPickle.c"
        var $23=$py_tuple_id; //@line 1517 "cPickle.c"
        var $24=($23)==0; //@line 1517 "cPickle.c"
        if ($24) { __label__ = 36; break; } else { __label__ = 8; break; } //@line 1517 "cPickle.c"
      case 8: // $bb9
        var $25=$len; //@line 1520 "cPickle.c"
        var $26=($25) <= 3; //@line 1520 "cPickle.c"
        if ($26) { __label__ = 9; break; } else { __label__ = 19; break; } //@line 1520 "cPickle.c"
      case 9: // $bb10
        var $27=$self_addr; //@line 1520 "cPickle.c"
        var $28=$27+36; //@line 1520 "cPickle.c"
        var $29=HEAP[$28]; //@line 1520 "cPickle.c"
        var $30=($29) > 1; //@line 1520 "cPickle.c"
        if ($30) { __label__ = 10; break; } else { __label__ = 19; break; } //@line 1520 "cPickle.c"
      case 10: // $bb11
        var $31=$self_addr; //@line 1522 "cPickle.c"
        var $32=$args_addr; //@line 1522 "cPickle.c"
        var $33=$len; //@line 1522 "cPickle.c"
        var $34=_store_tuple_elements($31, $32, $33); //@line 1522 "cPickle.c"
        var $35=($34) < 0; //@line 1522 "cPickle.c"
        if ($35) { __label__ = 33; break; } else { __label__ = 11; break; } //@line 1522 "cPickle.c"
      case 11: // $bb12
        var $36=$self_addr; //@line 1524 "cPickle.c"
        var $37=$36+20; //@line 1524 "cPickle.c"
        var $38=HEAP[$37]; //@line 1524 "cPickle.c"
        var $39=$py_tuple_id; //@line 1524 "cPickle.c"
        var $40=_PyDict_GetItem($38, $39); //@line 1524 "cPickle.c"
        var $41=($40)!=0; //@line 1524 "cPickle.c"
        if ($41) { __label__ = 12; break; } else { __label__ = 18; break; } //@line 1524 "cPickle.c"
      case 12: // $bb13
        $i=0; //@line 1526 "cPickle.c"
        __label__ = 15; break; //@line 1526 "cPickle.c"
      case 13: // $bb14
        var $42=$52+48; //@line 1527 "cPickle.c"
        var $43=HEAP[$42]; //@line 1527 "cPickle.c"
        var $44=$self_addr; //@line 1527 "cPickle.c"
        var $45=FUNCTION_TABLE[$43]($44, _pop_10042, 1); //@line 1527 "cPickle.c"
        var $46=($45) < 0; //@line 1527 "cPickle.c"
        if ($46) { __label__ = 33; break; } else { __label__ = 14; break; } //@line 1527 "cPickle.c"
      case 14: // $bb15
        var $47=$i; //@line 1526 "cPickle.c"
        var $48=($47) + 1; //@line 1526 "cPickle.c"
        $i=$48; //@line 1526 "cPickle.c"
        __label__ = 15; break; //@line 1526 "cPickle.c"
      case 15: // $bb16
        var $49=$i; //@line 1526 "cPickle.c"
        var $50=$len; //@line 1526 "cPickle.c"
        var $51=($49) < ($50); //@line 1526 "cPickle.c"
        var $52=$self_addr; //@line 1527 "cPickle.c"
        if ($51) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 1526 "cPickle.c"
      case 16: // $bb17
        var $53=$py_tuple_id; //@line 1530 "cPickle.c"
        var $54=_get($52, $53); //@line 1530 "cPickle.c"
        var $55=($54) < 0; //@line 1530 "cPickle.c"
        if ($55) { __label__ = 33; break; } else { __label__ = 17; break; } //@line 1530 "cPickle.c"
      case 17: // $bb18
        $res=0; //@line 1532 "cPickle.c"
        __label__ = 33; break; //@line 1532 "cPickle.c"
      case 18: // $bb19
        var $56=$self_addr; //@line 1536 "cPickle.c"
        var $57=$56+48; //@line 1536 "cPickle.c"
        var $58=HEAP[$57]; //@line 1536 "cPickle.c"
        var $59=$len; //@line 1536 "cPickle.c"
        var $60=_len2opcode_10044+$59; //@line 1536 "cPickle.c"
        var $61=$self_addr; //@line 1536 "cPickle.c"
        var $62=FUNCTION_TABLE[$58]($61, $60, 1); //@line 1536 "cPickle.c"
        var $63=($62) < 0; //@line 1536 "cPickle.c"
        if ($63) { __label__ = 33; break; } else { __label__ = 31; break; } //@line 1536 "cPickle.c"
      case 19: // $bb21
        var $64=$self_addr; //@line 1544 "cPickle.c"
        var $65=$64+48; //@line 1544 "cPickle.c"
        var $66=HEAP[$65]; //@line 1544 "cPickle.c"
        var $67=$self_addr; //@line 1544 "cPickle.c"
        var $68=FUNCTION_TABLE[$66]($67, _MARKv, 1); //@line 1544 "cPickle.c"
        var $69=($68) < 0; //@line 1544 "cPickle.c"
        if ($69) { __label__ = 33; break; } else { __label__ = 20; break; } //@line 1544 "cPickle.c"
      case 20: // $bb22
        var $70=$self_addr; //@line 1547 "cPickle.c"
        var $71=$args_addr; //@line 1547 "cPickle.c"
        var $72=$len; //@line 1547 "cPickle.c"
        var $73=_store_tuple_elements($70, $71, $72); //@line 1547 "cPickle.c"
        var $74=($73) < 0; //@line 1547 "cPickle.c"
        if ($74) { __label__ = 33; break; } else { __label__ = 21; break; } //@line 1547 "cPickle.c"
      case 21: // $bb23
        var $75=$self_addr; //@line 1550 "cPickle.c"
        var $76=$75+20; //@line 1550 "cPickle.c"
        var $77=HEAP[$76]; //@line 1550 "cPickle.c"
        var $78=$py_tuple_id; //@line 1550 "cPickle.c"
        var $79=_PyDict_GetItem($77, $78); //@line 1550 "cPickle.c"
        var $80=($79)!=0; //@line 1550 "cPickle.c"
        var $81=$self_addr; //@line 1552 "cPickle.c"
        if ($80) { __label__ = 22; break; } else { __label__ = 30; break; } //@line 1550 "cPickle.c"
      case 22: // $bb24
        var $82=$81+40; //@line 1552 "cPickle.c"
        var $83=HEAP[$82]; //@line 1552 "cPickle.c"
        var $84=($83)!=0; //@line 1552 "cPickle.c"
        if ($84) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1552 "cPickle.c"
      case 23: // $bb25
        var $85=$self_addr; //@line 1553 "cPickle.c"
        var $86=$85+48; //@line 1553 "cPickle.c"
        var $87=HEAP[$86]; //@line 1553 "cPickle.c"
        var $88=$self_addr; //@line 1553 "cPickle.c"
        var $89=FUNCTION_TABLE[$87]($88, _pop_mark_10043, 1); //@line 1553 "cPickle.c"
        var $90=($89) < 0; //@line 1553 "cPickle.c"
        if ($90) { __label__ = 33; break; } else { __label__ = 28; break; } //@line 1553 "cPickle.c"
      case 24: // $bb27
        $i=0; //@line 1560 "cPickle.c"
        __label__ = 27; break; //@line 1560 "cPickle.c"
      case 25: // $bb28
        var $91=$self_addr; //@line 1561 "cPickle.c"
        var $92=$91+48; //@line 1561 "cPickle.c"
        var $93=HEAP[$92]; //@line 1561 "cPickle.c"
        var $94=$self_addr; //@line 1561 "cPickle.c"
        var $95=FUNCTION_TABLE[$93]($94, _pop_10042, 1); //@line 1561 "cPickle.c"
        var $96=($95) < 0; //@line 1561 "cPickle.c"
        if ($96) { __label__ = 33; break; } else { __label__ = 26; break; } //@line 1561 "cPickle.c"
      case 26: // $bb29
        var $97=$i; //@line 1560 "cPickle.c"
        var $98=($97) + 1; //@line 1560 "cPickle.c"
        $i=$98; //@line 1560 "cPickle.c"
        __label__ = 27; break; //@line 1560 "cPickle.c"
      case 27: // $bb30
        var $99=$i; //@line 1560 "cPickle.c"
        var $100=$len; //@line 1560 "cPickle.c"
        var $101=($99) <= ($100); //@line 1560 "cPickle.c"
        if ($101) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 1560 "cPickle.c"
      case 28: // $bb31
        var $102=$self_addr; //@line 1565 "cPickle.c"
        var $103=$py_tuple_id; //@line 1565 "cPickle.c"
        var $104=_get($102, $103); //@line 1565 "cPickle.c"
        var $105=($104) >= 0; //@line 1565 "cPickle.c"
        if ($105) { __label__ = 29; break; } else { __label__ = 33; break; } //@line 1565 "cPickle.c"
      case 29: // $bb32
        $res=0; //@line 1566 "cPickle.c"
        __label__ = 33; break; //@line 1566 "cPickle.c"
      case 30: // $bb34
        var $106=$81+48; //@line 1571 "cPickle.c"
        var $107=HEAP[$106]; //@line 1571 "cPickle.c"
        var $108=$self_addr; //@line 1571 "cPickle.c"
        var $109=FUNCTION_TABLE[$107]($108, _tuple_10041, 1); //@line 1571 "cPickle.c"
        var $110=($109) < 0; //@line 1571 "cPickle.c"
        if ($110) { __label__ = 33; break; } else { __label__ = 31; break; } //@line 1571 "cPickle.c"
      case 31: // $memoize
        var $111=$self_addr; //@line 1575 "cPickle.c"
        var $112=$args_addr; //@line 1575 "cPickle.c"
        var $113=_put($111, $112); //@line 1575 "cPickle.c"
        var $114=($113) >= 0; //@line 1575 "cPickle.c"
        if ($114) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1575 "cPickle.c"
      case 32: // $bb35
        $res=0; //@line 1576 "cPickle.c"
        __label__ = 33; break; //@line 1578 "cPickle.c"
      case 33: // $finally
        var $_pr=$py_tuple_id;
        var $115=($_pr)!=0; //@line 1579 "cPickle.c"
        if ($115) { __label__ = 34; break; } else { __label__ = 36; break; } //@line 1579 "cPickle.c"
      case 34: // $bb36
        var $116=$py_tuple_id; //@line 1579 "cPickle.c"
        var $117=$116; //@line 1579 "cPickle.c"
        var $118=HEAP[$117]; //@line 1579 "cPickle.c"
        var $119=($118) - 1; //@line 1579 "cPickle.c"
        var $120=$py_tuple_id; //@line 1579 "cPickle.c"
        var $121=$120; //@line 1579 "cPickle.c"
        HEAP[$121]=$119; //@line 1579 "cPickle.c"
        var $122=$py_tuple_id; //@line 1579 "cPickle.c"
        var $123=$122; //@line 1579 "cPickle.c"
        var $124=HEAP[$123]; //@line 1579 "cPickle.c"
        var $125=($124)==0; //@line 1579 "cPickle.c"
        if ($125) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 1579 "cPickle.c"
      case 35: // $bb37
        var $126=$py_tuple_id; //@line 1579 "cPickle.c"
        var $127=$126+4; //@line 1579 "cPickle.c"
        var $128=HEAP[$127]; //@line 1579 "cPickle.c"
        var $129=$128+24; //@line 1579 "cPickle.c"
        var $130=HEAP[$129]; //@line 1579 "cPickle.c"
        var $131=$py_tuple_id; //@line 1579 "cPickle.c"
        FUNCTION_TABLE[$130]($131); //@line 1579 "cPickle.c"
        __label__ = 36; break; //@line 1579 "cPickle.c"
      case 36: // $bb38
        var $132=$res; //@line 1580 "cPickle.c"
        $0=$132; //@line 1580 "cPickle.c"
        var $133=$0; //@line 1580 "cPickle.c"
        $retval=$133; //@line 1580 "cPickle.c"
        var $retval39=$retval; //@line 1580 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval39; //@line 1580 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _batch_list($self, $iter) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $iter_addr;
        var $retval;
        var $0;
        var $obj;
        var $firstitem;
        var $i;
        var $n;
        var $_py_tmp;
        var $_py_tmp28;
        var $_py_tmp34;
        $self_addr=$self;
        $iter_addr=$iter;
        $obj=0; //@line 1592 "cPickle.c"
        $firstitem=0; //@line 1593 "cPickle.c"
        var $1=$iter_addr; //@line 1599 "cPickle.c"
        var $2=($1)==0; //@line 1599 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1599 "cPickle.c"
      case 1: // $bb
        ___assert_fail(__str16, __str15, 1599, ___PRETTY_FUNCTION___10137); //@line 1599 "cPickle.c"
        throw "Reached an unreachable!" //@line 1599 "cPickle.c"
      case 2: // $bb1
        var $3=$self_addr; //@line 1601 "cPickle.c"
        var $4=$3+36; //@line 1601 "cPickle.c"
        var $5=HEAP[$4]; //@line 1601 "cPickle.c"
        var $6=($5)==0; //@line 1601 "cPickle.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 13; break; } //@line 1601 "cPickle.c"
      case 3: // $bb2
        var $7=$iter_addr; //@line 1604 "cPickle.c"
        var $8=_PyIter_Next($7); //@line 1604 "cPickle.c"
        $obj=$8; //@line 1604 "cPickle.c"
        var $9=($8)==0; //@line 1605 "cPickle.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 1605 "cPickle.c"
      case 4: // $bb3
        var $10=_PyErr_Occurred(); //@line 1606 "cPickle.c"
        var $11=($10)!=0; //@line 1606 "cPickle.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1606 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 1607 "cPickle.c"
        __label__ = 46; break; //@line 1607 "cPickle.c"
      case 6: // $bb5
        $0=0; //@line 1617 "cPickle.c"
        __label__ = 46; break; //@line 1617 "cPickle.c"
      case 7: // $bb6
        var $12=$self_addr; //@line 1610 "cPickle.c"
        var $13=$obj; //@line 1610 "cPickle.c"
        var $14=_save($12, $13, 0); //@line 1610 "cPickle.c"
        $i=$14; //@line 1610 "cPickle.c"
        var $15=$obj; //@line 1611 "cPickle.c"
        var $16=$15; //@line 1611 "cPickle.c"
        var $17=HEAP[$16]; //@line 1611 "cPickle.c"
        var $18=($17) - 1; //@line 1611 "cPickle.c"
        var $19=$obj; //@line 1611 "cPickle.c"
        var $20=$19; //@line 1611 "cPickle.c"
        HEAP[$20]=$18; //@line 1611 "cPickle.c"
        var $21=$obj; //@line 1611 "cPickle.c"
        var $22=$21; //@line 1611 "cPickle.c"
        var $23=HEAP[$22]; //@line 1611 "cPickle.c"
        var $24=($23)==0; //@line 1611 "cPickle.c"
        if ($24) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1611 "cPickle.c"
      case 8: // $bb7
        var $25=$obj; //@line 1611 "cPickle.c"
        var $26=$25+4; //@line 1611 "cPickle.c"
        var $27=HEAP[$26]; //@line 1611 "cPickle.c"
        var $28=$27+24; //@line 1611 "cPickle.c"
        var $29=HEAP[$28]; //@line 1611 "cPickle.c"
        var $30=$obj; //@line 1611 "cPickle.c"
        FUNCTION_TABLE[$29]($30); //@line 1611 "cPickle.c"
        __label__ = 9; break; //@line 1611 "cPickle.c"
      case 9: // $bb8
        var $31=$i; //@line 1612 "cPickle.c"
        var $32=($31) < 0; //@line 1612 "cPickle.c"
        if ($32) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1612 "cPickle.c"
      case 10: // $bb9
        $0=-1; //@line 1613 "cPickle.c"
        __label__ = 46; break; //@line 1613 "cPickle.c"
      case 11: // $bb10
        var $33=$self_addr; //@line 1614 "cPickle.c"
        var $34=$33+48; //@line 1614 "cPickle.c"
        var $35=HEAP[$34]; //@line 1614 "cPickle.c"
        var $36=$self_addr; //@line 1614 "cPickle.c"
        var $37=FUNCTION_TABLE[$35]($36, _append_10135, 1); //@line 1614 "cPickle.c"
        var $38=($37) < 0; //@line 1614 "cPickle.c"
        if ($38) { __label__ = 12; break; } else { __label__ = 3; break; } //@line 1614 "cPickle.c"
      case 12: // $bb11
        $0=-1; //@line 1615 "cPickle.c"
        __label__ = 46; break; //@line 1615 "cPickle.c"
      case 13: // $bb13
        var $39=$iter_addr; //@line 1623 "cPickle.c"
        var $40=_PyIter_Next($39); //@line 1623 "cPickle.c"
        $firstitem=$40; //@line 1623 "cPickle.c"
        var $41=($40)==0; //@line 1624 "cPickle.c"
        if ($41) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1624 "cPickle.c"
      case 14: // $bb14
        var $42=_PyErr_Occurred(); //@line 1625 "cPickle.c"
        var $43=($42)!=0; //@line 1625 "cPickle.c"
        if ($43) { __label__ = 39; break; } else { __label__ = 38; break; } //@line 1625 "cPickle.c"
      case 15: // $bb16
        var $44=$iter_addr; //@line 1633 "cPickle.c"
        var $45=_PyIter_Next($44); //@line 1633 "cPickle.c"
        $obj=$45; //@line 1633 "cPickle.c"
        var $46=$obj; //@line 1634 "cPickle.c"
        var $47=($46)==0; //@line 1634 "cPickle.c"
        if ($47) { __label__ = 16; break; } else { __label__ = 22; break; } //@line 1634 "cPickle.c"
      case 16: // $bb17
        var $48=_PyErr_Occurred(); //@line 1635 "cPickle.c"
        var $49=($48)!=0; //@line 1635 "cPickle.c"
        if ($49) { __label__ = 39; break; } else { __label__ = 17; break; } //@line 1635 "cPickle.c"
      case 17: // $bb18
        var $50=$self_addr; //@line 1639 "cPickle.c"
        var $51=$firstitem; //@line 1639 "cPickle.c"
        var $52=_save($50, $51, 0); //@line 1639 "cPickle.c"
        var $53=($52) < 0; //@line 1639 "cPickle.c"
        if ($53) { __label__ = 39; break; } else { __label__ = 18; break; } //@line 1639 "cPickle.c"
      case 18: // $bb19
        var $54=$self_addr; //@line 1641 "cPickle.c"
        var $55=$54+48; //@line 1641 "cPickle.c"
        var $56=HEAP[$55]; //@line 1641 "cPickle.c"
        var $57=$self_addr; //@line 1641 "cPickle.c"
        var $58=FUNCTION_TABLE[$56]($57, _append_10135, 1); //@line 1641 "cPickle.c"
        var $59=($58) < 0; //@line 1641 "cPickle.c"
        if ($59) { __label__ = 39; break; } else { __label__ = 19; break; } //@line 1641 "cPickle.c"
      case 19: // $bb20
        var $60=$firstitem; //@line 1643 "cPickle.c"
        var $61=($60)!=0; //@line 1643 "cPickle.c"
        if ($61) { __label__ = 20; break; } else { __label__ = 38; break; } //@line 1643 "cPickle.c"
      case 20: // $bb21
        var $62=$firstitem; //@line 1643 "cPickle.c"
        $_py_tmp=$62; //@line 1643 "cPickle.c"
        $firstitem=0; //@line 1643 "cPickle.c"
        var $63=$_py_tmp; //@line 1643 "cPickle.c"
        var $64=$63; //@line 1643 "cPickle.c"
        var $65=HEAP[$64]; //@line 1643 "cPickle.c"
        var $66=($65) - 1; //@line 1643 "cPickle.c"
        var $67=$_py_tmp; //@line 1643 "cPickle.c"
        var $68=$67; //@line 1643 "cPickle.c"
        HEAP[$68]=$66; //@line 1643 "cPickle.c"
        var $69=$_py_tmp; //@line 1643 "cPickle.c"
        var $70=$69; //@line 1643 "cPickle.c"
        var $71=HEAP[$70]; //@line 1643 "cPickle.c"
        var $72=($71)==0; //@line 1643 "cPickle.c"
        if ($72) { __label__ = 21; break; } else { __label__ = 38; break; } //@line 1643 "cPickle.c"
      case 21: // $bb22
        var $73=$_py_tmp; //@line 1643 "cPickle.c"
        var $74=$73+4; //@line 1643 "cPickle.c"
        var $75=HEAP[$74]; //@line 1643 "cPickle.c"
        var $76=$75+24; //@line 1643 "cPickle.c"
        var $77=HEAP[$76]; //@line 1643 "cPickle.c"
        var $78=$_py_tmp; //@line 1643 "cPickle.c"
        FUNCTION_TABLE[$77]($78); //@line 1643 "cPickle.c"
        __label__ = 38; break; //@line 1643 "cPickle.c"
      case 22: // $bb24
        var $79=$self_addr; //@line 1650 "cPickle.c"
        var $80=$79+48; //@line 1650 "cPickle.c"
        var $81=HEAP[$80]; //@line 1650 "cPickle.c"
        var $82=$self_addr; //@line 1650 "cPickle.c"
        var $83=FUNCTION_TABLE[$81]($82, _MARKv, 1); //@line 1650 "cPickle.c"
        var $84=($83) < 0; //@line 1650 "cPickle.c"
        if ($84) { __label__ = 39; break; } else { __label__ = 23; break; } //@line 1650 "cPickle.c"
      case 23: // $bb25
        var $85=$self_addr; //@line 1653 "cPickle.c"
        var $86=$firstitem; //@line 1653 "cPickle.c"
        var $87=_save($85, $86, 0); //@line 1653 "cPickle.c"
        var $88=($87) < 0; //@line 1653 "cPickle.c"
        if ($88) { __label__ = 39; break; } else { __label__ = 24; break; } //@line 1653 "cPickle.c"
      case 24: // $bb26
        var $89=$firstitem; //@line 1655 "cPickle.c"
        var $90=($89)!=0; //@line 1655 "cPickle.c"
        if ($90) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 1655 "cPickle.c"
      case 25: // $bb27
        var $91=$firstitem; //@line 1655 "cPickle.c"
        $_py_tmp28=$91; //@line 1655 "cPickle.c"
        $firstitem=0; //@line 1655 "cPickle.c"
        var $92=$_py_tmp28; //@line 1655 "cPickle.c"
        var $93=$92; //@line 1655 "cPickle.c"
        var $94=HEAP[$93]; //@line 1655 "cPickle.c"
        var $95=($94) - 1; //@line 1655 "cPickle.c"
        var $96=$_py_tmp28; //@line 1655 "cPickle.c"
        var $97=$96; //@line 1655 "cPickle.c"
        HEAP[$97]=$95; //@line 1655 "cPickle.c"
        var $98=$_py_tmp28; //@line 1655 "cPickle.c"
        var $99=$98; //@line 1655 "cPickle.c"
        var $100=HEAP[$99]; //@line 1655 "cPickle.c"
        var $101=($100)==0; //@line 1655 "cPickle.c"
        if ($101) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1655 "cPickle.c"
      case 26: // $bb29
        var $102=$_py_tmp28; //@line 1655 "cPickle.c"
        var $103=$102+4; //@line 1655 "cPickle.c"
        var $104=HEAP[$103]; //@line 1655 "cPickle.c"
        var $105=$104+24; //@line 1655 "cPickle.c"
        var $106=HEAP[$105]; //@line 1655 "cPickle.c"
        var $107=$_py_tmp28; //@line 1655 "cPickle.c"
        FUNCTION_TABLE[$106]($107); //@line 1655 "cPickle.c"
        __label__ = 27; break; //@line 1655 "cPickle.c"
      case 27: // $bb30
        $n=1; //@line 1656 "cPickle.c"
        var $_pr=$obj;
        __lastLabel__ = 27; __label__ = 35; break; //@line 1656 "cPickle.c"
      case 28: // $bb31
        var $108=$self_addr; //@line 1660 "cPickle.c"
        var $109=$obj; //@line 1660 "cPickle.c"
        var $110=_save($108, $109, 0); //@line 1660 "cPickle.c"
        var $111=($110) < 0; //@line 1660 "cPickle.c"
        if ($111) { __label__ = 39; break; } else { __label__ = 29; break; } //@line 1660 "cPickle.c"
      case 29: // $bb32
        var $112=$obj; //@line 1662 "cPickle.c"
        var $113=($112)!=0; //@line 1662 "cPickle.c"
        if ($113) { __label__ = 30; break; } else { __label__ = 32; break; } //@line 1662 "cPickle.c"
      case 30: // $bb33
        var $114=$obj; //@line 1662 "cPickle.c"
        $_py_tmp34=$114; //@line 1662 "cPickle.c"
        $obj=0; //@line 1662 "cPickle.c"
        var $115=$_py_tmp34; //@line 1662 "cPickle.c"
        var $116=$115; //@line 1662 "cPickle.c"
        var $117=HEAP[$116]; //@line 1662 "cPickle.c"
        var $118=($117) - 1; //@line 1662 "cPickle.c"
        var $119=$_py_tmp34; //@line 1662 "cPickle.c"
        var $120=$119; //@line 1662 "cPickle.c"
        HEAP[$120]=$118; //@line 1662 "cPickle.c"
        var $121=$_py_tmp34; //@line 1662 "cPickle.c"
        var $122=$121; //@line 1662 "cPickle.c"
        var $123=HEAP[$122]; //@line 1662 "cPickle.c"
        var $124=($123)==0; //@line 1662 "cPickle.c"
        if ($124) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1662 "cPickle.c"
      case 31: // $bb35
        var $125=$_py_tmp34; //@line 1662 "cPickle.c"
        var $126=$125+4; //@line 1662 "cPickle.c"
        var $127=HEAP[$126]; //@line 1662 "cPickle.c"
        var $128=$127+24; //@line 1662 "cPickle.c"
        var $129=HEAP[$128]; //@line 1662 "cPickle.c"
        var $130=$_py_tmp34; //@line 1662 "cPickle.c"
        FUNCTION_TABLE[$129]($130); //@line 1662 "cPickle.c"
        __label__ = 32; break; //@line 1662 "cPickle.c"
      case 32: // $bb36
        var $131=$n; //@line 1663 "cPickle.c"
        var $132=($131) + 1; //@line 1663 "cPickle.c"
        $n=$132; //@line 1663 "cPickle.c"
        var $133=($132)==1000; //@line 1665 "cPickle.c"
        if ($133) { __label__ = 36; break; } else { __label__ = 33; break; } //@line 1665 "cPickle.c"
      case 33: // $bb37
        var $134=$iter_addr; //@line 1668 "cPickle.c"
        var $135=_PyIter_Next($134); //@line 1668 "cPickle.c"
        $obj=$135; //@line 1668 "cPickle.c"
        var $136=$obj; //@line 1669 "cPickle.c"
        var $137=($136)==0; //@line 1669 "cPickle.c"
        if ($137) { __lastLabel__ = 33; __label__ = 34; break; } else { __lastLabel__ = 33; __label__ = 35; break; } //@line 1669 "cPickle.c"
      case 34: // $bb38
        var $138=_PyErr_Occurred(); //@line 1670 "cPickle.c"
        var $139=($138)!=0; //@line 1670 "cPickle.c"
        if ($139) { __label__ = 39; break; } else { __label__ = 36; break; } //@line 1670 "cPickle.c"
      case 35: // $bb40
        var $140=__lastLabel__ == 33 ? $136 : ($_pr);
        var $141=($140)!=0; //@line 1659 "cPickle.c"
        if ($141) { __label__ = 28; break; } else { __label__ = 36; break; } //@line 1659 "cPickle.c"
      case 36: // $bb41
        var $142=$self_addr; //@line 1676 "cPickle.c"
        var $143=$142+48; //@line 1676 "cPickle.c"
        var $144=HEAP[$143]; //@line 1676 "cPickle.c"
        var $145=$self_addr; //@line 1676 "cPickle.c"
        var $146=FUNCTION_TABLE[$144]($145, _appends_10136, 1); //@line 1676 "cPickle.c"
        var $147=($146) < 0; //@line 1676 "cPickle.c"
        if ($147) { __label__ = 39; break; } else { __label__ = 37; break; } //@line 1676 "cPickle.c"
      case 37: // $bb42
        var $148=$n; //@line 1679 "cPickle.c"
        var $149=($148)==1000; //@line 1679 "cPickle.c"
        if ($149) { __label__ = 13; break; } else { __label__ = 38; break; } //@line 1679 "cPickle.c"
      case 38: // $bb43
        $0=0; //@line 1680 "cPickle.c"
        __label__ = 46; break; //@line 1680 "cPickle.c"
      case 39: // $BatchFailed
        var $150=$firstitem; //@line 1683 "cPickle.c"
        var $151=($150)!=0; //@line 1683 "cPickle.c"
        if ($151) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 1683 "cPickle.c"
      case 40: // $bb44
        var $152=$firstitem; //@line 1683 "cPickle.c"
        var $153=$152; //@line 1683 "cPickle.c"
        var $154=HEAP[$153]; //@line 1683 "cPickle.c"
        var $155=($154) - 1; //@line 1683 "cPickle.c"
        var $156=$firstitem; //@line 1683 "cPickle.c"
        var $157=$156; //@line 1683 "cPickle.c"
        HEAP[$157]=$155; //@line 1683 "cPickle.c"
        var $158=$firstitem; //@line 1683 "cPickle.c"
        var $159=$158; //@line 1683 "cPickle.c"
        var $160=HEAP[$159]; //@line 1683 "cPickle.c"
        var $161=($160)==0; //@line 1683 "cPickle.c"
        if ($161) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1683 "cPickle.c"
      case 41: // $bb45
        var $162=$firstitem; //@line 1683 "cPickle.c"
        var $163=$162+4; //@line 1683 "cPickle.c"
        var $164=HEAP[$163]; //@line 1683 "cPickle.c"
        var $165=$164+24; //@line 1683 "cPickle.c"
        var $166=HEAP[$165]; //@line 1683 "cPickle.c"
        var $167=$firstitem; //@line 1683 "cPickle.c"
        FUNCTION_TABLE[$166]($167); //@line 1683 "cPickle.c"
        __label__ = 42; break; //@line 1683 "cPickle.c"
      case 42: // $bb46
        var $168=$obj; //@line 1684 "cPickle.c"
        var $169=($168)!=0; //@line 1684 "cPickle.c"
        if ($169) { __label__ = 43; break; } else { __label__ = 45; break; } //@line 1684 "cPickle.c"
      case 43: // $bb47
        var $170=$obj; //@line 1684 "cPickle.c"
        var $171=$170; //@line 1684 "cPickle.c"
        var $172=HEAP[$171]; //@line 1684 "cPickle.c"
        var $173=($172) - 1; //@line 1684 "cPickle.c"
        var $174=$obj; //@line 1684 "cPickle.c"
        var $175=$174; //@line 1684 "cPickle.c"
        HEAP[$175]=$173; //@line 1684 "cPickle.c"
        var $176=$obj; //@line 1684 "cPickle.c"
        var $177=$176; //@line 1684 "cPickle.c"
        var $178=HEAP[$177]; //@line 1684 "cPickle.c"
        var $179=($178)==0; //@line 1684 "cPickle.c"
        if ($179) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1684 "cPickle.c"
      case 44: // $bb48
        var $180=$obj; //@line 1684 "cPickle.c"
        var $181=$180+4; //@line 1684 "cPickle.c"
        var $182=HEAP[$181]; //@line 1684 "cPickle.c"
        var $183=$182+24; //@line 1684 "cPickle.c"
        var $184=HEAP[$183]; //@line 1684 "cPickle.c"
        var $185=$obj; //@line 1684 "cPickle.c"
        FUNCTION_TABLE[$184]($185); //@line 1684 "cPickle.c"
        __label__ = 45; break; //@line 1684 "cPickle.c"
      case 45: // $bb49
        $0=-1; //@line 1685 "cPickle.c"
        __label__ = 46; break; //@line 1685 "cPickle.c"
      case 46: // $bb50
        var $186=$0; //@line 1607 "cPickle.c"
        $retval=$186; //@line 1607 "cPickle.c"
        var $retval51=$retval; //@line 1607 "cPickle.c"
        ;
        return $retval51; //@line 1607 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_list($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 3; _memset(__stackBase__, 0, 3);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $iftmp_93;
        var $res;
        var $s=__stackBase__;
        var $len;
        var $iter;
        $self_addr=$self;
        $args_addr=$args;
        $res=-1; //@line 1691 "cPickle.c"
        var $1=$self_addr; //@line 1696 "cPickle.c"
        var $2=$1+44; //@line 1696 "cPickle.c"
        var $3=HEAP[$2]; //@line 1696 "cPickle.c"
        var $4=($3)!=0; //@line 1696 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1696 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1696 "cPickle.c"
        var $6=$args_addr; //@line 1696 "cPickle.c"
        var $7=_fast_save_enter($5, $6); //@line 1696 "cPickle.c"
        var $8=($7)==0; //@line 1696 "cPickle.c"
        if ($8) { __label__ = 18; break; } else { __label__ = 2; break; } //@line 1696 "cPickle.c"
      case 2: // $bb1
        var $9=$self_addr; //@line 1700 "cPickle.c"
        var $10=$9+40; //@line 1700 "cPickle.c"
        var $11=HEAP[$10]; //@line 1700 "cPickle.c"
        var $12=($11)!=0; //@line 1700 "cPickle.c"
        var $13=$s; //@line 1701 "cPickle.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1700 "cPickle.c"
      case 3: // $bb2
        HEAP[$13]=93; //@line 1701 "cPickle.c"
        $len=1; //@line 1702 "cPickle.c"
        __label__ = 5; break; //@line 1702 "cPickle.c"
      case 4: // $bb3
        HEAP[$13]=40; //@line 1705 "cPickle.c"
        var $14=$s+1; //@line 1706 "cPickle.c"
        HEAP[$14]=108; //@line 1706 "cPickle.c"
        $len=2; //@line 1707 "cPickle.c"
        __label__ = 5; break; //@line 1707 "cPickle.c"
      case 5: // $bb4
        var $15=$self_addr; //@line 1710 "cPickle.c"
        var $16=$15+48; //@line 1710 "cPickle.c"
        var $17=HEAP[$16]; //@line 1710 "cPickle.c"
        var $18=$self_addr; //@line 1710 "cPickle.c"
        var $s5=$s; //@line 1710 "cPickle.c"
        var $19=$len; //@line 1710 "cPickle.c"
        var $20=FUNCTION_TABLE[$17]($18, $s5, $19); //@line 1710 "cPickle.c"
        var $21=($20) < 0; //@line 1710 "cPickle.c"
        if ($21) { __label__ = 18; break; } else { __label__ = 6; break; } //@line 1710 "cPickle.c"
      case 6: // $bb6
        var $22=$args_addr; //@line 1714 "cPickle.c"
        var $23=_PyList_Size($22); //@line 1714 "cPickle.c"
        $len=$23; //@line 1714 "cPickle.c"
        var $24=$len; //@line 1714 "cPickle.c"
        var $25=($24) < 0; //@line 1714 "cPickle.c"
        if ($25) { __label__ = 18; break; } else { __label__ = 7; break; } //@line 1714 "cPickle.c"
      case 7: // $bb7
        var $26=$len; //@line 1718 "cPickle.c"
        var $27=($26)==0; //@line 1718 "cPickle.c"
        var $28=$self_addr; //@line 1719 "cPickle.c"
        var $29=$args_addr; //@line 1719 "cPickle.c"
        if ($27) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 1718 "cPickle.c"
      case 8: // $bb8
        var $30=_put($28, $29); //@line 1719 "cPickle.c"
        var $31=($30) >= 0; //@line 1719 "cPickle.c"
        if ($31) { __label__ = 9; break; } else { __label__ = 18; break; } //@line 1719 "cPickle.c"
      case 9: // $bb9
        $res=0; //@line 1720 "cPickle.c"
        __label__ = 18; break; //@line 1720 "cPickle.c"
      case 10: // $bb11
        var $32=_put2($28, $29); //@line 1723 "cPickle.c"
        var $33=($32) < 0; //@line 1723 "cPickle.c"
        if ($33) { __label__ = 18; break; } else { __label__ = 11; break; } //@line 1723 "cPickle.c"
      case 11: // $bb12
        var $34=$args_addr; //@line 1727 "cPickle.c"
        var $35=_PyObject_GetIter($34); //@line 1727 "cPickle.c"
        $iter=$35; //@line 1727 "cPickle.c"
        var $36=$iter; //@line 1728 "cPickle.c"
        var $37=($36)==0; //@line 1728 "cPickle.c"
        if ($37) { __label__ = 18; break; } else { __label__ = 12; break; } //@line 1728 "cPickle.c"
      case 12: // $bb13
        var $38=HEAP[__PyThreadState_Current]; //@line 1731 "cPickle.c"
        var $39=$38+12; //@line 1731 "cPickle.c"
        var $40=HEAP[$39]; //@line 1731 "cPickle.c"
        var $41=($40) + 1; //@line 1731 "cPickle.c"
        var $42=$38+12; //@line 1731 "cPickle.c"
        HEAP[$42]=$41; //@line 1731 "cPickle.c"
        var $43=$38+12; //@line 1731 "cPickle.c"
        var $44=HEAP[$43]; //@line 1731 "cPickle.c"
        var $45=HEAP[__Py_CheckRecursionLimit]; //@line 1731 "cPickle.c"
        var $46=($44) <= ($45); //@line 1731 "cPickle.c"
        if ($46) { __label__ = 15; break; } else { __label__ = 13; break; } //@line 1731 "cPickle.c"
      case 13: // $bb14
        var $47=__Py_CheckRecursiveCall(__str17); //@line 1731 "cPickle.c"
        var $48=($47)==0; //@line 1731 "cPickle.c"
        if ($48) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 1731 "cPickle.c"
      case 14: // $bb17
        $iftmp_93=1; //@line 1731 "cPickle.c"
        __label__ = 16; break;
      case 15: // $bb18
        $iftmp_93=0; //@line 1731 "cPickle.c"
        var $49=$self_addr; //@line 1733 "cPickle.c"
        var $50=$iter; //@line 1733 "cPickle.c"
        var $51=_batch_list($49, $50); //@line 1733 "cPickle.c"
        $res=$51; //@line 1733 "cPickle.c"
        var $52=HEAP[__PyThreadState_Current]; //@line 1734 "cPickle.c"
        var $53=$52+12; //@line 1734 "cPickle.c"
        var $54=HEAP[$53]; //@line 1734 "cPickle.c"
        var $55=($54) - 1; //@line 1734 "cPickle.c"
        var $56=$52+12; //@line 1734 "cPickle.c"
        HEAP[$56]=$55; //@line 1734 "cPickle.c"
        __label__ = 16; break; //@line 1734 "cPickle.c"
      case 16: // $bb19
        var $57=$iter; //@line 1736 "cPickle.c"
        var $58=$57; //@line 1736 "cPickle.c"
        var $59=HEAP[$58]; //@line 1736 "cPickle.c"
        var $60=($59) - 1; //@line 1736 "cPickle.c"
        var $61=$iter; //@line 1736 "cPickle.c"
        var $62=$61; //@line 1736 "cPickle.c"
        HEAP[$62]=$60; //@line 1736 "cPickle.c"
        var $63=$iter; //@line 1736 "cPickle.c"
        var $64=$63; //@line 1736 "cPickle.c"
        var $65=HEAP[$64]; //@line 1736 "cPickle.c"
        var $66=($65)==0; //@line 1736 "cPickle.c"
        if ($66) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1736 "cPickle.c"
      case 17: // $bb20
        var $67=$iter; //@line 1736 "cPickle.c"
        var $68=$67+4; //@line 1736 "cPickle.c"
        var $69=HEAP[$68]; //@line 1736 "cPickle.c"
        var $70=$69+24; //@line 1736 "cPickle.c"
        var $71=HEAP[$70]; //@line 1736 "cPickle.c"
        var $72=$iter; //@line 1736 "cPickle.c"
        FUNCTION_TABLE[$71]($72); //@line 1736 "cPickle.c"
        __label__ = 18; break; //@line 1738 "cPickle.c"
      case 18: // $finally
        var $73=$self_addr; //@line 1739 "cPickle.c"
        var $74=$73+44; //@line 1739 "cPickle.c"
        var $75=HEAP[$74]; //@line 1739 "cPickle.c"
        var $76=($75)!=0; //@line 1739 "cPickle.c"
        if ($76) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 1739 "cPickle.c"
      case 19: // $bb21
        var $77=$self_addr; //@line 1739 "cPickle.c"
        var $78=$args_addr; //@line 1739 "cPickle.c"
        var $79=_fast_save_leave($77, $78); //@line 1739 "cPickle.c"
        var $80=($79)==0; //@line 1739 "cPickle.c"
        if ($80) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1739 "cPickle.c"
      case 20: // $bb22
        $res=-1; //@line 1740 "cPickle.c"
        __label__ = 21; break; //@line 1740 "cPickle.c"
      case 21: // $bb23
        var $81=$res; //@line 1742 "cPickle.c"
        $0=$81; //@line 1742 "cPickle.c"
        var $82=$0; //@line 1742 "cPickle.c"
        $retval=$82; //@line 1742 "cPickle.c"
        var $retval24=$retval; //@line 1742 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 1742 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _batch_dict($self, $iter) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $iter_addr;
        var $retval;
        var $0;
        var $p;
        var $firstitem;
        var $i;
        var $n;
        var $_py_tmp;
        var $_py_tmp38;
        var $_py_tmp48;
        $self_addr=$self;
        $iter_addr=$iter;
        $p=0; //@line 1760 "cPickle.c"
        $firstitem=0; //@line 1761 "cPickle.c"
        var $1=$iter_addr; //@line 1767 "cPickle.c"
        var $2=($1)==0; //@line 1767 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1767 "cPickle.c"
      case 1: // $bb
        ___assert_fail(__str16, __str15, 1767, ___PRETTY_FUNCTION___10326); //@line 1767 "cPickle.c"
        throw "Reached an unreachable!" //@line 1767 "cPickle.c"
      case 2: // $bb1
        var $3=$self_addr; //@line 1769 "cPickle.c"
        var $4=$3+36; //@line 1769 "cPickle.c"
        var $5=HEAP[$4]; //@line 1769 "cPickle.c"
        var $6=($5)==0; //@line 1769 "cPickle.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 18; break; } //@line 1769 "cPickle.c"
      case 3: // $bb2
        var $7=$iter_addr; //@line 1772 "cPickle.c"
        var $8=_PyIter_Next($7); //@line 1772 "cPickle.c"
        $p=$8; //@line 1772 "cPickle.c"
        var $9=($8)==0; //@line 1773 "cPickle.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 1773 "cPickle.c"
      case 4: // $bb3
        var $10=_PyErr_Occurred(); //@line 1774 "cPickle.c"
        var $11=($10)!=0; //@line 1774 "cPickle.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1774 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 1775 "cPickle.c"
        __label__ = 60; break; //@line 1775 "cPickle.c"
      case 6: // $bb5
        $0=0; //@line 1792 "cPickle.c"
        __label__ = 60; break; //@line 1792 "cPickle.c"
      case 7: // $bb6
        var $12=$p; //@line 1778 "cPickle.c"
        var $13=$12+4; //@line 1778 "cPickle.c"
        var $14=HEAP[$13]; //@line 1778 "cPickle.c"
        var $15=$14+84; //@line 1778 "cPickle.c"
        var $16=HEAP[$15]; //@line 1778 "cPickle.c"
        var $17=($16) & 67108864; //@line 1778 "cPickle.c"
        var $18=($17)==0; //@line 1778 "cPickle.c"
        if ($18) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 1778 "cPickle.c"
      case 8: // $bb7
        var $19=$p; //@line 1778 "cPickle.c"
        var $20=_PyTuple_Size($19); //@line 1778 "cPickle.c"
        var $21=($20)!=2; //@line 1778 "cPickle.c"
        if ($21) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1778 "cPickle.c"
      case 9: // $bb8
        var $22=HEAP[_PyExc_TypeError]; //@line 1779 "cPickle.c"
        _PyErr_SetString($22, __str18); //@line 1779 "cPickle.c"
        $0=-1; //@line 1781 "cPickle.c"
        __label__ = 60; break; //@line 1781 "cPickle.c"
      case 10: // $bb9
        var $23=$p; //@line 1783 "cPickle.c"
        var $24=$23; //@line 1783 "cPickle.c"
        var $25=$24+12; //@line 1783 "cPickle.c"
        var $26=$25; //@line 1783 "cPickle.c"
        var $27=HEAP[$26]; //@line 1783 "cPickle.c"
        var $28=$self_addr; //@line 1783 "cPickle.c"
        var $29=_save($28, $27, 0); //@line 1783 "cPickle.c"
        $i=$29; //@line 1783 "cPickle.c"
        var $30=$i; //@line 1784 "cPickle.c"
        var $31=($30) >= 0; //@line 1784 "cPickle.c"
        if ($31) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1784 "cPickle.c"
      case 11: // $bb10
        var $32=$p; //@line 1785 "cPickle.c"
        var $33=$32; //@line 1785 "cPickle.c"
        var $34=$33+12; //@line 1785 "cPickle.c"
        var $35=$34+4; //@line 1785 "cPickle.c"
        var $36=HEAP[$35]; //@line 1785 "cPickle.c"
        var $37=$self_addr; //@line 1785 "cPickle.c"
        var $38=_save($37, $36, 0); //@line 1785 "cPickle.c"
        $i=$38; //@line 1785 "cPickle.c"
        __label__ = 12; break; //@line 1785 "cPickle.c"
      case 12: // $bb11
        var $39=$p; //@line 1786 "cPickle.c"
        var $40=$39; //@line 1786 "cPickle.c"
        var $41=HEAP[$40]; //@line 1786 "cPickle.c"
        var $42=($41) - 1; //@line 1786 "cPickle.c"
        var $43=$p; //@line 1786 "cPickle.c"
        var $44=$43; //@line 1786 "cPickle.c"
        HEAP[$44]=$42; //@line 1786 "cPickle.c"
        var $45=$p; //@line 1786 "cPickle.c"
        var $46=$45; //@line 1786 "cPickle.c"
        var $47=HEAP[$46]; //@line 1786 "cPickle.c"
        var $48=($47)==0; //@line 1786 "cPickle.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1786 "cPickle.c"
      case 13: // $bb12
        var $49=$p; //@line 1786 "cPickle.c"
        var $50=$49+4; //@line 1786 "cPickle.c"
        var $51=HEAP[$50]; //@line 1786 "cPickle.c"
        var $52=$51+24; //@line 1786 "cPickle.c"
        var $53=HEAP[$52]; //@line 1786 "cPickle.c"
        var $54=$p; //@line 1786 "cPickle.c"
        FUNCTION_TABLE[$53]($54); //@line 1786 "cPickle.c"
        __label__ = 14; break; //@line 1786 "cPickle.c"
      case 14: // $bb13
        var $55=$i; //@line 1787 "cPickle.c"
        var $56=($55) < 0; //@line 1787 "cPickle.c"
        if ($56) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1787 "cPickle.c"
      case 15: // $bb14
        $0=-1; //@line 1788 "cPickle.c"
        __label__ = 60; break; //@line 1788 "cPickle.c"
      case 16: // $bb15
        var $57=$self_addr; //@line 1789 "cPickle.c"
        var $58=$57+48; //@line 1789 "cPickle.c"
        var $59=HEAP[$58]; //@line 1789 "cPickle.c"
        var $60=$self_addr; //@line 1789 "cPickle.c"
        var $61=FUNCTION_TABLE[$59]($60, _setitem_10324, 1); //@line 1789 "cPickle.c"
        var $62=($61) < 0; //@line 1789 "cPickle.c"
        if ($62) { __label__ = 17; break; } else { __label__ = 3; break; } //@line 1789 "cPickle.c"
      case 17: // $bb16
        $0=-1; //@line 1790 "cPickle.c"
        __label__ = 60; break; //@line 1790 "cPickle.c"
      case 18: // $bb18
        var $63=$iter_addr; //@line 1798 "cPickle.c"
        var $64=_PyIter_Next($63); //@line 1798 "cPickle.c"
        $firstitem=$64; //@line 1798 "cPickle.c"
        var $65=($64)==0; //@line 1799 "cPickle.c"
        if ($65) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1799 "cPickle.c"
      case 19: // $bb19
        var $66=_PyErr_Occurred(); //@line 1800 "cPickle.c"
        var $67=($66)!=0; //@line 1800 "cPickle.c"
        if ($67) { __label__ = 53; break; } else { __label__ = 52; break; } //@line 1800 "cPickle.c"
      case 20: // $bb21
        var $68=$firstitem; //@line 1806 "cPickle.c"
        var $69=$68+4; //@line 1806 "cPickle.c"
        var $70=HEAP[$69]; //@line 1806 "cPickle.c"
        var $71=$70+84; //@line 1806 "cPickle.c"
        var $72=HEAP[$71]; //@line 1806 "cPickle.c"
        var $73=($72) & 67108864; //@line 1806 "cPickle.c"
        var $74=($73)==0; //@line 1806 "cPickle.c"
        if ($74) { __label__ = 22; break; } else { __label__ = 21; break; } //@line 1806 "cPickle.c"
      case 21: // $bb22
        var $75=$firstitem; //@line 1806 "cPickle.c"
        var $76=_PyTuple_Size($75); //@line 1806 "cPickle.c"
        var $77=($76)!=2; //@line 1806 "cPickle.c"
        if ($77) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1806 "cPickle.c"
      case 22: // $bb23
        var $78=HEAP[_PyExc_TypeError]; //@line 1807 "cPickle.c"
        _PyErr_SetString($78, __str18); //@line 1807 "cPickle.c"
        __label__ = 53; break; //@line 1807 "cPickle.c"
      case 23: // $bb24
        var $79=$iter_addr; //@line 1813 "cPickle.c"
        var $80=_PyIter_Next($79); //@line 1813 "cPickle.c"
        $p=$80; //@line 1813 "cPickle.c"
        var $81=$p; //@line 1814 "cPickle.c"
        var $82=($81)==0; //@line 1814 "cPickle.c"
        if ($82) { __label__ = 24; break; } else { __label__ = 31; break; } //@line 1814 "cPickle.c"
      case 24: // $bb25
        var $83=_PyErr_Occurred(); //@line 1815 "cPickle.c"
        var $84=($83)!=0; //@line 1815 "cPickle.c"
        if ($84) { __label__ = 53; break; } else { __label__ = 25; break; } //@line 1815 "cPickle.c"
      case 25: // $bb26
        var $85=$firstitem; //@line 1819 "cPickle.c"
        var $86=$85; //@line 1819 "cPickle.c"
        var $87=$86+12; //@line 1819 "cPickle.c"
        var $88=$87; //@line 1819 "cPickle.c"
        var $89=HEAP[$88]; //@line 1819 "cPickle.c"
        var $90=$self_addr; //@line 1819 "cPickle.c"
        var $91=_save($90, $89, 0); //@line 1819 "cPickle.c"
        var $92=($91) < 0; //@line 1819 "cPickle.c"
        if ($92) { __label__ = 53; break; } else { __label__ = 26; break; } //@line 1819 "cPickle.c"
      case 26: // $bb27
        var $93=$firstitem; //@line 1821 "cPickle.c"
        var $94=$93; //@line 1821 "cPickle.c"
        var $95=$94+12; //@line 1821 "cPickle.c"
        var $96=$95+4; //@line 1821 "cPickle.c"
        var $97=HEAP[$96]; //@line 1821 "cPickle.c"
        var $98=$self_addr; //@line 1821 "cPickle.c"
        var $99=_save($98, $97, 0); //@line 1821 "cPickle.c"
        var $100=($99) < 0; //@line 1821 "cPickle.c"
        if ($100) { __label__ = 53; break; } else { __label__ = 27; break; } //@line 1821 "cPickle.c"
      case 27: // $bb28
        var $101=$self_addr; //@line 1823 "cPickle.c"
        var $102=$101+48; //@line 1823 "cPickle.c"
        var $103=HEAP[$102]; //@line 1823 "cPickle.c"
        var $104=$self_addr; //@line 1823 "cPickle.c"
        var $105=FUNCTION_TABLE[$103]($104, _setitem_10324, 1); //@line 1823 "cPickle.c"
        var $106=($105) < 0; //@line 1823 "cPickle.c"
        if ($106) { __label__ = 53; break; } else { __label__ = 28; break; } //@line 1823 "cPickle.c"
      case 28: // $bb29
        var $107=$firstitem; //@line 1825 "cPickle.c"
        var $108=($107)!=0; //@line 1825 "cPickle.c"
        if ($108) { __label__ = 29; break; } else { __label__ = 52; break; } //@line 1825 "cPickle.c"
      case 29: // $bb30
        var $109=$firstitem; //@line 1825 "cPickle.c"
        $_py_tmp=$109; //@line 1825 "cPickle.c"
        $firstitem=0; //@line 1825 "cPickle.c"
        var $110=$_py_tmp; //@line 1825 "cPickle.c"
        var $111=$110; //@line 1825 "cPickle.c"
        var $112=HEAP[$111]; //@line 1825 "cPickle.c"
        var $113=($112) - 1; //@line 1825 "cPickle.c"
        var $114=$_py_tmp; //@line 1825 "cPickle.c"
        var $115=$114; //@line 1825 "cPickle.c"
        HEAP[$115]=$113; //@line 1825 "cPickle.c"
        var $116=$_py_tmp; //@line 1825 "cPickle.c"
        var $117=$116; //@line 1825 "cPickle.c"
        var $118=HEAP[$117]; //@line 1825 "cPickle.c"
        var $119=($118)==0; //@line 1825 "cPickle.c"
        if ($119) { __label__ = 30; break; } else { __label__ = 52; break; } //@line 1825 "cPickle.c"
      case 30: // $bb31
        var $120=$_py_tmp; //@line 1825 "cPickle.c"
        var $121=$120+4; //@line 1825 "cPickle.c"
        var $122=HEAP[$121]; //@line 1825 "cPickle.c"
        var $123=$122+24; //@line 1825 "cPickle.c"
        var $124=HEAP[$123]; //@line 1825 "cPickle.c"
        var $125=$_py_tmp; //@line 1825 "cPickle.c"
        FUNCTION_TABLE[$124]($125); //@line 1825 "cPickle.c"
        __label__ = 52; break; //@line 1825 "cPickle.c"
      case 31: // $bb33
        var $126=$self_addr; //@line 1832 "cPickle.c"
        var $127=$126+48; //@line 1832 "cPickle.c"
        var $128=HEAP[$127]; //@line 1832 "cPickle.c"
        var $129=$self_addr; //@line 1832 "cPickle.c"
        var $130=FUNCTION_TABLE[$128]($129, _MARKv, 1); //@line 1832 "cPickle.c"
        var $131=($130) < 0; //@line 1832 "cPickle.c"
        if ($131) { __label__ = 53; break; } else { __label__ = 32; break; } //@line 1832 "cPickle.c"
      case 32: // $bb34
        var $132=$firstitem; //@line 1835 "cPickle.c"
        var $133=$132; //@line 1835 "cPickle.c"
        var $134=$133+12; //@line 1835 "cPickle.c"
        var $135=$134; //@line 1835 "cPickle.c"
        var $136=HEAP[$135]; //@line 1835 "cPickle.c"
        var $137=$self_addr; //@line 1835 "cPickle.c"
        var $138=_save($137, $136, 0); //@line 1835 "cPickle.c"
        var $139=($138) < 0; //@line 1835 "cPickle.c"
        if ($139) { __label__ = 53; break; } else { __label__ = 33; break; } //@line 1835 "cPickle.c"
      case 33: // $bb35
        var $140=$firstitem; //@line 1837 "cPickle.c"
        var $141=$140; //@line 1837 "cPickle.c"
        var $142=$141+12; //@line 1837 "cPickle.c"
        var $143=$142+4; //@line 1837 "cPickle.c"
        var $144=HEAP[$143]; //@line 1837 "cPickle.c"
        var $145=$self_addr; //@line 1837 "cPickle.c"
        var $146=_save($145, $144, 0); //@line 1837 "cPickle.c"
        var $147=($146) < 0; //@line 1837 "cPickle.c"
        if ($147) { __label__ = 53; break; } else { __label__ = 34; break; } //@line 1837 "cPickle.c"
      case 34: // $bb36
        var $148=$firstitem; //@line 1839 "cPickle.c"
        var $149=($148)!=0; //@line 1839 "cPickle.c"
        if ($149) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 1839 "cPickle.c"
      case 35: // $bb37
        var $150=$firstitem; //@line 1839 "cPickle.c"
        $_py_tmp38=$150; //@line 1839 "cPickle.c"
        $firstitem=0; //@line 1839 "cPickle.c"
        var $151=$_py_tmp38; //@line 1839 "cPickle.c"
        var $152=$151; //@line 1839 "cPickle.c"
        var $153=HEAP[$152]; //@line 1839 "cPickle.c"
        var $154=($153) - 1; //@line 1839 "cPickle.c"
        var $155=$_py_tmp38; //@line 1839 "cPickle.c"
        var $156=$155; //@line 1839 "cPickle.c"
        HEAP[$156]=$154; //@line 1839 "cPickle.c"
        var $157=$_py_tmp38; //@line 1839 "cPickle.c"
        var $158=$157; //@line 1839 "cPickle.c"
        var $159=HEAP[$158]; //@line 1839 "cPickle.c"
        var $160=($159)==0; //@line 1839 "cPickle.c"
        if ($160) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1839 "cPickle.c"
      case 36: // $bb39
        var $161=$_py_tmp38; //@line 1839 "cPickle.c"
        var $162=$161+4; //@line 1839 "cPickle.c"
        var $163=HEAP[$162]; //@line 1839 "cPickle.c"
        var $164=$163+24; //@line 1839 "cPickle.c"
        var $165=HEAP[$164]; //@line 1839 "cPickle.c"
        var $166=$_py_tmp38; //@line 1839 "cPickle.c"
        FUNCTION_TABLE[$165]($166); //@line 1839 "cPickle.c"
        __label__ = 37; break; //@line 1839 "cPickle.c"
      case 37: // $bb40
        $n=1; //@line 1840 "cPickle.c"
        var $_pr=$p;
        __lastLabel__ = 37; __label__ = 49; break; //@line 1840 "cPickle.c"
      case 38: // $bb41
        var $167=$p; //@line 1844 "cPickle.c"
        var $168=$167+4; //@line 1844 "cPickle.c"
        var $169=HEAP[$168]; //@line 1844 "cPickle.c"
        var $170=$169+84; //@line 1844 "cPickle.c"
        var $171=HEAP[$170]; //@line 1844 "cPickle.c"
        var $172=($171) & 67108864; //@line 1844 "cPickle.c"
        var $173=($172)==0; //@line 1844 "cPickle.c"
        if ($173) { __label__ = 40; break; } else { __label__ = 39; break; } //@line 1844 "cPickle.c"
      case 39: // $bb42
        var $174=$p; //@line 1844 "cPickle.c"
        var $175=_PyTuple_Size($174); //@line 1844 "cPickle.c"
        var $176=($175)!=2; //@line 1844 "cPickle.c"
        if ($176) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1844 "cPickle.c"
      case 40: // $bb43
        var $177=HEAP[_PyExc_TypeError]; //@line 1845 "cPickle.c"
        _PyErr_SetString($177, __str18); //@line 1845 "cPickle.c"
        __label__ = 53; break; //@line 1845 "cPickle.c"
      case 41: // $bb44
        var $178=$p; //@line 1849 "cPickle.c"
        var $179=$178; //@line 1849 "cPickle.c"
        var $180=$179+12; //@line 1849 "cPickle.c"
        var $181=$180; //@line 1849 "cPickle.c"
        var $182=HEAP[$181]; //@line 1849 "cPickle.c"
        var $183=$self_addr; //@line 1849 "cPickle.c"
        var $184=_save($183, $182, 0); //@line 1849 "cPickle.c"
        var $185=($184) < 0; //@line 1849 "cPickle.c"
        if ($185) { __label__ = 53; break; } else { __label__ = 42; break; } //@line 1849 "cPickle.c"
      case 42: // $bb45
        var $186=$p; //@line 1851 "cPickle.c"
        var $187=$186; //@line 1851 "cPickle.c"
        var $188=$187+12; //@line 1851 "cPickle.c"
        var $189=$188+4; //@line 1851 "cPickle.c"
        var $190=HEAP[$189]; //@line 1851 "cPickle.c"
        var $191=$self_addr; //@line 1851 "cPickle.c"
        var $192=_save($191, $190, 0); //@line 1851 "cPickle.c"
        var $193=($192) < 0; //@line 1851 "cPickle.c"
        if ($193) { __label__ = 53; break; } else { __label__ = 43; break; } //@line 1851 "cPickle.c"
      case 43: // $bb46
        var $194=$p; //@line 1853 "cPickle.c"
        var $195=($194)!=0; //@line 1853 "cPickle.c"
        if ($195) { __label__ = 44; break; } else { __label__ = 46; break; } //@line 1853 "cPickle.c"
      case 44: // $bb47
        var $196=$p; //@line 1853 "cPickle.c"
        $_py_tmp48=$196; //@line 1853 "cPickle.c"
        $p=0; //@line 1853 "cPickle.c"
        var $197=$_py_tmp48; //@line 1853 "cPickle.c"
        var $198=$197; //@line 1853 "cPickle.c"
        var $199=HEAP[$198]; //@line 1853 "cPickle.c"
        var $200=($199) - 1; //@line 1853 "cPickle.c"
        var $201=$_py_tmp48; //@line 1853 "cPickle.c"
        var $202=$201; //@line 1853 "cPickle.c"
        HEAP[$202]=$200; //@line 1853 "cPickle.c"
        var $203=$_py_tmp48; //@line 1853 "cPickle.c"
        var $204=$203; //@line 1853 "cPickle.c"
        var $205=HEAP[$204]; //@line 1853 "cPickle.c"
        var $206=($205)==0; //@line 1853 "cPickle.c"
        if ($206) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 1853 "cPickle.c"
      case 45: // $bb49
        var $207=$_py_tmp48; //@line 1853 "cPickle.c"
        var $208=$207+4; //@line 1853 "cPickle.c"
        var $209=HEAP[$208]; //@line 1853 "cPickle.c"
        var $210=$209+24; //@line 1853 "cPickle.c"
        var $211=HEAP[$210]; //@line 1853 "cPickle.c"
        var $212=$_py_tmp48; //@line 1853 "cPickle.c"
        FUNCTION_TABLE[$211]($212); //@line 1853 "cPickle.c"
        __label__ = 46; break; //@line 1853 "cPickle.c"
      case 46: // $bb50
        var $213=$n; //@line 1854 "cPickle.c"
        var $214=($213) + 1; //@line 1854 "cPickle.c"
        $n=$214; //@line 1854 "cPickle.c"
        var $215=($214)==1000; //@line 1856 "cPickle.c"
        if ($215) { __label__ = 50; break; } else { __label__ = 47; break; } //@line 1856 "cPickle.c"
      case 47: // $bb51
        var $216=$iter_addr; //@line 1859 "cPickle.c"
        var $217=_PyIter_Next($216); //@line 1859 "cPickle.c"
        $p=$217; //@line 1859 "cPickle.c"
        var $218=$p; //@line 1860 "cPickle.c"
        var $219=($218)==0; //@line 1860 "cPickle.c"
        if ($219) { __lastLabel__ = 47; __label__ = 48; break; } else { __lastLabel__ = 47; __label__ = 49; break; } //@line 1860 "cPickle.c"
      case 48: // $bb52
        var $220=_PyErr_Occurred(); //@line 1861 "cPickle.c"
        var $221=($220)!=0; //@line 1861 "cPickle.c"
        if ($221) { __label__ = 53; break; } else { __label__ = 50; break; } //@line 1861 "cPickle.c"
      case 49: // $bb54
        var $222=__lastLabel__ == 47 ? $218 : ($_pr);
        var $223=($222)!=0; //@line 1843 "cPickle.c"
        if ($223) { __label__ = 38; break; } else { __label__ = 50; break; } //@line 1843 "cPickle.c"
      case 50: // $bb55
        var $224=$self_addr; //@line 1867 "cPickle.c"
        var $225=$224+48; //@line 1867 "cPickle.c"
        var $226=HEAP[$225]; //@line 1867 "cPickle.c"
        var $227=$self_addr; //@line 1867 "cPickle.c"
        var $228=FUNCTION_TABLE[$226]($227, _setitems_10325, 1); //@line 1867 "cPickle.c"
        var $229=($228) < 0; //@line 1867 "cPickle.c"
        if ($229) { __label__ = 53; break; } else { __label__ = 51; break; } //@line 1867 "cPickle.c"
      case 51: // $bb56
        var $230=$n; //@line 1870 "cPickle.c"
        var $231=($230)==1000; //@line 1870 "cPickle.c"
        if ($231) { __label__ = 18; break; } else { __label__ = 52; break; } //@line 1870 "cPickle.c"
      case 52: // $bb57
        $0=0; //@line 1871 "cPickle.c"
        __label__ = 60; break; //@line 1871 "cPickle.c"
      case 53: // $BatchFailed
        var $232=$firstitem; //@line 1874 "cPickle.c"
        var $233=($232)!=0; //@line 1874 "cPickle.c"
        if ($233) { __label__ = 54; break; } else { __label__ = 56; break; } //@line 1874 "cPickle.c"
      case 54: // $bb58
        var $234=$firstitem; //@line 1874 "cPickle.c"
        var $235=$234; //@line 1874 "cPickle.c"
        var $236=HEAP[$235]; //@line 1874 "cPickle.c"
        var $237=($236) - 1; //@line 1874 "cPickle.c"
        var $238=$firstitem; //@line 1874 "cPickle.c"
        var $239=$238; //@line 1874 "cPickle.c"
        HEAP[$239]=$237; //@line 1874 "cPickle.c"
        var $240=$firstitem; //@line 1874 "cPickle.c"
        var $241=$240; //@line 1874 "cPickle.c"
        var $242=HEAP[$241]; //@line 1874 "cPickle.c"
        var $243=($242)==0; //@line 1874 "cPickle.c"
        if ($243) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 1874 "cPickle.c"
      case 55: // $bb59
        var $244=$firstitem; //@line 1874 "cPickle.c"
        var $245=$244+4; //@line 1874 "cPickle.c"
        var $246=HEAP[$245]; //@line 1874 "cPickle.c"
        var $247=$246+24; //@line 1874 "cPickle.c"
        var $248=HEAP[$247]; //@line 1874 "cPickle.c"
        var $249=$firstitem; //@line 1874 "cPickle.c"
        FUNCTION_TABLE[$248]($249); //@line 1874 "cPickle.c"
        __label__ = 56; break; //@line 1874 "cPickle.c"
      case 56: // $bb60
        var $250=$p; //@line 1875 "cPickle.c"
        var $251=($250)!=0; //@line 1875 "cPickle.c"
        if ($251) { __label__ = 57; break; } else { __label__ = 59; break; } //@line 1875 "cPickle.c"
      case 57: // $bb61
        var $252=$p; //@line 1875 "cPickle.c"
        var $253=$252; //@line 1875 "cPickle.c"
        var $254=HEAP[$253]; //@line 1875 "cPickle.c"
        var $255=($254) - 1; //@line 1875 "cPickle.c"
        var $256=$p; //@line 1875 "cPickle.c"
        var $257=$256; //@line 1875 "cPickle.c"
        HEAP[$257]=$255; //@line 1875 "cPickle.c"
        var $258=$p; //@line 1875 "cPickle.c"
        var $259=$258; //@line 1875 "cPickle.c"
        var $260=HEAP[$259]; //@line 1875 "cPickle.c"
        var $261=($260)==0; //@line 1875 "cPickle.c"
        if ($261) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 1875 "cPickle.c"
      case 58: // $bb62
        var $262=$p; //@line 1875 "cPickle.c"
        var $263=$262+4; //@line 1875 "cPickle.c"
        var $264=HEAP[$263]; //@line 1875 "cPickle.c"
        var $265=$264+24; //@line 1875 "cPickle.c"
        var $266=HEAP[$265]; //@line 1875 "cPickle.c"
        var $267=$p; //@line 1875 "cPickle.c"
        FUNCTION_TABLE[$266]($267); //@line 1875 "cPickle.c"
        __label__ = 59; break; //@line 1875 "cPickle.c"
      case 59: // $bb63
        $0=-1; //@line 1876 "cPickle.c"
        __label__ = 60; break; //@line 1876 "cPickle.c"
      case 60: // $bb64
        var $268=$0; //@line 1775 "cPickle.c"
        $retval=$268; //@line 1775 "cPickle.c"
        var $retval65=$retval; //@line 1775 "cPickle.c"
        ;
        return $retval65; //@line 1775 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _batch_dict_exact($self, $obj) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $obj_addr;
        var $retval;
        var $0;
        var $key=__stackBase__;
        var $value=__stackBase__+4;
        var $i;
        var $dict_size;
        var $ppos=__stackBase__+8;
        $self_addr=$self;
        $obj_addr=$obj;
        HEAP[$key]=0; //@line 1891 "cPickle.c"
        HEAP[$value]=0; //@line 1891 "cPickle.c"
        HEAP[$ppos]=0; //@line 1893 "cPickle.c"
        var $1=$obj_addr; //@line 1898 "cPickle.c"
        var $2=($1)==0; //@line 1898 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1898 "cPickle.c"
      case 1: // $bb
        ___assert_fail(__str19, __str15, 1898, ___PRETTY_FUNCTION___10501); //@line 1898 "cPickle.c"
        throw "Reached an unreachable!" //@line 1898 "cPickle.c"
      case 2: // $bb1
        var $3=$self_addr; //@line 1899 "cPickle.c"
        var $4=$3+36; //@line 1899 "cPickle.c"
        var $5=HEAP[$4]; //@line 1899 "cPickle.c"
        var $6=($5) <= 0; //@line 1899 "cPickle.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1899 "cPickle.c"
      case 3: // $bb2
        ___assert_fail(__str20, __str15, 1899, ___PRETTY_FUNCTION___10501); //@line 1899 "cPickle.c"
        throw "Reached an unreachable!" //@line 1899 "cPickle.c"
      case 4: // $bb3
        var $7=$obj_addr; //@line 1901 "cPickle.c"
        var $8=_PyDict_Size($7); //@line 1901 "cPickle.c"
        $dict_size=$8; //@line 1901 "cPickle.c"
        var $9=$dict_size; //@line 1904 "cPickle.c"
        var $10=($9)==1; //@line 1904 "cPickle.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 12; break; } //@line 1904 "cPickle.c"
      case 5: // $bb4
        var $11=$obj_addr; //@line 1905 "cPickle.c"
        var $12=_PyDict_Next($11, $ppos, $key, $value); //@line 1905 "cPickle.c"
        var $13=HEAP[$key]; //@line 1906 "cPickle.c"
        var $14=$self_addr; //@line 1906 "cPickle.c"
        var $15=_save($14, $13, 0); //@line 1906 "cPickle.c"
        var $16=($15) < 0; //@line 1906 "cPickle.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1906 "cPickle.c"
      case 6: // $bb5
        $0=-1; //@line 1907 "cPickle.c"
        __label__ = 26; break; //@line 1907 "cPickle.c"
      case 7: // $bb6
        var $17=HEAP[$value]; //@line 1908 "cPickle.c"
        var $18=$self_addr; //@line 1908 "cPickle.c"
        var $19=_save($18, $17, 0); //@line 1908 "cPickle.c"
        var $20=($19) < 0; //@line 1908 "cPickle.c"
        if ($20) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1908 "cPickle.c"
      case 8: // $bb7
        $0=-1; //@line 1909 "cPickle.c"
        __label__ = 26; break; //@line 1909 "cPickle.c"
      case 9: // $bb8
        var $21=$self_addr; //@line 1910 "cPickle.c"
        var $22=$21+48; //@line 1910 "cPickle.c"
        var $23=HEAP[$22]; //@line 1910 "cPickle.c"
        var $24=$self_addr; //@line 1910 "cPickle.c"
        var $25=FUNCTION_TABLE[$23]($24, _setitem_10499, 1); //@line 1910 "cPickle.c"
        var $26=($25) < 0; //@line 1910 "cPickle.c"
        if ($26) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1910 "cPickle.c"
      case 10: // $bb9
        $0=-1; //@line 1911 "cPickle.c"
        __label__ = 26; break; //@line 1911 "cPickle.c"
      case 11: // $bb10
        $0=0; //@line 1912 "cPickle.c"
        __label__ = 26; break; //@line 1912 "cPickle.c"
      case 12: // $bb11
        $i=0; //@line 1917 "cPickle.c"
        var $27=$self_addr; //@line 1918 "cPickle.c"
        var $28=$27+48; //@line 1918 "cPickle.c"
        var $29=HEAP[$28]; //@line 1918 "cPickle.c"
        var $30=$self_addr; //@line 1918 "cPickle.c"
        var $31=FUNCTION_TABLE[$29]($30, _MARKv, 1); //@line 1918 "cPickle.c"
        var $32=($31) < 0; //@line 1918 "cPickle.c"
        if ($32) { __label__ = 13; break; } else { __label__ = 19; break; } //@line 1918 "cPickle.c"
      case 13: // $bb12
        $0=-1; //@line 1919 "cPickle.c"
        __label__ = 26; break; //@line 1919 "cPickle.c"
      case 14: // $bb14
        var $33=HEAP[$key]; //@line 1921 "cPickle.c"
        var $34=$self_addr; //@line 1921 "cPickle.c"
        var $35=_save($34, $33, 0); //@line 1921 "cPickle.c"
        var $36=($35) < 0; //@line 1921 "cPickle.c"
        if ($36) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1921 "cPickle.c"
      case 15: // $bb15
        $0=-1; //@line 1922 "cPickle.c"
        __label__ = 26; break; //@line 1922 "cPickle.c"
      case 16: // $bb16
        var $37=HEAP[$value]; //@line 1923 "cPickle.c"
        var $38=$self_addr; //@line 1923 "cPickle.c"
        var $39=_save($38, $37, 0); //@line 1923 "cPickle.c"
        var $40=($39) < 0; //@line 1923 "cPickle.c"
        if ($40) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1923 "cPickle.c"
      case 17: // $bb17
        $0=-1; //@line 1924 "cPickle.c"
        __label__ = 26; break; //@line 1924 "cPickle.c"
      case 18: // $bb18
        var $41=$i; //@line 1925 "cPickle.c"
        var $42=($41) + 1; //@line 1925 "cPickle.c"
        $i=$42; //@line 1925 "cPickle.c"
        var $43=$i; //@line 1925 "cPickle.c"
        var $44=($43)==1000; //@line 1925 "cPickle.c"
        if ($44) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 1925 "cPickle.c"
      case 19: // $bb19
        var $45=$obj_addr; //@line 1920 "cPickle.c"
        var $46=_PyDict_Next($45, $ppos, $key, $value); //@line 1920 "cPickle.c"
        var $47=($46)!=0; //@line 1920 "cPickle.c"
        if ($47) { __label__ = 14; break; } else { __label__ = 20; break; } //@line 1920 "cPickle.c"
      case 20: // $bb20
        var $48=$self_addr; //@line 1928 "cPickle.c"
        var $49=$48+48; //@line 1928 "cPickle.c"
        var $50=HEAP[$49]; //@line 1928 "cPickle.c"
        var $51=$self_addr; //@line 1928 "cPickle.c"
        var $52=FUNCTION_TABLE[$50]($51, _setitems_10500, 1); //@line 1928 "cPickle.c"
        var $53=($52) < 0; //@line 1928 "cPickle.c"
        if ($53) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1928 "cPickle.c"
      case 21: // $bb21
        $0=-1; //@line 1929 "cPickle.c"
        __label__ = 26; break; //@line 1929 "cPickle.c"
      case 22: // $bb22
        var $54=$obj_addr; //@line 1930 "cPickle.c"
        var $55=_PyDict_Size($54); //@line 1930 "cPickle.c"
        var $56=$dict_size; //@line 1930 "cPickle.c"
        var $57=($55)!=($56); //@line 1930 "cPickle.c"
        if ($57) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1930 "cPickle.c"
      case 23: // $bb23
        var $58=HEAP[_PyExc_RuntimeError]; //@line 1931 "cPickle.c"
        var $59=_PyErr_Format($58, __str21, allocate(1, "i32", ALLOC_STACK)); //@line 1931 "cPickle.c"
        $0=-1; //@line 1934 "cPickle.c"
        __label__ = 26; break; //@line 1934 "cPickle.c"
      case 24: // $bb24
        var $60=$i; //@line 1937 "cPickle.c"
        var $61=($60)==1000; //@line 1937 "cPickle.c"
        if ($61) { __label__ = 12; break; } else { __label__ = 25; break; } //@line 1937 "cPickle.c"
      case 25: // $bb25
        $0=0; //@line 1938 "cPickle.c"
        __label__ = 26; break; //@line 1938 "cPickle.c"
      case 26: // $bb26
        var $62=$0; //@line 1907 "cPickle.c"
        $retval=$62; //@line 1907 "cPickle.c"
        var $retval27=$retval; //@line 1907 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 1907 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_dict($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 3; _memset(__stackBase__, 0, 3);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $iftmp_117;
        var $iftmp_113;
        var $res;
        var $s=__stackBase__;
        var $len;
        var $iter;
        $self_addr=$self;
        $args_addr=$args;
        $res=-1; //@line 1944 "cPickle.c"
        var $1=$self_addr; //@line 1948 "cPickle.c"
        var $2=$1+44; //@line 1948 "cPickle.c"
        var $3=HEAP[$2]; //@line 1948 "cPickle.c"
        var $4=($3)!=0; //@line 1948 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1948 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1948 "cPickle.c"
        var $6=$args_addr; //@line 1948 "cPickle.c"
        var $7=_fast_save_enter($5, $6); //@line 1948 "cPickle.c"
        var $8=($7)==0; //@line 1948 "cPickle.c"
        if ($8) { __label__ = 24; break; } else { __label__ = 2; break; } //@line 1948 "cPickle.c"
      case 2: // $bb1
        var $9=$self_addr; //@line 1952 "cPickle.c"
        var $10=$9+40; //@line 1952 "cPickle.c"
        var $11=HEAP[$10]; //@line 1952 "cPickle.c"
        var $12=($11)!=0; //@line 1952 "cPickle.c"
        var $13=$s; //@line 1953 "cPickle.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1952 "cPickle.c"
      case 3: // $bb2
        HEAP[$13]=125; //@line 1953 "cPickle.c"
        $len=1; //@line 1954 "cPickle.c"
        __label__ = 5; break; //@line 1954 "cPickle.c"
      case 4: // $bb3
        HEAP[$13]=40; //@line 1957 "cPickle.c"
        var $14=$s+1; //@line 1958 "cPickle.c"
        HEAP[$14]=100; //@line 1958 "cPickle.c"
        $len=2; //@line 1959 "cPickle.c"
        __label__ = 5; break; //@line 1959 "cPickle.c"
      case 5: // $bb4
        var $15=$self_addr; //@line 1962 "cPickle.c"
        var $16=$15+48; //@line 1962 "cPickle.c"
        var $17=HEAP[$16]; //@line 1962 "cPickle.c"
        var $18=$self_addr; //@line 1962 "cPickle.c"
        var $s5=$s; //@line 1962 "cPickle.c"
        var $19=$len; //@line 1962 "cPickle.c"
        var $20=FUNCTION_TABLE[$17]($18, $s5, $19); //@line 1962 "cPickle.c"
        var $21=($20) < 0; //@line 1962 "cPickle.c"
        if ($21) { __label__ = 24; break; } else { __label__ = 6; break; } //@line 1962 "cPickle.c"
      case 6: // $bb6
        var $22=$args_addr; //@line 1966 "cPickle.c"
        var $23=_PyDict_Size($22); //@line 1966 "cPickle.c"
        $len=$23; //@line 1966 "cPickle.c"
        var $24=$len; //@line 1966 "cPickle.c"
        var $25=($24) < 0; //@line 1966 "cPickle.c"
        if ($25) { __label__ = 24; break; } else { __label__ = 7; break; } //@line 1966 "cPickle.c"
      case 7: // $bb7
        var $26=$len; //@line 1969 "cPickle.c"
        var $27=($26)==0; //@line 1969 "cPickle.c"
        var $28=$self_addr; //@line 1970 "cPickle.c"
        var $29=$args_addr; //@line 1970 "cPickle.c"
        if ($27) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 1969 "cPickle.c"
      case 8: // $bb8
        var $30=_put($28, $29); //@line 1970 "cPickle.c"
        var $31=($30) >= 0; //@line 1970 "cPickle.c"
        if ($31) { __label__ = 9; break; } else { __label__ = 24; break; } //@line 1970 "cPickle.c"
      case 9: // $bb9
        $res=0; //@line 1971 "cPickle.c"
        __label__ = 24; break; //@line 1971 "cPickle.c"
      case 10: // $bb11
        var $32=_put2($28, $29); //@line 1974 "cPickle.c"
        var $33=($32) < 0; //@line 1974 "cPickle.c"
        if ($33) { __label__ = 24; break; } else { __label__ = 11; break; } //@line 1974 "cPickle.c"
      case 11: // $bb12
        var $34=$args_addr; //@line 1978 "cPickle.c"
        var $35=$34+4; //@line 1978 "cPickle.c"
        var $36=HEAP[$35]; //@line 1978 "cPickle.c"
        var $37=($36)!=(_PyDict_Type); //@line 1978 "cPickle.c"
        if ($37) { __label__ = 17; break; } else { __label__ = 12; break; } //@line 1978 "cPickle.c"
      case 12: // $bb13
        var $38=$self_addr; //@line 1978 "cPickle.c"
        var $39=$38+36; //@line 1978 "cPickle.c"
        var $40=HEAP[$39]; //@line 1978 "cPickle.c"
        var $41=($40) <= 0; //@line 1978 "cPickle.c"
        if ($41) { __label__ = 17; break; } else { __label__ = 13; break; } //@line 1978 "cPickle.c"
      case 13: // $bb14
        var $42=HEAP[__PyThreadState_Current]; //@line 1981 "cPickle.c"
        var $43=$42+12; //@line 1981 "cPickle.c"
        var $44=HEAP[$43]; //@line 1981 "cPickle.c"
        var $45=($44) + 1; //@line 1981 "cPickle.c"
        var $46=$42+12; //@line 1981 "cPickle.c"
        HEAP[$46]=$45; //@line 1981 "cPickle.c"
        var $47=$42+12; //@line 1981 "cPickle.c"
        var $48=HEAP[$47]; //@line 1981 "cPickle.c"
        var $49=HEAP[__Py_CheckRecursionLimit]; //@line 1981 "cPickle.c"
        var $50=($48) <= ($49); //@line 1981 "cPickle.c"
        if ($50) { __label__ = 16; break; } else { __label__ = 14; break; } //@line 1981 "cPickle.c"
      case 14: // $bb15
        var $51=__Py_CheckRecursiveCall(__str17); //@line 1981 "cPickle.c"
        var $52=($51)==0; //@line 1981 "cPickle.c"
        if ($52) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 1981 "cPickle.c"
      case 15: // $bb18
        $iftmp_113=1; //@line 1981 "cPickle.c"
        __label__ = 24; break;
      case 16: // $bb19
        $iftmp_113=0; //@line 1981 "cPickle.c"
        var $53=$self_addr; //@line 1982 "cPickle.c"
        var $54=$args_addr; //@line 1982 "cPickle.c"
        var $55=_batch_dict_exact($53, $54); //@line 1982 "cPickle.c"
        $res=$55; //@line 1982 "cPickle.c"
        var $56=HEAP[__PyThreadState_Current]; //@line 1983 "cPickle.c"
        var $57=$56+12; //@line 1983 "cPickle.c"
        var $58=HEAP[$57]; //@line 1983 "cPickle.c"
        var $59=($58) - 1; //@line 1983 "cPickle.c"
        var $60=$56+12; //@line 1983 "cPickle.c"
        HEAP[$60]=$59; //@line 1983 "cPickle.c"
        __label__ = 24; break; //@line 1983 "cPickle.c"
      case 17: // $bb21
        var $61=$args_addr; //@line 1986 "cPickle.c"
        var $62=_PyObject_CallMethod($61, __str22, __str23, allocate(1, "i32", ALLOC_STACK)); //@line 1986 "cPickle.c"
        $iter=$62; //@line 1986 "cPickle.c"
        var $63=($62)==0; //@line 1987 "cPickle.c"
        if ($63) { __label__ = 24; break; } else { __label__ = 18; break; } //@line 1987 "cPickle.c"
      case 18: // $bb22
        var $64=HEAP[__PyThreadState_Current]; //@line 1989 "cPickle.c"
        var $65=$64+12; //@line 1989 "cPickle.c"
        var $66=HEAP[$65]; //@line 1989 "cPickle.c"
        var $67=($66) + 1; //@line 1989 "cPickle.c"
        var $68=$64+12; //@line 1989 "cPickle.c"
        HEAP[$68]=$67; //@line 1989 "cPickle.c"
        var $69=$64+12; //@line 1989 "cPickle.c"
        var $70=HEAP[$69]; //@line 1989 "cPickle.c"
        var $71=HEAP[__Py_CheckRecursionLimit]; //@line 1989 "cPickle.c"
        var $72=($70) <= ($71); //@line 1989 "cPickle.c"
        if ($72) { __label__ = 21; break; } else { __label__ = 19; break; } //@line 1989 "cPickle.c"
      case 19: // $bb23
        var $73=__Py_CheckRecursiveCall(__str17); //@line 1989 "cPickle.c"
        var $74=($73)==0; //@line 1989 "cPickle.c"
        if ($74) { __label__ = 21; break; } else { __label__ = 20; break; } //@line 1989 "cPickle.c"
      case 20: // $bb26
        $iftmp_117=1; //@line 1989 "cPickle.c"
        __label__ = 22; break;
      case 21: // $bb27
        $iftmp_117=0; //@line 1989 "cPickle.c"
        var $75=$self_addr; //@line 1990 "cPickle.c"
        var $76=$iter; //@line 1990 "cPickle.c"
        var $77=_batch_dict($75, $76); //@line 1990 "cPickle.c"
        $res=$77; //@line 1990 "cPickle.c"
        var $78=HEAP[__PyThreadState_Current]; //@line 1991 "cPickle.c"
        var $79=$78+12; //@line 1991 "cPickle.c"
        var $80=HEAP[$79]; //@line 1991 "cPickle.c"
        var $81=($80) - 1; //@line 1991 "cPickle.c"
        var $82=$78+12; //@line 1991 "cPickle.c"
        HEAP[$82]=$81; //@line 1991 "cPickle.c"
        __label__ = 22; break; //@line 1991 "cPickle.c"
      case 22: // $bb28
        var $83=$iter; //@line 1993 "cPickle.c"
        var $84=$83; //@line 1993 "cPickle.c"
        var $85=HEAP[$84]; //@line 1993 "cPickle.c"
        var $86=($85) - 1; //@line 1993 "cPickle.c"
        var $87=$iter; //@line 1993 "cPickle.c"
        var $88=$87; //@line 1993 "cPickle.c"
        HEAP[$88]=$86; //@line 1993 "cPickle.c"
        var $89=$iter; //@line 1993 "cPickle.c"
        var $90=$89; //@line 1993 "cPickle.c"
        var $91=HEAP[$90]; //@line 1993 "cPickle.c"
        var $92=($91)==0; //@line 1993 "cPickle.c"
        if ($92) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1993 "cPickle.c"
      case 23: // $bb29
        var $93=$iter; //@line 1993 "cPickle.c"
        var $94=$93+4; //@line 1993 "cPickle.c"
        var $95=HEAP[$94]; //@line 1993 "cPickle.c"
        var $96=$95+24; //@line 1993 "cPickle.c"
        var $97=HEAP[$96]; //@line 1993 "cPickle.c"
        var $98=$iter; //@line 1993 "cPickle.c"
        FUNCTION_TABLE[$97]($98); //@line 1993 "cPickle.c"
        __label__ = 24; break; //@line 1996 "cPickle.c"
      case 24: // $finally
        var $99=$self_addr; //@line 1997 "cPickle.c"
        var $100=$99+44; //@line 1997 "cPickle.c"
        var $101=HEAP[$100]; //@line 1997 "cPickle.c"
        var $102=($101)!=0; //@line 1997 "cPickle.c"
        if ($102) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 1997 "cPickle.c"
      case 25: // $bb30
        var $103=$self_addr; //@line 1997 "cPickle.c"
        var $104=$args_addr; //@line 1997 "cPickle.c"
        var $105=_fast_save_leave($103, $104); //@line 1997 "cPickle.c"
        var $106=($105)==0; //@line 1997 "cPickle.c"
        if ($106) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1997 "cPickle.c"
      case 26: // $bb31
        $res=-1; //@line 1998 "cPickle.c"
        __label__ = 27; break; //@line 1998 "cPickle.c"
      case 27: // $bb32
        var $107=$res; //@line 2000 "cPickle.c"
        $0=$107; //@line 2000 "cPickle.c"
        var $108=$0; //@line 2000 "cPickle.c"
        $retval=$108; //@line 2000 "cPickle.c"
        var $retval33=$retval; //@line 2000 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 2000 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_inst($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $class;
        var $module;
        var $name;
        var $state;
        var $getinitargs_func;
        var $getstate_func;
        var $class_args;
        var $module_str;
        var $name_str;
        var $module_size;
        var $name_size;
        var $res;
        var $element;
        var $i;
        var $len;
        $self_addr=$self;
        $args_addr=$args;
        $class=0; //@line 2007 "cPickle.c"
        $module=0; //@line 2007 "cPickle.c"
        $name=0; //@line 2007 "cPickle.c"
        $state=0; //@line 2007 "cPickle.c"
        $getinitargs_func=0; //@line 2008 "cPickle.c"
        $getstate_func=0; //@line 2008 "cPickle.c"
        $class_args=0; //@line 2008 "cPickle.c"
        $res=-1; //@line 2010 "cPickle.c"
        var $1=$self_addr; //@line 2014 "cPickle.c"
        var $2=$1+44; //@line 2014 "cPickle.c"
        var $3=HEAP[$2]; //@line 2014 "cPickle.c"
        var $4=($3)!=0; //@line 2014 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2014 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 2014 "cPickle.c"
        var $6=$args_addr; //@line 2014 "cPickle.c"
        var $7=_fast_save_enter($5, $6); //@line 2014 "cPickle.c"
        var $8=($7)==0; //@line 2014 "cPickle.c"
        if ($8) { __label__ = 44; break; } else { __label__ = 2; break; } //@line 2014 "cPickle.c"
      case 2: // $bb1
        var $9=$self_addr; //@line 2017 "cPickle.c"
        var $10=$9+48; //@line 2017 "cPickle.c"
        var $11=HEAP[$10]; //@line 2017 "cPickle.c"
        var $12=$self_addr; //@line 2017 "cPickle.c"
        var $13=FUNCTION_TABLE[$11]($12, _MARKv, 1); //@line 2017 "cPickle.c"
        var $14=($13) < 0; //@line 2017 "cPickle.c"
        if ($14) { __label__ = 44; break; } else { __label__ = 3; break; } //@line 2017 "cPickle.c"
      case 3: // $bb2
        var $15=HEAP[___class___str]; //@line 2020 "cPickle.c"
        var $16=$args_addr; //@line 2020 "cPickle.c"
        var $17=_PyObject_GetAttr($16, $15); //@line 2020 "cPickle.c"
        $class=$17; //@line 2020 "cPickle.c"
        var $18=$class; //@line 2020 "cPickle.c"
        var $19=($18)==0; //@line 2020 "cPickle.c"
        if ($19) { __label__ = 44; break; } else { __label__ = 4; break; } //@line 2020 "cPickle.c"
      case 4: // $bb3
        var $20=$self_addr; //@line 2023 "cPickle.c"
        var $21=$20+40; //@line 2023 "cPickle.c"
        var $22=HEAP[$21]; //@line 2023 "cPickle.c"
        var $23=($22)!=0; //@line 2023 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2023 "cPickle.c"
      case 5: // $bb4
        var $24=$self_addr; //@line 2024 "cPickle.c"
        var $25=$class; //@line 2024 "cPickle.c"
        var $26=_save($24, $25, 0); //@line 2024 "cPickle.c"
        var $27=($26) < 0; //@line 2024 "cPickle.c"
        if ($27) { __label__ = 44; break; } else { __label__ = 6; break; } //@line 2024 "cPickle.c"
      case 6: // $bb5
        var $28=HEAP[___getinitargs___str]; //@line 2028 "cPickle.c"
        var $29=$args_addr; //@line 2028 "cPickle.c"
        var $30=_PyObject_GetAttr($29, $28); //@line 2028 "cPickle.c"
        $getinitargs_func=$30; //@line 2028 "cPickle.c"
        var $31=($30)!=0; //@line 2028 "cPickle.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 18; break; } //@line 2028 "cPickle.c"
      case 7: // $bb6
        $element=0; //@line 2029 "cPickle.c"
        var $32=HEAP[_empty_tuple]; //@line 2032 "cPickle.c"
        var $33=$getinitargs_func; //@line 2032 "cPickle.c"
        var $34=_PyObject_Call($33, $32, 0); //@line 2032 "cPickle.c"
        $class_args=$34; //@line 2032 "cPickle.c"
        var $35=$class_args; //@line 2032 "cPickle.c"
        var $36=($35)==0; //@line 2032 "cPickle.c"
        if ($36) { __label__ = 44; break; } else { __label__ = 8; break; } //@line 2032 "cPickle.c"
      case 8: // $bb7
        var $37=$class_args; //@line 2036 "cPickle.c"
        var $38=_PyObject_Size($37); //@line 2036 "cPickle.c"
        $len=$38; //@line 2036 "cPickle.c"
        var $39=$len; //@line 2036 "cPickle.c"
        var $40=($39) < 0; //@line 2036 "cPickle.c"
        if ($40) { __label__ = 44; break; } else { __label__ = 9; break; } //@line 2036 "cPickle.c"
      case 9: // $bb8
        $i=0; //@line 2039 "cPickle.c"
        __label__ = 17; break; //@line 2039 "cPickle.c"
      case 10: // $bb9
        var $41=$class_args; //@line 2040 "cPickle.c"
        var $42=$i; //@line 2040 "cPickle.c"
        var $43=_PySequence_GetItem($41, $42); //@line 2040 "cPickle.c"
        $element=$43; //@line 2040 "cPickle.c"
        var $44=$element; //@line 2040 "cPickle.c"
        var $45=($44)==0; //@line 2040 "cPickle.c"
        if ($45) { __label__ = 44; break; } else { __label__ = 11; break; } //@line 2040 "cPickle.c"
      case 11: // $bb10
        var $46=$self_addr; //@line 2043 "cPickle.c"
        var $47=$element; //@line 2043 "cPickle.c"
        var $48=_save($46, $47, 0); //@line 2043 "cPickle.c"
        var $49=($48) < 0; //@line 2043 "cPickle.c"
        var $50=$element; //@line 2044 "cPickle.c"
        var $51=$50; //@line 2044 "cPickle.c"
        var $52=HEAP[$51]; //@line 2044 "cPickle.c"
        var $53=($52) - 1; //@line 2044 "cPickle.c"
        var $54=$element; //@line 2044 "cPickle.c"
        var $55=$54; //@line 2044 "cPickle.c"
        HEAP[$55]=$53; //@line 2044 "cPickle.c"
        var $56=$element; //@line 2044 "cPickle.c"
        var $57=$56; //@line 2044 "cPickle.c"
        var $58=HEAP[$57]; //@line 2044 "cPickle.c"
        var $59=($58)==0; //@line 2044 "cPickle.c"
        if ($49) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 2043 "cPickle.c"
      case 12: // $bb11
        if ($59) { __label__ = 13; break; } else { __label__ = 44; break; } //@line 2044 "cPickle.c"
      case 13: // $bb12
        var $60=$element; //@line 2044 "cPickle.c"
        var $61=$60+4; //@line 2044 "cPickle.c"
        var $62=HEAP[$61]; //@line 2044 "cPickle.c"
        var $63=$62+24; //@line 2044 "cPickle.c"
        var $64=HEAP[$63]; //@line 2044 "cPickle.c"
        var $65=$element; //@line 2044 "cPickle.c"
        FUNCTION_TABLE[$64]($65); //@line 2044 "cPickle.c"
        __label__ = 44; break; //@line 2044 "cPickle.c"
      case 14: // $bb14
        if ($59) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2048 "cPickle.c"
      case 15: // $bb15
        var $66=$element; //@line 2048 "cPickle.c"
        var $67=$66+4; //@line 2048 "cPickle.c"
        var $68=HEAP[$67]; //@line 2048 "cPickle.c"
        var $69=$68+24; //@line 2048 "cPickle.c"
        var $70=HEAP[$69]; //@line 2048 "cPickle.c"
        var $71=$element; //@line 2048 "cPickle.c"
        FUNCTION_TABLE[$70]($71); //@line 2048 "cPickle.c"
        __label__ = 16; break; //@line 2048 "cPickle.c"
      case 16: // $bb16
        var $72=$i; //@line 2039 "cPickle.c"
        var $73=($72) + 1; //@line 2039 "cPickle.c"
        $i=$73; //@line 2039 "cPickle.c"
        __label__ = 17; break; //@line 2039 "cPickle.c"
      case 17: // $bb17
        var $74=$i; //@line 2039 "cPickle.c"
        var $75=$len; //@line 2039 "cPickle.c"
        var $76=($74) < ($75); //@line 2039 "cPickle.c"
        if ($76) { __label__ = 10; break; } else { __label__ = 20; break; } //@line 2039 "cPickle.c"
      case 18: // $bb19
        var $77=HEAP[_PyExc_AttributeError]; //@line 2052 "cPickle.c"
        var $78=_PyErr_ExceptionMatches($77); //@line 2052 "cPickle.c"
        var $79=($78)!=0; //@line 2052 "cPickle.c"
        if ($79) { __label__ = 19; break; } else { __label__ = 44; break; } //@line 2052 "cPickle.c"
      case 19: // $bb20
        _PyErr_Clear(); //@line 2053 "cPickle.c"
        __label__ = 20; break; //@line 2053 "cPickle.c"
      case 20: // $bb21
        var $80=$self_addr; //@line 2058 "cPickle.c"
        var $81=$80+40; //@line 2058 "cPickle.c"
        var $82=HEAP[$81]; //@line 2058 "cPickle.c"
        var $83=($82)==0; //@line 2058 "cPickle.c"
        if ($83) { __label__ = 21; break; } else { __label__ = 31; break; } //@line 2058 "cPickle.c"
      case 21: // $bb22
        var $84=$class; //@line 2059 "cPickle.c"
        var $85=$84; //@line 2059 "cPickle.c"
        var $86=$85+16; //@line 2059 "cPickle.c"
        var $87=HEAP[$86]; //@line 2059 "cPickle.c"
        $name=$87; //@line 2059 "cPickle.c"
        var $88=$name; //@line 2059 "cPickle.c"
        var $89=($88)==0; //@line 2059 "cPickle.c"
        if ($89) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 2059 "cPickle.c"
      case 22: // $bb23
        var $90=HEAP[_PicklingError]; //@line 2060 "cPickle.c"
        _PyErr_SetString($90, __str24); //@line 2060 "cPickle.c"
        __label__ = 44; break; //@line 2060 "cPickle.c"
      case 23: // $bb24
        var $91=$class; //@line 2064 "cPickle.c"
        var $92=$name; //@line 2064 "cPickle.c"
        var $93=_whichmodule($91, $92); //@line 2064 "cPickle.c"
        $module=$93; //@line 2064 "cPickle.c"
        var $94=$module; //@line 2064 "cPickle.c"
        var $95=($94)==0; //@line 2064 "cPickle.c"
        if ($95) { __label__ = 44; break; } else { __label__ = 24; break; } //@line 2064 "cPickle.c"
      case 24: // $bb25
        var $96=$module; //@line 2068 "cPickle.c"
        var $97=_PyString_Size($96); //@line 2068 "cPickle.c"
        $module_size=$97; //@line 2068 "cPickle.c"
        var $98=$module_size; //@line 2068 "cPickle.c"
        var $99=($98) < 0; //@line 2068 "cPickle.c"
        if ($99) { __label__ = 44; break; } else { __label__ = 25; break; } //@line 2068 "cPickle.c"
      case 25: // $bb26
        var $100=$name; //@line 2068 "cPickle.c"
        var $101=_PyString_Size($100); //@line 2068 "cPickle.c"
        $name_size=$101; //@line 2068 "cPickle.c"
        var $102=$name_size; //@line 2068 "cPickle.c"
        var $103=($102) < 0; //@line 2068 "cPickle.c"
        if ($103) { __label__ = 44; break; } else { __label__ = 26; break; } //@line 2068 "cPickle.c"
      case 26: // $bb27
        var $104=$module; //@line 2072 "cPickle.c"
        var $105=$104; //@line 2072 "cPickle.c"
        var $106=$105+20; //@line 2072 "cPickle.c"
        var $107=$106; //@line 2072 "cPickle.c"
        $module_str=$107; //@line 2072 "cPickle.c"
        var $108=$name; //@line 2073 "cPickle.c"
        var $109=$108; //@line 2073 "cPickle.c"
        var $110=$109+20; //@line 2073 "cPickle.c"
        var $111=$110; //@line 2073 "cPickle.c"
        $name_str=$111; //@line 2073 "cPickle.c"
        var $112=$self_addr; //@line 2075 "cPickle.c"
        var $113=$112+48; //@line 2075 "cPickle.c"
        var $114=HEAP[$113]; //@line 2075 "cPickle.c"
        var $115=$self_addr; //@line 2075 "cPickle.c"
        var $116=FUNCTION_TABLE[$114]($115, _inst_10654, 1); //@line 2075 "cPickle.c"
        var $117=($116) < 0; //@line 2075 "cPickle.c"
        if ($117) { __label__ = 44; break; } else { __label__ = 27; break; } //@line 2075 "cPickle.c"
      case 27: // $bb28
        var $118=$self_addr; //@line 2078 "cPickle.c"
        var $119=$118+48; //@line 2078 "cPickle.c"
        var $120=HEAP[$119]; //@line 2078 "cPickle.c"
        var $121=$self_addr; //@line 2078 "cPickle.c"
        var $122=$module_str; //@line 2078 "cPickle.c"
        var $123=$module_size; //@line 2078 "cPickle.c"
        var $124=FUNCTION_TABLE[$120]($121, $122, $123); //@line 2078 "cPickle.c"
        var $125=($124) < 0; //@line 2078 "cPickle.c"
        if ($125) { __label__ = 44; break; } else { __label__ = 28; break; } //@line 2078 "cPickle.c"
      case 28: // $bb29
        var $126=$self_addr; //@line 2081 "cPickle.c"
        var $127=$126+48; //@line 2081 "cPickle.c"
        var $128=HEAP[$127]; //@line 2081 "cPickle.c"
        var $129=$self_addr; //@line 2081 "cPickle.c"
        var $130=FUNCTION_TABLE[$128]($129, __str12, 1); //@line 2081 "cPickle.c"
        var $131=($130) < 0; //@line 2081 "cPickle.c"
        if ($131) { __label__ = 44; break; } else { __label__ = 29; break; } //@line 2081 "cPickle.c"
      case 29: // $bb30
        var $132=$self_addr; //@line 2084 "cPickle.c"
        var $133=$132+48; //@line 2084 "cPickle.c"
        var $134=HEAP[$133]; //@line 2084 "cPickle.c"
        var $135=$self_addr; //@line 2084 "cPickle.c"
        var $136=$name_str; //@line 2084 "cPickle.c"
        var $137=$name_size; //@line 2084 "cPickle.c"
        var $138=FUNCTION_TABLE[$134]($135, $136, $137); //@line 2084 "cPickle.c"
        var $139=($138) < 0; //@line 2084 "cPickle.c"
        if ($139) { __label__ = 44; break; } else { __label__ = 30; break; } //@line 2084 "cPickle.c"
      case 30: // $bb31
        var $140=$self_addr; //@line 2087 "cPickle.c"
        var $141=$140+48; //@line 2087 "cPickle.c"
        var $142=HEAP[$141]; //@line 2087 "cPickle.c"
        var $143=$self_addr; //@line 2087 "cPickle.c"
        var $144=FUNCTION_TABLE[$142]($143, __str12, 1); //@line 2087 "cPickle.c"
        var $145=($144) < 0; //@line 2087 "cPickle.c"
        if ($145) { __label__ = 44; break; } else { __label__ = 32; break; } //@line 2087 "cPickle.c"
      case 31: // $bb33
        var $146=$self_addr; //@line 2090 "cPickle.c"
        var $147=$146+48; //@line 2090 "cPickle.c"
        var $148=HEAP[$147]; //@line 2090 "cPickle.c"
        var $149=$self_addr; //@line 2090 "cPickle.c"
        var $150=FUNCTION_TABLE[$148]($149, _obj_10655, 1); //@line 2090 "cPickle.c"
        var $151=($150) < 0; //@line 2090 "cPickle.c"
        if ($151) { __label__ = 44; break; } else { __label__ = 32; break; } //@line 2090 "cPickle.c"
      case 32: // $bb34
        var $152=HEAP[___getstate___str]; //@line 2094 "cPickle.c"
        var $153=$args_addr; //@line 2094 "cPickle.c"
        var $154=_PyObject_GetAttr($153, $152); //@line 2094 "cPickle.c"
        $getstate_func=$154; //@line 2094 "cPickle.c"
        var $155=($154)!=0; //@line 2094 "cPickle.c"
        if ($155) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 2094 "cPickle.c"
      case 33: // $bb35
        var $156=HEAP[_empty_tuple]; //@line 2095 "cPickle.c"
        var $157=$getstate_func; //@line 2095 "cPickle.c"
        var $158=_PyObject_Call($157, $156, 0); //@line 2095 "cPickle.c"
        $state=$158; //@line 2095 "cPickle.c"
        var $159=$state; //@line 2096 "cPickle.c"
        var $160=($159)==0; //@line 2096 "cPickle.c"
        if ($160) { __label__ = 44; break; } else { __label__ = 38; break; } //@line 2096 "cPickle.c"
      case 34: // $bb37
        var $161=HEAP[_PyExc_AttributeError]; //@line 2100 "cPickle.c"
        var $162=_PyErr_ExceptionMatches($161); //@line 2100 "cPickle.c"
        var $163=($162)!=0; //@line 2100 "cPickle.c"
        if ($163) { __label__ = 35; break; } else { __label__ = 44; break; } //@line 2100 "cPickle.c"
      case 35: // $bb38
        _PyErr_Clear(); //@line 2101 "cPickle.c"
        var $164=HEAP[___dict___str]; //@line 2105 "cPickle.c"
        var $165=$args_addr; //@line 2105 "cPickle.c"
        var $166=_PyObject_GetAttr($165, $164); //@line 2105 "cPickle.c"
        $state=$166; //@line 2105 "cPickle.c"
        var $167=$state; //@line 2105 "cPickle.c"
        var $168=($167)==0; //@line 2105 "cPickle.c"
        if ($168) { __label__ = 36; break; } else { __label__ = 38; break; } //@line 2105 "cPickle.c"
      case 36: // $bb39
        var $169=HEAP[_PyExc_AttributeError]; //@line 2106 "cPickle.c"
        var $170=_PyErr_ExceptionMatches($169); //@line 2106 "cPickle.c"
        var $171=($170)!=0; //@line 2106 "cPickle.c"
        if ($171) { __label__ = 37; break; } else { __label__ = 44; break; } //@line 2106 "cPickle.c"
      case 37: // $bb40
        _PyErr_Clear(); //@line 2107 "cPickle.c"
        $res=0; //@line 2110 "cPickle.c"
        __label__ = 44; break; //@line 2110 "cPickle.c"
      case 38: // $bb41
        var $172=$state; //@line 2115 "cPickle.c"
        var $173=$172+4; //@line 2115 "cPickle.c"
        var $174=HEAP[$173]; //@line 2115 "cPickle.c"
        var $175=$174+84; //@line 2115 "cPickle.c"
        var $176=HEAP[$175]; //@line 2115 "cPickle.c"
        var $177=($176) & 536870912; //@line 2115 "cPickle.c"
        var $178=($177)==0; //@line 2115 "cPickle.c"
        var $179=$self_addr; //@line 2116 "cPickle.c"
        var $180=$args_addr; //@line 2116 "cPickle.c"
        if ($178) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 2115 "cPickle.c"
      case 39: // $bb42
        var $181=_put2($179, $180); //@line 2116 "cPickle.c"
        var $182=($181) < 0; //@line 2116 "cPickle.c"
        if ($182) { __label__ = 44; break; } else { __label__ = 41; break; } //@line 2116 "cPickle.c"
      case 40: // $bb44
        var $183=_put($179, $180); //@line 2120 "cPickle.c"
        var $184=($183) < 0; //@line 2120 "cPickle.c"
        if ($184) { __label__ = 44; break; } else { __label__ = 41; break; } //@line 2120 "cPickle.c"
      case 41: // $bb45
        var $185=$self_addr; //@line 2124 "cPickle.c"
        var $186=$state; //@line 2124 "cPickle.c"
        var $187=_save($185, $186, 0); //@line 2124 "cPickle.c"
        var $188=($187) < 0; //@line 2124 "cPickle.c"
        if ($188) { __label__ = 44; break; } else { __label__ = 42; break; } //@line 2124 "cPickle.c"
      case 42: // $bb46
        var $189=$self_addr; //@line 2127 "cPickle.c"
        var $190=$189+48; //@line 2127 "cPickle.c"
        var $191=HEAP[$190]; //@line 2127 "cPickle.c"
        var $192=$self_addr; //@line 2127 "cPickle.c"
        var $193=FUNCTION_TABLE[$191]($192, _build_10656, 1); //@line 2127 "cPickle.c"
        var $194=($193) < 0; //@line 2127 "cPickle.c"
        if ($194) { __label__ = 44; break; } else { __label__ = 43; break; } //@line 2127 "cPickle.c"
      case 43: // $bb47
        $res=0; //@line 2130 "cPickle.c"
        __label__ = 44; break; //@line 2132 "cPickle.c"
      case 44: // $finally
        var $195=$self_addr; //@line 2133 "cPickle.c"
        var $196=$195+44; //@line 2133 "cPickle.c"
        var $197=HEAP[$196]; //@line 2133 "cPickle.c"
        var $198=($197)!=0; //@line 2133 "cPickle.c"
        if ($198) { __label__ = 45; break; } else { __label__ = 47; break; } //@line 2133 "cPickle.c"
      case 45: // $bb48
        var $199=$self_addr; //@line 2133 "cPickle.c"
        var $200=$args_addr; //@line 2133 "cPickle.c"
        var $201=_fast_save_leave($199, $200); //@line 2133 "cPickle.c"
        var $202=($201)==0; //@line 2133 "cPickle.c"
        if ($202) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 2133 "cPickle.c"
      case 46: // $bb49
        $res=-1; //@line 2134 "cPickle.c"
        __label__ = 47; break; //@line 2134 "cPickle.c"
      case 47: // $bb50
        var $203=$module; //@line 2136 "cPickle.c"
        var $204=($203)!=0; //@line 2136 "cPickle.c"
        if ($204) { __label__ = 48; break; } else { __label__ = 50; break; } //@line 2136 "cPickle.c"
      case 48: // $bb51
        var $205=$module; //@line 2136 "cPickle.c"
        var $206=$205; //@line 2136 "cPickle.c"
        var $207=HEAP[$206]; //@line 2136 "cPickle.c"
        var $208=($207) - 1; //@line 2136 "cPickle.c"
        var $209=$module; //@line 2136 "cPickle.c"
        var $210=$209; //@line 2136 "cPickle.c"
        HEAP[$210]=$208; //@line 2136 "cPickle.c"
        var $211=$module; //@line 2136 "cPickle.c"
        var $212=$211; //@line 2136 "cPickle.c"
        var $213=HEAP[$212]; //@line 2136 "cPickle.c"
        var $214=($213)==0; //@line 2136 "cPickle.c"
        if ($214) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 2136 "cPickle.c"
      case 49: // $bb52
        var $215=$module; //@line 2136 "cPickle.c"
        var $216=$215+4; //@line 2136 "cPickle.c"
        var $217=HEAP[$216]; //@line 2136 "cPickle.c"
        var $218=$217+24; //@line 2136 "cPickle.c"
        var $219=HEAP[$218]; //@line 2136 "cPickle.c"
        var $220=$module; //@line 2136 "cPickle.c"
        FUNCTION_TABLE[$219]($220); //@line 2136 "cPickle.c"
        __label__ = 50; break; //@line 2136 "cPickle.c"
      case 50: // $bb53
        var $221=$class; //@line 2137 "cPickle.c"
        var $222=($221)!=0; //@line 2137 "cPickle.c"
        if ($222) { __label__ = 51; break; } else { __label__ = 53; break; } //@line 2137 "cPickle.c"
      case 51: // $bb54
        var $223=$class; //@line 2137 "cPickle.c"
        var $224=$223; //@line 2137 "cPickle.c"
        var $225=HEAP[$224]; //@line 2137 "cPickle.c"
        var $226=($225) - 1; //@line 2137 "cPickle.c"
        var $227=$class; //@line 2137 "cPickle.c"
        var $228=$227; //@line 2137 "cPickle.c"
        HEAP[$228]=$226; //@line 2137 "cPickle.c"
        var $229=$class; //@line 2137 "cPickle.c"
        var $230=$229; //@line 2137 "cPickle.c"
        var $231=HEAP[$230]; //@line 2137 "cPickle.c"
        var $232=($231)==0; //@line 2137 "cPickle.c"
        if ($232) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 2137 "cPickle.c"
      case 52: // $bb55
        var $233=$class; //@line 2137 "cPickle.c"
        var $234=$233+4; //@line 2137 "cPickle.c"
        var $235=HEAP[$234]; //@line 2137 "cPickle.c"
        var $236=$235+24; //@line 2137 "cPickle.c"
        var $237=HEAP[$236]; //@line 2137 "cPickle.c"
        var $238=$class; //@line 2137 "cPickle.c"
        FUNCTION_TABLE[$237]($238); //@line 2137 "cPickle.c"
        __label__ = 53; break; //@line 2137 "cPickle.c"
      case 53: // $bb56
        var $239=$state; //@line 2138 "cPickle.c"
        var $240=($239)!=0; //@line 2138 "cPickle.c"
        if ($240) { __label__ = 54; break; } else { __label__ = 56; break; } //@line 2138 "cPickle.c"
      case 54: // $bb57
        var $241=$state; //@line 2138 "cPickle.c"
        var $242=$241; //@line 2138 "cPickle.c"
        var $243=HEAP[$242]; //@line 2138 "cPickle.c"
        var $244=($243) - 1; //@line 2138 "cPickle.c"
        var $245=$state; //@line 2138 "cPickle.c"
        var $246=$245; //@line 2138 "cPickle.c"
        HEAP[$246]=$244; //@line 2138 "cPickle.c"
        var $247=$state; //@line 2138 "cPickle.c"
        var $248=$247; //@line 2138 "cPickle.c"
        var $249=HEAP[$248]; //@line 2138 "cPickle.c"
        var $250=($249)==0; //@line 2138 "cPickle.c"
        if ($250) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 2138 "cPickle.c"
      case 55: // $bb58
        var $251=$state; //@line 2138 "cPickle.c"
        var $252=$251+4; //@line 2138 "cPickle.c"
        var $253=HEAP[$252]; //@line 2138 "cPickle.c"
        var $254=$253+24; //@line 2138 "cPickle.c"
        var $255=HEAP[$254]; //@line 2138 "cPickle.c"
        var $256=$state; //@line 2138 "cPickle.c"
        FUNCTION_TABLE[$255]($256); //@line 2138 "cPickle.c"
        __label__ = 56; break; //@line 2138 "cPickle.c"
      case 56: // $bb59
        var $257=$getinitargs_func; //@line 2139 "cPickle.c"
        var $258=($257)!=0; //@line 2139 "cPickle.c"
        if ($258) { __label__ = 57; break; } else { __label__ = 59; break; } //@line 2139 "cPickle.c"
      case 57: // $bb60
        var $259=$getinitargs_func; //@line 2139 "cPickle.c"
        var $260=$259; //@line 2139 "cPickle.c"
        var $261=HEAP[$260]; //@line 2139 "cPickle.c"
        var $262=($261) - 1; //@line 2139 "cPickle.c"
        var $263=$getinitargs_func; //@line 2139 "cPickle.c"
        var $264=$263; //@line 2139 "cPickle.c"
        HEAP[$264]=$262; //@line 2139 "cPickle.c"
        var $265=$getinitargs_func; //@line 2139 "cPickle.c"
        var $266=$265; //@line 2139 "cPickle.c"
        var $267=HEAP[$266]; //@line 2139 "cPickle.c"
        var $268=($267)==0; //@line 2139 "cPickle.c"
        if ($268) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 2139 "cPickle.c"
      case 58: // $bb61
        var $269=$getinitargs_func; //@line 2139 "cPickle.c"
        var $270=$269+4; //@line 2139 "cPickle.c"
        var $271=HEAP[$270]; //@line 2139 "cPickle.c"
        var $272=$271+24; //@line 2139 "cPickle.c"
        var $273=HEAP[$272]; //@line 2139 "cPickle.c"
        var $274=$getinitargs_func; //@line 2139 "cPickle.c"
        FUNCTION_TABLE[$273]($274); //@line 2139 "cPickle.c"
        __label__ = 59; break; //@line 2139 "cPickle.c"
      case 59: // $bb62
        var $275=$getstate_func; //@line 2140 "cPickle.c"
        var $276=($275)!=0; //@line 2140 "cPickle.c"
        if ($276) { __label__ = 60; break; } else { __label__ = 62; break; } //@line 2140 "cPickle.c"
      case 60: // $bb63
        var $277=$getstate_func; //@line 2140 "cPickle.c"
        var $278=$277; //@line 2140 "cPickle.c"
        var $279=HEAP[$278]; //@line 2140 "cPickle.c"
        var $280=($279) - 1; //@line 2140 "cPickle.c"
        var $281=$getstate_func; //@line 2140 "cPickle.c"
        var $282=$281; //@line 2140 "cPickle.c"
        HEAP[$282]=$280; //@line 2140 "cPickle.c"
        var $283=$getstate_func; //@line 2140 "cPickle.c"
        var $284=$283; //@line 2140 "cPickle.c"
        var $285=HEAP[$284]; //@line 2140 "cPickle.c"
        var $286=($285)==0; //@line 2140 "cPickle.c"
        if ($286) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 2140 "cPickle.c"
      case 61: // $bb64
        var $287=$getstate_func; //@line 2140 "cPickle.c"
        var $288=$287+4; //@line 2140 "cPickle.c"
        var $289=HEAP[$288]; //@line 2140 "cPickle.c"
        var $290=$289+24; //@line 2140 "cPickle.c"
        var $291=HEAP[$290]; //@line 2140 "cPickle.c"
        var $292=$getstate_func; //@line 2140 "cPickle.c"
        FUNCTION_TABLE[$291]($292); //@line 2140 "cPickle.c"
        __label__ = 62; break; //@line 2140 "cPickle.c"
      case 62: // $bb65
        var $293=$class_args; //@line 2141 "cPickle.c"
        var $294=($293)!=0; //@line 2141 "cPickle.c"
        if ($294) { __label__ = 63; break; } else { __label__ = 65; break; } //@line 2141 "cPickle.c"
      case 63: // $bb66
        var $295=$class_args; //@line 2141 "cPickle.c"
        var $296=$295; //@line 2141 "cPickle.c"
        var $297=HEAP[$296]; //@line 2141 "cPickle.c"
        var $298=($297) - 1; //@line 2141 "cPickle.c"
        var $299=$class_args; //@line 2141 "cPickle.c"
        var $300=$299; //@line 2141 "cPickle.c"
        HEAP[$300]=$298; //@line 2141 "cPickle.c"
        var $301=$class_args; //@line 2141 "cPickle.c"
        var $302=$301; //@line 2141 "cPickle.c"
        var $303=HEAP[$302]; //@line 2141 "cPickle.c"
        var $304=($303)==0; //@line 2141 "cPickle.c"
        if ($304) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 2141 "cPickle.c"
      case 64: // $bb67
        var $305=$class_args; //@line 2141 "cPickle.c"
        var $306=$305+4; //@line 2141 "cPickle.c"
        var $307=HEAP[$306]; //@line 2141 "cPickle.c"
        var $308=$307+24; //@line 2141 "cPickle.c"
        var $309=HEAP[$308]; //@line 2141 "cPickle.c"
        var $310=$class_args; //@line 2141 "cPickle.c"
        FUNCTION_TABLE[$309]($310); //@line 2141 "cPickle.c"
        __label__ = 65; break; //@line 2141 "cPickle.c"
      case 65: // $bb68
        var $311=$res; //@line 2143 "cPickle.c"
        $0=$311; //@line 2143 "cPickle.c"
        var $312=$0; //@line 2143 "cPickle.c"
        $retval=$312; //@line 2143 "cPickle.c"
        var $retval69=$retval; //@line 2143 "cPickle.c"
        ;
        return $retval69; //@line 2143 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_global($self, $args, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 5; _memset(__stackBase__, 0, 5);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $name_addr;
        var $retval;
        var $0;
        var $global_name;
        var $module;
        var $mod;
        var $klass;
        var $name_str;
        var $module_str;
        var $module_size;
        var $name_size;
        var $res;
        var $py_code;
        var $code;
        var $c_str=__stackBase__;
        var $n;
        $self_addr=$self;
        $args_addr=$args;
        $name_addr=$name;
        $global_name=0; //@line 2150 "cPickle.c"
        $module=0; //@line 2150 "cPickle.c"
        $mod=0; //@line 2150 "cPickle.c"
        $klass=0; //@line 2150 "cPickle.c"
        $res=-1; //@line 2152 "cPickle.c"
        var $1=$name_addr; //@line 2156 "cPickle.c"
        var $2=($1)!=0; //@line 2156 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2156 "cPickle.c"
      case 1: // $bb
        var $3=$name_addr; //@line 2157 "cPickle.c"
        $global_name=$3; //@line 2157 "cPickle.c"
        var $4=$global_name; //@line 2158 "cPickle.c"
        var $5=$4; //@line 2158 "cPickle.c"
        var $6=HEAP[$5]; //@line 2158 "cPickle.c"
        var $7=($6) + 1; //@line 2158 "cPickle.c"
        var $8=$global_name; //@line 2158 "cPickle.c"
        var $9=$8; //@line 2158 "cPickle.c"
        HEAP[$9]=$7; //@line 2158 "cPickle.c"
        __label__ = 3; break; //@line 2158 "cPickle.c"
      case 2: // $bb1
        var $10=HEAP[___name___str]; //@line 2161 "cPickle.c"
        var $11=$args_addr; //@line 2161 "cPickle.c"
        var $12=_PyObject_GetAttr($11, $10); //@line 2161 "cPickle.c"
        $global_name=$12; //@line 2161 "cPickle.c"
        var $13=$global_name; //@line 2161 "cPickle.c"
        var $14=($13)==0; //@line 2161 "cPickle.c"
        if ($14) { __label__ = 36; break; } else { __label__ = 3; break; } //@line 2161 "cPickle.c"
      case 3: // $bb2
        var $15=$args_addr; //@line 2165 "cPickle.c"
        var $16=$global_name; //@line 2165 "cPickle.c"
        var $17=_whichmodule($15, $16); //@line 2165 "cPickle.c"
        $module=$17; //@line 2165 "cPickle.c"
        var $18=($17)==0; //@line 2165 "cPickle.c"
        if ($18) { __label__ = 39; break; } else { __label__ = 4; break; } //@line 2165 "cPickle.c"
      case 4: // $bb3
        var $19=$module; //@line 2168 "cPickle.c"
        var $20=_PyString_Size($19); //@line 2168 "cPickle.c"
        $module_size=$20; //@line 2168 "cPickle.c"
        var $21=$module_size; //@line 2168 "cPickle.c"
        var $22=($21) < 0; //@line 2168 "cPickle.c"
        if ($22) { __label__ = 36; break; } else { __label__ = 5; break; } //@line 2168 "cPickle.c"
      case 5: // $bb4
        var $23=$global_name; //@line 2168 "cPickle.c"
        var $24=_PyString_Size($23); //@line 2168 "cPickle.c"
        $name_size=$24; //@line 2168 "cPickle.c"
        var $25=$name_size; //@line 2168 "cPickle.c"
        var $26=($25) < 0; //@line 2168 "cPickle.c"
        if ($26) { __label__ = 36; break; } else { __label__ = 6; break; } //@line 2168 "cPickle.c"
      case 6: // $bb5
        var $27=$module; //@line 2172 "cPickle.c"
        var $28=$27; //@line 2172 "cPickle.c"
        var $29=$28+20; //@line 2172 "cPickle.c"
        var $30=$29; //@line 2172 "cPickle.c"
        $module_str=$30; //@line 2172 "cPickle.c"
        var $31=$global_name; //@line 2173 "cPickle.c"
        var $32=$31; //@line 2173 "cPickle.c"
        var $33=$32+20; //@line 2173 "cPickle.c"
        var $34=$33; //@line 2173 "cPickle.c"
        $name_str=$34; //@line 2173 "cPickle.c"
        var $35=$module_str; //@line 2177 "cPickle.c"
        var $36=_PyImport_ImportModule($35); //@line 2177 "cPickle.c"
        $mod=$36; //@line 2177 "cPickle.c"
        var $37=$mod; //@line 2178 "cPickle.c"
        var $38=($37)==0; //@line 2178 "cPickle.c"
        if ($38) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2178 "cPickle.c"
      case 7: // $bb6
        var $39=HEAP[_PicklingError]; //@line 2179 "cPickle.c"
        var $40=$args_addr; //@line 2179 "cPickle.c"
        var $41=$module; //@line 2179 "cPickle.c"
        _cPickle_ErrFormat($39, __str25, __str26, allocate([$40,0,0,0,$41,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2179 "cPickle.c"
        __label__ = 36; break; //@line 2179 "cPickle.c"
      case 8: // $bb7
        var $42=$mod; //@line 2185 "cPickle.c"
        var $43=$name_str; //@line 2185 "cPickle.c"
        var $44=_PyObject_GetAttrString($42, $43); //@line 2185 "cPickle.c"
        $klass=$44; //@line 2185 "cPickle.c"
        var $45=$klass; //@line 2186 "cPickle.c"
        var $46=($45)==0; //@line 2186 "cPickle.c"
        if ($46) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2186 "cPickle.c"
      case 9: // $bb8
        var $47=HEAP[_PicklingError]; //@line 2187 "cPickle.c"
        var $48=$args_addr; //@line 2187 "cPickle.c"
        var $49=$module; //@line 2187 "cPickle.c"
        var $50=$global_name; //@line 2187 "cPickle.c"
        _cPickle_ErrFormat($47, __str27, __str28, allocate([$48,0,0,0,$49,0,0,0,$50,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2187 "cPickle.c"
        __label__ = 36; break; //@line 2187 "cPickle.c"
      case 10: // $bb9
        var $51=$klass; //@line 2193 "cPickle.c"
        var $52=$args_addr; //@line 2193 "cPickle.c"
        var $53=($51)!=($52); //@line 2193 "cPickle.c"
        var $54=$klass; //@line 2194 "cPickle.c"
        var $55=$54; //@line 2194 "cPickle.c"
        var $56=HEAP[$55]; //@line 2194 "cPickle.c"
        var $57=($56) - 1; //@line 2194 "cPickle.c"
        var $58=$klass; //@line 2194 "cPickle.c"
        var $59=$58; //@line 2194 "cPickle.c"
        HEAP[$59]=$57; //@line 2194 "cPickle.c"
        var $60=$klass; //@line 2194 "cPickle.c"
        var $61=$60; //@line 2194 "cPickle.c"
        var $62=HEAP[$61]; //@line 2194 "cPickle.c"
        var $63=($62)==0; //@line 2194 "cPickle.c"
        if ($53) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 2193 "cPickle.c"
      case 11: // $bb10
        if ($63) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2194 "cPickle.c"
      case 12: // $bb11
        var $64=$klass; //@line 2194 "cPickle.c"
        var $65=$64+4; //@line 2194 "cPickle.c"
        var $66=HEAP[$65]; //@line 2194 "cPickle.c"
        var $67=$66+24; //@line 2194 "cPickle.c"
        var $68=HEAP[$67]; //@line 2194 "cPickle.c"
        var $69=$klass; //@line 2194 "cPickle.c"
        FUNCTION_TABLE[$68]($69); //@line 2194 "cPickle.c"
        __label__ = 13; break; //@line 2194 "cPickle.c"
      case 13: // $bb12
        var $70=HEAP[_PicklingError]; //@line 2195 "cPickle.c"
        var $71=$args_addr; //@line 2195 "cPickle.c"
        var $72=$module; //@line 2195 "cPickle.c"
        var $73=$global_name; //@line 2195 "cPickle.c"
        _cPickle_ErrFormat($70, __str29, __str28, allocate([$71,0,0,0,$72,0,0,0,$73,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2195 "cPickle.c"
        __label__ = 36; break; //@line 2195 "cPickle.c"
      case 14: // $bb13
        if ($63) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2201 "cPickle.c"
      case 15: // $bb14
        var $74=$klass; //@line 2201 "cPickle.c"
        var $75=$74+4; //@line 2201 "cPickle.c"
        var $76=HEAP[$75]; //@line 2201 "cPickle.c"
        var $77=$76+24; //@line 2201 "cPickle.c"
        var $78=HEAP[$77]; //@line 2201 "cPickle.c"
        var $79=$klass; //@line 2201 "cPickle.c"
        FUNCTION_TABLE[$78]($79); //@line 2201 "cPickle.c"
        __label__ = 16; break; //@line 2201 "cPickle.c"
      case 16: // $bb15
        var $80=$self_addr; //@line 2203 "cPickle.c"
        var $81=$80+36; //@line 2203 "cPickle.c"
        var $82=HEAP[$81]; //@line 2203 "cPickle.c"
        var $83=($82) > 1; //@line 2203 "cPickle.c"
        if ($83) { __label__ = 17; break; } else { __label__ = 29; break; } //@line 2203 "cPickle.c"
      case 17: // $bb16
        var $84=HEAP[_two_tuple]; //@line 2212 "cPickle.c"
        var $85=$84; //@line 2212 "cPickle.c"
        var $86=$85+12; //@line 2212 "cPickle.c"
        var $87=$86; //@line 2212 "cPickle.c"
        var $88=$module; //@line 2212 "cPickle.c"
        HEAP[$87]=$88; //@line 2212 "cPickle.c"
        var $89=HEAP[_two_tuple]; //@line 2213 "cPickle.c"
        var $90=$89; //@line 2213 "cPickle.c"
        var $91=$90+12; //@line 2213 "cPickle.c"
        var $92=$91+4; //@line 2213 "cPickle.c"
        var $93=$global_name; //@line 2213 "cPickle.c"
        HEAP[$92]=$93; //@line 2213 "cPickle.c"
        var $94=HEAP[_two_tuple]; //@line 2214 "cPickle.c"
        var $95=HEAP[_extension_registry]; //@line 2214 "cPickle.c"
        var $96=_PyDict_GetItem($95, $94); //@line 2214 "cPickle.c"
        $py_code=$96; //@line 2214 "cPickle.c"
        var $97=$py_code; //@line 2215 "cPickle.c"
        var $98=($97)==0; //@line 2215 "cPickle.c"
        if ($98) { __label__ = 29; break; } else { __label__ = 18; break; } //@line 2215 "cPickle.c"
      case 18: // $bb17
        var $99=$py_code; //@line 2219 "cPickle.c"
        var $100=$99+4; //@line 2219 "cPickle.c"
        var $101=HEAP[$100]; //@line 2219 "cPickle.c"
        var $102=$101+84; //@line 2219 "cPickle.c"
        var $103=HEAP[$102]; //@line 2219 "cPickle.c"
        var $104=($103) & 8388608; //@line 2219 "cPickle.c"
        var $105=($104)==0; //@line 2219 "cPickle.c"
        if ($105) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2219 "cPickle.c"
      case 19: // $bb18
        var $106=HEAP[_PicklingError]; //@line 2220 "cPickle.c"
        var $107=$args_addr; //@line 2220 "cPickle.c"
        var $108=$py_code; //@line 2220 "cPickle.c"
        _cPickle_ErrFormat($106, __str30, __str31, allocate([$107,0,0,0,$108,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2220 "cPickle.c"
        __label__ = 36; break; //@line 2220 "cPickle.c"
      case 20: // $bb19
        var $109=$py_code; //@line 2225 "cPickle.c"
        var $110=$109; //@line 2225 "cPickle.c"
        var $111=$110+8; //@line 2225 "cPickle.c"
        var $112=HEAP[$111]; //@line 2225 "cPickle.c"
        $code=$112; //@line 2225 "cPickle.c"
        var $113=$code; //@line 2226 "cPickle.c"
        var $114=($113) <= 0; //@line 2226 "cPickle.c"
        if ($114) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 2226 "cPickle.c"
      case 21: // $bb20
        var $115=HEAP[_PicklingError]; //@line 2227 "cPickle.c"
        var $116=$args_addr; //@line 2227 "cPickle.c"
        var $117=$code; //@line 2227 "cPickle.c"
        _cPickle_ErrFormat($115, __str32, __str33, allocate([$116,0,0,0,$117,0,0,0], ["%struct.PyObject*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 2227 "cPickle.c"
        __label__ = 36; break; //@line 2227 "cPickle.c"
      case 22: // $bb21
        var $118=$code; //@line 2234 "cPickle.c"
        var $119=($118) <= 255; //@line 2234 "cPickle.c"
        if ($119) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 2234 "cPickle.c"
      case 23: // $bb22
        var $120=$c_str; //@line 2235 "cPickle.c"
        HEAP[$120]=-126; //@line 2235 "cPickle.c"
        var $121=$code; //@line 2236 "cPickle.c"
        var $122=((($121)) & 255); //@line 2236 "cPickle.c"
        var $123=$c_str+1; //@line 2236 "cPickle.c"
        HEAP[$123]=$122; //@line 2236 "cPickle.c"
        $n=2; //@line 2237 "cPickle.c"
        __label__ = 27; break; //@line 2237 "cPickle.c"
      case 24: // $bb23
        var $124=$code; //@line 2239 "cPickle.c"
        var $125=($124) <= 65535; //@line 2239 "cPickle.c"
        var $126=$c_str; //@line 2240 "cPickle.c"
        if ($125) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 2239 "cPickle.c"
      case 25: // $bb24
        HEAP[$126]=-125; //@line 2240 "cPickle.c"
        var $127=$code; //@line 2241 "cPickle.c"
        var $128=((($127)) & 255); //@line 2241 "cPickle.c"
        var $129=$c_str+1; //@line 2241 "cPickle.c"
        HEAP[$129]=$128; //@line 2241 "cPickle.c"
        var $130=$code; //@line 2242 "cPickle.c"
        var $131=($130) >> 8; //@line 2242 "cPickle.c"
        var $132=((($131)) & 255); //@line 2242 "cPickle.c"
        var $133=$c_str+2; //@line 2242 "cPickle.c"
        HEAP[$133]=$132; //@line 2242 "cPickle.c"
        $n=3; //@line 2243 "cPickle.c"
        __label__ = 27; break; //@line 2243 "cPickle.c"
      case 26: // $bb25
        HEAP[$126]=-124; //@line 2246 "cPickle.c"
        var $134=$code; //@line 2247 "cPickle.c"
        var $135=((($134)) & 255); //@line 2247 "cPickle.c"
        var $136=$c_str+1; //@line 2247 "cPickle.c"
        HEAP[$136]=$135; //@line 2247 "cPickle.c"
        var $137=$code; //@line 2248 "cPickle.c"
        var $138=($137) >> 8; //@line 2248 "cPickle.c"
        var $139=((($138)) & 255); //@line 2248 "cPickle.c"
        var $140=$c_str+2; //@line 2248 "cPickle.c"
        HEAP[$140]=$139; //@line 2248 "cPickle.c"
        var $141=$code; //@line 2249 "cPickle.c"
        var $142=($141) >> 16; //@line 2249 "cPickle.c"
        var $143=((($142)) & 255); //@line 2249 "cPickle.c"
        var $144=$c_str+3; //@line 2249 "cPickle.c"
        HEAP[$144]=$143; //@line 2249 "cPickle.c"
        var $145=$code; //@line 2250 "cPickle.c"
        var $146=($145) >> 24; //@line 2250 "cPickle.c"
        var $147=((($146)) & 255); //@line 2250 "cPickle.c"
        var $148=$c_str+4; //@line 2250 "cPickle.c"
        HEAP[$148]=$147; //@line 2250 "cPickle.c"
        $n=5; //@line 2251 "cPickle.c"
        __label__ = 27; break; //@line 2251 "cPickle.c"
      case 27: // $bb26
        var $149=$self_addr; //@line 2254 "cPickle.c"
        var $150=$149+48; //@line 2254 "cPickle.c"
        var $151=HEAP[$150]; //@line 2254 "cPickle.c"
        var $152=$self_addr; //@line 2254 "cPickle.c"
        var $c_str27=$c_str; //@line 2254 "cPickle.c"
        var $153=$n; //@line 2254 "cPickle.c"
        var $154=FUNCTION_TABLE[$151]($152, $c_str27, $153); //@line 2254 "cPickle.c"
        var $155=($154) >= 0; //@line 2254 "cPickle.c"
        if ($155) { __label__ = 28; break; } else { __label__ = 36; break; } //@line 2254 "cPickle.c"
      case 28: // $bb28
        $res=0; //@line 2255 "cPickle.c"
        __label__ = 36; break; //@line 2255 "cPickle.c"
      case 29: // $gen_global
        var $156=$self_addr; //@line 2260 "cPickle.c"
        var $157=$156+48; //@line 2260 "cPickle.c"
        var $158=HEAP[$157]; //@line 2260 "cPickle.c"
        var $159=$self_addr; //@line 2260 "cPickle.c"
        var $160=FUNCTION_TABLE[$158]($159, _global_10855, 1); //@line 2260 "cPickle.c"
        var $161=($160) < 0; //@line 2260 "cPickle.c"
        if ($161) { __label__ = 36; break; } else { __label__ = 30; break; } //@line 2260 "cPickle.c"
      case 30: // $bb30
        var $162=$self_addr; //@line 2263 "cPickle.c"
        var $163=$162+48; //@line 2263 "cPickle.c"
        var $164=HEAP[$163]; //@line 2263 "cPickle.c"
        var $165=$self_addr; //@line 2263 "cPickle.c"
        var $166=$module_str; //@line 2263 "cPickle.c"
        var $167=$module_size; //@line 2263 "cPickle.c"
        var $168=FUNCTION_TABLE[$164]($165, $166, $167); //@line 2263 "cPickle.c"
        var $169=($168) < 0; //@line 2263 "cPickle.c"
        if ($169) { __label__ = 36; break; } else { __label__ = 31; break; } //@line 2263 "cPickle.c"
      case 31: // $bb31
        var $170=$self_addr; //@line 2266 "cPickle.c"
        var $171=$170+48; //@line 2266 "cPickle.c"
        var $172=HEAP[$171]; //@line 2266 "cPickle.c"
        var $173=$self_addr; //@line 2266 "cPickle.c"
        var $174=FUNCTION_TABLE[$172]($173, __str12, 1); //@line 2266 "cPickle.c"
        var $175=($174) < 0; //@line 2266 "cPickle.c"
        if ($175) { __label__ = 36; break; } else { __label__ = 32; break; } //@line 2266 "cPickle.c"
      case 32: // $bb32
        var $176=$self_addr; //@line 2269 "cPickle.c"
        var $177=$176+48; //@line 2269 "cPickle.c"
        var $178=HEAP[$177]; //@line 2269 "cPickle.c"
        var $179=$self_addr; //@line 2269 "cPickle.c"
        var $180=$name_str; //@line 2269 "cPickle.c"
        var $181=$name_size; //@line 2269 "cPickle.c"
        var $182=FUNCTION_TABLE[$178]($179, $180, $181); //@line 2269 "cPickle.c"
        var $183=($182) < 0; //@line 2269 "cPickle.c"
        if ($183) { __label__ = 36; break; } else { __label__ = 33; break; } //@line 2269 "cPickle.c"
      case 33: // $bb33
        var $184=$self_addr; //@line 2272 "cPickle.c"
        var $185=$184+48; //@line 2272 "cPickle.c"
        var $186=HEAP[$185]; //@line 2272 "cPickle.c"
        var $187=$self_addr; //@line 2272 "cPickle.c"
        var $188=FUNCTION_TABLE[$186]($187, __str12, 1); //@line 2272 "cPickle.c"
        var $189=($188) < 0; //@line 2272 "cPickle.c"
        if ($189) { __label__ = 36; break; } else { __label__ = 34; break; } //@line 2272 "cPickle.c"
      case 34: // $bb34
        var $190=$self_addr; //@line 2275 "cPickle.c"
        var $191=$args_addr; //@line 2275 "cPickle.c"
        var $192=_put($190, $191); //@line 2275 "cPickle.c"
        var $193=($192) < 0; //@line 2275 "cPickle.c"
        if ($193) { __label__ = 36; break; } else { __label__ = 35; break; } //@line 2275 "cPickle.c"
      case 35: // $bb35
        $res=0; //@line 2278 "cPickle.c"
        __label__ = 36; break; //@line 2280 "cPickle.c"
      case 36: // $finally
        var $_pr=$module;
        var $194=($_pr)!=0; //@line 2281 "cPickle.c"
        if ($194) { __label__ = 37; break; } else { __label__ = 39; break; } //@line 2281 "cPickle.c"
      case 37: // $bb36
        var $195=$module; //@line 2281 "cPickle.c"
        var $196=$195; //@line 2281 "cPickle.c"
        var $197=HEAP[$196]; //@line 2281 "cPickle.c"
        var $198=($197) - 1; //@line 2281 "cPickle.c"
        var $199=$module; //@line 2281 "cPickle.c"
        var $200=$199; //@line 2281 "cPickle.c"
        HEAP[$200]=$198; //@line 2281 "cPickle.c"
        var $201=$module; //@line 2281 "cPickle.c"
        var $202=$201; //@line 2281 "cPickle.c"
        var $203=HEAP[$202]; //@line 2281 "cPickle.c"
        var $204=($203)==0; //@line 2281 "cPickle.c"
        if ($204) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 2281 "cPickle.c"
      case 38: // $bb37
        var $205=$module; //@line 2281 "cPickle.c"
        var $206=$205+4; //@line 2281 "cPickle.c"
        var $207=HEAP[$206]; //@line 2281 "cPickle.c"
        var $208=$207+24; //@line 2281 "cPickle.c"
        var $209=HEAP[$208]; //@line 2281 "cPickle.c"
        var $210=$module; //@line 2281 "cPickle.c"
        FUNCTION_TABLE[$209]($210); //@line 2281 "cPickle.c"
        __label__ = 39; break; //@line 2281 "cPickle.c"
      case 39: // $bb38
        var $211=$global_name; //@line 2282 "cPickle.c"
        var $212=($211)!=0; //@line 2282 "cPickle.c"
        if ($212) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 2282 "cPickle.c"
      case 40: // $bb39
        var $213=$global_name; //@line 2282 "cPickle.c"
        var $214=$213; //@line 2282 "cPickle.c"
        var $215=HEAP[$214]; //@line 2282 "cPickle.c"
        var $216=($215) - 1; //@line 2282 "cPickle.c"
        var $217=$global_name; //@line 2282 "cPickle.c"
        var $218=$217; //@line 2282 "cPickle.c"
        HEAP[$218]=$216; //@line 2282 "cPickle.c"
        var $219=$global_name; //@line 2282 "cPickle.c"
        var $220=$219; //@line 2282 "cPickle.c"
        var $221=HEAP[$220]; //@line 2282 "cPickle.c"
        var $222=($221)==0; //@line 2282 "cPickle.c"
        if ($222) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 2282 "cPickle.c"
      case 41: // $bb40
        var $223=$global_name; //@line 2282 "cPickle.c"
        var $224=$223+4; //@line 2282 "cPickle.c"
        var $225=HEAP[$224]; //@line 2282 "cPickle.c"
        var $226=$225+24; //@line 2282 "cPickle.c"
        var $227=HEAP[$226]; //@line 2282 "cPickle.c"
        var $228=$global_name; //@line 2282 "cPickle.c"
        FUNCTION_TABLE[$227]($228); //@line 2282 "cPickle.c"
        __label__ = 42; break; //@line 2282 "cPickle.c"
      case 42: // $bb41
        var $229=$mod; //@line 2283 "cPickle.c"
        var $230=($229)!=0; //@line 2283 "cPickle.c"
        if ($230) { __label__ = 43; break; } else { __label__ = 45; break; } //@line 2283 "cPickle.c"
      case 43: // $bb42
        var $231=$mod; //@line 2283 "cPickle.c"
        var $232=$231; //@line 2283 "cPickle.c"
        var $233=HEAP[$232]; //@line 2283 "cPickle.c"
        var $234=($233) - 1; //@line 2283 "cPickle.c"
        var $235=$mod; //@line 2283 "cPickle.c"
        var $236=$235; //@line 2283 "cPickle.c"
        HEAP[$236]=$234; //@line 2283 "cPickle.c"
        var $237=$mod; //@line 2283 "cPickle.c"
        var $238=$237; //@line 2283 "cPickle.c"
        var $239=HEAP[$238]; //@line 2283 "cPickle.c"
        var $240=($239)==0; //@line 2283 "cPickle.c"
        if ($240) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 2283 "cPickle.c"
      case 44: // $bb43
        var $241=$mod; //@line 2283 "cPickle.c"
        var $242=$241+4; //@line 2283 "cPickle.c"
        var $243=HEAP[$242]; //@line 2283 "cPickle.c"
        var $244=$243+24; //@line 2283 "cPickle.c"
        var $245=HEAP[$244]; //@line 2283 "cPickle.c"
        var $246=$mod; //@line 2283 "cPickle.c"
        FUNCTION_TABLE[$245]($246); //@line 2283 "cPickle.c"
        __label__ = 45; break; //@line 2283 "cPickle.c"
      case 45: // $bb44
        var $247=$res; //@line 2285 "cPickle.c"
        $0=$247; //@line 2285 "cPickle.c"
        var $248=$0; //@line 2285 "cPickle.c"
        $retval=$248; //@line 2285 "cPickle.c"
        var $retval45=$retval; //@line 2285 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval45; //@line 2285 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_pers($self, $args, $f) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $f_addr;
        var $retval;
        var $0;
        var $pid;
        var $size;
        var $res;
        $self_addr=$self;
        $args_addr=$args;
        $f_addr=$f;
        $pid=0; //@line 2291 "cPickle.c"
        $res=-1; //@line 2292 "cPickle.c"
        var $1=$args_addr; //@line 2296 "cPickle.c"
        var $2=$1; //@line 2296 "cPickle.c"
        var $3=HEAP[$2]; //@line 2296 "cPickle.c"
        var $4=($3) + 1; //@line 2296 "cPickle.c"
        var $5=$args_addr; //@line 2296 "cPickle.c"
        var $6=$5; //@line 2296 "cPickle.c"
        HEAP[$6]=$4; //@line 2296 "cPickle.c"
        var $7=$self_addr; //@line 2297 "cPickle.c"
        var $8=$7+24; //@line 2297 "cPickle.c"
        var $9=HEAP[$8]; //@line 2297 "cPickle.c"
        var $10=($9)!=0; //@line 2297 "cPickle.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 2297 "cPickle.c"
      case 1: // $bb
        var $11=_PyTuple_New(1); //@line 2297 "cPickle.c"
        var $12=$self_addr; //@line 2297 "cPickle.c"
        var $13=$12+24; //@line 2297 "cPickle.c"
        HEAP[$13]=$11; //@line 2297 "cPickle.c"
        var $14=$self_addr; //@line 2297 "cPickle.c"
        var $15=$14+24; //@line 2297 "cPickle.c"
        var $16=HEAP[$15]; //@line 2297 "cPickle.c"
        var $17=($16)!=0; //@line 2297 "cPickle.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 2297 "cPickle.c"
      case 2: // $bb1
        var $18=$self_addr; //@line 2297 "cPickle.c"
        var $19=$18+24; //@line 2297 "cPickle.c"
        var $20=HEAP[$19]; //@line 2297 "cPickle.c"
        var $21=$20; //@line 2297 "cPickle.c"
        var $22=$21+12; //@line 2297 "cPickle.c"
        var $23=$22; //@line 2297 "cPickle.c"
        var $24=HEAP[$23]; //@line 2297 "cPickle.c"
        var $25=($24)!=0; //@line 2297 "cPickle.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 2297 "cPickle.c"
      case 3: // $bb2
        var $26=$self_addr; //@line 2297 "cPickle.c"
        var $27=$26+24; //@line 2297 "cPickle.c"
        var $28=HEAP[$27]; //@line 2297 "cPickle.c"
        var $29=$28; //@line 2297 "cPickle.c"
        var $30=$29+12; //@line 2297 "cPickle.c"
        var $31=$30; //@line 2297 "cPickle.c"
        var $32=HEAP[$31]; //@line 2297 "cPickle.c"
        var $33=$32; //@line 2297 "cPickle.c"
        var $34=HEAP[$33]; //@line 2297 "cPickle.c"
        var $35=($34) - 1; //@line 2297 "cPickle.c"
        var $36=$32; //@line 2297 "cPickle.c"
        HEAP[$36]=$35; //@line 2297 "cPickle.c"
        var $37=$32; //@line 2297 "cPickle.c"
        var $38=HEAP[$37]; //@line 2297 "cPickle.c"
        var $39=($38)==0; //@line 2297 "cPickle.c"
        if ($39) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2297 "cPickle.c"
      case 4: // $bb3
        var $40=$self_addr; //@line 2297 "cPickle.c"
        var $41=$40+24; //@line 2297 "cPickle.c"
        var $42=HEAP[$41]; //@line 2297 "cPickle.c"
        var $43=$42; //@line 2297 "cPickle.c"
        var $44=$43+12; //@line 2297 "cPickle.c"
        var $45=$44; //@line 2297 "cPickle.c"
        var $46=HEAP[$45]; //@line 2297 "cPickle.c"
        var $47=$46+4; //@line 2297 "cPickle.c"
        var $48=HEAP[$47]; //@line 2297 "cPickle.c"
        var $49=$48+24; //@line 2297 "cPickle.c"
        var $50=HEAP[$49]; //@line 2297 "cPickle.c"
        var $51=$self_addr; //@line 2297 "cPickle.c"
        var $52=$51+24; //@line 2297 "cPickle.c"
        var $53=HEAP[$52]; //@line 2297 "cPickle.c"
        var $54=$53; //@line 2297 "cPickle.c"
        var $55=$54+12; //@line 2297 "cPickle.c"
        var $56=$55; //@line 2297 "cPickle.c"
        var $57=HEAP[$56]; //@line 2297 "cPickle.c"
        FUNCTION_TABLE[$50]($57); //@line 2297 "cPickle.c"
        __label__ = 5; break; //@line 2297 "cPickle.c"
      case 5: // $bb4
        var $58=$self_addr; //@line 2297 "cPickle.c"
        var $59=$58+24; //@line 2297 "cPickle.c"
        var $60=HEAP[$59]; //@line 2297 "cPickle.c"
        var $61=$60; //@line 2297 "cPickle.c"
        var $62=$61+12; //@line 2297 "cPickle.c"
        var $63=$62; //@line 2297 "cPickle.c"
        var $64=$args_addr; //@line 2297 "cPickle.c"
        HEAP[$63]=$64; //@line 2297 "cPickle.c"
        __label__ = 8; break; //@line 2297 "cPickle.c"
      case 6: // $bb5
        var $65=$args_addr; //@line 2297 "cPickle.c"
        var $66=$65; //@line 2297 "cPickle.c"
        var $67=HEAP[$66]; //@line 2297 "cPickle.c"
        var $68=($67) - 1; //@line 2297 "cPickle.c"
        var $69=$args_addr; //@line 2297 "cPickle.c"
        var $70=$69; //@line 2297 "cPickle.c"
        HEAP[$70]=$68; //@line 2297 "cPickle.c"
        var $71=$args_addr; //@line 2297 "cPickle.c"
        var $72=$71; //@line 2297 "cPickle.c"
        var $73=HEAP[$72]; //@line 2297 "cPickle.c"
        var $74=($73)==0; //@line 2297 "cPickle.c"
        if ($74) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2297 "cPickle.c"
      case 7: // $bb6
        var $75=$args_addr; //@line 2297 "cPickle.c"
        var $76=$75+4; //@line 2297 "cPickle.c"
        var $77=HEAP[$76]; //@line 2297 "cPickle.c"
        var $78=$77+24; //@line 2297 "cPickle.c"
        var $79=HEAP[$78]; //@line 2297 "cPickle.c"
        var $80=$args_addr; //@line 2297 "cPickle.c"
        FUNCTION_TABLE[$79]($80); //@line 2297 "cPickle.c"
        __label__ = 8; break; //@line 2297 "cPickle.c"
      case 8: // $bb7
        var $81=$self_addr; //@line 2298 "cPickle.c"
        var $82=$81+24; //@line 2298 "cPickle.c"
        var $83=HEAP[$82]; //@line 2298 "cPickle.c"
        var $84=($83)!=0; //@line 2298 "cPickle.c"
        if ($84) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 2298 "cPickle.c"
      case 9: // $bb8
        var $85=$self_addr; //@line 2299 "cPickle.c"
        var $86=$85+24; //@line 2299 "cPickle.c"
        var $87=HEAP[$86]; //@line 2299 "cPickle.c"
        var $88=$f_addr; //@line 2299 "cPickle.c"
        var $89=_PyObject_Call($88, $87, 0); //@line 2299 "cPickle.c"
        $pid=$89; //@line 2299 "cPickle.c"
        var $90=$self_addr; //@line 2300 "cPickle.c"
        var $91=$90+24; //@line 2300 "cPickle.c"
        var $92=HEAP[$91]; //@line 2300 "cPickle.c"
        var $93=$92; //@line 2300 "cPickle.c"
        var $94=HEAP[$93]; //@line 2300 "cPickle.c"
        var $95=($94) > 1; //@line 2300 "cPickle.c"
        if ($95) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 2300 "cPickle.c"
      case 10: // $bb9
        var $96=$self_addr; //@line 2300 "cPickle.c"
        var $97=$96+24; //@line 2300 "cPickle.c"
        var $98=HEAP[$97]; //@line 2300 "cPickle.c"
        var $99=$98; //@line 2300 "cPickle.c"
        var $100=HEAP[$99]; //@line 2300 "cPickle.c"
        var $101=($100) - 1; //@line 2300 "cPickle.c"
        var $102=$98; //@line 2300 "cPickle.c"
        HEAP[$102]=$101; //@line 2300 "cPickle.c"
        var $103=$98; //@line 2300 "cPickle.c"
        var $104=HEAP[$103]; //@line 2300 "cPickle.c"
        var $105=($104)==0; //@line 2300 "cPickle.c"
        if ($105) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 2300 "cPickle.c"
      case 11: // $bb10
        var $106=$self_addr; //@line 2300 "cPickle.c"
        var $107=$106+24; //@line 2300 "cPickle.c"
        var $108=HEAP[$107]; //@line 2300 "cPickle.c"
        var $109=$108+4; //@line 2300 "cPickle.c"
        var $110=HEAP[$109]; //@line 2300 "cPickle.c"
        var $111=$110+24; //@line 2300 "cPickle.c"
        var $112=HEAP[$111]; //@line 2300 "cPickle.c"
        var $113=$self_addr; //@line 2300 "cPickle.c"
        var $114=$113+24; //@line 2300 "cPickle.c"
        var $115=HEAP[$114]; //@line 2300 "cPickle.c"
        FUNCTION_TABLE[$112]($115); //@line 2300 "cPickle.c"
        __label__ = 12; break; //@line 2300 "cPickle.c"
      case 12: // $bb11
        var $116=$self_addr; //@line 2300 "cPickle.c"
        var $117=$116+24; //@line 2300 "cPickle.c"
        HEAP[$117]=0; //@line 2300 "cPickle.c"
        __label__ = 13; break; //@line 2300 "cPickle.c"
      case 13: // $bb12
        var $118=$pid; //@line 2302 "cPickle.c"
        var $119=($118)==0; //@line 2302 "cPickle.c"
        if ($119) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 2302 "cPickle.c"
      case 14: // $bb13
        $0=-1; //@line 2302 "cPickle.c"
        __label__ = 33; break; //@line 2302 "cPickle.c"
      case 15: // $bb14
        var $120=$pid; //@line 2304 "cPickle.c"
        var $121=($120)!=(__Py_NoneStruct); //@line 2304 "cPickle.c"
        if ($121) { __label__ = 16; break; } else { __label__ = 28; break; } //@line 2304 "cPickle.c"
      case 16: // $bb15
        var $122=$self_addr; //@line 2305 "cPickle.c"
        var $123=$122+40; //@line 2305 "cPickle.c"
        var $124=HEAP[$123]; //@line 2305 "cPickle.c"
        var $125=($124)==0; //@line 2305 "cPickle.c"
        if ($125) { __label__ = 17; break; } else { __label__ = 24; break; } //@line 2305 "cPickle.c"
      case 17: // $bb16
        var $126=$pid; //@line 2306 "cPickle.c"
        var $127=$126+4; //@line 2306 "cPickle.c"
        var $128=HEAP[$127]; //@line 2306 "cPickle.c"
        var $129=$128+84; //@line 2306 "cPickle.c"
        var $130=HEAP[$129]; //@line 2306 "cPickle.c"
        var $131=($130) & 134217728; //@line 2306 "cPickle.c"
        var $132=($131)==0; //@line 2306 "cPickle.c"
        if ($132) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 2306 "cPickle.c"
      case 18: // $bb17
        var $133=HEAP[_PicklingError]; //@line 2307 "cPickle.c"
        _PyErr_SetString($133, __str34); //@line 2307 "cPickle.c"
        __label__ = 29; break; //@line 2307 "cPickle.c"
      case 19: // $bb18
        var $134=$self_addr; //@line 2312 "cPickle.c"
        var $135=$134+48; //@line 2312 "cPickle.c"
        var $136=HEAP[$135]; //@line 2312 "cPickle.c"
        var $137=$self_addr; //@line 2312 "cPickle.c"
        var $138=FUNCTION_TABLE[$136]($137, _persid_10999, 1); //@line 2312 "cPickle.c"
        var $139=($138) < 0; //@line 2312 "cPickle.c"
        if ($139) { __label__ = 29; break; } else { __label__ = 20; break; } //@line 2312 "cPickle.c"
      case 20: // $bb19
        var $140=$pid; //@line 2315 "cPickle.c"
        var $141=_PyString_Size($140); //@line 2315 "cPickle.c"
        $size=$141; //@line 2315 "cPickle.c"
        var $142=$size; //@line 2315 "cPickle.c"
        var $143=($142) < 0; //@line 2315 "cPickle.c"
        if ($143) { __label__ = 29; break; } else { __label__ = 21; break; } //@line 2315 "cPickle.c"
      case 21: // $bb20
        var $144=$self_addr; //@line 2318 "cPickle.c"
        var $145=$144+48; //@line 2318 "cPickle.c"
        var $146=HEAP[$145]; //@line 2318 "cPickle.c"
        var $147=$pid; //@line 2318 "cPickle.c"
        var $148=$147; //@line 2318 "cPickle.c"
        var $149=$148+20; //@line 2318 "cPickle.c"
        var $150=$149; //@line 2318 "cPickle.c"
        var $151=$self_addr; //@line 2318 "cPickle.c"
        var $152=$size; //@line 2318 "cPickle.c"
        var $153=FUNCTION_TABLE[$146]($151, $150, $152); //@line 2318 "cPickle.c"
        var $154=($153) < 0; //@line 2318 "cPickle.c"
        if ($154) { __label__ = 29; break; } else { __label__ = 22; break; } //@line 2318 "cPickle.c"
      case 22: // $bb21
        var $155=$self_addr; //@line 2324 "cPickle.c"
        var $156=$155+48; //@line 2324 "cPickle.c"
        var $157=HEAP[$156]; //@line 2324 "cPickle.c"
        var $158=$self_addr; //@line 2324 "cPickle.c"
        var $159=FUNCTION_TABLE[$157]($158, __str12, 1); //@line 2324 "cPickle.c"
        var $160=($159) < 0; //@line 2324 "cPickle.c"
        if ($160) { __label__ = 29; break; } else { __label__ = 23; break; } //@line 2324 "cPickle.c"
      case 23: // $bb22
        $res=1; //@line 2327 "cPickle.c"
        __label__ = 29; break; //@line 2327 "cPickle.c"
      case 24: // $bb23
        var $161=$self_addr; //@line 2330 "cPickle.c"
        var $162=$pid; //@line 2330 "cPickle.c"
        var $163=_save($161, $162, 1); //@line 2330 "cPickle.c"
        var $164=($163) >= 0; //@line 2330 "cPickle.c"
        if ($164) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 2330 "cPickle.c"
      case 25: // $bb24
        var $165=$self_addr; //@line 2331 "cPickle.c"
        var $166=$165+48; //@line 2331 "cPickle.c"
        var $167=HEAP[$166]; //@line 2331 "cPickle.c"
        var $168=$self_addr; //@line 2331 "cPickle.c"
        var $169=FUNCTION_TABLE[$167]($168, _binpersid_11000, 1); //@line 2331 "cPickle.c"
        var $170=($169) < 0; //@line 2331 "cPickle.c"
        if ($170) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 2331 "cPickle.c"
      case 26: // $bb25
        $res=-1; //@line 2332 "cPickle.c"
        __label__ = 29; break; //@line 2332 "cPickle.c"
      case 27: // $bb26
        $res=1; //@line 2334 "cPickle.c"
        __label__ = 29; break; //@line 2334 "cPickle.c"
      case 28: // $bb28
        $res=0; //@line 2340 "cPickle.c"
        __label__ = 29; break; //@line 2342 "cPickle.c"
      case 29: // $finally
        var $171=$pid; //@line 2343 "cPickle.c"
        var $172=($171)!=0; //@line 2343 "cPickle.c"
        if ($172) { __label__ = 30; break; } else { __label__ = 32; break; } //@line 2343 "cPickle.c"
      case 30: // $bb29
        var $173=$pid; //@line 2343 "cPickle.c"
        var $174=$173; //@line 2343 "cPickle.c"
        var $175=HEAP[$174]; //@line 2343 "cPickle.c"
        var $176=($175) - 1; //@line 2343 "cPickle.c"
        var $177=$pid; //@line 2343 "cPickle.c"
        var $178=$177; //@line 2343 "cPickle.c"
        HEAP[$178]=$176; //@line 2343 "cPickle.c"
        var $179=$pid; //@line 2343 "cPickle.c"
        var $180=$179; //@line 2343 "cPickle.c"
        var $181=HEAP[$180]; //@line 2343 "cPickle.c"
        var $182=($181)==0; //@line 2343 "cPickle.c"
        if ($182) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 2343 "cPickle.c"
      case 31: // $bb30
        var $183=$pid; //@line 2343 "cPickle.c"
        var $184=$183+4; //@line 2343 "cPickle.c"
        var $185=HEAP[$184]; //@line 2343 "cPickle.c"
        var $186=$185+24; //@line 2343 "cPickle.c"
        var $187=HEAP[$186]; //@line 2343 "cPickle.c"
        var $188=$pid; //@line 2343 "cPickle.c"
        FUNCTION_TABLE[$187]($188); //@line 2343 "cPickle.c"
        __label__ = 32; break; //@line 2343 "cPickle.c"
      case 32: // $bb31
        var $189=$res; //@line 2345 "cPickle.c"
        $0=$189; //@line 2345 "cPickle.c"
        __label__ = 33; break; //@line 2345 "cPickle.c"
      case 33: // $bb32
        var $190=$0; //@line 2302 "cPickle.c"
        $retval=$190; //@line 2302 "cPickle.c"
        var $retval33=$retval; //@line 2302 "cPickle.c"
        ;
        return $retval33; //@line 2302 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_reduce($self, $args, $fn, $ob) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $fn_addr;
        var $ob_addr;
        var $retval;
        var $iftmp_170;
        var $0;
        var $callable=__stackBase__;
        var $argtup=__stackBase__+4;
        var $state=__stackBase__+8;
        var $listitems=__stackBase__+12;
        var $dictitems=__stackBase__+16;
        var $size;
        var $use_newobj;
        var $temp;
        var $cls;
        var $newargtup;
        var $n;
        var $i;
        var $ob_dot_class;
        var $temp52;
        $self_addr=$self;
        $args_addr=$args;
        $fn_addr=$fn;
        $ob_addr=$ob;
        HEAP[$state]=0; //@line 2356 "cPickle.c"
        HEAP[$listitems]=__Py_NoneStruct; //@line 2357 "cPickle.c"
        HEAP[$dictitems]=__Py_NoneStruct; //@line 2358 "cPickle.c"
        var $1=$self_addr; //@line 2361 "cPickle.c"
        var $2=$1+36; //@line 2361 "cPickle.c"
        var $3=HEAP[$2]; //@line 2361 "cPickle.c"
        var $4=($3) > 1; //@line 2361 "cPickle.c"
        var $5=($4); //@line 2361 "cPickle.c"
        $use_newobj=$5; //@line 2361 "cPickle.c"
        var $6=$args_addr; //@line 2367 "cPickle.c"
        var $7=_PyTuple_Size($6); //@line 2367 "cPickle.c"
        $size=$7; //@line 2367 "cPickle.c"
        var $8=$size; //@line 2368 "cPickle.c"
        var $9=($8) <= 1; //@line 2368 "cPickle.c"
        var $10=$size; //@line 2368 "cPickle.c"
        var $11=($10) > 5; //@line 2368 "cPickle.c"
        var $or_cond=($9) | ($11);
        if ($or_cond) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2368 "cPickle.c"
      case 1: // $bb1
        var $12=HEAP[_PicklingError]; //@line 2369 "cPickle.c"
        var $13=$fn_addr; //@line 2369 "cPickle.c"
        _cPickle_ErrFormat($12, __str35, __str36, allocate([$13,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2369 "cPickle.c"
        $0=-1; //@line 2372 "cPickle.c"
        __label__ = 81; break; //@line 2372 "cPickle.c"
      case 2: // $bb2
        var $14=$args_addr; //@line 2375 "cPickle.c"
        var $15=_PyArg_UnpackTuple($14, __str37, 2, 5, allocate([$callable,0,0,0,$argtup,0,0,0,$state,0,0,0,$listitems,0,0,0,$dictitems,0,0,0], ["%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 2375 "cPickle.c"
        var $16=($15)==0; //@line 2375 "cPickle.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2375 "cPickle.c"
      case 3: // $bb3
        $0=-1; //@line 2381 "cPickle.c"
        __label__ = 81; break; //@line 2381 "cPickle.c"
      case 4: // $bb4
        var $17=HEAP[$argtup]; //@line 2383 "cPickle.c"
        var $18=$17+4; //@line 2383 "cPickle.c"
        var $19=HEAP[$18]; //@line 2383 "cPickle.c"
        var $20=$19+84; //@line 2383 "cPickle.c"
        var $21=HEAP[$20]; //@line 2383 "cPickle.c"
        var $22=($21) & 67108864; //@line 2383 "cPickle.c"
        var $23=($22)==0; //@line 2383 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2383 "cPickle.c"
      case 5: // $bb5
        var $24=HEAP[_PicklingError]; //@line 2384 "cPickle.c"
        var $25=$fn_addr; //@line 2384 "cPickle.c"
        _cPickle_ErrFormat($24, __str38, __str36, allocate([$25,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2384 "cPickle.c"
        $0=-1; //@line 2387 "cPickle.c"
        __label__ = 81; break; //@line 2387 "cPickle.c"
      case 6: // $bb6
        var $26=HEAP[$state]; //@line 2390 "cPickle.c"
        var $27=($26)==(__Py_NoneStruct); //@line 2390 "cPickle.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2390 "cPickle.c"
      case 7: // $bb7
        HEAP[$state]=0; //@line 2391 "cPickle.c"
        __label__ = 8; break; //@line 2391 "cPickle.c"
      case 8: // $bb8
        var $28=HEAP[$listitems]; //@line 2393 "cPickle.c"
        var $29=($28)==(__Py_NoneStruct); //@line 2393 "cPickle.c"
        if ($29) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2393 "cPickle.c"
      case 9: // $bb9
        HEAP[$listitems]=0; //@line 2394 "cPickle.c"
        __label__ = 14; break; //@line 2394 "cPickle.c"
      case 10: // $bb10
        var $30=HEAP[$listitems]; //@line 2395 "cPickle.c"
        var $31=$30+4; //@line 2395 "cPickle.c"
        var $32=HEAP[$31]; //@line 2395 "cPickle.c"
        var $33=$32+84; //@line 2395 "cPickle.c"
        var $34=HEAP[$33]; //@line 2395 "cPickle.c"
        var $35=($34) & 128; //@line 2395 "cPickle.c"
        var $36=($35)==0; //@line 2395 "cPickle.c"
        if ($36) { __label__ = 13; break; } else { __label__ = 11; break; } //@line 2395 "cPickle.c"
      case 11: // $bb11
        var $37=HEAP[$listitems]; //@line 2395 "cPickle.c"
        var $38=$37+4; //@line 2395 "cPickle.c"
        var $39=HEAP[$38]; //@line 2395 "cPickle.c"
        var $40=$39+112; //@line 2395 "cPickle.c"
        var $41=HEAP[$40]; //@line 2395 "cPickle.c"
        var $42=($41)==0; //@line 2395 "cPickle.c"
        if ($42) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 2395 "cPickle.c"
      case 12: // $bb12
        var $43=HEAP[$listitems]; //@line 2395 "cPickle.c"
        var $44=$43+4; //@line 2395 "cPickle.c"
        var $45=HEAP[$44]; //@line 2395 "cPickle.c"
        var $46=$45+112; //@line 2395 "cPickle.c"
        var $47=HEAP[$46]; //@line 2395 "cPickle.c"
        var $48=($47)==((FUNCTION_TABLE_OFFSET + 2)); //@line 2395 "cPickle.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2395 "cPickle.c"
      case 13: // $bb13
        var $49=HEAP[$listitems]; //@line 2396 "cPickle.c"
        var $50=$49+4; //@line 2396 "cPickle.c"
        var $51=HEAP[$50]; //@line 2396 "cPickle.c"
        var $52=$51+12; //@line 2396 "cPickle.c"
        var $53=HEAP[$52]; //@line 2396 "cPickle.c"
        var $54=HEAP[_PicklingError]; //@line 2396 "cPickle.c"
        var $55=$fn_addr; //@line 2396 "cPickle.c"
        _cPickle_ErrFormat($54, __str39, __str40, allocate([$55,0,0,0,$53,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 2396 "cPickle.c"
        $0=-1; //@line 2399 "cPickle.c"
        __label__ = 81; break; //@line 2399 "cPickle.c"
      case 14: // $bb14
        var $56=HEAP[$dictitems]; //@line 2402 "cPickle.c"
        var $57=($56)==(__Py_NoneStruct); //@line 2402 "cPickle.c"
        if ($57) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2402 "cPickle.c"
      case 15: // $bb15
        HEAP[$dictitems]=0; //@line 2403 "cPickle.c"
        __label__ = 20; break; //@line 2403 "cPickle.c"
      case 16: // $bb16
        var $58=HEAP[$dictitems]; //@line 2404 "cPickle.c"
        var $59=$58+4; //@line 2404 "cPickle.c"
        var $60=HEAP[$59]; //@line 2404 "cPickle.c"
        var $61=$60+84; //@line 2404 "cPickle.c"
        var $62=HEAP[$61]; //@line 2404 "cPickle.c"
        var $63=($62) & 128; //@line 2404 "cPickle.c"
        var $64=($63)==0; //@line 2404 "cPickle.c"
        if ($64) { __label__ = 19; break; } else { __label__ = 17; break; } //@line 2404 "cPickle.c"
      case 17: // $bb17
        var $65=HEAP[$dictitems]; //@line 2404 "cPickle.c"
        var $66=$65+4; //@line 2404 "cPickle.c"
        var $67=HEAP[$66]; //@line 2404 "cPickle.c"
        var $68=$67+112; //@line 2404 "cPickle.c"
        var $69=HEAP[$68]; //@line 2404 "cPickle.c"
        var $70=($69)==0; //@line 2404 "cPickle.c"
        if ($70) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 2404 "cPickle.c"
      case 18: // $bb18
        var $71=HEAP[$dictitems]; //@line 2404 "cPickle.c"
        var $72=$71+4; //@line 2404 "cPickle.c"
        var $73=HEAP[$72]; //@line 2404 "cPickle.c"
        var $74=$73+112; //@line 2404 "cPickle.c"
        var $75=HEAP[$74]; //@line 2404 "cPickle.c"
        var $76=($75)==((FUNCTION_TABLE_OFFSET + 2)); //@line 2404 "cPickle.c"
        if ($76) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2404 "cPickle.c"
      case 19: // $bb19
        var $77=HEAP[$dictitems]; //@line 2405 "cPickle.c"
        var $78=$77+4; //@line 2405 "cPickle.c"
        var $79=HEAP[$78]; //@line 2405 "cPickle.c"
        var $80=$79+12; //@line 2405 "cPickle.c"
        var $81=HEAP[$80]; //@line 2405 "cPickle.c"
        var $82=HEAP[_PicklingError]; //@line 2405 "cPickle.c"
        var $83=$fn_addr; //@line 2405 "cPickle.c"
        _cPickle_ErrFormat($82, __str41, __str40, allocate([$83,0,0,0,$81,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 2405 "cPickle.c"
        $0=-1; //@line 2408 "cPickle.c"
        __label__ = 81; break; //@line 2408 "cPickle.c"
      case 20: // $bb20
        var $84=$use_newobj; //@line 2414 "cPickle.c"
        var $85=($84)!=0; //@line 2414 "cPickle.c"
        if ($85) { __label__ = 21; break; } else { __label__ = 59; break; } //@line 2414 "cPickle.c"
      case 21: // $bb21
        var $86=HEAP[___name___str]; //@line 2415 "cPickle.c"
        var $87=HEAP[$callable]; //@line 2415 "cPickle.c"
        var $88=_PyObject_GetAttr($87, $86); //@line 2415 "cPickle.c"
        $temp=$88; //@line 2415 "cPickle.c"
        var $89=$temp; //@line 2417 "cPickle.c"
        var $90=($89)==0; //@line 2417 "cPickle.c"
        if ($90) { __label__ = 22; break; } else { __label__ = 25; break; } //@line 2417 "cPickle.c"
      case 22: // $bb22
        var $91=HEAP[_PyExc_AttributeError]; //@line 2418 "cPickle.c"
        var $92=_PyErr_ExceptionMatches($91); //@line 2418 "cPickle.c"
        var $93=($92)!=0; //@line 2418 "cPickle.c"
        if ($93) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 2418 "cPickle.c"
      case 23: // $bb23
        _PyErr_Clear(); //@line 2419 "cPickle.c"
        $use_newobj=0; //@line 2422 "cPickle.c"
        __label__ = 59; break; //@line 2422 "cPickle.c"
      case 24: // $bb24
        $0=-1; //@line 2421 "cPickle.c"
        __label__ = 81; break; //@line 2421 "cPickle.c"
      case 25: // $bb25
        var $94=$temp; //@line 2425 "cPickle.c"
        var $95=$94+4; //@line 2425 "cPickle.c"
        var $96=HEAP[$95]; //@line 2425 "cPickle.c"
        var $97=$96+84; //@line 2425 "cPickle.c"
        var $98=HEAP[$97]; //@line 2425 "cPickle.c"
        var $99=($98) & 134217728; //@line 2425 "cPickle.c"
        var $100=($99)==0; //@line 2425 "cPickle.c"
        if ($100) { __label__ = 28; break; } else { __label__ = 26; break; } //@line 2425 "cPickle.c"
      case 26: // $bb26
        var $101=$temp; //@line 2425 "cPickle.c"
        var $102=$101; //@line 2425 "cPickle.c"
        var $103=$102+20; //@line 2425 "cPickle.c"
        var $104=$103; //@line 2425 "cPickle.c"
        var $105=_strcmp($104, __str42); //@line 2425 "cPickle.c"
        var $106=($105)!=0; //@line 2425 "cPickle.c"
        if ($106) { __label__ = 28; break; } else { __label__ = 27; break; } //@line 2425 "cPickle.c"
      case 27: // $bb27
        $iftmp_170=1; //@line 2425 "cPickle.c"
        __label__ = 29; break; //@line 2425 "cPickle.c"
      case 28: // $bb28
        $iftmp_170=0; //@line 2425 "cPickle.c"
        __label__ = 29; break; //@line 2425 "cPickle.c"
      case 29: // $bb29
        var $107=$iftmp_170; //@line 2425 "cPickle.c"
        $use_newobj=$107; //@line 2425 "cPickle.c"
        var $108=$temp; //@line 2428 "cPickle.c"
        var $109=$108; //@line 2428 "cPickle.c"
        var $110=HEAP[$109]; //@line 2428 "cPickle.c"
        var $111=($110) - 1; //@line 2428 "cPickle.c"
        var $112=$temp; //@line 2428 "cPickle.c"
        var $113=$112; //@line 2428 "cPickle.c"
        HEAP[$113]=$111; //@line 2428 "cPickle.c"
        var $114=$temp; //@line 2428 "cPickle.c"
        var $115=$114; //@line 2428 "cPickle.c"
        var $116=HEAP[$115]; //@line 2428 "cPickle.c"
        var $117=($116)==0; //@line 2428 "cPickle.c"
        if ($117) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 2428 "cPickle.c"
      case 30: // $bb30
        var $118=$temp; //@line 2428 "cPickle.c"
        var $119=$118+4; //@line 2428 "cPickle.c"
        var $120=HEAP[$119]; //@line 2428 "cPickle.c"
        var $121=$120+24; //@line 2428 "cPickle.c"
        var $122=HEAP[$121]; //@line 2428 "cPickle.c"
        var $123=$temp; //@line 2428 "cPickle.c"
        FUNCTION_TABLE[$122]($123); //@line 2428 "cPickle.c"
        __label__ = 31; break; //@line 2428 "cPickle.c"
      case 31: // $bb31
        var $_pr=$use_newobj;
        var $124=($_pr)!=0; //@line 2431 "cPickle.c"
        if ($124) { __label__ = 32; break; } else { __label__ = 59; break; } //@line 2431 "cPickle.c"
      case 32: // $bb32
        var $125=HEAP[$argtup]; //@line 2437 "cPickle.c"
        var $126=_PyTuple_Size($125); //@line 2437 "cPickle.c"
        $n=$126; //@line 2437 "cPickle.c"
        var $127=$n; //@line 2438 "cPickle.c"
        var $128=($127) <= 0; //@line 2438 "cPickle.c"
        if ($128) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 2438 "cPickle.c"
      case 33: // $bb33
        var $129=HEAP[_PicklingError]; //@line 2439 "cPickle.c"
        _PyErr_SetString($129, __str43); //@line 2439 "cPickle.c"
        $0=-1; //@line 2441 "cPickle.c"
        __label__ = 81; break; //@line 2441 "cPickle.c"
      case 34: // $bb34
        var $130=HEAP[$argtup]; //@line 2444 "cPickle.c"
        var $131=$130; //@line 2444 "cPickle.c"
        var $132=$131+12; //@line 2444 "cPickle.c"
        var $133=$132; //@line 2444 "cPickle.c"
        var $134=HEAP[$133]; //@line 2444 "cPickle.c"
        $cls=$134; //@line 2444 "cPickle.c"
        var $135=$cls; //@line 2445 "cPickle.c"
        var $136=_PyObject_HasAttrString($135, __str44); //@line 2445 "cPickle.c"
        var $137=($136)==0; //@line 2445 "cPickle.c"
        if ($137) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 2445 "cPickle.c"
      case 35: // $bb35
        var $138=HEAP[_PicklingError]; //@line 2446 "cPickle.c"
        _PyErr_SetString($138, __str45); //@line 2446 "cPickle.c"
        $0=-1; //@line 2448 "cPickle.c"
        __label__ = 81; break; //@line 2448 "cPickle.c"
      case 36: // $bb36
        var $139=$ob_addr; //@line 2452 "cPickle.c"
        var $140=($139)!=0; //@line 2452 "cPickle.c"
        if ($140) { __label__ = 37; break; } else { __label__ = 47; break; } //@line 2452 "cPickle.c"
      case 37: // $bb37
        var $141=HEAP[___class___str]; //@line 2455 "cPickle.c"
        var $142=$ob_addr; //@line 2455 "cPickle.c"
        var $143=_PyObject_GetAttr($142, $141); //@line 2455 "cPickle.c"
        $ob_dot_class=$143; //@line 2455 "cPickle.c"
        var $144=$ob_dot_class; //@line 2456 "cPickle.c"
        var $145=($144)==0; //@line 2456 "cPickle.c"
        if ($145) { __label__ = 39; break; } else { __label__ = 38; break; } //@line 2456 "cPickle.c"
      case 38: // $bb41_thread
        var $146=$cls; //@line 2463 "cPickle.c"
        var $147=($144)!=($146); //@line 2463 "cPickle.c"
        var $148=($147); //@line 2463 "cPickle.c"
        $i=$148; //@line 2463 "cPickle.c"
        __label__ = 42; break;
      case 39: // $bb38
        var $149=HEAP[_PyExc_AttributeError]; //@line 2457 "cPickle.c"
        var $150=_PyErr_ExceptionMatches($149); //@line 2457 "cPickle.c"
        var $151=($150)!=0; //@line 2457 "cPickle.c"
        if ($151) { __label__ = 41; break; } else { __label__ = 40; break; } //@line 2457 "cPickle.c"
      case 40: // $bb40
        $0=-1; //@line 2461 "cPickle.c"
        __label__ = 81; break; //@line 2461 "cPickle.c"
      case 41: // $bb41
        _PyErr_Clear(); //@line 2459 "cPickle.c"
        var $_pr2=$ob_dot_class;
        var $152=$cls; //@line 2463 "cPickle.c"
        var $153=($_pr2)!=($152); //@line 2463 "cPickle.c"
        var $154=($153); //@line 2463 "cPickle.c"
        $i=$154; //@line 2463 "cPickle.c"
        var $155=($_pr2)!=0; //@line 2464 "cPickle.c"
        if ($155) { __lastLabel__ = 41; __label__ = 42; break; } else { __lastLabel__ = 41; __label__ = 45; break; } //@line 2464 "cPickle.c"
      case 42: // $bb42
        var $156=$ob_dot_class; //@line 2464 "cPickle.c"
        var $157=$156; //@line 2464 "cPickle.c"
        var $158=HEAP[$157]; //@line 2464 "cPickle.c"
        var $159=($158) - 1; //@line 2464 "cPickle.c"
        var $160=$ob_dot_class; //@line 2464 "cPickle.c"
        var $161=$160; //@line 2464 "cPickle.c"
        HEAP[$161]=$159; //@line 2464 "cPickle.c"
        var $162=$ob_dot_class; //@line 2464 "cPickle.c"
        var $163=$162; //@line 2464 "cPickle.c"
        var $164=HEAP[$163]; //@line 2464 "cPickle.c"
        var $165=($164)==0; //@line 2464 "cPickle.c"
        if ($165) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 2464 "cPickle.c"
      case 43: // $bb43
        var $166=$ob_dot_class; //@line 2464 "cPickle.c"
        var $167=$166+4; //@line 2464 "cPickle.c"
        var $168=HEAP[$167]; //@line 2464 "cPickle.c"
        var $169=$168+24; //@line 2464 "cPickle.c"
        var $170=HEAP[$169]; //@line 2464 "cPickle.c"
        var $171=$ob_dot_class; //@line 2464 "cPickle.c"
        FUNCTION_TABLE[$170]($171); //@line 2464 "cPickle.c"
        __label__ = 44; break; //@line 2464 "cPickle.c"
      case 44: // $bb44thread_pre_split
        var $_pr3=$i;
        __lastLabel__ = 44; __label__ = 45; break;
      case 45: // $bb44
        var $172=__lastLabel__ == 44 ? $_pr3 : ($154);
        var $173=($172)!=0; //@line 2465 "cPickle.c"
        if ($173) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 2465 "cPickle.c"
      case 46: // $bb45
        var $174=HEAP[_PicklingError]; //@line 2466 "cPickle.c"
        _PyErr_SetString($174, __str46); //@line 2466 "cPickle.c"
        $0=-1; //@line 2468 "cPickle.c"
        __label__ = 81; break; //@line 2468 "cPickle.c"
      case 47: // $bb46
        var $175=$self_addr; //@line 2473 "cPickle.c"
        var $176=$cls; //@line 2473 "cPickle.c"
        var $177=_save($175, $176, 0); //@line 2473 "cPickle.c"
        var $178=($177) < 0; //@line 2473 "cPickle.c"
        if ($178) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 2473 "cPickle.c"
      case 48: // $bb47
        $0=-1; //@line 2474 "cPickle.c"
        __label__ = 81; break; //@line 2474 "cPickle.c"
      case 49: // $bb48
        var $179=$n; //@line 2476 "cPickle.c"
        var $180=($179) - 1; //@line 2476 "cPickle.c"
        var $181=_PyTuple_New($180); //@line 2476 "cPickle.c"
        $newargtup=$181; //@line 2476 "cPickle.c"
        var $182=$newargtup; //@line 2477 "cPickle.c"
        var $183=($182)==0; //@line 2477 "cPickle.c"
        if ($183) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 2477 "cPickle.c"
      case 50: // $bb49
        $0=-1; //@line 2478 "cPickle.c"
        __label__ = 81; break; //@line 2478 "cPickle.c"
      case 51: // $bb50
        $i=1; //@line 2479 "cPickle.c"
        var $184=$i; //@line 2479 "cPickle.c"
        var $185=$n; //@line 2479 "cPickle.c"
        var $186=($184) < ($185); //@line 2479 "cPickle.c"
        if ($186) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 2479 "cPickle.c"
      case 52: // $bb51
        var $187=HEAP[$argtup]; //@line 2480 "cPickle.c"
        var $188=$187; //@line 2480 "cPickle.c"
        var $189=$i; //@line 2480 "cPickle.c"
        var $190=$188+12; //@line 2480 "cPickle.c"
        var $191=$190+$189*4; //@line 2480 "cPickle.c"
        var $192=HEAP[$191]; //@line 2480 "cPickle.c"
        $temp52=$192; //@line 2480 "cPickle.c"
        var $193=$temp52; //@line 2481 "cPickle.c"
        var $194=$193; //@line 2481 "cPickle.c"
        var $195=HEAP[$194]; //@line 2481 "cPickle.c"
        var $196=($195) + 1; //@line 2481 "cPickle.c"
        var $197=$temp52; //@line 2481 "cPickle.c"
        var $198=$197; //@line 2481 "cPickle.c"
        HEAP[$198]=$196; //@line 2481 "cPickle.c"
        var $199=$newargtup; //@line 2482 "cPickle.c"
        var $200=$199; //@line 2482 "cPickle.c"
        var $201=$i; //@line 2482 "cPickle.c"
        var $202=($201) - 1; //@line 2482 "cPickle.c"
        var $203=$200+12; //@line 2482 "cPickle.c"
        var $204=$203+$202*4; //@line 2482 "cPickle.c"
        var $205=$temp52; //@line 2482 "cPickle.c"
        HEAP[$204]=$205; //@line 2482 "cPickle.c"
        var $206=$i; //@line 2479 "cPickle.c"
        var $207=($206) + 1; //@line 2479 "cPickle.c"
        $i=$207; //@line 2479 "cPickle.c"
        var $208=$i; //@line 2479 "cPickle.c"
        var $209=$n; //@line 2479 "cPickle.c"
        var $210=($208) < ($209); //@line 2479 "cPickle.c"
        if ($210) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 2479 "cPickle.c"
      case 53: // $bb54
        var $211=$self_addr; //@line 2484 "cPickle.c"
        var $212=$newargtup; //@line 2484 "cPickle.c"
        var $213=_save($211, $212, 0); //@line 2484 "cPickle.c"
        $i=$213; //@line 2484 "cPickle.c"
        var $214=$newargtup; //@line 2485 "cPickle.c"
        var $215=$214; //@line 2485 "cPickle.c"
        var $216=HEAP[$215]; //@line 2485 "cPickle.c"
        var $217=($216) - 1; //@line 2485 "cPickle.c"
        var $218=$newargtup; //@line 2485 "cPickle.c"
        var $219=$218; //@line 2485 "cPickle.c"
        HEAP[$219]=$217; //@line 2485 "cPickle.c"
        var $220=$newargtup; //@line 2485 "cPickle.c"
        var $221=$220; //@line 2485 "cPickle.c"
        var $222=HEAP[$221]; //@line 2485 "cPickle.c"
        var $223=($222)==0; //@line 2485 "cPickle.c"
        if ($223) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 2485 "cPickle.c"
      case 54: // $bb55
        var $224=$newargtup; //@line 2485 "cPickle.c"
        var $225=$224+4; //@line 2485 "cPickle.c"
        var $226=HEAP[$225]; //@line 2485 "cPickle.c"
        var $227=$226+24; //@line 2485 "cPickle.c"
        var $228=HEAP[$227]; //@line 2485 "cPickle.c"
        var $229=$newargtup; //@line 2485 "cPickle.c"
        FUNCTION_TABLE[$228]($229); //@line 2485 "cPickle.c"
        __label__ = 55; break; //@line 2485 "cPickle.c"
      case 55: // $bb56
        var $230=$i; //@line 2486 "cPickle.c"
        var $231=($230) < 0; //@line 2486 "cPickle.c"
        if ($231) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 2486 "cPickle.c"
      case 56: // $bb57
        $0=-1; //@line 2487 "cPickle.c"
        __label__ = 81; break; //@line 2487 "cPickle.c"
      case 57: // $bb58
        var $232=$self_addr; //@line 2490 "cPickle.c"
        var $233=$232+48; //@line 2490 "cPickle.c"
        var $234=HEAP[$233]; //@line 2490 "cPickle.c"
        var $235=$self_addr; //@line 2490 "cPickle.c"
        var $236=FUNCTION_TABLE[$234]($235, _newobj_11120, 1); //@line 2490 "cPickle.c"
        var $237=($236) < 0; //@line 2490 "cPickle.c"
        if ($237) { __label__ = 58; break; } else { __label__ = 63; break; } //@line 2490 "cPickle.c"
      case 58: // $bb59
        $0=-1; //@line 2491 "cPickle.c"
        __label__ = 81; break; //@line 2491 "cPickle.c"
      case 59: // $bb61
        var $238=HEAP[$callable]; //@line 2495 "cPickle.c"
        var $239=$self_addr; //@line 2495 "cPickle.c"
        var $240=_save($239, $238, 0); //@line 2495 "cPickle.c"
        var $241=($240) < 0; //@line 2495 "cPickle.c"
        if ($241) { __label__ = 62; break; } else { __label__ = 60; break; } //@line 2495 "cPickle.c"
      case 60: // $bb62
        var $242=HEAP[$argtup]; //@line 2495 "cPickle.c"
        var $243=$self_addr; //@line 2495 "cPickle.c"
        var $244=_save($243, $242, 0); //@line 2495 "cPickle.c"
        var $245=($244) < 0; //@line 2495 "cPickle.c"
        if ($245) { __label__ = 62; break; } else { __label__ = 61; break; } //@line 2495 "cPickle.c"
      case 61: // $bb63
        var $246=$self_addr; //@line 2495 "cPickle.c"
        var $247=$246+48; //@line 2495 "cPickle.c"
        var $248=HEAP[$247]; //@line 2495 "cPickle.c"
        var $249=$self_addr; //@line 2495 "cPickle.c"
        var $250=FUNCTION_TABLE[$248]($249, _reduce_11118, 1); //@line 2495 "cPickle.c"
        var $251=($250) < 0; //@line 2495 "cPickle.c"
        if ($251) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 2495 "cPickle.c"
      case 62: // $bb64
        $0=-1; //@line 2498 "cPickle.c"
        __label__ = 81; break; //@line 2498 "cPickle.c"
      case 63: // $bb65
        var $252=$ob_addr; //@line 2503 "cPickle.c"
        var $253=($252)!=0; //@line 2503 "cPickle.c"
        if ($253) { __label__ = 64; break; } else { __label__ = 70; break; } //@line 2503 "cPickle.c"
      case 64: // $bb66
        var $254=HEAP[$state]; //@line 2504 "cPickle.c"
        var $255=($254)==0; //@line 2504 "cPickle.c"
        if ($255) { __label__ = 68; break; } else { __label__ = 65; break; } //@line 2504 "cPickle.c"
      case 65: // $bb67
        var $256=HEAP[$state]; //@line 2504 "cPickle.c"
        var $257=$256+4; //@line 2504 "cPickle.c"
        var $258=HEAP[$257]; //@line 2504 "cPickle.c"
        var $259=$258+84; //@line 2504 "cPickle.c"
        var $260=HEAP[$259]; //@line 2504 "cPickle.c"
        var $261=($260) & 536870912; //@line 2504 "cPickle.c"
        var $262=($261)!=0; //@line 2504 "cPickle.c"
        if ($262) { __label__ = 68; break; } else { __label__ = 66; break; } //@line 2504 "cPickle.c"
      case 66: // $bb68
        var $263=$self_addr; //@line 2505 "cPickle.c"
        var $264=$ob_addr; //@line 2505 "cPickle.c"
        var $265=_put2($263, $264); //@line 2505 "cPickle.c"
        var $266=($265) < 0; //@line 2505 "cPickle.c"
        if ($266) { __label__ = 67; break; } else { __label__ = 70; break; } //@line 2505 "cPickle.c"
      case 67: // $bb69
        $0=-1; //@line 2506 "cPickle.c"
        __label__ = 81; break; //@line 2506 "cPickle.c"
      case 68: // $bb71
        var $267=$self_addr; //@line 2508 "cPickle.c"
        var $268=$ob_addr; //@line 2508 "cPickle.c"
        var $269=_put($267, $268); //@line 2508 "cPickle.c"
        var $270=($269) < 0; //@line 2508 "cPickle.c"
        if ($270) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 2508 "cPickle.c"
      case 69: // $bb72
        $0=-1; //@line 2509 "cPickle.c"
        __label__ = 81; break; //@line 2509 "cPickle.c"
      case 70: // $bb73
        var $271=HEAP[$listitems]; //@line 2513 "cPickle.c"
        var $272=($271)!=0; //@line 2513 "cPickle.c"
        if ($272) { __label__ = 71; break; } else { __label__ = 73; break; } //@line 2513 "cPickle.c"
      case 71: // $bb74
        var $273=HEAP[$listitems]; //@line 2513 "cPickle.c"
        var $274=$self_addr; //@line 2513 "cPickle.c"
        var $275=_batch_list($274, $273); //@line 2513 "cPickle.c"
        var $276=($275) < 0; //@line 2513 "cPickle.c"
        if ($276) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 2513 "cPickle.c"
      case 72: // $bb75
        $0=-1; //@line 2514 "cPickle.c"
        __label__ = 81; break; //@line 2514 "cPickle.c"
      case 73: // $bb76
        var $277=HEAP[$dictitems]; //@line 2516 "cPickle.c"
        var $278=($277)!=0; //@line 2516 "cPickle.c"
        if ($278) { __label__ = 74; break; } else { __label__ = 76; break; } //@line 2516 "cPickle.c"
      case 74: // $bb77
        var $279=HEAP[$dictitems]; //@line 2516 "cPickle.c"
        var $280=$self_addr; //@line 2516 "cPickle.c"
        var $281=_batch_dict($280, $279); //@line 2516 "cPickle.c"
        var $282=($281) < 0; //@line 2516 "cPickle.c"
        if ($282) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 2516 "cPickle.c"
      case 75: // $bb78
        $0=-1; //@line 2517 "cPickle.c"
        __label__ = 81; break; //@line 2517 "cPickle.c"
      case 76: // $bb79
        var $283=HEAP[$state]; //@line 2519 "cPickle.c"
        var $284=($283)!=0; //@line 2519 "cPickle.c"
        if ($284) { __label__ = 77; break; } else { __label__ = 80; break; } //@line 2519 "cPickle.c"
      case 77: // $bb80
        var $285=HEAP[$state]; //@line 2520 "cPickle.c"
        var $286=$self_addr; //@line 2520 "cPickle.c"
        var $287=_save($286, $285, 0); //@line 2520 "cPickle.c"
        var $288=($287) < 0; //@line 2520 "cPickle.c"
        if ($288) { __label__ = 79; break; } else { __label__ = 78; break; } //@line 2520 "cPickle.c"
      case 78: // $bb81
        var $289=$self_addr; //@line 2520 "cPickle.c"
        var $290=$289+48; //@line 2520 "cPickle.c"
        var $291=HEAP[$290]; //@line 2520 "cPickle.c"
        var $292=$self_addr; //@line 2520 "cPickle.c"
        var $293=FUNCTION_TABLE[$291]($292, _build_11119, 1); //@line 2520 "cPickle.c"
        var $294=($293) < 0; //@line 2520 "cPickle.c"
        if ($294) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 2520 "cPickle.c"
      case 79: // $bb82
        $0=-1; //@line 2522 "cPickle.c"
        __label__ = 81; break; //@line 2522 "cPickle.c"
      case 80: // $bb83
        $0=0; //@line 2525 "cPickle.c"
        __label__ = 81; break; //@line 2525 "cPickle.c"
      case 81: // $bb84
        var $295=$0; //@line 2372 "cPickle.c"
        $retval=$295; //@line 2372 "cPickle.c"
        var $retval85=$retval; //@line 2372 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval85; //@line 2372 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save($self, $args, $pers_save) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $pers_save_addr;
        var $retval;
        var $0;
        var $type;
        var $py_ob_id;
        var $__reduce__;
        var $t;
        var $res;
        var $tmp;
        $self_addr=$self;
        $args_addr=$args;
        $pers_save_addr=$pers_save;
        $py_ob_id=0; //@line 2532 "cPickle.c"
        $__reduce__=0; //@line 2532 "cPickle.c"
        $t=0; //@line 2532 "cPickle.c"
        $res=-1; //@line 2533 "cPickle.c"
        var $1=HEAP[__PyThreadState_Current]; //@line 2536 "cPickle.c"
        var $2=$1+12; //@line 2536 "cPickle.c"
        var $3=HEAP[$2]; //@line 2536 "cPickle.c"
        var $4=($3) + 1; //@line 2536 "cPickle.c"
        var $5=$1+12; //@line 2536 "cPickle.c"
        HEAP[$5]=$4; //@line 2536 "cPickle.c"
        var $6=$1+12; //@line 2536 "cPickle.c"
        var $7=HEAP[$6]; //@line 2536 "cPickle.c"
        var $8=HEAP[__Py_CheckRecursionLimit]; //@line 2536 "cPickle.c"
        var $9=($7) > ($8); //@line 2536 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2536 "cPickle.c"
      case 1: // $bb
        var $10=__Py_CheckRecursiveCall(__str17); //@line 2536 "cPickle.c"
        var $11=($10)!=0; //@line 2536 "cPickle.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2536 "cPickle.c"
      case 2: // $bb1
        $0=-1; //@line 2537 "cPickle.c"
        __label__ = 111; break; //@line 2537 "cPickle.c"
      case 3: // $bb2
        var $12=$pers_save_addr; //@line 2539 "cPickle.c"
        var $13=($12)==0; //@line 2539 "cPickle.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 2539 "cPickle.c"
      case 4: // $bb3
        var $14=$self_addr; //@line 2539 "cPickle.c"
        var $15=$14+28; //@line 2539 "cPickle.c"
        var $16=HEAP[$15]; //@line 2539 "cPickle.c"
        var $17=($16)!=0; //@line 2539 "cPickle.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 2539 "cPickle.c"
      case 5: // $bb4
        var $18=$self_addr; //@line 2540 "cPickle.c"
        var $19=$18+28; //@line 2540 "cPickle.c"
        var $20=HEAP[$19]; //@line 2540 "cPickle.c"
        var $21=$self_addr; //@line 2540 "cPickle.c"
        var $22=$args_addr; //@line 2540 "cPickle.c"
        var $23=_save_pers($21, $22, $20); //@line 2540 "cPickle.c"
        $tmp=$23; //@line 2540 "cPickle.c"
        var $24=$tmp; //@line 2540 "cPickle.c"
        var $25=($24)!=0; //@line 2540 "cPickle.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2540 "cPickle.c"
      case 6: // $bb5
        var $26=$tmp; //@line 2541 "cPickle.c"
        $res=$26; //@line 2541 "cPickle.c"
        __label__ = 101; break; //@line 2541 "cPickle.c"
      case 7: // $bb6
        var $27=$args_addr; //@line 2546 "cPickle.c"
        var $28=($27)==(__Py_NoneStruct); //@line 2546 "cPickle.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2546 "cPickle.c"
      case 8: // $bb7
        var $29=$self_addr; //@line 2547 "cPickle.c"
        var $30=$args_addr; //@line 2547 "cPickle.c"
        var $31=_save_none($29, $30); //@line 2547 "cPickle.c"
        $res=$31; //@line 2547 "cPickle.c"
        __label__ = 101; break; //@line 2547 "cPickle.c"
      case 9: // $bb8
        var $32=$args_addr; //@line 2551 "cPickle.c"
        var $33=$32+4; //@line 2551 "cPickle.c"
        var $34=HEAP[$33]; //@line 2551 "cPickle.c"
        $type=$34; //@line 2551 "cPickle.c"
        var $35=$type; //@line 2553 "cPickle.c"
        var $36=$35+12; //@line 2553 "cPickle.c"
        var $37=HEAP[$36]; //@line 2553 "cPickle.c"
        var $38=$37; //@line 2553 "cPickle.c"
        var $39=HEAP[$38]; //@line 2553 "cPickle.c"
        var $40=($39); //@line 2553 "cPickle.c"
        if ($40 == 98) {
          __label__ = 10; break;
        }
        else if ($40 == 102) {
          __label__ = 16; break;
        }
        else if ($40 == 105) {
          __label__ = 12; break;
        }
        else if ($40 == 108) {
          __label__ = 14; break;
        }
        else if ($40 == 115) {
          __label__ = 21; break;
        }
        else if ($40 == 116) {
          __label__ = 18; break;
        }
        else if ($40 == 117) {
          __label__ = 24; break;
        }
        else {
        __label__ = 27; break;
        }
        
      case 10: // $bb9
        var $41=$args_addr; //@line 2555 "cPickle.c"
        var $42=($41)==(__Py_ZeroStruct); //@line 2555 "cPickle.c"
        var $43=$args_addr; //@line 2555 "cPickle.c"
        var $44=($43)==(__Py_TrueStruct); //@line 2555 "cPickle.c"
        var $or_cond=($42) | ($44);
        if ($or_cond) { __label__ = 11; break; } else { __label__ = 27; break; } //@line 2555 "cPickle.c"
      case 11: // $bb11
        var $45=$self_addr; //@line 2556 "cPickle.c"
        var $46=$args_addr; //@line 2556 "cPickle.c"
        var $47=_save_bool($45, $46); //@line 2556 "cPickle.c"
        $res=$47; //@line 2556 "cPickle.c"
        __label__ = 101; break; //@line 2556 "cPickle.c"
      case 12: // $bb13
        var $48=$type; //@line 2561 "cPickle.c"
        var $49=($48)==(_PyInt_Type); //@line 2561 "cPickle.c"
        if ($49) { __label__ = 13; break; } else { __label__ = 27; break; } //@line 2561 "cPickle.c"
      case 13: // $bb14
        var $50=$self_addr; //@line 2562 "cPickle.c"
        var $51=$args_addr; //@line 2562 "cPickle.c"
        var $52=_save_int($50, $51); //@line 2562 "cPickle.c"
        $res=$52; //@line 2562 "cPickle.c"
        __label__ = 101; break; //@line 2562 "cPickle.c"
      case 14: // $bb16
        var $53=$type; //@line 2568 "cPickle.c"
        var $54=($53)==(_PyLong_Type); //@line 2568 "cPickle.c"
        if ($54) { __label__ = 15; break; } else { __label__ = 27; break; } //@line 2568 "cPickle.c"
      case 15: // $bb17
        var $55=$self_addr; //@line 2569 "cPickle.c"
        var $56=$args_addr; //@line 2569 "cPickle.c"
        var $57=_save_long($55, $56); //@line 2569 "cPickle.c"
        $res=$57; //@line 2569 "cPickle.c"
        __label__ = 101; break; //@line 2569 "cPickle.c"
      case 16: // $bb19
        var $58=$type; //@line 2575 "cPickle.c"
        var $59=($58)==(_PyFloat_Type); //@line 2575 "cPickle.c"
        if ($59) { __label__ = 17; break; } else { __label__ = 27; break; } //@line 2575 "cPickle.c"
      case 17: // $bb20
        var $60=$self_addr; //@line 2576 "cPickle.c"
        var $61=$args_addr; //@line 2576 "cPickle.c"
        var $62=_save_float($60, $61); //@line 2576 "cPickle.c"
        $res=$62; //@line 2576 "cPickle.c"
        __label__ = 101; break; //@line 2576 "cPickle.c"
      case 18: // $bb22
        var $63=$type; //@line 2582 "cPickle.c"
        var $64=($63)==(_PyTuple_Type); //@line 2582 "cPickle.c"
        if ($64) { __label__ = 19; break; } else { __label__ = 27; break; } //@line 2582 "cPickle.c"
      case 19: // $bb23
        var $65=$args_addr; //@line 2582 "cPickle.c"
        var $66=_PyTuple_Size($65); //@line 2582 "cPickle.c"
        var $67=($66)==0; //@line 2582 "cPickle.c"
        if ($67) { __label__ = 20; break; } else { __label__ = 27; break; } //@line 2582 "cPickle.c"
      case 20: // $bb24
        var $68=$self_addr; //@line 2583 "cPickle.c"
        var $69=$args_addr; //@line 2583 "cPickle.c"
        var $70=_save_tuple($68, $69); //@line 2583 "cPickle.c"
        $res=$70; //@line 2583 "cPickle.c"
        __label__ = 101; break; //@line 2583 "cPickle.c"
      case 21: // $bb26
        var $71=$type; //@line 2589 "cPickle.c"
        var $72=($71)==(_PyString_Type); //@line 2589 "cPickle.c"
        if ($72) { __label__ = 22; break; } else { __label__ = 27; break; } //@line 2589 "cPickle.c"
      case 22: // $bb27
        var $73=$args_addr; //@line 2589 "cPickle.c"
        var $74=$73; //@line 2589 "cPickle.c"
        var $75=$74+8; //@line 2589 "cPickle.c"
        var $76=HEAP[$75]; //@line 2589 "cPickle.c"
        var $77=($76) <= 1; //@line 2589 "cPickle.c"
        if ($77) { __label__ = 23; break; } else { __label__ = 27; break; } //@line 2589 "cPickle.c"
      case 23: // $bb28
        var $78=$self_addr; //@line 2590 "cPickle.c"
        var $79=$args_addr; //@line 2590 "cPickle.c"
        var $80=_save_string($78, $79, 0); //@line 2590 "cPickle.c"
        $res=$80; //@line 2590 "cPickle.c"
        __label__ = 101; break; //@line 2590 "cPickle.c"
      case 24: // $bb30
        var $81=$type; //@line 2597 "cPickle.c"
        var $82=($81)==(_PyUnicode_Type); //@line 2597 "cPickle.c"
        if ($82) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 2597 "cPickle.c"
      case 25: // $bb31
        var $83=$args_addr; //@line 2597 "cPickle.c"
        var $84=$83; //@line 2597 "cPickle.c"
        var $85=$84+8; //@line 2597 "cPickle.c"
        var $86=HEAP[$85]; //@line 2597 "cPickle.c"
        var $87=($86) <= 1; //@line 2597 "cPickle.c"
        if ($87) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 2597 "cPickle.c"
      case 26: // $bb32
        var $88=$self_addr; //@line 2598 "cPickle.c"
        var $89=$args_addr; //@line 2598 "cPickle.c"
        var $90=_save_unicode($88, $89, 0); //@line 2598 "cPickle.c"
        $res=$90; //@line 2598 "cPickle.c"
        __label__ = 101; break; //@line 2598 "cPickle.c"
      case 27: // $bb33
        var $91=$args_addr; //@line 2605 "cPickle.c"
        var $92=$91; //@line 2605 "cPickle.c"
        var $93=HEAP[$92]; //@line 2605 "cPickle.c"
        var $94=($93) > 1; //@line 2605 "cPickle.c"
        if ($94) { __label__ = 28; break; } else { __label__ = 32; break; } //@line 2605 "cPickle.c"
      case 28: // $bb34
        var $95=$args_addr; //@line 2606 "cPickle.c"
        var $96=$95; //@line 2606 "cPickle.c"
        var $97=_PyLong_FromVoidPtr($96); //@line 2606 "cPickle.c"
        $py_ob_id=$97; //@line 2606 "cPickle.c"
        var $98=$py_ob_id; //@line 2606 "cPickle.c"
        var $99=($98)==0; //@line 2606 "cPickle.c"
        if ($99) { __label__ = 101; break; } else { __label__ = 29; break; } //@line 2606 "cPickle.c"
      case 29: // $bb35
        var $100=$self_addr; //@line 2609 "cPickle.c"
        var $101=$100+20; //@line 2609 "cPickle.c"
        var $102=HEAP[$101]; //@line 2609 "cPickle.c"
        var $103=$py_ob_id; //@line 2609 "cPickle.c"
        var $104=_PyDict_GetItem($102, $103); //@line 2609 "cPickle.c"
        var $105=($104)!=0; //@line 2609 "cPickle.c"
        if ($105) { __label__ = 30; break; } else { __label__ = 32; break; } //@line 2609 "cPickle.c"
      case 30: // $bb36
        var $106=$self_addr; //@line 2610 "cPickle.c"
        var $107=$py_ob_id; //@line 2610 "cPickle.c"
        var $108=_get($106, $107); //@line 2610 "cPickle.c"
        var $109=($108) < 0; //@line 2610 "cPickle.c"
        if ($109) { __label__ = 101; break; } else { __label__ = 31; break; } //@line 2610 "cPickle.c"
      case 31: // $bb37
        $res=0; //@line 2613 "cPickle.c"
        __label__ = 101; break; //@line 2613 "cPickle.c"
      case 32: // $bb38
        var $110=$type; //@line 2618 "cPickle.c"
        var $111=$110+12; //@line 2618 "cPickle.c"
        var $112=HEAP[$111]; //@line 2618 "cPickle.c"
        var $113=$112; //@line 2618 "cPickle.c"
        var $114=HEAP[$113]; //@line 2618 "cPickle.c"
        var $115=($114); //@line 2618 "cPickle.c"
        if ($115 == 98) {
          __label__ = 53; break;
        }
        else if ($115 == 99) {
          __label__ = 47; break;
        }
        else if ($115 == 100) {
          __label__ = 43; break;
        }
        else if ($115 == 102) {
          __label__ = 49; break;
        }
        else if ($115 == 105) {
          __label__ = 45; break;
        }
        else if ($115 == 108) {
          __label__ = 41; break;
        }
        else if ($115 == 115) {
          __label__ = 33; break;
        }
        else if ($115 == 116) {
          __label__ = 37; break;
        }
        else if ($115 == 117) {
          __label__ = 35; break;
        }
        else {
        __label__ = 55; break;
        }
        
      case 33: // $bb39
        var $116=$type; //@line 2620 "cPickle.c"
        var $117=($116)==(_PyString_Type); //@line 2620 "cPickle.c"
        if ($117) { __label__ = 34; break; } else { __label__ = 55; break; } //@line 2620 "cPickle.c"
      case 34: // $bb40
        var $118=$self_addr; //@line 2621 "cPickle.c"
        var $119=$args_addr; //@line 2621 "cPickle.c"
        var $120=_save_string($118, $119, 1); //@line 2621 "cPickle.c"
        $res=$120; //@line 2621 "cPickle.c"
        __label__ = 101; break; //@line 2621 "cPickle.c"
      case 35: // $bb42
        var $121=$type; //@line 2628 "cPickle.c"
        var $122=($121)==(_PyUnicode_Type); //@line 2628 "cPickle.c"
        if ($122) { __label__ = 36; break; } else { __label__ = 55; break; } //@line 2628 "cPickle.c"
      case 36: // $bb43
        var $123=$self_addr; //@line 2629 "cPickle.c"
        var $124=$args_addr; //@line 2629 "cPickle.c"
        var $125=_save_unicode($123, $124, 1); //@line 2629 "cPickle.c"
        $res=$125; //@line 2629 "cPickle.c"
        __label__ = 101; break; //@line 2629 "cPickle.c"
      case 37: // $bb45
        var $126=$type; //@line 2636 "cPickle.c"
        var $127=($126)==(_PyTuple_Type); //@line 2636 "cPickle.c"
        if ($127) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 2636 "cPickle.c"
      case 38: // $bb46
        var $128=$self_addr; //@line 2637 "cPickle.c"
        var $129=$args_addr; //@line 2637 "cPickle.c"
        var $130=_save_tuple($128, $129); //@line 2637 "cPickle.c"
        $res=$130; //@line 2637 "cPickle.c"
        __label__ = 101; break; //@line 2637 "cPickle.c"
      case 39: // $bb47
        var $131=$type; //@line 2640 "cPickle.c"
        var $132=($131)==(_PyType_Type); //@line 2640 "cPickle.c"
        if ($132) { __label__ = 40; break; } else { __label__ = 55; break; } //@line 2640 "cPickle.c"
      case 40: // $bb48
        var $133=$self_addr; //@line 2641 "cPickle.c"
        var $134=$args_addr; //@line 2641 "cPickle.c"
        var $135=_save_global($133, $134, 0); //@line 2641 "cPickle.c"
        $res=$135; //@line 2641 "cPickle.c"
        __label__ = 101; break; //@line 2641 "cPickle.c"
      case 41: // $bb50
        var $136=$type; //@line 2647 "cPickle.c"
        var $137=($136)==(_PyList_Type); //@line 2647 "cPickle.c"
        if ($137) { __label__ = 42; break; } else { __label__ = 55; break; } //@line 2647 "cPickle.c"
      case 42: // $bb51
        var $138=$self_addr; //@line 2648 "cPickle.c"
        var $139=$args_addr; //@line 2648 "cPickle.c"
        var $140=_save_list($138, $139); //@line 2648 "cPickle.c"
        $res=$140; //@line 2648 "cPickle.c"
        __label__ = 101; break; //@line 2648 "cPickle.c"
      case 43: // $bb53
        var $141=$type; //@line 2654 "cPickle.c"
        var $142=($141)==(_PyDict_Type); //@line 2654 "cPickle.c"
        if ($142) { __label__ = 44; break; } else { __label__ = 55; break; } //@line 2654 "cPickle.c"
      case 44: // $bb54
        var $143=$self_addr; //@line 2655 "cPickle.c"
        var $144=$args_addr; //@line 2655 "cPickle.c"
        var $145=_save_dict($143, $144); //@line 2655 "cPickle.c"
        $res=$145; //@line 2655 "cPickle.c"
        __label__ = 101; break; //@line 2655 "cPickle.c"
      case 45: // $bb56
        var $146=$type; //@line 2661 "cPickle.c"
        var $147=($146)==(_PyInstance_Type); //@line 2661 "cPickle.c"
        if ($147) { __label__ = 46; break; } else { __label__ = 55; break; } //@line 2661 "cPickle.c"
      case 46: // $bb57
        var $148=$self_addr; //@line 2662 "cPickle.c"
        var $149=$args_addr; //@line 2662 "cPickle.c"
        var $150=_save_inst($148, $149); //@line 2662 "cPickle.c"
        $res=$150; //@line 2662 "cPickle.c"
        __label__ = 101; break; //@line 2662 "cPickle.c"
      case 47: // $bb59
        var $151=$type; //@line 2668 "cPickle.c"
        var $152=($151)==(_PyClass_Type); //@line 2668 "cPickle.c"
        if ($152) { __label__ = 48; break; } else { __label__ = 55; break; } //@line 2668 "cPickle.c"
      case 48: // $bb60
        var $153=$self_addr; //@line 2669 "cPickle.c"
        var $154=$args_addr; //@line 2669 "cPickle.c"
        var $155=_save_global($153, $154, 0); //@line 2669 "cPickle.c"
        $res=$155; //@line 2669 "cPickle.c"
        __label__ = 101; break; //@line 2669 "cPickle.c"
      case 49: // $bb62
        var $156=$type; //@line 2675 "cPickle.c"
        var $157=($156)==(_PyFunction_Type); //@line 2675 "cPickle.c"
        if ($157) { __label__ = 50; break; } else { __label__ = 55; break; } //@line 2675 "cPickle.c"
      case 50: // $bb63
        var $158=$self_addr; //@line 2676 "cPickle.c"
        var $159=$args_addr; //@line 2676 "cPickle.c"
        var $160=_save_global($158, $159, 0); //@line 2676 "cPickle.c"
        $res=$160; //@line 2676 "cPickle.c"
        var $161=$res; //@line 2677 "cPickle.c"
        var $162=($161)!=0; //@line 2677 "cPickle.c"
        if ($162) { __label__ = 51; break; } else { __label__ = 101; break; } //@line 2677 "cPickle.c"
      case 51: // $bb64
        var $163=HEAP[_PickleError]; //@line 2677 "cPickle.c"
        var $164=_PyErr_ExceptionMatches($163); //@line 2677 "cPickle.c"
        var $165=($164)!=0; //@line 2677 "cPickle.c"
        if ($165) { __label__ = 52; break; } else { __label__ = 101; break; } //@line 2677 "cPickle.c"
      case 52: // $bb65
        _PyErr_Clear(); //@line 2679 "cPickle.c"
        __label__ = 55; break; //@line 2679 "cPickle.c"
      case 53: // $bb68
        var $166=$type; //@line 2687 "cPickle.c"
        var $167=($166)==(_PyCFunction_Type); //@line 2687 "cPickle.c"
        if ($167) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 2687 "cPickle.c"
      case 54: // $bb69
        var $168=$self_addr; //@line 2688 "cPickle.c"
        var $169=$args_addr; //@line 2688 "cPickle.c"
        var $170=_save_global($168, $169, 0); //@line 2688 "cPickle.c"
        $res=$170; //@line 2688 "cPickle.c"
        __label__ = 101; break; //@line 2688 "cPickle.c"
      case 55: // $bb70
        var $171=$pers_save_addr; //@line 2693 "cPickle.c"
        var $172=($171)==0; //@line 2693 "cPickle.c"
        if ($172) { __label__ = 56; break; } else { __label__ = 59; break; } //@line 2693 "cPickle.c"
      case 56: // $bb71
        var $173=$self_addr; //@line 2693 "cPickle.c"
        var $174=$173+32; //@line 2693 "cPickle.c"
        var $175=HEAP[$174]; //@line 2693 "cPickle.c"
        var $176=($175)!=0; //@line 2693 "cPickle.c"
        if ($176) { __label__ = 57; break; } else { __label__ = 59; break; } //@line 2693 "cPickle.c"
      case 57: // $bb72
        var $177=$self_addr; //@line 2694 "cPickle.c"
        var $178=$177+32; //@line 2694 "cPickle.c"
        var $179=HEAP[$178]; //@line 2694 "cPickle.c"
        var $180=$self_addr; //@line 2694 "cPickle.c"
        var $181=$args_addr; //@line 2694 "cPickle.c"
        var $182=_save_pers($180, $181, $179); //@line 2694 "cPickle.c"
        $tmp=$182; //@line 2694 "cPickle.c"
        var $183=$tmp; //@line 2694 "cPickle.c"
        var $184=($183)!=0; //@line 2694 "cPickle.c"
        if ($184) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 2694 "cPickle.c"
      case 58: // $bb73
        var $185=$tmp; //@line 2695 "cPickle.c"
        $res=$185; //@line 2695 "cPickle.c"
        __label__ = 101; break; //@line 2695 "cPickle.c"
      case 59: // $bb74
        var $186=$type; //@line 2700 "cPickle.c"
        var $187=_PyType_IsSubtype($186, _PyType_Type); //@line 2700 "cPickle.c"
        var $188=($187)!=0; //@line 2700 "cPickle.c"
        if ($188) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 2700 "cPickle.c"
      case 60: // $bb75
        var $189=$self_addr; //@line 2701 "cPickle.c"
        var $190=$args_addr; //@line 2701 "cPickle.c"
        var $191=_save_global($189, $190, 0); //@line 2701 "cPickle.c"
        $res=$191; //@line 2701 "cPickle.c"
        __label__ = 101; break; //@line 2701 "cPickle.c"
      case 61: // $bb76
        var $192=$type; //@line 2709 "cPickle.c"
        var $193=$192; //@line 2709 "cPickle.c"
        var $194=HEAP[_dispatch_table]; //@line 2709 "cPickle.c"
        var $195=_PyDict_GetItem($194, $193); //@line 2709 "cPickle.c"
        $__reduce__=$195; //@line 2709 "cPickle.c"
        var $196=$__reduce__; //@line 2710 "cPickle.c"
        var $197=($196)!=0; //@line 2710 "cPickle.c"
        if ($197) { __label__ = 62; break; } else { __label__ = 75; break; } //@line 2710 "cPickle.c"
      case 62: // $bb77
        var $198=$__reduce__; //@line 2711 "cPickle.c"
        var $199=$198; //@line 2711 "cPickle.c"
        var $200=HEAP[$199]; //@line 2711 "cPickle.c"
        var $201=($200) + 1; //@line 2711 "cPickle.c"
        var $202=$__reduce__; //@line 2711 "cPickle.c"
        var $203=$202; //@line 2711 "cPickle.c"
        HEAP[$203]=$201; //@line 2711 "cPickle.c"
        var $204=$args_addr; //@line 2712 "cPickle.c"
        var $205=$204; //@line 2712 "cPickle.c"
        var $206=HEAP[$205]; //@line 2712 "cPickle.c"
        var $207=($206) + 1; //@line 2712 "cPickle.c"
        var $208=$args_addr; //@line 2712 "cPickle.c"
        var $209=$208; //@line 2712 "cPickle.c"
        HEAP[$209]=$207; //@line 2712 "cPickle.c"
        var $210=$self_addr; //@line 2713 "cPickle.c"
        var $211=$210+24; //@line 2713 "cPickle.c"
        var $212=HEAP[$211]; //@line 2713 "cPickle.c"
        var $213=($212)!=0; //@line 2713 "cPickle.c"
        if ($213) { __label__ = 64; break; } else { __label__ = 63; break; } //@line 2713 "cPickle.c"
      case 63: // $bb78
        var $214=_PyTuple_New(1); //@line 2713 "cPickle.c"
        var $215=$self_addr; //@line 2713 "cPickle.c"
        var $216=$215+24; //@line 2713 "cPickle.c"
        HEAP[$216]=$214; //@line 2713 "cPickle.c"
        var $217=$self_addr; //@line 2713 "cPickle.c"
        var $218=$217+24; //@line 2713 "cPickle.c"
        var $219=HEAP[$218]; //@line 2713 "cPickle.c"
        var $220=($219)!=0; //@line 2713 "cPickle.c"
        if ($220) { __label__ = 64; break; } else { __label__ = 68; break; } //@line 2713 "cPickle.c"
      case 64: // $bb79
        var $221=$self_addr; //@line 2713 "cPickle.c"
        var $222=$221+24; //@line 2713 "cPickle.c"
        var $223=HEAP[$222]; //@line 2713 "cPickle.c"
        var $224=$223; //@line 2713 "cPickle.c"
        var $225=$224+12; //@line 2713 "cPickle.c"
        var $226=$225; //@line 2713 "cPickle.c"
        var $227=HEAP[$226]; //@line 2713 "cPickle.c"
        var $228=($227)!=0; //@line 2713 "cPickle.c"
        if ($228) { __label__ = 65; break; } else { __label__ = 67; break; } //@line 2713 "cPickle.c"
      case 65: // $bb80
        var $229=$self_addr; //@line 2713 "cPickle.c"
        var $230=$229+24; //@line 2713 "cPickle.c"
        var $231=HEAP[$230]; //@line 2713 "cPickle.c"
        var $232=$231; //@line 2713 "cPickle.c"
        var $233=$232+12; //@line 2713 "cPickle.c"
        var $234=$233; //@line 2713 "cPickle.c"
        var $235=HEAP[$234]; //@line 2713 "cPickle.c"
        var $236=$235; //@line 2713 "cPickle.c"
        var $237=HEAP[$236]; //@line 2713 "cPickle.c"
        var $238=($237) - 1; //@line 2713 "cPickle.c"
        var $239=$235; //@line 2713 "cPickle.c"
        HEAP[$239]=$238; //@line 2713 "cPickle.c"
        var $240=$235; //@line 2713 "cPickle.c"
        var $241=HEAP[$240]; //@line 2713 "cPickle.c"
        var $242=($241)==0; //@line 2713 "cPickle.c"
        if ($242) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 2713 "cPickle.c"
      case 66: // $bb81
        var $243=$self_addr; //@line 2713 "cPickle.c"
        var $244=$243+24; //@line 2713 "cPickle.c"
        var $245=HEAP[$244]; //@line 2713 "cPickle.c"
        var $246=$245; //@line 2713 "cPickle.c"
        var $247=$246+12; //@line 2713 "cPickle.c"
        var $248=$247; //@line 2713 "cPickle.c"
        var $249=HEAP[$248]; //@line 2713 "cPickle.c"
        var $250=$249+4; //@line 2713 "cPickle.c"
        var $251=HEAP[$250]; //@line 2713 "cPickle.c"
        var $252=$251+24; //@line 2713 "cPickle.c"
        var $253=HEAP[$252]; //@line 2713 "cPickle.c"
        var $254=$self_addr; //@line 2713 "cPickle.c"
        var $255=$254+24; //@line 2713 "cPickle.c"
        var $256=HEAP[$255]; //@line 2713 "cPickle.c"
        var $257=$256; //@line 2713 "cPickle.c"
        var $258=$257+12; //@line 2713 "cPickle.c"
        var $259=$258; //@line 2713 "cPickle.c"
        var $260=HEAP[$259]; //@line 2713 "cPickle.c"
        FUNCTION_TABLE[$253]($260); //@line 2713 "cPickle.c"
        __label__ = 67; break; //@line 2713 "cPickle.c"
      case 67: // $bb82
        var $261=$self_addr; //@line 2713 "cPickle.c"
        var $262=$261+24; //@line 2713 "cPickle.c"
        var $263=HEAP[$262]; //@line 2713 "cPickle.c"
        var $264=$263; //@line 2713 "cPickle.c"
        var $265=$264+12; //@line 2713 "cPickle.c"
        var $266=$265; //@line 2713 "cPickle.c"
        var $267=$args_addr; //@line 2713 "cPickle.c"
        HEAP[$266]=$267; //@line 2713 "cPickle.c"
        __label__ = 70; break; //@line 2713 "cPickle.c"
      case 68: // $bb83
        var $268=$args_addr; //@line 2713 "cPickle.c"
        var $269=$268; //@line 2713 "cPickle.c"
        var $270=HEAP[$269]; //@line 2713 "cPickle.c"
        var $271=($270) - 1; //@line 2713 "cPickle.c"
        var $272=$args_addr; //@line 2713 "cPickle.c"
        var $273=$272; //@line 2713 "cPickle.c"
        HEAP[$273]=$271; //@line 2713 "cPickle.c"
        var $274=$args_addr; //@line 2713 "cPickle.c"
        var $275=$274; //@line 2713 "cPickle.c"
        var $276=HEAP[$275]; //@line 2713 "cPickle.c"
        var $277=($276)==0; //@line 2713 "cPickle.c"
        if ($277) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 2713 "cPickle.c"
      case 69: // $bb84
        var $278=$args_addr; //@line 2713 "cPickle.c"
        var $279=$278+4; //@line 2713 "cPickle.c"
        var $280=HEAP[$279]; //@line 2713 "cPickle.c"
        var $281=$280+24; //@line 2713 "cPickle.c"
        var $282=HEAP[$281]; //@line 2713 "cPickle.c"
        var $283=$args_addr; //@line 2713 "cPickle.c"
        FUNCTION_TABLE[$282]($283); //@line 2713 "cPickle.c"
        __label__ = 70; break; //@line 2713 "cPickle.c"
      case 70: // $bb85
        var $284=$self_addr; //@line 2714 "cPickle.c"
        var $285=$284+24; //@line 2714 "cPickle.c"
        var $286=HEAP[$285]; //@line 2714 "cPickle.c"
        var $287=($286)!=0; //@line 2714 "cPickle.c"
        if ($287) { __label__ = 71; break; } else { __label__ = 94; break; } //@line 2714 "cPickle.c"
      case 71: // $bb86
        var $288=$self_addr; //@line 2715 "cPickle.c"
        var $289=$288+24; //@line 2715 "cPickle.c"
        var $290=HEAP[$289]; //@line 2715 "cPickle.c"
        var $291=$__reduce__; //@line 2715 "cPickle.c"
        var $292=_PyObject_Call($291, $290, 0); //@line 2715 "cPickle.c"
        $t=$292; //@line 2715 "cPickle.c"
        var $293=$self_addr; //@line 2716 "cPickle.c"
        var $294=$293+24; //@line 2716 "cPickle.c"
        var $295=HEAP[$294]; //@line 2716 "cPickle.c"
        var $296=$295; //@line 2716 "cPickle.c"
        var $297=HEAP[$296]; //@line 2716 "cPickle.c"
        var $298=($297) > 1; //@line 2716 "cPickle.c"
        if ($298) { __label__ = 72; break; } else { __label__ = 94; break; } //@line 2716 "cPickle.c"
      case 72: // $bb87
        var $299=$self_addr; //@line 2716 "cPickle.c"
        var $300=$299+24; //@line 2716 "cPickle.c"
        var $301=HEAP[$300]; //@line 2716 "cPickle.c"
        var $302=$301; //@line 2716 "cPickle.c"
        var $303=HEAP[$302]; //@line 2716 "cPickle.c"
        var $304=($303) - 1; //@line 2716 "cPickle.c"
        var $305=$301; //@line 2716 "cPickle.c"
        HEAP[$305]=$304; //@line 2716 "cPickle.c"
        var $306=$301; //@line 2716 "cPickle.c"
        var $307=HEAP[$306]; //@line 2716 "cPickle.c"
        var $308=($307)==0; //@line 2716 "cPickle.c"
        if ($308) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 2716 "cPickle.c"
      case 73: // $bb88
        var $309=$self_addr; //@line 2716 "cPickle.c"
        var $310=$309+24; //@line 2716 "cPickle.c"
        var $311=HEAP[$310]; //@line 2716 "cPickle.c"
        var $312=$311+4; //@line 2716 "cPickle.c"
        var $313=HEAP[$312]; //@line 2716 "cPickle.c"
        var $314=$313+24; //@line 2716 "cPickle.c"
        var $315=HEAP[$314]; //@line 2716 "cPickle.c"
        var $316=$self_addr; //@line 2716 "cPickle.c"
        var $317=$316+24; //@line 2716 "cPickle.c"
        var $318=HEAP[$317]; //@line 2716 "cPickle.c"
        FUNCTION_TABLE[$315]($318); //@line 2716 "cPickle.c"
        __label__ = 74; break; //@line 2716 "cPickle.c"
      case 74: // $bb89
        var $319=$self_addr; //@line 2716 "cPickle.c"
        var $320=$319+24; //@line 2716 "cPickle.c"
        HEAP[$320]=0; //@line 2716 "cPickle.c"
        __label__ = 94; break; //@line 2716 "cPickle.c"
      case 75: // $bb91
        var $321=HEAP[___reduce_ex___str]; //@line 2721 "cPickle.c"
        var $322=$args_addr; //@line 2721 "cPickle.c"
        var $323=_PyObject_GetAttr($322, $321); //@line 2721 "cPickle.c"
        $__reduce__=$323; //@line 2721 "cPickle.c"
        var $324=$__reduce__; //@line 2722 "cPickle.c"
        var $325=($324)!=0; //@line 2722 "cPickle.c"
        if ($325) { __label__ = 76; break; } else { __label__ = 90; break; } //@line 2722 "cPickle.c"
      case 76: // $bb92
        var $326=$self_addr; //@line 2723 "cPickle.c"
        var $327=$326+36; //@line 2723 "cPickle.c"
        var $328=HEAP[$327]; //@line 2723 "cPickle.c"
        var $329=_PyInt_FromLong($328); //@line 2723 "cPickle.c"
        $t=$329; //@line 2723 "cPickle.c"
        var $330=$t; //@line 2724 "cPickle.c"
        var $331=($330)!=0; //@line 2724 "cPickle.c"
        if ($331) { __label__ = 77; break; } else { __label__ = 101; break; } //@line 2724 "cPickle.c"
      case 77: // $bb93
        var $332=$self_addr; //@line 2725 "cPickle.c"
        var $333=$332+24; //@line 2725 "cPickle.c"
        var $334=HEAP[$333]; //@line 2725 "cPickle.c"
        var $335=($334)!=0; //@line 2725 "cPickle.c"
        if ($335) { __label__ = 79; break; } else { __label__ = 78; break; } //@line 2725 "cPickle.c"
      case 78: // $bb94
        var $336=_PyTuple_New(1); //@line 2725 "cPickle.c"
        var $337=$self_addr; //@line 2725 "cPickle.c"
        var $338=$337+24; //@line 2725 "cPickle.c"
        HEAP[$338]=$336; //@line 2725 "cPickle.c"
        var $339=$self_addr; //@line 2725 "cPickle.c"
        var $340=$339+24; //@line 2725 "cPickle.c"
        var $341=HEAP[$340]; //@line 2725 "cPickle.c"
        var $342=($341)!=0; //@line 2725 "cPickle.c"
        if ($342) { __label__ = 79; break; } else { __label__ = 83; break; } //@line 2725 "cPickle.c"
      case 79: // $bb95
        var $343=$self_addr; //@line 2725 "cPickle.c"
        var $344=$343+24; //@line 2725 "cPickle.c"
        var $345=HEAP[$344]; //@line 2725 "cPickle.c"
        var $346=$345; //@line 2725 "cPickle.c"
        var $347=$346+12; //@line 2725 "cPickle.c"
        var $348=$347; //@line 2725 "cPickle.c"
        var $349=HEAP[$348]; //@line 2725 "cPickle.c"
        var $350=($349)!=0; //@line 2725 "cPickle.c"
        if ($350) { __label__ = 80; break; } else { __label__ = 82; break; } //@line 2725 "cPickle.c"
      case 80: // $bb96
        var $351=$self_addr; //@line 2725 "cPickle.c"
        var $352=$351+24; //@line 2725 "cPickle.c"
        var $353=HEAP[$352]; //@line 2725 "cPickle.c"
        var $354=$353; //@line 2725 "cPickle.c"
        var $355=$354+12; //@line 2725 "cPickle.c"
        var $356=$355; //@line 2725 "cPickle.c"
        var $357=HEAP[$356]; //@line 2725 "cPickle.c"
        var $358=$357; //@line 2725 "cPickle.c"
        var $359=HEAP[$358]; //@line 2725 "cPickle.c"
        var $360=($359) - 1; //@line 2725 "cPickle.c"
        var $361=$357; //@line 2725 "cPickle.c"
        HEAP[$361]=$360; //@line 2725 "cPickle.c"
        var $362=$357; //@line 2725 "cPickle.c"
        var $363=HEAP[$362]; //@line 2725 "cPickle.c"
        var $364=($363)==0; //@line 2725 "cPickle.c"
        if ($364) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 2725 "cPickle.c"
      case 81: // $bb97
        var $365=$self_addr; //@line 2725 "cPickle.c"
        var $366=$365+24; //@line 2725 "cPickle.c"
        var $367=HEAP[$366]; //@line 2725 "cPickle.c"
        var $368=$367; //@line 2725 "cPickle.c"
        var $369=$368+12; //@line 2725 "cPickle.c"
        var $370=$369; //@line 2725 "cPickle.c"
        var $371=HEAP[$370]; //@line 2725 "cPickle.c"
        var $372=$371+4; //@line 2725 "cPickle.c"
        var $373=HEAP[$372]; //@line 2725 "cPickle.c"
        var $374=$373+24; //@line 2725 "cPickle.c"
        var $375=HEAP[$374]; //@line 2725 "cPickle.c"
        var $376=$self_addr; //@line 2725 "cPickle.c"
        var $377=$376+24; //@line 2725 "cPickle.c"
        var $378=HEAP[$377]; //@line 2725 "cPickle.c"
        var $379=$378; //@line 2725 "cPickle.c"
        var $380=$379+12; //@line 2725 "cPickle.c"
        var $381=$380; //@line 2725 "cPickle.c"
        var $382=HEAP[$381]; //@line 2725 "cPickle.c"
        FUNCTION_TABLE[$375]($382); //@line 2725 "cPickle.c"
        __label__ = 82; break; //@line 2725 "cPickle.c"
      case 82: // $bb98
        var $383=$self_addr; //@line 2725 "cPickle.c"
        var $384=$383+24; //@line 2725 "cPickle.c"
        var $385=HEAP[$384]; //@line 2725 "cPickle.c"
        var $386=$385; //@line 2725 "cPickle.c"
        var $387=$386+12; //@line 2725 "cPickle.c"
        var $388=$387; //@line 2725 "cPickle.c"
        var $389=$t; //@line 2725 "cPickle.c"
        HEAP[$388]=$389; //@line 2725 "cPickle.c"
        __label__ = 85; break; //@line 2725 "cPickle.c"
      case 83: // $bb99
        var $390=$t; //@line 2725 "cPickle.c"
        var $391=$390; //@line 2725 "cPickle.c"
        var $392=HEAP[$391]; //@line 2725 "cPickle.c"
        var $393=($392) - 1; //@line 2725 "cPickle.c"
        var $394=$t; //@line 2725 "cPickle.c"
        var $395=$394; //@line 2725 "cPickle.c"
        HEAP[$395]=$393; //@line 2725 "cPickle.c"
        var $396=$t; //@line 2725 "cPickle.c"
        var $397=$396; //@line 2725 "cPickle.c"
        var $398=HEAP[$397]; //@line 2725 "cPickle.c"
        var $399=($398)==0; //@line 2725 "cPickle.c"
        if ($399) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 2725 "cPickle.c"
      case 84: // $bb100
        var $400=$t; //@line 2725 "cPickle.c"
        var $401=$400+4; //@line 2725 "cPickle.c"
        var $402=HEAP[$401]; //@line 2725 "cPickle.c"
        var $403=$402+24; //@line 2725 "cPickle.c"
        var $404=HEAP[$403]; //@line 2725 "cPickle.c"
        var $405=$t; //@line 2725 "cPickle.c"
        FUNCTION_TABLE[$404]($405); //@line 2725 "cPickle.c"
        __label__ = 85; break; //@line 2725 "cPickle.c"
      case 85: // $bb101
        $t=0; //@line 2726 "cPickle.c"
        var $406=$self_addr; //@line 2727 "cPickle.c"
        var $407=$406+24; //@line 2727 "cPickle.c"
        var $408=HEAP[$407]; //@line 2727 "cPickle.c"
        var $409=($408)!=0; //@line 2727 "cPickle.c"
        if ($409) { __label__ = 86; break; } else { __label__ = 101; break; } //@line 2727 "cPickle.c"
      case 86: // $bb102
        var $410=$self_addr; //@line 2728 "cPickle.c"
        var $411=$410+24; //@line 2728 "cPickle.c"
        var $412=HEAP[$411]; //@line 2728 "cPickle.c"
        var $413=$__reduce__; //@line 2728 "cPickle.c"
        var $414=_PyObject_Call($413, $412, 0); //@line 2728 "cPickle.c"
        $t=$414; //@line 2728 "cPickle.c"
        var $415=$self_addr; //@line 2730 "cPickle.c"
        var $416=$415+24; //@line 2730 "cPickle.c"
        var $417=HEAP[$416]; //@line 2730 "cPickle.c"
        var $418=$417; //@line 2730 "cPickle.c"
        var $419=HEAP[$418]; //@line 2730 "cPickle.c"
        var $420=($419) > 1; //@line 2730 "cPickle.c"
        if ($420) { __label__ = 87; break; } else { __label__ = 94; break; } //@line 2730 "cPickle.c"
      case 87: // $bb103
        var $421=$self_addr; //@line 2730 "cPickle.c"
        var $422=$421+24; //@line 2730 "cPickle.c"
        var $423=HEAP[$422]; //@line 2730 "cPickle.c"
        var $424=$423; //@line 2730 "cPickle.c"
        var $425=HEAP[$424]; //@line 2730 "cPickle.c"
        var $426=($425) - 1; //@line 2730 "cPickle.c"
        var $427=$423; //@line 2730 "cPickle.c"
        HEAP[$427]=$426; //@line 2730 "cPickle.c"
        var $428=$423; //@line 2730 "cPickle.c"
        var $429=HEAP[$428]; //@line 2730 "cPickle.c"
        var $430=($429)==0; //@line 2730 "cPickle.c"
        if ($430) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 2730 "cPickle.c"
      case 88: // $bb104
        var $431=$self_addr; //@line 2730 "cPickle.c"
        var $432=$431+24; //@line 2730 "cPickle.c"
        var $433=HEAP[$432]; //@line 2730 "cPickle.c"
        var $434=$433+4; //@line 2730 "cPickle.c"
        var $435=HEAP[$434]; //@line 2730 "cPickle.c"
        var $436=$435+24; //@line 2730 "cPickle.c"
        var $437=HEAP[$436]; //@line 2730 "cPickle.c"
        var $438=$self_addr; //@line 2730 "cPickle.c"
        var $439=$438+24; //@line 2730 "cPickle.c"
        var $440=HEAP[$439]; //@line 2730 "cPickle.c"
        FUNCTION_TABLE[$437]($440); //@line 2730 "cPickle.c"
        __label__ = 89; break; //@line 2730 "cPickle.c"
      case 89: // $bb105
        var $441=$self_addr; //@line 2730 "cPickle.c"
        var $442=$441+24; //@line 2730 "cPickle.c"
        HEAP[$442]=0; //@line 2730 "cPickle.c"
        __label__ = 94; break; //@line 2730 "cPickle.c"
      case 90: // $bb107
        var $443=HEAP[_PyExc_AttributeError]; //@line 2735 "cPickle.c"
        var $444=_PyErr_ExceptionMatches($443); //@line 2735 "cPickle.c"
        var $445=($444)!=0; //@line 2735 "cPickle.c"
        if ($445) { __label__ = 91; break; } else { __label__ = 101; break; } //@line 2735 "cPickle.c"
      case 91: // $bb108
        _PyErr_Clear(); //@line 2736 "cPickle.c"
        var $446=HEAP[___reduce___str]; //@line 2740 "cPickle.c"
        var $447=$args_addr; //@line 2740 "cPickle.c"
        var $448=_PyObject_GetAttr($447, $446); //@line 2740 "cPickle.c"
        $__reduce__=$448; //@line 2740 "cPickle.c"
        var $449=$__reduce__; //@line 2741 "cPickle.c"
        var $450=($449)!=0; //@line 2741 "cPickle.c"
        if ($450) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 2741 "cPickle.c"
      case 92: // $bb109
        var $451=HEAP[_empty_tuple]; //@line 2742 "cPickle.c"
        var $452=$__reduce__; //@line 2742 "cPickle.c"
        var $453=_PyObject_Call($452, $451, 0); //@line 2742 "cPickle.c"
        $t=$453; //@line 2742 "cPickle.c"
        __lastLabel__ = 92; __label__ = 95; break; //@line 2742 "cPickle.c"
      case 93: // $bb110
        var $454=HEAP[_UnpickleableError]; //@line 2746 "cPickle.c"
        var $455=$args_addr; //@line 2746 "cPickle.c"
        _PyErr_SetObject($454, $455); //@line 2746 "cPickle.c"
        __label__ = 101; break; //@line 2746 "cPickle.c"
      case 94: // $bb111thread_pre_split
        var $_pr=$t;
        __lastLabel__ = 94; __label__ = 95; break;
      case 95: // $bb111
        var $456=__lastLabel__ == 94 ? $_pr : ($453);
        var $457=($456)==0; //@line 2752 "cPickle.c"
        if ($457) { __label__ = 101; break; } else { __label__ = 96; break; } //@line 2752 "cPickle.c"
      case 96: // $bb112
        var $458=$t; //@line 2755 "cPickle.c"
        var $459=$458+4; //@line 2755 "cPickle.c"
        var $460=HEAP[$459]; //@line 2755 "cPickle.c"
        var $461=$460+84; //@line 2755 "cPickle.c"
        var $462=HEAP[$461]; //@line 2755 "cPickle.c"
        var $463=($462) & 134217728; //@line 2755 "cPickle.c"
        var $464=($463)!=0; //@line 2755 "cPickle.c"
        if ($464) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 2755 "cPickle.c"
      case 97: // $bb113
        var $465=$self_addr; //@line 2756 "cPickle.c"
        var $466=$args_addr; //@line 2756 "cPickle.c"
        var $467=$t; //@line 2756 "cPickle.c"
        var $468=_save_global($465, $466, $467); //@line 2756 "cPickle.c"
        $res=$468; //@line 2756 "cPickle.c"
        __label__ = 101; break; //@line 2756 "cPickle.c"
      case 98: // $bb114
        var $469=$t; //@line 2760 "cPickle.c"
        var $470=$469+4; //@line 2760 "cPickle.c"
        var $471=HEAP[$470]; //@line 2760 "cPickle.c"
        var $472=$471+84; //@line 2760 "cPickle.c"
        var $473=HEAP[$472]; //@line 2760 "cPickle.c"
        var $474=($473) & 67108864; //@line 2760 "cPickle.c"
        var $475=($474)==0; //@line 2760 "cPickle.c"
        if ($475) { __label__ = 99; break; } else { __label__ = 100; break; } //@line 2760 "cPickle.c"
      case 99: // $bb115
        var $476=HEAP[_PicklingError]; //@line 2761 "cPickle.c"
        var $477=$__reduce__; //@line 2761 "cPickle.c"
        _cPickle_ErrFormat($476, __str47, __str36, allocate([$477,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2761 "cPickle.c"
        __label__ = 101; break; //@line 2761 "cPickle.c"
      case 100: // $bb116
        var $478=$self_addr; //@line 2767 "cPickle.c"
        var $479=$t; //@line 2767 "cPickle.c"
        var $480=$__reduce__; //@line 2767 "cPickle.c"
        var $481=$args_addr; //@line 2767 "cPickle.c"
        var $482=_save_reduce($478, $479, $480, $481); //@line 2767 "cPickle.c"
        $res=$482; //@line 2767 "cPickle.c"
        __label__ = 101; break; //@line 2769 "cPickle.c"
      case 101: // $finally
        var $483=HEAP[__PyThreadState_Current]; //@line 2770 "cPickle.c"
        var $484=$483+12; //@line 2770 "cPickle.c"
        var $485=HEAP[$484]; //@line 2770 "cPickle.c"
        var $486=($485) - 1; //@line 2770 "cPickle.c"
        var $487=$483+12; //@line 2770 "cPickle.c"
        HEAP[$487]=$486; //@line 2770 "cPickle.c"
        var $488=$py_ob_id; //@line 2771 "cPickle.c"
        var $489=($488)!=0; //@line 2771 "cPickle.c"
        if ($489) { __label__ = 102; break; } else { __label__ = 104; break; } //@line 2771 "cPickle.c"
      case 102: // $bb117
        var $490=$py_ob_id; //@line 2771 "cPickle.c"
        var $491=$490; //@line 2771 "cPickle.c"
        var $492=HEAP[$491]; //@line 2771 "cPickle.c"
        var $493=($492) - 1; //@line 2771 "cPickle.c"
        var $494=$py_ob_id; //@line 2771 "cPickle.c"
        var $495=$494; //@line 2771 "cPickle.c"
        HEAP[$495]=$493; //@line 2771 "cPickle.c"
        var $496=$py_ob_id; //@line 2771 "cPickle.c"
        var $497=$496; //@line 2771 "cPickle.c"
        var $498=HEAP[$497]; //@line 2771 "cPickle.c"
        var $499=($498)==0; //@line 2771 "cPickle.c"
        if ($499) { __label__ = 103; break; } else { __label__ = 104; break; } //@line 2771 "cPickle.c"
      case 103: // $bb118
        var $500=$py_ob_id; //@line 2771 "cPickle.c"
        var $501=$500+4; //@line 2771 "cPickle.c"
        var $502=HEAP[$501]; //@line 2771 "cPickle.c"
        var $503=$502+24; //@line 2771 "cPickle.c"
        var $504=HEAP[$503]; //@line 2771 "cPickle.c"
        var $505=$py_ob_id; //@line 2771 "cPickle.c"
        FUNCTION_TABLE[$504]($505); //@line 2771 "cPickle.c"
        __label__ = 104; break; //@line 2771 "cPickle.c"
      case 104: // $bb119
        var $506=$__reduce__; //@line 2772 "cPickle.c"
        var $507=($506)!=0; //@line 2772 "cPickle.c"
        if ($507) { __label__ = 105; break; } else { __label__ = 107; break; } //@line 2772 "cPickle.c"
      case 105: // $bb120
        var $508=$__reduce__; //@line 2772 "cPickle.c"
        var $509=$508; //@line 2772 "cPickle.c"
        var $510=HEAP[$509]; //@line 2772 "cPickle.c"
        var $511=($510) - 1; //@line 2772 "cPickle.c"
        var $512=$__reduce__; //@line 2772 "cPickle.c"
        var $513=$512; //@line 2772 "cPickle.c"
        HEAP[$513]=$511; //@line 2772 "cPickle.c"
        var $514=$__reduce__; //@line 2772 "cPickle.c"
        var $515=$514; //@line 2772 "cPickle.c"
        var $516=HEAP[$515]; //@line 2772 "cPickle.c"
        var $517=($516)==0; //@line 2772 "cPickle.c"
        if ($517) { __label__ = 106; break; } else { __label__ = 107; break; } //@line 2772 "cPickle.c"
      case 106: // $bb121
        var $518=$__reduce__; //@line 2772 "cPickle.c"
        var $519=$518+4; //@line 2772 "cPickle.c"
        var $520=HEAP[$519]; //@line 2772 "cPickle.c"
        var $521=$520+24; //@line 2772 "cPickle.c"
        var $522=HEAP[$521]; //@line 2772 "cPickle.c"
        var $523=$__reduce__; //@line 2772 "cPickle.c"
        FUNCTION_TABLE[$522]($523); //@line 2772 "cPickle.c"
        __label__ = 107; break; //@line 2772 "cPickle.c"
      case 107: // $bb122
        var $524=$t; //@line 2773 "cPickle.c"
        var $525=($524)!=0; //@line 2773 "cPickle.c"
        if ($525) { __label__ = 108; break; } else { __label__ = 110; break; } //@line 2773 "cPickle.c"
      case 108: // $bb123
        var $526=$t; //@line 2773 "cPickle.c"
        var $527=$526; //@line 2773 "cPickle.c"
        var $528=HEAP[$527]; //@line 2773 "cPickle.c"
        var $529=($528) - 1; //@line 2773 "cPickle.c"
        var $530=$t; //@line 2773 "cPickle.c"
        var $531=$530; //@line 2773 "cPickle.c"
        HEAP[$531]=$529; //@line 2773 "cPickle.c"
        var $532=$t; //@line 2773 "cPickle.c"
        var $533=$532; //@line 2773 "cPickle.c"
        var $534=HEAP[$533]; //@line 2773 "cPickle.c"
        var $535=($534)==0; //@line 2773 "cPickle.c"
        if ($535) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 2773 "cPickle.c"
      case 109: // $bb124
        var $536=$t; //@line 2773 "cPickle.c"
        var $537=$536+4; //@line 2773 "cPickle.c"
        var $538=HEAP[$537]; //@line 2773 "cPickle.c"
        var $539=$538+24; //@line 2773 "cPickle.c"
        var $540=HEAP[$539]; //@line 2773 "cPickle.c"
        var $541=$t; //@line 2773 "cPickle.c"
        FUNCTION_TABLE[$540]($541); //@line 2773 "cPickle.c"
        __label__ = 110; break; //@line 2773 "cPickle.c"
      case 110: // $bb125
        var $542=$res; //@line 2775 "cPickle.c"
        $0=$542; //@line 2775 "cPickle.c"
        __label__ = 111; break; //@line 2775 "cPickle.c"
      case 111: // $bb126
        var $543=$0; //@line 2537 "cPickle.c"
        $retval=$543; //@line 2537 "cPickle.c"
        var $retval127=$retval; //@line 2537 "cPickle.c"
        ;
        return $retval127; //@line 2537 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dump($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 2; _memset(__stackBase__, 0, 2);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $bytes=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2784 "cPickle.c"
        var $2=$1+36; //@line 2784 "cPickle.c"
        var $3=HEAP[$2]; //@line 2784 "cPickle.c"
        var $4=($3) > 1; //@line 2784 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 2784 "cPickle.c"
      case 1: // $bb
        var $5=$bytes; //@line 2787 "cPickle.c"
        HEAP[$5]=-128; //@line 2787 "cPickle.c"
        var $6=$self_addr; //@line 2788 "cPickle.c"
        var $7=$6+36; //@line 2788 "cPickle.c"
        var $8=HEAP[$7]; //@line 2788 "cPickle.c"
        var $9=($8) < 0; //@line 2788 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 2788 "cPickle.c"
      case 2: // $bb1
        var $10=$self_addr; //@line 2788 "cPickle.c"
        var $11=$10+36; //@line 2788 "cPickle.c"
        var $12=HEAP[$11]; //@line 2788 "cPickle.c"
        var $13=($12) > 255; //@line 2788 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2788 "cPickle.c"
      case 3: // $bb2
        ___assert_fail(__str48, __str15, 2788, __str54); //@line 2788 "cPickle.c"
        throw "Reached an unreachable!" //@line 2788 "cPickle.c"
      case 4: // $bb3
        var $14=$self_addr; //@line 2789 "cPickle.c"
        var $15=$14+36; //@line 2789 "cPickle.c"
        var $16=HEAP[$15]; //@line 2789 "cPickle.c"
        var $17=((($16)) & 255); //@line 2789 "cPickle.c"
        var $18=$bytes+1; //@line 2789 "cPickle.c"
        HEAP[$18]=$17; //@line 2789 "cPickle.c"
        var $19=$self_addr; //@line 2790 "cPickle.c"
        var $20=$19+48; //@line 2790 "cPickle.c"
        var $21=HEAP[$20]; //@line 2790 "cPickle.c"
        var $22=$self_addr; //@line 2790 "cPickle.c"
        var $bytes4=$bytes; //@line 2790 "cPickle.c"
        var $23=FUNCTION_TABLE[$21]($22, $bytes4, 2); //@line 2790 "cPickle.c"
        var $24=($23) < 0; //@line 2790 "cPickle.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2790 "cPickle.c"
      case 5: // $bb5
        $0=-1; //@line 2791 "cPickle.c"
        __label__ = 13; break; //@line 2791 "cPickle.c"
      case 6: // $bb6
        var $25=$self_addr; //@line 2794 "cPickle.c"
        var $26=$args_addr; //@line 2794 "cPickle.c"
        var $27=_save($25, $26, 0); //@line 2794 "cPickle.c"
        var $28=($27) < 0; //@line 2794 "cPickle.c"
        if ($28) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2794 "cPickle.c"
      case 7: // $bb7
        $0=-1; //@line 2795 "cPickle.c"
        __label__ = 13; break; //@line 2795 "cPickle.c"
      case 8: // $bb8
        var $29=$self_addr; //@line 2797 "cPickle.c"
        var $30=$29+48; //@line 2797 "cPickle.c"
        var $31=HEAP[$30]; //@line 2797 "cPickle.c"
        var $32=$self_addr; //@line 2797 "cPickle.c"
        var $33=FUNCTION_TABLE[$31]($32, _stop_11690, 1); //@line 2797 "cPickle.c"
        var $34=($33) < 0; //@line 2797 "cPickle.c"
        if ($34) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2797 "cPickle.c"
      case 9: // $bb9
        $0=-1; //@line 2798 "cPickle.c"
        __label__ = 13; break; //@line 2798 "cPickle.c"
      case 10: // $bb10
        var $35=$self_addr; //@line 2800 "cPickle.c"
        var $36=$35+48; //@line 2800 "cPickle.c"
        var $37=HEAP[$36]; //@line 2800 "cPickle.c"
        var $38=$self_addr; //@line 2800 "cPickle.c"
        var $39=FUNCTION_TABLE[$37]($38, 0, 0); //@line 2800 "cPickle.c"
        var $40=($39) < 0; //@line 2800 "cPickle.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 2800 "cPickle.c"
      case 11: // $bb11
        $0=-1; //@line 2801 "cPickle.c"
        __label__ = 13; break; //@line 2801 "cPickle.c"
      case 12: // $bb12
        $0=0; //@line 2803 "cPickle.c"
        __label__ = 13; break; //@line 2803 "cPickle.c"
      case 13: // $bb13
        var $41=$0; //@line 2791 "cPickle.c"
        $retval=$41; //@line 2791 "cPickle.c"
        var $retval14=$retval; //@line 2791 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 2791 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickle_clear_memo($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2809 "cPickle.c"
        var $2=$1+20; //@line 2809 "cPickle.c"
        var $3=HEAP[$2]; //@line 2809 "cPickle.c"
        var $4=($3)!=0; //@line 2809 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2809 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 2810 "cPickle.c"
        var $6=$5+20; //@line 2810 "cPickle.c"
        var $7=HEAP[$6]; //@line 2810 "cPickle.c"
        _PyDict_Clear($7); //@line 2810 "cPickle.c"
        __label__ = 2; break; //@line 2810 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[__Py_NoneStruct]; //@line 2811 "cPickle.c"
        var $9=($8) + 1; //@line 2811 "cPickle.c"
        HEAP[__Py_NoneStruct]=$9; //@line 2811 "cPickle.c"
        $0=__Py_NoneStruct; //@line 2812 "cPickle.c"
        var $10=$0; //@line 2812 "cPickle.c"
        $retval=$10; //@line 2812 "cPickle.c"
        var $retval2=$retval; //@line 2812 "cPickle.c"
        ;
        return $retval2; //@line 2812 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickle_getvalue($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $iftmp_222;
        var $iftmp_216;
        var $0;
        var $l;
        var $i;
        var $rsize;
        var $ssize;
        var $clear=__stackBase__;
        var $lm;
        var $ik;
        var $k;
        var $r;
        var $s;
        var $p;
        var $have_get;
        var $data;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$clear]=1; //@line 2818 "cPickle.c"
        var $1=$args_addr; //@line 2825 "cPickle.c"
        var $2=($1)!=0; //@line 2825 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2825 "cPickle.c"
      case 1: // $bb
        var $3=$args_addr; //@line 2825 "cPickle.c"
        var $4=_PyArg_ParseTuple($3, __str49, allocate([$clear,0,0,0], ["i32*",0,0,0], ALLOC_STACK)); //@line 2825 "cPickle.c"
        var $5=($4)==0; //@line 2825 "cPickle.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2825 "cPickle.c"
      case 2: // $bb1
        $0=0; //@line 2826 "cPickle.c"
        __label__ = 52; break; //@line 2826 "cPickle.c"
      case 3: // $bb2
        var $6=$self_addr; //@line 2829 "cPickle.c"
        var $7=$6+16; //@line 2829 "cPickle.c"
        var $8=HEAP[$7]; //@line 2829 "cPickle.c"
        var $9=$8+4; //@line 2829 "cPickle.c"
        var $10=HEAP[$9]; //@line 2829 "cPickle.c"
        var $11=($10)!=(_PdataType); //@line 2829 "cPickle.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2829 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[_PicklingError]; //@line 2830 "cPickle.c"
        _PyErr_SetString($12, __str50); //@line 2830 "cPickle.c"
        $0=0; //@line 2832 "cPickle.c"
        __label__ = 52; break; //@line 2832 "cPickle.c"
      case 5: // $bb4
        var $13=$self_addr; //@line 2836 "cPickle.c"
        var $14=_write_other($13, 0, 0); //@line 2836 "cPickle.c"
        var $15=($14) < 0; //@line 2836 "cPickle.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2836 "cPickle.c"
      case 6: // $bb5
        $0=0; //@line 2836 "cPickle.c"
        __label__ = 52; break; //@line 2836 "cPickle.c"
      case 7: // $bb6
        var $16=$self_addr; //@line 2838 "cPickle.c"
        var $17=$16+16; //@line 2838 "cPickle.c"
        var $18=HEAP[$17]; //@line 2838 "cPickle.c"
        var $19=$18; //@line 2838 "cPickle.c"
        $data=$19; //@line 2838 "cPickle.c"
        var $20=$data; //@line 2839 "cPickle.c"
        var $21=$20+8; //@line 2839 "cPickle.c"
        var $22=HEAP[$21]; //@line 2839 "cPickle.c"
        $l=$22; //@line 2839 "cPickle.c"
        var $23=$self_addr; //@line 2842 "cPickle.c"
        var $24=$23+20; //@line 2842 "cPickle.c"
        var $25=HEAP[$24]; //@line 2842 "cPickle.c"
        var $26=_PyDict_Size($25); //@line 2842 "cPickle.c"
        $lm=$26; //@line 2842 "cPickle.c"
        var $27=$lm; //@line 2843 "cPickle.c"
        var $28=($27) < 0; //@line 2843 "cPickle.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2843 "cPickle.c"
      case 8: // $bb7
        $0=0; //@line 2843 "cPickle.c"
        __label__ = 52; break; //@line 2843 "cPickle.c"
      case 9: // $bb8
        var $29=$lm; //@line 2844 "cPickle.c"
        var $30=($29) + 1; //@line 2844 "cPickle.c"
        $lm=$30; //@line 2844 "cPickle.c"
        var $31=$lm; //@line 2845 "cPickle.c"
        var $32=_malloc($31); //@line 2845 "cPickle.c"
        $have_get=$32; //@line 2845 "cPickle.c"
        var $33=$have_get; //@line 2846 "cPickle.c"
        var $34=($33)==0; //@line 2846 "cPickle.c"
        if ($34) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2846 "cPickle.c"
      case 10: // $bb9
        var $35=_PyErr_NoMemory(); //@line 2846 "cPickle.c"
        $0=$35; //@line 2846 "cPickle.c"
        __label__ = 52; break; //@line 2846 "cPickle.c"
      case 11: // $bb10
        var $36=$lm; //@line 2847 "cPickle.c"
        var $37=$have_get; //@line 2847 "cPickle.c"
        _llvm_memset_p0i8_i32($37, 0, $36, 1, 0); //@line 2847 "cPickle.c"
        $rsize=0; //@line 2850 "cPickle.c"
        var $38=$l; //@line 2850 "cPickle.c"
        $i=$38; //@line 2850 "cPickle.c"
        __label__ = 32; break; //@line 2850 "cPickle.c"
      case 12: // $bb11
        var $39=$data; //@line 2851 "cPickle.c"
        var $40=$39+16; //@line 2851 "cPickle.c"
        var $41=HEAP[$40]; //@line 2851 "cPickle.c"
        var $42=$i; //@line 2851 "cPickle.c"
        var $43=$41+4*$42; //@line 2851 "cPickle.c"
        var $44=HEAP[$43]; //@line 2851 "cPickle.c"
        $k=$44; //@line 2851 "cPickle.c"
        var $45=$k; //@line 2853 "cPickle.c"
        var $46=$45+4; //@line 2853 "cPickle.c"
        var $47=HEAP[$46]; //@line 2853 "cPickle.c"
        var $48=$47+84; //@line 2853 "cPickle.c"
        var $49=HEAP[$48]; //@line 2853 "cPickle.c"
        var $50=($49) & 134217728; //@line 2853 "cPickle.c"
        var $51=($50)!=0; //@line 2853 "cPickle.c"
        var $52=$k; //@line 2854 "cPickle.c"
        if ($51) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2853 "cPickle.c"
      case 13: // $bb12
        var $53=$52; //@line 2854 "cPickle.c"
        var $54=$53+8; //@line 2854 "cPickle.c"
        var $55=HEAP[$54]; //@line 2854 "cPickle.c"
        var $56=$rsize; //@line 2854 "cPickle.c"
        var $57=($56) + ($55); //@line 2854 "cPickle.c"
        $rsize=$57; //@line 2854 "cPickle.c"
        __label__ = 32; break; //@line 2854 "cPickle.c"
      case 14: // $bb13
        var $58=$52+4; //@line 2856 "cPickle.c"
        var $59=HEAP[$58]; //@line 2856 "cPickle.c"
        var $60=$59+84; //@line 2856 "cPickle.c"
        var $61=HEAP[$60]; //@line 2856 "cPickle.c"
        var $62=($61) & 8388608; //@line 2856 "cPickle.c"
        var $63=($62)!=0; //@line 2856 "cPickle.c"
        var $64=$k; //@line 2857 "cPickle.c"
        if ($63) { __label__ = 15; break; } else { __label__ = 22; break; } //@line 2856 "cPickle.c"
      case 15: // $bb14
        var $65=$64; //@line 2857 "cPickle.c"
        var $66=$65+8; //@line 2857 "cPickle.c"
        var $67=HEAP[$66]; //@line 2857 "cPickle.c"
        $ik=$67; //@line 2857 "cPickle.c"
        var $68=$ik; //@line 2858 "cPickle.c"
        var $69=$lm; //@line 2858 "cPickle.c"
        var $70=($68) >= ($69); //@line 2858 "cPickle.c"
        var $71=$ik; //@line 2858 "cPickle.c"
        var $72=($71)==0; //@line 2858 "cPickle.c"
        var $or_cond=($70) | ($72);
        if ($or_cond) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 2858 "cPickle.c"
      case 16: // $bb16
        var $73=HEAP[_PicklingError]; //@line 2859 "cPickle.c"
        _PyErr_SetString($73, __str51); //@line 2859 "cPickle.c"
        __label__ = 51; break; //@line 2859 "cPickle.c"
      case 17: // $bb17
        var $74=$have_get; //@line 2863 "cPickle.c"
        var $75=$ik; //@line 2863 "cPickle.c"
        var $76=$74+$75; //@line 2863 "cPickle.c"
        var $77=HEAP[$76]; //@line 2863 "cPickle.c"
        var $78=($77)!=0; //@line 2863 "cPickle.c"
        if ($78) { __label__ = 18; break; } else { __label__ = 32; break; } //@line 2863 "cPickle.c"
      case 18: // $bb18
        var $79=$ik; //@line 2864 "cPickle.c"
        var $80=($79) <= 255; //@line 2864 "cPickle.c"
        if ($80) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2864 "cPickle.c"
      case 19: // $bb19
        $iftmp_216=2; //@line 2864 "cPickle.c"
        __label__ = 21; break; //@line 2864 "cPickle.c"
      case 20: // $bb20
        $iftmp_216=5; //@line 2864 "cPickle.c"
        __label__ = 21; break; //@line 2864 "cPickle.c"
      case 21: // $bb21
        var $81=$iftmp_216; //@line 2864 "cPickle.c"
        var $82=$rsize; //@line 2864 "cPickle.c"
        var $83=($82) + ($81); //@line 2864 "cPickle.c"
        $rsize=$83; //@line 2864 "cPickle.c"
        __label__ = 32; break; //@line 2864 "cPickle.c"
      case 22: // $bb23
        var $84=$64+4; //@line 2867 "cPickle.c"
        var $85=HEAP[$84]; //@line 2867 "cPickle.c"
        var $86=$85+84; //@line 2867 "cPickle.c"
        var $87=HEAP[$86]; //@line 2867 "cPickle.c"
        var $88=($87) & 67108864; //@line 2867 "cPickle.c"
        var $89=($88)==0; //@line 2867 "cPickle.c"
        if ($89) { __label__ = 25; break; } else { __label__ = 23; break; } //@line 2867 "cPickle.c"
      case 23: // $bb24
        var $90=$k; //@line 2867 "cPickle.c"
        var $91=$90; //@line 2867 "cPickle.c"
        var $92=$91+8; //@line 2867 "cPickle.c"
        var $93=HEAP[$92]; //@line 2867 "cPickle.c"
        var $94=($93)!=2; //@line 2867 "cPickle.c"
        if ($94) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 2867 "cPickle.c"
      case 24: // $bb25
        var $95=$k; //@line 2867 "cPickle.c"
        var $96=$95; //@line 2867 "cPickle.c"
        var $97=$96+12; //@line 2867 "cPickle.c"
        var $98=$97; //@line 2867 "cPickle.c"
        var $99=HEAP[$98]; //@line 2867 "cPickle.c"
        $k=$99; //@line 2867 "cPickle.c"
        var $100=$k; //@line 2867 "cPickle.c"
        var $101=$100+4; //@line 2867 "cPickle.c"
        var $102=HEAP[$101]; //@line 2867 "cPickle.c"
        var $103=$102+84; //@line 2867 "cPickle.c"
        var $104=HEAP[$103]; //@line 2867 "cPickle.c"
        var $105=($104) & 8388608; //@line 2867 "cPickle.c"
        var $106=($105)==0; //@line 2867 "cPickle.c"
        if ($106) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 2867 "cPickle.c"
      case 25: // $bb26
        var $107=HEAP[_PicklingError]; //@line 2871 "cPickle.c"
        _PyErr_SetString($107, __str52); //@line 2871 "cPickle.c"
        __label__ = 51; break; //@line 2871 "cPickle.c"
      case 26: // $bb27
        var $108=$k; //@line 2877 "cPickle.c"
        var $109=$108; //@line 2877 "cPickle.c"
        var $110=$109+8; //@line 2877 "cPickle.c"
        var $111=HEAP[$110]; //@line 2877 "cPickle.c"
        $ik=$111; //@line 2877 "cPickle.c"
        var $112=$ik; //@line 2878 "cPickle.c"
        var $113=$lm; //@line 2878 "cPickle.c"
        var $114=($112) >= ($113); //@line 2878 "cPickle.c"
        var $115=$ik; //@line 2878 "cPickle.c"
        var $116=($115)==0; //@line 2878 "cPickle.c"
        var $or_cond3=($114) | ($116);
        if ($or_cond3) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 2878 "cPickle.c"
      case 27: // $bb29
        var $117=HEAP[_PicklingError]; //@line 2879 "cPickle.c"
        _PyErr_SetString($117, __str51); //@line 2879 "cPickle.c"
        $0=0; //@line 2881 "cPickle.c"
        __label__ = 52; break; //@line 2881 "cPickle.c"
      case 28: // $bb30
        var $118=$have_get; //@line 2883 "cPickle.c"
        var $119=$ik; //@line 2883 "cPickle.c"
        var $120=$118+$119; //@line 2883 "cPickle.c"
        HEAP[$120]=1; //@line 2883 "cPickle.c"
        var $121=$ik; //@line 2884 "cPickle.c"
        var $122=($121) <= 255; //@line 2884 "cPickle.c"
        if ($122) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 2884 "cPickle.c"
      case 29: // $bb31
        $iftmp_222=2; //@line 2884 "cPickle.c"
        __label__ = 31; break; //@line 2884 "cPickle.c"
      case 30: // $bb32
        $iftmp_222=5; //@line 2884 "cPickle.c"
        __label__ = 31; break; //@line 2884 "cPickle.c"
      case 31: // $bb33
        var $123=$iftmp_222; //@line 2884 "cPickle.c"
        var $124=$rsize; //@line 2884 "cPickle.c"
        var $125=($124) + ($123); //@line 2884 "cPickle.c"
        $rsize=$125; //@line 2884 "cPickle.c"
        __label__ = 32; break; //@line 2884 "cPickle.c"
      case 32: // $bb34
        var $126=$i; //@line 2850 "cPickle.c"
        var $127=($126) - 1; //@line 2850 "cPickle.c"
        $i=$127; //@line 2850 "cPickle.c"
        var $128=($127) >= 0; //@line 2850 "cPickle.c"
        if ($128) { __label__ = 12; break; } else { __label__ = 33; break; } //@line 2850 "cPickle.c"
      case 33: // $bb35
        var $129=$rsize; //@line 2889 "cPickle.c"
        var $130=_PyString_FromStringAndSize(0, $129); //@line 2889 "cPickle.c"
        $r=$130; //@line 2889 "cPickle.c"
        var $131=$r; //@line 2890 "cPickle.c"
        var $132=($131)==0; //@line 2890 "cPickle.c"
        if ($132) { __label__ = 51; break; } else { __label__ = 34; break; } //@line 2890 "cPickle.c"
      case 34: // $bb36
        var $133=$r; //@line 2891 "cPickle.c"
        var $134=$133; //@line 2891 "cPickle.c"
        var $135=$134+20; //@line 2891 "cPickle.c"
        var $136=$135; //@line 2891 "cPickle.c"
        $s=$136; //@line 2891 "cPickle.c"
        $i=0; //@line 2893 "cPickle.c"
        var $137=$i; //@line 2893 "cPickle.c"
        var $138=$l; //@line 2893 "cPickle.c"
        var $139=($137) < ($138); //@line 2893 "cPickle.c"
        if ($139) { __label__ = 35; break; } else { __label__ = 48; break; } //@line 2893 "cPickle.c"
      case 35: // $bb37
        var $140=$data; //@line 2894 "cPickle.c"
        var $141=$140+16; //@line 2894 "cPickle.c"
        var $142=HEAP[$141]; //@line 2894 "cPickle.c"
        var $143=$i; //@line 2894 "cPickle.c"
        var $144=$142+4*$143; //@line 2894 "cPickle.c"
        var $145=HEAP[$144]; //@line 2894 "cPickle.c"
        $k=$145; //@line 2894 "cPickle.c"
        var $146=$k; //@line 2896 "cPickle.c"
        var $147=$146+4; //@line 2896 "cPickle.c"
        var $148=HEAP[$147]; //@line 2896 "cPickle.c"
        var $149=$148+84; //@line 2896 "cPickle.c"
        var $150=HEAP[$149]; //@line 2896 "cPickle.c"
        var $151=($150) & 134217728; //@line 2896 "cPickle.c"
        var $152=($151)!=0; //@line 2896 "cPickle.c"
        var $153=$k; //@line 2897 "cPickle.c"
        if ($152) { __label__ = 36; break; } else { __label__ = 39; break; } //@line 2896 "cPickle.c"
      case 36: // $bb38
        var $154=$153; //@line 2897 "cPickle.c"
        var $155=$154+8; //@line 2897 "cPickle.c"
        var $156=HEAP[$155]; //@line 2897 "cPickle.c"
        $ssize=$156; //@line 2897 "cPickle.c"
        var $157=$ssize; //@line 2898 "cPickle.c"
        var $158=($157)!=0; //@line 2898 "cPickle.c"
        if ($158) { __label__ = 37; break; } else { __label__ = 47; break; } //@line 2898 "cPickle.c"
      case 37: // $bb39
        var $159=$k; //@line 2899 "cPickle.c"
        var $160=$159; //@line 2899 "cPickle.c"
        var $161=$160+20; //@line 2899 "cPickle.c"
        var $162=$161; //@line 2899 "cPickle.c"
        $p=$162; //@line 2899 "cPickle.c"
        var $163=$ssize; //@line 2900 "cPickle.c"
        var $164=($163) - 1; //@line 2900 "cPickle.c"
        $ssize=$164; //@line 2900 "cPickle.c"
        var $165=($164) >= 0; //@line 2900 "cPickle.c"
        if ($165) { __label__ = 38; break; } else { __label__ = 47; break; } //@line 2900 "cPickle.c"
      case 38: // $bb40
        var $166=$p; //@line 2901 "cPickle.c"
        var $167=HEAP[$166]; //@line 2901 "cPickle.c"
        var $168=$s; //@line 2901 "cPickle.c"
        HEAP[$168]=$167; //@line 2901 "cPickle.c"
        var $169=$s; //@line 2901 "cPickle.c"
        var $170=$169+1; //@line 2901 "cPickle.c"
        $s=$170; //@line 2901 "cPickle.c"
        var $171=$p; //@line 2901 "cPickle.c"
        var $172=$171+1; //@line 2901 "cPickle.c"
        $p=$172; //@line 2901 "cPickle.c"
        var $173=$ssize; //@line 2900 "cPickle.c"
        var $174=($173) - 1; //@line 2900 "cPickle.c"
        $ssize=$174; //@line 2900 "cPickle.c"
        var $175=($174) >= 0; //@line 2900 "cPickle.c"
        if ($175) { __label__ = 38; break; } else { __label__ = 47; break; } //@line 2900 "cPickle.c"
      case 39: // $bb43
        var $176=$153+4; //@line 2905 "cPickle.c"
        var $177=HEAP[$176]; //@line 2905 "cPickle.c"
        var $178=$177+84; //@line 2905 "cPickle.c"
        var $179=HEAP[$178]; //@line 2905 "cPickle.c"
        var $180=($179) & 67108864; //@line 2905 "cPickle.c"
        var $181=($180)!=0; //@line 2905 "cPickle.c"
        var $182=$k; //@line 2906 "cPickle.c"
        if ($181) { __label__ = 40; break; } else { __label__ = 43; break; } //@line 2905 "cPickle.c"
      case 40: // $bb44
        var $183=$182; //@line 2906 "cPickle.c"
        var $184=$183+12; //@line 2906 "cPickle.c"
        var $185=$184; //@line 2906 "cPickle.c"
        var $186=HEAP[$185]; //@line 2906 "cPickle.c"
        var $187=$186; //@line 2906 "cPickle.c"
        var $188=$187+8; //@line 2906 "cPickle.c"
        var $189=HEAP[$188]; //@line 2906 "cPickle.c"
        $ik=$189; //@line 2906 "cPickle.c"
        var $190=$ik; //@line 2908 "cPickle.c"
        var $191=($190) <= 255; //@line 2908 "cPickle.c"
        var $192=$s; //@line 2909 "cPickle.c"
        if ($191) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 2908 "cPickle.c"
      case 41: // $bb45
        HEAP[$192]=104; //@line 2909 "cPickle.c"
        var $193=$s; //@line 2909 "cPickle.c"
        var $194=$193+1; //@line 2909 "cPickle.c"
        $s=$194; //@line 2909 "cPickle.c"
        var $195=$ik; //@line 2910 "cPickle.c"
        var $196=((($195)) & 255); //@line 2910 "cPickle.c"
        var $197=$s; //@line 2910 "cPickle.c"
        HEAP[$197]=$196; //@line 2910 "cPickle.c"
        var $198=$s; //@line 2910 "cPickle.c"
        var $199=$198+1; //@line 2910 "cPickle.c"
        $s=$199; //@line 2910 "cPickle.c"
        __label__ = 47; break; //@line 2910 "cPickle.c"
      case 42: // $bb46
        HEAP[$192]=106; //@line 2913 "cPickle.c"
        var $200=$s; //@line 2913 "cPickle.c"
        var $201=$200+1; //@line 2913 "cPickle.c"
        $s=$201; //@line 2913 "cPickle.c"
        var $202=$ik; //@line 2914 "cPickle.c"
        var $203=((($202)) & 255); //@line 2914 "cPickle.c"
        var $204=$s; //@line 2914 "cPickle.c"
        HEAP[$204]=$203; //@line 2914 "cPickle.c"
        var $205=$s; //@line 2914 "cPickle.c"
        var $206=$205+1; //@line 2914 "cPickle.c"
        $s=$206; //@line 2914 "cPickle.c"
        var $207=$ik; //@line 2915 "cPickle.c"
        var $208=($207) >> 8; //@line 2915 "cPickle.c"
        var $209=((($208)) & 255); //@line 2915 "cPickle.c"
        var $210=$s; //@line 2915 "cPickle.c"
        HEAP[$210]=$209; //@line 2915 "cPickle.c"
        var $211=$s; //@line 2915 "cPickle.c"
        var $212=$211+1; //@line 2915 "cPickle.c"
        $s=$212; //@line 2915 "cPickle.c"
        var $213=$ik; //@line 2916 "cPickle.c"
        var $214=($213) >> 16; //@line 2916 "cPickle.c"
        var $215=((($214)) & 255); //@line 2916 "cPickle.c"
        var $216=$s; //@line 2916 "cPickle.c"
        HEAP[$216]=$215; //@line 2916 "cPickle.c"
        var $217=$s; //@line 2916 "cPickle.c"
        var $218=$217+1; //@line 2916 "cPickle.c"
        $s=$218; //@line 2916 "cPickle.c"
        var $219=$ik; //@line 2917 "cPickle.c"
        var $220=($219) >> 24; //@line 2917 "cPickle.c"
        var $221=((($220)) & 255); //@line 2917 "cPickle.c"
        var $222=$s; //@line 2917 "cPickle.c"
        HEAP[$222]=$221; //@line 2917 "cPickle.c"
        var $223=$s; //@line 2917 "cPickle.c"
        var $224=$223+1; //@line 2917 "cPickle.c"
        $s=$224; //@line 2917 "cPickle.c"
        __label__ = 47; break; //@line 2917 "cPickle.c"
      case 43: // $bb48
        var $225=$182; //@line 2922 "cPickle.c"
        var $226=$225+8; //@line 2922 "cPickle.c"
        var $227=HEAP[$226]; //@line 2922 "cPickle.c"
        $ik=$227; //@line 2922 "cPickle.c"
        var $228=$have_get; //@line 2924 "cPickle.c"
        var $229=$ik; //@line 2924 "cPickle.c"
        var $230=$228+$229; //@line 2924 "cPickle.c"
        var $231=HEAP[$230]; //@line 2924 "cPickle.c"
        var $232=($231)!=0; //@line 2924 "cPickle.c"
        if ($232) { __label__ = 44; break; } else { __label__ = 47; break; } //@line 2924 "cPickle.c"
      case 44: // $bb49
        var $233=$ik; //@line 2925 "cPickle.c"
        var $234=($233) <= 255; //@line 2925 "cPickle.c"
        var $235=$s; //@line 2926 "cPickle.c"
        if ($234) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 2925 "cPickle.c"
      case 45: // $bb50
        HEAP[$235]=113; //@line 2926 "cPickle.c"
        var $236=$s; //@line 2926 "cPickle.c"
        var $237=$236+1; //@line 2926 "cPickle.c"
        $s=$237; //@line 2926 "cPickle.c"
        var $238=$ik; //@line 2927 "cPickle.c"
        var $239=((($238)) & 255); //@line 2927 "cPickle.c"
        var $240=$s; //@line 2927 "cPickle.c"
        HEAP[$240]=$239; //@line 2927 "cPickle.c"
        var $241=$s; //@line 2927 "cPickle.c"
        var $242=$241+1; //@line 2927 "cPickle.c"
        $s=$242; //@line 2927 "cPickle.c"
        __label__ = 47; break; //@line 2927 "cPickle.c"
      case 46: // $bb51
        HEAP[$235]=114; //@line 2930 "cPickle.c"
        var $243=$s; //@line 2930 "cPickle.c"
        var $244=$243+1; //@line 2930 "cPickle.c"
        $s=$244; //@line 2930 "cPickle.c"
        var $245=$ik; //@line 2931 "cPickle.c"
        var $246=((($245)) & 255); //@line 2931 "cPickle.c"
        var $247=$s; //@line 2931 "cPickle.c"
        HEAP[$247]=$246; //@line 2931 "cPickle.c"
        var $248=$s; //@line 2931 "cPickle.c"
        var $249=$248+1; //@line 2931 "cPickle.c"
        $s=$249; //@line 2931 "cPickle.c"
        var $250=$ik; //@line 2932 "cPickle.c"
        var $251=($250) >> 8; //@line 2932 "cPickle.c"
        var $252=((($251)) & 255); //@line 2932 "cPickle.c"
        var $253=$s; //@line 2932 "cPickle.c"
        HEAP[$253]=$252; //@line 2932 "cPickle.c"
        var $254=$s; //@line 2932 "cPickle.c"
        var $255=$254+1; //@line 2932 "cPickle.c"
        $s=$255; //@line 2932 "cPickle.c"
        var $256=$ik; //@line 2933 "cPickle.c"
        var $257=($256) >> 16; //@line 2933 "cPickle.c"
        var $258=((($257)) & 255); //@line 2933 "cPickle.c"
        var $259=$s; //@line 2933 "cPickle.c"
        HEAP[$259]=$258; //@line 2933 "cPickle.c"
        var $260=$s; //@line 2933 "cPickle.c"
        var $261=$260+1; //@line 2933 "cPickle.c"
        $s=$261; //@line 2933 "cPickle.c"
        var $262=$ik; //@line 2934 "cPickle.c"
        var $263=($262) >> 24; //@line 2934 "cPickle.c"
        var $264=((($263)) & 255); //@line 2934 "cPickle.c"
        var $265=$s; //@line 2934 "cPickle.c"
        HEAP[$265]=$264; //@line 2934 "cPickle.c"
        var $266=$s; //@line 2934 "cPickle.c"
        var $267=$266+1; //@line 2934 "cPickle.c"
        $s=$267; //@line 2934 "cPickle.c"
        __label__ = 47; break; //@line 2934 "cPickle.c"
      case 47: // $bb52
        var $268=$i; //@line 2893 "cPickle.c"
        var $269=($268) + 1; //@line 2893 "cPickle.c"
        $i=$269; //@line 2893 "cPickle.c"
        var $270=$i; //@line 2893 "cPickle.c"
        var $271=$l; //@line 2893 "cPickle.c"
        var $272=($270) < ($271); //@line 2893 "cPickle.c"
        if ($272) { __label__ = 35; break; } else { __label__ = 48; break; } //@line 2893 "cPickle.c"
      case 48: // $bb54
        var $273=HEAP[$clear]; //@line 2940 "cPickle.c"
        var $274=($273)!=0; //@line 2940 "cPickle.c"
        if ($274) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 2940 "cPickle.c"
      case 49: // $bb55
        var $275=$self_addr; //@line 2941 "cPickle.c"
        var $276=$275+20; //@line 2941 "cPickle.c"
        var $277=HEAP[$276]; //@line 2941 "cPickle.c"
        _PyDict_Clear($277); //@line 2941 "cPickle.c"
        var $278=$data; //@line 2942 "cPickle.c"
        var $279=_Pdata_clear($278, 0); //@line 2942 "cPickle.c"
        __label__ = 50; break; //@line 2942 "cPickle.c"
      case 50: // $bb56
        var $280=$have_get; //@line 2945 "cPickle.c"
        _free($280); //@line 2945 "cPickle.c"
        var $281=$r; //@line 2946 "cPickle.c"
        $0=$281; //@line 2946 "cPickle.c"
        __label__ = 52; break; //@line 2946 "cPickle.c"
      case 51: // $err
        var $282=$have_get; //@line 2948 "cPickle.c"
        _free($282); //@line 2948 "cPickle.c"
        $0=0; //@line 2949 "cPickle.c"
        __label__ = 52; break; //@line 2949 "cPickle.c"
      case 52: // $bb57
        var $283=$0; //@line 2826 "cPickle.c"
        $retval=$283; //@line 2826 "cPickle.c"
        var $retval58=$retval; //@line 2826 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval58; //@line 2826 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_dump($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $ob=__stackBase__;
        var $get=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$get]=0; //@line 2956 "cPickle.c"
        var $1=$args_addr; //@line 2958 "cPickle.c"
        var $2=_PyArg_ParseTuple($1, __str53, allocate([$ob,0,0,0,$get,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 2958 "cPickle.c"
        var $3=($2)==0; //@line 2958 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2958 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 2959 "cPickle.c"
        __label__ = 7; break; //@line 2959 "cPickle.c"
      case 2: // $bb1
        var $4=HEAP[$ob]; //@line 2961 "cPickle.c"
        var $5=$self_addr; //@line 2961 "cPickle.c"
        var $6=_dump($5, $4); //@line 2961 "cPickle.c"
        var $7=($6) < 0; //@line 2961 "cPickle.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2961 "cPickle.c"
      case 3: // $bb2
        $0=0; //@line 2962 "cPickle.c"
        __label__ = 7; break; //@line 2962 "cPickle.c"
      case 4: // $bb3
        var $8=HEAP[$get]; //@line 2964 "cPickle.c"
        var $9=($8)!=0; //@line 2964 "cPickle.c"
        var $10=$self_addr; //@line 2964 "cPickle.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2964 "cPickle.c"
      case 5: // $bb4
        var $11=_Pickle_getvalue($10, 0); //@line 2964 "cPickle.c"
        $0=$11; //@line 2964 "cPickle.c"
        __label__ = 7; break; //@line 2964 "cPickle.c"
      case 6: // $bb5
        var $12=$10; //@line 2967 "cPickle.c"
        var $13=$12; //@line 2967 "cPickle.c"
        var $14=HEAP[$13]; //@line 2967 "cPickle.c"
        var $15=($14) + 1; //@line 2967 "cPickle.c"
        var $16=$12; //@line 2967 "cPickle.c"
        HEAP[$16]=$15; //@line 2967 "cPickle.c"
        var $17=$self_addr; //@line 2968 "cPickle.c"
        var $18=$17; //@line 2968 "cPickle.c"
        $0=$18; //@line 2968 "cPickle.c"
        __label__ = 7; break; //@line 2968 "cPickle.c"
      case 7: // $bb6
        var $19=$0; //@line 2959 "cPickle.c"
        $retval=$19; //@line 2959 "cPickle.c"
        var $retval7=$retval; //@line 2959 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 2959 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newPicklerobject($file, $proto) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $file_addr;
        var $proto_addr;
        var $retval;
        var $0;
        var $self;
        var $m;
        $file_addr=$file;
        $proto_addr=$proto;
        var $1=$proto_addr; //@line 2990 "cPickle.c"
        var $2=($1) < 0; //@line 2990 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2990 "cPickle.c"
      case 1: // $bb1_thread
        $proto_addr=2; //@line 2991 "cPickle.c"
        __label__ = 4; break;
      case 2: // $bb1
        var $3=($1) > 2; //@line 2992 "cPickle.c"
        if ($3) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2992 "cPickle.c"
      case 3: // $bb2
        var $4=HEAP[_PyExc_ValueError]; //@line 2993 "cPickle.c"
        var $5=$proto_addr; //@line 2993 "cPickle.c"
        var $6=_PyErr_Format($4, __str60, allocate([$5,0,0,0,2,0,0,0], ["i32",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 2993 "cPickle.c"
        $0=0; //@line 2996 "cPickle.c"
        __label__ = 34; break; //@line 2996 "cPickle.c"
      case 4: // $bb3
        var $7=__PyObject_GC_New(_Picklertype); //@line 2999 "cPickle.c"
        var $8=$7; //@line 2999 "cPickle.c"
        $self=$8; //@line 2999 "cPickle.c"
        var $9=($8)==0; //@line 3000 "cPickle.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3000 "cPickle.c"
      case 5: // $bb4
        $0=0; //@line 3001 "cPickle.c"
        __label__ = 34; break; //@line 3001 "cPickle.c"
      case 6: // $bb5
        var $10=$self; //@line 3002 "cPickle.c"
        var $11=$10+36; //@line 3002 "cPickle.c"
        var $12=$proto_addr; //@line 3002 "cPickle.c"
        HEAP[$11]=$12; //@line 3002 "cPickle.c"
        var $13=$proto_addr; //@line 3003 "cPickle.c"
        var $14=($13) > 0; //@line 3003 "cPickle.c"
        var $15=($14); //@line 3003 "cPickle.c"
        var $16=$self; //@line 3003 "cPickle.c"
        var $17=$16+40; //@line 3003 "cPickle.c"
        HEAP[$17]=$15; //@line 3003 "cPickle.c"
        var $18=$self; //@line 3004 "cPickle.c"
        var $19=$18+8; //@line 3004 "cPickle.c"
        HEAP[$19]=0; //@line 3004 "cPickle.c"
        var $20=$self; //@line 3005 "cPickle.c"
        var $21=$20+12; //@line 3005 "cPickle.c"
        HEAP[$21]=0; //@line 3005 "cPickle.c"
        var $22=$self; //@line 3006 "cPickle.c"
        var $23=$22+20; //@line 3006 "cPickle.c"
        HEAP[$23]=0; //@line 3006 "cPickle.c"
        var $24=$self; //@line 3007 "cPickle.c"
        var $25=$24+24; //@line 3007 "cPickle.c"
        HEAP[$25]=0; //@line 3007 "cPickle.c"
        var $26=$self; //@line 3008 "cPickle.c"
        var $27=$26+28; //@line 3008 "cPickle.c"
        HEAP[$27]=0; //@line 3008 "cPickle.c"
        var $28=$self; //@line 3009 "cPickle.c"
        var $29=$28+32; //@line 3009 "cPickle.c"
        HEAP[$29]=0; //@line 3009 "cPickle.c"
        var $30=$self; //@line 3010 "cPickle.c"
        var $31=$30+52; //@line 3010 "cPickle.c"
        HEAP[$31]=0; //@line 3010 "cPickle.c"
        var $32=$self; //@line 3011 "cPickle.c"
        var $33=$32+44; //@line 3011 "cPickle.c"
        HEAP[$33]=0; //@line 3011 "cPickle.c"
        var $34=$self; //@line 3012 "cPickle.c"
        var $35=$34+64; //@line 3012 "cPickle.c"
        HEAP[$35]=0; //@line 3012 "cPickle.c"
        var $36=$self; //@line 3013 "cPickle.c"
        var $37=$36+68; //@line 3013 "cPickle.c"
        HEAP[$37]=0; //@line 3013 "cPickle.c"
        var $38=$self; //@line 3014 "cPickle.c"
        var $39=$38+56; //@line 3014 "cPickle.c"
        HEAP[$39]=0; //@line 3014 "cPickle.c"
        var $40=$self; //@line 3015 "cPickle.c"
        var $41=$40+60; //@line 3015 "cPickle.c"
        HEAP[$41]=0; //@line 3015 "cPickle.c"
        var $42=$self; //@line 3017 "cPickle.c"
        var $43=$42+16; //@line 3017 "cPickle.c"
        HEAP[$43]=0; //@line 3017 "cPickle.c"
        var $44=$file_addr; //@line 3018 "cPickle.c"
        var $45=($44)!=0; //@line 3018 "cPickle.c"
        if ($45) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3018 "cPickle.c"
      case 7: // $bb6
        var $46=$file_addr; //@line 3019 "cPickle.c"
        var $47=$46; //@line 3019 "cPickle.c"
        var $48=HEAP[$47]; //@line 3019 "cPickle.c"
        var $49=($48) + 1; //@line 3019 "cPickle.c"
        var $50=$file_addr; //@line 3019 "cPickle.c"
        var $51=$50; //@line 3019 "cPickle.c"
        HEAP[$51]=$49; //@line 3019 "cPickle.c"
        __label__ = 9; break; //@line 3019 "cPickle.c"
      case 8: // $bb7
        var $52=_Pdata_New(); //@line 3021 "cPickle.c"
        $file_addr=$52; //@line 3021 "cPickle.c"
        var $53=$file_addr; //@line 3022 "cPickle.c"
        var $54=($53)==0; //@line 3022 "cPickle.c"
        if ($54) { __label__ = 31; break; } else { __label__ = 9; break; } //@line 3022 "cPickle.c"
      case 9: // $bb8
        var $55=$self; //@line 3025 "cPickle.c"
        var $56=$55+16; //@line 3025 "cPickle.c"
        var $57=$file_addr; //@line 3025 "cPickle.c"
        HEAP[$56]=$57; //@line 3025 "cPickle.c"
        var $58=_PyDict_New(); //@line 3027 "cPickle.c"
        var $59=$self; //@line 3027 "cPickle.c"
        var $60=$59+20; //@line 3027 "cPickle.c"
        HEAP[$60]=$58; //@line 3027 "cPickle.c"
        var $61=$self; //@line 3027 "cPickle.c"
        var $62=$61+20; //@line 3027 "cPickle.c"
        var $63=HEAP[$62]; //@line 3027 "cPickle.c"
        var $64=($63)==0; //@line 3027 "cPickle.c"
        if ($64) { __label__ = 31; break; } else { __label__ = 10; break; } //@line 3027 "cPickle.c"
      case 10: // $bb9
        var $65=$file_addr; //@line 3030 "cPickle.c"
        var $66=$65+4; //@line 3030 "cPickle.c"
        var $67=HEAP[$66]; //@line 3030 "cPickle.c"
        var $68=($67)==(_PyFile_Type); //@line 3030 "cPickle.c"
        if ($68) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 3030 "cPickle.c"
      case 11: // $bb10
        var $69=$file_addr; //@line 3030 "cPickle.c"
        var $70=$69+4; //@line 3030 "cPickle.c"
        var $71=HEAP[$70]; //@line 3030 "cPickle.c"
        var $72=_PyType_IsSubtype($71, _PyFile_Type); //@line 3030 "cPickle.c"
        var $73=($72)!=0; //@line 3030 "cPickle.c"
        if ($73) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 3030 "cPickle.c"
      case 12: // $bb11
        var $74=$file_addr; //@line 3031 "cPickle.c"
        var $75=_PyFile_AsFile($74); //@line 3031 "cPickle.c"
        var $76=$self; //@line 3031 "cPickle.c"
        var $77=$76+8; //@line 3031 "cPickle.c"
        HEAP[$77]=$75; //@line 3031 "cPickle.c"
        var $78=$self; //@line 3032 "cPickle.c"
        var $79=$78+8; //@line 3032 "cPickle.c"
        var $80=HEAP[$79]; //@line 3032 "cPickle.c"
        var $81=($80)==0; //@line 3032 "cPickle.c"
        if ($81) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3032 "cPickle.c"
      case 13: // $bb12
        var $82=HEAP[_PyExc_ValueError]; //@line 3033 "cPickle.c"
        _PyErr_SetString($82, __str61); //@line 3033 "cPickle.c"
        __label__ = 31; break; //@line 3033 "cPickle.c"
      case 14: // $bb13
        var $83=$self; //@line 3037 "cPickle.c"
        var $84=$83+48; //@line 3037 "cPickle.c"
        HEAP[$84]=(FUNCTION_TABLE_OFFSET + 4); //@line 3037 "cPickle.c"
        __label__ = 24; break; //@line 3037 "cPickle.c"
      case 15: // $bb14
        var $85=$file_addr; //@line 3039 "cPickle.c"
        var $86=$85+4; //@line 3039 "cPickle.c"
        var $87=HEAP[$86]; //@line 3039 "cPickle.c"
        var $88=HEAP[_PycStringIO]; //@line 3039 "cPickle.c"
        var $89=$88+28; //@line 3039 "cPickle.c"
        var $90=HEAP[$89]; //@line 3039 "cPickle.c"
        var $91=($87)==($90); //@line 3039 "cPickle.c"
        if ($91) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3039 "cPickle.c"
      case 16: // $bb15
        var $92=$self; //@line 3040 "cPickle.c"
        var $93=$92+48; //@line 3040 "cPickle.c"
        HEAP[$93]=(FUNCTION_TABLE_OFFSET + 6); //@line 3040 "cPickle.c"
        __label__ = 24; break; //@line 3040 "cPickle.c"
      case 17: // $bb16
        var $94=$file_addr; //@line 3042 "cPickle.c"
        var $95=($94)==(__Py_NoneStruct); //@line 3042 "cPickle.c"
        var $96=$self; //@line 3043 "cPickle.c"
        var $97=$96+48; //@line 3043 "cPickle.c"
        if ($95) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3042 "cPickle.c"
      case 18: // $bb17
        HEAP[$97]=(FUNCTION_TABLE_OFFSET + 8); //@line 3043 "cPickle.c"
        __label__ = 24; break; //@line 3043 "cPickle.c"
      case 19: // $bb18
        HEAP[$97]=(FUNCTION_TABLE_OFFSET + 10); //@line 3046 "cPickle.c"
        var $98=$file_addr; //@line 3048 "cPickle.c"
        var $99=$98+4; //@line 3048 "cPickle.c"
        var $100=HEAP[$99]; //@line 3048 "cPickle.c"
        var $101=($100)!=(_PdataType); //@line 3048 "cPickle.c"
        if ($101) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 3048 "cPickle.c"
      case 20: // $bb19
        var $102=HEAP[_write_str]; //@line 3049 "cPickle.c"
        var $103=$file_addr; //@line 3049 "cPickle.c"
        var $104=_PyObject_GetAttr($103, $102); //@line 3049 "cPickle.c"
        var $105=$self; //@line 3049 "cPickle.c"
        var $106=$105+12; //@line 3049 "cPickle.c"
        HEAP[$106]=$104; //@line 3049 "cPickle.c"
        var $107=$self; //@line 3050 "cPickle.c"
        var $108=$107+12; //@line 3050 "cPickle.c"
        var $109=HEAP[$108]; //@line 3050 "cPickle.c"
        var $110=($109)==0; //@line 3050 "cPickle.c"
        if ($110) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 3050 "cPickle.c"
      case 21: // $bb20
        _PyErr_Clear(); //@line 3051 "cPickle.c"
        var $111=HEAP[_PyExc_TypeError]; //@line 3052 "cPickle.c"
        _PyErr_SetString($111, __str62); //@line 3052 "cPickle.c"
        __label__ = 31; break; //@line 3052 "cPickle.c"
      case 22: // $bb21
        var $112=_PyMem_Malloc(256); //@line 3059 "cPickle.c"
        var $113=$self; //@line 3059 "cPickle.c"
        var $114=$113+52; //@line 3059 "cPickle.c"
        HEAP[$114]=$112; //@line 3059 "cPickle.c"
        var $115=$self; //@line 3060 "cPickle.c"
        var $116=$115+52; //@line 3060 "cPickle.c"
        var $117=HEAP[$116]; //@line 3060 "cPickle.c"
        var $118=($117)==0; //@line 3060 "cPickle.c"
        if ($118) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3060 "cPickle.c"
      case 23: // $bb22
        var $119=_PyErr_NoMemory(); //@line 3061 "cPickle.c"
        __label__ = 31; break; //@line 3061 "cPickle.c"
      case 24: // $bb23
        var $120=_PyEval_GetRestricted(); //@line 3066 "cPickle.c"
        var $121=($120)!=0; //@line 3066 "cPickle.c"
        if ($121) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 3066 "cPickle.c"
      case 25: // $bb24
        var $122=_PyImport_ImportModule(__str63); //@line 3068 "cPickle.c"
        $m=$122; //@line 3068 "cPickle.c"
        var $123=$m; //@line 3070 "cPickle.c"
        var $124=($123)==0; //@line 3070 "cPickle.c"
        if ($124) { __label__ = 31; break; } else { __label__ = 26; break; } //@line 3070 "cPickle.c"
      case 26: // $bb25
        var $125=HEAP[_dispatch_table_str]; //@line 3072 "cPickle.c"
        var $126=$m; //@line 3072 "cPickle.c"
        var $127=_PyObject_GetAttr($126, $125); //@line 3072 "cPickle.c"
        var $128=$self; //@line 3072 "cPickle.c"
        var $129=$128+60; //@line 3072 "cPickle.c"
        HEAP[$129]=$127; //@line 3072 "cPickle.c"
        var $130=$m; //@line 3073 "cPickle.c"
        var $131=$130; //@line 3073 "cPickle.c"
        var $132=HEAP[$131]; //@line 3073 "cPickle.c"
        var $133=($132) - 1; //@line 3073 "cPickle.c"
        var $134=$m; //@line 3073 "cPickle.c"
        var $135=$134; //@line 3073 "cPickle.c"
        HEAP[$135]=$133; //@line 3073 "cPickle.c"
        var $136=$m; //@line 3073 "cPickle.c"
        var $137=$136; //@line 3073 "cPickle.c"
        var $138=HEAP[$137]; //@line 3073 "cPickle.c"
        var $139=($138)==0; //@line 3073 "cPickle.c"
        if ($139) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 3073 "cPickle.c"
      case 27: // $bb26
        var $140=$m; //@line 3073 "cPickle.c"
        var $141=$140+4; //@line 3073 "cPickle.c"
        var $142=HEAP[$141]; //@line 3073 "cPickle.c"
        var $143=$142+24; //@line 3073 "cPickle.c"
        var $144=HEAP[$143]; //@line 3073 "cPickle.c"
        var $145=$m; //@line 3073 "cPickle.c"
        FUNCTION_TABLE[$144]($145); //@line 3073 "cPickle.c"
        __label__ = 28; break; //@line 3073 "cPickle.c"
      case 28: // $bb27
        var $146=$self; //@line 3074 "cPickle.c"
        var $147=$146+60; //@line 3074 "cPickle.c"
        var $148=HEAP[$147]; //@line 3074 "cPickle.c"
        var $149=($148)==0; //@line 3074 "cPickle.c"
        if ($149) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 3074 "cPickle.c"
      case 29: // $bb29
        var $150=HEAP[_dispatch_table]; //@line 3078 "cPickle.c"
        var $151=$self; //@line 3078 "cPickle.c"
        var $152=$151+60; //@line 3078 "cPickle.c"
        HEAP[$152]=$150; //@line 3078 "cPickle.c"
        var $153=HEAP[_dispatch_table]; //@line 3079 "cPickle.c"
        var $154=$153; //@line 3079 "cPickle.c"
        var $155=HEAP[$154]; //@line 3079 "cPickle.c"
        var $156=($155) + 1; //@line 3079 "cPickle.c"
        var $157=$153; //@line 3079 "cPickle.c"
        HEAP[$157]=$156; //@line 3079 "cPickle.c"
        __label__ = 30; break; //@line 3079 "cPickle.c"
      case 30: // $bb30
        var $158=$self; //@line 3081 "cPickle.c"
        var $159=$158; //@line 3081 "cPickle.c"
        _PyObject_GC_Track($159); //@line 3081 "cPickle.c"
        var $160=$self; //@line 3083 "cPickle.c"
        $0=$160; //@line 3083 "cPickle.c"
        __label__ = 34; break; //@line 3083 "cPickle.c"
      case 31: // $err
        var $161=$self; //@line 3086 "cPickle.c"
        var $162=$161; //@line 3086 "cPickle.c"
        var $163=$162; //@line 3086 "cPickle.c"
        var $164=HEAP[$163]; //@line 3086 "cPickle.c"
        var $165=($164) - 1; //@line 3086 "cPickle.c"
        var $166=$162; //@line 3086 "cPickle.c"
        HEAP[$166]=$165; //@line 3086 "cPickle.c"
        var $167=$162; //@line 3086 "cPickle.c"
        var $168=HEAP[$167]; //@line 3086 "cPickle.c"
        var $169=($168)==0; //@line 3086 "cPickle.c"
        if ($169) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 3086 "cPickle.c"
      case 32: // $bb31
        var $170=$self; //@line 3086 "cPickle.c"
        var $171=$170; //@line 3086 "cPickle.c"
        var $172=$171+4; //@line 3086 "cPickle.c"
        var $173=HEAP[$172]; //@line 3086 "cPickle.c"
        var $174=$173+24; //@line 3086 "cPickle.c"
        var $175=HEAP[$174]; //@line 3086 "cPickle.c"
        var $176=$self; //@line 3086 "cPickle.c"
        var $177=$176; //@line 3086 "cPickle.c"
        FUNCTION_TABLE[$175]($177); //@line 3086 "cPickle.c"
        __label__ = 33; break; //@line 3086 "cPickle.c"
      case 33: // $bb32
        $0=0; //@line 3087 "cPickle.c"
        __label__ = 34; break; //@line 3087 "cPickle.c"
      case 34: // $bb33
        var $178=$0; //@line 2996 "cPickle.c"
        $retval=$178; //@line 2996 "cPickle.c"
        var $retval34=$retval; //@line 2996 "cPickle.c"
        ;
        return $retval34; //@line 2996 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_Pickler($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $file=__stackBase__;
        var $proto=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        HEAP[$file]=0; //@line 3095 "cPickle.c"
        HEAP[$proto]=0; //@line 3096 "cPickle.c"
        var $1=$args_addr; //@line 3105 "cPickle.c"
        var $2=_PyArg_ParseTuple($1, __str64, allocate([$proto,0,0,0], ["i32*",0,0,0], ALLOC_STACK)); //@line 3105 "cPickle.c"
        var $3=($2)==0; //@line 3105 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3105 "cPickle.c"
      case 1: // $bb
        _PyErr_Clear(); //@line 3106 "cPickle.c"
        HEAP[$proto]=0; //@line 3107 "cPickle.c"
        var $4=$args_addr; //@line 3108 "cPickle.c"
        var $5=$kwds_addr; //@line 3108 "cPickle.c"
        var $6=_PyArg_ParseTupleAndKeywords($4, $5, __str65, _kwlist_12011, allocate([$file,0,0,0,$proto,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 3108 "cPickle.c"
        var $7=($6)==0; //@line 3108 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3108 "cPickle.c"
      case 2: // $bb1
        $0=0; //@line 3110 "cPickle.c"
        __label__ = 4; break; //@line 3110 "cPickle.c"
      case 3: // $bb2
        var $8=HEAP[$proto]; //@line 3112 "cPickle.c"
        var $9=HEAP[$file]; //@line 3112 "cPickle.c"
        var $10=_newPicklerobject($9, $8); //@line 3112 "cPickle.c"
        var $11=$10; //@line 3112 "cPickle.c"
        $0=$11; //@line 3112 "cPickle.c"
        __label__ = 4; break; //@line 3112 "cPickle.c"
      case 4: // $bb3
        var $12=$0; //@line 3110 "cPickle.c"
        $retval=$12; //@line 3110 "cPickle.c"
        var $retval4=$retval; //@line 3110 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 3110 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        $self_addr=$self;
        var $0=$self_addr; //@line 3119 "cPickle.c"
        var $1=$0; //@line 3119 "cPickle.c"
        _PyObject_GC_UnTrack($1); //@line 3119 "cPickle.c"
        var $2=$self_addr; //@line 3120 "cPickle.c"
        var $3=$2+12; //@line 3120 "cPickle.c"
        var $4=HEAP[$3]; //@line 3120 "cPickle.c"
        var $5=($4)!=0; //@line 3120 "cPickle.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3120 "cPickle.c"
      case 1: // $bb
        var $6=$self_addr; //@line 3120 "cPickle.c"
        var $7=$6+12; //@line 3120 "cPickle.c"
        var $8=HEAP[$7]; //@line 3120 "cPickle.c"
        var $9=$8; //@line 3120 "cPickle.c"
        var $10=HEAP[$9]; //@line 3120 "cPickle.c"
        var $11=($10) - 1; //@line 3120 "cPickle.c"
        var $12=$8; //@line 3120 "cPickle.c"
        HEAP[$12]=$11; //@line 3120 "cPickle.c"
        var $13=$8; //@line 3120 "cPickle.c"
        var $14=HEAP[$13]; //@line 3120 "cPickle.c"
        var $15=($14)==0; //@line 3120 "cPickle.c"
        if ($15) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3120 "cPickle.c"
      case 2: // $bb1
        var $16=$self_addr; //@line 3120 "cPickle.c"
        var $17=$16+12; //@line 3120 "cPickle.c"
        var $18=HEAP[$17]; //@line 3120 "cPickle.c"
        var $19=$18+4; //@line 3120 "cPickle.c"
        var $20=HEAP[$19]; //@line 3120 "cPickle.c"
        var $21=$20+24; //@line 3120 "cPickle.c"
        var $22=HEAP[$21]; //@line 3120 "cPickle.c"
        var $23=$self_addr; //@line 3120 "cPickle.c"
        var $24=$23+12; //@line 3120 "cPickle.c"
        var $25=HEAP[$24]; //@line 3120 "cPickle.c"
        FUNCTION_TABLE[$22]($25); //@line 3120 "cPickle.c"
        __label__ = 3; break; //@line 3120 "cPickle.c"
      case 3: // $bb2
        var $26=$self_addr; //@line 3121 "cPickle.c"
        var $27=$26+20; //@line 3121 "cPickle.c"
        var $28=HEAP[$27]; //@line 3121 "cPickle.c"
        var $29=($28)!=0; //@line 3121 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3121 "cPickle.c"
      case 4: // $bb3
        var $30=$self_addr; //@line 3121 "cPickle.c"
        var $31=$30+20; //@line 3121 "cPickle.c"
        var $32=HEAP[$31]; //@line 3121 "cPickle.c"
        var $33=$32; //@line 3121 "cPickle.c"
        var $34=HEAP[$33]; //@line 3121 "cPickle.c"
        var $35=($34) - 1; //@line 3121 "cPickle.c"
        var $36=$32; //@line 3121 "cPickle.c"
        HEAP[$36]=$35; //@line 3121 "cPickle.c"
        var $37=$32; //@line 3121 "cPickle.c"
        var $38=HEAP[$37]; //@line 3121 "cPickle.c"
        var $39=($38)==0; //@line 3121 "cPickle.c"
        if ($39) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3121 "cPickle.c"
      case 5: // $bb4
        var $40=$self_addr; //@line 3121 "cPickle.c"
        var $41=$40+20; //@line 3121 "cPickle.c"
        var $42=HEAP[$41]; //@line 3121 "cPickle.c"
        var $43=$42+4; //@line 3121 "cPickle.c"
        var $44=HEAP[$43]; //@line 3121 "cPickle.c"
        var $45=$44+24; //@line 3121 "cPickle.c"
        var $46=HEAP[$45]; //@line 3121 "cPickle.c"
        var $47=$self_addr; //@line 3121 "cPickle.c"
        var $48=$47+20; //@line 3121 "cPickle.c"
        var $49=HEAP[$48]; //@line 3121 "cPickle.c"
        FUNCTION_TABLE[$46]($49); //@line 3121 "cPickle.c"
        __label__ = 6; break; //@line 3121 "cPickle.c"
      case 6: // $bb5
        var $50=$self_addr; //@line 3122 "cPickle.c"
        var $51=$50+68; //@line 3122 "cPickle.c"
        var $52=HEAP[$51]; //@line 3122 "cPickle.c"
        var $53=($52)!=0; //@line 3122 "cPickle.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 3122 "cPickle.c"
      case 7: // $bb6
        var $54=$self_addr; //@line 3122 "cPickle.c"
        var $55=$54+68; //@line 3122 "cPickle.c"
        var $56=HEAP[$55]; //@line 3122 "cPickle.c"
        var $57=$56; //@line 3122 "cPickle.c"
        var $58=HEAP[$57]; //@line 3122 "cPickle.c"
        var $59=($58) - 1; //@line 3122 "cPickle.c"
        var $60=$56; //@line 3122 "cPickle.c"
        HEAP[$60]=$59; //@line 3122 "cPickle.c"
        var $61=$56; //@line 3122 "cPickle.c"
        var $62=HEAP[$61]; //@line 3122 "cPickle.c"
        var $63=($62)==0; //@line 3122 "cPickle.c"
        if ($63) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3122 "cPickle.c"
      case 8: // $bb7
        var $64=$self_addr; //@line 3122 "cPickle.c"
        var $65=$64+68; //@line 3122 "cPickle.c"
        var $66=HEAP[$65]; //@line 3122 "cPickle.c"
        var $67=$66+4; //@line 3122 "cPickle.c"
        var $68=HEAP[$67]; //@line 3122 "cPickle.c"
        var $69=$68+24; //@line 3122 "cPickle.c"
        var $70=HEAP[$69]; //@line 3122 "cPickle.c"
        var $71=$self_addr; //@line 3122 "cPickle.c"
        var $72=$71+68; //@line 3122 "cPickle.c"
        var $73=HEAP[$72]; //@line 3122 "cPickle.c"
        FUNCTION_TABLE[$70]($73); //@line 3122 "cPickle.c"
        __label__ = 9; break; //@line 3122 "cPickle.c"
      case 9: // $bb8
        var $74=$self_addr; //@line 3123 "cPickle.c"
        var $75=$74+24; //@line 3123 "cPickle.c"
        var $76=HEAP[$75]; //@line 3123 "cPickle.c"
        var $77=($76)!=0; //@line 3123 "cPickle.c"
        if ($77) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3123 "cPickle.c"
      case 10: // $bb9
        var $78=$self_addr; //@line 3123 "cPickle.c"
        var $79=$78+24; //@line 3123 "cPickle.c"
        var $80=HEAP[$79]; //@line 3123 "cPickle.c"
        var $81=$80; //@line 3123 "cPickle.c"
        var $82=HEAP[$81]; //@line 3123 "cPickle.c"
        var $83=($82) - 1; //@line 3123 "cPickle.c"
        var $84=$80; //@line 3123 "cPickle.c"
        HEAP[$84]=$83; //@line 3123 "cPickle.c"
        var $85=$80; //@line 3123 "cPickle.c"
        var $86=HEAP[$85]; //@line 3123 "cPickle.c"
        var $87=($86)==0; //@line 3123 "cPickle.c"
        if ($87) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3123 "cPickle.c"
      case 11: // $bb10
        var $88=$self_addr; //@line 3123 "cPickle.c"
        var $89=$88+24; //@line 3123 "cPickle.c"
        var $90=HEAP[$89]; //@line 3123 "cPickle.c"
        var $91=$90+4; //@line 3123 "cPickle.c"
        var $92=HEAP[$91]; //@line 3123 "cPickle.c"
        var $93=$92+24; //@line 3123 "cPickle.c"
        var $94=HEAP[$93]; //@line 3123 "cPickle.c"
        var $95=$self_addr; //@line 3123 "cPickle.c"
        var $96=$95+24; //@line 3123 "cPickle.c"
        var $97=HEAP[$96]; //@line 3123 "cPickle.c"
        FUNCTION_TABLE[$94]($97); //@line 3123 "cPickle.c"
        __label__ = 12; break; //@line 3123 "cPickle.c"
      case 12: // $bb11
        var $98=$self_addr; //@line 3124 "cPickle.c"
        var $99=$98+16; //@line 3124 "cPickle.c"
        var $100=HEAP[$99]; //@line 3124 "cPickle.c"
        var $101=($100)!=0; //@line 3124 "cPickle.c"
        if ($101) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 3124 "cPickle.c"
      case 13: // $bb12
        var $102=$self_addr; //@line 3124 "cPickle.c"
        var $103=$102+16; //@line 3124 "cPickle.c"
        var $104=HEAP[$103]; //@line 3124 "cPickle.c"
        var $105=$104; //@line 3124 "cPickle.c"
        var $106=HEAP[$105]; //@line 3124 "cPickle.c"
        var $107=($106) - 1; //@line 3124 "cPickle.c"
        var $108=$104; //@line 3124 "cPickle.c"
        HEAP[$108]=$107; //@line 3124 "cPickle.c"
        var $109=$104; //@line 3124 "cPickle.c"
        var $110=HEAP[$109]; //@line 3124 "cPickle.c"
        var $111=($110)==0; //@line 3124 "cPickle.c"
        if ($111) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3124 "cPickle.c"
      case 14: // $bb13
        var $112=$self_addr; //@line 3124 "cPickle.c"
        var $113=$112+16; //@line 3124 "cPickle.c"
        var $114=HEAP[$113]; //@line 3124 "cPickle.c"
        var $115=$114+4; //@line 3124 "cPickle.c"
        var $116=HEAP[$115]; //@line 3124 "cPickle.c"
        var $117=$116+24; //@line 3124 "cPickle.c"
        var $118=HEAP[$117]; //@line 3124 "cPickle.c"
        var $119=$self_addr; //@line 3124 "cPickle.c"
        var $120=$119+16; //@line 3124 "cPickle.c"
        var $121=HEAP[$120]; //@line 3124 "cPickle.c"
        FUNCTION_TABLE[$118]($121); //@line 3124 "cPickle.c"
        __label__ = 15; break; //@line 3124 "cPickle.c"
      case 15: // $bb14
        var $122=$self_addr; //@line 3125 "cPickle.c"
        var $123=$122+28; //@line 3125 "cPickle.c"
        var $124=HEAP[$123]; //@line 3125 "cPickle.c"
        var $125=($124)!=0; //@line 3125 "cPickle.c"
        if ($125) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3125 "cPickle.c"
      case 16: // $bb15
        var $126=$self_addr; //@line 3125 "cPickle.c"
        var $127=$126+28; //@line 3125 "cPickle.c"
        var $128=HEAP[$127]; //@line 3125 "cPickle.c"
        var $129=$128; //@line 3125 "cPickle.c"
        var $130=HEAP[$129]; //@line 3125 "cPickle.c"
        var $131=($130) - 1; //@line 3125 "cPickle.c"
        var $132=$128; //@line 3125 "cPickle.c"
        HEAP[$132]=$131; //@line 3125 "cPickle.c"
        var $133=$128; //@line 3125 "cPickle.c"
        var $134=HEAP[$133]; //@line 3125 "cPickle.c"
        var $135=($134)==0; //@line 3125 "cPickle.c"
        if ($135) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3125 "cPickle.c"
      case 17: // $bb16
        var $136=$self_addr; //@line 3125 "cPickle.c"
        var $137=$136+28; //@line 3125 "cPickle.c"
        var $138=HEAP[$137]; //@line 3125 "cPickle.c"
        var $139=$138+4; //@line 3125 "cPickle.c"
        var $140=HEAP[$139]; //@line 3125 "cPickle.c"
        var $141=$140+24; //@line 3125 "cPickle.c"
        var $142=HEAP[$141]; //@line 3125 "cPickle.c"
        var $143=$self_addr; //@line 3125 "cPickle.c"
        var $144=$143+28; //@line 3125 "cPickle.c"
        var $145=HEAP[$144]; //@line 3125 "cPickle.c"
        FUNCTION_TABLE[$142]($145); //@line 3125 "cPickle.c"
        __label__ = 18; break; //@line 3125 "cPickle.c"
      case 18: // $bb17
        var $146=$self_addr; //@line 3126 "cPickle.c"
        var $147=$146+32; //@line 3126 "cPickle.c"
        var $148=HEAP[$147]; //@line 3126 "cPickle.c"
        var $149=($148)!=0; //@line 3126 "cPickle.c"
        if ($149) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3126 "cPickle.c"
      case 19: // $bb18
        var $150=$self_addr; //@line 3126 "cPickle.c"
        var $151=$150+32; //@line 3126 "cPickle.c"
        var $152=HEAP[$151]; //@line 3126 "cPickle.c"
        var $153=$152; //@line 3126 "cPickle.c"
        var $154=HEAP[$153]; //@line 3126 "cPickle.c"
        var $155=($154) - 1; //@line 3126 "cPickle.c"
        var $156=$152; //@line 3126 "cPickle.c"
        HEAP[$156]=$155; //@line 3126 "cPickle.c"
        var $157=$152; //@line 3126 "cPickle.c"
        var $158=HEAP[$157]; //@line 3126 "cPickle.c"
        var $159=($158)==0; //@line 3126 "cPickle.c"
        if ($159) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3126 "cPickle.c"
      case 20: // $bb19
        var $160=$self_addr; //@line 3126 "cPickle.c"
        var $161=$160+32; //@line 3126 "cPickle.c"
        var $162=HEAP[$161]; //@line 3126 "cPickle.c"
        var $163=$162+4; //@line 3126 "cPickle.c"
        var $164=HEAP[$163]; //@line 3126 "cPickle.c"
        var $165=$164+24; //@line 3126 "cPickle.c"
        var $166=HEAP[$165]; //@line 3126 "cPickle.c"
        var $167=$self_addr; //@line 3126 "cPickle.c"
        var $168=$167+32; //@line 3126 "cPickle.c"
        var $169=HEAP[$168]; //@line 3126 "cPickle.c"
        FUNCTION_TABLE[$166]($169); //@line 3126 "cPickle.c"
        __label__ = 21; break; //@line 3126 "cPickle.c"
      case 21: // $bb20
        var $170=$self_addr; //@line 3127 "cPickle.c"
        var $171=$170+60; //@line 3127 "cPickle.c"
        var $172=HEAP[$171]; //@line 3127 "cPickle.c"
        var $173=($172)!=0; //@line 3127 "cPickle.c"
        if ($173) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 3127 "cPickle.c"
      case 22: // $bb21
        var $174=$self_addr; //@line 3127 "cPickle.c"
        var $175=$174+60; //@line 3127 "cPickle.c"
        var $176=HEAP[$175]; //@line 3127 "cPickle.c"
        var $177=$176; //@line 3127 "cPickle.c"
        var $178=HEAP[$177]; //@line 3127 "cPickle.c"
        var $179=($178) - 1; //@line 3127 "cPickle.c"
        var $180=$176; //@line 3127 "cPickle.c"
        HEAP[$180]=$179; //@line 3127 "cPickle.c"
        var $181=$176; //@line 3127 "cPickle.c"
        var $182=HEAP[$181]; //@line 3127 "cPickle.c"
        var $183=($182)==0; //@line 3127 "cPickle.c"
        if ($183) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3127 "cPickle.c"
      case 23: // $bb22
        var $184=$self_addr; //@line 3127 "cPickle.c"
        var $185=$184+60; //@line 3127 "cPickle.c"
        var $186=HEAP[$185]; //@line 3127 "cPickle.c"
        var $187=$186+4; //@line 3127 "cPickle.c"
        var $188=HEAP[$187]; //@line 3127 "cPickle.c"
        var $189=$188+24; //@line 3127 "cPickle.c"
        var $190=HEAP[$189]; //@line 3127 "cPickle.c"
        var $191=$self_addr; //@line 3127 "cPickle.c"
        var $192=$191+60; //@line 3127 "cPickle.c"
        var $193=HEAP[$192]; //@line 3127 "cPickle.c"
        FUNCTION_TABLE[$190]($193); //@line 3127 "cPickle.c"
        __label__ = 24; break; //@line 3127 "cPickle.c"
      case 24: // $bb23
        var $194=$self_addr; //@line 3128 "cPickle.c"
        var $195=$194+52; //@line 3128 "cPickle.c"
        var $196=HEAP[$195]; //@line 3128 "cPickle.c"
        _PyMem_Free($196); //@line 3128 "cPickle.c"
        var $197=$self_addr; //@line 3129 "cPickle.c"
        var $198=$197; //@line 3129 "cPickle.c"
        var $199=$198+4; //@line 3129 "cPickle.c"
        var $200=HEAP[$199]; //@line 3129 "cPickle.c"
        var $201=$200+160; //@line 3129 "cPickle.c"
        var $202=HEAP[$201]; //@line 3129 "cPickle.c"
        var $203=$self_addr; //@line 3129 "cPickle.c"
        var $204=$203; //@line 3129 "cPickle.c"
        FUNCTION_TABLE[$202]($204); //@line 3129 "cPickle.c"
        ;
        return; //@line 3130 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_traverse($self, $visit, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $visit_addr;
        var $arg_addr;
        var $retval;
        var $0;
        var $vret;
        var $vret4;
        var $vret8;
        var $vret12;
        var $vret16;
        var $vret20;
        var $vret24;
        var $vret28;
        $self_addr=$self;
        $visit_addr=$visit;
        $arg_addr=$arg;
        var $1=$self_addr; //@line 3135 "cPickle.c"
        var $2=$1+12; //@line 3135 "cPickle.c"
        var $3=HEAP[$2]; //@line 3135 "cPickle.c"
        var $4=($3)!=0; //@line 3135 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3135 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 3135 "cPickle.c"
        var $6=$5+12; //@line 3135 "cPickle.c"
        var $7=HEAP[$6]; //@line 3135 "cPickle.c"
        var $8=$visit_addr; //@line 3135 "cPickle.c"
        var $9=$arg_addr; //@line 3135 "cPickle.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 3135 "cPickle.c"
        $vret=$10; //@line 3135 "cPickle.c"
        var $11=$vret; //@line 3135 "cPickle.c"
        var $12=($11)!=0; //@line 3135 "cPickle.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3135 "cPickle.c"
      case 2: // $bb1
        var $13=$vret; //@line 3135 "cPickle.c"
        $0=$13; //@line 3135 "cPickle.c"
        __label__ = 25; break; //@line 3135 "cPickle.c"
      case 3: // $bb2
        var $14=$self_addr; //@line 3136 "cPickle.c"
        var $15=$14+20; //@line 3136 "cPickle.c"
        var $16=HEAP[$15]; //@line 3136 "cPickle.c"
        var $17=($16)!=0; //@line 3136 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3136 "cPickle.c"
      case 4: // $bb3
        var $18=$self_addr; //@line 3136 "cPickle.c"
        var $19=$18+20; //@line 3136 "cPickle.c"
        var $20=HEAP[$19]; //@line 3136 "cPickle.c"
        var $21=$visit_addr; //@line 3136 "cPickle.c"
        var $22=$arg_addr; //@line 3136 "cPickle.c"
        var $23=FUNCTION_TABLE[$21]($20, $22); //@line 3136 "cPickle.c"
        $vret4=$23; //@line 3136 "cPickle.c"
        var $24=$vret4; //@line 3136 "cPickle.c"
        var $25=($24)!=0; //@line 3136 "cPickle.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3136 "cPickle.c"
      case 5: // $bb5
        var $26=$vret4; //@line 3136 "cPickle.c"
        $0=$26; //@line 3136 "cPickle.c"
        __label__ = 25; break; //@line 3136 "cPickle.c"
      case 6: // $bb6
        var $27=$self_addr; //@line 3137 "cPickle.c"
        var $28=$27+68; //@line 3137 "cPickle.c"
        var $29=HEAP[$28]; //@line 3137 "cPickle.c"
        var $30=($29)!=0; //@line 3137 "cPickle.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 3137 "cPickle.c"
      case 7: // $bb7
        var $31=$self_addr; //@line 3137 "cPickle.c"
        var $32=$31+68; //@line 3137 "cPickle.c"
        var $33=HEAP[$32]; //@line 3137 "cPickle.c"
        var $34=$visit_addr; //@line 3137 "cPickle.c"
        var $35=$arg_addr; //@line 3137 "cPickle.c"
        var $36=FUNCTION_TABLE[$34]($33, $35); //@line 3137 "cPickle.c"
        $vret8=$36; //@line 3137 "cPickle.c"
        var $37=$vret8; //@line 3137 "cPickle.c"
        var $38=($37)!=0; //@line 3137 "cPickle.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3137 "cPickle.c"
      case 8: // $bb9
        var $39=$vret8; //@line 3137 "cPickle.c"
        $0=$39; //@line 3137 "cPickle.c"
        __label__ = 25; break; //@line 3137 "cPickle.c"
      case 9: // $bb10
        var $40=$self_addr; //@line 3138 "cPickle.c"
        var $41=$40+24; //@line 3138 "cPickle.c"
        var $42=HEAP[$41]; //@line 3138 "cPickle.c"
        var $43=($42)!=0; //@line 3138 "cPickle.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3138 "cPickle.c"
      case 10: // $bb11
        var $44=$self_addr; //@line 3138 "cPickle.c"
        var $45=$44+24; //@line 3138 "cPickle.c"
        var $46=HEAP[$45]; //@line 3138 "cPickle.c"
        var $47=$visit_addr; //@line 3138 "cPickle.c"
        var $48=$arg_addr; //@line 3138 "cPickle.c"
        var $49=FUNCTION_TABLE[$47]($46, $48); //@line 3138 "cPickle.c"
        $vret12=$49; //@line 3138 "cPickle.c"
        var $50=$vret12; //@line 3138 "cPickle.c"
        var $51=($50)!=0; //@line 3138 "cPickle.c"
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3138 "cPickle.c"
      case 11: // $bb13
        var $52=$vret12; //@line 3138 "cPickle.c"
        $0=$52; //@line 3138 "cPickle.c"
        __label__ = 25; break; //@line 3138 "cPickle.c"
      case 12: // $bb14
        var $53=$self_addr; //@line 3139 "cPickle.c"
        var $54=$53+16; //@line 3139 "cPickle.c"
        var $55=HEAP[$54]; //@line 3139 "cPickle.c"
        var $56=($55)!=0; //@line 3139 "cPickle.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 3139 "cPickle.c"
      case 13: // $bb15
        var $57=$self_addr; //@line 3139 "cPickle.c"
        var $58=$57+16; //@line 3139 "cPickle.c"
        var $59=HEAP[$58]; //@line 3139 "cPickle.c"
        var $60=$visit_addr; //@line 3139 "cPickle.c"
        var $61=$arg_addr; //@line 3139 "cPickle.c"
        var $62=FUNCTION_TABLE[$60]($59, $61); //@line 3139 "cPickle.c"
        $vret16=$62; //@line 3139 "cPickle.c"
        var $63=$vret16; //@line 3139 "cPickle.c"
        var $64=($63)!=0; //@line 3139 "cPickle.c"
        if ($64) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3139 "cPickle.c"
      case 14: // $bb17
        var $65=$vret16; //@line 3139 "cPickle.c"
        $0=$65; //@line 3139 "cPickle.c"
        __label__ = 25; break; //@line 3139 "cPickle.c"
      case 15: // $bb18
        var $66=$self_addr; //@line 3140 "cPickle.c"
        var $67=$66+28; //@line 3140 "cPickle.c"
        var $68=HEAP[$67]; //@line 3140 "cPickle.c"
        var $69=($68)!=0; //@line 3140 "cPickle.c"
        if ($69) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3140 "cPickle.c"
      case 16: // $bb19
        var $70=$self_addr; //@line 3140 "cPickle.c"
        var $71=$70+28; //@line 3140 "cPickle.c"
        var $72=HEAP[$71]; //@line 3140 "cPickle.c"
        var $73=$visit_addr; //@line 3140 "cPickle.c"
        var $74=$arg_addr; //@line 3140 "cPickle.c"
        var $75=FUNCTION_TABLE[$73]($72, $74); //@line 3140 "cPickle.c"
        $vret20=$75; //@line 3140 "cPickle.c"
        var $76=$vret20; //@line 3140 "cPickle.c"
        var $77=($76)!=0; //@line 3140 "cPickle.c"
        if ($77) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3140 "cPickle.c"
      case 17: // $bb21
        var $78=$vret20; //@line 3140 "cPickle.c"
        $0=$78; //@line 3140 "cPickle.c"
        __label__ = 25; break; //@line 3140 "cPickle.c"
      case 18: // $bb22
        var $79=$self_addr; //@line 3141 "cPickle.c"
        var $80=$79+32; //@line 3141 "cPickle.c"
        var $81=HEAP[$80]; //@line 3141 "cPickle.c"
        var $82=($81)!=0; //@line 3141 "cPickle.c"
        if ($82) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3141 "cPickle.c"
      case 19: // $bb23
        var $83=$self_addr; //@line 3141 "cPickle.c"
        var $84=$83+32; //@line 3141 "cPickle.c"
        var $85=HEAP[$84]; //@line 3141 "cPickle.c"
        var $86=$visit_addr; //@line 3141 "cPickle.c"
        var $87=$arg_addr; //@line 3141 "cPickle.c"
        var $88=FUNCTION_TABLE[$86]($85, $87); //@line 3141 "cPickle.c"
        $vret24=$88; //@line 3141 "cPickle.c"
        var $89=$vret24; //@line 3141 "cPickle.c"
        var $90=($89)!=0; //@line 3141 "cPickle.c"
        if ($90) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3141 "cPickle.c"
      case 20: // $bb25
        var $91=$vret24; //@line 3141 "cPickle.c"
        $0=$91; //@line 3141 "cPickle.c"
        __label__ = 25; break; //@line 3141 "cPickle.c"
      case 21: // $bb26
        var $92=$self_addr; //@line 3142 "cPickle.c"
        var $93=$92+60; //@line 3142 "cPickle.c"
        var $94=HEAP[$93]; //@line 3142 "cPickle.c"
        var $95=($94)!=0; //@line 3142 "cPickle.c"
        if ($95) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 3142 "cPickle.c"
      case 22: // $bb27
        var $96=$self_addr; //@line 3142 "cPickle.c"
        var $97=$96+60; //@line 3142 "cPickle.c"
        var $98=HEAP[$97]; //@line 3142 "cPickle.c"
        var $99=$visit_addr; //@line 3142 "cPickle.c"
        var $100=$arg_addr; //@line 3142 "cPickle.c"
        var $101=FUNCTION_TABLE[$99]($98, $100); //@line 3142 "cPickle.c"
        $vret28=$101; //@line 3142 "cPickle.c"
        var $102=$vret28; //@line 3142 "cPickle.c"
        var $103=($102)!=0; //@line 3142 "cPickle.c"
        if ($103) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3142 "cPickle.c"
      case 23: // $bb29
        var $104=$vret28; //@line 3142 "cPickle.c"
        $0=$104; //@line 3142 "cPickle.c"
        __label__ = 25; break; //@line 3142 "cPickle.c"
      case 24: // $bb30
        $0=0; //@line 3143 "cPickle.c"
        __label__ = 25; break; //@line 3143 "cPickle.c"
      case 25: // $bb31
        var $105=$0; //@line 3135 "cPickle.c"
        $retval=$105; //@line 3135 "cPickle.c"
        var $retval32=$retval; //@line 3135 "cPickle.c"
        ;
        return $retval32; //@line 3135 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_clear($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        var $_py_tmp4;
        var $_py_tmp8;
        var $_py_tmp12;
        var $_py_tmp16;
        var $_py_tmp20;
        var $_py_tmp24;
        var $_py_tmp28;
        $self_addr=$self;
        var $1=$self_addr; //@line 3149 "cPickle.c"
        var $2=$1+12; //@line 3149 "cPickle.c"
        var $3=HEAP[$2]; //@line 3149 "cPickle.c"
        var $4=($3)!=0; //@line 3149 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3149 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 3149 "cPickle.c"
        var $6=$5+12; //@line 3149 "cPickle.c"
        var $7=HEAP[$6]; //@line 3149 "cPickle.c"
        $_py_tmp=$7; //@line 3149 "cPickle.c"
        var $8=$self_addr; //@line 3149 "cPickle.c"
        var $9=$8+12; //@line 3149 "cPickle.c"
        HEAP[$9]=0; //@line 3149 "cPickle.c"
        var $10=$_py_tmp; //@line 3149 "cPickle.c"
        var $11=$10; //@line 3149 "cPickle.c"
        var $12=HEAP[$11]; //@line 3149 "cPickle.c"
        var $13=($12) - 1; //@line 3149 "cPickle.c"
        var $14=$_py_tmp; //@line 3149 "cPickle.c"
        var $15=$14; //@line 3149 "cPickle.c"
        HEAP[$15]=$13; //@line 3149 "cPickle.c"
        var $16=$_py_tmp; //@line 3149 "cPickle.c"
        var $17=$16; //@line 3149 "cPickle.c"
        var $18=HEAP[$17]; //@line 3149 "cPickle.c"
        var $19=($18)==0; //@line 3149 "cPickle.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3149 "cPickle.c"
      case 2: // $bb1
        var $20=$_py_tmp; //@line 3149 "cPickle.c"
        var $21=$20+4; //@line 3149 "cPickle.c"
        var $22=HEAP[$21]; //@line 3149 "cPickle.c"
        var $23=$22+24; //@line 3149 "cPickle.c"
        var $24=HEAP[$23]; //@line 3149 "cPickle.c"
        var $25=$_py_tmp; //@line 3149 "cPickle.c"
        FUNCTION_TABLE[$24]($25); //@line 3149 "cPickle.c"
        __label__ = 3; break; //@line 3149 "cPickle.c"
      case 3: // $bb2
        var $26=$self_addr; //@line 3150 "cPickle.c"
        var $27=$26+20; //@line 3150 "cPickle.c"
        var $28=HEAP[$27]; //@line 3150 "cPickle.c"
        var $29=($28)!=0; //@line 3150 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3150 "cPickle.c"
      case 4: // $bb3
        var $30=$self_addr; //@line 3150 "cPickle.c"
        var $31=$30+20; //@line 3150 "cPickle.c"
        var $32=HEAP[$31]; //@line 3150 "cPickle.c"
        $_py_tmp4=$32; //@line 3150 "cPickle.c"
        var $33=$self_addr; //@line 3150 "cPickle.c"
        var $34=$33+20; //@line 3150 "cPickle.c"
        HEAP[$34]=0; //@line 3150 "cPickle.c"
        var $35=$_py_tmp4; //@line 3150 "cPickle.c"
        var $36=$35; //@line 3150 "cPickle.c"
        var $37=HEAP[$36]; //@line 3150 "cPickle.c"
        var $38=($37) - 1; //@line 3150 "cPickle.c"
        var $39=$_py_tmp4; //@line 3150 "cPickle.c"
        var $40=$39; //@line 3150 "cPickle.c"
        HEAP[$40]=$38; //@line 3150 "cPickle.c"
        var $41=$_py_tmp4; //@line 3150 "cPickle.c"
        var $42=$41; //@line 3150 "cPickle.c"
        var $43=HEAP[$42]; //@line 3150 "cPickle.c"
        var $44=($43)==0; //@line 3150 "cPickle.c"
        if ($44) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3150 "cPickle.c"
      case 5: // $bb5
        var $45=$_py_tmp4; //@line 3150 "cPickle.c"
        var $46=$45+4; //@line 3150 "cPickle.c"
        var $47=HEAP[$46]; //@line 3150 "cPickle.c"
        var $48=$47+24; //@line 3150 "cPickle.c"
        var $49=HEAP[$48]; //@line 3150 "cPickle.c"
        var $50=$_py_tmp4; //@line 3150 "cPickle.c"
        FUNCTION_TABLE[$49]($50); //@line 3150 "cPickle.c"
        __label__ = 6; break; //@line 3150 "cPickle.c"
      case 6: // $bb6
        var $51=$self_addr; //@line 3151 "cPickle.c"
        var $52=$51+68; //@line 3151 "cPickle.c"
        var $53=HEAP[$52]; //@line 3151 "cPickle.c"
        var $54=($53)!=0; //@line 3151 "cPickle.c"
        if ($54) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 3151 "cPickle.c"
      case 7: // $bb7
        var $55=$self_addr; //@line 3151 "cPickle.c"
        var $56=$55+68; //@line 3151 "cPickle.c"
        var $57=HEAP[$56]; //@line 3151 "cPickle.c"
        $_py_tmp8=$57; //@line 3151 "cPickle.c"
        var $58=$self_addr; //@line 3151 "cPickle.c"
        var $59=$58+68; //@line 3151 "cPickle.c"
        HEAP[$59]=0; //@line 3151 "cPickle.c"
        var $60=$_py_tmp8; //@line 3151 "cPickle.c"
        var $61=$60; //@line 3151 "cPickle.c"
        var $62=HEAP[$61]; //@line 3151 "cPickle.c"
        var $63=($62) - 1; //@line 3151 "cPickle.c"
        var $64=$_py_tmp8; //@line 3151 "cPickle.c"
        var $65=$64; //@line 3151 "cPickle.c"
        HEAP[$65]=$63; //@line 3151 "cPickle.c"
        var $66=$_py_tmp8; //@line 3151 "cPickle.c"
        var $67=$66; //@line 3151 "cPickle.c"
        var $68=HEAP[$67]; //@line 3151 "cPickle.c"
        var $69=($68)==0; //@line 3151 "cPickle.c"
        if ($69) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3151 "cPickle.c"
      case 8: // $bb9
        var $70=$_py_tmp8; //@line 3151 "cPickle.c"
        var $71=$70+4; //@line 3151 "cPickle.c"
        var $72=HEAP[$71]; //@line 3151 "cPickle.c"
        var $73=$72+24; //@line 3151 "cPickle.c"
        var $74=HEAP[$73]; //@line 3151 "cPickle.c"
        var $75=$_py_tmp8; //@line 3151 "cPickle.c"
        FUNCTION_TABLE[$74]($75); //@line 3151 "cPickle.c"
        __label__ = 9; break; //@line 3151 "cPickle.c"
      case 9: // $bb10
        var $76=$self_addr; //@line 3152 "cPickle.c"
        var $77=$76+24; //@line 3152 "cPickle.c"
        var $78=HEAP[$77]; //@line 3152 "cPickle.c"
        var $79=($78)!=0; //@line 3152 "cPickle.c"
        if ($79) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3152 "cPickle.c"
      case 10: // $bb11
        var $80=$self_addr; //@line 3152 "cPickle.c"
        var $81=$80+24; //@line 3152 "cPickle.c"
        var $82=HEAP[$81]; //@line 3152 "cPickle.c"
        $_py_tmp12=$82; //@line 3152 "cPickle.c"
        var $83=$self_addr; //@line 3152 "cPickle.c"
        var $84=$83+24; //@line 3152 "cPickle.c"
        HEAP[$84]=0; //@line 3152 "cPickle.c"
        var $85=$_py_tmp12; //@line 3152 "cPickle.c"
        var $86=$85; //@line 3152 "cPickle.c"
        var $87=HEAP[$86]; //@line 3152 "cPickle.c"
        var $88=($87) - 1; //@line 3152 "cPickle.c"
        var $89=$_py_tmp12; //@line 3152 "cPickle.c"
        var $90=$89; //@line 3152 "cPickle.c"
        HEAP[$90]=$88; //@line 3152 "cPickle.c"
        var $91=$_py_tmp12; //@line 3152 "cPickle.c"
        var $92=$91; //@line 3152 "cPickle.c"
        var $93=HEAP[$92]; //@line 3152 "cPickle.c"
        var $94=($93)==0; //@line 3152 "cPickle.c"
        if ($94) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3152 "cPickle.c"
      case 11: // $bb13
        var $95=$_py_tmp12; //@line 3152 "cPickle.c"
        var $96=$95+4; //@line 3152 "cPickle.c"
        var $97=HEAP[$96]; //@line 3152 "cPickle.c"
        var $98=$97+24; //@line 3152 "cPickle.c"
        var $99=HEAP[$98]; //@line 3152 "cPickle.c"
        var $100=$_py_tmp12; //@line 3152 "cPickle.c"
        FUNCTION_TABLE[$99]($100); //@line 3152 "cPickle.c"
        __label__ = 12; break; //@line 3152 "cPickle.c"
      case 12: // $bb14
        var $101=$self_addr; //@line 3153 "cPickle.c"
        var $102=$101+16; //@line 3153 "cPickle.c"
        var $103=HEAP[$102]; //@line 3153 "cPickle.c"
        var $104=($103)!=0; //@line 3153 "cPickle.c"
        if ($104) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 3153 "cPickle.c"
      case 13: // $bb15
        var $105=$self_addr; //@line 3153 "cPickle.c"
        var $106=$105+16; //@line 3153 "cPickle.c"
        var $107=HEAP[$106]; //@line 3153 "cPickle.c"
        $_py_tmp16=$107; //@line 3153 "cPickle.c"
        var $108=$self_addr; //@line 3153 "cPickle.c"
        var $109=$108+16; //@line 3153 "cPickle.c"
        HEAP[$109]=0; //@line 3153 "cPickle.c"
        var $110=$_py_tmp16; //@line 3153 "cPickle.c"
        var $111=$110; //@line 3153 "cPickle.c"
        var $112=HEAP[$111]; //@line 3153 "cPickle.c"
        var $113=($112) - 1; //@line 3153 "cPickle.c"
        var $114=$_py_tmp16; //@line 3153 "cPickle.c"
        var $115=$114; //@line 3153 "cPickle.c"
        HEAP[$115]=$113; //@line 3153 "cPickle.c"
        var $116=$_py_tmp16; //@line 3153 "cPickle.c"
        var $117=$116; //@line 3153 "cPickle.c"
        var $118=HEAP[$117]; //@line 3153 "cPickle.c"
        var $119=($118)==0; //@line 3153 "cPickle.c"
        if ($119) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3153 "cPickle.c"
      case 14: // $bb17
        var $120=$_py_tmp16; //@line 3153 "cPickle.c"
        var $121=$120+4; //@line 3153 "cPickle.c"
        var $122=HEAP[$121]; //@line 3153 "cPickle.c"
        var $123=$122+24; //@line 3153 "cPickle.c"
        var $124=HEAP[$123]; //@line 3153 "cPickle.c"
        var $125=$_py_tmp16; //@line 3153 "cPickle.c"
        FUNCTION_TABLE[$124]($125); //@line 3153 "cPickle.c"
        __label__ = 15; break; //@line 3153 "cPickle.c"
      case 15: // $bb18
        var $126=$self_addr; //@line 3154 "cPickle.c"
        var $127=$126+28; //@line 3154 "cPickle.c"
        var $128=HEAP[$127]; //@line 3154 "cPickle.c"
        var $129=($128)!=0; //@line 3154 "cPickle.c"
        if ($129) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3154 "cPickle.c"
      case 16: // $bb19
        var $130=$self_addr; //@line 3154 "cPickle.c"
        var $131=$130+28; //@line 3154 "cPickle.c"
        var $132=HEAP[$131]; //@line 3154 "cPickle.c"
        $_py_tmp20=$132; //@line 3154 "cPickle.c"
        var $133=$self_addr; //@line 3154 "cPickle.c"
        var $134=$133+28; //@line 3154 "cPickle.c"
        HEAP[$134]=0; //@line 3154 "cPickle.c"
        var $135=$_py_tmp20; //@line 3154 "cPickle.c"
        var $136=$135; //@line 3154 "cPickle.c"
        var $137=HEAP[$136]; //@line 3154 "cPickle.c"
        var $138=($137) - 1; //@line 3154 "cPickle.c"
        var $139=$_py_tmp20; //@line 3154 "cPickle.c"
        var $140=$139; //@line 3154 "cPickle.c"
        HEAP[$140]=$138; //@line 3154 "cPickle.c"
        var $141=$_py_tmp20; //@line 3154 "cPickle.c"
        var $142=$141; //@line 3154 "cPickle.c"
        var $143=HEAP[$142]; //@line 3154 "cPickle.c"
        var $144=($143)==0; //@line 3154 "cPickle.c"
        if ($144) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3154 "cPickle.c"
      case 17: // $bb21
        var $145=$_py_tmp20; //@line 3154 "cPickle.c"
        var $146=$145+4; //@line 3154 "cPickle.c"
        var $147=HEAP[$146]; //@line 3154 "cPickle.c"
        var $148=$147+24; //@line 3154 "cPickle.c"
        var $149=HEAP[$148]; //@line 3154 "cPickle.c"
        var $150=$_py_tmp20; //@line 3154 "cPickle.c"
        FUNCTION_TABLE[$149]($150); //@line 3154 "cPickle.c"
        __label__ = 18; break; //@line 3154 "cPickle.c"
      case 18: // $bb22
        var $151=$self_addr; //@line 3155 "cPickle.c"
        var $152=$151+32; //@line 3155 "cPickle.c"
        var $153=HEAP[$152]; //@line 3155 "cPickle.c"
        var $154=($153)!=0; //@line 3155 "cPickle.c"
        if ($154) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3155 "cPickle.c"
      case 19: // $bb23
        var $155=$self_addr; //@line 3155 "cPickle.c"
        var $156=$155+32; //@line 3155 "cPickle.c"
        var $157=HEAP[$156]; //@line 3155 "cPickle.c"
        $_py_tmp24=$157; //@line 3155 "cPickle.c"
        var $158=$self_addr; //@line 3155 "cPickle.c"
        var $159=$158+32; //@line 3155 "cPickle.c"
        HEAP[$159]=0; //@line 3155 "cPickle.c"
        var $160=$_py_tmp24; //@line 3155 "cPickle.c"
        var $161=$160; //@line 3155 "cPickle.c"
        var $162=HEAP[$161]; //@line 3155 "cPickle.c"
        var $163=($162) - 1; //@line 3155 "cPickle.c"
        var $164=$_py_tmp24; //@line 3155 "cPickle.c"
        var $165=$164; //@line 3155 "cPickle.c"
        HEAP[$165]=$163; //@line 3155 "cPickle.c"
        var $166=$_py_tmp24; //@line 3155 "cPickle.c"
        var $167=$166; //@line 3155 "cPickle.c"
        var $168=HEAP[$167]; //@line 3155 "cPickle.c"
        var $169=($168)==0; //@line 3155 "cPickle.c"
        if ($169) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3155 "cPickle.c"
      case 20: // $bb25
        var $170=$_py_tmp24; //@line 3155 "cPickle.c"
        var $171=$170+4; //@line 3155 "cPickle.c"
        var $172=HEAP[$171]; //@line 3155 "cPickle.c"
        var $173=$172+24; //@line 3155 "cPickle.c"
        var $174=HEAP[$173]; //@line 3155 "cPickle.c"
        var $175=$_py_tmp24; //@line 3155 "cPickle.c"
        FUNCTION_TABLE[$174]($175); //@line 3155 "cPickle.c"
        __label__ = 21; break; //@line 3155 "cPickle.c"
      case 21: // $bb26
        var $176=$self_addr; //@line 3156 "cPickle.c"
        var $177=$176+60; //@line 3156 "cPickle.c"
        var $178=HEAP[$177]; //@line 3156 "cPickle.c"
        var $179=($178)!=0; //@line 3156 "cPickle.c"
        if ($179) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 3156 "cPickle.c"
      case 22: // $bb27
        var $180=$self_addr; //@line 3156 "cPickle.c"
        var $181=$180+60; //@line 3156 "cPickle.c"
        var $182=HEAP[$181]; //@line 3156 "cPickle.c"
        $_py_tmp28=$182; //@line 3156 "cPickle.c"
        var $183=$self_addr; //@line 3156 "cPickle.c"
        var $184=$183+60; //@line 3156 "cPickle.c"
        HEAP[$184]=0; //@line 3156 "cPickle.c"
        var $185=$_py_tmp28; //@line 3156 "cPickle.c"
        var $186=$185; //@line 3156 "cPickle.c"
        var $187=HEAP[$186]; //@line 3156 "cPickle.c"
        var $188=($187) - 1; //@line 3156 "cPickle.c"
        var $189=$_py_tmp28; //@line 3156 "cPickle.c"
        var $190=$189; //@line 3156 "cPickle.c"
        HEAP[$190]=$188; //@line 3156 "cPickle.c"
        var $191=$_py_tmp28; //@line 3156 "cPickle.c"
        var $192=$191; //@line 3156 "cPickle.c"
        var $193=HEAP[$192]; //@line 3156 "cPickle.c"
        var $194=($193)==0; //@line 3156 "cPickle.c"
        if ($194) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3156 "cPickle.c"
      case 23: // $bb29
        var $195=$_py_tmp28; //@line 3156 "cPickle.c"
        var $196=$195+4; //@line 3156 "cPickle.c"
        var $197=HEAP[$196]; //@line 3156 "cPickle.c"
        var $198=$197+24; //@line 3156 "cPickle.c"
        var $199=HEAP[$198]; //@line 3156 "cPickle.c"
        var $200=$_py_tmp28; //@line 3156 "cPickle.c"
        FUNCTION_TABLE[$199]($200); //@line 3156 "cPickle.c"
        __label__ = 24; break; //@line 3156 "cPickle.c"
      case 24: // $bb30
        $0=0; //@line 3157 "cPickle.c"
        var $201=$0; //@line 3157 "cPickle.c"
        $retval=$201; //@line 3157 "cPickle.c"
        var $retval31=$retval; //@line 3157 "cPickle.c"
        ;
        return $retval31; //@line 3157 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_get_pers_func($p) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $retval;
        var $0;
        $p_addr=$p;
        var $1=$p_addr; //@line 3163 "cPickle.c"
        var $2=$1+28; //@line 3163 "cPickle.c"
        var $3=HEAP[$2]; //@line 3163 "cPickle.c"
        var $4=($3)==0; //@line 3163 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3163 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_AttributeError]; //@line 3164 "cPickle.c"
        _PyErr_SetString($5, __str68); //@line 3164 "cPickle.c"
        __label__ = 3; break; //@line 3164 "cPickle.c"
      case 2: // $bb1
        var $6=$p_addr; //@line 3166 "cPickle.c"
        var $7=$6+28; //@line 3166 "cPickle.c"
        var $8=HEAP[$7]; //@line 3166 "cPickle.c"
        var $9=$8; //@line 3166 "cPickle.c"
        var $10=HEAP[$9]; //@line 3166 "cPickle.c"
        var $11=($10) + 1; //@line 3166 "cPickle.c"
        var $12=$8; //@line 3166 "cPickle.c"
        HEAP[$12]=$11; //@line 3166 "cPickle.c"
        __label__ = 3; break; //@line 3166 "cPickle.c"
      case 3: // $bb2
        var $13=$p_addr; //@line 3167 "cPickle.c"
        var $14=$13+28; //@line 3167 "cPickle.c"
        var $15=HEAP[$14]; //@line 3167 "cPickle.c"
        $0=$15; //@line 3167 "cPickle.c"
        var $16=$0; //@line 3167 "cPickle.c"
        $retval=$16; //@line 3167 "cPickle.c"
        var $retval3=$retval; //@line 3167 "cPickle.c"
        ;
        return $retval3; //@line 3167 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_set_pers_func($p, $v) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $v_addr;
        var $retval;
        var $0;
        $p_addr=$p;
        $v_addr=$v;
        var $1=$v_addr; //@line 3173 "cPickle.c"
        var $2=($1)==0; //@line 3173 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3173 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_TypeError]; //@line 3174 "cPickle.c"
        _PyErr_SetString($3, __str69); //@line 3174 "cPickle.c"
        $0=-1; //@line 3176 "cPickle.c"
        __label__ = 6; break; //@line 3176 "cPickle.c"
      case 2: // $bb1
        var $4=$p_addr; //@line 3178 "cPickle.c"
        var $5=$4+28; //@line 3178 "cPickle.c"
        var $6=HEAP[$5]; //@line 3178 "cPickle.c"
        var $7=($6)!=0; //@line 3178 "cPickle.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3178 "cPickle.c"
      case 3: // $bb2
        var $8=$p_addr; //@line 3178 "cPickle.c"
        var $9=$8+28; //@line 3178 "cPickle.c"
        var $10=HEAP[$9]; //@line 3178 "cPickle.c"
        var $11=$10; //@line 3178 "cPickle.c"
        var $12=HEAP[$11]; //@line 3178 "cPickle.c"
        var $13=($12) - 1; //@line 3178 "cPickle.c"
        var $14=$10; //@line 3178 "cPickle.c"
        HEAP[$14]=$13; //@line 3178 "cPickle.c"
        var $15=$10; //@line 3178 "cPickle.c"
        var $16=HEAP[$15]; //@line 3178 "cPickle.c"
        var $17=($16)==0; //@line 3178 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3178 "cPickle.c"
      case 4: // $bb3
        var $18=$p_addr; //@line 3178 "cPickle.c"
        var $19=$18+28; //@line 3178 "cPickle.c"
        var $20=HEAP[$19]; //@line 3178 "cPickle.c"
        var $21=$20+4; //@line 3178 "cPickle.c"
        var $22=HEAP[$21]; //@line 3178 "cPickle.c"
        var $23=$22+24; //@line 3178 "cPickle.c"
        var $24=HEAP[$23]; //@line 3178 "cPickle.c"
        var $25=$p_addr; //@line 3178 "cPickle.c"
        var $26=$25+28; //@line 3178 "cPickle.c"
        var $27=HEAP[$26]; //@line 3178 "cPickle.c"
        FUNCTION_TABLE[$24]($27); //@line 3178 "cPickle.c"
        __label__ = 5; break; //@line 3178 "cPickle.c"
      case 5: // $bb4
        var $28=$v_addr; //@line 3179 "cPickle.c"
        var $29=$28; //@line 3179 "cPickle.c"
        var $30=HEAP[$29]; //@line 3179 "cPickle.c"
        var $31=($30) + 1; //@line 3179 "cPickle.c"
        var $32=$v_addr; //@line 3179 "cPickle.c"
        var $33=$32; //@line 3179 "cPickle.c"
        HEAP[$33]=$31; //@line 3179 "cPickle.c"
        var $34=$p_addr; //@line 3180 "cPickle.c"
        var $35=$34+28; //@line 3180 "cPickle.c"
        var $36=$v_addr; //@line 3180 "cPickle.c"
        HEAP[$35]=$36; //@line 3180 "cPickle.c"
        $0=0; //@line 3181 "cPickle.c"
        __label__ = 6; break; //@line 3181 "cPickle.c"
      case 6: // $bb5
        var $37=$0; //@line 3176 "cPickle.c"
        $retval=$37; //@line 3176 "cPickle.c"
        var $retval6=$retval; //@line 3176 "cPickle.c"
        ;
        return $retval6; //@line 3176 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_set_inst_pers_func($p, $v) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $v_addr;
        var $retval;
        var $0;
        $p_addr=$p;
        $v_addr=$v;
        var $1=$v_addr; //@line 3187 "cPickle.c"
        var $2=($1)==0; //@line 3187 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3187 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_TypeError]; //@line 3188 "cPickle.c"
        _PyErr_SetString($3, __str69); //@line 3188 "cPickle.c"
        $0=-1; //@line 3190 "cPickle.c"
        __label__ = 6; break; //@line 3190 "cPickle.c"
      case 2: // $bb1
        var $4=$p_addr; //@line 3192 "cPickle.c"
        var $5=$4+32; //@line 3192 "cPickle.c"
        var $6=HEAP[$5]; //@line 3192 "cPickle.c"
        var $7=($6)!=0; //@line 3192 "cPickle.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3192 "cPickle.c"
      case 3: // $bb2
        var $8=$p_addr; //@line 3192 "cPickle.c"
        var $9=$8+32; //@line 3192 "cPickle.c"
        var $10=HEAP[$9]; //@line 3192 "cPickle.c"
        var $11=$10; //@line 3192 "cPickle.c"
        var $12=HEAP[$11]; //@line 3192 "cPickle.c"
        var $13=($12) - 1; //@line 3192 "cPickle.c"
        var $14=$10; //@line 3192 "cPickle.c"
        HEAP[$14]=$13; //@line 3192 "cPickle.c"
        var $15=$10; //@line 3192 "cPickle.c"
        var $16=HEAP[$15]; //@line 3192 "cPickle.c"
        var $17=($16)==0; //@line 3192 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3192 "cPickle.c"
      case 4: // $bb3
        var $18=$p_addr; //@line 3192 "cPickle.c"
        var $19=$18+32; //@line 3192 "cPickle.c"
        var $20=HEAP[$19]; //@line 3192 "cPickle.c"
        var $21=$20+4; //@line 3192 "cPickle.c"
        var $22=HEAP[$21]; //@line 3192 "cPickle.c"
        var $23=$22+24; //@line 3192 "cPickle.c"
        var $24=HEAP[$23]; //@line 3192 "cPickle.c"
        var $25=$p_addr; //@line 3192 "cPickle.c"
        var $26=$25+32; //@line 3192 "cPickle.c"
        var $27=HEAP[$26]; //@line 3192 "cPickle.c"
        FUNCTION_TABLE[$24]($27); //@line 3192 "cPickle.c"
        __label__ = 5; break; //@line 3192 "cPickle.c"
      case 5: // $bb4
        var $28=$v_addr; //@line 3193 "cPickle.c"
        var $29=$28; //@line 3193 "cPickle.c"
        var $30=HEAP[$29]; //@line 3193 "cPickle.c"
        var $31=($30) + 1; //@line 3193 "cPickle.c"
        var $32=$v_addr; //@line 3193 "cPickle.c"
        var $33=$32; //@line 3193 "cPickle.c"
        HEAP[$33]=$31; //@line 3193 "cPickle.c"
        var $34=$p_addr; //@line 3194 "cPickle.c"
        var $35=$34+32; //@line 3194 "cPickle.c"
        var $36=$v_addr; //@line 3194 "cPickle.c"
        HEAP[$35]=$36; //@line 3194 "cPickle.c"
        $0=0; //@line 3195 "cPickle.c"
        __label__ = 6; break; //@line 3195 "cPickle.c"
      case 6: // $bb5
        var $37=$0; //@line 3190 "cPickle.c"
        $retval=$37; //@line 3190 "cPickle.c"
        var $retval6=$retval; //@line 3190 "cPickle.c"
        ;
        return $retval6; //@line 3190 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_get_memo($p) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $retval;
        var $0;
        $p_addr=$p;
        var $1=$p_addr; //@line 3201 "cPickle.c"
        var $2=$1+20; //@line 3201 "cPickle.c"
        var $3=HEAP[$2]; //@line 3201 "cPickle.c"
        var $4=($3)==0; //@line 3201 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3201 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_AttributeError]; //@line 3202 "cPickle.c"
        _PyErr_SetString($5, __str70); //@line 3202 "cPickle.c"
        __label__ = 3; break; //@line 3202 "cPickle.c"
      case 2: // $bb1
        var $6=$p_addr; //@line 3204 "cPickle.c"
        var $7=$6+20; //@line 3204 "cPickle.c"
        var $8=HEAP[$7]; //@line 3204 "cPickle.c"
        var $9=$8; //@line 3204 "cPickle.c"
        var $10=HEAP[$9]; //@line 3204 "cPickle.c"
        var $11=($10) + 1; //@line 3204 "cPickle.c"
        var $12=$8; //@line 3204 "cPickle.c"
        HEAP[$12]=$11; //@line 3204 "cPickle.c"
        __label__ = 3; break; //@line 3204 "cPickle.c"
      case 3: // $bb2
        var $13=$p_addr; //@line 3205 "cPickle.c"
        var $14=$13+20; //@line 3205 "cPickle.c"
        var $15=HEAP[$14]; //@line 3205 "cPickle.c"
        $0=$15; //@line 3205 "cPickle.c"
        var $16=$0; //@line 3205 "cPickle.c"
        $retval=$16; //@line 3205 "cPickle.c"
        var $retval3=$retval; //@line 3205 "cPickle.c"
        ;
        return $retval3; //@line 3205 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_set_memo($p, $v) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $v_addr;
        var $retval;
        var $0;
        $p_addr=$p;
        $v_addr=$v;
        var $1=$v_addr; //@line 3211 "cPickle.c"
        var $2=($1)==0; //@line 3211 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3211 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_TypeError]; //@line 3212 "cPickle.c"
        _PyErr_SetString($3, __str69); //@line 3212 "cPickle.c"
        $0=-1; //@line 3214 "cPickle.c"
        __label__ = 8; break; //@line 3214 "cPickle.c"
      case 2: // $bb1
        var $4=$v_addr; //@line 3216 "cPickle.c"
        var $5=$4+4; //@line 3216 "cPickle.c"
        var $6=HEAP[$5]; //@line 3216 "cPickle.c"
        var $7=$6+84; //@line 3216 "cPickle.c"
        var $8=HEAP[$7]; //@line 3216 "cPickle.c"
        var $9=($8) & 536870912; //@line 3216 "cPickle.c"
        var $10=($9)==0; //@line 3216 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3216 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[_PyExc_TypeError]; //@line 3217 "cPickle.c"
        _PyErr_SetString($11, __str71); //@line 3217 "cPickle.c"
        $0=-1; //@line 3218 "cPickle.c"
        __label__ = 8; break; //@line 3218 "cPickle.c"
      case 4: // $bb3
        var $12=$p_addr; //@line 3220 "cPickle.c"
        var $13=$12+20; //@line 3220 "cPickle.c"
        var $14=HEAP[$13]; //@line 3220 "cPickle.c"
        var $15=($14)!=0; //@line 3220 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 3220 "cPickle.c"
      case 5: // $bb4
        var $16=$p_addr; //@line 3220 "cPickle.c"
        var $17=$16+20; //@line 3220 "cPickle.c"
        var $18=HEAP[$17]; //@line 3220 "cPickle.c"
        var $19=$18; //@line 3220 "cPickle.c"
        var $20=HEAP[$19]; //@line 3220 "cPickle.c"
        var $21=($20) - 1; //@line 3220 "cPickle.c"
        var $22=$18; //@line 3220 "cPickle.c"
        HEAP[$22]=$21; //@line 3220 "cPickle.c"
        var $23=$18; //@line 3220 "cPickle.c"
        var $24=HEAP[$23]; //@line 3220 "cPickle.c"
        var $25=($24)==0; //@line 3220 "cPickle.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3220 "cPickle.c"
      case 6: // $bb5
        var $26=$p_addr; //@line 3220 "cPickle.c"
        var $27=$26+20; //@line 3220 "cPickle.c"
        var $28=HEAP[$27]; //@line 3220 "cPickle.c"
        var $29=$28+4; //@line 3220 "cPickle.c"
        var $30=HEAP[$29]; //@line 3220 "cPickle.c"
        var $31=$30+24; //@line 3220 "cPickle.c"
        var $32=HEAP[$31]; //@line 3220 "cPickle.c"
        var $33=$p_addr; //@line 3220 "cPickle.c"
        var $34=$33+20; //@line 3220 "cPickle.c"
        var $35=HEAP[$34]; //@line 3220 "cPickle.c"
        FUNCTION_TABLE[$32]($35); //@line 3220 "cPickle.c"
        __label__ = 7; break; //@line 3220 "cPickle.c"
      case 7: // $bb6
        var $36=$v_addr; //@line 3221 "cPickle.c"
        var $37=$36; //@line 3221 "cPickle.c"
        var $38=HEAP[$37]; //@line 3221 "cPickle.c"
        var $39=($38) + 1; //@line 3221 "cPickle.c"
        var $40=$v_addr; //@line 3221 "cPickle.c"
        var $41=$40; //@line 3221 "cPickle.c"
        HEAP[$41]=$39; //@line 3221 "cPickle.c"
        var $42=$p_addr; //@line 3222 "cPickle.c"
        var $43=$42+20; //@line 3222 "cPickle.c"
        var $44=$v_addr; //@line 3222 "cPickle.c"
        HEAP[$43]=$44; //@line 3222 "cPickle.c"
        $0=0; //@line 3223 "cPickle.c"
        __label__ = 8; break; //@line 3223 "cPickle.c"
      case 8: // $bb7
        var $45=$0; //@line 3214 "cPickle.c"
        $retval=$45; //@line 3214 "cPickle.c"
        var $retval8=$retval; //@line 3214 "cPickle.c"
        ;
        return $retval8; //@line 3214 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_get_error($p) {
    ;
    var __label__;
  
    var $p_addr;
    var $retval;
    var $0;
    $p_addr=$p;
    var $1=HEAP[_PicklingError]; //@line 3230 "cPickle.c"
    var $2=$1; //@line 3230 "cPickle.c"
    var $3=HEAP[$2]; //@line 3230 "cPickle.c"
    var $4=($3) + 1; //@line 3230 "cPickle.c"
    var $5=$1; //@line 3230 "cPickle.c"
    HEAP[$5]=$4; //@line 3230 "cPickle.c"
    var $6=HEAP[_PicklingError]; //@line 3231 "cPickle.c"
    $0=$6; //@line 3231 "cPickle.c"
    var $7=$0; //@line 3231 "cPickle.c"
    $retval=$7; //@line 3231 "cPickle.c"
    var $retval1=$retval; //@line 3231 "cPickle.c"
    ;
    return $retval1; //@line 3231 "cPickle.c"
  }
  

  function _find_class($py_module_name, $py_global_name, $fc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $py_module_name_addr;
        var $py_global_name_addr;
        var $fc_addr;
        var $retval;
        var $0;
        var $global;
        var $module;
        $py_module_name_addr=$py_module_name;
        $py_global_name_addr=$py_global_name;
        $fc_addr=$fc;
        $global=0; //@line 3288 "cPickle.c"
        var $1=$fc_addr; //@line 3290 "cPickle.c"
        var $2=($1)!=0; //@line 3290 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 3290 "cPickle.c"
      case 1: // $bb
        var $3=$fc_addr; //@line 3291 "cPickle.c"
        var $4=($3)==(__Py_NoneStruct); //@line 3291 "cPickle.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3291 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[_UnpicklingError]; //@line 3292 "cPickle.c"
        _PyErr_SetString($5, __str77); //@line 3292 "cPickle.c"
        $0=0; //@line 3294 "cPickle.c"
        __label__ = 13; break; //@line 3294 "cPickle.c"
      case 3: // $bb2
        var $6=$fc_addr; //@line 3296 "cPickle.c"
        var $7=$py_module_name_addr; //@line 3296 "cPickle.c"
        var $8=$py_global_name_addr; //@line 3296 "cPickle.c"
        var $9=_PyObject_CallFunctionObjArgs($6, allocate([$7,0,0,0,$8,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 3296 "cPickle.c"
        $0=$9; //@line 3296 "cPickle.c"
        __label__ = 13; break; //@line 3296 "cPickle.c"
      case 4: // $bb3
        var $10=_PySys_GetObject(__str7); //@line 3300 "cPickle.c"
        $module=$10; //@line 3300 "cPickle.c"
        var $11=$module; //@line 3301 "cPickle.c"
        var $12=($11)==0; //@line 3301 "cPickle.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3301 "cPickle.c"
      case 5: // $bb4
        $0=0; //@line 3302 "cPickle.c"
        __label__ = 13; break; //@line 3302 "cPickle.c"
      case 6: // $bb5
        var $13=$module; //@line 3304 "cPickle.c"
        var $14=$py_module_name_addr; //@line 3304 "cPickle.c"
        var $15=_PyDict_GetItem($13, $14); //@line 3304 "cPickle.c"
        $module=$15; //@line 3304 "cPickle.c"
        var $16=$module; //@line 3305 "cPickle.c"
        var $17=($16)==0; //@line 3305 "cPickle.c"
        if ($17) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 3305 "cPickle.c"
      case 7: // $bb6
        var $18=$py_module_name_addr; //@line 3306 "cPickle.c"
        var $19=_PyImport_Import($18); //@line 3306 "cPickle.c"
        $module=$19; //@line 3306 "cPickle.c"
        var $20=$module; //@line 3307 "cPickle.c"
        var $21=($20)==0; //@line 3307 "cPickle.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3307 "cPickle.c"
      case 8: // $bb7
        $0=0; //@line 3308 "cPickle.c"
        __label__ = 13; break; //@line 3308 "cPickle.c"
      case 9: // $bb8
        var $22=$module; //@line 3309 "cPickle.c"
        var $23=$py_global_name_addr; //@line 3309 "cPickle.c"
        var $24=_PyObject_GetAttr($22, $23); //@line 3309 "cPickle.c"
        $global=$24; //@line 3309 "cPickle.c"
        var $25=$module; //@line 3310 "cPickle.c"
        var $26=$25; //@line 3310 "cPickle.c"
        var $27=HEAP[$26]; //@line 3310 "cPickle.c"
        var $28=($27) - 1; //@line 3310 "cPickle.c"
        var $29=$module; //@line 3310 "cPickle.c"
        var $30=$29; //@line 3310 "cPickle.c"
        HEAP[$30]=$28; //@line 3310 "cPickle.c"
        var $31=$module; //@line 3310 "cPickle.c"
        var $32=$31; //@line 3310 "cPickle.c"
        var $33=HEAP[$32]; //@line 3310 "cPickle.c"
        var $34=($33)==0; //@line 3310 "cPickle.c"
        if ($34) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3310 "cPickle.c"
      case 10: // $bb9
        var $35=$module; //@line 3310 "cPickle.c"
        var $36=$35+4; //@line 3310 "cPickle.c"
        var $37=HEAP[$36]; //@line 3310 "cPickle.c"
        var $38=$37+24; //@line 3310 "cPickle.c"
        var $39=HEAP[$38]; //@line 3310 "cPickle.c"
        var $40=$module; //@line 3310 "cPickle.c"
        FUNCTION_TABLE[$39]($40); //@line 3310 "cPickle.c"
        __label__ = 12; break; //@line 3310 "cPickle.c"
      case 11: // $bb11
        var $41=$module; //@line 3313 "cPickle.c"
        var $42=$py_global_name_addr; //@line 3313 "cPickle.c"
        var $43=_PyObject_GetAttr($41, $42); //@line 3313 "cPickle.c"
        $global=$43; //@line 3313 "cPickle.c"
        __label__ = 12; break; //@line 3313 "cPickle.c"
      case 12: // $bb12
        var $44=$global; //@line 3314 "cPickle.c"
        $0=$44; //@line 3314 "cPickle.c"
        __label__ = 13; break; //@line 3314 "cPickle.c"
      case 13: // $bb13
        var $45=$0; //@line 3294 "cPickle.c"
        $retval=$45; //@line 3294 "cPickle.c"
        var $retval14=$retval; //@line 3294 "cPickle.c"
        ;
        return $retval14; //@line 3294 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _marker($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 3320 "cPickle.c"
        var $2=$1+52; //@line 3320 "cPickle.c"
        var $3=HEAP[$2]; //@line 3320 "cPickle.c"
        var $4=($3) <= 0; //@line 3320 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3320 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($5, __str78); //@line 3321 "cPickle.c"
        $0=-1; //@line 3322 "cPickle.c"
        __label__ = 3; break; //@line 3322 "cPickle.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 3325 "cPickle.c"
        var $7=$6+48; //@line 3325 "cPickle.c"
        var $8=HEAP[$7]; //@line 3325 "cPickle.c"
        var $9=$self_addr; //@line 3325 "cPickle.c"
        var $10=$9+52; //@line 3325 "cPickle.c"
        var $11=HEAP[$10]; //@line 3325 "cPickle.c"
        var $12=($11) - 1; //@line 3325 "cPickle.c"
        var $13=$self_addr; //@line 3325 "cPickle.c"
        var $14=$13+52; //@line 3325 "cPickle.c"
        HEAP[$14]=$12; //@line 3325 "cPickle.c"
        var $15=$self_addr; //@line 3325 "cPickle.c"
        var $16=$15+52; //@line 3325 "cPickle.c"
        var $17=HEAP[$16]; //@line 3325 "cPickle.c"
        var $18=$8+4*$17; //@line 3325 "cPickle.c"
        var $19=HEAP[$18]; //@line 3325 "cPickle.c"
        $0=$19; //@line 3325 "cPickle.c"
        __label__ = 3; break; //@line 3325 "cPickle.c"
      case 3: // $bb2
        var $20=$0; //@line 3322 "cPickle.c"
        $retval=$20; //@line 3322 "cPickle.c"
        var $retval3=$retval; //@line 3322 "cPickle.c"
        ;
        return $retval3; //@line 3322 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_none($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 3332 "cPickle.c"
        var $2=$1+32; //@line 3332 "cPickle.c"
        var $3=HEAP[$2]; //@line 3332 "cPickle.c"
        var $4=$3+8; //@line 3332 "cPickle.c"
        var $5=HEAP[$4]; //@line 3332 "cPickle.c"
        var $6=$self_addr; //@line 3332 "cPickle.c"
        var $7=$6+32; //@line 3332 "cPickle.c"
        var $8=HEAP[$7]; //@line 3332 "cPickle.c"
        var $9=$8+12; //@line 3332 "cPickle.c"
        var $10=HEAP[$9]; //@line 3332 "cPickle.c"
        var $11=($5)==($10); //@line 3332 "cPickle.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3332 "cPickle.c"
      case 1: // $bb
        var $12=$self_addr; //@line 3332 "cPickle.c"
        var $13=$12+32; //@line 3332 "cPickle.c"
        var $14=HEAP[$13]; //@line 3332 "cPickle.c"
        var $15=_Pdata_grow($14); //@line 3332 "cPickle.c"
        var $16=($15) < 0; //@line 3332 "cPickle.c"
        if ($16) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3332 "cPickle.c"
      case 2: // $bb1
        $0=-1; //@line 3332 "cPickle.c"
        __label__ = 4; break; //@line 3332 "cPickle.c"
      case 3: // $bb2
        var $17=HEAP[__Py_NoneStruct]; //@line 3332 "cPickle.c"
        var $18=($17) + 1; //@line 3332 "cPickle.c"
        HEAP[__Py_NoneStruct]=$18; //@line 3332 "cPickle.c"
        var $19=$self_addr; //@line 3332 "cPickle.c"
        var $20=$19+32; //@line 3332 "cPickle.c"
        var $21=HEAP[$20]; //@line 3332 "cPickle.c"
        var $22=$21+16; //@line 3332 "cPickle.c"
        var $23=HEAP[$22]; //@line 3332 "cPickle.c"
        var $24=$self_addr; //@line 3332 "cPickle.c"
        var $25=$24+32; //@line 3332 "cPickle.c"
        var $26=HEAP[$25]; //@line 3332 "cPickle.c"
        var $27=$26+8; //@line 3332 "cPickle.c"
        var $28=HEAP[$27]; //@line 3332 "cPickle.c"
        var $29=$23+4*$28; //@line 3332 "cPickle.c"
        HEAP[$29]=__Py_NoneStruct; //@line 3332 "cPickle.c"
        var $30=($28) + 1; //@line 3332 "cPickle.c"
        var $31=$26+8; //@line 3332 "cPickle.c"
        HEAP[$31]=$30; //@line 3332 "cPickle.c"
        $0=0; //@line 3333 "cPickle.c"
        __label__ = 4; break; //@line 3333 "cPickle.c"
      case 4: // $bb3
        var $32=$0; //@line 3332 "cPickle.c"
        $retval=$32; //@line 3332 "cPickle.c"
        var $retval4=$retval; //@line 3332 "cPickle.c"
        ;
        return $retval4; //@line 3332 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bad_readline() {
    ;
    var __label__;
  
    var $retval;
    var $0;
    var $1=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
    _PyErr_SetString($1, __str79); //@line 3339 "cPickle.c"
    $0=-1; //@line 3340 "cPickle.c"
    var $2=$0; //@line 3340 "cPickle.c"
    $retval=$2; //@line 3340 "cPickle.c"
    var $retval1=$retval; //@line 3340 "cPickle.c"
    ;
    return $retval1; //@line 3340 "cPickle.c"
  }
  

  function _load_int($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_int;
        var $endptr=__stackBase__;
        var $s=__stackBase__+4;
        var $len;
        var $res;
        var $l;
        $self_addr=$self;
        $py_int=0; //@line 3346 "cPickle.c"
        $res=-1; //@line 3348 "cPickle.c"
        var $1=$self_addr; //@line 3351 "cPickle.c"
        var $2=$1+64; //@line 3351 "cPickle.c"
        var $3=HEAP[$2]; //@line 3351 "cPickle.c"
        var $4=$self_addr; //@line 3351 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 3351 "cPickle.c"
        $len=$5; //@line 3351 "cPickle.c"
        var $6=$len; //@line 3351 "cPickle.c"
        var $7=($6) < 0; //@line 3351 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3351 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3351 "cPickle.c"
        __label__ = 22; break; //@line 3351 "cPickle.c"
      case 2: // $bb1
        var $8=$len; //@line 3352 "cPickle.c"
        var $9=($8) <= 1; //@line 3352 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3352 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 3352 "cPickle.c"
        $0=$10; //@line 3352 "cPickle.c"
        __label__ = 22; break; //@line 3352 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$s]; //@line 3353 "cPickle.c"
        var $12=$len; //@line 3353 "cPickle.c"
        var $13=_pystrndup($11, $12); //@line 3353 "cPickle.c"
        HEAP[$s]=$13; //@line 3353 "cPickle.c"
        var $14=HEAP[$s]; //@line 3353 "cPickle.c"
        var $15=($14)==0; //@line 3353 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3353 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 3353 "cPickle.c"
        __label__ = 22; break; //@line 3353 "cPickle.c"
      case 6: // $bb5
        var $16=___errno_location(); //@line 3355 "cPickle.c"
        HEAP[$16]=0; //@line 3355 "cPickle.c"
        var $17=HEAP[$s]; //@line 3356 "cPickle.c"
        var $18=_strtol($17, $endptr, 0); //@line 3356 "cPickle.c"
        $l=$18; //@line 3356 "cPickle.c"
        var $19=___errno_location(); //@line 3358 "cPickle.c"
        var $20=HEAP[$19]; //@line 3358 "cPickle.c"
        var $21=($20)!=0; //@line 3358 "cPickle.c"
        if ($21) { __label__ = 9; break; } else { __label__ = 7; break; } //@line 3358 "cPickle.c"
      case 7: // $bb6
        var $22=HEAP[$endptr]; //@line 3358 "cPickle.c"
        var $23=HEAP[$22]; //@line 3358 "cPickle.c"
        var $24=($23)!=10; //@line 3358 "cPickle.c"
        if ($24) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 3358 "cPickle.c"
      case 8: // $bb7
        var $25=HEAP[$endptr]; //@line 3358 "cPickle.c"
        var $26=$25+1; //@line 3358 "cPickle.c"
        var $27=HEAP[$26]; //@line 3358 "cPickle.c"
        var $28=($27)!=0; //@line 3358 "cPickle.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 3358 "cPickle.c"
      case 9: // $bb8
        var $29=___errno_location(); //@line 3361 "cPickle.c"
        HEAP[$29]=0; //@line 3361 "cPickle.c"
        var $30=HEAP[$s]; //@line 3362 "cPickle.c"
        var $31=_PyLong_FromString($30, 0, 0); //@line 3362 "cPickle.c"
        $py_int=$31; //@line 3362 "cPickle.c"
        var $32=($31)==0; //@line 3363 "cPickle.c"
        if ($32) { __label__ = 10; break; } else { __label__ = 15; break; } //@line 3363 "cPickle.c"
      case 10: // $bb9
        var $33=HEAP[_PyExc_ValueError]; //@line 3364 "cPickle.c"
        _PyErr_SetString($33, __str80); //@line 3364 "cPickle.c"
        __label__ = 21; break; //@line 3364 "cPickle.c"
      case 11: // $bb11
        var $34=$len; //@line 3370 "cPickle.c"
        var $35=($34)!=3; //@line 3370 "cPickle.c"
        if ($35) { __label__ = 14; break; } else { __label__ = 12; break; } //@line 3370 "cPickle.c"
      case 12: // $bb12
        var $36=$l; //@line 3370 "cPickle.c"
        var $37=($36)==0; //@line 3370 "cPickle.c"
        var $38=$l; //@line 3370 "cPickle.c"
        var $39=($38)==1; //@line 3370 "cPickle.c"
        var $or_cond=($37) | ($39);
        if ($or_cond) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3370 "cPickle.c"
      case 13: // $bb14
        var $40=$l; //@line 3371 "cPickle.c"
        var $41=_PyBool_FromLong($40); //@line 3371 "cPickle.c"
        $py_int=$41; //@line 3371 "cPickle.c"
        var $42=$py_int; //@line 3371 "cPickle.c"
        var $43=($42)==0; //@line 3371 "cPickle.c"
        if ($43) { __label__ = 21; break; } else { __label__ = 15; break; } //@line 3371 "cPickle.c"
      case 14: // $bb16
        var $44=$l; //@line 3374 "cPickle.c"
        var $45=_PyInt_FromLong($44); //@line 3374 "cPickle.c"
        $py_int=$45; //@line 3374 "cPickle.c"
        var $46=($45)==0; //@line 3374 "cPickle.c"
        if ($46) { __label__ = 21; break; } else { __label__ = 15; break; } //@line 3374 "cPickle.c"
      case 15: // $bb17
        var $47=HEAP[$s]; //@line 3378 "cPickle.c"
        _free($47); //@line 3378 "cPickle.c"
        var $48=$self_addr; //@line 3379 "cPickle.c"
        var $49=$48+32; //@line 3379 "cPickle.c"
        var $50=HEAP[$49]; //@line 3379 "cPickle.c"
        var $51=$50+8; //@line 3379 "cPickle.c"
        var $52=HEAP[$51]; //@line 3379 "cPickle.c"
        var $53=$self_addr; //@line 3379 "cPickle.c"
        var $54=$53+32; //@line 3379 "cPickle.c"
        var $55=HEAP[$54]; //@line 3379 "cPickle.c"
        var $56=$55+12; //@line 3379 "cPickle.c"
        var $57=HEAP[$56]; //@line 3379 "cPickle.c"
        var $58=($52)==($57); //@line 3379 "cPickle.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 20; break; } //@line 3379 "cPickle.c"
      case 16: // $bb18
        var $59=$self_addr; //@line 3379 "cPickle.c"
        var $60=$59+32; //@line 3379 "cPickle.c"
        var $61=HEAP[$60]; //@line 3379 "cPickle.c"
        var $62=_Pdata_grow($61); //@line 3379 "cPickle.c"
        var $63=($62) < 0; //@line 3379 "cPickle.c"
        if ($63) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 3379 "cPickle.c"
      case 17: // $bb19
        var $64=$py_int; //@line 3379 "cPickle.c"
        var $65=$64; //@line 3379 "cPickle.c"
        var $66=HEAP[$65]; //@line 3379 "cPickle.c"
        var $67=($66) - 1; //@line 3379 "cPickle.c"
        var $68=$py_int; //@line 3379 "cPickle.c"
        var $69=$68; //@line 3379 "cPickle.c"
        HEAP[$69]=$67; //@line 3379 "cPickle.c"
        var $70=$py_int; //@line 3379 "cPickle.c"
        var $71=$70; //@line 3379 "cPickle.c"
        var $72=HEAP[$71]; //@line 3379 "cPickle.c"
        var $73=($72)==0; //@line 3379 "cPickle.c"
        if ($73) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3379 "cPickle.c"
      case 18: // $bb20
        var $74=$py_int; //@line 3379 "cPickle.c"
        var $75=$74+4; //@line 3379 "cPickle.c"
        var $76=HEAP[$75]; //@line 3379 "cPickle.c"
        var $77=$76+24; //@line 3379 "cPickle.c"
        var $78=HEAP[$77]; //@line 3379 "cPickle.c"
        var $79=$py_int; //@line 3379 "cPickle.c"
        FUNCTION_TABLE[$78]($79); //@line 3379 "cPickle.c"
        __label__ = 19; break; //@line 3379 "cPickle.c"
      case 19: // $bb21
        $0=-1; //@line 3379 "cPickle.c"
        __label__ = 22; break; //@line 3379 "cPickle.c"
      case 20: // $bb22
        var $80=$self_addr; //@line 3379 "cPickle.c"
        var $81=$80+32; //@line 3379 "cPickle.c"
        var $82=HEAP[$81]; //@line 3379 "cPickle.c"
        var $83=$82+16; //@line 3379 "cPickle.c"
        var $84=HEAP[$83]; //@line 3379 "cPickle.c"
        var $85=$self_addr; //@line 3379 "cPickle.c"
        var $86=$85+32; //@line 3379 "cPickle.c"
        var $87=HEAP[$86]; //@line 3379 "cPickle.c"
        var $88=$87+8; //@line 3379 "cPickle.c"
        var $89=HEAP[$88]; //@line 3379 "cPickle.c"
        var $90=$84+4*$89; //@line 3379 "cPickle.c"
        var $91=$py_int; //@line 3379 "cPickle.c"
        HEAP[$90]=$91; //@line 3379 "cPickle.c"
        var $92=($89) + 1; //@line 3379 "cPickle.c"
        var $93=$87+8; //@line 3379 "cPickle.c"
        HEAP[$93]=$92; //@line 3379 "cPickle.c"
        $0=0; //@line 3380 "cPickle.c"
        __label__ = 22; break; //@line 3380 "cPickle.c"
      case 21: // $finally
        var $94=HEAP[$s]; //@line 3383 "cPickle.c"
        _free($94); //@line 3383 "cPickle.c"
        var $95=$res; //@line 3385 "cPickle.c"
        $0=$95; //@line 3385 "cPickle.c"
        __label__ = 22; break; //@line 3385 "cPickle.c"
      case 22: // $bb23
        var $96=$0; //@line 3351 "cPickle.c"
        $retval=$96; //@line 3351 "cPickle.c"
        var $retval24=$retval; //@line 3351 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 3351 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_bool($self, $boolean) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $boolean_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $boolean_addr=$boolean;
        var $1=$boolean_addr; //@line 3391 "cPickle.c"
        var $2=($1)!=(__Py_TrueStruct); //@line 3391 "cPickle.c"
        var $3=$boolean_addr; //@line 3391 "cPickle.c"
        var $4=($3)!=(__Py_ZeroStruct); //@line 3391 "cPickle.c"
        var $or_cond=($2) & ($4);
        if ($or_cond) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3391 "cPickle.c"
      case 1: // $bb1
        ___assert_fail(__str81, __str15, 3391, ___PRETTY_FUNCTION___12572); //@line 3391 "cPickle.c"
        throw "Reached an unreachable!" //@line 3391 "cPickle.c"
      case 2: // $bb2
        var $5=$self_addr; //@line 3392 "cPickle.c"
        var $6=$5+32; //@line 3392 "cPickle.c"
        var $7=HEAP[$6]; //@line 3392 "cPickle.c"
        var $8=$7+8; //@line 3392 "cPickle.c"
        var $9=HEAP[$8]; //@line 3392 "cPickle.c"
        var $10=$self_addr; //@line 3392 "cPickle.c"
        var $11=$10+32; //@line 3392 "cPickle.c"
        var $12=HEAP[$11]; //@line 3392 "cPickle.c"
        var $13=$12+12; //@line 3392 "cPickle.c"
        var $14=HEAP[$13]; //@line 3392 "cPickle.c"
        var $15=($9)==($14); //@line 3392 "cPickle.c"
        if ($15) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3392 "cPickle.c"
      case 3: // $bb3
        var $16=$self_addr; //@line 3392 "cPickle.c"
        var $17=$16+32; //@line 3392 "cPickle.c"
        var $18=HEAP[$17]; //@line 3392 "cPickle.c"
        var $19=_Pdata_grow($18); //@line 3392 "cPickle.c"
        var $20=($19) < 0; //@line 3392 "cPickle.c"
        if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3392 "cPickle.c"
      case 4: // $bb4
        $0=-1; //@line 3392 "cPickle.c"
        __label__ = 6; break; //@line 3392 "cPickle.c"
      case 5: // $bb5
        var $21=$boolean_addr; //@line 3392 "cPickle.c"
        var $22=$21; //@line 3392 "cPickle.c"
        var $23=HEAP[$22]; //@line 3392 "cPickle.c"
        var $24=($23) + 1; //@line 3392 "cPickle.c"
        var $25=$boolean_addr; //@line 3392 "cPickle.c"
        var $26=$25; //@line 3392 "cPickle.c"
        HEAP[$26]=$24; //@line 3392 "cPickle.c"
        var $27=$self_addr; //@line 3392 "cPickle.c"
        var $28=$27+32; //@line 3392 "cPickle.c"
        var $29=HEAP[$28]; //@line 3392 "cPickle.c"
        var $30=$29+16; //@line 3392 "cPickle.c"
        var $31=HEAP[$30]; //@line 3392 "cPickle.c"
        var $32=$self_addr; //@line 3392 "cPickle.c"
        var $33=$32+32; //@line 3392 "cPickle.c"
        var $34=HEAP[$33]; //@line 3392 "cPickle.c"
        var $35=$34+8; //@line 3392 "cPickle.c"
        var $36=HEAP[$35]; //@line 3392 "cPickle.c"
        var $37=$31+4*$36; //@line 3392 "cPickle.c"
        var $38=$boolean_addr; //@line 3392 "cPickle.c"
        HEAP[$37]=$38; //@line 3392 "cPickle.c"
        var $39=($36) + 1; //@line 3392 "cPickle.c"
        var $40=$34+8; //@line 3392 "cPickle.c"
        HEAP[$40]=$39; //@line 3392 "cPickle.c"
        $0=0; //@line 3393 "cPickle.c"
        __label__ = 6; break; //@line 3393 "cPickle.c"
      case 6: // $bb6
        var $41=$0; //@line 3392 "cPickle.c"
        $retval=$41; //@line 3392 "cPickle.c"
        var $retval7=$retval; //@line 3392 "cPickle.c"
        ;
        return $retval7; //@line 3392 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _calc_binint($s, $x) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr;
        var $x_addr;
        var $retval;
        var $0;
        var $c;
        var $i;
        var $l;
        $s_addr=$s;
        $x_addr=$x;
        $i=0; //@line 3408 "cPickle.c"
        $l=0; //@line 3408 "cPickle.c"
        var $1=$i; //@line 3408 "cPickle.c"
        var $2=$x_addr; //@line 3408 "cPickle.c"
        var $3=($1) < ($2); //@line 3408 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3408 "cPickle.c"
      case 1: // $bb
        var $4=$s_addr; //@line 3409 "cPickle.c"
        var $5=$i; //@line 3409 "cPickle.c"
        var $6=$4+$5; //@line 3409 "cPickle.c"
        var $7=HEAP[$6]; //@line 3409 "cPickle.c"
        $c=$7; //@line 3409 "cPickle.c"
        var $8=$c; //@line 3410 "cPickle.c"
        var $9=($8); //@line 3410 "cPickle.c"
        var $10=$i; //@line 3410 "cPickle.c"
        var $11=($10) * 8; //@line 3410 "cPickle.c"
        var $12=($9) << ($11); //@line 3410 "cPickle.c"
        var $13=$l; //@line 3410 "cPickle.c"
        var $14=($12) | ($13); //@line 3410 "cPickle.c"
        $l=$14; //@line 3410 "cPickle.c"
        var $15=$i; //@line 3408 "cPickle.c"
        var $16=($15) + 1; //@line 3408 "cPickle.c"
        $i=$16; //@line 3408 "cPickle.c"
        var $17=$i; //@line 3408 "cPickle.c"
        var $18=$x_addr; //@line 3408 "cPickle.c"
        var $19=($17) < ($18); //@line 3408 "cPickle.c"
        if ($19) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3408 "cPickle.c"
      case 2: // $bb2
        var $20=$l; //@line 3420 "cPickle.c"
        $0=$20; //@line 3420 "cPickle.c"
        var $21=$0; //@line 3420 "cPickle.c"
        $retval=$21; //@line 3420 "cPickle.c"
        var $retval3=$retval; //@line 3420 "cPickle.c"
        ;
        return $retval3; //@line 3420 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binintx($self, $s, $x) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $x_addr;
        var $retval;
        var $0;
        var $py_int;
        var $l;
        $self_addr=$self;
        $s_addr=$s;
        $x_addr=$x;
        $py_int=0; //@line 3427 "cPickle.c"
        var $1=$s_addr; //@line 3430 "cPickle.c"
        var $2=$x_addr; //@line 3430 "cPickle.c"
        var $3=_calc_binint($1, $2); //@line 3430 "cPickle.c"
        $l=$3; //@line 3430 "cPickle.c"
        var $4=$l; //@line 3432 "cPickle.c"
        var $5=_PyInt_FromLong($4); //@line 3432 "cPickle.c"
        $py_int=$5; //@line 3432 "cPickle.c"
        var $6=$py_int; //@line 3432 "cPickle.c"
        var $7=($6)==0; //@line 3432 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3432 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3433 "cPickle.c"
        __label__ = 8; break; //@line 3433 "cPickle.c"
      case 2: // $bb1
        var $8=$self_addr; //@line 3435 "cPickle.c"
        var $9=$8+32; //@line 3435 "cPickle.c"
        var $10=HEAP[$9]; //@line 3435 "cPickle.c"
        var $11=$10+8; //@line 3435 "cPickle.c"
        var $12=HEAP[$11]; //@line 3435 "cPickle.c"
        var $13=$self_addr; //@line 3435 "cPickle.c"
        var $14=$13+32; //@line 3435 "cPickle.c"
        var $15=HEAP[$14]; //@line 3435 "cPickle.c"
        var $16=$15+12; //@line 3435 "cPickle.c"
        var $17=HEAP[$16]; //@line 3435 "cPickle.c"
        var $18=($12)==($17); //@line 3435 "cPickle.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 3435 "cPickle.c"
      case 3: // $bb2
        var $19=$self_addr; //@line 3435 "cPickle.c"
        var $20=$19+32; //@line 3435 "cPickle.c"
        var $21=HEAP[$20]; //@line 3435 "cPickle.c"
        var $22=_Pdata_grow($21); //@line 3435 "cPickle.c"
        var $23=($22) < 0; //@line 3435 "cPickle.c"
        if ($23) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 3435 "cPickle.c"
      case 4: // $bb3
        var $24=$py_int; //@line 3435 "cPickle.c"
        var $25=$24; //@line 3435 "cPickle.c"
        var $26=HEAP[$25]; //@line 3435 "cPickle.c"
        var $27=($26) - 1; //@line 3435 "cPickle.c"
        var $28=$py_int; //@line 3435 "cPickle.c"
        var $29=$28; //@line 3435 "cPickle.c"
        HEAP[$29]=$27; //@line 3435 "cPickle.c"
        var $30=$py_int; //@line 3435 "cPickle.c"
        var $31=$30; //@line 3435 "cPickle.c"
        var $32=HEAP[$31]; //@line 3435 "cPickle.c"
        var $33=($32)==0; //@line 3435 "cPickle.c"
        if ($33) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3435 "cPickle.c"
      case 5: // $bb4
        var $34=$py_int; //@line 3435 "cPickle.c"
        var $35=$34+4; //@line 3435 "cPickle.c"
        var $36=HEAP[$35]; //@line 3435 "cPickle.c"
        var $37=$36+24; //@line 3435 "cPickle.c"
        var $38=HEAP[$37]; //@line 3435 "cPickle.c"
        var $39=$py_int; //@line 3435 "cPickle.c"
        FUNCTION_TABLE[$38]($39); //@line 3435 "cPickle.c"
        __label__ = 6; break; //@line 3435 "cPickle.c"
      case 6: // $bb5
        $0=-1; //@line 3435 "cPickle.c"
        __label__ = 8; break; //@line 3435 "cPickle.c"
      case 7: // $bb6
        var $40=$self_addr; //@line 3435 "cPickle.c"
        var $41=$40+32; //@line 3435 "cPickle.c"
        var $42=HEAP[$41]; //@line 3435 "cPickle.c"
        var $43=$42+16; //@line 3435 "cPickle.c"
        var $44=HEAP[$43]; //@line 3435 "cPickle.c"
        var $45=$self_addr; //@line 3435 "cPickle.c"
        var $46=$45+32; //@line 3435 "cPickle.c"
        var $47=HEAP[$46]; //@line 3435 "cPickle.c"
        var $48=$47+8; //@line 3435 "cPickle.c"
        var $49=HEAP[$48]; //@line 3435 "cPickle.c"
        var $50=$44+4*$49; //@line 3435 "cPickle.c"
        var $51=$py_int; //@line 3435 "cPickle.c"
        HEAP[$50]=$51; //@line 3435 "cPickle.c"
        var $52=($49) + 1; //@line 3435 "cPickle.c"
        var $53=$47+8; //@line 3435 "cPickle.c"
        HEAP[$53]=$52; //@line 3435 "cPickle.c"
        $0=0; //@line 3436 "cPickle.c"
        __label__ = 8; break; //@line 3436 "cPickle.c"
      case 8: // $bb7
        var $54=$0; //@line 3433 "cPickle.c"
        $retval=$54; //@line 3433 "cPickle.c"
        var $retval8=$retval; //@line 3433 "cPickle.c"
        ;
        return $retval8; //@line 3433 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binint($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $s=__stackBase__;
        $self_addr=$self;
        var $1=$self_addr; //@line 3445 "cPickle.c"
        var $2=$1+60; //@line 3445 "cPickle.c"
        var $3=HEAP[$2]; //@line 3445 "cPickle.c"
        var $4=$self_addr; //@line 3445 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 4); //@line 3445 "cPickle.c"
        var $6=($5) < 0; //@line 3445 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3445 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3446 "cPickle.c"
        __label__ = 3; break; //@line 3446 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3448 "cPickle.c"
        var $8=$self_addr; //@line 3448 "cPickle.c"
        var $9=_load_binintx($8, $7, 4); //@line 3448 "cPickle.c"
        $0=$9; //@line 3448 "cPickle.c"
        __label__ = 3; break; //@line 3448 "cPickle.c"
      case 3: // $bb2
        var $10=$0; //@line 3446 "cPickle.c"
        $retval=$10; //@line 3446 "cPickle.c"
        var $retval3=$retval; //@line 3446 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3446 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binint1($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $s=__stackBase__;
        $self_addr=$self;
        var $1=$self_addr; //@line 3457 "cPickle.c"
        var $2=$1+60; //@line 3457 "cPickle.c"
        var $3=HEAP[$2]; //@line 3457 "cPickle.c"
        var $4=$self_addr; //@line 3457 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 1); //@line 3457 "cPickle.c"
        var $6=($5) < 0; //@line 3457 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3457 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3458 "cPickle.c"
        __label__ = 3; break; //@line 3458 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3460 "cPickle.c"
        var $8=$self_addr; //@line 3460 "cPickle.c"
        var $9=_load_binintx($8, $7, 1); //@line 3460 "cPickle.c"
        $0=$9; //@line 3460 "cPickle.c"
        __label__ = 3; break; //@line 3460 "cPickle.c"
      case 3: // $bb2
        var $10=$0; //@line 3458 "cPickle.c"
        $retval=$10; //@line 3458 "cPickle.c"
        var $retval3=$retval; //@line 3458 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3458 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binint2($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $s=__stackBase__;
        $self_addr=$self;
        var $1=$self_addr; //@line 3469 "cPickle.c"
        var $2=$1+60; //@line 3469 "cPickle.c"
        var $3=HEAP[$2]; //@line 3469 "cPickle.c"
        var $4=$self_addr; //@line 3469 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 2); //@line 3469 "cPickle.c"
        var $6=($5) < 0; //@line 3469 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3469 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3470 "cPickle.c"
        __label__ = 3; break; //@line 3470 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3472 "cPickle.c"
        var $8=$self_addr; //@line 3472 "cPickle.c"
        var $9=_load_binintx($8, $7, 2); //@line 3472 "cPickle.c"
        $0=$9; //@line 3472 "cPickle.c"
        __label__ = 3; break; //@line 3472 "cPickle.c"
      case 3: // $bb2
        var $10=$0; //@line 3470 "cPickle.c"
        $retval=$10; //@line 3470 "cPickle.c"
        var $retval3=$retval; //@line 3470 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3470 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_long($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $l;
        var $end=__stackBase__;
        var $s=__stackBase__+4;
        var $len;
        var $res;
        $self_addr=$self;
        $l=0; //@line 3478 "cPickle.c"
        $res=-1; //@line 3480 "cPickle.c"
        var $1=$self_addr; //@line 3482 "cPickle.c"
        var $2=$1+64; //@line 3482 "cPickle.c"
        var $3=HEAP[$2]; //@line 3482 "cPickle.c"
        var $4=$self_addr; //@line 3482 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 3482 "cPickle.c"
        $len=$5; //@line 3482 "cPickle.c"
        var $6=$len; //@line 3482 "cPickle.c"
        var $7=($6) < 0; //@line 3482 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3482 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3482 "cPickle.c"
        __label__ = 14; break; //@line 3482 "cPickle.c"
      case 2: // $bb1
        var $8=$len; //@line 3483 "cPickle.c"
        var $9=($8) <= 1; //@line 3483 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3483 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 3483 "cPickle.c"
        $0=$10; //@line 3483 "cPickle.c"
        __label__ = 14; break; //@line 3483 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$s]; //@line 3484 "cPickle.c"
        var $12=$len; //@line 3484 "cPickle.c"
        var $13=_pystrndup($11, $12); //@line 3484 "cPickle.c"
        HEAP[$s]=$13; //@line 3484 "cPickle.c"
        var $14=HEAP[$s]; //@line 3484 "cPickle.c"
        var $15=($14)==0; //@line 3484 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3484 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 3484 "cPickle.c"
        __label__ = 14; break; //@line 3484 "cPickle.c"
      case 6: // $bb5
        var $16=HEAP[$s]; //@line 3486 "cPickle.c"
        var $17=_PyLong_FromString($16, $end, 0); //@line 3486 "cPickle.c"
        $l=$17; //@line 3486 "cPickle.c"
        var $18=$l; //@line 3486 "cPickle.c"
        var $19=($18)==0; //@line 3486 "cPickle.c"
        var $20=HEAP[$s]; //@line 3494 "cPickle.c"
        _free($20); //@line 3494 "cPickle.c"
        if ($19) { __label__ = 13; break; } else { __label__ = 7; break; } //@line 3486 "cPickle.c"
      case 7: // $bb6
        var $21=$self_addr; //@line 3490 "cPickle.c"
        var $22=$21+32; //@line 3490 "cPickle.c"
        var $23=HEAP[$22]; //@line 3490 "cPickle.c"
        var $24=$23+8; //@line 3490 "cPickle.c"
        var $25=HEAP[$24]; //@line 3490 "cPickle.c"
        var $26=$self_addr; //@line 3490 "cPickle.c"
        var $27=$26+32; //@line 3490 "cPickle.c"
        var $28=HEAP[$27]; //@line 3490 "cPickle.c"
        var $29=$28+12; //@line 3490 "cPickle.c"
        var $30=HEAP[$29]; //@line 3490 "cPickle.c"
        var $31=($25)==($30); //@line 3490 "cPickle.c"
        if ($31) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 3490 "cPickle.c"
      case 8: // $bb7
        var $32=$self_addr; //@line 3490 "cPickle.c"
        var $33=$32+32; //@line 3490 "cPickle.c"
        var $34=HEAP[$33]; //@line 3490 "cPickle.c"
        var $35=_Pdata_grow($34); //@line 3490 "cPickle.c"
        var $36=($35) < 0; //@line 3490 "cPickle.c"
        if ($36) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 3490 "cPickle.c"
      case 9: // $bb8
        var $37=$l; //@line 3490 "cPickle.c"
        var $38=$37; //@line 3490 "cPickle.c"
        var $39=HEAP[$38]; //@line 3490 "cPickle.c"
        var $40=($39) - 1; //@line 3490 "cPickle.c"
        var $41=$l; //@line 3490 "cPickle.c"
        var $42=$41; //@line 3490 "cPickle.c"
        HEAP[$42]=$40; //@line 3490 "cPickle.c"
        var $43=$l; //@line 3490 "cPickle.c"
        var $44=$43; //@line 3490 "cPickle.c"
        var $45=HEAP[$44]; //@line 3490 "cPickle.c"
        var $46=($45)==0; //@line 3490 "cPickle.c"
        if ($46) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3490 "cPickle.c"
      case 10: // $bb9
        var $47=$l; //@line 3490 "cPickle.c"
        var $48=$47+4; //@line 3490 "cPickle.c"
        var $49=HEAP[$48]; //@line 3490 "cPickle.c"
        var $50=$49+24; //@line 3490 "cPickle.c"
        var $51=HEAP[$50]; //@line 3490 "cPickle.c"
        var $52=$l; //@line 3490 "cPickle.c"
        FUNCTION_TABLE[$51]($52); //@line 3490 "cPickle.c"
        __label__ = 11; break; //@line 3490 "cPickle.c"
      case 11: // $bb10
        $0=-1; //@line 3490 "cPickle.c"
        __label__ = 14; break; //@line 3490 "cPickle.c"
      case 12: // $bb11
        var $53=$self_addr; //@line 3490 "cPickle.c"
        var $54=$53+32; //@line 3490 "cPickle.c"
        var $55=HEAP[$54]; //@line 3490 "cPickle.c"
        var $56=$55+16; //@line 3490 "cPickle.c"
        var $57=HEAP[$56]; //@line 3490 "cPickle.c"
        var $58=$self_addr; //@line 3490 "cPickle.c"
        var $59=$58+32; //@line 3490 "cPickle.c"
        var $60=HEAP[$59]; //@line 3490 "cPickle.c"
        var $61=$60+8; //@line 3490 "cPickle.c"
        var $62=HEAP[$61]; //@line 3490 "cPickle.c"
        var $63=$57+4*$62; //@line 3490 "cPickle.c"
        var $64=$l; //@line 3490 "cPickle.c"
        HEAP[$63]=$64; //@line 3490 "cPickle.c"
        var $65=($62) + 1; //@line 3490 "cPickle.c"
        var $66=$60+8; //@line 3490 "cPickle.c"
        HEAP[$66]=$65; //@line 3490 "cPickle.c"
        $0=0; //@line 3491 "cPickle.c"
        __label__ = 14; break; //@line 3491 "cPickle.c"
      case 13: // $finally
        var $67=$res; //@line 3496 "cPickle.c"
        $0=$67; //@line 3496 "cPickle.c"
        __label__ = 14; break; //@line 3496 "cPickle.c"
      case 14: // $bb12
        var $68=$0; //@line 3482 "cPickle.c"
        $retval=$68; //@line 3482 "cPickle.c"
        var $retval13=$retval; //@line 3482 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 3482 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_counted_long($self, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $size_addr;
        var $retval;
        var $0;
        var $i;
        var $nbytes=__stackBase__;
        var $pdata=__stackBase__+4;
        var $along;
        $self_addr=$self;
        $size_addr=$size;
        var $1=$size_addr; //@line 3510 "cPickle.c"
        var $2=($1)!=1; //@line 3510 "cPickle.c"
        var $3=$size_addr; //@line 3510 "cPickle.c"
        var $4=($3)!=4; //@line 3510 "cPickle.c"
        var $or_cond=($2) & ($4);
        if ($or_cond) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3510 "cPickle.c"
      case 1: // $bb1
        ___assert_fail(__str82, __str15, 3510, ___PRETTY_FUNCTION___12743); //@line 3510 "cPickle.c"
        throw "Reached an unreachable!" //@line 3510 "cPickle.c"
      case 2: // $bb2
        var $5=$self_addr; //@line 3511 "cPickle.c"
        var $6=$5+60; //@line 3511 "cPickle.c"
        var $7=HEAP[$6]; //@line 3511 "cPickle.c"
        var $8=$self_addr; //@line 3511 "cPickle.c"
        var $9=$size_addr; //@line 3511 "cPickle.c"
        var $10=FUNCTION_TABLE[$7]($8, $nbytes, $9); //@line 3511 "cPickle.c"
        $i=$10; //@line 3511 "cPickle.c"
        var $11=$i; //@line 3512 "cPickle.c"
        var $12=($11) < 0; //@line 3512 "cPickle.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3512 "cPickle.c"
      case 3: // $bb3
        $0=-1; //@line 3512 "cPickle.c"
        __label__ = 19; break; //@line 3512 "cPickle.c"
      case 4: // $bb4
        var $13=HEAP[$nbytes]; //@line 3514 "cPickle.c"
        var $14=$size_addr; //@line 3514 "cPickle.c"
        var $15=_calc_binint($13, $14); //@line 3514 "cPickle.c"
        $size_addr=$15; //@line 3514 "cPickle.c"
        var $16=$size_addr; //@line 3515 "cPickle.c"
        var $17=($16) < 0; //@line 3515 "cPickle.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3515 "cPickle.c"
      case 5: // $bb5
        var $18=HEAP[_UnpicklingError]; //@line 3519 "cPickle.c"
        _PyErr_SetString($18, __str83); //@line 3519 "cPickle.c"
        $0=-1; //@line 3521 "cPickle.c"
        __label__ = 19; break; //@line 3521 "cPickle.c"
      case 6: // $bb6
        var $19=$size_addr; //@line 3524 "cPickle.c"
        var $20=($19)==0; //@line 3524 "cPickle.c"
        if ($20) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3524 "cPickle.c"
      case 7: // $bb7
        var $21=_PyLong_FromLong(0); //@line 3525 "cPickle.c"
        $along=$21; //@line 3525 "cPickle.c"
        __lastLabel__ = 7; __label__ = 11; break; //@line 3525 "cPickle.c"
      case 8: // $bb8
        var $22=$self_addr; //@line 3528 "cPickle.c"
        var $23=$22+60; //@line 3528 "cPickle.c"
        var $24=HEAP[$23]; //@line 3528 "cPickle.c"
        var $25=$self_addr; //@line 3528 "cPickle.c"
        var $26=$size_addr; //@line 3528 "cPickle.c"
        var $27=FUNCTION_TABLE[$24]($25, $pdata, $26); //@line 3528 "cPickle.c"
        $i=$27; //@line 3528 "cPickle.c"
        var $28=$i; //@line 3529 "cPickle.c"
        var $29=($28) < 0; //@line 3529 "cPickle.c"
        if ($29) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3529 "cPickle.c"
      case 9: // $bb10
        $0=-1; //@line 3529 "cPickle.c"
        __label__ = 19; break; //@line 3529 "cPickle.c"
      case 10: // $bb11
        var $30=$size_addr; //@line 3530 "cPickle.c"
        var $31=HEAP[$pdata]; //@line 3530 "cPickle.c"
        var $32=__PyLong_FromByteArray($31, $30, 1, 1); //@line 3530 "cPickle.c"
        $along=$32; //@line 3530 "cPickle.c"
        __lastLabel__ = 10; __label__ = 11; break; //@line 3530 "cPickle.c"
      case 11: // $bb12
        var $33=__lastLabel__ == 10 ? $32 : ($21);
        var $34=($33)==0; //@line 3533 "cPickle.c"
        if ($34) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 3533 "cPickle.c"
      case 12: // $bb13
        $0=-1; //@line 3534 "cPickle.c"
        __label__ = 19; break; //@line 3534 "cPickle.c"
      case 13: // $bb14
        var $35=$self_addr; //@line 3535 "cPickle.c"
        var $36=$35+32; //@line 3535 "cPickle.c"
        var $37=HEAP[$36]; //@line 3535 "cPickle.c"
        var $38=$37+8; //@line 3535 "cPickle.c"
        var $39=HEAP[$38]; //@line 3535 "cPickle.c"
        var $40=$self_addr; //@line 3535 "cPickle.c"
        var $41=$40+32; //@line 3535 "cPickle.c"
        var $42=HEAP[$41]; //@line 3535 "cPickle.c"
        var $43=$42+12; //@line 3535 "cPickle.c"
        var $44=HEAP[$43]; //@line 3535 "cPickle.c"
        var $45=($39)==($44); //@line 3535 "cPickle.c"
        if ($45) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 3535 "cPickle.c"
      case 14: // $bb15
        var $46=$self_addr; //@line 3535 "cPickle.c"
        var $47=$46+32; //@line 3535 "cPickle.c"
        var $48=HEAP[$47]; //@line 3535 "cPickle.c"
        var $49=_Pdata_grow($48); //@line 3535 "cPickle.c"
        var $50=($49) < 0; //@line 3535 "cPickle.c"
        if ($50) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 3535 "cPickle.c"
      case 15: // $bb16
        var $51=$along; //@line 3535 "cPickle.c"
        var $52=$51; //@line 3535 "cPickle.c"
        var $53=HEAP[$52]; //@line 3535 "cPickle.c"
        var $54=($53) - 1; //@line 3535 "cPickle.c"
        var $55=$along; //@line 3535 "cPickle.c"
        var $56=$55; //@line 3535 "cPickle.c"
        HEAP[$56]=$54; //@line 3535 "cPickle.c"
        var $57=$along; //@line 3535 "cPickle.c"
        var $58=$57; //@line 3535 "cPickle.c"
        var $59=HEAP[$58]; //@line 3535 "cPickle.c"
        var $60=($59)==0; //@line 3535 "cPickle.c"
        if ($60) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3535 "cPickle.c"
      case 16: // $bb17
        var $61=$along; //@line 3535 "cPickle.c"
        var $62=$61+4; //@line 3535 "cPickle.c"
        var $63=HEAP[$62]; //@line 3535 "cPickle.c"
        var $64=$63+24; //@line 3535 "cPickle.c"
        var $65=HEAP[$64]; //@line 3535 "cPickle.c"
        var $66=$along; //@line 3535 "cPickle.c"
        FUNCTION_TABLE[$65]($66); //@line 3535 "cPickle.c"
        __label__ = 17; break; //@line 3535 "cPickle.c"
      case 17: // $bb18
        $0=-1; //@line 3535 "cPickle.c"
        __label__ = 19; break; //@line 3535 "cPickle.c"
      case 18: // $bb19
        var $67=$self_addr; //@line 3535 "cPickle.c"
        var $68=$67+32; //@line 3535 "cPickle.c"
        var $69=HEAP[$68]; //@line 3535 "cPickle.c"
        var $70=$69+16; //@line 3535 "cPickle.c"
        var $71=HEAP[$70]; //@line 3535 "cPickle.c"
        var $72=$self_addr; //@line 3535 "cPickle.c"
        var $73=$72+32; //@line 3535 "cPickle.c"
        var $74=HEAP[$73]; //@line 3535 "cPickle.c"
        var $75=$74+8; //@line 3535 "cPickle.c"
        var $76=HEAP[$75]; //@line 3535 "cPickle.c"
        var $77=$71+4*$76; //@line 3535 "cPickle.c"
        var $78=$along; //@line 3535 "cPickle.c"
        HEAP[$77]=$78; //@line 3535 "cPickle.c"
        var $79=($76) + 1; //@line 3535 "cPickle.c"
        var $80=$74+8; //@line 3535 "cPickle.c"
        HEAP[$80]=$79; //@line 3535 "cPickle.c"
        $0=0; //@line 3536 "cPickle.c"
        __label__ = 19; break; //@line 3536 "cPickle.c"
      case 19: // $bb20
        var $81=$0; //@line 3512 "cPickle.c"
        $retval=$81; //@line 3512 "cPickle.c"
        var $retval21=$retval; //@line 3512 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 3512 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_float($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_float;
        var $endptr=__stackBase__;
        var $s=__stackBase__+4;
        var $len;
        var $res;
        var $d;
        $self_addr=$self;
        $py_float=0; //@line 3542 "cPickle.c"
        $res=-1; //@line 3544 "cPickle.c"
        var $1=$self_addr; //@line 3547 "cPickle.c"
        var $2=$1+64; //@line 3547 "cPickle.c"
        var $3=HEAP[$2]; //@line 3547 "cPickle.c"
        var $4=$self_addr; //@line 3547 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 3547 "cPickle.c"
        $len=$5; //@line 3547 "cPickle.c"
        var $6=$len; //@line 3547 "cPickle.c"
        var $7=($6) < 0; //@line 3547 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3547 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3547 "cPickle.c"
        __label__ = 19; break; //@line 3547 "cPickle.c"
      case 2: // $bb1
        var $8=$len; //@line 3548 "cPickle.c"
        var $9=($8) <= 1; //@line 3548 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3548 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 3548 "cPickle.c"
        $0=$10; //@line 3548 "cPickle.c"
        __label__ = 19; break; //@line 3548 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$s]; //@line 3549 "cPickle.c"
        var $12=$len; //@line 3549 "cPickle.c"
        var $13=_pystrndup($11, $12); //@line 3549 "cPickle.c"
        HEAP[$s]=$13; //@line 3549 "cPickle.c"
        var $14=HEAP[$s]; //@line 3549 "cPickle.c"
        var $15=($14)==0; //@line 3549 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3549 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 3549 "cPickle.c"
        __label__ = 19; break; //@line 3549 "cPickle.c"
      case 6: // $bb5
        var $16=HEAP[_PyExc_OverflowError]; //@line 3551 "cPickle.c"
        var $17=HEAP[$s]; //@line 3551 "cPickle.c"
        var $18=_PyOS_string_to_double($17, $endptr, $16); //@line 3551 "cPickle.c"
        $d=$18; //@line 3551 "cPickle.c"
        var $19=$d; //@line 3553 "cPickle.c"
        var $20=($19) != -1; //@line 3553 "cPickle.c"
        if ($20) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 3553 "cPickle.c"
      case 7: // $bb6
        var $21=_PyErr_Occurred(); //@line 3553 "cPickle.c"
        var $22=($21)!=0; //@line 3553 "cPickle.c"
        if ($22) { __label__ = 18; break; } else { __label__ = 8; break; } //@line 3553 "cPickle.c"
      case 8: // $bb7
        var $23=HEAP[$endptr]; //@line 3555 "cPickle.c"
        var $24=$23; //@line 3555 "cPickle.c"
        var $25=HEAP[$24]; //@line 3555 "cPickle.c"
        var $26=($25)!=10; //@line 3555 "cPickle.c"
        if ($26) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 3555 "cPickle.c"
      case 9: // $bb8
        var $27=HEAP[$endptr]; //@line 3555 "cPickle.c"
        var $28=$27+1; //@line 3555 "cPickle.c"
        var $29=HEAP[$28]; //@line 3555 "cPickle.c"
        var $30=($29)!=0; //@line 3555 "cPickle.c"
        if ($30) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3555 "cPickle.c"
      case 10: // $bb9
        var $31=HEAP[_PyExc_ValueError]; //@line 3556 "cPickle.c"
        _PyErr_SetString($31, __str84); //@line 3556 "cPickle.c"
        __label__ = 18; break; //@line 3556 "cPickle.c"
      case 11: // $bb10
        var $32=$d; //@line 3561 "cPickle.c"
        var $33=_PyFloat_FromDouble($32); //@line 3561 "cPickle.c"
        $py_float=$33; //@line 3561 "cPickle.c"
        var $34=$py_float; //@line 3561 "cPickle.c"
        var $35=($34)==0; //@line 3561 "cPickle.c"
        if ($35) { __label__ = 18; break; } else { __label__ = 12; break; } //@line 3561 "cPickle.c"
      case 12: // $bb11
        var $36=HEAP[$s]; //@line 3564 "cPickle.c"
        _free($36); //@line 3564 "cPickle.c"
        var $37=$self_addr; //@line 3565 "cPickle.c"
        var $38=$37+32; //@line 3565 "cPickle.c"
        var $39=HEAP[$38]; //@line 3565 "cPickle.c"
        var $40=$39+8; //@line 3565 "cPickle.c"
        var $41=HEAP[$40]; //@line 3565 "cPickle.c"
        var $42=$self_addr; //@line 3565 "cPickle.c"
        var $43=$42+32; //@line 3565 "cPickle.c"
        var $44=HEAP[$43]; //@line 3565 "cPickle.c"
        var $45=$44+12; //@line 3565 "cPickle.c"
        var $46=HEAP[$45]; //@line 3565 "cPickle.c"
        var $47=($41)==($46); //@line 3565 "cPickle.c"
        if ($47) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 3565 "cPickle.c"
      case 13: // $bb12
        var $48=$self_addr; //@line 3565 "cPickle.c"
        var $49=$48+32; //@line 3565 "cPickle.c"
        var $50=HEAP[$49]; //@line 3565 "cPickle.c"
        var $51=_Pdata_grow($50); //@line 3565 "cPickle.c"
        var $52=($51) < 0; //@line 3565 "cPickle.c"
        if ($52) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 3565 "cPickle.c"
      case 14: // $bb13
        var $53=$py_float; //@line 3565 "cPickle.c"
        var $54=$53; //@line 3565 "cPickle.c"
        var $55=HEAP[$54]; //@line 3565 "cPickle.c"
        var $56=($55) - 1; //@line 3565 "cPickle.c"
        var $57=$py_float; //@line 3565 "cPickle.c"
        var $58=$57; //@line 3565 "cPickle.c"
        HEAP[$58]=$56; //@line 3565 "cPickle.c"
        var $59=$py_float; //@line 3565 "cPickle.c"
        var $60=$59; //@line 3565 "cPickle.c"
        var $61=HEAP[$60]; //@line 3565 "cPickle.c"
        var $62=($61)==0; //@line 3565 "cPickle.c"
        if ($62) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 3565 "cPickle.c"
      case 15: // $bb14
        var $63=$py_float; //@line 3565 "cPickle.c"
        var $64=$63+4; //@line 3565 "cPickle.c"
        var $65=HEAP[$64]; //@line 3565 "cPickle.c"
        var $66=$65+24; //@line 3565 "cPickle.c"
        var $67=HEAP[$66]; //@line 3565 "cPickle.c"
        var $68=$py_float; //@line 3565 "cPickle.c"
        FUNCTION_TABLE[$67]($68); //@line 3565 "cPickle.c"
        __label__ = 16; break; //@line 3565 "cPickle.c"
      case 16: // $bb15
        $0=-1; //@line 3565 "cPickle.c"
        __label__ = 19; break; //@line 3565 "cPickle.c"
      case 17: // $bb16
        var $69=$self_addr; //@line 3565 "cPickle.c"
        var $70=$69+32; //@line 3565 "cPickle.c"
        var $71=HEAP[$70]; //@line 3565 "cPickle.c"
        var $72=$71+16; //@line 3565 "cPickle.c"
        var $73=HEAP[$72]; //@line 3565 "cPickle.c"
        var $74=$self_addr; //@line 3565 "cPickle.c"
        var $75=$74+32; //@line 3565 "cPickle.c"
        var $76=HEAP[$75]; //@line 3565 "cPickle.c"
        var $77=$76+8; //@line 3565 "cPickle.c"
        var $78=HEAP[$77]; //@line 3565 "cPickle.c"
        var $79=$73+4*$78; //@line 3565 "cPickle.c"
        var $80=$py_float; //@line 3565 "cPickle.c"
        HEAP[$79]=$80; //@line 3565 "cPickle.c"
        var $81=($78) + 1; //@line 3565 "cPickle.c"
        var $82=$76+8; //@line 3565 "cPickle.c"
        HEAP[$82]=$81; //@line 3565 "cPickle.c"
        $0=0; //@line 3566 "cPickle.c"
        __label__ = 19; break; //@line 3566 "cPickle.c"
      case 18: // $finally
        var $83=HEAP[$s]; //@line 3569 "cPickle.c"
        _free($83); //@line 3569 "cPickle.c"
        var $84=$res; //@line 3571 "cPickle.c"
        $0=$84; //@line 3571 "cPickle.c"
        __label__ = 19; break; //@line 3571 "cPickle.c"
      case 19: // $bb17
        var $85=$0; //@line 3547 "cPickle.c"
        $retval=$85; //@line 3547 "cPickle.c"
        var $retval18=$retval; //@line 3547 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 3547 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binfloat($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_float;
        var $x;
        var $p=__stackBase__;
        $self_addr=$self;
        var $1=$self_addr; //@line 3581 "cPickle.c"
        var $2=$1+60; //@line 3581 "cPickle.c"
        var $3=HEAP[$2]; //@line 3581 "cPickle.c"
        var $4=$self_addr; //@line 3581 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $p, 8); //@line 3581 "cPickle.c"
        var $6=($5) < 0; //@line 3581 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3581 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3582 "cPickle.c"
        __label__ = 13; break; //@line 3582 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$p]; //@line 3584 "cPickle.c"
        var $8=__PyFloat_Unpack8($7, 0); //@line 3584 "cPickle.c"
        $x=$8; //@line 3584 "cPickle.c"
        var $9=$x; //@line 3585 "cPickle.c"
        var $10=($9) == -1; //@line 3585 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3585 "cPickle.c"
      case 3: // $bb2
        var $11=_PyErr_Occurred(); //@line 3585 "cPickle.c"
        var $12=($11)!=0; //@line 3585 "cPickle.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3585 "cPickle.c"
      case 4: // $bb3
        $0=-1; //@line 3586 "cPickle.c"
        __label__ = 13; break; //@line 3586 "cPickle.c"
      case 5: // $bb4
        var $13=$x; //@line 3588 "cPickle.c"
        var $14=_PyFloat_FromDouble($13); //@line 3588 "cPickle.c"
        $py_float=$14; //@line 3588 "cPickle.c"
        var $15=($14)==0; //@line 3589 "cPickle.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3589 "cPickle.c"
      case 6: // $bb5
        $0=-1; //@line 3590 "cPickle.c"
        __label__ = 13; break; //@line 3590 "cPickle.c"
      case 7: // $bb6
        var $16=$self_addr; //@line 3592 "cPickle.c"
        var $17=$16+32; //@line 3592 "cPickle.c"
        var $18=HEAP[$17]; //@line 3592 "cPickle.c"
        var $19=$18+8; //@line 3592 "cPickle.c"
        var $20=HEAP[$19]; //@line 3592 "cPickle.c"
        var $21=$self_addr; //@line 3592 "cPickle.c"
        var $22=$21+32; //@line 3592 "cPickle.c"
        var $23=HEAP[$22]; //@line 3592 "cPickle.c"
        var $24=$23+12; //@line 3592 "cPickle.c"
        var $25=HEAP[$24]; //@line 3592 "cPickle.c"
        var $26=($20)==($25); //@line 3592 "cPickle.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 3592 "cPickle.c"
      case 8: // $bb7
        var $27=$self_addr; //@line 3592 "cPickle.c"
        var $28=$27+32; //@line 3592 "cPickle.c"
        var $29=HEAP[$28]; //@line 3592 "cPickle.c"
        var $30=_Pdata_grow($29); //@line 3592 "cPickle.c"
        var $31=($30) < 0; //@line 3592 "cPickle.c"
        if ($31) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 3592 "cPickle.c"
      case 9: // $bb8
        var $32=$py_float; //@line 3592 "cPickle.c"
        var $33=$32; //@line 3592 "cPickle.c"
        var $34=HEAP[$33]; //@line 3592 "cPickle.c"
        var $35=($34) - 1; //@line 3592 "cPickle.c"
        var $36=$py_float; //@line 3592 "cPickle.c"
        var $37=$36; //@line 3592 "cPickle.c"
        HEAP[$37]=$35; //@line 3592 "cPickle.c"
        var $38=$py_float; //@line 3592 "cPickle.c"
        var $39=$38; //@line 3592 "cPickle.c"
        var $40=HEAP[$39]; //@line 3592 "cPickle.c"
        var $41=($40)==0; //@line 3592 "cPickle.c"
        if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3592 "cPickle.c"
      case 10: // $bb9
        var $42=$py_float; //@line 3592 "cPickle.c"
        var $43=$42+4; //@line 3592 "cPickle.c"
        var $44=HEAP[$43]; //@line 3592 "cPickle.c"
        var $45=$44+24; //@line 3592 "cPickle.c"
        var $46=HEAP[$45]; //@line 3592 "cPickle.c"
        var $47=$py_float; //@line 3592 "cPickle.c"
        FUNCTION_TABLE[$46]($47); //@line 3592 "cPickle.c"
        __label__ = 11; break; //@line 3592 "cPickle.c"
      case 11: // $bb10
        $0=-1; //@line 3592 "cPickle.c"
        __label__ = 13; break; //@line 3592 "cPickle.c"
      case 12: // $bb11
        var $48=$self_addr; //@line 3592 "cPickle.c"
        var $49=$48+32; //@line 3592 "cPickle.c"
        var $50=HEAP[$49]; //@line 3592 "cPickle.c"
        var $51=$50+16; //@line 3592 "cPickle.c"
        var $52=HEAP[$51]; //@line 3592 "cPickle.c"
        var $53=$self_addr; //@line 3592 "cPickle.c"
        var $54=$53+32; //@line 3592 "cPickle.c"
        var $55=HEAP[$54]; //@line 3592 "cPickle.c"
        var $56=$55+8; //@line 3592 "cPickle.c"
        var $57=HEAP[$56]; //@line 3592 "cPickle.c"
        var $58=$52+4*$57; //@line 3592 "cPickle.c"
        var $59=$py_float; //@line 3592 "cPickle.c"
        HEAP[$58]=$59; //@line 3592 "cPickle.c"
        var $60=($57) + 1; //@line 3592 "cPickle.c"
        var $61=$55+8; //@line 3592 "cPickle.c"
        HEAP[$61]=$60; //@line 3592 "cPickle.c"
        $0=0; //@line 3593 "cPickle.c"
        __label__ = 13; break; //@line 3593 "cPickle.c"
      case 13: // $bb12
        var $62=$0; //@line 3582 "cPickle.c"
        $retval=$62; //@line 3582 "cPickle.c"
        var $retval13=$retval; //@line 3582 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 3582 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_string($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $str;
        var $len;
        var $res;
        var $s=__stackBase__;
        var $p;
        $self_addr=$self;
        $str=0; //@line 3599 "cPickle.c"
        $res=-1; //@line 3600 "cPickle.c"
        var $1=$self_addr; //@line 3603 "cPickle.c"
        var $2=$1+64; //@line 3603 "cPickle.c"
        var $3=HEAP[$2]; //@line 3603 "cPickle.c"
        var $4=$self_addr; //@line 3603 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 3603 "cPickle.c"
        $len=$5; //@line 3603 "cPickle.c"
        var $6=$len; //@line 3603 "cPickle.c"
        var $7=($6) < 0; //@line 3603 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3603 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3603 "cPickle.c"
        __label__ = 23; break; //@line 3603 "cPickle.c"
      case 2: // $bb1
        var $8=$len; //@line 3604 "cPickle.c"
        var $9=($8) <= 1; //@line 3604 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3604 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 3604 "cPickle.c"
        $0=$10; //@line 3604 "cPickle.c"
        __label__ = 23; break; //@line 3604 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$s]; //@line 3605 "cPickle.c"
        var $12=$len; //@line 3605 "cPickle.c"
        var $13=_pystrndup($11, $12); //@line 3605 "cPickle.c"
        HEAP[$s]=$13; //@line 3605 "cPickle.c"
        var $14=HEAP[$s]; //@line 3605 "cPickle.c"
        var $15=($14)==0; //@line 3605 "cPickle.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 3605 "cPickle.c"
      case 5: // $bb7_preheader
        var $16=HEAP[$s]; //@line 3609 "cPickle.c"
        var $17=$len; //@line 3609 "cPickle.c"
        var $18=($17) - 1; //@line 3609 "cPickle.c"
        var $19=$16+$18; //@line 3609 "cPickle.c"
        var $20=HEAP[$19]; //@line 3609 "cPickle.c"
        var $21=($20) <= 32; //@line 3609 "cPickle.c"
        if ($21) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3609 "cPickle.c"
      case 6: // $bb4
        $0=-1; //@line 3605 "cPickle.c"
        __label__ = 23; break; //@line 3605 "cPickle.c"
      case 7: // $bb6
        var $22=$len; //@line 3610 "cPickle.c"
        var $23=($22) - 1; //@line 3610 "cPickle.c"
        $len=$23; //@line 3610 "cPickle.c"
        var $24=HEAP[$s]; //@line 3609 "cPickle.c"
        var $25=$len; //@line 3609 "cPickle.c"
        var $26=($25) - 1; //@line 3609 "cPickle.c"
        var $27=$24+$26; //@line 3609 "cPickle.c"
        var $28=HEAP[$27]; //@line 3609 "cPickle.c"
        var $29=($28) <= 32; //@line 3609 "cPickle.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3609 "cPickle.c"
      case 8: // $bb8
        var $30=HEAP[$s]; //@line 3611 "cPickle.c"
        var $31=$30; //@line 3611 "cPickle.c"
        var $32=HEAP[$31]; //@line 3611 "cPickle.c"
        var $33=($32)!=34; //@line 3611 "cPickle.c"
        if ($33) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 3611 "cPickle.c"
      case 9: // $bb9
        var $34=HEAP[$s]; //@line 3611 "cPickle.c"
        var $35=$len; //@line 3611 "cPickle.c"
        var $36=($35) - 1; //@line 3611 "cPickle.c"
        var $37=$34+$36; //@line 3611 "cPickle.c"
        var $38=HEAP[$37]; //@line 3611 "cPickle.c"
        var $39=($38)!=34; //@line 3611 "cPickle.c"
        if ($39) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 3611 "cPickle.c"
      case 10: // $bb10
        var $40=HEAP[$s]; //@line 3612 "cPickle.c"
        var $41=$len; //@line 3612 "cPickle.c"
        var $42=($41) - 1; //@line 3612 "cPickle.c"
        var $43=$40+$42; //@line 3612 "cPickle.c"
        HEAP[$43]=0; //@line 3612 "cPickle.c"
        var $44=HEAP[$s]; //@line 3613 "cPickle.c"
        var $45=$44+1; //@line 3613 "cPickle.c"
        $p=$45; //@line 3613 "cPickle.c"
        var $46=$len; //@line 3614 "cPickle.c"
        var $47=($46) - 2; //@line 3614 "cPickle.c"
        $len=$47; //@line 3614 "cPickle.c"
        __label__ = 14; break; //@line 3614 "cPickle.c"
      case 11: // $bb11
        var $48=HEAP[$s]; //@line 3615 "cPickle.c"
        var $49=$48; //@line 3615 "cPickle.c"
        var $50=HEAP[$49]; //@line 3615 "cPickle.c"
        var $51=($50)!=39; //@line 3615 "cPickle.c"
        if ($51) { __label__ = 22; break; } else { __label__ = 12; break; } //@line 3615 "cPickle.c"
      case 12: // $bb12
        var $52=HEAP[$s]; //@line 3615 "cPickle.c"
        var $53=$len; //@line 3615 "cPickle.c"
        var $54=($53) - 1; //@line 3615 "cPickle.c"
        var $55=$52+$54; //@line 3615 "cPickle.c"
        var $56=HEAP[$55]; //@line 3615 "cPickle.c"
        var $57=($56)!=39; //@line 3615 "cPickle.c"
        if ($57) { __label__ = 22; break; } else { __label__ = 13; break; } //@line 3615 "cPickle.c"
      case 13: // $bb13
        var $58=HEAP[$s]; //@line 3616 "cPickle.c"
        var $59=$len; //@line 3616 "cPickle.c"
        var $60=($59) - 1; //@line 3616 "cPickle.c"
        var $61=$58+$60; //@line 3616 "cPickle.c"
        HEAP[$61]=0; //@line 3616 "cPickle.c"
        var $62=HEAP[$s]; //@line 3617 "cPickle.c"
        var $63=$62+1; //@line 3617 "cPickle.c"
        $p=$63; //@line 3617 "cPickle.c"
        var $64=$len; //@line 3618 "cPickle.c"
        var $65=($64) - 2; //@line 3618 "cPickle.c"
        $len=$65; //@line 3618 "cPickle.c"
        __label__ = 14; break; //@line 3618 "cPickle.c"
      case 14: // $bb14
        var $66=$p; //@line 3623 "cPickle.c"
        var $67=$len; //@line 3623 "cPickle.c"
        var $68=_PyString_DecodeEscape($66, $67, 0, 0, 0); //@line 3623 "cPickle.c"
        $str=$68; //@line 3623 "cPickle.c"
        var $69=HEAP[$s]; //@line 3624 "cPickle.c"
        _free($69); //@line 3624 "cPickle.c"
        var $70=$str; //@line 3625 "cPickle.c"
        var $71=($70)!=0; //@line 3625 "cPickle.c"
        if ($71) { __label__ = 15; break; } else { __label__ = 21; break; } //@line 3625 "cPickle.c"
      case 15: // $bb15
        var $72=$self_addr; //@line 3626 "cPickle.c"
        var $73=$72+32; //@line 3626 "cPickle.c"
        var $74=HEAP[$73]; //@line 3626 "cPickle.c"
        var $75=$74+8; //@line 3626 "cPickle.c"
        var $76=HEAP[$75]; //@line 3626 "cPickle.c"
        var $77=$self_addr; //@line 3626 "cPickle.c"
        var $78=$77+32; //@line 3626 "cPickle.c"
        var $79=HEAP[$78]; //@line 3626 "cPickle.c"
        var $80=$79+12; //@line 3626 "cPickle.c"
        var $81=HEAP[$80]; //@line 3626 "cPickle.c"
        var $82=($76)==($81); //@line 3626 "cPickle.c"
        if ($82) { __label__ = 16; break; } else { __label__ = 20; break; } //@line 3626 "cPickle.c"
      case 16: // $bb16
        var $83=$self_addr; //@line 3626 "cPickle.c"
        var $84=$83+32; //@line 3626 "cPickle.c"
        var $85=HEAP[$84]; //@line 3626 "cPickle.c"
        var $86=_Pdata_grow($85); //@line 3626 "cPickle.c"
        var $87=($86) < 0; //@line 3626 "cPickle.c"
        if ($87) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 3626 "cPickle.c"
      case 17: // $bb17
        var $88=$str; //@line 3626 "cPickle.c"
        var $89=$88; //@line 3626 "cPickle.c"
        var $90=HEAP[$89]; //@line 3626 "cPickle.c"
        var $91=($90) - 1; //@line 3626 "cPickle.c"
        var $92=$str; //@line 3626 "cPickle.c"
        var $93=$92; //@line 3626 "cPickle.c"
        HEAP[$93]=$91; //@line 3626 "cPickle.c"
        var $94=$str; //@line 3626 "cPickle.c"
        var $95=$94; //@line 3626 "cPickle.c"
        var $96=HEAP[$95]; //@line 3626 "cPickle.c"
        var $97=($96)==0; //@line 3626 "cPickle.c"
        if ($97) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3626 "cPickle.c"
      case 18: // $bb18
        var $98=$str; //@line 3626 "cPickle.c"
        var $99=$98+4; //@line 3626 "cPickle.c"
        var $100=HEAP[$99]; //@line 3626 "cPickle.c"
        var $101=$100+24; //@line 3626 "cPickle.c"
        var $102=HEAP[$101]; //@line 3626 "cPickle.c"
        var $103=$str; //@line 3626 "cPickle.c"
        FUNCTION_TABLE[$102]($103); //@line 3626 "cPickle.c"
        __label__ = 19; break; //@line 3626 "cPickle.c"
      case 19: // $bb19
        $0=-1; //@line 3626 "cPickle.c"
        __label__ = 23; break; //@line 3626 "cPickle.c"
      case 20: // $bb20
        var $104=$self_addr; //@line 3626 "cPickle.c"
        var $105=$104+32; //@line 3626 "cPickle.c"
        var $106=HEAP[$105]; //@line 3626 "cPickle.c"
        var $107=$106+16; //@line 3626 "cPickle.c"
        var $108=HEAP[$107]; //@line 3626 "cPickle.c"
        var $109=$self_addr; //@line 3626 "cPickle.c"
        var $110=$109+32; //@line 3626 "cPickle.c"
        var $111=HEAP[$110]; //@line 3626 "cPickle.c"
        var $112=$111+8; //@line 3626 "cPickle.c"
        var $113=HEAP[$112]; //@line 3626 "cPickle.c"
        var $114=$108+4*$113; //@line 3626 "cPickle.c"
        var $115=$str; //@line 3626 "cPickle.c"
        HEAP[$114]=$115; //@line 3626 "cPickle.c"
        var $116=($113) + 1; //@line 3626 "cPickle.c"
        var $117=$111+8; //@line 3626 "cPickle.c"
        HEAP[$117]=$116; //@line 3626 "cPickle.c"
        $res=0; //@line 3627 "cPickle.c"
        __label__ = 21; break; //@line 3627 "cPickle.c"
      case 21: // $bb21
        var $118=$res; //@line 3629 "cPickle.c"
        $0=$118; //@line 3629 "cPickle.c"
        __label__ = 23; break; //@line 3629 "cPickle.c"
      case 22: // $insecure
        var $119=HEAP[$s]; //@line 3632 "cPickle.c"
        _free($119); //@line 3632 "cPickle.c"
        var $120=HEAP[_PyExc_ValueError]; //@line 3633 "cPickle.c"
        _PyErr_SetString($120, __str85); //@line 3633 "cPickle.c"
        $0=-1; //@line 3634 "cPickle.c"
        __label__ = 23; break; //@line 3634 "cPickle.c"
      case 23: // $bb22
        var $121=$0; //@line 3603 "cPickle.c"
        $retval=$121; //@line 3603 "cPickle.c"
        var $retval23=$retval; //@line 3603 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 3603 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binstring($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_string;
        var $l;
        var $s=__stackBase__;
        $self_addr=$self;
        $py_string=0; //@line 3641 "cPickle.c"
        var $1=$self_addr; //@line 3645 "cPickle.c"
        var $2=$1+60; //@line 3645 "cPickle.c"
        var $3=HEAP[$2]; //@line 3645 "cPickle.c"
        var $4=$self_addr; //@line 3645 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 4); //@line 3645 "cPickle.c"
        var $6=($5) < 0; //@line 3645 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3645 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3645 "cPickle.c"
        __label__ = 14; break; //@line 3645 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3647 "cPickle.c"
        var $8=_calc_binint($7, 4); //@line 3647 "cPickle.c"
        $l=$8; //@line 3647 "cPickle.c"
        var $9=$l; //@line 3648 "cPickle.c"
        var $10=($9) < 0; //@line 3648 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3648 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[_UnpicklingError]; //@line 3652 "cPickle.c"
        _PyErr_SetString($11, __str86); //@line 3652 "cPickle.c"
        $0=-1; //@line 3654 "cPickle.c"
        __label__ = 14; break; //@line 3654 "cPickle.c"
      case 4: // $bb3
        var $12=$self_addr; //@line 3657 "cPickle.c"
        var $13=$12+60; //@line 3657 "cPickle.c"
        var $14=HEAP[$13]; //@line 3657 "cPickle.c"
        var $15=$self_addr; //@line 3657 "cPickle.c"
        var $16=$l; //@line 3657 "cPickle.c"
        var $17=FUNCTION_TABLE[$14]($15, $s, $16); //@line 3657 "cPickle.c"
        var $18=($17) < 0; //@line 3657 "cPickle.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3657 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 3658 "cPickle.c"
        __label__ = 14; break; //@line 3658 "cPickle.c"
      case 6: // $bb5
        var $19=HEAP[$s]; //@line 3660 "cPickle.c"
        var $20=$l; //@line 3660 "cPickle.c"
        var $21=_PyString_FromStringAndSize($19, $20); //@line 3660 "cPickle.c"
        $py_string=$21; //@line 3660 "cPickle.c"
        var $22=$py_string; //@line 3660 "cPickle.c"
        var $23=($22)==0; //@line 3660 "cPickle.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3660 "cPickle.c"
      case 7: // $bb6
        $0=-1; //@line 3661 "cPickle.c"
        __label__ = 14; break; //@line 3661 "cPickle.c"
      case 8: // $bb7
        var $24=$self_addr; //@line 3663 "cPickle.c"
        var $25=$24+32; //@line 3663 "cPickle.c"
        var $26=HEAP[$25]; //@line 3663 "cPickle.c"
        var $27=$26+8; //@line 3663 "cPickle.c"
        var $28=HEAP[$27]; //@line 3663 "cPickle.c"
        var $29=$self_addr; //@line 3663 "cPickle.c"
        var $30=$29+32; //@line 3663 "cPickle.c"
        var $31=HEAP[$30]; //@line 3663 "cPickle.c"
        var $32=$31+12; //@line 3663 "cPickle.c"
        var $33=HEAP[$32]; //@line 3663 "cPickle.c"
        var $34=($28)==($33); //@line 3663 "cPickle.c"
        if ($34) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 3663 "cPickle.c"
      case 9: // $bb8
        var $35=$self_addr; //@line 3663 "cPickle.c"
        var $36=$35+32; //@line 3663 "cPickle.c"
        var $37=HEAP[$36]; //@line 3663 "cPickle.c"
        var $38=_Pdata_grow($37); //@line 3663 "cPickle.c"
        var $39=($38) < 0; //@line 3663 "cPickle.c"
        if ($39) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 3663 "cPickle.c"
      case 10: // $bb9
        var $40=$py_string; //@line 3663 "cPickle.c"
        var $41=$40; //@line 3663 "cPickle.c"
        var $42=HEAP[$41]; //@line 3663 "cPickle.c"
        var $43=($42) - 1; //@line 3663 "cPickle.c"
        var $44=$py_string; //@line 3663 "cPickle.c"
        var $45=$44; //@line 3663 "cPickle.c"
        HEAP[$45]=$43; //@line 3663 "cPickle.c"
        var $46=$py_string; //@line 3663 "cPickle.c"
        var $47=$46; //@line 3663 "cPickle.c"
        var $48=HEAP[$47]; //@line 3663 "cPickle.c"
        var $49=($48)==0; //@line 3663 "cPickle.c"
        if ($49) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3663 "cPickle.c"
      case 11: // $bb10
        var $50=$py_string; //@line 3663 "cPickle.c"
        var $51=$50+4; //@line 3663 "cPickle.c"
        var $52=HEAP[$51]; //@line 3663 "cPickle.c"
        var $53=$52+24; //@line 3663 "cPickle.c"
        var $54=HEAP[$53]; //@line 3663 "cPickle.c"
        var $55=$py_string; //@line 3663 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 3663 "cPickle.c"
        __label__ = 12; break; //@line 3663 "cPickle.c"
      case 12: // $bb11
        $0=-1; //@line 3663 "cPickle.c"
        __label__ = 14; break; //@line 3663 "cPickle.c"
      case 13: // $bb12
        var $56=$self_addr; //@line 3663 "cPickle.c"
        var $57=$56+32; //@line 3663 "cPickle.c"
        var $58=HEAP[$57]; //@line 3663 "cPickle.c"
        var $59=$58+16; //@line 3663 "cPickle.c"
        var $60=HEAP[$59]; //@line 3663 "cPickle.c"
        var $61=$self_addr; //@line 3663 "cPickle.c"
        var $62=$61+32; //@line 3663 "cPickle.c"
        var $63=HEAP[$62]; //@line 3663 "cPickle.c"
        var $64=$63+8; //@line 3663 "cPickle.c"
        var $65=HEAP[$64]; //@line 3663 "cPickle.c"
        var $66=$60+4*$65; //@line 3663 "cPickle.c"
        var $67=$py_string; //@line 3663 "cPickle.c"
        HEAP[$66]=$67; //@line 3663 "cPickle.c"
        var $68=($65) + 1; //@line 3663 "cPickle.c"
        var $69=$63+8; //@line 3663 "cPickle.c"
        HEAP[$69]=$68; //@line 3663 "cPickle.c"
        $0=0; //@line 3664 "cPickle.c"
        __label__ = 14; break; //@line 3664 "cPickle.c"
      case 14: // $bb13
        var $70=$0; //@line 3645 "cPickle.c"
        $retval=$70; //@line 3645 "cPickle.c"
        var $retval14=$retval; //@line 3645 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 3645 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_short_binstring($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_string;
        var $l;
        var $s=__stackBase__;
        $self_addr=$self;
        $py_string=0; //@line 3671 "cPickle.c"
        var $1=$self_addr; //@line 3675 "cPickle.c"
        var $2=$1+60; //@line 3675 "cPickle.c"
        var $3=HEAP[$2]; //@line 3675 "cPickle.c"
        var $4=$self_addr; //@line 3675 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 1); //@line 3675 "cPickle.c"
        var $6=($5) < 0; //@line 3675 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3675 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3676 "cPickle.c"
        __label__ = 12; break; //@line 3676 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3678 "cPickle.c"
        var $8=$7; //@line 3678 "cPickle.c"
        var $9=HEAP[$8]; //@line 3678 "cPickle.c"
        $l=$9; //@line 3678 "cPickle.c"
        var $10=$self_addr; //@line 3680 "cPickle.c"
        var $11=$10+60; //@line 3680 "cPickle.c"
        var $12=HEAP[$11]; //@line 3680 "cPickle.c"
        var $13=$l; //@line 3680 "cPickle.c"
        var $14=($13); //@line 3680 "cPickle.c"
        var $15=$self_addr; //@line 3680 "cPickle.c"
        var $16=FUNCTION_TABLE[$12]($15, $s, $14); //@line 3680 "cPickle.c"
        var $17=($16) < 0; //@line 3680 "cPickle.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3680 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 3680 "cPickle.c"
        __label__ = 12; break; //@line 3680 "cPickle.c"
      case 4: // $bb3
        var $18=$l; //@line 3682 "cPickle.c"
        var $19=($18); //@line 3682 "cPickle.c"
        var $20=HEAP[$s]; //@line 3682 "cPickle.c"
        var $21=_PyString_FromStringAndSize($20, $19); //@line 3682 "cPickle.c"
        $py_string=$21; //@line 3682 "cPickle.c"
        var $22=$py_string; //@line 3682 "cPickle.c"
        var $23=($22)==0; //@line 3682 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3682 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 3682 "cPickle.c"
        __label__ = 12; break; //@line 3682 "cPickle.c"
      case 6: // $bb5
        var $24=$self_addr; //@line 3684 "cPickle.c"
        var $25=$24+32; //@line 3684 "cPickle.c"
        var $26=HEAP[$25]; //@line 3684 "cPickle.c"
        var $27=$26+8; //@line 3684 "cPickle.c"
        var $28=HEAP[$27]; //@line 3684 "cPickle.c"
        var $29=$self_addr; //@line 3684 "cPickle.c"
        var $30=$29+32; //@line 3684 "cPickle.c"
        var $31=HEAP[$30]; //@line 3684 "cPickle.c"
        var $32=$31+12; //@line 3684 "cPickle.c"
        var $33=HEAP[$32]; //@line 3684 "cPickle.c"
        var $34=($28)==($33); //@line 3684 "cPickle.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 3684 "cPickle.c"
      case 7: // $bb6
        var $35=$self_addr; //@line 3684 "cPickle.c"
        var $36=$35+32; //@line 3684 "cPickle.c"
        var $37=HEAP[$36]; //@line 3684 "cPickle.c"
        var $38=_Pdata_grow($37); //@line 3684 "cPickle.c"
        var $39=($38) < 0; //@line 3684 "cPickle.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 3684 "cPickle.c"
      case 8: // $bb7
        var $40=$py_string; //@line 3684 "cPickle.c"
        var $41=$40; //@line 3684 "cPickle.c"
        var $42=HEAP[$41]; //@line 3684 "cPickle.c"
        var $43=($42) - 1; //@line 3684 "cPickle.c"
        var $44=$py_string; //@line 3684 "cPickle.c"
        var $45=$44; //@line 3684 "cPickle.c"
        HEAP[$45]=$43; //@line 3684 "cPickle.c"
        var $46=$py_string; //@line 3684 "cPickle.c"
        var $47=$46; //@line 3684 "cPickle.c"
        var $48=HEAP[$47]; //@line 3684 "cPickle.c"
        var $49=($48)==0; //@line 3684 "cPickle.c"
        if ($49) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3684 "cPickle.c"
      case 9: // $bb8
        var $50=$py_string; //@line 3684 "cPickle.c"
        var $51=$50+4; //@line 3684 "cPickle.c"
        var $52=HEAP[$51]; //@line 3684 "cPickle.c"
        var $53=$52+24; //@line 3684 "cPickle.c"
        var $54=HEAP[$53]; //@line 3684 "cPickle.c"
        var $55=$py_string; //@line 3684 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 3684 "cPickle.c"
        __label__ = 10; break; //@line 3684 "cPickle.c"
      case 10: // $bb9
        $0=-1; //@line 3684 "cPickle.c"
        __label__ = 12; break; //@line 3684 "cPickle.c"
      case 11: // $bb10
        var $56=$self_addr; //@line 3684 "cPickle.c"
        var $57=$56+32; //@line 3684 "cPickle.c"
        var $58=HEAP[$57]; //@line 3684 "cPickle.c"
        var $59=$58+16; //@line 3684 "cPickle.c"
        var $60=HEAP[$59]; //@line 3684 "cPickle.c"
        var $61=$self_addr; //@line 3684 "cPickle.c"
        var $62=$61+32; //@line 3684 "cPickle.c"
        var $63=HEAP[$62]; //@line 3684 "cPickle.c"
        var $64=$63+8; //@line 3684 "cPickle.c"
        var $65=HEAP[$64]; //@line 3684 "cPickle.c"
        var $66=$60+4*$65; //@line 3684 "cPickle.c"
        var $67=$py_string; //@line 3684 "cPickle.c"
        HEAP[$66]=$67; //@line 3684 "cPickle.c"
        var $68=($65) + 1; //@line 3684 "cPickle.c"
        var $69=$63+8; //@line 3684 "cPickle.c"
        HEAP[$69]=$68; //@line 3684 "cPickle.c"
        $0=0; //@line 3685 "cPickle.c"
        __label__ = 12; break; //@line 3685 "cPickle.c"
      case 12: // $bb11
        var $70=$0; //@line 3676 "cPickle.c"
        $retval=$70; //@line 3676 "cPickle.c"
        var $retval12=$retval; //@line 3676 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 3676 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_unicode($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $str;
        var $len;
        var $res;
        var $s=__stackBase__;
        $self_addr=$self;
        $str=0; //@line 3693 "cPickle.c"
        $res=-1; //@line 3694 "cPickle.c"
        var $1=$self_addr; //@line 3697 "cPickle.c"
        var $2=$1+64; //@line 3697 "cPickle.c"
        var $3=HEAP[$2]; //@line 3697 "cPickle.c"
        var $4=$self_addr; //@line 3697 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 3697 "cPickle.c"
        $len=$5; //@line 3697 "cPickle.c"
        var $6=$len; //@line 3697 "cPickle.c"
        var $7=($6) < 0; //@line 3697 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3697 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3697 "cPickle.c"
        __label__ = 12; break; //@line 3697 "cPickle.c"
      case 2: // $bb1
        var $8=$len; //@line 3698 "cPickle.c"
        var $9=($8) <= 0; //@line 3698 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3698 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 3698 "cPickle.c"
        $0=$10; //@line 3698 "cPickle.c"
        __label__ = 12; break; //@line 3698 "cPickle.c"
      case 4: // $bb3
        var $11=$len; //@line 3700 "cPickle.c"
        var $12=($11) - 1; //@line 3700 "cPickle.c"
        var $13=HEAP[$s]; //@line 3700 "cPickle.c"
        var $14=_PyUnicodeUCS2_DecodeRawUnicodeEscape($13, $12, 0); //@line 3700 "cPickle.c"
        $str=$14; //@line 3700 "cPickle.c"
        var $15=$str; //@line 3700 "cPickle.c"
        var $16=($15)==0; //@line 3700 "cPickle.c"
        if ($16) { __label__ = 11; break; } else { __label__ = 5; break; } //@line 3700 "cPickle.c"
      case 5: // $bb4
        var $17=$self_addr; //@line 3703 "cPickle.c"
        var $18=$17+32; //@line 3703 "cPickle.c"
        var $19=HEAP[$18]; //@line 3703 "cPickle.c"
        var $20=$19+8; //@line 3703 "cPickle.c"
        var $21=HEAP[$20]; //@line 3703 "cPickle.c"
        var $22=$self_addr; //@line 3703 "cPickle.c"
        var $23=$22+32; //@line 3703 "cPickle.c"
        var $24=HEAP[$23]; //@line 3703 "cPickle.c"
        var $25=$24+12; //@line 3703 "cPickle.c"
        var $26=HEAP[$25]; //@line 3703 "cPickle.c"
        var $27=($21)==($26); //@line 3703 "cPickle.c"
        if ($27) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 3703 "cPickle.c"
      case 6: // $bb5
        var $28=$self_addr; //@line 3703 "cPickle.c"
        var $29=$28+32; //@line 3703 "cPickle.c"
        var $30=HEAP[$29]; //@line 3703 "cPickle.c"
        var $31=_Pdata_grow($30); //@line 3703 "cPickle.c"
        var $32=($31) < 0; //@line 3703 "cPickle.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 3703 "cPickle.c"
      case 7: // $bb6
        var $33=$str; //@line 3703 "cPickle.c"
        var $34=$33; //@line 3703 "cPickle.c"
        var $35=HEAP[$34]; //@line 3703 "cPickle.c"
        var $36=($35) - 1; //@line 3703 "cPickle.c"
        var $37=$str; //@line 3703 "cPickle.c"
        var $38=$37; //@line 3703 "cPickle.c"
        HEAP[$38]=$36; //@line 3703 "cPickle.c"
        var $39=$str; //@line 3703 "cPickle.c"
        var $40=$39; //@line 3703 "cPickle.c"
        var $41=HEAP[$40]; //@line 3703 "cPickle.c"
        var $42=($41)==0; //@line 3703 "cPickle.c"
        if ($42) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3703 "cPickle.c"
      case 8: // $bb7
        var $43=$str; //@line 3703 "cPickle.c"
        var $44=$43+4; //@line 3703 "cPickle.c"
        var $45=HEAP[$44]; //@line 3703 "cPickle.c"
        var $46=$45+24; //@line 3703 "cPickle.c"
        var $47=HEAP[$46]; //@line 3703 "cPickle.c"
        var $48=$str; //@line 3703 "cPickle.c"
        FUNCTION_TABLE[$47]($48); //@line 3703 "cPickle.c"
        __label__ = 9; break; //@line 3703 "cPickle.c"
      case 9: // $bb8
        $0=-1; //@line 3703 "cPickle.c"
        __label__ = 12; break; //@line 3703 "cPickle.c"
      case 10: // $bb9
        var $49=$self_addr; //@line 3703 "cPickle.c"
        var $50=$49+32; //@line 3703 "cPickle.c"
        var $51=HEAP[$50]; //@line 3703 "cPickle.c"
        var $52=$51+16; //@line 3703 "cPickle.c"
        var $53=HEAP[$52]; //@line 3703 "cPickle.c"
        var $54=$self_addr; //@line 3703 "cPickle.c"
        var $55=$54+32; //@line 3703 "cPickle.c"
        var $56=HEAP[$55]; //@line 3703 "cPickle.c"
        var $57=$56+8; //@line 3703 "cPickle.c"
        var $58=HEAP[$57]; //@line 3703 "cPickle.c"
        var $59=$53+4*$58; //@line 3703 "cPickle.c"
        var $60=$str; //@line 3703 "cPickle.c"
        HEAP[$59]=$60; //@line 3703 "cPickle.c"
        var $61=($58) + 1; //@line 3703 "cPickle.c"
        var $62=$56+8; //@line 3703 "cPickle.c"
        HEAP[$62]=$61; //@line 3703 "cPickle.c"
        $0=0; //@line 3704 "cPickle.c"
        __label__ = 12; break; //@line 3704 "cPickle.c"
      case 11: // $finally
        var $63=$res; //@line 3707 "cPickle.c"
        $0=$63; //@line 3707 "cPickle.c"
        __label__ = 12; break; //@line 3707 "cPickle.c"
      case 12: // $bb10
        var $64=$0; //@line 3697 "cPickle.c"
        $retval=$64; //@line 3697 "cPickle.c"
        var $retval11=$retval; //@line 3697 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 3697 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binunicode($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $unicode;
        var $l;
        var $s=__stackBase__;
        $self_addr=$self;
        var $1=$self_addr; //@line 3720 "cPickle.c"
        var $2=$1+60; //@line 3720 "cPickle.c"
        var $3=HEAP[$2]; //@line 3720 "cPickle.c"
        var $4=$self_addr; //@line 3720 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 4); //@line 3720 "cPickle.c"
        var $6=($5) < 0; //@line 3720 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3720 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3720 "cPickle.c"
        __label__ = 14; break; //@line 3720 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3722 "cPickle.c"
        var $8=_calc_binint($7, 4); //@line 3722 "cPickle.c"
        $l=$8; //@line 3722 "cPickle.c"
        var $9=$l; //@line 3723 "cPickle.c"
        var $10=($9) < 0; //@line 3723 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3723 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[_UnpicklingError]; //@line 3727 "cPickle.c"
        _PyErr_SetString($11, __str87); //@line 3727 "cPickle.c"
        $0=-1; //@line 3729 "cPickle.c"
        __label__ = 14; break; //@line 3729 "cPickle.c"
      case 4: // $bb3
        var $12=$self_addr; //@line 3732 "cPickle.c"
        var $13=$12+60; //@line 3732 "cPickle.c"
        var $14=HEAP[$13]; //@line 3732 "cPickle.c"
        var $15=$self_addr; //@line 3732 "cPickle.c"
        var $16=$l; //@line 3732 "cPickle.c"
        var $17=FUNCTION_TABLE[$14]($15, $s, $16); //@line 3732 "cPickle.c"
        var $18=($17) < 0; //@line 3732 "cPickle.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3732 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 3733 "cPickle.c"
        __label__ = 14; break; //@line 3733 "cPickle.c"
      case 6: // $bb5
        var $19=HEAP[$s]; //@line 3735 "cPickle.c"
        var $20=$l; //@line 3735 "cPickle.c"
        var $21=_PyUnicodeUCS2_DecodeUTF8($19, $20, 0); //@line 3735 "cPickle.c"
        $unicode=$21; //@line 3735 "cPickle.c"
        var $22=$unicode; //@line 3735 "cPickle.c"
        var $23=($22)==0; //@line 3735 "cPickle.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3735 "cPickle.c"
      case 7: // $bb6
        $0=-1; //@line 3736 "cPickle.c"
        __label__ = 14; break; //@line 3736 "cPickle.c"
      case 8: // $bb7
        var $24=$self_addr; //@line 3738 "cPickle.c"
        var $25=$24+32; //@line 3738 "cPickle.c"
        var $26=HEAP[$25]; //@line 3738 "cPickle.c"
        var $27=$26+8; //@line 3738 "cPickle.c"
        var $28=HEAP[$27]; //@line 3738 "cPickle.c"
        var $29=$self_addr; //@line 3738 "cPickle.c"
        var $30=$29+32; //@line 3738 "cPickle.c"
        var $31=HEAP[$30]; //@line 3738 "cPickle.c"
        var $32=$31+12; //@line 3738 "cPickle.c"
        var $33=HEAP[$32]; //@line 3738 "cPickle.c"
        var $34=($28)==($33); //@line 3738 "cPickle.c"
        if ($34) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 3738 "cPickle.c"
      case 9: // $bb8
        var $35=$self_addr; //@line 3738 "cPickle.c"
        var $36=$35+32; //@line 3738 "cPickle.c"
        var $37=HEAP[$36]; //@line 3738 "cPickle.c"
        var $38=_Pdata_grow($37); //@line 3738 "cPickle.c"
        var $39=($38) < 0; //@line 3738 "cPickle.c"
        if ($39) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 3738 "cPickle.c"
      case 10: // $bb9
        var $40=$unicode; //@line 3738 "cPickle.c"
        var $41=$40; //@line 3738 "cPickle.c"
        var $42=HEAP[$41]; //@line 3738 "cPickle.c"
        var $43=($42) - 1; //@line 3738 "cPickle.c"
        var $44=$unicode; //@line 3738 "cPickle.c"
        var $45=$44; //@line 3738 "cPickle.c"
        HEAP[$45]=$43; //@line 3738 "cPickle.c"
        var $46=$unicode; //@line 3738 "cPickle.c"
        var $47=$46; //@line 3738 "cPickle.c"
        var $48=HEAP[$47]; //@line 3738 "cPickle.c"
        var $49=($48)==0; //@line 3738 "cPickle.c"
        if ($49) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3738 "cPickle.c"
      case 11: // $bb10
        var $50=$unicode; //@line 3738 "cPickle.c"
        var $51=$50+4; //@line 3738 "cPickle.c"
        var $52=HEAP[$51]; //@line 3738 "cPickle.c"
        var $53=$52+24; //@line 3738 "cPickle.c"
        var $54=HEAP[$53]; //@line 3738 "cPickle.c"
        var $55=$unicode; //@line 3738 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 3738 "cPickle.c"
        __label__ = 12; break; //@line 3738 "cPickle.c"
      case 12: // $bb11
        $0=-1; //@line 3738 "cPickle.c"
        __label__ = 14; break; //@line 3738 "cPickle.c"
      case 13: // $bb12
        var $56=$self_addr; //@line 3738 "cPickle.c"
        var $57=$56+32; //@line 3738 "cPickle.c"
        var $58=HEAP[$57]; //@line 3738 "cPickle.c"
        var $59=$58+16; //@line 3738 "cPickle.c"
        var $60=HEAP[$59]; //@line 3738 "cPickle.c"
        var $61=$self_addr; //@line 3738 "cPickle.c"
        var $62=$61+32; //@line 3738 "cPickle.c"
        var $63=HEAP[$62]; //@line 3738 "cPickle.c"
        var $64=$63+8; //@line 3738 "cPickle.c"
        var $65=HEAP[$64]; //@line 3738 "cPickle.c"
        var $66=$60+4*$65; //@line 3738 "cPickle.c"
        var $67=$unicode; //@line 3738 "cPickle.c"
        HEAP[$66]=$67; //@line 3738 "cPickle.c"
        var $68=($65) + 1; //@line 3738 "cPickle.c"
        var $69=$63+8; //@line 3738 "cPickle.c"
        HEAP[$69]=$68; //@line 3738 "cPickle.c"
        $0=0; //@line 3739 "cPickle.c"
        __label__ = 14; break; //@line 3739 "cPickle.c"
      case 14: // $bb13
        var $70=$0; //@line 3720 "cPickle.c"
        $retval=$70; //@line 3720 "cPickle.c"
        var $retval14=$retval; //@line 3720 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 3720 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_tuple($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $tup;
        var $i;
        $self_addr=$self;
        var $1=$self_addr; //@line 3750 "cPickle.c"
        var $2=_marker($1); //@line 3750 "cPickle.c"
        $i=$2; //@line 3750 "cPickle.c"
        var $3=$i; //@line 3750 "cPickle.c"
        var $4=($3) < 0; //@line 3750 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3750 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3750 "cPickle.c"
        __label__ = 10; break; //@line 3750 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 3751 "cPickle.c"
        var $6=$5+32; //@line 3751 "cPickle.c"
        var $7=HEAP[$6]; //@line 3751 "cPickle.c"
        var $8=$i; //@line 3751 "cPickle.c"
        var $9=_Pdata_popTuple($7, $8); //@line 3751 "cPickle.c"
        $tup=$9; //@line 3751 "cPickle.c"
        var $10=$tup; //@line 3751 "cPickle.c"
        var $11=($10)==0; //@line 3751 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3751 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 3751 "cPickle.c"
        __label__ = 10; break; //@line 3751 "cPickle.c"
      case 4: // $bb3
        var $12=$self_addr; //@line 3752 "cPickle.c"
        var $13=$12+32; //@line 3752 "cPickle.c"
        var $14=HEAP[$13]; //@line 3752 "cPickle.c"
        var $15=$14+8; //@line 3752 "cPickle.c"
        var $16=HEAP[$15]; //@line 3752 "cPickle.c"
        var $17=$self_addr; //@line 3752 "cPickle.c"
        var $18=$17+32; //@line 3752 "cPickle.c"
        var $19=HEAP[$18]; //@line 3752 "cPickle.c"
        var $20=$19+12; //@line 3752 "cPickle.c"
        var $21=HEAP[$20]; //@line 3752 "cPickle.c"
        var $22=($16)==($21); //@line 3752 "cPickle.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 3752 "cPickle.c"
      case 5: // $bb4
        var $23=$self_addr; //@line 3752 "cPickle.c"
        var $24=$23+32; //@line 3752 "cPickle.c"
        var $25=HEAP[$24]; //@line 3752 "cPickle.c"
        var $26=_Pdata_grow($25); //@line 3752 "cPickle.c"
        var $27=($26) < 0; //@line 3752 "cPickle.c"
        if ($27) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 3752 "cPickle.c"
      case 6: // $bb5
        var $28=$tup; //@line 3752 "cPickle.c"
        var $29=$28; //@line 3752 "cPickle.c"
        var $30=HEAP[$29]; //@line 3752 "cPickle.c"
        var $31=($30) - 1; //@line 3752 "cPickle.c"
        var $32=$tup; //@line 3752 "cPickle.c"
        var $33=$32; //@line 3752 "cPickle.c"
        HEAP[$33]=$31; //@line 3752 "cPickle.c"
        var $34=$tup; //@line 3752 "cPickle.c"
        var $35=$34; //@line 3752 "cPickle.c"
        var $36=HEAP[$35]; //@line 3752 "cPickle.c"
        var $37=($36)==0; //@line 3752 "cPickle.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3752 "cPickle.c"
      case 7: // $bb6
        var $38=$tup; //@line 3752 "cPickle.c"
        var $39=$38+4; //@line 3752 "cPickle.c"
        var $40=HEAP[$39]; //@line 3752 "cPickle.c"
        var $41=$40+24; //@line 3752 "cPickle.c"
        var $42=HEAP[$41]; //@line 3752 "cPickle.c"
        var $43=$tup; //@line 3752 "cPickle.c"
        FUNCTION_TABLE[$42]($43); //@line 3752 "cPickle.c"
        __label__ = 8; break; //@line 3752 "cPickle.c"
      case 8: // $bb7
        $0=-1; //@line 3752 "cPickle.c"
        __label__ = 10; break; //@line 3752 "cPickle.c"
      case 9: // $bb8
        var $44=$self_addr; //@line 3752 "cPickle.c"
        var $45=$44+32; //@line 3752 "cPickle.c"
        var $46=HEAP[$45]; //@line 3752 "cPickle.c"
        var $47=$46+16; //@line 3752 "cPickle.c"
        var $48=HEAP[$47]; //@line 3752 "cPickle.c"
        var $49=$self_addr; //@line 3752 "cPickle.c"
        var $50=$49+32; //@line 3752 "cPickle.c"
        var $51=HEAP[$50]; //@line 3752 "cPickle.c"
        var $52=$51+8; //@line 3752 "cPickle.c"
        var $53=HEAP[$52]; //@line 3752 "cPickle.c"
        var $54=$48+4*$53; //@line 3752 "cPickle.c"
        var $55=$tup; //@line 3752 "cPickle.c"
        HEAP[$54]=$55; //@line 3752 "cPickle.c"
        var $56=($53) + 1; //@line 3752 "cPickle.c"
        var $57=$51+8; //@line 3752 "cPickle.c"
        HEAP[$57]=$56; //@line 3752 "cPickle.c"
        $0=0; //@line 3753 "cPickle.c"
        __label__ = 10; break; //@line 3753 "cPickle.c"
      case 10: // $bb9
        var $58=$0; //@line 3750 "cPickle.c"
        $retval=$58; //@line 3750 "cPickle.c"
        var $retval10=$retval; //@line 3750 "cPickle.c"
        ;
        return $retval10; //@line 3750 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_counted_tuple($self, $len) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $len_addr;
        var $retval;
        var $0;
        var $tup;
        var $element;
        $self_addr=$self;
        $len_addr=$len;
        var $1=$len_addr; //@line 3759 "cPickle.c"
        var $2=_PyTuple_New($1); //@line 3759 "cPickle.c"
        $tup=$2; //@line 3759 "cPickle.c"
        var $3=$tup; //@line 3761 "cPickle.c"
        var $4=($3)==0; //@line 3761 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 3761 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3762 "cPickle.c"
        __label__ = 14; break; //@line 3762 "cPickle.c"
      case 2: // $bb2
        var $5=($37)!=0; //@line 3767 "cPickle.c"
        if ($5) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 3767 "cPickle.c"
      case 3: // $bb5_thread
        var $6=HEAP[_UnpicklingError]; //@line 3767 "cPickle.c"
        _PyErr_SetString($6, __str88); //@line 3767 "cPickle.c"
        $element=0; //@line 3767 "cPickle.c"
        __label__ = 5; break;
      case 4: // $bb5
        var $7=$self_addr; //@line 3767 "cPickle.c"
        var $8=$7+32; //@line 3767 "cPickle.c"
        var $9=HEAP[$8]; //@line 3767 "cPickle.c"
        var $10=$9+16; //@line 3767 "cPickle.c"
        var $11=HEAP[$10]; //@line 3767 "cPickle.c"
        var $12=$self_addr; //@line 3767 "cPickle.c"
        var $13=$12+32; //@line 3767 "cPickle.c"
        var $14=HEAP[$13]; //@line 3767 "cPickle.c"
        var $15=$14+8; //@line 3767 "cPickle.c"
        var $16=HEAP[$15]; //@line 3767 "cPickle.c"
        var $17=($16) - 1; //@line 3767 "cPickle.c"
        var $18=$14+8; //@line 3767 "cPickle.c"
        HEAP[$18]=$17; //@line 3767 "cPickle.c"
        var $19=$14+8; //@line 3767 "cPickle.c"
        var $20=HEAP[$19]; //@line 3767 "cPickle.c"
        var $21=$11+4*$20; //@line 3767 "cPickle.c"
        var $22=HEAP[$21]; //@line 3767 "cPickle.c"
        $element=$22; //@line 3767 "cPickle.c"
        var $23=($22)==0; //@line 3768 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3768 "cPickle.c"
      case 5: // $bb6
        $0=-1; //@line 3769 "cPickle.c"
        __label__ = 14; break; //@line 3769 "cPickle.c"
      case 6: // $bb7
        var $24=$tup; //@line 3770 "cPickle.c"
        var $25=$24; //@line 3770 "cPickle.c"
        var $26=$len_addr; //@line 3770 "cPickle.c"
        var $27=$25+12; //@line 3770 "cPickle.c"
        var $28=$27+$26*4; //@line 3770 "cPickle.c"
        var $29=$element; //@line 3770 "cPickle.c"
        HEAP[$28]=$29; //@line 3770 "cPickle.c"
        __label__ = 7; break; //@line 3770 "cPickle.c"
      case 7: // $bb8
        var $30=$len_addr; //@line 3764 "cPickle.c"
        var $31=($30) - 1; //@line 3764 "cPickle.c"
        $len_addr=$31; //@line 3764 "cPickle.c"
        var $32=($31) >= 0; //@line 3764 "cPickle.c"
        var $33=$self_addr; //@line 3767 "cPickle.c"
        var $34=$33+32; //@line 3767 "cPickle.c"
        var $35=HEAP[$34]; //@line 3767 "cPickle.c"
        var $36=$35+8; //@line 3767 "cPickle.c"
        var $37=HEAP[$36]; //@line 3767 "cPickle.c"
        if ($32) { __label__ = 2; break; } else { __label__ = 8; break; } //@line 3764 "cPickle.c"
      case 8: // $bb9
        var $38=$self_addr; //@line 3772 "cPickle.c"
        var $39=$38+32; //@line 3772 "cPickle.c"
        var $40=HEAP[$39]; //@line 3772 "cPickle.c"
        var $41=$40+12; //@line 3772 "cPickle.c"
        var $42=HEAP[$41]; //@line 3772 "cPickle.c"
        var $43=($37)==($42); //@line 3772 "cPickle.c"
        if ($43) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 3772 "cPickle.c"
      case 9: // $bb10
        var $44=$self_addr; //@line 3772 "cPickle.c"
        var $45=$44+32; //@line 3772 "cPickle.c"
        var $46=HEAP[$45]; //@line 3772 "cPickle.c"
        var $47=_Pdata_grow($46); //@line 3772 "cPickle.c"
        var $48=($47) < 0; //@line 3772 "cPickle.c"
        if ($48) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 3772 "cPickle.c"
      case 10: // $bb11
        var $49=$tup; //@line 3772 "cPickle.c"
        var $50=$49; //@line 3772 "cPickle.c"
        var $51=HEAP[$50]; //@line 3772 "cPickle.c"
        var $52=($51) - 1; //@line 3772 "cPickle.c"
        var $53=$tup; //@line 3772 "cPickle.c"
        var $54=$53; //@line 3772 "cPickle.c"
        HEAP[$54]=$52; //@line 3772 "cPickle.c"
        var $55=$tup; //@line 3772 "cPickle.c"
        var $56=$55; //@line 3772 "cPickle.c"
        var $57=HEAP[$56]; //@line 3772 "cPickle.c"
        var $58=($57)==0; //@line 3772 "cPickle.c"
        if ($58) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3772 "cPickle.c"
      case 11: // $bb12
        var $59=$tup; //@line 3772 "cPickle.c"
        var $60=$59+4; //@line 3772 "cPickle.c"
        var $61=HEAP[$60]; //@line 3772 "cPickle.c"
        var $62=$61+24; //@line 3772 "cPickle.c"
        var $63=HEAP[$62]; //@line 3772 "cPickle.c"
        var $64=$tup; //@line 3772 "cPickle.c"
        FUNCTION_TABLE[$63]($64); //@line 3772 "cPickle.c"
        __label__ = 12; break; //@line 3772 "cPickle.c"
      case 12: // $bb13
        $0=-1; //@line 3772 "cPickle.c"
        __label__ = 14; break; //@line 3772 "cPickle.c"
      case 13: // $bb14
        var $65=$self_addr; //@line 3772 "cPickle.c"
        var $66=$65+32; //@line 3772 "cPickle.c"
        var $67=HEAP[$66]; //@line 3772 "cPickle.c"
        var $68=$67+16; //@line 3772 "cPickle.c"
        var $69=HEAP[$68]; //@line 3772 "cPickle.c"
        var $70=$self_addr; //@line 3772 "cPickle.c"
        var $71=$70+32; //@line 3772 "cPickle.c"
        var $72=HEAP[$71]; //@line 3772 "cPickle.c"
        var $73=$72+8; //@line 3772 "cPickle.c"
        var $74=HEAP[$73]; //@line 3772 "cPickle.c"
        var $75=$69+4*$74; //@line 3772 "cPickle.c"
        var $76=$tup; //@line 3772 "cPickle.c"
        HEAP[$75]=$76; //@line 3772 "cPickle.c"
        var $77=($74) + 1; //@line 3772 "cPickle.c"
        var $78=$72+8; //@line 3772 "cPickle.c"
        HEAP[$78]=$77; //@line 3772 "cPickle.c"
        $0=0; //@line 3773 "cPickle.c"
        __label__ = 14; break; //@line 3773 "cPickle.c"
      case 14: // $bb15
        var $79=$0; //@line 3762 "cPickle.c"
        $retval=$79; //@line 3762 "cPickle.c"
        var $retval16=$retval; //@line 3762 "cPickle.c"
        ;
        return $retval16; //@line 3762 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_empty_list($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $list;
        $self_addr=$self;
        var $1=_PyList_New(0); //@line 3781 "cPickle.c"
        $list=$1; //@line 3781 "cPickle.c"
        var $2=$list; //@line 3781 "cPickle.c"
        var $3=($2)==0; //@line 3781 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3781 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3781 "cPickle.c"
        __label__ = 8; break; //@line 3781 "cPickle.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 3782 "cPickle.c"
        var $5=$4+32; //@line 3782 "cPickle.c"
        var $6=HEAP[$5]; //@line 3782 "cPickle.c"
        var $7=$6+8; //@line 3782 "cPickle.c"
        var $8=HEAP[$7]; //@line 3782 "cPickle.c"
        var $9=$self_addr; //@line 3782 "cPickle.c"
        var $10=$9+32; //@line 3782 "cPickle.c"
        var $11=HEAP[$10]; //@line 3782 "cPickle.c"
        var $12=$11+12; //@line 3782 "cPickle.c"
        var $13=HEAP[$12]; //@line 3782 "cPickle.c"
        var $14=($8)==($13); //@line 3782 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 3782 "cPickle.c"
      case 3: // $bb2
        var $15=$self_addr; //@line 3782 "cPickle.c"
        var $16=$15+32; //@line 3782 "cPickle.c"
        var $17=HEAP[$16]; //@line 3782 "cPickle.c"
        var $18=_Pdata_grow($17); //@line 3782 "cPickle.c"
        var $19=($18) < 0; //@line 3782 "cPickle.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 3782 "cPickle.c"
      case 4: // $bb3
        var $20=$list; //@line 3782 "cPickle.c"
        var $21=$20; //@line 3782 "cPickle.c"
        var $22=HEAP[$21]; //@line 3782 "cPickle.c"
        var $23=($22) - 1; //@line 3782 "cPickle.c"
        var $24=$list; //@line 3782 "cPickle.c"
        var $25=$24; //@line 3782 "cPickle.c"
        HEAP[$25]=$23; //@line 3782 "cPickle.c"
        var $26=$list; //@line 3782 "cPickle.c"
        var $27=$26; //@line 3782 "cPickle.c"
        var $28=HEAP[$27]; //@line 3782 "cPickle.c"
        var $29=($28)==0; //@line 3782 "cPickle.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3782 "cPickle.c"
      case 5: // $bb4
        var $30=$list; //@line 3782 "cPickle.c"
        var $31=$30+4; //@line 3782 "cPickle.c"
        var $32=HEAP[$31]; //@line 3782 "cPickle.c"
        var $33=$32+24; //@line 3782 "cPickle.c"
        var $34=HEAP[$33]; //@line 3782 "cPickle.c"
        var $35=$list; //@line 3782 "cPickle.c"
        FUNCTION_TABLE[$34]($35); //@line 3782 "cPickle.c"
        __label__ = 6; break; //@line 3782 "cPickle.c"
      case 6: // $bb5
        $0=-1; //@line 3782 "cPickle.c"
        __label__ = 8; break; //@line 3782 "cPickle.c"
      case 7: // $bb6
        var $36=$self_addr; //@line 3782 "cPickle.c"
        var $37=$36+32; //@line 3782 "cPickle.c"
        var $38=HEAP[$37]; //@line 3782 "cPickle.c"
        var $39=$38+16; //@line 3782 "cPickle.c"
        var $40=HEAP[$39]; //@line 3782 "cPickle.c"
        var $41=$self_addr; //@line 3782 "cPickle.c"
        var $42=$41+32; //@line 3782 "cPickle.c"
        var $43=HEAP[$42]; //@line 3782 "cPickle.c"
        var $44=$43+8; //@line 3782 "cPickle.c"
        var $45=HEAP[$44]; //@line 3782 "cPickle.c"
        var $46=$40+4*$45; //@line 3782 "cPickle.c"
        var $47=$list; //@line 3782 "cPickle.c"
        HEAP[$46]=$47; //@line 3782 "cPickle.c"
        var $48=($45) + 1; //@line 3782 "cPickle.c"
        var $49=$43+8; //@line 3782 "cPickle.c"
        HEAP[$49]=$48; //@line 3782 "cPickle.c"
        $0=0; //@line 3783 "cPickle.c"
        __label__ = 8; break; //@line 3783 "cPickle.c"
      case 8: // $bb7
        var $50=$0; //@line 3781 "cPickle.c"
        $retval=$50; //@line 3781 "cPickle.c"
        var $retval8=$retval; //@line 3781 "cPickle.c"
        ;
        return $retval8; //@line 3781 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_empty_dict($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $dict;
        $self_addr=$self;
        var $1=_PyDict_New(); //@line 3791 "cPickle.c"
        $dict=$1; //@line 3791 "cPickle.c"
        var $2=$dict; //@line 3791 "cPickle.c"
        var $3=($2)==0; //@line 3791 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3791 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3791 "cPickle.c"
        __label__ = 8; break; //@line 3791 "cPickle.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 3792 "cPickle.c"
        var $5=$4+32; //@line 3792 "cPickle.c"
        var $6=HEAP[$5]; //@line 3792 "cPickle.c"
        var $7=$6+8; //@line 3792 "cPickle.c"
        var $8=HEAP[$7]; //@line 3792 "cPickle.c"
        var $9=$self_addr; //@line 3792 "cPickle.c"
        var $10=$9+32; //@line 3792 "cPickle.c"
        var $11=HEAP[$10]; //@line 3792 "cPickle.c"
        var $12=$11+12; //@line 3792 "cPickle.c"
        var $13=HEAP[$12]; //@line 3792 "cPickle.c"
        var $14=($8)==($13); //@line 3792 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 3792 "cPickle.c"
      case 3: // $bb2
        var $15=$self_addr; //@line 3792 "cPickle.c"
        var $16=$15+32; //@line 3792 "cPickle.c"
        var $17=HEAP[$16]; //@line 3792 "cPickle.c"
        var $18=_Pdata_grow($17); //@line 3792 "cPickle.c"
        var $19=($18) < 0; //@line 3792 "cPickle.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 3792 "cPickle.c"
      case 4: // $bb3
        var $20=$dict; //@line 3792 "cPickle.c"
        var $21=$20; //@line 3792 "cPickle.c"
        var $22=HEAP[$21]; //@line 3792 "cPickle.c"
        var $23=($22) - 1; //@line 3792 "cPickle.c"
        var $24=$dict; //@line 3792 "cPickle.c"
        var $25=$24; //@line 3792 "cPickle.c"
        HEAP[$25]=$23; //@line 3792 "cPickle.c"
        var $26=$dict; //@line 3792 "cPickle.c"
        var $27=$26; //@line 3792 "cPickle.c"
        var $28=HEAP[$27]; //@line 3792 "cPickle.c"
        var $29=($28)==0; //@line 3792 "cPickle.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3792 "cPickle.c"
      case 5: // $bb4
        var $30=$dict; //@line 3792 "cPickle.c"
        var $31=$30+4; //@line 3792 "cPickle.c"
        var $32=HEAP[$31]; //@line 3792 "cPickle.c"
        var $33=$32+24; //@line 3792 "cPickle.c"
        var $34=HEAP[$33]; //@line 3792 "cPickle.c"
        var $35=$dict; //@line 3792 "cPickle.c"
        FUNCTION_TABLE[$34]($35); //@line 3792 "cPickle.c"
        __label__ = 6; break; //@line 3792 "cPickle.c"
      case 6: // $bb5
        $0=-1; //@line 3792 "cPickle.c"
        __label__ = 8; break; //@line 3792 "cPickle.c"
      case 7: // $bb6
        var $36=$self_addr; //@line 3792 "cPickle.c"
        var $37=$36+32; //@line 3792 "cPickle.c"
        var $38=HEAP[$37]; //@line 3792 "cPickle.c"
        var $39=$38+16; //@line 3792 "cPickle.c"
        var $40=HEAP[$39]; //@line 3792 "cPickle.c"
        var $41=$self_addr; //@line 3792 "cPickle.c"
        var $42=$41+32; //@line 3792 "cPickle.c"
        var $43=HEAP[$42]; //@line 3792 "cPickle.c"
        var $44=$43+8; //@line 3792 "cPickle.c"
        var $45=HEAP[$44]; //@line 3792 "cPickle.c"
        var $46=$40+4*$45; //@line 3792 "cPickle.c"
        var $47=$dict; //@line 3792 "cPickle.c"
        HEAP[$46]=$47; //@line 3792 "cPickle.c"
        var $48=($45) + 1; //@line 3792 "cPickle.c"
        var $49=$43+8; //@line 3792 "cPickle.c"
        HEAP[$49]=$48; //@line 3792 "cPickle.c"
        $0=0; //@line 3793 "cPickle.c"
        __label__ = 8; break; //@line 3793 "cPickle.c"
      case 8: // $bb7
        var $50=$0; //@line 3791 "cPickle.c"
        $retval=$50; //@line 3791 "cPickle.c"
        var $retval8=$retval; //@line 3791 "cPickle.c"
        ;
        return $retval8; //@line 3791 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_list($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $list;
        var $i;
        $self_addr=$self;
        $list=0; //@line 3800 "cPickle.c"
        var $1=$self_addr; //@line 3803 "cPickle.c"
        var $2=_marker($1); //@line 3803 "cPickle.c"
        $i=$2; //@line 3803 "cPickle.c"
        var $3=$i; //@line 3803 "cPickle.c"
        var $4=($3) < 0; //@line 3803 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3803 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3803 "cPickle.c"
        __label__ = 10; break; //@line 3803 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 3804 "cPickle.c"
        var $6=$5+32; //@line 3804 "cPickle.c"
        var $7=HEAP[$6]; //@line 3804 "cPickle.c"
        var $8=$i; //@line 3804 "cPickle.c"
        var $9=_Pdata_popList($7, $8); //@line 3804 "cPickle.c"
        $list=$9; //@line 3804 "cPickle.c"
        var $10=$list; //@line 3804 "cPickle.c"
        var $11=($10)==0; //@line 3804 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3804 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 3804 "cPickle.c"
        __label__ = 10; break; //@line 3804 "cPickle.c"
      case 4: // $bb3
        var $12=$self_addr; //@line 3805 "cPickle.c"
        var $13=$12+32; //@line 3805 "cPickle.c"
        var $14=HEAP[$13]; //@line 3805 "cPickle.c"
        var $15=$14+8; //@line 3805 "cPickle.c"
        var $16=HEAP[$15]; //@line 3805 "cPickle.c"
        var $17=$self_addr; //@line 3805 "cPickle.c"
        var $18=$17+32; //@line 3805 "cPickle.c"
        var $19=HEAP[$18]; //@line 3805 "cPickle.c"
        var $20=$19+12; //@line 3805 "cPickle.c"
        var $21=HEAP[$20]; //@line 3805 "cPickle.c"
        var $22=($16)==($21); //@line 3805 "cPickle.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 3805 "cPickle.c"
      case 5: // $bb4
        var $23=$self_addr; //@line 3805 "cPickle.c"
        var $24=$23+32; //@line 3805 "cPickle.c"
        var $25=HEAP[$24]; //@line 3805 "cPickle.c"
        var $26=_Pdata_grow($25); //@line 3805 "cPickle.c"
        var $27=($26) < 0; //@line 3805 "cPickle.c"
        if ($27) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 3805 "cPickle.c"
      case 6: // $bb5
        var $28=$list; //@line 3805 "cPickle.c"
        var $29=$28; //@line 3805 "cPickle.c"
        var $30=HEAP[$29]; //@line 3805 "cPickle.c"
        var $31=($30) - 1; //@line 3805 "cPickle.c"
        var $32=$list; //@line 3805 "cPickle.c"
        var $33=$32; //@line 3805 "cPickle.c"
        HEAP[$33]=$31; //@line 3805 "cPickle.c"
        var $34=$list; //@line 3805 "cPickle.c"
        var $35=$34; //@line 3805 "cPickle.c"
        var $36=HEAP[$35]; //@line 3805 "cPickle.c"
        var $37=($36)==0; //@line 3805 "cPickle.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3805 "cPickle.c"
      case 7: // $bb6
        var $38=$list; //@line 3805 "cPickle.c"
        var $39=$38+4; //@line 3805 "cPickle.c"
        var $40=HEAP[$39]; //@line 3805 "cPickle.c"
        var $41=$40+24; //@line 3805 "cPickle.c"
        var $42=HEAP[$41]; //@line 3805 "cPickle.c"
        var $43=$list; //@line 3805 "cPickle.c"
        FUNCTION_TABLE[$42]($43); //@line 3805 "cPickle.c"
        __label__ = 8; break; //@line 3805 "cPickle.c"
      case 8: // $bb7
        $0=-1; //@line 3805 "cPickle.c"
        __label__ = 10; break; //@line 3805 "cPickle.c"
      case 9: // $bb8
        var $44=$self_addr; //@line 3805 "cPickle.c"
        var $45=$44+32; //@line 3805 "cPickle.c"
        var $46=HEAP[$45]; //@line 3805 "cPickle.c"
        var $47=$46+16; //@line 3805 "cPickle.c"
        var $48=HEAP[$47]; //@line 3805 "cPickle.c"
        var $49=$self_addr; //@line 3805 "cPickle.c"
        var $50=$49+32; //@line 3805 "cPickle.c"
        var $51=HEAP[$50]; //@line 3805 "cPickle.c"
        var $52=$51+8; //@line 3805 "cPickle.c"
        var $53=HEAP[$52]; //@line 3805 "cPickle.c"
        var $54=$48+4*$53; //@line 3805 "cPickle.c"
        var $55=$list; //@line 3805 "cPickle.c"
        HEAP[$54]=$55; //@line 3805 "cPickle.c"
        var $56=($53) + 1; //@line 3805 "cPickle.c"
        var $57=$51+8; //@line 3805 "cPickle.c"
        HEAP[$57]=$56; //@line 3805 "cPickle.c"
        $0=0; //@line 3806 "cPickle.c"
        __label__ = 10; break; //@line 3806 "cPickle.c"
      case 10: // $bb9
        var $58=$0; //@line 3803 "cPickle.c"
        $retval=$58; //@line 3803 "cPickle.c"
        var $retval10=$retval; //@line 3803 "cPickle.c"
        ;
        return $retval10; //@line 3803 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_dict($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $dict;
        var $key;
        var $value;
        var $i;
        var $j;
        var $k;
        $self_addr=$self;
        var $1=$self_addr; //@line 3815 "cPickle.c"
        var $2=_marker($1); //@line 3815 "cPickle.c"
        $i=$2; //@line 3815 "cPickle.c"
        var $3=$i; //@line 3815 "cPickle.c"
        var $4=($3) < 0; //@line 3815 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3815 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3815 "cPickle.c"
        __label__ = 17; break; //@line 3815 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 3816 "cPickle.c"
        var $6=$5+32; //@line 3816 "cPickle.c"
        var $7=HEAP[$6]; //@line 3816 "cPickle.c"
        var $8=$7+8; //@line 3816 "cPickle.c"
        var $9=HEAP[$8]; //@line 3816 "cPickle.c"
        $j=$9; //@line 3816 "cPickle.c"
        var $10=_PyDict_New(); //@line 3818 "cPickle.c"
        $dict=$10; //@line 3818 "cPickle.c"
        var $11=$dict; //@line 3818 "cPickle.c"
        var $12=($11)==0; //@line 3818 "cPickle.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3818 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 3818 "cPickle.c"
        __label__ = 17; break; //@line 3818 "cPickle.c"
      case 4: // $bb3
        var $13=$i; //@line 3820 "cPickle.c"
        var $14=($13) + 1; //@line 3820 "cPickle.c"
        $k=$14; //@line 3820 "cPickle.c"
        __label__ = 10; break; //@line 3820 "cPickle.c"
      case 5: // $bb4
        var $15=$57+16; //@line 3821 "cPickle.c"
        var $16=HEAP[$15]; //@line 3821 "cPickle.c"
        var $17=$k; //@line 3821 "cPickle.c"
        var $18=($17) - 1; //@line 3821 "cPickle.c"
        var $19=$16+4*$18; //@line 3821 "cPickle.c"
        var $20=HEAP[$19]; //@line 3821 "cPickle.c"
        $key=$20; //@line 3821 "cPickle.c"
        var $21=$self_addr; //@line 3822 "cPickle.c"
        var $22=$21+32; //@line 3822 "cPickle.c"
        var $23=HEAP[$22]; //@line 3822 "cPickle.c"
        var $24=$23+16; //@line 3822 "cPickle.c"
        var $25=HEAP[$24]; //@line 3822 "cPickle.c"
        var $26=$k; //@line 3822 "cPickle.c"
        var $27=$25+4*$26; //@line 3822 "cPickle.c"
        var $28=HEAP[$27]; //@line 3822 "cPickle.c"
        $value=$28; //@line 3822 "cPickle.c"
        var $29=$dict; //@line 3823 "cPickle.c"
        var $30=$key; //@line 3823 "cPickle.c"
        var $31=$value; //@line 3823 "cPickle.c"
        var $32=_PyDict_SetItem($29, $30, $31); //@line 3823 "cPickle.c"
        var $33=($32) < 0; //@line 3823 "cPickle.c"
        if ($33) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 3823 "cPickle.c"
      case 6: // $bb5
        var $34=$dict; //@line 3824 "cPickle.c"
        var $35=$34; //@line 3824 "cPickle.c"
        var $36=HEAP[$35]; //@line 3824 "cPickle.c"
        var $37=($36) - 1; //@line 3824 "cPickle.c"
        var $38=$dict; //@line 3824 "cPickle.c"
        var $39=$38; //@line 3824 "cPickle.c"
        HEAP[$39]=$37; //@line 3824 "cPickle.c"
        var $40=$dict; //@line 3824 "cPickle.c"
        var $41=$40; //@line 3824 "cPickle.c"
        var $42=HEAP[$41]; //@line 3824 "cPickle.c"
        var $43=($42)==0; //@line 3824 "cPickle.c"
        if ($43) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3824 "cPickle.c"
      case 7: // $bb6
        var $44=$dict; //@line 3824 "cPickle.c"
        var $45=$44+4; //@line 3824 "cPickle.c"
        var $46=HEAP[$45]; //@line 3824 "cPickle.c"
        var $47=$46+24; //@line 3824 "cPickle.c"
        var $48=HEAP[$47]; //@line 3824 "cPickle.c"
        var $49=$dict; //@line 3824 "cPickle.c"
        FUNCTION_TABLE[$48]($49); //@line 3824 "cPickle.c"
        __label__ = 8; break; //@line 3824 "cPickle.c"
      case 8: // $bb7
        $0=-1; //@line 3825 "cPickle.c"
        __label__ = 17; break; //@line 3825 "cPickle.c"
      case 9: // $bb8
        var $50=$k; //@line 3820 "cPickle.c"
        var $51=($50) + 2; //@line 3820 "cPickle.c"
        $k=$51; //@line 3820 "cPickle.c"
        __label__ = 10; break; //@line 3820 "cPickle.c"
      case 10: // $bb9
        var $52=$k; //@line 3820 "cPickle.c"
        var $53=$j; //@line 3820 "cPickle.c"
        var $54=($52) < ($53); //@line 3820 "cPickle.c"
        var $55=$self_addr; //@line 3821 "cPickle.c"
        var $56=$55+32; //@line 3821 "cPickle.c"
        var $57=HEAP[$56]; //@line 3821 "cPickle.c"
        if ($54) { __label__ = 5; break; } else { __label__ = 11; break; } //@line 3820 "cPickle.c"
      case 11: // $bb10
        var $58=$i; //@line 3828 "cPickle.c"
        var $59=_Pdata_clear($57, $58); //@line 3828 "cPickle.c"
        var $60=$self_addr; //@line 3829 "cPickle.c"
        var $61=$60+32; //@line 3829 "cPickle.c"
        var $62=HEAP[$61]; //@line 3829 "cPickle.c"
        var $63=$62+8; //@line 3829 "cPickle.c"
        var $64=HEAP[$63]; //@line 3829 "cPickle.c"
        var $65=$self_addr; //@line 3829 "cPickle.c"
        var $66=$65+32; //@line 3829 "cPickle.c"
        var $67=HEAP[$66]; //@line 3829 "cPickle.c"
        var $68=$67+12; //@line 3829 "cPickle.c"
        var $69=HEAP[$68]; //@line 3829 "cPickle.c"
        var $70=($64)==($69); //@line 3829 "cPickle.c"
        if ($70) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 3829 "cPickle.c"
      case 12: // $bb11
        var $71=$self_addr; //@line 3829 "cPickle.c"
        var $72=$71+32; //@line 3829 "cPickle.c"
        var $73=HEAP[$72]; //@line 3829 "cPickle.c"
        var $74=_Pdata_grow($73); //@line 3829 "cPickle.c"
        var $75=($74) < 0; //@line 3829 "cPickle.c"
        if ($75) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 3829 "cPickle.c"
      case 13: // $bb12
        var $76=$dict; //@line 3829 "cPickle.c"
        var $77=$76; //@line 3829 "cPickle.c"
        var $78=HEAP[$77]; //@line 3829 "cPickle.c"
        var $79=($78) - 1; //@line 3829 "cPickle.c"
        var $80=$dict; //@line 3829 "cPickle.c"
        var $81=$80; //@line 3829 "cPickle.c"
        HEAP[$81]=$79; //@line 3829 "cPickle.c"
        var $82=$dict; //@line 3829 "cPickle.c"
        var $83=$82; //@line 3829 "cPickle.c"
        var $84=HEAP[$83]; //@line 3829 "cPickle.c"
        var $85=($84)==0; //@line 3829 "cPickle.c"
        if ($85) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3829 "cPickle.c"
      case 14: // $bb13
        var $86=$dict; //@line 3829 "cPickle.c"
        var $87=$86+4; //@line 3829 "cPickle.c"
        var $88=HEAP[$87]; //@line 3829 "cPickle.c"
        var $89=$88+24; //@line 3829 "cPickle.c"
        var $90=HEAP[$89]; //@line 3829 "cPickle.c"
        var $91=$dict; //@line 3829 "cPickle.c"
        FUNCTION_TABLE[$90]($91); //@line 3829 "cPickle.c"
        __label__ = 15; break; //@line 3829 "cPickle.c"
      case 15: // $bb14
        $0=-1; //@line 3829 "cPickle.c"
        __label__ = 17; break; //@line 3829 "cPickle.c"
      case 16: // $bb15
        var $92=$self_addr; //@line 3829 "cPickle.c"
        var $93=$92+32; //@line 3829 "cPickle.c"
        var $94=HEAP[$93]; //@line 3829 "cPickle.c"
        var $95=$94+16; //@line 3829 "cPickle.c"
        var $96=HEAP[$95]; //@line 3829 "cPickle.c"
        var $97=$self_addr; //@line 3829 "cPickle.c"
        var $98=$97+32; //@line 3829 "cPickle.c"
        var $99=HEAP[$98]; //@line 3829 "cPickle.c"
        var $100=$99+8; //@line 3829 "cPickle.c"
        var $101=HEAP[$100]; //@line 3829 "cPickle.c"
        var $102=$96+4*$101; //@line 3829 "cPickle.c"
        var $103=$dict; //@line 3829 "cPickle.c"
        HEAP[$102]=$103; //@line 3829 "cPickle.c"
        var $104=($101) + 1; //@line 3829 "cPickle.c"
        var $105=$99+8; //@line 3829 "cPickle.c"
        HEAP[$105]=$104; //@line 3829 "cPickle.c"
        $0=0; //@line 3830 "cPickle.c"
        __label__ = 17; break; //@line 3830 "cPickle.c"
      case 17: // $bb16
        var $106=$0; //@line 3815 "cPickle.c"
        $retval=$106; //@line 3815 "cPickle.c"
        var $retval17=$retval; //@line 3815 "cPickle.c"
        ;
        return $retval17; //@line 3815 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Instance_New($cls, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $r;
        var $l;
        var $__getinitargs__;
        var $inst;
        var $tp=__stackBase__;
        var $v=__stackBase__+4;
        var $tb=__stackBase__+8;
        var $tmp_value;
        $cls_addr=$cls;
        $args_addr=$args;
        $r=0; //@line 3836 "cPickle.c"
        var $1=$cls_addr; //@line 3838 "cPickle.c"
        var $2=$1+4; //@line 3838 "cPickle.c"
        var $3=HEAP[$2]; //@line 3838 "cPickle.c"
        var $4=($3)==(_PyClass_Type); //@line 3838 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 3838 "cPickle.c"
      case 1: // $bb
        var $5=$args_addr; //@line 3841 "cPickle.c"
        var $6=_PyObject_Size($5); //@line 3841 "cPickle.c"
        $l=$6; //@line 3841 "cPickle.c"
        var $7=$l; //@line 3841 "cPickle.c"
        var $8=($7) < 0; //@line 3841 "cPickle.c"
        if ($8) { __label__ = 12; break; } else { __label__ = 2; break; } //@line 3841 "cPickle.c"
      case 2: // $bb1
        var $9=$l; //@line 3842 "cPickle.c"
        var $10=($9)==0; //@line 3842 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 3842 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[___getinitargs___str]; //@line 3845 "cPickle.c"
        var $12=$cls_addr; //@line 3845 "cPickle.c"
        var $13=_PyObject_GetAttr($12, $11); //@line 3845 "cPickle.c"
        $__getinitargs__=$13; //@line 3845 "cPickle.c"
        var $14=$__getinitargs__; //@line 3847 "cPickle.c"
        var $15=($14)==0; //@line 3847 "cPickle.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3847 "cPickle.c"
      case 4: // $bb3
        _PyErr_Clear(); //@line 3852 "cPickle.c"
        var $16=$cls_addr; //@line 3853 "cPickle.c"
        var $17=_PyInstance_NewRaw($16, 0); //@line 3853 "cPickle.c"
        $inst=$17; //@line 3853 "cPickle.c"
        var $18=$inst; //@line 3853 "cPickle.c"
        var $19=($18)==0; //@line 3853 "cPickle.c"
        if ($19) { __label__ = 12; break; } else { __label__ = 5; break; } //@line 3853 "cPickle.c"
      case 5: // $bb4
        var $20=$inst; //@line 3855 "cPickle.c"
        $0=$20; //@line 3855 "cPickle.c"
        __label__ = 20; break; //@line 3855 "cPickle.c"
      case 6: // $bb5
        var $21=$__getinitargs__; //@line 3857 "cPickle.c"
        var $22=$21; //@line 3857 "cPickle.c"
        var $23=HEAP[$22]; //@line 3857 "cPickle.c"
        var $24=($23) - 1; //@line 3857 "cPickle.c"
        var $25=$__getinitargs__; //@line 3857 "cPickle.c"
        var $26=$25; //@line 3857 "cPickle.c"
        HEAP[$26]=$24; //@line 3857 "cPickle.c"
        var $27=$__getinitargs__; //@line 3857 "cPickle.c"
        var $28=$27; //@line 3857 "cPickle.c"
        var $29=HEAP[$28]; //@line 3857 "cPickle.c"
        var $30=($29)==0; //@line 3857 "cPickle.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3857 "cPickle.c"
      case 7: // $bb6
        var $31=$__getinitargs__; //@line 3857 "cPickle.c"
        var $32=$31+4; //@line 3857 "cPickle.c"
        var $33=HEAP[$32]; //@line 3857 "cPickle.c"
        var $34=$33+24; //@line 3857 "cPickle.c"
        var $35=HEAP[$34]; //@line 3857 "cPickle.c"
        var $36=$__getinitargs__; //@line 3857 "cPickle.c"
        FUNCTION_TABLE[$35]($36); //@line 3857 "cPickle.c"
        __label__ = 8; break; //@line 3857 "cPickle.c"
      case 8: // $bb7
        var $37=$cls_addr; //@line 3860 "cPickle.c"
        var $38=$args_addr; //@line 3860 "cPickle.c"
        var $39=_PyInstance_New($37, $38, 0); //@line 3860 "cPickle.c"
        $r=$39; //@line 3860 "cPickle.c"
        var $40=($39)!=0; //@line 3860 "cPickle.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 3860 "cPickle.c"
      case 9: // $bb8
        var $41=$r; //@line 3860 "cPickle.c"
        $0=$41; //@line 3860 "cPickle.c"
        __label__ = 20; break; //@line 3860 "cPickle.c"
      case 10: // $bb9
        var $42=$cls_addr; //@line 3864 "cPickle.c"
        var $43=$args_addr; //@line 3864 "cPickle.c"
        var $44=_PyObject_CallObject($42, $43); //@line 3864 "cPickle.c"
        $r=$44; //@line 3864 "cPickle.c"
        var $45=$r; //@line 3864 "cPickle.c"
        var $46=($45)!=0; //@line 3864 "cPickle.c"
        if ($46) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3864 "cPickle.c"
      case 11: // $bb10
        var $47=$r; //@line 3864 "cPickle.c"
        $0=$47; //@line 3864 "cPickle.c"
        __label__ = 20; break; //@line 3864 "cPickle.c"
      case 12: // $err
        _PyErr_Fetch($tp, $v, $tb); //@line 3870 "cPickle.c"
        var $48=HEAP[$v]; //@line 3871 "cPickle.c"
        $tmp_value=$48; //@line 3871 "cPickle.c"
        var $49=($48)==0; //@line 3873 "cPickle.c"
        if ($49) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3873 "cPickle.c"
      case 13: // $bb11
        $tmp_value=__Py_NoneStruct; //@line 3874 "cPickle.c"
        __label__ = 14; break; //@line 3874 "cPickle.c"
      case 14: // $bb12
        var $50=$tmp_value; //@line 3875 "cPickle.c"
        var $51=$cls_addr; //@line 3875 "cPickle.c"
        var $52=$args_addr; //@line 3875 "cPickle.c"
        var $53=_PyTuple_Pack(3, allocate([$50,0,0,0,$51,0,0,0,$52,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 3875 "cPickle.c"
        $r=$53; //@line 3875 "cPickle.c"
        var $54=($53)!=0; //@line 3875 "cPickle.c"
        if ($54) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 3875 "cPickle.c"
      case 15: // $bb13
        var $55=HEAP[$v]; //@line 3876 "cPickle.c"
        var $56=($55)!=0; //@line 3876 "cPickle.c"
        if ($56) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3876 "cPickle.c"
      case 16: // $bb14
        var $57=HEAP[$v]; //@line 3876 "cPickle.c"
        var $58=$57; //@line 3876 "cPickle.c"
        var $59=HEAP[$58]; //@line 3876 "cPickle.c"
        var $60=($59) - 1; //@line 3876 "cPickle.c"
        var $61=$57; //@line 3876 "cPickle.c"
        HEAP[$61]=$60; //@line 3876 "cPickle.c"
        var $62=$57; //@line 3876 "cPickle.c"
        var $63=HEAP[$62]; //@line 3876 "cPickle.c"
        var $64=($63)==0; //@line 3876 "cPickle.c"
        if ($64) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3876 "cPickle.c"
      case 17: // $bb15
        var $65=HEAP[$v]; //@line 3876 "cPickle.c"
        var $66=$65+4; //@line 3876 "cPickle.c"
        var $67=HEAP[$66]; //@line 3876 "cPickle.c"
        var $68=$67+24; //@line 3876 "cPickle.c"
        var $69=HEAP[$68]; //@line 3876 "cPickle.c"
        var $70=HEAP[$v]; //@line 3876 "cPickle.c"
        FUNCTION_TABLE[$69]($70); //@line 3876 "cPickle.c"
        __label__ = 18; break; //@line 3876 "cPickle.c"
      case 18: // $bb16
        var $71=$r; //@line 3877 "cPickle.c"
        HEAP[$v]=$71; //@line 3877 "cPickle.c"
        __label__ = 19; break; //@line 3877 "cPickle.c"
      case 19: // $bb17
        var $72=HEAP[$tb]; //@line 3879 "cPickle.c"
        var $73=HEAP[$v]; //@line 3879 "cPickle.c"
        var $74=HEAP[$tp]; //@line 3879 "cPickle.c"
        _PyErr_Restore($74, $73, $72); //@line 3879 "cPickle.c"
        $0=0; //@line 3881 "cPickle.c"
        __label__ = 20; break; //@line 3881 "cPickle.c"
      case 20: // $bb18
        var $75=$0; //@line 3855 "cPickle.c"
        $retval=$75; //@line 3855 "cPickle.c"
        var $retval19=$retval; //@line 3855 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 3855 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_obj($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $class;
        var $tup;
        var $obj;
        var $i;
        $self_addr=$self;
        $obj=0; //@line 3888 "cPickle.c"
        var $1=$self_addr; //@line 3891 "cPickle.c"
        var $2=_marker($1); //@line 3891 "cPickle.c"
        $i=$2; //@line 3891 "cPickle.c"
        var $3=$i; //@line 3891 "cPickle.c"
        var $4=($3) < 0; //@line 3891 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3891 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3891 "cPickle.c"
        __label__ = 19; break; //@line 3891 "cPickle.c"
      case 2: // $bb1
        var $5=$i; //@line 3892 "cPickle.c"
        var $6=($5) + 1; //@line 3892 "cPickle.c"
        var $7=$self_addr; //@line 3892 "cPickle.c"
        var $8=$7+32; //@line 3892 "cPickle.c"
        var $9=HEAP[$8]; //@line 3892 "cPickle.c"
        var $10=_Pdata_popTuple($9, $6); //@line 3892 "cPickle.c"
        $tup=$10; //@line 3892 "cPickle.c"
        var $11=$tup; //@line 3892 "cPickle.c"
        var $12=($11)==0; //@line 3892 "cPickle.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3892 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 3892 "cPickle.c"
        __label__ = 19; break; //@line 3892 "cPickle.c"
      case 4: // $bb3
        var $13=$self_addr; //@line 3893 "cPickle.c"
        var $14=$13+32; //@line 3893 "cPickle.c"
        var $15=HEAP[$14]; //@line 3893 "cPickle.c"
        var $16=$15+8; //@line 3893 "cPickle.c"
        var $17=HEAP[$16]; //@line 3893 "cPickle.c"
        var $18=($17)!=0; //@line 3893 "cPickle.c"
        if ($18) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 3893 "cPickle.c"
      case 5: // $bb6_thread
        var $19=HEAP[_UnpicklingError]; //@line 3893 "cPickle.c"
        _PyErr_SetString($19, __str88); //@line 3893 "cPickle.c"
        $class=0; //@line 3893 "cPickle.c"
        __label__ = 9; break;
      case 6: // $bb6
        var $20=$self_addr; //@line 3893 "cPickle.c"
        var $21=$20+32; //@line 3893 "cPickle.c"
        var $22=HEAP[$21]; //@line 3893 "cPickle.c"
        var $23=$22+16; //@line 3893 "cPickle.c"
        var $24=HEAP[$23]; //@line 3893 "cPickle.c"
        var $25=$self_addr; //@line 3893 "cPickle.c"
        var $26=$25+32; //@line 3893 "cPickle.c"
        var $27=HEAP[$26]; //@line 3893 "cPickle.c"
        var $28=$27+8; //@line 3893 "cPickle.c"
        var $29=HEAP[$28]; //@line 3893 "cPickle.c"
        var $30=($29) - 1; //@line 3893 "cPickle.c"
        var $31=$27+8; //@line 3893 "cPickle.c"
        HEAP[$31]=$30; //@line 3893 "cPickle.c"
        var $32=$27+8; //@line 3893 "cPickle.c"
        var $33=HEAP[$32]; //@line 3893 "cPickle.c"
        var $34=$24+4*$33; //@line 3893 "cPickle.c"
        var $35=HEAP[$34]; //@line 3893 "cPickle.c"
        $class=$35; //@line 3893 "cPickle.c"
        var $36=($35)!=0; //@line 3894 "cPickle.c"
        if ($36) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 3894 "cPickle.c"
      case 7: // $bb7
        var $37=$class; //@line 3895 "cPickle.c"
        var $38=$tup; //@line 3895 "cPickle.c"
        var $39=_Instance_New($37, $38); //@line 3895 "cPickle.c"
        $obj=$39; //@line 3895 "cPickle.c"
        var $40=$class; //@line 3896 "cPickle.c"
        var $41=$40; //@line 3896 "cPickle.c"
        var $42=HEAP[$41]; //@line 3896 "cPickle.c"
        var $43=($42) - 1; //@line 3896 "cPickle.c"
        var $44=$class; //@line 3896 "cPickle.c"
        var $45=$44; //@line 3896 "cPickle.c"
        HEAP[$45]=$43; //@line 3896 "cPickle.c"
        var $46=$class; //@line 3896 "cPickle.c"
        var $47=$46; //@line 3896 "cPickle.c"
        var $48=HEAP[$47]; //@line 3896 "cPickle.c"
        var $49=($48)==0; //@line 3896 "cPickle.c"
        if ($49) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3896 "cPickle.c"
      case 8: // $bb8
        var $50=$class; //@line 3896 "cPickle.c"
        var $51=$50+4; //@line 3896 "cPickle.c"
        var $52=HEAP[$51]; //@line 3896 "cPickle.c"
        var $53=$52+24; //@line 3896 "cPickle.c"
        var $54=HEAP[$53]; //@line 3896 "cPickle.c"
        var $55=$class; //@line 3896 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 3896 "cPickle.c"
        __label__ = 9; break; //@line 3896 "cPickle.c"
      case 9: // $bb9
        var $56=$tup; //@line 3898 "cPickle.c"
        var $57=$56; //@line 3898 "cPickle.c"
        var $58=HEAP[$57]; //@line 3898 "cPickle.c"
        var $59=($58) - 1; //@line 3898 "cPickle.c"
        var $60=$tup; //@line 3898 "cPickle.c"
        var $61=$60; //@line 3898 "cPickle.c"
        HEAP[$61]=$59; //@line 3898 "cPickle.c"
        var $62=$tup; //@line 3898 "cPickle.c"
        var $63=$62; //@line 3898 "cPickle.c"
        var $64=HEAP[$63]; //@line 3898 "cPickle.c"
        var $65=($64)==0; //@line 3898 "cPickle.c"
        if ($65) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3898 "cPickle.c"
      case 10: // $bb10
        var $66=$tup; //@line 3898 "cPickle.c"
        var $67=$66+4; //@line 3898 "cPickle.c"
        var $68=HEAP[$67]; //@line 3898 "cPickle.c"
        var $69=$68+24; //@line 3898 "cPickle.c"
        var $70=HEAP[$69]; //@line 3898 "cPickle.c"
        var $71=$tup; //@line 3898 "cPickle.c"
        FUNCTION_TABLE[$70]($71); //@line 3898 "cPickle.c"
        __label__ = 11; break; //@line 3898 "cPickle.c"
      case 11: // $bb11
        var $72=$obj; //@line 3900 "cPickle.c"
        var $73=($72)==0; //@line 3900 "cPickle.c"
        if ($73) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 3900 "cPickle.c"
      case 12: // $bb12
        $0=-1; //@line 3900 "cPickle.c"
        __label__ = 19; break; //@line 3900 "cPickle.c"
      case 13: // $bb13
        var $74=$self_addr; //@line 3901 "cPickle.c"
        var $75=$74+32; //@line 3901 "cPickle.c"
        var $76=HEAP[$75]; //@line 3901 "cPickle.c"
        var $77=$76+8; //@line 3901 "cPickle.c"
        var $78=HEAP[$77]; //@line 3901 "cPickle.c"
        var $79=$self_addr; //@line 3901 "cPickle.c"
        var $80=$79+32; //@line 3901 "cPickle.c"
        var $81=HEAP[$80]; //@line 3901 "cPickle.c"
        var $82=$81+12; //@line 3901 "cPickle.c"
        var $83=HEAP[$82]; //@line 3901 "cPickle.c"
        var $84=($78)==($83); //@line 3901 "cPickle.c"
        if ($84) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 3901 "cPickle.c"
      case 14: // $bb14
        var $85=$self_addr; //@line 3901 "cPickle.c"
        var $86=$85+32; //@line 3901 "cPickle.c"
        var $87=HEAP[$86]; //@line 3901 "cPickle.c"
        var $88=_Pdata_grow($87); //@line 3901 "cPickle.c"
        var $89=($88) < 0; //@line 3901 "cPickle.c"
        if ($89) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 3901 "cPickle.c"
      case 15: // $bb15
        var $90=$obj; //@line 3901 "cPickle.c"
        var $91=$90; //@line 3901 "cPickle.c"
        var $92=HEAP[$91]; //@line 3901 "cPickle.c"
        var $93=($92) - 1; //@line 3901 "cPickle.c"
        var $94=$obj; //@line 3901 "cPickle.c"
        var $95=$94; //@line 3901 "cPickle.c"
        HEAP[$95]=$93; //@line 3901 "cPickle.c"
        var $96=$obj; //@line 3901 "cPickle.c"
        var $97=$96; //@line 3901 "cPickle.c"
        var $98=HEAP[$97]; //@line 3901 "cPickle.c"
        var $99=($98)==0; //@line 3901 "cPickle.c"
        if ($99) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3901 "cPickle.c"
      case 16: // $bb16
        var $100=$obj; //@line 3901 "cPickle.c"
        var $101=$100+4; //@line 3901 "cPickle.c"
        var $102=HEAP[$101]; //@line 3901 "cPickle.c"
        var $103=$102+24; //@line 3901 "cPickle.c"
        var $104=HEAP[$103]; //@line 3901 "cPickle.c"
        var $105=$obj; //@line 3901 "cPickle.c"
        FUNCTION_TABLE[$104]($105); //@line 3901 "cPickle.c"
        __label__ = 17; break; //@line 3901 "cPickle.c"
      case 17: // $bb17
        $0=-1; //@line 3901 "cPickle.c"
        __label__ = 19; break; //@line 3901 "cPickle.c"
      case 18: // $bb18
        var $106=$self_addr; //@line 3901 "cPickle.c"
        var $107=$106+32; //@line 3901 "cPickle.c"
        var $108=HEAP[$107]; //@line 3901 "cPickle.c"
        var $109=$108+16; //@line 3901 "cPickle.c"
        var $110=HEAP[$109]; //@line 3901 "cPickle.c"
        var $111=$self_addr; //@line 3901 "cPickle.c"
        var $112=$111+32; //@line 3901 "cPickle.c"
        var $113=HEAP[$112]; //@line 3901 "cPickle.c"
        var $114=$113+8; //@line 3901 "cPickle.c"
        var $115=HEAP[$114]; //@line 3901 "cPickle.c"
        var $116=$110+4*$115; //@line 3901 "cPickle.c"
        var $117=$obj; //@line 3901 "cPickle.c"
        HEAP[$116]=$117; //@line 3901 "cPickle.c"
        var $118=($115) + 1; //@line 3901 "cPickle.c"
        var $119=$113+8; //@line 3901 "cPickle.c"
        HEAP[$119]=$118; //@line 3901 "cPickle.c"
        $0=0; //@line 3902 "cPickle.c"
        __label__ = 19; break; //@line 3902 "cPickle.c"
      case 19: // $bb19
        var $120=$0; //@line 3891 "cPickle.c"
        $retval=$120; //@line 3891 "cPickle.c"
        var $retval20=$retval; //@line 3891 "cPickle.c"
        ;
        return $retval20; //@line 3891 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_inst($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $tup;
        var $class;
        var $obj;
        var $module_name;
        var $class_name;
        var $i;
        var $len;
        var $s=__stackBase__;
        $self_addr=$self;
        $class=0; //@line 3909 "cPickle.c"
        $obj=0; //@line 3909 "cPickle.c"
        var $1=$self_addr; //@line 3913 "cPickle.c"
        var $2=_marker($1); //@line 3913 "cPickle.c"
        $i=$2; //@line 3913 "cPickle.c"
        var $3=$i; //@line 3913 "cPickle.c"
        var $4=($3) < 0; //@line 3913 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3913 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3913 "cPickle.c"
        __label__ = 31; break; //@line 3913 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 3915 "cPickle.c"
        var $6=$5+64; //@line 3915 "cPickle.c"
        var $7=HEAP[$6]; //@line 3915 "cPickle.c"
        var $8=$self_addr; //@line 3915 "cPickle.c"
        var $9=FUNCTION_TABLE[$7]($8, $s); //@line 3915 "cPickle.c"
        $len=$9; //@line 3915 "cPickle.c"
        var $10=$len; //@line 3915 "cPickle.c"
        var $11=($10) < 0; //@line 3915 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3915 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 3915 "cPickle.c"
        __label__ = 31; break; //@line 3915 "cPickle.c"
      case 4: // $bb3
        var $12=$len; //@line 3916 "cPickle.c"
        var $13=($12) <= 1; //@line 3916 "cPickle.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3916 "cPickle.c"
      case 5: // $bb4
        var $14=_bad_readline(); //@line 3916 "cPickle.c"
        $0=$14; //@line 3916 "cPickle.c"
        __label__ = 31; break; //@line 3916 "cPickle.c"
      case 6: // $bb5
        var $15=$len; //@line 3917 "cPickle.c"
        var $16=($15) - 1; //@line 3917 "cPickle.c"
        var $17=HEAP[$s]; //@line 3917 "cPickle.c"
        var $18=_PyString_FromStringAndSize($17, $16); //@line 3917 "cPickle.c"
        $module_name=$18; //@line 3917 "cPickle.c"
        var $19=$module_name; //@line 3918 "cPickle.c"
        var $20=($19)==0; //@line 3918 "cPickle.c"
        if ($20) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3918 "cPickle.c"
      case 7: // $bb6
        $0=-1; //@line 3918 "cPickle.c"
        __label__ = 31; break; //@line 3918 "cPickle.c"
      case 8: // $bb7
        var $21=$self_addr; //@line 3920 "cPickle.c"
        var $22=$21+64; //@line 3920 "cPickle.c"
        var $23=HEAP[$22]; //@line 3920 "cPickle.c"
        var $24=$self_addr; //@line 3920 "cPickle.c"
        var $25=FUNCTION_TABLE[$23]($24, $s); //@line 3920 "cPickle.c"
        $len=$25; //@line 3920 "cPickle.c"
        var $26=$len; //@line 3920 "cPickle.c"
        var $27=($26) >= 0; //@line 3920 "cPickle.c"
        if ($27) { __label__ = 9; break; } else { __label__ = 14; break; } //@line 3920 "cPickle.c"
      case 9: // $bb8
        var $28=$len; //@line 3921 "cPickle.c"
        var $29=($28) <= 1; //@line 3921 "cPickle.c"
        if ($29) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3921 "cPickle.c"
      case 10: // $bb9
        var $30=_bad_readline(); //@line 3921 "cPickle.c"
        $0=$30; //@line 3921 "cPickle.c"
        __label__ = 31; break; //@line 3921 "cPickle.c"
      case 11: // $bb10
        var $31=$len; //@line 3922 "cPickle.c"
        var $32=($31) - 1; //@line 3922 "cPickle.c"
        var $33=HEAP[$s]; //@line 3922 "cPickle.c"
        var $34=_PyString_FromStringAndSize($33, $32); //@line 3922 "cPickle.c"
        $class_name=$34; //@line 3922 "cPickle.c"
        var $35=$class_name; //@line 3922 "cPickle.c"
        var $36=($35)!=0; //@line 3922 "cPickle.c"
        if ($36) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 3922 "cPickle.c"
      case 12: // $bb11
        var $37=$self_addr; //@line 3923 "cPickle.c"
        var $38=$37+76; //@line 3923 "cPickle.c"
        var $39=HEAP[$38]; //@line 3923 "cPickle.c"
        var $40=$module_name; //@line 3923 "cPickle.c"
        var $41=$class_name; //@line 3923 "cPickle.c"
        var $42=_find_class($40, $41, $39); //@line 3923 "cPickle.c"
        $class=$42; //@line 3923 "cPickle.c"
        var $43=$class_name; //@line 3925 "cPickle.c"
        var $44=$43; //@line 3925 "cPickle.c"
        var $45=HEAP[$44]; //@line 3925 "cPickle.c"
        var $46=($45) - 1; //@line 3925 "cPickle.c"
        var $47=$class_name; //@line 3925 "cPickle.c"
        var $48=$47; //@line 3925 "cPickle.c"
        HEAP[$48]=$46; //@line 3925 "cPickle.c"
        var $49=$class_name; //@line 3925 "cPickle.c"
        var $50=$49; //@line 3925 "cPickle.c"
        var $51=HEAP[$50]; //@line 3925 "cPickle.c"
        var $52=($51)==0; //@line 3925 "cPickle.c"
        if ($52) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3925 "cPickle.c"
      case 13: // $bb12
        var $53=$class_name; //@line 3925 "cPickle.c"
        var $54=$53+4; //@line 3925 "cPickle.c"
        var $55=HEAP[$54]; //@line 3925 "cPickle.c"
        var $56=$55+24; //@line 3925 "cPickle.c"
        var $57=HEAP[$56]; //@line 3925 "cPickle.c"
        var $58=$class_name; //@line 3925 "cPickle.c"
        FUNCTION_TABLE[$57]($58); //@line 3925 "cPickle.c"
        __label__ = 14; break; //@line 3925 "cPickle.c"
      case 14: // $bb13
        var $59=$module_name; //@line 3928 "cPickle.c"
        var $60=$59; //@line 3928 "cPickle.c"
        var $61=HEAP[$60]; //@line 3928 "cPickle.c"
        var $62=($61) - 1; //@line 3928 "cPickle.c"
        var $63=$module_name; //@line 3928 "cPickle.c"
        var $64=$63; //@line 3928 "cPickle.c"
        HEAP[$64]=$62; //@line 3928 "cPickle.c"
        var $65=$module_name; //@line 3928 "cPickle.c"
        var $66=$65; //@line 3928 "cPickle.c"
        var $67=HEAP[$66]; //@line 3928 "cPickle.c"
        var $68=($67)==0; //@line 3928 "cPickle.c"
        if ($68) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 3928 "cPickle.c"
      case 15: // $bb14
        var $69=$module_name; //@line 3928 "cPickle.c"
        var $70=$69+4; //@line 3928 "cPickle.c"
        var $71=HEAP[$70]; //@line 3928 "cPickle.c"
        var $72=$71+24; //@line 3928 "cPickle.c"
        var $73=HEAP[$72]; //@line 3928 "cPickle.c"
        var $74=$module_name; //@line 3928 "cPickle.c"
        FUNCTION_TABLE[$73]($74); //@line 3928 "cPickle.c"
        __label__ = 16; break; //@line 3928 "cPickle.c"
      case 16: // $bb15
        var $75=$class; //@line 3930 "cPickle.c"
        var $76=($75)==0; //@line 3930 "cPickle.c"
        if ($76) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3930 "cPickle.c"
      case 17: // $bb16
        $0=-1; //@line 3930 "cPickle.c"
        __label__ = 31; break; //@line 3930 "cPickle.c"
      case 18: // $bb17
        var $77=$self_addr; //@line 3932 "cPickle.c"
        var $78=$77+32; //@line 3932 "cPickle.c"
        var $79=HEAP[$78]; //@line 3932 "cPickle.c"
        var $80=$i; //@line 3932 "cPickle.c"
        var $81=_Pdata_popTuple($79, $80); //@line 3932 "cPickle.c"
        $tup=$81; //@line 3932 "cPickle.c"
        var $82=$tup; //@line 3932 "cPickle.c"
        var $83=($82)!=0; //@line 3932 "cPickle.c"
        if ($83) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3932 "cPickle.c"
      case 19: // $bb18
        var $84=$class; //@line 3933 "cPickle.c"
        var $85=$tup; //@line 3933 "cPickle.c"
        var $86=_Instance_New($84, $85); //@line 3933 "cPickle.c"
        $obj=$86; //@line 3933 "cPickle.c"
        var $87=$tup; //@line 3934 "cPickle.c"
        var $88=$87; //@line 3934 "cPickle.c"
        var $89=HEAP[$88]; //@line 3934 "cPickle.c"
        var $90=($89) - 1; //@line 3934 "cPickle.c"
        var $91=$tup; //@line 3934 "cPickle.c"
        var $92=$91; //@line 3934 "cPickle.c"
        HEAP[$92]=$90; //@line 3934 "cPickle.c"
        var $93=$tup; //@line 3934 "cPickle.c"
        var $94=$93; //@line 3934 "cPickle.c"
        var $95=HEAP[$94]; //@line 3934 "cPickle.c"
        var $96=($95)==0; //@line 3934 "cPickle.c"
        if ($96) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3934 "cPickle.c"
      case 20: // $bb19
        var $97=$tup; //@line 3934 "cPickle.c"
        var $98=$97+4; //@line 3934 "cPickle.c"
        var $99=HEAP[$98]; //@line 3934 "cPickle.c"
        var $100=$99+24; //@line 3934 "cPickle.c"
        var $101=HEAP[$100]; //@line 3934 "cPickle.c"
        var $102=$tup; //@line 3934 "cPickle.c"
        FUNCTION_TABLE[$101]($102); //@line 3934 "cPickle.c"
        __label__ = 21; break; //@line 3934 "cPickle.c"
      case 21: // $bb20
        var $103=$class; //@line 3936 "cPickle.c"
        var $104=$103; //@line 3936 "cPickle.c"
        var $105=HEAP[$104]; //@line 3936 "cPickle.c"
        var $106=($105) - 1; //@line 3936 "cPickle.c"
        var $107=$class; //@line 3936 "cPickle.c"
        var $108=$107; //@line 3936 "cPickle.c"
        HEAP[$108]=$106; //@line 3936 "cPickle.c"
        var $109=$class; //@line 3936 "cPickle.c"
        var $110=$109; //@line 3936 "cPickle.c"
        var $111=HEAP[$110]; //@line 3936 "cPickle.c"
        var $112=($111)==0; //@line 3936 "cPickle.c"
        if ($112) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 3936 "cPickle.c"
      case 22: // $bb21
        var $113=$class; //@line 3936 "cPickle.c"
        var $114=$113+4; //@line 3936 "cPickle.c"
        var $115=HEAP[$114]; //@line 3936 "cPickle.c"
        var $116=$115+24; //@line 3936 "cPickle.c"
        var $117=HEAP[$116]; //@line 3936 "cPickle.c"
        var $118=$class; //@line 3936 "cPickle.c"
        FUNCTION_TABLE[$117]($118); //@line 3936 "cPickle.c"
        __label__ = 23; break; //@line 3936 "cPickle.c"
      case 23: // $bb22
        var $119=$obj; //@line 3938 "cPickle.c"
        var $120=($119)==0; //@line 3938 "cPickle.c"
        if ($120) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 3938 "cPickle.c"
      case 24: // $bb23
        $0=-1; //@line 3938 "cPickle.c"
        __label__ = 31; break; //@line 3938 "cPickle.c"
      case 25: // $bb24
        var $121=$self_addr; //@line 3940 "cPickle.c"
        var $122=$121+32; //@line 3940 "cPickle.c"
        var $123=HEAP[$122]; //@line 3940 "cPickle.c"
        var $124=$123+8; //@line 3940 "cPickle.c"
        var $125=HEAP[$124]; //@line 3940 "cPickle.c"
        var $126=$self_addr; //@line 3940 "cPickle.c"
        var $127=$126+32; //@line 3940 "cPickle.c"
        var $128=HEAP[$127]; //@line 3940 "cPickle.c"
        var $129=$128+12; //@line 3940 "cPickle.c"
        var $130=HEAP[$129]; //@line 3940 "cPickle.c"
        var $131=($125)==($130); //@line 3940 "cPickle.c"
        if ($131) { __label__ = 26; break; } else { __label__ = 30; break; } //@line 3940 "cPickle.c"
      case 26: // $bb25
        var $132=$self_addr; //@line 3940 "cPickle.c"
        var $133=$132+32; //@line 3940 "cPickle.c"
        var $134=HEAP[$133]; //@line 3940 "cPickle.c"
        var $135=_Pdata_grow($134); //@line 3940 "cPickle.c"
        var $136=($135) < 0; //@line 3940 "cPickle.c"
        if ($136) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 3940 "cPickle.c"
      case 27: // $bb26
        var $137=$obj; //@line 3940 "cPickle.c"
        var $138=$137; //@line 3940 "cPickle.c"
        var $139=HEAP[$138]; //@line 3940 "cPickle.c"
        var $140=($139) - 1; //@line 3940 "cPickle.c"
        var $141=$obj; //@line 3940 "cPickle.c"
        var $142=$141; //@line 3940 "cPickle.c"
        HEAP[$142]=$140; //@line 3940 "cPickle.c"
        var $143=$obj; //@line 3940 "cPickle.c"
        var $144=$143; //@line 3940 "cPickle.c"
        var $145=HEAP[$144]; //@line 3940 "cPickle.c"
        var $146=($145)==0; //@line 3940 "cPickle.c"
        if ($146) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 3940 "cPickle.c"
      case 28: // $bb27
        var $147=$obj; //@line 3940 "cPickle.c"
        var $148=$147+4; //@line 3940 "cPickle.c"
        var $149=HEAP[$148]; //@line 3940 "cPickle.c"
        var $150=$149+24; //@line 3940 "cPickle.c"
        var $151=HEAP[$150]; //@line 3940 "cPickle.c"
        var $152=$obj; //@line 3940 "cPickle.c"
        FUNCTION_TABLE[$151]($152); //@line 3940 "cPickle.c"
        __label__ = 29; break; //@line 3940 "cPickle.c"
      case 29: // $bb28
        $0=-1; //@line 3940 "cPickle.c"
        __label__ = 31; break; //@line 3940 "cPickle.c"
      case 30: // $bb29
        var $153=$self_addr; //@line 3940 "cPickle.c"
        var $154=$153+32; //@line 3940 "cPickle.c"
        var $155=HEAP[$154]; //@line 3940 "cPickle.c"
        var $156=$155+16; //@line 3940 "cPickle.c"
        var $157=HEAP[$156]; //@line 3940 "cPickle.c"
        var $158=$self_addr; //@line 3940 "cPickle.c"
        var $159=$158+32; //@line 3940 "cPickle.c"
        var $160=HEAP[$159]; //@line 3940 "cPickle.c"
        var $161=$160+8; //@line 3940 "cPickle.c"
        var $162=HEAP[$161]; //@line 3940 "cPickle.c"
        var $163=$157+4*$162; //@line 3940 "cPickle.c"
        var $164=$obj; //@line 3940 "cPickle.c"
        HEAP[$163]=$164; //@line 3940 "cPickle.c"
        var $165=($162) + 1; //@line 3940 "cPickle.c"
        var $166=$160+8; //@line 3940 "cPickle.c"
        HEAP[$166]=$165; //@line 3940 "cPickle.c"
        $0=0; //@line 3941 "cPickle.c"
        __label__ = 31; break; //@line 3941 "cPickle.c"
      case 31: // $bb30
        var $167=$0; //@line 3913 "cPickle.c"
        $retval=$167; //@line 3913 "cPickle.c"
        var $retval31=$retval; //@line 3913 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval31; //@line 3913 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_newobj($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $args;
        var $clsraw;
        var $cls;
        var $obj;
        $self_addr=$self;
        $args=0; //@line 3947 "cPickle.c"
        $clsraw=0; //@line 3948 "cPickle.c"
        var $1=$self_addr; //@line 3955 "cPickle.c"
        var $2=$1+32; //@line 3955 "cPickle.c"
        var $3=HEAP[$2]; //@line 3955 "cPickle.c"
        var $4=$3+8; //@line 3955 "cPickle.c"
        var $5=HEAP[$4]; //@line 3955 "cPickle.c"
        var $6=($5)!=0; //@line 3955 "cPickle.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 3955 "cPickle.c"
      case 1: // $Fail_thread
        var $7=HEAP[_UnpicklingError]; //@line 3955 "cPickle.c"
        _PyErr_SetString($7, __str88); //@line 3955 "cPickle.c"
        $args=0; //@line 3955 "cPickle.c"
        __label__ = 27; break;
      case 2: // $bb2
        var $8=$self_addr; //@line 3955 "cPickle.c"
        var $9=$8+32; //@line 3955 "cPickle.c"
        var $10=HEAP[$9]; //@line 3955 "cPickle.c"
        var $11=$10+16; //@line 3955 "cPickle.c"
        var $12=HEAP[$11]; //@line 3955 "cPickle.c"
        var $13=$self_addr; //@line 3955 "cPickle.c"
        var $14=$13+32; //@line 3955 "cPickle.c"
        var $15=HEAP[$14]; //@line 3955 "cPickle.c"
        var $16=$15+8; //@line 3955 "cPickle.c"
        var $17=HEAP[$16]; //@line 3955 "cPickle.c"
        var $18=($17) - 1; //@line 3955 "cPickle.c"
        var $19=$15+8; //@line 3955 "cPickle.c"
        HEAP[$19]=$18; //@line 3955 "cPickle.c"
        var $20=$15+8; //@line 3955 "cPickle.c"
        var $21=HEAP[$20]; //@line 3955 "cPickle.c"
        var $22=$12+4*$21; //@line 3955 "cPickle.c"
        var $23=HEAP[$22]; //@line 3955 "cPickle.c"
        $args=$23; //@line 3955 "cPickle.c"
        var $24=($23)==0; //@line 3956 "cPickle.c"
        if ($24) { __label__ = 27; break; } else { __label__ = 3; break; } //@line 3956 "cPickle.c"
      case 3: // $bb3
        var $25=$args; //@line 3957 "cPickle.c"
        var $26=$25+4; //@line 3957 "cPickle.c"
        var $27=HEAP[$26]; //@line 3957 "cPickle.c"
        var $28=$27+84; //@line 3957 "cPickle.c"
        var $29=HEAP[$28]; //@line 3957 "cPickle.c"
        var $30=($29) & 67108864; //@line 3957 "cPickle.c"
        var $31=($30)==0; //@line 3957 "cPickle.c"
        if ($31) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3957 "cPickle.c"
      case 4: // $bb4
        var $32=HEAP[_UnpicklingError]; //@line 3958 "cPickle.c"
        _PyErr_SetString($32, __str89); //@line 3958 "cPickle.c"
        __label__ = 24; break; //@line 3958 "cPickle.c"
      case 5: // $bb5
        var $33=$self_addr; //@line 3963 "cPickle.c"
        var $34=$33+32; //@line 3963 "cPickle.c"
        var $35=HEAP[$34]; //@line 3963 "cPickle.c"
        var $36=$35+8; //@line 3963 "cPickle.c"
        var $37=HEAP[$36]; //@line 3963 "cPickle.c"
        var $38=($37)!=0; //@line 3963 "cPickle.c"
        if ($38) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3963 "cPickle.c"
      case 6: // $bb6
        var $39=$self_addr; //@line 3963 "cPickle.c"
        var $40=$39+32; //@line 3963 "cPickle.c"
        var $41=HEAP[$40]; //@line 3963 "cPickle.c"
        var $42=$41+16; //@line 3963 "cPickle.c"
        var $43=HEAP[$42]; //@line 3963 "cPickle.c"
        var $44=$self_addr; //@line 3963 "cPickle.c"
        var $45=$44+32; //@line 3963 "cPickle.c"
        var $46=HEAP[$45]; //@line 3963 "cPickle.c"
        var $47=$46+8; //@line 3963 "cPickle.c"
        var $48=HEAP[$47]; //@line 3963 "cPickle.c"
        var $49=($48) - 1; //@line 3963 "cPickle.c"
        var $50=$46+8; //@line 3963 "cPickle.c"
        HEAP[$50]=$49; //@line 3963 "cPickle.c"
        var $51=$46+8; //@line 3963 "cPickle.c"
        var $52=HEAP[$51]; //@line 3963 "cPickle.c"
        var $53=$43+4*$52; //@line 3963 "cPickle.c"
        var $54=HEAP[$53]; //@line 3963 "cPickle.c"
        $clsraw=$54; //@line 3963 "cPickle.c"
        __label__ = 8; break; //@line 3963 "cPickle.c"
      case 7: // $bb7
        var $55=HEAP[_UnpicklingError]; //@line 3963 "cPickle.c"
        _PyErr_SetString($55, __str88); //@line 3963 "cPickle.c"
        $clsraw=0; //@line 3963 "cPickle.c"
        __label__ = 8; break; //@line 3963 "cPickle.c"
      case 8: // $bb8
        var $56=$clsraw; //@line 3964 "cPickle.c"
        var $57=$56; //@line 3964 "cPickle.c"
        $cls=$57; //@line 3964 "cPickle.c"
        var $58=($57)==0; //@line 3965 "cPickle.c"
        if ($58) { __label__ = 24; break; } else { __label__ = 9; break; } //@line 3965 "cPickle.c"
      case 9: // $bb9
        var $59=$cls; //@line 3966 "cPickle.c"
        var $60=$59; //@line 3966 "cPickle.c"
        var $61=$60+4; //@line 3966 "cPickle.c"
        var $62=HEAP[$61]; //@line 3966 "cPickle.c"
        var $63=$62+84; //@line 3966 "cPickle.c"
        var $64=HEAP[$63]; //@line 3966 "cPickle.c"
        var $65=($64) >= 0; //@line 3966 "cPickle.c"
        if ($65) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3966 "cPickle.c"
      case 10: // $bb10
        var $66=HEAP[_UnpicklingError]; //@line 3967 "cPickle.c"
        _PyErr_SetString($66, __str90); //@line 3967 "cPickle.c"
        __label__ = 24; break; //@line 3967 "cPickle.c"
      case 11: // $bb11
        var $67=$cls; //@line 3971 "cPickle.c"
        var $68=$67+156; //@line 3971 "cPickle.c"
        var $69=HEAP[$68]; //@line 3971 "cPickle.c"
        var $70=($69)==0; //@line 3971 "cPickle.c"
        if ($70) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 3971 "cPickle.c"
      case 12: // $bb12
        var $71=HEAP[_UnpicklingError]; //@line 3972 "cPickle.c"
        _PyErr_SetString($71, __str91); //@line 3972 "cPickle.c"
        __label__ = 24; break; //@line 3972 "cPickle.c"
      case 13: // $bb13
        var $72=$cls; //@line 3978 "cPickle.c"
        var $73=$72+156; //@line 3978 "cPickle.c"
        var $74=HEAP[$73]; //@line 3978 "cPickle.c"
        var $75=$cls; //@line 3978 "cPickle.c"
        var $76=$args; //@line 3978 "cPickle.c"
        var $77=FUNCTION_TABLE[$74]($75, $76, 0); //@line 3978 "cPickle.c"
        $obj=$77; //@line 3978 "cPickle.c"
        var $78=$obj; //@line 3979 "cPickle.c"
        var $79=($78)==0; //@line 3979 "cPickle.c"
        if ($79) { __label__ = 24; break; } else { __label__ = 14; break; } //@line 3979 "cPickle.c"
      case 14: // $bb14
        var $80=$args; //@line 3981 "cPickle.c"
        var $81=$80; //@line 3981 "cPickle.c"
        var $82=HEAP[$81]; //@line 3981 "cPickle.c"
        var $83=($82) - 1; //@line 3981 "cPickle.c"
        var $84=$args; //@line 3981 "cPickle.c"
        var $85=$84; //@line 3981 "cPickle.c"
        HEAP[$85]=$83; //@line 3981 "cPickle.c"
        var $86=$args; //@line 3981 "cPickle.c"
        var $87=$86; //@line 3981 "cPickle.c"
        var $88=HEAP[$87]; //@line 3981 "cPickle.c"
        var $89=($88)==0; //@line 3981 "cPickle.c"
        if ($89) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 3981 "cPickle.c"
      case 15: // $bb15
        var $90=$args; //@line 3981 "cPickle.c"
        var $91=$90+4; //@line 3981 "cPickle.c"
        var $92=HEAP[$91]; //@line 3981 "cPickle.c"
        var $93=$92+24; //@line 3981 "cPickle.c"
        var $94=HEAP[$93]; //@line 3981 "cPickle.c"
        var $95=$args; //@line 3981 "cPickle.c"
        FUNCTION_TABLE[$94]($95); //@line 3981 "cPickle.c"
        __label__ = 16; break; //@line 3981 "cPickle.c"
      case 16: // $bb16
        var $96=$clsraw; //@line 3982 "cPickle.c"
        var $97=$96; //@line 3982 "cPickle.c"
        var $98=HEAP[$97]; //@line 3982 "cPickle.c"
        var $99=($98) - 1; //@line 3982 "cPickle.c"
        var $100=$clsraw; //@line 3982 "cPickle.c"
        var $101=$100; //@line 3982 "cPickle.c"
        HEAP[$101]=$99; //@line 3982 "cPickle.c"
        var $102=$clsraw; //@line 3982 "cPickle.c"
        var $103=$102; //@line 3982 "cPickle.c"
        var $104=HEAP[$103]; //@line 3982 "cPickle.c"
        var $105=($104)==0; //@line 3982 "cPickle.c"
        if ($105) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3982 "cPickle.c"
      case 17: // $bb17
        var $106=$clsraw; //@line 3982 "cPickle.c"
        var $107=$106+4; //@line 3982 "cPickle.c"
        var $108=HEAP[$107]; //@line 3982 "cPickle.c"
        var $109=$108+24; //@line 3982 "cPickle.c"
        var $110=HEAP[$109]; //@line 3982 "cPickle.c"
        var $111=$clsraw; //@line 3982 "cPickle.c"
        FUNCTION_TABLE[$110]($111); //@line 3982 "cPickle.c"
        __label__ = 18; break; //@line 3982 "cPickle.c"
      case 18: // $bb18
        var $112=$self_addr; //@line 3983 "cPickle.c"
        var $113=$112+32; //@line 3983 "cPickle.c"
        var $114=HEAP[$113]; //@line 3983 "cPickle.c"
        var $115=$114+8; //@line 3983 "cPickle.c"
        var $116=HEAP[$115]; //@line 3983 "cPickle.c"
        var $117=$self_addr; //@line 3983 "cPickle.c"
        var $118=$117+32; //@line 3983 "cPickle.c"
        var $119=HEAP[$118]; //@line 3983 "cPickle.c"
        var $120=$119+12; //@line 3983 "cPickle.c"
        var $121=HEAP[$120]; //@line 3983 "cPickle.c"
        var $122=($116)==($121); //@line 3983 "cPickle.c"
        if ($122) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 3983 "cPickle.c"
      case 19: // $bb19
        var $123=$self_addr; //@line 3983 "cPickle.c"
        var $124=$123+32; //@line 3983 "cPickle.c"
        var $125=HEAP[$124]; //@line 3983 "cPickle.c"
        var $126=_Pdata_grow($125); //@line 3983 "cPickle.c"
        var $127=($126) < 0; //@line 3983 "cPickle.c"
        if ($127) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 3983 "cPickle.c"
      case 20: // $bb20
        var $128=$obj; //@line 3983 "cPickle.c"
        var $129=$128; //@line 3983 "cPickle.c"
        var $130=HEAP[$129]; //@line 3983 "cPickle.c"
        var $131=($130) - 1; //@line 3983 "cPickle.c"
        var $132=$obj; //@line 3983 "cPickle.c"
        var $133=$132; //@line 3983 "cPickle.c"
        HEAP[$133]=$131; //@line 3983 "cPickle.c"
        var $134=$obj; //@line 3983 "cPickle.c"
        var $135=$134; //@line 3983 "cPickle.c"
        var $136=HEAP[$135]; //@line 3983 "cPickle.c"
        var $137=($136)==0; //@line 3983 "cPickle.c"
        if ($137) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 3983 "cPickle.c"
      case 21: // $bb21
        var $138=$obj; //@line 3983 "cPickle.c"
        var $139=$138+4; //@line 3983 "cPickle.c"
        var $140=HEAP[$139]; //@line 3983 "cPickle.c"
        var $141=$140+24; //@line 3983 "cPickle.c"
        var $142=HEAP[$141]; //@line 3983 "cPickle.c"
        var $143=$obj; //@line 3983 "cPickle.c"
        FUNCTION_TABLE[$142]($143); //@line 3983 "cPickle.c"
        __label__ = 22; break; //@line 3983 "cPickle.c"
      case 22: // $bb22
        $0=-1; //@line 3983 "cPickle.c"
        __label__ = 31; break; //@line 3983 "cPickle.c"
      case 23: // $bb23
        var $144=$self_addr; //@line 3983 "cPickle.c"
        var $145=$144+32; //@line 3983 "cPickle.c"
        var $146=HEAP[$145]; //@line 3983 "cPickle.c"
        var $147=$146+16; //@line 3983 "cPickle.c"
        var $148=HEAP[$147]; //@line 3983 "cPickle.c"
        var $149=$self_addr; //@line 3983 "cPickle.c"
        var $150=$149+32; //@line 3983 "cPickle.c"
        var $151=HEAP[$150]; //@line 3983 "cPickle.c"
        var $152=$151+8; //@line 3983 "cPickle.c"
        var $153=HEAP[$152]; //@line 3983 "cPickle.c"
        var $154=$148+4*$153; //@line 3983 "cPickle.c"
        var $155=$obj; //@line 3983 "cPickle.c"
        HEAP[$154]=$155; //@line 3983 "cPickle.c"
        var $156=($153) + 1; //@line 3983 "cPickle.c"
        var $157=$151+8; //@line 3983 "cPickle.c"
        HEAP[$157]=$156; //@line 3983 "cPickle.c"
        $0=0; //@line 3984 "cPickle.c"
        __label__ = 31; break; //@line 3984 "cPickle.c"
      case 24: // $Fail
        var $_pr_pr=$args;
        var $158=($_pr_pr)!=0; //@line 3987 "cPickle.c"
        if ($158) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 3987 "cPickle.c"
      case 25: // $bb24
        var $159=$args; //@line 3987 "cPickle.c"
        var $160=$159; //@line 3987 "cPickle.c"
        var $161=HEAP[$160]; //@line 3987 "cPickle.c"
        var $162=($161) - 1; //@line 3987 "cPickle.c"
        var $163=$args; //@line 3987 "cPickle.c"
        var $164=$163; //@line 3987 "cPickle.c"
        HEAP[$164]=$162; //@line 3987 "cPickle.c"
        var $165=$args; //@line 3987 "cPickle.c"
        var $166=$165; //@line 3987 "cPickle.c"
        var $167=HEAP[$166]; //@line 3987 "cPickle.c"
        var $168=($167)==0; //@line 3987 "cPickle.c"
        if ($168) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 3987 "cPickle.c"
      case 26: // $bb25
        var $169=$args; //@line 3987 "cPickle.c"
        var $170=$169+4; //@line 3987 "cPickle.c"
        var $171=HEAP[$170]; //@line 3987 "cPickle.c"
        var $172=$171+24; //@line 3987 "cPickle.c"
        var $173=HEAP[$172]; //@line 3987 "cPickle.c"
        var $174=$args; //@line 3987 "cPickle.c"
        FUNCTION_TABLE[$173]($174); //@line 3987 "cPickle.c"
        __label__ = 27; break; //@line 3987 "cPickle.c"
      case 27: // $bb26
        var $175=$clsraw; //@line 3988 "cPickle.c"
        var $176=($175)!=0; //@line 3988 "cPickle.c"
        if ($176) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 3988 "cPickle.c"
      case 28: // $bb27
        var $177=$clsraw; //@line 3988 "cPickle.c"
        var $178=$177; //@line 3988 "cPickle.c"
        var $179=HEAP[$178]; //@line 3988 "cPickle.c"
        var $180=($179) - 1; //@line 3988 "cPickle.c"
        var $181=$clsraw; //@line 3988 "cPickle.c"
        var $182=$181; //@line 3988 "cPickle.c"
        HEAP[$182]=$180; //@line 3988 "cPickle.c"
        var $183=$clsraw; //@line 3988 "cPickle.c"
        var $184=$183; //@line 3988 "cPickle.c"
        var $185=HEAP[$184]; //@line 3988 "cPickle.c"
        var $186=($185)==0; //@line 3988 "cPickle.c"
        if ($186) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 3988 "cPickle.c"
      case 29: // $bb28
        var $187=$clsraw; //@line 3988 "cPickle.c"
        var $188=$187+4; //@line 3988 "cPickle.c"
        var $189=HEAP[$188]; //@line 3988 "cPickle.c"
        var $190=$189+24; //@line 3988 "cPickle.c"
        var $191=HEAP[$190]; //@line 3988 "cPickle.c"
        var $192=$clsraw; //@line 3988 "cPickle.c"
        FUNCTION_TABLE[$191]($192); //@line 3988 "cPickle.c"
        __label__ = 30; break; //@line 3988 "cPickle.c"
      case 30: // $bb29
        $0=-1; //@line 3989 "cPickle.c"
        __label__ = 31; break; //@line 3989 "cPickle.c"
      case 31: // $bb30
        var $193=$0; //@line 3983 "cPickle.c"
        $retval=$193; //@line 3983 "cPickle.c"
        var $retval31=$retval; //@line 3983 "cPickle.c"
        ;
        return $retval31; //@line 3983 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_global($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $class;
        var $module_name;
        var $class_name;
        var $len;
        var $s=__stackBase__;
        $self_addr=$self;
        $class=0; //@line 3995 "cPickle.c"
        $module_name=0; //@line 3995 "cPickle.c"
        $class_name=0; //@line 3995 "cPickle.c"
        var $1=$self_addr; //@line 3999 "cPickle.c"
        var $2=$1+64; //@line 3999 "cPickle.c"
        var $3=HEAP[$2]; //@line 3999 "cPickle.c"
        var $4=$self_addr; //@line 3999 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 3999 "cPickle.c"
        $len=$5; //@line 3999 "cPickle.c"
        var $6=$len; //@line 3999 "cPickle.c"
        var $7=($6) < 0; //@line 3999 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3999 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3999 "cPickle.c"
        __label__ = 24; break; //@line 3999 "cPickle.c"
      case 2: // $bb1
        var $8=$len; //@line 4000 "cPickle.c"
        var $9=($8) <= 1; //@line 4000 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4000 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 4000 "cPickle.c"
        $0=$10; //@line 4000 "cPickle.c"
        __label__ = 24; break; //@line 4000 "cPickle.c"
      case 4: // $bb3
        var $11=$len; //@line 4001 "cPickle.c"
        var $12=($11) - 1; //@line 4001 "cPickle.c"
        var $13=HEAP[$s]; //@line 4001 "cPickle.c"
        var $14=_PyString_FromStringAndSize($13, $12); //@line 4001 "cPickle.c"
        $module_name=$14; //@line 4001 "cPickle.c"
        var $15=$module_name; //@line 4002 "cPickle.c"
        var $16=($15)==0; //@line 4002 "cPickle.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4002 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 4002 "cPickle.c"
        __label__ = 24; break; //@line 4002 "cPickle.c"
      case 6: // $bb5
        var $17=$self_addr; //@line 4004 "cPickle.c"
        var $18=$17+64; //@line 4004 "cPickle.c"
        var $19=HEAP[$18]; //@line 4004 "cPickle.c"
        var $20=$self_addr; //@line 4004 "cPickle.c"
        var $21=FUNCTION_TABLE[$19]($20, $s); //@line 4004 "cPickle.c"
        $len=$21; //@line 4004 "cPickle.c"
        var $22=$len; //@line 4004 "cPickle.c"
        var $23=($22) >= 0; //@line 4004 "cPickle.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 14; break; } //@line 4004 "cPickle.c"
      case 7: // $bb6
        var $24=$len; //@line 4005 "cPickle.c"
        var $25=($24) <= 1; //@line 4005 "cPickle.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 4005 "cPickle.c"
      case 8: // $bb7
        var $26=$module_name; //@line 4006 "cPickle.c"
        var $27=$26; //@line 4006 "cPickle.c"
        var $28=HEAP[$27]; //@line 4006 "cPickle.c"
        var $29=($28) - 1; //@line 4006 "cPickle.c"
        var $30=$module_name; //@line 4006 "cPickle.c"
        var $31=$30; //@line 4006 "cPickle.c"
        HEAP[$31]=$29; //@line 4006 "cPickle.c"
        var $32=$module_name; //@line 4006 "cPickle.c"
        var $33=$32; //@line 4006 "cPickle.c"
        var $34=HEAP[$33]; //@line 4006 "cPickle.c"
        var $35=($34)==0; //@line 4006 "cPickle.c"
        if ($35) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4006 "cPickle.c"
      case 9: // $bb8
        var $36=$module_name; //@line 4006 "cPickle.c"
        var $37=$36+4; //@line 4006 "cPickle.c"
        var $38=HEAP[$37]; //@line 4006 "cPickle.c"
        var $39=$38+24; //@line 4006 "cPickle.c"
        var $40=HEAP[$39]; //@line 4006 "cPickle.c"
        var $41=$module_name; //@line 4006 "cPickle.c"
        FUNCTION_TABLE[$40]($41); //@line 4006 "cPickle.c"
        __label__ = 10; break; //@line 4006 "cPickle.c"
      case 10: // $bb9
        var $42=_bad_readline(); //@line 4007 "cPickle.c"
        $0=$42; //@line 4007 "cPickle.c"
        __label__ = 24; break; //@line 4007 "cPickle.c"
      case 11: // $bb10
        var $43=$len; //@line 4009 "cPickle.c"
        var $44=($43) - 1; //@line 4009 "cPickle.c"
        var $45=HEAP[$s]; //@line 4009 "cPickle.c"
        var $46=_PyString_FromStringAndSize($45, $44); //@line 4009 "cPickle.c"
        $class_name=$46; //@line 4009 "cPickle.c"
        var $47=$class_name; //@line 4009 "cPickle.c"
        var $48=($47)!=0; //@line 4009 "cPickle.c"
        if ($48) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 4009 "cPickle.c"
      case 12: // $bb11
        var $49=$self_addr; //@line 4010 "cPickle.c"
        var $50=$49+76; //@line 4010 "cPickle.c"
        var $51=HEAP[$50]; //@line 4010 "cPickle.c"
        var $52=$module_name; //@line 4010 "cPickle.c"
        var $53=$class_name; //@line 4010 "cPickle.c"
        var $54=_find_class($52, $53, $51); //@line 4010 "cPickle.c"
        $class=$54; //@line 4010 "cPickle.c"
        var $55=$class_name; //@line 4012 "cPickle.c"
        var $56=$55; //@line 4012 "cPickle.c"
        var $57=HEAP[$56]; //@line 4012 "cPickle.c"
        var $58=($57) - 1; //@line 4012 "cPickle.c"
        var $59=$class_name; //@line 4012 "cPickle.c"
        var $60=$59; //@line 4012 "cPickle.c"
        HEAP[$60]=$58; //@line 4012 "cPickle.c"
        var $61=$class_name; //@line 4012 "cPickle.c"
        var $62=$61; //@line 4012 "cPickle.c"
        var $63=HEAP[$62]; //@line 4012 "cPickle.c"
        var $64=($63)==0; //@line 4012 "cPickle.c"
        if ($64) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4012 "cPickle.c"
      case 13: // $bb12
        var $65=$class_name; //@line 4012 "cPickle.c"
        var $66=$65+4; //@line 4012 "cPickle.c"
        var $67=HEAP[$66]; //@line 4012 "cPickle.c"
        var $68=$67+24; //@line 4012 "cPickle.c"
        var $69=HEAP[$68]; //@line 4012 "cPickle.c"
        var $70=$class_name; //@line 4012 "cPickle.c"
        FUNCTION_TABLE[$69]($70); //@line 4012 "cPickle.c"
        __label__ = 14; break; //@line 4012 "cPickle.c"
      case 14: // $bb13
        var $71=$module_name; //@line 4015 "cPickle.c"
        var $72=$71; //@line 4015 "cPickle.c"
        var $73=HEAP[$72]; //@line 4015 "cPickle.c"
        var $74=($73) - 1; //@line 4015 "cPickle.c"
        var $75=$module_name; //@line 4015 "cPickle.c"
        var $76=$75; //@line 4015 "cPickle.c"
        HEAP[$76]=$74; //@line 4015 "cPickle.c"
        var $77=$module_name; //@line 4015 "cPickle.c"
        var $78=$77; //@line 4015 "cPickle.c"
        var $79=HEAP[$78]; //@line 4015 "cPickle.c"
        var $80=($79)==0; //@line 4015 "cPickle.c"
        if ($80) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4015 "cPickle.c"
      case 15: // $bb14
        var $81=$module_name; //@line 4015 "cPickle.c"
        var $82=$81+4; //@line 4015 "cPickle.c"
        var $83=HEAP[$82]; //@line 4015 "cPickle.c"
        var $84=$83+24; //@line 4015 "cPickle.c"
        var $85=HEAP[$84]; //@line 4015 "cPickle.c"
        var $86=$module_name; //@line 4015 "cPickle.c"
        FUNCTION_TABLE[$85]($86); //@line 4015 "cPickle.c"
        __label__ = 16; break; //@line 4015 "cPickle.c"
      case 16: // $bb15
        var $87=$class; //@line 4017 "cPickle.c"
        var $88=($87)==0; //@line 4017 "cPickle.c"
        if ($88) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4017 "cPickle.c"
      case 17: // $bb16
        $0=-1; //@line 4017 "cPickle.c"
        __label__ = 24; break; //@line 4017 "cPickle.c"
      case 18: // $bb17
        var $89=$self_addr; //@line 4018 "cPickle.c"
        var $90=$89+32; //@line 4018 "cPickle.c"
        var $91=HEAP[$90]; //@line 4018 "cPickle.c"
        var $92=$91+8; //@line 4018 "cPickle.c"
        var $93=HEAP[$92]; //@line 4018 "cPickle.c"
        var $94=$self_addr; //@line 4018 "cPickle.c"
        var $95=$94+32; //@line 4018 "cPickle.c"
        var $96=HEAP[$95]; //@line 4018 "cPickle.c"
        var $97=$96+12; //@line 4018 "cPickle.c"
        var $98=HEAP[$97]; //@line 4018 "cPickle.c"
        var $99=($93)==($98); //@line 4018 "cPickle.c"
        if ($99) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 4018 "cPickle.c"
      case 19: // $bb18
        var $100=$self_addr; //@line 4018 "cPickle.c"
        var $101=$100+32; //@line 4018 "cPickle.c"
        var $102=HEAP[$101]; //@line 4018 "cPickle.c"
        var $103=_Pdata_grow($102); //@line 4018 "cPickle.c"
        var $104=($103) < 0; //@line 4018 "cPickle.c"
        if ($104) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 4018 "cPickle.c"
      case 20: // $bb19
        var $105=$class; //@line 4018 "cPickle.c"
        var $106=$105; //@line 4018 "cPickle.c"
        var $107=HEAP[$106]; //@line 4018 "cPickle.c"
        var $108=($107) - 1; //@line 4018 "cPickle.c"
        var $109=$class; //@line 4018 "cPickle.c"
        var $110=$109; //@line 4018 "cPickle.c"
        HEAP[$110]=$108; //@line 4018 "cPickle.c"
        var $111=$class; //@line 4018 "cPickle.c"
        var $112=$111; //@line 4018 "cPickle.c"
        var $113=HEAP[$112]; //@line 4018 "cPickle.c"
        var $114=($113)==0; //@line 4018 "cPickle.c"
        if ($114) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4018 "cPickle.c"
      case 21: // $bb20
        var $115=$class; //@line 4018 "cPickle.c"
        var $116=$115+4; //@line 4018 "cPickle.c"
        var $117=HEAP[$116]; //@line 4018 "cPickle.c"
        var $118=$117+24; //@line 4018 "cPickle.c"
        var $119=HEAP[$118]; //@line 4018 "cPickle.c"
        var $120=$class; //@line 4018 "cPickle.c"
        FUNCTION_TABLE[$119]($120); //@line 4018 "cPickle.c"
        __label__ = 22; break; //@line 4018 "cPickle.c"
      case 22: // $bb21
        $0=-1; //@line 4018 "cPickle.c"
        __label__ = 24; break; //@line 4018 "cPickle.c"
      case 23: // $bb22
        var $121=$self_addr; //@line 4018 "cPickle.c"
        var $122=$121+32; //@line 4018 "cPickle.c"
        var $123=HEAP[$122]; //@line 4018 "cPickle.c"
        var $124=$123+16; //@line 4018 "cPickle.c"
        var $125=HEAP[$124]; //@line 4018 "cPickle.c"
        var $126=$self_addr; //@line 4018 "cPickle.c"
        var $127=$126+32; //@line 4018 "cPickle.c"
        var $128=HEAP[$127]; //@line 4018 "cPickle.c"
        var $129=$128+8; //@line 4018 "cPickle.c"
        var $130=HEAP[$129]; //@line 4018 "cPickle.c"
        var $131=$125+4*$130; //@line 4018 "cPickle.c"
        var $132=$class; //@line 4018 "cPickle.c"
        HEAP[$131]=$132; //@line 4018 "cPickle.c"
        var $133=($130) + 1; //@line 4018 "cPickle.c"
        var $134=$128+8; //@line 4018 "cPickle.c"
        HEAP[$134]=$133; //@line 4018 "cPickle.c"
        $0=0; //@line 4019 "cPickle.c"
        __label__ = 24; break; //@line 4019 "cPickle.c"
      case 24: // $bb23
        var $135=$0; //@line 3999 "cPickle.c"
        $retval=$135; //@line 3999 "cPickle.c"
        var $retval24=$retval; //@line 3999 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 3999 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_persid($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $pid;
        var $len;
        var $s=__stackBase__;
        $self_addr=$self;
        $pid=0; //@line 4026 "cPickle.c"
        var $1=$self_addr; //@line 4030 "cPickle.c"
        var $2=$1+40; //@line 4030 "cPickle.c"
        var $3=HEAP[$2]; //@line 4030 "cPickle.c"
        var $4=($3)!=0; //@line 4030 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 33; break; } //@line 4030 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 4031 "cPickle.c"
        var $6=$5+64; //@line 4031 "cPickle.c"
        var $7=HEAP[$6]; //@line 4031 "cPickle.c"
        var $8=$self_addr; //@line 4031 "cPickle.c"
        var $9=FUNCTION_TABLE[$7]($8, $s); //@line 4031 "cPickle.c"
        $len=$9; //@line 4031 "cPickle.c"
        var $10=$len; //@line 4031 "cPickle.c"
        var $11=($10) < 0; //@line 4031 "cPickle.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4031 "cPickle.c"
      case 2: // $bb1
        $0=-1; //@line 4031 "cPickle.c"
        __label__ = 34; break; //@line 4031 "cPickle.c"
      case 3: // $bb2
        var $12=$len; //@line 4032 "cPickle.c"
        var $13=($12) <= 1; //@line 4032 "cPickle.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4032 "cPickle.c"
      case 4: // $bb3
        var $14=_bad_readline(); //@line 4032 "cPickle.c"
        $0=$14; //@line 4032 "cPickle.c"
        __label__ = 34; break; //@line 4032 "cPickle.c"
      case 5: // $bb4
        var $15=$len; //@line 4034 "cPickle.c"
        var $16=($15) - 1; //@line 4034 "cPickle.c"
        var $17=HEAP[$s]; //@line 4034 "cPickle.c"
        var $18=_PyString_FromStringAndSize($17, $16); //@line 4034 "cPickle.c"
        $pid=$18; //@line 4034 "cPickle.c"
        var $19=$pid; //@line 4035 "cPickle.c"
        var $20=($19)==0; //@line 4035 "cPickle.c"
        if ($20) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4035 "cPickle.c"
      case 6: // $bb5
        $0=-1; //@line 4035 "cPickle.c"
        __label__ = 34; break; //@line 4035 "cPickle.c"
      case 7: // $bb6
        var $21=$self_addr; //@line 4037 "cPickle.c"
        var $22=$21+40; //@line 4037 "cPickle.c"
        var $23=HEAP[$22]; //@line 4037 "cPickle.c"
        var $24=$23+4; //@line 4037 "cPickle.c"
        var $25=HEAP[$24]; //@line 4037 "cPickle.c"
        var $26=$25+84; //@line 4037 "cPickle.c"
        var $27=HEAP[$26]; //@line 4037 "cPickle.c"
        var $28=($27) & 33554432; //@line 4037 "cPickle.c"
        var $29=($28)!=0; //@line 4037 "cPickle.c"
        var $30=$self_addr; //@line 4038 "cPickle.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 4037 "cPickle.c"
      case 8: // $bb7
        var $31=$30+40; //@line 4038 "cPickle.c"
        var $32=HEAP[$31]; //@line 4038 "cPickle.c"
        var $33=$pid; //@line 4038 "cPickle.c"
        var $34=_PyList_Append($32, $33); //@line 4038 "cPickle.c"
        var $35=($34) < 0; //@line 4038 "cPickle.c"
        if ($35) { __label__ = 9; break; } else { __label__ = 25; break; } //@line 4038 "cPickle.c"
      case 9: // $bb8
        var $36=$pid; //@line 4039 "cPickle.c"
        var $37=$36; //@line 4039 "cPickle.c"
        var $38=HEAP[$37]; //@line 4039 "cPickle.c"
        var $39=($38) - 1; //@line 4039 "cPickle.c"
        var $40=$pid; //@line 4039 "cPickle.c"
        var $41=$40; //@line 4039 "cPickle.c"
        HEAP[$41]=$39; //@line 4039 "cPickle.c"
        var $42=$pid; //@line 4039 "cPickle.c"
        var $43=$42; //@line 4039 "cPickle.c"
        var $44=HEAP[$43]; //@line 4039 "cPickle.c"
        var $45=($44)==0; //@line 4039 "cPickle.c"
        if ($45) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4039 "cPickle.c"
      case 10: // $bb9
        var $46=$pid; //@line 4039 "cPickle.c"
        var $47=$46+4; //@line 4039 "cPickle.c"
        var $48=HEAP[$47]; //@line 4039 "cPickle.c"
        var $49=$48+24; //@line 4039 "cPickle.c"
        var $50=HEAP[$49]; //@line 4039 "cPickle.c"
        var $51=$pid; //@line 4039 "cPickle.c"
        FUNCTION_TABLE[$50]($51); //@line 4039 "cPickle.c"
        __label__ = 11; break; //@line 4039 "cPickle.c"
      case 11: // $bb10
        $0=-1; //@line 4040 "cPickle.c"
        __label__ = 34; break; //@line 4040 "cPickle.c"
      case 12: // $bb12
        var $52=$30+28; //@line 4044 "cPickle.c"
        var $53=HEAP[$52]; //@line 4044 "cPickle.c"
        var $54=($53)!=0; //@line 4044 "cPickle.c"
        if ($54) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 4044 "cPickle.c"
      case 13: // $bb13
        var $55=_PyTuple_New(1); //@line 4044 "cPickle.c"
        var $56=$self_addr; //@line 4044 "cPickle.c"
        var $57=$56+28; //@line 4044 "cPickle.c"
        HEAP[$57]=$55; //@line 4044 "cPickle.c"
        var $58=$self_addr; //@line 4044 "cPickle.c"
        var $59=$58+28; //@line 4044 "cPickle.c"
        var $60=HEAP[$59]; //@line 4044 "cPickle.c"
        var $61=($60)!=0; //@line 4044 "cPickle.c"
        if ($61) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 4044 "cPickle.c"
      case 14: // $bb14
        var $62=$self_addr; //@line 4044 "cPickle.c"
        var $63=$62+28; //@line 4044 "cPickle.c"
        var $64=HEAP[$63]; //@line 4044 "cPickle.c"
        var $65=$64; //@line 4044 "cPickle.c"
        var $66=$65+12; //@line 4044 "cPickle.c"
        var $67=$66; //@line 4044 "cPickle.c"
        var $68=HEAP[$67]; //@line 4044 "cPickle.c"
        var $69=($68)!=0; //@line 4044 "cPickle.c"
        if ($69) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 4044 "cPickle.c"
      case 15: // $bb15
        var $70=$self_addr; //@line 4044 "cPickle.c"
        var $71=$70+28; //@line 4044 "cPickle.c"
        var $72=HEAP[$71]; //@line 4044 "cPickle.c"
        var $73=$72; //@line 4044 "cPickle.c"
        var $74=$73+12; //@line 4044 "cPickle.c"
        var $75=$74; //@line 4044 "cPickle.c"
        var $76=HEAP[$75]; //@line 4044 "cPickle.c"
        var $77=$76; //@line 4044 "cPickle.c"
        var $78=HEAP[$77]; //@line 4044 "cPickle.c"
        var $79=($78) - 1; //@line 4044 "cPickle.c"
        var $80=$76; //@line 4044 "cPickle.c"
        HEAP[$80]=$79; //@line 4044 "cPickle.c"
        var $81=$76; //@line 4044 "cPickle.c"
        var $82=HEAP[$81]; //@line 4044 "cPickle.c"
        var $83=($82)==0; //@line 4044 "cPickle.c"
        if ($83) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4044 "cPickle.c"
      case 16: // $bb16
        var $84=$self_addr; //@line 4044 "cPickle.c"
        var $85=$84+28; //@line 4044 "cPickle.c"
        var $86=HEAP[$85]; //@line 4044 "cPickle.c"
        var $87=$86; //@line 4044 "cPickle.c"
        var $88=$87+12; //@line 4044 "cPickle.c"
        var $89=$88; //@line 4044 "cPickle.c"
        var $90=HEAP[$89]; //@line 4044 "cPickle.c"
        var $91=$90+4; //@line 4044 "cPickle.c"
        var $92=HEAP[$91]; //@line 4044 "cPickle.c"
        var $93=$92+24; //@line 4044 "cPickle.c"
        var $94=HEAP[$93]; //@line 4044 "cPickle.c"
        var $95=$self_addr; //@line 4044 "cPickle.c"
        var $96=$95+28; //@line 4044 "cPickle.c"
        var $97=HEAP[$96]; //@line 4044 "cPickle.c"
        var $98=$97; //@line 4044 "cPickle.c"
        var $99=$98+12; //@line 4044 "cPickle.c"
        var $100=$99; //@line 4044 "cPickle.c"
        var $101=HEAP[$100]; //@line 4044 "cPickle.c"
        FUNCTION_TABLE[$94]($101); //@line 4044 "cPickle.c"
        __label__ = 17; break; //@line 4044 "cPickle.c"
      case 17: // $bb17
        var $102=$self_addr; //@line 4044 "cPickle.c"
        var $103=$102+28; //@line 4044 "cPickle.c"
        var $104=HEAP[$103]; //@line 4044 "cPickle.c"
        var $105=$104; //@line 4044 "cPickle.c"
        var $106=$105+12; //@line 4044 "cPickle.c"
        var $107=$106; //@line 4044 "cPickle.c"
        var $108=$pid; //@line 4044 "cPickle.c"
        HEAP[$107]=$108; //@line 4044 "cPickle.c"
        __label__ = 20; break; //@line 4044 "cPickle.c"
      case 18: // $bb18
        var $109=$pid; //@line 4044 "cPickle.c"
        var $110=$109; //@line 4044 "cPickle.c"
        var $111=HEAP[$110]; //@line 4044 "cPickle.c"
        var $112=($111) - 1; //@line 4044 "cPickle.c"
        var $113=$pid; //@line 4044 "cPickle.c"
        var $114=$113; //@line 4044 "cPickle.c"
        HEAP[$114]=$112; //@line 4044 "cPickle.c"
        var $115=$pid; //@line 4044 "cPickle.c"
        var $116=$115; //@line 4044 "cPickle.c"
        var $117=HEAP[$116]; //@line 4044 "cPickle.c"
        var $118=($117)==0; //@line 4044 "cPickle.c"
        if ($118) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4044 "cPickle.c"
      case 19: // $bb19
        var $119=$pid; //@line 4044 "cPickle.c"
        var $120=$119+4; //@line 4044 "cPickle.c"
        var $121=HEAP[$120]; //@line 4044 "cPickle.c"
        var $122=$121+24; //@line 4044 "cPickle.c"
        var $123=HEAP[$122]; //@line 4044 "cPickle.c"
        var $124=$pid; //@line 4044 "cPickle.c"
        FUNCTION_TABLE[$123]($124); //@line 4044 "cPickle.c"
        __label__ = 20; break; //@line 4044 "cPickle.c"
      case 20: // $bb20
        var $125=$self_addr; //@line 4045 "cPickle.c"
        var $126=$125+28; //@line 4045 "cPickle.c"
        var $127=HEAP[$126]; //@line 4045 "cPickle.c"
        var $128=($127)!=0; //@line 4045 "cPickle.c"
        if ($128) { __label__ = 21; break; } else { __label__ = 25; break; } //@line 4045 "cPickle.c"
      case 21: // $bb21
        var $129=$self_addr; //@line 4046 "cPickle.c"
        var $130=$129+28; //@line 4046 "cPickle.c"
        var $131=HEAP[$130]; //@line 4046 "cPickle.c"
        var $132=$self_addr; //@line 4046 "cPickle.c"
        var $133=$132+40; //@line 4046 "cPickle.c"
        var $134=HEAP[$133]; //@line 4046 "cPickle.c"
        var $135=_PyObject_Call($134, $131, 0); //@line 4046 "cPickle.c"
        $pid=$135; //@line 4046 "cPickle.c"
        var $136=$self_addr; //@line 4048 "cPickle.c"
        var $137=$136+28; //@line 4048 "cPickle.c"
        var $138=HEAP[$137]; //@line 4048 "cPickle.c"
        var $139=$138; //@line 4048 "cPickle.c"
        var $140=HEAP[$139]; //@line 4048 "cPickle.c"
        var $141=($140) > 1; //@line 4048 "cPickle.c"
        if ($141) { __label__ = 22; break; } else { __label__ = 25; break; } //@line 4048 "cPickle.c"
      case 22: // $bb22
        var $142=$self_addr; //@line 4048 "cPickle.c"
        var $143=$142+28; //@line 4048 "cPickle.c"
        var $144=HEAP[$143]; //@line 4048 "cPickle.c"
        var $145=$144; //@line 4048 "cPickle.c"
        var $146=HEAP[$145]; //@line 4048 "cPickle.c"
        var $147=($146) - 1; //@line 4048 "cPickle.c"
        var $148=$144; //@line 4048 "cPickle.c"
        HEAP[$148]=$147; //@line 4048 "cPickle.c"
        var $149=$144; //@line 4048 "cPickle.c"
        var $150=HEAP[$149]; //@line 4048 "cPickle.c"
        var $151=($150)==0; //@line 4048 "cPickle.c"
        if ($151) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4048 "cPickle.c"
      case 23: // $bb23
        var $152=$self_addr; //@line 4048 "cPickle.c"
        var $153=$152+28; //@line 4048 "cPickle.c"
        var $154=HEAP[$153]; //@line 4048 "cPickle.c"
        var $155=$154+4; //@line 4048 "cPickle.c"
        var $156=HEAP[$155]; //@line 4048 "cPickle.c"
        var $157=$156+24; //@line 4048 "cPickle.c"
        var $158=HEAP[$157]; //@line 4048 "cPickle.c"
        var $159=$self_addr; //@line 4048 "cPickle.c"
        var $160=$159+28; //@line 4048 "cPickle.c"
        var $161=HEAP[$160]; //@line 4048 "cPickle.c"
        FUNCTION_TABLE[$158]($161); //@line 4048 "cPickle.c"
        __label__ = 24; break; //@line 4048 "cPickle.c"
      case 24: // $bb24
        var $162=$self_addr; //@line 4048 "cPickle.c"
        var $163=$162+28; //@line 4048 "cPickle.c"
        HEAP[$163]=0; //@line 4048 "cPickle.c"
        __label__ = 25; break; //@line 4048 "cPickle.c"
      case 25: // $bb25
        var $164=$pid; //@line 4052 "cPickle.c"
        var $165=($164)==0; //@line 4052 "cPickle.c"
        if ($165) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4052 "cPickle.c"
      case 26: // $bb26
        $0=-1; //@line 4052 "cPickle.c"
        __label__ = 34; break; //@line 4052 "cPickle.c"
      case 27: // $bb27
        var $166=$self_addr; //@line 4054 "cPickle.c"
        var $167=$166+32; //@line 4054 "cPickle.c"
        var $168=HEAP[$167]; //@line 4054 "cPickle.c"
        var $169=$168+8; //@line 4054 "cPickle.c"
        var $170=HEAP[$169]; //@line 4054 "cPickle.c"
        var $171=$self_addr; //@line 4054 "cPickle.c"
        var $172=$171+32; //@line 4054 "cPickle.c"
        var $173=HEAP[$172]; //@line 4054 "cPickle.c"
        var $174=$173+12; //@line 4054 "cPickle.c"
        var $175=HEAP[$174]; //@line 4054 "cPickle.c"
        var $176=($170)==($175); //@line 4054 "cPickle.c"
        if ($176) { __label__ = 28; break; } else { __label__ = 32; break; } //@line 4054 "cPickle.c"
      case 28: // $bb28
        var $177=$self_addr; //@line 4054 "cPickle.c"
        var $178=$177+32; //@line 4054 "cPickle.c"
        var $179=HEAP[$178]; //@line 4054 "cPickle.c"
        var $180=_Pdata_grow($179); //@line 4054 "cPickle.c"
        var $181=($180) < 0; //@line 4054 "cPickle.c"
        if ($181) { __label__ = 29; break; } else { __label__ = 32; break; } //@line 4054 "cPickle.c"
      case 29: // $bb29
        var $182=$pid; //@line 4054 "cPickle.c"
        var $183=$182; //@line 4054 "cPickle.c"
        var $184=HEAP[$183]; //@line 4054 "cPickle.c"
        var $185=($184) - 1; //@line 4054 "cPickle.c"
        var $186=$pid; //@line 4054 "cPickle.c"
        var $187=$186; //@line 4054 "cPickle.c"
        HEAP[$187]=$185; //@line 4054 "cPickle.c"
        var $188=$pid; //@line 4054 "cPickle.c"
        var $189=$188; //@line 4054 "cPickle.c"
        var $190=HEAP[$189]; //@line 4054 "cPickle.c"
        var $191=($190)==0; //@line 4054 "cPickle.c"
        if ($191) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4054 "cPickle.c"
      case 30: // $bb30
        var $192=$pid; //@line 4054 "cPickle.c"
        var $193=$192+4; //@line 4054 "cPickle.c"
        var $194=HEAP[$193]; //@line 4054 "cPickle.c"
        var $195=$194+24; //@line 4054 "cPickle.c"
        var $196=HEAP[$195]; //@line 4054 "cPickle.c"
        var $197=$pid; //@line 4054 "cPickle.c"
        FUNCTION_TABLE[$196]($197); //@line 4054 "cPickle.c"
        __label__ = 31; break; //@line 4054 "cPickle.c"
      case 31: // $bb31
        $0=-1; //@line 4054 "cPickle.c"
        __label__ = 34; break; //@line 4054 "cPickle.c"
      case 32: // $bb32
        var $198=$self_addr; //@line 4054 "cPickle.c"
        var $199=$198+32; //@line 4054 "cPickle.c"
        var $200=HEAP[$199]; //@line 4054 "cPickle.c"
        var $201=$200+16; //@line 4054 "cPickle.c"
        var $202=HEAP[$201]; //@line 4054 "cPickle.c"
        var $203=$self_addr; //@line 4054 "cPickle.c"
        var $204=$203+32; //@line 4054 "cPickle.c"
        var $205=HEAP[$204]; //@line 4054 "cPickle.c"
        var $206=$205+8; //@line 4054 "cPickle.c"
        var $207=HEAP[$206]; //@line 4054 "cPickle.c"
        var $208=$202+4*$207; //@line 4054 "cPickle.c"
        var $209=$pid; //@line 4054 "cPickle.c"
        HEAP[$208]=$209; //@line 4054 "cPickle.c"
        var $210=($207) + 1; //@line 4054 "cPickle.c"
        var $211=$205+8; //@line 4054 "cPickle.c"
        HEAP[$211]=$210; //@line 4054 "cPickle.c"
        $0=0; //@line 4055 "cPickle.c"
        __label__ = 34; break; //@line 4055 "cPickle.c"
      case 33: // $bb33
        var $212=HEAP[_UnpicklingError]; //@line 4058 "cPickle.c"
        _PyErr_SetString($212, __str92); //@line 4058 "cPickle.c"
        $0=-1; //@line 4061 "cPickle.c"
        __label__ = 34; break; //@line 4061 "cPickle.c"
      case 34: // $bb34
        var $213=$0; //@line 4031 "cPickle.c"
        $retval=$213; //@line 4031 "cPickle.c"
        var $retval35=$retval; //@line 4031 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval35; //@line 4031 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binpersid($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $pid;
        $self_addr=$self;
        $pid=0; //@line 4068 "cPickle.c"
        var $1=$self_addr; //@line 4070 "cPickle.c"
        var $2=$1+40; //@line 4070 "cPickle.c"
        var $3=HEAP[$2]; //@line 4070 "cPickle.c"
        var $4=($3)!=0; //@line 4070 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 31; break; } //@line 4070 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 4071 "cPickle.c"
        var $6=$5+32; //@line 4071 "cPickle.c"
        var $7=HEAP[$6]; //@line 4071 "cPickle.c"
        var $8=$7+8; //@line 4071 "cPickle.c"
        var $9=HEAP[$8]; //@line 4071 "cPickle.c"
        var $10=($9)!=0; //@line 4071 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 4071 "cPickle.c"
      case 2: // $bb3_thread
        var $11=HEAP[_UnpicklingError]; //@line 4071 "cPickle.c"
        _PyErr_SetString($11, __str88); //@line 4071 "cPickle.c"
        $pid=0; //@line 4071 "cPickle.c"
        __label__ = 4; break;
      case 3: // $bb3
        var $12=$self_addr; //@line 4071 "cPickle.c"
        var $13=$12+32; //@line 4071 "cPickle.c"
        var $14=HEAP[$13]; //@line 4071 "cPickle.c"
        var $15=$14+16; //@line 4071 "cPickle.c"
        var $16=HEAP[$15]; //@line 4071 "cPickle.c"
        var $17=$self_addr; //@line 4071 "cPickle.c"
        var $18=$17+32; //@line 4071 "cPickle.c"
        var $19=HEAP[$18]; //@line 4071 "cPickle.c"
        var $20=$19+8; //@line 4071 "cPickle.c"
        var $21=HEAP[$20]; //@line 4071 "cPickle.c"
        var $22=($21) - 1; //@line 4071 "cPickle.c"
        var $23=$19+8; //@line 4071 "cPickle.c"
        HEAP[$23]=$22; //@line 4071 "cPickle.c"
        var $24=$19+8; //@line 4071 "cPickle.c"
        var $25=HEAP[$24]; //@line 4071 "cPickle.c"
        var $26=$16+4*$25; //@line 4071 "cPickle.c"
        var $27=HEAP[$26]; //@line 4071 "cPickle.c"
        $pid=$27; //@line 4071 "cPickle.c"
        var $28=($27)==0; //@line 4072 "cPickle.c"
        if ($28) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4072 "cPickle.c"
      case 4: // $bb4
        $0=-1; //@line 4072 "cPickle.c"
        __label__ = 32; break; //@line 4072 "cPickle.c"
      case 5: // $bb5
        var $29=$self_addr; //@line 4074 "cPickle.c"
        var $30=$29+40; //@line 4074 "cPickle.c"
        var $31=HEAP[$30]; //@line 4074 "cPickle.c"
        var $32=$31+4; //@line 4074 "cPickle.c"
        var $33=HEAP[$32]; //@line 4074 "cPickle.c"
        var $34=$33+84; //@line 4074 "cPickle.c"
        var $35=HEAP[$34]; //@line 4074 "cPickle.c"
        var $36=($35) & 33554432; //@line 4074 "cPickle.c"
        var $37=($36)!=0; //@line 4074 "cPickle.c"
        var $38=$self_addr; //@line 4075 "cPickle.c"
        if ($37) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 4074 "cPickle.c"
      case 6: // $bb6
        var $39=$38+40; //@line 4075 "cPickle.c"
        var $40=HEAP[$39]; //@line 4075 "cPickle.c"
        var $41=$pid; //@line 4075 "cPickle.c"
        var $42=_PyList_Append($40, $41); //@line 4075 "cPickle.c"
        var $43=($42) < 0; //@line 4075 "cPickle.c"
        if ($43) { __label__ = 7; break; } else { __label__ = 25; break; } //@line 4075 "cPickle.c"
      case 7: // $bb7
        var $44=$pid; //@line 4076 "cPickle.c"
        var $45=$44; //@line 4076 "cPickle.c"
        var $46=HEAP[$45]; //@line 4076 "cPickle.c"
        var $47=($46) - 1; //@line 4076 "cPickle.c"
        var $48=$pid; //@line 4076 "cPickle.c"
        var $49=$48; //@line 4076 "cPickle.c"
        HEAP[$49]=$47; //@line 4076 "cPickle.c"
        var $50=$pid; //@line 4076 "cPickle.c"
        var $51=$50; //@line 4076 "cPickle.c"
        var $52=HEAP[$51]; //@line 4076 "cPickle.c"
        var $53=($52)==0; //@line 4076 "cPickle.c"
        if ($53) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4076 "cPickle.c"
      case 8: // $bb8
        var $54=$pid; //@line 4076 "cPickle.c"
        var $55=$54+4; //@line 4076 "cPickle.c"
        var $56=HEAP[$55]; //@line 4076 "cPickle.c"
        var $57=$56+24; //@line 4076 "cPickle.c"
        var $58=HEAP[$57]; //@line 4076 "cPickle.c"
        var $59=$pid; //@line 4076 "cPickle.c"
        FUNCTION_TABLE[$58]($59); //@line 4076 "cPickle.c"
        __label__ = 9; break; //@line 4076 "cPickle.c"
      case 9: // $bb9
        $0=-1; //@line 4077 "cPickle.c"
        __label__ = 32; break; //@line 4077 "cPickle.c"
      case 10: // $bb11
        var $60=$38+28; //@line 4081 "cPickle.c"
        var $61=HEAP[$60]; //@line 4081 "cPickle.c"
        var $62=($61)!=0; //@line 4081 "cPickle.c"
        if ($62) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 4081 "cPickle.c"
      case 11: // $bb12
        var $63=_PyTuple_New(1); //@line 4081 "cPickle.c"
        var $64=$self_addr; //@line 4081 "cPickle.c"
        var $65=$64+28; //@line 4081 "cPickle.c"
        HEAP[$65]=$63; //@line 4081 "cPickle.c"
        var $66=$self_addr; //@line 4081 "cPickle.c"
        var $67=$66+28; //@line 4081 "cPickle.c"
        var $68=HEAP[$67]; //@line 4081 "cPickle.c"
        var $69=($68)!=0; //@line 4081 "cPickle.c"
        if ($69) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 4081 "cPickle.c"
      case 12: // $bb13
        var $70=$self_addr; //@line 4081 "cPickle.c"
        var $71=$70+28; //@line 4081 "cPickle.c"
        var $72=HEAP[$71]; //@line 4081 "cPickle.c"
        var $73=$72; //@line 4081 "cPickle.c"
        var $74=$73+12; //@line 4081 "cPickle.c"
        var $75=$74; //@line 4081 "cPickle.c"
        var $76=HEAP[$75]; //@line 4081 "cPickle.c"
        var $77=($76)!=0; //@line 4081 "cPickle.c"
        if ($77) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 4081 "cPickle.c"
      case 13: // $bb14
        var $78=$self_addr; //@line 4081 "cPickle.c"
        var $79=$78+28; //@line 4081 "cPickle.c"
        var $80=HEAP[$79]; //@line 4081 "cPickle.c"
        var $81=$80; //@line 4081 "cPickle.c"
        var $82=$81+12; //@line 4081 "cPickle.c"
        var $83=$82; //@line 4081 "cPickle.c"
        var $84=HEAP[$83]; //@line 4081 "cPickle.c"
        var $85=$84; //@line 4081 "cPickle.c"
        var $86=HEAP[$85]; //@line 4081 "cPickle.c"
        var $87=($86) - 1; //@line 4081 "cPickle.c"
        var $88=$84; //@line 4081 "cPickle.c"
        HEAP[$88]=$87; //@line 4081 "cPickle.c"
        var $89=$84; //@line 4081 "cPickle.c"
        var $90=HEAP[$89]; //@line 4081 "cPickle.c"
        var $91=($90)==0; //@line 4081 "cPickle.c"
        if ($91) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4081 "cPickle.c"
      case 14: // $bb15
        var $92=$self_addr; //@line 4081 "cPickle.c"
        var $93=$92+28; //@line 4081 "cPickle.c"
        var $94=HEAP[$93]; //@line 4081 "cPickle.c"
        var $95=$94; //@line 4081 "cPickle.c"
        var $96=$95+12; //@line 4081 "cPickle.c"
        var $97=$96; //@line 4081 "cPickle.c"
        var $98=HEAP[$97]; //@line 4081 "cPickle.c"
        var $99=$98+4; //@line 4081 "cPickle.c"
        var $100=HEAP[$99]; //@line 4081 "cPickle.c"
        var $101=$100+24; //@line 4081 "cPickle.c"
        var $102=HEAP[$101]; //@line 4081 "cPickle.c"
        var $103=$self_addr; //@line 4081 "cPickle.c"
        var $104=$103+28; //@line 4081 "cPickle.c"
        var $105=HEAP[$104]; //@line 4081 "cPickle.c"
        var $106=$105; //@line 4081 "cPickle.c"
        var $107=$106+12; //@line 4081 "cPickle.c"
        var $108=$107; //@line 4081 "cPickle.c"
        var $109=HEAP[$108]; //@line 4081 "cPickle.c"
        FUNCTION_TABLE[$102]($109); //@line 4081 "cPickle.c"
        __label__ = 15; break; //@line 4081 "cPickle.c"
      case 15: // $bb16
        var $110=$self_addr; //@line 4081 "cPickle.c"
        var $111=$110+28; //@line 4081 "cPickle.c"
        var $112=HEAP[$111]; //@line 4081 "cPickle.c"
        var $113=$112; //@line 4081 "cPickle.c"
        var $114=$113+12; //@line 4081 "cPickle.c"
        var $115=$114; //@line 4081 "cPickle.c"
        var $116=$pid; //@line 4081 "cPickle.c"
        HEAP[$115]=$116; //@line 4081 "cPickle.c"
        __label__ = 18; break; //@line 4081 "cPickle.c"
      case 16: // $bb17
        var $117=$pid; //@line 4081 "cPickle.c"
        var $118=$117; //@line 4081 "cPickle.c"
        var $119=HEAP[$118]; //@line 4081 "cPickle.c"
        var $120=($119) - 1; //@line 4081 "cPickle.c"
        var $121=$pid; //@line 4081 "cPickle.c"
        var $122=$121; //@line 4081 "cPickle.c"
        HEAP[$122]=$120; //@line 4081 "cPickle.c"
        var $123=$pid; //@line 4081 "cPickle.c"
        var $124=$123; //@line 4081 "cPickle.c"
        var $125=HEAP[$124]; //@line 4081 "cPickle.c"
        var $126=($125)==0; //@line 4081 "cPickle.c"
        if ($126) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4081 "cPickle.c"
      case 17: // $bb18
        var $127=$pid; //@line 4081 "cPickle.c"
        var $128=$127+4; //@line 4081 "cPickle.c"
        var $129=HEAP[$128]; //@line 4081 "cPickle.c"
        var $130=$129+24; //@line 4081 "cPickle.c"
        var $131=HEAP[$130]; //@line 4081 "cPickle.c"
        var $132=$pid; //@line 4081 "cPickle.c"
        FUNCTION_TABLE[$131]($132); //@line 4081 "cPickle.c"
        __label__ = 18; break; //@line 4081 "cPickle.c"
      case 18: // $bb19
        var $133=$self_addr; //@line 4082 "cPickle.c"
        var $134=$133+28; //@line 4082 "cPickle.c"
        var $135=HEAP[$134]; //@line 4082 "cPickle.c"
        var $136=($135)!=0; //@line 4082 "cPickle.c"
        if ($136) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 4082 "cPickle.c"
      case 19: // $bb20
        var $137=$self_addr; //@line 4083 "cPickle.c"
        var $138=$137+28; //@line 4083 "cPickle.c"
        var $139=HEAP[$138]; //@line 4083 "cPickle.c"
        var $140=$self_addr; //@line 4083 "cPickle.c"
        var $141=$140+40; //@line 4083 "cPickle.c"
        var $142=HEAP[$141]; //@line 4083 "cPickle.c"
        var $143=_PyObject_Call($142, $139, 0); //@line 4083 "cPickle.c"
        $pid=$143; //@line 4083 "cPickle.c"
        var $144=$self_addr; //@line 4085 "cPickle.c"
        var $145=$144+28; //@line 4085 "cPickle.c"
        var $146=HEAP[$145]; //@line 4085 "cPickle.c"
        var $147=$146; //@line 4085 "cPickle.c"
        var $148=HEAP[$147]; //@line 4085 "cPickle.c"
        var $149=($148) > 1; //@line 4085 "cPickle.c"
        if ($149) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 4085 "cPickle.c"
      case 20: // $bb21
        var $150=$self_addr; //@line 4085 "cPickle.c"
        var $151=$150+28; //@line 4085 "cPickle.c"
        var $152=HEAP[$151]; //@line 4085 "cPickle.c"
        var $153=$152; //@line 4085 "cPickle.c"
        var $154=HEAP[$153]; //@line 4085 "cPickle.c"
        var $155=($154) - 1; //@line 4085 "cPickle.c"
        var $156=$152; //@line 4085 "cPickle.c"
        HEAP[$156]=$155; //@line 4085 "cPickle.c"
        var $157=$152; //@line 4085 "cPickle.c"
        var $158=HEAP[$157]; //@line 4085 "cPickle.c"
        var $159=($158)==0; //@line 4085 "cPickle.c"
        if ($159) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4085 "cPickle.c"
      case 21: // $bb22
        var $160=$self_addr; //@line 4085 "cPickle.c"
        var $161=$160+28; //@line 4085 "cPickle.c"
        var $162=HEAP[$161]; //@line 4085 "cPickle.c"
        var $163=$162+4; //@line 4085 "cPickle.c"
        var $164=HEAP[$163]; //@line 4085 "cPickle.c"
        var $165=$164+24; //@line 4085 "cPickle.c"
        var $166=HEAP[$165]; //@line 4085 "cPickle.c"
        var $167=$self_addr; //@line 4085 "cPickle.c"
        var $168=$167+28; //@line 4085 "cPickle.c"
        var $169=HEAP[$168]; //@line 4085 "cPickle.c"
        FUNCTION_TABLE[$166]($169); //@line 4085 "cPickle.c"
        __label__ = 22; break; //@line 4085 "cPickle.c"
      case 22: // $bb23
        var $170=$self_addr; //@line 4085 "cPickle.c"
        var $171=$170+28; //@line 4085 "cPickle.c"
        HEAP[$171]=0; //@line 4085 "cPickle.c"
        __label__ = 23; break; //@line 4085 "cPickle.c"
      case 23: // $bb24
        var $172=$pid; //@line 4087 "cPickle.c"
        var $173=($172)==0; //@line 4087 "cPickle.c"
        if ($173) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4087 "cPickle.c"
      case 24: // $bb25
        $0=-1; //@line 4087 "cPickle.c"
        __label__ = 32; break; //@line 4087 "cPickle.c"
      case 25: // $bb26
        var $174=$self_addr; //@line 4090 "cPickle.c"
        var $175=$174+32; //@line 4090 "cPickle.c"
        var $176=HEAP[$175]; //@line 4090 "cPickle.c"
        var $177=$176+8; //@line 4090 "cPickle.c"
        var $178=HEAP[$177]; //@line 4090 "cPickle.c"
        var $179=$self_addr; //@line 4090 "cPickle.c"
        var $180=$179+32; //@line 4090 "cPickle.c"
        var $181=HEAP[$180]; //@line 4090 "cPickle.c"
        var $182=$181+12; //@line 4090 "cPickle.c"
        var $183=HEAP[$182]; //@line 4090 "cPickle.c"
        var $184=($178)==($183); //@line 4090 "cPickle.c"
        if ($184) { __label__ = 26; break; } else { __label__ = 30; break; } //@line 4090 "cPickle.c"
      case 26: // $bb27
        var $185=$self_addr; //@line 4090 "cPickle.c"
        var $186=$185+32; //@line 4090 "cPickle.c"
        var $187=HEAP[$186]; //@line 4090 "cPickle.c"
        var $188=_Pdata_grow($187); //@line 4090 "cPickle.c"
        var $189=($188) < 0; //@line 4090 "cPickle.c"
        if ($189) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 4090 "cPickle.c"
      case 27: // $bb28
        var $190=$pid; //@line 4090 "cPickle.c"
        var $191=$190; //@line 4090 "cPickle.c"
        var $192=HEAP[$191]; //@line 4090 "cPickle.c"
        var $193=($192) - 1; //@line 4090 "cPickle.c"
        var $194=$pid; //@line 4090 "cPickle.c"
        var $195=$194; //@line 4090 "cPickle.c"
        HEAP[$195]=$193; //@line 4090 "cPickle.c"
        var $196=$pid; //@line 4090 "cPickle.c"
        var $197=$196; //@line 4090 "cPickle.c"
        var $198=HEAP[$197]; //@line 4090 "cPickle.c"
        var $199=($198)==0; //@line 4090 "cPickle.c"
        if ($199) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 4090 "cPickle.c"
      case 28: // $bb29
        var $200=$pid; //@line 4090 "cPickle.c"
        var $201=$200+4; //@line 4090 "cPickle.c"
        var $202=HEAP[$201]; //@line 4090 "cPickle.c"
        var $203=$202+24; //@line 4090 "cPickle.c"
        var $204=HEAP[$203]; //@line 4090 "cPickle.c"
        var $205=$pid; //@line 4090 "cPickle.c"
        FUNCTION_TABLE[$204]($205); //@line 4090 "cPickle.c"
        __label__ = 29; break; //@line 4090 "cPickle.c"
      case 29: // $bb30
        $0=-1; //@line 4090 "cPickle.c"
        __label__ = 32; break; //@line 4090 "cPickle.c"
      case 30: // $bb31
        var $206=$self_addr; //@line 4090 "cPickle.c"
        var $207=$206+32; //@line 4090 "cPickle.c"
        var $208=HEAP[$207]; //@line 4090 "cPickle.c"
        var $209=$208+16; //@line 4090 "cPickle.c"
        var $210=HEAP[$209]; //@line 4090 "cPickle.c"
        var $211=$self_addr; //@line 4090 "cPickle.c"
        var $212=$211+32; //@line 4090 "cPickle.c"
        var $213=HEAP[$212]; //@line 4090 "cPickle.c"
        var $214=$213+8; //@line 4090 "cPickle.c"
        var $215=HEAP[$214]; //@line 4090 "cPickle.c"
        var $216=$210+4*$215; //@line 4090 "cPickle.c"
        var $217=$pid; //@line 4090 "cPickle.c"
        HEAP[$216]=$217; //@line 4090 "cPickle.c"
        var $218=($215) + 1; //@line 4090 "cPickle.c"
        var $219=$213+8; //@line 4090 "cPickle.c"
        HEAP[$219]=$218; //@line 4090 "cPickle.c"
        $0=0; //@line 4091 "cPickle.c"
        __label__ = 32; break; //@line 4091 "cPickle.c"
      case 31: // $bb32
        var $220=HEAP[_UnpicklingError]; //@line 4094 "cPickle.c"
        _PyErr_SetString($220, __str92); //@line 4094 "cPickle.c"
        $0=-1; //@line 4097 "cPickle.c"
        __label__ = 32; break; //@line 4097 "cPickle.c"
      case 32: // $bb33
        var $221=$0; //@line 4072 "cPickle.c"
        $retval=$221; //@line 4072 "cPickle.c"
        var $retval34=$retval; //@line 4072 "cPickle.c"
        ;
        return $retval34; //@line 4072 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_pop($self) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $len;
        $self_addr=$self;
        var $1=$self_addr; //@line 4105 "cPickle.c"
        var $2=$1+32; //@line 4105 "cPickle.c"
        var $3=HEAP[$2]; //@line 4105 "cPickle.c"
        var $4=$3+8; //@line 4105 "cPickle.c"
        var $5=HEAP[$4]; //@line 4105 "cPickle.c"
        $len=$5; //@line 4105 "cPickle.c"
        var $6=$self_addr; //@line 4114 "cPickle.c"
        var $7=$6+52; //@line 4114 "cPickle.c"
        var $8=HEAP[$7]; //@line 4114 "cPickle.c"
        var $9=($8) <= 0; //@line 4114 "cPickle.c"
        if ($9) { __lastLabel__ = -1; __label__ = 3; break; } else { __lastLabel__ = -1; __label__ = 1; break; } //@line 4114 "cPickle.c"
      case 1: // $bb
        var $10=$self_addr; //@line 4114 "cPickle.c"
        var $11=$10+48; //@line 4114 "cPickle.c"
        var $12=HEAP[$11]; //@line 4114 "cPickle.c"
        var $13=$self_addr; //@line 4114 "cPickle.c"
        var $14=$13+52; //@line 4114 "cPickle.c"
        var $15=HEAP[$14]; //@line 4114 "cPickle.c"
        var $16=($15) - 1; //@line 4114 "cPickle.c"
        var $17=$12+4*$16; //@line 4114 "cPickle.c"
        var $18=HEAP[$17]; //@line 4114 "cPickle.c"
        var $19=$len; //@line 4114 "cPickle.c"
        var $20=($18)!=($19); //@line 4114 "cPickle.c"
        if ($20) { __lastLabel__ = 1; __label__ = 3; break; } else { __lastLabel__ = 1; __label__ = 2; break; } //@line 4114 "cPickle.c"
      case 2: // $bb1
        var $21=$self_addr; //@line 4115 "cPickle.c"
        var $22=$21+52; //@line 4115 "cPickle.c"
        var $23=HEAP[$22]; //@line 4115 "cPickle.c"
        var $24=($23) - 1; //@line 4115 "cPickle.c"
        var $25=$self_addr; //@line 4115 "cPickle.c"
        var $26=$25+52; //@line 4115 "cPickle.c"
        HEAP[$26]=$24; //@line 4115 "cPickle.c"
        __label__ = 8; break; //@line 4115 "cPickle.c"
      case 3: // $bb2
        var $27=__lastLabel__ == 1 ? $19 : ($5);
        var $28=($27) > 0; //@line 4116 "cPickle.c"
        if ($28) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 4116 "cPickle.c"
      case 4: // $bb3
        var $29=$len; //@line 4117 "cPickle.c"
        var $30=($29) - 1; //@line 4117 "cPickle.c"
        $len=$30; //@line 4117 "cPickle.c"
        var $31=$self_addr; //@line 4118 "cPickle.c"
        var $32=$31+32; //@line 4118 "cPickle.c"
        var $33=HEAP[$32]; //@line 4118 "cPickle.c"
        var $34=$33+16; //@line 4118 "cPickle.c"
        var $35=HEAP[$34]; //@line 4118 "cPickle.c"
        var $36=$len; //@line 4118 "cPickle.c"
        var $37=$35+4*$36; //@line 4118 "cPickle.c"
        var $38=HEAP[$37]; //@line 4118 "cPickle.c"
        var $39=$38; //@line 4118 "cPickle.c"
        var $40=HEAP[$39]; //@line 4118 "cPickle.c"
        var $41=($40) - 1; //@line 4118 "cPickle.c"
        var $42=$38; //@line 4118 "cPickle.c"
        HEAP[$42]=$41; //@line 4118 "cPickle.c"
        var $43=$38; //@line 4118 "cPickle.c"
        var $44=HEAP[$43]; //@line 4118 "cPickle.c"
        var $45=($44)==0; //@line 4118 "cPickle.c"
        if ($45) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4118 "cPickle.c"
      case 5: // $bb4
        var $46=$self_addr; //@line 4118 "cPickle.c"
        var $47=$46+32; //@line 4118 "cPickle.c"
        var $48=HEAP[$47]; //@line 4118 "cPickle.c"
        var $49=$48+16; //@line 4118 "cPickle.c"
        var $50=HEAP[$49]; //@line 4118 "cPickle.c"
        var $51=$len; //@line 4118 "cPickle.c"
        var $52=$50+4*$51; //@line 4118 "cPickle.c"
        var $53=HEAP[$52]; //@line 4118 "cPickle.c"
        var $54=$53+4; //@line 4118 "cPickle.c"
        var $55=HEAP[$54]; //@line 4118 "cPickle.c"
        var $56=$55+24; //@line 4118 "cPickle.c"
        var $57=HEAP[$56]; //@line 4118 "cPickle.c"
        var $58=$self_addr; //@line 4118 "cPickle.c"
        var $59=$58+32; //@line 4118 "cPickle.c"
        var $60=HEAP[$59]; //@line 4118 "cPickle.c"
        var $61=$60+16; //@line 4118 "cPickle.c"
        var $62=HEAP[$61]; //@line 4118 "cPickle.c"
        var $63=$len; //@line 4118 "cPickle.c"
        var $64=$62+4*$63; //@line 4118 "cPickle.c"
        var $65=HEAP[$64]; //@line 4118 "cPickle.c"
        FUNCTION_TABLE[$57]($65); //@line 4118 "cPickle.c"
        __label__ = 6; break; //@line 4118 "cPickle.c"
      case 6: // $bb5
        var $66=$self_addr; //@line 4119 "cPickle.c"
        var $67=$66+32; //@line 4119 "cPickle.c"
        var $68=HEAP[$67]; //@line 4119 "cPickle.c"
        var $69=$68+8; //@line 4119 "cPickle.c"
        var $70=$len; //@line 4119 "cPickle.c"
        HEAP[$69]=$70; //@line 4119 "cPickle.c"
        __label__ = 8; break; //@line 4119 "cPickle.c"
      case 7: // $bb6
        var $71=_stackUnderflow(); //@line 4121 "cPickle.c"
        $0=$71; //@line 4121 "cPickle.c"
        __label__ = 9; break; //@line 4121 "cPickle.c"
      case 8: // $bb7
        $0=0; //@line 4123 "cPickle.c"
        __label__ = 9; break; //@line 4123 "cPickle.c"
      case 9: // $bb8
        var $72=$0; //@line 4121 "cPickle.c"
        $retval=$72; //@line 4121 "cPickle.c"
        var $retval9=$retval; //@line 4121 "cPickle.c"
        ;
        return $retval9; //@line 4121 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_pop_mark($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $i;
        $self_addr=$self;
        var $1=$self_addr; //@line 4132 "cPickle.c"
        var $2=_marker($1); //@line 4132 "cPickle.c"
        $i=$2; //@line 4132 "cPickle.c"
        var $3=$i; //@line 4132 "cPickle.c"
        var $4=($3) < 0; //@line 4132 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4132 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 4133 "cPickle.c"
        __label__ = 3; break; //@line 4133 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 4135 "cPickle.c"
        var $6=$5+32; //@line 4135 "cPickle.c"
        var $7=HEAP[$6]; //@line 4135 "cPickle.c"
        var $8=$i; //@line 4135 "cPickle.c"
        var $9=_Pdata_clear($7, $8); //@line 4135 "cPickle.c"
        $0=0; //@line 4137 "cPickle.c"
        __label__ = 3; break; //@line 4137 "cPickle.c"
      case 3: // $bb2
        var $10=$0; //@line 4133 "cPickle.c"
        $retval=$10; //@line 4133 "cPickle.c"
        var $retval3=$retval; //@line 4133 "cPickle.c"
        ;
        return $retval3; //@line 4133 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_dup($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $last;
        var $len;
        $self_addr=$self;
        var $1=$self_addr; //@line 4147 "cPickle.c"
        var $2=$1+32; //@line 4147 "cPickle.c"
        var $3=HEAP[$2]; //@line 4147 "cPickle.c"
        var $4=$3+8; //@line 4147 "cPickle.c"
        var $5=HEAP[$4]; //@line 4147 "cPickle.c"
        $len=$5; //@line 4147 "cPickle.c"
        var $6=$len; //@line 4147 "cPickle.c"
        var $7=($6) <= 0; //@line 4147 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4147 "cPickle.c"
      case 1: // $bb
        var $8=_stackUnderflow(); //@line 4147 "cPickle.c"
        $0=$8; //@line 4147 "cPickle.c"
        __label__ = 8; break; //@line 4147 "cPickle.c"
      case 2: // $bb1
        var $9=$self_addr; //@line 4148 "cPickle.c"
        var $10=$9+32; //@line 4148 "cPickle.c"
        var $11=HEAP[$10]; //@line 4148 "cPickle.c"
        var $12=$11+16; //@line 4148 "cPickle.c"
        var $13=HEAP[$12]; //@line 4148 "cPickle.c"
        var $14=$len; //@line 4148 "cPickle.c"
        var $15=($14) - 1; //@line 4148 "cPickle.c"
        var $16=$13+4*$15; //@line 4148 "cPickle.c"
        var $17=HEAP[$16]; //@line 4148 "cPickle.c"
        $last=$17; //@line 4148 "cPickle.c"
        var $18=$last; //@line 4149 "cPickle.c"
        var $19=$18; //@line 4149 "cPickle.c"
        var $20=HEAP[$19]; //@line 4149 "cPickle.c"
        var $21=($20) + 1; //@line 4149 "cPickle.c"
        var $22=$last; //@line 4149 "cPickle.c"
        var $23=$22; //@line 4149 "cPickle.c"
        HEAP[$23]=$21; //@line 4149 "cPickle.c"
        var $24=$self_addr; //@line 4150 "cPickle.c"
        var $25=$24+32; //@line 4150 "cPickle.c"
        var $26=HEAP[$25]; //@line 4150 "cPickle.c"
        var $27=$26+8; //@line 4150 "cPickle.c"
        var $28=HEAP[$27]; //@line 4150 "cPickle.c"
        var $29=$self_addr; //@line 4150 "cPickle.c"
        var $30=$29+32; //@line 4150 "cPickle.c"
        var $31=HEAP[$30]; //@line 4150 "cPickle.c"
        var $32=$31+12; //@line 4150 "cPickle.c"
        var $33=HEAP[$32]; //@line 4150 "cPickle.c"
        var $34=($28)==($33); //@line 4150 "cPickle.c"
        if ($34) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 4150 "cPickle.c"
      case 3: // $bb2
        var $35=$self_addr; //@line 4150 "cPickle.c"
        var $36=$35+32; //@line 4150 "cPickle.c"
        var $37=HEAP[$36]; //@line 4150 "cPickle.c"
        var $38=_Pdata_grow($37); //@line 4150 "cPickle.c"
        var $39=($38) < 0; //@line 4150 "cPickle.c"
        if ($39) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 4150 "cPickle.c"
      case 4: // $bb3
        var $40=$last; //@line 4150 "cPickle.c"
        var $41=$40; //@line 4150 "cPickle.c"
        var $42=HEAP[$41]; //@line 4150 "cPickle.c"
        var $43=($42) - 1; //@line 4150 "cPickle.c"
        var $44=$last; //@line 4150 "cPickle.c"
        var $45=$44; //@line 4150 "cPickle.c"
        HEAP[$45]=$43; //@line 4150 "cPickle.c"
        var $46=$last; //@line 4150 "cPickle.c"
        var $47=$46; //@line 4150 "cPickle.c"
        var $48=HEAP[$47]; //@line 4150 "cPickle.c"
        var $49=($48)==0; //@line 4150 "cPickle.c"
        if ($49) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4150 "cPickle.c"
      case 5: // $bb4
        var $50=$last; //@line 4150 "cPickle.c"
        var $51=$50+4; //@line 4150 "cPickle.c"
        var $52=HEAP[$51]; //@line 4150 "cPickle.c"
        var $53=$52+24; //@line 4150 "cPickle.c"
        var $54=HEAP[$53]; //@line 4150 "cPickle.c"
        var $55=$last; //@line 4150 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 4150 "cPickle.c"
        __label__ = 6; break; //@line 4150 "cPickle.c"
      case 6: // $bb5
        $0=-1; //@line 4150 "cPickle.c"
        __label__ = 8; break; //@line 4150 "cPickle.c"
      case 7: // $bb6
        var $56=$self_addr; //@line 4150 "cPickle.c"
        var $57=$56+32; //@line 4150 "cPickle.c"
        var $58=HEAP[$57]; //@line 4150 "cPickle.c"
        var $59=$58+16; //@line 4150 "cPickle.c"
        var $60=HEAP[$59]; //@line 4150 "cPickle.c"
        var $61=$self_addr; //@line 4150 "cPickle.c"
        var $62=$61+32; //@line 4150 "cPickle.c"
        var $63=HEAP[$62]; //@line 4150 "cPickle.c"
        var $64=$63+8; //@line 4150 "cPickle.c"
        var $65=HEAP[$64]; //@line 4150 "cPickle.c"
        var $66=$60+4*$65; //@line 4150 "cPickle.c"
        var $67=$last; //@line 4150 "cPickle.c"
        HEAP[$66]=$67; //@line 4150 "cPickle.c"
        var $68=($65) + 1; //@line 4150 "cPickle.c"
        var $69=$63+8; //@line 4150 "cPickle.c"
        HEAP[$69]=$68; //@line 4150 "cPickle.c"
        $0=0; //@line 4151 "cPickle.c"
        __label__ = 8; break; //@line 4151 "cPickle.c"
      case 8: // $bb7
        var $70=$0; //@line 4147 "cPickle.c"
        $retval=$70; //@line 4147 "cPickle.c"
        var $retval8=$retval; //@line 4147 "cPickle.c"
        ;
        return $retval8; //@line 4147 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_get($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_str;
        var $value;
        var $len;
        var $s=__stackBase__;
        var $rc;
        $self_addr=$self;
        $py_str=0; //@line 4158 "cPickle.c"
        $value=0; //@line 4158 "cPickle.c"
        var $1=$self_addr; //@line 4163 "cPickle.c"
        var $2=$1+64; //@line 4163 "cPickle.c"
        var $3=HEAP[$2]; //@line 4163 "cPickle.c"
        var $4=$self_addr; //@line 4163 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 4163 "cPickle.c"
        $len=$5; //@line 4163 "cPickle.c"
        var $6=$len; //@line 4163 "cPickle.c"
        var $7=($6) < 0; //@line 4163 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4163 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 4163 "cPickle.c"
        __label__ = 15; break; //@line 4163 "cPickle.c"
      case 2: // $bb1
        var $8=$len; //@line 4164 "cPickle.c"
        var $9=($8) <= 1; //@line 4164 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4164 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 4164 "cPickle.c"
        $0=$10; //@line 4164 "cPickle.c"
        __label__ = 15; break; //@line 4164 "cPickle.c"
      case 4: // $bb3
        var $11=$len; //@line 4166 "cPickle.c"
        var $12=($11) - 1; //@line 4166 "cPickle.c"
        var $13=HEAP[$s]; //@line 4166 "cPickle.c"
        var $14=_PyString_FromStringAndSize($13, $12); //@line 4166 "cPickle.c"
        $py_str=$14; //@line 4166 "cPickle.c"
        var $15=$py_str; //@line 4166 "cPickle.c"
        var $16=($15)==0; //@line 4166 "cPickle.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4166 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 4166 "cPickle.c"
        __label__ = 15; break; //@line 4166 "cPickle.c"
      case 6: // $bb5
        var $17=$self_addr; //@line 4168 "cPickle.c"
        var $18=$17+24; //@line 4168 "cPickle.c"
        var $19=HEAP[$18]; //@line 4168 "cPickle.c"
        var $20=$py_str; //@line 4168 "cPickle.c"
        var $21=_PyDict_GetItem($19, $20); //@line 4168 "cPickle.c"
        $value=$21; //@line 4168 "cPickle.c"
        var $22=$value; //@line 4169 "cPickle.c"
        var $23=($22)==0; //@line 4169 "cPickle.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4169 "cPickle.c"
      case 7: // $bb6
        var $24=HEAP[_BadPickleGet]; //@line 4170 "cPickle.c"
        var $25=$py_str; //@line 4170 "cPickle.c"
        _PyErr_SetObject($24, $25); //@line 4170 "cPickle.c"
        $rc=-1; //@line 4171 "cPickle.c"
        __label__ = 12; break; //@line 4171 "cPickle.c"
      case 8: // $bb7
        var $26=$self_addr; //@line 4174 "cPickle.c"
        var $27=$26+32; //@line 4174 "cPickle.c"
        var $28=HEAP[$27]; //@line 4174 "cPickle.c"
        var $29=$28+8; //@line 4174 "cPickle.c"
        var $30=HEAP[$29]; //@line 4174 "cPickle.c"
        var $31=$self_addr; //@line 4174 "cPickle.c"
        var $32=$31+32; //@line 4174 "cPickle.c"
        var $33=HEAP[$32]; //@line 4174 "cPickle.c"
        var $34=$33+12; //@line 4174 "cPickle.c"
        var $35=HEAP[$34]; //@line 4174 "cPickle.c"
        var $36=($30)==($35); //@line 4174 "cPickle.c"
        if ($36) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 4174 "cPickle.c"
      case 9: // $bb8
        var $37=$self_addr; //@line 4174 "cPickle.c"
        var $38=$37+32; //@line 4174 "cPickle.c"
        var $39=HEAP[$38]; //@line 4174 "cPickle.c"
        var $40=_Pdata_grow($39); //@line 4174 "cPickle.c"
        var $41=($40) < 0; //@line 4174 "cPickle.c"
        if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4174 "cPickle.c"
      case 10: // $bb9
        $0=-1; //@line 4174 "cPickle.c"
        __label__ = 15; break; //@line 4174 "cPickle.c"
      case 11: // $bb10
        var $42=$value; //@line 4174 "cPickle.c"
        var $43=$42; //@line 4174 "cPickle.c"
        var $44=HEAP[$43]; //@line 4174 "cPickle.c"
        var $45=($44) + 1; //@line 4174 "cPickle.c"
        var $46=$value; //@line 4174 "cPickle.c"
        var $47=$46; //@line 4174 "cPickle.c"
        HEAP[$47]=$45; //@line 4174 "cPickle.c"
        var $48=$self_addr; //@line 4174 "cPickle.c"
        var $49=$48+32; //@line 4174 "cPickle.c"
        var $50=HEAP[$49]; //@line 4174 "cPickle.c"
        var $51=$50+16; //@line 4174 "cPickle.c"
        var $52=HEAP[$51]; //@line 4174 "cPickle.c"
        var $53=$self_addr; //@line 4174 "cPickle.c"
        var $54=$53+32; //@line 4174 "cPickle.c"
        var $55=HEAP[$54]; //@line 4174 "cPickle.c"
        var $56=$55+8; //@line 4174 "cPickle.c"
        var $57=HEAP[$56]; //@line 4174 "cPickle.c"
        var $58=$52+4*$57; //@line 4174 "cPickle.c"
        var $59=$value; //@line 4174 "cPickle.c"
        HEAP[$58]=$59; //@line 4174 "cPickle.c"
        var $60=($57) + 1; //@line 4174 "cPickle.c"
        var $61=$55+8; //@line 4174 "cPickle.c"
        HEAP[$61]=$60; //@line 4174 "cPickle.c"
        $rc=0; //@line 4175 "cPickle.c"
        __label__ = 12; break; //@line 4175 "cPickle.c"
      case 12: // $bb11
        var $62=$py_str; //@line 4178 "cPickle.c"
        var $63=$62; //@line 4178 "cPickle.c"
        var $64=HEAP[$63]; //@line 4178 "cPickle.c"
        var $65=($64) - 1; //@line 4178 "cPickle.c"
        var $66=$py_str; //@line 4178 "cPickle.c"
        var $67=$66; //@line 4178 "cPickle.c"
        HEAP[$67]=$65; //@line 4178 "cPickle.c"
        var $68=$py_str; //@line 4178 "cPickle.c"
        var $69=$68; //@line 4178 "cPickle.c"
        var $70=HEAP[$69]; //@line 4178 "cPickle.c"
        var $71=($70)==0; //@line 4178 "cPickle.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4178 "cPickle.c"
      case 13: // $bb12
        var $72=$py_str; //@line 4178 "cPickle.c"
        var $73=$72+4; //@line 4178 "cPickle.c"
        var $74=HEAP[$73]; //@line 4178 "cPickle.c"
        var $75=$74+24; //@line 4178 "cPickle.c"
        var $76=HEAP[$75]; //@line 4178 "cPickle.c"
        var $77=$py_str; //@line 4178 "cPickle.c"
        FUNCTION_TABLE[$76]($77); //@line 4178 "cPickle.c"
        __label__ = 14; break; //@line 4178 "cPickle.c"
      case 14: // $bb13
        var $78=$rc; //@line 4179 "cPickle.c"
        $0=$78; //@line 4179 "cPickle.c"
        __label__ = 15; break; //@line 4179 "cPickle.c"
      case 15: // $bb14
        var $79=$0; //@line 4163 "cPickle.c"
        $retval=$79; //@line 4163 "cPickle.c"
        var $retval15=$retval; //@line 4163 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 4163 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binget($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_key;
        var $value;
        var $key;
        var $s=__stackBase__;
        var $rc;
        $self_addr=$self;
        $py_key=0; //@line 4186 "cPickle.c"
        $value=0; //@line 4186 "cPickle.c"
        var $1=$self_addr; //@line 4191 "cPickle.c"
        var $2=$1+60; //@line 4191 "cPickle.c"
        var $3=HEAP[$2]; //@line 4191 "cPickle.c"
        var $4=$self_addr; //@line 4191 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 1); //@line 4191 "cPickle.c"
        var $6=($5) < 0; //@line 4191 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4191 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 4191 "cPickle.c"
        __label__ = 13; break; //@line 4191 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 4193 "cPickle.c"
        var $8=$7; //@line 4193 "cPickle.c"
        var $9=HEAP[$8]; //@line 4193 "cPickle.c"
        $key=$9; //@line 4193 "cPickle.c"
        var $10=$key; //@line 4194 "cPickle.c"
        var $11=($10); //@line 4194 "cPickle.c"
        var $12=_PyInt_FromLong($11); //@line 4194 "cPickle.c"
        $py_key=$12; //@line 4194 "cPickle.c"
        var $13=$py_key; //@line 4194 "cPickle.c"
        var $14=($13)==0; //@line 4194 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4194 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 4194 "cPickle.c"
        __label__ = 13; break; //@line 4194 "cPickle.c"
      case 4: // $bb3
        var $15=$self_addr; //@line 4196 "cPickle.c"
        var $16=$15+24; //@line 4196 "cPickle.c"
        var $17=HEAP[$16]; //@line 4196 "cPickle.c"
        var $18=$py_key; //@line 4196 "cPickle.c"
        var $19=_PyDict_GetItem($17, $18); //@line 4196 "cPickle.c"
        $value=$19; //@line 4196 "cPickle.c"
        var $20=$value; //@line 4197 "cPickle.c"
        var $21=($20)==0; //@line 4197 "cPickle.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4197 "cPickle.c"
      case 5: // $bb4
        var $22=HEAP[_BadPickleGet]; //@line 4198 "cPickle.c"
        var $23=$py_key; //@line 4198 "cPickle.c"
        _PyErr_SetObject($22, $23); //@line 4198 "cPickle.c"
        $rc=-1; //@line 4199 "cPickle.c"
        __label__ = 10; break; //@line 4199 "cPickle.c"
      case 6: // $bb5
        var $24=$self_addr; //@line 4202 "cPickle.c"
        var $25=$24+32; //@line 4202 "cPickle.c"
        var $26=HEAP[$25]; //@line 4202 "cPickle.c"
        var $27=$26+8; //@line 4202 "cPickle.c"
        var $28=HEAP[$27]; //@line 4202 "cPickle.c"
        var $29=$self_addr; //@line 4202 "cPickle.c"
        var $30=$29+32; //@line 4202 "cPickle.c"
        var $31=HEAP[$30]; //@line 4202 "cPickle.c"
        var $32=$31+12; //@line 4202 "cPickle.c"
        var $33=HEAP[$32]; //@line 4202 "cPickle.c"
        var $34=($28)==($33); //@line 4202 "cPickle.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 4202 "cPickle.c"
      case 7: // $bb6
        var $35=$self_addr; //@line 4202 "cPickle.c"
        var $36=$35+32; //@line 4202 "cPickle.c"
        var $37=HEAP[$36]; //@line 4202 "cPickle.c"
        var $38=_Pdata_grow($37); //@line 4202 "cPickle.c"
        var $39=($38) < 0; //@line 4202 "cPickle.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4202 "cPickle.c"
      case 8: // $bb7
        $0=-1; //@line 4202 "cPickle.c"
        __label__ = 13; break; //@line 4202 "cPickle.c"
      case 9: // $bb8
        var $40=$value; //@line 4202 "cPickle.c"
        var $41=$40; //@line 4202 "cPickle.c"
        var $42=HEAP[$41]; //@line 4202 "cPickle.c"
        var $43=($42) + 1; //@line 4202 "cPickle.c"
        var $44=$value; //@line 4202 "cPickle.c"
        var $45=$44; //@line 4202 "cPickle.c"
        HEAP[$45]=$43; //@line 4202 "cPickle.c"
        var $46=$self_addr; //@line 4202 "cPickle.c"
        var $47=$46+32; //@line 4202 "cPickle.c"
        var $48=HEAP[$47]; //@line 4202 "cPickle.c"
        var $49=$48+16; //@line 4202 "cPickle.c"
        var $50=HEAP[$49]; //@line 4202 "cPickle.c"
        var $51=$self_addr; //@line 4202 "cPickle.c"
        var $52=$51+32; //@line 4202 "cPickle.c"
        var $53=HEAP[$52]; //@line 4202 "cPickle.c"
        var $54=$53+8; //@line 4202 "cPickle.c"
        var $55=HEAP[$54]; //@line 4202 "cPickle.c"
        var $56=$50+4*$55; //@line 4202 "cPickle.c"
        var $57=$value; //@line 4202 "cPickle.c"
        HEAP[$56]=$57; //@line 4202 "cPickle.c"
        var $58=($55) + 1; //@line 4202 "cPickle.c"
        var $59=$53+8; //@line 4202 "cPickle.c"
        HEAP[$59]=$58; //@line 4202 "cPickle.c"
        $rc=0; //@line 4203 "cPickle.c"
        __label__ = 10; break; //@line 4203 "cPickle.c"
      case 10: // $bb9
        var $60=$py_key; //@line 4206 "cPickle.c"
        var $61=$60; //@line 4206 "cPickle.c"
        var $62=HEAP[$61]; //@line 4206 "cPickle.c"
        var $63=($62) - 1; //@line 4206 "cPickle.c"
        var $64=$py_key; //@line 4206 "cPickle.c"
        var $65=$64; //@line 4206 "cPickle.c"
        HEAP[$65]=$63; //@line 4206 "cPickle.c"
        var $66=$py_key; //@line 4206 "cPickle.c"
        var $67=$66; //@line 4206 "cPickle.c"
        var $68=HEAP[$67]; //@line 4206 "cPickle.c"
        var $69=($68)==0; //@line 4206 "cPickle.c"
        if ($69) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4206 "cPickle.c"
      case 11: // $bb10
        var $70=$py_key; //@line 4206 "cPickle.c"
        var $71=$70+4; //@line 4206 "cPickle.c"
        var $72=HEAP[$71]; //@line 4206 "cPickle.c"
        var $73=$72+24; //@line 4206 "cPickle.c"
        var $74=HEAP[$73]; //@line 4206 "cPickle.c"
        var $75=$py_key; //@line 4206 "cPickle.c"
        FUNCTION_TABLE[$74]($75); //@line 4206 "cPickle.c"
        __label__ = 12; break; //@line 4206 "cPickle.c"
      case 12: // $bb11
        var $76=$rc; //@line 4207 "cPickle.c"
        $0=$76; //@line 4207 "cPickle.c"
        __label__ = 13; break; //@line 4207 "cPickle.c"
      case 13: // $bb12
        var $77=$0; //@line 4191 "cPickle.c"
        $retval=$77; //@line 4191 "cPickle.c"
        var $retval13=$retval; //@line 4191 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 4191 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_long_binget($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_key;
        var $value;
        var $c;
        var $s=__stackBase__;
        var $key;
        var $rc;
        $self_addr=$self;
        $py_key=0; //@line 4214 "cPickle.c"
        $value=0; //@line 4214 "cPickle.c"
        var $1=$self_addr; //@line 4220 "cPickle.c"
        var $2=$1+60; //@line 4220 "cPickle.c"
        var $3=HEAP[$2]; //@line 4220 "cPickle.c"
        var $4=$self_addr; //@line 4220 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 4); //@line 4220 "cPickle.c"
        var $6=($5) < 0; //@line 4220 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4220 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 4220 "cPickle.c"
        __label__ = 13; break; //@line 4220 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 4222 "cPickle.c"
        var $8=$7; //@line 4222 "cPickle.c"
        var $9=HEAP[$8]; //@line 4222 "cPickle.c"
        $c=$9; //@line 4222 "cPickle.c"
        var $10=$c; //@line 4223 "cPickle.c"
        var $11=($10); //@line 4223 "cPickle.c"
        $key=$11; //@line 4223 "cPickle.c"
        var $12=HEAP[$s]; //@line 4224 "cPickle.c"
        var $13=$12+1; //@line 4224 "cPickle.c"
        var $14=HEAP[$13]; //@line 4224 "cPickle.c"
        $c=$14; //@line 4224 "cPickle.c"
        var $15=$c; //@line 4225 "cPickle.c"
        var $16=($15); //@line 4225 "cPickle.c"
        var $17=($16) << 8; //@line 4225 "cPickle.c"
        var $18=$key; //@line 4225 "cPickle.c"
        var $19=($17) | ($18); //@line 4225 "cPickle.c"
        $key=$19; //@line 4225 "cPickle.c"
        var $20=HEAP[$s]; //@line 4226 "cPickle.c"
        var $21=$20+2; //@line 4226 "cPickle.c"
        var $22=HEAP[$21]; //@line 4226 "cPickle.c"
        $c=$22; //@line 4226 "cPickle.c"
        var $23=$c; //@line 4227 "cPickle.c"
        var $24=($23); //@line 4227 "cPickle.c"
        var $25=($24) << 16; //@line 4227 "cPickle.c"
        var $26=$key; //@line 4227 "cPickle.c"
        var $27=($25) | ($26); //@line 4227 "cPickle.c"
        $key=$27; //@line 4227 "cPickle.c"
        var $28=HEAP[$s]; //@line 4228 "cPickle.c"
        var $29=$28+3; //@line 4228 "cPickle.c"
        var $30=HEAP[$29]; //@line 4228 "cPickle.c"
        $c=$30; //@line 4228 "cPickle.c"
        var $31=$c; //@line 4229 "cPickle.c"
        var $32=($31); //@line 4229 "cPickle.c"
        var $33=($32) << 24; //@line 4229 "cPickle.c"
        var $34=$key; //@line 4229 "cPickle.c"
        var $35=($33) | ($34); //@line 4229 "cPickle.c"
        $key=$35; //@line 4229 "cPickle.c"
        var $36=$key; //@line 4231 "cPickle.c"
        var $37=_PyInt_FromLong($36); //@line 4231 "cPickle.c"
        $py_key=$37; //@line 4231 "cPickle.c"
        var $38=$py_key; //@line 4231 "cPickle.c"
        var $39=($38)==0; //@line 4231 "cPickle.c"
        if ($39) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4231 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 4231 "cPickle.c"
        __label__ = 13; break; //@line 4231 "cPickle.c"
      case 4: // $bb3
        var $40=$self_addr; //@line 4233 "cPickle.c"
        var $41=$40+24; //@line 4233 "cPickle.c"
        var $42=HEAP[$41]; //@line 4233 "cPickle.c"
        var $43=$py_key; //@line 4233 "cPickle.c"
        var $44=_PyDict_GetItem($42, $43); //@line 4233 "cPickle.c"
        $value=$44; //@line 4233 "cPickle.c"
        var $45=$value; //@line 4234 "cPickle.c"
        var $46=($45)==0; //@line 4234 "cPickle.c"
        if ($46) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4234 "cPickle.c"
      case 5: // $bb4
        var $47=HEAP[_BadPickleGet]; //@line 4235 "cPickle.c"
        var $48=$py_key; //@line 4235 "cPickle.c"
        _PyErr_SetObject($47, $48); //@line 4235 "cPickle.c"
        $rc=-1; //@line 4236 "cPickle.c"
        __label__ = 10; break; //@line 4236 "cPickle.c"
      case 6: // $bb5
        var $49=$self_addr; //@line 4239 "cPickle.c"
        var $50=$49+32; //@line 4239 "cPickle.c"
        var $51=HEAP[$50]; //@line 4239 "cPickle.c"
        var $52=$51+8; //@line 4239 "cPickle.c"
        var $53=HEAP[$52]; //@line 4239 "cPickle.c"
        var $54=$self_addr; //@line 4239 "cPickle.c"
        var $55=$54+32; //@line 4239 "cPickle.c"
        var $56=HEAP[$55]; //@line 4239 "cPickle.c"
        var $57=$56+12; //@line 4239 "cPickle.c"
        var $58=HEAP[$57]; //@line 4239 "cPickle.c"
        var $59=($53)==($58); //@line 4239 "cPickle.c"
        if ($59) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 4239 "cPickle.c"
      case 7: // $bb6
        var $60=$self_addr; //@line 4239 "cPickle.c"
        var $61=$60+32; //@line 4239 "cPickle.c"
        var $62=HEAP[$61]; //@line 4239 "cPickle.c"
        var $63=_Pdata_grow($62); //@line 4239 "cPickle.c"
        var $64=($63) < 0; //@line 4239 "cPickle.c"
        if ($64) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4239 "cPickle.c"
      case 8: // $bb7
        $0=-1; //@line 4239 "cPickle.c"
        __label__ = 13; break; //@line 4239 "cPickle.c"
      case 9: // $bb8
        var $65=$value; //@line 4239 "cPickle.c"
        var $66=$65; //@line 4239 "cPickle.c"
        var $67=HEAP[$66]; //@line 4239 "cPickle.c"
        var $68=($67) + 1; //@line 4239 "cPickle.c"
        var $69=$value; //@line 4239 "cPickle.c"
        var $70=$69; //@line 4239 "cPickle.c"
        HEAP[$70]=$68; //@line 4239 "cPickle.c"
        var $71=$self_addr; //@line 4239 "cPickle.c"
        var $72=$71+32; //@line 4239 "cPickle.c"
        var $73=HEAP[$72]; //@line 4239 "cPickle.c"
        var $74=$73+16; //@line 4239 "cPickle.c"
        var $75=HEAP[$74]; //@line 4239 "cPickle.c"
        var $76=$self_addr; //@line 4239 "cPickle.c"
        var $77=$76+32; //@line 4239 "cPickle.c"
        var $78=HEAP[$77]; //@line 4239 "cPickle.c"
        var $79=$78+8; //@line 4239 "cPickle.c"
        var $80=HEAP[$79]; //@line 4239 "cPickle.c"
        var $81=$75+4*$80; //@line 4239 "cPickle.c"
        var $82=$value; //@line 4239 "cPickle.c"
        HEAP[$81]=$82; //@line 4239 "cPickle.c"
        var $83=($80) + 1; //@line 4239 "cPickle.c"
        var $84=$78+8; //@line 4239 "cPickle.c"
        HEAP[$84]=$83; //@line 4239 "cPickle.c"
        $rc=0; //@line 4240 "cPickle.c"
        __label__ = 10; break; //@line 4240 "cPickle.c"
      case 10: // $bb9
        var $85=$py_key; //@line 4243 "cPickle.c"
        var $86=$85; //@line 4243 "cPickle.c"
        var $87=HEAP[$86]; //@line 4243 "cPickle.c"
        var $88=($87) - 1; //@line 4243 "cPickle.c"
        var $89=$py_key; //@line 4243 "cPickle.c"
        var $90=$89; //@line 4243 "cPickle.c"
        HEAP[$90]=$88; //@line 4243 "cPickle.c"
        var $91=$py_key; //@line 4243 "cPickle.c"
        var $92=$91; //@line 4243 "cPickle.c"
        var $93=HEAP[$92]; //@line 4243 "cPickle.c"
        var $94=($93)==0; //@line 4243 "cPickle.c"
        if ($94) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4243 "cPickle.c"
      case 11: // $bb10
        var $95=$py_key; //@line 4243 "cPickle.c"
        var $96=$95+4; //@line 4243 "cPickle.c"
        var $97=HEAP[$96]; //@line 4243 "cPickle.c"
        var $98=$97+24; //@line 4243 "cPickle.c"
        var $99=HEAP[$98]; //@line 4243 "cPickle.c"
        var $100=$py_key; //@line 4243 "cPickle.c"
        FUNCTION_TABLE[$99]($100); //@line 4243 "cPickle.c"
        __label__ = 12; break; //@line 4243 "cPickle.c"
      case 12: // $bb11
        var $101=$rc; //@line 4244 "cPickle.c"
        $0=$101; //@line 4244 "cPickle.c"
        __label__ = 13; break; //@line 4244 "cPickle.c"
      case 13: // $bb12
        var $102=$0; //@line 4220 "cPickle.c"
        $retval=$102; //@line 4220 "cPickle.c"
        var $retval13=$retval; //@line 4220 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 4220 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_extension($self, $nbytes) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $nbytes_addr;
        var $retval;
        var $0;
        var $codebytes=__stackBase__;
        var $code;
        var $py_code;
        var $obj;
        var $pair;
        var $module_name;
        var $class_name;
        $self_addr=$self;
        $nbytes_addr=$nbytes;
        var $1=$nbytes_addr; //@line 4260 "cPickle.c"
        var $2=($1)!=1; //@line 4260 "cPickle.c"
        var $3=$nbytes_addr; //@line 4260 "cPickle.c"
        var $4=($3)!=2; //@line 4260 "cPickle.c"
        var $or_cond=($2) & ($4);
        var $5=$nbytes_addr; //@line 4260 "cPickle.c"
        var $6=($5)!=4; //@line 4260 "cPickle.c"
        var $or_cond3=($or_cond) & ($6);
        if ($or_cond3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4260 "cPickle.c"
      case 1: // $bb2
        ___assert_fail(__str93, __str15, 4260, ___PRETTY_FUNCTION___14342); //@line 4260 "cPickle.c"
        throw "Reached an unreachable!" //@line 4260 "cPickle.c"
      case 2: // $bb3
        var $7=$self_addr; //@line 4261 "cPickle.c"
        var $8=$7+60; //@line 4261 "cPickle.c"
        var $9=HEAP[$8]; //@line 4261 "cPickle.c"
        var $10=$self_addr; //@line 4261 "cPickle.c"
        var $11=$nbytes_addr; //@line 4261 "cPickle.c"
        var $12=FUNCTION_TABLE[$9]($10, $codebytes, $11); //@line 4261 "cPickle.c"
        var $13=($12) < 0; //@line 4261 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4261 "cPickle.c"
      case 3: // $bb4
        $0=-1; //@line 4261 "cPickle.c"
        __label__ = 42; break; //@line 4261 "cPickle.c"
      case 4: // $bb5
        var $14=HEAP[$codebytes]; //@line 4262 "cPickle.c"
        var $15=$nbytes_addr; //@line 4262 "cPickle.c"
        var $16=_calc_binint($14, $15); //@line 4262 "cPickle.c"
        $code=$16; //@line 4262 "cPickle.c"
        var $17=$code; //@line 4263 "cPickle.c"
        var $18=($17) <= 0; //@line 4263 "cPickle.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4263 "cPickle.c"
      case 5: // $bb6
        var $19=HEAP[_UnpicklingError]; //@line 4265 "cPickle.c"
        _PyErr_SetString($19, __str94); //@line 4265 "cPickle.c"
        $0=-1; //@line 4266 "cPickle.c"
        __label__ = 42; break; //@line 4266 "cPickle.c"
      case 6: // $bb7
        var $20=$code; //@line 4270 "cPickle.c"
        var $21=_PyInt_FromLong($20); //@line 4270 "cPickle.c"
        $py_code=$21; //@line 4270 "cPickle.c"
        var $22=$py_code; //@line 4271 "cPickle.c"
        var $23=($22)==0; //@line 4271 "cPickle.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4271 "cPickle.c"
      case 7: // $bb8
        $0=-1; //@line 4271 "cPickle.c"
        __label__ = 42; break; //@line 4271 "cPickle.c"
      case 8: // $bb9
        var $24=HEAP[_extension_cache]; //@line 4272 "cPickle.c"
        var $25=$py_code; //@line 4272 "cPickle.c"
        var $26=_PyDict_GetItem($24, $25); //@line 4272 "cPickle.c"
        $obj=$26; //@line 4272 "cPickle.c"
        var $27=$obj; //@line 4273 "cPickle.c"
        var $28=($27)!=0; //@line 4273 "cPickle.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 15; break; } //@line 4273 "cPickle.c"
      case 9: // $bb10
        var $29=$py_code; //@line 4275 "cPickle.c"
        var $30=$29; //@line 4275 "cPickle.c"
        var $31=HEAP[$30]; //@line 4275 "cPickle.c"
        var $32=($31) - 1; //@line 4275 "cPickle.c"
        var $33=$py_code; //@line 4275 "cPickle.c"
        var $34=$33; //@line 4275 "cPickle.c"
        HEAP[$34]=$32; //@line 4275 "cPickle.c"
        var $35=$py_code; //@line 4275 "cPickle.c"
        var $36=$35; //@line 4275 "cPickle.c"
        var $37=HEAP[$36]; //@line 4275 "cPickle.c"
        var $38=($37)==0; //@line 4275 "cPickle.c"
        if ($38) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4275 "cPickle.c"
      case 10: // $bb11
        var $39=$py_code; //@line 4275 "cPickle.c"
        var $40=$39+4; //@line 4275 "cPickle.c"
        var $41=HEAP[$40]; //@line 4275 "cPickle.c"
        var $42=$41+24; //@line 4275 "cPickle.c"
        var $43=HEAP[$42]; //@line 4275 "cPickle.c"
        var $44=$py_code; //@line 4275 "cPickle.c"
        FUNCTION_TABLE[$43]($44); //@line 4275 "cPickle.c"
        __label__ = 11; break; //@line 4275 "cPickle.c"
      case 11: // $bb12
        var $45=$self_addr; //@line 4276 "cPickle.c"
        var $46=$45+32; //@line 4276 "cPickle.c"
        var $47=HEAP[$46]; //@line 4276 "cPickle.c"
        var $48=$47+8; //@line 4276 "cPickle.c"
        var $49=HEAP[$48]; //@line 4276 "cPickle.c"
        var $50=$self_addr; //@line 4276 "cPickle.c"
        var $51=$50+32; //@line 4276 "cPickle.c"
        var $52=HEAP[$51]; //@line 4276 "cPickle.c"
        var $53=$52+12; //@line 4276 "cPickle.c"
        var $54=HEAP[$53]; //@line 4276 "cPickle.c"
        var $55=($49)==($54); //@line 4276 "cPickle.c"
        if ($55) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 4276 "cPickle.c"
      case 12: // $bb13
        var $56=$self_addr; //@line 4276 "cPickle.c"
        var $57=$56+32; //@line 4276 "cPickle.c"
        var $58=HEAP[$57]; //@line 4276 "cPickle.c"
        var $59=_Pdata_grow($58); //@line 4276 "cPickle.c"
        var $60=($59) < 0; //@line 4276 "cPickle.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4276 "cPickle.c"
      case 13: // $bb14
        $0=-1; //@line 4276 "cPickle.c"
        __label__ = 42; break; //@line 4276 "cPickle.c"
      case 14: // $bb15
        var $61=$obj; //@line 4276 "cPickle.c"
        var $62=$61; //@line 4276 "cPickle.c"
        var $63=HEAP[$62]; //@line 4276 "cPickle.c"
        var $64=($63) + 1; //@line 4276 "cPickle.c"
        var $65=$obj; //@line 4276 "cPickle.c"
        var $66=$65; //@line 4276 "cPickle.c"
        HEAP[$66]=$64; //@line 4276 "cPickle.c"
        var $67=$self_addr; //@line 4276 "cPickle.c"
        var $68=$67+32; //@line 4276 "cPickle.c"
        var $69=HEAP[$68]; //@line 4276 "cPickle.c"
        var $70=$69+16; //@line 4276 "cPickle.c"
        var $71=HEAP[$70]; //@line 4276 "cPickle.c"
        var $72=$self_addr; //@line 4276 "cPickle.c"
        var $73=$72+32; //@line 4276 "cPickle.c"
        var $74=HEAP[$73]; //@line 4276 "cPickle.c"
        var $75=$74+8; //@line 4276 "cPickle.c"
        var $76=HEAP[$75]; //@line 4276 "cPickle.c"
        var $77=$71+4*$76; //@line 4276 "cPickle.c"
        var $78=$obj; //@line 4276 "cPickle.c"
        HEAP[$77]=$78; //@line 4276 "cPickle.c"
        var $79=($76) + 1; //@line 4276 "cPickle.c"
        var $80=$74+8; //@line 4276 "cPickle.c"
        HEAP[$80]=$79; //@line 4276 "cPickle.c"
        $0=0; //@line 4277 "cPickle.c"
        __label__ = 42; break; //@line 4277 "cPickle.c"
      case 15: // $bb16
        var $81=HEAP[_inverted_registry]; //@line 4281 "cPickle.c"
        var $82=$py_code; //@line 4281 "cPickle.c"
        var $83=_PyDict_GetItem($81, $82); //@line 4281 "cPickle.c"
        $pair=$83; //@line 4281 "cPickle.c"
        var $84=$pair; //@line 4282 "cPickle.c"
        var $85=($84)==0; //@line 4282 "cPickle.c"
        if ($85) { __label__ = 16; break; } else { __label__ = 19; break; } //@line 4282 "cPickle.c"
      case 16: // $bb17
        var $86=$py_code; //@line 4283 "cPickle.c"
        var $87=$86; //@line 4283 "cPickle.c"
        var $88=HEAP[$87]; //@line 4283 "cPickle.c"
        var $89=($88) - 1; //@line 4283 "cPickle.c"
        var $90=$py_code; //@line 4283 "cPickle.c"
        var $91=$90; //@line 4283 "cPickle.c"
        HEAP[$91]=$89; //@line 4283 "cPickle.c"
        var $92=$py_code; //@line 4283 "cPickle.c"
        var $93=$92; //@line 4283 "cPickle.c"
        var $94=HEAP[$93]; //@line 4283 "cPickle.c"
        var $95=($94)==0; //@line 4283 "cPickle.c"
        if ($95) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4283 "cPickle.c"
      case 17: // $bb18
        var $96=$py_code; //@line 4283 "cPickle.c"
        var $97=$96+4; //@line 4283 "cPickle.c"
        var $98=HEAP[$97]; //@line 4283 "cPickle.c"
        var $99=$98+24; //@line 4283 "cPickle.c"
        var $100=HEAP[$99]; //@line 4283 "cPickle.c"
        var $101=$py_code; //@line 4283 "cPickle.c"
        FUNCTION_TABLE[$100]($101); //@line 4283 "cPickle.c"
        __label__ = 18; break; //@line 4283 "cPickle.c"
      case 18: // $bb19
        var $102=HEAP[_PyExc_ValueError]; //@line 4284 "cPickle.c"
        var $103=$code; //@line 4284 "cPickle.c"
        var $104=_PyErr_Format($102, __str95, allocate([$103,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 4284 "cPickle.c"
        $0=-1; //@line 4286 "cPickle.c"
        __label__ = 42; break; //@line 4286 "cPickle.c"
      case 19: // $bb20
        var $105=$pair; //@line 4291 "cPickle.c"
        var $106=$105+4; //@line 4291 "cPickle.c"
        var $107=HEAP[$106]; //@line 4291 "cPickle.c"
        var $108=$107+84; //@line 4291 "cPickle.c"
        var $109=HEAP[$108]; //@line 4291 "cPickle.c"
        var $110=($109) & 67108864; //@line 4291 "cPickle.c"
        var $111=($110)==0; //@line 4291 "cPickle.c"
        if ($111) { __label__ = 23; break; } else { __label__ = 20; break; } //@line 4291 "cPickle.c"
      case 20: // $bb21
        var $112=$pair; //@line 4291 "cPickle.c"
        var $113=_PyTuple_Size($112); //@line 4291 "cPickle.c"
        var $114=($113)!=2; //@line 4291 "cPickle.c"
        if ($114) { __label__ = 23; break; } else { __label__ = 21; break; } //@line 4291 "cPickle.c"
      case 21: // $bb22
        var $115=$pair; //@line 4291 "cPickle.c"
        var $116=$115; //@line 4291 "cPickle.c"
        var $117=$116+12; //@line 4291 "cPickle.c"
        var $118=$117; //@line 4291 "cPickle.c"
        var $119=HEAP[$118]; //@line 4291 "cPickle.c"
        $module_name=$119; //@line 4291 "cPickle.c"
        var $120=$module_name; //@line 4291 "cPickle.c"
        var $121=$120+4; //@line 4291 "cPickle.c"
        var $122=HEAP[$121]; //@line 4291 "cPickle.c"
        var $123=$122+84; //@line 4291 "cPickle.c"
        var $124=HEAP[$123]; //@line 4291 "cPickle.c"
        var $125=($124) & 134217728; //@line 4291 "cPickle.c"
        var $126=($125)==0; //@line 4291 "cPickle.c"
        if ($126) { __label__ = 23; break; } else { __label__ = 22; break; } //@line 4291 "cPickle.c"
      case 22: // $bb23
        var $127=$pair; //@line 4291 "cPickle.c"
        var $128=$127; //@line 4291 "cPickle.c"
        var $129=$128+12; //@line 4291 "cPickle.c"
        var $130=$129+4; //@line 4291 "cPickle.c"
        var $131=HEAP[$130]; //@line 4291 "cPickle.c"
        $class_name=$131; //@line 4291 "cPickle.c"
        var $132=$class_name; //@line 4291 "cPickle.c"
        var $133=$132+4; //@line 4291 "cPickle.c"
        var $134=HEAP[$133]; //@line 4291 "cPickle.c"
        var $135=$134+84; //@line 4291 "cPickle.c"
        var $136=HEAP[$135]; //@line 4291 "cPickle.c"
        var $137=($136) & 134217728; //@line 4291 "cPickle.c"
        var $138=($137)==0; //@line 4291 "cPickle.c"
        if ($138) { __label__ = 23; break; } else { __label__ = 26; break; } //@line 4291 "cPickle.c"
      case 23: // $bb24
        var $139=$py_code; //@line 4294 "cPickle.c"
        var $140=$139; //@line 4294 "cPickle.c"
        var $141=HEAP[$140]; //@line 4294 "cPickle.c"
        var $142=($141) - 1; //@line 4294 "cPickle.c"
        var $143=$py_code; //@line 4294 "cPickle.c"
        var $144=$143; //@line 4294 "cPickle.c"
        HEAP[$144]=$142; //@line 4294 "cPickle.c"
        var $145=$py_code; //@line 4294 "cPickle.c"
        var $146=$145; //@line 4294 "cPickle.c"
        var $147=HEAP[$146]; //@line 4294 "cPickle.c"
        var $148=($147)==0; //@line 4294 "cPickle.c"
        if ($148) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4294 "cPickle.c"
      case 24: // $bb25
        var $149=$py_code; //@line 4294 "cPickle.c"
        var $150=$149+4; //@line 4294 "cPickle.c"
        var $151=HEAP[$150]; //@line 4294 "cPickle.c"
        var $152=$151+24; //@line 4294 "cPickle.c"
        var $153=HEAP[$152]; //@line 4294 "cPickle.c"
        var $154=$py_code; //@line 4294 "cPickle.c"
        FUNCTION_TABLE[$153]($154); //@line 4294 "cPickle.c"
        __label__ = 25; break; //@line 4294 "cPickle.c"
      case 25: // $bb26
        var $155=HEAP[_PyExc_ValueError]; //@line 4295 "cPickle.c"
        var $156=$code; //@line 4295 "cPickle.c"
        var $157=_PyErr_Format($155, __str96, allocate([$156,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 4295 "cPickle.c"
        $0=-1; //@line 4297 "cPickle.c"
        __label__ = 42; break; //@line 4297 "cPickle.c"
      case 26: // $bb27
        var $158=$self_addr; //@line 4300 "cPickle.c"
        var $159=$158+76; //@line 4300 "cPickle.c"
        var $160=HEAP[$159]; //@line 4300 "cPickle.c"
        var $161=$module_name; //@line 4300 "cPickle.c"
        var $162=$class_name; //@line 4300 "cPickle.c"
        var $163=_find_class($161, $162, $160); //@line 4300 "cPickle.c"
        $obj=$163; //@line 4300 "cPickle.c"
        var $164=$obj; //@line 4301 "cPickle.c"
        var $165=($164)==0; //@line 4301 "cPickle.c"
        if ($165) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 4301 "cPickle.c"
      case 27: // $bb28
        var $166=$py_code; //@line 4302 "cPickle.c"
        var $167=$166; //@line 4302 "cPickle.c"
        var $168=HEAP[$167]; //@line 4302 "cPickle.c"
        var $169=($168) - 1; //@line 4302 "cPickle.c"
        var $170=$py_code; //@line 4302 "cPickle.c"
        var $171=$170; //@line 4302 "cPickle.c"
        HEAP[$171]=$169; //@line 4302 "cPickle.c"
        var $172=$py_code; //@line 4302 "cPickle.c"
        var $173=$172; //@line 4302 "cPickle.c"
        var $174=HEAP[$173]; //@line 4302 "cPickle.c"
        var $175=($174)==0; //@line 4302 "cPickle.c"
        if ($175) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 4302 "cPickle.c"
      case 28: // $bb29
        var $176=$py_code; //@line 4302 "cPickle.c"
        var $177=$176+4; //@line 4302 "cPickle.c"
        var $178=HEAP[$177]; //@line 4302 "cPickle.c"
        var $179=$178+24; //@line 4302 "cPickle.c"
        var $180=HEAP[$179]; //@line 4302 "cPickle.c"
        var $181=$py_code; //@line 4302 "cPickle.c"
        FUNCTION_TABLE[$180]($181); //@line 4302 "cPickle.c"
        __label__ = 29; break; //@line 4302 "cPickle.c"
      case 29: // $bb30
        $0=-1; //@line 4303 "cPickle.c"
        __label__ = 42; break; //@line 4303 "cPickle.c"
      case 30: // $bb31
        var $182=HEAP[_extension_cache]; //@line 4306 "cPickle.c"
        var $183=$py_code; //@line 4306 "cPickle.c"
        var $184=$obj; //@line 4306 "cPickle.c"
        var $185=_PyDict_SetItem($182, $183, $184); //@line 4306 "cPickle.c"
        $code=$185; //@line 4306 "cPickle.c"
        var $186=$py_code; //@line 4307 "cPickle.c"
        var $187=$186; //@line 4307 "cPickle.c"
        var $188=HEAP[$187]; //@line 4307 "cPickle.c"
        var $189=($188) - 1; //@line 4307 "cPickle.c"
        var $190=$py_code; //@line 4307 "cPickle.c"
        var $191=$190; //@line 4307 "cPickle.c"
        HEAP[$191]=$189; //@line 4307 "cPickle.c"
        var $192=$py_code; //@line 4307 "cPickle.c"
        var $193=$192; //@line 4307 "cPickle.c"
        var $194=HEAP[$193]; //@line 4307 "cPickle.c"
        var $195=($194)==0; //@line 4307 "cPickle.c"
        if ($195) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4307 "cPickle.c"
      case 31: // $bb32
        var $196=$py_code; //@line 4307 "cPickle.c"
        var $197=$196+4; //@line 4307 "cPickle.c"
        var $198=HEAP[$197]; //@line 4307 "cPickle.c"
        var $199=$198+24; //@line 4307 "cPickle.c"
        var $200=HEAP[$199]; //@line 4307 "cPickle.c"
        var $201=$py_code; //@line 4307 "cPickle.c"
        FUNCTION_TABLE[$200]($201); //@line 4307 "cPickle.c"
        __label__ = 32; break; //@line 4307 "cPickle.c"
      case 32: // $bb33
        var $202=$code; //@line 4308 "cPickle.c"
        var $203=($202) < 0; //@line 4308 "cPickle.c"
        if ($203) { __label__ = 33; break; } else { __label__ = 36; break; } //@line 4308 "cPickle.c"
      case 33: // $bb34
        var $204=$obj; //@line 4309 "cPickle.c"
        var $205=$204; //@line 4309 "cPickle.c"
        var $206=HEAP[$205]; //@line 4309 "cPickle.c"
        var $207=($206) - 1; //@line 4309 "cPickle.c"
        var $208=$obj; //@line 4309 "cPickle.c"
        var $209=$208; //@line 4309 "cPickle.c"
        HEAP[$209]=$207; //@line 4309 "cPickle.c"
        var $210=$obj; //@line 4309 "cPickle.c"
        var $211=$210; //@line 4309 "cPickle.c"
        var $212=HEAP[$211]; //@line 4309 "cPickle.c"
        var $213=($212)==0; //@line 4309 "cPickle.c"
        if ($213) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4309 "cPickle.c"
      case 34: // $bb35
        var $214=$obj; //@line 4309 "cPickle.c"
        var $215=$214+4; //@line 4309 "cPickle.c"
        var $216=HEAP[$215]; //@line 4309 "cPickle.c"
        var $217=$216+24; //@line 4309 "cPickle.c"
        var $218=HEAP[$217]; //@line 4309 "cPickle.c"
        var $219=$obj; //@line 4309 "cPickle.c"
        FUNCTION_TABLE[$218]($219); //@line 4309 "cPickle.c"
        __label__ = 35; break; //@line 4309 "cPickle.c"
      case 35: // $bb36
        $0=-1; //@line 4310 "cPickle.c"
        __label__ = 42; break; //@line 4310 "cPickle.c"
      case 36: // $bb37
        var $220=$self_addr; //@line 4312 "cPickle.c"
        var $221=$220+32; //@line 4312 "cPickle.c"
        var $222=HEAP[$221]; //@line 4312 "cPickle.c"
        var $223=$222+8; //@line 4312 "cPickle.c"
        var $224=HEAP[$223]; //@line 4312 "cPickle.c"
        var $225=$self_addr; //@line 4312 "cPickle.c"
        var $226=$225+32; //@line 4312 "cPickle.c"
        var $227=HEAP[$226]; //@line 4312 "cPickle.c"
        var $228=$227+12; //@line 4312 "cPickle.c"
        var $229=HEAP[$228]; //@line 4312 "cPickle.c"
        var $230=($224)==($229); //@line 4312 "cPickle.c"
        if ($230) { __label__ = 37; break; } else { __label__ = 41; break; } //@line 4312 "cPickle.c"
      case 37: // $bb38
        var $231=$self_addr; //@line 4312 "cPickle.c"
        var $232=$231+32; //@line 4312 "cPickle.c"
        var $233=HEAP[$232]; //@line 4312 "cPickle.c"
        var $234=_Pdata_grow($233); //@line 4312 "cPickle.c"
        var $235=($234) < 0; //@line 4312 "cPickle.c"
        if ($235) { __label__ = 38; break; } else { __label__ = 41; break; } //@line 4312 "cPickle.c"
      case 38: // $bb39
        var $236=$obj; //@line 4312 "cPickle.c"
        var $237=$236; //@line 4312 "cPickle.c"
        var $238=HEAP[$237]; //@line 4312 "cPickle.c"
        var $239=($238) - 1; //@line 4312 "cPickle.c"
        var $240=$obj; //@line 4312 "cPickle.c"
        var $241=$240; //@line 4312 "cPickle.c"
        HEAP[$241]=$239; //@line 4312 "cPickle.c"
        var $242=$obj; //@line 4312 "cPickle.c"
        var $243=$242; //@line 4312 "cPickle.c"
        var $244=HEAP[$243]; //@line 4312 "cPickle.c"
        var $245=($244)==0; //@line 4312 "cPickle.c"
        if ($245) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 4312 "cPickle.c"
      case 39: // $bb40
        var $246=$obj; //@line 4312 "cPickle.c"
        var $247=$246+4; //@line 4312 "cPickle.c"
        var $248=HEAP[$247]; //@line 4312 "cPickle.c"
        var $249=$248+24; //@line 4312 "cPickle.c"
        var $250=HEAP[$249]; //@line 4312 "cPickle.c"
        var $251=$obj; //@line 4312 "cPickle.c"
        FUNCTION_TABLE[$250]($251); //@line 4312 "cPickle.c"
        __label__ = 40; break; //@line 4312 "cPickle.c"
      case 40: // $bb41
        $0=-1; //@line 4312 "cPickle.c"
        __label__ = 42; break; //@line 4312 "cPickle.c"
      case 41: // $bb42
        var $252=$self_addr; //@line 4312 "cPickle.c"
        var $253=$252+32; //@line 4312 "cPickle.c"
        var $254=HEAP[$253]; //@line 4312 "cPickle.c"
        var $255=$254+16; //@line 4312 "cPickle.c"
        var $256=HEAP[$255]; //@line 4312 "cPickle.c"
        var $257=$self_addr; //@line 4312 "cPickle.c"
        var $258=$257+32; //@line 4312 "cPickle.c"
        var $259=HEAP[$258]; //@line 4312 "cPickle.c"
        var $260=$259+8; //@line 4312 "cPickle.c"
        var $261=HEAP[$260]; //@line 4312 "cPickle.c"
        var $262=$256+4*$261; //@line 4312 "cPickle.c"
        var $263=$obj; //@line 4312 "cPickle.c"
        HEAP[$262]=$263; //@line 4312 "cPickle.c"
        var $264=($261) + 1; //@line 4312 "cPickle.c"
        var $265=$259+8; //@line 4312 "cPickle.c"
        HEAP[$265]=$264; //@line 4312 "cPickle.c"
        $0=0; //@line 4313 "cPickle.c"
        __label__ = 42; break; //@line 4313 "cPickle.c"
      case 42: // $bb43
        var $266=$0; //@line 4261 "cPickle.c"
        $retval=$266; //@line 4261 "cPickle.c"
        var $retval44=$retval; //@line 4261 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval44; //@line 4261 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_put($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_str;
        var $value;
        var $len;
        var $l;
        var $s=__stackBase__;
        $self_addr=$self;
        $py_str=0; //@line 4319 "cPickle.c"
        $value=0; //@line 4319 "cPickle.c"
        var $1=$self_addr; //@line 4323 "cPickle.c"
        var $2=$1+64; //@line 4323 "cPickle.c"
        var $3=HEAP[$2]; //@line 4323 "cPickle.c"
        var $4=$self_addr; //@line 4323 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 4323 "cPickle.c"
        $l=$5; //@line 4323 "cPickle.c"
        var $6=$l; //@line 4323 "cPickle.c"
        var $7=($6) < 0; //@line 4323 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4323 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 4323 "cPickle.c"
        __label__ = 11; break; //@line 4323 "cPickle.c"
      case 2: // $bb1
        var $8=$l; //@line 4324 "cPickle.c"
        var $9=($8) <= 1; //@line 4324 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4324 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 4324 "cPickle.c"
        $0=$10; //@line 4324 "cPickle.c"
        __label__ = 11; break; //@line 4324 "cPickle.c"
      case 4: // $bb3
        var $11=$self_addr; //@line 4325 "cPickle.c"
        var $12=$11+32; //@line 4325 "cPickle.c"
        var $13=HEAP[$12]; //@line 4325 "cPickle.c"
        var $14=$13+8; //@line 4325 "cPickle.c"
        var $15=HEAP[$14]; //@line 4325 "cPickle.c"
        $len=$15; //@line 4325 "cPickle.c"
        var $16=$len; //@line 4325 "cPickle.c"
        var $17=($16)==0; //@line 4325 "cPickle.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4325 "cPickle.c"
      case 5: // $bb4
        var $18=_stackUnderflow(); //@line 4325 "cPickle.c"
        $0=$18; //@line 4325 "cPickle.c"
        __label__ = 11; break; //@line 4325 "cPickle.c"
      case 6: // $bb5
        var $19=$l; //@line 4326 "cPickle.c"
        var $20=($19) - 1; //@line 4326 "cPickle.c"
        var $21=HEAP[$s]; //@line 4326 "cPickle.c"
        var $22=_PyString_FromStringAndSize($21, $20); //@line 4326 "cPickle.c"
        $py_str=$22; //@line 4326 "cPickle.c"
        var $23=$py_str; //@line 4326 "cPickle.c"
        var $24=($23)==0; //@line 4326 "cPickle.c"
        if ($24) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4326 "cPickle.c"
      case 7: // $bb6
        $0=-1; //@line 4326 "cPickle.c"
        __label__ = 11; break; //@line 4326 "cPickle.c"
      case 8: // $bb7
        var $25=$self_addr; //@line 4327 "cPickle.c"
        var $26=$25+32; //@line 4327 "cPickle.c"
        var $27=HEAP[$26]; //@line 4327 "cPickle.c"
        var $28=$27+16; //@line 4327 "cPickle.c"
        var $29=HEAP[$28]; //@line 4327 "cPickle.c"
        var $30=$len; //@line 4327 "cPickle.c"
        var $31=($30) - 1; //@line 4327 "cPickle.c"
        var $32=$29+4*$31; //@line 4327 "cPickle.c"
        var $33=HEAP[$32]; //@line 4327 "cPickle.c"
        $value=$33; //@line 4327 "cPickle.c"
        var $34=$self_addr; //@line 4328 "cPickle.c"
        var $35=$34+24; //@line 4328 "cPickle.c"
        var $36=HEAP[$35]; //@line 4328 "cPickle.c"
        var $37=$py_str; //@line 4328 "cPickle.c"
        var $38=$value; //@line 4328 "cPickle.c"
        var $39=_PyDict_SetItem($36, $37, $38); //@line 4328 "cPickle.c"
        $l=$39; //@line 4328 "cPickle.c"
        var $40=$py_str; //@line 4329 "cPickle.c"
        var $41=$40; //@line 4329 "cPickle.c"
        var $42=HEAP[$41]; //@line 4329 "cPickle.c"
        var $43=($42) - 1; //@line 4329 "cPickle.c"
        var $44=$py_str; //@line 4329 "cPickle.c"
        var $45=$44; //@line 4329 "cPickle.c"
        HEAP[$45]=$43; //@line 4329 "cPickle.c"
        var $46=$py_str; //@line 4329 "cPickle.c"
        var $47=$46; //@line 4329 "cPickle.c"
        var $48=HEAP[$47]; //@line 4329 "cPickle.c"
        var $49=($48)==0; //@line 4329 "cPickle.c"
        if ($49) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4329 "cPickle.c"
      case 9: // $bb8
        var $50=$py_str; //@line 4329 "cPickle.c"
        var $51=$50+4; //@line 4329 "cPickle.c"
        var $52=HEAP[$51]; //@line 4329 "cPickle.c"
        var $53=$52+24; //@line 4329 "cPickle.c"
        var $54=HEAP[$53]; //@line 4329 "cPickle.c"
        var $55=$py_str; //@line 4329 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 4329 "cPickle.c"
        __label__ = 10; break; //@line 4329 "cPickle.c"
      case 10: // $bb9
        var $56=$l; //@line 4330 "cPickle.c"
        $0=$56; //@line 4330 "cPickle.c"
        __label__ = 11; break; //@line 4330 "cPickle.c"
      case 11: // $bb10
        var $57=$0; //@line 4323 "cPickle.c"
        $retval=$57; //@line 4323 "cPickle.c"
        var $retval11=$retval; //@line 4323 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 4323 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binput($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_key;
        var $value;
        var $key;
        var $s=__stackBase__;
        var $len;
        $self_addr=$self;
        $py_key=0; //@line 4337 "cPickle.c"
        $value=0; //@line 4337 "cPickle.c"
        var $1=$self_addr; //@line 4342 "cPickle.c"
        var $2=$1+60; //@line 4342 "cPickle.c"
        var $3=HEAP[$2]; //@line 4342 "cPickle.c"
        var $4=$self_addr; //@line 4342 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 1); //@line 4342 "cPickle.c"
        var $6=($5) < 0; //@line 4342 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4342 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 4342 "cPickle.c"
        __label__ = 9; break; //@line 4342 "cPickle.c"
      case 2: // $bb1
        var $7=$self_addr; //@line 4343 "cPickle.c"
        var $8=$7+32; //@line 4343 "cPickle.c"
        var $9=HEAP[$8]; //@line 4343 "cPickle.c"
        var $10=$9+8; //@line 4343 "cPickle.c"
        var $11=HEAP[$10]; //@line 4343 "cPickle.c"
        $len=$11; //@line 4343 "cPickle.c"
        var $12=$len; //@line 4343 "cPickle.c"
        var $13=($12) <= 0; //@line 4343 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4343 "cPickle.c"
      case 3: // $bb2
        var $14=_stackUnderflow(); //@line 4343 "cPickle.c"
        $0=$14; //@line 4343 "cPickle.c"
        __label__ = 9; break; //@line 4343 "cPickle.c"
      case 4: // $bb3
        var $15=HEAP[$s]; //@line 4345 "cPickle.c"
        var $16=$15; //@line 4345 "cPickle.c"
        var $17=HEAP[$16]; //@line 4345 "cPickle.c"
        $key=$17; //@line 4345 "cPickle.c"
        var $18=$key; //@line 4347 "cPickle.c"
        var $19=($18); //@line 4347 "cPickle.c"
        var $20=_PyInt_FromLong($19); //@line 4347 "cPickle.c"
        $py_key=$20; //@line 4347 "cPickle.c"
        var $21=$py_key; //@line 4347 "cPickle.c"
        var $22=($21)==0; //@line 4347 "cPickle.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4347 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 4347 "cPickle.c"
        __label__ = 9; break; //@line 4347 "cPickle.c"
      case 6: // $bb5
        var $23=$self_addr; //@line 4348 "cPickle.c"
        var $24=$23+32; //@line 4348 "cPickle.c"
        var $25=HEAP[$24]; //@line 4348 "cPickle.c"
        var $26=$25+16; //@line 4348 "cPickle.c"
        var $27=HEAP[$26]; //@line 4348 "cPickle.c"
        var $28=$len; //@line 4348 "cPickle.c"
        var $29=($28) - 1; //@line 4348 "cPickle.c"
        var $30=$27+4*$29; //@line 4348 "cPickle.c"
        var $31=HEAP[$30]; //@line 4348 "cPickle.c"
        $value=$31; //@line 4348 "cPickle.c"
        var $32=$self_addr; //@line 4349 "cPickle.c"
        var $33=$32+24; //@line 4349 "cPickle.c"
        var $34=HEAP[$33]; //@line 4349 "cPickle.c"
        var $35=$py_key; //@line 4349 "cPickle.c"
        var $36=$value; //@line 4349 "cPickle.c"
        var $37=_PyDict_SetItem($34, $35, $36); //@line 4349 "cPickle.c"
        $len=$37; //@line 4349 "cPickle.c"
        var $38=$py_key; //@line 4350 "cPickle.c"
        var $39=$38; //@line 4350 "cPickle.c"
        var $40=HEAP[$39]; //@line 4350 "cPickle.c"
        var $41=($40) - 1; //@line 4350 "cPickle.c"
        var $42=$py_key; //@line 4350 "cPickle.c"
        var $43=$42; //@line 4350 "cPickle.c"
        HEAP[$43]=$41; //@line 4350 "cPickle.c"
        var $44=$py_key; //@line 4350 "cPickle.c"
        var $45=$44; //@line 4350 "cPickle.c"
        var $46=HEAP[$45]; //@line 4350 "cPickle.c"
        var $47=($46)==0; //@line 4350 "cPickle.c"
        if ($47) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4350 "cPickle.c"
      case 7: // $bb6
        var $48=$py_key; //@line 4350 "cPickle.c"
        var $49=$48+4; //@line 4350 "cPickle.c"
        var $50=HEAP[$49]; //@line 4350 "cPickle.c"
        var $51=$50+24; //@line 4350 "cPickle.c"
        var $52=HEAP[$51]; //@line 4350 "cPickle.c"
        var $53=$py_key; //@line 4350 "cPickle.c"
        FUNCTION_TABLE[$52]($53); //@line 4350 "cPickle.c"
        __label__ = 8; break; //@line 4350 "cPickle.c"
      case 8: // $bb7
        var $54=$len; //@line 4351 "cPickle.c"
        $0=$54; //@line 4351 "cPickle.c"
        __label__ = 9; break; //@line 4351 "cPickle.c"
      case 9: // $bb8
        var $55=$0; //@line 4342 "cPickle.c"
        $retval=$55; //@line 4342 "cPickle.c"
        var $retval9=$retval; //@line 4342 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 4342 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_long_binput($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_key;
        var $value;
        var $key;
        var $c;
        var $s=__stackBase__;
        var $len;
        $self_addr=$self;
        $py_key=0; //@line 4358 "cPickle.c"
        $value=0; //@line 4358 "cPickle.c"
        var $1=$self_addr; //@line 4364 "cPickle.c"
        var $2=$1+60; //@line 4364 "cPickle.c"
        var $3=HEAP[$2]; //@line 4364 "cPickle.c"
        var $4=$self_addr; //@line 4364 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 4); //@line 4364 "cPickle.c"
        var $6=($5) < 0; //@line 4364 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4364 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 4364 "cPickle.c"
        __label__ = 9; break; //@line 4364 "cPickle.c"
      case 2: // $bb1
        var $7=$self_addr; //@line 4365 "cPickle.c"
        var $8=$7+32; //@line 4365 "cPickle.c"
        var $9=HEAP[$8]; //@line 4365 "cPickle.c"
        var $10=$9+8; //@line 4365 "cPickle.c"
        var $11=HEAP[$10]; //@line 4365 "cPickle.c"
        $len=$11; //@line 4365 "cPickle.c"
        var $12=$len; //@line 4365 "cPickle.c"
        var $13=($12)==0; //@line 4365 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4365 "cPickle.c"
      case 3: // $bb2
        var $14=_stackUnderflow(); //@line 4365 "cPickle.c"
        $0=$14; //@line 4365 "cPickle.c"
        __label__ = 9; break; //@line 4365 "cPickle.c"
      case 4: // $bb3
        var $15=HEAP[$s]; //@line 4367 "cPickle.c"
        var $16=$15; //@line 4367 "cPickle.c"
        var $17=HEAP[$16]; //@line 4367 "cPickle.c"
        $c=$17; //@line 4367 "cPickle.c"
        var $18=$c; //@line 4368 "cPickle.c"
        var $19=($18); //@line 4368 "cPickle.c"
        $key=$19; //@line 4368 "cPickle.c"
        var $20=HEAP[$s]; //@line 4369 "cPickle.c"
        var $21=$20+1; //@line 4369 "cPickle.c"
        var $22=HEAP[$21]; //@line 4369 "cPickle.c"
        $c=$22; //@line 4369 "cPickle.c"
        var $23=$c; //@line 4370 "cPickle.c"
        var $24=($23); //@line 4370 "cPickle.c"
        var $25=($24) << 8; //@line 4370 "cPickle.c"
        var $26=$key; //@line 4370 "cPickle.c"
        var $27=($25) | ($26); //@line 4370 "cPickle.c"
        $key=$27; //@line 4370 "cPickle.c"
        var $28=HEAP[$s]; //@line 4371 "cPickle.c"
        var $29=$28+2; //@line 4371 "cPickle.c"
        var $30=HEAP[$29]; //@line 4371 "cPickle.c"
        $c=$30; //@line 4371 "cPickle.c"
        var $31=$c; //@line 4372 "cPickle.c"
        var $32=($31); //@line 4372 "cPickle.c"
        var $33=($32) << 16; //@line 4372 "cPickle.c"
        var $34=$key; //@line 4372 "cPickle.c"
        var $35=($33) | ($34); //@line 4372 "cPickle.c"
        $key=$35; //@line 4372 "cPickle.c"
        var $36=HEAP[$s]; //@line 4373 "cPickle.c"
        var $37=$36+3; //@line 4373 "cPickle.c"
        var $38=HEAP[$37]; //@line 4373 "cPickle.c"
        $c=$38; //@line 4373 "cPickle.c"
        var $39=$c; //@line 4374 "cPickle.c"
        var $40=($39); //@line 4374 "cPickle.c"
        var $41=($40) << 24; //@line 4374 "cPickle.c"
        var $42=$key; //@line 4374 "cPickle.c"
        var $43=($41) | ($42); //@line 4374 "cPickle.c"
        $key=$43; //@line 4374 "cPickle.c"
        var $44=$key; //@line 4376 "cPickle.c"
        var $45=_PyInt_FromLong($44); //@line 4376 "cPickle.c"
        $py_key=$45; //@line 4376 "cPickle.c"
        var $46=$py_key; //@line 4376 "cPickle.c"
        var $47=($46)==0; //@line 4376 "cPickle.c"
        if ($47) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4376 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 4376 "cPickle.c"
        __label__ = 9; break; //@line 4376 "cPickle.c"
      case 6: // $bb5
        var $48=$self_addr; //@line 4377 "cPickle.c"
        var $49=$48+32; //@line 4377 "cPickle.c"
        var $50=HEAP[$49]; //@line 4377 "cPickle.c"
        var $51=$50+16; //@line 4377 "cPickle.c"
        var $52=HEAP[$51]; //@line 4377 "cPickle.c"
        var $53=$len; //@line 4377 "cPickle.c"
        var $54=($53) - 1; //@line 4377 "cPickle.c"
        var $55=$52+4*$54; //@line 4377 "cPickle.c"
        var $56=HEAP[$55]; //@line 4377 "cPickle.c"
        $value=$56; //@line 4377 "cPickle.c"
        var $57=$self_addr; //@line 4378 "cPickle.c"
        var $58=$57+24; //@line 4378 "cPickle.c"
        var $59=HEAP[$58]; //@line 4378 "cPickle.c"
        var $60=$py_key; //@line 4378 "cPickle.c"
        var $61=$value; //@line 4378 "cPickle.c"
        var $62=_PyDict_SetItem($59, $60, $61); //@line 4378 "cPickle.c"
        $len=$62; //@line 4378 "cPickle.c"
        var $63=$py_key; //@line 4379 "cPickle.c"
        var $64=$63; //@line 4379 "cPickle.c"
        var $65=HEAP[$64]; //@line 4379 "cPickle.c"
        var $66=($65) - 1; //@line 4379 "cPickle.c"
        var $67=$py_key; //@line 4379 "cPickle.c"
        var $68=$67; //@line 4379 "cPickle.c"
        HEAP[$68]=$66; //@line 4379 "cPickle.c"
        var $69=$py_key; //@line 4379 "cPickle.c"
        var $70=$69; //@line 4379 "cPickle.c"
        var $71=HEAP[$70]; //@line 4379 "cPickle.c"
        var $72=($71)==0; //@line 4379 "cPickle.c"
        if ($72) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4379 "cPickle.c"
      case 7: // $bb6
        var $73=$py_key; //@line 4379 "cPickle.c"
        var $74=$73+4; //@line 4379 "cPickle.c"
        var $75=HEAP[$74]; //@line 4379 "cPickle.c"
        var $76=$75+24; //@line 4379 "cPickle.c"
        var $77=HEAP[$76]; //@line 4379 "cPickle.c"
        var $78=$py_key; //@line 4379 "cPickle.c"
        FUNCTION_TABLE[$77]($78); //@line 4379 "cPickle.c"
        __label__ = 8; break; //@line 4379 "cPickle.c"
      case 8: // $bb7
        var $79=$len; //@line 4380 "cPickle.c"
        $0=$79; //@line 4380 "cPickle.c"
        __label__ = 9; break; //@line 4380 "cPickle.c"
      case 9: // $bb8
        var $80=$0; //@line 4364 "cPickle.c"
        $retval=$80; //@line 4364 "cPickle.c"
        var $retval9=$retval; //@line 4364 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 4364 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _do_append($self, $x) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $x_addr;
        var $retval;
        var $0;
        var $value;
        var $list;
        var $append_method;
        var $len;
        var $i;
        var $slice;
        var $list_len;
        var $junk;
        $self_addr=$self;
        $x_addr=$x;
        $value=0; //@line 4387 "cPickle.c"
        $list=0; //@line 4387 "cPickle.c"
        $append_method=0; //@line 4387 "cPickle.c"
        var $1=$self_addr; //@line 4390 "cPickle.c"
        var $2=$1+32; //@line 4390 "cPickle.c"
        var $3=HEAP[$2]; //@line 4390 "cPickle.c"
        var $4=$3+8; //@line 4390 "cPickle.c"
        var $5=HEAP[$4]; //@line 4390 "cPickle.c"
        $len=$5; //@line 4390 "cPickle.c"
        var $6=$len; //@line 4391 "cPickle.c"
        var $7=$x_addr; //@line 4391 "cPickle.c"
        var $8=($6) < ($7); //@line 4391 "cPickle.c"
        var $9=$x_addr; //@line 4391 "cPickle.c"
        var $10=($9) <= 0; //@line 4391 "cPickle.c"
        var $or_cond=($8) | ($10);
        if ($or_cond) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4391 "cPickle.c"
      case 1: // $bb1
        var $11=_stackUnderflow(); //@line 4391 "cPickle.c"
        $0=$11; //@line 4391 "cPickle.c"
        __label__ = 37; break; //@line 4391 "cPickle.c"
      case 2: // $bb2
        var $12=$len; //@line 4393 "cPickle.c"
        var $13=$x_addr; //@line 4393 "cPickle.c"
        var $14=($12)==($13); //@line 4393 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4393 "cPickle.c"
      case 3: // $bb3
        $0=0; //@line 4393 "cPickle.c"
        __label__ = 37; break; //@line 4393 "cPickle.c"
      case 4: // $bb4
        var $15=$self_addr; //@line 4395 "cPickle.c"
        var $16=$15+32; //@line 4395 "cPickle.c"
        var $17=HEAP[$16]; //@line 4395 "cPickle.c"
        var $18=$17+16; //@line 4395 "cPickle.c"
        var $19=HEAP[$18]; //@line 4395 "cPickle.c"
        var $20=$x_addr; //@line 4395 "cPickle.c"
        var $21=($20) - 1; //@line 4395 "cPickle.c"
        var $22=$19+4*$21; //@line 4395 "cPickle.c"
        var $23=HEAP[$22]; //@line 4395 "cPickle.c"
        $list=$23; //@line 4395 "cPickle.c"
        var $24=$list; //@line 4397 "cPickle.c"
        var $25=$24+4; //@line 4397 "cPickle.c"
        var $26=HEAP[$25]; //@line 4397 "cPickle.c"
        var $27=$26+84; //@line 4397 "cPickle.c"
        var $28=HEAP[$27]; //@line 4397 "cPickle.c"
        var $29=($28) & 33554432; //@line 4397 "cPickle.c"
        var $30=($29)!=0; //@line 4397 "cPickle.c"
        if ($30) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 4397 "cPickle.c"
      case 5: // $bb5
        var $31=$self_addr; //@line 4401 "cPickle.c"
        var $32=$31+32; //@line 4401 "cPickle.c"
        var $33=HEAP[$32]; //@line 4401 "cPickle.c"
        var $34=$x_addr; //@line 4401 "cPickle.c"
        var $35=_Pdata_popList($33, $34); //@line 4401 "cPickle.c"
        $slice=$35; //@line 4401 "cPickle.c"
        var $36=$slice; //@line 4402 "cPickle.c"
        var $37=($36)==0; //@line 4402 "cPickle.c"
        if ($37) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4402 "cPickle.c"
      case 6: // $bb6
        $0=-1; //@line 4402 "cPickle.c"
        __label__ = 37; break; //@line 4402 "cPickle.c"
      case 7: // $bb7
        var $38=$list; //@line 4403 "cPickle.c"
        var $39=$38; //@line 4403 "cPickle.c"
        var $40=$39+8; //@line 4403 "cPickle.c"
        var $41=HEAP[$40]; //@line 4403 "cPickle.c"
        $list_len=$41; //@line 4403 "cPickle.c"
        var $42=$list; //@line 4404 "cPickle.c"
        var $43=$list_len; //@line 4404 "cPickle.c"
        var $44=$list_len; //@line 4404 "cPickle.c"
        var $45=$slice; //@line 4404 "cPickle.c"
        var $46=_PyList_SetSlice($42, $43, $44, $45); //@line 4404 "cPickle.c"
        $i=$46; //@line 4404 "cPickle.c"
        var $47=$slice; //@line 4405 "cPickle.c"
        var $48=$47; //@line 4405 "cPickle.c"
        var $49=HEAP[$48]; //@line 4405 "cPickle.c"
        var $50=($49) - 1; //@line 4405 "cPickle.c"
        var $51=$slice; //@line 4405 "cPickle.c"
        var $52=$51; //@line 4405 "cPickle.c"
        HEAP[$52]=$50; //@line 4405 "cPickle.c"
        var $53=$slice; //@line 4405 "cPickle.c"
        var $54=$53; //@line 4405 "cPickle.c"
        var $55=HEAP[$54]; //@line 4405 "cPickle.c"
        var $56=($55)==0; //@line 4405 "cPickle.c"
        if ($56) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4405 "cPickle.c"
      case 8: // $bb8
        var $57=$slice; //@line 4405 "cPickle.c"
        var $58=$57+4; //@line 4405 "cPickle.c"
        var $59=HEAP[$58]; //@line 4405 "cPickle.c"
        var $60=$59+24; //@line 4405 "cPickle.c"
        var $61=HEAP[$60]; //@line 4405 "cPickle.c"
        var $62=$slice; //@line 4405 "cPickle.c"
        FUNCTION_TABLE[$61]($62); //@line 4405 "cPickle.c"
        __label__ = 9; break; //@line 4405 "cPickle.c"
      case 9: // $bb9
        var $63=$i; //@line 4406 "cPickle.c"
        $0=$63; //@line 4406 "cPickle.c"
        __label__ = 37; break; //@line 4406 "cPickle.c"
      case 10: // $bb10
        var $64=HEAP[_append_str]; //@line 4410 "cPickle.c"
        var $65=$list; //@line 4410 "cPickle.c"
        var $66=_PyObject_GetAttr($65, $64); //@line 4410 "cPickle.c"
        $append_method=$66; //@line 4410 "cPickle.c"
        var $67=$append_method; //@line 4410 "cPickle.c"
        var $68=($67)==0; //@line 4410 "cPickle.c"
        if ($68) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4410 "cPickle.c"
      case 11: // $bb11
        $0=-1; //@line 4411 "cPickle.c"
        __label__ = 37; break; //@line 4411 "cPickle.c"
      case 12: // $bb12
        var $69=$x_addr; //@line 4413 "cPickle.c"
        $i=$69; //@line 4413 "cPickle.c"
        __label__ = 33; break; //@line 4413 "cPickle.c"
      case 13: // $bb13
        var $70=$238+16; //@line 4416 "cPickle.c"
        var $71=HEAP[$70]; //@line 4416 "cPickle.c"
        var $72=$i; //@line 4416 "cPickle.c"
        var $73=$71+4*$72; //@line 4416 "cPickle.c"
        var $74=HEAP[$73]; //@line 4416 "cPickle.c"
        $value=$74; //@line 4416 "cPickle.c"
        $junk=0; //@line 4417 "cPickle.c"
        var $75=$self_addr; //@line 4418 "cPickle.c"
        var $76=$75+28; //@line 4418 "cPickle.c"
        var $77=HEAP[$76]; //@line 4418 "cPickle.c"
        var $78=($77)!=0; //@line 4418 "cPickle.c"
        if ($78) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 4418 "cPickle.c"
      case 14: // $bb14
        var $79=_PyTuple_New(1); //@line 4418 "cPickle.c"
        var $80=$self_addr; //@line 4418 "cPickle.c"
        var $81=$80+28; //@line 4418 "cPickle.c"
        HEAP[$81]=$79; //@line 4418 "cPickle.c"
        var $82=$self_addr; //@line 4418 "cPickle.c"
        var $83=$82+28; //@line 4418 "cPickle.c"
        var $84=HEAP[$83]; //@line 4418 "cPickle.c"
        var $85=($84)!=0; //@line 4418 "cPickle.c"
        if ($85) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 4418 "cPickle.c"
      case 15: // $bb15
        var $86=$self_addr; //@line 4418 "cPickle.c"
        var $87=$86+28; //@line 4418 "cPickle.c"
        var $88=HEAP[$87]; //@line 4418 "cPickle.c"
        var $89=$88; //@line 4418 "cPickle.c"
        var $90=$89+12; //@line 4418 "cPickle.c"
        var $91=$90; //@line 4418 "cPickle.c"
        var $92=HEAP[$91]; //@line 4418 "cPickle.c"
        var $93=($92)!=0; //@line 4418 "cPickle.c"
        if ($93) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 4418 "cPickle.c"
      case 16: // $bb16
        var $94=$self_addr; //@line 4418 "cPickle.c"
        var $95=$94+28; //@line 4418 "cPickle.c"
        var $96=HEAP[$95]; //@line 4418 "cPickle.c"
        var $97=$96; //@line 4418 "cPickle.c"
        var $98=$97+12; //@line 4418 "cPickle.c"
        var $99=$98; //@line 4418 "cPickle.c"
        var $100=HEAP[$99]; //@line 4418 "cPickle.c"
        var $101=$100; //@line 4418 "cPickle.c"
        var $102=HEAP[$101]; //@line 4418 "cPickle.c"
        var $103=($102) - 1; //@line 4418 "cPickle.c"
        var $104=$100; //@line 4418 "cPickle.c"
        HEAP[$104]=$103; //@line 4418 "cPickle.c"
        var $105=$100; //@line 4418 "cPickle.c"
        var $106=HEAP[$105]; //@line 4418 "cPickle.c"
        var $107=($106)==0; //@line 4418 "cPickle.c"
        if ($107) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4418 "cPickle.c"
      case 17: // $bb17
        var $108=$self_addr; //@line 4418 "cPickle.c"
        var $109=$108+28; //@line 4418 "cPickle.c"
        var $110=HEAP[$109]; //@line 4418 "cPickle.c"
        var $111=$110; //@line 4418 "cPickle.c"
        var $112=$111+12; //@line 4418 "cPickle.c"
        var $113=$112; //@line 4418 "cPickle.c"
        var $114=HEAP[$113]; //@line 4418 "cPickle.c"
        var $115=$114+4; //@line 4418 "cPickle.c"
        var $116=HEAP[$115]; //@line 4418 "cPickle.c"
        var $117=$116+24; //@line 4418 "cPickle.c"
        var $118=HEAP[$117]; //@line 4418 "cPickle.c"
        var $119=$self_addr; //@line 4418 "cPickle.c"
        var $120=$119+28; //@line 4418 "cPickle.c"
        var $121=HEAP[$120]; //@line 4418 "cPickle.c"
        var $122=$121; //@line 4418 "cPickle.c"
        var $123=$122+12; //@line 4418 "cPickle.c"
        var $124=$123; //@line 4418 "cPickle.c"
        var $125=HEAP[$124]; //@line 4418 "cPickle.c"
        FUNCTION_TABLE[$118]($125); //@line 4418 "cPickle.c"
        __label__ = 18; break; //@line 4418 "cPickle.c"
      case 18: // $bb18
        var $126=$self_addr; //@line 4418 "cPickle.c"
        var $127=$126+28; //@line 4418 "cPickle.c"
        var $128=HEAP[$127]; //@line 4418 "cPickle.c"
        var $129=$128; //@line 4418 "cPickle.c"
        var $130=$129+12; //@line 4418 "cPickle.c"
        var $131=$130; //@line 4418 "cPickle.c"
        var $132=$value; //@line 4418 "cPickle.c"
        HEAP[$131]=$132; //@line 4418 "cPickle.c"
        __label__ = 21; break; //@line 4418 "cPickle.c"
      case 19: // $bb19
        var $133=$value; //@line 4418 "cPickle.c"
        var $134=$133; //@line 4418 "cPickle.c"
        var $135=HEAP[$134]; //@line 4418 "cPickle.c"
        var $136=($135) - 1; //@line 4418 "cPickle.c"
        var $137=$value; //@line 4418 "cPickle.c"
        var $138=$137; //@line 4418 "cPickle.c"
        HEAP[$138]=$136; //@line 4418 "cPickle.c"
        var $139=$value; //@line 4418 "cPickle.c"
        var $140=$139; //@line 4418 "cPickle.c"
        var $141=HEAP[$140]; //@line 4418 "cPickle.c"
        var $142=($141)==0; //@line 4418 "cPickle.c"
        if ($142) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4418 "cPickle.c"
      case 20: // $bb20
        var $143=$value; //@line 4418 "cPickle.c"
        var $144=$143+4; //@line 4418 "cPickle.c"
        var $145=HEAP[$144]; //@line 4418 "cPickle.c"
        var $146=$145+24; //@line 4418 "cPickle.c"
        var $147=HEAP[$146]; //@line 4418 "cPickle.c"
        var $148=$value; //@line 4418 "cPickle.c"
        FUNCTION_TABLE[$147]($148); //@line 4418 "cPickle.c"
        __label__ = 21; break; //@line 4418 "cPickle.c"
      case 21: // $bb21
        var $149=$self_addr; //@line 4419 "cPickle.c"
        var $150=$149+28; //@line 4419 "cPickle.c"
        var $151=HEAP[$150]; //@line 4419 "cPickle.c"
        var $152=($151)!=0; //@line 4419 "cPickle.c"
        if ($152) { __label__ = 22; break; } else { __label__ = 26; break; } //@line 4419 "cPickle.c"
      case 22: // $bb22
        var $153=$self_addr; //@line 4420 "cPickle.c"
        var $154=$153+28; //@line 4420 "cPickle.c"
        var $155=HEAP[$154]; //@line 4420 "cPickle.c"
        var $156=$append_method; //@line 4420 "cPickle.c"
        var $157=_PyObject_Call($156, $155, 0); //@line 4420 "cPickle.c"
        $junk=$157; //@line 4420 "cPickle.c"
        var $158=$self_addr; //@line 4422 "cPickle.c"
        var $159=$158+28; //@line 4422 "cPickle.c"
        var $160=HEAP[$159]; //@line 4422 "cPickle.c"
        var $161=$160; //@line 4422 "cPickle.c"
        var $162=HEAP[$161]; //@line 4422 "cPickle.c"
        var $163=($162) > 1; //@line 4422 "cPickle.c"
        if ($163) { __label__ = 23; break; } else { __label__ = 26; break; } //@line 4422 "cPickle.c"
      case 23: // $bb23
        var $164=$self_addr; //@line 4422 "cPickle.c"
        var $165=$164+28; //@line 4422 "cPickle.c"
        var $166=HEAP[$165]; //@line 4422 "cPickle.c"
        var $167=$166; //@line 4422 "cPickle.c"
        var $168=HEAP[$167]; //@line 4422 "cPickle.c"
        var $169=($168) - 1; //@line 4422 "cPickle.c"
        var $170=$166; //@line 4422 "cPickle.c"
        HEAP[$170]=$169; //@line 4422 "cPickle.c"
        var $171=$166; //@line 4422 "cPickle.c"
        var $172=HEAP[$171]; //@line 4422 "cPickle.c"
        var $173=($172)==0; //@line 4422 "cPickle.c"
        if ($173) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4422 "cPickle.c"
      case 24: // $bb24
        var $174=$self_addr; //@line 4422 "cPickle.c"
        var $175=$174+28; //@line 4422 "cPickle.c"
        var $176=HEAP[$175]; //@line 4422 "cPickle.c"
        var $177=$176+4; //@line 4422 "cPickle.c"
        var $178=HEAP[$177]; //@line 4422 "cPickle.c"
        var $179=$178+24; //@line 4422 "cPickle.c"
        var $180=HEAP[$179]; //@line 4422 "cPickle.c"
        var $181=$self_addr; //@line 4422 "cPickle.c"
        var $182=$181+28; //@line 4422 "cPickle.c"
        var $183=HEAP[$182]; //@line 4422 "cPickle.c"
        FUNCTION_TABLE[$180]($183); //@line 4422 "cPickle.c"
        __label__ = 25; break; //@line 4422 "cPickle.c"
      case 25: // $bb25
        var $184=$self_addr; //@line 4422 "cPickle.c"
        var $185=$184+28; //@line 4422 "cPickle.c"
        HEAP[$185]=0; //@line 4422 "cPickle.c"
        __label__ = 26; break; //@line 4422 "cPickle.c"
      case 26: // $bb26
        var $186=$junk; //@line 4424 "cPickle.c"
        var $187=($186)==0; //@line 4424 "cPickle.c"
        if ($187) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 4424 "cPickle.c"
      case 27: // $bb27
        var $188=$i; //@line 4425 "cPickle.c"
        var $189=($188) + 1; //@line 4425 "cPickle.c"
        var $190=$self_addr; //@line 4425 "cPickle.c"
        var $191=$190+32; //@line 4425 "cPickle.c"
        var $192=HEAP[$191]; //@line 4425 "cPickle.c"
        var $193=_Pdata_clear($192, $189); //@line 4425 "cPickle.c"
        var $194=$self_addr; //@line 4426 "cPickle.c"
        var $195=$194+32; //@line 4426 "cPickle.c"
        var $196=HEAP[$195]; //@line 4426 "cPickle.c"
        var $197=$196+8; //@line 4426 "cPickle.c"
        var $198=$x_addr; //@line 4426 "cPickle.c"
        HEAP[$197]=$198; //@line 4426 "cPickle.c"
        var $199=$append_method; //@line 4427 "cPickle.c"
        var $200=$199; //@line 4427 "cPickle.c"
        var $201=HEAP[$200]; //@line 4427 "cPickle.c"
        var $202=($201) - 1; //@line 4427 "cPickle.c"
        var $203=$append_method; //@line 4427 "cPickle.c"
        var $204=$203; //@line 4427 "cPickle.c"
        HEAP[$204]=$202; //@line 4427 "cPickle.c"
        var $205=$append_method; //@line 4427 "cPickle.c"
        var $206=$205; //@line 4427 "cPickle.c"
        var $207=HEAP[$206]; //@line 4427 "cPickle.c"
        var $208=($207)==0; //@line 4427 "cPickle.c"
        if ($208) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 4427 "cPickle.c"
      case 28: // $bb28
        var $209=$append_method; //@line 4427 "cPickle.c"
        var $210=$209+4; //@line 4427 "cPickle.c"
        var $211=HEAP[$210]; //@line 4427 "cPickle.c"
        var $212=$211+24; //@line 4427 "cPickle.c"
        var $213=HEAP[$212]; //@line 4427 "cPickle.c"
        var $214=$append_method; //@line 4427 "cPickle.c"
        FUNCTION_TABLE[$213]($214); //@line 4427 "cPickle.c"
        __label__ = 29; break; //@line 4427 "cPickle.c"
      case 29: // $bb29
        $0=-1; //@line 4428 "cPickle.c"
        __label__ = 37; break; //@line 4428 "cPickle.c"
      case 30: // $bb30
        var $215=$junk; //@line 4430 "cPickle.c"
        var $216=$215; //@line 4430 "cPickle.c"
        var $217=HEAP[$216]; //@line 4430 "cPickle.c"
        var $218=($217) - 1; //@line 4430 "cPickle.c"
        var $219=$junk; //@line 4430 "cPickle.c"
        var $220=$219; //@line 4430 "cPickle.c"
        HEAP[$220]=$218; //@line 4430 "cPickle.c"
        var $221=$junk; //@line 4430 "cPickle.c"
        var $222=$221; //@line 4430 "cPickle.c"
        var $223=HEAP[$222]; //@line 4430 "cPickle.c"
        var $224=($223)==0; //@line 4430 "cPickle.c"
        if ($224) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4430 "cPickle.c"
      case 31: // $bb31
        var $225=$junk; //@line 4430 "cPickle.c"
        var $226=$225+4; //@line 4430 "cPickle.c"
        var $227=HEAP[$226]; //@line 4430 "cPickle.c"
        var $228=$227+24; //@line 4430 "cPickle.c"
        var $229=HEAP[$228]; //@line 4430 "cPickle.c"
        var $230=$junk; //@line 4430 "cPickle.c"
        FUNCTION_TABLE[$229]($230); //@line 4430 "cPickle.c"
        __label__ = 32; break; //@line 4430 "cPickle.c"
      case 32: // $bb32
        var $231=$i; //@line 4413 "cPickle.c"
        var $232=($231) + 1; //@line 4413 "cPickle.c"
        $i=$232; //@line 4413 "cPickle.c"
        __label__ = 33; break; //@line 4413 "cPickle.c"
      case 33: // $bb33
        var $233=$i; //@line 4413 "cPickle.c"
        var $234=$len; //@line 4413 "cPickle.c"
        var $235=($233) < ($234); //@line 4413 "cPickle.c"
        var $236=$self_addr; //@line 4416 "cPickle.c"
        var $237=$236+32; //@line 4416 "cPickle.c"
        var $238=HEAP[$237]; //@line 4416 "cPickle.c"
        if ($235) { __label__ = 13; break; } else { __label__ = 34; break; } //@line 4413 "cPickle.c"
      case 34: // $bb34
        var $239=$238+8; //@line 4432 "cPickle.c"
        var $240=$x_addr; //@line 4432 "cPickle.c"
        HEAP[$239]=$240; //@line 4432 "cPickle.c"
        var $241=$append_method; //@line 4433 "cPickle.c"
        var $242=$241; //@line 4433 "cPickle.c"
        var $243=HEAP[$242]; //@line 4433 "cPickle.c"
        var $244=($243) - 1; //@line 4433 "cPickle.c"
        var $245=$append_method; //@line 4433 "cPickle.c"
        var $246=$245; //@line 4433 "cPickle.c"
        HEAP[$246]=$244; //@line 4433 "cPickle.c"
        var $247=$append_method; //@line 4433 "cPickle.c"
        var $248=$247; //@line 4433 "cPickle.c"
        var $249=HEAP[$248]; //@line 4433 "cPickle.c"
        var $250=($249)==0; //@line 4433 "cPickle.c"
        if ($250) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 4433 "cPickle.c"
      case 35: // $bb35
        var $251=$append_method; //@line 4433 "cPickle.c"
        var $252=$251+4; //@line 4433 "cPickle.c"
        var $253=HEAP[$252]; //@line 4433 "cPickle.c"
        var $254=$253+24; //@line 4433 "cPickle.c"
        var $255=HEAP[$254]; //@line 4433 "cPickle.c"
        var $256=$append_method; //@line 4433 "cPickle.c"
        FUNCTION_TABLE[$255]($256); //@line 4433 "cPickle.c"
        __label__ = 36; break; //@line 4433 "cPickle.c"
      case 36: // $bb36
        $0=0; //@line 4436 "cPickle.c"
        __label__ = 37; break; //@line 4436 "cPickle.c"
      case 37: // $bb37
        var $257=$0; //@line 4391 "cPickle.c"
        $retval=$257; //@line 4391 "cPickle.c"
        var $retval38=$retval; //@line 4391 "cPickle.c"
        ;
        return $retval38; //@line 4391 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_append($self) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=$self_addr; //@line 4443 "cPickle.c"
    var $2=$1+32; //@line 4443 "cPickle.c"
    var $3=HEAP[$2]; //@line 4443 "cPickle.c"
    var $4=$3+8; //@line 4443 "cPickle.c"
    var $5=HEAP[$4]; //@line 4443 "cPickle.c"
    var $6=($5) - 1; //@line 4443 "cPickle.c"
    var $7=$self_addr; //@line 4443 "cPickle.c"
    var $8=_do_append($7, $6); //@line 4443 "cPickle.c"
    $0=$8; //@line 4443 "cPickle.c"
    var $9=$0; //@line 4443 "cPickle.c"
    $retval=$9; //@line 4443 "cPickle.c"
    var $retval1=$retval; //@line 4443 "cPickle.c"
    ;
    return $retval1; //@line 4443 "cPickle.c"
  }
  

  function _load_appends($self) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=$self_addr; //@line 4450 "cPickle.c"
    var $2=_marker($1); //@line 4450 "cPickle.c"
    var $3=$self_addr; //@line 4450 "cPickle.c"
    var $4=_do_append($3, $2); //@line 4450 "cPickle.c"
    $0=$4; //@line 4450 "cPickle.c"
    var $5=$0; //@line 4450 "cPickle.c"
    $retval=$5; //@line 4450 "cPickle.c"
    var $retval1=$retval; //@line 4450 "cPickle.c"
    ;
    return $retval1; //@line 4450 "cPickle.c"
  }
  

  function _do_setitems($self, $x) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $x_addr;
        var $retval;
        var $0;
        var $value;
        var $key;
        var $dict;
        var $len;
        var $i;
        var $r;
        $self_addr=$self;
        $x_addr=$x;
        $value=0; //@line 4457 "cPickle.c"
        $key=0; //@line 4457 "cPickle.c"
        $dict=0; //@line 4457 "cPickle.c"
        $r=0; //@line 4458 "cPickle.c"
        var $1=$self_addr; //@line 4460 "cPickle.c"
        var $2=$1+32; //@line 4460 "cPickle.c"
        var $3=HEAP[$2]; //@line 4460 "cPickle.c"
        var $4=$3+8; //@line 4460 "cPickle.c"
        var $5=HEAP[$4]; //@line 4460 "cPickle.c"
        $len=$5; //@line 4460 "cPickle.c"
        var $6=$len; //@line 4460 "cPickle.c"
        var $7=$x_addr; //@line 4460 "cPickle.c"
        var $8=($6) < ($7); //@line 4460 "cPickle.c"
        var $9=$x_addr; //@line 4460 "cPickle.c"
        var $10=($9) <= 0; //@line 4460 "cPickle.c"
        var $or_cond=($8) | ($10);
        if ($or_cond) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4460 "cPickle.c"
      case 1: // $bb1
        var $11=_stackUnderflow(); //@line 4461 "cPickle.c"
        $0=$11; //@line 4461 "cPickle.c"
        __label__ = 8; break; //@line 4461 "cPickle.c"
      case 2: // $bb2
        var $12=$self_addr; //@line 4463 "cPickle.c"
        var $13=$12+32; //@line 4463 "cPickle.c"
        var $14=HEAP[$13]; //@line 4463 "cPickle.c"
        var $15=$14+16; //@line 4463 "cPickle.c"
        var $16=HEAP[$15]; //@line 4463 "cPickle.c"
        var $17=$x_addr; //@line 4463 "cPickle.c"
        var $18=($17) - 1; //@line 4463 "cPickle.c"
        var $19=$16+4*$18; //@line 4463 "cPickle.c"
        var $20=HEAP[$19]; //@line 4463 "cPickle.c"
        $dict=$20; //@line 4463 "cPickle.c"
        var $21=$x_addr; //@line 4465 "cPickle.c"
        var $22=($21) + 1; //@line 4465 "cPickle.c"
        $i=$22; //@line 4465 "cPickle.c"
        __label__ = 6; break; //@line 4465 "cPickle.c"
      case 3: // $bb3
        var $23=$self_addr; //@line 4466 "cPickle.c"
        var $24=$23+32; //@line 4466 "cPickle.c"
        var $25=HEAP[$24]; //@line 4466 "cPickle.c"
        var $26=$25+16; //@line 4466 "cPickle.c"
        var $27=HEAP[$26]; //@line 4466 "cPickle.c"
        var $28=$i; //@line 4466 "cPickle.c"
        var $29=($28) - 1; //@line 4466 "cPickle.c"
        var $30=$27+4*$29; //@line 4466 "cPickle.c"
        var $31=HEAP[$30]; //@line 4466 "cPickle.c"
        $key=$31; //@line 4466 "cPickle.c"
        var $32=$self_addr; //@line 4467 "cPickle.c"
        var $33=$32+32; //@line 4467 "cPickle.c"
        var $34=HEAP[$33]; //@line 4467 "cPickle.c"
        var $35=$34+16; //@line 4467 "cPickle.c"
        var $36=HEAP[$35]; //@line 4467 "cPickle.c"
        var $37=$i; //@line 4467 "cPickle.c"
        var $38=$36+4*$37; //@line 4467 "cPickle.c"
        var $39=HEAP[$38]; //@line 4467 "cPickle.c"
        $value=$39; //@line 4467 "cPickle.c"
        var $40=$dict; //@line 4468 "cPickle.c"
        var $41=$key; //@line 4468 "cPickle.c"
        var $42=$value; //@line 4468 "cPickle.c"
        var $43=_PyObject_SetItem($40, $41, $42); //@line 4468 "cPickle.c"
        var $44=($43) < 0; //@line 4468 "cPickle.c"
        if ($44) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4468 "cPickle.c"
      case 4: // $bb4
        $r=-1; //@line 4469 "cPickle.c"
        __label__ = 7; break; //@line 4469 "cPickle.c"
      case 5: // $bb5
        var $45=$i; //@line 4465 "cPickle.c"
        var $46=($45) + 2; //@line 4465 "cPickle.c"
        $i=$46; //@line 4465 "cPickle.c"
        __label__ = 6; break; //@line 4465 "cPickle.c"
      case 6: // $bb6
        var $47=$i; //@line 4465 "cPickle.c"
        var $48=$len; //@line 4465 "cPickle.c"
        var $49=($47) < ($48); //@line 4465 "cPickle.c"
        if ($49) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 4465 "cPickle.c"
      case 7: // $bb7
        var $50=$self_addr; //@line 4474 "cPickle.c"
        var $51=$50+32; //@line 4474 "cPickle.c"
        var $52=HEAP[$51]; //@line 4474 "cPickle.c"
        var $53=$x_addr; //@line 4474 "cPickle.c"
        var $54=_Pdata_clear($52, $53); //@line 4474 "cPickle.c"
        var $55=$r; //@line 4476 "cPickle.c"
        $0=$55; //@line 4476 "cPickle.c"
        __label__ = 8; break; //@line 4476 "cPickle.c"
      case 8: // $bb8
        var $56=$0; //@line 4461 "cPickle.c"
        $retval=$56; //@line 4461 "cPickle.c"
        var $retval9=$retval; //@line 4461 "cPickle.c"
        ;
        return $retval9; //@line 4461 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_setitem($self) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=$self_addr; //@line 4483 "cPickle.c"
    var $2=$1+32; //@line 4483 "cPickle.c"
    var $3=HEAP[$2]; //@line 4483 "cPickle.c"
    var $4=$3+8; //@line 4483 "cPickle.c"
    var $5=HEAP[$4]; //@line 4483 "cPickle.c"
    var $6=($5) - 2; //@line 4483 "cPickle.c"
    var $7=$self_addr; //@line 4483 "cPickle.c"
    var $8=_do_setitems($7, $6); //@line 4483 "cPickle.c"
    $0=$8; //@line 4483 "cPickle.c"
    var $9=$0; //@line 4483 "cPickle.c"
    $retval=$9; //@line 4483 "cPickle.c"
    var $retval1=$retval; //@line 4483 "cPickle.c"
    ;
    return $retval1; //@line 4483 "cPickle.c"
  }
  

  function _load_setitems($self) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=$self_addr; //@line 4489 "cPickle.c"
    var $2=_marker($1); //@line 4489 "cPickle.c"
    var $3=$self_addr; //@line 4489 "cPickle.c"
    var $4=_do_setitems($3, $2); //@line 4489 "cPickle.c"
    $0=$4; //@line 4489 "cPickle.c"
    var $5=$0; //@line 4489 "cPickle.c"
    $retval=$5; //@line 4489 "cPickle.c"
    var $retval1=$retval; //@line 4489 "cPickle.c"
    ;
    return $retval1; //@line 4489 "cPickle.c"
  }
  

  function _load_build($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $state;
        var $inst;
        var $slotstate;
        var $__setstate__;
        var $d_key=__stackBase__;
        var $d_value=__stackBase__+4;
        var $i=__stackBase__+8;
        var $res;
        var $junk;
        var $temp;
        var $dict;
        $self_addr=$self;
        $res=-1; //@line 4500 "cPickle.c"
        var $1=$self_addr; //@line 4505 "cPickle.c"
        var $2=$1+32; //@line 4505 "cPickle.c"
        var $3=HEAP[$2]; //@line 4505 "cPickle.c"
        var $4=$3+8; //@line 4505 "cPickle.c"
        var $5=HEAP[$4]; //@line 4505 "cPickle.c"
        var $6=($5) <= 1; //@line 4505 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4505 "cPickle.c"
      case 1: // $bb
        var $7=_stackUnderflow(); //@line 4506 "cPickle.c"
        $0=$7; //@line 4506 "cPickle.c"
        __label__ = 62; break; //@line 4506 "cPickle.c"
      case 2: // $bb1
        var $8=$self_addr; //@line 4507 "cPickle.c"
        var $9=$8+32; //@line 4507 "cPickle.c"
        var $10=HEAP[$9]; //@line 4507 "cPickle.c"
        var $11=$10+8; //@line 4507 "cPickle.c"
        var $12=HEAP[$11]; //@line 4507 "cPickle.c"
        var $13=($12)!=0; //@line 4507 "cPickle.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 4507 "cPickle.c"
      case 3: // $bb4_thread
        var $14=HEAP[_UnpicklingError]; //@line 4507 "cPickle.c"
        _PyErr_SetString($14, __str88); //@line 4507 "cPickle.c"
        $state=0; //@line 4507 "cPickle.c"
        __label__ = 5; break;
      case 4: // $bb4
        var $15=$self_addr; //@line 4507 "cPickle.c"
        var $16=$15+32; //@line 4507 "cPickle.c"
        var $17=HEAP[$16]; //@line 4507 "cPickle.c"
        var $18=$17+16; //@line 4507 "cPickle.c"
        var $19=HEAP[$18]; //@line 4507 "cPickle.c"
        var $20=$self_addr; //@line 4507 "cPickle.c"
        var $21=$20+32; //@line 4507 "cPickle.c"
        var $22=HEAP[$21]; //@line 4507 "cPickle.c"
        var $23=$22+8; //@line 4507 "cPickle.c"
        var $24=HEAP[$23]; //@line 4507 "cPickle.c"
        var $25=($24) - 1; //@line 4507 "cPickle.c"
        var $26=$22+8; //@line 4507 "cPickle.c"
        HEAP[$26]=$25; //@line 4507 "cPickle.c"
        var $27=$22+8; //@line 4507 "cPickle.c"
        var $28=HEAP[$27]; //@line 4507 "cPickle.c"
        var $29=$19+4*$28; //@line 4507 "cPickle.c"
        var $30=HEAP[$29]; //@line 4507 "cPickle.c"
        $state=$30; //@line 4507 "cPickle.c"
        var $31=($30)==0; //@line 4508 "cPickle.c"
        if ($31) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4508 "cPickle.c"
      case 5: // $bb5
        $0=-1; //@line 4509 "cPickle.c"
        __label__ = 62; break; //@line 4509 "cPickle.c"
      case 6: // $bb6
        var $32=$self_addr; //@line 4510 "cPickle.c"
        var $33=$32+32; //@line 4510 "cPickle.c"
        var $34=HEAP[$33]; //@line 4510 "cPickle.c"
        var $35=$34+16; //@line 4510 "cPickle.c"
        var $36=HEAP[$35]; //@line 4510 "cPickle.c"
        var $37=$self_addr; //@line 4510 "cPickle.c"
        var $38=$37+32; //@line 4510 "cPickle.c"
        var $39=HEAP[$38]; //@line 4510 "cPickle.c"
        var $40=$39+8; //@line 4510 "cPickle.c"
        var $41=HEAP[$40]; //@line 4510 "cPickle.c"
        var $42=($41) - 1; //@line 4510 "cPickle.c"
        var $43=$36+4*$42; //@line 4510 "cPickle.c"
        var $44=HEAP[$43]; //@line 4510 "cPickle.c"
        $inst=$44; //@line 4510 "cPickle.c"
        var $45=HEAP[___setstate___str]; //@line 4512 "cPickle.c"
        var $46=$inst; //@line 4512 "cPickle.c"
        var $47=_PyObject_GetAttr($46, $45); //@line 4512 "cPickle.c"
        $__setstate__=$47; //@line 4512 "cPickle.c"
        var $48=$__setstate__; //@line 4513 "cPickle.c"
        var $49=($48)!=0; //@line 4513 "cPickle.c"
        if ($49) { __label__ = 7; break; } else { __label__ = 27; break; } //@line 4513 "cPickle.c"
      case 7: // $bb7
        $junk=0; //@line 4514 "cPickle.c"
        var $50=$self_addr; //@line 4517 "cPickle.c"
        var $51=$50+28; //@line 4517 "cPickle.c"
        var $52=HEAP[$51]; //@line 4517 "cPickle.c"
        var $53=($52)!=0; //@line 4517 "cPickle.c"
        if ($53) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 4517 "cPickle.c"
      case 8: // $bb8
        var $54=_PyTuple_New(1); //@line 4517 "cPickle.c"
        var $55=$self_addr; //@line 4517 "cPickle.c"
        var $56=$55+28; //@line 4517 "cPickle.c"
        HEAP[$56]=$54; //@line 4517 "cPickle.c"
        var $57=$self_addr; //@line 4517 "cPickle.c"
        var $58=$57+28; //@line 4517 "cPickle.c"
        var $59=HEAP[$58]; //@line 4517 "cPickle.c"
        var $60=($59)!=0; //@line 4517 "cPickle.c"
        if ($60) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 4517 "cPickle.c"
      case 9: // $bb9
        var $61=$self_addr; //@line 4517 "cPickle.c"
        var $62=$61+28; //@line 4517 "cPickle.c"
        var $63=HEAP[$62]; //@line 4517 "cPickle.c"
        var $64=$63; //@line 4517 "cPickle.c"
        var $65=$64+12; //@line 4517 "cPickle.c"
        var $66=$65; //@line 4517 "cPickle.c"
        var $67=HEAP[$66]; //@line 4517 "cPickle.c"
        var $68=($67)!=0; //@line 4517 "cPickle.c"
        if ($68) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 4517 "cPickle.c"
      case 10: // $bb10
        var $69=$self_addr; //@line 4517 "cPickle.c"
        var $70=$69+28; //@line 4517 "cPickle.c"
        var $71=HEAP[$70]; //@line 4517 "cPickle.c"
        var $72=$71; //@line 4517 "cPickle.c"
        var $73=$72+12; //@line 4517 "cPickle.c"
        var $74=$73; //@line 4517 "cPickle.c"
        var $75=HEAP[$74]; //@line 4517 "cPickle.c"
        var $76=$75; //@line 4517 "cPickle.c"
        var $77=HEAP[$76]; //@line 4517 "cPickle.c"
        var $78=($77) - 1; //@line 4517 "cPickle.c"
        var $79=$75; //@line 4517 "cPickle.c"
        HEAP[$79]=$78; //@line 4517 "cPickle.c"
        var $80=$75; //@line 4517 "cPickle.c"
        var $81=HEAP[$80]; //@line 4517 "cPickle.c"
        var $82=($81)==0; //@line 4517 "cPickle.c"
        if ($82) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4517 "cPickle.c"
      case 11: // $bb11
        var $83=$self_addr; //@line 4517 "cPickle.c"
        var $84=$83+28; //@line 4517 "cPickle.c"
        var $85=HEAP[$84]; //@line 4517 "cPickle.c"
        var $86=$85; //@line 4517 "cPickle.c"
        var $87=$86+12; //@line 4517 "cPickle.c"
        var $88=$87; //@line 4517 "cPickle.c"
        var $89=HEAP[$88]; //@line 4517 "cPickle.c"
        var $90=$89+4; //@line 4517 "cPickle.c"
        var $91=HEAP[$90]; //@line 4517 "cPickle.c"
        var $92=$91+24; //@line 4517 "cPickle.c"
        var $93=HEAP[$92]; //@line 4517 "cPickle.c"
        var $94=$self_addr; //@line 4517 "cPickle.c"
        var $95=$94+28; //@line 4517 "cPickle.c"
        var $96=HEAP[$95]; //@line 4517 "cPickle.c"
        var $97=$96; //@line 4517 "cPickle.c"
        var $98=$97+12; //@line 4517 "cPickle.c"
        var $99=$98; //@line 4517 "cPickle.c"
        var $100=HEAP[$99]; //@line 4517 "cPickle.c"
        FUNCTION_TABLE[$93]($100); //@line 4517 "cPickle.c"
        __label__ = 12; break; //@line 4517 "cPickle.c"
      case 12: // $bb12
        var $101=$self_addr; //@line 4517 "cPickle.c"
        var $102=$101+28; //@line 4517 "cPickle.c"
        var $103=HEAP[$102]; //@line 4517 "cPickle.c"
        var $104=$103; //@line 4517 "cPickle.c"
        var $105=$104+12; //@line 4517 "cPickle.c"
        var $106=$105; //@line 4517 "cPickle.c"
        var $107=$state; //@line 4517 "cPickle.c"
        HEAP[$106]=$107; //@line 4517 "cPickle.c"
        __label__ = 15; break; //@line 4517 "cPickle.c"
      case 13: // $bb13
        var $108=$state; //@line 4517 "cPickle.c"
        var $109=$108; //@line 4517 "cPickle.c"
        var $110=HEAP[$109]; //@line 4517 "cPickle.c"
        var $111=($110) - 1; //@line 4517 "cPickle.c"
        var $112=$state; //@line 4517 "cPickle.c"
        var $113=$112; //@line 4517 "cPickle.c"
        HEAP[$113]=$111; //@line 4517 "cPickle.c"
        var $114=$state; //@line 4517 "cPickle.c"
        var $115=$114; //@line 4517 "cPickle.c"
        var $116=HEAP[$115]; //@line 4517 "cPickle.c"
        var $117=($116)==0; //@line 4517 "cPickle.c"
        if ($117) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4517 "cPickle.c"
      case 14: // $bb14
        var $118=$state; //@line 4517 "cPickle.c"
        var $119=$118+4; //@line 4517 "cPickle.c"
        var $120=HEAP[$119]; //@line 4517 "cPickle.c"
        var $121=$120+24; //@line 4517 "cPickle.c"
        var $122=HEAP[$121]; //@line 4517 "cPickle.c"
        var $123=$state; //@line 4517 "cPickle.c"
        FUNCTION_TABLE[$122]($123); //@line 4517 "cPickle.c"
        __label__ = 15; break; //@line 4517 "cPickle.c"
      case 15: // $bb15
        var $124=$self_addr; //@line 4518 "cPickle.c"
        var $125=$124+28; //@line 4518 "cPickle.c"
        var $126=HEAP[$125]; //@line 4518 "cPickle.c"
        var $127=($126)!=0; //@line 4518 "cPickle.c"
        if ($127) { __label__ = 16; break; } else { __label__ = 20; break; } //@line 4518 "cPickle.c"
      case 16: // $bb16
        var $128=$self_addr; //@line 4519 "cPickle.c"
        var $129=$128+28; //@line 4519 "cPickle.c"
        var $130=HEAP[$129]; //@line 4519 "cPickle.c"
        var $131=$__setstate__; //@line 4519 "cPickle.c"
        var $132=_PyObject_Call($131, $130, 0); //@line 4519 "cPickle.c"
        $junk=$132; //@line 4519 "cPickle.c"
        var $133=$self_addr; //@line 4520 "cPickle.c"
        var $134=$133+28; //@line 4520 "cPickle.c"
        var $135=HEAP[$134]; //@line 4520 "cPickle.c"
        var $136=$135; //@line 4520 "cPickle.c"
        var $137=HEAP[$136]; //@line 4520 "cPickle.c"
        var $138=($137) > 1; //@line 4520 "cPickle.c"
        if ($138) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 4520 "cPickle.c"
      case 17: // $bb17
        var $139=$self_addr; //@line 4520 "cPickle.c"
        var $140=$139+28; //@line 4520 "cPickle.c"
        var $141=HEAP[$140]; //@line 4520 "cPickle.c"
        var $142=$141; //@line 4520 "cPickle.c"
        var $143=HEAP[$142]; //@line 4520 "cPickle.c"
        var $144=($143) - 1; //@line 4520 "cPickle.c"
        var $145=$141; //@line 4520 "cPickle.c"
        HEAP[$145]=$144; //@line 4520 "cPickle.c"
        var $146=$141; //@line 4520 "cPickle.c"
        var $147=HEAP[$146]; //@line 4520 "cPickle.c"
        var $148=($147)==0; //@line 4520 "cPickle.c"
        if ($148) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 4520 "cPickle.c"
      case 18: // $bb18
        var $149=$self_addr; //@line 4520 "cPickle.c"
        var $150=$149+28; //@line 4520 "cPickle.c"
        var $151=HEAP[$150]; //@line 4520 "cPickle.c"
        var $152=$151+4; //@line 4520 "cPickle.c"
        var $153=HEAP[$152]; //@line 4520 "cPickle.c"
        var $154=$153+24; //@line 4520 "cPickle.c"
        var $155=HEAP[$154]; //@line 4520 "cPickle.c"
        var $156=$self_addr; //@line 4520 "cPickle.c"
        var $157=$156+28; //@line 4520 "cPickle.c"
        var $158=HEAP[$157]; //@line 4520 "cPickle.c"
        FUNCTION_TABLE[$155]($158); //@line 4520 "cPickle.c"
        __label__ = 19; break; //@line 4520 "cPickle.c"
      case 19: // $bb19
        var $159=$self_addr; //@line 4520 "cPickle.c"
        var $160=$159+28; //@line 4520 "cPickle.c"
        HEAP[$160]=0; //@line 4520 "cPickle.c"
        __label__ = 20; break; //@line 4520 "cPickle.c"
      case 20: // $bb20
        var $161=$__setstate__; //@line 4522 "cPickle.c"
        var $162=$161; //@line 4522 "cPickle.c"
        var $163=HEAP[$162]; //@line 4522 "cPickle.c"
        var $164=($163) - 1; //@line 4522 "cPickle.c"
        var $165=$__setstate__; //@line 4522 "cPickle.c"
        var $166=$165; //@line 4522 "cPickle.c"
        HEAP[$166]=$164; //@line 4522 "cPickle.c"
        var $167=$__setstate__; //@line 4522 "cPickle.c"
        var $168=$167; //@line 4522 "cPickle.c"
        var $169=HEAP[$168]; //@line 4522 "cPickle.c"
        var $170=($169)==0; //@line 4522 "cPickle.c"
        if ($170) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4522 "cPickle.c"
      case 21: // $bb21
        var $171=$__setstate__; //@line 4522 "cPickle.c"
        var $172=$171+4; //@line 4522 "cPickle.c"
        var $173=HEAP[$172]; //@line 4522 "cPickle.c"
        var $174=$173+24; //@line 4522 "cPickle.c"
        var $175=HEAP[$174]; //@line 4522 "cPickle.c"
        var $176=$__setstate__; //@line 4522 "cPickle.c"
        FUNCTION_TABLE[$175]($176); //@line 4522 "cPickle.c"
        __label__ = 22; break; //@line 4522 "cPickle.c"
      case 22: // $bb22
        var $177=$junk; //@line 4523 "cPickle.c"
        var $178=($177)==0; //@line 4523 "cPickle.c"
        if ($178) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4523 "cPickle.c"
      case 23: // $bb23
        $0=-1; //@line 4524 "cPickle.c"
        __label__ = 62; break; //@line 4524 "cPickle.c"
      case 24: // $bb24
        var $179=$junk; //@line 4525 "cPickle.c"
        var $180=$179; //@line 4525 "cPickle.c"
        var $181=HEAP[$180]; //@line 4525 "cPickle.c"
        var $182=($181) - 1; //@line 4525 "cPickle.c"
        var $183=$junk; //@line 4525 "cPickle.c"
        var $184=$183; //@line 4525 "cPickle.c"
        HEAP[$184]=$182; //@line 4525 "cPickle.c"
        var $185=$junk; //@line 4525 "cPickle.c"
        var $186=$185; //@line 4525 "cPickle.c"
        var $187=HEAP[$186]; //@line 4525 "cPickle.c"
        var $188=($187)==0; //@line 4525 "cPickle.c"
        if ($188) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4525 "cPickle.c"
      case 25: // $bb25
        var $189=$junk; //@line 4525 "cPickle.c"
        var $190=$189+4; //@line 4525 "cPickle.c"
        var $191=HEAP[$190]; //@line 4525 "cPickle.c"
        var $192=$191+24; //@line 4525 "cPickle.c"
        var $193=HEAP[$192]; //@line 4525 "cPickle.c"
        var $194=$junk; //@line 4525 "cPickle.c"
        FUNCTION_TABLE[$193]($194); //@line 4525 "cPickle.c"
        __label__ = 26; break; //@line 4525 "cPickle.c"
      case 26: // $bb26
        $0=0; //@line 4526 "cPickle.c"
        __label__ = 62; break; //@line 4526 "cPickle.c"
      case 27: // $bb27
        var $195=HEAP[_PyExc_AttributeError]; //@line 4528 "cPickle.c"
        var $196=_PyErr_ExceptionMatches($195); //@line 4528 "cPickle.c"
        var $197=($196)==0; //@line 4528 "cPickle.c"
        if ($197) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 4528 "cPickle.c"
      case 28: // $bb28
        $0=-1; //@line 4529 "cPickle.c"
        __label__ = 62; break; //@line 4529 "cPickle.c"
      case 29: // $bb29
        _PyErr_Clear(); //@line 4530 "cPickle.c"
        var $198=$state; //@line 4535 "cPickle.c"
        var $199=$198+4; //@line 4535 "cPickle.c"
        var $200=HEAP[$199]; //@line 4535 "cPickle.c"
        var $201=$200+84; //@line 4535 "cPickle.c"
        var $202=HEAP[$201]; //@line 4535 "cPickle.c"
        var $203=($202) & 67108864; //@line 4535 "cPickle.c"
        var $204=($203)==0; //@line 4535 "cPickle.c"
        if ($204) { __label__ = 33; break; } else { __label__ = 30; break; } //@line 4535 "cPickle.c"
      case 30: // $bb30
        var $205=$state; //@line 4535 "cPickle.c"
        var $206=_PyTuple_Size($205); //@line 4535 "cPickle.c"
        var $207=($206)!=2; //@line 4535 "cPickle.c"
        if ($207) { __label__ = 33; break; } else { __label__ = 31; break; } //@line 4535 "cPickle.c"
      case 31: // $bb31
        var $208=$state; //@line 4536 "cPickle.c"
        $temp=$208; //@line 4536 "cPickle.c"
        var $209=$temp; //@line 4537 "cPickle.c"
        var $210=$209; //@line 4537 "cPickle.c"
        var $211=$210+12; //@line 4537 "cPickle.c"
        var $212=$211; //@line 4537 "cPickle.c"
        var $213=HEAP[$212]; //@line 4537 "cPickle.c"
        $state=$213; //@line 4537 "cPickle.c"
        var $214=$temp; //@line 4538 "cPickle.c"
        var $215=$214; //@line 4538 "cPickle.c"
        var $216=$215+12; //@line 4538 "cPickle.c"
        var $217=$216+4; //@line 4538 "cPickle.c"
        var $218=HEAP[$217]; //@line 4538 "cPickle.c"
        $slotstate=$218; //@line 4538 "cPickle.c"
        var $219=$state; //@line 4539 "cPickle.c"
        var $220=$219; //@line 4539 "cPickle.c"
        var $221=HEAP[$220]; //@line 4539 "cPickle.c"
        var $222=($221) + 1; //@line 4539 "cPickle.c"
        var $223=$state; //@line 4539 "cPickle.c"
        var $224=$223; //@line 4539 "cPickle.c"
        HEAP[$224]=$222; //@line 4539 "cPickle.c"
        var $225=$slotstate; //@line 4540 "cPickle.c"
        var $226=$225; //@line 4540 "cPickle.c"
        var $227=HEAP[$226]; //@line 4540 "cPickle.c"
        var $228=($227) + 1; //@line 4540 "cPickle.c"
        var $229=$slotstate; //@line 4540 "cPickle.c"
        var $230=$229; //@line 4540 "cPickle.c"
        HEAP[$230]=$228; //@line 4540 "cPickle.c"
        var $231=$temp; //@line 4541 "cPickle.c"
        var $232=$231; //@line 4541 "cPickle.c"
        var $233=HEAP[$232]; //@line 4541 "cPickle.c"
        var $234=($233) - 1; //@line 4541 "cPickle.c"
        var $235=$temp; //@line 4541 "cPickle.c"
        var $236=$235; //@line 4541 "cPickle.c"
        HEAP[$236]=$234; //@line 4541 "cPickle.c"
        var $237=$temp; //@line 4541 "cPickle.c"
        var $238=$237; //@line 4541 "cPickle.c"
        var $239=HEAP[$238]; //@line 4541 "cPickle.c"
        var $240=($239)==0; //@line 4541 "cPickle.c"
        if ($240) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 4541 "cPickle.c"
      case 32: // $bb32
        var $241=$temp; //@line 4541 "cPickle.c"
        var $242=$241+4; //@line 4541 "cPickle.c"
        var $243=HEAP[$242]; //@line 4541 "cPickle.c"
        var $244=$243+24; //@line 4541 "cPickle.c"
        var $245=HEAP[$244]; //@line 4541 "cPickle.c"
        var $246=$temp; //@line 4541 "cPickle.c"
        FUNCTION_TABLE[$245]($246); //@line 4541 "cPickle.c"
        __label__ = 34; break; //@line 4541 "cPickle.c"
      case 33: // $bb34
        $slotstate=0; //@line 4544 "cPickle.c"
        __label__ = 34; break; //@line 4544 "cPickle.c"
      case 34: // $bb35
        var $247=$state; //@line 4547 "cPickle.c"
        var $248=($247)!=(__Py_NoneStruct); //@line 4547 "cPickle.c"
        if ($248) { __label__ = 35; break; } else { __label__ = 49; break; } //@line 4547 "cPickle.c"
      case 35: // $bb36
        var $249=$state; //@line 4549 "cPickle.c"
        var $250=$249+4; //@line 4549 "cPickle.c"
        var $251=HEAP[$250]; //@line 4549 "cPickle.c"
        var $252=$251+84; //@line 4549 "cPickle.c"
        var $253=HEAP[$252]; //@line 4549 "cPickle.c"
        var $254=($253) & 536870912; //@line 4549 "cPickle.c"
        var $255=($254)==0; //@line 4549 "cPickle.c"
        if ($255) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 4549 "cPickle.c"
      case 36: // $bb37
        var $256=HEAP[_UnpicklingError]; //@line 4550 "cPickle.c"
        _PyErr_SetString($256, __str97); //@line 4550 "cPickle.c"
        __label__ = 56; break; //@line 4550 "cPickle.c"
      case 37: // $bb38
        var $257=HEAP[___dict___str]; //@line 4554 "cPickle.c"
        var $258=$inst; //@line 4554 "cPickle.c"
        var $259=_PyObject_GetAttr($258, $257); //@line 4554 "cPickle.c"
        $dict=$259; //@line 4554 "cPickle.c"
        var $260=$dict; //@line 4555 "cPickle.c"
        var $261=($260)==0; //@line 4555 "cPickle.c"
        if ($261) { __label__ = 56; break; } else { __label__ = 38; break; } //@line 4555 "cPickle.c"
      case 38: // $bb39
        HEAP[$i]=0; //@line 4558 "cPickle.c"
        __label__ = 46; break; //@line 4558 "cPickle.c"
      case 39: // $bb40
        var $262=HEAP[$d_key]; //@line 4562 "cPickle.c"
        var $263=$262; //@line 4562 "cPickle.c"
        var $264=HEAP[$263]; //@line 4562 "cPickle.c"
        var $265=($264) + 1; //@line 4562 "cPickle.c"
        var $266=$262; //@line 4562 "cPickle.c"
        HEAP[$266]=$265; //@line 4562 "cPickle.c"
        var $267=HEAP[$d_key]; //@line 4563 "cPickle.c"
        var $268=$267+4; //@line 4563 "cPickle.c"
        var $269=HEAP[$268]; //@line 4563 "cPickle.c"
        var $270=($269)==(_PyString_Type); //@line 4563 "cPickle.c"
        if ($270) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 4563 "cPickle.c"
      case 40: // $bb41
        _PyString_InternInPlace($d_key); //@line 4564 "cPickle.c"
        __label__ = 41; break; //@line 4564 "cPickle.c"
      case 41: // $bb42
        var $271=HEAP[$d_value]; //@line 4565 "cPickle.c"
        var $272=HEAP[$d_key]; //@line 4565 "cPickle.c"
        var $273=$dict; //@line 4565 "cPickle.c"
        var $274=_PyObject_SetItem($273, $272, $271); //@line 4565 "cPickle.c"
        var $275=($274) < 0; //@line 4565 "cPickle.c"
        var $276=HEAP[$d_key]; //@line 4566 "cPickle.c"
        var $277=$276; //@line 4566 "cPickle.c"
        var $278=HEAP[$277]; //@line 4566 "cPickle.c"
        var $279=($278) - 1; //@line 4566 "cPickle.c"
        var $280=$276; //@line 4566 "cPickle.c"
        HEAP[$280]=$279; //@line 4566 "cPickle.c"
        var $281=$276; //@line 4566 "cPickle.c"
        var $282=HEAP[$281]; //@line 4566 "cPickle.c"
        var $283=($282)==0; //@line 4566 "cPickle.c"
        if ($275) { __label__ = 42; break; } else { __label__ = 44; break; } //@line 4565 "cPickle.c"
      case 42: // $bb43
        if ($283) { __label__ = 43; break; } else { __label__ = 56; break; } //@line 4566 "cPickle.c"
      case 43: // $bb44
        var $284=HEAP[$d_key]; //@line 4566 "cPickle.c"
        var $285=$284+4; //@line 4566 "cPickle.c"
        var $286=HEAP[$285]; //@line 4566 "cPickle.c"
        var $287=$286+24; //@line 4566 "cPickle.c"
        var $288=HEAP[$287]; //@line 4566 "cPickle.c"
        var $289=HEAP[$d_key]; //@line 4566 "cPickle.c"
        FUNCTION_TABLE[$288]($289); //@line 4566 "cPickle.c"
        __label__ = 56; break; //@line 4566 "cPickle.c"
      case 44: // $bb46
        if ($283) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 4569 "cPickle.c"
      case 45: // $bb47
        var $290=HEAP[$d_key]; //@line 4569 "cPickle.c"
        var $291=$290+4; //@line 4569 "cPickle.c"
        var $292=HEAP[$291]; //@line 4569 "cPickle.c"
        var $293=$292+24; //@line 4569 "cPickle.c"
        var $294=HEAP[$293]; //@line 4569 "cPickle.c"
        var $295=HEAP[$d_key]; //@line 4569 "cPickle.c"
        FUNCTION_TABLE[$294]($295); //@line 4569 "cPickle.c"
        __label__ = 46; break; //@line 4569 "cPickle.c"
      case 46: // $bb48
        var $296=$state; //@line 4559 "cPickle.c"
        var $297=_PyDict_Next($296, $i, $d_key, $d_value); //@line 4559 "cPickle.c"
        var $298=($297)!=0; //@line 4559 "cPickle.c"
        if ($298) { __label__ = 39; break; } else { __label__ = 47; break; } //@line 4559 "cPickle.c"
      case 47: // $bb49
        var $299=$dict; //@line 4571 "cPickle.c"
        var $300=$299; //@line 4571 "cPickle.c"
        var $301=HEAP[$300]; //@line 4571 "cPickle.c"
        var $302=($301) - 1; //@line 4571 "cPickle.c"
        var $303=$dict; //@line 4571 "cPickle.c"
        var $304=$303; //@line 4571 "cPickle.c"
        HEAP[$304]=$302; //@line 4571 "cPickle.c"
        var $305=$dict; //@line 4571 "cPickle.c"
        var $306=$305; //@line 4571 "cPickle.c"
        var $307=HEAP[$306]; //@line 4571 "cPickle.c"
        var $308=($307)==0; //@line 4571 "cPickle.c"
        if ($308) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 4571 "cPickle.c"
      case 48: // $bb50
        var $309=$dict; //@line 4571 "cPickle.c"
        var $310=$309+4; //@line 4571 "cPickle.c"
        var $311=HEAP[$310]; //@line 4571 "cPickle.c"
        var $312=$311+24; //@line 4571 "cPickle.c"
        var $313=HEAP[$312]; //@line 4571 "cPickle.c"
        var $314=$dict; //@line 4571 "cPickle.c"
        FUNCTION_TABLE[$313]($314); //@line 4571 "cPickle.c"
        __label__ = 49; break; //@line 4571 "cPickle.c"
      case 49: // $bb51
        var $315=$slotstate; //@line 4575 "cPickle.c"
        var $316=($315)!=0; //@line 4575 "cPickle.c"
        if ($316) { __label__ = 50; break; } else { __label__ = 55; break; } //@line 4575 "cPickle.c"
      case 50: // $bb52
        var $317=$slotstate; //@line 4576 "cPickle.c"
        var $318=$317+4; //@line 4576 "cPickle.c"
        var $319=HEAP[$318]; //@line 4576 "cPickle.c"
        var $320=$319+84; //@line 4576 "cPickle.c"
        var $321=HEAP[$320]; //@line 4576 "cPickle.c"
        var $322=($321) & 536870912; //@line 4576 "cPickle.c"
        var $323=($322)==0; //@line 4576 "cPickle.c"
        if ($323) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4576 "cPickle.c"
      case 51: // $bb53
        var $324=HEAP[_UnpicklingError]; //@line 4577 "cPickle.c"
        _PyErr_SetString($324, __str98); //@line 4577 "cPickle.c"
        __label__ = 56; break; //@line 4577 "cPickle.c"
      case 52: // $bb54
        HEAP[$i]=0; //@line 4581 "cPickle.c"
        __label__ = 54; break; //@line 4581 "cPickle.c"
      case 53: // $bb55
        var $325=HEAP[$d_value]; //@line 4583 "cPickle.c"
        var $326=HEAP[$d_key]; //@line 4583 "cPickle.c"
        var $327=$inst; //@line 4583 "cPickle.c"
        var $328=_PyObject_SetAttr($327, $326, $325); //@line 4583 "cPickle.c"
        var $329=($328) < 0; //@line 4583 "cPickle.c"
        if ($329) { __label__ = 56; break; } else { __label__ = 54; break; } //@line 4583 "cPickle.c"
      case 54: // $bb56
        var $330=$slotstate; //@line 4582 "cPickle.c"
        var $331=_PyDict_Next($330, $i, $d_key, $d_value); //@line 4582 "cPickle.c"
        var $332=($331)!=0; //@line 4582 "cPickle.c"
        if ($332) { __label__ = 53; break; } else { __label__ = 55; break; } //@line 4582 "cPickle.c"
      case 55: // $bb57
        $res=0; //@line 4587 "cPickle.c"
        __label__ = 56; break; //@line 4589 "cPickle.c"
      case 56: // $finally
        var $333=$state; //@line 4590 "cPickle.c"
        var $334=$333; //@line 4590 "cPickle.c"
        var $335=HEAP[$334]; //@line 4590 "cPickle.c"
        var $336=($335) - 1; //@line 4590 "cPickle.c"
        var $337=$state; //@line 4590 "cPickle.c"
        var $338=$337; //@line 4590 "cPickle.c"
        HEAP[$338]=$336; //@line 4590 "cPickle.c"
        var $339=$state; //@line 4590 "cPickle.c"
        var $340=$339; //@line 4590 "cPickle.c"
        var $341=HEAP[$340]; //@line 4590 "cPickle.c"
        var $342=($341)==0; //@line 4590 "cPickle.c"
        if ($342) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 4590 "cPickle.c"
      case 57: // $bb58
        var $343=$state; //@line 4590 "cPickle.c"
        var $344=$343+4; //@line 4590 "cPickle.c"
        var $345=HEAP[$344]; //@line 4590 "cPickle.c"
        var $346=$345+24; //@line 4590 "cPickle.c"
        var $347=HEAP[$346]; //@line 4590 "cPickle.c"
        var $348=$state; //@line 4590 "cPickle.c"
        FUNCTION_TABLE[$347]($348); //@line 4590 "cPickle.c"
        __label__ = 58; break; //@line 4590 "cPickle.c"
      case 58: // $bb59
        var $349=$slotstate; //@line 4591 "cPickle.c"
        var $350=($349)!=0; //@line 4591 "cPickle.c"
        if ($350) { __label__ = 59; break; } else { __label__ = 61; break; } //@line 4591 "cPickle.c"
      case 59: // $bb60
        var $351=$slotstate; //@line 4591 "cPickle.c"
        var $352=$351; //@line 4591 "cPickle.c"
        var $353=HEAP[$352]; //@line 4591 "cPickle.c"
        var $354=($353) - 1; //@line 4591 "cPickle.c"
        var $355=$slotstate; //@line 4591 "cPickle.c"
        var $356=$355; //@line 4591 "cPickle.c"
        HEAP[$356]=$354; //@line 4591 "cPickle.c"
        var $357=$slotstate; //@line 4591 "cPickle.c"
        var $358=$357; //@line 4591 "cPickle.c"
        var $359=HEAP[$358]; //@line 4591 "cPickle.c"
        var $360=($359)==0; //@line 4591 "cPickle.c"
        if ($360) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4591 "cPickle.c"
      case 60: // $bb61
        var $361=$slotstate; //@line 4591 "cPickle.c"
        var $362=$361+4; //@line 4591 "cPickle.c"
        var $363=HEAP[$362]; //@line 4591 "cPickle.c"
        var $364=$363+24; //@line 4591 "cPickle.c"
        var $365=HEAP[$364]; //@line 4591 "cPickle.c"
        var $366=$slotstate; //@line 4591 "cPickle.c"
        FUNCTION_TABLE[$365]($366); //@line 4591 "cPickle.c"
        __label__ = 61; break; //@line 4591 "cPickle.c"
      case 61: // $bb62
        var $367=$res; //@line 4592 "cPickle.c"
        $0=$367; //@line 4592 "cPickle.c"
        __label__ = 62; break; //@line 4592 "cPickle.c"
      case 62: // $bb63
        var $368=$0; //@line 4506 "cPickle.c"
        $retval=$368; //@line 4506 "cPickle.c"
        var $retval64=$retval; //@line 4506 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval64; //@line 4506 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_mark($self) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $s;
        var $marks;
        $self_addr=$self;
        var $1=$self_addr; //@line 4606 "cPickle.c"
        var $2=$1+52; //@line 4606 "cPickle.c"
        var $3=HEAP[$2]; //@line 4606 "cPickle.c"
        var $4=($3) + 1; //@line 4606 "cPickle.c"
        var $5=$self_addr; //@line 4606 "cPickle.c"
        var $6=$5+56; //@line 4606 "cPickle.c"
        var $7=HEAP[$6]; //@line 4606 "cPickle.c"
        var $8=($4) >= ($7); //@line 4606 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 4606 "cPickle.c"
      case 1: // $bb
        var $9=$self_addr; //@line 4608 "cPickle.c"
        var $10=$9+56; //@line 4608 "cPickle.c"
        var $11=HEAP[$10]; //@line 4608 "cPickle.c"
        var $12=($11) + 20; //@line 4608 "cPickle.c"
        $s=$12; //@line 4608 "cPickle.c"
        var $13=$self_addr; //@line 4609 "cPickle.c"
        var $14=$13+52; //@line 4609 "cPickle.c"
        var $15=HEAP[$14]; //@line 4609 "cPickle.c"
        var $16=$s; //@line 4609 "cPickle.c"
        var $17=($15) >= ($16); //@line 4609 "cPickle.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4609 "cPickle.c"
      case 2: // $bb1
        var $18=$self_addr; //@line 4609 "cPickle.c"
        var $19=$18+52; //@line 4609 "cPickle.c"
        var $20=HEAP[$19]; //@line 4609 "cPickle.c"
        var $21=($20) + 1; //@line 4609 "cPickle.c"
        $s=$21; //@line 4609 "cPickle.c"
        __label__ = 3; break; //@line 4609 "cPickle.c"
      case 3: // $bb2
        var $22=$self_addr; //@line 4610 "cPickle.c"
        var $23=$22+48; //@line 4610 "cPickle.c"
        var $24=HEAP[$23]; //@line 4610 "cPickle.c"
        var $25=($24)==0; //@line 4610 "cPickle.c"
        var $26=$s; //@line 4611 "cPickle.c"
        var $27=($26) * 4; //@line 4611 "cPickle.c"
        if ($25) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4610 "cPickle.c"
      case 4: // $bb3
        var $28=_malloc($27); //@line 4611 "cPickle.c"
        var $29=$28; //@line 4611 "cPickle.c"
        $marks=$29; //@line 4611 "cPickle.c"
        __lastLabel__ = 4; __label__ = 6; break; //@line 4611 "cPickle.c"
      case 5: // $bb4
        var $30=$self_addr; //@line 4613 "cPickle.c"
        var $31=$30+48; //@line 4613 "cPickle.c"
        var $32=HEAP[$31]; //@line 4613 "cPickle.c"
        var $33=$32; //@line 4613 "cPickle.c"
        var $34=_realloc($33, $27); //@line 4613 "cPickle.c"
        var $35=$34; //@line 4613 "cPickle.c"
        $marks=$35; //@line 4613 "cPickle.c"
        __lastLabel__ = 5; __label__ = 6; break; //@line 4613 "cPickle.c"
      case 6: // $bb5
        var $36=__lastLabel__ == 5 ? $35 : ($29);
        var $37=($36)==0; //@line 4615 "cPickle.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4615 "cPickle.c"
      case 7: // $bb6
        var $38=_PyErr_NoMemory(); //@line 4616 "cPickle.c"
        $0=-1; //@line 4617 "cPickle.c"
        __label__ = 10; break; //@line 4617 "cPickle.c"
      case 8: // $bb7
        var $39=$self_addr; //@line 4619 "cPickle.c"
        var $40=$39+48; //@line 4619 "cPickle.c"
        var $41=$marks; //@line 4619 "cPickle.c"
        HEAP[$40]=$41; //@line 4619 "cPickle.c"
        var $42=$self_addr; //@line 4620 "cPickle.c"
        var $43=$42+56; //@line 4620 "cPickle.c"
        var $44=$s; //@line 4620 "cPickle.c"
        HEAP[$43]=$44; //@line 4620 "cPickle.c"
        __label__ = 9; break; //@line 4620 "cPickle.c"
      case 9: // $bb8
        var $45=$self_addr; //@line 4623 "cPickle.c"
        var $46=$45+48; //@line 4623 "cPickle.c"
        var $47=HEAP[$46]; //@line 4623 "cPickle.c"
        var $48=$self_addr; //@line 4623 "cPickle.c"
        var $49=$48+52; //@line 4623 "cPickle.c"
        var $50=HEAP[$49]; //@line 4623 "cPickle.c"
        var $51=$self_addr; //@line 4623 "cPickle.c"
        var $52=$51+32; //@line 4623 "cPickle.c"
        var $53=HEAP[$52]; //@line 4623 "cPickle.c"
        var $54=$53+8; //@line 4623 "cPickle.c"
        var $55=HEAP[$54]; //@line 4623 "cPickle.c"
        var $56=$47+4*$50; //@line 4623 "cPickle.c"
        HEAP[$56]=$55; //@line 4623 "cPickle.c"
        var $57=($50) + 1; //@line 4623 "cPickle.c"
        var $58=$self_addr; //@line 4623 "cPickle.c"
        var $59=$58+52; //@line 4623 "cPickle.c"
        HEAP[$59]=$57; //@line 4623 "cPickle.c"
        $0=0; //@line 4625 "cPickle.c"
        __label__ = 10; break; //@line 4625 "cPickle.c"
      case 10: // $bb9
        var $60=$0; //@line 4617 "cPickle.c"
        $retval=$60; //@line 4617 "cPickle.c"
        var $retval10=$retval; //@line 4617 "cPickle.c"
        ;
        return $retval10; //@line 4617 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_reduce($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $callable;
        var $arg_tup;
        var $ob;
        $self_addr=$self;
        $callable=0; //@line 4631 "cPickle.c"
        $arg_tup=0; //@line 4631 "cPickle.c"
        $ob=0; //@line 4631 "cPickle.c"
        var $1=$self_addr; //@line 4633 "cPickle.c"
        var $2=$1+32; //@line 4633 "cPickle.c"
        var $3=HEAP[$2]; //@line 4633 "cPickle.c"
        var $4=$3+8; //@line 4633 "cPickle.c"
        var $5=HEAP[$4]; //@line 4633 "cPickle.c"
        var $6=($5)!=0; //@line 4633 "cPickle.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 4633 "cPickle.c"
      case 1: // $bb2_thread
        var $7=HEAP[_UnpicklingError]; //@line 4633 "cPickle.c"
        _PyErr_SetString($7, __str88); //@line 4633 "cPickle.c"
        $arg_tup=0; //@line 4633 "cPickle.c"
        __label__ = 3; break;
      case 2: // $bb2
        var $8=$self_addr; //@line 4633 "cPickle.c"
        var $9=$8+32; //@line 4633 "cPickle.c"
        var $10=HEAP[$9]; //@line 4633 "cPickle.c"
        var $11=$10+16; //@line 4633 "cPickle.c"
        var $12=HEAP[$11]; //@line 4633 "cPickle.c"
        var $13=$self_addr; //@line 4633 "cPickle.c"
        var $14=$13+32; //@line 4633 "cPickle.c"
        var $15=HEAP[$14]; //@line 4633 "cPickle.c"
        var $16=$15+8; //@line 4633 "cPickle.c"
        var $17=HEAP[$16]; //@line 4633 "cPickle.c"
        var $18=($17) - 1; //@line 4633 "cPickle.c"
        var $19=$15+8; //@line 4633 "cPickle.c"
        HEAP[$19]=$18; //@line 4633 "cPickle.c"
        var $20=$15+8; //@line 4633 "cPickle.c"
        var $21=HEAP[$20]; //@line 4633 "cPickle.c"
        var $22=$12+4*$21; //@line 4633 "cPickle.c"
        var $23=HEAP[$22]; //@line 4633 "cPickle.c"
        $arg_tup=$23; //@line 4633 "cPickle.c"
        var $24=($23)==0; //@line 4634 "cPickle.c"
        if ($24) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4634 "cPickle.c"
      case 3: // $bb3
        $0=-1; //@line 4634 "cPickle.c"
        __label__ = 19; break; //@line 4634 "cPickle.c"
      case 4: // $bb4
        var $25=$self_addr; //@line 4635 "cPickle.c"
        var $26=$25+32; //@line 4635 "cPickle.c"
        var $27=HEAP[$26]; //@line 4635 "cPickle.c"
        var $28=$27+8; //@line 4635 "cPickle.c"
        var $29=HEAP[$28]; //@line 4635 "cPickle.c"
        var $30=($29)!=0; //@line 4635 "cPickle.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 4635 "cPickle.c"
      case 5: // $bb7_thread
        var $31=HEAP[_UnpicklingError]; //@line 4635 "cPickle.c"
        _PyErr_SetString($31, __str88); //@line 4635 "cPickle.c"
        $callable=0; //@line 4635 "cPickle.c"
        __label__ = 9; break;
      case 6: // $bb7
        var $32=$self_addr; //@line 4635 "cPickle.c"
        var $33=$32+32; //@line 4635 "cPickle.c"
        var $34=HEAP[$33]; //@line 4635 "cPickle.c"
        var $35=$34+16; //@line 4635 "cPickle.c"
        var $36=HEAP[$35]; //@line 4635 "cPickle.c"
        var $37=$self_addr; //@line 4635 "cPickle.c"
        var $38=$37+32; //@line 4635 "cPickle.c"
        var $39=HEAP[$38]; //@line 4635 "cPickle.c"
        var $40=$39+8; //@line 4635 "cPickle.c"
        var $41=HEAP[$40]; //@line 4635 "cPickle.c"
        var $42=($41) - 1; //@line 4635 "cPickle.c"
        var $43=$39+8; //@line 4635 "cPickle.c"
        HEAP[$43]=$42; //@line 4635 "cPickle.c"
        var $44=$39+8; //@line 4635 "cPickle.c"
        var $45=HEAP[$44]; //@line 4635 "cPickle.c"
        var $46=$36+4*$45; //@line 4635 "cPickle.c"
        var $47=HEAP[$46]; //@line 4635 "cPickle.c"
        $callable=$47; //@line 4635 "cPickle.c"
        var $48=($47)!=0; //@line 4636 "cPickle.c"
        if ($48) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 4636 "cPickle.c"
      case 7: // $bb8
        var $49=$callable; //@line 4637 "cPickle.c"
        var $50=$arg_tup; //@line 4637 "cPickle.c"
        var $51=_Instance_New($49, $50); //@line 4637 "cPickle.c"
        $ob=$51; //@line 4637 "cPickle.c"
        var $52=$callable; //@line 4638 "cPickle.c"
        var $53=$52; //@line 4638 "cPickle.c"
        var $54=HEAP[$53]; //@line 4638 "cPickle.c"
        var $55=($54) - 1; //@line 4638 "cPickle.c"
        var $56=$callable; //@line 4638 "cPickle.c"
        var $57=$56; //@line 4638 "cPickle.c"
        HEAP[$57]=$55; //@line 4638 "cPickle.c"
        var $58=$callable; //@line 4638 "cPickle.c"
        var $59=$58; //@line 4638 "cPickle.c"
        var $60=HEAP[$59]; //@line 4638 "cPickle.c"
        var $61=($60)==0; //@line 4638 "cPickle.c"
        if ($61) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4638 "cPickle.c"
      case 8: // $bb9
        var $62=$callable; //@line 4638 "cPickle.c"
        var $63=$62+4; //@line 4638 "cPickle.c"
        var $64=HEAP[$63]; //@line 4638 "cPickle.c"
        var $65=$64+24; //@line 4638 "cPickle.c"
        var $66=HEAP[$65]; //@line 4638 "cPickle.c"
        var $67=$callable; //@line 4638 "cPickle.c"
        FUNCTION_TABLE[$66]($67); //@line 4638 "cPickle.c"
        __label__ = 9; break; //@line 4638 "cPickle.c"
      case 9: // $bb10
        var $68=$arg_tup; //@line 4640 "cPickle.c"
        var $69=$68; //@line 4640 "cPickle.c"
        var $70=HEAP[$69]; //@line 4640 "cPickle.c"
        var $71=($70) - 1; //@line 4640 "cPickle.c"
        var $72=$arg_tup; //@line 4640 "cPickle.c"
        var $73=$72; //@line 4640 "cPickle.c"
        HEAP[$73]=$71; //@line 4640 "cPickle.c"
        var $74=$arg_tup; //@line 4640 "cPickle.c"
        var $75=$74; //@line 4640 "cPickle.c"
        var $76=HEAP[$75]; //@line 4640 "cPickle.c"
        var $77=($76)==0; //@line 4640 "cPickle.c"
        if ($77) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4640 "cPickle.c"
      case 10: // $bb11
        var $78=$arg_tup; //@line 4640 "cPickle.c"
        var $79=$78+4; //@line 4640 "cPickle.c"
        var $80=HEAP[$79]; //@line 4640 "cPickle.c"
        var $81=$80+24; //@line 4640 "cPickle.c"
        var $82=HEAP[$81]; //@line 4640 "cPickle.c"
        var $83=$arg_tup; //@line 4640 "cPickle.c"
        FUNCTION_TABLE[$82]($83); //@line 4640 "cPickle.c"
        __label__ = 11; break; //@line 4640 "cPickle.c"
      case 11: // $bb12
        var $84=$ob; //@line 4642 "cPickle.c"
        var $85=($84)==0; //@line 4642 "cPickle.c"
        if ($85) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4642 "cPickle.c"
      case 12: // $bb13
        $0=-1; //@line 4642 "cPickle.c"
        __label__ = 19; break; //@line 4642 "cPickle.c"
      case 13: // $bb14
        var $86=$self_addr; //@line 4644 "cPickle.c"
        var $87=$86+32; //@line 4644 "cPickle.c"
        var $88=HEAP[$87]; //@line 4644 "cPickle.c"
        var $89=$88+8; //@line 4644 "cPickle.c"
        var $90=HEAP[$89]; //@line 4644 "cPickle.c"
        var $91=$self_addr; //@line 4644 "cPickle.c"
        var $92=$91+32; //@line 4644 "cPickle.c"
        var $93=HEAP[$92]; //@line 4644 "cPickle.c"
        var $94=$93+12; //@line 4644 "cPickle.c"
        var $95=HEAP[$94]; //@line 4644 "cPickle.c"
        var $96=($90)==($95); //@line 4644 "cPickle.c"
        if ($96) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 4644 "cPickle.c"
      case 14: // $bb15
        var $97=$self_addr; //@line 4644 "cPickle.c"
        var $98=$97+32; //@line 4644 "cPickle.c"
        var $99=HEAP[$98]; //@line 4644 "cPickle.c"
        var $100=_Pdata_grow($99); //@line 4644 "cPickle.c"
        var $101=($100) < 0; //@line 4644 "cPickle.c"
        if ($101) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 4644 "cPickle.c"
      case 15: // $bb16
        var $102=$ob; //@line 4644 "cPickle.c"
        var $103=$102; //@line 4644 "cPickle.c"
        var $104=HEAP[$103]; //@line 4644 "cPickle.c"
        var $105=($104) - 1; //@line 4644 "cPickle.c"
        var $106=$ob; //@line 4644 "cPickle.c"
        var $107=$106; //@line 4644 "cPickle.c"
        HEAP[$107]=$105; //@line 4644 "cPickle.c"
        var $108=$ob; //@line 4644 "cPickle.c"
        var $109=$108; //@line 4644 "cPickle.c"
        var $110=HEAP[$109]; //@line 4644 "cPickle.c"
        var $111=($110)==0; //@line 4644 "cPickle.c"
        if ($111) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4644 "cPickle.c"
      case 16: // $bb17
        var $112=$ob; //@line 4644 "cPickle.c"
        var $113=$112+4; //@line 4644 "cPickle.c"
        var $114=HEAP[$113]; //@line 4644 "cPickle.c"
        var $115=$114+24; //@line 4644 "cPickle.c"
        var $116=HEAP[$115]; //@line 4644 "cPickle.c"
        var $117=$ob; //@line 4644 "cPickle.c"
        FUNCTION_TABLE[$116]($117); //@line 4644 "cPickle.c"
        __label__ = 17; break; //@line 4644 "cPickle.c"
      case 17: // $bb18
        $0=-1; //@line 4644 "cPickle.c"
        __label__ = 19; break; //@line 4644 "cPickle.c"
      case 18: // $bb19
        var $118=$self_addr; //@line 4644 "cPickle.c"
        var $119=$118+32; //@line 4644 "cPickle.c"
        var $120=HEAP[$119]; //@line 4644 "cPickle.c"
        var $121=$120+16; //@line 4644 "cPickle.c"
        var $122=HEAP[$121]; //@line 4644 "cPickle.c"
        var $123=$self_addr; //@line 4644 "cPickle.c"
        var $124=$123+32; //@line 4644 "cPickle.c"
        var $125=HEAP[$124]; //@line 4644 "cPickle.c"
        var $126=$125+8; //@line 4644 "cPickle.c"
        var $127=HEAP[$126]; //@line 4644 "cPickle.c"
        var $128=$122+4*$127; //@line 4644 "cPickle.c"
        var $129=$ob; //@line 4644 "cPickle.c"
        HEAP[$128]=$129; //@line 4644 "cPickle.c"
        var $130=($127) + 1; //@line 4644 "cPickle.c"
        var $131=$125+8; //@line 4644 "cPickle.c"
        HEAP[$131]=$130; //@line 4644 "cPickle.c"
        $0=0; //@line 4645 "cPickle.c"
        __label__ = 19; break; //@line 4645 "cPickle.c"
      case 19: // $bb20
        var $132=$0; //@line 4634 "cPickle.c"
        $retval=$132; //@line 4634 "cPickle.c"
        var $retval21=$retval; //@line 4634 "cPickle.c"
        ;
        return $retval21; //@line 4634 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_proto($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $i;
        var $protobyte=__stackBase__;
        $self_addr=$self;
        var $1=$self_addr; //@line 4657 "cPickle.c"
        var $2=$1+60; //@line 4657 "cPickle.c"
        var $3=HEAP[$2]; //@line 4657 "cPickle.c"
        var $4=$self_addr; //@line 4657 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $protobyte, 1); //@line 4657 "cPickle.c"
        $i=$5; //@line 4657 "cPickle.c"
        var $6=$i; //@line 4658 "cPickle.c"
        var $7=($6) < 0; //@line 4658 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4658 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 4659 "cPickle.c"
        __label__ = 7; break; //@line 4659 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$protobyte]; //@line 4661 "cPickle.c"
        var $9=_calc_binint($8, 1); //@line 4661 "cPickle.c"
        $i=$9; //@line 4661 "cPickle.c"
        var $10=$i; //@line 4665 "cPickle.c"
        var $11=($10) < 0; //@line 4665 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4665 "cPickle.c"
      case 3: // $bb2
        ___assert_fail(__str99, __str15, 4665, ___PRETTY_FUNCTION___15142); //@line 4665 "cPickle.c"
        throw "Reached an unreachable!" //@line 4665 "cPickle.c"
      case 4: // $bb3
        var $12=$i; //@line 4666 "cPickle.c"
        var $13=($12) <= 2; //@line 4666 "cPickle.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4666 "cPickle.c"
      case 5: // $bb4
        $0=0; //@line 4667 "cPickle.c"
        __label__ = 7; break; //@line 4667 "cPickle.c"
      case 6: // $bb5
        var $14=HEAP[_PyExc_ValueError]; //@line 4669 "cPickle.c"
        var $15=$i; //@line 4669 "cPickle.c"
        var $16=_PyErr_Format($14, __str100, allocate([$15,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 4669 "cPickle.c"
        $0=-1; //@line 4670 "cPickle.c"
        __label__ = 7; break; //@line 4670 "cPickle.c"
      case 7: // $bb6
        var $17=$0; //@line 4659 "cPickle.c"
        $retval=$17; //@line 4659 "cPickle.c"
        var $retval7=$retval; //@line 4659 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 4659 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $err;
        var $val;
        var $s=__stackBase__;
        $self_addr=$self;
        $err=0; //@line 4676 "cPickle.c"
        $val=0; //@line 4676 "cPickle.c"
        var $1=$self_addr; //@line 4679 "cPickle.c"
        var $2=$1+52; //@line 4679 "cPickle.c"
        HEAP[$2]=0; //@line 4679 "cPickle.c"
        var $3=$self_addr; //@line 4680 "cPickle.c"
        var $4=$3+32; //@line 4680 "cPickle.c"
        var $5=HEAP[$4]; //@line 4680 "cPickle.c"
        var $6=$5+8; //@line 4680 "cPickle.c"
        var $7=HEAP[$6]; //@line 4680 "cPickle.c"
        var $8=($7)!=0; //@line 4680 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4680 "cPickle.c"
      case 1: // $bb
        var $9=$self_addr; //@line 4680 "cPickle.c"
        var $10=$9+32; //@line 4680 "cPickle.c"
        var $11=HEAP[$10]; //@line 4680 "cPickle.c"
        var $12=_Pdata_clear($11, 0); //@line 4680 "cPickle.c"
        __label__ = 2; break; //@line 4680 "cPickle.c"
      case 2: // $bb1
        var $13=$self_addr; //@line 4683 "cPickle.c"
        var $14=$13+60; //@line 4683 "cPickle.c"
        var $15=HEAP[$14]; //@line 4683 "cPickle.c"
        var $16=$self_addr; //@line 4683 "cPickle.c"
        var $17=FUNCTION_TABLE[$15]($16, $s, 1); //@line 4683 "cPickle.c"
        var $18=($17) < 0; //@line 4683 "cPickle.c"
        if ($18) { __label__ = 58; break; } else { __label__ = 3; break; } //@line 4683 "cPickle.c"
      case 3: // $bb2
        var $19=HEAP[$s]; //@line 4686 "cPickle.c"
        var $20=$19; //@line 4686 "cPickle.c"
        var $21=HEAP[$20]; //@line 4686 "cPickle.c"
        var $22=($21); //@line 4686 "cPickle.c"
        if ($22 == -128) {
          __label__ = 53; break;
        }
        else if ($22 == -127) {
          __label__ = 30; break;
        }
        else if ($22 == -126) {
          __label__ = 39; break;
        }
        else if ($22 == -125) {
          __label__ = 40; break;
        }
        else if ($22 == -124) {
          __label__ = 41; break;
        }
        else if ($22 == -123) {
          __label__ = 20; break;
        }
        else if ($22 == -122) {
          __label__ = 21; break;
        }
        else if ($22 == -121) {
          __label__ = 22; break;
        }
        else if ($22 == -120) {
          __label__ = 54; break;
        }
        else if ($22 == -119) {
          __label__ = 55; break;
        }
        else if ($22 == -118) {
          __label__ = 10; break;
        }
        else if ($22 == -117) {
          __label__ = 11; break;
        }
        else if ($22 == 0) {
          __label__ = 56; break;
        }
        else if ($22 == 40) {
          __label__ = 42; break;
        }
        else if ($22 == 41) {
          __label__ = 19; break;
        }
        else if ($22 == 46) {
          __label__ = 58; break;
        }
        else if ($22 == 48) {
          __label__ = 46; break;
        }
        else if ($22 == 49) {
          __label__ = 47; break;
        }
        else if ($22 == 50) {
          __label__ = 35; break;
        }
        else if ($22 == 70) {
          __label__ = 12; break;
        }
        else if ($22 == 71) {
          __label__ = 13; break;
        }
        else if ($22 == 73) {
          __label__ = 8; break;
        }
        else if ($22 == 74) {
          __label__ = 5; break;
        }
        else if ($22 == 75) {
          __label__ = 6; break;
        }
        else if ($22 == 76) {
          __label__ = 9; break;
        }
        else if ($22 == 77) {
          __label__ = 7; break;
        }
        else if ($22 == 78) {
          __label__ = 4; break;
        }
        else if ($22 == 80) {
          __label__ = 50; break;
        }
        else if ($22 == 81) {
          __label__ = 51; break;
        }
        else if ($22 == 82) {
          __label__ = 52; break;
        }
        else if ($22 == 83) {
          __label__ = 16; break;
        }
        else if ($22 == 84) {
          __label__ = 14; break;
        }
        else if ($22 == 85) {
          __label__ = 15; break;
        }
        else if ($22 == 86) {
          __label__ = 17; break;
        }
        else if ($22 == 88) {
          __label__ = 18; break;
        }
        else if ($22 == 93) {
          __label__ = 24; break;
        }
        else if ($22 == 97) {
          __label__ = 32; break;
        }
        else if ($22 == 98) {
          __label__ = 34; break;
        }
        else if ($22 == 99) {
          __label__ = 31; break;
        }
        else if ($22 == 100) {
          __label__ = 27; break;
        }
        else if ($22 == 101) {
          __label__ = 33; break;
        }
        else if ($22 == 103) {
          __label__ = 38; break;
        }
        else if ($22 == 104) {
          __label__ = 36; break;
        }
        else if ($22 == 105) {
          __label__ = 29; break;
        }
        else if ($22 == 106) {
          __label__ = 37; break;
        }
        else if ($22 == 108) {
          __label__ = 25; break;
        }
        else if ($22 == 111) {
          __label__ = 28; break;
        }
        else if ($22 == 112) {
          __label__ = 45; break;
        }
        else if ($22 == 113) {
          __label__ = 43; break;
        }
        else if ($22 == 114) {
          __label__ = 44; break;
        }
        else if ($22 == 115) {
          __label__ = 48; break;
        }
        else if ($22 == 116) {
          __label__ = 23; break;
        }
        else if ($22 == 117) {
          __label__ = 49; break;
        }
        else if ($22 == 125) {
          __label__ = 26; break;
        }
        else {
        __label__ = 57; break;
        }
        
      case 4: // $bb3
        var $23=$self_addr; //@line 4688 "cPickle.c"
        var $24=_load_none($23); //@line 4688 "cPickle.c"
        var $25=($24) < 0; //@line 4688 "cPickle.c"
        if ($25) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4688 "cPickle.c"
      case 5: // $bb5
        var $26=$self_addr; //@line 4693 "cPickle.c"
        var $27=_load_binint($26); //@line 4693 "cPickle.c"
        var $28=($27) < 0; //@line 4693 "cPickle.c"
        if ($28) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4693 "cPickle.c"
      case 6: // $bb7
        var $29=$self_addr; //@line 4698 "cPickle.c"
        var $30=_load_binint1($29); //@line 4698 "cPickle.c"
        var $31=($30) < 0; //@line 4698 "cPickle.c"
        if ($31) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4698 "cPickle.c"
      case 7: // $bb9
        var $32=$self_addr; //@line 4703 "cPickle.c"
        var $33=_load_binint2($32); //@line 4703 "cPickle.c"
        var $34=($33) < 0; //@line 4703 "cPickle.c"
        if ($34) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4703 "cPickle.c"
      case 8: // $bb11
        var $35=$self_addr; //@line 4708 "cPickle.c"
        var $36=_load_int($35); //@line 4708 "cPickle.c"
        var $37=($36) < 0; //@line 4708 "cPickle.c"
        if ($37) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4708 "cPickle.c"
      case 9: // $bb13
        var $38=$self_addr; //@line 4713 "cPickle.c"
        var $39=_load_long($38); //@line 4713 "cPickle.c"
        var $40=($39) < 0; //@line 4713 "cPickle.c"
        if ($40) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4713 "cPickle.c"
      case 10: // $bb15
        var $41=$self_addr; //@line 4718 "cPickle.c"
        var $42=_load_counted_long($41, 1); //@line 4718 "cPickle.c"
        var $43=($42) < 0; //@line 4718 "cPickle.c"
        if ($43) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4718 "cPickle.c"
      case 11: // $bb17
        var $44=$self_addr; //@line 4723 "cPickle.c"
        var $45=_load_counted_long($44, 4); //@line 4723 "cPickle.c"
        var $46=($45) < 0; //@line 4723 "cPickle.c"
        if ($46) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4723 "cPickle.c"
      case 12: // $bb19
        var $47=$self_addr; //@line 4728 "cPickle.c"
        var $48=_load_float($47); //@line 4728 "cPickle.c"
        var $49=($48) < 0; //@line 4728 "cPickle.c"
        if ($49) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4728 "cPickle.c"
      case 13: // $bb21
        var $50=$self_addr; //@line 4733 "cPickle.c"
        var $51=_load_binfloat($50); //@line 4733 "cPickle.c"
        var $52=($51) < 0; //@line 4733 "cPickle.c"
        if ($52) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4733 "cPickle.c"
      case 14: // $bb23
        var $53=$self_addr; //@line 4738 "cPickle.c"
        var $54=_load_binstring($53); //@line 4738 "cPickle.c"
        var $55=($54) < 0; //@line 4738 "cPickle.c"
        if ($55) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4738 "cPickle.c"
      case 15: // $bb25
        var $56=$self_addr; //@line 4743 "cPickle.c"
        var $57=_load_short_binstring($56); //@line 4743 "cPickle.c"
        var $58=($57) < 0; //@line 4743 "cPickle.c"
        if ($58) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4743 "cPickle.c"
      case 16: // $bb27
        var $59=$self_addr; //@line 4748 "cPickle.c"
        var $60=_load_string($59); //@line 4748 "cPickle.c"
        var $61=($60) < 0; //@line 4748 "cPickle.c"
        if ($61) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4748 "cPickle.c"
      case 17: // $bb29
        var $62=$self_addr; //@line 4754 "cPickle.c"
        var $63=_load_unicode($62); //@line 4754 "cPickle.c"
        var $64=($63) < 0; //@line 4754 "cPickle.c"
        if ($64) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4754 "cPickle.c"
      case 18: // $bb31
        var $65=$self_addr; //@line 4759 "cPickle.c"
        var $66=_load_binunicode($65); //@line 4759 "cPickle.c"
        var $67=($66) < 0; //@line 4759 "cPickle.c"
        if ($67) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4759 "cPickle.c"
      case 19: // $bb33
        var $68=$self_addr; //@line 4765 "cPickle.c"
        var $69=_load_counted_tuple($68, 0); //@line 4765 "cPickle.c"
        var $70=($69) < 0; //@line 4765 "cPickle.c"
        if ($70) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4765 "cPickle.c"
      case 20: // $bb35
        var $71=$self_addr; //@line 4770 "cPickle.c"
        var $72=_load_counted_tuple($71, 1); //@line 4770 "cPickle.c"
        var $73=($72) < 0; //@line 4770 "cPickle.c"
        if ($73) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4770 "cPickle.c"
      case 21: // $bb37
        var $74=$self_addr; //@line 4775 "cPickle.c"
        var $75=_load_counted_tuple($74, 2); //@line 4775 "cPickle.c"
        var $76=($75) < 0; //@line 4775 "cPickle.c"
        if ($76) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4775 "cPickle.c"
      case 22: // $bb39
        var $77=$self_addr; //@line 4780 "cPickle.c"
        var $78=_load_counted_tuple($77, 3); //@line 4780 "cPickle.c"
        var $79=($78) < 0; //@line 4780 "cPickle.c"
        if ($79) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4780 "cPickle.c"
      case 23: // $bb41
        var $80=$self_addr; //@line 4785 "cPickle.c"
        var $81=_load_tuple($80); //@line 4785 "cPickle.c"
        var $82=($81) < 0; //@line 4785 "cPickle.c"
        if ($82) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4785 "cPickle.c"
      case 24: // $bb43
        var $83=$self_addr; //@line 4790 "cPickle.c"
        var $84=_load_empty_list($83); //@line 4790 "cPickle.c"
        var $85=($84) < 0; //@line 4790 "cPickle.c"
        if ($85) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4790 "cPickle.c"
      case 25: // $bb45
        var $86=$self_addr; //@line 4795 "cPickle.c"
        var $87=_load_list($86); //@line 4795 "cPickle.c"
        var $88=($87) < 0; //@line 4795 "cPickle.c"
        if ($88) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4795 "cPickle.c"
      case 26: // $bb47
        var $89=$self_addr; //@line 4800 "cPickle.c"
        var $90=_load_empty_dict($89); //@line 4800 "cPickle.c"
        var $91=($90) < 0; //@line 4800 "cPickle.c"
        if ($91) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4800 "cPickle.c"
      case 27: // $bb49
        var $92=$self_addr; //@line 4805 "cPickle.c"
        var $93=_load_dict($92); //@line 4805 "cPickle.c"
        var $94=($93) < 0; //@line 4805 "cPickle.c"
        if ($94) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4805 "cPickle.c"
      case 28: // $bb51
        var $95=$self_addr; //@line 4810 "cPickle.c"
        var $96=_load_obj($95); //@line 4810 "cPickle.c"
        var $97=($96) < 0; //@line 4810 "cPickle.c"
        if ($97) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4810 "cPickle.c"
      case 29: // $bb53
        var $98=$self_addr; //@line 4815 "cPickle.c"
        var $99=_load_inst($98); //@line 4815 "cPickle.c"
        var $100=($99) < 0; //@line 4815 "cPickle.c"
        if ($100) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4815 "cPickle.c"
      case 30: // $bb55
        var $101=$self_addr; //@line 4820 "cPickle.c"
        var $102=_load_newobj($101); //@line 4820 "cPickle.c"
        var $103=($102) < 0; //@line 4820 "cPickle.c"
        if ($103) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4820 "cPickle.c"
      case 31: // $bb57
        var $104=$self_addr; //@line 4825 "cPickle.c"
        var $105=_load_global($104); //@line 4825 "cPickle.c"
        var $106=($105) < 0; //@line 4825 "cPickle.c"
        if ($106) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4825 "cPickle.c"
      case 32: // $bb59
        var $107=$self_addr; //@line 4830 "cPickle.c"
        var $108=_load_append($107); //@line 4830 "cPickle.c"
        var $109=($108) < 0; //@line 4830 "cPickle.c"
        if ($109) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4830 "cPickle.c"
      case 33: // $bb61
        var $110=$self_addr; //@line 4835 "cPickle.c"
        var $111=_load_appends($110); //@line 4835 "cPickle.c"
        var $112=($111) < 0; //@line 4835 "cPickle.c"
        if ($112) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4835 "cPickle.c"
      case 34: // $bb63
        var $113=$self_addr; //@line 4840 "cPickle.c"
        var $114=_load_build($113); //@line 4840 "cPickle.c"
        var $115=($114) < 0; //@line 4840 "cPickle.c"
        if ($115) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4840 "cPickle.c"
      case 35: // $bb65
        var $116=$self_addr; //@line 4845 "cPickle.c"
        var $117=_load_dup($116); //@line 4845 "cPickle.c"
        var $118=($117) < 0; //@line 4845 "cPickle.c"
        if ($118) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4845 "cPickle.c"
      case 36: // $bb67
        var $119=$self_addr; //@line 4850 "cPickle.c"
        var $120=_load_binget($119); //@line 4850 "cPickle.c"
        var $121=($120) < 0; //@line 4850 "cPickle.c"
        if ($121) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4850 "cPickle.c"
      case 37: // $bb69
        var $122=$self_addr; //@line 4855 "cPickle.c"
        var $123=_load_long_binget($122); //@line 4855 "cPickle.c"
        var $124=($123) < 0; //@line 4855 "cPickle.c"
        if ($124) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4855 "cPickle.c"
      case 38: // $bb71
        var $125=$self_addr; //@line 4860 "cPickle.c"
        var $126=_load_get($125); //@line 4860 "cPickle.c"
        var $127=($126) < 0; //@line 4860 "cPickle.c"
        if ($127) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4860 "cPickle.c"
      case 39: // $bb73
        var $128=$self_addr; //@line 4865 "cPickle.c"
        var $129=_load_extension($128, 1); //@line 4865 "cPickle.c"
        var $130=($129) < 0; //@line 4865 "cPickle.c"
        if ($130) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4865 "cPickle.c"
      case 40: // $bb75
        var $131=$self_addr; //@line 4870 "cPickle.c"
        var $132=_load_extension($131, 2); //@line 4870 "cPickle.c"
        var $133=($132) < 0; //@line 4870 "cPickle.c"
        if ($133) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4870 "cPickle.c"
      case 41: // $bb77
        var $134=$self_addr; //@line 4875 "cPickle.c"
        var $135=_load_extension($134, 4); //@line 4875 "cPickle.c"
        var $136=($135) < 0; //@line 4875 "cPickle.c"
        if ($136) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4875 "cPickle.c"
      case 42: // $bb79
        var $137=$self_addr; //@line 4879 "cPickle.c"
        var $138=_load_mark($137); //@line 4879 "cPickle.c"
        var $139=($138) < 0; //@line 4879 "cPickle.c"
        if ($139) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4879 "cPickle.c"
      case 43: // $bb81
        var $140=$self_addr; //@line 4884 "cPickle.c"
        var $141=_load_binput($140); //@line 4884 "cPickle.c"
        var $142=($141) < 0; //@line 4884 "cPickle.c"
        if ($142) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4884 "cPickle.c"
      case 44: // $bb83
        var $143=$self_addr; //@line 4889 "cPickle.c"
        var $144=_load_long_binput($143); //@line 4889 "cPickle.c"
        var $145=($144) < 0; //@line 4889 "cPickle.c"
        if ($145) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4889 "cPickle.c"
      case 45: // $bb85
        var $146=$self_addr; //@line 4894 "cPickle.c"
        var $147=_load_put($146); //@line 4894 "cPickle.c"
        var $148=($147) < 0; //@line 4894 "cPickle.c"
        if ($148) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4894 "cPickle.c"
      case 46: // $bb87
        var $149=$self_addr; //@line 4899 "cPickle.c"
        var $150=_load_pop($149); //@line 4899 "cPickle.c"
        var $151=($150) < 0; //@line 4899 "cPickle.c"
        if ($151) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4899 "cPickle.c"
      case 47: // $bb89
        var $152=$self_addr; //@line 4904 "cPickle.c"
        var $153=_load_pop_mark($152); //@line 4904 "cPickle.c"
        var $154=($153) < 0; //@line 4904 "cPickle.c"
        if ($154) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4904 "cPickle.c"
      case 48: // $bb91
        var $155=$self_addr; //@line 4909 "cPickle.c"
        var $156=_load_setitem($155); //@line 4909 "cPickle.c"
        var $157=($156) < 0; //@line 4909 "cPickle.c"
        if ($157) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4909 "cPickle.c"
      case 49: // $bb93
        var $158=$self_addr; //@line 4914 "cPickle.c"
        var $159=_load_setitems($158); //@line 4914 "cPickle.c"
        var $160=($159) < 0; //@line 4914 "cPickle.c"
        if ($160) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4914 "cPickle.c"
      case 50: // $bb96
        var $161=$self_addr; //@line 4922 "cPickle.c"
        var $162=_load_persid($161); //@line 4922 "cPickle.c"
        var $163=($162) < 0; //@line 4922 "cPickle.c"
        if ($163) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4922 "cPickle.c"
      case 51: // $bb98
        var $164=$self_addr; //@line 4927 "cPickle.c"
        var $165=_load_binpersid($164); //@line 4927 "cPickle.c"
        var $166=($165) < 0; //@line 4927 "cPickle.c"
        if ($166) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4927 "cPickle.c"
      case 52: // $bb100
        var $167=$self_addr; //@line 4932 "cPickle.c"
        var $168=_load_reduce($167); //@line 4932 "cPickle.c"
        var $169=($168) < 0; //@line 4932 "cPickle.c"
        if ($169) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4932 "cPickle.c"
      case 53: // $bb102
        var $170=$self_addr; //@line 4937 "cPickle.c"
        var $171=_load_proto($170); //@line 4937 "cPickle.c"
        var $172=($171) < 0; //@line 4937 "cPickle.c"
        if ($172) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4937 "cPickle.c"
      case 54: // $bb104
        var $173=$self_addr; //@line 4942 "cPickle.c"
        var $174=_load_bool($173, __Py_TrueStruct); //@line 4942 "cPickle.c"
        var $175=($174) < 0; //@line 4942 "cPickle.c"
        if ($175) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4942 "cPickle.c"
      case 55: // $bb106
        var $176=$self_addr; //@line 4947 "cPickle.c"
        var $177=_load_bool($176, __Py_ZeroStruct); //@line 4947 "cPickle.c"
        var $178=($177) < 0; //@line 4947 "cPickle.c"
        if ($178) { __label__ = 58; break; } else { __label__ = 2; break; } //@line 4947 "cPickle.c"
      case 56: // $bb108
        var $179=HEAP[_PyExc_EOFError]; //@line 4953 "cPickle.c"
        _PyErr_SetNone($179); //@line 4953 "cPickle.c"
        __label__ = 58; break; //@line 4953 "cPickle.c"
      case 57: // $bb109
        var $180=HEAP[$s]; //@line 4957 "cPickle.c"
        var $181=$180; //@line 4957 "cPickle.c"
        var $182=HEAP[$181]; //@line 4957 "cPickle.c"
        var $183=($182); //@line 4957 "cPickle.c"
        var $184=HEAP[_UnpicklingError]; //@line 4957 "cPickle.c"
        _cPickle_ErrFormat($184, __str101, __str102, allocate([$183,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 4957 "cPickle.c"
        $0=0; //@line 4960 "cPickle.c"
        __label__ = 66; break; //@line 4960 "cPickle.c"
      case 58: // $bb112
        var $185=_PyErr_Occurred(); //@line 4966 "cPickle.c"
        $err=$185; //@line 4966 "cPickle.c"
        var $186=($185)!=0; //@line 4966 "cPickle.c"
        if ($186) { __label__ = 59; break; } else { __label__ = 62; break; } //@line 4966 "cPickle.c"
      case 59: // $bb113
        var $187=HEAP[_PyExc_EOFError]; //@line 4967 "cPickle.c"
        var $188=$err; //@line 4967 "cPickle.c"
        var $189=($188)==($187); //@line 4967 "cPickle.c"
        if ($189) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4967 "cPickle.c"
      case 60: // $bb114
        var $190=HEAP[_PyExc_EOFError]; //@line 4968 "cPickle.c"
        _PyErr_SetNone($190); //@line 4968 "cPickle.c"
        __label__ = 61; break; //@line 4968 "cPickle.c"
      case 61: // $bb115
        $0=0; //@line 4970 "cPickle.c"
        __label__ = 66; break; //@line 4970 "cPickle.c"
      case 62: // $bb116
        var $191=$self_addr; //@line 4973 "cPickle.c"
        var $192=$191+32; //@line 4973 "cPickle.c"
        var $193=HEAP[$192]; //@line 4973 "cPickle.c"
        var $194=$193+8; //@line 4973 "cPickle.c"
        var $195=HEAP[$194]; //@line 4973 "cPickle.c"
        var $196=($195)!=0; //@line 4973 "cPickle.c"
        if ($196) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 4973 "cPickle.c"
      case 63: // $bb117
        var $197=$self_addr; //@line 4973 "cPickle.c"
        var $198=$197+32; //@line 4973 "cPickle.c"
        var $199=HEAP[$198]; //@line 4973 "cPickle.c"
        var $200=$199+16; //@line 4973 "cPickle.c"
        var $201=HEAP[$200]; //@line 4973 "cPickle.c"
        var $202=$self_addr; //@line 4973 "cPickle.c"
        var $203=$202+32; //@line 4973 "cPickle.c"
        var $204=HEAP[$203]; //@line 4973 "cPickle.c"
        var $205=$204+8; //@line 4973 "cPickle.c"
        var $206=HEAP[$205]; //@line 4973 "cPickle.c"
        var $207=($206) - 1; //@line 4973 "cPickle.c"
        var $208=$204+8; //@line 4973 "cPickle.c"
        HEAP[$208]=$207; //@line 4973 "cPickle.c"
        var $209=$204+8; //@line 4973 "cPickle.c"
        var $210=HEAP[$209]; //@line 4973 "cPickle.c"
        var $211=$201+4*$210; //@line 4973 "cPickle.c"
        var $212=HEAP[$211]; //@line 4973 "cPickle.c"
        $val=$212; //@line 4973 "cPickle.c"
        __label__ = 65; break; //@line 4973 "cPickle.c"
      case 64: // $bb118
        var $213=HEAP[_UnpicklingError]; //@line 4973 "cPickle.c"
        _PyErr_SetString($213, __str88); //@line 4973 "cPickle.c"
        $val=0; //@line 4973 "cPickle.c"
        __label__ = 65; break; //@line 4973 "cPickle.c"
      case 65: // $bb119
        var $214=$val; //@line 4974 "cPickle.c"
        $0=$214; //@line 4974 "cPickle.c"
        __label__ = 66; break; //@line 4974 "cPickle.c"
      case 66: // $bb120
        var $215=$0; //@line 4960 "cPickle.c"
        $retval=$215; //@line 4960 "cPickle.c"
        var $retval121=$retval; //@line 4960 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval121; //@line 4960 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_obj($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $i;
        $self_addr=$self;
        var $1=$self_addr; //@line 4986 "cPickle.c"
        var $2=_marker($1); //@line 4986 "cPickle.c"
        $i=$2; //@line 4986 "cPickle.c"
        var $3=$i; //@line 4986 "cPickle.c"
        var $4=($3) < 0; //@line 4986 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4986 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 4986 "cPickle.c"
        __label__ = 3; break; //@line 4986 "cPickle.c"
      case 2: // $bb1
        var $5=$i; //@line 4987 "cPickle.c"
        var $6=($5) + 1; //@line 4987 "cPickle.c"
        var $7=$self_addr; //@line 4987 "cPickle.c"
        var $8=$7+32; //@line 4987 "cPickle.c"
        var $9=HEAP[$8]; //@line 4987 "cPickle.c"
        var $10=_Pdata_clear($9, $6); //@line 4987 "cPickle.c"
        $0=$10; //@line 4987 "cPickle.c"
        __label__ = 3; break; //@line 4987 "cPickle.c"
      case 3: // $bb2
        var $11=$0; //@line 4986 "cPickle.c"
        $retval=$11; //@line 4986 "cPickle.c"
        var $retval3=$retval; //@line 4986 "cPickle.c"
        ;
        return $retval3; //@line 4986 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_inst($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $i;
        var $s=__stackBase__;
        $self_addr=$self;
        var $1=$self_addr; //@line 4997 "cPickle.c"
        var $2=_marker($1); //@line 4997 "cPickle.c"
        $i=$2; //@line 4997 "cPickle.c"
        var $3=$i; //@line 4997 "cPickle.c"
        var $4=($3) < 0; //@line 4997 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4997 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 4997 "cPickle.c"
        __label__ = 10; break; //@line 4997 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 4998 "cPickle.c"
        var $6=$5+32; //@line 4998 "cPickle.c"
        var $7=HEAP[$6]; //@line 4998 "cPickle.c"
        var $8=$i; //@line 4998 "cPickle.c"
        var $9=_Pdata_clear($7, $8); //@line 4998 "cPickle.c"
        var $10=$self_addr; //@line 4999 "cPickle.c"
        var $11=$10+64; //@line 4999 "cPickle.c"
        var $12=HEAP[$11]; //@line 4999 "cPickle.c"
        var $13=$self_addr; //@line 4999 "cPickle.c"
        var $14=FUNCTION_TABLE[$12]($13, $s); //@line 4999 "cPickle.c"
        var $15=($14) < 0; //@line 4999 "cPickle.c"
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4999 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 4999 "cPickle.c"
        __label__ = 10; break; //@line 4999 "cPickle.c"
      case 4: // $bb3
        var $16=$self_addr; //@line 5000 "cPickle.c"
        var $17=$16+64; //@line 5000 "cPickle.c"
        var $18=HEAP[$17]; //@line 5000 "cPickle.c"
        var $19=$self_addr; //@line 5000 "cPickle.c"
        var $20=FUNCTION_TABLE[$18]($19, $s); //@line 5000 "cPickle.c"
        var $21=($20) < 0; //@line 5000 "cPickle.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5000 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 5000 "cPickle.c"
        __label__ = 10; break; //@line 5000 "cPickle.c"
      case 6: // $bb5
        var $22=$self_addr; //@line 5001 "cPickle.c"
        var $23=$22+32; //@line 5001 "cPickle.c"
        var $24=HEAP[$23]; //@line 5001 "cPickle.c"
        var $25=$24+8; //@line 5001 "cPickle.c"
        var $26=HEAP[$25]; //@line 5001 "cPickle.c"
        var $27=$self_addr; //@line 5001 "cPickle.c"
        var $28=$27+32; //@line 5001 "cPickle.c"
        var $29=HEAP[$28]; //@line 5001 "cPickle.c"
        var $30=$29+12; //@line 5001 "cPickle.c"
        var $31=HEAP[$30]; //@line 5001 "cPickle.c"
        var $32=($26)==($31); //@line 5001 "cPickle.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5001 "cPickle.c"
      case 7: // $bb6
        var $33=$self_addr; //@line 5001 "cPickle.c"
        var $34=$33+32; //@line 5001 "cPickle.c"
        var $35=HEAP[$34]; //@line 5001 "cPickle.c"
        var $36=_Pdata_grow($35); //@line 5001 "cPickle.c"
        var $37=($36) < 0; //@line 5001 "cPickle.c"
        if ($37) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5001 "cPickle.c"
      case 8: // $bb7
        $0=-1; //@line 5001 "cPickle.c"
        __label__ = 10; break; //@line 5001 "cPickle.c"
      case 9: // $bb8
        var $38=HEAP[__Py_NoneStruct]; //@line 5001 "cPickle.c"
        var $39=($38) + 1; //@line 5001 "cPickle.c"
        HEAP[__Py_NoneStruct]=$39; //@line 5001 "cPickle.c"
        var $40=$self_addr; //@line 5001 "cPickle.c"
        var $41=$40+32; //@line 5001 "cPickle.c"
        var $42=HEAP[$41]; //@line 5001 "cPickle.c"
        var $43=$42+16; //@line 5001 "cPickle.c"
        var $44=HEAP[$43]; //@line 5001 "cPickle.c"
        var $45=$self_addr; //@line 5001 "cPickle.c"
        var $46=$45+32; //@line 5001 "cPickle.c"
        var $47=HEAP[$46]; //@line 5001 "cPickle.c"
        var $48=$47+8; //@line 5001 "cPickle.c"
        var $49=HEAP[$48]; //@line 5001 "cPickle.c"
        var $50=$44+4*$49; //@line 5001 "cPickle.c"
        HEAP[$50]=__Py_NoneStruct; //@line 5001 "cPickle.c"
        var $51=($49) + 1; //@line 5001 "cPickle.c"
        var $52=$47+8; //@line 5001 "cPickle.c"
        HEAP[$52]=$51; //@line 5001 "cPickle.c"
        $0=0; //@line 5002 "cPickle.c"
        __label__ = 10; break; //@line 5002 "cPickle.c"
      case 10: // $bb9
        var $53=$0; //@line 4997 "cPickle.c"
        $retval=$53; //@line 4997 "cPickle.c"
        var $retval10=$retval; //@line 4997 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 4997 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_newobj($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $obj;
        $self_addr=$self;
        var $1=$self_addr; //@line 5010 "cPickle.c"
        var $2=$1+32; //@line 5010 "cPickle.c"
        var $3=HEAP[$2]; //@line 5010 "cPickle.c"
        var $4=$3+8; //@line 5010 "cPickle.c"
        var $5=HEAP[$4]; //@line 5010 "cPickle.c"
        var $6=($5)!=0; //@line 5010 "cPickle.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 5010 "cPickle.c"
      case 1: // $bb2_thread
        var $7=HEAP[_UnpicklingError]; //@line 5010 "cPickle.c"
        _PyErr_SetString($7, __str88); //@line 5010 "cPickle.c"
        $obj=0; //@line 5010 "cPickle.c"
        __label__ = 3; break;
      case 2: // $bb2
        var $8=$self_addr; //@line 5010 "cPickle.c"
        var $9=$8+32; //@line 5010 "cPickle.c"
        var $10=HEAP[$9]; //@line 5010 "cPickle.c"
        var $11=$10+16; //@line 5010 "cPickle.c"
        var $12=HEAP[$11]; //@line 5010 "cPickle.c"
        var $13=$self_addr; //@line 5010 "cPickle.c"
        var $14=$13+32; //@line 5010 "cPickle.c"
        var $15=HEAP[$14]; //@line 5010 "cPickle.c"
        var $16=$15+8; //@line 5010 "cPickle.c"
        var $17=HEAP[$16]; //@line 5010 "cPickle.c"
        var $18=($17) - 1; //@line 5010 "cPickle.c"
        var $19=$15+8; //@line 5010 "cPickle.c"
        HEAP[$19]=$18; //@line 5010 "cPickle.c"
        var $20=$15+8; //@line 5010 "cPickle.c"
        var $21=HEAP[$20]; //@line 5010 "cPickle.c"
        var $22=$12+4*$21; //@line 5010 "cPickle.c"
        var $23=HEAP[$22]; //@line 5010 "cPickle.c"
        $obj=$23; //@line 5010 "cPickle.c"
        var $24=($23)==0; //@line 5011 "cPickle.c"
        if ($24) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5011 "cPickle.c"
      case 3: // $bb3
        $0=-1; //@line 5011 "cPickle.c"
        __label__ = 16; break; //@line 5011 "cPickle.c"
      case 4: // $bb4
        var $25=$obj; //@line 5012 "cPickle.c"
        var $26=$25; //@line 5012 "cPickle.c"
        var $27=HEAP[$26]; //@line 5012 "cPickle.c"
        var $28=($27) - 1; //@line 5012 "cPickle.c"
        var $29=$obj; //@line 5012 "cPickle.c"
        var $30=$29; //@line 5012 "cPickle.c"
        HEAP[$30]=$28; //@line 5012 "cPickle.c"
        var $31=$obj; //@line 5012 "cPickle.c"
        var $32=$31; //@line 5012 "cPickle.c"
        var $33=HEAP[$32]; //@line 5012 "cPickle.c"
        var $34=($33)==0; //@line 5012 "cPickle.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5012 "cPickle.c"
      case 5: // $bb5
        var $35=$obj; //@line 5012 "cPickle.c"
        var $36=$35+4; //@line 5012 "cPickle.c"
        var $37=HEAP[$36]; //@line 5012 "cPickle.c"
        var $38=$37+24; //@line 5012 "cPickle.c"
        var $39=HEAP[$38]; //@line 5012 "cPickle.c"
        var $40=$obj; //@line 5012 "cPickle.c"
        FUNCTION_TABLE[$39]($40); //@line 5012 "cPickle.c"
        __label__ = 6; break; //@line 5012 "cPickle.c"
      case 6: // $bb6
        var $41=$self_addr; //@line 5014 "cPickle.c"
        var $42=$41+32; //@line 5014 "cPickle.c"
        var $43=HEAP[$42]; //@line 5014 "cPickle.c"
        var $44=$43+8; //@line 5014 "cPickle.c"
        var $45=HEAP[$44]; //@line 5014 "cPickle.c"
        var $46=($45)!=0; //@line 5014 "cPickle.c"
        if ($46) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 5014 "cPickle.c"
      case 7: // $bb9_thread
        var $47=HEAP[_UnpicklingError]; //@line 5014 "cPickle.c"
        _PyErr_SetString($47, __str88); //@line 5014 "cPickle.c"
        $obj=0; //@line 5014 "cPickle.c"
        __label__ = 9; break;
      case 8: // $bb9
        var $48=$self_addr; //@line 5014 "cPickle.c"
        var $49=$48+32; //@line 5014 "cPickle.c"
        var $50=HEAP[$49]; //@line 5014 "cPickle.c"
        var $51=$50+16; //@line 5014 "cPickle.c"
        var $52=HEAP[$51]; //@line 5014 "cPickle.c"
        var $53=$self_addr; //@line 5014 "cPickle.c"
        var $54=$53+32; //@line 5014 "cPickle.c"
        var $55=HEAP[$54]; //@line 5014 "cPickle.c"
        var $56=$55+8; //@line 5014 "cPickle.c"
        var $57=HEAP[$56]; //@line 5014 "cPickle.c"
        var $58=($57) - 1; //@line 5014 "cPickle.c"
        var $59=$55+8; //@line 5014 "cPickle.c"
        HEAP[$59]=$58; //@line 5014 "cPickle.c"
        var $60=$55+8; //@line 5014 "cPickle.c"
        var $61=HEAP[$60]; //@line 5014 "cPickle.c"
        var $62=$52+4*$61; //@line 5014 "cPickle.c"
        var $63=HEAP[$62]; //@line 5014 "cPickle.c"
        $obj=$63; //@line 5014 "cPickle.c"
        var $64=($63)==0; //@line 5015 "cPickle.c"
        if ($64) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 5015 "cPickle.c"
      case 9: // $bb10
        $0=-1; //@line 5015 "cPickle.c"
        __label__ = 16; break; //@line 5015 "cPickle.c"
      case 10: // $bb11
        var $65=$obj; //@line 5016 "cPickle.c"
        var $66=$65; //@line 5016 "cPickle.c"
        var $67=HEAP[$66]; //@line 5016 "cPickle.c"
        var $68=($67) - 1; //@line 5016 "cPickle.c"
        var $69=$obj; //@line 5016 "cPickle.c"
        var $70=$69; //@line 5016 "cPickle.c"
        HEAP[$70]=$68; //@line 5016 "cPickle.c"
        var $71=$obj; //@line 5016 "cPickle.c"
        var $72=$71; //@line 5016 "cPickle.c"
        var $73=HEAP[$72]; //@line 5016 "cPickle.c"
        var $74=($73)==0; //@line 5016 "cPickle.c"
        if ($74) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5016 "cPickle.c"
      case 11: // $bb12
        var $75=$obj; //@line 5016 "cPickle.c"
        var $76=$75+4; //@line 5016 "cPickle.c"
        var $77=HEAP[$76]; //@line 5016 "cPickle.c"
        var $78=$77+24; //@line 5016 "cPickle.c"
        var $79=HEAP[$78]; //@line 5016 "cPickle.c"
        var $80=$obj; //@line 5016 "cPickle.c"
        FUNCTION_TABLE[$79]($80); //@line 5016 "cPickle.c"
        __label__ = 12; break; //@line 5016 "cPickle.c"
      case 12: // $bb13
        var $81=$self_addr; //@line 5018 "cPickle.c"
        var $82=$81+32; //@line 5018 "cPickle.c"
        var $83=HEAP[$82]; //@line 5018 "cPickle.c"
        var $84=$83+8; //@line 5018 "cPickle.c"
        var $85=HEAP[$84]; //@line 5018 "cPickle.c"
        var $86=$self_addr; //@line 5018 "cPickle.c"
        var $87=$86+32; //@line 5018 "cPickle.c"
        var $88=HEAP[$87]; //@line 5018 "cPickle.c"
        var $89=$88+12; //@line 5018 "cPickle.c"
        var $90=HEAP[$89]; //@line 5018 "cPickle.c"
        var $91=($85)==($90); //@line 5018 "cPickle.c"
        if ($91) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 5018 "cPickle.c"
      case 13: // $bb14
        var $92=$self_addr; //@line 5018 "cPickle.c"
        var $93=$92+32; //@line 5018 "cPickle.c"
        var $94=HEAP[$93]; //@line 5018 "cPickle.c"
        var $95=_Pdata_grow($94); //@line 5018 "cPickle.c"
        var $96=($95) < 0; //@line 5018 "cPickle.c"
        if ($96) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5018 "cPickle.c"
      case 14: // $bb15
        $0=-1; //@line 5018 "cPickle.c"
        __label__ = 16; break; //@line 5018 "cPickle.c"
      case 15: // $bb16
        var $97=HEAP[__Py_NoneStruct]; //@line 5018 "cPickle.c"
        var $98=($97) + 1; //@line 5018 "cPickle.c"
        HEAP[__Py_NoneStruct]=$98; //@line 5018 "cPickle.c"
        var $99=$self_addr; //@line 5018 "cPickle.c"
        var $100=$99+32; //@line 5018 "cPickle.c"
        var $101=HEAP[$100]; //@line 5018 "cPickle.c"
        var $102=$101+16; //@line 5018 "cPickle.c"
        var $103=HEAP[$102]; //@line 5018 "cPickle.c"
        var $104=$self_addr; //@line 5018 "cPickle.c"
        var $105=$104+32; //@line 5018 "cPickle.c"
        var $106=HEAP[$105]; //@line 5018 "cPickle.c"
        var $107=$106+8; //@line 5018 "cPickle.c"
        var $108=HEAP[$107]; //@line 5018 "cPickle.c"
        var $109=$103+4*$108; //@line 5018 "cPickle.c"
        HEAP[$109]=__Py_NoneStruct; //@line 5018 "cPickle.c"
        var $110=($108) + 1; //@line 5018 "cPickle.c"
        var $111=$106+8; //@line 5018 "cPickle.c"
        HEAP[$111]=$110; //@line 5018 "cPickle.c"
        $0=0; //@line 5019 "cPickle.c"
        __label__ = 16; break; //@line 5019 "cPickle.c"
      case 16: // $bb17
        var $112=$0; //@line 5011 "cPickle.c"
        $retval=$112; //@line 5011 "cPickle.c"
        var $retval18=$retval; //@line 5011 "cPickle.c"
        ;
        return $retval18; //@line 5011 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_global($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $s=__stackBase__;
        $self_addr=$self;
        var $1=$self_addr; //@line 5027 "cPickle.c"
        var $2=$1+64; //@line 5027 "cPickle.c"
        var $3=HEAP[$2]; //@line 5027 "cPickle.c"
        var $4=$self_addr; //@line 5027 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 5027 "cPickle.c"
        var $6=($5) < 0; //@line 5027 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5027 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 5027 "cPickle.c"
        __label__ = 8; break; //@line 5027 "cPickle.c"
      case 2: // $bb1
        var $7=$self_addr; //@line 5028 "cPickle.c"
        var $8=$7+64; //@line 5028 "cPickle.c"
        var $9=HEAP[$8]; //@line 5028 "cPickle.c"
        var $10=$self_addr; //@line 5028 "cPickle.c"
        var $11=FUNCTION_TABLE[$9]($10, $s); //@line 5028 "cPickle.c"
        var $12=($11) < 0; //@line 5028 "cPickle.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5028 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 5028 "cPickle.c"
        __label__ = 8; break; //@line 5028 "cPickle.c"
      case 4: // $bb3
        var $13=$self_addr; //@line 5029 "cPickle.c"
        var $14=$13+32; //@line 5029 "cPickle.c"
        var $15=HEAP[$14]; //@line 5029 "cPickle.c"
        var $16=$15+8; //@line 5029 "cPickle.c"
        var $17=HEAP[$16]; //@line 5029 "cPickle.c"
        var $18=$self_addr; //@line 5029 "cPickle.c"
        var $19=$18+32; //@line 5029 "cPickle.c"
        var $20=HEAP[$19]; //@line 5029 "cPickle.c"
        var $21=$20+12; //@line 5029 "cPickle.c"
        var $22=HEAP[$21]; //@line 5029 "cPickle.c"
        var $23=($17)==($22); //@line 5029 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 5029 "cPickle.c"
      case 5: // $bb4
        var $24=$self_addr; //@line 5029 "cPickle.c"
        var $25=$24+32; //@line 5029 "cPickle.c"
        var $26=HEAP[$25]; //@line 5029 "cPickle.c"
        var $27=_Pdata_grow($26); //@line 5029 "cPickle.c"
        var $28=($27) < 0; //@line 5029 "cPickle.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5029 "cPickle.c"
      case 6: // $bb5
        $0=-1; //@line 5029 "cPickle.c"
        __label__ = 8; break; //@line 5029 "cPickle.c"
      case 7: // $bb6
        var $29=HEAP[__Py_NoneStruct]; //@line 5029 "cPickle.c"
        var $30=($29) + 1; //@line 5029 "cPickle.c"
        HEAP[__Py_NoneStruct]=$30; //@line 5029 "cPickle.c"
        var $31=$self_addr; //@line 5029 "cPickle.c"
        var $32=$31+32; //@line 5029 "cPickle.c"
        var $33=HEAP[$32]; //@line 5029 "cPickle.c"
        var $34=$33+16; //@line 5029 "cPickle.c"
        var $35=HEAP[$34]; //@line 5029 "cPickle.c"
        var $36=$self_addr; //@line 5029 "cPickle.c"
        var $37=$36+32; //@line 5029 "cPickle.c"
        var $38=HEAP[$37]; //@line 5029 "cPickle.c"
        var $39=$38+8; //@line 5029 "cPickle.c"
        var $40=HEAP[$39]; //@line 5029 "cPickle.c"
        var $41=$35+4*$40; //@line 5029 "cPickle.c"
        HEAP[$41]=__Py_NoneStruct; //@line 5029 "cPickle.c"
        var $42=($40) + 1; //@line 5029 "cPickle.c"
        var $43=$38+8; //@line 5029 "cPickle.c"
        HEAP[$43]=$42; //@line 5029 "cPickle.c"
        $0=0; //@line 5030 "cPickle.c"
        __label__ = 8; break; //@line 5030 "cPickle.c"
      case 8: // $bb7
        var $44=$0; //@line 5027 "cPickle.c"
        $retval=$44; //@line 5027 "cPickle.c"
        var $retval8=$retval; //@line 5027 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 5027 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_reduce($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 5037 "cPickle.c"
        var $2=$1+32; //@line 5037 "cPickle.c"
        var $3=HEAP[$2]; //@line 5037 "cPickle.c"
        var $4=$3+8; //@line 5037 "cPickle.c"
        var $5=HEAP[$4]; //@line 5037 "cPickle.c"
        var $6=($5) <= 1; //@line 5037 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5037 "cPickle.c"
      case 1: // $bb
        var $7=_stackUnderflow(); //@line 5037 "cPickle.c"
        $0=$7; //@line 5037 "cPickle.c"
        __label__ = 6; break; //@line 5037 "cPickle.c"
      case 2: // $bb1
        var $8=$self_addr; //@line 5038 "cPickle.c"
        var $9=$8+32; //@line 5038 "cPickle.c"
        var $10=HEAP[$9]; //@line 5038 "cPickle.c"
        var $11=$10+8; //@line 5038 "cPickle.c"
        var $12=HEAP[$11]; //@line 5038 "cPickle.c"
        var $13=($12) - 2; //@line 5038 "cPickle.c"
        var $14=$self_addr; //@line 5038 "cPickle.c"
        var $15=$14+32; //@line 5038 "cPickle.c"
        var $16=HEAP[$15]; //@line 5038 "cPickle.c"
        var $17=_Pdata_clear($16, $13); //@line 5038 "cPickle.c"
        var $18=$self_addr; //@line 5039 "cPickle.c"
        var $19=$18+32; //@line 5039 "cPickle.c"
        var $20=HEAP[$19]; //@line 5039 "cPickle.c"
        var $21=$20+8; //@line 5039 "cPickle.c"
        var $22=HEAP[$21]; //@line 5039 "cPickle.c"
        var $23=$self_addr; //@line 5039 "cPickle.c"
        var $24=$23+32; //@line 5039 "cPickle.c"
        var $25=HEAP[$24]; //@line 5039 "cPickle.c"
        var $26=$25+12; //@line 5039 "cPickle.c"
        var $27=HEAP[$26]; //@line 5039 "cPickle.c"
        var $28=($22)==($27); //@line 5039 "cPickle.c"
        if ($28) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 5039 "cPickle.c"
      case 3: // $bb2
        var $29=$self_addr; //@line 5039 "cPickle.c"
        var $30=$29+32; //@line 5039 "cPickle.c"
        var $31=HEAP[$30]; //@line 5039 "cPickle.c"
        var $32=_Pdata_grow($31); //@line 5039 "cPickle.c"
        var $33=($32) < 0; //@line 5039 "cPickle.c"
        if ($33) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 5039 "cPickle.c"
      case 4: // $bb3
        $0=-1; //@line 5039 "cPickle.c"
        __label__ = 6; break; //@line 5039 "cPickle.c"
      case 5: // $bb4
        var $34=HEAP[__Py_NoneStruct]; //@line 5039 "cPickle.c"
        var $35=($34) + 1; //@line 5039 "cPickle.c"
        HEAP[__Py_NoneStruct]=$35; //@line 5039 "cPickle.c"
        var $36=$self_addr; //@line 5039 "cPickle.c"
        var $37=$36+32; //@line 5039 "cPickle.c"
        var $38=HEAP[$37]; //@line 5039 "cPickle.c"
        var $39=$38+16; //@line 5039 "cPickle.c"
        var $40=HEAP[$39]; //@line 5039 "cPickle.c"
        var $41=$self_addr; //@line 5039 "cPickle.c"
        var $42=$41+32; //@line 5039 "cPickle.c"
        var $43=HEAP[$42]; //@line 5039 "cPickle.c"
        var $44=$43+8; //@line 5039 "cPickle.c"
        var $45=HEAP[$44]; //@line 5039 "cPickle.c"
        var $46=$40+4*$45; //@line 5039 "cPickle.c"
        HEAP[$46]=__Py_NoneStruct; //@line 5039 "cPickle.c"
        var $47=($45) + 1; //@line 5039 "cPickle.c"
        var $48=$43+8; //@line 5039 "cPickle.c"
        HEAP[$48]=$47; //@line 5039 "cPickle.c"
        $0=0; //@line 5040 "cPickle.c"
        __label__ = 6; break; //@line 5040 "cPickle.c"
      case 6: // $bb5
        var $49=$0; //@line 5037 "cPickle.c"
        $retval=$49; //@line 5037 "cPickle.c"
        var $retval6=$retval; //@line 5037 "cPickle.c"
        ;
        return $retval6; //@line 5037 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_build($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 5046 "cPickle.c"
        var $2=$1+32; //@line 5046 "cPickle.c"
        var $3=HEAP[$2]; //@line 5046 "cPickle.c"
        var $4=$3+8; //@line 5046 "cPickle.c"
        var $5=HEAP[$4]; //@line 5046 "cPickle.c"
        var $6=($5) <= 0; //@line 5046 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5046 "cPickle.c"
      case 1: // $bb
        var $7=_stackUnderflow(); //@line 5046 "cPickle.c"
        $0=$7; //@line 5046 "cPickle.c"
        __label__ = 3; break; //@line 5046 "cPickle.c"
      case 2: // $bb1
        var $8=$self_addr; //@line 5047 "cPickle.c"
        var $9=$8+32; //@line 5047 "cPickle.c"
        var $10=HEAP[$9]; //@line 5047 "cPickle.c"
        var $11=$10+8; //@line 5047 "cPickle.c"
        var $12=HEAP[$11]; //@line 5047 "cPickle.c"
        var $13=($12) - 1; //@line 5047 "cPickle.c"
        var $14=$self_addr; //@line 5047 "cPickle.c"
        var $15=$14+32; //@line 5047 "cPickle.c"
        var $16=HEAP[$15]; //@line 5047 "cPickle.c"
        var $17=_Pdata_clear($16, $13); //@line 5047 "cPickle.c"
        $0=0; //@line 5048 "cPickle.c"
        __label__ = 3; break; //@line 5048 "cPickle.c"
      case 3: // $bb2
        var $18=$0; //@line 5046 "cPickle.c"
        $retval=$18; //@line 5046 "cPickle.c"
        var $retval3=$retval; //@line 5046 "cPickle.c"
        ;
        return $retval3; //@line 5046 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_extension($self, $nbytes) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $nbytes_addr;
        var $retval;
        var $0;
        var $codebytes=__stackBase__;
        $self_addr=$self;
        $nbytes_addr=$nbytes;
        var $1=$nbytes_addr; //@line 5056 "cPickle.c"
        var $2=($1)!=1; //@line 5056 "cPickle.c"
        var $3=$nbytes_addr; //@line 5056 "cPickle.c"
        var $4=($3)!=2; //@line 5056 "cPickle.c"
        var $or_cond=($2) & ($4);
        var $5=$nbytes_addr; //@line 5056 "cPickle.c"
        var $6=($5)!=4; //@line 5056 "cPickle.c"
        var $or_cond3=($or_cond) & ($6);
        if ($or_cond3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5056 "cPickle.c"
      case 1: // $bb2
        ___assert_fail(__str93, __str15, 5056, ___PRETTY_FUNCTION___15558); //@line 5056 "cPickle.c"
        throw "Reached an unreachable!" //@line 5056 "cPickle.c"
      case 2: // $bb3
        var $7=$self_addr; //@line 5057 "cPickle.c"
        var $8=$7+60; //@line 5057 "cPickle.c"
        var $9=HEAP[$8]; //@line 5057 "cPickle.c"
        var $10=$self_addr; //@line 5057 "cPickle.c"
        var $11=$nbytes_addr; //@line 5057 "cPickle.c"
        var $12=FUNCTION_TABLE[$9]($10, $codebytes, $11); //@line 5057 "cPickle.c"
        var $13=($12) < 0; //@line 5057 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5057 "cPickle.c"
      case 3: // $bb4
        $0=-1; //@line 5057 "cPickle.c"
        __label__ = 8; break; //@line 5057 "cPickle.c"
      case 4: // $bb5
        var $14=$self_addr; //@line 5058 "cPickle.c"
        var $15=$14+32; //@line 5058 "cPickle.c"
        var $16=HEAP[$15]; //@line 5058 "cPickle.c"
        var $17=$16+8; //@line 5058 "cPickle.c"
        var $18=HEAP[$17]; //@line 5058 "cPickle.c"
        var $19=$self_addr; //@line 5058 "cPickle.c"
        var $20=$19+32; //@line 5058 "cPickle.c"
        var $21=HEAP[$20]; //@line 5058 "cPickle.c"
        var $22=$21+12; //@line 5058 "cPickle.c"
        var $23=HEAP[$22]; //@line 5058 "cPickle.c"
        var $24=($18)==($23); //@line 5058 "cPickle.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 5058 "cPickle.c"
      case 5: // $bb6
        var $25=$self_addr; //@line 5058 "cPickle.c"
        var $26=$25+32; //@line 5058 "cPickle.c"
        var $27=HEAP[$26]; //@line 5058 "cPickle.c"
        var $28=_Pdata_grow($27); //@line 5058 "cPickle.c"
        var $29=($28) < 0; //@line 5058 "cPickle.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5058 "cPickle.c"
      case 6: // $bb7
        $0=-1; //@line 5058 "cPickle.c"
        __label__ = 8; break; //@line 5058 "cPickle.c"
      case 7: // $bb8
        var $30=HEAP[__Py_NoneStruct]; //@line 5058 "cPickle.c"
        var $31=($30) + 1; //@line 5058 "cPickle.c"
        HEAP[__Py_NoneStruct]=$31; //@line 5058 "cPickle.c"
        var $32=$self_addr; //@line 5058 "cPickle.c"
        var $33=$32+32; //@line 5058 "cPickle.c"
        var $34=HEAP[$33]; //@line 5058 "cPickle.c"
        var $35=$34+16; //@line 5058 "cPickle.c"
        var $36=HEAP[$35]; //@line 5058 "cPickle.c"
        var $37=$self_addr; //@line 5058 "cPickle.c"
        var $38=$37+32; //@line 5058 "cPickle.c"
        var $39=HEAP[$38]; //@line 5058 "cPickle.c"
        var $40=$39+8; //@line 5058 "cPickle.c"
        var $41=HEAP[$40]; //@line 5058 "cPickle.c"
        var $42=$36+4*$41; //@line 5058 "cPickle.c"
        HEAP[$42]=__Py_NoneStruct; //@line 5058 "cPickle.c"
        var $43=($41) + 1; //@line 5058 "cPickle.c"
        var $44=$39+8; //@line 5058 "cPickle.c"
        HEAP[$44]=$43; //@line 5058 "cPickle.c"
        $0=0; //@line 5059 "cPickle.c"
        __label__ = 8; break; //@line 5059 "cPickle.c"
      case 8: // $bb9
        var $45=$0; //@line 5057 "cPickle.c"
        $retval=$45; //@line 5057 "cPickle.c"
        var $retval10=$retval; //@line 5057 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 5057 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_append($self) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=$self_addr; //@line 5065 "cPickle.c"
    var $2=$1+32; //@line 5065 "cPickle.c"
    var $3=HEAP[$2]; //@line 5065 "cPickle.c"
    var $4=$3+8; //@line 5065 "cPickle.c"
    var $5=HEAP[$4]; //@line 5065 "cPickle.c"
    var $6=($5) - 1; //@line 5065 "cPickle.c"
    var $7=$self_addr; //@line 5065 "cPickle.c"
    var $8=$7+32; //@line 5065 "cPickle.c"
    var $9=HEAP[$8]; //@line 5065 "cPickle.c"
    var $10=_Pdata_clear($9, $6); //@line 5065 "cPickle.c"
    $0=$10; //@line 5065 "cPickle.c"
    var $11=$0; //@line 5065 "cPickle.c"
    $retval=$11; //@line 5065 "cPickle.c"
    var $retval1=$retval; //@line 5065 "cPickle.c"
    ;
    return $retval1; //@line 5065 "cPickle.c"
  }
  

  function _noload_appends($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $i;
        $self_addr=$self;
        var $1=$self_addr; //@line 5072 "cPickle.c"
        var $2=_marker($1); //@line 5072 "cPickle.c"
        $i=$2; //@line 5072 "cPickle.c"
        var $3=$i; //@line 5072 "cPickle.c"
        var $4=($3) < 0; //@line 5072 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5072 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 5072 "cPickle.c"
        __label__ = 3; break; //@line 5072 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 5073 "cPickle.c"
        var $6=$5+32; //@line 5073 "cPickle.c"
        var $7=HEAP[$6]; //@line 5073 "cPickle.c"
        var $8=$i; //@line 5073 "cPickle.c"
        var $9=_Pdata_clear($7, $8); //@line 5073 "cPickle.c"
        $0=$9; //@line 5073 "cPickle.c"
        __label__ = 3; break; //@line 5073 "cPickle.c"
      case 3: // $bb2
        var $10=$0; //@line 5072 "cPickle.c"
        $retval=$10; //@line 5072 "cPickle.c"
        var $retval3=$retval; //@line 5072 "cPickle.c"
        ;
        return $retval3; //@line 5072 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_setitem($self) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=$self_addr; //@line 5079 "cPickle.c"
    var $2=$1+32; //@line 5079 "cPickle.c"
    var $3=HEAP[$2]; //@line 5079 "cPickle.c"
    var $4=$3+8; //@line 5079 "cPickle.c"
    var $5=HEAP[$4]; //@line 5079 "cPickle.c"
    var $6=($5) - 2; //@line 5079 "cPickle.c"
    var $7=$self_addr; //@line 5079 "cPickle.c"
    var $8=$7+32; //@line 5079 "cPickle.c"
    var $9=HEAP[$8]; //@line 5079 "cPickle.c"
    var $10=_Pdata_clear($9, $6); //@line 5079 "cPickle.c"
    $0=$10; //@line 5079 "cPickle.c"
    var $11=$0; //@line 5079 "cPickle.c"
    $retval=$11; //@line 5079 "cPickle.c"
    var $retval1=$retval; //@line 5079 "cPickle.c"
    ;
    return $retval1; //@line 5079 "cPickle.c"
  }
  

  function _noload_setitems($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $i;
        $self_addr=$self;
        var $1=$self_addr; //@line 5086 "cPickle.c"
        var $2=_marker($1); //@line 5086 "cPickle.c"
        $i=$2; //@line 5086 "cPickle.c"
        var $3=$i; //@line 5086 "cPickle.c"
        var $4=($3) < 0; //@line 5086 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5086 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 5086 "cPickle.c"
        __label__ = 3; break; //@line 5086 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 5087 "cPickle.c"
        var $6=$5+32; //@line 5087 "cPickle.c"
        var $7=HEAP[$6]; //@line 5087 "cPickle.c"
        var $8=$i; //@line 5087 "cPickle.c"
        var $9=_Pdata_clear($7, $8); //@line 5087 "cPickle.c"
        $0=$9; //@line 5087 "cPickle.c"
        __label__ = 3; break; //@line 5087 "cPickle.c"
      case 3: // $bb2
        var $10=$0; //@line 5086 "cPickle.c"
        $retval=$10; //@line 5086 "cPickle.c"
        var $retval3=$retval; //@line 5086 "cPickle.c"
        ;
        return $retval3; //@line 5086 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $err;
        var $val;
        var $s=__stackBase__;
        $self_addr=$self;
        $err=0; //@line 5093 "cPickle.c"
        $val=0; //@line 5093 "cPickle.c"
        var $1=$self_addr; //@line 5096 "cPickle.c"
        var $2=$1+52; //@line 5096 "cPickle.c"
        HEAP[$2]=0; //@line 5096 "cPickle.c"
        var $3=$self_addr; //@line 5097 "cPickle.c"
        var $4=$3+32; //@line 5097 "cPickle.c"
        var $5=HEAP[$4]; //@line 5097 "cPickle.c"
        var $6=_Pdata_clear($5, 0); //@line 5097 "cPickle.c"
        __label__ = 1; break; //@line 5097 "cPickle.c"
      case 1: // $bb
        var $7=$self_addr; //@line 5100 "cPickle.c"
        var $8=$7+60; //@line 5100 "cPickle.c"
        var $9=HEAP[$8]; //@line 5100 "cPickle.c"
        var $10=$self_addr; //@line 5100 "cPickle.c"
        var $11=FUNCTION_TABLE[$9]($10, $s, 1); //@line 5100 "cPickle.c"
        var $12=($11) < 0; //@line 5100 "cPickle.c"
        if ($12) { __label__ = 56; break; } else { __label__ = 2; break; } //@line 5100 "cPickle.c"
      case 2: // $bb1
        var $13=HEAP[$s]; //@line 5103 "cPickle.c"
        var $14=$13; //@line 5103 "cPickle.c"
        var $15=HEAP[$14]; //@line 5103 "cPickle.c"
        var $16=($15); //@line 5103 "cPickle.c"
        if ($16 == -128) {
          __label__ = 52; break;
        }
        else if ($16 == -127) {
          __label__ = 29; break;
        }
        else if ($16 == -126) {
          __label__ = 38; break;
        }
        else if ($16 == -125) {
          __label__ = 39; break;
        }
        else if ($16 == -124) {
          __label__ = 40; break;
        }
        else if ($16 == -123) {
          __label__ = 19; break;
        }
        else if ($16 == -122) {
          __label__ = 20; break;
        }
        else if ($16 == -121) {
          __label__ = 21; break;
        }
        else if ($16 == -120) {
          __label__ = 53; break;
        }
        else if ($16 == -119) {
          __label__ = 54; break;
        }
        else if ($16 == -118) {
          __label__ = 9; break;
        }
        else if ($16 == -117) {
          __label__ = 10; break;
        }
        else if ($16 == 40) {
          __label__ = 41; break;
        }
        else if ($16 == 41) {
          __label__ = 18; break;
        }
        else if ($16 == 46) {
          __label__ = 56; break;
        }
        else if ($16 == 48) {
          __label__ = 45; break;
        }
        else if ($16 == 49) {
          __label__ = 46; break;
        }
        else if ($16 == 50) {
          __label__ = 34; break;
        }
        else if ($16 == 70) {
          __label__ = 11; break;
        }
        else if ($16 == 71) {
          __label__ = 12; break;
        }
        else if ($16 == 73) {
          __label__ = 7; break;
        }
        else if ($16 == 74) {
          __label__ = 4; break;
        }
        else if ($16 == 75) {
          __label__ = 5; break;
        }
        else if ($16 == 76) {
          __label__ = 8; break;
        }
        else if ($16 == 77) {
          __label__ = 6; break;
        }
        else if ($16 == 78) {
          __label__ = 3; break;
        }
        else if ($16 == 80) {
          __label__ = 49; break;
        }
        else if ($16 == 81) {
          __label__ = 50; break;
        }
        else if ($16 == 82) {
          __label__ = 51; break;
        }
        else if ($16 == 83) {
          __label__ = 15; break;
        }
        else if ($16 == 84) {
          __label__ = 13; break;
        }
        else if ($16 == 85) {
          __label__ = 14; break;
        }
        else if ($16 == 86) {
          __label__ = 16; break;
        }
        else if ($16 == 88) {
          __label__ = 17; break;
        }
        else if ($16 == 93) {
          __label__ = 23; break;
        }
        else if ($16 == 97) {
          __label__ = 31; break;
        }
        else if ($16 == 98) {
          __label__ = 33; break;
        }
        else if ($16 == 99) {
          __label__ = 30; break;
        }
        else if ($16 == 100) {
          __label__ = 26; break;
        }
        else if ($16 == 101) {
          __label__ = 32; break;
        }
        else if ($16 == 103) {
          __label__ = 37; break;
        }
        else if ($16 == 104) {
          __label__ = 35; break;
        }
        else if ($16 == 105) {
          __label__ = 28; break;
        }
        else if ($16 == 106) {
          __label__ = 36; break;
        }
        else if ($16 == 108) {
          __label__ = 24; break;
        }
        else if ($16 == 111) {
          __label__ = 27; break;
        }
        else if ($16 == 112) {
          __label__ = 44; break;
        }
        else if ($16 == 113) {
          __label__ = 42; break;
        }
        else if ($16 == 114) {
          __label__ = 43; break;
        }
        else if ($16 == 115) {
          __label__ = 47; break;
        }
        else if ($16 == 116) {
          __label__ = 22; break;
        }
        else if ($16 == 117) {
          __label__ = 48; break;
        }
        else if ($16 == 125) {
          __label__ = 25; break;
        }
        else {
        __label__ = 55; break;
        }
        
      case 3: // $bb2
        var $17=$self_addr; //@line 5105 "cPickle.c"
        var $18=_load_none($17); //@line 5105 "cPickle.c"
        var $19=($18) < 0; //@line 5105 "cPickle.c"
        if ($19) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5105 "cPickle.c"
      case 4: // $bb4
        var $20=$self_addr; //@line 5110 "cPickle.c"
        var $21=_load_binint($20); //@line 5110 "cPickle.c"
        var $22=($21) < 0; //@line 5110 "cPickle.c"
        if ($22) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5110 "cPickle.c"
      case 5: // $bb6
        var $23=$self_addr; //@line 5115 "cPickle.c"
        var $24=_load_binint1($23); //@line 5115 "cPickle.c"
        var $25=($24) < 0; //@line 5115 "cPickle.c"
        if ($25) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5115 "cPickle.c"
      case 6: // $bb8
        var $26=$self_addr; //@line 5120 "cPickle.c"
        var $27=_load_binint2($26); //@line 5120 "cPickle.c"
        var $28=($27) < 0; //@line 5120 "cPickle.c"
        if ($28) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5120 "cPickle.c"
      case 7: // $bb10
        var $29=$self_addr; //@line 5125 "cPickle.c"
        var $30=_load_int($29); //@line 5125 "cPickle.c"
        var $31=($30) < 0; //@line 5125 "cPickle.c"
        if ($31) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5125 "cPickle.c"
      case 8: // $bb12
        var $32=$self_addr; //@line 5130 "cPickle.c"
        var $33=_load_long($32); //@line 5130 "cPickle.c"
        var $34=($33) < 0; //@line 5130 "cPickle.c"
        if ($34) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5130 "cPickle.c"
      case 9: // $bb14
        var $35=$self_addr; //@line 5135 "cPickle.c"
        var $36=_load_counted_long($35, 1); //@line 5135 "cPickle.c"
        var $37=($36) < 0; //@line 5135 "cPickle.c"
        if ($37) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5135 "cPickle.c"
      case 10: // $bb16
        var $38=$self_addr; //@line 5140 "cPickle.c"
        var $39=_load_counted_long($38, 4); //@line 5140 "cPickle.c"
        var $40=($39) < 0; //@line 5140 "cPickle.c"
        if ($40) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5140 "cPickle.c"
      case 11: // $bb18
        var $41=$self_addr; //@line 5145 "cPickle.c"
        var $42=_load_float($41); //@line 5145 "cPickle.c"
        var $43=($42) < 0; //@line 5145 "cPickle.c"
        if ($43) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5145 "cPickle.c"
      case 12: // $bb20
        var $44=$self_addr; //@line 5150 "cPickle.c"
        var $45=_load_binfloat($44); //@line 5150 "cPickle.c"
        var $46=($45) < 0; //@line 5150 "cPickle.c"
        if ($46) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5150 "cPickle.c"
      case 13: // $bb22
        var $47=$self_addr; //@line 5155 "cPickle.c"
        var $48=_load_binstring($47); //@line 5155 "cPickle.c"
        var $49=($48) < 0; //@line 5155 "cPickle.c"
        if ($49) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5155 "cPickle.c"
      case 14: // $bb24
        var $50=$self_addr; //@line 5160 "cPickle.c"
        var $51=_load_short_binstring($50); //@line 5160 "cPickle.c"
        var $52=($51) < 0; //@line 5160 "cPickle.c"
        if ($52) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5160 "cPickle.c"
      case 15: // $bb26
        var $53=$self_addr; //@line 5165 "cPickle.c"
        var $54=_load_string($53); //@line 5165 "cPickle.c"
        var $55=($54) < 0; //@line 5165 "cPickle.c"
        if ($55) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5165 "cPickle.c"
      case 16: // $bb28
        var $56=$self_addr; //@line 5171 "cPickle.c"
        var $57=_load_unicode($56); //@line 5171 "cPickle.c"
        var $58=($57) < 0; //@line 5171 "cPickle.c"
        if ($58) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5171 "cPickle.c"
      case 17: // $bb30
        var $59=$self_addr; //@line 5176 "cPickle.c"
        var $60=_load_binunicode($59); //@line 5176 "cPickle.c"
        var $61=($60) < 0; //@line 5176 "cPickle.c"
        if ($61) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5176 "cPickle.c"
      case 18: // $bb32
        var $62=$self_addr; //@line 5182 "cPickle.c"
        var $63=_load_counted_tuple($62, 0); //@line 5182 "cPickle.c"
        var $64=($63) < 0; //@line 5182 "cPickle.c"
        if ($64) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5182 "cPickle.c"
      case 19: // $bb34
        var $65=$self_addr; //@line 5187 "cPickle.c"
        var $66=_load_counted_tuple($65, 1); //@line 5187 "cPickle.c"
        var $67=($66) < 0; //@line 5187 "cPickle.c"
        if ($67) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5187 "cPickle.c"
      case 20: // $bb36
        var $68=$self_addr; //@line 5192 "cPickle.c"
        var $69=_load_counted_tuple($68, 2); //@line 5192 "cPickle.c"
        var $70=($69) < 0; //@line 5192 "cPickle.c"
        if ($70) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5192 "cPickle.c"
      case 21: // $bb38
        var $71=$self_addr; //@line 5197 "cPickle.c"
        var $72=_load_counted_tuple($71, 3); //@line 5197 "cPickle.c"
        var $73=($72) < 0; //@line 5197 "cPickle.c"
        if ($73) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5197 "cPickle.c"
      case 22: // $bb40
        var $74=$self_addr; //@line 5202 "cPickle.c"
        var $75=_load_tuple($74); //@line 5202 "cPickle.c"
        var $76=($75) < 0; //@line 5202 "cPickle.c"
        if ($76) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5202 "cPickle.c"
      case 23: // $bb42
        var $77=$self_addr; //@line 5207 "cPickle.c"
        var $78=_load_empty_list($77); //@line 5207 "cPickle.c"
        var $79=($78) < 0; //@line 5207 "cPickle.c"
        if ($79) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5207 "cPickle.c"
      case 24: // $bb44
        var $80=$self_addr; //@line 5212 "cPickle.c"
        var $81=_load_list($80); //@line 5212 "cPickle.c"
        var $82=($81) < 0; //@line 5212 "cPickle.c"
        if ($82) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5212 "cPickle.c"
      case 25: // $bb46
        var $83=$self_addr; //@line 5217 "cPickle.c"
        var $84=_load_empty_dict($83); //@line 5217 "cPickle.c"
        var $85=($84) < 0; //@line 5217 "cPickle.c"
        if ($85) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5217 "cPickle.c"
      case 26: // $bb48
        var $86=$self_addr; //@line 5222 "cPickle.c"
        var $87=_load_dict($86); //@line 5222 "cPickle.c"
        var $88=($87) < 0; //@line 5222 "cPickle.c"
        if ($88) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5222 "cPickle.c"
      case 27: // $bb50
        var $89=$self_addr; //@line 5227 "cPickle.c"
        var $90=_noload_obj($89); //@line 5227 "cPickle.c"
        var $91=($90) < 0; //@line 5227 "cPickle.c"
        if ($91) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5227 "cPickle.c"
      case 28: // $bb52
        var $92=$self_addr; //@line 5232 "cPickle.c"
        var $93=_noload_inst($92); //@line 5232 "cPickle.c"
        var $94=($93) < 0; //@line 5232 "cPickle.c"
        if ($94) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5232 "cPickle.c"
      case 29: // $bb54
        var $95=$self_addr; //@line 5237 "cPickle.c"
        var $96=_noload_newobj($95); //@line 5237 "cPickle.c"
        var $97=($96) < 0; //@line 5237 "cPickle.c"
        if ($97) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5237 "cPickle.c"
      case 30: // $bb56
        var $98=$self_addr; //@line 5242 "cPickle.c"
        var $99=_noload_global($98); //@line 5242 "cPickle.c"
        var $100=($99) < 0; //@line 5242 "cPickle.c"
        if ($100) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5242 "cPickle.c"
      case 31: // $bb58
        var $101=$self_addr; //@line 5247 "cPickle.c"
        var $102=_noload_append($101); //@line 5247 "cPickle.c"
        var $103=($102) < 0; //@line 5247 "cPickle.c"
        if ($103) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5247 "cPickle.c"
      case 32: // $bb60
        var $104=$self_addr; //@line 5252 "cPickle.c"
        var $105=_noload_appends($104); //@line 5252 "cPickle.c"
        var $106=($105) < 0; //@line 5252 "cPickle.c"
        if ($106) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5252 "cPickle.c"
      case 33: // $bb62
        var $107=$self_addr; //@line 5257 "cPickle.c"
        var $108=_noload_build($107); //@line 5257 "cPickle.c"
        var $109=($108) < 0; //@line 5257 "cPickle.c"
        if ($109) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5257 "cPickle.c"
      case 34: // $bb64
        var $110=$self_addr; //@line 5262 "cPickle.c"
        var $111=_load_dup($110); //@line 5262 "cPickle.c"
        var $112=($111) < 0; //@line 5262 "cPickle.c"
        if ($112) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5262 "cPickle.c"
      case 35: // $bb66
        var $113=$self_addr; //@line 5267 "cPickle.c"
        var $114=_load_binget($113); //@line 5267 "cPickle.c"
        var $115=($114) < 0; //@line 5267 "cPickle.c"
        if ($115) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5267 "cPickle.c"
      case 36: // $bb68
        var $116=$self_addr; //@line 5272 "cPickle.c"
        var $117=_load_long_binget($116); //@line 5272 "cPickle.c"
        var $118=($117) < 0; //@line 5272 "cPickle.c"
        if ($118) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5272 "cPickle.c"
      case 37: // $bb70
        var $119=$self_addr; //@line 5277 "cPickle.c"
        var $120=_load_get($119); //@line 5277 "cPickle.c"
        var $121=($120) < 0; //@line 5277 "cPickle.c"
        if ($121) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5277 "cPickle.c"
      case 38: // $bb72
        var $122=$self_addr; //@line 5282 "cPickle.c"
        var $123=_noload_extension($122, 1); //@line 5282 "cPickle.c"
        var $124=($123) < 0; //@line 5282 "cPickle.c"
        if ($124) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5282 "cPickle.c"
      case 39: // $bb74
        var $125=$self_addr; //@line 5287 "cPickle.c"
        var $126=_noload_extension($125, 2); //@line 5287 "cPickle.c"
        var $127=($126) < 0; //@line 5287 "cPickle.c"
        if ($127) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5287 "cPickle.c"
      case 40: // $bb76
        var $128=$self_addr; //@line 5292 "cPickle.c"
        var $129=_noload_extension($128, 4); //@line 5292 "cPickle.c"
        var $130=($129) < 0; //@line 5292 "cPickle.c"
        if ($130) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5292 "cPickle.c"
      case 41: // $bb78
        var $131=$self_addr; //@line 5297 "cPickle.c"
        var $132=_load_mark($131); //@line 5297 "cPickle.c"
        var $133=($132) < 0; //@line 5297 "cPickle.c"
        if ($133) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5297 "cPickle.c"
      case 42: // $bb80
        var $134=$self_addr; //@line 5302 "cPickle.c"
        var $135=_load_binput($134); //@line 5302 "cPickle.c"
        var $136=($135) < 0; //@line 5302 "cPickle.c"
        if ($136) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5302 "cPickle.c"
      case 43: // $bb82
        var $137=$self_addr; //@line 5307 "cPickle.c"
        var $138=_load_long_binput($137); //@line 5307 "cPickle.c"
        var $139=($138) < 0; //@line 5307 "cPickle.c"
        if ($139) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5307 "cPickle.c"
      case 44: // $bb84
        var $140=$self_addr; //@line 5312 "cPickle.c"
        var $141=_load_put($140); //@line 5312 "cPickle.c"
        var $142=($141) < 0; //@line 5312 "cPickle.c"
        if ($142) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5312 "cPickle.c"
      case 45: // $bb86
        var $143=$self_addr; //@line 5317 "cPickle.c"
        var $144=_load_pop($143); //@line 5317 "cPickle.c"
        var $145=($144) < 0; //@line 5317 "cPickle.c"
        if ($145) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5317 "cPickle.c"
      case 46: // $bb88
        var $146=$self_addr; //@line 5322 "cPickle.c"
        var $147=_load_pop_mark($146); //@line 5322 "cPickle.c"
        var $148=($147) < 0; //@line 5322 "cPickle.c"
        if ($148) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5322 "cPickle.c"
      case 47: // $bb90
        var $149=$self_addr; //@line 5327 "cPickle.c"
        var $150=_noload_setitem($149); //@line 5327 "cPickle.c"
        var $151=($150) < 0; //@line 5327 "cPickle.c"
        if ($151) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5327 "cPickle.c"
      case 48: // $bb92
        var $152=$self_addr; //@line 5332 "cPickle.c"
        var $153=_noload_setitems($152); //@line 5332 "cPickle.c"
        var $154=($153) < 0; //@line 5332 "cPickle.c"
        if ($154) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5332 "cPickle.c"
      case 49: // $bb95
        var $155=$self_addr; //@line 5340 "cPickle.c"
        var $156=_load_persid($155); //@line 5340 "cPickle.c"
        var $157=($156) < 0; //@line 5340 "cPickle.c"
        if ($157) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5340 "cPickle.c"
      case 50: // $bb97
        var $158=$self_addr; //@line 5345 "cPickle.c"
        var $159=_load_binpersid($158); //@line 5345 "cPickle.c"
        var $160=($159) < 0; //@line 5345 "cPickle.c"
        if ($160) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5345 "cPickle.c"
      case 51: // $bb99
        var $161=$self_addr; //@line 5350 "cPickle.c"
        var $162=_noload_reduce($161); //@line 5350 "cPickle.c"
        var $163=($162) < 0; //@line 5350 "cPickle.c"
        if ($163) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5350 "cPickle.c"
      case 52: // $bb101
        var $164=$self_addr; //@line 5355 "cPickle.c"
        var $165=_load_proto($164); //@line 5355 "cPickle.c"
        var $166=($165) < 0; //@line 5355 "cPickle.c"
        if ($166) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5355 "cPickle.c"
      case 53: // $bb103
        var $167=$self_addr; //@line 5360 "cPickle.c"
        var $168=_load_bool($167, __Py_TrueStruct); //@line 5360 "cPickle.c"
        var $169=($168) < 0; //@line 5360 "cPickle.c"
        if ($169) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5360 "cPickle.c"
      case 54: // $bb105
        var $170=$self_addr; //@line 5365 "cPickle.c"
        var $171=_load_bool($170, __Py_ZeroStruct); //@line 5365 "cPickle.c"
        var $172=($171) < 0; //@line 5365 "cPickle.c"
        if ($172) { __label__ = 56; break; } else { __label__ = 1; break; } //@line 5365 "cPickle.c"
      case 55: // $bb107
        var $173=HEAP[$s]; //@line 5369 "cPickle.c"
        var $174=$173; //@line 5369 "cPickle.c"
        var $175=HEAP[$174]; //@line 5369 "cPickle.c"
        var $176=($175); //@line 5369 "cPickle.c"
        var $177=HEAP[_UnpicklingError]; //@line 5369 "cPickle.c"
        _cPickle_ErrFormat($177, __str101, __str102, allocate([$176,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 5369 "cPickle.c"
        $0=0; //@line 5372 "cPickle.c"
        __label__ = 64; break; //@line 5372 "cPickle.c"
      case 56: // $bb110
        var $178=_PyErr_Occurred(); //@line 5378 "cPickle.c"
        $err=$178; //@line 5378 "cPickle.c"
        var $179=($178)!=0; //@line 5378 "cPickle.c"
        if ($179) { __label__ = 57; break; } else { __label__ = 60; break; } //@line 5378 "cPickle.c"
      case 57: // $bb111
        var $180=HEAP[_PyExc_EOFError]; //@line 5379 "cPickle.c"
        var $181=$err; //@line 5379 "cPickle.c"
        var $182=($181)==($180); //@line 5379 "cPickle.c"
        if ($182) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 5379 "cPickle.c"
      case 58: // $bb112
        var $183=HEAP[_PyExc_EOFError]; //@line 5380 "cPickle.c"
        _PyErr_SetNone($183); //@line 5380 "cPickle.c"
        __label__ = 59; break; //@line 5380 "cPickle.c"
      case 59: // $bb113
        $0=0; //@line 5382 "cPickle.c"
        __label__ = 64; break; //@line 5382 "cPickle.c"
      case 60: // $bb114
        var $184=$self_addr; //@line 5385 "cPickle.c"
        var $185=$184+32; //@line 5385 "cPickle.c"
        var $186=HEAP[$185]; //@line 5385 "cPickle.c"
        var $187=$186+8; //@line 5385 "cPickle.c"
        var $188=HEAP[$187]; //@line 5385 "cPickle.c"
        var $189=($188)!=0; //@line 5385 "cPickle.c"
        if ($189) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 5385 "cPickle.c"
      case 61: // $bb115
        var $190=$self_addr; //@line 5385 "cPickle.c"
        var $191=$190+32; //@line 5385 "cPickle.c"
        var $192=HEAP[$191]; //@line 5385 "cPickle.c"
        var $193=$192+16; //@line 5385 "cPickle.c"
        var $194=HEAP[$193]; //@line 5385 "cPickle.c"
        var $195=$self_addr; //@line 5385 "cPickle.c"
        var $196=$195+32; //@line 5385 "cPickle.c"
        var $197=HEAP[$196]; //@line 5385 "cPickle.c"
        var $198=$197+8; //@line 5385 "cPickle.c"
        var $199=HEAP[$198]; //@line 5385 "cPickle.c"
        var $200=($199) - 1; //@line 5385 "cPickle.c"
        var $201=$197+8; //@line 5385 "cPickle.c"
        HEAP[$201]=$200; //@line 5385 "cPickle.c"
        var $202=$197+8; //@line 5385 "cPickle.c"
        var $203=HEAP[$202]; //@line 5385 "cPickle.c"
        var $204=$194+4*$203; //@line 5385 "cPickle.c"
        var $205=HEAP[$204]; //@line 5385 "cPickle.c"
        $val=$205; //@line 5385 "cPickle.c"
        __label__ = 63; break; //@line 5385 "cPickle.c"
      case 62: // $bb116
        var $206=HEAP[_UnpicklingError]; //@line 5385 "cPickle.c"
        _PyErr_SetString($206, __str88); //@line 5385 "cPickle.c"
        $val=0; //@line 5385 "cPickle.c"
        __label__ = 63; break; //@line 5385 "cPickle.c"
      case 63: // $bb117
        var $207=$val; //@line 5386 "cPickle.c"
        $0=$207; //@line 5386 "cPickle.c"
        __label__ = 64; break; //@line 5386 "cPickle.c"
      case 64: // $bb118
        var $208=$0; //@line 5372 "cPickle.c"
        $retval=$208; //@line 5372 "cPickle.c"
        var $retval119=$retval; //@line 5372 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval119; //@line 5372 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_load($self, $unused) {
    ;
    var __label__;
  
    var $self_addr;
    var $unused_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $unused_addr=$unused;
    var $1=$self_addr; //@line 5393 "cPickle.c"
    var $2=_load($1); //@line 5393 "cPickle.c"
    $0=$2; //@line 5393 "cPickle.c"
    var $3=$0; //@line 5393 "cPickle.c"
    $retval=$3; //@line 5393 "cPickle.c"
    var $retval1=$retval; //@line 5393 "cPickle.c"
    ;
    return $retval1; //@line 5393 "cPickle.c"
  }
  

  function _Unpickler_noload($self, $unused) {
    ;
    var __label__;
  
    var $self_addr;
    var $unused_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $unused_addr=$unused;
    var $1=$self_addr; //@line 5399 "cPickle.c"
    var $2=_noload($1); //@line 5399 "cPickle.c"
    $0=$2; //@line 5399 "cPickle.c"
    var $3=$0; //@line 5399 "cPickle.c"
    $retval=$3; //@line 5399 "cPickle.c"
    var $retval1=$retval; //@line 5399 "cPickle.c"
    ;
    return $retval1; //@line 5399 "cPickle.c"
  }
  

  function _newUnpicklerobject($f) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $f_addr;
        var $retval;
        var $0;
        var $self;
        $f_addr=$f;
        var $1=__PyObject_GC_New(_Unpicklertype); //@line 5425 "cPickle.c"
        var $2=$1; //@line 5425 "cPickle.c"
        $self=$2; //@line 5425 "cPickle.c"
        var $3=$self; //@line 5425 "cPickle.c"
        var $4=($3)==0; //@line 5425 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5425 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 5426 "cPickle.c"
        __label__ = 18; break; //@line 5426 "cPickle.c"
      case 2: // $bb1
        var $5=$self; //@line 5428 "cPickle.c"
        var $6=$5+12; //@line 5428 "cPickle.c"
        HEAP[$6]=0; //@line 5428 "cPickle.c"
        var $7=$self; //@line 5429 "cPickle.c"
        var $8=$7+28; //@line 5429 "cPickle.c"
        HEAP[$8]=0; //@line 5429 "cPickle.c"
        var $9=_Pdata_New(); //@line 5430 "cPickle.c"
        var $10=$9; //@line 5430 "cPickle.c"
        var $11=$self; //@line 5430 "cPickle.c"
        var $12=$11+32; //@line 5430 "cPickle.c"
        HEAP[$12]=$10; //@line 5430 "cPickle.c"
        var $13=$self; //@line 5431 "cPickle.c"
        var $14=$13+40; //@line 5431 "cPickle.c"
        HEAP[$14]=0; //@line 5431 "cPickle.c"
        var $15=$self; //@line 5432 "cPickle.c"
        var $16=$15+44; //@line 5432 "cPickle.c"
        HEAP[$16]=0; //@line 5432 "cPickle.c"
        var $17=$self; //@line 5433 "cPickle.c"
        var $18=$17+48; //@line 5433 "cPickle.c"
        HEAP[$18]=0; //@line 5433 "cPickle.c"
        var $19=$self; //@line 5434 "cPickle.c"
        var $20=$19+52; //@line 5434 "cPickle.c"
        HEAP[$20]=0; //@line 5434 "cPickle.c"
        var $21=$self; //@line 5435 "cPickle.c"
        var $22=$21+56; //@line 5435 "cPickle.c"
        HEAP[$22]=0; //@line 5435 "cPickle.c"
        var $23=$self; //@line 5436 "cPickle.c"
        var $24=$23+68; //@line 5436 "cPickle.c"
        HEAP[$24]=0; //@line 5436 "cPickle.c"
        var $25=$self; //@line 5437 "cPickle.c"
        var $26=$25+20; //@line 5437 "cPickle.c"
        HEAP[$26]=0; //@line 5437 "cPickle.c"
        var $27=$self; //@line 5438 "cPickle.c"
        var $28=$27+16; //@line 5438 "cPickle.c"
        HEAP[$28]=0; //@line 5438 "cPickle.c"
        var $29=$self; //@line 5439 "cPickle.c"
        var $30=$29+76; //@line 5439 "cPickle.c"
        HEAP[$30]=0; //@line 5439 "cPickle.c"
        var $31=_PyDict_New(); //@line 5441 "cPickle.c"
        var $32=$self; //@line 5441 "cPickle.c"
        var $33=$32+24; //@line 5441 "cPickle.c"
        HEAP[$33]=$31; //@line 5441 "cPickle.c"
        var $34=$self; //@line 5441 "cPickle.c"
        var $35=$34+24; //@line 5441 "cPickle.c"
        var $36=HEAP[$35]; //@line 5441 "cPickle.c"
        var $37=($36)==0; //@line 5441 "cPickle.c"
        if ($37) { __label__ = 15; break; } else { __label__ = 3; break; } //@line 5441 "cPickle.c"
      case 3: // $bb2
        var $38=$self; //@line 5444 "cPickle.c"
        var $39=$38+32; //@line 5444 "cPickle.c"
        var $40=HEAP[$39]; //@line 5444 "cPickle.c"
        var $41=($40)==0; //@line 5444 "cPickle.c"
        if ($41) { __label__ = 15; break; } else { __label__ = 4; break; } //@line 5444 "cPickle.c"
      case 4: // $bb3
        var $42=$f_addr; //@line 5447 "cPickle.c"
        var $43=$42; //@line 5447 "cPickle.c"
        var $44=HEAP[$43]; //@line 5447 "cPickle.c"
        var $45=($44) + 1; //@line 5447 "cPickle.c"
        var $46=$f_addr; //@line 5447 "cPickle.c"
        var $47=$46; //@line 5447 "cPickle.c"
        HEAP[$47]=$45; //@line 5447 "cPickle.c"
        var $48=$self; //@line 5448 "cPickle.c"
        var $49=$48+12; //@line 5448 "cPickle.c"
        var $50=$f_addr; //@line 5448 "cPickle.c"
        HEAP[$49]=$50; //@line 5448 "cPickle.c"
        var $51=$f_addr; //@line 5451 "cPickle.c"
        var $52=$51+4; //@line 5451 "cPickle.c"
        var $53=HEAP[$52]; //@line 5451 "cPickle.c"
        var $54=($53)==(_PyFile_Type); //@line 5451 "cPickle.c"
        if ($54) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 5451 "cPickle.c"
      case 5: // $bb4
        var $55=$f_addr; //@line 5451 "cPickle.c"
        var $56=$55+4; //@line 5451 "cPickle.c"
        var $57=HEAP[$56]; //@line 5451 "cPickle.c"
        var $58=_PyType_IsSubtype($57, _PyFile_Type); //@line 5451 "cPickle.c"
        var $59=($58)!=0; //@line 5451 "cPickle.c"
        if ($59) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 5451 "cPickle.c"
      case 6: // $bb5
        var $60=$f_addr; //@line 5452 "cPickle.c"
        var $61=_PyFile_AsFile($60); //@line 5452 "cPickle.c"
        var $62=$self; //@line 5452 "cPickle.c"
        var $63=$62+8; //@line 5452 "cPickle.c"
        HEAP[$63]=$61; //@line 5452 "cPickle.c"
        var $64=$self; //@line 5453 "cPickle.c"
        var $65=$64+8; //@line 5453 "cPickle.c"
        var $66=HEAP[$65]; //@line 5453 "cPickle.c"
        var $67=($66)==0; //@line 5453 "cPickle.c"
        if ($67) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5453 "cPickle.c"
      case 7: // $bb6
        var $68=HEAP[_PyExc_ValueError]; //@line 5454 "cPickle.c"
        _PyErr_SetString($68, __str61); //@line 5454 "cPickle.c"
        __label__ = 15; break; //@line 5454 "cPickle.c"
      case 8: // $bb7
        var $69=$self; //@line 5458 "cPickle.c"
        var $70=$69+60; //@line 5458 "cPickle.c"
        HEAP[$70]=(FUNCTION_TABLE_OFFSET + 12); //@line 5458 "cPickle.c"
        var $71=$self; //@line 5459 "cPickle.c"
        var $72=$71+64; //@line 5459 "cPickle.c"
        HEAP[$72]=(FUNCTION_TABLE_OFFSET + 14); //@line 5459 "cPickle.c"
        __label__ = 14; break; //@line 5459 "cPickle.c"
      case 9: // $bb8
        var $73=$f_addr; //@line 5461 "cPickle.c"
        var $74=$73+4; //@line 5461 "cPickle.c"
        var $75=HEAP[$74]; //@line 5461 "cPickle.c"
        var $76=HEAP[_PycStringIO]; //@line 5461 "cPickle.c"
        var $77=$76+24; //@line 5461 "cPickle.c"
        var $78=HEAP[$77]; //@line 5461 "cPickle.c"
        var $79=($75)==($78); //@line 5461 "cPickle.c"
        var $80=$self; //@line 5462 "cPickle.c"
        var $81=$80+8; //@line 5462 "cPickle.c"
        HEAP[$81]=0; //@line 5462 "cPickle.c"
        var $82=$self; //@line 5463 "cPickle.c"
        var $83=$82+60; //@line 5463 "cPickle.c"
        if ($79) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5461 "cPickle.c"
      case 10: // $bb9
        HEAP[$83]=(FUNCTION_TABLE_OFFSET + 16); //@line 5463 "cPickle.c"
        var $84=$self; //@line 5464 "cPickle.c"
        var $85=$84+64; //@line 5464 "cPickle.c"
        HEAP[$85]=(FUNCTION_TABLE_OFFSET + 18); //@line 5464 "cPickle.c"
        __label__ = 14; break; //@line 5464 "cPickle.c"
      case 11: // $bb10
        HEAP[$83]=(FUNCTION_TABLE_OFFSET + 20); //@line 5469 "cPickle.c"
        var $86=$self; //@line 5470 "cPickle.c"
        var $87=$86+64; //@line 5470 "cPickle.c"
        HEAP[$87]=(FUNCTION_TABLE_OFFSET + 22); //@line 5470 "cPickle.c"
        var $88=HEAP[_readline_str]; //@line 5472 "cPickle.c"
        var $89=$f_addr; //@line 5472 "cPickle.c"
        var $90=_PyObject_GetAttr($89, $88); //@line 5472 "cPickle.c"
        var $91=$self; //@line 5472 "cPickle.c"
        var $92=$91+16; //@line 5472 "cPickle.c"
        HEAP[$92]=$90; //@line 5472 "cPickle.c"
        var $93=$self; //@line 5472 "cPickle.c"
        var $94=$93+16; //@line 5472 "cPickle.c"
        var $95=HEAP[$94]; //@line 5472 "cPickle.c"
        var $96=($95)==0; //@line 5472 "cPickle.c"
        if ($96) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 5472 "cPickle.c"
      case 12: // $bb11
        var $97=HEAP[_read_str]; //@line 5472 "cPickle.c"
        var $98=$f_addr; //@line 5472 "cPickle.c"
        var $99=_PyObject_GetAttr($98, $97); //@line 5472 "cPickle.c"
        var $100=$self; //@line 5472 "cPickle.c"
        var $101=$100+20; //@line 5472 "cPickle.c"
        HEAP[$101]=$99; //@line 5472 "cPickle.c"
        var $102=$self; //@line 5472 "cPickle.c"
        var $103=$102+20; //@line 5472 "cPickle.c"
        var $104=HEAP[$103]; //@line 5472 "cPickle.c"
        var $105=($104)==0; //@line 5472 "cPickle.c"
        if ($105) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5472 "cPickle.c"
      case 13: // $bb12
        _PyErr_Clear(); //@line 5474 "cPickle.c"
        var $106=HEAP[_PyExc_TypeError]; //@line 5475 "cPickle.c"
        _PyErr_SetString($106, __str107); //@line 5475 "cPickle.c"
        __label__ = 15; break; //@line 5475 "cPickle.c"
      case 14: // $bb13
        var $107=$self; //@line 5481 "cPickle.c"
        var $108=$107; //@line 5481 "cPickle.c"
        _PyObject_GC_Track($108); //@line 5481 "cPickle.c"
        var $109=$self; //@line 5483 "cPickle.c"
        $0=$109; //@line 5483 "cPickle.c"
        __label__ = 18; break; //@line 5483 "cPickle.c"
      case 15: // $err
        var $110=$self; //@line 5486 "cPickle.c"
        var $111=$110; //@line 5486 "cPickle.c"
        var $112=$111; //@line 5486 "cPickle.c"
        var $113=HEAP[$112]; //@line 5486 "cPickle.c"
        var $114=($113) - 1; //@line 5486 "cPickle.c"
        var $115=$111; //@line 5486 "cPickle.c"
        HEAP[$115]=$114; //@line 5486 "cPickle.c"
        var $116=$111; //@line 5486 "cPickle.c"
        var $117=HEAP[$116]; //@line 5486 "cPickle.c"
        var $118=($117)==0; //@line 5486 "cPickle.c"
        if ($118) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 5486 "cPickle.c"
      case 16: // $bb14
        var $119=$self; //@line 5486 "cPickle.c"
        var $120=$119; //@line 5486 "cPickle.c"
        var $121=$120+4; //@line 5486 "cPickle.c"
        var $122=HEAP[$121]; //@line 5486 "cPickle.c"
        var $123=$122+24; //@line 5486 "cPickle.c"
        var $124=HEAP[$123]; //@line 5486 "cPickle.c"
        var $125=$self; //@line 5486 "cPickle.c"
        var $126=$125; //@line 5486 "cPickle.c"
        FUNCTION_TABLE[$124]($126); //@line 5486 "cPickle.c"
        __label__ = 17; break; //@line 5486 "cPickle.c"
      case 17: // $bb15
        $0=0; //@line 5487 "cPickle.c"
        __label__ = 18; break; //@line 5487 "cPickle.c"
      case 18: // $bb16
        var $127=$0; //@line 5426 "cPickle.c"
        $retval=$127; //@line 5426 "cPickle.c"
        var $retval17=$retval; //@line 5426 "cPickle.c"
        ;
        return $retval17; //@line 5426 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_Unpickler($self, $file) {
    ;
    var __label__;
  
    var $self_addr;
    var $file_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $file_addr=$file;
    var $1=$file_addr; //@line 5494 "cPickle.c"
    var $2=_newUnpicklerobject($1); //@line 5494 "cPickle.c"
    var $3=$2; //@line 5494 "cPickle.c"
    $0=$3; //@line 5494 "cPickle.c"
    var $4=$0; //@line 5494 "cPickle.c"
    $retval=$4; //@line 5494 "cPickle.c"
    var $retval1=$retval; //@line 5494 "cPickle.c"
    ;
    return $retval1; //@line 5494 "cPickle.c"
  }
  

  function _Unpickler_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        $self_addr=$self;
        var $0=$self_addr; //@line 5501 "cPickle.c"
        var $1=$0; //@line 5501 "cPickle.c"
        _PyObject_GC_UnTrack($1); //@line 5501 "cPickle.c"
        var $2=$self_addr; //@line 5502 "cPickle.c"
        var $3=$2+16; //@line 5502 "cPickle.c"
        var $4=HEAP[$3]; //@line 5502 "cPickle.c"
        var $5=($4)!=0; //@line 5502 "cPickle.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 5502 "cPickle.c"
      case 1: // $bb
        var $6=$self_addr; //@line 5502 "cPickle.c"
        var $7=$6+16; //@line 5502 "cPickle.c"
        var $8=HEAP[$7]; //@line 5502 "cPickle.c"
        var $9=$8; //@line 5502 "cPickle.c"
        var $10=HEAP[$9]; //@line 5502 "cPickle.c"
        var $11=($10) - 1; //@line 5502 "cPickle.c"
        var $12=$8; //@line 5502 "cPickle.c"
        HEAP[$12]=$11; //@line 5502 "cPickle.c"
        var $13=$8; //@line 5502 "cPickle.c"
        var $14=HEAP[$13]; //@line 5502 "cPickle.c"
        var $15=($14)==0; //@line 5502 "cPickle.c"
        if ($15) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5502 "cPickle.c"
      case 2: // $bb1
        var $16=$self_addr; //@line 5502 "cPickle.c"
        var $17=$16+16; //@line 5502 "cPickle.c"
        var $18=HEAP[$17]; //@line 5502 "cPickle.c"
        var $19=$18+4; //@line 5502 "cPickle.c"
        var $20=HEAP[$19]; //@line 5502 "cPickle.c"
        var $21=$20+24; //@line 5502 "cPickle.c"
        var $22=HEAP[$21]; //@line 5502 "cPickle.c"
        var $23=$self_addr; //@line 5502 "cPickle.c"
        var $24=$23+16; //@line 5502 "cPickle.c"
        var $25=HEAP[$24]; //@line 5502 "cPickle.c"
        FUNCTION_TABLE[$22]($25); //@line 5502 "cPickle.c"
        __label__ = 3; break; //@line 5502 "cPickle.c"
      case 3: // $bb2
        var $26=$self_addr; //@line 5503 "cPickle.c"
        var $27=$26+20; //@line 5503 "cPickle.c"
        var $28=HEAP[$27]; //@line 5503 "cPickle.c"
        var $29=($28)!=0; //@line 5503 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5503 "cPickle.c"
      case 4: // $bb3
        var $30=$self_addr; //@line 5503 "cPickle.c"
        var $31=$30+20; //@line 5503 "cPickle.c"
        var $32=HEAP[$31]; //@line 5503 "cPickle.c"
        var $33=$32; //@line 5503 "cPickle.c"
        var $34=HEAP[$33]; //@line 5503 "cPickle.c"
        var $35=($34) - 1; //@line 5503 "cPickle.c"
        var $36=$32; //@line 5503 "cPickle.c"
        HEAP[$36]=$35; //@line 5503 "cPickle.c"
        var $37=$32; //@line 5503 "cPickle.c"
        var $38=HEAP[$37]; //@line 5503 "cPickle.c"
        var $39=($38)==0; //@line 5503 "cPickle.c"
        if ($39) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5503 "cPickle.c"
      case 5: // $bb4
        var $40=$self_addr; //@line 5503 "cPickle.c"
        var $41=$40+20; //@line 5503 "cPickle.c"
        var $42=HEAP[$41]; //@line 5503 "cPickle.c"
        var $43=$42+4; //@line 5503 "cPickle.c"
        var $44=HEAP[$43]; //@line 5503 "cPickle.c"
        var $45=$44+24; //@line 5503 "cPickle.c"
        var $46=HEAP[$45]; //@line 5503 "cPickle.c"
        var $47=$self_addr; //@line 5503 "cPickle.c"
        var $48=$47+20; //@line 5503 "cPickle.c"
        var $49=HEAP[$48]; //@line 5503 "cPickle.c"
        FUNCTION_TABLE[$46]($49); //@line 5503 "cPickle.c"
        __label__ = 6; break; //@line 5503 "cPickle.c"
      case 6: // $bb5
        var $50=$self_addr; //@line 5504 "cPickle.c"
        var $51=$50+12; //@line 5504 "cPickle.c"
        var $52=HEAP[$51]; //@line 5504 "cPickle.c"
        var $53=($52)!=0; //@line 5504 "cPickle.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5504 "cPickle.c"
      case 7: // $bb6
        var $54=$self_addr; //@line 5504 "cPickle.c"
        var $55=$54+12; //@line 5504 "cPickle.c"
        var $56=HEAP[$55]; //@line 5504 "cPickle.c"
        var $57=$56; //@line 5504 "cPickle.c"
        var $58=HEAP[$57]; //@line 5504 "cPickle.c"
        var $59=($58) - 1; //@line 5504 "cPickle.c"
        var $60=$56; //@line 5504 "cPickle.c"
        HEAP[$60]=$59; //@line 5504 "cPickle.c"
        var $61=$56; //@line 5504 "cPickle.c"
        var $62=HEAP[$61]; //@line 5504 "cPickle.c"
        var $63=($62)==0; //@line 5504 "cPickle.c"
        if ($63) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5504 "cPickle.c"
      case 8: // $bb7
        var $64=$self_addr; //@line 5504 "cPickle.c"
        var $65=$64+12; //@line 5504 "cPickle.c"
        var $66=HEAP[$65]; //@line 5504 "cPickle.c"
        var $67=$66+4; //@line 5504 "cPickle.c"
        var $68=HEAP[$67]; //@line 5504 "cPickle.c"
        var $69=$68+24; //@line 5504 "cPickle.c"
        var $70=HEAP[$69]; //@line 5504 "cPickle.c"
        var $71=$self_addr; //@line 5504 "cPickle.c"
        var $72=$71+12; //@line 5504 "cPickle.c"
        var $73=HEAP[$72]; //@line 5504 "cPickle.c"
        FUNCTION_TABLE[$70]($73); //@line 5504 "cPickle.c"
        __label__ = 9; break; //@line 5504 "cPickle.c"
      case 9: // $bb8
        var $74=$self_addr; //@line 5505 "cPickle.c"
        var $75=$74+24; //@line 5505 "cPickle.c"
        var $76=HEAP[$75]; //@line 5505 "cPickle.c"
        var $77=($76)!=0; //@line 5505 "cPickle.c"
        if ($77) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 5505 "cPickle.c"
      case 10: // $bb9
        var $78=$self_addr; //@line 5505 "cPickle.c"
        var $79=$78+24; //@line 5505 "cPickle.c"
        var $80=HEAP[$79]; //@line 5505 "cPickle.c"
        var $81=$80; //@line 5505 "cPickle.c"
        var $82=HEAP[$81]; //@line 5505 "cPickle.c"
        var $83=($82) - 1; //@line 5505 "cPickle.c"
        var $84=$80; //@line 5505 "cPickle.c"
        HEAP[$84]=$83; //@line 5505 "cPickle.c"
        var $85=$80; //@line 5505 "cPickle.c"
        var $86=HEAP[$85]; //@line 5505 "cPickle.c"
        var $87=($86)==0; //@line 5505 "cPickle.c"
        if ($87) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5505 "cPickle.c"
      case 11: // $bb10
        var $88=$self_addr; //@line 5505 "cPickle.c"
        var $89=$88+24; //@line 5505 "cPickle.c"
        var $90=HEAP[$89]; //@line 5505 "cPickle.c"
        var $91=$90+4; //@line 5505 "cPickle.c"
        var $92=HEAP[$91]; //@line 5505 "cPickle.c"
        var $93=$92+24; //@line 5505 "cPickle.c"
        var $94=HEAP[$93]; //@line 5505 "cPickle.c"
        var $95=$self_addr; //@line 5505 "cPickle.c"
        var $96=$95+24; //@line 5505 "cPickle.c"
        var $97=HEAP[$96]; //@line 5505 "cPickle.c"
        FUNCTION_TABLE[$94]($97); //@line 5505 "cPickle.c"
        __label__ = 12; break; //@line 5505 "cPickle.c"
      case 12: // $bb11
        var $98=$self_addr; //@line 5506 "cPickle.c"
        var $99=$98+32; //@line 5506 "cPickle.c"
        var $100=HEAP[$99]; //@line 5506 "cPickle.c"
        var $101=($100)!=0; //@line 5506 "cPickle.c"
        if ($101) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 5506 "cPickle.c"
      case 13: // $bb12
        var $102=$self_addr; //@line 5506 "cPickle.c"
        var $103=$102+32; //@line 5506 "cPickle.c"
        var $104=HEAP[$103]; //@line 5506 "cPickle.c"
        var $105=$104; //@line 5506 "cPickle.c"
        var $106=$105; //@line 5506 "cPickle.c"
        var $107=HEAP[$106]; //@line 5506 "cPickle.c"
        var $108=($107) - 1; //@line 5506 "cPickle.c"
        var $109=$105; //@line 5506 "cPickle.c"
        HEAP[$109]=$108; //@line 5506 "cPickle.c"
        var $110=$105; //@line 5506 "cPickle.c"
        var $111=HEAP[$110]; //@line 5506 "cPickle.c"
        var $112=($111)==0; //@line 5506 "cPickle.c"
        if ($112) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5506 "cPickle.c"
      case 14: // $bb13
        var $113=$self_addr; //@line 5506 "cPickle.c"
        var $114=$113+32; //@line 5506 "cPickle.c"
        var $115=HEAP[$114]; //@line 5506 "cPickle.c"
        var $116=$115; //@line 5506 "cPickle.c"
        var $117=$116+4; //@line 5506 "cPickle.c"
        var $118=HEAP[$117]; //@line 5506 "cPickle.c"
        var $119=$118+24; //@line 5506 "cPickle.c"
        var $120=HEAP[$119]; //@line 5506 "cPickle.c"
        var $121=$self_addr; //@line 5506 "cPickle.c"
        var $122=$121+32; //@line 5506 "cPickle.c"
        var $123=HEAP[$122]; //@line 5506 "cPickle.c"
        var $124=$123; //@line 5506 "cPickle.c"
        FUNCTION_TABLE[$120]($124); //@line 5506 "cPickle.c"
        __label__ = 15; break; //@line 5506 "cPickle.c"
      case 15: // $bb14
        var $125=$self_addr; //@line 5507 "cPickle.c"
        var $126=$125+40; //@line 5507 "cPickle.c"
        var $127=HEAP[$126]; //@line 5507 "cPickle.c"
        var $128=($127)!=0; //@line 5507 "cPickle.c"
        if ($128) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 5507 "cPickle.c"
      case 16: // $bb15
        var $129=$self_addr; //@line 5507 "cPickle.c"
        var $130=$129+40; //@line 5507 "cPickle.c"
        var $131=HEAP[$130]; //@line 5507 "cPickle.c"
        var $132=$131; //@line 5507 "cPickle.c"
        var $133=HEAP[$132]; //@line 5507 "cPickle.c"
        var $134=($133) - 1; //@line 5507 "cPickle.c"
        var $135=$131; //@line 5507 "cPickle.c"
        HEAP[$135]=$134; //@line 5507 "cPickle.c"
        var $136=$131; //@line 5507 "cPickle.c"
        var $137=HEAP[$136]; //@line 5507 "cPickle.c"
        var $138=($137)==0; //@line 5507 "cPickle.c"
        if ($138) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5507 "cPickle.c"
      case 17: // $bb16
        var $139=$self_addr; //@line 5507 "cPickle.c"
        var $140=$139+40; //@line 5507 "cPickle.c"
        var $141=HEAP[$140]; //@line 5507 "cPickle.c"
        var $142=$141+4; //@line 5507 "cPickle.c"
        var $143=HEAP[$142]; //@line 5507 "cPickle.c"
        var $144=$143+24; //@line 5507 "cPickle.c"
        var $145=HEAP[$144]; //@line 5507 "cPickle.c"
        var $146=$self_addr; //@line 5507 "cPickle.c"
        var $147=$146+40; //@line 5507 "cPickle.c"
        var $148=HEAP[$147]; //@line 5507 "cPickle.c"
        FUNCTION_TABLE[$145]($148); //@line 5507 "cPickle.c"
        __label__ = 18; break; //@line 5507 "cPickle.c"
      case 18: // $bb17
        var $149=$self_addr; //@line 5508 "cPickle.c"
        var $150=$149+28; //@line 5508 "cPickle.c"
        var $151=HEAP[$150]; //@line 5508 "cPickle.c"
        var $152=($151)!=0; //@line 5508 "cPickle.c"
        if ($152) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 5508 "cPickle.c"
      case 19: // $bb18
        var $153=$self_addr; //@line 5508 "cPickle.c"
        var $154=$153+28; //@line 5508 "cPickle.c"
        var $155=HEAP[$154]; //@line 5508 "cPickle.c"
        var $156=$155; //@line 5508 "cPickle.c"
        var $157=HEAP[$156]; //@line 5508 "cPickle.c"
        var $158=($157) - 1; //@line 5508 "cPickle.c"
        var $159=$155; //@line 5508 "cPickle.c"
        HEAP[$159]=$158; //@line 5508 "cPickle.c"
        var $160=$155; //@line 5508 "cPickle.c"
        var $161=HEAP[$160]; //@line 5508 "cPickle.c"
        var $162=($161)==0; //@line 5508 "cPickle.c"
        if ($162) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5508 "cPickle.c"
      case 20: // $bb19
        var $163=$self_addr; //@line 5508 "cPickle.c"
        var $164=$163+28; //@line 5508 "cPickle.c"
        var $165=HEAP[$164]; //@line 5508 "cPickle.c"
        var $166=$165+4; //@line 5508 "cPickle.c"
        var $167=HEAP[$166]; //@line 5508 "cPickle.c"
        var $168=$167+24; //@line 5508 "cPickle.c"
        var $169=HEAP[$168]; //@line 5508 "cPickle.c"
        var $170=$self_addr; //@line 5508 "cPickle.c"
        var $171=$170+28; //@line 5508 "cPickle.c"
        var $172=HEAP[$171]; //@line 5508 "cPickle.c"
        FUNCTION_TABLE[$169]($172); //@line 5508 "cPickle.c"
        __label__ = 21; break; //@line 5508 "cPickle.c"
      case 21: // $bb20
        var $173=$self_addr; //@line 5509 "cPickle.c"
        var $174=$173+44; //@line 5509 "cPickle.c"
        var $175=HEAP[$174]; //@line 5509 "cPickle.c"
        var $176=($175)!=0; //@line 5509 "cPickle.c"
        if ($176) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 5509 "cPickle.c"
      case 22: // $bb21
        var $177=$self_addr; //@line 5509 "cPickle.c"
        var $178=$177+44; //@line 5509 "cPickle.c"
        var $179=HEAP[$178]; //@line 5509 "cPickle.c"
        var $180=$179; //@line 5509 "cPickle.c"
        var $181=HEAP[$180]; //@line 5509 "cPickle.c"
        var $182=($181) - 1; //@line 5509 "cPickle.c"
        var $183=$179; //@line 5509 "cPickle.c"
        HEAP[$183]=$182; //@line 5509 "cPickle.c"
        var $184=$179; //@line 5509 "cPickle.c"
        var $185=HEAP[$184]; //@line 5509 "cPickle.c"
        var $186=($185)==0; //@line 5509 "cPickle.c"
        if ($186) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 5509 "cPickle.c"
      case 23: // $bb22
        var $187=$self_addr; //@line 5509 "cPickle.c"
        var $188=$187+44; //@line 5509 "cPickle.c"
        var $189=HEAP[$188]; //@line 5509 "cPickle.c"
        var $190=$189+4; //@line 5509 "cPickle.c"
        var $191=HEAP[$190]; //@line 5509 "cPickle.c"
        var $192=$191+24; //@line 5509 "cPickle.c"
        var $193=HEAP[$192]; //@line 5509 "cPickle.c"
        var $194=$self_addr; //@line 5509 "cPickle.c"
        var $195=$194+44; //@line 5509 "cPickle.c"
        var $196=HEAP[$195]; //@line 5509 "cPickle.c"
        FUNCTION_TABLE[$193]($196); //@line 5509 "cPickle.c"
        __label__ = 24; break; //@line 5509 "cPickle.c"
      case 24: // $bb23
        var $197=$self_addr; //@line 5510 "cPickle.c"
        var $198=$197+76; //@line 5510 "cPickle.c"
        var $199=HEAP[$198]; //@line 5510 "cPickle.c"
        var $200=($199)!=0; //@line 5510 "cPickle.c"
        if ($200) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 5510 "cPickle.c"
      case 25: // $bb24
        var $201=$self_addr; //@line 5510 "cPickle.c"
        var $202=$201+76; //@line 5510 "cPickle.c"
        var $203=HEAP[$202]; //@line 5510 "cPickle.c"
        var $204=$203; //@line 5510 "cPickle.c"
        var $205=HEAP[$204]; //@line 5510 "cPickle.c"
        var $206=($205) - 1; //@line 5510 "cPickle.c"
        var $207=$203; //@line 5510 "cPickle.c"
        HEAP[$207]=$206; //@line 5510 "cPickle.c"
        var $208=$203; //@line 5510 "cPickle.c"
        var $209=HEAP[$208]; //@line 5510 "cPickle.c"
        var $210=($209)==0; //@line 5510 "cPickle.c"
        if ($210) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 5510 "cPickle.c"
      case 26: // $bb25
        var $211=$self_addr; //@line 5510 "cPickle.c"
        var $212=$211+76; //@line 5510 "cPickle.c"
        var $213=HEAP[$212]; //@line 5510 "cPickle.c"
        var $214=$213+4; //@line 5510 "cPickle.c"
        var $215=HEAP[$214]; //@line 5510 "cPickle.c"
        var $216=$215+24; //@line 5510 "cPickle.c"
        var $217=HEAP[$216]; //@line 5510 "cPickle.c"
        var $218=$self_addr; //@line 5510 "cPickle.c"
        var $219=$218+76; //@line 5510 "cPickle.c"
        var $220=HEAP[$219]; //@line 5510 "cPickle.c"
        FUNCTION_TABLE[$217]($220); //@line 5510 "cPickle.c"
        __label__ = 27; break; //@line 5510 "cPickle.c"
      case 27: // $bb26
        var $221=$self_addr; //@line 5512 "cPickle.c"
        var $222=$221+48; //@line 5512 "cPickle.c"
        var $223=HEAP[$222]; //@line 5512 "cPickle.c"
        var $224=($223)!=0; //@line 5512 "cPickle.c"
        if ($224) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 5512 "cPickle.c"
      case 28: // $bb27
        var $225=$self_addr; //@line 5513 "cPickle.c"
        var $226=$225+48; //@line 5513 "cPickle.c"
        var $227=HEAP[$226]; //@line 5513 "cPickle.c"
        var $228=$227; //@line 5513 "cPickle.c"
        _free($228); //@line 5513 "cPickle.c"
        __label__ = 29; break; //@line 5513 "cPickle.c"
      case 29: // $bb28
        var $229=$self_addr; //@line 5516 "cPickle.c"
        var $230=$229+68; //@line 5516 "cPickle.c"
        var $231=HEAP[$230]; //@line 5516 "cPickle.c"
        var $232=($231)!=0; //@line 5516 "cPickle.c"
        if ($232) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 5516 "cPickle.c"
      case 30: // $bb29
        var $233=$self_addr; //@line 5517 "cPickle.c"
        var $234=$233+72; //@line 5517 "cPickle.c"
        var $235=HEAP[$234]; //@line 5517 "cPickle.c"
        _free($235); //@line 5517 "cPickle.c"
        __label__ = 31; break; //@line 5517 "cPickle.c"
      case 31: // $bb30
        var $236=$self_addr; //@line 5520 "cPickle.c"
        var $237=$236; //@line 5520 "cPickle.c"
        var $238=$237+4; //@line 5520 "cPickle.c"
        var $239=HEAP[$238]; //@line 5520 "cPickle.c"
        var $240=$239+160; //@line 5520 "cPickle.c"
        var $241=HEAP[$240]; //@line 5520 "cPickle.c"
        var $242=$self_addr; //@line 5520 "cPickle.c"
        var $243=$242; //@line 5520 "cPickle.c"
        FUNCTION_TABLE[$241]($243); //@line 5520 "cPickle.c"
        ;
        return; //@line 5521 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_traverse($self, $visit, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $visit_addr;
        var $arg_addr;
        var $retval;
        var $0;
        var $vret;
        var $vret4;
        var $vret8;
        var $vret12;
        var $vret16;
        var $vret20;
        var $vret24;
        var $vret28;
        var $vret32;
        $self_addr=$self;
        $visit_addr=$visit;
        $arg_addr=$arg;
        var $1=$self_addr; //@line 5526 "cPickle.c"
        var $2=$1+16; //@line 5526 "cPickle.c"
        var $3=HEAP[$2]; //@line 5526 "cPickle.c"
        var $4=($3)!=0; //@line 5526 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 5526 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 5526 "cPickle.c"
        var $6=$5+16; //@line 5526 "cPickle.c"
        var $7=HEAP[$6]; //@line 5526 "cPickle.c"
        var $8=$visit_addr; //@line 5526 "cPickle.c"
        var $9=$arg_addr; //@line 5526 "cPickle.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 5526 "cPickle.c"
        $vret=$10; //@line 5526 "cPickle.c"
        var $11=$vret; //@line 5526 "cPickle.c"
        var $12=($11)!=0; //@line 5526 "cPickle.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5526 "cPickle.c"
      case 2: // $bb1
        var $13=$vret; //@line 5526 "cPickle.c"
        $0=$13; //@line 5526 "cPickle.c"
        __label__ = 28; break; //@line 5526 "cPickle.c"
      case 3: // $bb2
        var $14=$self_addr; //@line 5527 "cPickle.c"
        var $15=$14+20; //@line 5527 "cPickle.c"
        var $16=HEAP[$15]; //@line 5527 "cPickle.c"
        var $17=($16)!=0; //@line 5527 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5527 "cPickle.c"
      case 4: // $bb3
        var $18=$self_addr; //@line 5527 "cPickle.c"
        var $19=$18+20; //@line 5527 "cPickle.c"
        var $20=HEAP[$19]; //@line 5527 "cPickle.c"
        var $21=$visit_addr; //@line 5527 "cPickle.c"
        var $22=$arg_addr; //@line 5527 "cPickle.c"
        var $23=FUNCTION_TABLE[$21]($20, $22); //@line 5527 "cPickle.c"
        $vret4=$23; //@line 5527 "cPickle.c"
        var $24=$vret4; //@line 5527 "cPickle.c"
        var $25=($24)!=0; //@line 5527 "cPickle.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5527 "cPickle.c"
      case 5: // $bb5
        var $26=$vret4; //@line 5527 "cPickle.c"
        $0=$26; //@line 5527 "cPickle.c"
        __label__ = 28; break; //@line 5527 "cPickle.c"
      case 6: // $bb6
        var $27=$self_addr; //@line 5528 "cPickle.c"
        var $28=$27+12; //@line 5528 "cPickle.c"
        var $29=HEAP[$28]; //@line 5528 "cPickle.c"
        var $30=($29)!=0; //@line 5528 "cPickle.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5528 "cPickle.c"
      case 7: // $bb7
        var $31=$self_addr; //@line 5528 "cPickle.c"
        var $32=$31+12; //@line 5528 "cPickle.c"
        var $33=HEAP[$32]; //@line 5528 "cPickle.c"
        var $34=$visit_addr; //@line 5528 "cPickle.c"
        var $35=$arg_addr; //@line 5528 "cPickle.c"
        var $36=FUNCTION_TABLE[$34]($33, $35); //@line 5528 "cPickle.c"
        $vret8=$36; //@line 5528 "cPickle.c"
        var $37=$vret8; //@line 5528 "cPickle.c"
        var $38=($37)!=0; //@line 5528 "cPickle.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5528 "cPickle.c"
      case 8: // $bb9
        var $39=$vret8; //@line 5528 "cPickle.c"
        $0=$39; //@line 5528 "cPickle.c"
        __label__ = 28; break; //@line 5528 "cPickle.c"
      case 9: // $bb10
        var $40=$self_addr; //@line 5529 "cPickle.c"
        var $41=$40+24; //@line 5529 "cPickle.c"
        var $42=HEAP[$41]; //@line 5529 "cPickle.c"
        var $43=($42)!=0; //@line 5529 "cPickle.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 5529 "cPickle.c"
      case 10: // $bb11
        var $44=$self_addr; //@line 5529 "cPickle.c"
        var $45=$44+24; //@line 5529 "cPickle.c"
        var $46=HEAP[$45]; //@line 5529 "cPickle.c"
        var $47=$visit_addr; //@line 5529 "cPickle.c"
        var $48=$arg_addr; //@line 5529 "cPickle.c"
        var $49=FUNCTION_TABLE[$47]($46, $48); //@line 5529 "cPickle.c"
        $vret12=$49; //@line 5529 "cPickle.c"
        var $50=$vret12; //@line 5529 "cPickle.c"
        var $51=($50)!=0; //@line 5529 "cPickle.c"
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5529 "cPickle.c"
      case 11: // $bb13
        var $52=$vret12; //@line 5529 "cPickle.c"
        $0=$52; //@line 5529 "cPickle.c"
        __label__ = 28; break; //@line 5529 "cPickle.c"
      case 12: // $bb14
        var $53=$self_addr; //@line 5530 "cPickle.c"
        var $54=$53+32; //@line 5530 "cPickle.c"
        var $55=HEAP[$54]; //@line 5530 "cPickle.c"
        var $56=($55)!=0; //@line 5530 "cPickle.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 5530 "cPickle.c"
      case 13: // $bb15
        var $57=$self_addr; //@line 5530 "cPickle.c"
        var $58=$57+32; //@line 5530 "cPickle.c"
        var $59=HEAP[$58]; //@line 5530 "cPickle.c"
        var $60=$59; //@line 5530 "cPickle.c"
        var $61=$visit_addr; //@line 5530 "cPickle.c"
        var $62=$arg_addr; //@line 5530 "cPickle.c"
        var $63=FUNCTION_TABLE[$61]($60, $62); //@line 5530 "cPickle.c"
        $vret16=$63; //@line 5530 "cPickle.c"
        var $64=$vret16; //@line 5530 "cPickle.c"
        var $65=($64)!=0; //@line 5530 "cPickle.c"
        if ($65) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5530 "cPickle.c"
      case 14: // $bb17
        var $66=$vret16; //@line 5530 "cPickle.c"
        $0=$66; //@line 5530 "cPickle.c"
        __label__ = 28; break; //@line 5530 "cPickle.c"
      case 15: // $bb18
        var $67=$self_addr; //@line 5531 "cPickle.c"
        var $68=$67+40; //@line 5531 "cPickle.c"
        var $69=HEAP[$68]; //@line 5531 "cPickle.c"
        var $70=($69)!=0; //@line 5531 "cPickle.c"
        if ($70) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 5531 "cPickle.c"
      case 16: // $bb19
        var $71=$self_addr; //@line 5531 "cPickle.c"
        var $72=$71+40; //@line 5531 "cPickle.c"
        var $73=HEAP[$72]; //@line 5531 "cPickle.c"
        var $74=$visit_addr; //@line 5531 "cPickle.c"
        var $75=$arg_addr; //@line 5531 "cPickle.c"
        var $76=FUNCTION_TABLE[$74]($73, $75); //@line 5531 "cPickle.c"
        $vret20=$76; //@line 5531 "cPickle.c"
        var $77=$vret20; //@line 5531 "cPickle.c"
        var $78=($77)!=0; //@line 5531 "cPickle.c"
        if ($78) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5531 "cPickle.c"
      case 17: // $bb21
        var $79=$vret20; //@line 5531 "cPickle.c"
        $0=$79; //@line 5531 "cPickle.c"
        __label__ = 28; break; //@line 5531 "cPickle.c"
      case 18: // $bb22
        var $80=$self_addr; //@line 5532 "cPickle.c"
        var $81=$80+28; //@line 5532 "cPickle.c"
        var $82=HEAP[$81]; //@line 5532 "cPickle.c"
        var $83=($82)!=0; //@line 5532 "cPickle.c"
        if ($83) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 5532 "cPickle.c"
      case 19: // $bb23
        var $84=$self_addr; //@line 5532 "cPickle.c"
        var $85=$84+28; //@line 5532 "cPickle.c"
        var $86=HEAP[$85]; //@line 5532 "cPickle.c"
        var $87=$visit_addr; //@line 5532 "cPickle.c"
        var $88=$arg_addr; //@line 5532 "cPickle.c"
        var $89=FUNCTION_TABLE[$87]($86, $88); //@line 5532 "cPickle.c"
        $vret24=$89; //@line 5532 "cPickle.c"
        var $90=$vret24; //@line 5532 "cPickle.c"
        var $91=($90)!=0; //@line 5532 "cPickle.c"
        if ($91) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5532 "cPickle.c"
      case 20: // $bb25
        var $92=$vret24; //@line 5532 "cPickle.c"
        $0=$92; //@line 5532 "cPickle.c"
        __label__ = 28; break; //@line 5532 "cPickle.c"
      case 21: // $bb26
        var $93=$self_addr; //@line 5533 "cPickle.c"
        var $94=$93+44; //@line 5533 "cPickle.c"
        var $95=HEAP[$94]; //@line 5533 "cPickle.c"
        var $96=($95)!=0; //@line 5533 "cPickle.c"
        if ($96) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 5533 "cPickle.c"
      case 22: // $bb27
        var $97=$self_addr; //@line 5533 "cPickle.c"
        var $98=$97+44; //@line 5533 "cPickle.c"
        var $99=HEAP[$98]; //@line 5533 "cPickle.c"
        var $100=$visit_addr; //@line 5533 "cPickle.c"
        var $101=$arg_addr; //@line 5533 "cPickle.c"
        var $102=FUNCTION_TABLE[$100]($99, $101); //@line 5533 "cPickle.c"
        $vret28=$102; //@line 5533 "cPickle.c"
        var $103=$vret28; //@line 5533 "cPickle.c"
        var $104=($103)!=0; //@line 5533 "cPickle.c"
        if ($104) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 5533 "cPickle.c"
      case 23: // $bb29
        var $105=$vret28; //@line 5533 "cPickle.c"
        $0=$105; //@line 5533 "cPickle.c"
        __label__ = 28; break; //@line 5533 "cPickle.c"
      case 24: // $bb30
        var $106=$self_addr; //@line 5534 "cPickle.c"
        var $107=$106+76; //@line 5534 "cPickle.c"
        var $108=HEAP[$107]; //@line 5534 "cPickle.c"
        var $109=($108)!=0; //@line 5534 "cPickle.c"
        if ($109) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 5534 "cPickle.c"
      case 25: // $bb31
        var $110=$self_addr; //@line 5534 "cPickle.c"
        var $111=$110+76; //@line 5534 "cPickle.c"
        var $112=HEAP[$111]; //@line 5534 "cPickle.c"
        var $113=$visit_addr; //@line 5534 "cPickle.c"
        var $114=$arg_addr; //@line 5534 "cPickle.c"
        var $115=FUNCTION_TABLE[$113]($112, $114); //@line 5534 "cPickle.c"
        $vret32=$115; //@line 5534 "cPickle.c"
        var $116=$vret32; //@line 5534 "cPickle.c"
        var $117=($116)!=0; //@line 5534 "cPickle.c"
        if ($117) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 5534 "cPickle.c"
      case 26: // $bb33
        var $118=$vret32; //@line 5534 "cPickle.c"
        $0=$118; //@line 5534 "cPickle.c"
        __label__ = 28; break; //@line 5534 "cPickle.c"
      case 27: // $bb34
        $0=0; //@line 5535 "cPickle.c"
        __label__ = 28; break; //@line 5535 "cPickle.c"
      case 28: // $bb35
        var $119=$0; //@line 5526 "cPickle.c"
        $retval=$119; //@line 5526 "cPickle.c"
        var $retval36=$retval; //@line 5526 "cPickle.c"
        ;
        return $retval36; //@line 5526 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_clear($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        var $_py_tmp4;
        var $_py_tmp8;
        var $_py_tmp12;
        var $_py_tmp16;
        var $_py_tmp20;
        var $_py_tmp24;
        var $_py_tmp28;
        var $_py_tmp32;
        $self_addr=$self;
        var $1=$self_addr; //@line 5541 "cPickle.c"
        var $2=$1+16; //@line 5541 "cPickle.c"
        var $3=HEAP[$2]; //@line 5541 "cPickle.c"
        var $4=($3)!=0; //@line 5541 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 5541 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 5541 "cPickle.c"
        var $6=$5+16; //@line 5541 "cPickle.c"
        var $7=HEAP[$6]; //@line 5541 "cPickle.c"
        $_py_tmp=$7; //@line 5541 "cPickle.c"
        var $8=$self_addr; //@line 5541 "cPickle.c"
        var $9=$8+16; //@line 5541 "cPickle.c"
        HEAP[$9]=0; //@line 5541 "cPickle.c"
        var $10=$_py_tmp; //@line 5541 "cPickle.c"
        var $11=$10; //@line 5541 "cPickle.c"
        var $12=HEAP[$11]; //@line 5541 "cPickle.c"
        var $13=($12) - 1; //@line 5541 "cPickle.c"
        var $14=$_py_tmp; //@line 5541 "cPickle.c"
        var $15=$14; //@line 5541 "cPickle.c"
        HEAP[$15]=$13; //@line 5541 "cPickle.c"
        var $16=$_py_tmp; //@line 5541 "cPickle.c"
        var $17=$16; //@line 5541 "cPickle.c"
        var $18=HEAP[$17]; //@line 5541 "cPickle.c"
        var $19=($18)==0; //@line 5541 "cPickle.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5541 "cPickle.c"
      case 2: // $bb1
        var $20=$_py_tmp; //@line 5541 "cPickle.c"
        var $21=$20+4; //@line 5541 "cPickle.c"
        var $22=HEAP[$21]; //@line 5541 "cPickle.c"
        var $23=$22+24; //@line 5541 "cPickle.c"
        var $24=HEAP[$23]; //@line 5541 "cPickle.c"
        var $25=$_py_tmp; //@line 5541 "cPickle.c"
        FUNCTION_TABLE[$24]($25); //@line 5541 "cPickle.c"
        __label__ = 3; break; //@line 5541 "cPickle.c"
      case 3: // $bb2
        var $26=$self_addr; //@line 5542 "cPickle.c"
        var $27=$26+20; //@line 5542 "cPickle.c"
        var $28=HEAP[$27]; //@line 5542 "cPickle.c"
        var $29=($28)!=0; //@line 5542 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5542 "cPickle.c"
      case 4: // $bb3
        var $30=$self_addr; //@line 5542 "cPickle.c"
        var $31=$30+20; //@line 5542 "cPickle.c"
        var $32=HEAP[$31]; //@line 5542 "cPickle.c"
        $_py_tmp4=$32; //@line 5542 "cPickle.c"
        var $33=$self_addr; //@line 5542 "cPickle.c"
        var $34=$33+20; //@line 5542 "cPickle.c"
        HEAP[$34]=0; //@line 5542 "cPickle.c"
        var $35=$_py_tmp4; //@line 5542 "cPickle.c"
        var $36=$35; //@line 5542 "cPickle.c"
        var $37=HEAP[$36]; //@line 5542 "cPickle.c"
        var $38=($37) - 1; //@line 5542 "cPickle.c"
        var $39=$_py_tmp4; //@line 5542 "cPickle.c"
        var $40=$39; //@line 5542 "cPickle.c"
        HEAP[$40]=$38; //@line 5542 "cPickle.c"
        var $41=$_py_tmp4; //@line 5542 "cPickle.c"
        var $42=$41; //@line 5542 "cPickle.c"
        var $43=HEAP[$42]; //@line 5542 "cPickle.c"
        var $44=($43)==0; //@line 5542 "cPickle.c"
        if ($44) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5542 "cPickle.c"
      case 5: // $bb5
        var $45=$_py_tmp4; //@line 5542 "cPickle.c"
        var $46=$45+4; //@line 5542 "cPickle.c"
        var $47=HEAP[$46]; //@line 5542 "cPickle.c"
        var $48=$47+24; //@line 5542 "cPickle.c"
        var $49=HEAP[$48]; //@line 5542 "cPickle.c"
        var $50=$_py_tmp4; //@line 5542 "cPickle.c"
        FUNCTION_TABLE[$49]($50); //@line 5542 "cPickle.c"
        __label__ = 6; break; //@line 5542 "cPickle.c"
      case 6: // $bb6
        var $51=$self_addr; //@line 5543 "cPickle.c"
        var $52=$51+12; //@line 5543 "cPickle.c"
        var $53=HEAP[$52]; //@line 5543 "cPickle.c"
        var $54=($53)!=0; //@line 5543 "cPickle.c"
        if ($54) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5543 "cPickle.c"
      case 7: // $bb7
        var $55=$self_addr; //@line 5543 "cPickle.c"
        var $56=$55+12; //@line 5543 "cPickle.c"
        var $57=HEAP[$56]; //@line 5543 "cPickle.c"
        $_py_tmp8=$57; //@line 5543 "cPickle.c"
        var $58=$self_addr; //@line 5543 "cPickle.c"
        var $59=$58+12; //@line 5543 "cPickle.c"
        HEAP[$59]=0; //@line 5543 "cPickle.c"
        var $60=$_py_tmp8; //@line 5543 "cPickle.c"
        var $61=$60; //@line 5543 "cPickle.c"
        var $62=HEAP[$61]; //@line 5543 "cPickle.c"
        var $63=($62) - 1; //@line 5543 "cPickle.c"
        var $64=$_py_tmp8; //@line 5543 "cPickle.c"
        var $65=$64; //@line 5543 "cPickle.c"
        HEAP[$65]=$63; //@line 5543 "cPickle.c"
        var $66=$_py_tmp8; //@line 5543 "cPickle.c"
        var $67=$66; //@line 5543 "cPickle.c"
        var $68=HEAP[$67]; //@line 5543 "cPickle.c"
        var $69=($68)==0; //@line 5543 "cPickle.c"
        if ($69) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5543 "cPickle.c"
      case 8: // $bb9
        var $70=$_py_tmp8; //@line 5543 "cPickle.c"
        var $71=$70+4; //@line 5543 "cPickle.c"
        var $72=HEAP[$71]; //@line 5543 "cPickle.c"
        var $73=$72+24; //@line 5543 "cPickle.c"
        var $74=HEAP[$73]; //@line 5543 "cPickle.c"
        var $75=$_py_tmp8; //@line 5543 "cPickle.c"
        FUNCTION_TABLE[$74]($75); //@line 5543 "cPickle.c"
        __label__ = 9; break; //@line 5543 "cPickle.c"
      case 9: // $bb10
        var $76=$self_addr; //@line 5544 "cPickle.c"
        var $77=$76+24; //@line 5544 "cPickle.c"
        var $78=HEAP[$77]; //@line 5544 "cPickle.c"
        var $79=($78)!=0; //@line 5544 "cPickle.c"
        if ($79) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 5544 "cPickle.c"
      case 10: // $bb11
        var $80=$self_addr; //@line 5544 "cPickle.c"
        var $81=$80+24; //@line 5544 "cPickle.c"
        var $82=HEAP[$81]; //@line 5544 "cPickle.c"
        $_py_tmp12=$82; //@line 5544 "cPickle.c"
        var $83=$self_addr; //@line 5544 "cPickle.c"
        var $84=$83+24; //@line 5544 "cPickle.c"
        HEAP[$84]=0; //@line 5544 "cPickle.c"
        var $85=$_py_tmp12; //@line 5544 "cPickle.c"
        var $86=$85; //@line 5544 "cPickle.c"
        var $87=HEAP[$86]; //@line 5544 "cPickle.c"
        var $88=($87) - 1; //@line 5544 "cPickle.c"
        var $89=$_py_tmp12; //@line 5544 "cPickle.c"
        var $90=$89; //@line 5544 "cPickle.c"
        HEAP[$90]=$88; //@line 5544 "cPickle.c"
        var $91=$_py_tmp12; //@line 5544 "cPickle.c"
        var $92=$91; //@line 5544 "cPickle.c"
        var $93=HEAP[$92]; //@line 5544 "cPickle.c"
        var $94=($93)==0; //@line 5544 "cPickle.c"
        if ($94) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5544 "cPickle.c"
      case 11: // $bb13
        var $95=$_py_tmp12; //@line 5544 "cPickle.c"
        var $96=$95+4; //@line 5544 "cPickle.c"
        var $97=HEAP[$96]; //@line 5544 "cPickle.c"
        var $98=$97+24; //@line 5544 "cPickle.c"
        var $99=HEAP[$98]; //@line 5544 "cPickle.c"
        var $100=$_py_tmp12; //@line 5544 "cPickle.c"
        FUNCTION_TABLE[$99]($100); //@line 5544 "cPickle.c"
        __label__ = 12; break; //@line 5544 "cPickle.c"
      case 12: // $bb14
        var $101=$self_addr; //@line 5545 "cPickle.c"
        var $102=$101+32; //@line 5545 "cPickle.c"
        var $103=HEAP[$102]; //@line 5545 "cPickle.c"
        var $104=($103)!=0; //@line 5545 "cPickle.c"
        if ($104) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 5545 "cPickle.c"
      case 13: // $bb15
        var $105=$self_addr; //@line 5545 "cPickle.c"
        var $106=$105+32; //@line 5545 "cPickle.c"
        var $107=HEAP[$106]; //@line 5545 "cPickle.c"
        var $108=$107; //@line 5545 "cPickle.c"
        $_py_tmp16=$108; //@line 5545 "cPickle.c"
        var $109=$self_addr; //@line 5545 "cPickle.c"
        var $110=$109+32; //@line 5545 "cPickle.c"
        HEAP[$110]=0; //@line 5545 "cPickle.c"
        var $111=$_py_tmp16; //@line 5545 "cPickle.c"
        var $112=$111; //@line 5545 "cPickle.c"
        var $113=HEAP[$112]; //@line 5545 "cPickle.c"
        var $114=($113) - 1; //@line 5545 "cPickle.c"
        var $115=$_py_tmp16; //@line 5545 "cPickle.c"
        var $116=$115; //@line 5545 "cPickle.c"
        HEAP[$116]=$114; //@line 5545 "cPickle.c"
        var $117=$_py_tmp16; //@line 5545 "cPickle.c"
        var $118=$117; //@line 5545 "cPickle.c"
        var $119=HEAP[$118]; //@line 5545 "cPickle.c"
        var $120=($119)==0; //@line 5545 "cPickle.c"
        if ($120) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5545 "cPickle.c"
      case 14: // $bb17
        var $121=$_py_tmp16; //@line 5545 "cPickle.c"
        var $122=$121+4; //@line 5545 "cPickle.c"
        var $123=HEAP[$122]; //@line 5545 "cPickle.c"
        var $124=$123+24; //@line 5545 "cPickle.c"
        var $125=HEAP[$124]; //@line 5545 "cPickle.c"
        var $126=$_py_tmp16; //@line 5545 "cPickle.c"
        FUNCTION_TABLE[$125]($126); //@line 5545 "cPickle.c"
        __label__ = 15; break; //@line 5545 "cPickle.c"
      case 15: // $bb18
        var $127=$self_addr; //@line 5546 "cPickle.c"
        var $128=$127+40; //@line 5546 "cPickle.c"
        var $129=HEAP[$128]; //@line 5546 "cPickle.c"
        var $130=($129)!=0; //@line 5546 "cPickle.c"
        if ($130) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 5546 "cPickle.c"
      case 16: // $bb19
        var $131=$self_addr; //@line 5546 "cPickle.c"
        var $132=$131+40; //@line 5546 "cPickle.c"
        var $133=HEAP[$132]; //@line 5546 "cPickle.c"
        $_py_tmp20=$133; //@line 5546 "cPickle.c"
        var $134=$self_addr; //@line 5546 "cPickle.c"
        var $135=$134+40; //@line 5546 "cPickle.c"
        HEAP[$135]=0; //@line 5546 "cPickle.c"
        var $136=$_py_tmp20; //@line 5546 "cPickle.c"
        var $137=$136; //@line 5546 "cPickle.c"
        var $138=HEAP[$137]; //@line 5546 "cPickle.c"
        var $139=($138) - 1; //@line 5546 "cPickle.c"
        var $140=$_py_tmp20; //@line 5546 "cPickle.c"
        var $141=$140; //@line 5546 "cPickle.c"
        HEAP[$141]=$139; //@line 5546 "cPickle.c"
        var $142=$_py_tmp20; //@line 5546 "cPickle.c"
        var $143=$142; //@line 5546 "cPickle.c"
        var $144=HEAP[$143]; //@line 5546 "cPickle.c"
        var $145=($144)==0; //@line 5546 "cPickle.c"
        if ($145) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5546 "cPickle.c"
      case 17: // $bb21
        var $146=$_py_tmp20; //@line 5546 "cPickle.c"
        var $147=$146+4; //@line 5546 "cPickle.c"
        var $148=HEAP[$147]; //@line 5546 "cPickle.c"
        var $149=$148+24; //@line 5546 "cPickle.c"
        var $150=HEAP[$149]; //@line 5546 "cPickle.c"
        var $151=$_py_tmp20; //@line 5546 "cPickle.c"
        FUNCTION_TABLE[$150]($151); //@line 5546 "cPickle.c"
        __label__ = 18; break; //@line 5546 "cPickle.c"
      case 18: // $bb22
        var $152=$self_addr; //@line 5547 "cPickle.c"
        var $153=$152+28; //@line 5547 "cPickle.c"
        var $154=HEAP[$153]; //@line 5547 "cPickle.c"
        var $155=($154)!=0; //@line 5547 "cPickle.c"
        if ($155) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 5547 "cPickle.c"
      case 19: // $bb23
        var $156=$self_addr; //@line 5547 "cPickle.c"
        var $157=$156+28; //@line 5547 "cPickle.c"
        var $158=HEAP[$157]; //@line 5547 "cPickle.c"
        $_py_tmp24=$158; //@line 5547 "cPickle.c"
        var $159=$self_addr; //@line 5547 "cPickle.c"
        var $160=$159+28; //@line 5547 "cPickle.c"
        HEAP[$160]=0; //@line 5547 "cPickle.c"
        var $161=$_py_tmp24; //@line 5547 "cPickle.c"
        var $162=$161; //@line 5547 "cPickle.c"
        var $163=HEAP[$162]; //@line 5547 "cPickle.c"
        var $164=($163) - 1; //@line 5547 "cPickle.c"
        var $165=$_py_tmp24; //@line 5547 "cPickle.c"
        var $166=$165; //@line 5547 "cPickle.c"
        HEAP[$166]=$164; //@line 5547 "cPickle.c"
        var $167=$_py_tmp24; //@line 5547 "cPickle.c"
        var $168=$167; //@line 5547 "cPickle.c"
        var $169=HEAP[$168]; //@line 5547 "cPickle.c"
        var $170=($169)==0; //@line 5547 "cPickle.c"
        if ($170) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5547 "cPickle.c"
      case 20: // $bb25
        var $171=$_py_tmp24; //@line 5547 "cPickle.c"
        var $172=$171+4; //@line 5547 "cPickle.c"
        var $173=HEAP[$172]; //@line 5547 "cPickle.c"
        var $174=$173+24; //@line 5547 "cPickle.c"
        var $175=HEAP[$174]; //@line 5547 "cPickle.c"
        var $176=$_py_tmp24; //@line 5547 "cPickle.c"
        FUNCTION_TABLE[$175]($176); //@line 5547 "cPickle.c"
        __label__ = 21; break; //@line 5547 "cPickle.c"
      case 21: // $bb26
        var $177=$self_addr; //@line 5548 "cPickle.c"
        var $178=$177+44; //@line 5548 "cPickle.c"
        var $179=HEAP[$178]; //@line 5548 "cPickle.c"
        var $180=($179)!=0; //@line 5548 "cPickle.c"
        if ($180) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 5548 "cPickle.c"
      case 22: // $bb27
        var $181=$self_addr; //@line 5548 "cPickle.c"
        var $182=$181+44; //@line 5548 "cPickle.c"
        var $183=HEAP[$182]; //@line 5548 "cPickle.c"
        $_py_tmp28=$183; //@line 5548 "cPickle.c"
        var $184=$self_addr; //@line 5548 "cPickle.c"
        var $185=$184+44; //@line 5548 "cPickle.c"
        HEAP[$185]=0; //@line 5548 "cPickle.c"
        var $186=$_py_tmp28; //@line 5548 "cPickle.c"
        var $187=$186; //@line 5548 "cPickle.c"
        var $188=HEAP[$187]; //@line 5548 "cPickle.c"
        var $189=($188) - 1; //@line 5548 "cPickle.c"
        var $190=$_py_tmp28; //@line 5548 "cPickle.c"
        var $191=$190; //@line 5548 "cPickle.c"
        HEAP[$191]=$189; //@line 5548 "cPickle.c"
        var $192=$_py_tmp28; //@line 5548 "cPickle.c"
        var $193=$192; //@line 5548 "cPickle.c"
        var $194=HEAP[$193]; //@line 5548 "cPickle.c"
        var $195=($194)==0; //@line 5548 "cPickle.c"
        if ($195) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 5548 "cPickle.c"
      case 23: // $bb29
        var $196=$_py_tmp28; //@line 5548 "cPickle.c"
        var $197=$196+4; //@line 5548 "cPickle.c"
        var $198=HEAP[$197]; //@line 5548 "cPickle.c"
        var $199=$198+24; //@line 5548 "cPickle.c"
        var $200=HEAP[$199]; //@line 5548 "cPickle.c"
        var $201=$_py_tmp28; //@line 5548 "cPickle.c"
        FUNCTION_TABLE[$200]($201); //@line 5548 "cPickle.c"
        __label__ = 24; break; //@line 5548 "cPickle.c"
      case 24: // $bb30
        var $202=$self_addr; //@line 5549 "cPickle.c"
        var $203=$202+76; //@line 5549 "cPickle.c"
        var $204=HEAP[$203]; //@line 5549 "cPickle.c"
        var $205=($204)!=0; //@line 5549 "cPickle.c"
        if ($205) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 5549 "cPickle.c"
      case 25: // $bb31
        var $206=$self_addr; //@line 5549 "cPickle.c"
        var $207=$206+76; //@line 5549 "cPickle.c"
        var $208=HEAP[$207]; //@line 5549 "cPickle.c"
        $_py_tmp32=$208; //@line 5549 "cPickle.c"
        var $209=$self_addr; //@line 5549 "cPickle.c"
        var $210=$209+76; //@line 5549 "cPickle.c"
        HEAP[$210]=0; //@line 5549 "cPickle.c"
        var $211=$_py_tmp32; //@line 5549 "cPickle.c"
        var $212=$211; //@line 5549 "cPickle.c"
        var $213=HEAP[$212]; //@line 5549 "cPickle.c"
        var $214=($213) - 1; //@line 5549 "cPickle.c"
        var $215=$_py_tmp32; //@line 5549 "cPickle.c"
        var $216=$215; //@line 5549 "cPickle.c"
        HEAP[$216]=$214; //@line 5549 "cPickle.c"
        var $217=$_py_tmp32; //@line 5549 "cPickle.c"
        var $218=$217; //@line 5549 "cPickle.c"
        var $219=HEAP[$218]; //@line 5549 "cPickle.c"
        var $220=($219)==0; //@line 5549 "cPickle.c"
        if ($220) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 5549 "cPickle.c"
      case 26: // $bb33
        var $221=$_py_tmp32; //@line 5549 "cPickle.c"
        var $222=$221+4; //@line 5549 "cPickle.c"
        var $223=HEAP[$222]; //@line 5549 "cPickle.c"
        var $224=$223+24; //@line 5549 "cPickle.c"
        var $225=HEAP[$224]; //@line 5549 "cPickle.c"
        var $226=$_py_tmp32; //@line 5549 "cPickle.c"
        FUNCTION_TABLE[$225]($226); //@line 5549 "cPickle.c"
        __label__ = 27; break; //@line 5549 "cPickle.c"
      case 27: // $bb34
        $0=0; //@line 5550 "cPickle.c"
        var $227=$0; //@line 5550 "cPickle.c"
        $retval=$227; //@line 5550 "cPickle.c"
        var $retval35=$retval; //@line 5550 "cPickle.c"
        ;
        return $retval35; //@line 5550 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_getattr($self, $name) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $name_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $name_addr=$name;
        var $1=$name_addr; //@line 5556 "cPickle.c"
        var $2=_strcmp($1, __str108); //@line 5556 "cPickle.c"
        var $3=($2)==0; //@line 5556 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 5556 "cPickle.c"
      case 1: // $bb
        var $4=$self_addr; //@line 5557 "cPickle.c"
        var $5=$4+40; //@line 5557 "cPickle.c"
        var $6=HEAP[$5]; //@line 5557 "cPickle.c"
        var $7=($6)==0; //@line 5557 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5557 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[_PyExc_AttributeError]; //@line 5558 "cPickle.c"
        var $9=$name_addr; //@line 5558 "cPickle.c"
        _PyErr_SetString($8, $9); //@line 5558 "cPickle.c"
        $0=0; //@line 5559 "cPickle.c"
        __label__ = 15; break; //@line 5559 "cPickle.c"
      case 3: // $bb2
        var $10=$self_addr; //@line 5562 "cPickle.c"
        var $11=$10+40; //@line 5562 "cPickle.c"
        var $12=HEAP[$11]; //@line 5562 "cPickle.c"
        var $13=$12; //@line 5562 "cPickle.c"
        var $14=HEAP[$13]; //@line 5562 "cPickle.c"
        var $15=($14) + 1; //@line 5562 "cPickle.c"
        var $16=$12; //@line 5562 "cPickle.c"
        HEAP[$16]=$15; //@line 5562 "cPickle.c"
        var $17=$self_addr; //@line 5563 "cPickle.c"
        var $18=$17+40; //@line 5563 "cPickle.c"
        var $19=HEAP[$18]; //@line 5563 "cPickle.c"
        $0=$19; //@line 5563 "cPickle.c"
        __label__ = 15; break; //@line 5563 "cPickle.c"
      case 4: // $bb3
        var $20=$name_addr; //@line 5566 "cPickle.c"
        var $21=_strcmp($20, __str109); //@line 5566 "cPickle.c"
        var $22=($21)==0; //@line 5566 "cPickle.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 5566 "cPickle.c"
      case 5: // $bb4
        var $23=$self_addr; //@line 5567 "cPickle.c"
        var $24=$23+76; //@line 5567 "cPickle.c"
        var $25=HEAP[$24]; //@line 5567 "cPickle.c"
        var $26=($25)==0; //@line 5567 "cPickle.c"
        if ($26) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5567 "cPickle.c"
      case 6: // $bb5
        var $27=HEAP[_PyExc_AttributeError]; //@line 5568 "cPickle.c"
        var $28=$name_addr; //@line 5568 "cPickle.c"
        _PyErr_SetString($27, $28); //@line 5568 "cPickle.c"
        $0=0; //@line 5569 "cPickle.c"
        __label__ = 15; break; //@line 5569 "cPickle.c"
      case 7: // $bb6
        var $29=$self_addr; //@line 5572 "cPickle.c"
        var $30=$29+76; //@line 5572 "cPickle.c"
        var $31=HEAP[$30]; //@line 5572 "cPickle.c"
        var $32=$31; //@line 5572 "cPickle.c"
        var $33=HEAP[$32]; //@line 5572 "cPickle.c"
        var $34=($33) + 1; //@line 5572 "cPickle.c"
        var $35=$31; //@line 5572 "cPickle.c"
        HEAP[$35]=$34; //@line 5572 "cPickle.c"
        var $36=$self_addr; //@line 5573 "cPickle.c"
        var $37=$36+76; //@line 5573 "cPickle.c"
        var $38=HEAP[$37]; //@line 5573 "cPickle.c"
        $0=$38; //@line 5573 "cPickle.c"
        __label__ = 15; break; //@line 5573 "cPickle.c"
      case 8: // $bb7
        var $39=$name_addr; //@line 5576 "cPickle.c"
        var $40=_strcmp($39, __str70); //@line 5576 "cPickle.c"
        var $41=($40)==0; //@line 5576 "cPickle.c"
        if ($41) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 5576 "cPickle.c"
      case 9: // $bb8
        var $42=$self_addr; //@line 5577 "cPickle.c"
        var $43=$42+24; //@line 5577 "cPickle.c"
        var $44=HEAP[$43]; //@line 5577 "cPickle.c"
        var $45=($44)==0; //@line 5577 "cPickle.c"
        if ($45) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5577 "cPickle.c"
      case 10: // $bb9
        var $46=HEAP[_PyExc_AttributeError]; //@line 5578 "cPickle.c"
        var $47=$name_addr; //@line 5578 "cPickle.c"
        _PyErr_SetString($46, $47); //@line 5578 "cPickle.c"
        $0=0; //@line 5579 "cPickle.c"
        __label__ = 15; break; //@line 5579 "cPickle.c"
      case 11: // $bb10
        var $48=$self_addr; //@line 5582 "cPickle.c"
        var $49=$48+24; //@line 5582 "cPickle.c"
        var $50=HEAP[$49]; //@line 5582 "cPickle.c"
        var $51=$50; //@line 5582 "cPickle.c"
        var $52=HEAP[$51]; //@line 5582 "cPickle.c"
        var $53=($52) + 1; //@line 5582 "cPickle.c"
        var $54=$50; //@line 5582 "cPickle.c"
        HEAP[$54]=$53; //@line 5582 "cPickle.c"
        var $55=$self_addr; //@line 5583 "cPickle.c"
        var $56=$55+24; //@line 5583 "cPickle.c"
        var $57=HEAP[$56]; //@line 5583 "cPickle.c"
        $0=$57; //@line 5583 "cPickle.c"
        __label__ = 15; break; //@line 5583 "cPickle.c"
      case 12: // $bb11
        var $58=$name_addr; //@line 5586 "cPickle.c"
        var $59=_strcmp($58, __str110); //@line 5586 "cPickle.c"
        var $60=($59)==0; //@line 5586 "cPickle.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5586 "cPickle.c"
      case 13: // $bb12
        var $61=HEAP[_UnpicklingError]; //@line 5587 "cPickle.c"
        var $62=$61; //@line 5587 "cPickle.c"
        var $63=HEAP[$62]; //@line 5587 "cPickle.c"
        var $64=($63) + 1; //@line 5587 "cPickle.c"
        var $65=$61; //@line 5587 "cPickle.c"
        HEAP[$65]=$64; //@line 5587 "cPickle.c"
        var $66=HEAP[_UnpicklingError]; //@line 5588 "cPickle.c"
        $0=$66; //@line 5588 "cPickle.c"
        __label__ = 15; break; //@line 5588 "cPickle.c"
      case 14: // $bb13
        var $67=$self_addr; //@line 5591 "cPickle.c"
        var $68=$67; //@line 5591 "cPickle.c"
        var $69=$name_addr; //@line 5591 "cPickle.c"
        var $70=_Py_FindMethod(_Unpickler_methods, $68, $69); //@line 5591 "cPickle.c"
        $0=$70; //@line 5591 "cPickle.c"
        __label__ = 15; break; //@line 5591 "cPickle.c"
      case 15: // $bb14
        var $71=$0; //@line 5559 "cPickle.c"
        $retval=$71; //@line 5559 "cPickle.c"
        var $retval15=$retval; //@line 5559 "cPickle.c"
        ;
        return $retval15; //@line 5559 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_setattr($self, $name, $value) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $name_addr;
        var $value_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $name_addr=$name;
        $value_addr=$value;
        var $1=$name_addr; //@line 5599 "cPickle.c"
        var $2=_strcmp($1, __str108); //@line 5599 "cPickle.c"
        var $3=($2)==0; //@line 5599 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 5599 "cPickle.c"
      case 1: // $bb
        var $4=$self_addr; //@line 5600 "cPickle.c"
        var $5=$4+40; //@line 5600 "cPickle.c"
        var $6=HEAP[$5]; //@line 5600 "cPickle.c"
        var $7=($6)!=0; //@line 5600 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 5600 "cPickle.c"
      case 2: // $bb1
        var $8=$self_addr; //@line 5600 "cPickle.c"
        var $9=$8+40; //@line 5600 "cPickle.c"
        var $10=HEAP[$9]; //@line 5600 "cPickle.c"
        var $11=$10; //@line 5600 "cPickle.c"
        var $12=HEAP[$11]; //@line 5600 "cPickle.c"
        var $13=($12) - 1; //@line 5600 "cPickle.c"
        var $14=$10; //@line 5600 "cPickle.c"
        HEAP[$14]=$13; //@line 5600 "cPickle.c"
        var $15=$10; //@line 5600 "cPickle.c"
        var $16=HEAP[$15]; //@line 5600 "cPickle.c"
        var $17=($16)==0; //@line 5600 "cPickle.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5600 "cPickle.c"
      case 3: // $bb2
        var $18=$self_addr; //@line 5600 "cPickle.c"
        var $19=$18+40; //@line 5600 "cPickle.c"
        var $20=HEAP[$19]; //@line 5600 "cPickle.c"
        var $21=$20+4; //@line 5600 "cPickle.c"
        var $22=HEAP[$21]; //@line 5600 "cPickle.c"
        var $23=$22+24; //@line 5600 "cPickle.c"
        var $24=HEAP[$23]; //@line 5600 "cPickle.c"
        var $25=$self_addr; //@line 5600 "cPickle.c"
        var $26=$25+40; //@line 5600 "cPickle.c"
        var $27=HEAP[$26]; //@line 5600 "cPickle.c"
        FUNCTION_TABLE[$24]($27); //@line 5600 "cPickle.c"
        __label__ = 4; break; //@line 5600 "cPickle.c"
      case 4: // $bb3
        var $28=$self_addr; //@line 5601 "cPickle.c"
        var $29=$28+40; //@line 5601 "cPickle.c"
        var $30=$value_addr; //@line 5601 "cPickle.c"
        HEAP[$29]=$30; //@line 5601 "cPickle.c"
        var $31=$value_addr; //@line 5602 "cPickle.c"
        var $32=($31)!=0; //@line 5602 "cPickle.c"
        if ($32) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5602 "cPickle.c"
      case 5: // $bb4
        var $33=$value_addr; //@line 5602 "cPickle.c"
        var $34=$33; //@line 5602 "cPickle.c"
        var $35=HEAP[$34]; //@line 5602 "cPickle.c"
        var $36=($35) + 1; //@line 5602 "cPickle.c"
        var $37=$value_addr; //@line 5602 "cPickle.c"
        var $38=$37; //@line 5602 "cPickle.c"
        HEAP[$38]=$36; //@line 5602 "cPickle.c"
        __label__ = 6; break; //@line 5602 "cPickle.c"
      case 6: // $bb5
        $0=0; //@line 5603 "cPickle.c"
        __label__ = 24; break; //@line 5603 "cPickle.c"
      case 7: // $bb6
        var $39=$name_addr; //@line 5606 "cPickle.c"
        var $40=_strcmp($39, __str109); //@line 5606 "cPickle.c"
        var $41=($40)==0; //@line 5606 "cPickle.c"
        if ($41) { __label__ = 8; break; } else { __label__ = 14; break; } //@line 5606 "cPickle.c"
      case 8: // $bb7
        var $42=$self_addr; //@line 5607 "cPickle.c"
        var $43=$42+76; //@line 5607 "cPickle.c"
        var $44=HEAP[$43]; //@line 5607 "cPickle.c"
        var $45=($44)!=0; //@line 5607 "cPickle.c"
        if ($45) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 5607 "cPickle.c"
      case 9: // $bb8
        var $46=$self_addr; //@line 5607 "cPickle.c"
        var $47=$46+76; //@line 5607 "cPickle.c"
        var $48=HEAP[$47]; //@line 5607 "cPickle.c"
        var $49=$48; //@line 5607 "cPickle.c"
        var $50=HEAP[$49]; //@line 5607 "cPickle.c"
        var $51=($50) - 1; //@line 5607 "cPickle.c"
        var $52=$48; //@line 5607 "cPickle.c"
        HEAP[$52]=$51; //@line 5607 "cPickle.c"
        var $53=$48; //@line 5607 "cPickle.c"
        var $54=HEAP[$53]; //@line 5607 "cPickle.c"
        var $55=($54)==0; //@line 5607 "cPickle.c"
        if ($55) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5607 "cPickle.c"
      case 10: // $bb9
        var $56=$self_addr; //@line 5607 "cPickle.c"
        var $57=$56+76; //@line 5607 "cPickle.c"
        var $58=HEAP[$57]; //@line 5607 "cPickle.c"
        var $59=$58+4; //@line 5607 "cPickle.c"
        var $60=HEAP[$59]; //@line 5607 "cPickle.c"
        var $61=$60+24; //@line 5607 "cPickle.c"
        var $62=HEAP[$61]; //@line 5607 "cPickle.c"
        var $63=$self_addr; //@line 5607 "cPickle.c"
        var $64=$63+76; //@line 5607 "cPickle.c"
        var $65=HEAP[$64]; //@line 5607 "cPickle.c"
        FUNCTION_TABLE[$62]($65); //@line 5607 "cPickle.c"
        __label__ = 11; break; //@line 5607 "cPickle.c"
      case 11: // $bb10
        var $66=$self_addr; //@line 5608 "cPickle.c"
        var $67=$66+76; //@line 5608 "cPickle.c"
        var $68=$value_addr; //@line 5608 "cPickle.c"
        HEAP[$67]=$68; //@line 5608 "cPickle.c"
        var $69=$value_addr; //@line 5609 "cPickle.c"
        var $70=($69)!=0; //@line 5609 "cPickle.c"
        if ($70) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 5609 "cPickle.c"
      case 12: // $bb11
        var $71=$value_addr; //@line 5609 "cPickle.c"
        var $72=$71; //@line 5609 "cPickle.c"
        var $73=HEAP[$72]; //@line 5609 "cPickle.c"
        var $74=($73) + 1; //@line 5609 "cPickle.c"
        var $75=$value_addr; //@line 5609 "cPickle.c"
        var $76=$75; //@line 5609 "cPickle.c"
        HEAP[$76]=$74; //@line 5609 "cPickle.c"
        __label__ = 13; break; //@line 5609 "cPickle.c"
      case 13: // $bb12
        $0=0; //@line 5610 "cPickle.c"
        __label__ = 24; break; //@line 5610 "cPickle.c"
      case 14: // $bb13
        var $77=$value_addr; //@line 5613 "cPickle.c"
        var $78=($77)==0; //@line 5613 "cPickle.c"
        if ($78) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 5613 "cPickle.c"
      case 15: // $bb14
        var $79=HEAP[_PyExc_TypeError]; //@line 5614 "cPickle.c"
        _PyErr_SetString($79, __str69); //@line 5614 "cPickle.c"
        $0=-1; //@line 5616 "cPickle.c"
        __label__ = 24; break; //@line 5616 "cPickle.c"
      case 16: // $bb15
        var $80=$name_addr; //@line 5619 "cPickle.c"
        var $81=_strcmp($80, __str70); //@line 5619 "cPickle.c"
        var $82=($81)==0; //@line 5619 "cPickle.c"
        if ($82) { __label__ = 17; break; } else { __label__ = 23; break; } //@line 5619 "cPickle.c"
      case 17: // $bb16
        var $83=$value_addr; //@line 5620 "cPickle.c"
        var $84=$83+4; //@line 5620 "cPickle.c"
        var $85=HEAP[$84]; //@line 5620 "cPickle.c"
        var $86=$85+84; //@line 5620 "cPickle.c"
        var $87=HEAP[$86]; //@line 5620 "cPickle.c"
        var $88=($87) & 536870912; //@line 5620 "cPickle.c"
        var $89=($88)==0; //@line 5620 "cPickle.c"
        if ($89) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 5620 "cPickle.c"
      case 18: // $bb17
        var $90=HEAP[_PyExc_TypeError]; //@line 5621 "cPickle.c"
        _PyErr_SetString($90, __str71); //@line 5621 "cPickle.c"
        $0=-1; //@line 5623 "cPickle.c"
        __label__ = 24; break; //@line 5623 "cPickle.c"
      case 19: // $bb18
        var $91=$self_addr; //@line 5625 "cPickle.c"
        var $92=$91+24; //@line 5625 "cPickle.c"
        var $93=HEAP[$92]; //@line 5625 "cPickle.c"
        var $94=($93)!=0; //@line 5625 "cPickle.c"
        if ($94) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 5625 "cPickle.c"
      case 20: // $bb19
        var $95=$self_addr; //@line 5625 "cPickle.c"
        var $96=$95+24; //@line 5625 "cPickle.c"
        var $97=HEAP[$96]; //@line 5625 "cPickle.c"
        var $98=$97; //@line 5625 "cPickle.c"
        var $99=HEAP[$98]; //@line 5625 "cPickle.c"
        var $100=($99) - 1; //@line 5625 "cPickle.c"
        var $101=$97; //@line 5625 "cPickle.c"
        HEAP[$101]=$100; //@line 5625 "cPickle.c"
        var $102=$97; //@line 5625 "cPickle.c"
        var $103=HEAP[$102]; //@line 5625 "cPickle.c"
        var $104=($103)==0; //@line 5625 "cPickle.c"
        if ($104) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 5625 "cPickle.c"
      case 21: // $bb20
        var $105=$self_addr; //@line 5625 "cPickle.c"
        var $106=$105+24; //@line 5625 "cPickle.c"
        var $107=HEAP[$106]; //@line 5625 "cPickle.c"
        var $108=$107+4; //@line 5625 "cPickle.c"
        var $109=HEAP[$108]; //@line 5625 "cPickle.c"
        var $110=$109+24; //@line 5625 "cPickle.c"
        var $111=HEAP[$110]; //@line 5625 "cPickle.c"
        var $112=$self_addr; //@line 5625 "cPickle.c"
        var $113=$112+24; //@line 5625 "cPickle.c"
        var $114=HEAP[$113]; //@line 5625 "cPickle.c"
        FUNCTION_TABLE[$111]($114); //@line 5625 "cPickle.c"
        __label__ = 22; break; //@line 5625 "cPickle.c"
      case 22: // $bb21
        var $115=$self_addr; //@line 5626 "cPickle.c"
        var $116=$115+24; //@line 5626 "cPickle.c"
        var $117=$value_addr; //@line 5626 "cPickle.c"
        HEAP[$116]=$117; //@line 5626 "cPickle.c"
        var $118=$value_addr; //@line 5627 "cPickle.c"
        var $119=$118; //@line 5627 "cPickle.c"
        var $120=HEAP[$119]; //@line 5627 "cPickle.c"
        var $121=($120) + 1; //@line 5627 "cPickle.c"
        var $122=$value_addr; //@line 5627 "cPickle.c"
        var $123=$122; //@line 5627 "cPickle.c"
        HEAP[$123]=$121; //@line 5627 "cPickle.c"
        $0=0; //@line 5628 "cPickle.c"
        __label__ = 24; break; //@line 5628 "cPickle.c"
      case 23: // $bb22
        var $124=HEAP[_PyExc_AttributeError]; //@line 5631 "cPickle.c"
        var $125=$name_addr; //@line 5631 "cPickle.c"
        _PyErr_SetString($124, $125); //@line 5631 "cPickle.c"
        $0=-1; //@line 5632 "cPickle.c"
        __label__ = 24; break; //@line 5632 "cPickle.c"
      case 24: // $bb23
        var $126=$0; //@line 5603 "cPickle.c"
        $retval=$126; //@line 5603 "cPickle.c"
        var $retval24=$retval; //@line 5603 "cPickle.c"
        ;
        return $retval24; //@line 5603 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cpm_dump($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $ob=__stackBase__;
        var $file=__stackBase__+4;
        var $res;
        var $pickler;
        var $proto=__stackBase__+8;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        $res=0; //@line 5644 "cPickle.c"
        $pickler=0; //@line 5645 "cPickle.c"
        HEAP[$proto]=0; //@line 5646 "cPickle.c"
        var $1=$args_addr; //@line 5648 "cPickle.c"
        var $2=$kwds_addr; //@line 5648 "cPickle.c"
        var $3=_PyArg_ParseTupleAndKeywords($1, $2, __str111, _kwlist_16354, allocate([$ob,0,0,0,$file,0,0,0,$proto,0,0,0], ["%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 5648 "cPickle.c"
        var $4=($3)==0; //@line 5648 "cPickle.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 5648 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$proto]; //@line 5652 "cPickle.c"
        var $6=HEAP[$file]; //@line 5652 "cPickle.c"
        var $7=_newPicklerobject($6, $5); //@line 5652 "cPickle.c"
        $pickler=$7; //@line 5652 "cPickle.c"
        var $8=$pickler; //@line 5652 "cPickle.c"
        var $9=($8)==0; //@line 5652 "cPickle.c"
        if ($9) { __label__ = 7; break; } else { __label__ = 2; break; } //@line 5652 "cPickle.c"
      case 2: // $bb1
        var $10=HEAP[$ob]; //@line 5655 "cPickle.c"
        var $11=$pickler; //@line 5655 "cPickle.c"
        var $12=_dump($11, $10); //@line 5655 "cPickle.c"
        var $13=($12) < 0; //@line 5655 "cPickle.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 5655 "cPickle.c"
      case 3: // $bb2
        var $14=HEAP[__Py_NoneStruct]; //@line 5658 "cPickle.c"
        var $15=($14) + 1; //@line 5658 "cPickle.c"
        HEAP[__Py_NoneStruct]=$15; //@line 5658 "cPickle.c"
        $res=__Py_NoneStruct; //@line 5659 "cPickle.c"
        __label__ = 4; break; //@line 5661 "cPickle.c"
      case 4: // $finally
        var $_pr=$pickler;
        var $16=($_pr)!=0; //@line 5662 "cPickle.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 5662 "cPickle.c"
      case 5: // $bb3
        var $17=$pickler; //@line 5662 "cPickle.c"
        var $18=$17; //@line 5662 "cPickle.c"
        var $19=$18; //@line 5662 "cPickle.c"
        var $20=HEAP[$19]; //@line 5662 "cPickle.c"
        var $21=($20) - 1; //@line 5662 "cPickle.c"
        var $22=$18; //@line 5662 "cPickle.c"
        HEAP[$22]=$21; //@line 5662 "cPickle.c"
        var $23=$18; //@line 5662 "cPickle.c"
        var $24=HEAP[$23]; //@line 5662 "cPickle.c"
        var $25=($24)==0; //@line 5662 "cPickle.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5662 "cPickle.c"
      case 6: // $bb4
        var $26=$pickler; //@line 5662 "cPickle.c"
        var $27=$26; //@line 5662 "cPickle.c"
        var $28=$27+4; //@line 5662 "cPickle.c"
        var $29=HEAP[$28]; //@line 5662 "cPickle.c"
        var $30=$29+24; //@line 5662 "cPickle.c"
        var $31=HEAP[$30]; //@line 5662 "cPickle.c"
        var $32=$pickler; //@line 5662 "cPickle.c"
        var $33=$32; //@line 5662 "cPickle.c"
        FUNCTION_TABLE[$31]($33); //@line 5662 "cPickle.c"
        __label__ = 7; break; //@line 5662 "cPickle.c"
      case 7: // $bb5
        var $34=$res; //@line 5664 "cPickle.c"
        $0=$34; //@line 5664 "cPickle.c"
        var $35=$0; //@line 5664 "cPickle.c"
        $retval=$35; //@line 5664 "cPickle.c"
        var $retval6=$retval; //@line 5664 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 5664 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cpm_dumps($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $ob=__stackBase__;
        var $file;
        var $res;
        var $pickler;
        var $proto=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        $file=0; //@line 5673 "cPickle.c"
        $res=0; //@line 5673 "cPickle.c"
        $pickler=0; //@line 5674 "cPickle.c"
        HEAP[$proto]=0; //@line 5675 "cPickle.c"
        var $1=$args_addr; //@line 5677 "cPickle.c"
        var $2=$kwds_addr; //@line 5677 "cPickle.c"
        var $3=_PyArg_ParseTupleAndKeywords($1, $2, __str113, _kwlist_16391, allocate([$ob,0,0,0,$proto,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 5677 "cPickle.c"
        var $4=($3)==0; //@line 5677 "cPickle.c"
        if ($4) { __label__ = 5; break; } else { __label__ = 1; break; } //@line 5677 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[_PycStringIO]; //@line 5681 "cPickle.c"
        var $6=$5+16; //@line 5681 "cPickle.c"
        var $7=HEAP[$6]; //@line 5681 "cPickle.c"
        var $8=FUNCTION_TABLE[$7](128); //@line 5681 "cPickle.c"
        $file=$8; //@line 5681 "cPickle.c"
        var $9=$file; //@line 5681 "cPickle.c"
        var $10=($9)==0; //@line 5681 "cPickle.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 2; break; } //@line 5681 "cPickle.c"
      case 2: // $bb1
        var $11=HEAP[$proto]; //@line 5684 "cPickle.c"
        var $12=$file; //@line 5684 "cPickle.c"
        var $13=_newPicklerobject($12, $11); //@line 5684 "cPickle.c"
        $pickler=$13; //@line 5684 "cPickle.c"
        var $14=$pickler; //@line 5684 "cPickle.c"
        var $15=($14)==0; //@line 5684 "cPickle.c"
        if ($15) { __label__ = 8; break; } else { __label__ = 3; break; } //@line 5684 "cPickle.c"
      case 3: // $bb2
        var $16=HEAP[$ob]; //@line 5687 "cPickle.c"
        var $17=$pickler; //@line 5687 "cPickle.c"
        var $18=_dump($17, $16); //@line 5687 "cPickle.c"
        var $19=($18) < 0; //@line 5687 "cPickle.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 5687 "cPickle.c"
      case 4: // $bb3
        var $20=HEAP[_PycStringIO]; //@line 5690 "cPickle.c"
        var $21=$20+12; //@line 5690 "cPickle.c"
        var $22=HEAP[$21]; //@line 5690 "cPickle.c"
        var $23=$file; //@line 5690 "cPickle.c"
        var $24=FUNCTION_TABLE[$22]($23); //@line 5690 "cPickle.c"
        $res=$24; //@line 5690 "cPickle.c"
        __label__ = 5; break; //@line 5692 "cPickle.c"
      case 5: // $finally
        var $_pr=$pickler;
        var $25=($_pr)!=0; //@line 5693 "cPickle.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 5693 "cPickle.c"
      case 6: // $bb4
        var $26=$pickler; //@line 5693 "cPickle.c"
        var $27=$26; //@line 5693 "cPickle.c"
        var $28=$27; //@line 5693 "cPickle.c"
        var $29=HEAP[$28]; //@line 5693 "cPickle.c"
        var $30=($29) - 1; //@line 5693 "cPickle.c"
        var $31=$27; //@line 5693 "cPickle.c"
        HEAP[$31]=$30; //@line 5693 "cPickle.c"
        var $32=$27; //@line 5693 "cPickle.c"
        var $33=HEAP[$32]; //@line 5693 "cPickle.c"
        var $34=($33)==0; //@line 5693 "cPickle.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5693 "cPickle.c"
      case 7: // $bb5
        var $35=$pickler; //@line 5693 "cPickle.c"
        var $36=$35; //@line 5693 "cPickle.c"
        var $37=$36+4; //@line 5693 "cPickle.c"
        var $38=HEAP[$37]; //@line 5693 "cPickle.c"
        var $39=$38+24; //@line 5693 "cPickle.c"
        var $40=HEAP[$39]; //@line 5693 "cPickle.c"
        var $41=$pickler; //@line 5693 "cPickle.c"
        var $42=$41; //@line 5693 "cPickle.c"
        FUNCTION_TABLE[$40]($42); //@line 5693 "cPickle.c"
        __label__ = 8; break; //@line 5693 "cPickle.c"
      case 8: // $bb6
        var $43=$file; //@line 5694 "cPickle.c"
        var $44=($43)!=0; //@line 5694 "cPickle.c"
        if ($44) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 5694 "cPickle.c"
      case 9: // $bb7
        var $45=$file; //@line 5694 "cPickle.c"
        var $46=$45; //@line 5694 "cPickle.c"
        var $47=HEAP[$46]; //@line 5694 "cPickle.c"
        var $48=($47) - 1; //@line 5694 "cPickle.c"
        var $49=$file; //@line 5694 "cPickle.c"
        var $50=$49; //@line 5694 "cPickle.c"
        HEAP[$50]=$48; //@line 5694 "cPickle.c"
        var $51=$file; //@line 5694 "cPickle.c"
        var $52=$51; //@line 5694 "cPickle.c"
        var $53=HEAP[$52]; //@line 5694 "cPickle.c"
        var $54=($53)==0; //@line 5694 "cPickle.c"
        if ($54) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5694 "cPickle.c"
      case 10: // $bb8
        var $55=$file; //@line 5694 "cPickle.c"
        var $56=$55+4; //@line 5694 "cPickle.c"
        var $57=HEAP[$56]; //@line 5694 "cPickle.c"
        var $58=$57+24; //@line 5694 "cPickle.c"
        var $59=HEAP[$58]; //@line 5694 "cPickle.c"
        var $60=$file; //@line 5694 "cPickle.c"
        FUNCTION_TABLE[$59]($60); //@line 5694 "cPickle.c"
        __label__ = 11; break; //@line 5694 "cPickle.c"
      case 11: // $bb9
        var $61=$res; //@line 5696 "cPickle.c"
        $0=$61; //@line 5696 "cPickle.c"
        var $62=$0; //@line 5696 "cPickle.c"
        $retval=$62; //@line 5696 "cPickle.c"
        var $retval10=$retval; //@line 5696 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 5696 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cpm_load($self, $ob) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $ob_addr;
        var $retval;
        var $0;
        var $unpickler;
        var $res;
        $self_addr=$self;
        $ob_addr=$ob;
        $unpickler=0; //@line 5704 "cPickle.c"
        $res=0; //@line 5705 "cPickle.c"
        var $1=$ob_addr; //@line 5707 "cPickle.c"
        var $2=_newUnpicklerobject($1); //@line 5707 "cPickle.c"
        $unpickler=$2; //@line 5707 "cPickle.c"
        var $3=$unpickler; //@line 5707 "cPickle.c"
        var $4=($3)==0; //@line 5707 "cPickle.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 5707 "cPickle.c"
      case 1: // $finally
        var $5=$unpickler; //@line 5710 "cPickle.c"
        var $6=_load($5); //@line 5710 "cPickle.c"
        $res=$6; //@line 5710 "cPickle.c"
        var $_pr=$unpickler;
        var $7=($_pr)!=0; //@line 5713 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 5713 "cPickle.c"
      case 2: // $bb1
        var $8=$unpickler; //@line 5713 "cPickle.c"
        var $9=$8; //@line 5713 "cPickle.c"
        var $10=$9; //@line 5713 "cPickle.c"
        var $11=HEAP[$10]; //@line 5713 "cPickle.c"
        var $12=($11) - 1; //@line 5713 "cPickle.c"
        var $13=$9; //@line 5713 "cPickle.c"
        HEAP[$13]=$12; //@line 5713 "cPickle.c"
        var $14=$9; //@line 5713 "cPickle.c"
        var $15=HEAP[$14]; //@line 5713 "cPickle.c"
        var $16=($15)==0; //@line 5713 "cPickle.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5713 "cPickle.c"
      case 3: // $bb2
        var $17=$unpickler; //@line 5713 "cPickle.c"
        var $18=$17; //@line 5713 "cPickle.c"
        var $19=$18+4; //@line 5713 "cPickle.c"
        var $20=HEAP[$19]; //@line 5713 "cPickle.c"
        var $21=$20+24; //@line 5713 "cPickle.c"
        var $22=HEAP[$21]; //@line 5713 "cPickle.c"
        var $23=$unpickler; //@line 5713 "cPickle.c"
        var $24=$23; //@line 5713 "cPickle.c"
        FUNCTION_TABLE[$22]($24); //@line 5713 "cPickle.c"
        __label__ = 4; break; //@line 5713 "cPickle.c"
      case 4: // $bb3
        var $25=$res; //@line 5715 "cPickle.c"
        $0=$25; //@line 5715 "cPickle.c"
        var $26=$0; //@line 5715 "cPickle.c"
        $retval=$26; //@line 5715 "cPickle.c"
        var $retval4=$retval; //@line 5715 "cPickle.c"
        ;
        return $retval4; //@line 5715 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cpm_loads($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $ob=__stackBase__;
        var $file;
        var $res;
        var $unpickler;
        $self_addr=$self;
        $args_addr=$args;
        $file=0; //@line 5723 "cPickle.c"
        $res=0; //@line 5723 "cPickle.c"
        $unpickler=0; //@line 5724 "cPickle.c"
        var $1=$args_addr; //@line 5726 "cPickle.c"
        var $2=_PyArg_ParseTuple($1, __str114, allocate([$ob,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 5726 "cPickle.c"
        var $3=($2)==0; //@line 5726 "cPickle.c"
        if ($3) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 5726 "cPickle.c"
      case 1: // $bb
        var $4=HEAP[_PycStringIO]; //@line 5729 "cPickle.c"
        var $5=$4+20; //@line 5729 "cPickle.c"
        var $6=HEAP[$5]; //@line 5729 "cPickle.c"
        var $7=HEAP[$ob]; //@line 5729 "cPickle.c"
        var $8=FUNCTION_TABLE[$6]($7); //@line 5729 "cPickle.c"
        $file=$8; //@line 5729 "cPickle.c"
        var $9=$file; //@line 5729 "cPickle.c"
        var $10=($9)==0; //@line 5729 "cPickle.c"
        if ($10) { __label__ = 7; break; } else { __label__ = 2; break; } //@line 5729 "cPickle.c"
      case 2: // $bb1
        var $11=$file; //@line 5732 "cPickle.c"
        var $12=_newUnpicklerobject($11); //@line 5732 "cPickle.c"
        $unpickler=$12; //@line 5732 "cPickle.c"
        var $13=$unpickler; //@line 5732 "cPickle.c"
        var $14=($13)==0; //@line 5732 "cPickle.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 5732 "cPickle.c"
      case 3: // $bb2
        var $15=$unpickler; //@line 5735 "cPickle.c"
        var $16=_load($15); //@line 5735 "cPickle.c"
        $res=$16; //@line 5735 "cPickle.c"
        __label__ = 4; break; //@line 5737 "cPickle.c"
      case 4: // $finally
        var $_pr=$file;
        var $17=($_pr)!=0; //@line 5738 "cPickle.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 5738 "cPickle.c"
      case 5: // $bb3
        var $18=$file; //@line 5738 "cPickle.c"
        var $19=$18; //@line 5738 "cPickle.c"
        var $20=HEAP[$19]; //@line 5738 "cPickle.c"
        var $21=($20) - 1; //@line 5738 "cPickle.c"
        var $22=$file; //@line 5738 "cPickle.c"
        var $23=$22; //@line 5738 "cPickle.c"
        HEAP[$23]=$21; //@line 5738 "cPickle.c"
        var $24=$file; //@line 5738 "cPickle.c"
        var $25=$24; //@line 5738 "cPickle.c"
        var $26=HEAP[$25]; //@line 5738 "cPickle.c"
        var $27=($26)==0; //@line 5738 "cPickle.c"
        if ($27) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5738 "cPickle.c"
      case 6: // $bb4
        var $28=$file; //@line 5738 "cPickle.c"
        var $29=$28+4; //@line 5738 "cPickle.c"
        var $30=HEAP[$29]; //@line 5738 "cPickle.c"
        var $31=$30+24; //@line 5738 "cPickle.c"
        var $32=HEAP[$31]; //@line 5738 "cPickle.c"
        var $33=$file; //@line 5738 "cPickle.c"
        FUNCTION_TABLE[$32]($33); //@line 5738 "cPickle.c"
        __label__ = 7; break; //@line 5738 "cPickle.c"
      case 7: // $bb5
        var $34=$unpickler; //@line 5739 "cPickle.c"
        var $35=($34)!=0; //@line 5739 "cPickle.c"
        if ($35) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 5739 "cPickle.c"
      case 8: // $bb6
        var $36=$unpickler; //@line 5739 "cPickle.c"
        var $37=$36; //@line 5739 "cPickle.c"
        var $38=$37; //@line 5739 "cPickle.c"
        var $39=HEAP[$38]; //@line 5739 "cPickle.c"
        var $40=($39) - 1; //@line 5739 "cPickle.c"
        var $41=$37; //@line 5739 "cPickle.c"
        HEAP[$41]=$40; //@line 5739 "cPickle.c"
        var $42=$37; //@line 5739 "cPickle.c"
        var $43=HEAP[$42]; //@line 5739 "cPickle.c"
        var $44=($43)==0; //@line 5739 "cPickle.c"
        if ($44) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 5739 "cPickle.c"
      case 9: // $bb7
        var $45=$unpickler; //@line 5739 "cPickle.c"
        var $46=$45; //@line 5739 "cPickle.c"
        var $47=$46+4; //@line 5739 "cPickle.c"
        var $48=HEAP[$47]; //@line 5739 "cPickle.c"
        var $49=$48+24; //@line 5739 "cPickle.c"
        var $50=HEAP[$49]; //@line 5739 "cPickle.c"
        var $51=$unpickler; //@line 5739 "cPickle.c"
        var $52=$51; //@line 5739 "cPickle.c"
        FUNCTION_TABLE[$50]($52); //@line 5739 "cPickle.c"
        __label__ = 10; break; //@line 5739 "cPickle.c"
      case 10: // $bb8
        var $53=$res; //@line 5741 "cPickle.c"
        $0=$53; //@line 5741 "cPickle.c"
        var $54=$0; //@line 5741 "cPickle.c"
        $retval=$54; //@line 5741 "cPickle.c"
        var $retval9=$retval; //@line 5741 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 5741 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _init_stuff($module_dict) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $module_dict_addr;
        var $retval;
        var $0;
        var $copyreg;
        var $t;
        var $r;
        $module_dict_addr=$module_dict;
        var $1=_PyType_Ready(_Unpicklertype); //@line 5833 "cPickle.c"
        var $2=($1) < 0; //@line 5833 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5833 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 5834 "cPickle.c"
        __label__ = 89; break; //@line 5834 "cPickle.c"
      case 2: // $bb1
        var $3=_PyType_Ready(_Picklertype); //@line 5835 "cPickle.c"
        var $4=($3) < 0; //@line 5835 "cPickle.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5835 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 5836 "cPickle.c"
        __label__ = 89; break; //@line 5836 "cPickle.c"
      case 4: // $bb3
        var $5=_PyString_InternFromString(__str126); //@line 5838 "cPickle.c"
        HEAP[___class___str]=$5; //@line 5838 "cPickle.c"
        var $6=HEAP[___class___str]; //@line 5838 "cPickle.c"
        var $7=($6)==0; //@line 5838 "cPickle.c"
        if ($7) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5838 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 5838 "cPickle.c"
        __label__ = 89; break; //@line 5838 "cPickle.c"
      case 6: // $bb5
        var $8=_PyString_InternFromString(__str127); //@line 5839 "cPickle.c"
        HEAP[___getinitargs___str]=$8; //@line 5839 "cPickle.c"
        var $9=HEAP[___getinitargs___str]; //@line 5839 "cPickle.c"
        var $10=($9)==0; //@line 5839 "cPickle.c"
        if ($10) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5839 "cPickle.c"
      case 7: // $bb6
        $0=-1; //@line 5839 "cPickle.c"
        __label__ = 89; break; //@line 5839 "cPickle.c"
      case 8: // $bb7
        var $11=_PyString_InternFromString(__str128); //@line 5840 "cPickle.c"
        HEAP[___dict___str]=$11; //@line 5840 "cPickle.c"
        var $12=HEAP[___dict___str]; //@line 5840 "cPickle.c"
        var $13=($12)==0; //@line 5840 "cPickle.c"
        if ($13) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 5840 "cPickle.c"
      case 9: // $bb8
        $0=-1; //@line 5840 "cPickle.c"
        __label__ = 89; break; //@line 5840 "cPickle.c"
      case 10: // $bb9
        var $14=_PyString_InternFromString(__str129); //@line 5841 "cPickle.c"
        HEAP[___getstate___str]=$14; //@line 5841 "cPickle.c"
        var $15=HEAP[___getstate___str]; //@line 5841 "cPickle.c"
        var $16=($15)==0; //@line 5841 "cPickle.c"
        if ($16) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5841 "cPickle.c"
      case 11: // $bb10
        $0=-1; //@line 5841 "cPickle.c"
        __label__ = 89; break; //@line 5841 "cPickle.c"
      case 12: // $bb11
        var $17=_PyString_InternFromString(__str130); //@line 5842 "cPickle.c"
        HEAP[___setstate___str]=$17; //@line 5842 "cPickle.c"
        var $18=HEAP[___setstate___str]; //@line 5842 "cPickle.c"
        var $19=($18)==0; //@line 5842 "cPickle.c"
        if ($19) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5842 "cPickle.c"
      case 13: // $bb12
        $0=-1; //@line 5842 "cPickle.c"
        __label__ = 89; break; //@line 5842 "cPickle.c"
      case 14: // $bb13
        var $20=_PyString_InternFromString(__str131); //@line 5843 "cPickle.c"
        HEAP[___name___str]=$20; //@line 5843 "cPickle.c"
        var $21=HEAP[___name___str]; //@line 5843 "cPickle.c"
        var $22=($21)==0; //@line 5843 "cPickle.c"
        if ($22) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 5843 "cPickle.c"
      case 15: // $bb14
        $0=-1; //@line 5843 "cPickle.c"
        __label__ = 89; break; //@line 5843 "cPickle.c"
      case 16: // $bb15
        var $23=_PyString_InternFromString(__str132); //@line 5844 "cPickle.c"
        HEAP[___main___str]=$23; //@line 5844 "cPickle.c"
        var $24=HEAP[___main___str]; //@line 5844 "cPickle.c"
        var $25=($24)==0; //@line 5844 "cPickle.c"
        if ($25) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5844 "cPickle.c"
      case 17: // $bb16
        $0=-1; //@line 5844 "cPickle.c"
        __label__ = 89; break; //@line 5844 "cPickle.c"
      case 18: // $bb17
        var $26=_PyString_InternFromString(__str133); //@line 5845 "cPickle.c"
        HEAP[___reduce___str]=$26; //@line 5845 "cPickle.c"
        var $27=HEAP[___reduce___str]; //@line 5845 "cPickle.c"
        var $28=($27)==0; //@line 5845 "cPickle.c"
        if ($28) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 5845 "cPickle.c"
      case 19: // $bb18
        $0=-1; //@line 5845 "cPickle.c"
        __label__ = 89; break; //@line 5845 "cPickle.c"
      case 20: // $bb19
        var $29=_PyString_InternFromString(__str134); //@line 5846 "cPickle.c"
        HEAP[___reduce_ex___str]=$29; //@line 5846 "cPickle.c"
        var $30=HEAP[___reduce_ex___str]; //@line 5846 "cPickle.c"
        var $31=($30)==0; //@line 5846 "cPickle.c"
        if ($31) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 5846 "cPickle.c"
      case 21: // $bb20
        $0=-1; //@line 5846 "cPickle.c"
        __label__ = 89; break; //@line 5846 "cPickle.c"
      case 22: // $bb21
        var $32=_PyString_InternFromString(__str135); //@line 5847 "cPickle.c"
        HEAP[_write_str]=$32; //@line 5847 "cPickle.c"
        var $33=HEAP[_write_str]; //@line 5847 "cPickle.c"
        var $34=($33)==0; //@line 5847 "cPickle.c"
        if ($34) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 5847 "cPickle.c"
      case 23: // $bb22
        $0=-1; //@line 5847 "cPickle.c"
        __label__ = 89; break; //@line 5847 "cPickle.c"
      case 24: // $bb23
        var $35=_PyString_InternFromString(__str136); //@line 5848 "cPickle.c"
        HEAP[_append_str]=$35; //@line 5848 "cPickle.c"
        var $36=HEAP[_append_str]; //@line 5848 "cPickle.c"
        var $37=($36)==0; //@line 5848 "cPickle.c"
        if ($37) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 5848 "cPickle.c"
      case 25: // $bb24
        $0=-1; //@line 5848 "cPickle.c"
        __label__ = 89; break; //@line 5848 "cPickle.c"
      case 26: // $bb25
        var $38=_PyString_InternFromString(__str137); //@line 5849 "cPickle.c"
        HEAP[_read_str]=$38; //@line 5849 "cPickle.c"
        var $39=HEAP[_read_str]; //@line 5849 "cPickle.c"
        var $40=($39)==0; //@line 5849 "cPickle.c"
        if ($40) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 5849 "cPickle.c"
      case 27: // $bb26
        $0=-1; //@line 5849 "cPickle.c"
        __label__ = 89; break; //@line 5849 "cPickle.c"
      case 28: // $bb27
        var $41=_PyString_InternFromString(__str138); //@line 5850 "cPickle.c"
        HEAP[_readline_str]=$41; //@line 5850 "cPickle.c"
        var $42=HEAP[_readline_str]; //@line 5850 "cPickle.c"
        var $43=($42)==0; //@line 5850 "cPickle.c"
        if ($43) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 5850 "cPickle.c"
      case 29: // $bb28
        $0=-1; //@line 5850 "cPickle.c"
        __label__ = 89; break; //@line 5850 "cPickle.c"
      case 30: // $bb29
        var $44=_PyString_InternFromString(__str139); //@line 5851 "cPickle.c"
        HEAP[_dispatch_table_str]=$44; //@line 5851 "cPickle.c"
        var $45=HEAP[_dispatch_table_str]; //@line 5851 "cPickle.c"
        var $46=($45)==0; //@line 5851 "cPickle.c"
        if ($46) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 5851 "cPickle.c"
      case 31: // $bb30
        $0=-1; //@line 5851 "cPickle.c"
        __label__ = 89; break; //@line 5851 "cPickle.c"
      case 32: // $bb31
        var $47=_PyImport_ImportModule(__str63); //@line 5853 "cPickle.c"
        $copyreg=$47; //@line 5853 "cPickle.c"
        var $48=$copyreg; //@line 5853 "cPickle.c"
        var $49=($48)==0; //@line 5853 "cPickle.c"
        if ($49) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 5853 "cPickle.c"
      case 33: // $bb32
        $0=-1; //@line 5854 "cPickle.c"
        __label__ = 89; break; //@line 5854 "cPickle.c"
      case 34: // $bb33
        var $50=HEAP[_dispatch_table_str]; //@line 5858 "cPickle.c"
        var $51=$copyreg; //@line 5858 "cPickle.c"
        var $52=_PyObject_GetAttr($51, $50); //@line 5858 "cPickle.c"
        HEAP[_dispatch_table]=$52; //@line 5858 "cPickle.c"
        var $53=HEAP[_dispatch_table]; //@line 5859 "cPickle.c"
        var $54=($53)==0; //@line 5859 "cPickle.c"
        if ($54) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 5859 "cPickle.c"
      case 35: // $bb34
        $0=-1; //@line 5859 "cPickle.c"
        __label__ = 89; break; //@line 5859 "cPickle.c"
      case 36: // $bb35
        var $55=$copyreg; //@line 5861 "cPickle.c"
        var $56=_PyObject_GetAttrString($55, __str140); //@line 5861 "cPickle.c"
        HEAP[_extension_registry]=$56; //@line 5861 "cPickle.c"
        var $57=HEAP[_extension_registry]; //@line 5863 "cPickle.c"
        var $58=($57)==0; //@line 5863 "cPickle.c"
        if ($58) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 5863 "cPickle.c"
      case 37: // $bb36
        $0=-1; //@line 5863 "cPickle.c"
        __label__ = 89; break; //@line 5863 "cPickle.c"
      case 38: // $bb37
        var $59=$copyreg; //@line 5865 "cPickle.c"
        var $60=_PyObject_GetAttrString($59, __str141); //@line 5865 "cPickle.c"
        HEAP[_inverted_registry]=$60; //@line 5865 "cPickle.c"
        var $61=HEAP[_inverted_registry]; //@line 5867 "cPickle.c"
        var $62=($61)==0; //@line 5867 "cPickle.c"
        if ($62) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 5867 "cPickle.c"
      case 39: // $bb38
        $0=-1; //@line 5867 "cPickle.c"
        __label__ = 89; break; //@line 5867 "cPickle.c"
      case 40: // $bb39
        var $63=$copyreg; //@line 5869 "cPickle.c"
        var $64=_PyObject_GetAttrString($63, __str142); //@line 5869 "cPickle.c"
        HEAP[_extension_cache]=$64; //@line 5869 "cPickle.c"
        var $65=HEAP[_extension_cache]; //@line 5871 "cPickle.c"
        var $66=($65)==0; //@line 5871 "cPickle.c"
        if ($66) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 5871 "cPickle.c"
      case 41: // $bb40
        $0=-1; //@line 5871 "cPickle.c"
        __label__ = 89; break; //@line 5871 "cPickle.c"
      case 42: // $bb41
        var $67=$copyreg; //@line 5873 "cPickle.c"
        var $68=$67; //@line 5873 "cPickle.c"
        var $69=HEAP[$68]; //@line 5873 "cPickle.c"
        var $70=($69) - 1; //@line 5873 "cPickle.c"
        var $71=$copyreg; //@line 5873 "cPickle.c"
        var $72=$71; //@line 5873 "cPickle.c"
        HEAP[$72]=$70; //@line 5873 "cPickle.c"
        var $73=$copyreg; //@line 5873 "cPickle.c"
        var $74=$73; //@line 5873 "cPickle.c"
        var $75=HEAP[$74]; //@line 5873 "cPickle.c"
        var $76=($75)==0; //@line 5873 "cPickle.c"
        if ($76) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 5873 "cPickle.c"
      case 43: // $bb42
        var $77=$copyreg; //@line 5873 "cPickle.c"
        var $78=$77+4; //@line 5873 "cPickle.c"
        var $79=HEAP[$78]; //@line 5873 "cPickle.c"
        var $80=$79+24; //@line 5873 "cPickle.c"
        var $81=HEAP[$80]; //@line 5873 "cPickle.c"
        var $82=$copyreg; //@line 5873 "cPickle.c"
        FUNCTION_TABLE[$81]($82); //@line 5873 "cPickle.c"
        __label__ = 44; break; //@line 5873 "cPickle.c"
      case 44: // $bb43
        var $83=_PyTuple_New(0); //@line 5875 "cPickle.c"
        HEAP[_empty_tuple]=$83; //@line 5875 "cPickle.c"
        var $84=($83)==0; //@line 5875 "cPickle.c"
        if ($84) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 5875 "cPickle.c"
      case 45: // $bb44
        $0=-1; //@line 5876 "cPickle.c"
        __label__ = 89; break; //@line 5876 "cPickle.c"
      case 46: // $bb45
        var $85=_PyTuple_New(2); //@line 5878 "cPickle.c"
        HEAP[_two_tuple]=$85; //@line 5878 "cPickle.c"
        var $86=HEAP[_two_tuple]; //@line 5879 "cPickle.c"
        var $87=($86)==0; //@line 5879 "cPickle.c"
        if ($87) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 5879 "cPickle.c"
      case 47: // $bb46
        $0=-1; //@line 5880 "cPickle.c"
        __label__ = 89; break; //@line 5880 "cPickle.c"
      case 48: // $bb47
        var $88=HEAP[_two_tuple]; //@line 5885 "cPickle.c"
        var $89=$88; //@line 5885 "cPickle.c"
        _PyObject_GC_UnTrack($89); //@line 5885 "cPickle.c"
        var $90=_PyImport_ImportModule(__str143); //@line 5888 "cPickle.c"
        $t=$90; //@line 5888 "cPickle.c"
        var $91=$t; //@line 5888 "cPickle.c"
        var $92=($91)==0; //@line 5888 "cPickle.c"
        if ($92) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 5888 "cPickle.c"
      case 49: // $bb48
        $0=-1; //@line 5888 "cPickle.c"
        __label__ = 89; break; //@line 5888 "cPickle.c"
      case 50: // $bb49
        var $93=$module_dict_addr; //@line 5889 "cPickle.c"
        var $94=$t; //@line 5889 "cPickle.c"
        var $95=_PyDict_SetItemString($93, __str144, $94); //@line 5889 "cPickle.c"
        var $96=($95) < 0; //@line 5889 "cPickle.c"
        if ($96) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 5889 "cPickle.c"
      case 51: // $bb50
        $0=-1; //@line 5890 "cPickle.c"
        __label__ = 89; break; //@line 5890 "cPickle.c"
      case 52: // $bb51
        var $97=_PyDict_New(); //@line 5892 "cPickle.c"
        $t=$97; //@line 5892 "cPickle.c"
        var $98=$t; //@line 5892 "cPickle.c"
        var $99=($98)==0; //@line 5892 "cPickle.c"
        if ($99) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 5892 "cPickle.c"
      case 53: // $bb52
        $0=-1; //@line 5892 "cPickle.c"
        __label__ = 89; break; //@line 5892 "cPickle.c"
      case 54: // $bb53
        var $100=$module_dict_addr; //@line 5893 "cPickle.c"
        var $101=$t; //@line 5893 "cPickle.c"
        var $102=_PyRun_StringFlags(__str145, 257, $100, $101, 0); //@line 5893 "cPickle.c"
        $r=$102; //@line 5893 "cPickle.c"
        var $103=$r; //@line 5893 "cPickle.c"
        var $104=($103)==0; //@line 5893 "cPickle.c"
        if ($104) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 5893 "cPickle.c"
      case 55: // $bb54
        $0=-1; //@line 5893 "cPickle.c"
        __label__ = 89; break; //@line 5893 "cPickle.c"
      case 56: // $bb55
        var $105=$r; //@line 5898 "cPickle.c"
        var $106=$105; //@line 5898 "cPickle.c"
        var $107=HEAP[$106]; //@line 5898 "cPickle.c"
        var $108=($107) - 1; //@line 5898 "cPickle.c"
        var $109=$r; //@line 5898 "cPickle.c"
        var $110=$109; //@line 5898 "cPickle.c"
        HEAP[$110]=$108; //@line 5898 "cPickle.c"
        var $111=$r; //@line 5898 "cPickle.c"
        var $112=$111; //@line 5898 "cPickle.c"
        var $113=HEAP[$112]; //@line 5898 "cPickle.c"
        var $114=($113)==0; //@line 5898 "cPickle.c"
        if ($114) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 5898 "cPickle.c"
      case 57: // $bb56
        var $115=$r; //@line 5898 "cPickle.c"
        var $116=$115+4; //@line 5898 "cPickle.c"
        var $117=HEAP[$116]; //@line 5898 "cPickle.c"
        var $118=$117+24; //@line 5898 "cPickle.c"
        var $119=HEAP[$118]; //@line 5898 "cPickle.c"
        var $120=$r; //@line 5898 "cPickle.c"
        FUNCTION_TABLE[$119]($120); //@line 5898 "cPickle.c"
        __label__ = 58; break; //@line 5898 "cPickle.c"
      case 58: // $bb57
        var $121=$t; //@line 5900 "cPickle.c"
        var $122=_PyErr_NewException(__str146, 0, $121); //@line 5900 "cPickle.c"
        HEAP[_PickleError]=$122; //@line 5900 "cPickle.c"
        var $123=($122)==0; //@line 5901 "cPickle.c"
        if ($123) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 5901 "cPickle.c"
      case 59: // $bb58
        $0=-1; //@line 5902 "cPickle.c"
        __label__ = 89; break; //@line 5902 "cPickle.c"
      case 60: // $bb59
        var $124=$t; //@line 5904 "cPickle.c"
        var $125=$124; //@line 5904 "cPickle.c"
        var $126=HEAP[$125]; //@line 5904 "cPickle.c"
        var $127=($126) - 1; //@line 5904 "cPickle.c"
        var $128=$t; //@line 5904 "cPickle.c"
        var $129=$128; //@line 5904 "cPickle.c"
        HEAP[$129]=$127; //@line 5904 "cPickle.c"
        var $130=$t; //@line 5904 "cPickle.c"
        var $131=$130; //@line 5904 "cPickle.c"
        var $132=HEAP[$131]; //@line 5904 "cPickle.c"
        var $133=($132)==0; //@line 5904 "cPickle.c"
        if ($133) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 5904 "cPickle.c"
      case 61: // $bb60
        var $134=$t; //@line 5904 "cPickle.c"
        var $135=$134+4; //@line 5904 "cPickle.c"
        var $136=HEAP[$135]; //@line 5904 "cPickle.c"
        var $137=$136+24; //@line 5904 "cPickle.c"
        var $138=HEAP[$137]; //@line 5904 "cPickle.c"
        var $139=$t; //@line 5904 "cPickle.c"
        FUNCTION_TABLE[$138]($139); //@line 5904 "cPickle.c"
        __label__ = 62; break; //@line 5904 "cPickle.c"
      case 62: // $bb61
        var $140=HEAP[_PickleError]; //@line 5906 "cPickle.c"
        var $141=_PyErr_NewException(__str147, $140, 0); //@line 5906 "cPickle.c"
        HEAP[_PicklingError]=$141; //@line 5906 "cPickle.c"
        var $142=($141)==0; //@line 5908 "cPickle.c"
        if ($142) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 5908 "cPickle.c"
      case 63: // $bb62
        $0=-1; //@line 5909 "cPickle.c"
        __label__ = 89; break; //@line 5909 "cPickle.c"
      case 64: // $bb63
        var $143=_PyDict_New(); //@line 5911 "cPickle.c"
        $t=$143; //@line 5911 "cPickle.c"
        var $144=$t; //@line 5911 "cPickle.c"
        var $145=($144)==0; //@line 5911 "cPickle.c"
        if ($145) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 5911 "cPickle.c"
      case 65: // $bb64
        $0=-1; //@line 5911 "cPickle.c"
        __label__ = 89; break; //@line 5911 "cPickle.c"
      case 66: // $bb65
        var $146=$module_dict_addr; //@line 5912 "cPickle.c"
        var $147=$t; //@line 5912 "cPickle.c"
        var $148=_PyRun_StringFlags(__str148, 257, $146, $147, 0); //@line 5912 "cPickle.c"
        $r=$148; //@line 5912 "cPickle.c"
        var $149=$r; //@line 5912 "cPickle.c"
        var $150=($149)==0; //@line 5912 "cPickle.c"
        if ($150) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 5912 "cPickle.c"
      case 67: // $bb66
        $0=-1; //@line 5912 "cPickle.c"
        __label__ = 89; break; //@line 5912 "cPickle.c"
      case 68: // $bb67
        var $151=$r; //@line 5919 "cPickle.c"
        var $152=$151; //@line 5919 "cPickle.c"
        var $153=HEAP[$152]; //@line 5919 "cPickle.c"
        var $154=($153) - 1; //@line 5919 "cPickle.c"
        var $155=$r; //@line 5919 "cPickle.c"
        var $156=$155; //@line 5919 "cPickle.c"
        HEAP[$156]=$154; //@line 5919 "cPickle.c"
        var $157=$r; //@line 5919 "cPickle.c"
        var $158=$157; //@line 5919 "cPickle.c"
        var $159=HEAP[$158]; //@line 5919 "cPickle.c"
        var $160=($159)==0; //@line 5919 "cPickle.c"
        if ($160) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 5919 "cPickle.c"
      case 69: // $bb68
        var $161=$r; //@line 5919 "cPickle.c"
        var $162=$161+4; //@line 5919 "cPickle.c"
        var $163=HEAP[$162]; //@line 5919 "cPickle.c"
        var $164=$163+24; //@line 5919 "cPickle.c"
        var $165=HEAP[$164]; //@line 5919 "cPickle.c"
        var $166=$r; //@line 5919 "cPickle.c"
        FUNCTION_TABLE[$165]($166); //@line 5919 "cPickle.c"
        __label__ = 70; break; //@line 5919 "cPickle.c"
      case 70: // $bb69
        var $167=HEAP[_PicklingError]; //@line 5921 "cPickle.c"
        var $168=$t; //@line 5921 "cPickle.c"
        var $169=_PyErr_NewException(__str149, $167, $168); //@line 5921 "cPickle.c"
        HEAP[_UnpickleableError]=$169; //@line 5921 "cPickle.c"
        var $170=($169)==0; //@line 5921 "cPickle.c"
        if ($170) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 5921 "cPickle.c"
      case 71: // $bb70
        $0=-1; //@line 5923 "cPickle.c"
        __label__ = 89; break; //@line 5923 "cPickle.c"
      case 72: // $bb71
        var $171=$t; //@line 5925 "cPickle.c"
        var $172=$171; //@line 5925 "cPickle.c"
        var $173=HEAP[$172]; //@line 5925 "cPickle.c"
        var $174=($173) - 1; //@line 5925 "cPickle.c"
        var $175=$t; //@line 5925 "cPickle.c"
        var $176=$175; //@line 5925 "cPickle.c"
        HEAP[$176]=$174; //@line 5925 "cPickle.c"
        var $177=$t; //@line 5925 "cPickle.c"
        var $178=$177; //@line 5925 "cPickle.c"
        var $179=HEAP[$178]; //@line 5925 "cPickle.c"
        var $180=($179)==0; //@line 5925 "cPickle.c"
        if ($180) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 5925 "cPickle.c"
      case 73: // $bb72
        var $181=$t; //@line 5925 "cPickle.c"
        var $182=$181+4; //@line 5925 "cPickle.c"
        var $183=HEAP[$182]; //@line 5925 "cPickle.c"
        var $184=$183+24; //@line 5925 "cPickle.c"
        var $185=HEAP[$184]; //@line 5925 "cPickle.c"
        var $186=$t; //@line 5925 "cPickle.c"
        FUNCTION_TABLE[$185]($186); //@line 5925 "cPickle.c"
        __label__ = 74; break; //@line 5925 "cPickle.c"
      case 74: // $bb73
        var $187=HEAP[_PickleError]; //@line 5927 "cPickle.c"
        var $188=_PyErr_NewException(__str150, $187, 0); //@line 5927 "cPickle.c"
        HEAP[_UnpicklingError]=$188; //@line 5927 "cPickle.c"
        var $189=($188)==0; //@line 5927 "cPickle.c"
        if ($189) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 5927 "cPickle.c"
      case 75: // $bb74
        $0=-1; //@line 5929 "cPickle.c"
        __label__ = 89; break; //@line 5929 "cPickle.c"
      case 76: // $bb75
        var $190=HEAP[_UnpicklingError]; //@line 5931 "cPickle.c"
        var $191=_PyErr_NewException(__str151, $190, 0); //@line 5931 "cPickle.c"
        HEAP[_BadPickleGet]=$191; //@line 5931 "cPickle.c"
        var $192=HEAP[_BadPickleGet]; //@line 5931 "cPickle.c"
        var $193=($192)==0; //@line 5931 "cPickle.c"
        if ($193) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 5931 "cPickle.c"
      case 77: // $bb76
        $0=-1; //@line 5933 "cPickle.c"
        __label__ = 89; break; //@line 5933 "cPickle.c"
      case 78: // $bb77
        var $194=HEAP[_PickleError]; //@line 5935 "cPickle.c"
        var $195=$module_dict_addr; //@line 5935 "cPickle.c"
        var $196=_PyDict_SetItemString($195, __str152, $194); //@line 5935 "cPickle.c"
        var $197=($196) < 0; //@line 5935 "cPickle.c"
        if ($197) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 5935 "cPickle.c"
      case 79: // $bb78
        $0=-1; //@line 5937 "cPickle.c"
        __label__ = 89; break; //@line 5937 "cPickle.c"
      case 80: // $bb79
        var $198=HEAP[_PicklingError]; //@line 5939 "cPickle.c"
        var $199=$module_dict_addr; //@line 5939 "cPickle.c"
        var $200=_PyDict_SetItemString($199, __str75, $198); //@line 5939 "cPickle.c"
        var $201=($200) < 0; //@line 5939 "cPickle.c"
        if ($201) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 5939 "cPickle.c"
      case 81: // $bb80
        $0=-1; //@line 5941 "cPickle.c"
        __label__ = 89; break; //@line 5941 "cPickle.c"
      case 82: // $bb81
        var $202=HEAP[_UnpicklingError]; //@line 5943 "cPickle.c"
        var $203=$module_dict_addr; //@line 5943 "cPickle.c"
        var $204=_PyDict_SetItemString($203, __str110, $202); //@line 5943 "cPickle.c"
        var $205=($204) < 0; //@line 5943 "cPickle.c"
        if ($205) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 5943 "cPickle.c"
      case 83: // $bb82
        $0=-1; //@line 5945 "cPickle.c"
        __label__ = 89; break; //@line 5945 "cPickle.c"
      case 84: // $bb83
        var $206=HEAP[_UnpickleableError]; //@line 5947 "cPickle.c"
        var $207=$module_dict_addr; //@line 5947 "cPickle.c"
        var $208=_PyDict_SetItemString($207, __str153, $206); //@line 5947 "cPickle.c"
        var $209=($208) < 0; //@line 5947 "cPickle.c"
        if ($209) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 5947 "cPickle.c"
      case 85: // $bb84
        $0=-1; //@line 5949 "cPickle.c"
        __label__ = 89; break; //@line 5949 "cPickle.c"
      case 86: // $bb85
        var $210=HEAP[_BadPickleGet]; //@line 5951 "cPickle.c"
        var $211=$module_dict_addr; //@line 5951 "cPickle.c"
        var $212=_PyDict_SetItemString($211, __str154, $210); //@line 5951 "cPickle.c"
        var $213=($212) < 0; //@line 5951 "cPickle.c"
        if ($213) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 5951 "cPickle.c"
      case 87: // $bb86
        $0=-1; //@line 5953 "cPickle.c"
        __label__ = 89; break; //@line 5953 "cPickle.c"
      case 88: // $bb87
        var $214=_PyCapsule_Import(__str155, 0); //@line 5955 "cPickle.c"
        var $215=$214; //@line 5955 "cPickle.c"
        HEAP[_PycStringIO]=$215; //@line 5955 "cPickle.c"
        $0=0; //@line 5957 "cPickle.c"
        __label__ = 89; break; //@line 5957 "cPickle.c"
      case 89: // $bb88
        var $216=$0; //@line 5834 "cPickle.c"
        $retval=$216; //@line 5834 "cPickle.c"
        var $retval89=$retval; //@line 5834 "cPickle.c"
        ;
        return $retval89; //@line 5834 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initcPickle() {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $m;
        var $d;
        var $di;
        var $v=__stackBase__;
        var $k=__stackBase__+4;
        var $i=__stackBase__+8;
        var $rev;
        var $format_version;
        var $compatible_formats;
        $rev=__str156; //@line 5968 "cPickle.c"
        HEAP[_Picklertype+4]=_PyType_Type; //@line 5972 "cPickle.c"
        HEAP[_Unpicklertype+4]=_PyType_Type; //@line 5973 "cPickle.c"
        HEAP[_PdataType+4]=_PyType_Type; //@line 5974 "cPickle.c"
        var $0=_PyDict_New(); //@line 5979 "cPickle.c"
        $di=$0; //@line 5979 "cPickle.c"
        var $1=$di; //@line 5980 "cPickle.c"
        var $2=($1)==0; //@line 5980 "cPickle.c"
        if ($2) { __label__ = 20; break; } else { __label__ = 1; break; } //@line 5980 "cPickle.c"
      case 1: // $bb
        var $3=$di; //@line 5981 "cPickle.c"
        var $4=_init_stuff($3); //@line 5981 "cPickle.c"
        var $5=($4) < 0; //@line 5981 "cPickle.c"
        if ($5) { __label__ = 20; break; } else { __label__ = 2; break; } //@line 5981 "cPickle.c"
      case 2: // $bb1
        var $6=_Py_InitModule4(__str157, _cPickle_methods, _cPickle_module_documentation, 0, 1013); //@line 5984 "cPickle.c"
        $m=$6; //@line 5984 "cPickle.c"
        var $7=$m; //@line 5987 "cPickle.c"
        var $8=($7)==0; //@line 5987 "cPickle.c"
        if ($8) { __label__ = 20; break; } else { __label__ = 3; break; } //@line 5987 "cPickle.c"
      case 3: // $bb2
        var $9=$m; //@line 5991 "cPickle.c"
        var $10=_PyModule_GetDict($9); //@line 5991 "cPickle.c"
        $d=$10; //@line 5991 "cPickle.c"
        var $11=$rev; //@line 5992 "cPickle.c"
        var $12=_PyString_FromString($11); //@line 5992 "cPickle.c"
        HEAP[$v]=$12; //@line 5992 "cPickle.c"
        var $13=HEAP[$v]; //@line 5993 "cPickle.c"
        var $14=$d; //@line 5993 "cPickle.c"
        var $15=_PyDict_SetItemString($14, __str158, $13); //@line 5993 "cPickle.c"
        var $16=HEAP[$v]; //@line 5994 "cPickle.c"
        var $17=($16)!=0; //@line 5994 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5994 "cPickle.c"
      case 4: // $bb3
        var $18=HEAP[$v]; //@line 5994 "cPickle.c"
        var $19=$18; //@line 5994 "cPickle.c"
        var $20=HEAP[$19]; //@line 5994 "cPickle.c"
        var $21=($20) - 1; //@line 5994 "cPickle.c"
        var $22=$18; //@line 5994 "cPickle.c"
        HEAP[$22]=$21; //@line 5994 "cPickle.c"
        var $23=$18; //@line 5994 "cPickle.c"
        var $24=HEAP[$23]; //@line 5994 "cPickle.c"
        var $25=($24)==0; //@line 5994 "cPickle.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5994 "cPickle.c"
      case 5: // $bb4
        var $26=HEAP[$v]; //@line 5994 "cPickle.c"
        var $27=$26+4; //@line 5994 "cPickle.c"
        var $28=HEAP[$27]; //@line 5994 "cPickle.c"
        var $29=$28+24; //@line 5994 "cPickle.c"
        var $30=HEAP[$29]; //@line 5994 "cPickle.c"
        var $31=HEAP[$v]; //@line 5994 "cPickle.c"
        FUNCTION_TABLE[$30]($31); //@line 5994 "cPickle.c"
        __label__ = 6; break; //@line 5994 "cPickle.c"
      case 6: // $bb5
        HEAP[$i]=0; //@line 5997 "cPickle.c"
        __label__ = 10; break; //@line 5997 "cPickle.c"
      case 7: // $bb6
        var $32=HEAP[$v]; //@line 5998 "cPickle.c"
        var $33=HEAP[$k]; //@line 5998 "cPickle.c"
        var $34=$d; //@line 5998 "cPickle.c"
        var $35=_PyObject_SetItem($34, $33, $32); //@line 5998 "cPickle.c"
        var $36=($35) < 0; //@line 5998 "cPickle.c"
        if ($36) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 5998 "cPickle.c"
      case 8: // $bb7
        var $37=$di; //@line 5999 "cPickle.c"
        var $38=$37; //@line 5999 "cPickle.c"
        var $39=HEAP[$38]; //@line 5999 "cPickle.c"
        var $40=($39) - 1; //@line 5999 "cPickle.c"
        var $41=$di; //@line 5999 "cPickle.c"
        var $42=$41; //@line 5999 "cPickle.c"
        HEAP[$42]=$40; //@line 5999 "cPickle.c"
        var $43=$di; //@line 5999 "cPickle.c"
        var $44=$43; //@line 5999 "cPickle.c"
        var $45=HEAP[$44]; //@line 5999 "cPickle.c"
        var $46=($45)==0; //@line 5999 "cPickle.c"
        if ($46) { __label__ = 9; break; } else { __label__ = 20; break; } //@line 5999 "cPickle.c"
      case 9: // $bb8
        var $47=$di; //@line 5999 "cPickle.c"
        var $48=$47+4; //@line 5999 "cPickle.c"
        var $49=HEAP[$48]; //@line 5999 "cPickle.c"
        var $50=$49+24; //@line 5999 "cPickle.c"
        var $51=HEAP[$50]; //@line 5999 "cPickle.c"
        var $52=$di; //@line 5999 "cPickle.c"
        FUNCTION_TABLE[$51]($52); //@line 5999 "cPickle.c"
        __label__ = 20; break; //@line 5999 "cPickle.c"
      case 10: // $bb10
        var $53=$di; //@line 5997 "cPickle.c"
        var $54=_PyDict_Next($53, $i, $k, $v); //@line 5997 "cPickle.c"
        var $55=($54)!=0; //@line 5997 "cPickle.c"
        if ($55) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 5997 "cPickle.c"
      case 11: // $bb11
        var $56=$di; //@line 6003 "cPickle.c"
        var $57=$56; //@line 6003 "cPickle.c"
        var $58=HEAP[$57]; //@line 6003 "cPickle.c"
        var $59=($58) - 1; //@line 6003 "cPickle.c"
        var $60=$di; //@line 6003 "cPickle.c"
        var $61=$60; //@line 6003 "cPickle.c"
        HEAP[$61]=$59; //@line 6003 "cPickle.c"
        var $62=$di; //@line 6003 "cPickle.c"
        var $63=$62; //@line 6003 "cPickle.c"
        var $64=HEAP[$63]; //@line 6003 "cPickle.c"
        var $65=($64)==0; //@line 6003 "cPickle.c"
        if ($65) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 6003 "cPickle.c"
      case 12: // $bb12
        var $66=$di; //@line 6003 "cPickle.c"
        var $67=$66+4; //@line 6003 "cPickle.c"
        var $68=HEAP[$67]; //@line 6003 "cPickle.c"
        var $69=$68+24; //@line 6003 "cPickle.c"
        var $70=HEAP[$69]; //@line 6003 "cPickle.c"
        var $71=$di; //@line 6003 "cPickle.c"
        FUNCTION_TABLE[$70]($71); //@line 6003 "cPickle.c"
        __label__ = 13; break; //@line 6003 "cPickle.c"
      case 13: // $bb13
        var $72=$m; //@line 6005 "cPickle.c"
        var $73=_PyModule_AddIntConstant($72, __str159, 2); //@line 6005 "cPickle.c"
        HEAP[$i]=$73; //@line 6005 "cPickle.c"
        var $74=($73) < 0; //@line 6006 "cPickle.c"
        if ($74) { __label__ = 20; break; } else { __label__ = 14; break; } //@line 6006 "cPickle.c"
      case 14: // $bb14
        var $75=_PyString_FromString(__str160); //@line 6011 "cPickle.c"
        $format_version=$75; //@line 6011 "cPickle.c"
        var $76=_Py_BuildValue(__str161, allocate([__str162,0,0,0,__str163,0,0,0,__str164,0,0,0,__str165,0,0,0,__str160,0,0,0], ["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 6013 "cPickle.c"
        $compatible_formats=$76; //@line 6013 "cPickle.c"
        var $77=$d; //@line 6019 "cPickle.c"
        var $78=$format_version; //@line 6019 "cPickle.c"
        var $79=_PyDict_SetItemString($77, __str166, $78); //@line 6019 "cPickle.c"
        var $80=$d; //@line 6020 "cPickle.c"
        var $81=$compatible_formats; //@line 6020 "cPickle.c"
        var $82=_PyDict_SetItemString($80, __str167, $81); //@line 6020 "cPickle.c"
        var $83=$format_version; //@line 6021 "cPickle.c"
        var $84=($83)!=0; //@line 6021 "cPickle.c"
        if ($84) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 6021 "cPickle.c"
      case 15: // $bb15
        var $85=$format_version; //@line 6021 "cPickle.c"
        var $86=$85; //@line 6021 "cPickle.c"
        var $87=HEAP[$86]; //@line 6021 "cPickle.c"
        var $88=($87) - 1; //@line 6021 "cPickle.c"
        var $89=$format_version; //@line 6021 "cPickle.c"
        var $90=$89; //@line 6021 "cPickle.c"
        HEAP[$90]=$88; //@line 6021 "cPickle.c"
        var $91=$format_version; //@line 6021 "cPickle.c"
        var $92=$91; //@line 6021 "cPickle.c"
        var $93=HEAP[$92]; //@line 6021 "cPickle.c"
        var $94=($93)==0; //@line 6021 "cPickle.c"
        if ($94) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 6021 "cPickle.c"
      case 16: // $bb16
        var $95=$format_version; //@line 6021 "cPickle.c"
        var $96=$95+4; //@line 6021 "cPickle.c"
        var $97=HEAP[$96]; //@line 6021 "cPickle.c"
        var $98=$97+24; //@line 6021 "cPickle.c"
        var $99=HEAP[$98]; //@line 6021 "cPickle.c"
        var $100=$format_version; //@line 6021 "cPickle.c"
        FUNCTION_TABLE[$99]($100); //@line 6021 "cPickle.c"
        __label__ = 17; break; //@line 6021 "cPickle.c"
      case 17: // $bb17
        var $101=$compatible_formats; //@line 6022 "cPickle.c"
        var $102=($101)!=0; //@line 6022 "cPickle.c"
        if ($102) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 6022 "cPickle.c"
      case 18: // $bb18
        var $103=$compatible_formats; //@line 6022 "cPickle.c"
        var $104=$103; //@line 6022 "cPickle.c"
        var $105=HEAP[$104]; //@line 6022 "cPickle.c"
        var $106=($105) - 1; //@line 6022 "cPickle.c"
        var $107=$compatible_formats; //@line 6022 "cPickle.c"
        var $108=$107; //@line 6022 "cPickle.c"
        HEAP[$108]=$106; //@line 6022 "cPickle.c"
        var $109=$compatible_formats; //@line 6022 "cPickle.c"
        var $110=$109; //@line 6022 "cPickle.c"
        var $111=HEAP[$110]; //@line 6022 "cPickle.c"
        var $112=($111)==0; //@line 6022 "cPickle.c"
        if ($112) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 6022 "cPickle.c"
      case 19: // $bb19
        var $113=$compatible_formats; //@line 6022 "cPickle.c"
        var $114=$113+4; //@line 6022 "cPickle.c"
        var $115=HEAP[$114]; //@line 6022 "cPickle.c"
        var $116=$115+24; //@line 6022 "cPickle.c"
        var $117=HEAP[$116]; //@line 6022 "cPickle.c"
        var $118=$compatible_formats; //@line 6022 "cPickle.c"
        FUNCTION_TABLE[$117]($118); //@line 6022 "cPickle.c"
        __label__ = 20; break; //@line 6022 "cPickle.c"
      case 20: // $return
        STACKTOP = __stackBase__;
        return; //@line 5980 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  Module["_initcPickle"] = _initcPickle;
FUNCTION_TABLE = FUNCTION_TABLE.concat([0,0,__PyObject_NextNotImplemented,0,_write_file,0,_write_cStringIO,0,_write_none,0,_write_other,0,_read_file,0,_readline_file,0,_read_cStringIO,0,_readline_cStringIO,0,_read_other,0,_readline_other,0,_Pdata_dealloc,0,_Pickler_dump,0,_Pickle_clear_memo,0,_Pickle_getvalue,0,_Pickler_get_pers_func,0,_Pickler_set_pers_func,0,_Pickler_set_inst_pers_func,0,_Pickler_get_memo,0,_Pickler_set_memo,0,_Pickler_get_error,0,_Pickler_dealloc,0,_PyObject_GenericGetAttr,0,_PyObject_GenericSetAttr,0,_Pickler_traverse,0,_Pickler_clear,0,_Unpickler_load,0,_Unpickler_noload,0,_Unpickler_dealloc,0,_Unpickler_getattr,0,_Unpickler_setattr,0,_Unpickler_traverse,0,_Unpickler_clear,0,_cpm_dump,0,_cpm_dumps,0,_cpm_load,0,_cpm_loads,0,_get_Pickler,0,_get_Unpickler,0]);

// === Auto-generated postamble setup entry stuff ===

function run(args) {
  
_cPickle_module_documentation=allocate([67,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,97,110,100,32,111,112,116,105,109,105,122,97,116,105,111,110,32,111,102,32,116,104,101,32,80,121,116,104,111,110,32,112,105,99,107,108,101,32,109,111,100,117,108,101,46,0] /* C implementation and */, "i8", ALLOC_NORMAL);
_MARKv=allocate([40], ["i8",0,0,0,0], ALLOC_NORMAL);
__str=allocate([99,80,105,99,107,108,101,46,80,100,97,116,97,0] /* cPickle.Pdata\00 */, "i8", ALLOC_NORMAL);
__str1=allocate(1, "i8", ALLOC_NORMAL);
_PdataType=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_UnpicklingError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str2=allocate([117,110,112,105,99,107,108,105,110,103,32,115,116,97,99,107,32,117,110,100,101,114,102,108,111,119,0] /* unpickling stack und */, "i8", ALLOC_NORMAL);
_PycStringIO=allocate(1, "%struct.PycStringIO_CAPI*", ALLOC_NORMAL);
_empty_tuple=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_PicklingError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str3=allocate([110,111,32,105,110,116,32,119,104,101,114,101,32,105,110,116,32,101,120,112,101,99,116,101,100,32,105,110,32,109,101,109,111,0] /* no int where int exp */, "i8", ALLOC_NORMAL);
__str4=allocate([37,108,100,10,0] /* %ld\0A\00 */, "i8", ALLOC_NORMAL);
__str5=allocate([37,100,10,0] /* %d\0A\00 */, "i8", ALLOC_NORMAL);
__str6=allocate([95,95,109,111,100,117,108,101,95,95,0] /* __module__\00 */, "i8", ALLOC_NORMAL);
__str7=allocate([109,111,100,117,108,101,115,0] /* modules\00 */, "i8", ALLOC_NORMAL);
___main___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str8=allocate([102,97,115,116,32,109,111,100,101,58,32,99,97,110,39,116,32,112,105,99,107,108,101,32,99,121,99,108,105,99,32,111,98,106,101,99,116,115,32,105,110,99,108,117,100,105,110,103,32,111,98,106,101,99,116,32,116,121,112,101,32,37,115,32,97,116,32,37,112,0] /* fast mode: can't pic */, "i8", ALLOC_NORMAL);
_none_9451=allocate([78], ["i8",0,0,0,0], ALLOC_NORMAL);
_len_9463=allocate([4,4] /* \04\04 */, "i8", ALLOC_NORMAL);
_buf_9462=allocate(8, "i8*", ALLOC_NORMAL);
__str9=allocate([73,48,48,10,0] /* I00\0A\00 */, "i8", ALLOC_NORMAL);
__str10=allocate([73,48,49,10,0] /* I01\0A\00 */, "i8", ALLOC_NORMAL);
__str11=allocate([108,111,110,103,32,116,111,111,32,108,97,114,103,101,32,116,111,32,112,105,99,107,108,101,0] /* long too large to pi */, "i8", ALLOC_NORMAL);
_l_9538=allocate([76], ["i8",0,0,0,0], ALLOC_NORMAL);
__str12=allocate([10,0] /* \0A\00 */, "i8", ALLOC_NORMAL);
_string_9677=allocate([83], ["i8",0,0,0,0], ALLOC_NORMAL);
__str13=allocate([48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0] /* 0123456789abcdef\00 */, "i8", ALLOC_NORMAL);
_string_9895=allocate([86], ["i8",0,0,0,0], ALLOC_NORMAL);
__str14=allocate([80,121,84,117,112,108,101,95,83,105,122,101,40,116,41,32,61,61,32,108,101,110,0] /* PyTuple_Size(t) == l */, "i8", ALLOC_NORMAL);
__str15=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,99,80,105,99,107,108,101,46,99,0] /* ../cpython/Modules/c */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10017=allocate([115,116,111,114,101,95,116,117,112,108,101,95,101,108,101,109,101,110,116,115,0] /* store_tuple_elements */, "i8", ALLOC_NORMAL);
_pop_10042=allocate([48], ["i8",0,0,0,0], ALLOC_NORMAL);
_len2opcode_10044=allocate([41,133,134,135] /* )\85\86\87 */, "i8", ALLOC_NORMAL);
_pop_mark_10043=allocate([49], ["i8",0,0,0,0], ALLOC_NORMAL);
_tuple_10041=allocate([116], ["i8",0,0,0,0], ALLOC_NORMAL);
__str16=allocate([105,116,101,114,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* iter != ((void _)0)\ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10137=allocate([98,97,116,99,104,95,108,105,115,116,0] /* batch_list\00 */, "i8", ALLOC_NORMAL);
_append_10135=allocate([97], ["i8",0,0,0,0], ALLOC_NORMAL);
_appends_10136=allocate([101], ["i8",0,0,0,0], ALLOC_NORMAL);
__str17=allocate([32,119,104,105,108,101,32,112,105,99,107,108,105,110,103,32,97,110,32,111,98,106,101,99,116,0] /*  while pickling an o */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10326=allocate([98,97,116,99,104,95,100,105,99,116,0] /* batch_dict\00 */, "i8", ALLOC_NORMAL);
__str18=allocate([100,105,99,116,32,105,116,101,109,115,32,105,116,101,114,97,116,111,114,32,109,117,115,116,32,114,101,116,117,114,110,32,50,45,116,117,112,108,101,115,0] /* dict items iterator  */, "i8", ALLOC_NORMAL);
_setitem_10324=allocate([115], ["i8",0,0,0,0], ALLOC_NORMAL);
_setitems_10325=allocate([117], ["i8",0,0,0,0], ALLOC_NORMAL);
__str19=allocate([111,98,106,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* obj != ((void _)0)\0 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10501=allocate([98,97,116,99,104,95,100,105,99,116,95,101,120,97,99,116,0] /* batch_dict_exact\00 */, "i8", ALLOC_NORMAL);
__str20=allocate([115,101,108,102,45,62,112,114,111,116,111,32,62,32,48,0] /* self->proto > 0\00 */, "i8", ALLOC_NORMAL);
_setitem_10499=allocate([115], ["i8",0,0,0,0], ALLOC_NORMAL);
_setitems_10500=allocate([117], ["i8",0,0,0,0], ALLOC_NORMAL);
__str21=allocate([100,105,99,116,105,111,110,97,114,121,32,99,104,97,110,103,101,100,32,115,105,122,101,32,100,117,114,105,110,103,32,105,116,101,114,97,116,105,111,110,0] /* dictionary changed s */, "i8", ALLOC_NORMAL);
__str22=allocate([105,116,101,114,105,116,101,109,115,0] /* iteritems\00 */, "i8", ALLOC_NORMAL);
__str23=allocate([40,41,0] /* ()\00 */, "i8", ALLOC_NORMAL);
___class___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___getinitargs___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str24=allocate([99,108,97,115,115,32,104,97,115,32,110,111,32,110,97,109,101,0] /* class has no name\00 */, "i8", ALLOC_NORMAL);
_inst_10654=allocate([105], ["i8",0,0,0,0], ALLOC_NORMAL);
_obj_10655=allocate([111], ["i8",0,0,0,0], ALLOC_NORMAL);
___getstate___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___dict___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_build_10656=allocate([98], ["i8",0,0,0,0], ALLOC_NORMAL);
___name___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str25=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,105,109,112,111,114,116,32,111,102,32,109,111,100,117,108,101,32,37,115,32,102,97,105,108,101,100,0] /* Can't pickle %s: imp */, "i8", ALLOC_NORMAL);
__str26=allocate([79,83,0] /* OS\00 */, "i8", ALLOC_NORMAL);
__str27=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,97,116,116,114,105,98,117,116,101,32,108,111,111,107,117,112,32,37,115,46,37,115,32,102,97,105,108,101,100,0] /* Can't pickle %s: att */, "i8", ALLOC_NORMAL);
__str28=allocate([79,83,83,0] /* OSS\00 */, "i8", ALLOC_NORMAL);
__str29=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,105,116,39,115,32,110,111,116,32,116,104,101,32,115,97,109,101,32,111,98,106,101,99,116,32,97,115,32,37,115,46,37,115,0] /* Can't pickle %s: it' */, "i8", ALLOC_NORMAL);
_two_tuple=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_extension_registry=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str30=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,101,120,116,101,110,115,105,111,110,32,99,111,100,101,32,37,115,32,105,115,110,39,116,32,97,110,32,105,110,116,101,103,101,114,0] /* Can't pickle %s: ext */, "i8", ALLOC_NORMAL);
__str31=allocate([79,79,0] /* OO\00 */, "i8", ALLOC_NORMAL);
__str32=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,101,120,116,101,110,115,105,111,110,32,99,111,100,101,32,37,108,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* Can't pickle %s: ext */, "i8", ALLOC_NORMAL);
__str33=allocate([79,108,0] /* Ol\00 */, "i8", ALLOC_NORMAL);
_global_10855=allocate([99], ["i8",0,0,0,0], ALLOC_NORMAL);
__str34=allocate([112,101,114,115,105,115,116,101,110,116,32,105,100,32,109,117,115,116,32,98,101,32,115,116,114,105,110,103,0] /* persistent id must b */, "i8", ALLOC_NORMAL);
_persid_10999=allocate([80], ["i8",0,0,0,0], ALLOC_NORMAL);
_binpersid_11000=allocate([81], ["i8",0,0,0,0], ALLOC_NORMAL);
__str35=allocate([116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,99,111,110,116,97,105,110,32,50,32,116,104,114,111,117,103,104,32,53,32,101,108,101,109,101,110,116,115,0] /* tuple returned by %s */, "i8", ALLOC_NORMAL);
__str36=allocate([79,0] /* O\00 */, "i8", ALLOC_NORMAL);
__str37=allocate([115,97,118,101,95,114,101,100,117,99,101,0] /* save_reduce\00 */, "i8", ALLOC_NORMAL);
__str38=allocate([83,101,99,111,110,100,32,101,108,101,109,101,110,116,32,111,102,32,116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,97,32,116,117,112,108,101,0] /* Second element of tu */, "i8", ALLOC_NORMAL);
__str39=allocate([70,111,117,114,116,104,32,101,108,101,109,101,110,116,32,111,102,32,116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,97,110,32,105,116,101,114,97,116,111,114,44,32,110,111,116,32,37,115,0] /* Fourth element of tu */, "i8", ALLOC_NORMAL);
__str40=allocate([79,115,0] /* Os\00 */, "i8", ALLOC_NORMAL);
__str41=allocate([70,105,102,116,104,32,101,108,101,109,101,110,116,32,111,102,32,116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,97,110,32,105,116,101,114,97,116,111,114,44,32,110,111,116,32,37,115,0] /* Fifth element of tup */, "i8", ALLOC_NORMAL);
__str42=allocate([95,95,110,101,119,111,98,106,95,95,0] /* __newobj__\00 */, "i8", ALLOC_NORMAL);
__str43=allocate([95,95,110,101,119,111,98,106,95,95,32,97,114,103,108,105,115,116,32,105,115,32,101,109,112,116,121,0] /* __newobj__ arglist i */, "i8", ALLOC_NORMAL);
__str44=allocate([95,95,110,101,119,95,95,0] /* __new__\00 */, "i8", ALLOC_NORMAL);
__str45=allocate([97,114,103,115,91,48,93,32,102,114,111,109,32,95,95,110,101,119,111,98,106,95,95,32,97,114,103,115,32,104,97,115,32,110,111,32,95,95,110,101,119,95,95,0] /* args[0] from __newob */, "i8", ALLOC_NORMAL);
__str46=allocate([97,114,103,115,91,48,93,32,102,114,111,109,32,95,95,110,101,119,111,98,106,95,95,32,97,114,103,115,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,99,108,97,115,115,0] /* args[0] from __newob */, "i8", ALLOC_NORMAL);
_newobj_11120=allocate([-127], ["i8",0,0,0,0], ALLOC_NORMAL);
_reduce_11118=allocate([82], ["i8",0,0,0,0], ALLOC_NORMAL);
_build_11119=allocate([98], ["i8",0,0,0,0], ALLOC_NORMAL);
_PickleError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_dispatch_table=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___reduce_ex___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___reduce___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_UnpickleableError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str47=allocate([86,97,108,117,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,115,116,114,105,110,103,32,111,114,32,116,117,112,108,101,0] /* Value returned by %s */, "i8", ALLOC_NORMAL);
__str48=allocate([115,101,108,102,45,62,112,114,111,116,111,32,62,61,32,48,32,38,38,32,115,101,108,102,45,62,112,114,111,116,111,32,60,32,50,53,54,0] /* self->proto >= 0 &&  */, "i8", ALLOC_NORMAL);
_stop_11690=allocate([46], ["i8",0,0,0,0], ALLOC_NORMAL);
__str49=allocate([124,105,58,103,101,116,118,97,108,117,101,0] /* |i:getvalue\00 */, "i8", ALLOC_NORMAL);
__str50=allocate([65,116,116,101,109,112,116,32,116,111,32,103,101,116,118,97,108,117,101,40,41,32,97,32,110,111,110,45,108,105,115,116,45,98,97,115,101,100,32,112,105,99,107,108,101,114,0] /* Attempt to getvalue( */, "i8", ALLOC_NORMAL);
__str51=allocate([73,110,118,97,108,105,100,32,103,101,116,32,100,97,116,97,0] /* Invalid get data\00 */, "i8", ALLOC_NORMAL);
__str52=allocate([85,110,101,120,112,101,99,116,101,100,32,100,97,116,97,32,105,110,32,105,110,116,101,114,110,97,108,32,108,105,115,116,0] /* Unexpected data in i */, "i8", ALLOC_NORMAL);
__str53=allocate([79,124,105,58,100,117,109,112,0] /* O|i:dump\00 */, "i8", ALLOC_NORMAL);
__str54=allocate([100,117,109,112,0] /* dump\00 */, "i8", ALLOC_NORMAL);
__str55=allocate([100,117,109,112,40,111,98,106,101,99,116,41,32,45,45,32,87,114,105,116,101,32,97,110,32,111,98,106,101,99,116,32,105,110,32,112,105,99,107,108,101,32,102,111,114,109,97,116,32,116,111,32,116,104,101,32,111,98,106,101,99,116,39,115,32,112,105,99,107,108,101,32,115,116,114,101,97,109,0] /* dump(object) -- Writ */, "i8", ALLOC_NORMAL);
__str56=allocate([99,108,101,97,114,95,109,101,109,111,0] /* clear_memo\00 */, "i8", ALLOC_NORMAL);
__str57=allocate([99,108,101,97,114,95,109,101,109,111,40,41,32,45,45,32,67,108,101,97,114,32,116,104,101,32,112,105,99,107,108,101,114,115,32,109,101,109,111,0] /* clear_memo() -- Clea */, "i8", ALLOC_NORMAL);
__str58=allocate([103,101,116,118,97,108,117,101,0] /* getvalue\00 */, "i8", ALLOC_NORMAL);
__str59=allocate([103,101,116,118,97,108,117,101,40,41,32,45,45,32,70,105,110,105,115,104,32,112,105,99,107,105,110,103,32,97,32,108,105,115,116,45,98,97,115,101,100,32,112,105,99,107,108,101,0] /* getvalue() -- Finish */, "i8", ALLOC_NORMAL);
_Pickler_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str60=allocate([112,105,99,107,108,101,32,112,114,111,116,111,99,111,108,32,37,100,32,97,115,107,101,100,32,102,111,114,59,32,116,104,101,32,104,105,103,104,101,115,116,32,97,118,97,105,108,97,98,108,101,32,112,114,111,116,111,99,111,108,32,105,115,32,37,100,0] /* pickle protocol %d a */, "i8", ALLOC_NORMAL);
__str61=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
_write_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str62=allocate([97,114,103,117,109,101,110,116,32,109,117,115,116,32,104,97,118,101,32,39,119,114,105,116,101,39,32,97,116,116,114,105,98,117,116,101,0] /* argument must have ' */, "i8", ALLOC_NORMAL);
__str63=allocate([99,111,112,121,95,114,101,103,0] /* copy_reg\00 */, "i8", ALLOC_NORMAL);
_dispatch_table_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str64=allocate([124,105,58,80,105,99,107,108,101,114,0] /* |i:Pickler\00 */, "i8", ALLOC_NORMAL);
__str65=allocate([79,124,105,58,80,105,99,107,108,101,114,0] /* O|i:Pickler\00 */, "i8", ALLOC_NORMAL);
_kwlist_12011=allocate(12, "i8*", ALLOC_NORMAL);
__str66=allocate([102,105,108,101,0] /* file\00 */, "i8", ALLOC_NORMAL);
__str67=allocate([112,114,111,116,111,99,111,108,0] /* protocol\00 */, "i8", ALLOC_NORMAL);
__str68=allocate([112,101,114,115,105,115,116,101,110,116,95,105,100,0] /* persistent_id\00 */, "i8", ALLOC_NORMAL);
__str69=allocate([97,116,116,114,105,98,117,116,101,32,100,101,108,101,116,105,111,110,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* attribute deletion i */, "i8", ALLOC_NORMAL);
__str70=allocate([109,101,109,111,0] /* memo\00 */, "i8", ALLOC_NORMAL);
__str71=allocate([109,101,109,111,32,109,117,115,116,32,98,101,32,97,32,100,105,99,116,105,111,110,97,114,121,0] /* memo must be a dicti */, "i8", ALLOC_NORMAL);
__str72=allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_NORMAL);
__str73=allocate([102,97,115,116,0] /* fast\00 */, "i8", ALLOC_NORMAL);
_Pickler_members=allocate([0, 0, 0, 0, 1, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str74=allocate([105,110,115,116,95,112,101,114,115,105,115,116,101,110,116,95,105,100,0] /* inst_persistent_id\0 */, "i8", ALLOC_NORMAL);
__str75=allocate([80,105,99,107,108,105,110,103,69,114,114,111,114,0] /* PicklingError\00 */, "i8", ALLOC_NORMAL);
_Pickler_getsets=allocate(100, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_Picklertype__doc__=allocate([79,98,106,101,99,116,115,32,116,104,97,116,32,107,110,111,119,32,104,111,119,32,116,111,32,112,105,99,107,108,101,32,111,98,106,101,99,116,115,10,0] /* Objects that know ho */, "i8", ALLOC_NORMAL);
__str76=allocate([99,80,105,99,107,108,101,46,80,105,99,107,108,101,114,0] /* cPickle.Pickler\00 */, "i8", ALLOC_NORMAL);
_Picklertype=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str77=allocate([71,108,111,98,97,108,32,97,110,100,32,105,110,115,116,97,110,99,101,32,112,105,99,107,108,101,115,32,97,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0] /* Global and instance  */, "i8", ALLOC_NORMAL);
__str78=allocate([99,111,117,108,100,32,110,111,116,32,102,105,110,100,32,77,65,82,75,0] /* could not find MARK\ */, "i8", ALLOC_NORMAL);
__str79=allocate([112,105,99,107,108,101,32,100,97,116,97,32,119,97,115,32,116,114,117,110,99,97,116,101,100,0] /* pickle data was trun */, "i8", ALLOC_NORMAL);
__str80=allocate([99,111,117,108,100,32,110,111,116,32,99,111,110,118,101,114,116,32,115,116,114,105,110,103,32,116,111,32,105,110,116,0] /* could not convert st */, "i8", ALLOC_NORMAL);
__str81=allocate([98,111,111,108,101,97,110,32,61,61,32,40,40,80,121,79,98,106,101,99,116,32,42,41,32,38,95,80,121,95,84,114,117,101,83,116,114,117,99,116,41,32,124,124,32,98,111,111,108,101,97,110,32,61,61,32,40,40,80,121,79,98,106,101,99,116,32,42,41,32,38,95,80,121,95,90,101,114,111,83,116,114,117,99,116,41,0] /* boolean == ((PyObjec */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___12572=allocate([108,111,97,100,95,98,111,111,108,0] /* load_bool\00 */, "i8", ALLOC_NORMAL);
__str82=allocate([115,105,122,101,32,61,61,32,49,32,124,124,32,115,105,122,101,32,61,61,32,52,0] /* size == 1 || size == */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___12743=allocate([108,111,97,100,95,99,111,117,110,116,101,100,95,108,111,110,103,0] /* load_counted_long\00 */, "i8", ALLOC_NORMAL);
__str83=allocate([76,79,78,71,32,112,105,99,107,108,101,32,104,97,115,32,110,101,103,97,116,105,118,101,32,98,121,116,101,32,99,111,117,110,116,0] /* LONG pickle has nega */, "i8", ALLOC_NORMAL);
__str84=allocate([99,111,117,108,100,32,110,111,116,32,99,111,110,118,101,114,116,32,115,116,114,105,110,103,32,116,111,32,102,108,111,97,116,0] /* could not convert st */, "i8", ALLOC_NORMAL);
__str85=allocate([105,110,115,101,99,117,114,101,32,115,116,114,105,110,103,32,112,105,99,107,108,101,0] /* insecure string pick */, "i8", ALLOC_NORMAL);
__str86=allocate([66,73,78,83,84,82,73,78,71,32,112,105,99,107,108,101,32,104,97,115,32,110,101,103,97,116,105,118,101,32,98,121,116,101,32,99,111,117,110,116,0] /* BINSTRING pickle has */, "i8", ALLOC_NORMAL);
__str87=allocate([66,73,78,85,78,73,67,79,68,69,32,112,105,99,107,108,101,32,104,97,115,32,110,101,103,97,116,105,118,101,32,98,121,116,101,32,99,111,117,110,116,0] /* BINUNICODE pickle ha */, "i8", ALLOC_NORMAL);
__str88=allocate([98,97,100,32,112,105,99,107,108,101,32,100,97,116,97,0] /* bad pickle data\00 */, "i8", ALLOC_NORMAL);
__str89=allocate([78,69,87,79,66,74,32,101,120,112,101,99,116,101,100,32,97,110,32,97,114,103,32,116,117,112,108,101,46,0] /* NEWOBJ expected an a */, "i8", ALLOC_NORMAL);
__str90=allocate([78,69,87,79,66,74,32,99,108,97,115,115,32,97,114,103,117,109,101,110,116,32,105,115,110,39,116,32,97,32,116,121,112,101,32,111,98,106,101,99,116,0] /* NEWOBJ class argumen */, "i8", ALLOC_NORMAL);
__str91=allocate([78,69,87,79,66,74,32,99,108,97,115,115,32,97,114,103,117,109,101,110,116,32,104,97,115,32,78,85,76,76,32,116,112,95,110,101,119,0] /* NEWOBJ class argumen */, "i8", ALLOC_NORMAL);
__str92=allocate([65,32,108,111,97,100,32,112,101,114,115,105,115,116,101,110,116,32,105,100,32,105,110,115,116,114,117,99,116,105,111,110,32,119,97,115,32,101,110,99,111,117,110,116,101,114,101,100,44,10,98,117,116,32,110,111,32,112,101,114,115,105,115,116,101,110,116,95,108,111,97,100,32,102,117,110,99,116,105,111,110,32,119,97,115,32,115,112,101,99,105,102,105,101,100,46,0] /* A load persistent id */, "i8", ALLOC_NORMAL);
_BadPickleGet=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str93=allocate([110,98,121,116,101,115,32,61,61,32,49,32,124,124,32,110,98,121,116,101,115,32,61,61,32,50,32,124,124,32,110,98,121,116,101,115,32,61,61,32,52,0] /* nbytes == 1 || nbyte */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___14342=allocate([108,111,97,100,95,101,120,116,101,110,115,105,111,110,0] /* load_extension\00 */, "i8", ALLOC_NORMAL);
__str94=allocate([69,88,84,32,115,112,101,99,105,102,105,101,115,32,99,111,100,101,32,60,61,32,48,0] /* EXT specifies code < */, "i8", ALLOC_NORMAL);
_extension_cache=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_inverted_registry=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str95=allocate([117,110,114,101,103,105,115,116,101,114,101,100,32,101,120,116,101,110,115,105,111,110,32,99,111,100,101,32,37,108,100,0] /* unregistered extensi */, "i8", ALLOC_NORMAL);
__str96=allocate([95,105,110,118,101,114,116,101,100,95,114,101,103,105,115,116,114,121,91,37,108,100,93,32,105,115,110,39,116,32,97,32,50,45,116,117,112,108,101,32,111,102,32,115,116,114,105,110,103,115,0] /* _inverted_registry[% */, "i8", ALLOC_NORMAL);
_append_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___setstate___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str97=allocate([115,116,97,116,101,32,105,115,32,110,111,116,32,97,32,100,105,99,116,105,111,110,97,114,121,0] /* state is not a dicti */, "i8", ALLOC_NORMAL);
__str98=allocate([115,108,111,116,32,115,116,97,116,101,32,105,115,32,110,111,116,32,97,32,100,105,99,116,105,111,110,97,114,121,0] /* slot state is not a  */, "i8", ALLOC_NORMAL);
__str99=allocate([105,32,62,61,32,48,0] /* i >= 0\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___15142=allocate([108,111,97,100,95,112,114,111,116,111,0] /* load_proto\00 */, "i8", ALLOC_NORMAL);
__str100=allocate([117,110,115,117,112,112,111,114,116,101,100,32,112,105,99,107,108,101,32,112,114,111,116,111,99,111,108,58,32,37,100,0] /* unsupported pickle p */, "i8", ALLOC_NORMAL);
__str101=allocate([105,110,118,97,108,105,100,32,108,111,97,100,32,107,101,121,44,32,39,37,115,39,46,0] /* invalid load key, '% */, "i8", ALLOC_NORMAL);
__str102=allocate([99,0] /* c\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___15558=allocate([110,111,108,111,97,100,95,101,120,116,101,110,115,105,111,110,0] /* noload_extension\00 */, "i8", ALLOC_NORMAL);
__str103=allocate([108,111,97,100,0] /* load\00 */, "i8", ALLOC_NORMAL);
__str104=allocate([108,111,97,100,40,41,32,45,45,32,76,111,97,100,32,97,32,112,105,99,107,108,101,0] /* load() -- Load a pic */, "i8", ALLOC_NORMAL);
__str105=allocate([110,111,108,111,97,100,0] /* noload\00 */, "i8", ALLOC_NORMAL);
__str106=allocate([110,111,108,111,97,100,40,41,32,45,45,32,110,111,116,32,108,111,97,100,32,97,32,112,105,99,107,108,101,44,32,98,117,116,32,103,111,32,116,104,114,111,117,103,104,32,109,111,115,116,32,111,102,32,116,104,101,32,109,111,116,105,111,110,115,10,10,84,104,105,115,32,102,117,110,99,116,105,111,110,32,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,114,101,97,100,32,112,97,115,116,32,97,32,112,105,99,107,108,101,32,119,105,116,104,111,117,116,32,105,110,115,116,97,110,116,105,97,116,105,110,103,10,97,110,121,32,111,98,106,101,99,116,115,32,111,114,32,105,109,112,111,114,116,105,110,103,32,97,110,121,32,109,111,100,117,108,101,115,46,32,32,73,116,32,99,97,110,32,97,108,115,111,32,98,101,32,117,115,101,100,32,116,111,32,102,105,110,100,32,97,108,108,10,112,101,114,115,105,115,116,101,110,116,32,114,101,102,101,114,101,110,99,101,115,32,119,105,116,104,111,117,116,32,105,110,115,116,97,110,116,105,97,116,105,110,103,32,97,110,121,32,111,98,106,101,99,116,115,32,111,114,32,105,109,112,111,114,116,105,110,103,10,97,110,121,32,109,111,100,117,108,101,115,46,10,0] /* noload() -- not load */, "i8", ALLOC_NORMAL);
_Unpickler_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_readline_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_read_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str107=allocate([97,114,103,117,109,101,110,116,32,109,117,115,116,32,104,97,118,101,32,39,114,101,97,100,39,32,97,110,100,32,39,114,101,97,100,108,105,110,101,39,32,97,116,116,114,105,98,117,116,101,115,0] /* argument must have ' */, "i8", ALLOC_NORMAL);
__str108=allocate([112,101,114,115,105,115,116,101,110,116,95,108,111,97,100,0] /* persistent_load\00 */, "i8", ALLOC_NORMAL);
__str109=allocate([102,105,110,100,95,103,108,111,98,97,108,0] /* find_global\00 */, "i8", ALLOC_NORMAL);
__str110=allocate([85,110,112,105,99,107,108,105,110,103,69,114,114,111,114,0] /* UnpicklingError\00 */, "i8", ALLOC_NORMAL);
__str111=allocate([79,79,124,105,0] /* OO|i\00 */, "i8", ALLOC_NORMAL);
_kwlist_16354=allocate(16, "i8*", ALLOC_NORMAL);
__str112=allocate([111,98,106,0] /* obj\00 */, "i8", ALLOC_NORMAL);
__str113=allocate([79,124,105,58,100,117,109,112,115,0] /* O|i:dumps\00 */, "i8", ALLOC_NORMAL);
_kwlist_16391=allocate(12, "i8*", ALLOC_NORMAL);
__str114=allocate([83,58,108,111,97,100,115,0] /* S:loads\00 */, "i8", ALLOC_NORMAL);
_Unpicklertype__doc__=allocate([79,98,106,101,99,116,115,32,116,104,97,116,32,107,110,111,119,32,104,111,119,32,116,111,32,117,110,112,105,99,107,108,101,0] /* Objects that know ho */, "i8", ALLOC_NORMAL);
__str115=allocate([99,80,105,99,107,108,101,46,85,110,112,105,99,107,108,101,114,0] /* cPickle.Unpickler\00 */, "i8", ALLOC_NORMAL);
_Unpicklertype=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str116=allocate([100,117,109,112,40,111,98,106,44,32,102,105,108,101,44,32,112,114,111,116,111,99,111,108,61,48,41,32,45,45,32,87,114,105,116,101,32,97,110,32,111,98,106,101,99,116,32,105,110,32,112,105,99,107,108,101,32,102,111,114,109,97,116,32,116,111,32,116,104,101,32,103,105,118,101,110,32,102,105,108,101,46,10,10,83,101,101,32,116,104,101,32,80,105,99,107,108,101,114,32,100,111,99,115,116,114,105,110,103,32,102,111,114,32,116,104,101,32,109,101,97,110,105,110,103,32,111,102,32,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,112,114,111,116,111,46,0] /* dump(obj, file, prot */, "i8", ALLOC_NORMAL);
__str117=allocate([100,117,109,112,115,0] /* dumps\00 */, "i8", ALLOC_NORMAL);
__str118=allocate([100,117,109,112,115,40,111,98,106,44,32,112,114,111,116,111,99,111,108,61,48,41,32,45,45,32,82,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,99,111,110,116,97,105,110,105,110,103,32,97,110,32,111,98,106,101,99,116,32,105,110,32,112,105,99,107,108,101,32,102,111,114,109,97,116,46,10,10,83,101,101,32,116,104,101,32,80,105,99,107,108,101,114,32,100,111,99,115,116,114,105,110,103,32,102,111,114,32,116,104,101,32,109,101,97,110,105,110,103,32,111,102,32,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,112,114,111,116,111,46,0] /* dumps(obj, protocol= */, "i8", ALLOC_NORMAL);
__str119=allocate([108,111,97,100,40,102,105,108,101,41,32,45,45,32,76,111,97,100,32,97,32,112,105,99,107,108,101,32,102,114,111,109,32,116,104,101,32,103,105,118,101,110,32,102,105,108,101,0] /* load(file) -- Load a */, "i8", ALLOC_NORMAL);
__str120=allocate([108,111,97,100,115,0] /* loads\00 */, "i8", ALLOC_NORMAL);
__str121=allocate([108,111,97,100,115,40,115,116,114,105,110,103,41,32,45,45,32,76,111,97,100,32,97,32,112,105,99,107,108,101,32,102,114,111,109,32,116,104,101,32,103,105,118,101,110,32,115,116,114,105,110,103,0] /* loads(string) -- Loa */, "i8", ALLOC_NORMAL);
__str122=allocate([80,105,99,107,108,101,114,0] /* Pickler\00 */, "i8", ALLOC_NORMAL);
__str123=allocate([80,105,99,107,108,101,114,40,102,105,108,101,44,32,112,114,111,116,111,99,111,108,61,48,41,32,45,45,32,67,114,101,97,116,101,32,97,32,112,105,99,107,108,101,114,46,10,10,84,104,105,115,32,116,97,107,101,115,32,97,32,102,105,108,101,45,108,105,107,101,32,111,98,106,101,99,116,32,102,111,114,32,119,114,105,116,105,110,103,32,97,32,112,105,99,107,108,101,32,100,97,116,97,32,115,116,114,101,97,109,46,10,84,104,101,32,111,112,116,105,111,110,97,108,32,112,114,111,116,111,32,97,114,103,117,109,101,110,116,32,116,101,108,108,115,32,116,104,101,32,112,105,99,107,108,101,114,32,116,111,32,117,115,101,32,116,104,101,32,103,105,118,101,110,10,112,114,111,116,111,99,111,108,59,32,115,117,112,112,111,114,116,101,100,32,112,114,111,116,111,99,111,108,115,32,97,114,101,32,48,44,32,49,44,32,50,46,32,32,84,104,101,32,100,101,102,97,117,108,116,10,112,114,111,116,111,99,111,108,32,105,115,32,48,44,32,116,111,32,98,101,32,98,97,99,107,119,97,114,100,115,32,99,111,109,112,97,116,105,98,108,101,46,32,32,40,80,114,111,116,111,99,111,108,32,48,32,105,115,32,116,104,101,10,111,110,108,121,32,112,114,111,116,111,99,111,108,32,116,104,97,116,32,99,97,110,32,98,101,32,119,114,105,116,116,101,110,32,116,111,32,97,32,102,105,108,101,32,111,112,101,110,101,100,32,105,110,32,116,101,120,116,10,109,111,100,101,32,97,110,100,32,114,101,97,100,32,98,97,99,107,32,115,117,99,99,101,115,115,102,117,108,108,121,46,32,32,87,104,101,110,32,117,115,105,110,103,32,97,32,112,114,111,116,111,99,111,108,32,104,105,103,104,101,114,10,116,104,97,110,32,48,44,32,109,97,107,101,32,115,117,114,101,32,116,104,101,32,102,105,108,101,32,105,115,32,111,112,101,110,101,100,32,105,110,32,98,105,110,97,114,121,32,109,111,100,101,44,32,98,111,116,104,32,119,104,101,110,10,112,105,99,107,108,105,110,103,32,97,110,100,32,117,110,112,105,99,107,108,105,110,103,46,41,10,10,80,114,111,116,111,99,111,108,32,49,32,105,115,32,109,111,114,101,32,101,102,102,105,99,105,101,110,116,32,116,104,97,110,32,112,114,111,116,111,99,111,108,32,48,59,32,112,114,111,116,111,99,111,108,32,50,32,105,115,10,109,111,114,101,32,101,102,102,105,99,105,101,110,116,32,116,104,97,110,32,112,114,111,116,111,99,111,108,32,49,46,10,10,83,112,101,99,105,102,121,105,110,103,32,97,32,110,101,103,97,116,105,118,101,32,112,114,111,116,111,99,111,108,32,118,101,114,115,105,111,110,32,115,101,108,101,99,116,115,32,116,104,101,32,104,105,103,104,101,115,116,10,112,114,111,116,111,99,111,108,32,118,101,114,115,105,111,110,32,115,117,112,112,111,114,116,101,100,46,32,32,84,104,101,32,104,105,103,104,101,114,32,116,104,101,32,112,114,111,116,111,99,111,108,32,117,115,101,100,44,32,116,104,101,10,109,111,114,101,32,114,101,99,101,110,116,32,116,104,101,32,118,101,114,115,105,111,110,32,111,102,32,80,121,116,104,111,110,32,110,101,101,100,101,100,32,116,111,32,114,101,97,100,32,116,104,101,32,112,105,99,107,108,101,10,112,114,111,100,117,99,101,100,46,10,10,84,104,101,32,102,105,108,101,32,112,97,114,97,109,101,116,101,114,32,109,117,115,116,32,104,97,118,101,32,97,32,119,114,105,116,101,40,41,32,109,101,116,104,111,100,32,116,104,97,116,32,97,99,99,101,112,116,115,32,97,32,115,105,110,103,108,101,10,115,116,114,105,110,103,32,97,114,103,117,109,101,110,116,46,32,32,73,116,32,99,97,110,32,116,104,117,115,32,98,101,32,97,110,32,111,112,101,110,32,102,105,108,101,32,111,98,106,101,99,116,44,32,97,32,83,116,114,105,110,103,73,79,10,111,98,106,101,99,116,44,32,111,114,32,97,110,121,32,111,116,104,101,114,32,99,117,115,116,111,109,32,111,98,106,101,99,116,32,116,104,97,116,32,109,101,101,116,115,32,116,104,105,115,32,105,110,116,101,114,102,97,99,101,46,10,0] /* Pickler(file, protoc */, "i8", ALLOC_NORMAL);
__str124=allocate([85,110,112,105,99,107,108,101,114,0] /* Unpickler\00 */, "i8", ALLOC_NORMAL);
__str125=allocate([85,110,112,105,99,107,108,101,114,40,102,105,108,101,41,32,45,45,32,67,114,101,97,116,101,32,97,110,32,117,110,112,105,99,107,108,101,114,46,0] /* Unpickler(file) -- C */, "i8", ALLOC_NORMAL);
_cPickle_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str126=allocate([95,95,99,108,97,115,115,95,95,0] /* __class__\00 */, "i8", ALLOC_NORMAL);
__str127=allocate([95,95,103,101,116,105,110,105,116,97,114,103,115,95,95,0] /* __getinitargs__\00 */, "i8", ALLOC_NORMAL);
__str128=allocate([95,95,100,105,99,116,95,95,0] /* __dict__\00 */, "i8", ALLOC_NORMAL);
__str129=allocate([95,95,103,101,116,115,116,97,116,101,95,95,0] /* __getstate__\00 */, "i8", ALLOC_NORMAL);
__str130=allocate([95,95,115,101,116,115,116,97,116,101,95,95,0] /* __setstate__\00 */, "i8", ALLOC_NORMAL);
__str131=allocate([95,95,110,97,109,101,95,95,0] /* __name__\00 */, "i8", ALLOC_NORMAL);
__str132=allocate([95,95,109,97,105,110,95,95,0] /* __main__\00 */, "i8", ALLOC_NORMAL);
__str133=allocate([95,95,114,101,100,117,99,101,95,95,0] /* __reduce__\00 */, "i8", ALLOC_NORMAL);
__str134=allocate([95,95,114,101,100,117,99,101,95,101,120,95,95,0] /* __reduce_ex__\00 */, "i8", ALLOC_NORMAL);
__str135=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
__str136=allocate([97,112,112,101,110,100,0] /* append\00 */, "i8", ALLOC_NORMAL);
__str137=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str138=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
__str139=allocate([100,105,115,112,97,116,99,104,95,116,97,98,108,101,0] /* dispatch_table\00 */, "i8", ALLOC_NORMAL);
__str140=allocate([95,101,120,116,101,110,115,105,111,110,95,114,101,103,105,115,116,114,121,0] /* _extension_registry\ */, "i8", ALLOC_NORMAL);
__str141=allocate([95,105,110,118,101,114,116,101,100,95,114,101,103,105,115,116,114,121,0] /* _inverted_registry\0 */, "i8", ALLOC_NORMAL);
__str142=allocate([95,101,120,116,101,110,115,105,111,110,95,99,97,99,104,101,0] /* _extension_cache\00 */, "i8", ALLOC_NORMAL);
__str143=allocate([95,95,98,117,105,108,116,105,110,95,95,0] /* __builtin__\00 */, "i8", ALLOC_NORMAL);
__str144=allocate([95,95,98,117,105,108,116,105,110,115,95,95,0] /* __builtins__\00 */, "i8", ALLOC_NORMAL);
__str145=allocate([100,101,102,32,95,95,115,116,114,95,95,40,115,101,108,102,41,58,10,32,32,114,101,116,117,114,110,32,115,101,108,102,46,97,114,103,115,32,97,110,100,32,40,39,37,115,39,32,37,32,115,101,108,102,46,97,114,103,115,91,48,93,41,32,111,114,32,39,40,119,104,97,116,41,39,10,0] /* def __str__(self):\0 */, "i8", ALLOC_NORMAL);
__str146=allocate([99,80,105,99,107,108,101,46,80,105,99,107,108,101,69,114,114,111,114,0] /* cPickle.PickleError\ */, "i8", ALLOC_NORMAL);
__str147=allocate([99,80,105,99,107,108,101,46,80,105,99,107,108,105,110,103,69,114,114,111,114,0] /* cPickle.PicklingErro */, "i8", ALLOC_NORMAL);
__str148=allocate([100,101,102,32,95,95,115,116,114,95,95,40,115,101,108,102,41,58,10,32,32,97,61,115,101,108,102,46,97,114,103,115,10,32,32,97,61,97,32,97,110,100,32,116,121,112,101,40,97,91,48,93,41,32,111,114,32,39,40,119,104,97,116,41,39,10,32,32,114,101,116,117,114,110,32,39,67,97,110,110,111,116,32,112,105,99,107,108,101,32,37,115,32,111,98,106,101,99,116,115,39,32,37,32,97,10,0] /* def __str__(self):\0 */, "i8", ALLOC_NORMAL);
__str149=allocate([99,80,105,99,107,108,101,46,85,110,112,105,99,107,108,101,97,98,108,101,69,114,114,111,114,0] /* cPickle.Unpickleable */, "i8", ALLOC_NORMAL);
__str150=allocate([99,80,105,99,107,108,101,46,85,110,112,105,99,107,108,105,110,103,69,114,114,111,114,0] /* cPickle.UnpicklingEr */, "i8", ALLOC_NORMAL);
__str151=allocate([99,80,105,99,107,108,101,46,66,97,100,80,105,99,107,108,101,71,101,116,0] /* cPickle.BadPickleGet */, "i8", ALLOC_NORMAL);
__str152=allocate([80,105,99,107,108,101,69,114,114,111,114,0] /* PickleError\00 */, "i8", ALLOC_NORMAL);
__str153=allocate([85,110,112,105,99,107,108,101,97,98,108,101,69,114,114,111,114,0] /* UnpickleableError\00 */, "i8", ALLOC_NORMAL);
__str154=allocate([66,97,100,80,105,99,107,108,101,71,101,116,0] /* BadPickleGet\00 */, "i8", ALLOC_NORMAL);
__str155=allocate([99,83,116,114,105,110,103,73,79,46,99,83,116,114,105,110,103,73,79,95,67,65,80,73,0] /* cStringIO.cStringIO_ */, "i8", ALLOC_NORMAL);
__str156=allocate([49,46,55,49,0] /* 1.71\00 */, "i8", ALLOC_NORMAL);
__str157=allocate([99,80,105,99,107,108,101,0] /* cPickle\00 */, "i8", ALLOC_NORMAL);
__str158=allocate([95,95,118,101,114,115,105,111,110,95,95,0] /* __version__\00 */, "i8", ALLOC_NORMAL);
__str159=allocate([72,73,71,72,69,83,84,95,80,82,79,84,79,67,79,76,0] /* HIGHEST_PROTOCOL\00 */, "i8", ALLOC_NORMAL);
__str160=allocate([50,46,48,0] /* 2.0\00 */, "i8", ALLOC_NORMAL);
__str161=allocate([91,115,115,115,115,115,93,0] /* [sssss]\00 */, "i8", ALLOC_NORMAL);
__str162=allocate([49,46,48,0] /* 1.0\00 */, "i8", ALLOC_NORMAL);
__str163=allocate([49,46,49,0] /* 1.1\00 */, "i8", ALLOC_NORMAL);
__str164=allocate([49,46,50,0] /* 1.2\00 */, "i8", ALLOC_NORMAL);
__str165=allocate([49,46,51,0] /* 1.3\00 */, "i8", ALLOC_NORMAL);
__str166=allocate([102,111,114,109,97,116,95,118,101,114,115,105,111,110,0] /* format_version\00 */, "i8", ALLOC_NORMAL);
__str167=allocate([99,111,109,112,97,116,105,98,108,101,95,102,111,114,109,97,116,115,0] /* compatible_formats\0 */, "i8", ALLOC_NORMAL);
HEAP[_PdataType+12]=__str;
HEAP[_PdataType+24]=(FUNCTION_TABLE_OFFSET + 24);
HEAP[_PdataType+88]=__str1;
HEAP[_buf_9462]=__str9;
HEAP[_buf_9462+4]=__str10;
HEAP[_Pickler_methods]=__str54;
HEAP[_Pickler_methods+4]=(FUNCTION_TABLE_OFFSET + 26);
HEAP[_Pickler_methods+12]=__str55;
HEAP[_Pickler_methods+16]=__str56;
HEAP[_Pickler_methods+20]=(FUNCTION_TABLE_OFFSET + 28);
HEAP[_Pickler_methods+28]=__str57;
HEAP[_Pickler_methods+32]=__str58;
HEAP[_Pickler_methods+36]=(FUNCTION_TABLE_OFFSET + 30);
HEAP[_Pickler_methods+44]=__str59;
HEAP[_kwlist_12011]=__str66;
HEAP[_kwlist_12011+4]=__str67;
HEAP[_Pickler_members]=__str72;
HEAP[_Pickler_members+20]=__str73;
HEAP[_Pickler_getsets]=__str68;
HEAP[_Pickler_getsets+4]=(FUNCTION_TABLE_OFFSET + 32);
HEAP[_Pickler_getsets+8]=(FUNCTION_TABLE_OFFSET + 34);
HEAP[_Pickler_getsets+20]=__str74;
HEAP[_Pickler_getsets+28]=(FUNCTION_TABLE_OFFSET + 36);
HEAP[_Pickler_getsets+40]=__str70;
HEAP[_Pickler_getsets+44]=(FUNCTION_TABLE_OFFSET + 38);
HEAP[_Pickler_getsets+48]=(FUNCTION_TABLE_OFFSET + 40);
HEAP[_Pickler_getsets+60]=__str75;
HEAP[_Pickler_getsets+64]=(FUNCTION_TABLE_OFFSET + 42);
HEAP[_Picklertype+12]=__str76;
HEAP[_Picklertype+24]=(FUNCTION_TABLE_OFFSET + 44);
HEAP[_Picklertype+72]=(FUNCTION_TABLE_OFFSET + 46);
HEAP[_Picklertype+76]=(FUNCTION_TABLE_OFFSET + 48);
HEAP[_Picklertype+88]=_Picklertype__doc__;
HEAP[_Picklertype+92]=(FUNCTION_TABLE_OFFSET + 50);
HEAP[_Picklertype+96]=(FUNCTION_TABLE_OFFSET + 52);
HEAP[_Picklertype+116]=_Pickler_methods;
HEAP[_Picklertype+120]=_Pickler_members;
HEAP[_Picklertype+124]=_Pickler_getsets;
HEAP[_Unpickler_methods]=__str103;
HEAP[_Unpickler_methods+4]=(FUNCTION_TABLE_OFFSET + 54);
HEAP[_Unpickler_methods+12]=__str104;
HEAP[_Unpickler_methods+16]=__str105;
HEAP[_Unpickler_methods+20]=(FUNCTION_TABLE_OFFSET + 56);
HEAP[_Unpickler_methods+28]=__str106;
HEAP[_kwlist_16354]=__str112;
HEAP[_kwlist_16354+4]=__str66;
HEAP[_kwlist_16354+8]=__str67;
HEAP[_kwlist_16391]=__str112;
HEAP[_kwlist_16391+4]=__str67;
HEAP[_Unpicklertype+12]=__str115;
HEAP[_Unpicklertype+24]=(FUNCTION_TABLE_OFFSET + 58);
HEAP[_Unpicklertype+32]=(FUNCTION_TABLE_OFFSET + 60);
HEAP[_Unpicklertype+36]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_Unpicklertype+88]=_Unpicklertype__doc__;
HEAP[_Unpicklertype+92]=(FUNCTION_TABLE_OFFSET + 64);
HEAP[_Unpicklertype+96]=(FUNCTION_TABLE_OFFSET + 66);
HEAP[_cPickle_methods]=__str54;
HEAP[_cPickle_methods+4]=(FUNCTION_TABLE_OFFSET + 68);
HEAP[_cPickle_methods+12]=__str116;
HEAP[_cPickle_methods+16]=__str117;
HEAP[_cPickle_methods+20]=(FUNCTION_TABLE_OFFSET + 70);
HEAP[_cPickle_methods+28]=__str118;
HEAP[_cPickle_methods+32]=__str103;
HEAP[_cPickle_methods+36]=(FUNCTION_TABLE_OFFSET + 72);
HEAP[_cPickle_methods+44]=__str119;
HEAP[_cPickle_methods+48]=__str120;
HEAP[_cPickle_methods+52]=(FUNCTION_TABLE_OFFSET + 74);
HEAP[_cPickle_methods+60]=__str121;
HEAP[_cPickle_methods+64]=__str122;
HEAP[_cPickle_methods+68]=(FUNCTION_TABLE_OFFSET + 76);
HEAP[_cPickle_methods+76]=__str123;
HEAP[_cPickle_methods+80]=__str124;
HEAP[_cPickle_methods+84]=(FUNCTION_TABLE_OFFSET + 78);
HEAP[_cPickle_methods+92]=__str125;

  __globalConstructor__();
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

run();

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}

  return Module;
});

>>>>>>> f1726142f40cb660652d789a0d51be1d72d90630
