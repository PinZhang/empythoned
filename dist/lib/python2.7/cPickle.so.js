"use strict";

// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET) {
  var Module = {};
  var args = [];
  Module.arguments = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime essentials
//========================================

var __globalConstructor__ = function globalConstructor() {
}

// === Body ===



var $0___SIZE = 196; // %0
  
var $1___SIZE = 64; // %1
  
var $2___SIZE = 16; // %2
  
var $3___SIZE = 60; // %3
  
var $4___SIZE = 20; // %4
  
var $5___SIZE = 20; // %5
  
var $6___SIZE = 100; // %6
  
var $7___SIZE = 20; // %7
  
var $8___SIZE = 196; // %8
  
var $9___SIZE = 48; // %9
  
var $10___SIZE = 196; // %10
  
var $11___SIZE = 112; // %11
  
var $struct_FILE___SIZE = 148; // %struct.FILE
  var $struct_FILE___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,70,71,72,76,84,88,92,96,100,104,108];
var $struct_Pdata___SIZE = 20; // %struct.Pdata
  
var $struct_Picklerobject___SIZE = 72; // %struct.Picklerobject
  
var $struct_PyBufferProcs___SIZE = 24; // %struct.PyBufferProcs
  
var $struct_PyClassObject___SIZE = 36; // %struct.PyClassObject
  
var $struct_PyCompilerFlags___SIZE = 4; // %struct.PyCompilerFlags
  
var $struct_PyFileObject___SIZE = 84; // %struct.PyFileObject
  
var $struct_PyFloatObject___SIZE = 16; // %struct.PyFloatObject
  
var $struct_PyGetSetDef___SIZE = 20; // %struct.PyGetSetDef
  
var $struct_PyIntObject___SIZE = 12; // %struct.PyIntObject
  
var $struct_PyInterpreterState___SIZE = 40; // %struct.PyInterpreterState
  
var $struct_PyListObject___SIZE = 20; // %struct.PyListObject
  
var $struct_PyLongObject___SIZE = 0; // %struct.PyLongObject
  var $struct_PyLongObject___FLATTENER = [];
var $struct_PyMappingMethods___SIZE = 12; // %struct.PyMappingMethods
  
var $struct_PyMemberDef___SIZE = 20; // %struct.PyMemberDef
  
var $struct_PyMethodDef___SIZE = 16; // %struct.PyMethodDef
  
var $struct_PyNumberMethods___SIZE = 156; // %struct.PyNumberMethods
  
var $struct_PyObject___SIZE = 8; // %struct.PyObject
  
var $struct_PySequenceMethods___SIZE = 40; // %struct.PySequenceMethods
  
var $struct_PyStringObject___SIZE = 24; // %struct.PyStringObject
  
var $struct_PyThreadState___SIZE = 84; // %struct.PyThreadState
  
var $struct_PyTupleObject___SIZE = 16; // %struct.PyTupleObject
  
var $struct_PyUnicodeObject___SIZE = 24; // %struct.PyUnicodeObject
  
var $struct_Py_buffer___SIZE = 52; // %struct.Py_buffer
  var $struct_Py_buffer___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,48];
var $struct_PycStringIO_CAPI___SIZE = 32; // %struct.PycStringIO_CAPI
  
var $struct_Unpicklerobject___SIZE = 80; // %struct.Unpicklerobject
  
var $struct__IO_marker___SIZE = 12; // %struct._IO_marker
  
var $struct__frame___SIZE = 0; // %struct._frame
  var $struct__frame___FLATTENER = [];
var $struct__typeobject___SIZE = 196; // %struct._typeobject
  
var _cPickle_module_documentation;
var _MARKv;
var __str;
var __str1;
var _PdataType;
var _UnpicklingError;
var __str2;
var __Py_NoneStruct;
var _PyExc_IOError;
var _PycStringIO;
var _PyExc_EOFError;
var _empty_tuple;
var _PyExc_KeyError;
var _PicklingError;
var __str3;
var __str4;
var __str5;
var __str6;
var _PyExc_AttributeError;
var __str7;
var ___main___str;
var _PyExc_ValueError;
var __str8;
var _none_9451;
var _len_9463;
var _buf_9462;
var __str9;
var __str10;
var _PyExc_OverflowError;
var __str11;
var _l_9538;
var __str12;
var _string_9677;
var __str13;
var _string_9895;
var __str14;
var __str15;
var ___PRETTY_FUNCTION___10017;
var _pop_10042;
var _len2opcode_10044;
var _pop_mark_10043;
var _tuple_10041;
var __str16;
var ___PRETTY_FUNCTION___10137;
var _append_10135;
var _appends_10136;
var __PyThreadState_Current;
var __Py_CheckRecursionLimit;
var __str17;
var ___PRETTY_FUNCTION___10326;
var _PyExc_TypeError;
var __str18;
var _setitem_10324;
var _setitems_10325;
var __str19;
var ___PRETTY_FUNCTION___10501;
var __str20;
var _setitem_10499;
var _setitems_10500;
var _PyExc_RuntimeError;
var __str21;
var _PyDict_Type;
var __str22;
var __str23;
var ___class___str;
var ___getinitargs___str;
var __str24;
var _inst_10654;
var _obj_10655;
var ___getstate___str;
var ___dict___str;
var _build_10656;
var ___name___str;
var __str25;
var __str26;
var __str27;
var __str28;
var __str29;
var _two_tuple;
var _extension_registry;
var __str30;
var __str31;
var __str32;
var __str33;
var _global_10855;
var __str34;
var _persid_10999;
var _binpersid_11000;
var __str35;
var __str36;
var __str37;
var __str38;
var __str39;
var __str40;
var __str41;
var __str42;
var __str43;
var __str44;
var __str45;
var __str46;
var _newobj_11120;
var _reduce_11118;
var _build_11119;
var __Py_ZeroStruct;
var __Py_TrueStruct;
var _PyInt_Type;
var _PyLong_Type;
var _PyFloat_Type;
var _PyTuple_Type;
var _PyString_Type;
var _PyUnicode_Type;
var _PyType_Type;
var _PyList_Type;
var _PyInstance_Type;
var _PyClass_Type;
var _PyFunction_Type;
var _PickleError;
var _PyCFunction_Type;
var _dispatch_table;
var ___reduce_ex___str;
var ___reduce___str;
var _UnpickleableError;
var __str47;
var __str48;
var _stop_11690;
var __str49;
var __str50;
var __str51;
var __str52;
var __str53;
var __str54;
var __str55;
var __str56;
var __str57;
var __str58;
var __str59;
var _Pickler_methods;
var __str60;
var _PyFile_Type;
var __str61;
var _write_str;
var __str62;
var __str63;
var _dispatch_table_str;
var __str64;
var __str65;
var _kwlist_12011;
var __str66;
var __str67;
var __str68;
var __str69;
var __str70;
var __str71;
var __str72;
var __str73;
var _Pickler_members;
var __str74;
var __str75;
var _Pickler_getsets;
var _Picklertype__doc__;
var __str76;
var _Picklertype;
var __str77;
var __str78;
var __str79;
var __str80;
var __str81;
var ___PRETTY_FUNCTION___12572;
var __str82;
var ___PRETTY_FUNCTION___12743;
var __str83;
var __str84;
var __str85;
var __str86;
var __str87;
var __str88;
var __str89;
var __str90;
var __str91;
var __str92;
var _BadPickleGet;
var __str93;
var ___PRETTY_FUNCTION___14342;
var __str94;
var _extension_cache;
var _inverted_registry;
var __str95;
var __str96;
var _append_str;
var ___setstate___str;
var __str97;
var __str98;
var __str99;
var ___PRETTY_FUNCTION___15142;
var __str100;
var __str101;
var __str102;
var ___PRETTY_FUNCTION___15558;
var __str103;
var __str104;
var __str105;
var __str106;
var _Unpickler_methods;
var _readline_str;
var _read_str;
var __str107;
var __str108;
var __str109;
var __str110;
var __str111;
var _kwlist_16354;
var __str112;
var __str113;
var _kwlist_16391;
var __str114;
var _Unpicklertype__doc__;
var __str115;
var _Unpicklertype;
var __str116;
var __str117;
var __str118;
var __str119;
var __str120;
var __str121;
var __str122;
var __str123;
var __str124;
var __str125;
var _cPickle_methods;
var __str126;
var __str127;
var __str128;
var __str129;
var __str130;
var __str131;
var __str132;
var __str133;
var __str134;
var __str135;
var __str136;
var __str137;
var __str138;
var __str139;
var __str140;
var __str141;
var __str142;
var __str143;
var __str144;
var __str145;
var __str146;
var __str147;
var __str148;
var __str149;
var __str150;
var __str151;
var __str152;
var __str153;
var __str154;
var __str155;
var __str156;
var __str157;
var __str158;
var __str159;
var __str160;
var __str161;
var __str162;
var __str163;
var __str164;
var __str165;
var __str166;
var __str167;





























































































































  function _Pdata_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $i;
        var $p;
        $self_addr=$self;
        var $0=$self_addr; //@line 153 "cPickle.c"
        var $1=$0+8; //@line 153 "cPickle.c"
        var $2=HEAP[$1]; //@line 153 "cPickle.c"
        $i=$2; //@line 153 "cPickle.c"
        var $3=$self_addr; //@line 153 "cPickle.c"
        var $4=$3+16; //@line 153 "cPickle.c"
        var $5=HEAP[$4]; //@line 153 "cPickle.c"
        $p=$5; //@line 153 "cPickle.c"
        var $6=$i; //@line 153 "cPickle.c"
        var $7=($6) - 1; //@line 153 "cPickle.c"
        $i=$7; //@line 153 "cPickle.c"
        var $8=($7) >= 0; //@line 153 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 153 "cPickle.c"
      case 1: // $bb
        var $9=$p; //@line 154 "cPickle.c"
        var $10=HEAP[$9]; //@line 154 "cPickle.c"
        var $11=$10; //@line 154 "cPickle.c"
        var $12=HEAP[$11]; //@line 154 "cPickle.c"
        var $13=($12) - 1; //@line 154 "cPickle.c"
        var $14=$10; //@line 154 "cPickle.c"
        HEAP[$14]=$13; //@line 154 "cPickle.c"
        var $15=$10; //@line 154 "cPickle.c"
        var $16=HEAP[$15]; //@line 154 "cPickle.c"
        var $17=($16)==0; //@line 154 "cPickle.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 154 "cPickle.c"
      case 2: // $bb1
        var $18=$p; //@line 154 "cPickle.c"
        var $19=HEAP[$18]; //@line 154 "cPickle.c"
        var $20=$19+4; //@line 154 "cPickle.c"
        var $21=HEAP[$20]; //@line 154 "cPickle.c"
        var $22=$21+24; //@line 154 "cPickle.c"
        var $23=HEAP[$22]; //@line 154 "cPickle.c"
        var $24=$p; //@line 154 "cPickle.c"
        var $25=HEAP[$24]; //@line 154 "cPickle.c"
        FUNCTION_TABLE[$23]($25); //@line 154 "cPickle.c"
        __label__ = 3; break; //@line 154 "cPickle.c"
      case 3: // $bb2
        var $26=$p; //@line 153 "cPickle.c"
        var $27=$26+4; //@line 153 "cPickle.c"
        $p=$27; //@line 153 "cPickle.c"
        var $28=$i; //@line 153 "cPickle.c"
        var $29=($28) - 1; //@line 153 "cPickle.c"
        $i=$29; //@line 153 "cPickle.c"
        var $30=($29) >= 0; //@line 153 "cPickle.c"
        if ($30) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 153 "cPickle.c"
      case 4: // $bb4
        var $31=$self_addr; //@line 156 "cPickle.c"
        var $32=$31+16; //@line 156 "cPickle.c"
        var $33=HEAP[$32]; //@line 156 "cPickle.c"
        var $34=($33)!=0; //@line 156 "cPickle.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 156 "cPickle.c"
      case 5: // $bb5
        var $35=$self_addr; //@line 157 "cPickle.c"
        var $36=$35+16; //@line 157 "cPickle.c"
        var $37=HEAP[$36]; //@line 157 "cPickle.c"
        var $38=$37; //@line 157 "cPickle.c"
        _free($38); //@line 157 "cPickle.c"
        __label__ = 6; break; //@line 157 "cPickle.c"
      case 6: // $bb6
        var $39=$self_addr; //@line 158 "cPickle.c"
        var $40=$39; //@line 158 "cPickle.c"
        _PyObject_Free($40); //@line 158 "cPickle.c"
        ;
        return; //@line 159 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_New() {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval;
        var $0;
        var $self;
        var $1=__PyObject_New(_PdataType); //@line 174 "cPickle.c"
        var $2=$1; //@line 174 "cPickle.c"
        $self=$2; //@line 174 "cPickle.c"
        var $3=$self; //@line 174 "cPickle.c"
        var $4=($3)==0; //@line 174 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 174 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 175 "cPickle.c"
        __label__ = 7; break; //@line 175 "cPickle.c"
      case 2: // $bb1
        var $5=$self; //@line 176 "cPickle.c"
        var $6=$5+12; //@line 176 "cPickle.c"
        HEAP[$6]=8; //@line 176 "cPickle.c"
        var $7=$self; //@line 177 "cPickle.c"
        var $8=$7+8; //@line 177 "cPickle.c"
        HEAP[$8]=0; //@line 177 "cPickle.c"
        var $9=$self; //@line 178 "cPickle.c"
        var $10=$9+12; //@line 178 "cPickle.c"
        var $11=HEAP[$10]; //@line 178 "cPickle.c"
        var $12=($11) * 4; //@line 178 "cPickle.c"
        var $13=_malloc($12); //@line 178 "cPickle.c"
        var $14=$13; //@line 178 "cPickle.c"
        var $15=$self; //@line 178 "cPickle.c"
        var $16=$15+16; //@line 178 "cPickle.c"
        HEAP[$16]=$14; //@line 178 "cPickle.c"
        var $17=$self; //@line 179 "cPickle.c"
        var $18=$17+16; //@line 179 "cPickle.c"
        var $19=HEAP[$18]; //@line 179 "cPickle.c"
        var $20=($19)!=0; //@line 179 "cPickle.c"
        var $21=$self; //@line 180 "cPickle.c"
        var $22=$21; //@line 180 "cPickle.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 179 "cPickle.c"
      case 3: // $bb2
        $0=$22; //@line 180 "cPickle.c"
        __label__ = 7; break; //@line 180 "cPickle.c"
      case 4: // $bb3
        var $23=$22; //@line 181 "cPickle.c"
        var $24=HEAP[$23]; //@line 181 "cPickle.c"
        var $25=($24) - 1; //@line 181 "cPickle.c"
        var $26=$22; //@line 181 "cPickle.c"
        HEAP[$26]=$25; //@line 181 "cPickle.c"
        var $27=$22; //@line 181 "cPickle.c"
        var $28=HEAP[$27]; //@line 181 "cPickle.c"
        var $29=($28)==0; //@line 181 "cPickle.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 181 "cPickle.c"
      case 5: // $bb4
        var $30=$self; //@line 181 "cPickle.c"
        var $31=$30; //@line 181 "cPickle.c"
        var $32=$31+4; //@line 181 "cPickle.c"
        var $33=HEAP[$32]; //@line 181 "cPickle.c"
        var $34=$33+24; //@line 181 "cPickle.c"
        var $35=HEAP[$34]; //@line 181 "cPickle.c"
        var $36=$self; //@line 181 "cPickle.c"
        var $37=$36; //@line 181 "cPickle.c"
        FUNCTION_TABLE[$35]($37); //@line 181 "cPickle.c"
        __label__ = 6; break; //@line 181 "cPickle.c"
      case 6: // $bb5
        var $38=_PyErr_NoMemory(); //@line 182 "cPickle.c"
        $0=$38; //@line 182 "cPickle.c"
        __label__ = 7; break; //@line 182 "cPickle.c"
      case 7: // $bb6
        var $39=$0; //@line 175 "cPickle.c"
        $retval=$39; //@line 175 "cPickle.c"
        var $retval7=$retval; //@line 175 "cPickle.c"
        ;
        return $retval7; //@line 175 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_clear($self, $clearto) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval_i;
        var $0;
        var $self_addr;
        var $clearto_addr;
        var $retval;
        var $1;
        var $i;
        var $p;
        var $_py_tmp;
        $self_addr=$self;
        $clearto_addr=$clearto;
        var $2=$clearto_addr; //@line 201 "cPickle.c"
        var $3=($2) < 0; //@line 201 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 201 "cPickle.c"
      case 1: // $bb
        var $4=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
        _PyErr_SetString($4, __str2); //@line 188 "cPickle.c"
        $0=-1; //@line 189 "cPickle.c"
        var $5=$0; //@line 189 "cPickle.c"
        $retval_i=$5; //@line 189 "cPickle.c"
        var $retval1_i=$retval_i; //@line 189 "cPickle.c"
        $1=$retval1_i; //@line 201 "cPickle.c"
        __label__ = 10; break; //@line 201 "cPickle.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 202 "cPickle.c"
        var $7=$6+8; //@line 202 "cPickle.c"
        var $8=HEAP[$7]; //@line 202 "cPickle.c"
        var $9=$clearto_addr; //@line 202 "cPickle.c"
        var $10=($8) <= ($9); //@line 202 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 202 "cPickle.c"
      case 3: // $bb2
        $1=0; //@line 202 "cPickle.c"
        __label__ = 10; break; //@line 202 "cPickle.c"
      case 4: // $bb3
        var $11=$self_addr; //@line 204 "cPickle.c"
        var $12=$11+8; //@line 204 "cPickle.c"
        var $13=HEAP[$12]; //@line 204 "cPickle.c"
        $i=$13; //@line 204 "cPickle.c"
        var $14=$self_addr; //@line 204 "cPickle.c"
        var $15=$14+16; //@line 204 "cPickle.c"
        var $16=HEAP[$15]; //@line 204 "cPickle.c"
        var $17=$clearto_addr; //@line 204 "cPickle.c"
        var $18=$16+4*$17; //@line 204 "cPickle.c"
        $p=$18; //@line 204 "cPickle.c"
        var $19=$i; //@line 205 "cPickle.c"
        var $20=($19) - 1; //@line 205 "cPickle.c"
        $i=$20; //@line 205 "cPickle.c"
        var $21=$i; //@line 205 "cPickle.c"
        var $22=$clearto_addr; //@line 205 "cPickle.c"
        var $23=($21) >= ($22); //@line 205 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 205 "cPickle.c"
      case 5: // $bb4
        var $24=$p; //@line 207 "cPickle.c"
        var $25=HEAP[$24]; //@line 207 "cPickle.c"
        var $26=($25)!=0; //@line 207 "cPickle.c"
        if ($26) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 207 "cPickle.c"
      case 6: // $bb5
        var $27=$p; //@line 207 "cPickle.c"
        var $28=HEAP[$27]; //@line 207 "cPickle.c"
        $_py_tmp=$28; //@line 207 "cPickle.c"
        var $29=$p; //@line 207 "cPickle.c"
        HEAP[$29]=0; //@line 207 "cPickle.c"
        var $30=$_py_tmp; //@line 207 "cPickle.c"
        var $31=$30; //@line 207 "cPickle.c"
        var $32=HEAP[$31]; //@line 207 "cPickle.c"
        var $33=($32) - 1; //@line 207 "cPickle.c"
        var $34=$_py_tmp; //@line 207 "cPickle.c"
        var $35=$34; //@line 207 "cPickle.c"
        HEAP[$35]=$33; //@line 207 "cPickle.c"
        var $36=$_py_tmp; //@line 207 "cPickle.c"
        var $37=$36; //@line 207 "cPickle.c"
        var $38=HEAP[$37]; //@line 207 "cPickle.c"
        var $39=($38)==0; //@line 207 "cPickle.c"
        if ($39) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 207 "cPickle.c"
      case 7: // $bb6
        var $40=$_py_tmp; //@line 207 "cPickle.c"
        var $41=$40+4; //@line 207 "cPickle.c"
        var $42=HEAP[$41]; //@line 207 "cPickle.c"
        var $43=$42+24; //@line 207 "cPickle.c"
        var $44=HEAP[$43]; //@line 207 "cPickle.c"
        var $45=$_py_tmp; //@line 207 "cPickle.c"
        FUNCTION_TABLE[$44]($45); //@line 207 "cPickle.c"
        __label__ = 8; break; //@line 207 "cPickle.c"
      case 8: // $bb7
        var $46=$p; //@line 206 "cPickle.c"
        var $47=$46+4; //@line 206 "cPickle.c"
        $p=$47; //@line 206 "cPickle.c"
        var $48=$i; //@line 205 "cPickle.c"
        var $49=($48) - 1; //@line 205 "cPickle.c"
        $i=$49; //@line 205 "cPickle.c"
        var $50=$i; //@line 205 "cPickle.c"
        var $51=$clearto_addr; //@line 205 "cPickle.c"
        var $52=($50) >= ($51); //@line 205 "cPickle.c"
        if ($52) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 205 "cPickle.c"
      case 9: // $bb9
        var $53=$self_addr; //@line 209 "cPickle.c"
        var $54=$53+8; //@line 209 "cPickle.c"
        var $55=$clearto_addr; //@line 209 "cPickle.c"
        HEAP[$54]=$55; //@line 209 "cPickle.c"
        $1=0; //@line 211 "cPickle.c"
        __label__ = 10; break; //@line 211 "cPickle.c"
      case 10: // $bb10
        var $56=$1; //@line 201 "cPickle.c"
        $retval=$56; //@line 201 "cPickle.c"
        var $retval11=$retval; //@line 201 "cPickle.c"
        ;
        return $retval11; //@line 201 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_grow($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $bigger;
        var $nbytes;
        var $tmp;
        $self_addr=$self;
        var $1=$self_addr; //@line 221 "cPickle.c"
        var $2=$1+12; //@line 221 "cPickle.c"
        var $3=HEAP[$2]; //@line 221 "cPickle.c"
        var $4=($3) << 1; //@line 221 "cPickle.c"
        $bigger=$4; //@line 221 "cPickle.c"
        var $5=$bigger; //@line 222 "cPickle.c"
        var $6=($5) <= 0; //@line 222 "cPickle.c"
        if ($6) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 222 "cPickle.c"
      case 1: // $bb
        var $7=$bigger; //@line 226 "cPickle.c"
        var $8=($7) * 4; //@line 226 "cPickle.c"
        $nbytes=$8; //@line 226 "cPickle.c"
        var $9=$nbytes; //@line 227 "cPickle.c"
        var $10=Math.floor(($9)/4); //@line 227 "cPickle.c"
        var $11=$bigger; //@line 227 "cPickle.c"
        var $12=($10)!=($11); //@line 227 "cPickle.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 227 "cPickle.c"
      case 2: // $bb1
        var $13=$self_addr; //@line 229 "cPickle.c"
        var $14=$13+16; //@line 229 "cPickle.c"
        var $15=HEAP[$14]; //@line 229 "cPickle.c"
        var $16=$15; //@line 229 "cPickle.c"
        var $17=$nbytes; //@line 229 "cPickle.c"
        var $18=_realloc($16, $17); //@line 229 "cPickle.c"
        var $19=$18; //@line 229 "cPickle.c"
        $tmp=$19; //@line 229 "cPickle.c"
        var $20=$tmp; //@line 230 "cPickle.c"
        var $21=($20)==0; //@line 230 "cPickle.c"
        if ($21) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 230 "cPickle.c"
      case 3: // $bb2
        var $22=$self_addr; //@line 232 "cPickle.c"
        var $23=$22+16; //@line 232 "cPickle.c"
        var $24=$tmp; //@line 232 "cPickle.c"
        HEAP[$23]=$24; //@line 232 "cPickle.c"
        var $25=$self_addr; //@line 233 "cPickle.c"
        var $26=$25+12; //@line 233 "cPickle.c"
        var $27=$bigger; //@line 233 "cPickle.c"
        HEAP[$26]=$27; //@line 233 "cPickle.c"
        $0=0; //@line 234 "cPickle.c"
        __label__ = 5; break; //@line 234 "cPickle.c"
      case 4: // $nomemory
        var $28=_PyErr_NoMemory(); //@line 237 "cPickle.c"
        $0=-1; //@line 238 "cPickle.c"
        __label__ = 5; break; //@line 238 "cPickle.c"
      case 5: // $bb3
        var $29=$0; //@line 234 "cPickle.c"
        $retval=$29; //@line 234 "cPickle.c"
        var $retval4=$retval; //@line 234 "cPickle.c"
        ;
        return $retval4; //@line 234 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_popTuple($self, $start) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $start_addr;
        var $retval;
        var $0;
        var $r;
        var $i;
        var $j;
        var $l;
        $self_addr=$self;
        $start_addr=$start;
        var $1=$self_addr; //@line 288 "cPickle.c"
        var $2=$1+8; //@line 288 "cPickle.c"
        var $3=HEAP[$2]; //@line 288 "cPickle.c"
        var $4=$start_addr; //@line 288 "cPickle.c"
        var $5=($3) - ($4); //@line 288 "cPickle.c"
        $l=$5; //@line 288 "cPickle.c"
        var $6=$l; //@line 289 "cPickle.c"
        var $7=_PyTuple_New($6); //@line 289 "cPickle.c"
        $r=$7; //@line 289 "cPickle.c"
        var $8=$r; //@line 290 "cPickle.c"
        var $9=($8)==0; //@line 290 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 290 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 291 "cPickle.c"
        __label__ = 5; break; //@line 291 "cPickle.c"
      case 2: // $bb1
        var $10=$start_addr; //@line 292 "cPickle.c"
        $i=$10; //@line 292 "cPickle.c"
        $j=0; //@line 292 "cPickle.c"
        var $11=$j; //@line 292 "cPickle.c"
        var $12=$l; //@line 292 "cPickle.c"
        var $13=($11) < ($12); //@line 292 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 292 "cPickle.c"
      case 3: // $bb2
        var $14=$r; //@line 293 "cPickle.c"
        var $15=$14; //@line 293 "cPickle.c"
        var $16=$j; //@line 293 "cPickle.c"
        var $17=$self_addr; //@line 293 "cPickle.c"
        var $18=$17+16; //@line 293 "cPickle.c"
        var $19=HEAP[$18]; //@line 293 "cPickle.c"
        var $20=$i; //@line 293 "cPickle.c"
        var $21=$19+4*$20; //@line 293 "cPickle.c"
        var $22=HEAP[$21]; //@line 293 "cPickle.c"
        var $23=$15+12; //@line 293 "cPickle.c"
        var $24=$23+$16*4; //@line 293 "cPickle.c"
        HEAP[$24]=$22; //@line 293 "cPickle.c"
        var $25=$i; //@line 292 "cPickle.c"
        var $26=($25) + 1; //@line 292 "cPickle.c"
        $i=$26; //@line 292 "cPickle.c"
        var $27=$j; //@line 292 "cPickle.c"
        var $28=($27) + 1; //@line 292 "cPickle.c"
        $j=$28; //@line 292 "cPickle.c"
        var $29=$j; //@line 292 "cPickle.c"
        var $30=$l; //@line 292 "cPickle.c"
        var $31=($29) < ($30); //@line 292 "cPickle.c"
        if ($31) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 292 "cPickle.c"
      case 4: // $bb4
        var $32=$self_addr; //@line 295 "cPickle.c"
        var $33=$32+8; //@line 295 "cPickle.c"
        var $34=$start_addr; //@line 295 "cPickle.c"
        HEAP[$33]=$34; //@line 295 "cPickle.c"
        var $35=$r; //@line 296 "cPickle.c"
        $0=$35; //@line 296 "cPickle.c"
        __label__ = 5; break; //@line 296 "cPickle.c"
      case 5: // $bb5
        var $36=$0; //@line 291 "cPickle.c"
        $retval=$36; //@line 291 "cPickle.c"
        var $retval6=$retval; //@line 291 "cPickle.c"
        ;
        return $retval6; //@line 291 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_popList($self, $start) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $start_addr;
        var $retval;
        var $0;
        var $r;
        var $i;
        var $j;
        var $l;
        $self_addr=$self;
        $start_addr=$start;
        var $1=$self_addr; //@line 305 "cPickle.c"
        var $2=$1+8; //@line 305 "cPickle.c"
        var $3=HEAP[$2]; //@line 305 "cPickle.c"
        var $4=$start_addr; //@line 305 "cPickle.c"
        var $5=($3) - ($4); //@line 305 "cPickle.c"
        $l=$5; //@line 305 "cPickle.c"
        var $6=$l; //@line 306 "cPickle.c"
        var $7=_PyList_New($6); //@line 306 "cPickle.c"
        $r=$7; //@line 306 "cPickle.c"
        var $8=$r; //@line 306 "cPickle.c"
        var $9=($8)==0; //@line 306 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 306 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 306 "cPickle.c"
        __label__ = 5; break; //@line 306 "cPickle.c"
      case 2: // $bb1
        var $10=$start_addr; //@line 307 "cPickle.c"
        $i=$10; //@line 307 "cPickle.c"
        $j=0; //@line 307 "cPickle.c"
        var $11=$j; //@line 307 "cPickle.c"
        var $12=$l; //@line 307 "cPickle.c"
        var $13=($11) < ($12); //@line 307 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 307 "cPickle.c"
      case 3: // $bb2
        var $14=$r; //@line 308 "cPickle.c"
        var $15=$14; //@line 308 "cPickle.c"
        var $16=$15+12; //@line 308 "cPickle.c"
        var $17=HEAP[$16]; //@line 308 "cPickle.c"
        var $18=$self_addr; //@line 308 "cPickle.c"
        var $19=$18+16; //@line 308 "cPickle.c"
        var $20=HEAP[$19]; //@line 308 "cPickle.c"
        var $21=$i; //@line 308 "cPickle.c"
        var $22=$20+4*$21; //@line 308 "cPickle.c"
        var $23=HEAP[$22]; //@line 308 "cPickle.c"
        var $24=$j; //@line 308 "cPickle.c"
        var $25=$17+4*$24; //@line 308 "cPickle.c"
        HEAP[$25]=$23; //@line 308 "cPickle.c"
        var $26=$i; //@line 307 "cPickle.c"
        var $27=($26) + 1; //@line 307 "cPickle.c"
        $i=$27; //@line 307 "cPickle.c"
        var $28=$j; //@line 307 "cPickle.c"
        var $29=($28) + 1; //@line 307 "cPickle.c"
        $j=$29; //@line 307 "cPickle.c"
        var $30=$j; //@line 307 "cPickle.c"
        var $31=$l; //@line 307 "cPickle.c"
        var $32=($30) < ($31); //@line 307 "cPickle.c"
        if ($32) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 307 "cPickle.c"
      case 4: // $bb4
        var $33=$self_addr; //@line 310 "cPickle.c"
        var $34=$33+8; //@line 310 "cPickle.c"
        var $35=$start_addr; //@line 310 "cPickle.c"
        HEAP[$34]=$35; //@line 310 "cPickle.c"
        var $36=$r; //@line 311 "cPickle.c"
        $0=$36; //@line 311 "cPickle.c"
        __label__ = 5; break; //@line 311 "cPickle.c"
      case 5: // $bb5
        var $37=$0; //@line 306 "cPickle.c"
        $retval=$37; //@line 306 "cPickle.c"
        var $retval6=$retval; //@line 306 "cPickle.c"
        ;
        return $retval6; //@line 306 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cPickle_ErrFormat($ErrType, $stringformat, $format) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $ErrType_addr;
        var $stringformat_addr;
        var $format_addr;
        var $0;
        var $va=__stackBase__;
        var $args;
        var $retval1;
        var $v;
        $ErrType_addr=$ErrType;
        $stringformat_addr=$stringformat;
        $format_addr=$format;
        $args=0; //@line 397 "cPickle.c"
        $retval1=0; //@line 397 "cPickle.c"
        var $va2=$va; //@line 398 "cPickle.c"
        HEAP[$va2]=arguments[_cPickle_ErrFormat.length];; //@line 398 "cPickle.c"
        var $1=$format_addr; //@line 400 "cPickle.c"
        var $2=($1)!=0; //@line 400 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 400 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[$va]; //@line 400 "cPickle.c"
        var $4=$format_addr; //@line 400 "cPickle.c"
        var $5=_Py_VaBuildValue($4, $3); //@line 400 "cPickle.c"
        $args=$5; //@line 400 "cPickle.c"
        __label__ = 2; break; //@line 400 "cPickle.c"
      case 2: // $bb3
        var $va4=$va; //@line 401 "cPickle.c"
        ;; //@line 401 "cPickle.c"
        var $6=$format_addr; //@line 402 "cPickle.c"
        var $7=($6)!=0; //@line 402 "cPickle.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 402 "cPickle.c"
      case 3: // $bb5
        var $8=$args; //@line 402 "cPickle.c"
        var $9=($8)==0; //@line 402 "cPickle.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 402 "cPickle.c"
      case 4: // $bb6
        $0=0; //@line 402 "cPickle.c"
        __label__ = 24; break; //@line 402 "cPickle.c"
      case 5: // $bb7
        var $10=$stringformat_addr; //@line 403 "cPickle.c"
        var $11=($10)!=0; //@line 403 "cPickle.c"
        if ($11) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 403 "cPickle.c"
      case 6: // $bb8
        var $12=$stringformat_addr; //@line 403 "cPickle.c"
        var $13=_PyString_FromString($12); //@line 403 "cPickle.c"
        $retval1=$13; //@line 403 "cPickle.c"
        var $14=$retval1; //@line 403 "cPickle.c"
        var $15=($14)==0; //@line 403 "cPickle.c"
        if ($15) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 403 "cPickle.c"
      case 7: // $bb10_thread
        var $16=$args; //@line 407 "cPickle.c"
        var $17=($16)!=0; //@line 407 "cPickle.c"
        if ($17) { __label__ = 11; break; } else { __label__ = 21; break; } //@line 407 "cPickle.c"
      case 8: // $bb9
        $0=0; //@line 404 "cPickle.c"
        __label__ = 24; break; //@line 404 "cPickle.c"
      case 9: // $bb10
        var $_pr=$retval1;
        var $18=($_pr)!=0; //@line 406 "cPickle.c"
        var $19=$args; //@line 407 "cPickle.c"
        var $20=($19)!=0; //@line 407 "cPickle.c"
        if ($18) { __label__ = 10; break; } else { __label__ = 18; break; } //@line 406 "cPickle.c"
      case 10: // $bb11
        if ($20) { __label__ = 11; break; } else { __label__ = 21; break; } //@line 407 "cPickle.c"
      case 11: // $bb12
        var $21=$retval1; //@line 409 "cPickle.c"
        var $22=$args; //@line 409 "cPickle.c"
        var $23=_PyString_Format($21, $22); //@line 409 "cPickle.c"
        $v=$23; //@line 409 "cPickle.c"
        var $24=$retval1; //@line 410 "cPickle.c"
        var $25=$24; //@line 410 "cPickle.c"
        var $26=HEAP[$25]; //@line 410 "cPickle.c"
        var $27=($26) - 1; //@line 410 "cPickle.c"
        var $28=$retval1; //@line 410 "cPickle.c"
        var $29=$28; //@line 410 "cPickle.c"
        HEAP[$29]=$27; //@line 410 "cPickle.c"
        var $30=$retval1; //@line 410 "cPickle.c"
        var $31=$30; //@line 410 "cPickle.c"
        var $32=HEAP[$31]; //@line 410 "cPickle.c"
        var $33=($32)==0; //@line 410 "cPickle.c"
        if ($33) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 410 "cPickle.c"
      case 12: // $bb13
        var $34=$retval1; //@line 410 "cPickle.c"
        var $35=$34+4; //@line 410 "cPickle.c"
        var $36=HEAP[$35]; //@line 410 "cPickle.c"
        var $37=$36+24; //@line 410 "cPickle.c"
        var $38=HEAP[$37]; //@line 410 "cPickle.c"
        var $39=$retval1; //@line 410 "cPickle.c"
        FUNCTION_TABLE[$38]($39); //@line 410 "cPickle.c"
        __label__ = 13; break; //@line 410 "cPickle.c"
      case 13: // $bb14
        var $40=$args; //@line 411 "cPickle.c"
        var $41=$40; //@line 411 "cPickle.c"
        var $42=HEAP[$41]; //@line 411 "cPickle.c"
        var $43=($42) - 1; //@line 411 "cPickle.c"
        var $44=$args; //@line 411 "cPickle.c"
        var $45=$44; //@line 411 "cPickle.c"
        HEAP[$45]=$43; //@line 411 "cPickle.c"
        var $46=$args; //@line 411 "cPickle.c"
        var $47=$46; //@line 411 "cPickle.c"
        var $48=HEAP[$47]; //@line 411 "cPickle.c"
        var $49=($48)==0; //@line 411 "cPickle.c"
        if ($49) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 411 "cPickle.c"
      case 14: // $bb15
        var $50=$args; //@line 411 "cPickle.c"
        var $51=$50+4; //@line 411 "cPickle.c"
        var $52=HEAP[$51]; //@line 411 "cPickle.c"
        var $53=$52+24; //@line 411 "cPickle.c"
        var $54=HEAP[$53]; //@line 411 "cPickle.c"
        var $55=$args; //@line 411 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 411 "cPickle.c"
        __label__ = 15; break; //@line 411 "cPickle.c"
      case 15: // $bb16
        var $56=$v; //@line 412 "cPickle.c"
        var $57=($56)==0; //@line 412 "cPickle.c"
        if ($57) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 412 "cPickle.c"
      case 16: // $bb17
        $0=0; //@line 412 "cPickle.c"
        __label__ = 24; break; //@line 412 "cPickle.c"
      case 17: // $bb18
        var $58=$v; //@line 413 "cPickle.c"
        $retval1=$58; //@line 413 "cPickle.c"
        __label__ = 21; break; //@line 413 "cPickle.c"
      case 18: // $bb20
        if ($20) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 417 "cPickle.c"
      case 19: // $bb21
        var $59=$args; //@line 417 "cPickle.c"
        $retval1=$59; //@line 417 "cPickle.c"
        __label__ = 21; break; //@line 417 "cPickle.c"
      case 20: // $bb22
        var $60=$ErrType_addr; //@line 419 "cPickle.c"
        _PyErr_SetObject($60, __Py_NoneStruct); //@line 419 "cPickle.c"
        $0=0; //@line 420 "cPickle.c"
        __label__ = 24; break; //@line 420 "cPickle.c"
      case 21: // $bb23
        var $61=$ErrType_addr; //@line 422 "cPickle.c"
        var $62=$retval1; //@line 422 "cPickle.c"
        _PyErr_SetObject($61, $62); //@line 422 "cPickle.c"
        var $63=$retval1; //@line 423 "cPickle.c"
        var $64=$63; //@line 423 "cPickle.c"
        var $65=HEAP[$64]; //@line 423 "cPickle.c"
        var $66=($65) - 1; //@line 423 "cPickle.c"
        var $67=$retval1; //@line 423 "cPickle.c"
        var $68=$67; //@line 423 "cPickle.c"
        HEAP[$68]=$66; //@line 423 "cPickle.c"
        var $69=$retval1; //@line 423 "cPickle.c"
        var $70=$69; //@line 423 "cPickle.c"
        var $71=HEAP[$70]; //@line 423 "cPickle.c"
        var $72=($71)==0; //@line 423 "cPickle.c"
        if ($72) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 423 "cPickle.c"
      case 22: // $bb24
        var $73=$retval1; //@line 423 "cPickle.c"
        var $74=$73+4; //@line 423 "cPickle.c"
        var $75=HEAP[$74]; //@line 423 "cPickle.c"
        var $76=$75+24; //@line 423 "cPickle.c"
        var $77=HEAP[$76]; //@line 423 "cPickle.c"
        var $78=$retval1; //@line 423 "cPickle.c"
        FUNCTION_TABLE[$77]($78); //@line 423 "cPickle.c"
        __label__ = 23; break; //@line 423 "cPickle.c"
      case 23: // $bb25
        $0=0; //@line 424 "cPickle.c"
        __label__ = 24; break; //@line 424 "cPickle.c"
      case 24: // $bb26
        STACKTOP = __stackBase__;
        return;
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_file($self, $s, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $nbyteswritten;
        $self_addr=$self;
        $s_addr=$s;
        $n_addr=$n;
        var $1=$s_addr; //@line 432 "cPickle.c"
        var $2=($1)==0; //@line 432 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 432 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 433 "cPickle.c"
        __label__ = 5; break; //@line 433 "cPickle.c"
      case 2: // $bb1
        var $3=$self_addr; //@line 441 "cPickle.c"
        var $4=$3+16; //@line 441 "cPickle.c"
        var $5=HEAP[$4]; //@line 441 "cPickle.c"
        var $6=$5; //@line 441 "cPickle.c"
        _PyFile_IncUseCount($6); //@line 441 "cPickle.c"
        var $7=$self_addr; //@line 443 "cPickle.c"
        var $8=$7+8; //@line 443 "cPickle.c"
        var $9=HEAP[$8]; //@line 443 "cPickle.c"
        var $10=$n_addr; //@line 443 "cPickle.c"
        var $11=$s_addr; //@line 443 "cPickle.c"
        var $12=_fwrite($11, 1, $10, $9); //@line 443 "cPickle.c"
        $nbyteswritten=$12; //@line 443 "cPickle.c"
        var $13=$self_addr; //@line 445 "cPickle.c"
        var $14=$13+16; //@line 445 "cPickle.c"
        var $15=HEAP[$14]; //@line 445 "cPickle.c"
        var $16=$15; //@line 445 "cPickle.c"
        _PyFile_DecUseCount($16); //@line 445 "cPickle.c"
        var $17=$n_addr; //@line 446 "cPickle.c"
        var $18=$nbyteswritten; //@line 446 "cPickle.c"
        var $19=($17)!=($18); //@line 446 "cPickle.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 446 "cPickle.c"
      case 3: // $bb2
        var $20=HEAP[_PyExc_IOError]; //@line 447 "cPickle.c"
        var $21=_PyErr_SetFromErrno($20); //@line 447 "cPickle.c"
        $0=-1; //@line 448 "cPickle.c"
        __label__ = 5; break; //@line 448 "cPickle.c"
      case 4: // $bb3
        var $22=$n_addr; //@line 451 "cPickle.c"
        $0=$22; //@line 451 "cPickle.c"
        __label__ = 5; break; //@line 451 "cPickle.c"
      case 5: // $bb4
        var $23=$0; //@line 433 "cPickle.c"
        $retval=$23; //@line 433 "cPickle.c"
        var $retval5=$retval; //@line 433 "cPickle.c"
        ;
        return $retval5; //@line 433 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_cStringIO($self, $s, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $s_addr=$s;
        $n_addr=$n;
        var $1=$s_addr; //@line 457 "cPickle.c"
        var $2=($1)==0; //@line 457 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 457 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 458 "cPickle.c"
        __label__ = 5; break; //@line 458 "cPickle.c"
      case 2: // $bb1
        var $3=HEAP[_PycStringIO]; //@line 461 "cPickle.c"
        var $4=$3+8; //@line 461 "cPickle.c"
        var $5=HEAP[$4]; //@line 461 "cPickle.c"
        var $6=$self_addr; //@line 461 "cPickle.c"
        var $7=$6+16; //@line 461 "cPickle.c"
        var $8=HEAP[$7]; //@line 461 "cPickle.c"
        var $9=$s_addr; //@line 461 "cPickle.c"
        var $10=$n_addr; //@line 461 "cPickle.c"
        var $11=FUNCTION_TABLE[$5]($8, $9, $10); //@line 461 "cPickle.c"
        var $12=$n_addr; //@line 461 "cPickle.c"
        var $13=($11)!=($12); //@line 461 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 461 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 462 "cPickle.c"
        __label__ = 5; break; //@line 462 "cPickle.c"
      case 4: // $bb3
        var $14=$n_addr; //@line 465 "cPickle.c"
        $0=$14; //@line 465 "cPickle.c"
        __label__ = 5; break; //@line 465 "cPickle.c"
      case 5: // $bb4
        var $15=$0; //@line 458 "cPickle.c"
        $retval=$15; //@line 458 "cPickle.c"
        var $retval5=$retval; //@line 458 "cPickle.c"
        ;
        return $retval5; //@line 458 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_none($self, $s, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $s_addr=$s;
        $n_addr=$n;
        var $1=$s_addr; //@line 471 "cPickle.c"
        var $2=($1)==0; //@line 471 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 471 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 471 "cPickle.c"
        __label__ = 3; break; //@line 471 "cPickle.c"
      case 2: // $bb1
        var $3=$n_addr; //@line 473 "cPickle.c"
        $0=$3; //@line 473 "cPickle.c"
        __label__ = 3; break; //@line 473 "cPickle.c"
      case 3: // $bb2
        var $4=$0; //@line 471 "cPickle.c"
        $retval=$4; //@line 471 "cPickle.c"
        var $retval3=$retval; //@line 471 "cPickle.c"
        ;
        return $retval3; //@line 471 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_other($self, $s, $_n) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $_n_addr;
        var $retval;
        var $0;
        var $py_str;
        var $junk;
        var $n;
        $self_addr=$self;
        $s_addr=$s;
        $_n_addr=$_n;
        $py_str=0; //@line 479 "cPickle.c"
        $junk=0; //@line 479 "cPickle.c"
        var $1=$_n_addr; //@line 484 "cPickle.c"
        $n=$1; //@line 484 "cPickle.c"
        var $2=$s_addr; //@line 485 "cPickle.c"
        var $3=($2)==0; //@line 485 "cPickle.c"
        var $4=$self_addr; //@line 486 "cPickle.c"
        var $5=$4+56; //@line 486 "cPickle.c"
        var $6=HEAP[$5]; //@line 486 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 485 "cPickle.c"
      case 1: // $bb
        var $7=($6)==0; //@line 486 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 486 "cPickle.c"
      case 2: // $bb1
        $0=0; //@line 486 "cPickle.c"
        __label__ = 39; break; //@line 486 "cPickle.c"
      case 3: // $bb2
        var $8=$self_addr; //@line 487 "cPickle.c"
        var $9=$8+56; //@line 487 "cPickle.c"
        var $10=HEAP[$9]; //@line 487 "cPickle.c"
        var $11=$self_addr; //@line 487 "cPickle.c"
        var $12=$11+52; //@line 487 "cPickle.c"
        var $13=HEAP[$12]; //@line 487 "cPickle.c"
        var $14=_PyString_FromStringAndSize($13, $10); //@line 487 "cPickle.c"
        $py_str=$14; //@line 487 "cPickle.c"
        var $15=$py_str; //@line 489 "cPickle.c"
        var $16=($15)==0; //@line 489 "cPickle.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 14; break; } //@line 489 "cPickle.c"
      case 4: // $bb3
        $0=-1; //@line 490 "cPickle.c"
        __label__ = 39; break; //@line 490 "cPickle.c"
      case 5: // $bb5
        var $17=($6)!=0; //@line 493 "cPickle.c"
        if ($17) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 493 "cPickle.c"
      case 6: // $bb6
        var $18=$self_addr; //@line 493 "cPickle.c"
        var $19=$18+56; //@line 493 "cPickle.c"
        var $20=HEAP[$19]; //@line 493 "cPickle.c"
        var $21=$n; //@line 493 "cPickle.c"
        var $22=($21) + ($20); //@line 493 "cPickle.c"
        var $23=($22) > 256; //@line 493 "cPickle.c"
        if ($23) { __lastLabel__ = 6; __label__ = 7; break; } else { __lastLabel__ = 6; __label__ = 10; break; } //@line 493 "cPickle.c"
      case 7: // $bb7
        var $24=$self_addr; //@line 494 "cPickle.c"
        var $25=_write_other($24, 0, 0); //@line 494 "cPickle.c"
        var $26=($25) < 0; //@line 494 "cPickle.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 494 "cPickle.c"
      case 8: // $bb8
        $0=-1; //@line 495 "cPickle.c"
        __label__ = 39; break; //@line 495 "cPickle.c"
      case 9: // $bb9thread_pre_split
        var $_pr=$n;
        __lastLabel__ = 9; __label__ = 10; break;
      case 10: // $bb9
        var $27=__lastLabel__ == 9 ? $_pr : ($21);
        var $28=($27) > 256; //@line 498 "cPickle.c"
        if ($28) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 498 "cPickle.c"
      case 11: // $bb10
        var $29=$s_addr; //@line 499 "cPickle.c"
        var $30=$n; //@line 499 "cPickle.c"
        var $31=_PyString_FromStringAndSize($29, $30); //@line 499 "cPickle.c"
        $py_str=$31; //@line 499 "cPickle.c"
        var $32=$py_str; //@line 499 "cPickle.c"
        var $33=($32)==0; //@line 499 "cPickle.c"
        if ($33) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 499 "cPickle.c"
      case 12: // $bb11
        $0=-1; //@line 501 "cPickle.c"
        __label__ = 39; break; //@line 501 "cPickle.c"
      case 13: // $bb13
        var $34=$n; //@line 504 "cPickle.c"
        var $35=$self_addr; //@line 504 "cPickle.c"
        var $36=$35+52; //@line 504 "cPickle.c"
        var $37=HEAP[$36]; //@line 504 "cPickle.c"
        var $38=$self_addr; //@line 504 "cPickle.c"
        var $39=$38+56; //@line 504 "cPickle.c"
        var $40=HEAP[$39]; //@line 504 "cPickle.c"
        var $41=$37+$40; //@line 504 "cPickle.c"
        var $42=$s_addr; //@line 504 "cPickle.c"
        _llvm_memcpy_p0i8_p0i8_i32($41, $42, $34, 1, 0); //@line 504 "cPickle.c"
        var $43=$self_addr; //@line 505 "cPickle.c"
        var $44=$43+56; //@line 505 "cPickle.c"
        var $45=HEAP[$44]; //@line 505 "cPickle.c"
        var $46=$n; //@line 505 "cPickle.c"
        var $47=($46) + ($45); //@line 505 "cPickle.c"
        var $48=$self_addr; //@line 505 "cPickle.c"
        var $49=$48+56; //@line 505 "cPickle.c"
        HEAP[$49]=$47; //@line 505 "cPickle.c"
        var $50=$n; //@line 506 "cPickle.c"
        $0=$50; //@line 506 "cPickle.c"
        __label__ = 39; break; //@line 506 "cPickle.c"
      case 14: // $bb14
        var $51=$self_addr; //@line 510 "cPickle.c"
        var $52=$51+12; //@line 510 "cPickle.c"
        var $53=HEAP[$52]; //@line 510 "cPickle.c"
        var $54=($53)!=0; //@line 510 "cPickle.c"
        var $55=$self_addr; //@line 512 "cPickle.c"
        if ($54) { __label__ = 15; break; } else { __label__ = 32; break; } //@line 510 "cPickle.c"
      case 15: // $bb15
        var $56=$55+24; //@line 512 "cPickle.c"
        var $57=HEAP[$56]; //@line 512 "cPickle.c"
        var $58=($57)!=0; //@line 512 "cPickle.c"
        if ($58) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 512 "cPickle.c"
      case 16: // $bb16
        var $59=_PyTuple_New(1); //@line 512 "cPickle.c"
        var $60=$self_addr; //@line 512 "cPickle.c"
        var $61=$60+24; //@line 512 "cPickle.c"
        HEAP[$61]=$59; //@line 512 "cPickle.c"
        var $62=$self_addr; //@line 512 "cPickle.c"
        var $63=$62+24; //@line 512 "cPickle.c"
        var $64=HEAP[$63]; //@line 512 "cPickle.c"
        var $65=($64)!=0; //@line 512 "cPickle.c"
        if ($65) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 512 "cPickle.c"
      case 17: // $bb17
        var $66=$self_addr; //@line 512 "cPickle.c"
        var $67=$66+24; //@line 512 "cPickle.c"
        var $68=HEAP[$67]; //@line 512 "cPickle.c"
        var $69=$68; //@line 512 "cPickle.c"
        var $70=$69+12; //@line 512 "cPickle.c"
        var $71=$70; //@line 512 "cPickle.c"
        var $72=HEAP[$71]; //@line 512 "cPickle.c"
        var $73=($72)!=0; //@line 512 "cPickle.c"
        if ($73) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 512 "cPickle.c"
      case 18: // $bb18
        var $74=$self_addr; //@line 512 "cPickle.c"
        var $75=$74+24; //@line 512 "cPickle.c"
        var $76=HEAP[$75]; //@line 512 "cPickle.c"
        var $77=$76; //@line 512 "cPickle.c"
        var $78=$77+12; //@line 512 "cPickle.c"
        var $79=$78; //@line 512 "cPickle.c"
        var $80=HEAP[$79]; //@line 512 "cPickle.c"
        var $81=$80; //@line 512 "cPickle.c"
        var $82=HEAP[$81]; //@line 512 "cPickle.c"
        var $83=($82) - 1; //@line 512 "cPickle.c"
        var $84=$80; //@line 512 "cPickle.c"
        HEAP[$84]=$83; //@line 512 "cPickle.c"
        var $85=$80; //@line 512 "cPickle.c"
        var $86=HEAP[$85]; //@line 512 "cPickle.c"
        var $87=($86)==0; //@line 512 "cPickle.c"
        if ($87) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 512 "cPickle.c"
      case 19: // $bb19
        var $88=$self_addr; //@line 512 "cPickle.c"
        var $89=$88+24; //@line 512 "cPickle.c"
        var $90=HEAP[$89]; //@line 512 "cPickle.c"
        var $91=$90; //@line 512 "cPickle.c"
        var $92=$91+12; //@line 512 "cPickle.c"
        var $93=$92; //@line 512 "cPickle.c"
        var $94=HEAP[$93]; //@line 512 "cPickle.c"
        var $95=$94+4; //@line 512 "cPickle.c"
        var $96=HEAP[$95]; //@line 512 "cPickle.c"
        var $97=$96+24; //@line 512 "cPickle.c"
        var $98=HEAP[$97]; //@line 512 "cPickle.c"
        var $99=$self_addr; //@line 512 "cPickle.c"
        var $100=$99+24; //@line 512 "cPickle.c"
        var $101=HEAP[$100]; //@line 512 "cPickle.c"
        var $102=$101; //@line 512 "cPickle.c"
        var $103=$102+12; //@line 512 "cPickle.c"
        var $104=$103; //@line 512 "cPickle.c"
        var $105=HEAP[$104]; //@line 512 "cPickle.c"
        FUNCTION_TABLE[$98]($105); //@line 512 "cPickle.c"
        __label__ = 20; break; //@line 512 "cPickle.c"
      case 20: // $bb20
        var $106=$self_addr; //@line 512 "cPickle.c"
        var $107=$106+24; //@line 512 "cPickle.c"
        var $108=HEAP[$107]; //@line 512 "cPickle.c"
        var $109=$108; //@line 512 "cPickle.c"
        var $110=$109+12; //@line 512 "cPickle.c"
        var $111=$110; //@line 512 "cPickle.c"
        var $112=$py_str; //@line 512 "cPickle.c"
        HEAP[$111]=$112; //@line 512 "cPickle.c"
        __label__ = 23; break; //@line 512 "cPickle.c"
      case 21: // $bb21
        var $113=$py_str; //@line 512 "cPickle.c"
        var $114=$113; //@line 512 "cPickle.c"
        var $115=HEAP[$114]; //@line 512 "cPickle.c"
        var $116=($115) - 1; //@line 512 "cPickle.c"
        var $117=$py_str; //@line 512 "cPickle.c"
        var $118=$117; //@line 512 "cPickle.c"
        HEAP[$118]=$116; //@line 512 "cPickle.c"
        var $119=$py_str; //@line 512 "cPickle.c"
        var $120=$119; //@line 512 "cPickle.c"
        var $121=HEAP[$120]; //@line 512 "cPickle.c"
        var $122=($121)==0; //@line 512 "cPickle.c"
        if ($122) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 512 "cPickle.c"
      case 22: // $bb22
        var $123=$py_str; //@line 512 "cPickle.c"
        var $124=$123+4; //@line 512 "cPickle.c"
        var $125=HEAP[$124]; //@line 512 "cPickle.c"
        var $126=$125+24; //@line 512 "cPickle.c"
        var $127=HEAP[$126]; //@line 512 "cPickle.c"
        var $128=$py_str; //@line 512 "cPickle.c"
        FUNCTION_TABLE[$127]($128); //@line 512 "cPickle.c"
        __label__ = 23; break; //@line 512 "cPickle.c"
      case 23: // $bb23
        var $129=$self_addr; //@line 513 "cPickle.c"
        var $130=$129+24; //@line 513 "cPickle.c"
        var $131=HEAP[$130]; //@line 513 "cPickle.c"
        var $132=($131)!=0; //@line 513 "cPickle.c"
        if ($132) { __label__ = 24; break; } else { __label__ = 28; break; } //@line 513 "cPickle.c"
      case 24: // $bb24
        var $133=$self_addr; //@line 514 "cPickle.c"
        var $134=$133+24; //@line 514 "cPickle.c"
        var $135=HEAP[$134]; //@line 514 "cPickle.c"
        var $136=$self_addr; //@line 514 "cPickle.c"
        var $137=$136+12; //@line 514 "cPickle.c"
        var $138=HEAP[$137]; //@line 514 "cPickle.c"
        var $139=_PyObject_Call($138, $135, 0); //@line 514 "cPickle.c"
        $junk=$139; //@line 514 "cPickle.c"
        var $140=$self_addr; //@line 515 "cPickle.c"
        var $141=$140+24; //@line 515 "cPickle.c"
        var $142=HEAP[$141]; //@line 515 "cPickle.c"
        var $143=$142; //@line 515 "cPickle.c"
        var $144=HEAP[$143]; //@line 515 "cPickle.c"
        var $145=($144) > 1; //@line 515 "cPickle.c"
        if ($145) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 515 "cPickle.c"
      case 25: // $bb25
        var $146=$self_addr; //@line 515 "cPickle.c"
        var $147=$146+24; //@line 515 "cPickle.c"
        var $148=HEAP[$147]; //@line 515 "cPickle.c"
        var $149=$148; //@line 515 "cPickle.c"
        var $150=HEAP[$149]; //@line 515 "cPickle.c"
        var $151=($150) - 1; //@line 515 "cPickle.c"
        var $152=$148; //@line 515 "cPickle.c"
        HEAP[$152]=$151; //@line 515 "cPickle.c"
        var $153=$148; //@line 515 "cPickle.c"
        var $154=HEAP[$153]; //@line 515 "cPickle.c"
        var $155=($154)==0; //@line 515 "cPickle.c"
        if ($155) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 515 "cPickle.c"
      case 26: // $bb26
        var $156=$self_addr; //@line 515 "cPickle.c"
        var $157=$156+24; //@line 515 "cPickle.c"
        var $158=HEAP[$157]; //@line 515 "cPickle.c"
        var $159=$158+4; //@line 515 "cPickle.c"
        var $160=HEAP[$159]; //@line 515 "cPickle.c"
        var $161=$160+24; //@line 515 "cPickle.c"
        var $162=HEAP[$161]; //@line 515 "cPickle.c"
        var $163=$self_addr; //@line 515 "cPickle.c"
        var $164=$163+24; //@line 515 "cPickle.c"
        var $165=HEAP[$164]; //@line 515 "cPickle.c"
        FUNCTION_TABLE[$162]($165); //@line 515 "cPickle.c"
        __label__ = 27; break; //@line 515 "cPickle.c"
      case 27: // $bb27
        var $166=$self_addr; //@line 515 "cPickle.c"
        var $167=$166+24; //@line 515 "cPickle.c"
        HEAP[$167]=0; //@line 515 "cPickle.c"
        __label__ = 28; break; //@line 515 "cPickle.c"
      case 28: // $bb28
        var $168=$junk; //@line 517 "cPickle.c"
        var $169=($168)!=0; //@line 517 "cPickle.c"
        if ($169) { __label__ = 29; break; } else { __label__ = 31; break; } //@line 517 "cPickle.c"
      case 29: // $bb29
        var $170=$junk; //@line 517 "cPickle.c"
        var $171=$170; //@line 517 "cPickle.c"
        var $172=HEAP[$171]; //@line 517 "cPickle.c"
        var $173=($172) - 1; //@line 517 "cPickle.c"
        var $174=$junk; //@line 517 "cPickle.c"
        var $175=$174; //@line 517 "cPickle.c"
        HEAP[$175]=$173; //@line 517 "cPickle.c"
        var $176=$junk; //@line 517 "cPickle.c"
        var $177=$176; //@line 517 "cPickle.c"
        var $178=HEAP[$177]; //@line 517 "cPickle.c"
        var $179=($178)==0; //@line 517 "cPickle.c"
        if ($179) { __label__ = 30; break; } else { __label__ = 38; break; } //@line 517 "cPickle.c"
      case 30: // $bb30
        var $180=$junk; //@line 517 "cPickle.c"
        var $181=$180+4; //@line 517 "cPickle.c"
        var $182=HEAP[$181]; //@line 517 "cPickle.c"
        var $183=$182+24; //@line 517 "cPickle.c"
        var $184=HEAP[$183]; //@line 517 "cPickle.c"
        var $185=$junk; //@line 517 "cPickle.c"
        FUNCTION_TABLE[$184]($185); //@line 517 "cPickle.c"
        __label__ = 38; break; //@line 517 "cPickle.c"
      case 31: // $bb32
        $0=-1; //@line 518 "cPickle.c"
        __label__ = 39; break; //@line 518 "cPickle.c"
      case 32: // $bb33
        var $186=$55+16; //@line 521 "cPickle.c"
        var $187=HEAP[$186]; //@line 521 "cPickle.c"
        var $188=$187; //@line 521 "cPickle.c"
        var $189=$188+8; //@line 521 "cPickle.c"
        var $190=HEAP[$189]; //@line 521 "cPickle.c"
        var $191=$self_addr; //@line 521 "cPickle.c"
        var $192=$191+16; //@line 521 "cPickle.c"
        var $193=HEAP[$192]; //@line 521 "cPickle.c"
        var $194=$193; //@line 521 "cPickle.c"
        var $195=$194+12; //@line 521 "cPickle.c"
        var $196=HEAP[$195]; //@line 521 "cPickle.c"
        var $197=($190)==($196); //@line 521 "cPickle.c"
        if ($197) { __label__ = 33; break; } else { __label__ = 37; break; } //@line 521 "cPickle.c"
      case 33: // $bb34
        var $198=$self_addr; //@line 521 "cPickle.c"
        var $199=$198+16; //@line 521 "cPickle.c"
        var $200=HEAP[$199]; //@line 521 "cPickle.c"
        var $201=$200; //@line 521 "cPickle.c"
        var $202=_Pdata_grow($201); //@line 521 "cPickle.c"
        var $203=($202) < 0; //@line 521 "cPickle.c"
        if ($203) { __label__ = 34; break; } else { __label__ = 37; break; } //@line 521 "cPickle.c"
      case 34: // $bb35
        var $204=$py_str; //@line 521 "cPickle.c"
        var $205=$204; //@line 521 "cPickle.c"
        var $206=HEAP[$205]; //@line 521 "cPickle.c"
        var $207=($206) - 1; //@line 521 "cPickle.c"
        var $208=$py_str; //@line 521 "cPickle.c"
        var $209=$208; //@line 521 "cPickle.c"
        HEAP[$209]=$207; //@line 521 "cPickle.c"
        var $210=$py_str; //@line 521 "cPickle.c"
        var $211=$210; //@line 521 "cPickle.c"
        var $212=HEAP[$211]; //@line 521 "cPickle.c"
        var $213=($212)==0; //@line 521 "cPickle.c"
        if ($213) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 521 "cPickle.c"
      case 35: // $bb36
        var $214=$py_str; //@line 521 "cPickle.c"
        var $215=$214+4; //@line 521 "cPickle.c"
        var $216=HEAP[$215]; //@line 521 "cPickle.c"
        var $217=$216+24; //@line 521 "cPickle.c"
        var $218=HEAP[$217]; //@line 521 "cPickle.c"
        var $219=$py_str; //@line 521 "cPickle.c"
        FUNCTION_TABLE[$218]($219); //@line 521 "cPickle.c"
        __label__ = 36; break; //@line 521 "cPickle.c"
      case 36: // $bb37
        $0=-1; //@line 521 "cPickle.c"
        __label__ = 39; break; //@line 521 "cPickle.c"
      case 37: // $bb38
        var $220=$self_addr; //@line 521 "cPickle.c"
        var $221=$220+16; //@line 521 "cPickle.c"
        var $222=HEAP[$221]; //@line 521 "cPickle.c"
        var $223=$222; //@line 521 "cPickle.c"
        var $224=$223+16; //@line 521 "cPickle.c"
        var $225=HEAP[$224]; //@line 521 "cPickle.c"
        var $226=$self_addr; //@line 521 "cPickle.c"
        var $227=$226+16; //@line 521 "cPickle.c"
        var $228=HEAP[$227]; //@line 521 "cPickle.c"
        var $229=$228; //@line 521 "cPickle.c"
        var $230=$229+8; //@line 521 "cPickle.c"
        var $231=HEAP[$230]; //@line 521 "cPickle.c"
        var $232=$225+4*$231; //@line 521 "cPickle.c"
        var $233=$py_str; //@line 521 "cPickle.c"
        HEAP[$232]=$233; //@line 521 "cPickle.c"
        var $234=($231) + 1; //@line 521 "cPickle.c"
        var $235=$229+8; //@line 521 "cPickle.c"
        HEAP[$235]=$234; //@line 521 "cPickle.c"
        __label__ = 38; break; //@line 521 "cPickle.c"
      case 38: // $bb39
        var $236=$self_addr; //@line 523 "cPickle.c"
        var $237=$236+56; //@line 523 "cPickle.c"
        HEAP[$237]=0; //@line 523 "cPickle.c"
        var $238=$n; //@line 524 "cPickle.c"
        $0=$238; //@line 524 "cPickle.c"
        __label__ = 39; break; //@line 524 "cPickle.c"
      case 39: // $bb40
        var $239=$0; //@line 486 "cPickle.c"
        $retval=$239; //@line 486 "cPickle.c"
        var $retval41=$retval; //@line 486 "cPickle.c"
        ;
        return $retval41; //@line 486 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_file($self, $s, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $nbytesread;
        var $size;
        var $newbuf;
        $self_addr=$self;
        $s_addr=$s;
        $n_addr=$n;
        var $1=$self_addr; //@line 533 "cPickle.c"
        var $2=$1+68; //@line 533 "cPickle.c"
        var $3=HEAP[$2]; //@line 533 "cPickle.c"
        var $4=($3)==0; //@line 533 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 533 "cPickle.c"
      case 1: // $bb
        var $5=$n_addr; //@line 536 "cPickle.c"
        var $6=($5) >= 32; //@line 536 "cPickle.c"
        var $max=($6) ? ($5) : 32; //@line 536 "cPickle.c"
        $size=$max; //@line 536 "cPickle.c"
        var $7=$size; //@line 537 "cPickle.c"
        var $8=_malloc($7); //@line 537 "cPickle.c"
        var $9=$self_addr; //@line 537 "cPickle.c"
        var $10=$9+72; //@line 537 "cPickle.c"
        HEAP[$10]=$8; //@line 537 "cPickle.c"
        var $11=$self_addr; //@line 537 "cPickle.c"
        var $12=$11+72; //@line 537 "cPickle.c"
        var $13=HEAP[$12]; //@line 537 "cPickle.c"
        var $14=($13)==0; //@line 537 "cPickle.c"
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 537 "cPickle.c"
      case 2: // $bb1
        var $15=_PyErr_NoMemory(); //@line 538 "cPickle.c"
        $0=-1; //@line 539 "cPickle.c"
        __label__ = 13; break; //@line 539 "cPickle.c"
      case 3: // $bb2
        var $16=$self_addr; //@line 542 "cPickle.c"
        var $17=$16+68; //@line 542 "cPickle.c"
        var $18=$size; //@line 542 "cPickle.c"
        HEAP[$17]=$18; //@line 542 "cPickle.c"
        __label__ = 8; break; //@line 542 "cPickle.c"
      case 4: // $bb3
        var $19=$self_addr; //@line 544 "cPickle.c"
        var $20=$19+68; //@line 544 "cPickle.c"
        var $21=HEAP[$20]; //@line 544 "cPickle.c"
        var $22=$n_addr; //@line 544 "cPickle.c"
        var $23=($21) < ($22); //@line 544 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 544 "cPickle.c"
      case 5: // $bb4
        var $24=$n_addr; //@line 545 "cPickle.c"
        var $25=$self_addr; //@line 545 "cPickle.c"
        var $26=$25+72; //@line 545 "cPickle.c"
        var $27=HEAP[$26]; //@line 545 "cPickle.c"
        var $28=_realloc($27, $24); //@line 545 "cPickle.c"
        $newbuf=$28; //@line 545 "cPickle.c"
        var $29=$newbuf; //@line 546 "cPickle.c"
        var $30=($29)==0; //@line 546 "cPickle.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 546 "cPickle.c"
      case 6: // $bb5
        var $31=_PyErr_NoMemory(); //@line 547 "cPickle.c"
        $0=-1; //@line 548 "cPickle.c"
        __label__ = 13; break; //@line 548 "cPickle.c"
      case 7: // $bb6
        var $32=$self_addr; //@line 550 "cPickle.c"
        var $33=$32+72; //@line 550 "cPickle.c"
        var $34=$newbuf; //@line 550 "cPickle.c"
        HEAP[$33]=$34; //@line 550 "cPickle.c"
        var $35=$self_addr; //@line 551 "cPickle.c"
        var $36=$35+68; //@line 551 "cPickle.c"
        var $37=$n_addr; //@line 551 "cPickle.c"
        HEAP[$36]=$37; //@line 551 "cPickle.c"
        __label__ = 8; break; //@line 551 "cPickle.c"
      case 8: // $bb7
        var $38=$self_addr; //@line 554 "cPickle.c"
        var $39=$38+12; //@line 554 "cPickle.c"
        var $40=HEAP[$39]; //@line 554 "cPickle.c"
        var $41=$40; //@line 554 "cPickle.c"
        _PyFile_IncUseCount($41); //@line 554 "cPickle.c"
        var $42=$self_addr; //@line 556 "cPickle.c"
        var $43=$42+8; //@line 556 "cPickle.c"
        var $44=HEAP[$43]; //@line 556 "cPickle.c"
        var $45=$n_addr; //@line 556 "cPickle.c"
        var $46=$self_addr; //@line 556 "cPickle.c"
        var $47=$46+72; //@line 556 "cPickle.c"
        var $48=HEAP[$47]; //@line 556 "cPickle.c"
        var $49=_fread($48, 1, $45, $44); //@line 556 "cPickle.c"
        $nbytesread=$49; //@line 556 "cPickle.c"
        var $50=$self_addr; //@line 558 "cPickle.c"
        var $51=$50+12; //@line 558 "cPickle.c"
        var $52=HEAP[$51]; //@line 558 "cPickle.c"
        var $53=$52; //@line 558 "cPickle.c"
        _PyFile_DecUseCount($53); //@line 558 "cPickle.c"
        var $54=$n_addr; //@line 559 "cPickle.c"
        var $55=$nbytesread; //@line 559 "cPickle.c"
        var $56=($54)!=($55); //@line 559 "cPickle.c"
        var $57=$self_addr; //@line 560 "cPickle.c"
        if ($56) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 559 "cPickle.c"
      case 9: // $bb8
        var $58=$57+8; //@line 560 "cPickle.c"
        var $59=HEAP[$58]; //@line 560 "cPickle.c"
        var $60=_feof($59); //@line 560 "cPickle.c"
        var $61=($60)!=0; //@line 560 "cPickle.c"
        if ($61) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 560 "cPickle.c"
      case 10: // $bb9
        var $62=HEAP[_PyExc_EOFError]; //@line 561 "cPickle.c"
        _PyErr_SetNone($62); //@line 561 "cPickle.c"
        $0=-1; //@line 562 "cPickle.c"
        __label__ = 13; break; //@line 562 "cPickle.c"
      case 11: // $bb10
        var $63=HEAP[_PyExc_IOError]; //@line 565 "cPickle.c"
        var $64=_PyErr_SetFromErrno($63); //@line 565 "cPickle.c"
        $0=-1; //@line 566 "cPickle.c"
        __label__ = 13; break; //@line 566 "cPickle.c"
      case 12: // $bb11
        var $65=$57+72; //@line 569 "cPickle.c"
        var $66=HEAP[$65]; //@line 569 "cPickle.c"
        var $67=$s_addr; //@line 569 "cPickle.c"
        HEAP[$67]=$66; //@line 569 "cPickle.c"
        var $68=$n_addr; //@line 571 "cPickle.c"
        $0=$68; //@line 571 "cPickle.c"
        __label__ = 13; break; //@line 571 "cPickle.c"
      case 13: // $bb12
        var $69=$0; //@line 539 "cPickle.c"
        $retval=$69; //@line 539 "cPickle.c"
        var $retval13=$retval; //@line 539 "cPickle.c"
        ;
        return $retval13; //@line 539 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _readline_file($self, $s) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $retval;
        var $0;
        var $i;
        var $bigger;
        var $newbuf;
        $self_addr=$self;
        $s_addr=$s;
        var $1=$self_addr; //@line 580 "cPickle.c"
        var $2=$1+68; //@line 580 "cPickle.c"
        var $3=HEAP[$2]; //@line 580 "cPickle.c"
        var $4=($3)==0; //@line 580 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 580 "cPickle.c"
      case 1: // $bb
        var $5=_malloc(40); //@line 581 "cPickle.c"
        var $6=$self_addr; //@line 581 "cPickle.c"
        var $7=$6+72; //@line 581 "cPickle.c"
        HEAP[$7]=$5; //@line 581 "cPickle.c"
        var $8=$self_addr; //@line 581 "cPickle.c"
        var $9=$8+72; //@line 581 "cPickle.c"
        var $10=HEAP[$9]; //@line 581 "cPickle.c"
        var $11=($10)==0; //@line 581 "cPickle.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 581 "cPickle.c"
      case 2: // $bb1
        var $12=_PyErr_NoMemory(); //@line 582 "cPickle.c"
        $0=-1; //@line 583 "cPickle.c"
        __label__ = 15; break; //@line 583 "cPickle.c"
      case 3: // $bb2
        var $13=$self_addr; //@line 585 "cPickle.c"
        var $14=$13+68; //@line 585 "cPickle.c"
        HEAP[$14]=40; //@line 585 "cPickle.c"
        __label__ = 4; break; //@line 585 "cPickle.c"
      case 4: // $bb3
        $i=0; //@line 588 "cPickle.c"
        __label__ = 9; break; //@line 588 "cPickle.c"
      case 5: // $bb5
        var $15=$53+8; //@line 593 "cPickle.c"
        var $16=HEAP[$15]; //@line 593 "cPickle.c"
        var $17=_feof($16); //@line 593 "cPickle.c"
        var $18=($17)!=0; //@line 593 "cPickle.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 593 "cPickle.c"
      case 6: // $bb6
        var $19=$self_addr; //@line 593 "cPickle.c"
        var $20=$19+72; //@line 593 "cPickle.c"
        var $21=HEAP[$20]; //@line 593 "cPickle.c"
        var $22=$self_addr; //@line 593 "cPickle.c"
        var $23=$22+8; //@line 593 "cPickle.c"
        var $24=HEAP[$23]; //@line 593 "cPickle.c"
        var $25=__IO_getc($24); //@line 593 "cPickle.c"
        var $26=((($25)) & 255); //@line 593 "cPickle.c"
        var $27=$i; //@line 593 "cPickle.c"
        var $28=$21+$27; //@line 593 "cPickle.c"
        HEAP[$28]=$26; //@line 593 "cPickle.c"
        var $29=$i; //@line 593 "cPickle.c"
        var $30=$21+$29; //@line 593 "cPickle.c"
        var $31=HEAP[$30]; //@line 593 "cPickle.c"
        var $32=($31)==10; //@line 593 "cPickle.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 593 "cPickle.c"
      case 7: // $bb7
        var $33=$self_addr; //@line 595 "cPickle.c"
        var $34=$33+72; //@line 595 "cPickle.c"
        var $35=HEAP[$34]; //@line 595 "cPickle.c"
        var $36=$i; //@line 595 "cPickle.c"
        var $37=($36) + 1; //@line 595 "cPickle.c"
        var $38=$35+$37; //@line 595 "cPickle.c"
        HEAP[$38]=0; //@line 595 "cPickle.c"
        var $39=$self_addr; //@line 596 "cPickle.c"
        var $40=$39+72; //@line 596 "cPickle.c"
        var $41=HEAP[$40]; //@line 596 "cPickle.c"
        var $42=$s_addr; //@line 596 "cPickle.c"
        HEAP[$42]=$41; //@line 596 "cPickle.c"
        var $43=$i; //@line 597 "cPickle.c"
        var $44=($43) + 1; //@line 597 "cPickle.c"
        $0=$44; //@line 597 "cPickle.c"
        __label__ = 15; break; //@line 597 "cPickle.c"
      case 8: // $bb8
        var $45=$i; //@line 592 "cPickle.c"
        var $46=($45) + 1; //@line 592 "cPickle.c"
        $i=$46; //@line 592 "cPickle.c"
        __label__ = 9; break; //@line 592 "cPickle.c"
      case 9: // $bb9
        var $47=$self_addr; //@line 592 "cPickle.c"
        var $48=$47+68; //@line 592 "cPickle.c"
        var $49=HEAP[$48]; //@line 592 "cPickle.c"
        var $50=($49) - 1; //@line 592 "cPickle.c"
        var $51=$i; //@line 592 "cPickle.c"
        var $52=($50) > ($51); //@line 592 "cPickle.c"
        var $53=$self_addr; //@line 593 "cPickle.c"
        if ($52) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 592 "cPickle.c"
      case 10: // $bb10
        var $54=$53+68; //@line 600 "cPickle.c"
        var $55=HEAP[$54]; //@line 600 "cPickle.c"
        var $56=($55) << 1; //@line 600 "cPickle.c"
        $bigger=$56; //@line 600 "cPickle.c"
        var $57=$bigger; //@line 601 "cPickle.c"
        var $58=($57) <= 0; //@line 601 "cPickle.c"
        if ($58) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 601 "cPickle.c"
      case 11: // $bb11
        var $59=_PyErr_NoMemory(); //@line 602 "cPickle.c"
        $0=-1; //@line 603 "cPickle.c"
        __label__ = 15; break; //@line 603 "cPickle.c"
      case 12: // $bb12
        var $60=$bigger; //@line 605 "cPickle.c"
        var $61=$self_addr; //@line 605 "cPickle.c"
        var $62=$61+72; //@line 605 "cPickle.c"
        var $63=HEAP[$62]; //@line 605 "cPickle.c"
        var $64=_realloc($63, $60); //@line 605 "cPickle.c"
        $newbuf=$64; //@line 605 "cPickle.c"
        var $65=$newbuf; //@line 606 "cPickle.c"
        var $66=($65)==0; //@line 606 "cPickle.c"
        if ($66) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 606 "cPickle.c"
      case 13: // $bb13
        var $67=_PyErr_NoMemory(); //@line 607 "cPickle.c"
        $0=-1; //@line 608 "cPickle.c"
        __label__ = 15; break; //@line 608 "cPickle.c"
      case 14: // $bb14
        var $68=$self_addr; //@line 610 "cPickle.c"
        var $69=$68+72; //@line 610 "cPickle.c"
        var $70=$newbuf; //@line 610 "cPickle.c"
        HEAP[$69]=$70; //@line 610 "cPickle.c"
        var $71=$self_addr; //@line 611 "cPickle.c"
        var $72=$71+68; //@line 611 "cPickle.c"
        var $73=$bigger; //@line 611 "cPickle.c"
        HEAP[$72]=$73; //@line 611 "cPickle.c"
        __label__ = 9; break; //@line 611 "cPickle.c"
      case 15: // $bb15
        var $74=$0; //@line 583 "cPickle.c"
        $retval=$74; //@line 583 "cPickle.c"
        var $retval16=$retval; //@line 583 "cPickle.c"
        ;
        return $retval16; //@line 583 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_cStringIO($self, $s, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $ptr=__stackBase__;
        $self_addr=$self;
        $s_addr=$s;
        $n_addr=$n;
        var $1=HEAP[_PycStringIO]; //@line 621 "cPickle.c"
        var $2=$1; //@line 621 "cPickle.c"
        var $3=HEAP[$2]; //@line 621 "cPickle.c"
        var $4=$self_addr; //@line 621 "cPickle.c"
        var $5=$4+12; //@line 621 "cPickle.c"
        var $6=HEAP[$5]; //@line 621 "cPickle.c"
        var $7=$n_addr; //@line 621 "cPickle.c"
        var $8=FUNCTION_TABLE[$3]($6, $ptr, $7); //@line 621 "cPickle.c"
        var $9=$n_addr; //@line 621 "cPickle.c"
        var $10=($8)!=($9); //@line 621 "cPickle.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 621 "cPickle.c"
      case 1: // $bb
        var $11=HEAP[_PyExc_EOFError]; //@line 622 "cPickle.c"
        _PyErr_SetNone($11); //@line 622 "cPickle.c"
        $0=-1; //@line 623 "cPickle.c"
        __label__ = 3; break; //@line 623 "cPickle.c"
      case 2: // $bb1
        var $12=HEAP[$ptr]; //@line 626 "cPickle.c"
        var $13=$s_addr; //@line 626 "cPickle.c"
        HEAP[$13]=$12; //@line 626 "cPickle.c"
        var $14=$n_addr; //@line 628 "cPickle.c"
        $0=$14; //@line 628 "cPickle.c"
        __label__ = 3; break; //@line 628 "cPickle.c"
      case 3: // $bb2
        var $15=$0; //@line 623 "cPickle.c"
        $retval=$15; //@line 623 "cPickle.c"
        var $retval3=$retval; //@line 623 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 623 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _readline_cStringIO($self, $s) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $retval;
        var $0;
        var $n;
        var $ptr=__stackBase__;
        $self_addr=$self;
        $s_addr=$s;
        var $1=HEAP[_PycStringIO]; //@line 638 "cPickle.c"
        var $2=$1+4; //@line 638 "cPickle.c"
        var $3=HEAP[$2]; //@line 638 "cPickle.c"
        var $4=$self_addr; //@line 638 "cPickle.c"
        var $5=$4+12; //@line 638 "cPickle.c"
        var $6=HEAP[$5]; //@line 638 "cPickle.c"
        var $7=FUNCTION_TABLE[$3]($6, $ptr); //@line 638 "cPickle.c"
        $n=$7; //@line 638 "cPickle.c"
        var $8=$n; //@line 638 "cPickle.c"
        var $9=($8) < 0; //@line 638 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 638 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 639 "cPickle.c"
        __label__ = 3; break; //@line 639 "cPickle.c"
      case 2: // $bb1
        var $10=HEAP[$ptr]; //@line 642 "cPickle.c"
        var $11=$s_addr; //@line 642 "cPickle.c"
        HEAP[$11]=$10; //@line 642 "cPickle.c"
        var $12=$n; //@line 644 "cPickle.c"
        $0=$12; //@line 644 "cPickle.c"
        __label__ = 3; break; //@line 644 "cPickle.c"
      case 3: // $bb2
        var $13=$0; //@line 639 "cPickle.c"
        $retval=$13; //@line 639 "cPickle.c"
        var $retval3=$retval; //@line 639 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 639 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_other($self, $s, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $bytes;
        var $str;
        $self_addr=$self;
        $s_addr=$s;
        $n_addr=$n;
        $str=0; //@line 651 "cPickle.c"
        var $1=$n_addr; //@line 653 "cPickle.c"
        var $2=_PyInt_FromSsize_t($1); //@line 653 "cPickle.c"
        $bytes=$2; //@line 653 "cPickle.c"
        var $3=$bytes; //@line 653 "cPickle.c"
        var $4=($3)==0; //@line 653 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 653 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 653 "cPickle.c"
        __label__ = 25; break; //@line 653 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 655 "cPickle.c"
        var $6=$5+28; //@line 655 "cPickle.c"
        var $7=HEAP[$6]; //@line 655 "cPickle.c"
        var $8=($7)!=0; //@line 655 "cPickle.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 655 "cPickle.c"
      case 3: // $bb2
        var $9=_PyTuple_New(1); //@line 655 "cPickle.c"
        var $10=$self_addr; //@line 655 "cPickle.c"
        var $11=$10+28; //@line 655 "cPickle.c"
        HEAP[$11]=$9; //@line 655 "cPickle.c"
        var $12=$self_addr; //@line 655 "cPickle.c"
        var $13=$12+28; //@line 655 "cPickle.c"
        var $14=HEAP[$13]; //@line 655 "cPickle.c"
        var $15=($14)!=0; //@line 655 "cPickle.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 655 "cPickle.c"
      case 4: // $bb3
        var $16=$self_addr; //@line 655 "cPickle.c"
        var $17=$16+28; //@line 655 "cPickle.c"
        var $18=HEAP[$17]; //@line 655 "cPickle.c"
        var $19=$18; //@line 655 "cPickle.c"
        var $20=$19+12; //@line 655 "cPickle.c"
        var $21=$20; //@line 655 "cPickle.c"
        var $22=HEAP[$21]; //@line 655 "cPickle.c"
        var $23=($22)!=0; //@line 655 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 655 "cPickle.c"
      case 5: // $bb4
        var $24=$self_addr; //@line 655 "cPickle.c"
        var $25=$24+28; //@line 655 "cPickle.c"
        var $26=HEAP[$25]; //@line 655 "cPickle.c"
        var $27=$26; //@line 655 "cPickle.c"
        var $28=$27+12; //@line 655 "cPickle.c"
        var $29=$28; //@line 655 "cPickle.c"
        var $30=HEAP[$29]; //@line 655 "cPickle.c"
        var $31=$30; //@line 655 "cPickle.c"
        var $32=HEAP[$31]; //@line 655 "cPickle.c"
        var $33=($32) - 1; //@line 655 "cPickle.c"
        var $34=$30; //@line 655 "cPickle.c"
        HEAP[$34]=$33; //@line 655 "cPickle.c"
        var $35=$30; //@line 655 "cPickle.c"
        var $36=HEAP[$35]; //@line 655 "cPickle.c"
        var $37=($36)==0; //@line 655 "cPickle.c"
        if ($37) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 655 "cPickle.c"
      case 6: // $bb5
        var $38=$self_addr; //@line 655 "cPickle.c"
        var $39=$38+28; //@line 655 "cPickle.c"
        var $40=HEAP[$39]; //@line 655 "cPickle.c"
        var $41=$40; //@line 655 "cPickle.c"
        var $42=$41+12; //@line 655 "cPickle.c"
        var $43=$42; //@line 655 "cPickle.c"
        var $44=HEAP[$43]; //@line 655 "cPickle.c"
        var $45=$44+4; //@line 655 "cPickle.c"
        var $46=HEAP[$45]; //@line 655 "cPickle.c"
        var $47=$46+24; //@line 655 "cPickle.c"
        var $48=HEAP[$47]; //@line 655 "cPickle.c"
        var $49=$self_addr; //@line 655 "cPickle.c"
        var $50=$49+28; //@line 655 "cPickle.c"
        var $51=HEAP[$50]; //@line 655 "cPickle.c"
        var $52=$51; //@line 655 "cPickle.c"
        var $53=$52+12; //@line 655 "cPickle.c"
        var $54=$53; //@line 655 "cPickle.c"
        var $55=HEAP[$54]; //@line 655 "cPickle.c"
        FUNCTION_TABLE[$48]($55); //@line 655 "cPickle.c"
        __label__ = 7; break; //@line 655 "cPickle.c"
      case 7: // $bb6
        var $56=$self_addr; //@line 655 "cPickle.c"
        var $57=$56+28; //@line 655 "cPickle.c"
        var $58=HEAP[$57]; //@line 655 "cPickle.c"
        var $59=$58; //@line 655 "cPickle.c"
        var $60=$59+12; //@line 655 "cPickle.c"
        var $61=$60; //@line 655 "cPickle.c"
        var $62=$bytes; //@line 655 "cPickle.c"
        HEAP[$61]=$62; //@line 655 "cPickle.c"
        __label__ = 10; break; //@line 655 "cPickle.c"
      case 8: // $bb7
        var $63=$bytes; //@line 655 "cPickle.c"
        var $64=$63; //@line 655 "cPickle.c"
        var $65=HEAP[$64]; //@line 655 "cPickle.c"
        var $66=($65) - 1; //@line 655 "cPickle.c"
        var $67=$bytes; //@line 655 "cPickle.c"
        var $68=$67; //@line 655 "cPickle.c"
        HEAP[$68]=$66; //@line 655 "cPickle.c"
        var $69=$bytes; //@line 655 "cPickle.c"
        var $70=$69; //@line 655 "cPickle.c"
        var $71=HEAP[$70]; //@line 655 "cPickle.c"
        var $72=($71)==0; //@line 655 "cPickle.c"
        if ($72) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 655 "cPickle.c"
      case 9: // $bb8
        var $73=$bytes; //@line 655 "cPickle.c"
        var $74=$73+4; //@line 655 "cPickle.c"
        var $75=HEAP[$74]; //@line 655 "cPickle.c"
        var $76=$75+24; //@line 655 "cPickle.c"
        var $77=HEAP[$76]; //@line 655 "cPickle.c"
        var $78=$bytes; //@line 655 "cPickle.c"
        FUNCTION_TABLE[$77]($78); //@line 655 "cPickle.c"
        __label__ = 10; break; //@line 655 "cPickle.c"
      case 10: // $bb9
        var $79=$self_addr; //@line 656 "cPickle.c"
        var $80=$79+28; //@line 656 "cPickle.c"
        var $81=HEAP[$80]; //@line 656 "cPickle.c"
        var $82=($81)!=0; //@line 656 "cPickle.c"
        if ($82) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 656 "cPickle.c"
      case 11: // $bb10
        var $83=$self_addr; //@line 657 "cPickle.c"
        var $84=$83+28; //@line 657 "cPickle.c"
        var $85=HEAP[$84]; //@line 657 "cPickle.c"
        var $86=$self_addr; //@line 657 "cPickle.c"
        var $87=$86+20; //@line 657 "cPickle.c"
        var $88=HEAP[$87]; //@line 657 "cPickle.c"
        var $89=_PyObject_Call($88, $85, 0); //@line 657 "cPickle.c"
        $str=$89; //@line 657 "cPickle.c"
        var $90=$self_addr; //@line 658 "cPickle.c"
        var $91=$90+28; //@line 658 "cPickle.c"
        var $92=HEAP[$91]; //@line 658 "cPickle.c"
        var $93=$92; //@line 658 "cPickle.c"
        var $94=HEAP[$93]; //@line 658 "cPickle.c"
        var $95=($94) > 1; //@line 658 "cPickle.c"
        if ($95) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 658 "cPickle.c"
      case 12: // $bb11
        var $96=$self_addr; //@line 658 "cPickle.c"
        var $97=$96+28; //@line 658 "cPickle.c"
        var $98=HEAP[$97]; //@line 658 "cPickle.c"
        var $99=$98; //@line 658 "cPickle.c"
        var $100=HEAP[$99]; //@line 658 "cPickle.c"
        var $101=($100) - 1; //@line 658 "cPickle.c"
        var $102=$98; //@line 658 "cPickle.c"
        HEAP[$102]=$101; //@line 658 "cPickle.c"
        var $103=$98; //@line 658 "cPickle.c"
        var $104=HEAP[$103]; //@line 658 "cPickle.c"
        var $105=($104)==0; //@line 658 "cPickle.c"
        if ($105) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 658 "cPickle.c"
      case 13: // $bb12
        var $106=$self_addr; //@line 658 "cPickle.c"
        var $107=$106+28; //@line 658 "cPickle.c"
        var $108=HEAP[$107]; //@line 658 "cPickle.c"
        var $109=$108+4; //@line 658 "cPickle.c"
        var $110=HEAP[$109]; //@line 658 "cPickle.c"
        var $111=$110+24; //@line 658 "cPickle.c"
        var $112=HEAP[$111]; //@line 658 "cPickle.c"
        var $113=$self_addr; //@line 658 "cPickle.c"
        var $114=$113+28; //@line 658 "cPickle.c"
        var $115=HEAP[$114]; //@line 658 "cPickle.c"
        FUNCTION_TABLE[$112]($115); //@line 658 "cPickle.c"
        __label__ = 14; break; //@line 658 "cPickle.c"
      case 14: // $bb13
        var $116=$self_addr; //@line 658 "cPickle.c"
        var $117=$116+28; //@line 658 "cPickle.c"
        HEAP[$117]=0; //@line 658 "cPickle.c"
        __label__ = 15; break; //@line 658 "cPickle.c"
      case 15: // $bb14
        var $118=$str; //@line 660 "cPickle.c"
        var $119=($118)==0; //@line 660 "cPickle.c"
        if ($119) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 660 "cPickle.c"
      case 16: // $bb15
        $0=-1; //@line 660 "cPickle.c"
        __label__ = 25; break; //@line 660 "cPickle.c"
      case 17: // $bb16
        var $120=$self_addr; //@line 662 "cPickle.c"
        var $121=$120+44; //@line 662 "cPickle.c"
        var $122=HEAP[$121]; //@line 662 "cPickle.c"
        var $123=($122)!=0; //@line 662 "cPickle.c"
        if ($123) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 662 "cPickle.c"
      case 18: // $bb17
        var $124=$self_addr; //@line 662 "cPickle.c"
        var $125=$124+44; //@line 662 "cPickle.c"
        var $126=HEAP[$125]; //@line 662 "cPickle.c"
        var $127=$126; //@line 662 "cPickle.c"
        var $128=HEAP[$127]; //@line 662 "cPickle.c"
        var $129=($128) - 1; //@line 662 "cPickle.c"
        var $130=$126; //@line 662 "cPickle.c"
        HEAP[$130]=$129; //@line 662 "cPickle.c"
        var $131=$126; //@line 662 "cPickle.c"
        var $132=HEAP[$131]; //@line 662 "cPickle.c"
        var $133=($132)==0; //@line 662 "cPickle.c"
        if ($133) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 662 "cPickle.c"
      case 19: // $bb18
        var $134=$self_addr; //@line 662 "cPickle.c"
        var $135=$134+44; //@line 662 "cPickle.c"
        var $136=HEAP[$135]; //@line 662 "cPickle.c"
        var $137=$136+4; //@line 662 "cPickle.c"
        var $138=HEAP[$137]; //@line 662 "cPickle.c"
        var $139=$138+24; //@line 662 "cPickle.c"
        var $140=HEAP[$139]; //@line 662 "cPickle.c"
        var $141=$self_addr; //@line 662 "cPickle.c"
        var $142=$141+44; //@line 662 "cPickle.c"
        var $143=HEAP[$142]; //@line 662 "cPickle.c"
        FUNCTION_TABLE[$140]($143); //@line 662 "cPickle.c"
        __label__ = 20; break; //@line 662 "cPickle.c"
      case 20: // $bb19
        var $144=$self_addr; //@line 663 "cPickle.c"
        var $145=$144+44; //@line 663 "cPickle.c"
        var $146=$str; //@line 663 "cPickle.c"
        HEAP[$145]=$146; //@line 663 "cPickle.c"
        var $147=$str; //@line 665 "cPickle.c"
        var $148=_PyString_AsString($147); //@line 665 "cPickle.c"
        var $149=$s_addr; //@line 665 "cPickle.c"
        HEAP[$149]=$148; //@line 665 "cPickle.c"
        var $150=$s_addr; //@line 665 "cPickle.c"
        var $151=HEAP[$150]; //@line 665 "cPickle.c"
        var $152=($151)==0; //@line 665 "cPickle.c"
        if ($152) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 665 "cPickle.c"
      case 21: // $bb20
        $0=-1; //@line 665 "cPickle.c"
        __label__ = 25; break; //@line 665 "cPickle.c"
      case 22: // $bb21
        var $153=$str; //@line 667 "cPickle.c"
        var $154=$153; //@line 667 "cPickle.c"
        var $155=$154+8; //@line 667 "cPickle.c"
        var $156=HEAP[$155]; //@line 667 "cPickle.c"
        var $157=$n_addr; //@line 667 "cPickle.c"
        var $158=($156)!=($157); //@line 667 "cPickle.c"
        if ($158) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 667 "cPickle.c"
      case 23: // $bb22
        var $159=HEAP[_PyExc_EOFError]; //@line 668 "cPickle.c"
        _PyErr_SetNone($159); //@line 668 "cPickle.c"
        $0=-1; //@line 669 "cPickle.c"
        __label__ = 25; break; //@line 669 "cPickle.c"
      case 24: // $bb23
        var $160=$n_addr; //@line 672 "cPickle.c"
        $0=$160; //@line 672 "cPickle.c"
        __label__ = 25; break; //@line 672 "cPickle.c"
      case 25: // $bb24
        var $161=$0; //@line 653 "cPickle.c"
        $retval=$161; //@line 653 "cPickle.c"
        var $retval25=$retval; //@line 653 "cPickle.c"
        ;
        return $retval25; //@line 653 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _readline_other($self, $s) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $s_addr;
        var $retval;
        var $0;
        var $str;
        var $str_size;
        $self_addr=$self;
        $s_addr=$s;
        var $1=HEAP[_empty_tuple]; //@line 682 "cPickle.c"
        var $2=$self_addr; //@line 682 "cPickle.c"
        var $3=$2+16; //@line 682 "cPickle.c"
        var $4=HEAP[$3]; //@line 682 "cPickle.c"
        var $5=_PyObject_CallObject($4, $1); //@line 682 "cPickle.c"
        $str=$5; //@line 682 "cPickle.c"
        var $6=$str; //@line 682 "cPickle.c"
        var $7=($6)==0; //@line 682 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 682 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 683 "cPickle.c"
        __label__ = 10; break; //@line 683 "cPickle.c"
      case 2: // $bb1
        var $8=$str; //@line 686 "cPickle.c"
        var $9=_PyString_Size($8); //@line 686 "cPickle.c"
        $str_size=$9; //@line 686 "cPickle.c"
        var $10=$str_size; //@line 686 "cPickle.c"
        var $11=($10) < 0; //@line 686 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 686 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 687 "cPickle.c"
        __label__ = 10; break; //@line 687 "cPickle.c"
      case 4: // $bb3
        var $12=$self_addr; //@line 689 "cPickle.c"
        var $13=$12+44; //@line 689 "cPickle.c"
        var $14=HEAP[$13]; //@line 689 "cPickle.c"
        var $15=($14)!=0; //@line 689 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 689 "cPickle.c"
      case 5: // $bb4
        var $16=$self_addr; //@line 689 "cPickle.c"
        var $17=$16+44; //@line 689 "cPickle.c"
        var $18=HEAP[$17]; //@line 689 "cPickle.c"
        var $19=$18; //@line 689 "cPickle.c"
        var $20=HEAP[$19]; //@line 689 "cPickle.c"
        var $21=($20) - 1; //@line 689 "cPickle.c"
        var $22=$18; //@line 689 "cPickle.c"
        HEAP[$22]=$21; //@line 689 "cPickle.c"
        var $23=$18; //@line 689 "cPickle.c"
        var $24=HEAP[$23]; //@line 689 "cPickle.c"
        var $25=($24)==0; //@line 689 "cPickle.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 689 "cPickle.c"
      case 6: // $bb5
        var $26=$self_addr; //@line 689 "cPickle.c"
        var $27=$26+44; //@line 689 "cPickle.c"
        var $28=HEAP[$27]; //@line 689 "cPickle.c"
        var $29=$28+4; //@line 689 "cPickle.c"
        var $30=HEAP[$29]; //@line 689 "cPickle.c"
        var $31=$30+24; //@line 689 "cPickle.c"
        var $32=HEAP[$31]; //@line 689 "cPickle.c"
        var $33=$self_addr; //@line 689 "cPickle.c"
        var $34=$33+44; //@line 689 "cPickle.c"
        var $35=HEAP[$34]; //@line 689 "cPickle.c"
        FUNCTION_TABLE[$32]($35); //@line 689 "cPickle.c"
        __label__ = 7; break; //@line 689 "cPickle.c"
      case 7: // $bb6
        var $36=$self_addr; //@line 690 "cPickle.c"
        var $37=$36+44; //@line 690 "cPickle.c"
        var $38=$str; //@line 690 "cPickle.c"
        HEAP[$37]=$38; //@line 690 "cPickle.c"
        var $39=$str; //@line 692 "cPickle.c"
        var $40=_PyString_AsString($39); //@line 692 "cPickle.c"
        var $41=$s_addr; //@line 692 "cPickle.c"
        HEAP[$41]=$40; //@line 692 "cPickle.c"
        var $42=$s_addr; //@line 692 "cPickle.c"
        var $43=HEAP[$42]; //@line 692 "cPickle.c"
        var $44=($43)==0; //@line 692 "cPickle.c"
        if ($44) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 692 "cPickle.c"
      case 8: // $bb7
        $0=-1; //@line 693 "cPickle.c"
        __label__ = 10; break; //@line 693 "cPickle.c"
      case 9: // $bb8
        var $45=$str_size; //@line 695 "cPickle.c"
        $0=$45; //@line 695 "cPickle.c"
        __label__ = 10; break; //@line 695 "cPickle.c"
      case 10: // $bb9
        var $46=$0; //@line 683 "cPickle.c"
        $retval=$46; //@line 683 "cPickle.c"
        var $retval10=$retval; //@line 683 "cPickle.c"
        ;
        return $retval10; //@line 683 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get($self, $id) {
    var __stackBase__  = STACKTOP; STACKTOP += 30; _memset(__stackBase__, 0, 30);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $id_addr;
        var $retval;
        var $0;
        var $value;
        var $mv;
        var $c_value;
        var $s=__stackBase__;
        var $len;
        $self_addr=$self;
        $id_addr=$id;
        var $1=$self_addr; //@line 722 "cPickle.c"
        var $2=$1+20; //@line 722 "cPickle.c"
        var $3=HEAP[$2]; //@line 722 "cPickle.c"
        var $4=$id_addr; //@line 722 "cPickle.c"
        var $5=_PyDict_GetItem($3, $4); //@line 722 "cPickle.c"
        $mv=$5; //@line 722 "cPickle.c"
        var $6=$mv; //@line 722 "cPickle.c"
        var $7=($6)==0; //@line 722 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 722 "cPickle.c"
      case 1: // $bb
        var $8=HEAP[_PyExc_KeyError]; //@line 723 "cPickle.c"
        var $9=$id_addr; //@line 723 "cPickle.c"
        _PyErr_SetObject($8, $9); //@line 723 "cPickle.c"
        $0=-1; //@line 724 "cPickle.c"
        __label__ = 21; break; //@line 724 "cPickle.c"
      case 2: // $bb1
        var $10=$mv; //@line 727 "cPickle.c"
        var $11=_PyTuple_GetItem($10, 0); //@line 727 "cPickle.c"
        $value=$11; //@line 727 "cPickle.c"
        var $12=$value; //@line 727 "cPickle.c"
        var $13=($12)==0; //@line 727 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 727 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 728 "cPickle.c"
        __label__ = 21; break; //@line 728 "cPickle.c"
      case 4: // $bb3
        var $14=$value; //@line 730 "cPickle.c"
        var $15=$14+4; //@line 730 "cPickle.c"
        var $16=HEAP[$15]; //@line 730 "cPickle.c"
        var $17=$16+84; //@line 730 "cPickle.c"
        var $18=HEAP[$17]; //@line 730 "cPickle.c"
        var $19=($18) & 8388608; //@line 730 "cPickle.c"
        var $20=($19)==0; //@line 730 "cPickle.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 730 "cPickle.c"
      case 5: // $bb4
        var $21=HEAP[_PicklingError]; //@line 731 "cPickle.c"
        _PyErr_SetString($21, __str3); //@line 731 "cPickle.c"
        $0=-1; //@line 732 "cPickle.c"
        __label__ = 21; break; //@line 732 "cPickle.c"
      case 6: // $bb5
        var $22=$value; //@line 734 "cPickle.c"
        var $23=$22; //@line 734 "cPickle.c"
        var $24=$23+8; //@line 734 "cPickle.c"
        var $25=HEAP[$24]; //@line 734 "cPickle.c"
        $c_value=$25; //@line 734 "cPickle.c"
        var $26=$self_addr; //@line 736 "cPickle.c"
        var $27=$26+40; //@line 736 "cPickle.c"
        var $28=HEAP[$27]; //@line 736 "cPickle.c"
        var $29=($28)==0; //@line 736 "cPickle.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 736 "cPickle.c"
      case 7: // $bb6
        var $30=$s; //@line 737 "cPickle.c"
        HEAP[$30]=103; //@line 737 "cPickle.c"
        var $s7=$s; //@line 738 "cPickle.c"
        var $31=$s7+1; //@line 738 "cPickle.c"
        var $32=$c_value; //@line 738 "cPickle.c"
        var $33=_PyOS_snprintf($31, 29, __str4, $32); //@line 738 "cPickle.c"
        var $s8=$s; //@line 739 "cPickle.c"
        var $34=_strlen($s8); //@line 739 "cPickle.c"
        $len=$34; //@line 739 "cPickle.c"
        __label__ = 18; break; //@line 739 "cPickle.c"
      case 8: // $bb9
        var $35=$self_addr; //@line 741 "cPickle.c"
        var $36=$35+16; //@line 741 "cPickle.c"
        var $37=HEAP[$36]; //@line 741 "cPickle.c"
        var $38=$37+4; //@line 741 "cPickle.c"
        var $39=HEAP[$38]; //@line 741 "cPickle.c"
        var $40=($39)==(_PdataType); //@line 741 "cPickle.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 15; break; } //@line 741 "cPickle.c"
      case 9: // $bb10
        var $41=$self_addr; //@line 742 "cPickle.c"
        var $42=_write_other($41, 0, 0); //@line 742 "cPickle.c"
        var $43=($42) < 0; //@line 742 "cPickle.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 742 "cPickle.c"
      case 10: // $bb11
        $0=-1; //@line 742 "cPickle.c"
        __label__ = 21; break; //@line 742 "cPickle.c"
      case 11: // $bb12
        var $44=$self_addr; //@line 743 "cPickle.c"
        var $45=$44+16; //@line 743 "cPickle.c"
        var $46=HEAP[$45]; //@line 743 "cPickle.c"
        var $47=$46; //@line 743 "cPickle.c"
        var $48=$47+8; //@line 743 "cPickle.c"
        var $49=HEAP[$48]; //@line 743 "cPickle.c"
        var $50=$self_addr; //@line 743 "cPickle.c"
        var $51=$50+16; //@line 743 "cPickle.c"
        var $52=HEAP[$51]; //@line 743 "cPickle.c"
        var $53=$52; //@line 743 "cPickle.c"
        var $54=$53+12; //@line 743 "cPickle.c"
        var $55=HEAP[$54]; //@line 743 "cPickle.c"
        var $56=($49)==($55); //@line 743 "cPickle.c"
        if ($56) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 743 "cPickle.c"
      case 12: // $bb13
        var $57=$self_addr; //@line 743 "cPickle.c"
        var $58=$57+16; //@line 743 "cPickle.c"
        var $59=HEAP[$58]; //@line 743 "cPickle.c"
        var $60=$59; //@line 743 "cPickle.c"
        var $61=_Pdata_grow($60); //@line 743 "cPickle.c"
        var $62=($61) < 0; //@line 743 "cPickle.c"
        if ($62) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 743 "cPickle.c"
      case 13: // $bb14
        $0=-1; //@line 743 "cPickle.c"
        __label__ = 21; break; //@line 743 "cPickle.c"
      case 14: // $bb15
        var $63=$mv; //@line 743 "cPickle.c"
        var $64=$63; //@line 743 "cPickle.c"
        var $65=HEAP[$64]; //@line 743 "cPickle.c"
        var $66=($65) + 1; //@line 743 "cPickle.c"
        var $67=$mv; //@line 743 "cPickle.c"
        var $68=$67; //@line 743 "cPickle.c"
        HEAP[$68]=$66; //@line 743 "cPickle.c"
        var $69=$self_addr; //@line 743 "cPickle.c"
        var $70=$69+16; //@line 743 "cPickle.c"
        var $71=HEAP[$70]; //@line 743 "cPickle.c"
        var $72=$71; //@line 743 "cPickle.c"
        var $73=$72+16; //@line 743 "cPickle.c"
        var $74=HEAP[$73]; //@line 743 "cPickle.c"
        var $75=$self_addr; //@line 743 "cPickle.c"
        var $76=$75+16; //@line 743 "cPickle.c"
        var $77=HEAP[$76]; //@line 743 "cPickle.c"
        var $78=$77; //@line 743 "cPickle.c"
        var $79=$78+8; //@line 743 "cPickle.c"
        var $80=HEAP[$79]; //@line 743 "cPickle.c"
        var $81=$74+4*$80; //@line 743 "cPickle.c"
        var $82=$mv; //@line 743 "cPickle.c"
        HEAP[$81]=$82; //@line 743 "cPickle.c"
        var $83=($80) + 1; //@line 743 "cPickle.c"
        var $84=$78+8; //@line 743 "cPickle.c"
        HEAP[$84]=$83; //@line 743 "cPickle.c"
        $0=0; //@line 744 "cPickle.c"
        __label__ = 21; break; //@line 744 "cPickle.c"
      case 15: // $bb16
        var $85=$c_value; //@line 747 "cPickle.c"
        var $86=($85) <= 255; //@line 747 "cPickle.c"
        var $87=$s; //@line 748 "cPickle.c"
        if ($86) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 747 "cPickle.c"
      case 16: // $bb17
        HEAP[$87]=104; //@line 748 "cPickle.c"
        var $88=$c_value; //@line 749 "cPickle.c"
        var $89=((($88)) & 255); //@line 749 "cPickle.c"
        var $90=$s+1; //@line 749 "cPickle.c"
        HEAP[$90]=$89; //@line 749 "cPickle.c"
        $len=2; //@line 750 "cPickle.c"
        __label__ = 18; break; //@line 750 "cPickle.c"
      case 17: // $bb18
        HEAP[$87]=106; //@line 753 "cPickle.c"
        var $91=$c_value; //@line 754 "cPickle.c"
        var $92=((($91)) & 255); //@line 754 "cPickle.c"
        var $93=$s+1; //@line 754 "cPickle.c"
        HEAP[$93]=$92; //@line 754 "cPickle.c"
        var $94=$c_value; //@line 755 "cPickle.c"
        var $95=($94) >> 8; //@line 755 "cPickle.c"
        var $96=((($95)) & 255); //@line 755 "cPickle.c"
        var $97=$s+2; //@line 755 "cPickle.c"
        HEAP[$97]=$96; //@line 755 "cPickle.c"
        var $98=$c_value; //@line 756 "cPickle.c"
        var $99=($98) >> 16; //@line 756 "cPickle.c"
        var $100=((($99)) & 255); //@line 756 "cPickle.c"
        var $101=$s+3; //@line 756 "cPickle.c"
        HEAP[$101]=$100; //@line 756 "cPickle.c"
        var $102=$c_value; //@line 757 "cPickle.c"
        var $103=($102) >> 24; //@line 757 "cPickle.c"
        var $104=((($103)) & 255); //@line 757 "cPickle.c"
        var $105=$s+4; //@line 757 "cPickle.c"
        HEAP[$105]=$104; //@line 757 "cPickle.c"
        $len=5; //@line 758 "cPickle.c"
        __label__ = 18; break; //@line 758 "cPickle.c"
      case 18: // $bb19
        var $106=$self_addr; //@line 762 "cPickle.c"
        var $107=$106+48; //@line 762 "cPickle.c"
        var $108=HEAP[$107]; //@line 762 "cPickle.c"
        var $109=$len; //@line 762 "cPickle.c"
        var $110=$self_addr; //@line 762 "cPickle.c"
        var $s20=$s; //@line 762 "cPickle.c"
        var $111=FUNCTION_TABLE[$108]($110, $s20, $109); //@line 762 "cPickle.c"
        var $112=($111) < 0; //@line 762 "cPickle.c"
        if ($112) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 762 "cPickle.c"
      case 19: // $bb21
        $0=-1; //@line 763 "cPickle.c"
        __label__ = 21; break; //@line 763 "cPickle.c"
      case 20: // $bb22
        $0=0; //@line 765 "cPickle.c"
        __label__ = 21; break; //@line 765 "cPickle.c"
      case 21: // $bb23
        var $113=$0; //@line 724 "cPickle.c"
        $retval=$113; //@line 724 "cPickle.c"
        var $retval24=$retval; //@line 724 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 724 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _put2($self, $ob) {
    var __stackBase__  = STACKTOP; STACKTOP += 30; _memset(__stackBase__, 0, 30);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $ob_addr;
        var $retval;
        var $0;
        var $c_str=__stackBase__;
        var $p;
        var $len;
        var $res;
        var $py_ob_id;
        var $memo_len;
        var $t;
        $self_addr=$self;
        $ob_addr=$ob;
        $res=-1; //@line 785 "cPickle.c"
        $py_ob_id=0; //@line 786 "cPickle.c"
        $memo_len=0; //@line 786 "cPickle.c"
        $t=0; //@line 786 "cPickle.c"
        var $1=$self_addr; //@line 788 "cPickle.c"
        var $2=$1+44; //@line 788 "cPickle.c"
        var $3=HEAP[$2]; //@line 788 "cPickle.c"
        var $4=($3)!=0; //@line 788 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 788 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 789 "cPickle.c"
        __label__ = 31; break; //@line 789 "cPickle.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 791 "cPickle.c"
        var $6=$5+20; //@line 791 "cPickle.c"
        var $7=HEAP[$6]; //@line 791 "cPickle.c"
        var $8=_PyDict_Size($7); //@line 791 "cPickle.c"
        $p=$8; //@line 791 "cPickle.c"
        var $9=$p; //@line 791 "cPickle.c"
        var $10=($9) < 0; //@line 791 "cPickle.c"
        if ($10) { __label__ = 21; break; } else { __label__ = 3; break; } //@line 791 "cPickle.c"
      case 3: // $bb2
        var $11=$p; //@line 800 "cPickle.c"
        var $12=($11) + 1; //@line 800 "cPickle.c"
        $p=$12; //@line 800 "cPickle.c"
        var $13=$ob_addr; //@line 802 "cPickle.c"
        var $14=$13; //@line 802 "cPickle.c"
        var $15=_PyLong_FromVoidPtr($14); //@line 802 "cPickle.c"
        $py_ob_id=$15; //@line 802 "cPickle.c"
        var $16=$py_ob_id; //@line 802 "cPickle.c"
        var $17=($16)==0; //@line 802 "cPickle.c"
        if ($17) { __label__ = 24; break; } else { __label__ = 4; break; } //@line 802 "cPickle.c"
      case 4: // $bb3
        var $18=$p; //@line 805 "cPickle.c"
        var $19=_PyInt_FromLong($18); //@line 805 "cPickle.c"
        $memo_len=$19; //@line 805 "cPickle.c"
        var $20=$memo_len; //@line 805 "cPickle.c"
        var $21=($20)==0; //@line 805 "cPickle.c"
        if ($21) { __label__ = 21; break; } else { __label__ = 5; break; } //@line 805 "cPickle.c"
      case 5: // $bb4
        var $22=_PyTuple_New(2); //@line 808 "cPickle.c"
        $t=$22; //@line 808 "cPickle.c"
        var $23=$t; //@line 808 "cPickle.c"
        var $24=($23)==0; //@line 808 "cPickle.c"
        if ($24) { __label__ = 21; break; } else { __label__ = 6; break; } //@line 808 "cPickle.c"
      case 6: // $bb5
        var $25=$t; //@line 811 "cPickle.c"
        var $26=$25; //@line 811 "cPickle.c"
        var $27=$26+12; //@line 811 "cPickle.c"
        var $28=$27; //@line 811 "cPickle.c"
        var $29=$memo_len; //@line 811 "cPickle.c"
        HEAP[$28]=$29; //@line 811 "cPickle.c"
        var $30=$memo_len; //@line 812 "cPickle.c"
        var $31=$30; //@line 812 "cPickle.c"
        var $32=HEAP[$31]; //@line 812 "cPickle.c"
        var $33=($32) + 1; //@line 812 "cPickle.c"
        var $34=$memo_len; //@line 812 "cPickle.c"
        var $35=$34; //@line 812 "cPickle.c"
        HEAP[$35]=$33; //@line 812 "cPickle.c"
        var $36=$t; //@line 813 "cPickle.c"
        var $37=$36; //@line 813 "cPickle.c"
        var $38=$37+12; //@line 813 "cPickle.c"
        var $39=$38+4; //@line 813 "cPickle.c"
        var $40=$ob_addr; //@line 813 "cPickle.c"
        HEAP[$39]=$40; //@line 813 "cPickle.c"
        var $41=$ob_addr; //@line 814 "cPickle.c"
        var $42=$41; //@line 814 "cPickle.c"
        var $43=HEAP[$42]; //@line 814 "cPickle.c"
        var $44=($43) + 1; //@line 814 "cPickle.c"
        var $45=$ob_addr; //@line 814 "cPickle.c"
        var $46=$45; //@line 814 "cPickle.c"
        HEAP[$46]=$44; //@line 814 "cPickle.c"
        var $47=$self_addr; //@line 816 "cPickle.c"
        var $48=$47+20; //@line 816 "cPickle.c"
        var $49=HEAP[$48]; //@line 816 "cPickle.c"
        var $50=$py_ob_id; //@line 816 "cPickle.c"
        var $51=$t; //@line 816 "cPickle.c"
        var $52=_PyDict_SetItem($49, $50, $51); //@line 816 "cPickle.c"
        var $53=($52) < 0; //@line 816 "cPickle.c"
        if ($53) { __label__ = 21; break; } else { __label__ = 7; break; } //@line 816 "cPickle.c"
      case 7: // $bb6
        var $54=$self_addr; //@line 819 "cPickle.c"
        var $55=$54+40; //@line 819 "cPickle.c"
        var $56=HEAP[$55]; //@line 819 "cPickle.c"
        var $57=($56)==0; //@line 819 "cPickle.c"
        if ($57) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 819 "cPickle.c"
      case 8: // $bb7
        var $58=$c_str; //@line 820 "cPickle.c"
        HEAP[$58]=112; //@line 820 "cPickle.c"
        var $c_str8=$c_str; //@line 821 "cPickle.c"
        var $59=$c_str8+1; //@line 821 "cPickle.c"
        var $60=$p; //@line 821 "cPickle.c"
        var $61=_PyOS_snprintf($59, 29, __str5, $60); //@line 821 "cPickle.c"
        var $c_str9=$c_str; //@line 822 "cPickle.c"
        var $62=_strlen($c_str9); //@line 822 "cPickle.c"
        $len=$62; //@line 822 "cPickle.c"
        __label__ = 19; break; //@line 822 "cPickle.c"
      case 9: // $bb10
        var $63=$self_addr; //@line 824 "cPickle.c"
        var $64=$63+16; //@line 824 "cPickle.c"
        var $65=HEAP[$64]; //@line 824 "cPickle.c"
        var $66=$65+4; //@line 824 "cPickle.c"
        var $67=HEAP[$66]; //@line 824 "cPickle.c"
        var $68=($67)==(_PdataType); //@line 824 "cPickle.c"
        if ($68) { __label__ = 10; break; } else { __label__ = 16; break; } //@line 824 "cPickle.c"
      case 10: // $bb11
        var $69=$self_addr; //@line 825 "cPickle.c"
        var $70=_write_other($69, 0, 0); //@line 825 "cPickle.c"
        var $71=($70) < 0; //@line 825 "cPickle.c"
        if ($71) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 825 "cPickle.c"
      case 11: // $bb12
        $0=-1; //@line 825 "cPickle.c"
        __label__ = 31; break; //@line 825 "cPickle.c"
      case 12: // $bb13
        var $72=$self_addr; //@line 826 "cPickle.c"
        var $73=$72+16; //@line 826 "cPickle.c"
        var $74=HEAP[$73]; //@line 826 "cPickle.c"
        var $75=$74; //@line 826 "cPickle.c"
        var $76=$75+8; //@line 826 "cPickle.c"
        var $77=HEAP[$76]; //@line 826 "cPickle.c"
        var $78=$self_addr; //@line 826 "cPickle.c"
        var $79=$78+16; //@line 826 "cPickle.c"
        var $80=HEAP[$79]; //@line 826 "cPickle.c"
        var $81=$80; //@line 826 "cPickle.c"
        var $82=$81+12; //@line 826 "cPickle.c"
        var $83=HEAP[$82]; //@line 826 "cPickle.c"
        var $84=($77)==($83); //@line 826 "cPickle.c"
        if ($84) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 826 "cPickle.c"
      case 13: // $bb14
        var $85=$self_addr; //@line 826 "cPickle.c"
        var $86=$85+16; //@line 826 "cPickle.c"
        var $87=HEAP[$86]; //@line 826 "cPickle.c"
        var $88=$87; //@line 826 "cPickle.c"
        var $89=_Pdata_grow($88); //@line 826 "cPickle.c"
        var $90=($89) < 0; //@line 826 "cPickle.c"
        if ($90) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 826 "cPickle.c"
      case 14: // $bb15
        $0=-1; //@line 826 "cPickle.c"
        __label__ = 31; break; //@line 826 "cPickle.c"
      case 15: // $bb16
        var $91=$memo_len; //@line 826 "cPickle.c"
        var $92=$91; //@line 826 "cPickle.c"
        var $93=HEAP[$92]; //@line 826 "cPickle.c"
        var $94=($93) + 1; //@line 826 "cPickle.c"
        var $95=$memo_len; //@line 826 "cPickle.c"
        var $96=$95; //@line 826 "cPickle.c"
        HEAP[$96]=$94; //@line 826 "cPickle.c"
        var $97=$self_addr; //@line 826 "cPickle.c"
        var $98=$97+16; //@line 826 "cPickle.c"
        var $99=HEAP[$98]; //@line 826 "cPickle.c"
        var $100=$99; //@line 826 "cPickle.c"
        var $101=$100+16; //@line 826 "cPickle.c"
        var $102=HEAP[$101]; //@line 826 "cPickle.c"
        var $103=$self_addr; //@line 826 "cPickle.c"
        var $104=$103+16; //@line 826 "cPickle.c"
        var $105=HEAP[$104]; //@line 826 "cPickle.c"
        var $106=$105; //@line 826 "cPickle.c"
        var $107=$106+8; //@line 826 "cPickle.c"
        var $108=HEAP[$107]; //@line 826 "cPickle.c"
        var $109=$102+4*$108; //@line 826 "cPickle.c"
        var $110=$memo_len; //@line 826 "cPickle.c"
        HEAP[$109]=$110; //@line 826 "cPickle.c"
        var $111=($108) + 1; //@line 826 "cPickle.c"
        var $112=$106+8; //@line 826 "cPickle.c"
        HEAP[$112]=$111; //@line 826 "cPickle.c"
        $res=0; //@line 827 "cPickle.c"
        __label__ = 21; break; //@line 827 "cPickle.c"
      case 16: // $bb17
        var $113=$p; //@line 831 "cPickle.c"
        var $114=($113) > 255; //@line 831 "cPickle.c"
        var $115=$c_str; //@line 832 "cPickle.c"
        if ($114) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 831 "cPickle.c"
      case 17: // $bb18
        HEAP[$115]=114; //@line 832 "cPickle.c"
        var $116=$p; //@line 833 "cPickle.c"
        var $117=((($116)) & 255); //@line 833 "cPickle.c"
        var $118=$c_str+1; //@line 833 "cPickle.c"
        HEAP[$118]=$117; //@line 833 "cPickle.c"
        var $119=$p; //@line 834 "cPickle.c"
        var $120=($119) >> 8; //@line 834 "cPickle.c"
        var $121=((($120)) & 255); //@line 834 "cPickle.c"
        var $122=$c_str+2; //@line 834 "cPickle.c"
        HEAP[$122]=$121; //@line 834 "cPickle.c"
        var $123=$p; //@line 835 "cPickle.c"
        var $124=($123) >> 16; //@line 835 "cPickle.c"
        var $125=((($124)) & 255); //@line 835 "cPickle.c"
        var $126=$c_str+3; //@line 835 "cPickle.c"
        HEAP[$126]=$125; //@line 835 "cPickle.c"
        var $127=$p; //@line 836 "cPickle.c"
        var $128=($127) >> 24; //@line 836 "cPickle.c"
        var $129=((($128)) & 255); //@line 836 "cPickle.c"
        var $130=$c_str+4; //@line 836 "cPickle.c"
        HEAP[$130]=$129; //@line 836 "cPickle.c"
        $len=5; //@line 837 "cPickle.c"
        __label__ = 19; break; //@line 837 "cPickle.c"
      case 18: // $bb19
        HEAP[$115]=113; //@line 840 "cPickle.c"
        var $131=$p; //@line 841 "cPickle.c"
        var $132=((($131)) & 255); //@line 841 "cPickle.c"
        var $133=$c_str+1; //@line 841 "cPickle.c"
        HEAP[$133]=$132; //@line 841 "cPickle.c"
        $len=2; //@line 842 "cPickle.c"
        __label__ = 19; break; //@line 842 "cPickle.c"
      case 19: // $bb20
        var $134=$self_addr; //@line 846 "cPickle.c"
        var $135=$134+48; //@line 846 "cPickle.c"
        var $136=HEAP[$135]; //@line 846 "cPickle.c"
        var $137=$len; //@line 846 "cPickle.c"
        var $138=$self_addr; //@line 846 "cPickle.c"
        var $c_str21=$c_str; //@line 846 "cPickle.c"
        var $139=FUNCTION_TABLE[$136]($138, $c_str21, $137); //@line 846 "cPickle.c"
        var $140=($139) < 0; //@line 846 "cPickle.c"
        if ($140) { __label__ = 21; break; } else { __label__ = 20; break; } //@line 846 "cPickle.c"
      case 20: // $bb22
        $res=0; //@line 849 "cPickle.c"
        __label__ = 21; break; //@line 851 "cPickle.c"
      case 21: // $finally
        var $_pr=$py_ob_id;
        var $141=($_pr)!=0; //@line 852 "cPickle.c"
        if ($141) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 852 "cPickle.c"
      case 22: // $bb23
        var $142=$py_ob_id; //@line 852 "cPickle.c"
        var $143=$142; //@line 852 "cPickle.c"
        var $144=HEAP[$143]; //@line 852 "cPickle.c"
        var $145=($144) - 1; //@line 852 "cPickle.c"
        var $146=$py_ob_id; //@line 852 "cPickle.c"
        var $147=$146; //@line 852 "cPickle.c"
        HEAP[$147]=$145; //@line 852 "cPickle.c"
        var $148=$py_ob_id; //@line 852 "cPickle.c"
        var $149=$148; //@line 852 "cPickle.c"
        var $150=HEAP[$149]; //@line 852 "cPickle.c"
        var $151=($150)==0; //@line 852 "cPickle.c"
        if ($151) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 852 "cPickle.c"
      case 23: // $bb24
        var $152=$py_ob_id; //@line 852 "cPickle.c"
        var $153=$152+4; //@line 852 "cPickle.c"
        var $154=HEAP[$153]; //@line 852 "cPickle.c"
        var $155=$154+24; //@line 852 "cPickle.c"
        var $156=HEAP[$155]; //@line 852 "cPickle.c"
        var $157=$py_ob_id; //@line 852 "cPickle.c"
        FUNCTION_TABLE[$156]($157); //@line 852 "cPickle.c"
        __label__ = 24; break; //@line 852 "cPickle.c"
      case 24: // $bb25
        var $158=$memo_len; //@line 853 "cPickle.c"
        var $159=($158)!=0; //@line 853 "cPickle.c"
        if ($159) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 853 "cPickle.c"
      case 25: // $bb26
        var $160=$memo_len; //@line 853 "cPickle.c"
        var $161=$160; //@line 853 "cPickle.c"
        var $162=HEAP[$161]; //@line 853 "cPickle.c"
        var $163=($162) - 1; //@line 853 "cPickle.c"
        var $164=$memo_len; //@line 853 "cPickle.c"
        var $165=$164; //@line 853 "cPickle.c"
        HEAP[$165]=$163; //@line 853 "cPickle.c"
        var $166=$memo_len; //@line 853 "cPickle.c"
        var $167=$166; //@line 853 "cPickle.c"
        var $168=HEAP[$167]; //@line 853 "cPickle.c"
        var $169=($168)==0; //@line 853 "cPickle.c"
        if ($169) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 853 "cPickle.c"
      case 26: // $bb27
        var $170=$memo_len; //@line 853 "cPickle.c"
        var $171=$170+4; //@line 853 "cPickle.c"
        var $172=HEAP[$171]; //@line 853 "cPickle.c"
        var $173=$172+24; //@line 853 "cPickle.c"
        var $174=HEAP[$173]; //@line 853 "cPickle.c"
        var $175=$memo_len; //@line 853 "cPickle.c"
        FUNCTION_TABLE[$174]($175); //@line 853 "cPickle.c"
        __label__ = 27; break; //@line 853 "cPickle.c"
      case 27: // $bb28
        var $176=$t; //@line 854 "cPickle.c"
        var $177=($176)!=0; //@line 854 "cPickle.c"
        if ($177) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 854 "cPickle.c"
      case 28: // $bb29
        var $178=$t; //@line 854 "cPickle.c"
        var $179=$178; //@line 854 "cPickle.c"
        var $180=HEAP[$179]; //@line 854 "cPickle.c"
        var $181=($180) - 1; //@line 854 "cPickle.c"
        var $182=$t; //@line 854 "cPickle.c"
        var $183=$182; //@line 854 "cPickle.c"
        HEAP[$183]=$181; //@line 854 "cPickle.c"
        var $184=$t; //@line 854 "cPickle.c"
        var $185=$184; //@line 854 "cPickle.c"
        var $186=HEAP[$185]; //@line 854 "cPickle.c"
        var $187=($186)==0; //@line 854 "cPickle.c"
        if ($187) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 854 "cPickle.c"
      case 29: // $bb30
        var $188=$t; //@line 854 "cPickle.c"
        var $189=$188+4; //@line 854 "cPickle.c"
        var $190=HEAP[$189]; //@line 854 "cPickle.c"
        var $191=$190+24; //@line 854 "cPickle.c"
        var $192=HEAP[$191]; //@line 854 "cPickle.c"
        var $193=$t; //@line 854 "cPickle.c"
        FUNCTION_TABLE[$192]($193); //@line 854 "cPickle.c"
        __label__ = 30; break; //@line 854 "cPickle.c"
      case 30: // $bb31
        var $194=$res; //@line 856 "cPickle.c"
        $0=$194; //@line 856 "cPickle.c"
        __label__ = 31; break; //@line 856 "cPickle.c"
      case 31: // $bb32
        var $195=$0; //@line 789 "cPickle.c"
        $retval=$195; //@line 789 "cPickle.c"
        var $retval33=$retval; //@line 789 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 789 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _whichmodule($global, $global_name) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $global_addr;
        var $global_name_addr;
        var $retval;
        var $0;
        var $i=__stackBase__;
        var $j;
        var $module=__stackBase__+4;
        var $modules_dict;
        var $global_name_attr;
        var $name=__stackBase__+8;
        $global_addr=$global;
        $global_name_addr=$global_name;
        HEAP[$module]=0; //@line 863 "cPickle.c"
        $modules_dict=0; //@line 863 "cPickle.c"
        $global_name_attr=0; //@line 864 "cPickle.c"
        HEAP[$name]=0; //@line 864 "cPickle.c"
        var $1=$global_addr; //@line 866 "cPickle.c"
        var $2=_PyObject_GetAttrString($1, __str6); //@line 866 "cPickle.c"
        HEAP[$module]=$2; //@line 866 "cPickle.c"
        var $3=HEAP[$module]; //@line 867 "cPickle.c"
        var $4=($3)!=0; //@line 867 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 867 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$module]; //@line 868 "cPickle.c"
        $0=$5; //@line 868 "cPickle.c"
        __label__ = 21; break; //@line 868 "cPickle.c"
      case 2: // $bb1
        var $6=HEAP[_PyExc_AttributeError]; //@line 869 "cPickle.c"
        var $7=_PyErr_ExceptionMatches($6); //@line 869 "cPickle.c"
        var $8=($7)!=0; //@line 869 "cPickle.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 869 "cPickle.c"
      case 3: // $bb2
        _PyErr_Clear(); //@line 870 "cPickle.c"
        var $9=_PySys_GetObject(__str7); //@line 874 "cPickle.c"
        $modules_dict=$9; //@line 874 "cPickle.c"
        var $10=$modules_dict; //@line 874 "cPickle.c"
        var $11=($10)==0; //@line 874 "cPickle.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 874 "cPickle.c"
      case 4: // $bb3
        $0=0; //@line 872 "cPickle.c"
        __label__ = 21; break; //@line 872 "cPickle.c"
      case 5: // $bb4
        $0=0; //@line 875 "cPickle.c"
        __label__ = 21; break; //@line 875 "cPickle.c"
      case 6: // $bb5
        HEAP[$i]=0; //@line 877 "cPickle.c"
        __label__ = 17; break; //@line 877 "cPickle.c"
      case 7: // $bb6
        var $12=HEAP[___main___str]; //@line 880 "cPickle.c"
        var $13=HEAP[$name]; //@line 880 "cPickle.c"
        var $14=_PyObject_Compare($13, $12); //@line 880 "cPickle.c"
        var $15=($14)==0; //@line 880 "cPickle.c"
        if ($15) { __label__ = 17; break; } else { __label__ = 8; break; } //@line 880 "cPickle.c"
      case 8: // $bb7
        var $16=HEAP[$module]; //@line 882 "cPickle.c"
        var $17=$global_name_addr; //@line 882 "cPickle.c"
        var $18=_PyObject_GetAttr($16, $17); //@line 882 "cPickle.c"
        $global_name_attr=$18; //@line 882 "cPickle.c"
        var $19=$global_name_attr; //@line 883 "cPickle.c"
        var $20=($19)==0; //@line 883 "cPickle.c"
        if ($20) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 883 "cPickle.c"
      case 9: // $bb8
        var $21=HEAP[_PyExc_AttributeError]; //@line 884 "cPickle.c"
        var $22=_PyErr_ExceptionMatches($21); //@line 884 "cPickle.c"
        var $23=($22)!=0; //@line 884 "cPickle.c"
        if ($23) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 884 "cPickle.c"
      case 10: // $bb9
        _PyErr_Clear(); //@line 885 "cPickle.c"
        __label__ = 17; break; //@line 885 "cPickle.c"
      case 11: // $bb10
        $0=0; //@line 887 "cPickle.c"
        __label__ = 21; break; //@line 887 "cPickle.c"
      case 12: // $bb11
        var $24=$global_name_attr; //@line 891 "cPickle.c"
        var $25=$global_addr; //@line 891 "cPickle.c"
        var $26=($24)!=($25); //@line 891 "cPickle.c"
        var $27=$global_name_attr; //@line 892 "cPickle.c"
        var $28=$27; //@line 892 "cPickle.c"
        var $29=HEAP[$28]; //@line 892 "cPickle.c"
        var $30=($29) - 1; //@line 892 "cPickle.c"
        var $31=$global_name_attr; //@line 892 "cPickle.c"
        var $32=$31; //@line 892 "cPickle.c"
        HEAP[$32]=$30; //@line 892 "cPickle.c"
        var $33=$global_name_attr; //@line 892 "cPickle.c"
        var $34=$33; //@line 892 "cPickle.c"
        var $35=HEAP[$34]; //@line 892 "cPickle.c"
        var $36=($35)==0; //@line 892 "cPickle.c"
        if ($26) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 891 "cPickle.c"
      case 13: // $bb12
        if ($36) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 892 "cPickle.c"
      case 14: // $bb13
        var $37=$global_name_attr; //@line 892 "cPickle.c"
        var $38=$37+4; //@line 892 "cPickle.c"
        var $39=HEAP[$38]; //@line 892 "cPickle.c"
        var $40=$39+24; //@line 892 "cPickle.c"
        var $41=HEAP[$40]; //@line 892 "cPickle.c"
        var $42=$global_name_attr; //@line 892 "cPickle.c"
        FUNCTION_TABLE[$41]($42); //@line 892 "cPickle.c"
        __label__ = 17; break; //@line 892 "cPickle.c"
      case 15: // $bb15
        if ($36) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 896 "cPickle.c"
      case 16: // $bb16
        var $43=$global_name_attr; //@line 896 "cPickle.c"
        var $44=$43+4; //@line 896 "cPickle.c"
        var $45=HEAP[$44]; //@line 896 "cPickle.c"
        var $46=$45+24; //@line 896 "cPickle.c"
        var $47=HEAP[$46]; //@line 896 "cPickle.c"
        var $48=$global_name_attr; //@line 896 "cPickle.c"
        FUNCTION_TABLE[$47]($48); //@line 896 "cPickle.c"
        __label__ = 18; break; //@line 896 "cPickle.c"
      case 17: // $bb18
        var $49=$modules_dict; //@line 878 "cPickle.c"
        var $50=_PyDict_Next($49, $i, $name, $module); //@line 878 "cPickle.c"
        $j=$50; //@line 878 "cPickle.c"
        var $51=($50)!=0; //@line 878 "cPickle.c"
        if ($51) { __label__ = 7; break; } else { __label__ = 19; break; } //@line 878 "cPickle.c"
      case 18: // $bb19
        var $_pr=$j;
        var $52=($_pr)==0; //@line 905 "cPickle.c"
        if ($52) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 905 "cPickle.c"
      case 19: // $bb20
        var $53=HEAP[___main___str]; //@line 906 "cPickle.c"
        HEAP[$name]=$53; //@line 906 "cPickle.c"
        __label__ = 20; break; //@line 906 "cPickle.c"
      case 20: // $bb21
        var $54=HEAP[$name]; //@line 909 "cPickle.c"
        var $55=$54; //@line 909 "cPickle.c"
        var $56=HEAP[$55]; //@line 909 "cPickle.c"
        var $57=($56) + 1; //@line 909 "cPickle.c"
        var $58=$54; //@line 909 "cPickle.c"
        HEAP[$58]=$57; //@line 909 "cPickle.c"
        var $59=HEAP[$name]; //@line 910 "cPickle.c"
        $0=$59; //@line 910 "cPickle.c"
        __label__ = 21; break; //@line 910 "cPickle.c"
      case 21: // $bb22
        var $60=$0; //@line 868 "cPickle.c"
        $retval=$60; //@line 868 "cPickle.c"
        var $retval23=$retval; //@line 868 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 868 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fast_save_enter($self, $obj) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $obj_addr;
        var $retval;
        var $0;
        var $key;
        $self_addr=$self;
        $obj_addr=$obj;
        var $1=$self_addr; //@line 918 "cPickle.c"
        var $2=$1+64; //@line 918 "cPickle.c"
        var $3=HEAP[$2]; //@line 918 "cPickle.c"
        var $4=($3) + 1; //@line 918 "cPickle.c"
        var $5=$self_addr; //@line 918 "cPickle.c"
        var $6=$5+64; //@line 918 "cPickle.c"
        HEAP[$6]=$4; //@line 918 "cPickle.c"
        var $7=$self_addr; //@line 918 "cPickle.c"
        var $8=$7+64; //@line 918 "cPickle.c"
        var $9=HEAP[$8]; //@line 918 "cPickle.c"
        var $10=($9) > 49; //@line 918 "cPickle.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 16; break; } //@line 918 "cPickle.c"
      case 1: // $bb
        $key=0; //@line 919 "cPickle.c"
        var $11=$self_addr; //@line 920 "cPickle.c"
        var $12=$11+68; //@line 920 "cPickle.c"
        var $13=HEAP[$12]; //@line 920 "cPickle.c"
        var $14=($13)==0; //@line 920 "cPickle.c"
        if ($14) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 920 "cPickle.c"
      case 2: // $bb1
        var $15=_PyDict_New(); //@line 921 "cPickle.c"
        var $16=$self_addr; //@line 921 "cPickle.c"
        var $17=$16+68; //@line 921 "cPickle.c"
        HEAP[$17]=$15; //@line 921 "cPickle.c"
        var $18=$self_addr; //@line 922 "cPickle.c"
        var $19=$18+68; //@line 922 "cPickle.c"
        var $20=HEAP[$19]; //@line 922 "cPickle.c"
        var $21=($20)==0; //@line 922 "cPickle.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 922 "cPickle.c"
      case 3: // $bb2
        var $22=$self_addr; //@line 923 "cPickle.c"
        var $23=$22+64; //@line 923 "cPickle.c"
        HEAP[$23]=-1; //@line 923 "cPickle.c"
        $0=0; //@line 924 "cPickle.c"
        __label__ = 17; break; //@line 924 "cPickle.c"
      case 4: // $bb3
        var $24=$obj_addr; //@line 927 "cPickle.c"
        var $25=$24; //@line 927 "cPickle.c"
        var $26=_PyLong_FromVoidPtr($25); //@line 927 "cPickle.c"
        $key=$26; //@line 927 "cPickle.c"
        var $27=($26)==0; //@line 928 "cPickle.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 928 "cPickle.c"
      case 5: // $bb4
        $0=0; //@line 929 "cPickle.c"
        __label__ = 17; break; //@line 929 "cPickle.c"
      case 6: // $bb5
        var $28=$self_addr; //@line 930 "cPickle.c"
        var $29=$28+68; //@line 930 "cPickle.c"
        var $30=HEAP[$29]; //@line 930 "cPickle.c"
        var $31=$key; //@line 930 "cPickle.c"
        var $32=_PyDict_GetItem($30, $31); //@line 930 "cPickle.c"
        var $33=($32)!=0; //@line 930 "cPickle.c"
        if ($33) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 930 "cPickle.c"
      case 7: // $bb6
        var $34=$key; //@line 931 "cPickle.c"
        var $35=$34; //@line 931 "cPickle.c"
        var $36=HEAP[$35]; //@line 931 "cPickle.c"
        var $37=($36) - 1; //@line 931 "cPickle.c"
        var $38=$key; //@line 931 "cPickle.c"
        var $39=$38; //@line 931 "cPickle.c"
        HEAP[$39]=$37; //@line 931 "cPickle.c"
        var $40=$key; //@line 931 "cPickle.c"
        var $41=$40; //@line 931 "cPickle.c"
        var $42=HEAP[$41]; //@line 931 "cPickle.c"
        var $43=($42)==0; //@line 931 "cPickle.c"
        if ($43) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 931 "cPickle.c"
      case 8: // $bb7
        var $44=$key; //@line 931 "cPickle.c"
        var $45=$44+4; //@line 931 "cPickle.c"
        var $46=HEAP[$45]; //@line 931 "cPickle.c"
        var $47=$46+24; //@line 931 "cPickle.c"
        var $48=HEAP[$47]; //@line 931 "cPickle.c"
        var $49=$key; //@line 931 "cPickle.c"
        FUNCTION_TABLE[$48]($49); //@line 931 "cPickle.c"
        __label__ = 9; break; //@line 931 "cPickle.c"
      case 9: // $bb8
        var $50=$obj_addr; //@line 932 "cPickle.c"
        var $51=$50+4; //@line 932 "cPickle.c"
        var $52=HEAP[$51]; //@line 932 "cPickle.c"
        var $53=$52+12; //@line 932 "cPickle.c"
        var $54=HEAP[$53]; //@line 932 "cPickle.c"
        var $55=HEAP[_PyExc_ValueError]; //@line 932 "cPickle.c"
        var $56=$obj_addr; //@line 932 "cPickle.c"
        var $57=_PyErr_Format($55, __str8, $54, $56); //@line 932 "cPickle.c"
        var $58=$self_addr; //@line 936 "cPickle.c"
        var $59=$58+64; //@line 936 "cPickle.c"
        HEAP[$59]=-1; //@line 936 "cPickle.c"
        $0=0; //@line 937 "cPickle.c"
        __label__ = 17; break; //@line 937 "cPickle.c"
      case 10: // $bb9
        var $60=$self_addr; //@line 939 "cPickle.c"
        var $61=$60+68; //@line 939 "cPickle.c"
        var $62=HEAP[$61]; //@line 939 "cPickle.c"
        var $63=$key; //@line 939 "cPickle.c"
        var $64=_PyDict_SetItem($62, $63, __Py_NoneStruct); //@line 939 "cPickle.c"
        var $65=($64) < 0; //@line 939 "cPickle.c"
        var $66=$key; //@line 940 "cPickle.c"
        var $67=$66; //@line 940 "cPickle.c"
        var $68=HEAP[$67]; //@line 940 "cPickle.c"
        var $69=($68) - 1; //@line 940 "cPickle.c"
        var $70=$key; //@line 940 "cPickle.c"
        var $71=$70; //@line 940 "cPickle.c"
        HEAP[$71]=$69; //@line 940 "cPickle.c"
        var $72=$key; //@line 940 "cPickle.c"
        var $73=$72; //@line 940 "cPickle.c"
        var $74=HEAP[$73]; //@line 940 "cPickle.c"
        var $75=($74)==0; //@line 940 "cPickle.c"
        if ($65) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 939 "cPickle.c"
      case 11: // $bb10
        if ($75) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 940 "cPickle.c"
      case 12: // $bb11
        var $76=$key; //@line 940 "cPickle.c"
        var $77=$76+4; //@line 940 "cPickle.c"
        var $78=HEAP[$77]; //@line 940 "cPickle.c"
        var $79=$78+24; //@line 940 "cPickle.c"
        var $80=HEAP[$79]; //@line 940 "cPickle.c"
        var $81=$key; //@line 940 "cPickle.c"
        FUNCTION_TABLE[$80]($81); //@line 940 "cPickle.c"
        __label__ = 13; break; //@line 940 "cPickle.c"
      case 13: // $bb12
        var $82=$self_addr; //@line 941 "cPickle.c"
        var $83=$82+64; //@line 941 "cPickle.c"
        HEAP[$83]=-1; //@line 941 "cPickle.c"
        $0=0; //@line 942 "cPickle.c"
        __label__ = 17; break; //@line 942 "cPickle.c"
      case 14: // $bb13
        if ($75) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 944 "cPickle.c"
      case 15: // $bb14
        var $84=$key; //@line 944 "cPickle.c"
        var $85=$84+4; //@line 944 "cPickle.c"
        var $86=HEAP[$85]; //@line 944 "cPickle.c"
        var $87=$86+24; //@line 944 "cPickle.c"
        var $88=HEAP[$87]; //@line 944 "cPickle.c"
        var $89=$key; //@line 944 "cPickle.c"
        FUNCTION_TABLE[$88]($89); //@line 944 "cPickle.c"
        __label__ = 16; break; //@line 944 "cPickle.c"
      case 16: // $bb15
        $0=1; //@line 946 "cPickle.c"
        __label__ = 17; break; //@line 946 "cPickle.c"
      case 17: // $bb16
        var $90=$0; //@line 924 "cPickle.c"
        $retval=$90; //@line 924 "cPickle.c"
        var $retval17=$retval; //@line 924 "cPickle.c"
        ;
        return $retval17; //@line 924 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fast_save_leave($self, $obj) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $obj_addr;
        var $retval;
        var $0;
        var $key;
        $self_addr=$self;
        $obj_addr=$obj;
        var $1=$self_addr; //@line 952 "cPickle.c"
        var $2=$1+64; //@line 952 "cPickle.c"
        var $3=HEAP[$2]; //@line 952 "cPickle.c"
        var $4=($3) > 49; //@line 952 "cPickle.c"
        var $5=($4); //@line 952 "cPickle.c"
        var $6=($3) - 1; //@line 952 "cPickle.c"
        var $7=$self_addr; //@line 952 "cPickle.c"
        var $8=$7+64; //@line 952 "cPickle.c"
        HEAP[$8]=$6; //@line 952 "cPickle.c"
        var $toBool=($5)!=0; //@line 952 "cPickle.c"
        if ($toBool) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 952 "cPickle.c"
      case 1: // $bb
        var $9=$obj_addr; //@line 953 "cPickle.c"
        var $10=$9; //@line 953 "cPickle.c"
        var $11=_PyLong_FromVoidPtr($10); //@line 953 "cPickle.c"
        $key=$11; //@line 953 "cPickle.c"
        var $12=$key; //@line 954 "cPickle.c"
        var $13=($12)==0; //@line 954 "cPickle.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 954 "cPickle.c"
      case 2: // $bb1
        $0=0; //@line 955 "cPickle.c"
        __label__ = 10; break; //@line 955 "cPickle.c"
      case 3: // $bb2
        var $14=$self_addr; //@line 956 "cPickle.c"
        var $15=$14+68; //@line 956 "cPickle.c"
        var $16=HEAP[$15]; //@line 956 "cPickle.c"
        var $17=$key; //@line 956 "cPickle.c"
        var $18=_PyDict_DelItem($16, $17); //@line 956 "cPickle.c"
        var $19=($18) < 0; //@line 956 "cPickle.c"
        var $20=$key; //@line 957 "cPickle.c"
        var $21=$20; //@line 957 "cPickle.c"
        var $22=HEAP[$21]; //@line 957 "cPickle.c"
        var $23=($22) - 1; //@line 957 "cPickle.c"
        var $24=$key; //@line 957 "cPickle.c"
        var $25=$24; //@line 957 "cPickle.c"
        HEAP[$25]=$23; //@line 957 "cPickle.c"
        var $26=$key; //@line 957 "cPickle.c"
        var $27=$26; //@line 957 "cPickle.c"
        var $28=HEAP[$27]; //@line 957 "cPickle.c"
        var $29=($28)==0; //@line 957 "cPickle.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 956 "cPickle.c"
      case 4: // $bb3
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 957 "cPickle.c"
      case 5: // $bb4
        var $30=$key; //@line 957 "cPickle.c"
        var $31=$30+4; //@line 957 "cPickle.c"
        var $32=HEAP[$31]; //@line 957 "cPickle.c"
        var $33=$32+24; //@line 957 "cPickle.c"
        var $34=HEAP[$33]; //@line 957 "cPickle.c"
        var $35=$key; //@line 957 "cPickle.c"
        FUNCTION_TABLE[$34]($35); //@line 957 "cPickle.c"
        __label__ = 6; break; //@line 957 "cPickle.c"
      case 6: // $bb5
        $0=0; //@line 958 "cPickle.c"
        __label__ = 10; break; //@line 958 "cPickle.c"
      case 7: // $bb6
        if ($29) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 960 "cPickle.c"
      case 8: // $bb7
        var $36=$key; //@line 960 "cPickle.c"
        var $37=$36+4; //@line 960 "cPickle.c"
        var $38=HEAP[$37]; //@line 960 "cPickle.c"
        var $39=$38+24; //@line 960 "cPickle.c"
        var $40=HEAP[$39]; //@line 960 "cPickle.c"
        var $41=$key; //@line 960 "cPickle.c"
        FUNCTION_TABLE[$40]($41); //@line 960 "cPickle.c"
        __label__ = 9; break; //@line 960 "cPickle.c"
      case 9: // $bb8
        $0=1; //@line 962 "cPickle.c"
        __label__ = 10; break; //@line 962 "cPickle.c"
      case 10: // $bb9
        var $42=$0; //@line 955 "cPickle.c"
        $retval=$42; //@line 955 "cPickle.c"
        var $retval10=$retval; //@line 955 "cPickle.c"
        ;
        return $retval10; //@line 955 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_string($self, $args, $doput) {
    var __stackBase__  = STACKTOP; STACKTOP += 5; _memset(__stackBase__, 0, 5);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr_i;
        var $ob_addr_i;
        var $retval_i;
        var $0;
        var $self_addr;
        var $args_addr;
        var $doput_addr;
        var $retval;
        var $1;
        var $size;
        var $len;
        var $repr;
        var $repr_str;
        var $i;
        var $c_str=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        $doput_addr=$doput;
        $repr=0; //@line 1205 "cPickle.c"
        var $2=$args_addr; //@line 1207 "cPickle.c"
        var $3=_PyString_Size($2); //@line 1207 "cPickle.c"
        $size=$3; //@line 1207 "cPickle.c"
        var $4=$size; //@line 1207 "cPickle.c"
        var $5=($4) < 0; //@line 1207 "cPickle.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1207 "cPickle.c"
      case 1: // $bb
        $1=-1; //@line 1208 "cPickle.c"
        __label__ = 40; break; //@line 1208 "cPickle.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 1210 "cPickle.c"
        var $7=$6+40; //@line 1210 "cPickle.c"
        var $8=HEAP[$7]; //@line 1210 "cPickle.c"
        var $9=($8)==0; //@line 1210 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 1210 "cPickle.c"
      case 3: // $bb2
        var $10=$args_addr; //@line 1215 "cPickle.c"
        var $11=_PyObject_Repr($10); //@line 1215 "cPickle.c"
        $repr=$11; //@line 1215 "cPickle.c"
        var $12=$repr; //@line 1215 "cPickle.c"
        var $13=($12)==0; //@line 1215 "cPickle.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1215 "cPickle.c"
      case 4: // $bb3
        $1=-1; //@line 1216 "cPickle.c"
        __label__ = 40; break; //@line 1216 "cPickle.c"
      case 5: // $bb4
        var $14=$repr; //@line 1218 "cPickle.c"
        var $15=_PyString_Size($14); //@line 1218 "cPickle.c"
        $len=$15; //@line 1218 "cPickle.c"
        var $16=$len; //@line 1218 "cPickle.c"
        var $17=($16) < 0; //@line 1218 "cPickle.c"
        if ($17) { __label__ = 36; break; } else { __label__ = 6; break; } //@line 1218 "cPickle.c"
      case 6: // $bb5
        var $18=$repr; //@line 1220 "cPickle.c"
        var $19=$18; //@line 1220 "cPickle.c"
        var $20=$19+20; //@line 1220 "cPickle.c"
        var $21=$20; //@line 1220 "cPickle.c"
        $repr_str=$21; //@line 1220 "cPickle.c"
        var $22=$self_addr; //@line 1222 "cPickle.c"
        var $23=$22+48; //@line 1222 "cPickle.c"
        var $24=HEAP[$23]; //@line 1222 "cPickle.c"
        var $25=$self_addr; //@line 1222 "cPickle.c"
        var $26=FUNCTION_TABLE[$24]($25, _string_9677, 1); //@line 1222 "cPickle.c"
        var $27=($26) < 0; //@line 1222 "cPickle.c"
        if ($27) { __label__ = 36; break; } else { __label__ = 7; break; } //@line 1222 "cPickle.c"
      case 7: // $bb6
        var $28=$self_addr; //@line 1225 "cPickle.c"
        var $29=$28+48; //@line 1225 "cPickle.c"
        var $30=HEAP[$29]; //@line 1225 "cPickle.c"
        var $31=$self_addr; //@line 1225 "cPickle.c"
        var $32=$repr_str; //@line 1225 "cPickle.c"
        var $33=$len; //@line 1225 "cPickle.c"
        var $34=FUNCTION_TABLE[$30]($31, $32, $33); //@line 1225 "cPickle.c"
        var $35=($34) < 0; //@line 1225 "cPickle.c"
        if ($35) { __label__ = 36; break; } else { __label__ = 8; break; } //@line 1225 "cPickle.c"
      case 8: // $bb7
        var $36=$self_addr; //@line 1228 "cPickle.c"
        var $37=$36+48; //@line 1228 "cPickle.c"
        var $38=HEAP[$37]; //@line 1228 "cPickle.c"
        var $39=$self_addr; //@line 1228 "cPickle.c"
        var $40=FUNCTION_TABLE[$38]($39, __str12, 1); //@line 1228 "cPickle.c"
        var $41=($40) < 0; //@line 1228 "cPickle.c"
        if ($41) { __label__ = 36; break; } else { __label__ = 9; break; } //@line 1228 "cPickle.c"
      case 9: // $bb8
        var $42=$repr; //@line 1231 "cPickle.c"
        var $43=($42)!=0; //@line 1231 "cPickle.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 29; break; } //@line 1231 "cPickle.c"
      case 10: // $bb9
        var $44=$repr; //@line 1231 "cPickle.c"
        var $45=$44; //@line 1231 "cPickle.c"
        var $46=HEAP[$45]; //@line 1231 "cPickle.c"
        var $47=($46) - 1; //@line 1231 "cPickle.c"
        var $48=$repr; //@line 1231 "cPickle.c"
        var $49=$48; //@line 1231 "cPickle.c"
        HEAP[$49]=$47; //@line 1231 "cPickle.c"
        var $50=$repr; //@line 1231 "cPickle.c"
        var $51=$50; //@line 1231 "cPickle.c"
        var $52=HEAP[$51]; //@line 1231 "cPickle.c"
        var $53=($52)==0; //@line 1231 "cPickle.c"
        if ($53) { __label__ = 11; break; } else { __label__ = 29; break; } //@line 1231 "cPickle.c"
      case 11: // $bb10
        var $54=$repr; //@line 1231 "cPickle.c"
        var $55=$54+4; //@line 1231 "cPickle.c"
        var $56=HEAP[$55]; //@line 1231 "cPickle.c"
        var $57=$56+24; //@line 1231 "cPickle.c"
        var $58=HEAP[$57]; //@line 1231 "cPickle.c"
        var $59=$repr; //@line 1231 "cPickle.c"
        FUNCTION_TABLE[$58]($59); //@line 1231 "cPickle.c"
        __label__ = 29; break; //@line 1231 "cPickle.c"
      case 12: // $bb12
        var $60=$size; //@line 1237 "cPickle.c"
        var $61=($60) <= 255; //@line 1237 "cPickle.c"
        var $62=$c_str; //@line 1238 "cPickle.c"
        if ($61) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1237 "cPickle.c"
      case 13: // $bb13
        HEAP[$62]=85; //@line 1238 "cPickle.c"
        var $63=$size; //@line 1239 "cPickle.c"
        var $64=((($63)) & 255); //@line 1239 "cPickle.c"
        var $65=$c_str+1; //@line 1239 "cPickle.c"
        HEAP[$65]=$64; //@line 1239 "cPickle.c"
        $len=2; //@line 1240 "cPickle.c"
        __label__ = 17; break; //@line 1240 "cPickle.c"
      case 14: // $bb14
        HEAP[$62]=84; //@line 1243 "cPickle.c"
        $i=1; //@line 1244 "cPickle.c"
        __label__ = 15; break;
      case 15: // $bb15
        var $66=$i; //@line 1245 "cPickle.c"
        var $67=$i; //@line 1245 "cPickle.c"
        var $68=($67) * 8; //@line 1245 "cPickle.c"
        var $69=($68) + -8; //@line 1245 "cPickle.c"
        var $70=$size; //@line 1245 "cPickle.c"
        var $71=($70) >> ($69); //@line 1245 "cPickle.c"
        var $72=((($71)) & 255); //@line 1245 "cPickle.c"
        var $73=$c_str+$66; //@line 1245 "cPickle.c"
        HEAP[$73]=$72; //@line 1245 "cPickle.c"
        var $74=$i; //@line 1244 "cPickle.c"
        var $75=($74) + 1; //@line 1244 "cPickle.c"
        $i=$75; //@line 1244 "cPickle.c"
        var $76=($75) <= 4; //@line 1244 "cPickle.c"
        if ($76) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1244 "cPickle.c"
      case 16: // $bb17
        $len=5; //@line 1246 "cPickle.c"
        __label__ = 17; break; //@line 1246 "cPickle.c"
      case 17: // $bb18
        var $77=$self_addr; //@line 1251 "cPickle.c"
        var $78=$77+48; //@line 1251 "cPickle.c"
        var $79=HEAP[$78]; //@line 1251 "cPickle.c"
        var $80=$self_addr; //@line 1251 "cPickle.c"
        var $c_str19=$c_str; //@line 1251 "cPickle.c"
        var $81=$len; //@line 1251 "cPickle.c"
        var $82=FUNCTION_TABLE[$79]($80, $c_str19, $81); //@line 1251 "cPickle.c"
        var $83=($82) < 0; //@line 1251 "cPickle.c"
        if ($83) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1251 "cPickle.c"
      case 18: // $bb20
        $1=-1; //@line 1252 "cPickle.c"
        __label__ = 40; break; //@line 1252 "cPickle.c"
      case 19: // $bb21
        var $84=$size; //@line 1254 "cPickle.c"
        var $85=($84) <= 128; //@line 1254 "cPickle.c"
        if ($85) { __label__ = 27; break; } else { __label__ = 20; break; } //@line 1254 "cPickle.c"
      case 20: // $bb22
        var $86=$self_addr; //@line 1254 "cPickle.c"
        var $87=$86+16; //@line 1254 "cPickle.c"
        var $88=HEAP[$87]; //@line 1254 "cPickle.c"
        var $89=$88+4; //@line 1254 "cPickle.c"
        var $90=HEAP[$89]; //@line 1254 "cPickle.c"
        var $91=($90)!=(_PdataType); //@line 1254 "cPickle.c"
        if ($91) { __label__ = 27; break; } else { __label__ = 21; break; } //@line 1254 "cPickle.c"
      case 21: // $bb23
        var $92=$self_addr; //@line 1255 "cPickle.c"
        var $93=_write_other($92, 0, 0); //@line 1255 "cPickle.c"
        var $94=($93) < 0; //@line 1255 "cPickle.c"
        if ($94) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1255 "cPickle.c"
      case 22: // $bb24
        $1=-1; //@line 1255 "cPickle.c"
        __label__ = 40; break; //@line 1255 "cPickle.c"
      case 23: // $bb25
        var $95=$self_addr; //@line 1256 "cPickle.c"
        var $96=$95+16; //@line 1256 "cPickle.c"
        var $97=HEAP[$96]; //@line 1256 "cPickle.c"
        var $98=$97; //@line 1256 "cPickle.c"
        var $99=$98+8; //@line 1256 "cPickle.c"
        var $100=HEAP[$99]; //@line 1256 "cPickle.c"
        var $101=$self_addr; //@line 1256 "cPickle.c"
        var $102=$101+16; //@line 1256 "cPickle.c"
        var $103=HEAP[$102]; //@line 1256 "cPickle.c"
        var $104=$103; //@line 1256 "cPickle.c"
        var $105=$104+12; //@line 1256 "cPickle.c"
        var $106=HEAP[$105]; //@line 1256 "cPickle.c"
        var $107=($100)==($106); //@line 1256 "cPickle.c"
        if ($107) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 1256 "cPickle.c"
      case 24: // $bb26
        var $108=$self_addr; //@line 1256 "cPickle.c"
        var $109=$108+16; //@line 1256 "cPickle.c"
        var $110=HEAP[$109]; //@line 1256 "cPickle.c"
        var $111=$110; //@line 1256 "cPickle.c"
        var $112=_Pdata_grow($111); //@line 1256 "cPickle.c"
        var $113=($112) < 0; //@line 1256 "cPickle.c"
        if ($113) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1256 "cPickle.c"
      case 25: // $bb27
        $1=-1; //@line 1256 "cPickle.c"
        __label__ = 40; break; //@line 1256 "cPickle.c"
      case 26: // $bb28
        var $114=$args_addr; //@line 1256 "cPickle.c"
        var $115=$114; //@line 1256 "cPickle.c"
        var $116=HEAP[$115]; //@line 1256 "cPickle.c"
        var $117=($116) + 1; //@line 1256 "cPickle.c"
        var $118=$args_addr; //@line 1256 "cPickle.c"
        var $119=$118; //@line 1256 "cPickle.c"
        HEAP[$119]=$117; //@line 1256 "cPickle.c"
        var $120=$self_addr; //@line 1256 "cPickle.c"
        var $121=$120+16; //@line 1256 "cPickle.c"
        var $122=HEAP[$121]; //@line 1256 "cPickle.c"
        var $123=$122; //@line 1256 "cPickle.c"
        var $124=$123+16; //@line 1256 "cPickle.c"
        var $125=HEAP[$124]; //@line 1256 "cPickle.c"
        var $126=$self_addr; //@line 1256 "cPickle.c"
        var $127=$126+16; //@line 1256 "cPickle.c"
        var $128=HEAP[$127]; //@line 1256 "cPickle.c"
        var $129=$128; //@line 1256 "cPickle.c"
        var $130=$129+8; //@line 1256 "cPickle.c"
        var $131=HEAP[$130]; //@line 1256 "cPickle.c"
        var $132=$125+4*$131; //@line 1256 "cPickle.c"
        var $133=$args_addr; //@line 1256 "cPickle.c"
        HEAP[$132]=$133; //@line 1256 "cPickle.c"
        var $134=($131) + 1; //@line 1256 "cPickle.c"
        var $135=$129+8; //@line 1256 "cPickle.c"
        HEAP[$135]=$134; //@line 1256 "cPickle.c"
        __label__ = 29; break; //@line 1256 "cPickle.c"
      case 27: // $bb29
        var $136=$self_addr; //@line 1259 "cPickle.c"
        var $137=$136+48; //@line 1259 "cPickle.c"
        var $138=HEAP[$137]; //@line 1259 "cPickle.c"
        var $139=$args_addr; //@line 1259 "cPickle.c"
        var $140=$139; //@line 1259 "cPickle.c"
        var $141=$140+20; //@line 1259 "cPickle.c"
        var $142=$141; //@line 1259 "cPickle.c"
        var $143=$self_addr; //@line 1259 "cPickle.c"
        var $144=$size; //@line 1259 "cPickle.c"
        var $145=FUNCTION_TABLE[$138]($143, $142, $144); //@line 1259 "cPickle.c"
        var $146=($145) < 0; //@line 1259 "cPickle.c"
        if ($146) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1259 "cPickle.c"
      case 28: // $bb30
        $1=-1; //@line 1263 "cPickle.c"
        __label__ = 40; break; //@line 1263 "cPickle.c"
      case 29: // $bb31
        var $147=$doput_addr; //@line 1267 "cPickle.c"
        var $148=($147)!=0; //@line 1267 "cPickle.c"
        if ($148) { __label__ = 30; break; } else { __label__ = 35; break; } //@line 1267 "cPickle.c"
      case 30: // $bb32
        var $149=$self_addr; //@line 1268 "cPickle.c"
        var $150=$args_addr; //@line 1268 "cPickle.c"
        $self_addr_i=$149;
        $ob_addr_i=$150;
        var $151=$ob_addr_i; //@line 772 "cPickle.c"
        var $152=$151; //@line 772 "cPickle.c"
        var $153=HEAP[$152]; //@line 772 "cPickle.c"
        var $154=($153) <= 1; //@line 772 "cPickle.c"
        if ($154) { __label__ = 32; break; } else { __label__ = 31; break; } //@line 772 "cPickle.c"
      case 31: // $bb_i
        var $155=$self_addr_i; //@line 772 "cPickle.c"
        var $156=$155+44; //@line 772 "cPickle.c"
        var $157=HEAP[$156]; //@line 772 "cPickle.c"
        var $158=($157)!=0; //@line 772 "cPickle.c"
        if ($158) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 772 "cPickle.c"
      case 32: // $put_exit_thread
        $0=0; //@line 773 "cPickle.c"
        $retval_i=0; //@line 773 "cPickle.c"
        __label__ = 35; break;
      case 33: // $put_exit
        var $159=$self_addr_i; //@line 775 "cPickle.c"
        var $160=$ob_addr_i; //@line 775 "cPickle.c"
        var $161=_put2($159, $160); //@line 775 "cPickle.c"
        $0=$161; //@line 775 "cPickle.c"
        $retval_i=$161; //@line 773 "cPickle.c"
        var $162=($161) < 0; //@line 1268 "cPickle.c"
        if ($162) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1268 "cPickle.c"
      case 34: // $bb33
        $1=-1; //@line 1269 "cPickle.c"
        __label__ = 40; break; //@line 1269 "cPickle.c"
      case 35: // $bb34
        $1=0; //@line 1271 "cPickle.c"
        __label__ = 40; break; //@line 1271 "cPickle.c"
      case 36: // $err
        var $163=$repr; //@line 1274 "cPickle.c"
        var $164=($163)!=0; //@line 1274 "cPickle.c"
        if ($164) { __label__ = 37; break; } else { __label__ = 39; break; } //@line 1274 "cPickle.c"
      case 37: // $bb35
        var $165=$repr; //@line 1274 "cPickle.c"
        var $166=$165; //@line 1274 "cPickle.c"
        var $167=HEAP[$166]; //@line 1274 "cPickle.c"
        var $168=($167) - 1; //@line 1274 "cPickle.c"
        var $169=$repr; //@line 1274 "cPickle.c"
        var $170=$169; //@line 1274 "cPickle.c"
        HEAP[$170]=$168; //@line 1274 "cPickle.c"
        var $171=$repr; //@line 1274 "cPickle.c"
        var $172=$171; //@line 1274 "cPickle.c"
        var $173=HEAP[$172]; //@line 1274 "cPickle.c"
        var $174=($173)==0; //@line 1274 "cPickle.c"
        if ($174) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1274 "cPickle.c"
      case 38: // $bb36
        var $175=$repr; //@line 1274 "cPickle.c"
        var $176=$175+4; //@line 1274 "cPickle.c"
        var $177=HEAP[$176]; //@line 1274 "cPickle.c"
        var $178=$177+24; //@line 1274 "cPickle.c"
        var $179=HEAP[$178]; //@line 1274 "cPickle.c"
        var $180=$repr; //@line 1274 "cPickle.c"
        FUNCTION_TABLE[$179]($180); //@line 1274 "cPickle.c"
        __label__ = 39; break; //@line 1274 "cPickle.c"
      case 39: // $bb37
        $1=-1; //@line 1275 "cPickle.c"
        __label__ = 40; break; //@line 1275 "cPickle.c"
      case 40: // $bb38
        var $181=$1; //@line 1208 "cPickle.c"
        $retval=$181; //@line 1208 "cPickle.c"
        var $retval39=$retval; //@line 1208 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval39; //@line 1208 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_unicode($self, $args, $doput) {
    var __stackBase__  = STACKTOP; STACKTOP += 9; _memset(__stackBase__, 0, 9);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr_i;
        var $ob_addr_i;
        var $retval_i1;
        var $0;
        var $s_addr_i;
        var $size_addr_i;
        var $retval_i;
        var $1;
        var $repr_i=__stackBase__;
        var $p_i;
        var $q_i;
        var $expandsize_i;
        var $ch_i;
        var $ch2_i;
        var $ucs_i;
        var $self_addr;
        var $args_addr;
        var $doput_addr;
        var $retval;
        var $2;
        var $size;
        var $len;
        var $repr;
        var $repr_str;
        var $i;
        var $c_str=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        $doput_addr=$doput;
        $repr=0; //@line 1372 "cPickle.c"
        var $3=$args_addr; //@line 1374 "cPickle.c"
        var $4=$3+4; //@line 1374 "cPickle.c"
        var $5=HEAP[$4]; //@line 1374 "cPickle.c"
        var $6=$5+84; //@line 1374 "cPickle.c"
        var $7=HEAP[$6]; //@line 1374 "cPickle.c"
        var $8=($7) & 268435456; //@line 1374 "cPickle.c"
        var $9=($8)==0; //@line 1374 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1374 "cPickle.c"
      case 1: // $bb
        $2=-1; //@line 1375 "cPickle.c"
        __label__ = 55; break; //@line 1375 "cPickle.c"
      case 2: // $bb1
        var $10=$self_addr; //@line 1377 "cPickle.c"
        var $11=$10+40; //@line 1377 "cPickle.c"
        var $12=HEAP[$11]; //@line 1377 "cPickle.c"
        var $13=($12)==0; //@line 1377 "cPickle.c"
        var $14=$args_addr; //@line 1381 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 28; break; } //@line 1377 "cPickle.c"
      case 3: // $bb2
        var $15=$14; //@line 1381 "cPickle.c"
        var $16=$15+8; //@line 1381 "cPickle.c"
        var $17=HEAP[$16]; //@line 1381 "cPickle.c"
        var $18=$args_addr; //@line 1381 "cPickle.c"
        var $19=$18; //@line 1381 "cPickle.c"
        var $20=$19+12; //@line 1381 "cPickle.c"
        var $21=HEAP[$20]; //@line 1381 "cPickle.c"
        $s_addr_i=$21;
        $size_addr_i=$17;
        $expandsize_i=6; //@line 1293 "cPickle.c"
        var $22=$expandsize_i; //@line 1296 "cPickle.c"
        var $23=((2147483647/($22))|0); //@line 1296 "cPickle.c"
        var $24=$size_addr_i; //@line 1296 "cPickle.c"
        var $25=($23) < ($24); //@line 1296 "cPickle.c"
        if ($25) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1296 "cPickle.c"
      case 4: // $bb_i
        var $26=_PyErr_NoMemory(); //@line 1297 "cPickle.c"
        $1=$26; //@line 1297 "cPickle.c"
        __lastLabel__ = 4; __label__ = 19; break; //@line 1297 "cPickle.c"
      case 5: // $bb1_i
        var $27=$expandsize_i; //@line 1299 "cPickle.c"
        var $28=$size_addr_i; //@line 1299 "cPickle.c"
        var $29=($28) * ($27); //@line 1299 "cPickle.c"
        var $30=_PyString_FromStringAndSize(0, $29); //@line 1299 "cPickle.c"
        HEAP[$repr_i]=$30; //@line 1299 "cPickle.c"
        var $31=HEAP[$repr_i]; //@line 1300 "cPickle.c"
        var $32=($31)==0; //@line 1300 "cPickle.c"
        if ($32) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1300 "cPickle.c"
      case 6: // $modified_EncodeRawUnicodeEscape_exit_thread
        $1=0; //@line 1301 "cPickle.c"
        $retval_i=0; //@line 1297 "cPickle.c"
        $repr=0; //@line 1381 "cPickle.c"
        __label__ = 20; break;
      case 7: // $bb3_i
        var $33=$size_addr_i; //@line 1302 "cPickle.c"
        var $34=($33)==0; //@line 1302 "cPickle.c"
        var $35=HEAP[$repr_i]; //@line 1303 "cPickle.c"
        if ($34) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1302 "cPickle.c"
      case 8: // $bb4_i
        $1=$35; //@line 1303 "cPickle.c"
        __lastLabel__ = 8; __label__ = 19; break; //@line 1303 "cPickle.c"
      case 9: // $bb5_i
        var $36=$35; //@line 1305 "cPickle.c"
        var $37=$36+20; //@line 1305 "cPickle.c"
        var $38=$37; //@line 1305 "cPickle.c"
        $q_i=$38; //@line 1305 "cPickle.c"
        var $39=$q_i; //@line 1305 "cPickle.c"
        $p_i=$39; //@line 1305 "cPickle.c"
        var $40=$size_addr_i; //@line 1306 "cPickle.c"
        var $41=($40) > 0; //@line 1306 "cPickle.c"
        var $42=$size_addr_i; //@line 1306 "cPickle.c"
        var $43=($42) - 1; //@line 1306 "cPickle.c"
        $size_addr_i=$43; //@line 1306 "cPickle.c"
        if ($41) { __label__ = 10; break; } else { __label__ = 18; break; } //@line 1306 "cPickle.c"
      case 10: // $bb6_i
        var $44=$s_addr_i; //@line 1307 "cPickle.c"
        var $45=HEAP[$44]; //@line 1307 "cPickle.c"
        $ch_i=$45; //@line 1307 "cPickle.c"
        var $46=$s_addr_i; //@line 1307 "cPickle.c"
        var $47=$46+2; //@line 1307 "cPickle.c"
        $s_addr_i=$47; //@line 1307 "cPickle.c"
        var $48=$ch_i; //@line 1325 "cPickle.c"
        var $49=($48) > 55295; //@line 1325 "cPickle.c"
        var $50=$ch_i; //@line 1325 "cPickle.c"
        var $51=($50) <= 56319; //@line 1325 "cPickle.c"
        var $or_cond_i=($49) & ($51);
        if ($or_cond_i) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 1325 "cPickle.c"
      case 11: // $bb8_i
        var $52=$s_addr_i; //@line 1329 "cPickle.c"
        var $53=HEAP[$52]; //@line 1329 "cPickle.c"
        $ch2_i=$53; //@line 1329 "cPickle.c"
        var $54=$s_addr_i; //@line 1329 "cPickle.c"
        var $55=$54+2; //@line 1329 "cPickle.c"
        $s_addr_i=$55; //@line 1329 "cPickle.c"
        var $56=$size_addr_i; //@line 1330 "cPickle.c"
        var $57=($56) - 1; //@line 1330 "cPickle.c"
        $size_addr_i=$57; //@line 1330 "cPickle.c"
        var $58=$ch2_i; //@line 1331 "cPickle.c"
        var $59=($58) > 56319; //@line 1331 "cPickle.c"
        var $60=$ch2_i; //@line 1331 "cPickle.c"
        var $61=($60) <= 57343; //@line 1331 "cPickle.c"
        var $or_cond3_i=($59) & ($61);
        if ($or_cond3_i) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 1331 "cPickle.c"
      case 12: // $bb10_i
        var $62=$ch_i; //@line 1332 "cPickle.c"
        var $63=($62); //@line 1332 "cPickle.c"
        var $64=($63) & 1023; //@line 1332 "cPickle.c"
        var $65=($64) << 10; //@line 1332 "cPickle.c"
        var $66=$ch2_i; //@line 1332 "cPickle.c"
        var $67=($66); //@line 1332 "cPickle.c"
        var $68=($67) & 1023; //@line 1332 "cPickle.c"
        var $69=($65) | ($68); //@line 1332 "cPickle.c"
        var $70=($69) + 65536; //@line 1332 "cPickle.c"
        $ucs_i=$70; //@line 1332 "cPickle.c"
        var $71=$p_i; //@line 1333 "cPickle.c"
        HEAP[$71]=92; //@line 1333 "cPickle.c"
        var $72=$p_i; //@line 1333 "cPickle.c"
        var $73=$72+1; //@line 1333 "cPickle.c"
        $p_i=$73; //@line 1333 "cPickle.c"
        var $74=$p_i; //@line 1334 "cPickle.c"
        HEAP[$74]=85; //@line 1334 "cPickle.c"
        var $75=$p_i; //@line 1334 "cPickle.c"
        var $76=$75+1; //@line 1334 "cPickle.c"
        $p_i=$76; //@line 1334 "cPickle.c"
        var $77=$ucs_i; //@line 1335 "cPickle.c"
        var $78=($77) >>> 28; //@line 1335 "cPickle.c"
        var $79=($78) & 15; //@line 1335 "cPickle.c"
        var $80=__str13+$79; //@line 1335 "cPickle.c"
        var $81=HEAP[$80]; //@line 1335 "cPickle.c"
        var $82=$p_i; //@line 1335 "cPickle.c"
        HEAP[$82]=$81; //@line 1335 "cPickle.c"
        var $83=$p_i; //@line 1335 "cPickle.c"
        var $84=$83+1; //@line 1335 "cPickle.c"
        $p_i=$84; //@line 1335 "cPickle.c"
        var $85=$ucs_i; //@line 1336 "cPickle.c"
        var $86=($85) >>> 24; //@line 1336 "cPickle.c"
        var $87=($86) & 15; //@line 1336 "cPickle.c"
        var $88=__str13+$87; //@line 1336 "cPickle.c"
        var $89=HEAP[$88]; //@line 1336 "cPickle.c"
        var $90=$p_i; //@line 1336 "cPickle.c"
        HEAP[$90]=$89; //@line 1336 "cPickle.c"
        var $91=$p_i; //@line 1336 "cPickle.c"
        var $92=$91+1; //@line 1336 "cPickle.c"
        $p_i=$92; //@line 1336 "cPickle.c"
        var $93=$ucs_i; //@line 1337 "cPickle.c"
        var $94=($93) >>> 20; //@line 1337 "cPickle.c"
        var $95=($94) & 15; //@line 1337 "cPickle.c"
        var $96=__str13+$95; //@line 1337 "cPickle.c"
        var $97=HEAP[$96]; //@line 1337 "cPickle.c"
        var $98=$p_i; //@line 1337 "cPickle.c"
        HEAP[$98]=$97; //@line 1337 "cPickle.c"
        var $99=$p_i; //@line 1337 "cPickle.c"
        var $100=$99+1; //@line 1337 "cPickle.c"
        $p_i=$100; //@line 1337 "cPickle.c"
        var $101=$ucs_i; //@line 1338 "cPickle.c"
        var $102=($101) >>> 16; //@line 1338 "cPickle.c"
        var $103=($102) & 15; //@line 1338 "cPickle.c"
        var $104=__str13+$103; //@line 1338 "cPickle.c"
        var $105=HEAP[$104]; //@line 1338 "cPickle.c"
        var $106=$p_i; //@line 1338 "cPickle.c"
        HEAP[$106]=$105; //@line 1338 "cPickle.c"
        var $107=$p_i; //@line 1338 "cPickle.c"
        var $108=$107+1; //@line 1338 "cPickle.c"
        $p_i=$108; //@line 1338 "cPickle.c"
        var $109=$ucs_i; //@line 1339 "cPickle.c"
        var $110=($109) >>> 12; //@line 1339 "cPickle.c"
        var $111=($110) & 15; //@line 1339 "cPickle.c"
        var $112=__str13+$111; //@line 1339 "cPickle.c"
        var $113=HEAP[$112]; //@line 1339 "cPickle.c"
        var $114=$p_i; //@line 1339 "cPickle.c"
        HEAP[$114]=$113; //@line 1339 "cPickle.c"
        var $115=$p_i; //@line 1339 "cPickle.c"
        var $116=$115+1; //@line 1339 "cPickle.c"
        $p_i=$116; //@line 1339 "cPickle.c"
        var $117=$ucs_i; //@line 1340 "cPickle.c"
        var $118=($117) >>> 8; //@line 1340 "cPickle.c"
        var $119=($118) & 15; //@line 1340 "cPickle.c"
        var $120=__str13+$119; //@line 1340 "cPickle.c"
        var $121=HEAP[$120]; //@line 1340 "cPickle.c"
        var $122=$p_i; //@line 1340 "cPickle.c"
        HEAP[$122]=$121; //@line 1340 "cPickle.c"
        var $123=$p_i; //@line 1340 "cPickle.c"
        var $124=$123+1; //@line 1340 "cPickle.c"
        $p_i=$124; //@line 1340 "cPickle.c"
        var $125=$ucs_i; //@line 1341 "cPickle.c"
        var $126=($125) >>> 4; //@line 1341 "cPickle.c"
        var $127=($126) & 15; //@line 1341 "cPickle.c"
        var $128=__str13+$127; //@line 1341 "cPickle.c"
        var $129=HEAP[$128]; //@line 1341 "cPickle.c"
        var $130=$p_i; //@line 1341 "cPickle.c"
        HEAP[$130]=$129; //@line 1341 "cPickle.c"
        var $131=$p_i; //@line 1341 "cPickle.c"
        var $132=$131+1; //@line 1341 "cPickle.c"
        $p_i=$132; //@line 1341 "cPickle.c"
        var $133=$ucs_i; //@line 1342 "cPickle.c"
        var $134=($133) & 15; //@line 1342 "cPickle.c"
        var $135=__str13+$134; //@line 1342 "cPickle.c"
        var $136=HEAP[$135]; //@line 1342 "cPickle.c"
        var $137=$p_i; //@line 1342 "cPickle.c"
        HEAP[$137]=$136; //@line 1342 "cPickle.c"
        var $138=$p_i; //@line 1342 "cPickle.c"
        var $139=$138+1; //@line 1342 "cPickle.c"
        $p_i=$139; //@line 1342 "cPickle.c"
        __label__ = 13; break; //@line 1342 "cPickle.c"
      case 13: // $bb17_backedge_i
        var $140=$size_addr_i; //@line 1306 "cPickle.c"
        var $141=($140) > 0; //@line 1306 "cPickle.c"
        var $142=($141); //@line 1306 "cPickle.c"
        var $143=$size_addr_i; //@line 1306 "cPickle.c"
        var $144=($143) - 1; //@line 1306 "cPickle.c"
        $size_addr_i=$144; //@line 1306 "cPickle.c"
        var $toBool_i=($142)!=0; //@line 1306 "cPickle.c"
        if ($toBool_i) { __label__ = 10; break; } else { __label__ = 18; break; } //@line 1306 "cPickle.c"
      case 14: // $bb11_i
        var $145=$s_addr_i; //@line 1346 "cPickle.c"
        var $146=$145+-2; //@line 1346 "cPickle.c"
        $s_addr_i=$146; //@line 1346 "cPickle.c"
        var $147=$size_addr_i; //@line 1347 "cPickle.c"
        var $148=($147) + 1; //@line 1347 "cPickle.c"
        $size_addr_i=$148; //@line 1347 "cPickle.c"
        __label__ = 15; break; //@line 1347 "cPickle.c"
      case 15: // $bb12_i
        var $149=$ch_i; //@line 1351 "cPickle.c"
        var $150=($149) > 255; //@line 1351 "cPickle.c"
        var $151=$ch_i; //@line 1351 "cPickle.c"
        var $152=($151)==92; //@line 1351 "cPickle.c"
        var $or_cond5_i=($150) | ($152);
        var $153=$ch_i; //@line 1351 "cPickle.c"
        var $154=($153)==10; //@line 1351 "cPickle.c"
        var $or_cond7_i=($or_cond5_i) | ($154);
        if ($or_cond7_i) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1351 "cPickle.c"
      case 16: // $bb15_i
        var $155=$p_i; //@line 1352 "cPickle.c"
        HEAP[$155]=92; //@line 1352 "cPickle.c"
        var $156=$p_i; //@line 1352 "cPickle.c"
        var $157=$156+1; //@line 1352 "cPickle.c"
        $p_i=$157; //@line 1352 "cPickle.c"
        var $158=$p_i; //@line 1353 "cPickle.c"
        HEAP[$158]=117; //@line 1353 "cPickle.c"
        var $159=$p_i; //@line 1353 "cPickle.c"
        var $160=$159+1; //@line 1353 "cPickle.c"
        $p_i=$160; //@line 1353 "cPickle.c"
        var $161=$ch_i; //@line 1354 "cPickle.c"
        var $162=($161) >>> 12; //@line 1354 "cPickle.c"
        var $163=($162); //@line 1354 "cPickle.c"
        var $164=($163) & 15; //@line 1354 "cPickle.c"
        var $165=__str13+$164; //@line 1354 "cPickle.c"
        var $166=HEAP[$165]; //@line 1354 "cPickle.c"
        var $167=$p_i; //@line 1354 "cPickle.c"
        HEAP[$167]=$166; //@line 1354 "cPickle.c"
        var $168=$p_i; //@line 1354 "cPickle.c"
        var $169=$168+1; //@line 1354 "cPickle.c"
        $p_i=$169; //@line 1354 "cPickle.c"
        var $170=$ch_i; //@line 1355 "cPickle.c"
        var $171=($170) >>> 8; //@line 1355 "cPickle.c"
        var $172=($171); //@line 1355 "cPickle.c"
        var $173=($172) & 15; //@line 1355 "cPickle.c"
        var $174=__str13+$173; //@line 1355 "cPickle.c"
        var $175=HEAP[$174]; //@line 1355 "cPickle.c"
        var $176=$p_i; //@line 1355 "cPickle.c"
        HEAP[$176]=$175; //@line 1355 "cPickle.c"
        var $177=$p_i; //@line 1355 "cPickle.c"
        var $178=$177+1; //@line 1355 "cPickle.c"
        $p_i=$178; //@line 1355 "cPickle.c"
        var $179=$ch_i; //@line 1356 "cPickle.c"
        var $180=($179) >>> 4; //@line 1356 "cPickle.c"
        var $181=($180); //@line 1356 "cPickle.c"
        var $182=($181) & 15; //@line 1356 "cPickle.c"
        var $183=__str13+$182; //@line 1356 "cPickle.c"
        var $184=HEAP[$183]; //@line 1356 "cPickle.c"
        var $185=$p_i; //@line 1356 "cPickle.c"
        HEAP[$185]=$184; //@line 1356 "cPickle.c"
        var $186=$p_i; //@line 1356 "cPickle.c"
        var $187=$186+1; //@line 1356 "cPickle.c"
        $p_i=$187; //@line 1356 "cPickle.c"
        var $188=$ch_i; //@line 1357 "cPickle.c"
        var $189=($188); //@line 1357 "cPickle.c"
        var $190=($189) & 15; //@line 1357 "cPickle.c"
        var $191=__str13+$190; //@line 1357 "cPickle.c"
        var $192=HEAP[$191]; //@line 1357 "cPickle.c"
        var $193=$p_i; //@line 1357 "cPickle.c"
        HEAP[$193]=$192; //@line 1357 "cPickle.c"
        var $194=$p_i; //@line 1357 "cPickle.c"
        var $195=$194+1; //@line 1357 "cPickle.c"
        $p_i=$195; //@line 1357 "cPickle.c"
        __label__ = 13; break; //@line 1357 "cPickle.c"
      case 17: // $bb16_i
        var $196=$ch_i; //@line 1361 "cPickle.c"
        var $197=((($196)) & 255); //@line 1361 "cPickle.c"
        var $198=$p_i; //@line 1361 "cPickle.c"
        HEAP[$198]=$197; //@line 1361 "cPickle.c"
        var $199=$p_i; //@line 1361 "cPickle.c"
        var $200=$199+1; //@line 1361 "cPickle.c"
        $p_i=$200; //@line 1361 "cPickle.c"
        __label__ = 13; break; //@line 1361 "cPickle.c"
      case 18: // $bb18_i
        var $201=$p_i; //@line 1363 "cPickle.c"
        HEAP[$201]=0; //@line 1363 "cPickle.c"
        var $202=$p_i; //@line 1364 "cPickle.c"
        var $203=($202); //@line 1364 "cPickle.c"
        var $204=$q_i; //@line 1364 "cPickle.c"
        var $205=($204); //@line 1364 "cPickle.c"
        var $206=($203) - ($205); //@line 1364 "cPickle.c"
        var $207=__PyString_Resize($repr_i, $206); //@line 1364 "cPickle.c"
        var $208=HEAP[$repr_i]; //@line 1365 "cPickle.c"
        $1=$208; //@line 1365 "cPickle.c"
        __lastLabel__ = 18; __label__ = 19; break; //@line 1365 "cPickle.c"
      case 19: // $modified_EncodeRawUnicodeEscape_exit
        var $209=__lastLabel__ == 4 ? $26 : (__lastLabel__ == 8 ? $35 : ($208));
        $retval_i=$209; //@line 1297 "cPickle.c"
        $repr=$209; //@line 1381 "cPickle.c"
        var $210=($209)==0; //@line 1383 "cPickle.c"
        if ($210) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1383 "cPickle.c"
      case 20: // $bb3
        $2=-1; //@line 1384 "cPickle.c"
        __label__ = 55; break; //@line 1384 "cPickle.c"
      case 21: // $bb4
        var $211=$repr; //@line 1386 "cPickle.c"
        var $212=_PyString_Size($211); //@line 1386 "cPickle.c"
        $len=$212; //@line 1386 "cPickle.c"
        var $213=$len; //@line 1386 "cPickle.c"
        var $214=($213) < 0; //@line 1386 "cPickle.c"
        if ($214) { __label__ = 51; break; } else { __label__ = 22; break; } //@line 1386 "cPickle.c"
      case 22: // $bb5
        var $215=$repr; //@line 1388 "cPickle.c"
        var $216=$215; //@line 1388 "cPickle.c"
        var $217=$216+20; //@line 1388 "cPickle.c"
        var $218=$217; //@line 1388 "cPickle.c"
        $repr_str=$218; //@line 1388 "cPickle.c"
        var $219=$self_addr; //@line 1390 "cPickle.c"
        var $220=$219+48; //@line 1390 "cPickle.c"
        var $221=HEAP[$220]; //@line 1390 "cPickle.c"
        var $222=$self_addr; //@line 1390 "cPickle.c"
        var $223=FUNCTION_TABLE[$221]($222, _string_9895, 1); //@line 1390 "cPickle.c"
        var $224=($223) < 0; //@line 1390 "cPickle.c"
        if ($224) { __label__ = 51; break; } else { __label__ = 23; break; } //@line 1390 "cPickle.c"
      case 23: // $bb6
        var $225=$self_addr; //@line 1393 "cPickle.c"
        var $226=$225+48; //@line 1393 "cPickle.c"
        var $227=HEAP[$226]; //@line 1393 "cPickle.c"
        var $228=$self_addr; //@line 1393 "cPickle.c"
        var $229=$repr_str; //@line 1393 "cPickle.c"
        var $230=$len; //@line 1393 "cPickle.c"
        var $231=FUNCTION_TABLE[$227]($228, $229, $230); //@line 1393 "cPickle.c"
        var $232=($231) < 0; //@line 1393 "cPickle.c"
        if ($232) { __label__ = 51; break; } else { __label__ = 24; break; } //@line 1393 "cPickle.c"
      case 24: // $bb7
        var $233=$self_addr; //@line 1396 "cPickle.c"
        var $234=$233+48; //@line 1396 "cPickle.c"
        var $235=HEAP[$234]; //@line 1396 "cPickle.c"
        var $236=$self_addr; //@line 1396 "cPickle.c"
        var $237=FUNCTION_TABLE[$235]($236, __str12, 1); //@line 1396 "cPickle.c"
        var $238=($237) < 0; //@line 1396 "cPickle.c"
        if ($238) { __label__ = 51; break; } else { __label__ = 25; break; } //@line 1396 "cPickle.c"
      case 25: // $bb8
        var $239=$repr; //@line 1399 "cPickle.c"
        var $240=($239)!=0; //@line 1399 "cPickle.c"
        if ($240) { __label__ = 26; break; } else { __label__ = 44; break; } //@line 1399 "cPickle.c"
      case 26: // $bb9
        var $241=$repr; //@line 1399 "cPickle.c"
        var $242=$241; //@line 1399 "cPickle.c"
        var $243=HEAP[$242]; //@line 1399 "cPickle.c"
        var $244=($243) - 1; //@line 1399 "cPickle.c"
        var $245=$repr; //@line 1399 "cPickle.c"
        var $246=$245; //@line 1399 "cPickle.c"
        HEAP[$246]=$244; //@line 1399 "cPickle.c"
        var $247=$repr; //@line 1399 "cPickle.c"
        var $248=$247; //@line 1399 "cPickle.c"
        var $249=HEAP[$248]; //@line 1399 "cPickle.c"
        var $250=($249)==0; //@line 1399 "cPickle.c"
        if ($250) { __label__ = 27; break; } else { __label__ = 44; break; } //@line 1399 "cPickle.c"
      case 27: // $bb10
        var $251=$repr; //@line 1399 "cPickle.c"
        var $252=$251+4; //@line 1399 "cPickle.c"
        var $253=HEAP[$252]; //@line 1399 "cPickle.c"
        var $254=$253+24; //@line 1399 "cPickle.c"
        var $255=HEAP[$254]; //@line 1399 "cPickle.c"
        var $256=$repr; //@line 1399 "cPickle.c"
        FUNCTION_TABLE[$255]($256); //@line 1399 "cPickle.c"
        __label__ = 44; break; //@line 1399 "cPickle.c"
      case 28: // $bb12
        var $257=_PyUnicodeUCS2_AsUTF8String($14); //@line 1405 "cPickle.c"
        $repr=$257; //@line 1405 "cPickle.c"
        var $258=$repr; //@line 1405 "cPickle.c"
        var $259=($258)==0; //@line 1405 "cPickle.c"
        if ($259) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1405 "cPickle.c"
      case 29: // $bb13
        $2=-1; //@line 1406 "cPickle.c"
        __label__ = 55; break; //@line 1406 "cPickle.c"
      case 30: // $bb14
        var $260=$repr; //@line 1408 "cPickle.c"
        var $261=_PyString_Size($260); //@line 1408 "cPickle.c"
        $size=$261; //@line 1408 "cPickle.c"
        var $262=$size; //@line 1408 "cPickle.c"
        var $263=($262) < 0; //@line 1408 "cPickle.c"
        if ($263) { __label__ = 51; break; } else { __label__ = 31; break; } //@line 1408 "cPickle.c"
      case 31: // $bb15
        var $264=$c_str; //@line 1413 "cPickle.c"
        HEAP[$264]=88; //@line 1413 "cPickle.c"
        $i=1; //@line 1414 "cPickle.c"
        __label__ = 32; break;
      case 32: // $bb16
        var $265=$i; //@line 1415 "cPickle.c"
        var $266=$i; //@line 1415 "cPickle.c"
        var $267=($266) * 8; //@line 1415 "cPickle.c"
        var $268=($267) + -8; //@line 1415 "cPickle.c"
        var $269=$size; //@line 1415 "cPickle.c"
        var $270=($269) >> ($268); //@line 1415 "cPickle.c"
        var $271=((($270)) & 255); //@line 1415 "cPickle.c"
        var $272=$c_str+$265; //@line 1415 "cPickle.c"
        HEAP[$272]=$271; //@line 1415 "cPickle.c"
        var $273=$i; //@line 1414 "cPickle.c"
        var $274=($273) + 1; //@line 1414 "cPickle.c"
        $i=$274; //@line 1414 "cPickle.c"
        var $275=($274) <= 4; //@line 1414 "cPickle.c"
        if ($275) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1414 "cPickle.c"
      case 33: // $bb18
        $len=5; //@line 1416 "cPickle.c"
        var $276=$self_addr; //@line 1418 "cPickle.c"
        var $277=$276+48; //@line 1418 "cPickle.c"
        var $278=HEAP[$277]; //@line 1418 "cPickle.c"
        var $279=$self_addr; //@line 1418 "cPickle.c"
        var $c_str19=$c_str; //@line 1418 "cPickle.c"
        var $280=$len; //@line 1418 "cPickle.c"
        var $281=FUNCTION_TABLE[$278]($279, $c_str19, $280); //@line 1418 "cPickle.c"
        var $282=($281) < 0; //@line 1418 "cPickle.c"
        if ($282) { __label__ = 51; break; } else { __label__ = 34; break; } //@line 1418 "cPickle.c"
      case 34: // $bb20
        var $283=$size; //@line 1421 "cPickle.c"
        var $284=($283) <= 128; //@line 1421 "cPickle.c"
        if ($284) { __label__ = 41; break; } else { __label__ = 35; break; } //@line 1421 "cPickle.c"
      case 35: // $bb21
        var $285=$self_addr; //@line 1421 "cPickle.c"
        var $286=$285+16; //@line 1421 "cPickle.c"
        var $287=HEAP[$286]; //@line 1421 "cPickle.c"
        var $288=$287+4; //@line 1421 "cPickle.c"
        var $289=HEAP[$288]; //@line 1421 "cPickle.c"
        var $290=($289)!=(_PdataType); //@line 1421 "cPickle.c"
        if ($290) { __label__ = 41; break; } else { __label__ = 36; break; } //@line 1421 "cPickle.c"
      case 36: // $bb22
        var $291=$self_addr; //@line 1422 "cPickle.c"
        var $292=_write_other($291, 0, 0); //@line 1422 "cPickle.c"
        var $293=($292) < 0; //@line 1422 "cPickle.c"
        if ($293) { __label__ = 51; break; } else { __label__ = 37; break; } //@line 1422 "cPickle.c"
      case 37: // $bb23
        var $294=$self_addr; //@line 1424 "cPickle.c"
        var $295=$294+16; //@line 1424 "cPickle.c"
        var $296=HEAP[$295]; //@line 1424 "cPickle.c"
        var $297=$296; //@line 1424 "cPickle.c"
        var $298=$297+8; //@line 1424 "cPickle.c"
        var $299=HEAP[$298]; //@line 1424 "cPickle.c"
        var $300=$self_addr; //@line 1424 "cPickle.c"
        var $301=$300+16; //@line 1424 "cPickle.c"
        var $302=HEAP[$301]; //@line 1424 "cPickle.c"
        var $303=$302; //@line 1424 "cPickle.c"
        var $304=$303+12; //@line 1424 "cPickle.c"
        var $305=HEAP[$304]; //@line 1424 "cPickle.c"
        var $306=($299)==($305); //@line 1424 "cPickle.c"
        if ($306) { __label__ = 38; break; } else { __label__ = 40; break; } //@line 1424 "cPickle.c"
      case 38: // $bb24
        var $307=$self_addr; //@line 1424 "cPickle.c"
        var $308=$307+16; //@line 1424 "cPickle.c"
        var $309=HEAP[$308]; //@line 1424 "cPickle.c"
        var $310=$309; //@line 1424 "cPickle.c"
        var $311=_Pdata_grow($310); //@line 1424 "cPickle.c"
        var $312=($311) < 0; //@line 1424 "cPickle.c"
        if ($312) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 1424 "cPickle.c"
      case 39: // $bb25
        $2=-1; //@line 1424 "cPickle.c"
        __label__ = 55; break; //@line 1424 "cPickle.c"
      case 40: // $bb26
        var $313=$repr; //@line 1424 "cPickle.c"
        var $314=$313; //@line 1424 "cPickle.c"
        var $315=HEAP[$314]; //@line 1424 "cPickle.c"
        var $316=($315) + 1; //@line 1424 "cPickle.c"
        var $317=$repr; //@line 1424 "cPickle.c"
        var $318=$317; //@line 1424 "cPickle.c"
        HEAP[$318]=$316; //@line 1424 "cPickle.c"
        var $319=$self_addr; //@line 1424 "cPickle.c"
        var $320=$319+16; //@line 1424 "cPickle.c"
        var $321=HEAP[$320]; //@line 1424 "cPickle.c"
        var $322=$321; //@line 1424 "cPickle.c"
        var $323=$322+16; //@line 1424 "cPickle.c"
        var $324=HEAP[$323]; //@line 1424 "cPickle.c"
        var $325=$self_addr; //@line 1424 "cPickle.c"
        var $326=$325+16; //@line 1424 "cPickle.c"
        var $327=HEAP[$326]; //@line 1424 "cPickle.c"
        var $328=$327; //@line 1424 "cPickle.c"
        var $329=$328+8; //@line 1424 "cPickle.c"
        var $330=HEAP[$329]; //@line 1424 "cPickle.c"
        var $331=$324+4*$330; //@line 1424 "cPickle.c"
        var $332=$repr; //@line 1424 "cPickle.c"
        HEAP[$331]=$332; //@line 1424 "cPickle.c"
        var $333=($330) + 1; //@line 1424 "cPickle.c"
        var $334=$328+8; //@line 1424 "cPickle.c"
        HEAP[$334]=$333; //@line 1424 "cPickle.c"
        __label__ = 42; break; //@line 1424 "cPickle.c"
      case 41: // $bb27
        var $335=$self_addr; //@line 1427 "cPickle.c"
        var $336=$335+48; //@line 1427 "cPickle.c"
        var $337=HEAP[$336]; //@line 1427 "cPickle.c"
        var $338=$repr; //@line 1427 "cPickle.c"
        var $339=$338; //@line 1427 "cPickle.c"
        var $340=$339+20; //@line 1427 "cPickle.c"
        var $341=$340; //@line 1427 "cPickle.c"
        var $342=$self_addr; //@line 1427 "cPickle.c"
        var $343=$size; //@line 1427 "cPickle.c"
        var $344=FUNCTION_TABLE[$337]($342, $341, $343); //@line 1427 "cPickle.c"
        var $345=($344) < 0; //@line 1427 "cPickle.c"
        if ($345) { __label__ = 51; break; } else { __label__ = 42; break; } //@line 1427 "cPickle.c"
      case 42: // $bb28
        var $346=$repr; //@line 1432 "cPickle.c"
        var $347=$346; //@line 1432 "cPickle.c"
        var $348=HEAP[$347]; //@line 1432 "cPickle.c"
        var $349=($348) - 1; //@line 1432 "cPickle.c"
        var $350=$repr; //@line 1432 "cPickle.c"
        var $351=$350; //@line 1432 "cPickle.c"
        HEAP[$351]=$349; //@line 1432 "cPickle.c"
        var $352=$repr; //@line 1432 "cPickle.c"
        var $353=$352; //@line 1432 "cPickle.c"
        var $354=HEAP[$353]; //@line 1432 "cPickle.c"
        var $355=($354)==0; //@line 1432 "cPickle.c"
        if ($355) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 1432 "cPickle.c"
      case 43: // $bb29
        var $356=$repr; //@line 1432 "cPickle.c"
        var $357=$356+4; //@line 1432 "cPickle.c"
        var $358=HEAP[$357]; //@line 1432 "cPickle.c"
        var $359=$358+24; //@line 1432 "cPickle.c"
        var $360=HEAP[$359]; //@line 1432 "cPickle.c"
        var $361=$repr; //@line 1432 "cPickle.c"
        FUNCTION_TABLE[$360]($361); //@line 1432 "cPickle.c"
        __label__ = 44; break; //@line 1432 "cPickle.c"
      case 44: // $bb30
        var $362=$doput_addr; //@line 1435 "cPickle.c"
        var $363=($362)!=0; //@line 1435 "cPickle.c"
        if ($363) { __label__ = 45; break; } else { __label__ = 50; break; } //@line 1435 "cPickle.c"
      case 45: // $bb31
        var $364=$self_addr; //@line 1436 "cPickle.c"
        var $365=$args_addr; //@line 1436 "cPickle.c"
        $self_addr_i=$364;
        $ob_addr_i=$365;
        var $366=$ob_addr_i; //@line 772 "cPickle.c"
        var $367=$366; //@line 772 "cPickle.c"
        var $368=HEAP[$367]; //@line 772 "cPickle.c"
        var $369=($368) <= 1; //@line 772 "cPickle.c"
        if ($369) { __label__ = 47; break; } else { __label__ = 46; break; } //@line 772 "cPickle.c"
      case 46: // $bb_i2
        var $370=$self_addr_i; //@line 772 "cPickle.c"
        var $371=$370+44; //@line 772 "cPickle.c"
        var $372=HEAP[$371]; //@line 772 "cPickle.c"
        var $373=($372)!=0; //@line 772 "cPickle.c"
        if ($373) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 772 "cPickle.c"
      case 47: // $put_exit_thread
        $0=0; //@line 773 "cPickle.c"
        $retval_i1=0; //@line 773 "cPickle.c"
        __label__ = 50; break;
      case 48: // $put_exit
        var $374=$self_addr_i; //@line 775 "cPickle.c"
        var $375=$ob_addr_i; //@line 775 "cPickle.c"
        var $376=_put2($374, $375); //@line 775 "cPickle.c"
        $0=$376; //@line 775 "cPickle.c"
        $retval_i1=$376; //@line 773 "cPickle.c"
        var $377=($376) < 0; //@line 1436 "cPickle.c"
        if ($377) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 1436 "cPickle.c"
      case 49: // $bb32
        $2=-1; //@line 1437 "cPickle.c"
        __label__ = 55; break; //@line 1437 "cPickle.c"
      case 50: // $bb33
        $2=0; //@line 1439 "cPickle.c"
        __label__ = 55; break; //@line 1439 "cPickle.c"
      case 51: // $err
        var $378=$repr; //@line 1442 "cPickle.c"
        var $379=($378)!=0; //@line 1442 "cPickle.c"
        if ($379) { __label__ = 52; break; } else { __label__ = 54; break; } //@line 1442 "cPickle.c"
      case 52: // $bb34
        var $380=$repr; //@line 1442 "cPickle.c"
        var $381=$380; //@line 1442 "cPickle.c"
        var $382=HEAP[$381]; //@line 1442 "cPickle.c"
        var $383=($382) - 1; //@line 1442 "cPickle.c"
        var $384=$repr; //@line 1442 "cPickle.c"
        var $385=$384; //@line 1442 "cPickle.c"
        HEAP[$385]=$383; //@line 1442 "cPickle.c"
        var $386=$repr; //@line 1442 "cPickle.c"
        var $387=$386; //@line 1442 "cPickle.c"
        var $388=HEAP[$387]; //@line 1442 "cPickle.c"
        var $389=($388)==0; //@line 1442 "cPickle.c"
        if ($389) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 1442 "cPickle.c"
      case 53: // $bb35
        var $390=$repr; //@line 1442 "cPickle.c"
        var $391=$390+4; //@line 1442 "cPickle.c"
        var $392=HEAP[$391]; //@line 1442 "cPickle.c"
        var $393=$392+24; //@line 1442 "cPickle.c"
        var $394=HEAP[$393]; //@line 1442 "cPickle.c"
        var $395=$repr; //@line 1442 "cPickle.c"
        FUNCTION_TABLE[$394]($395); //@line 1442 "cPickle.c"
        __label__ = 54; break; //@line 1442 "cPickle.c"
      case 54: // $bb36
        $2=-1; //@line 1443 "cPickle.c"
        __label__ = 55; break; //@line 1443 "cPickle.c"
      case 55: // $bb37
        var $396=$2; //@line 1375 "cPickle.c"
        $retval=$396; //@line 1375 "cPickle.c"
        var $retval38=$retval; //@line 1375 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval38; //@line 1375 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _store_tuple_elements($self, $t, $len) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $t_addr;
        var $len_addr;
        var $retval;
        var $0;
        var $i;
        var $res;
        var $element;
        $self_addr=$self;
        $t_addr=$t;
        $len_addr=$len;
        $res=-1; //@line 1452 "cPickle.c"
        var $1=$t_addr; //@line 1454 "cPickle.c"
        var $2=_PyTuple_Size($1); //@line 1454 "cPickle.c"
        var $3=$len_addr; //@line 1454 "cPickle.c"
        var $4=($2)!=($3); //@line 1454 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1454 "cPickle.c"
      case 1: // $bb
        ___assert_fail(__str14, __str15, 1454, ___PRETTY_FUNCTION___10017); //@line 1454 "cPickle.c"
        throw "Reached an unreachable!" //@line 1454 "cPickle.c"
      case 2: // $bb1
        $i=0; //@line 1456 "cPickle.c"
        __label__ = 6; break; //@line 1456 "cPickle.c"
      case 3: // $bb2
        var $5=$t_addr; //@line 1457 "cPickle.c"
        var $6=$5; //@line 1457 "cPickle.c"
        var $7=$i; //@line 1457 "cPickle.c"
        var $8=$6+12; //@line 1457 "cPickle.c"
        var $9=$8+$7*4; //@line 1457 "cPickle.c"
        var $10=HEAP[$9]; //@line 1457 "cPickle.c"
        $element=$10; //@line 1457 "cPickle.c"
        var $11=$element; //@line 1459 "cPickle.c"
        var $12=($11)==0; //@line 1459 "cPickle.c"
        if ($12) { __label__ = 8; break; } else { __label__ = 4; break; } //@line 1459 "cPickle.c"
      case 4: // $bb3
        var $13=$self_addr; //@line 1461 "cPickle.c"
        var $14=$element; //@line 1461 "cPickle.c"
        var $15=_save($13, $14, 0); //@line 1461 "cPickle.c"
        var $16=($15) < 0; //@line 1461 "cPickle.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 5; break; } //@line 1461 "cPickle.c"
      case 5: // $bb4
        var $17=$i; //@line 1456 "cPickle.c"
        var $18=($17) + 1; //@line 1456 "cPickle.c"
        $i=$18; //@line 1456 "cPickle.c"
        __label__ = 6; break; //@line 1456 "cPickle.c"
      case 6: // $bb5
        var $19=$i; //@line 1456 "cPickle.c"
        var $20=$len_addr; //@line 1456 "cPickle.c"
        var $21=($19) < ($20); //@line 1456 "cPickle.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 1456 "cPickle.c"
      case 7: // $bb6
        $res=0; //@line 1464 "cPickle.c"
        __label__ = 8; break; //@line 1466 "cPickle.c"
      case 8: // $finally
        var $22=$res; //@line 1467 "cPickle.c"
        $0=$22; //@line 1467 "cPickle.c"
        var $23=$0; //@line 1467 "cPickle.c"
        $retval=$23; //@line 1467 "cPickle.c"
        var $retval7=$retval; //@line 1467 "cPickle.c"
        ;
        return $retval7; //@line 1467 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_tuple($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 2; _memset(__stackBase__, 0, 2);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr_i;
        var $ob_addr_i;
        var $retval_i;
        var $0;
        var $self_addr;
        var $args_addr;
        var $retval;
        var $1;
        var $py_tuple_id;
        var $len;
        var $i;
        var $res;
        var $c_str=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        $py_tuple_id=0; //@line 1479 "cPickle.c"
        $res=-1; //@line 1481 "cPickle.c"
        var $2=$args_addr; //@line 1488 "cPickle.c"
        var $3=_PyTuple_Size($2); //@line 1488 "cPickle.c"
        $len=$3; //@line 1488 "cPickle.c"
        var $4=$len; //@line 1488 "cPickle.c"
        var $5=($4) < 0; //@line 1488 "cPickle.c"
        if ($5) { __label__ = 36; break; } else { __label__ = 1; break; } //@line 1488 "cPickle.c"
      case 1: // $bb
        var $6=$len; //@line 1491 "cPickle.c"
        var $7=($6)==0; //@line 1491 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 7; break; } //@line 1491 "cPickle.c"
      case 2: // $bb1
        var $8=$self_addr; //@line 1494 "cPickle.c"
        var $9=$8+36; //@line 1494 "cPickle.c"
        var $10=HEAP[$9]; //@line 1494 "cPickle.c"
        var $11=($10)!=0; //@line 1494 "cPickle.c"
        var $12=$c_str; //@line 1495 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1494 "cPickle.c"
      case 3: // $bb2
        HEAP[$12]=41; //@line 1495 "cPickle.c"
        $len=1; //@line 1496 "cPickle.c"
        __label__ = 5; break; //@line 1496 "cPickle.c"
      case 4: // $bb3
        HEAP[$12]=40; //@line 1499 "cPickle.c"
        var $13=$c_str+1; //@line 1500 "cPickle.c"
        HEAP[$13]=116; //@line 1500 "cPickle.c"
        $len=2; //@line 1501 "cPickle.c"
        __label__ = 5; break; //@line 1501 "cPickle.c"
      case 5: // $bb4
        var $14=$self_addr; //@line 1503 "cPickle.c"
        var $15=$14+48; //@line 1503 "cPickle.c"
        var $16=HEAP[$15]; //@line 1503 "cPickle.c"
        var $17=$self_addr; //@line 1503 "cPickle.c"
        var $c_str5=$c_str; //@line 1503 "cPickle.c"
        var $18=$len; //@line 1503 "cPickle.c"
        var $19=FUNCTION_TABLE[$16]($17, $c_str5, $18); //@line 1503 "cPickle.c"
        var $20=($19) >= 0; //@line 1503 "cPickle.c"
        if ($20) { __label__ = 6; break; } else { __label__ = 36; break; } //@line 1503 "cPickle.c"
      case 6: // $bb6
        $res=0; //@line 1504 "cPickle.c"
        __label__ = 36; break; //@line 1504 "cPickle.c"
      case 7: // $bb8
        var $21=$args_addr; //@line 1516 "cPickle.c"
        var $22=$21; //@line 1516 "cPickle.c"
        var $23=_PyLong_FromVoidPtr($22); //@line 1516 "cPickle.c"
        $py_tuple_id=$23; //@line 1516 "cPickle.c"
        var $24=$py_tuple_id; //@line 1517 "cPickle.c"
        var $25=($24)==0; //@line 1517 "cPickle.c"
        if ($25) { __label__ = 39; break; } else { __label__ = 8; break; } //@line 1517 "cPickle.c"
      case 8: // $bb9
        var $26=$len; //@line 1520 "cPickle.c"
        var $27=($26) <= 3; //@line 1520 "cPickle.c"
        if ($27) { __label__ = 9; break; } else { __label__ = 19; break; } //@line 1520 "cPickle.c"
      case 9: // $bb10
        var $28=$self_addr; //@line 1520 "cPickle.c"
        var $29=$28+36; //@line 1520 "cPickle.c"
        var $30=HEAP[$29]; //@line 1520 "cPickle.c"
        var $31=($30) > 1; //@line 1520 "cPickle.c"
        if ($31) { __label__ = 10; break; } else { __label__ = 19; break; } //@line 1520 "cPickle.c"
      case 10: // $bb11
        var $32=$self_addr; //@line 1522 "cPickle.c"
        var $33=$args_addr; //@line 1522 "cPickle.c"
        var $34=$len; //@line 1522 "cPickle.c"
        var $35=_store_tuple_elements($32, $33, $34); //@line 1522 "cPickle.c"
        var $36=($35) < 0; //@line 1522 "cPickle.c"
        if ($36) { __label__ = 36; break; } else { __label__ = 11; break; } //@line 1522 "cPickle.c"
      case 11: // $bb12
        var $37=$self_addr; //@line 1524 "cPickle.c"
        var $38=$37+20; //@line 1524 "cPickle.c"
        var $39=HEAP[$38]; //@line 1524 "cPickle.c"
        var $40=$py_tuple_id; //@line 1524 "cPickle.c"
        var $41=_PyDict_GetItem($39, $40); //@line 1524 "cPickle.c"
        var $42=($41)!=0; //@line 1524 "cPickle.c"
        if ($42) { __label__ = 12; break; } else { __label__ = 18; break; } //@line 1524 "cPickle.c"
      case 12: // $bb13
        $i=0; //@line 1526 "cPickle.c"
        __label__ = 15; break; //@line 1526 "cPickle.c"
      case 13: // $bb14
        var $43=$53+48; //@line 1527 "cPickle.c"
        var $44=HEAP[$43]; //@line 1527 "cPickle.c"
        var $45=$self_addr; //@line 1527 "cPickle.c"
        var $46=FUNCTION_TABLE[$44]($45, _pop_10042, 1); //@line 1527 "cPickle.c"
        var $47=($46) < 0; //@line 1527 "cPickle.c"
        if ($47) { __label__ = 36; break; } else { __label__ = 14; break; } //@line 1527 "cPickle.c"
      case 14: // $bb15
        var $48=$i; //@line 1526 "cPickle.c"
        var $49=($48) + 1; //@line 1526 "cPickle.c"
        $i=$49; //@line 1526 "cPickle.c"
        __label__ = 15; break; //@line 1526 "cPickle.c"
      case 15: // $bb16
        var $50=$i; //@line 1526 "cPickle.c"
        var $51=$len; //@line 1526 "cPickle.c"
        var $52=($50) < ($51); //@line 1526 "cPickle.c"
        var $53=$self_addr; //@line 1527 "cPickle.c"
        if ($52) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 1526 "cPickle.c"
      case 16: // $bb17
        var $54=$py_tuple_id; //@line 1530 "cPickle.c"
        var $55=_get($53, $54); //@line 1530 "cPickle.c"
        var $56=($55) < 0; //@line 1530 "cPickle.c"
        if ($56) { __label__ = 36; break; } else { __label__ = 17; break; } //@line 1530 "cPickle.c"
      case 17: // $bb18
        $res=0; //@line 1532 "cPickle.c"
        __label__ = 36; break; //@line 1532 "cPickle.c"
      case 18: // $bb19
        var $57=$self_addr; //@line 1536 "cPickle.c"
        var $58=$57+48; //@line 1536 "cPickle.c"
        var $59=HEAP[$58]; //@line 1536 "cPickle.c"
        var $60=$len; //@line 1536 "cPickle.c"
        var $61=_len2opcode_10044+$60; //@line 1536 "cPickle.c"
        var $62=$self_addr; //@line 1536 "cPickle.c"
        var $63=FUNCTION_TABLE[$59]($62, $61, 1); //@line 1536 "cPickle.c"
        var $64=($63) < 0; //@line 1536 "cPickle.c"
        if ($64) { __label__ = 36; break; } else { __label__ = 31; break; } //@line 1536 "cPickle.c"
      case 19: // $bb21
        var $65=$self_addr; //@line 1544 "cPickle.c"
        var $66=$65+48; //@line 1544 "cPickle.c"
        var $67=HEAP[$66]; //@line 1544 "cPickle.c"
        var $68=$self_addr; //@line 1544 "cPickle.c"
        var $69=FUNCTION_TABLE[$67]($68, _MARKv, 1); //@line 1544 "cPickle.c"
        var $70=($69) < 0; //@line 1544 "cPickle.c"
        if ($70) { __label__ = 36; break; } else { __label__ = 20; break; } //@line 1544 "cPickle.c"
      case 20: // $bb22
        var $71=$self_addr; //@line 1547 "cPickle.c"
        var $72=$args_addr; //@line 1547 "cPickle.c"
        var $73=$len; //@line 1547 "cPickle.c"
        var $74=_store_tuple_elements($71, $72, $73); //@line 1547 "cPickle.c"
        var $75=($74) < 0; //@line 1547 "cPickle.c"
        if ($75) { __label__ = 36; break; } else { __label__ = 21; break; } //@line 1547 "cPickle.c"
      case 21: // $bb23
        var $76=$self_addr; //@line 1550 "cPickle.c"
        var $77=$76+20; //@line 1550 "cPickle.c"
        var $78=HEAP[$77]; //@line 1550 "cPickle.c"
        var $79=$py_tuple_id; //@line 1550 "cPickle.c"
        var $80=_PyDict_GetItem($78, $79); //@line 1550 "cPickle.c"
        var $81=($80)!=0; //@line 1550 "cPickle.c"
        var $82=$self_addr; //@line 1552 "cPickle.c"
        if ($81) { __label__ = 22; break; } else { __label__ = 30; break; } //@line 1550 "cPickle.c"
      case 22: // $bb24
        var $83=$82+40; //@line 1552 "cPickle.c"
        var $84=HEAP[$83]; //@line 1552 "cPickle.c"
        var $85=($84)!=0; //@line 1552 "cPickle.c"
        if ($85) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1552 "cPickle.c"
      case 23: // $bb25
        var $86=$self_addr; //@line 1553 "cPickle.c"
        var $87=$86+48; //@line 1553 "cPickle.c"
        var $88=HEAP[$87]; //@line 1553 "cPickle.c"
        var $89=$self_addr; //@line 1553 "cPickle.c"
        var $90=FUNCTION_TABLE[$88]($89, _pop_mark_10043, 1); //@line 1553 "cPickle.c"
        var $91=($90) < 0; //@line 1553 "cPickle.c"
        if ($91) { __label__ = 36; break; } else { __label__ = 28; break; } //@line 1553 "cPickle.c"
      case 24: // $bb27
        $i=0; //@line 1560 "cPickle.c"
        __label__ = 27; break; //@line 1560 "cPickle.c"
      case 25: // $bb28
        var $92=$self_addr; //@line 1561 "cPickle.c"
        var $93=$92+48; //@line 1561 "cPickle.c"
        var $94=HEAP[$93]; //@line 1561 "cPickle.c"
        var $95=$self_addr; //@line 1561 "cPickle.c"
        var $96=FUNCTION_TABLE[$94]($95, _pop_10042, 1); //@line 1561 "cPickle.c"
        var $97=($96) < 0; //@line 1561 "cPickle.c"
        if ($97) { __label__ = 36; break; } else { __label__ = 26; break; } //@line 1561 "cPickle.c"
      case 26: // $bb29
        var $98=$i; //@line 1560 "cPickle.c"
        var $99=($98) + 1; //@line 1560 "cPickle.c"
        $i=$99; //@line 1560 "cPickle.c"
        __label__ = 27; break; //@line 1560 "cPickle.c"
      case 27: // $bb30
        var $100=$i; //@line 1560 "cPickle.c"
        var $101=$len; //@line 1560 "cPickle.c"
        var $102=($100) <= ($101); //@line 1560 "cPickle.c"
        if ($102) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 1560 "cPickle.c"
      case 28: // $bb31
        var $103=$self_addr; //@line 1565 "cPickle.c"
        var $104=$py_tuple_id; //@line 1565 "cPickle.c"
        var $105=_get($103, $104); //@line 1565 "cPickle.c"
        var $106=($105) >= 0; //@line 1565 "cPickle.c"
        if ($106) { __label__ = 29; break; } else { __label__ = 36; break; } //@line 1565 "cPickle.c"
      case 29: // $bb32
        $res=0; //@line 1566 "cPickle.c"
        __label__ = 36; break; //@line 1566 "cPickle.c"
      case 30: // $bb34
        var $107=$82+48; //@line 1571 "cPickle.c"
        var $108=HEAP[$107]; //@line 1571 "cPickle.c"
        var $109=$self_addr; //@line 1571 "cPickle.c"
        var $110=FUNCTION_TABLE[$108]($109, _tuple_10041, 1); //@line 1571 "cPickle.c"
        var $111=($110) < 0; //@line 1571 "cPickle.c"
        if ($111) { __label__ = 36; break; } else { __label__ = 31; break; } //@line 1571 "cPickle.c"
      case 31: // $memoize
        var $112=$self_addr; //@line 1575 "cPickle.c"
        var $113=$args_addr; //@line 1575 "cPickle.c"
        $self_addr_i=$112;
        $ob_addr_i=$113;
        var $114=$ob_addr_i; //@line 772 "cPickle.c"
        var $115=$114; //@line 772 "cPickle.c"
        var $116=HEAP[$115]; //@line 772 "cPickle.c"
        var $117=($116) <= 1; //@line 772 "cPickle.c"
        if ($117) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 772 "cPickle.c"
      case 32: // $bb_i
        var $118=$self_addr_i; //@line 772 "cPickle.c"
        var $119=$118+44; //@line 772 "cPickle.c"
        var $120=HEAP[$119]; //@line 772 "cPickle.c"
        var $121=($120)!=0; //@line 772 "cPickle.c"
        if ($121) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 772 "cPickle.c"
      case 33: // $put_exit_thread
        $0=0; //@line 773 "cPickle.c"
        $retval_i=0; //@line 773 "cPickle.c"
        __label__ = 35; break;
      case 34: // $put_exit
        var $122=$self_addr_i; //@line 775 "cPickle.c"
        var $123=$ob_addr_i; //@line 775 "cPickle.c"
        var $124=_put2($122, $123); //@line 775 "cPickle.c"
        $0=$124; //@line 775 "cPickle.c"
        $retval_i=$124; //@line 773 "cPickle.c"
        var $125=($124) >= 0; //@line 1575 "cPickle.c"
        if ($125) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 1575 "cPickle.c"
      case 35: // $bb35
        $res=0; //@line 1576 "cPickle.c"
        __label__ = 36; break; //@line 1578 "cPickle.c"
      case 36: // $finally
        var $_pr=$py_tuple_id;
        var $126=($_pr)!=0; //@line 1579 "cPickle.c"
        if ($126) { __label__ = 37; break; } else { __label__ = 39; break; } //@line 1579 "cPickle.c"
      case 37: // $bb36
        var $127=$py_tuple_id; //@line 1579 "cPickle.c"
        var $128=$127; //@line 1579 "cPickle.c"
        var $129=HEAP[$128]; //@line 1579 "cPickle.c"
        var $130=($129) - 1; //@line 1579 "cPickle.c"
        var $131=$py_tuple_id; //@line 1579 "cPickle.c"
        var $132=$131; //@line 1579 "cPickle.c"
        HEAP[$132]=$130; //@line 1579 "cPickle.c"
        var $133=$py_tuple_id; //@line 1579 "cPickle.c"
        var $134=$133; //@line 1579 "cPickle.c"
        var $135=HEAP[$134]; //@line 1579 "cPickle.c"
        var $136=($135)==0; //@line 1579 "cPickle.c"
        if ($136) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1579 "cPickle.c"
      case 38: // $bb37
        var $137=$py_tuple_id; //@line 1579 "cPickle.c"
        var $138=$137+4; //@line 1579 "cPickle.c"
        var $139=HEAP[$138]; //@line 1579 "cPickle.c"
        var $140=$139+24; //@line 1579 "cPickle.c"
        var $141=HEAP[$140]; //@line 1579 "cPickle.c"
        var $142=$py_tuple_id; //@line 1579 "cPickle.c"
        FUNCTION_TABLE[$141]($142); //@line 1579 "cPickle.c"
        __label__ = 39; break; //@line 1579 "cPickle.c"
      case 39: // $bb38
        var $143=$res; //@line 1580 "cPickle.c"
        $1=$143; //@line 1580 "cPickle.c"
        var $144=$1; //@line 1580 "cPickle.c"
        $retval=$144; //@line 1580 "cPickle.c"
        var $retval39=$retval; //@line 1580 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval39; //@line 1580 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _batch_list($self, $iter) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $iter_addr;
        var $retval;
        var $0;
        var $obj;
        var $firstitem;
        var $i;
        var $n;
        var $_py_tmp;
        var $_py_tmp28;
        var $_py_tmp34;
        $self_addr=$self;
        $iter_addr=$iter;
        $obj=0; //@line 1592 "cPickle.c"
        $firstitem=0; //@line 1593 "cPickle.c"
        var $1=$iter_addr; //@line 1599 "cPickle.c"
        var $2=($1)==0; //@line 1599 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1599 "cPickle.c"
      case 1: // $bb
        ___assert_fail(__str16, __str15, 1599, ___PRETTY_FUNCTION___10137); //@line 1599 "cPickle.c"
        throw "Reached an unreachable!" //@line 1599 "cPickle.c"
      case 2: // $bb1
        var $3=$self_addr; //@line 1601 "cPickle.c"
        var $4=$3+36; //@line 1601 "cPickle.c"
        var $5=HEAP[$4]; //@line 1601 "cPickle.c"
        var $6=($5)==0; //@line 1601 "cPickle.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 13; break; } //@line 1601 "cPickle.c"
      case 3: // $bb2
        var $7=$iter_addr; //@line 1604 "cPickle.c"
        var $8=_PyIter_Next($7); //@line 1604 "cPickle.c"
        $obj=$8; //@line 1604 "cPickle.c"
        var $9=($8)==0; //@line 1605 "cPickle.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 1605 "cPickle.c"
      case 4: // $bb3
        var $10=_PyErr_Occurred(); //@line 1606 "cPickle.c"
        var $11=($10)!=0; //@line 1606 "cPickle.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1606 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 1607 "cPickle.c"
        __label__ = 46; break; //@line 1607 "cPickle.c"
      case 6: // $bb5
        $0=0; //@line 1617 "cPickle.c"
        __label__ = 46; break; //@line 1617 "cPickle.c"
      case 7: // $bb6
        var $12=$self_addr; //@line 1610 "cPickle.c"
        var $13=$obj; //@line 1610 "cPickle.c"
        var $14=_save($12, $13, 0); //@line 1610 "cPickle.c"
        $i=$14; //@line 1610 "cPickle.c"
        var $15=$obj; //@line 1611 "cPickle.c"
        var $16=$15; //@line 1611 "cPickle.c"
        var $17=HEAP[$16]; //@line 1611 "cPickle.c"
        var $18=($17) - 1; //@line 1611 "cPickle.c"
        var $19=$obj; //@line 1611 "cPickle.c"
        var $20=$19; //@line 1611 "cPickle.c"
        HEAP[$20]=$18; //@line 1611 "cPickle.c"
        var $21=$obj; //@line 1611 "cPickle.c"
        var $22=$21; //@line 1611 "cPickle.c"
        var $23=HEAP[$22]; //@line 1611 "cPickle.c"
        var $24=($23)==0; //@line 1611 "cPickle.c"
        if ($24) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1611 "cPickle.c"
      case 8: // $bb7
        var $25=$obj; //@line 1611 "cPickle.c"
        var $26=$25+4; //@line 1611 "cPickle.c"
        var $27=HEAP[$26]; //@line 1611 "cPickle.c"
        var $28=$27+24; //@line 1611 "cPickle.c"
        var $29=HEAP[$28]; //@line 1611 "cPickle.c"
        var $30=$obj; //@line 1611 "cPickle.c"
        FUNCTION_TABLE[$29]($30); //@line 1611 "cPickle.c"
        __label__ = 9; break; //@line 1611 "cPickle.c"
      case 9: // $bb8
        var $31=$i; //@line 1612 "cPickle.c"
        var $32=($31) < 0; //@line 1612 "cPickle.c"
        if ($32) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1612 "cPickle.c"
      case 10: // $bb9
        $0=-1; //@line 1613 "cPickle.c"
        __label__ = 46; break; //@line 1613 "cPickle.c"
      case 11: // $bb10
        var $33=$self_addr; //@line 1614 "cPickle.c"
        var $34=$33+48; //@line 1614 "cPickle.c"
        var $35=HEAP[$34]; //@line 1614 "cPickle.c"
        var $36=$self_addr; //@line 1614 "cPickle.c"
        var $37=FUNCTION_TABLE[$35]($36, _append_10135, 1); //@line 1614 "cPickle.c"
        var $38=($37) < 0; //@line 1614 "cPickle.c"
        if ($38) { __label__ = 12; break; } else { __label__ = 3; break; } //@line 1614 "cPickle.c"
      case 12: // $bb11
        $0=-1; //@line 1615 "cPickle.c"
        __label__ = 46; break; //@line 1615 "cPickle.c"
      case 13: // $bb13
        var $39=$iter_addr; //@line 1623 "cPickle.c"
        var $40=_PyIter_Next($39); //@line 1623 "cPickle.c"
        $firstitem=$40; //@line 1623 "cPickle.c"
        var $41=($40)==0; //@line 1624 "cPickle.c"
        if ($41) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1624 "cPickle.c"
      case 14: // $bb14
        var $42=_PyErr_Occurred(); //@line 1625 "cPickle.c"
        var $43=($42)!=0; //@line 1625 "cPickle.c"
        if ($43) { __label__ = 39; break; } else { __label__ = 38; break; } //@line 1625 "cPickle.c"
      case 15: // $bb16
        var $44=$iter_addr; //@line 1633 "cPickle.c"
        var $45=_PyIter_Next($44); //@line 1633 "cPickle.c"
        $obj=$45; //@line 1633 "cPickle.c"
        var $46=$obj; //@line 1634 "cPickle.c"
        var $47=($46)==0; //@line 1634 "cPickle.c"
        if ($47) { __label__ = 16; break; } else { __label__ = 22; break; } //@line 1634 "cPickle.c"
      case 16: // $bb17
        var $48=_PyErr_Occurred(); //@line 1635 "cPickle.c"
        var $49=($48)!=0; //@line 1635 "cPickle.c"
        if ($49) { __label__ = 39; break; } else { __label__ = 17; break; } //@line 1635 "cPickle.c"
      case 17: // $bb18
        var $50=$self_addr; //@line 1639 "cPickle.c"
        var $51=$firstitem; //@line 1639 "cPickle.c"
        var $52=_save($50, $51, 0); //@line 1639 "cPickle.c"
        var $53=($52) < 0; //@line 1639 "cPickle.c"
        if ($53) { __label__ = 39; break; } else { __label__ = 18; break; } //@line 1639 "cPickle.c"
      case 18: // $bb19
        var $54=$self_addr; //@line 1641 "cPickle.c"
        var $55=$54+48; //@line 1641 "cPickle.c"
        var $56=HEAP[$55]; //@line 1641 "cPickle.c"
        var $57=$self_addr; //@line 1641 "cPickle.c"
        var $58=FUNCTION_TABLE[$56]($57, _append_10135, 1); //@line 1641 "cPickle.c"
        var $59=($58) < 0; //@line 1641 "cPickle.c"
        if ($59) { __label__ = 39; break; } else { __label__ = 19; break; } //@line 1641 "cPickle.c"
      case 19: // $bb20
        var $60=$firstitem; //@line 1643 "cPickle.c"
        var $61=($60)!=0; //@line 1643 "cPickle.c"
        if ($61) { __label__ = 20; break; } else { __label__ = 38; break; } //@line 1643 "cPickle.c"
      case 20: // $bb21
        var $62=$firstitem; //@line 1643 "cPickle.c"
        $_py_tmp=$62; //@line 1643 "cPickle.c"
        $firstitem=0; //@line 1643 "cPickle.c"
        var $63=$_py_tmp; //@line 1643 "cPickle.c"
        var $64=$63; //@line 1643 "cPickle.c"
        var $65=HEAP[$64]; //@line 1643 "cPickle.c"
        var $66=($65) - 1; //@line 1643 "cPickle.c"
        var $67=$_py_tmp; //@line 1643 "cPickle.c"
        var $68=$67; //@line 1643 "cPickle.c"
        HEAP[$68]=$66; //@line 1643 "cPickle.c"
        var $69=$_py_tmp; //@line 1643 "cPickle.c"
        var $70=$69; //@line 1643 "cPickle.c"
        var $71=HEAP[$70]; //@line 1643 "cPickle.c"
        var $72=($71)==0; //@line 1643 "cPickle.c"
        if ($72) { __label__ = 21; break; } else { __label__ = 38; break; } //@line 1643 "cPickle.c"
      case 21: // $bb22
        var $73=$_py_tmp; //@line 1643 "cPickle.c"
        var $74=$73+4; //@line 1643 "cPickle.c"
        var $75=HEAP[$74]; //@line 1643 "cPickle.c"
        var $76=$75+24; //@line 1643 "cPickle.c"
        var $77=HEAP[$76]; //@line 1643 "cPickle.c"
        var $78=$_py_tmp; //@line 1643 "cPickle.c"
        FUNCTION_TABLE[$77]($78); //@line 1643 "cPickle.c"
        __label__ = 38; break; //@line 1643 "cPickle.c"
      case 22: // $bb24
        var $79=$self_addr; //@line 1650 "cPickle.c"
        var $80=$79+48; //@line 1650 "cPickle.c"
        var $81=HEAP[$80]; //@line 1650 "cPickle.c"
        var $82=$self_addr; //@line 1650 "cPickle.c"
        var $83=FUNCTION_TABLE[$81]($82, _MARKv, 1); //@line 1650 "cPickle.c"
        var $84=($83) < 0; //@line 1650 "cPickle.c"
        if ($84) { __label__ = 39; break; } else { __label__ = 23; break; } //@line 1650 "cPickle.c"
      case 23: // $bb25
        var $85=$self_addr; //@line 1653 "cPickle.c"
        var $86=$firstitem; //@line 1653 "cPickle.c"
        var $87=_save($85, $86, 0); //@line 1653 "cPickle.c"
        var $88=($87) < 0; //@line 1653 "cPickle.c"
        if ($88) { __label__ = 39; break; } else { __label__ = 24; break; } //@line 1653 "cPickle.c"
      case 24: // $bb26
        var $89=$firstitem; //@line 1655 "cPickle.c"
        var $90=($89)!=0; //@line 1655 "cPickle.c"
        if ($90) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 1655 "cPickle.c"
      case 25: // $bb27
        var $91=$firstitem; //@line 1655 "cPickle.c"
        $_py_tmp28=$91; //@line 1655 "cPickle.c"
        $firstitem=0; //@line 1655 "cPickle.c"
        var $92=$_py_tmp28; //@line 1655 "cPickle.c"
        var $93=$92; //@line 1655 "cPickle.c"
        var $94=HEAP[$93]; //@line 1655 "cPickle.c"
        var $95=($94) - 1; //@line 1655 "cPickle.c"
        var $96=$_py_tmp28; //@line 1655 "cPickle.c"
        var $97=$96; //@line 1655 "cPickle.c"
        HEAP[$97]=$95; //@line 1655 "cPickle.c"
        var $98=$_py_tmp28; //@line 1655 "cPickle.c"
        var $99=$98; //@line 1655 "cPickle.c"
        var $100=HEAP[$99]; //@line 1655 "cPickle.c"
        var $101=($100)==0; //@line 1655 "cPickle.c"
        if ($101) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1655 "cPickle.c"
      case 26: // $bb29
        var $102=$_py_tmp28; //@line 1655 "cPickle.c"
        var $103=$102+4; //@line 1655 "cPickle.c"
        var $104=HEAP[$103]; //@line 1655 "cPickle.c"
        var $105=$104+24; //@line 1655 "cPickle.c"
        var $106=HEAP[$105]; //@line 1655 "cPickle.c"
        var $107=$_py_tmp28; //@line 1655 "cPickle.c"
        FUNCTION_TABLE[$106]($107); //@line 1655 "cPickle.c"
        __label__ = 27; break; //@line 1655 "cPickle.c"
      case 27: // $bb30
        $n=1; //@line 1656 "cPickle.c"
        var $_pr=$obj;
        __lastLabel__ = 27; __label__ = 35; break; //@line 1656 "cPickle.c"
      case 28: // $bb31
        var $108=$self_addr; //@line 1660 "cPickle.c"
        var $109=$obj; //@line 1660 "cPickle.c"
        var $110=_save($108, $109, 0); //@line 1660 "cPickle.c"
        var $111=($110) < 0; //@line 1660 "cPickle.c"
        if ($111) { __label__ = 39; break; } else { __label__ = 29; break; } //@line 1660 "cPickle.c"
      case 29: // $bb32
        var $112=$obj; //@line 1662 "cPickle.c"
        var $113=($112)!=0; //@line 1662 "cPickle.c"
        if ($113) { __label__ = 30; break; } else { __label__ = 32; break; } //@line 1662 "cPickle.c"
      case 30: // $bb33
        var $114=$obj; //@line 1662 "cPickle.c"
        $_py_tmp34=$114; //@line 1662 "cPickle.c"
        $obj=0; //@line 1662 "cPickle.c"
        var $115=$_py_tmp34; //@line 1662 "cPickle.c"
        var $116=$115; //@line 1662 "cPickle.c"
        var $117=HEAP[$116]; //@line 1662 "cPickle.c"
        var $118=($117) - 1; //@line 1662 "cPickle.c"
        var $119=$_py_tmp34; //@line 1662 "cPickle.c"
        var $120=$119; //@line 1662 "cPickle.c"
        HEAP[$120]=$118; //@line 1662 "cPickle.c"
        var $121=$_py_tmp34; //@line 1662 "cPickle.c"
        var $122=$121; //@line 1662 "cPickle.c"
        var $123=HEAP[$122]; //@line 1662 "cPickle.c"
        var $124=($123)==0; //@line 1662 "cPickle.c"
        if ($124) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1662 "cPickle.c"
      case 31: // $bb35
        var $125=$_py_tmp34; //@line 1662 "cPickle.c"
        var $126=$125+4; //@line 1662 "cPickle.c"
        var $127=HEAP[$126]; //@line 1662 "cPickle.c"
        var $128=$127+24; //@line 1662 "cPickle.c"
        var $129=HEAP[$128]; //@line 1662 "cPickle.c"
        var $130=$_py_tmp34; //@line 1662 "cPickle.c"
        FUNCTION_TABLE[$129]($130); //@line 1662 "cPickle.c"
        __label__ = 32; break; //@line 1662 "cPickle.c"
      case 32: // $bb36
        var $131=$n; //@line 1663 "cPickle.c"
        var $132=($131) + 1; //@line 1663 "cPickle.c"
        $n=$132; //@line 1663 "cPickle.c"
        var $133=($132)==1000; //@line 1665 "cPickle.c"
        if ($133) { __label__ = 36; break; } else { __label__ = 33; break; } //@line 1665 "cPickle.c"
      case 33: // $bb37
        var $134=$iter_addr; //@line 1668 "cPickle.c"
        var $135=_PyIter_Next($134); //@line 1668 "cPickle.c"
        $obj=$135; //@line 1668 "cPickle.c"
        var $136=$obj; //@line 1669 "cPickle.c"
        var $137=($136)==0; //@line 1669 "cPickle.c"
        if ($137) { __lastLabel__ = 33; __label__ = 34; break; } else { __lastLabel__ = 33; __label__ = 35; break; } //@line 1669 "cPickle.c"
      case 34: // $bb38
        var $138=_PyErr_Occurred(); //@line 1670 "cPickle.c"
        var $139=($138)!=0; //@line 1670 "cPickle.c"
        if ($139) { __label__ = 39; break; } else { __label__ = 36; break; } //@line 1670 "cPickle.c"
      case 35: // $bb40
        var $140=__lastLabel__ == 33 ? $136 : ($_pr);
        var $141=($140)!=0; //@line 1659 "cPickle.c"
        if ($141) { __label__ = 28; break; } else { __label__ = 36; break; } //@line 1659 "cPickle.c"
      case 36: // $bb41
        var $142=$self_addr; //@line 1676 "cPickle.c"
        var $143=$142+48; //@line 1676 "cPickle.c"
        var $144=HEAP[$143]; //@line 1676 "cPickle.c"
        var $145=$self_addr; //@line 1676 "cPickle.c"
        var $146=FUNCTION_TABLE[$144]($145, _appends_10136, 1); //@line 1676 "cPickle.c"
        var $147=($146) < 0; //@line 1676 "cPickle.c"
        if ($147) { __label__ = 39; break; } else { __label__ = 37; break; } //@line 1676 "cPickle.c"
      case 37: // $bb42
        var $148=$n; //@line 1679 "cPickle.c"
        var $149=($148)==1000; //@line 1679 "cPickle.c"
        if ($149) { __label__ = 13; break; } else { __label__ = 38; break; } //@line 1679 "cPickle.c"
      case 38: // $bb43
        $0=0; //@line 1680 "cPickle.c"
        __label__ = 46; break; //@line 1680 "cPickle.c"
      case 39: // $BatchFailed
        var $150=$firstitem; //@line 1683 "cPickle.c"
        var $151=($150)!=0; //@line 1683 "cPickle.c"
        if ($151) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 1683 "cPickle.c"
      case 40: // $bb44
        var $152=$firstitem; //@line 1683 "cPickle.c"
        var $153=$152; //@line 1683 "cPickle.c"
        var $154=HEAP[$153]; //@line 1683 "cPickle.c"
        var $155=($154) - 1; //@line 1683 "cPickle.c"
        var $156=$firstitem; //@line 1683 "cPickle.c"
        var $157=$156; //@line 1683 "cPickle.c"
        HEAP[$157]=$155; //@line 1683 "cPickle.c"
        var $158=$firstitem; //@line 1683 "cPickle.c"
        var $159=$158; //@line 1683 "cPickle.c"
        var $160=HEAP[$159]; //@line 1683 "cPickle.c"
        var $161=($160)==0; //@line 1683 "cPickle.c"
        if ($161) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1683 "cPickle.c"
      case 41: // $bb45
        var $162=$firstitem; //@line 1683 "cPickle.c"
        var $163=$162+4; //@line 1683 "cPickle.c"
        var $164=HEAP[$163]; //@line 1683 "cPickle.c"
        var $165=$164+24; //@line 1683 "cPickle.c"
        var $166=HEAP[$165]; //@line 1683 "cPickle.c"
        var $167=$firstitem; //@line 1683 "cPickle.c"
        FUNCTION_TABLE[$166]($167); //@line 1683 "cPickle.c"
        __label__ = 42; break; //@line 1683 "cPickle.c"
      case 42: // $bb46
        var $168=$obj; //@line 1684 "cPickle.c"
        var $169=($168)!=0; //@line 1684 "cPickle.c"
        if ($169) { __label__ = 43; break; } else { __label__ = 45; break; } //@line 1684 "cPickle.c"
      case 43: // $bb47
        var $170=$obj; //@line 1684 "cPickle.c"
        var $171=$170; //@line 1684 "cPickle.c"
        var $172=HEAP[$171]; //@line 1684 "cPickle.c"
        var $173=($172) - 1; //@line 1684 "cPickle.c"
        var $174=$obj; //@line 1684 "cPickle.c"
        var $175=$174; //@line 1684 "cPickle.c"
        HEAP[$175]=$173; //@line 1684 "cPickle.c"
        var $176=$obj; //@line 1684 "cPickle.c"
        var $177=$176; //@line 1684 "cPickle.c"
        var $178=HEAP[$177]; //@line 1684 "cPickle.c"
        var $179=($178)==0; //@line 1684 "cPickle.c"
        if ($179) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1684 "cPickle.c"
      case 44: // $bb48
        var $180=$obj; //@line 1684 "cPickle.c"
        var $181=$180+4; //@line 1684 "cPickle.c"
        var $182=HEAP[$181]; //@line 1684 "cPickle.c"
        var $183=$182+24; //@line 1684 "cPickle.c"
        var $184=HEAP[$183]; //@line 1684 "cPickle.c"
        var $185=$obj; //@line 1684 "cPickle.c"
        FUNCTION_TABLE[$184]($185); //@line 1684 "cPickle.c"
        __label__ = 45; break; //@line 1684 "cPickle.c"
      case 45: // $bb49
        $0=-1; //@line 1685 "cPickle.c"
        __label__ = 46; break; //@line 1685 "cPickle.c"
      case 46: // $bb50
        var $186=$0; //@line 1607 "cPickle.c"
        $retval=$186; //@line 1607 "cPickle.c"
        var $retval51=$retval; //@line 1607 "cPickle.c"
        ;
        return $retval51; //@line 1607 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _batch_dict($self, $iter) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $iter_addr;
        var $retval;
        var $0;
        var $p;
        var $firstitem;
        var $i;
        var $n;
        var $_py_tmp;
        var $_py_tmp38;
        var $_py_tmp48;
        $self_addr=$self;
        $iter_addr=$iter;
        $p=0; //@line 1760 "cPickle.c"
        $firstitem=0; //@line 1761 "cPickle.c"
        var $1=$iter_addr; //@line 1767 "cPickle.c"
        var $2=($1)==0; //@line 1767 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1767 "cPickle.c"
      case 1: // $bb
        ___assert_fail(__str16, __str15, 1767, ___PRETTY_FUNCTION___10326); //@line 1767 "cPickle.c"
        throw "Reached an unreachable!" //@line 1767 "cPickle.c"
      case 2: // $bb1
        var $3=$self_addr; //@line 1769 "cPickle.c"
        var $4=$3+36; //@line 1769 "cPickle.c"
        var $5=HEAP[$4]; //@line 1769 "cPickle.c"
        var $6=($5)==0; //@line 1769 "cPickle.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 18; break; } //@line 1769 "cPickle.c"
      case 3: // $bb2
        var $7=$iter_addr; //@line 1772 "cPickle.c"
        var $8=_PyIter_Next($7); //@line 1772 "cPickle.c"
        $p=$8; //@line 1772 "cPickle.c"
        var $9=($8)==0; //@line 1773 "cPickle.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 1773 "cPickle.c"
      case 4: // $bb3
        var $10=_PyErr_Occurred(); //@line 1774 "cPickle.c"
        var $11=($10)!=0; //@line 1774 "cPickle.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1774 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 1775 "cPickle.c"
        __label__ = 60; break; //@line 1775 "cPickle.c"
      case 6: // $bb5
        $0=0; //@line 1792 "cPickle.c"
        __label__ = 60; break; //@line 1792 "cPickle.c"
      case 7: // $bb6
        var $12=$p; //@line 1778 "cPickle.c"
        var $13=$12+4; //@line 1778 "cPickle.c"
        var $14=HEAP[$13]; //@line 1778 "cPickle.c"
        var $15=$14+84; //@line 1778 "cPickle.c"
        var $16=HEAP[$15]; //@line 1778 "cPickle.c"
        var $17=($16) & 67108864; //@line 1778 "cPickle.c"
        var $18=($17)==0; //@line 1778 "cPickle.c"
        if ($18) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 1778 "cPickle.c"
      case 8: // $bb7
        var $19=$p; //@line 1778 "cPickle.c"
        var $20=_PyTuple_Size($19); //@line 1778 "cPickle.c"
        var $21=($20)!=2; //@line 1778 "cPickle.c"
        if ($21) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1778 "cPickle.c"
      case 9: // $bb8
        var $22=HEAP[_PyExc_TypeError]; //@line 1779 "cPickle.c"
        _PyErr_SetString($22, __str18); //@line 1779 "cPickle.c"
        $0=-1; //@line 1781 "cPickle.c"
        __label__ = 60; break; //@line 1781 "cPickle.c"
      case 10: // $bb9
        var $23=$p; //@line 1783 "cPickle.c"
        var $24=$23; //@line 1783 "cPickle.c"
        var $25=$24+12; //@line 1783 "cPickle.c"
        var $26=$25; //@line 1783 "cPickle.c"
        var $27=HEAP[$26]; //@line 1783 "cPickle.c"
        var $28=$self_addr; //@line 1783 "cPickle.c"
        var $29=_save($28, $27, 0); //@line 1783 "cPickle.c"
        $i=$29; //@line 1783 "cPickle.c"
        var $30=$i; //@line 1784 "cPickle.c"
        var $31=($30) >= 0; //@line 1784 "cPickle.c"
        if ($31) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1784 "cPickle.c"
      case 11: // $bb10
        var $32=$p; //@line 1785 "cPickle.c"
        var $33=$32; //@line 1785 "cPickle.c"
        var $34=$33+12; //@line 1785 "cPickle.c"
        var $35=$34+4; //@line 1785 "cPickle.c"
        var $36=HEAP[$35]; //@line 1785 "cPickle.c"
        var $37=$self_addr; //@line 1785 "cPickle.c"
        var $38=_save($37, $36, 0); //@line 1785 "cPickle.c"
        $i=$38; //@line 1785 "cPickle.c"
        __label__ = 12; break; //@line 1785 "cPickle.c"
      case 12: // $bb11
        var $39=$p; //@line 1786 "cPickle.c"
        var $40=$39; //@line 1786 "cPickle.c"
        var $41=HEAP[$40]; //@line 1786 "cPickle.c"
        var $42=($41) - 1; //@line 1786 "cPickle.c"
        var $43=$p; //@line 1786 "cPickle.c"
        var $44=$43; //@line 1786 "cPickle.c"
        HEAP[$44]=$42; //@line 1786 "cPickle.c"
        var $45=$p; //@line 1786 "cPickle.c"
        var $46=$45; //@line 1786 "cPickle.c"
        var $47=HEAP[$46]; //@line 1786 "cPickle.c"
        var $48=($47)==0; //@line 1786 "cPickle.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1786 "cPickle.c"
      case 13: // $bb12
        var $49=$p; //@line 1786 "cPickle.c"
        var $50=$49+4; //@line 1786 "cPickle.c"
        var $51=HEAP[$50]; //@line 1786 "cPickle.c"
        var $52=$51+24; //@line 1786 "cPickle.c"
        var $53=HEAP[$52]; //@line 1786 "cPickle.c"
        var $54=$p; //@line 1786 "cPickle.c"
        FUNCTION_TABLE[$53]($54); //@line 1786 "cPickle.c"
        __label__ = 14; break; //@line 1786 "cPickle.c"
      case 14: // $bb13
        var $55=$i; //@line 1787 "cPickle.c"
        var $56=($55) < 0; //@line 1787 "cPickle.c"
        if ($56) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1787 "cPickle.c"
      case 15: // $bb14
        $0=-1; //@line 1788 "cPickle.c"
        __label__ = 60; break; //@line 1788 "cPickle.c"
      case 16: // $bb15
        var $57=$self_addr; //@line 1789 "cPickle.c"
        var $58=$57+48; //@line 1789 "cPickle.c"
        var $59=HEAP[$58]; //@line 1789 "cPickle.c"
        var $60=$self_addr; //@line 1789 "cPickle.c"
        var $61=FUNCTION_TABLE[$59]($60, _setitem_10324, 1); //@line 1789 "cPickle.c"
        var $62=($61) < 0; //@line 1789 "cPickle.c"
        if ($62) { __label__ = 17; break; } else { __label__ = 3; break; } //@line 1789 "cPickle.c"
      case 17: // $bb16
        $0=-1; //@line 1790 "cPickle.c"
        __label__ = 60; break; //@line 1790 "cPickle.c"
      case 18: // $bb18
        var $63=$iter_addr; //@line 1798 "cPickle.c"
        var $64=_PyIter_Next($63); //@line 1798 "cPickle.c"
        $firstitem=$64; //@line 1798 "cPickle.c"
        var $65=($64)==0; //@line 1799 "cPickle.c"
        if ($65) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1799 "cPickle.c"
      case 19: // $bb19
        var $66=_PyErr_Occurred(); //@line 1800 "cPickle.c"
        var $67=($66)!=0; //@line 1800 "cPickle.c"
        if ($67) { __label__ = 53; break; } else { __label__ = 52; break; } //@line 1800 "cPickle.c"
      case 20: // $bb21
        var $68=$firstitem; //@line 1806 "cPickle.c"
        var $69=$68+4; //@line 1806 "cPickle.c"
        var $70=HEAP[$69]; //@line 1806 "cPickle.c"
        var $71=$70+84; //@line 1806 "cPickle.c"
        var $72=HEAP[$71]; //@line 1806 "cPickle.c"
        var $73=($72) & 67108864; //@line 1806 "cPickle.c"
        var $74=($73)==0; //@line 1806 "cPickle.c"
        if ($74) { __label__ = 22; break; } else { __label__ = 21; break; } //@line 1806 "cPickle.c"
      case 21: // $bb22
        var $75=$firstitem; //@line 1806 "cPickle.c"
        var $76=_PyTuple_Size($75); //@line 1806 "cPickle.c"
        var $77=($76)!=2; //@line 1806 "cPickle.c"
        if ($77) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1806 "cPickle.c"
      case 22: // $bb23
        var $78=HEAP[_PyExc_TypeError]; //@line 1807 "cPickle.c"
        _PyErr_SetString($78, __str18); //@line 1807 "cPickle.c"
        __label__ = 53; break; //@line 1807 "cPickle.c"
      case 23: // $bb24
        var $79=$iter_addr; //@line 1813 "cPickle.c"
        var $80=_PyIter_Next($79); //@line 1813 "cPickle.c"
        $p=$80; //@line 1813 "cPickle.c"
        var $81=$p; //@line 1814 "cPickle.c"
        var $82=($81)==0; //@line 1814 "cPickle.c"
        if ($82) { __label__ = 24; break; } else { __label__ = 31; break; } //@line 1814 "cPickle.c"
      case 24: // $bb25
        var $83=_PyErr_Occurred(); //@line 1815 "cPickle.c"
        var $84=($83)!=0; //@line 1815 "cPickle.c"
        if ($84) { __label__ = 53; break; } else { __label__ = 25; break; } //@line 1815 "cPickle.c"
      case 25: // $bb26
        var $85=$firstitem; //@line 1819 "cPickle.c"
        var $86=$85; //@line 1819 "cPickle.c"
        var $87=$86+12; //@line 1819 "cPickle.c"
        var $88=$87; //@line 1819 "cPickle.c"
        var $89=HEAP[$88]; //@line 1819 "cPickle.c"
        var $90=$self_addr; //@line 1819 "cPickle.c"
        var $91=_save($90, $89, 0); //@line 1819 "cPickle.c"
        var $92=($91) < 0; //@line 1819 "cPickle.c"
        if ($92) { __label__ = 53; break; } else { __label__ = 26; break; } //@line 1819 "cPickle.c"
      case 26: // $bb27
        var $93=$firstitem; //@line 1821 "cPickle.c"
        var $94=$93; //@line 1821 "cPickle.c"
        var $95=$94+12; //@line 1821 "cPickle.c"
        var $96=$95+4; //@line 1821 "cPickle.c"
        var $97=HEAP[$96]; //@line 1821 "cPickle.c"
        var $98=$self_addr; //@line 1821 "cPickle.c"
        var $99=_save($98, $97, 0); //@line 1821 "cPickle.c"
        var $100=($99) < 0; //@line 1821 "cPickle.c"
        if ($100) { __label__ = 53; break; } else { __label__ = 27; break; } //@line 1821 "cPickle.c"
      case 27: // $bb28
        var $101=$self_addr; //@line 1823 "cPickle.c"
        var $102=$101+48; //@line 1823 "cPickle.c"
        var $103=HEAP[$102]; //@line 1823 "cPickle.c"
        var $104=$self_addr; //@line 1823 "cPickle.c"
        var $105=FUNCTION_TABLE[$103]($104, _setitem_10324, 1); //@line 1823 "cPickle.c"
        var $106=($105) < 0; //@line 1823 "cPickle.c"
        if ($106) { __label__ = 53; break; } else { __label__ = 28; break; } //@line 1823 "cPickle.c"
      case 28: // $bb29
        var $107=$firstitem; //@line 1825 "cPickle.c"
        var $108=($107)!=0; //@line 1825 "cPickle.c"
        if ($108) { __label__ = 29; break; } else { __label__ = 52; break; } //@line 1825 "cPickle.c"
      case 29: // $bb30
        var $109=$firstitem; //@line 1825 "cPickle.c"
        $_py_tmp=$109; //@line 1825 "cPickle.c"
        $firstitem=0; //@line 1825 "cPickle.c"
        var $110=$_py_tmp; //@line 1825 "cPickle.c"
        var $111=$110; //@line 1825 "cPickle.c"
        var $112=HEAP[$111]; //@line 1825 "cPickle.c"
        var $113=($112) - 1; //@line 1825 "cPickle.c"
        var $114=$_py_tmp; //@line 1825 "cPickle.c"
        var $115=$114; //@line 1825 "cPickle.c"
        HEAP[$115]=$113; //@line 1825 "cPickle.c"
        var $116=$_py_tmp; //@line 1825 "cPickle.c"
        var $117=$116; //@line 1825 "cPickle.c"
        var $118=HEAP[$117]; //@line 1825 "cPickle.c"
        var $119=($118)==0; //@line 1825 "cPickle.c"
        if ($119) { __label__ = 30; break; } else { __label__ = 52; break; } //@line 1825 "cPickle.c"
      case 30: // $bb31
        var $120=$_py_tmp; //@line 1825 "cPickle.c"
        var $121=$120+4; //@line 1825 "cPickle.c"
        var $122=HEAP[$121]; //@line 1825 "cPickle.c"
        var $123=$122+24; //@line 1825 "cPickle.c"
        var $124=HEAP[$123]; //@line 1825 "cPickle.c"
        var $125=$_py_tmp; //@line 1825 "cPickle.c"
        FUNCTION_TABLE[$124]($125); //@line 1825 "cPickle.c"
        __label__ = 52; break; //@line 1825 "cPickle.c"
      case 31: // $bb33
        var $126=$self_addr; //@line 1832 "cPickle.c"
        var $127=$126+48; //@line 1832 "cPickle.c"
        var $128=HEAP[$127]; //@line 1832 "cPickle.c"
        var $129=$self_addr; //@line 1832 "cPickle.c"
        var $130=FUNCTION_TABLE[$128]($129, _MARKv, 1); //@line 1832 "cPickle.c"
        var $131=($130) < 0; //@line 1832 "cPickle.c"
        if ($131) { __label__ = 53; break; } else { __label__ = 32; break; } //@line 1832 "cPickle.c"
      case 32: // $bb34
        var $132=$firstitem; //@line 1835 "cPickle.c"
        var $133=$132; //@line 1835 "cPickle.c"
        var $134=$133+12; //@line 1835 "cPickle.c"
        var $135=$134; //@line 1835 "cPickle.c"
        var $136=HEAP[$135]; //@line 1835 "cPickle.c"
        var $137=$self_addr; //@line 1835 "cPickle.c"
        var $138=_save($137, $136, 0); //@line 1835 "cPickle.c"
        var $139=($138) < 0; //@line 1835 "cPickle.c"
        if ($139) { __label__ = 53; break; } else { __label__ = 33; break; } //@line 1835 "cPickle.c"
      case 33: // $bb35
        var $140=$firstitem; //@line 1837 "cPickle.c"
        var $141=$140; //@line 1837 "cPickle.c"
        var $142=$141+12; //@line 1837 "cPickle.c"
        var $143=$142+4; //@line 1837 "cPickle.c"
        var $144=HEAP[$143]; //@line 1837 "cPickle.c"
        var $145=$self_addr; //@line 1837 "cPickle.c"
        var $146=_save($145, $144, 0); //@line 1837 "cPickle.c"
        var $147=($146) < 0; //@line 1837 "cPickle.c"
        if ($147) { __label__ = 53; break; } else { __label__ = 34; break; } //@line 1837 "cPickle.c"
      case 34: // $bb36
        var $148=$firstitem; //@line 1839 "cPickle.c"
        var $149=($148)!=0; //@line 1839 "cPickle.c"
        if ($149) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 1839 "cPickle.c"
      case 35: // $bb37
        var $150=$firstitem; //@line 1839 "cPickle.c"
        $_py_tmp38=$150; //@line 1839 "cPickle.c"
        $firstitem=0; //@line 1839 "cPickle.c"
        var $151=$_py_tmp38; //@line 1839 "cPickle.c"
        var $152=$151; //@line 1839 "cPickle.c"
        var $153=HEAP[$152]; //@line 1839 "cPickle.c"
        var $154=($153) - 1; //@line 1839 "cPickle.c"
        var $155=$_py_tmp38; //@line 1839 "cPickle.c"
        var $156=$155; //@line 1839 "cPickle.c"
        HEAP[$156]=$154; //@line 1839 "cPickle.c"
        var $157=$_py_tmp38; //@line 1839 "cPickle.c"
        var $158=$157; //@line 1839 "cPickle.c"
        var $159=HEAP[$158]; //@line 1839 "cPickle.c"
        var $160=($159)==0; //@line 1839 "cPickle.c"
        if ($160) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1839 "cPickle.c"
      case 36: // $bb39
        var $161=$_py_tmp38; //@line 1839 "cPickle.c"
        var $162=$161+4; //@line 1839 "cPickle.c"
        var $163=HEAP[$162]; //@line 1839 "cPickle.c"
        var $164=$163+24; //@line 1839 "cPickle.c"
        var $165=HEAP[$164]; //@line 1839 "cPickle.c"
        var $166=$_py_tmp38; //@line 1839 "cPickle.c"
        FUNCTION_TABLE[$165]($166); //@line 1839 "cPickle.c"
        __label__ = 37; break; //@line 1839 "cPickle.c"
      case 37: // $bb40
        $n=1; //@line 1840 "cPickle.c"
        var $_pr=$p;
        __lastLabel__ = 37; __label__ = 49; break; //@line 1840 "cPickle.c"
      case 38: // $bb41
        var $167=$p; //@line 1844 "cPickle.c"
        var $168=$167+4; //@line 1844 "cPickle.c"
        var $169=HEAP[$168]; //@line 1844 "cPickle.c"
        var $170=$169+84; //@line 1844 "cPickle.c"
        var $171=HEAP[$170]; //@line 1844 "cPickle.c"
        var $172=($171) & 67108864; //@line 1844 "cPickle.c"
        var $173=($172)==0; //@line 1844 "cPickle.c"
        if ($173) { __label__ = 40; break; } else { __label__ = 39; break; } //@line 1844 "cPickle.c"
      case 39: // $bb42
        var $174=$p; //@line 1844 "cPickle.c"
        var $175=_PyTuple_Size($174); //@line 1844 "cPickle.c"
        var $176=($175)!=2; //@line 1844 "cPickle.c"
        if ($176) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1844 "cPickle.c"
      case 40: // $bb43
        var $177=HEAP[_PyExc_TypeError]; //@line 1845 "cPickle.c"
        _PyErr_SetString($177, __str18); //@line 1845 "cPickle.c"
        __label__ = 53; break; //@line 1845 "cPickle.c"
      case 41: // $bb44
        var $178=$p; //@line 1849 "cPickle.c"
        var $179=$178; //@line 1849 "cPickle.c"
        var $180=$179+12; //@line 1849 "cPickle.c"
        var $181=$180; //@line 1849 "cPickle.c"
        var $182=HEAP[$181]; //@line 1849 "cPickle.c"
        var $183=$self_addr; //@line 1849 "cPickle.c"
        var $184=_save($183, $182, 0); //@line 1849 "cPickle.c"
        var $185=($184) < 0; //@line 1849 "cPickle.c"
        if ($185) { __label__ = 53; break; } else { __label__ = 42; break; } //@line 1849 "cPickle.c"
      case 42: // $bb45
        var $186=$p; //@line 1851 "cPickle.c"
        var $187=$186; //@line 1851 "cPickle.c"
        var $188=$187+12; //@line 1851 "cPickle.c"
        var $189=$188+4; //@line 1851 "cPickle.c"
        var $190=HEAP[$189]; //@line 1851 "cPickle.c"
        var $191=$self_addr; //@line 1851 "cPickle.c"
        var $192=_save($191, $190, 0); //@line 1851 "cPickle.c"
        var $193=($192) < 0; //@line 1851 "cPickle.c"
        if ($193) { __label__ = 53; break; } else { __label__ = 43; break; } //@line 1851 "cPickle.c"
      case 43: // $bb46
        var $194=$p; //@line 1853 "cPickle.c"
        var $195=($194)!=0; //@line 1853 "cPickle.c"
        if ($195) { __label__ = 44; break; } else { __label__ = 46; break; } //@line 1853 "cPickle.c"
      case 44: // $bb47
        var $196=$p; //@line 1853 "cPickle.c"
        $_py_tmp48=$196; //@line 1853 "cPickle.c"
        $p=0; //@line 1853 "cPickle.c"
        var $197=$_py_tmp48; //@line 1853 "cPickle.c"
        var $198=$197; //@line 1853 "cPickle.c"
        var $199=HEAP[$198]; //@line 1853 "cPickle.c"
        var $200=($199) - 1; //@line 1853 "cPickle.c"
        var $201=$_py_tmp48; //@line 1853 "cPickle.c"
        var $202=$201; //@line 1853 "cPickle.c"
        HEAP[$202]=$200; //@line 1853 "cPickle.c"
        var $203=$_py_tmp48; //@line 1853 "cPickle.c"
        var $204=$203; //@line 1853 "cPickle.c"
        var $205=HEAP[$204]; //@line 1853 "cPickle.c"
        var $206=($205)==0; //@line 1853 "cPickle.c"
        if ($206) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 1853 "cPickle.c"
      case 45: // $bb49
        var $207=$_py_tmp48; //@line 1853 "cPickle.c"
        var $208=$207+4; //@line 1853 "cPickle.c"
        var $209=HEAP[$208]; //@line 1853 "cPickle.c"
        var $210=$209+24; //@line 1853 "cPickle.c"
        var $211=HEAP[$210]; //@line 1853 "cPickle.c"
        var $212=$_py_tmp48; //@line 1853 "cPickle.c"
        FUNCTION_TABLE[$211]($212); //@line 1853 "cPickle.c"
        __label__ = 46; break; //@line 1853 "cPickle.c"
      case 46: // $bb50
        var $213=$n; //@line 1854 "cPickle.c"
        var $214=($213) + 1; //@line 1854 "cPickle.c"
        $n=$214; //@line 1854 "cPickle.c"
        var $215=($214)==1000; //@line 1856 "cPickle.c"
        if ($215) { __label__ = 50; break; } else { __label__ = 47; break; } //@line 1856 "cPickle.c"
      case 47: // $bb51
        var $216=$iter_addr; //@line 1859 "cPickle.c"
        var $217=_PyIter_Next($216); //@line 1859 "cPickle.c"
        $p=$217; //@line 1859 "cPickle.c"
        var $218=$p; //@line 1860 "cPickle.c"
        var $219=($218)==0; //@line 1860 "cPickle.c"
        if ($219) { __lastLabel__ = 47; __label__ = 48; break; } else { __lastLabel__ = 47; __label__ = 49; break; } //@line 1860 "cPickle.c"
      case 48: // $bb52
        var $220=_PyErr_Occurred(); //@line 1861 "cPickle.c"
        var $221=($220)!=0; //@line 1861 "cPickle.c"
        if ($221) { __label__ = 53; break; } else { __label__ = 50; break; } //@line 1861 "cPickle.c"
      case 49: // $bb54
        var $222=__lastLabel__ == 47 ? $218 : ($_pr);
        var $223=($222)!=0; //@line 1843 "cPickle.c"
        if ($223) { __label__ = 38; break; } else { __label__ = 50; break; } //@line 1843 "cPickle.c"
      case 50: // $bb55
        var $224=$self_addr; //@line 1867 "cPickle.c"
        var $225=$224+48; //@line 1867 "cPickle.c"
        var $226=HEAP[$225]; //@line 1867 "cPickle.c"
        var $227=$self_addr; //@line 1867 "cPickle.c"
        var $228=FUNCTION_TABLE[$226]($227, _setitems_10325, 1); //@line 1867 "cPickle.c"
        var $229=($228) < 0; //@line 1867 "cPickle.c"
        if ($229) { __label__ = 53; break; } else { __label__ = 51; break; } //@line 1867 "cPickle.c"
      case 51: // $bb56
        var $230=$n; //@line 1870 "cPickle.c"
        var $231=($230)==1000; //@line 1870 "cPickle.c"
        if ($231) { __label__ = 18; break; } else { __label__ = 52; break; } //@line 1870 "cPickle.c"
      case 52: // $bb57
        $0=0; //@line 1871 "cPickle.c"
        __label__ = 60; break; //@line 1871 "cPickle.c"
      case 53: // $BatchFailed
        var $232=$firstitem; //@line 1874 "cPickle.c"
        var $233=($232)!=0; //@line 1874 "cPickle.c"
        if ($233) { __label__ = 54; break; } else { __label__ = 56; break; } //@line 1874 "cPickle.c"
      case 54: // $bb58
        var $234=$firstitem; //@line 1874 "cPickle.c"
        var $235=$234; //@line 1874 "cPickle.c"
        var $236=HEAP[$235]; //@line 1874 "cPickle.c"
        var $237=($236) - 1; //@line 1874 "cPickle.c"
        var $238=$firstitem; //@line 1874 "cPickle.c"
        var $239=$238; //@line 1874 "cPickle.c"
        HEAP[$239]=$237; //@line 1874 "cPickle.c"
        var $240=$firstitem; //@line 1874 "cPickle.c"
        var $241=$240; //@line 1874 "cPickle.c"
        var $242=HEAP[$241]; //@line 1874 "cPickle.c"
        var $243=($242)==0; //@line 1874 "cPickle.c"
        if ($243) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 1874 "cPickle.c"
      case 55: // $bb59
        var $244=$firstitem; //@line 1874 "cPickle.c"
        var $245=$244+4; //@line 1874 "cPickle.c"
        var $246=HEAP[$245]; //@line 1874 "cPickle.c"
        var $247=$246+24; //@line 1874 "cPickle.c"
        var $248=HEAP[$247]; //@line 1874 "cPickle.c"
        var $249=$firstitem; //@line 1874 "cPickle.c"
        FUNCTION_TABLE[$248]($249); //@line 1874 "cPickle.c"
        __label__ = 56; break; //@line 1874 "cPickle.c"
      case 56: // $bb60
        var $250=$p; //@line 1875 "cPickle.c"
        var $251=($250)!=0; //@line 1875 "cPickle.c"
        if ($251) { __label__ = 57; break; } else { __label__ = 59; break; } //@line 1875 "cPickle.c"
      case 57: // $bb61
        var $252=$p; //@line 1875 "cPickle.c"
        var $253=$252; //@line 1875 "cPickle.c"
        var $254=HEAP[$253]; //@line 1875 "cPickle.c"
        var $255=($254) - 1; //@line 1875 "cPickle.c"
        var $256=$p; //@line 1875 "cPickle.c"
        var $257=$256; //@line 1875 "cPickle.c"
        HEAP[$257]=$255; //@line 1875 "cPickle.c"
        var $258=$p; //@line 1875 "cPickle.c"
        var $259=$258; //@line 1875 "cPickle.c"
        var $260=HEAP[$259]; //@line 1875 "cPickle.c"
        var $261=($260)==0; //@line 1875 "cPickle.c"
        if ($261) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 1875 "cPickle.c"
      case 58: // $bb62
        var $262=$p; //@line 1875 "cPickle.c"
        var $263=$262+4; //@line 1875 "cPickle.c"
        var $264=HEAP[$263]; //@line 1875 "cPickle.c"
        var $265=$264+24; //@line 1875 "cPickle.c"
        var $266=HEAP[$265]; //@line 1875 "cPickle.c"
        var $267=$p; //@line 1875 "cPickle.c"
        FUNCTION_TABLE[$266]($267); //@line 1875 "cPickle.c"
        __label__ = 59; break; //@line 1875 "cPickle.c"
      case 59: // $bb63
        $0=-1; //@line 1876 "cPickle.c"
        __label__ = 60; break; //@line 1876 "cPickle.c"
      case 60: // $bb64
        var $268=$0; //@line 1775 "cPickle.c"
        $retval=$268; //@line 1775 "cPickle.c"
        var $retval65=$retval; //@line 1775 "cPickle.c"
        ;
        return $retval65; //@line 1775 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_global($self, $args, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 5; _memset(__stackBase__, 0, 5);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr_i;
        var $ob_addr_i;
        var $retval_i;
        var $0;
        var $self_addr;
        var $args_addr;
        var $name_addr;
        var $retval;
        var $1;
        var $global_name;
        var $module;
        var $mod;
        var $klass;
        var $name_str;
        var $module_str;
        var $module_size;
        var $name_size;
        var $res;
        var $py_code;
        var $code;
        var $c_str=__stackBase__;
        var $n;
        $self_addr=$self;
        $args_addr=$args;
        $name_addr=$name;
        $global_name=0; //@line 2150 "cPickle.c"
        $module=0; //@line 2150 "cPickle.c"
        $mod=0; //@line 2150 "cPickle.c"
        $klass=0; //@line 2150 "cPickle.c"
        $res=-1; //@line 2152 "cPickle.c"
        var $2=$name_addr; //@line 2156 "cPickle.c"
        var $3=($2)!=0; //@line 2156 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2156 "cPickle.c"
      case 1: // $bb
        var $4=$name_addr; //@line 2157 "cPickle.c"
        $global_name=$4; //@line 2157 "cPickle.c"
        var $5=$global_name; //@line 2158 "cPickle.c"
        var $6=$5; //@line 2158 "cPickle.c"
        var $7=HEAP[$6]; //@line 2158 "cPickle.c"
        var $8=($7) + 1; //@line 2158 "cPickle.c"
        var $9=$global_name; //@line 2158 "cPickle.c"
        var $10=$9; //@line 2158 "cPickle.c"
        HEAP[$10]=$8; //@line 2158 "cPickle.c"
        __label__ = 3; break; //@line 2158 "cPickle.c"
      case 2: // $bb1
        var $11=HEAP[___name___str]; //@line 2161 "cPickle.c"
        var $12=$args_addr; //@line 2161 "cPickle.c"
        var $13=_PyObject_GetAttr($12, $11); //@line 2161 "cPickle.c"
        $global_name=$13; //@line 2161 "cPickle.c"
        var $14=$global_name; //@line 2161 "cPickle.c"
        var $15=($14)==0; //@line 2161 "cPickle.c"
        if ($15) { __label__ = 39; break; } else { __label__ = 3; break; } //@line 2161 "cPickle.c"
      case 3: // $bb2
        var $16=$args_addr; //@line 2165 "cPickle.c"
        var $17=$global_name; //@line 2165 "cPickle.c"
        var $18=_whichmodule($16, $17); //@line 2165 "cPickle.c"
        $module=$18; //@line 2165 "cPickle.c"
        var $19=($18)==0; //@line 2165 "cPickle.c"
        if ($19) { __label__ = 42; break; } else { __label__ = 4; break; } //@line 2165 "cPickle.c"
      case 4: // $bb3
        var $20=$module; //@line 2168 "cPickle.c"
        var $21=_PyString_Size($20); //@line 2168 "cPickle.c"
        $module_size=$21; //@line 2168 "cPickle.c"
        var $22=$module_size; //@line 2168 "cPickle.c"
        var $23=($22) < 0; //@line 2168 "cPickle.c"
        if ($23) { __label__ = 39; break; } else { __label__ = 5; break; } //@line 2168 "cPickle.c"
      case 5: // $bb4
        var $24=$global_name; //@line 2168 "cPickle.c"
        var $25=_PyString_Size($24); //@line 2168 "cPickle.c"
        $name_size=$25; //@line 2168 "cPickle.c"
        var $26=$name_size; //@line 2168 "cPickle.c"
        var $27=($26) < 0; //@line 2168 "cPickle.c"
        if ($27) { __label__ = 39; break; } else { __label__ = 6; break; } //@line 2168 "cPickle.c"
      case 6: // $bb5
        var $28=$module; //@line 2172 "cPickle.c"
        var $29=$28; //@line 2172 "cPickle.c"
        var $30=$29+20; //@line 2172 "cPickle.c"
        var $31=$30; //@line 2172 "cPickle.c"
        $module_str=$31; //@line 2172 "cPickle.c"
        var $32=$global_name; //@line 2173 "cPickle.c"
        var $33=$32; //@line 2173 "cPickle.c"
        var $34=$33+20; //@line 2173 "cPickle.c"
        var $35=$34; //@line 2173 "cPickle.c"
        $name_str=$35; //@line 2173 "cPickle.c"
        var $36=$module_str; //@line 2177 "cPickle.c"
        var $37=_PyImport_ImportModule($36); //@line 2177 "cPickle.c"
        $mod=$37; //@line 2177 "cPickle.c"
        var $38=$mod; //@line 2178 "cPickle.c"
        var $39=($38)==0; //@line 2178 "cPickle.c"
        if ($39) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2178 "cPickle.c"
      case 7: // $bb6
        var $40=HEAP[_PicklingError]; //@line 2179 "cPickle.c"
        var $41=$args_addr; //@line 2179 "cPickle.c"
        var $42=$module; //@line 2179 "cPickle.c"
        _cPickle_ErrFormat($40, __str25, __str26, allocate([$41,0,0,0,$42,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2179 "cPickle.c"
        __label__ = 39; break; //@line 2179 "cPickle.c"
      case 8: // $bb7
        var $43=$mod; //@line 2185 "cPickle.c"
        var $44=$name_str; //@line 2185 "cPickle.c"
        var $45=_PyObject_GetAttrString($43, $44); //@line 2185 "cPickle.c"
        $klass=$45; //@line 2185 "cPickle.c"
        var $46=$klass; //@line 2186 "cPickle.c"
        var $47=($46)==0; //@line 2186 "cPickle.c"
        if ($47) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2186 "cPickle.c"
      case 9: // $bb8
        var $48=HEAP[_PicklingError]; //@line 2187 "cPickle.c"
        var $49=$args_addr; //@line 2187 "cPickle.c"
        var $50=$module; //@line 2187 "cPickle.c"
        var $51=$global_name; //@line 2187 "cPickle.c"
        _cPickle_ErrFormat($48, __str27, __str28, allocate([$49,0,0,0,$50,0,0,0,$51,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2187 "cPickle.c"
        __label__ = 39; break; //@line 2187 "cPickle.c"
      case 10: // $bb9
        var $52=$klass; //@line 2193 "cPickle.c"
        var $53=$args_addr; //@line 2193 "cPickle.c"
        var $54=($52)!=($53); //@line 2193 "cPickle.c"
        var $55=$klass; //@line 2194 "cPickle.c"
        var $56=$55; //@line 2194 "cPickle.c"
        var $57=HEAP[$56]; //@line 2194 "cPickle.c"
        var $58=($57) - 1; //@line 2194 "cPickle.c"
        var $59=$klass; //@line 2194 "cPickle.c"
        var $60=$59; //@line 2194 "cPickle.c"
        HEAP[$60]=$58; //@line 2194 "cPickle.c"
        var $61=$klass; //@line 2194 "cPickle.c"
        var $62=$61; //@line 2194 "cPickle.c"
        var $63=HEAP[$62]; //@line 2194 "cPickle.c"
        var $64=($63)==0; //@line 2194 "cPickle.c"
        if ($54) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 2193 "cPickle.c"
      case 11: // $bb10
        if ($64) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2194 "cPickle.c"
      case 12: // $bb11
        var $65=$klass; //@line 2194 "cPickle.c"
        var $66=$65+4; //@line 2194 "cPickle.c"
        var $67=HEAP[$66]; //@line 2194 "cPickle.c"
        var $68=$67+24; //@line 2194 "cPickle.c"
        var $69=HEAP[$68]; //@line 2194 "cPickle.c"
        var $70=$klass; //@line 2194 "cPickle.c"
        FUNCTION_TABLE[$69]($70); //@line 2194 "cPickle.c"
        __label__ = 13; break; //@line 2194 "cPickle.c"
      case 13: // $bb12
        var $71=HEAP[_PicklingError]; //@line 2195 "cPickle.c"
        var $72=$args_addr; //@line 2195 "cPickle.c"
        var $73=$module; //@line 2195 "cPickle.c"
        var $74=$global_name; //@line 2195 "cPickle.c"
        _cPickle_ErrFormat($71, __str29, __str28, allocate([$72,0,0,0,$73,0,0,0,$74,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2195 "cPickle.c"
        __label__ = 39; break; //@line 2195 "cPickle.c"
      case 14: // $bb13
        if ($64) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2201 "cPickle.c"
      case 15: // $bb14
        var $75=$klass; //@line 2201 "cPickle.c"
        var $76=$75+4; //@line 2201 "cPickle.c"
        var $77=HEAP[$76]; //@line 2201 "cPickle.c"
        var $78=$77+24; //@line 2201 "cPickle.c"
        var $79=HEAP[$78]; //@line 2201 "cPickle.c"
        var $80=$klass; //@line 2201 "cPickle.c"
        FUNCTION_TABLE[$79]($80); //@line 2201 "cPickle.c"
        __label__ = 16; break; //@line 2201 "cPickle.c"
      case 16: // $bb15
        var $81=$self_addr; //@line 2203 "cPickle.c"
        var $82=$81+36; //@line 2203 "cPickle.c"
        var $83=HEAP[$82]; //@line 2203 "cPickle.c"
        var $84=($83) > 1; //@line 2203 "cPickle.c"
        if ($84) { __label__ = 17; break; } else { __label__ = 29; break; } //@line 2203 "cPickle.c"
      case 17: // $bb16
        var $85=HEAP[_two_tuple]; //@line 2212 "cPickle.c"
        var $86=$85; //@line 2212 "cPickle.c"
        var $87=$86+12; //@line 2212 "cPickle.c"
        var $88=$87; //@line 2212 "cPickle.c"
        var $89=$module; //@line 2212 "cPickle.c"
        HEAP[$88]=$89; //@line 2212 "cPickle.c"
        var $90=HEAP[_two_tuple]; //@line 2213 "cPickle.c"
        var $91=$90; //@line 2213 "cPickle.c"
        var $92=$91+12; //@line 2213 "cPickle.c"
        var $93=$92+4; //@line 2213 "cPickle.c"
        var $94=$global_name; //@line 2213 "cPickle.c"
        HEAP[$93]=$94; //@line 2213 "cPickle.c"
        var $95=HEAP[_two_tuple]; //@line 2214 "cPickle.c"
        var $96=HEAP[_extension_registry]; //@line 2214 "cPickle.c"
        var $97=_PyDict_GetItem($96, $95); //@line 2214 "cPickle.c"
        $py_code=$97; //@line 2214 "cPickle.c"
        var $98=$py_code; //@line 2215 "cPickle.c"
        var $99=($98)==0; //@line 2215 "cPickle.c"
        if ($99) { __label__ = 29; break; } else { __label__ = 18; break; } //@line 2215 "cPickle.c"
      case 18: // $bb17
        var $100=$py_code; //@line 2219 "cPickle.c"
        var $101=$100+4; //@line 2219 "cPickle.c"
        var $102=HEAP[$101]; //@line 2219 "cPickle.c"
        var $103=$102+84; //@line 2219 "cPickle.c"
        var $104=HEAP[$103]; //@line 2219 "cPickle.c"
        var $105=($104) & 8388608; //@line 2219 "cPickle.c"
        var $106=($105)==0; //@line 2219 "cPickle.c"
        if ($106) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2219 "cPickle.c"
      case 19: // $bb18
        var $107=HEAP[_PicklingError]; //@line 2220 "cPickle.c"
        var $108=$args_addr; //@line 2220 "cPickle.c"
        var $109=$py_code; //@line 2220 "cPickle.c"
        _cPickle_ErrFormat($107, __str30, __str31, allocate([$108,0,0,0,$109,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2220 "cPickle.c"
        __label__ = 39; break; //@line 2220 "cPickle.c"
      case 20: // $bb19
        var $110=$py_code; //@line 2225 "cPickle.c"
        var $111=$110; //@line 2225 "cPickle.c"
        var $112=$111+8; //@line 2225 "cPickle.c"
        var $113=HEAP[$112]; //@line 2225 "cPickle.c"
        $code=$113; //@line 2225 "cPickle.c"
        var $114=$code; //@line 2226 "cPickle.c"
        var $115=($114) <= 0; //@line 2226 "cPickle.c"
        if ($115) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 2226 "cPickle.c"
      case 21: // $bb20
        var $116=HEAP[_PicklingError]; //@line 2227 "cPickle.c"
        var $117=$args_addr; //@line 2227 "cPickle.c"
        var $118=$code; //@line 2227 "cPickle.c"
        _cPickle_ErrFormat($116, __str32, __str33, allocate([$117,0,0,0,$118,0,0,0], ["%struct.PyObject*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 2227 "cPickle.c"
        __label__ = 39; break; //@line 2227 "cPickle.c"
      case 22: // $bb21
        var $119=$code; //@line 2234 "cPickle.c"
        var $120=($119) <= 255; //@line 2234 "cPickle.c"
        if ($120) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 2234 "cPickle.c"
      case 23: // $bb22
        var $121=$c_str; //@line 2235 "cPickle.c"
        HEAP[$121]=-126; //@line 2235 "cPickle.c"
        var $122=$code; //@line 2236 "cPickle.c"
        var $123=((($122)) & 255); //@line 2236 "cPickle.c"
        var $124=$c_str+1; //@line 2236 "cPickle.c"
        HEAP[$124]=$123; //@line 2236 "cPickle.c"
        $n=2; //@line 2237 "cPickle.c"
        __label__ = 27; break; //@line 2237 "cPickle.c"
      case 24: // $bb23
        var $125=$code; //@line 2239 "cPickle.c"
        var $126=($125) <= 65535; //@line 2239 "cPickle.c"
        var $127=$c_str; //@line 2240 "cPickle.c"
        if ($126) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 2239 "cPickle.c"
      case 25: // $bb24
        HEAP[$127]=-125; //@line 2240 "cPickle.c"
        var $128=$code; //@line 2241 "cPickle.c"
        var $129=((($128)) & 255); //@line 2241 "cPickle.c"
        var $130=$c_str+1; //@line 2241 "cPickle.c"
        HEAP[$130]=$129; //@line 2241 "cPickle.c"
        var $131=$code; //@line 2242 "cPickle.c"
        var $132=($131) >> 8; //@line 2242 "cPickle.c"
        var $133=((($132)) & 255); //@line 2242 "cPickle.c"
        var $134=$c_str+2; //@line 2242 "cPickle.c"
        HEAP[$134]=$133; //@line 2242 "cPickle.c"
        $n=3; //@line 2243 "cPickle.c"
        __label__ = 27; break; //@line 2243 "cPickle.c"
      case 26: // $bb25
        HEAP[$127]=-124; //@line 2246 "cPickle.c"
        var $135=$code; //@line 2247 "cPickle.c"
        var $136=((($135)) & 255); //@line 2247 "cPickle.c"
        var $137=$c_str+1; //@line 2247 "cPickle.c"
        HEAP[$137]=$136; //@line 2247 "cPickle.c"
        var $138=$code; //@line 2248 "cPickle.c"
        var $139=($138) >> 8; //@line 2248 "cPickle.c"
        var $140=((($139)) & 255); //@line 2248 "cPickle.c"
        var $141=$c_str+2; //@line 2248 "cPickle.c"
        HEAP[$141]=$140; //@line 2248 "cPickle.c"
        var $142=$code; //@line 2249 "cPickle.c"
        var $143=($142) >> 16; //@line 2249 "cPickle.c"
        var $144=((($143)) & 255); //@line 2249 "cPickle.c"
        var $145=$c_str+3; //@line 2249 "cPickle.c"
        HEAP[$145]=$144; //@line 2249 "cPickle.c"
        var $146=$code; //@line 2250 "cPickle.c"
        var $147=($146) >> 24; //@line 2250 "cPickle.c"
        var $148=((($147)) & 255); //@line 2250 "cPickle.c"
        var $149=$c_str+4; //@line 2250 "cPickle.c"
        HEAP[$149]=$148; //@line 2250 "cPickle.c"
        $n=5; //@line 2251 "cPickle.c"
        __label__ = 27; break; //@line 2251 "cPickle.c"
      case 27: // $bb26
        var $150=$self_addr; //@line 2254 "cPickle.c"
        var $151=$150+48; //@line 2254 "cPickle.c"
        var $152=HEAP[$151]; //@line 2254 "cPickle.c"
        var $153=$self_addr; //@line 2254 "cPickle.c"
        var $c_str27=$c_str; //@line 2254 "cPickle.c"
        var $154=$n; //@line 2254 "cPickle.c"
        var $155=FUNCTION_TABLE[$152]($153, $c_str27, $154); //@line 2254 "cPickle.c"
        var $156=($155) >= 0; //@line 2254 "cPickle.c"
        if ($156) { __label__ = 28; break; } else { __label__ = 39; break; } //@line 2254 "cPickle.c"
      case 28: // $bb28
        $res=0; //@line 2255 "cPickle.c"
        __label__ = 39; break; //@line 2255 "cPickle.c"
      case 29: // $gen_global
        var $157=$self_addr; //@line 2260 "cPickle.c"
        var $158=$157+48; //@line 2260 "cPickle.c"
        var $159=HEAP[$158]; //@line 2260 "cPickle.c"
        var $160=$self_addr; //@line 2260 "cPickle.c"
        var $161=FUNCTION_TABLE[$159]($160, _global_10855, 1); //@line 2260 "cPickle.c"
        var $162=($161) < 0; //@line 2260 "cPickle.c"
        if ($162) { __label__ = 39; break; } else { __label__ = 30; break; } //@line 2260 "cPickle.c"
      case 30: // $bb30
        var $163=$self_addr; //@line 2263 "cPickle.c"
        var $164=$163+48; //@line 2263 "cPickle.c"
        var $165=HEAP[$164]; //@line 2263 "cPickle.c"
        var $166=$self_addr; //@line 2263 "cPickle.c"
        var $167=$module_str; //@line 2263 "cPickle.c"
        var $168=$module_size; //@line 2263 "cPickle.c"
        var $169=FUNCTION_TABLE[$165]($166, $167, $168); //@line 2263 "cPickle.c"
        var $170=($169) < 0; //@line 2263 "cPickle.c"
        if ($170) { __label__ = 39; break; } else { __label__ = 31; break; } //@line 2263 "cPickle.c"
      case 31: // $bb31
        var $171=$self_addr; //@line 2266 "cPickle.c"
        var $172=$171+48; //@line 2266 "cPickle.c"
        var $173=HEAP[$172]; //@line 2266 "cPickle.c"
        var $174=$self_addr; //@line 2266 "cPickle.c"
        var $175=FUNCTION_TABLE[$173]($174, __str12, 1); //@line 2266 "cPickle.c"
        var $176=($175) < 0; //@line 2266 "cPickle.c"
        if ($176) { __label__ = 39; break; } else { __label__ = 32; break; } //@line 2266 "cPickle.c"
      case 32: // $bb32
        var $177=$self_addr; //@line 2269 "cPickle.c"
        var $178=$177+48; //@line 2269 "cPickle.c"
        var $179=HEAP[$178]; //@line 2269 "cPickle.c"
        var $180=$self_addr; //@line 2269 "cPickle.c"
        var $181=$name_str; //@line 2269 "cPickle.c"
        var $182=$name_size; //@line 2269 "cPickle.c"
        var $183=FUNCTION_TABLE[$179]($180, $181, $182); //@line 2269 "cPickle.c"
        var $184=($183) < 0; //@line 2269 "cPickle.c"
        if ($184) { __label__ = 39; break; } else { __label__ = 33; break; } //@line 2269 "cPickle.c"
      case 33: // $bb33
        var $185=$self_addr; //@line 2272 "cPickle.c"
        var $186=$185+48; //@line 2272 "cPickle.c"
        var $187=HEAP[$186]; //@line 2272 "cPickle.c"
        var $188=$self_addr; //@line 2272 "cPickle.c"
        var $189=FUNCTION_TABLE[$187]($188, __str12, 1); //@line 2272 "cPickle.c"
        var $190=($189) < 0; //@line 2272 "cPickle.c"
        if ($190) { __label__ = 39; break; } else { __label__ = 34; break; } //@line 2272 "cPickle.c"
      case 34: // $bb34
        var $191=$self_addr; //@line 2275 "cPickle.c"
        var $192=$args_addr; //@line 2275 "cPickle.c"
        $self_addr_i=$191;
        $ob_addr_i=$192;
        var $193=$ob_addr_i; //@line 772 "cPickle.c"
        var $194=$193; //@line 772 "cPickle.c"
        var $195=HEAP[$194]; //@line 772 "cPickle.c"
        var $196=($195) <= 1; //@line 772 "cPickle.c"
        if ($196) { __label__ = 36; break; } else { __label__ = 35; break; } //@line 772 "cPickle.c"
      case 35: // $bb_i
        var $197=$self_addr_i; //@line 772 "cPickle.c"
        var $198=$197+44; //@line 772 "cPickle.c"
        var $199=HEAP[$198]; //@line 772 "cPickle.c"
        var $200=($199)!=0; //@line 772 "cPickle.c"
        if ($200) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 772 "cPickle.c"
      case 36: // $put_exit_thread
        $0=0; //@line 773 "cPickle.c"
        $retval_i=0; //@line 773 "cPickle.c"
        __label__ = 38; break;
      case 37: // $put_exit
        var $201=$self_addr_i; //@line 775 "cPickle.c"
        var $202=$ob_addr_i; //@line 775 "cPickle.c"
        var $203=_put2($201, $202); //@line 775 "cPickle.c"
        $0=$203; //@line 775 "cPickle.c"
        $retval_i=$203; //@line 773 "cPickle.c"
        var $204=($203) < 0; //@line 2275 "cPickle.c"
        if ($204) { __label__ = 39; break; } else { __label__ = 38; break; } //@line 2275 "cPickle.c"
      case 38: // $bb35
        $res=0; //@line 2278 "cPickle.c"
        __label__ = 39; break; //@line 2280 "cPickle.c"
      case 39: // $finally
        var $_pr=$module;
        var $205=($_pr)!=0; //@line 2281 "cPickle.c"
        if ($205) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 2281 "cPickle.c"
      case 40: // $bb36
        var $206=$module; //@line 2281 "cPickle.c"
        var $207=$206; //@line 2281 "cPickle.c"
        var $208=HEAP[$207]; //@line 2281 "cPickle.c"
        var $209=($208) - 1; //@line 2281 "cPickle.c"
        var $210=$module; //@line 2281 "cPickle.c"
        var $211=$210; //@line 2281 "cPickle.c"
        HEAP[$211]=$209; //@line 2281 "cPickle.c"
        var $212=$module; //@line 2281 "cPickle.c"
        var $213=$212; //@line 2281 "cPickle.c"
        var $214=HEAP[$213]; //@line 2281 "cPickle.c"
        var $215=($214)==0; //@line 2281 "cPickle.c"
        if ($215) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 2281 "cPickle.c"
      case 41: // $bb37
        var $216=$module; //@line 2281 "cPickle.c"
        var $217=$216+4; //@line 2281 "cPickle.c"
        var $218=HEAP[$217]; //@line 2281 "cPickle.c"
        var $219=$218+24; //@line 2281 "cPickle.c"
        var $220=HEAP[$219]; //@line 2281 "cPickle.c"
        var $221=$module; //@line 2281 "cPickle.c"
        FUNCTION_TABLE[$220]($221); //@line 2281 "cPickle.c"
        __label__ = 42; break; //@line 2281 "cPickle.c"
      case 42: // $bb38
        var $222=$global_name; //@line 2282 "cPickle.c"
        var $223=($222)!=0; //@line 2282 "cPickle.c"
        if ($223) { __label__ = 43; break; } else { __label__ = 45; break; } //@line 2282 "cPickle.c"
      case 43: // $bb39
        var $224=$global_name; //@line 2282 "cPickle.c"
        var $225=$224; //@line 2282 "cPickle.c"
        var $226=HEAP[$225]; //@line 2282 "cPickle.c"
        var $227=($226) - 1; //@line 2282 "cPickle.c"
        var $228=$global_name; //@line 2282 "cPickle.c"
        var $229=$228; //@line 2282 "cPickle.c"
        HEAP[$229]=$227; //@line 2282 "cPickle.c"
        var $230=$global_name; //@line 2282 "cPickle.c"
        var $231=$230; //@line 2282 "cPickle.c"
        var $232=HEAP[$231]; //@line 2282 "cPickle.c"
        var $233=($232)==0; //@line 2282 "cPickle.c"
        if ($233) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 2282 "cPickle.c"
      case 44: // $bb40
        var $234=$global_name; //@line 2282 "cPickle.c"
        var $235=$234+4; //@line 2282 "cPickle.c"
        var $236=HEAP[$235]; //@line 2282 "cPickle.c"
        var $237=$236+24; //@line 2282 "cPickle.c"
        var $238=HEAP[$237]; //@line 2282 "cPickle.c"
        var $239=$global_name; //@line 2282 "cPickle.c"
        FUNCTION_TABLE[$238]($239); //@line 2282 "cPickle.c"
        __label__ = 45; break; //@line 2282 "cPickle.c"
      case 45: // $bb41
        var $240=$mod; //@line 2283 "cPickle.c"
        var $241=($240)!=0; //@line 2283 "cPickle.c"
        if ($241) { __label__ = 46; break; } else { __label__ = 48; break; } //@line 2283 "cPickle.c"
      case 46: // $bb42
        var $242=$mod; //@line 2283 "cPickle.c"
        var $243=$242; //@line 2283 "cPickle.c"
        var $244=HEAP[$243]; //@line 2283 "cPickle.c"
        var $245=($244) - 1; //@line 2283 "cPickle.c"
        var $246=$mod; //@line 2283 "cPickle.c"
        var $247=$246; //@line 2283 "cPickle.c"
        HEAP[$247]=$245; //@line 2283 "cPickle.c"
        var $248=$mod; //@line 2283 "cPickle.c"
        var $249=$248; //@line 2283 "cPickle.c"
        var $250=HEAP[$249]; //@line 2283 "cPickle.c"
        var $251=($250)==0; //@line 2283 "cPickle.c"
        if ($251) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 2283 "cPickle.c"
      case 47: // $bb43
        var $252=$mod; //@line 2283 "cPickle.c"
        var $253=$252+4; //@line 2283 "cPickle.c"
        var $254=HEAP[$253]; //@line 2283 "cPickle.c"
        var $255=$254+24; //@line 2283 "cPickle.c"
        var $256=HEAP[$255]; //@line 2283 "cPickle.c"
        var $257=$mod; //@line 2283 "cPickle.c"
        FUNCTION_TABLE[$256]($257); //@line 2283 "cPickle.c"
        __label__ = 48; break; //@line 2283 "cPickle.c"
      case 48: // $bb44
        var $258=$res; //@line 2285 "cPickle.c"
        $1=$258; //@line 2285 "cPickle.c"
        var $259=$1; //@line 2285 "cPickle.c"
        $retval=$259; //@line 2285 "cPickle.c"
        var $retval45=$retval; //@line 2285 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval45; //@line 2285 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_pers($self, $args, $f) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $f_addr;
        var $retval;
        var $0;
        var $pid;
        var $size;
        var $res;
        $self_addr=$self;
        $args_addr=$args;
        $f_addr=$f;
        $pid=0; //@line 2291 "cPickle.c"
        $res=-1; //@line 2292 "cPickle.c"
        var $1=$args_addr; //@line 2296 "cPickle.c"
        var $2=$1; //@line 2296 "cPickle.c"
        var $3=HEAP[$2]; //@line 2296 "cPickle.c"
        var $4=($3) + 1; //@line 2296 "cPickle.c"
        var $5=$args_addr; //@line 2296 "cPickle.c"
        var $6=$5; //@line 2296 "cPickle.c"
        HEAP[$6]=$4; //@line 2296 "cPickle.c"
        var $7=$self_addr; //@line 2297 "cPickle.c"
        var $8=$7+24; //@line 2297 "cPickle.c"
        var $9=HEAP[$8]; //@line 2297 "cPickle.c"
        var $10=($9)!=0; //@line 2297 "cPickle.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 2297 "cPickle.c"
      case 1: // $bb
        var $11=_PyTuple_New(1); //@line 2297 "cPickle.c"
        var $12=$self_addr; //@line 2297 "cPickle.c"
        var $13=$12+24; //@line 2297 "cPickle.c"
        HEAP[$13]=$11; //@line 2297 "cPickle.c"
        var $14=$self_addr; //@line 2297 "cPickle.c"
        var $15=$14+24; //@line 2297 "cPickle.c"
        var $16=HEAP[$15]; //@line 2297 "cPickle.c"
        var $17=($16)!=0; //@line 2297 "cPickle.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 2297 "cPickle.c"
      case 2: // $bb1
        var $18=$self_addr; //@line 2297 "cPickle.c"
        var $19=$18+24; //@line 2297 "cPickle.c"
        var $20=HEAP[$19]; //@line 2297 "cPickle.c"
        var $21=$20; //@line 2297 "cPickle.c"
        var $22=$21+12; //@line 2297 "cPickle.c"
        var $23=$22; //@line 2297 "cPickle.c"
        var $24=HEAP[$23]; //@line 2297 "cPickle.c"
        var $25=($24)!=0; //@line 2297 "cPickle.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 2297 "cPickle.c"
      case 3: // $bb2
        var $26=$self_addr; //@line 2297 "cPickle.c"
        var $27=$26+24; //@line 2297 "cPickle.c"
        var $28=HEAP[$27]; //@line 2297 "cPickle.c"
        var $29=$28; //@line 2297 "cPickle.c"
        var $30=$29+12; //@line 2297 "cPickle.c"
        var $31=$30; //@line 2297 "cPickle.c"
        var $32=HEAP[$31]; //@line 2297 "cPickle.c"
        var $33=$32; //@line 2297 "cPickle.c"
        var $34=HEAP[$33]; //@line 2297 "cPickle.c"
        var $35=($34) - 1; //@line 2297 "cPickle.c"
        var $36=$32; //@line 2297 "cPickle.c"
        HEAP[$36]=$35; //@line 2297 "cPickle.c"
        var $37=$32; //@line 2297 "cPickle.c"
        var $38=HEAP[$37]; //@line 2297 "cPickle.c"
        var $39=($38)==0; //@line 2297 "cPickle.c"
        if ($39) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2297 "cPickle.c"
      case 4: // $bb3
        var $40=$self_addr; //@line 2297 "cPickle.c"
        var $41=$40+24; //@line 2297 "cPickle.c"
        var $42=HEAP[$41]; //@line 2297 "cPickle.c"
        var $43=$42; //@line 2297 "cPickle.c"
        var $44=$43+12; //@line 2297 "cPickle.c"
        var $45=$44; //@line 2297 "cPickle.c"
        var $46=HEAP[$45]; //@line 2297 "cPickle.c"
        var $47=$46+4; //@line 2297 "cPickle.c"
        var $48=HEAP[$47]; //@line 2297 "cPickle.c"
        var $49=$48+24; //@line 2297 "cPickle.c"
        var $50=HEAP[$49]; //@line 2297 "cPickle.c"
        var $51=$self_addr; //@line 2297 "cPickle.c"
        var $52=$51+24; //@line 2297 "cPickle.c"
        var $53=HEAP[$52]; //@line 2297 "cPickle.c"
        var $54=$53; //@line 2297 "cPickle.c"
        var $55=$54+12; //@line 2297 "cPickle.c"
        var $56=$55; //@line 2297 "cPickle.c"
        var $57=HEAP[$56]; //@line 2297 "cPickle.c"
        FUNCTION_TABLE[$50]($57); //@line 2297 "cPickle.c"
        __label__ = 5; break; //@line 2297 "cPickle.c"
      case 5: // $bb4
        var $58=$self_addr; //@line 2297 "cPickle.c"
        var $59=$58+24; //@line 2297 "cPickle.c"
        var $60=HEAP[$59]; //@line 2297 "cPickle.c"
        var $61=$60; //@line 2297 "cPickle.c"
        var $62=$61+12; //@line 2297 "cPickle.c"
        var $63=$62; //@line 2297 "cPickle.c"
        var $64=$args_addr; //@line 2297 "cPickle.c"
        HEAP[$63]=$64; //@line 2297 "cPickle.c"
        __label__ = 8; break; //@line 2297 "cPickle.c"
      case 6: // $bb5
        var $65=$args_addr; //@line 2297 "cPickle.c"
        var $66=$65; //@line 2297 "cPickle.c"
        var $67=HEAP[$66]; //@line 2297 "cPickle.c"
        var $68=($67) - 1; //@line 2297 "cPickle.c"
        var $69=$args_addr; //@line 2297 "cPickle.c"
        var $70=$69; //@line 2297 "cPickle.c"
        HEAP[$70]=$68; //@line 2297 "cPickle.c"
        var $71=$args_addr; //@line 2297 "cPickle.c"
        var $72=$71; //@line 2297 "cPickle.c"
        var $73=HEAP[$72]; //@line 2297 "cPickle.c"
        var $74=($73)==0; //@line 2297 "cPickle.c"
        if ($74) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2297 "cPickle.c"
      case 7: // $bb6
        var $75=$args_addr; //@line 2297 "cPickle.c"
        var $76=$75+4; //@line 2297 "cPickle.c"
        var $77=HEAP[$76]; //@line 2297 "cPickle.c"
        var $78=$77+24; //@line 2297 "cPickle.c"
        var $79=HEAP[$78]; //@line 2297 "cPickle.c"
        var $80=$args_addr; //@line 2297 "cPickle.c"
        FUNCTION_TABLE[$79]($80); //@line 2297 "cPickle.c"
        __label__ = 8; break; //@line 2297 "cPickle.c"
      case 8: // $bb7
        var $81=$self_addr; //@line 2298 "cPickle.c"
        var $82=$81+24; //@line 2298 "cPickle.c"
        var $83=HEAP[$82]; //@line 2298 "cPickle.c"
        var $84=($83)!=0; //@line 2298 "cPickle.c"
        if ($84) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 2298 "cPickle.c"
      case 9: // $bb8
        var $85=$self_addr; //@line 2299 "cPickle.c"
        var $86=$85+24; //@line 2299 "cPickle.c"
        var $87=HEAP[$86]; //@line 2299 "cPickle.c"
        var $88=$f_addr; //@line 2299 "cPickle.c"
        var $89=_PyObject_Call($88, $87, 0); //@line 2299 "cPickle.c"
        $pid=$89; //@line 2299 "cPickle.c"
        var $90=$self_addr; //@line 2300 "cPickle.c"
        var $91=$90+24; //@line 2300 "cPickle.c"
        var $92=HEAP[$91]; //@line 2300 "cPickle.c"
        var $93=$92; //@line 2300 "cPickle.c"
        var $94=HEAP[$93]; //@line 2300 "cPickle.c"
        var $95=($94) > 1; //@line 2300 "cPickle.c"
        if ($95) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 2300 "cPickle.c"
      case 10: // $bb9
        var $96=$self_addr; //@line 2300 "cPickle.c"
        var $97=$96+24; //@line 2300 "cPickle.c"
        var $98=HEAP[$97]; //@line 2300 "cPickle.c"
        var $99=$98; //@line 2300 "cPickle.c"
        var $100=HEAP[$99]; //@line 2300 "cPickle.c"
        var $101=($100) - 1; //@line 2300 "cPickle.c"
        var $102=$98; //@line 2300 "cPickle.c"
        HEAP[$102]=$101; //@line 2300 "cPickle.c"
        var $103=$98; //@line 2300 "cPickle.c"
        var $104=HEAP[$103]; //@line 2300 "cPickle.c"
        var $105=($104)==0; //@line 2300 "cPickle.c"
        if ($105) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 2300 "cPickle.c"
      case 11: // $bb10
        var $106=$self_addr; //@line 2300 "cPickle.c"
        var $107=$106+24; //@line 2300 "cPickle.c"
        var $108=HEAP[$107]; //@line 2300 "cPickle.c"
        var $109=$108+4; //@line 2300 "cPickle.c"
        var $110=HEAP[$109]; //@line 2300 "cPickle.c"
        var $111=$110+24; //@line 2300 "cPickle.c"
        var $112=HEAP[$111]; //@line 2300 "cPickle.c"
        var $113=$self_addr; //@line 2300 "cPickle.c"
        var $114=$113+24; //@line 2300 "cPickle.c"
        var $115=HEAP[$114]; //@line 2300 "cPickle.c"
        FUNCTION_TABLE[$112]($115); //@line 2300 "cPickle.c"
        __label__ = 12; break; //@line 2300 "cPickle.c"
      case 12: // $bb11
        var $116=$self_addr; //@line 2300 "cPickle.c"
        var $117=$116+24; //@line 2300 "cPickle.c"
        HEAP[$117]=0; //@line 2300 "cPickle.c"
        __label__ = 13; break; //@line 2300 "cPickle.c"
      case 13: // $bb12
        var $118=$pid; //@line 2302 "cPickle.c"
        var $119=($118)==0; //@line 2302 "cPickle.c"
        if ($119) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 2302 "cPickle.c"
      case 14: // $bb13
        $0=-1; //@line 2302 "cPickle.c"
        __label__ = 33; break; //@line 2302 "cPickle.c"
      case 15: // $bb14
        var $120=$pid; //@line 2304 "cPickle.c"
        var $121=($120)!=(__Py_NoneStruct); //@line 2304 "cPickle.c"
        if ($121) { __label__ = 16; break; } else { __label__ = 28; break; } //@line 2304 "cPickle.c"
      case 16: // $bb15
        var $122=$self_addr; //@line 2305 "cPickle.c"
        var $123=$122+40; //@line 2305 "cPickle.c"
        var $124=HEAP[$123]; //@line 2305 "cPickle.c"
        var $125=($124)==0; //@line 2305 "cPickle.c"
        if ($125) { __label__ = 17; break; } else { __label__ = 24; break; } //@line 2305 "cPickle.c"
      case 17: // $bb16
        var $126=$pid; //@line 2306 "cPickle.c"
        var $127=$126+4; //@line 2306 "cPickle.c"
        var $128=HEAP[$127]; //@line 2306 "cPickle.c"
        var $129=$128+84; //@line 2306 "cPickle.c"
        var $130=HEAP[$129]; //@line 2306 "cPickle.c"
        var $131=($130) & 134217728; //@line 2306 "cPickle.c"
        var $132=($131)==0; //@line 2306 "cPickle.c"
        if ($132) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 2306 "cPickle.c"
      case 18: // $bb17
        var $133=HEAP[_PicklingError]; //@line 2307 "cPickle.c"
        _PyErr_SetString($133, __str34); //@line 2307 "cPickle.c"
        __label__ = 29; break; //@line 2307 "cPickle.c"
      case 19: // $bb18
        var $134=$self_addr; //@line 2312 "cPickle.c"
        var $135=$134+48; //@line 2312 "cPickle.c"
        var $136=HEAP[$135]; //@line 2312 "cPickle.c"
        var $137=$self_addr; //@line 2312 "cPickle.c"
        var $138=FUNCTION_TABLE[$136]($137, _persid_10999, 1); //@line 2312 "cPickle.c"
        var $139=($138) < 0; //@line 2312 "cPickle.c"
        if ($139) { __label__ = 29; break; } else { __label__ = 20; break; } //@line 2312 "cPickle.c"
      case 20: // $bb19
        var $140=$pid; //@line 2315 "cPickle.c"
        var $141=_PyString_Size($140); //@line 2315 "cPickle.c"
        $size=$141; //@line 2315 "cPickle.c"
        var $142=$size; //@line 2315 "cPickle.c"
        var $143=($142) < 0; //@line 2315 "cPickle.c"
        if ($143) { __label__ = 29; break; } else { __label__ = 21; break; } //@line 2315 "cPickle.c"
      case 21: // $bb20
        var $144=$self_addr; //@line 2318 "cPickle.c"
        var $145=$144+48; //@line 2318 "cPickle.c"
        var $146=HEAP[$145]; //@line 2318 "cPickle.c"
        var $147=$pid; //@line 2318 "cPickle.c"
        var $148=$147; //@line 2318 "cPickle.c"
        var $149=$148+20; //@line 2318 "cPickle.c"
        var $150=$149; //@line 2318 "cPickle.c"
        var $151=$self_addr; //@line 2318 "cPickle.c"
        var $152=$size; //@line 2318 "cPickle.c"
        var $153=FUNCTION_TABLE[$146]($151, $150, $152); //@line 2318 "cPickle.c"
        var $154=($153) < 0; //@line 2318 "cPickle.c"
        if ($154) { __label__ = 29; break; } else { __label__ = 22; break; } //@line 2318 "cPickle.c"
      case 22: // $bb21
        var $155=$self_addr; //@line 2324 "cPickle.c"
        var $156=$155+48; //@line 2324 "cPickle.c"
        var $157=HEAP[$156]; //@line 2324 "cPickle.c"
        var $158=$self_addr; //@line 2324 "cPickle.c"
        var $159=FUNCTION_TABLE[$157]($158, __str12, 1); //@line 2324 "cPickle.c"
        var $160=($159) < 0; //@line 2324 "cPickle.c"
        if ($160) { __label__ = 29; break; } else { __label__ = 23; break; } //@line 2324 "cPickle.c"
      case 23: // $bb22
        $res=1; //@line 2327 "cPickle.c"
        __label__ = 29; break; //@line 2327 "cPickle.c"
      case 24: // $bb23
        var $161=$self_addr; //@line 2330 "cPickle.c"
        var $162=$pid; //@line 2330 "cPickle.c"
        var $163=_save($161, $162, 1); //@line 2330 "cPickle.c"
        var $164=($163) >= 0; //@line 2330 "cPickle.c"
        if ($164) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 2330 "cPickle.c"
      case 25: // $bb24
        var $165=$self_addr; //@line 2331 "cPickle.c"
        var $166=$165+48; //@line 2331 "cPickle.c"
        var $167=HEAP[$166]; //@line 2331 "cPickle.c"
        var $168=$self_addr; //@line 2331 "cPickle.c"
        var $169=FUNCTION_TABLE[$167]($168, _binpersid_11000, 1); //@line 2331 "cPickle.c"
        var $170=($169) < 0; //@line 2331 "cPickle.c"
        if ($170) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 2331 "cPickle.c"
      case 26: // $bb25
        $res=-1; //@line 2332 "cPickle.c"
        __label__ = 29; break; //@line 2332 "cPickle.c"
      case 27: // $bb26
        $res=1; //@line 2334 "cPickle.c"
        __label__ = 29; break; //@line 2334 "cPickle.c"
      case 28: // $bb28
        $res=0; //@line 2340 "cPickle.c"
        __label__ = 29; break; //@line 2342 "cPickle.c"
      case 29: // $finally
        var $171=$pid; //@line 2343 "cPickle.c"
        var $172=($171)!=0; //@line 2343 "cPickle.c"
        if ($172) { __label__ = 30; break; } else { __label__ = 32; break; } //@line 2343 "cPickle.c"
      case 30: // $bb29
        var $173=$pid; //@line 2343 "cPickle.c"
        var $174=$173; //@line 2343 "cPickle.c"
        var $175=HEAP[$174]; //@line 2343 "cPickle.c"
        var $176=($175) - 1; //@line 2343 "cPickle.c"
        var $177=$pid; //@line 2343 "cPickle.c"
        var $178=$177; //@line 2343 "cPickle.c"
        HEAP[$178]=$176; //@line 2343 "cPickle.c"
        var $179=$pid; //@line 2343 "cPickle.c"
        var $180=$179; //@line 2343 "cPickle.c"
        var $181=HEAP[$180]; //@line 2343 "cPickle.c"
        var $182=($181)==0; //@line 2343 "cPickle.c"
        if ($182) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 2343 "cPickle.c"
      case 31: // $bb30
        var $183=$pid; //@line 2343 "cPickle.c"
        var $184=$183+4; //@line 2343 "cPickle.c"
        var $185=HEAP[$184]; //@line 2343 "cPickle.c"
        var $186=$185+24; //@line 2343 "cPickle.c"
        var $187=HEAP[$186]; //@line 2343 "cPickle.c"
        var $188=$pid; //@line 2343 "cPickle.c"
        FUNCTION_TABLE[$187]($188); //@line 2343 "cPickle.c"
        __label__ = 32; break; //@line 2343 "cPickle.c"
      case 32: // $bb31
        var $189=$res; //@line 2345 "cPickle.c"
        $0=$189; //@line 2345 "cPickle.c"
        __label__ = 33; break; //@line 2345 "cPickle.c"
      case 33: // $bb32
        var $190=$0; //@line 2302 "cPickle.c"
        $retval=$190; //@line 2302 "cPickle.c"
        var $retval33=$retval; //@line 2302 "cPickle.c"
        ;
        return $retval33; //@line 2302 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save($self, $args, $pers_save) {
    var __stackBase__  = STACKTOP; STACKTOP += 83; _memset(__stackBase__, 0, 83);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr_i_i169;
        var $ob_addr_i_i170;
        var $retval_i_i171;
        var $0;
        var $self_addr_i172;
        var $args_addr_i173;
        var $fn_addr_i;
        var $ob_addr_i;
        var $retval_i174;
        var $iftmp_170_i;
        var $1;
        var $callable_i=__stackBase__;
        var $argtup_i=__stackBase__+4;
        var $state_i175=__stackBase__+8;
        var $listitems_i=__stackBase__+12;
        var $dictitems_i=__stackBase__+16;
        var $size_i176;
        var $use_newobj_i;
        var $temp_i;
        var $cls_i;
        var $newargtup_i;
        var $n_i;
        var $i_i177;
        var $ob_dot_class_i;
        var $temp52_i;
        var $self_addr_i_i124;
        var $ob_addr_i_i125;
        var $retval_i_i126;
        var $2;
        var $self_addr_i127;
        var $args_addr_i128;
        var $retval_i129;
        var $3;
        var $class_i;
        var $module_i;
        var $name_i;
        var $state_i;
        var $getinitargs_func_i;
        var $getstate_func_i;
        var $class_args_i;
        var $module_str_i;
        var $name_str_i;
        var $module_size_i;
        var $name_size_i;
        var $res_i130;
        var $element_i;
        var $i_i131;
        var $len_i132;
        var $self_addr_i1_i;
        var $obj_addr_i_i;
        var $retval_i2_i;
        var $4;
        var $key_i_i=__stackBase__+20;
        var $value_i_i=__stackBase__+24;
        var $i_i_i;
        var $dict_size_i_i;
        var $ppos_i_i=__stackBase__+28;
        var $self_addr_i_i77;
        var $ob_addr_i_i78;
        var $retval_i_i79;
        var $5;
        var $self_addr_i80;
        var $args_addr_i81;
        var $retval_i82;
        var $6;
        var $iftmp_117_i;
        var $iftmp_113_i;
        var $res_i83;
        var $len_i85;
        var $iter_i86;
        var $self_addr_i_i;
        var $ob_addr_i_i;
        var $retval_i_i;
        var $7;
        var $self_addr_i51;
        var $args_addr_i52;
        var $retval_i53;
        var $8;
        var $iftmp_93_i;
        var $res_i54;
        var $s_i=__stackBase__+32;
        var $len_i55;
        var $iter_i;
        var $self_addr_i45;
        var $args_addr_i46;
        var $retval_i47;
        var $9;
        var $self_addr_i32;
        var $args_addr_i33;
        var $retval_i34;
        var $10;
        var $iftmp_52_i;
        var $l_i35;
        var $opcode_i=__stackBase__+35;
        var $self_addr_i15;
        var $args_addr_i16;
        var $retval_i17;
        var $11;
        var $c_str_i18=__stackBase__+36;
        var $l_i;
        var $len_i;
        var $self_addr_i2;
        var $args_addr_i3;
        var $retval_i4;
        var $12;
        var $size_i;
        var $res_i;
        var $repr_i;
        var $nbits_i;
        var $nbytes_i;
        var $pdata_i;
        var $c_str_i=__stackBase__+68;
        var $i_i;
        var $sign_i;
        var $self_addr_i;
        var $args_addr_i;
        var $retval_i;
        var $13;
        var $x_i;
        var $str_i=__stackBase__+73;
        var $result_i;
        var $buf_i;
        var $op_i=__stackBase__+82;
        var $self_addr;
        var $args_addr;
        var $pers_save_addr;
        var $retval;
        var $14;
        var $type;
        var $py_ob_id;
        var $__reduce__;
        var $t;
        var $res;
        var $tmp;
        $self_addr=$self;
        $args_addr=$args;
        $pers_save_addr=$pers_save;
        $py_ob_id=0; //@line 2532 "cPickle.c"
        $__reduce__=0; //@line 2532 "cPickle.c"
        $t=0; //@line 2532 "cPickle.c"
        $res=-1; //@line 2533 "cPickle.c"
        var $15=HEAP[__PyThreadState_Current]; //@line 2536 "cPickle.c"
        var $16=$15+12; //@line 2536 "cPickle.c"
        var $17=HEAP[$16]; //@line 2536 "cPickle.c"
        var $18=($17) + 1; //@line 2536 "cPickle.c"
        var $19=$15+12; //@line 2536 "cPickle.c"
        HEAP[$19]=$18; //@line 2536 "cPickle.c"
        var $20=$15+12; //@line 2536 "cPickle.c"
        var $21=HEAP[$20]; //@line 2536 "cPickle.c"
        var $22=HEAP[__Py_CheckRecursionLimit]; //@line 2536 "cPickle.c"
        var $23=($21) > ($22); //@line 2536 "cPickle.c"
        if ($23) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2536 "cPickle.c"
      case 1: // $bb
        var $24=__Py_CheckRecursiveCall(__str17); //@line 2536 "cPickle.c"
        var $25=($24)!=0; //@line 2536 "cPickle.c"
        if ($25) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2536 "cPickle.c"
      case 2: // $bb1
        $14=-1; //@line 2537 "cPickle.c"
        __label__ = 414; break; //@line 2537 "cPickle.c"
      case 3: // $bb2
        var $26=$pers_save_addr; //@line 2539 "cPickle.c"
        var $27=($26)==0; //@line 2539 "cPickle.c"
        if ($27) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 2539 "cPickle.c"
      case 4: // $bb3
        var $28=$self_addr; //@line 2539 "cPickle.c"
        var $29=$28+28; //@line 2539 "cPickle.c"
        var $30=HEAP[$29]; //@line 2539 "cPickle.c"
        var $31=($30)!=0; //@line 2539 "cPickle.c"
        if ($31) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 2539 "cPickle.c"
      case 5: // $bb4
        var $32=$self_addr; //@line 2540 "cPickle.c"
        var $33=$32+28; //@line 2540 "cPickle.c"
        var $34=HEAP[$33]; //@line 2540 "cPickle.c"
        var $35=$self_addr; //@line 2540 "cPickle.c"
        var $36=$args_addr; //@line 2540 "cPickle.c"
        var $37=_save_pers($35, $36, $34); //@line 2540 "cPickle.c"
        $tmp=$37; //@line 2540 "cPickle.c"
        var $38=$tmp; //@line 2540 "cPickle.c"
        var $39=($38)!=0; //@line 2540 "cPickle.c"
        if ($39) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2540 "cPickle.c"
      case 6: // $bb5
        var $40=$tmp; //@line 2541 "cPickle.c"
        $res=$40; //@line 2541 "cPickle.c"
        __label__ = 404; break; //@line 2541 "cPickle.c"
      case 7: // $bb6
        var $41=$args_addr; //@line 2546 "cPickle.c"
        var $42=($41)==(__Py_NoneStruct); //@line 2546 "cPickle.c"
        if ($42) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 2546 "cPickle.c"
      case 8: // $bb7
        var $43=$self_addr; //@line 2547 "cPickle.c"
        var $44=$args_addr; //@line 2547 "cPickle.c"
        $self_addr_i45=$43;
        $args_addr_i46=$44;
        var $45=$self_addr_i45; //@line 969 "cPickle.c"
        var $46=$45+48; //@line 969 "cPickle.c"
        var $47=HEAP[$46]; //@line 969 "cPickle.c"
        var $48=$self_addr_i45; //@line 969 "cPickle.c"
        var $49=FUNCTION_TABLE[$47]($48, _none_9451, 1); //@line 969 "cPickle.c"
        var $50=($49) < 0; //@line 969 "cPickle.c"
        if ($50) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 969 "cPickle.c"
      case 9: // $bb_i48
        $9=-1; //@line 970 "cPickle.c"
        __label__ = 11; break; //@line 970 "cPickle.c"
      case 10: // $bb1_i49
        $9=0; //@line 972 "cPickle.c"
        __label__ = 11; break; //@line 972 "cPickle.c"
      case 11: // $save_none_exit
        var $51=$9; //@line 970 "cPickle.c"
        $retval_i47=$51; //@line 970 "cPickle.c"
        var $retval3_i=$retval_i47; //@line 970 "cPickle.c"
        $res=$retval3_i; //@line 2547 "cPickle.c"
        __label__ = 404; break; //@line 2547 "cPickle.c"
      case 12: // $bb8
        var $52=$args_addr; //@line 2551 "cPickle.c"
        var $53=$52+4; //@line 2551 "cPickle.c"
        var $54=HEAP[$53]; //@line 2551 "cPickle.c"
        $type=$54; //@line 2551 "cPickle.c"
        var $55=$type; //@line 2553 "cPickle.c"
        var $56=$55+12; //@line 2553 "cPickle.c"
        var $57=HEAP[$56]; //@line 2553 "cPickle.c"
        var $58=$57; //@line 2553 "cPickle.c"
        var $59=HEAP[$58]; //@line 2553 "cPickle.c"
        var $60=($59); //@line 2553 "cPickle.c"
        if ($60 == 98) {
          __label__ = 13; break;
        }
        else if ($60 == 102) {
          __label__ = 74; break;
        }
        else if ($60 == 105) {
          __label__ = 24; break;
        }
        else if ($60 == 108) {
          __label__ = 38; break;
        }
        else if ($60 == 115) {
          __label__ = 92; break;
        }
        else if ($60 == 116) {
          __label__ = 89; break;
        }
        else if ($60 == 117) {
          __label__ = 95; break;
        }
        else {
        __label__ = 98; break;
        }
        
      case 13: // $bb9
        var $61=$args_addr; //@line 2555 "cPickle.c"
        var $62=($61)==(__Py_ZeroStruct); //@line 2555 "cPickle.c"
        var $63=$args_addr; //@line 2555 "cPickle.c"
        var $64=($63)==(__Py_TrueStruct); //@line 2555 "cPickle.c"
        var $or_cond=($62) | ($64);
        if ($or_cond) { __label__ = 14; break; } else { __label__ = 98; break; } //@line 2555 "cPickle.c"
      case 14: // $bb11
        var $65=$self_addr; //@line 2556 "cPickle.c"
        var $66=$args_addr; //@line 2556 "cPickle.c"
        $self_addr_i32=$65;
        $args_addr_i33=$66;
        var $67=$args_addr_i33; //@line 980 "cPickle.c"
        var $68=$67; //@line 980 "cPickle.c"
        var $69=$68+8; //@line 980 "cPickle.c"
        var $70=HEAP[$69]; //@line 980 "cPickle.c"
        $l_i35=$70; //@line 980 "cPickle.c"
        var $71=$self_addr_i32; //@line 982 "cPickle.c"
        var $72=$71+36; //@line 982 "cPickle.c"
        var $73=HEAP[$72]; //@line 982 "cPickle.c"
        var $74=($73) > 1; //@line 982 "cPickle.c"
        if ($74) { __label__ = 15; break; } else { __label__ = 20; break; } //@line 982 "cPickle.c"
      case 15: // $bb_i36
        var $75=$l_i35; //@line 983 "cPickle.c"
        var $76=($75)!=0; //@line 983 "cPickle.c"
        if ($76) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 983 "cPickle.c"
      case 16: // $bb1_i37
        $iftmp_52_i=-120; //@line 983 "cPickle.c"
        __label__ = 18; break; //@line 983 "cPickle.c"
      case 17: // $bb2_i38
        $iftmp_52_i=-119; //@line 983 "cPickle.c"
        __label__ = 18; break; //@line 983 "cPickle.c"
      case 18: // $bb3_i39
        var $77=$iftmp_52_i; //@line 983 "cPickle.c"
        HEAP[$opcode_i]=$77; //@line 983 "cPickle.c"
        var $78=$self_addr_i32; //@line 984 "cPickle.c"
        var $79=$78+48; //@line 984 "cPickle.c"
        var $80=HEAP[$79]; //@line 984 "cPickle.c"
        var $81=$self_addr_i32; //@line 984 "cPickle.c"
        var $82=FUNCTION_TABLE[$80]($81, $opcode_i, 1); //@line 984 "cPickle.c"
        var $83=($82) < 0; //@line 984 "cPickle.c"
        if ($83) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 984 "cPickle.c"
      case 19: // $bb4_i40
        $10=-1; //@line 985 "cPickle.c"
        __label__ = 23; break; //@line 985 "cPickle.c"
      case 20: // $bb6_i41
        var $84=$self_addr_i32; //@line 987 "cPickle.c"
        var $85=$84+48; //@line 987 "cPickle.c"
        var $86=HEAP[$85]; //@line 987 "cPickle.c"
        var $87=$l_i35; //@line 987 "cPickle.c"
        var $88=_len_9463+$87; //@line 987 "cPickle.c"
        var $89=HEAP[$88]; //@line 987 "cPickle.c"
        var $90=($89); //@line 987 "cPickle.c"
        var $91=$l_i35; //@line 987 "cPickle.c"
        var $92=_buf_9462+$91*4; //@line 987 "cPickle.c"
        var $93=HEAP[$92]; //@line 987 "cPickle.c"
        var $94=$self_addr_i32; //@line 987 "cPickle.c"
        var $95=FUNCTION_TABLE[$86]($94, $93, $90); //@line 987 "cPickle.c"
        var $96=($95) < 0; //@line 987 "cPickle.c"
        if ($96) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 987 "cPickle.c"
      case 21: // $bb7_i42
        $10=-1; //@line 988 "cPickle.c"
        __label__ = 23; break; //@line 988 "cPickle.c"
      case 22: // $bb8_i43
        $10=0; //@line 989 "cPickle.c"
        __label__ = 23; break; //@line 989 "cPickle.c"
      case 23: // $save_bool_exit
        var $97=$10; //@line 985 "cPickle.c"
        $retval_i34=$97; //@line 985 "cPickle.c"
        var $retval10_i=$retval_i34; //@line 985 "cPickle.c"
        $res=$retval10_i; //@line 2556 "cPickle.c"
        __label__ = 404; break; //@line 2556 "cPickle.c"
      case 24: // $bb13
        var $98=$type; //@line 2561 "cPickle.c"
        var $99=($98)==(_PyInt_Type); //@line 2561 "cPickle.c"
        if ($99) { __label__ = 25; break; } else { __label__ = 98; break; } //@line 2561 "cPickle.c"
      case 25: // $bb14
        var $100=$self_addr; //@line 2562 "cPickle.c"
        var $101=$args_addr; //@line 2562 "cPickle.c"
        $self_addr_i15=$100;
        $args_addr_i16=$101;
        var $102=$args_addr_i16; //@line 996 "cPickle.c"
        var $103=$102; //@line 996 "cPickle.c"
        var $104=$103+8; //@line 996 "cPickle.c"
        var $105=HEAP[$104]; //@line 996 "cPickle.c"
        $l_i=$105; //@line 996 "cPickle.c"
        $len_i=0; //@line 997 "cPickle.c"
        var $106=$self_addr_i15; //@line 999 "cPickle.c"
        var $107=$106+40; //@line 999 "cPickle.c"
        var $108=HEAP[$107]; //@line 999 "cPickle.c"
        var $109=($108)==0; //@line 999 "cPickle.c"
        if ($109) { __label__ = 26; break; } else { __label__ = 28; break; } //@line 999 "cPickle.c"
      case 26: // $bb_i20
        var $110=$c_str_i18; //@line 1008 "cPickle.c"
        HEAP[$110]=73; //@line 1008 "cPickle.c"
        var $c_str1_i=$c_str_i18; //@line 1009 "cPickle.c"
        var $111=$c_str1_i+1; //@line 1009 "cPickle.c"
        var $112=$l_i; //@line 1009 "cPickle.c"
        var $113=_PyOS_snprintf($111, 31, __str4, $112); //@line 1009 "cPickle.c"
        var $114=$self_addr_i15; //@line 1010 "cPickle.c"
        var $115=$114+48; //@line 1010 "cPickle.c"
        var $116=HEAP[$115]; //@line 1010 "cPickle.c"
        var $c_str2_i19=$c_str_i18; //@line 1010 "cPickle.c"
        var $117=_strlen($c_str2_i19); //@line 1010 "cPickle.c"
        var $118=$self_addr_i15; //@line 1010 "cPickle.c"
        var $c_str3_i=$c_str_i18; //@line 1010 "cPickle.c"
        var $119=FUNCTION_TABLE[$116]($118, $c_str3_i, $117); //@line 1010 "cPickle.c"
        var $120=($119) < 0; //@line 1010 "cPickle.c"
        if ($120) { __label__ = 27; break; } else { __label__ = 36; break; } //@line 1010 "cPickle.c"
      case 27: // $bb4_i21
        $11=-1; //@line 1011 "cPickle.c"
        __label__ = 37; break; //@line 1011 "cPickle.c"
      case 28: // $bb6_i22
        var $121=$l_i; //@line 1015 "cPickle.c"
        var $122=((($121)) & 255); //@line 1015 "cPickle.c"
        var $123=$c_str_i18+1; //@line 1015 "cPickle.c"
        HEAP[$123]=$122; //@line 1015 "cPickle.c"
        var $124=$l_i; //@line 1016 "cPickle.c"
        var $125=($124) >> 8; //@line 1016 "cPickle.c"
        var $126=((($125)) & 255); //@line 1016 "cPickle.c"
        var $127=$c_str_i18+2; //@line 1016 "cPickle.c"
        HEAP[$127]=$126; //@line 1016 "cPickle.c"
        var $128=$l_i; //@line 1017 "cPickle.c"
        var $129=($128) >> 16; //@line 1017 "cPickle.c"
        var $130=((($129)) & 255); //@line 1017 "cPickle.c"
        var $131=$c_str_i18+3; //@line 1017 "cPickle.c"
        HEAP[$131]=$130; //@line 1017 "cPickle.c"
        var $132=$l_i; //@line 1018 "cPickle.c"
        var $133=($132) >> 24; //@line 1018 "cPickle.c"
        var $134=((($133)) & 255); //@line 1018 "cPickle.c"
        var $135=$c_str_i18+4; //@line 1018 "cPickle.c"
        HEAP[$135]=$134; //@line 1018 "cPickle.c"
        var $136=$c_str_i18+4; //@line 1020 "cPickle.c"
        var $137=HEAP[$136]; //@line 1020 "cPickle.c"
        var $138=($137)!=0; //@line 1020 "cPickle.c"
        if ($138) { __label__ = 33; break; } else { __label__ = 29; break; } //@line 1020 "cPickle.c"
      case 29: // $bb7_i23
        var $139=$c_str_i18+3; //@line 1020 "cPickle.c"
        var $140=HEAP[$139]; //@line 1020 "cPickle.c"
        var $141=($140)!=0; //@line 1020 "cPickle.c"
        if ($141) { __label__ = 33; break; } else { __label__ = 30; break; } //@line 1020 "cPickle.c"
      case 30: // $bb8_i24
        var $142=$c_str_i18+2; //@line 1021 "cPickle.c"
        var $143=HEAP[$142]; //@line 1021 "cPickle.c"
        var $144=($143)==0; //@line 1021 "cPickle.c"
        var $145=$c_str_i18; //@line 1022 "cPickle.c"
        if ($144) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1021 "cPickle.c"
      case 31: // $bb9_i25
        HEAP[$145]=75; //@line 1022 "cPickle.c"
        $len_i=2; //@line 1023 "cPickle.c"
        __label__ = 34; break; //@line 1023 "cPickle.c"
      case 32: // $bb10_i26
        HEAP[$145]=77; //@line 1026 "cPickle.c"
        $len_i=3; //@line 1027 "cPickle.c"
        __label__ = 34; break; //@line 1027 "cPickle.c"
      case 33: // $bb12_i27
        var $146=$c_str_i18; //@line 1031 "cPickle.c"
        HEAP[$146]=74; //@line 1031 "cPickle.c"
        $len_i=5; //@line 1032 "cPickle.c"
        __label__ = 34; break; //@line 1032 "cPickle.c"
      case 34: // $bb13_i28
        var $147=$self_addr_i15; //@line 1035 "cPickle.c"
        var $148=$147+48; //@line 1035 "cPickle.c"
        var $149=HEAP[$148]; //@line 1035 "cPickle.c"
        var $150=$self_addr_i15; //@line 1035 "cPickle.c"
        var $c_str14_i=$c_str_i18; //@line 1035 "cPickle.c"
        var $151=$len_i; //@line 1035 "cPickle.c"
        var $152=FUNCTION_TABLE[$149]($150, $c_str14_i, $151); //@line 1035 "cPickle.c"
        var $153=($152) < 0; //@line 1035 "cPickle.c"
        if ($153) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 1035 "cPickle.c"
      case 35: // $bb15_i29
        $11=-1; //@line 1036 "cPickle.c"
        __label__ = 37; break; //@line 1036 "cPickle.c"
      case 36: // $bb16_i30
        $11=0; //@line 1039 "cPickle.c"
        __label__ = 37; break; //@line 1039 "cPickle.c"
      case 37: // $save_int_exit
        var $154=$11; //@line 1011 "cPickle.c"
        $retval_i17=$154; //@line 1011 "cPickle.c"
        var $retval18_i=$retval_i17; //@line 1011 "cPickle.c"
        $res=$retval18_i; //@line 2562 "cPickle.c"
        __label__ = 404; break; //@line 2562 "cPickle.c"
      case 38: // $bb16
        var $155=$type; //@line 2568 "cPickle.c"
        var $156=($155)==(_PyLong_Type); //@line 2568 "cPickle.c"
        if ($156) { __label__ = 39; break; } else { __label__ = 98; break; } //@line 2568 "cPickle.c"
      case 39: // $bb17
        var $157=$self_addr; //@line 2569 "cPickle.c"
        var $158=$args_addr; //@line 2569 "cPickle.c"
        $self_addr_i2=$157;
        $args_addr_i3=$158;
        $res_i=-1; //@line 1047 "cPickle.c"
        $repr_i=0; //@line 1048 "cPickle.c"
        var $159=$self_addr_i2; //@line 1052 "cPickle.c"
        var $160=$159+36; //@line 1052 "cPickle.c"
        var $161=HEAP[$160]; //@line 1052 "cPickle.c"
        var $162=($161) > 1; //@line 1052 "cPickle.c"
        var $163=$args_addr_i3; //@line 1059 "cPickle.c"
        if ($162) { __label__ = 40; break; } else { __label__ = 64; break; } //@line 1052 "cPickle.c"
      case 40: // $bb_i5
        var $164=__PyLong_Sign($163); //@line 1059 "cPickle.c"
        $sign_i=$164; //@line 1059 "cPickle.c"
        var $165=$sign_i; //@line 1061 "cPickle.c"
        var $166=($165)==0; //@line 1061 "cPickle.c"
        if ($166) { __label__ = 41; break; } else { __label__ = 43; break; } //@line 1061 "cPickle.c"
      case 41: // $bb1_i6
        var $167=$c_str_i; //@line 1063 "cPickle.c"
        HEAP[$167]=-118; //@line 1063 "cPickle.c"
        var $168=$c_str_i+1; //@line 1064 "cPickle.c"
        HEAP[$168]=0; //@line 1064 "cPickle.c"
        var $169=$self_addr_i2; //@line 1065 "cPickle.c"
        var $170=$169+48; //@line 1065 "cPickle.c"
        var $171=HEAP[$170]; //@line 1065 "cPickle.c"
        var $172=$self_addr_i2; //@line 1065 "cPickle.c"
        var $c_str2_i=$c_str_i; //@line 1065 "cPickle.c"
        var $173=FUNCTION_TABLE[$171]($172, $c_str2_i, 2); //@line 1065 "cPickle.c"
        $i_i=$173; //@line 1065 "cPickle.c"
        var $174=$i_i; //@line 1066 "cPickle.c"
        var $175=($174) < 0; //@line 1066 "cPickle.c"
        if ($175) { __label__ = 70; break; } else { __label__ = 42; break; } //@line 1066 "cPickle.c"
      case 42: // $bb3_i
        $res_i=0; //@line 1067 "cPickle.c"
        __label__ = 70; break; //@line 1067 "cPickle.c"
      case 43: // $bb4_i7
        var $176=$args_addr_i3; //@line 1070 "cPickle.c"
        var $177=__PyLong_NumBits($176); //@line 1070 "cPickle.c"
        $nbits_i=$177; //@line 1070 "cPickle.c"
        var $178=$nbits_i; //@line 1071 "cPickle.c"
        var $179=($178)==-1; //@line 1071 "cPickle.c"
        if ($179) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1071 "cPickle.c"
      case 44: // $bb5_i8
        var $180=_PyErr_Occurred(); //@line 1071 "cPickle.c"
        var $181=($180)!=0; //@line 1071 "cPickle.c"
        if ($181) { __label__ = 70; break; } else { __label__ = 45; break; } //@line 1071 "cPickle.c"
      case 45: // $bb6_i9
        var $182=$nbits_i; //@line 1087 "cPickle.c"
        var $183=($182) >>> 3; //@line 1087 "cPickle.c"
        var $184=($183) + 1; //@line 1087 "cPickle.c"
        $nbytes_i=$184; //@line 1087 "cPickle.c"
        var $185=($184) < 0; //@line 1088 "cPickle.c"
        if ($185) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 1088 "cPickle.c"
      case 46: // $bb7_i10
        var $186=HEAP[_PyExc_OverflowError]; //@line 1089 "cPickle.c"
        _PyErr_SetString($186, __str11); //@line 1089 "cPickle.c"
        __label__ = 70; break; //@line 1089 "cPickle.c"
      case 47: // $bb8_i11
        var $187=$nbytes_i; //@line 1093 "cPickle.c"
        var $188=_PyString_FromStringAndSize(0, $187); //@line 1093 "cPickle.c"
        $repr_i=$188; //@line 1093 "cPickle.c"
        var $189=$repr_i; //@line 1094 "cPickle.c"
        var $190=($189)==0; //@line 1094 "cPickle.c"
        if ($190) { __label__ = 73; break; } else { __label__ = 48; break; } //@line 1094 "cPickle.c"
      case 48: // $bb9_i12
        var $191=$repr_i; //@line 1095 "cPickle.c"
        var $192=$191; //@line 1095 "cPickle.c"
        var $193=$192+20; //@line 1095 "cPickle.c"
        var $194=$193; //@line 1095 "cPickle.c"
        $pdata_i=$194; //@line 1095 "cPickle.c"
        var $195=$args_addr_i3; //@line 1096 "cPickle.c"
        var $196=$195; //@line 1096 "cPickle.c"
        var $197=$pdata_i; //@line 1096 "cPickle.c"
        var $198=$nbytes_i; //@line 1096 "cPickle.c"
        var $199=__PyLong_AsByteArray($196, $197, $198, 1, 1); //@line 1096 "cPickle.c"
        $i_i=$199; //@line 1096 "cPickle.c"
        var $200=$i_i; //@line 1099 "cPickle.c"
        var $201=($200) < 0; //@line 1099 "cPickle.c"
        if ($201) { __label__ = 70; break; } else { __label__ = 49; break; } //@line 1099 "cPickle.c"
      case 49: // $bb10_i13
        var $202=$sign_i; //@line 1104 "cPickle.c"
        var $203=($202) < 0; //@line 1104 "cPickle.c"
        if ($203) { __label__ = 50; break; } else { __label__ = 55; break; } //@line 1104 "cPickle.c"
      case 50: // $bb11_i14
        var $204=$nbytes_i; //@line 1104 "cPickle.c"
        var $205=($204) > 1; //@line 1104 "cPickle.c"
        if ($205) { __label__ = 52; break; } else { __label__ = 51; break; } //@line 1104 "cPickle.c"
      case 51: // $bb15_thread_i
        var $206=$c_str_i; //@line 1109 "cPickle.c"
        __lastLabel__ = 51; __label__ = 57; break;
      case 52: // $bb12_i
        var $207=$nbytes_i; //@line 1104 "cPickle.c"
        var $208=($207) - 1; //@line 1104 "cPickle.c"
        var $209=$pdata_i; //@line 1104 "cPickle.c"
        var $210=$209+$208; //@line 1104 "cPickle.c"
        var $211=HEAP[$210]; //@line 1104 "cPickle.c"
        var $212=($211)==-1; //@line 1104 "cPickle.c"
        if ($212) { __label__ = 53; break; } else { __label__ = 55; break; } //@line 1104 "cPickle.c"
      case 53: // $bb13_i
        var $213=$nbytes_i; //@line 1104 "cPickle.c"
        var $214=($213) - 2; //@line 1104 "cPickle.c"
        var $215=$pdata_i; //@line 1104 "cPickle.c"
        var $216=$215+$214; //@line 1104 "cPickle.c"
        var $217=HEAP[$216]; //@line 1104 "cPickle.c"
        var $218=($217) < 0; //@line 1104 "cPickle.c"
        if ($218) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 1104 "cPickle.c"
      case 54: // $bb14_i
        var $219=$nbytes_i; //@line 1106 "cPickle.c"
        var $220=($219) - 1; //@line 1106 "cPickle.c"
        $nbytes_i=$220; //@line 1106 "cPickle.c"
        __lastLabel__ = 54; __label__ = 56; break; //@line 1106 "cPickle.c"
      case 55: // $bb15thread_pre_split_i
        var $_pr_i=$nbytes_i;
        __lastLabel__ = 55; __label__ = 56; break;
      case 56: // $bb15_i
        var $221=__lastLabel__ == 55 ? $_pr_i : ($220);
        var $222=($221) <= 255; //@line 1108 "cPickle.c"
        var $223=$c_str_i; //@line 1109 "cPickle.c"
        if ($222) { __lastLabel__ = 56; __label__ = 57; break; } else { __lastLabel__ = 56; __label__ = 58; break; } //@line 1108 "cPickle.c"
      case 57: // $bb16_i
        var $224=__lastLabel__ == 51 ? $206 : ($223);
        HEAP[$224]=-118; //@line 1109 "cPickle.c"
        var $225=$nbytes_i; //@line 1110 "cPickle.c"
        var $226=((($225)) & 255); //@line 1110 "cPickle.c"
        var $227=$c_str_i+1; //@line 1110 "cPickle.c"
        HEAP[$227]=$226; //@line 1110 "cPickle.c"
        $size_i=2; //@line 1111 "cPickle.c"
        __label__ = 61; break; //@line 1111 "cPickle.c"
      case 58: // $bb17_i
        HEAP[$223]=-117; //@line 1114 "cPickle.c"
        var $228=$nbytes_i; //@line 1115 "cPickle.c"
        $size_i=$228; //@line 1115 "cPickle.c"
        $i_i=1; //@line 1116 "cPickle.c"
        __label__ = 59; break;
      case 59: // $bb18_i
        var $229=$i_i; //@line 1117 "cPickle.c"
        var $230=$size_i; //@line 1117 "cPickle.c"
        var $231=((($230)) & 255); //@line 1117 "cPickle.c"
        var $232=$c_str_i+$229; //@line 1117 "cPickle.c"
        HEAP[$232]=$231; //@line 1117 "cPickle.c"
        var $233=$size_i; //@line 1118 "cPickle.c"
        var $234=($233) >> 8; //@line 1118 "cPickle.c"
        $size_i=$234; //@line 1118 "cPickle.c"
        var $235=$i_i; //@line 1116 "cPickle.c"
        var $236=($235) + 1; //@line 1116 "cPickle.c"
        $i_i=$236; //@line 1116 "cPickle.c"
        var $237=($236) <= 4; //@line 1116 "cPickle.c"
        if ($237) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 1116 "cPickle.c"
      case 60: // $bb20_i
        $size_i=5; //@line 1120 "cPickle.c"
        __label__ = 61; break; //@line 1120 "cPickle.c"
      case 61: // $bb21_i
        var $238=$self_addr_i2; //@line 1122 "cPickle.c"
        var $239=$238+48; //@line 1122 "cPickle.c"
        var $240=HEAP[$239]; //@line 1122 "cPickle.c"
        var $241=$self_addr_i2; //@line 1122 "cPickle.c"
        var $c_str22_i=$c_str_i; //@line 1122 "cPickle.c"
        var $242=$size_i; //@line 1122 "cPickle.c"
        var $243=FUNCTION_TABLE[$240]($241, $c_str22_i, $242); //@line 1122 "cPickle.c"
        $i_i=$243; //@line 1122 "cPickle.c"
        var $244=($243) < 0; //@line 1123 "cPickle.c"
        if ($244) { __label__ = 70; break; } else { __label__ = 62; break; } //@line 1123 "cPickle.c"
      case 62: // $bb23_i
        var $245=$self_addr_i2; //@line 1124 "cPickle.c"
        var $246=$245+48; //@line 1124 "cPickle.c"
        var $247=HEAP[$246]; //@line 1124 "cPickle.c"
        var $248=$nbytes_i; //@line 1124 "cPickle.c"
        var $249=$pdata_i; //@line 1124 "cPickle.c"
        var $250=$self_addr_i2; //@line 1124 "cPickle.c"
        var $251=FUNCTION_TABLE[$247]($250, $249, $248); //@line 1124 "cPickle.c"
        $i_i=$251; //@line 1124 "cPickle.c"
        var $252=$i_i; //@line 1125 "cPickle.c"
        var $253=($252) < 0; //@line 1125 "cPickle.c"
        if ($253) { __label__ = 70; break; } else { __label__ = 63; break; } //@line 1125 "cPickle.c"
      case 63: // $bb24_i
        $res_i=0; //@line 1126 "cPickle.c"
        __label__ = 70; break; //@line 1126 "cPickle.c"
      case 64: // $bb25_i
        var $254=_PyObject_Repr($163); //@line 1133 "cPickle.c"
        $repr_i=$254; //@line 1133 "cPickle.c"
        var $255=$repr_i; //@line 1133 "cPickle.c"
        var $256=($255)==0; //@line 1133 "cPickle.c"
        if ($256) { __label__ = 73; break; } else { __label__ = 65; break; } //@line 1133 "cPickle.c"
      case 65: // $bb26_i
        var $257=$repr_i; //@line 1136 "cPickle.c"
        var $258=_PyString_Size($257); //@line 1136 "cPickle.c"
        $size_i=$258; //@line 1136 "cPickle.c"
        var $259=$size_i; //@line 1136 "cPickle.c"
        var $260=($259) < 0; //@line 1136 "cPickle.c"
        if ($260) { __label__ = 70; break; } else { __label__ = 66; break; } //@line 1136 "cPickle.c"
      case 66: // $bb27_i
        var $261=$self_addr_i2; //@line 1139 "cPickle.c"
        var $262=$261+48; //@line 1139 "cPickle.c"
        var $263=HEAP[$262]; //@line 1139 "cPickle.c"
        var $264=$self_addr_i2; //@line 1139 "cPickle.c"
        var $265=FUNCTION_TABLE[$263]($264, _l_9538, 1); //@line 1139 "cPickle.c"
        var $266=($265) < 0; //@line 1139 "cPickle.c"
        if ($266) { __label__ = 70; break; } else { __label__ = 67; break; } //@line 1139 "cPickle.c"
      case 67: // $bb28_i
        var $267=$self_addr_i2; //@line 1142 "cPickle.c"
        var $268=$267+48; //@line 1142 "cPickle.c"
        var $269=HEAP[$268]; //@line 1142 "cPickle.c"
        var $270=$repr_i; //@line 1142 "cPickle.c"
        var $271=$270; //@line 1142 "cPickle.c"
        var $272=$271+20; //@line 1142 "cPickle.c"
        var $273=$272; //@line 1142 "cPickle.c"
        var $274=$self_addr_i2; //@line 1142 "cPickle.c"
        var $275=$size_i; //@line 1142 "cPickle.c"
        var $276=FUNCTION_TABLE[$269]($274, $273, $275); //@line 1142 "cPickle.c"
        var $277=($276) < 0; //@line 1142 "cPickle.c"
        if ($277) { __label__ = 70; break; } else { __label__ = 68; break; } //@line 1142 "cPickle.c"
      case 68: // $bb29_i
        var $278=$self_addr_i2; //@line 1147 "cPickle.c"
        var $279=$278+48; //@line 1147 "cPickle.c"
        var $280=HEAP[$279]; //@line 1147 "cPickle.c"
        var $281=$self_addr_i2; //@line 1147 "cPickle.c"
        var $282=FUNCTION_TABLE[$280]($281, __str12, 1); //@line 1147 "cPickle.c"
        var $283=($282) < 0; //@line 1147 "cPickle.c"
        if ($283) { __label__ = 70; break; } else { __label__ = 69; break; } //@line 1147 "cPickle.c"
      case 69: // $bb30_i
        $res_i=0; //@line 1150 "cPickle.c"
        __label__ = 70; break; //@line 1152 "cPickle.c"
      case 70: // $finally_i
        var $_pr1_i=$repr_i;
        var $284=($_pr1_i)!=0; //@line 1153 "cPickle.c"
        if ($284) { __label__ = 71; break; } else { __label__ = 73; break; } //@line 1153 "cPickle.c"
      case 71: // $bb31_i
        var $285=$repr_i; //@line 1153 "cPickle.c"
        var $286=$285; //@line 1153 "cPickle.c"
        var $287=HEAP[$286]; //@line 1153 "cPickle.c"
        var $288=($287) - 1; //@line 1153 "cPickle.c"
        var $289=$repr_i; //@line 1153 "cPickle.c"
        var $290=$289; //@line 1153 "cPickle.c"
        HEAP[$290]=$288; //@line 1153 "cPickle.c"
        var $291=$repr_i; //@line 1153 "cPickle.c"
        var $292=$291; //@line 1153 "cPickle.c"
        var $293=HEAP[$292]; //@line 1153 "cPickle.c"
        var $294=($293)==0; //@line 1153 "cPickle.c"
        if ($294) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 1153 "cPickle.c"
      case 72: // $bb32_i
        var $295=$repr_i; //@line 1153 "cPickle.c"
        var $296=$295+4; //@line 1153 "cPickle.c"
        var $297=HEAP[$296]; //@line 1153 "cPickle.c"
        var $298=$297+24; //@line 1153 "cPickle.c"
        var $299=HEAP[$298]; //@line 1153 "cPickle.c"
        var $300=$repr_i; //@line 1153 "cPickle.c"
        FUNCTION_TABLE[$299]($300); //@line 1153 "cPickle.c"
        __label__ = 73; break; //@line 1153 "cPickle.c"
      case 73: // $save_long_exit
        var $301=$res_i; //@line 1154 "cPickle.c"
        $12=$301; //@line 1154 "cPickle.c"
        var $302=$12; //@line 1154 "cPickle.c"
        $retval_i4=$302; //@line 1154 "cPickle.c"
        var $retval34_i=$retval_i4; //@line 1154 "cPickle.c"
        $res=$retval34_i; //@line 2569 "cPickle.c"
        __label__ = 404; break; //@line 2569 "cPickle.c"
      case 74: // $bb19
        var $303=$type; //@line 2575 "cPickle.c"
        var $304=($303)==(_PyFloat_Type); //@line 2575 "cPickle.c"
        if ($304) { __label__ = 75; break; } else { __label__ = 98; break; } //@line 2575 "cPickle.c"
      case 75: // $bb20
        var $305=$self_addr; //@line 2576 "cPickle.c"
        var $306=$args_addr; //@line 2576 "cPickle.c"
        $self_addr_i=$305;
        $args_addr_i=$306;
        var $307=$args_addr_i; //@line 1161 "cPickle.c"
        var $308=$307; //@line 1161 "cPickle.c"
        var $309=$308+8; //@line 1161 "cPickle.c"
        var $310=HEAP[$309]; //@line 1161 "cPickle.c"
        $x_i=$310; //@line 1161 "cPickle.c"
        var $311=$self_addr_i; //@line 1163 "cPickle.c"
        var $312=$311+40; //@line 1163 "cPickle.c"
        var $313=HEAP[$312]; //@line 1163 "cPickle.c"
        var $314=($313)!=0; //@line 1163 "cPickle.c"
        if ($314) { __label__ = 76; break; } else { __label__ = 81; break; } //@line 1163 "cPickle.c"
      case 76: // $bb_i
        var $315=$str_i; //@line 1165 "cPickle.c"
        HEAP[$315]=71; //@line 1165 "cPickle.c"
        var $316=$str_i+1; //@line 1166 "cPickle.c"
        var $317=$x_i; //@line 1166 "cPickle.c"
        var $318=__PyFloat_Pack8($317, $316, 0); //@line 1166 "cPickle.c"
        var $319=($318) < 0; //@line 1166 "cPickle.c"
        if ($319) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 1166 "cPickle.c"
      case 77: // $bb1_i
        $13=-1; //@line 1167 "cPickle.c"
        __label__ = 88; break; //@line 1167 "cPickle.c"
      case 78: // $bb2_i
        var $320=$self_addr_i; //@line 1168 "cPickle.c"
        var $321=$320+48; //@line 1168 "cPickle.c"
        var $322=HEAP[$321]; //@line 1168 "cPickle.c"
        var $323=$self_addr_i; //@line 1168 "cPickle.c"
        var $str3_i=$str_i; //@line 1168 "cPickle.c"
        var $324=FUNCTION_TABLE[$322]($323, $str3_i, 9); //@line 1168 "cPickle.c"
        var $325=($324) < 0; //@line 1168 "cPickle.c"
        if ($325) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 1168 "cPickle.c"
      case 79: // $bb4_i
        $13=-1; //@line 1169 "cPickle.c"
        __label__ = 88; break; //@line 1169 "cPickle.c"
      case 80: // $bb5_i
        $13=0; //@line 1197 "cPickle.c"
        __label__ = 88; break; //@line 1197 "cPickle.c"
      case 81: // $bb6_i
        $result_i=-1; //@line 1172 "cPickle.c"
        $buf_i=0; //@line 1173 "cPickle.c"
        HEAP[$op_i]=70; //@line 1174 "cPickle.c"
        var $326=$self_addr_i; //@line 1176 "cPickle.c"
        var $327=$326+48; //@line 1176 "cPickle.c"
        var $328=HEAP[$327]; //@line 1176 "cPickle.c"
        var $329=$self_addr_i; //@line 1176 "cPickle.c"
        var $330=FUNCTION_TABLE[$328]($329, $op_i, 1); //@line 1176 "cPickle.c"
        var $331=($330) < 0; //@line 1176 "cPickle.c"
        if ($331) { __label__ = 87; break; } else { __label__ = 82; break; } //@line 1176 "cPickle.c"
      case 82: // $bb7_i
        var $332=$x_i; //@line 1179 "cPickle.c"
        var $333=_PyOS_double_to_string($332, 103, 17, 0, 0); //@line 1179 "cPickle.c"
        $buf_i=$333; //@line 1179 "cPickle.c"
        var $334=$buf_i; //@line 1180 "cPickle.c"
        var $335=($334)==0; //@line 1180 "cPickle.c"
        if ($335) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 1180 "cPickle.c"
      case 83: // $bb8_i
        var $336=_PyErr_NoMemory(); //@line 1181 "cPickle.c"
        __label__ = 87; break; //@line 1181 "cPickle.c"
      case 84: // $bb9_i
        var $337=$self_addr_i; //@line 1185 "cPickle.c"
        var $338=$337+48; //@line 1185 "cPickle.c"
        var $339=HEAP[$338]; //@line 1185 "cPickle.c"
        var $340=$buf_i; //@line 1185 "cPickle.c"
        var $341=_strlen($340); //@line 1185 "cPickle.c"
        var $342=$self_addr_i; //@line 1185 "cPickle.c"
        var $343=$buf_i; //@line 1185 "cPickle.c"
        var $344=FUNCTION_TABLE[$339]($342, $343, $341); //@line 1185 "cPickle.c"
        var $345=($344) < 0; //@line 1185 "cPickle.c"
        if ($345) { __label__ = 87; break; } else { __label__ = 85; break; } //@line 1185 "cPickle.c"
      case 85: // $bb10_i
        var $346=$self_addr_i; //@line 1188 "cPickle.c"
        var $347=$346+48; //@line 1188 "cPickle.c"
        var $348=HEAP[$347]; //@line 1188 "cPickle.c"
        var $349=$self_addr_i; //@line 1188 "cPickle.c"
        var $350=FUNCTION_TABLE[$348]($349, __str12, 1); //@line 1188 "cPickle.c"
        var $351=($350) < 0; //@line 1188 "cPickle.c"
        if ($351) { __label__ = 87; break; } else { __label__ = 86; break; } //@line 1188 "cPickle.c"
      case 86: // $bb11_i
        $result_i=0; //@line 1191 "cPickle.c"
        __label__ = 87; break; //@line 1192 "cPickle.c"
      case 87: // $done_i
        var $352=$buf_i; //@line 1193 "cPickle.c"
        _PyMem_Free($352); //@line 1193 "cPickle.c"
        var $353=$result_i; //@line 1194 "cPickle.c"
        $13=$353; //@line 1194 "cPickle.c"
        __label__ = 88; break; //@line 1194 "cPickle.c"
      case 88: // $save_float_exit
        var $354=$13; //@line 1167 "cPickle.c"
        $retval_i=$354; //@line 1167 "cPickle.c"
        var $retval13_i=$retval_i; //@line 1167 "cPickle.c"
        $res=$retval13_i; //@line 2576 "cPickle.c"
        __label__ = 404; break; //@line 2576 "cPickle.c"
      case 89: // $bb22
        var $355=$type; //@line 2582 "cPickle.c"
        var $356=($355)==(_PyTuple_Type); //@line 2582 "cPickle.c"
        if ($356) { __label__ = 90; break; } else { __label__ = 98; break; } //@line 2582 "cPickle.c"
      case 90: // $bb23
        var $357=$args_addr; //@line 2582 "cPickle.c"
        var $358=_PyTuple_Size($357); //@line 2582 "cPickle.c"
        var $359=($358)==0; //@line 2582 "cPickle.c"
        if ($359) { __label__ = 91; break; } else { __label__ = 98; break; } //@line 2582 "cPickle.c"
      case 91: // $bb24
        var $360=$self_addr; //@line 2583 "cPickle.c"
        var $361=$args_addr; //@line 2583 "cPickle.c"
        var $362=_save_tuple($360, $361); //@line 2583 "cPickle.c"
        $res=$362; //@line 2583 "cPickle.c"
        __label__ = 404; break; //@line 2583 "cPickle.c"
      case 92: // $bb26
        var $363=$type; //@line 2589 "cPickle.c"
        var $364=($363)==(_PyString_Type); //@line 2589 "cPickle.c"
        if ($364) { __label__ = 93; break; } else { __label__ = 98; break; } //@line 2589 "cPickle.c"
      case 93: // $bb27
        var $365=$args_addr; //@line 2589 "cPickle.c"
        var $366=$365; //@line 2589 "cPickle.c"
        var $367=$366+8; //@line 2589 "cPickle.c"
        var $368=HEAP[$367]; //@line 2589 "cPickle.c"
        var $369=($368) <= 1; //@line 2589 "cPickle.c"
        if ($369) { __label__ = 94; break; } else { __label__ = 98; break; } //@line 2589 "cPickle.c"
      case 94: // $bb28
        var $370=$self_addr; //@line 2590 "cPickle.c"
        var $371=$args_addr; //@line 2590 "cPickle.c"
        var $372=_save_string($370, $371, 0); //@line 2590 "cPickle.c"
        $res=$372; //@line 2590 "cPickle.c"
        __label__ = 404; break; //@line 2590 "cPickle.c"
      case 95: // $bb30
        var $373=$type; //@line 2597 "cPickle.c"
        var $374=($373)==(_PyUnicode_Type); //@line 2597 "cPickle.c"
        if ($374) { __label__ = 96; break; } else { __label__ = 98; break; } //@line 2597 "cPickle.c"
      case 96: // $bb31
        var $375=$args_addr; //@line 2597 "cPickle.c"
        var $376=$375; //@line 2597 "cPickle.c"
        var $377=$376+8; //@line 2597 "cPickle.c"
        var $378=HEAP[$377]; //@line 2597 "cPickle.c"
        var $379=($378) <= 1; //@line 2597 "cPickle.c"
        if ($379) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 2597 "cPickle.c"
      case 97: // $bb32
        var $380=$self_addr; //@line 2598 "cPickle.c"
        var $381=$args_addr; //@line 2598 "cPickle.c"
        var $382=_save_unicode($380, $381, 0); //@line 2598 "cPickle.c"
        $res=$382; //@line 2598 "cPickle.c"
        __label__ = 404; break; //@line 2598 "cPickle.c"
      case 98: // $bb33
        var $383=$args_addr; //@line 2605 "cPickle.c"
        var $384=$383; //@line 2605 "cPickle.c"
        var $385=HEAP[$384]; //@line 2605 "cPickle.c"
        var $386=($385) > 1; //@line 2605 "cPickle.c"
        if ($386) { __label__ = 99; break; } else { __label__ = 103; break; } //@line 2605 "cPickle.c"
      case 99: // $bb34
        var $387=$args_addr; //@line 2606 "cPickle.c"
        var $388=$387; //@line 2606 "cPickle.c"
        var $389=_PyLong_FromVoidPtr($388); //@line 2606 "cPickle.c"
        $py_ob_id=$389; //@line 2606 "cPickle.c"
        var $390=$py_ob_id; //@line 2606 "cPickle.c"
        var $391=($390)==0; //@line 2606 "cPickle.c"
        if ($391) { __label__ = 404; break; } else { __label__ = 100; break; } //@line 2606 "cPickle.c"
      case 100: // $bb35
        var $392=$self_addr; //@line 2609 "cPickle.c"
        var $393=$392+20; //@line 2609 "cPickle.c"
        var $394=HEAP[$393]; //@line 2609 "cPickle.c"
        var $395=$py_ob_id; //@line 2609 "cPickle.c"
        var $396=_PyDict_GetItem($394, $395); //@line 2609 "cPickle.c"
        var $397=($396)!=0; //@line 2609 "cPickle.c"
        if ($397) { __label__ = 101; break; } else { __label__ = 103; break; } //@line 2609 "cPickle.c"
      case 101: // $bb36
        var $398=$self_addr; //@line 2610 "cPickle.c"
        var $399=$py_ob_id; //@line 2610 "cPickle.c"
        var $400=_get($398, $399); //@line 2610 "cPickle.c"
        var $401=($400) < 0; //@line 2610 "cPickle.c"
        if ($401) { __label__ = 404; break; } else { __label__ = 102; break; } //@line 2610 "cPickle.c"
      case 102: // $bb37
        $res=0; //@line 2613 "cPickle.c"
        __label__ = 404; break; //@line 2613 "cPickle.c"
      case 103: // $bb38
        var $402=$type; //@line 2618 "cPickle.c"
        var $403=$402+12; //@line 2618 "cPickle.c"
        var $404=HEAP[$403]; //@line 2618 "cPickle.c"
        var $405=$404; //@line 2618 "cPickle.c"
        var $406=HEAP[$405]; //@line 2618 "cPickle.c"
        var $407=($406); //@line 2618 "cPickle.c"
        if ($407 == 98) {
          __label__ = 272; break;
        }
        else if ($407 == 99) {
          __label__ = 266; break;
        }
        else if ($407 == 100) {
          __label__ = 138; break;
        }
        else if ($407 == 102) {
          __label__ = 268; break;
        }
        else if ($407 == 105) {
          __label__ = 196; break;
        }
        else if ($407 == 108) {
          __label__ = 112; break;
        }
        else if ($407 == 115) {
          __label__ = 104; break;
        }
        else if ($407 == 116) {
          __label__ = 108; break;
        }
        else if ($407 == 117) {
          __label__ = 106; break;
        }
        else {
        __label__ = 274; break;
        }
        
      case 104: // $bb39
        var $408=$type; //@line 2620 "cPickle.c"
        var $409=($408)==(_PyString_Type); //@line 2620 "cPickle.c"
        if ($409) { __label__ = 105; break; } else { __label__ = 274; break; } //@line 2620 "cPickle.c"
      case 105: // $bb40
        var $410=$self_addr; //@line 2621 "cPickle.c"
        var $411=$args_addr; //@line 2621 "cPickle.c"
        var $412=_save_string($410, $411, 1); //@line 2621 "cPickle.c"
        $res=$412; //@line 2621 "cPickle.c"
        __label__ = 404; break; //@line 2621 "cPickle.c"
      case 106: // $bb42
        var $413=$type; //@line 2628 "cPickle.c"
        var $414=($413)==(_PyUnicode_Type); //@line 2628 "cPickle.c"
        if ($414) { __label__ = 107; break; } else { __label__ = 274; break; } //@line 2628 "cPickle.c"
      case 107: // $bb43
        var $415=$self_addr; //@line 2629 "cPickle.c"
        var $416=$args_addr; //@line 2629 "cPickle.c"
        var $417=_save_unicode($415, $416, 1); //@line 2629 "cPickle.c"
        $res=$417; //@line 2629 "cPickle.c"
        __label__ = 404; break; //@line 2629 "cPickle.c"
      case 108: // $bb45
        var $418=$type; //@line 2636 "cPickle.c"
        var $419=($418)==(_PyTuple_Type); //@line 2636 "cPickle.c"
        if ($419) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 2636 "cPickle.c"
      case 109: // $bb46
        var $420=$self_addr; //@line 2637 "cPickle.c"
        var $421=$args_addr; //@line 2637 "cPickle.c"
        var $422=_save_tuple($420, $421); //@line 2637 "cPickle.c"
        $res=$422; //@line 2637 "cPickle.c"
        __label__ = 404; break; //@line 2637 "cPickle.c"
      case 110: // $bb47
        var $423=$type; //@line 2640 "cPickle.c"
        var $424=($423)==(_PyType_Type); //@line 2640 "cPickle.c"
        if ($424) { __label__ = 111; break; } else { __label__ = 274; break; } //@line 2640 "cPickle.c"
      case 111: // $bb48
        var $425=$self_addr; //@line 2641 "cPickle.c"
        var $426=$args_addr; //@line 2641 "cPickle.c"
        var $427=_save_global($425, $426, 0); //@line 2641 "cPickle.c"
        $res=$427; //@line 2641 "cPickle.c"
        __label__ = 404; break; //@line 2641 "cPickle.c"
      case 112: // $bb50
        var $428=$type; //@line 2647 "cPickle.c"
        var $429=($428)==(_PyList_Type); //@line 2647 "cPickle.c"
        if ($429) { __label__ = 113; break; } else { __label__ = 274; break; } //@line 2647 "cPickle.c"
      case 113: // $bb51
        var $430=$self_addr; //@line 2648 "cPickle.c"
        var $431=$args_addr; //@line 2648 "cPickle.c"
        $self_addr_i51=$430;
        $args_addr_i52=$431;
        $res_i54=-1; //@line 1691 "cPickle.c"
        var $432=$self_addr_i51; //@line 1696 "cPickle.c"
        var $433=$432+44; //@line 1696 "cPickle.c"
        var $434=HEAP[$433]; //@line 1696 "cPickle.c"
        var $435=($434)!=0; //@line 1696 "cPickle.c"
        if ($435) { __label__ = 114; break; } else { __label__ = 115; break; } //@line 1696 "cPickle.c"
      case 114: // $bb_i56
        var $436=$self_addr_i51; //@line 1696 "cPickle.c"
        var $437=$args_addr_i52; //@line 1696 "cPickle.c"
        var $438=_fast_save_enter($436, $437); //@line 1696 "cPickle.c"
        var $439=($438)==0; //@line 1696 "cPickle.c"
        if ($439) { __label__ = 134; break; } else { __label__ = 115; break; } //@line 1696 "cPickle.c"
      case 115: // $bb1_i57
        var $440=$self_addr_i51; //@line 1700 "cPickle.c"
        var $441=$440+40; //@line 1700 "cPickle.c"
        var $442=HEAP[$441]; //@line 1700 "cPickle.c"
        var $443=($442)!=0; //@line 1700 "cPickle.c"
        var $444=$s_i; //@line 1701 "cPickle.c"
        if ($443) { __label__ = 116; break; } else { __label__ = 117; break; } //@line 1700 "cPickle.c"
      case 116: // $bb2_i58
        HEAP[$444]=93; //@line 1701 "cPickle.c"
        $len_i55=1; //@line 1702 "cPickle.c"
        __label__ = 118; break; //@line 1702 "cPickle.c"
      case 117: // $bb3_i59
        HEAP[$444]=40; //@line 1705 "cPickle.c"
        var $445=$s_i+1; //@line 1706 "cPickle.c"
        HEAP[$445]=108; //@line 1706 "cPickle.c"
        $len_i55=2; //@line 1707 "cPickle.c"
        __label__ = 118; break; //@line 1707 "cPickle.c"
      case 118: // $bb4_i60
        var $446=$self_addr_i51; //@line 1710 "cPickle.c"
        var $447=$446+48; //@line 1710 "cPickle.c"
        var $448=HEAP[$447]; //@line 1710 "cPickle.c"
        var $449=$self_addr_i51; //@line 1710 "cPickle.c"
        var $s5_i=$s_i; //@line 1710 "cPickle.c"
        var $450=$len_i55; //@line 1710 "cPickle.c"
        var $451=FUNCTION_TABLE[$448]($449, $s5_i, $450); //@line 1710 "cPickle.c"
        var $452=($451) < 0; //@line 1710 "cPickle.c"
        if ($452) { __label__ = 134; break; } else { __label__ = 119; break; } //@line 1710 "cPickle.c"
      case 119: // $bb6_i61
        var $453=$args_addr_i52; //@line 1714 "cPickle.c"
        var $454=_PyList_Size($453); //@line 1714 "cPickle.c"
        $len_i55=$454; //@line 1714 "cPickle.c"
        var $455=$len_i55; //@line 1714 "cPickle.c"
        var $456=($455) < 0; //@line 1714 "cPickle.c"
        if ($456) { __label__ = 134; break; } else { __label__ = 120; break; } //@line 1714 "cPickle.c"
      case 120: // $bb7_i62
        var $457=$len_i55; //@line 1718 "cPickle.c"
        var $458=($457)==0; //@line 1718 "cPickle.c"
        var $459=$self_addr_i51; //@line 1719 "cPickle.c"
        var $460=$args_addr_i52; //@line 1719 "cPickle.c"
        if ($458) { __label__ = 121; break; } else { __label__ = 126; break; } //@line 1718 "cPickle.c"
      case 121: // $bb8_i63
        $self_addr_i_i=$459;
        $ob_addr_i_i=$460;
        var $461=$ob_addr_i_i; //@line 772 "cPickle.c"
        var $462=$461; //@line 772 "cPickle.c"
        var $463=HEAP[$462]; //@line 772 "cPickle.c"
        var $464=($463) <= 1; //@line 772 "cPickle.c"
        if ($464) { __label__ = 123; break; } else { __label__ = 122; break; } //@line 772 "cPickle.c"
      case 122: // $bb_i_i
        var $465=$self_addr_i_i; //@line 772 "cPickle.c"
        var $466=$465+44; //@line 772 "cPickle.c"
        var $467=HEAP[$466]; //@line 772 "cPickle.c"
        var $468=($467)!=0; //@line 772 "cPickle.c"
        if ($468) { __label__ = 123; break; } else { __label__ = 124; break; } //@line 772 "cPickle.c"
      case 123: // $put_exit_i_thread
        $7=0; //@line 773 "cPickle.c"
        $retval_i_i=0; //@line 773 "cPickle.c"
        __label__ = 125; break;
      case 124: // $put_exit_i
        var $469=$self_addr_i_i; //@line 775 "cPickle.c"
        var $470=$ob_addr_i_i; //@line 775 "cPickle.c"
        var $471=_put2($469, $470); //@line 775 "cPickle.c"
        $7=$471; //@line 775 "cPickle.c"
        $retval_i_i=$471; //@line 773 "cPickle.c"
        var $472=($471) >= 0; //@line 1719 "cPickle.c"
        if ($472) { __label__ = 125; break; } else { __label__ = 134; break; } //@line 1719 "cPickle.c"
      case 125: // $bb9_i64
        $res_i54=0; //@line 1720 "cPickle.c"
        __label__ = 134; break; //@line 1720 "cPickle.c"
      case 126: // $bb11_i65
        var $473=_put2($459, $460); //@line 1723 "cPickle.c"
        var $474=($473) < 0; //@line 1723 "cPickle.c"
        if ($474) { __label__ = 134; break; } else { __label__ = 127; break; } //@line 1723 "cPickle.c"
      case 127: // $bb12_i66
        var $475=$args_addr_i52; //@line 1727 "cPickle.c"
        var $476=_PyObject_GetIter($475); //@line 1727 "cPickle.c"
        $iter_i=$476; //@line 1727 "cPickle.c"
        var $477=$iter_i; //@line 1728 "cPickle.c"
        var $478=($477)==0; //@line 1728 "cPickle.c"
        if ($478) { __label__ = 134; break; } else { __label__ = 128; break; } //@line 1728 "cPickle.c"
      case 128: // $bb13_i67
        var $479=HEAP[__PyThreadState_Current]; //@line 1731 "cPickle.c"
        var $480=$479+12; //@line 1731 "cPickle.c"
        var $481=HEAP[$480]; //@line 1731 "cPickle.c"
        var $482=($481) + 1; //@line 1731 "cPickle.c"
        var $483=$479+12; //@line 1731 "cPickle.c"
        HEAP[$483]=$482; //@line 1731 "cPickle.c"
        var $484=$479+12; //@line 1731 "cPickle.c"
        var $485=HEAP[$484]; //@line 1731 "cPickle.c"
        var $486=HEAP[__Py_CheckRecursionLimit]; //@line 1731 "cPickle.c"
        var $487=($485) <= ($486); //@line 1731 "cPickle.c"
        if ($487) { __label__ = 131; break; } else { __label__ = 129; break; } //@line 1731 "cPickle.c"
      case 129: // $bb14_i68
        var $488=__Py_CheckRecursiveCall(__str17); //@line 1731 "cPickle.c"
        var $489=($488)==0; //@line 1731 "cPickle.c"
        if ($489) { __label__ = 131; break; } else { __label__ = 130; break; } //@line 1731 "cPickle.c"
      case 130: // $bb17_i71
        $iftmp_93_i=1; //@line 1731 "cPickle.c"
        __label__ = 132; break;
      case 131: // $bb18_i72
        $iftmp_93_i=0; //@line 1731 "cPickle.c"
        var $490=$self_addr_i51; //@line 1733 "cPickle.c"
        var $491=$iter_i; //@line 1733 "cPickle.c"
        var $492=_batch_list($490, $491); //@line 1733 "cPickle.c"
        $res_i54=$492; //@line 1733 "cPickle.c"
        var $493=HEAP[__PyThreadState_Current]; //@line 1734 "cPickle.c"
        var $494=$493+12; //@line 1734 "cPickle.c"
        var $495=HEAP[$494]; //@line 1734 "cPickle.c"
        var $496=($495) - 1; //@line 1734 "cPickle.c"
        var $497=$493+12; //@line 1734 "cPickle.c"
        HEAP[$497]=$496; //@line 1734 "cPickle.c"
        __label__ = 132; break; //@line 1734 "cPickle.c"
      case 132: // $bb19_i
        var $498=$iter_i; //@line 1736 "cPickle.c"
        var $499=$498; //@line 1736 "cPickle.c"
        var $500=HEAP[$499]; //@line 1736 "cPickle.c"
        var $501=($500) - 1; //@line 1736 "cPickle.c"
        var $502=$iter_i; //@line 1736 "cPickle.c"
        var $503=$502; //@line 1736 "cPickle.c"
        HEAP[$503]=$501; //@line 1736 "cPickle.c"
        var $504=$iter_i; //@line 1736 "cPickle.c"
        var $505=$504; //@line 1736 "cPickle.c"
        var $506=HEAP[$505]; //@line 1736 "cPickle.c"
        var $507=($506)==0; //@line 1736 "cPickle.c"
        if ($507) { __label__ = 133; break; } else { __label__ = 134; break; } //@line 1736 "cPickle.c"
      case 133: // $bb20_i73
        var $508=$iter_i; //@line 1736 "cPickle.c"
        var $509=$508+4; //@line 1736 "cPickle.c"
        var $510=HEAP[$509]; //@line 1736 "cPickle.c"
        var $511=$510+24; //@line 1736 "cPickle.c"
        var $512=HEAP[$511]; //@line 1736 "cPickle.c"
        var $513=$iter_i; //@line 1736 "cPickle.c"
        FUNCTION_TABLE[$512]($513); //@line 1736 "cPickle.c"
        __label__ = 134; break; //@line 1738 "cPickle.c"
      case 134: // $finally_i74
        var $514=$self_addr_i51; //@line 1739 "cPickle.c"
        var $515=$514+44; //@line 1739 "cPickle.c"
        var $516=HEAP[$515]; //@line 1739 "cPickle.c"
        var $517=($516)!=0; //@line 1739 "cPickle.c"
        if ($517) { __label__ = 135; break; } else { __label__ = 137; break; } //@line 1739 "cPickle.c"
      case 135: // $bb21_i75
        var $518=$self_addr_i51; //@line 1739 "cPickle.c"
        var $519=$args_addr_i52; //@line 1739 "cPickle.c"
        var $520=_fast_save_leave($518, $519); //@line 1739 "cPickle.c"
        var $521=($520)==0; //@line 1739 "cPickle.c"
        if ($521) { __label__ = 136; break; } else { __label__ = 137; break; } //@line 1739 "cPickle.c"
      case 136: // $bb22_i
        $res_i54=-1; //@line 1740 "cPickle.c"
        __label__ = 137; break; //@line 1740 "cPickle.c"
      case 137: // $save_list_exit
        var $522=$res_i54; //@line 1742 "cPickle.c"
        $8=$522; //@line 1742 "cPickle.c"
        var $523=$8; //@line 1742 "cPickle.c"
        $retval_i53=$523; //@line 1742 "cPickle.c"
        var $retval24_i=$retval_i53; //@line 1742 "cPickle.c"
        $res=$retval24_i; //@line 2648 "cPickle.c"
        __label__ = 404; break; //@line 2648 "cPickle.c"
      case 138: // $bb53
        var $524=$type; //@line 2654 "cPickle.c"
        var $525=($524)==(_PyDict_Type); //@line 2654 "cPickle.c"
        if ($525) { __label__ = 139; break; } else { __label__ = 274; break; } //@line 2654 "cPickle.c"
      case 139: // $bb54
        var $526=$self_addr; //@line 2655 "cPickle.c"
        var $527=$args_addr; //@line 2655 "cPickle.c"
        $self_addr_i80=$526;
        $args_addr_i81=$527;
        $res_i83=-1; //@line 1944 "cPickle.c"
        var $528=$self_addr_i80; //@line 1948 "cPickle.c"
        var $529=$528+44; //@line 1948 "cPickle.c"
        var $530=HEAP[$529]; //@line 1948 "cPickle.c"
        var $531=($530)!=0; //@line 1948 "cPickle.c"
        if ($531) { __label__ = 140; break; } else { __label__ = 141; break; } //@line 1948 "cPickle.c"
      case 140: // $bb_i87
        var $532=$self_addr_i80; //@line 1948 "cPickle.c"
        var $533=$args_addr_i81; //@line 1948 "cPickle.c"
        var $534=_fast_save_enter($532, $533); //@line 1948 "cPickle.c"
        var $535=($534)==0; //@line 1948 "cPickle.c"
        if ($535) { __label__ = 192; break; } else { __label__ = 141; break; } //@line 1948 "cPickle.c"
      case 141: // $bb1_i88
        var $536=$self_addr_i80; //@line 1952 "cPickle.c"
        var $537=$536+40; //@line 1952 "cPickle.c"
        var $538=HEAP[$537]; //@line 1952 "cPickle.c"
        var $539=($538)!=0; //@line 1952 "cPickle.c"
        var $540=$s_i; //@line 1953 "cPickle.c"
        if ($539) { __label__ = 142; break; } else { __label__ = 143; break; } //@line 1952 "cPickle.c"
      case 142: // $bb2_i89
        HEAP[$540]=125; //@line 1953 "cPickle.c"
        $len_i85=1; //@line 1954 "cPickle.c"
        __label__ = 144; break; //@line 1954 "cPickle.c"
      case 143: // $bb3_i90
        HEAP[$540]=40; //@line 1957 "cPickle.c"
        var $541=$s_i+1; //@line 1958 "cPickle.c"
        HEAP[$541]=100; //@line 1958 "cPickle.c"
        $len_i85=2; //@line 1959 "cPickle.c"
        __label__ = 144; break; //@line 1959 "cPickle.c"
      case 144: // $bb4_i92
        var $542=$self_addr_i80; //@line 1962 "cPickle.c"
        var $543=$542+48; //@line 1962 "cPickle.c"
        var $544=HEAP[$543]; //@line 1962 "cPickle.c"
        var $545=$self_addr_i80; //@line 1962 "cPickle.c"
        var $s5_i91=$s_i; //@line 1962 "cPickle.c"
        var $546=$len_i85; //@line 1962 "cPickle.c"
        var $547=FUNCTION_TABLE[$544]($545, $s5_i91, $546); //@line 1962 "cPickle.c"
        var $548=($547) < 0; //@line 1962 "cPickle.c"
        if ($548) { __label__ = 192; break; } else { __label__ = 145; break; } //@line 1962 "cPickle.c"
      case 145: // $bb6_i93
        var $549=$args_addr_i81; //@line 1966 "cPickle.c"
        var $550=_PyDict_Size($549); //@line 1966 "cPickle.c"
        $len_i85=$550; //@line 1966 "cPickle.c"
        var $551=$len_i85; //@line 1966 "cPickle.c"
        var $552=($551) < 0; //@line 1966 "cPickle.c"
        if ($552) { __label__ = 192; break; } else { __label__ = 146; break; } //@line 1966 "cPickle.c"
      case 146: // $bb7_i94
        var $553=$len_i85; //@line 1969 "cPickle.c"
        var $554=($553)==0; //@line 1969 "cPickle.c"
        var $555=$self_addr_i80; //@line 1970 "cPickle.c"
        var $556=$args_addr_i81; //@line 1970 "cPickle.c"
        if ($554) { __label__ = 147; break; } else { __label__ = 152; break; } //@line 1969 "cPickle.c"
      case 147: // $bb8_i95
        $self_addr_i_i77=$555;
        $ob_addr_i_i78=$556;
        var $557=$ob_addr_i_i78; //@line 772 "cPickle.c"
        var $558=$557; //@line 772 "cPickle.c"
        var $559=HEAP[$558]; //@line 772 "cPickle.c"
        var $560=($559) <= 1; //@line 772 "cPickle.c"
        if ($560) { __label__ = 149; break; } else { __label__ = 148; break; } //@line 772 "cPickle.c"
      case 148: // $bb_i_i96
        var $561=$self_addr_i_i77; //@line 772 "cPickle.c"
        var $562=$561+44; //@line 772 "cPickle.c"
        var $563=HEAP[$562]; //@line 772 "cPickle.c"
        var $564=($563)!=0; //@line 772 "cPickle.c"
        if ($564) { __label__ = 149; break; } else { __label__ = 150; break; } //@line 772 "cPickle.c"
      case 149: // $put_exit_i100_thread
        $5=0; //@line 773 "cPickle.c"
        $retval_i_i79=0; //@line 773 "cPickle.c"
        __label__ = 151; break;
      case 150: // $put_exit_i100
        var $565=$self_addr_i_i77; //@line 775 "cPickle.c"
        var $566=$ob_addr_i_i78; //@line 775 "cPickle.c"
        var $567=_put2($565, $566); //@line 775 "cPickle.c"
        $5=$567; //@line 775 "cPickle.c"
        $retval_i_i79=$567; //@line 773 "cPickle.c"
        var $568=($567) >= 0; //@line 1970 "cPickle.c"
        if ($568) { __label__ = 151; break; } else { __label__ = 192; break; } //@line 1970 "cPickle.c"
      case 151: // $bb9_i101
        $res_i83=0; //@line 1971 "cPickle.c"
        __label__ = 192; break; //@line 1971 "cPickle.c"
      case 152: // $bb11_i102
        var $569=_put2($555, $556); //@line 1974 "cPickle.c"
        var $570=($569) < 0; //@line 1974 "cPickle.c"
        if ($570) { __label__ = 192; break; } else { __label__ = 153; break; } //@line 1974 "cPickle.c"
      case 153: // $bb12_i103
        var $571=$args_addr_i81; //@line 1978 "cPickle.c"
        var $572=$571+4; //@line 1978 "cPickle.c"
        var $573=HEAP[$572]; //@line 1978 "cPickle.c"
        var $574=($573)!=(_PyDict_Type); //@line 1978 "cPickle.c"
        if ($574) { __label__ = 185; break; } else { __label__ = 154; break; } //@line 1978 "cPickle.c"
      case 154: // $bb13_i104
        var $575=$self_addr_i80; //@line 1978 "cPickle.c"
        var $576=$575+36; //@line 1978 "cPickle.c"
        var $577=HEAP[$576]; //@line 1978 "cPickle.c"
        var $578=($577) <= 0; //@line 1978 "cPickle.c"
        if ($578) { __label__ = 185; break; } else { __label__ = 155; break; } //@line 1978 "cPickle.c"
      case 155: // $bb14_i105
        var $579=HEAP[__PyThreadState_Current]; //@line 1981 "cPickle.c"
        var $580=$579+12; //@line 1981 "cPickle.c"
        var $581=HEAP[$580]; //@line 1981 "cPickle.c"
        var $582=($581) + 1; //@line 1981 "cPickle.c"
        var $583=$579+12; //@line 1981 "cPickle.c"
        HEAP[$583]=$582; //@line 1981 "cPickle.c"
        var $584=$579+12; //@line 1981 "cPickle.c"
        var $585=HEAP[$584]; //@line 1981 "cPickle.c"
        var $586=HEAP[__Py_CheckRecursionLimit]; //@line 1981 "cPickle.c"
        var $587=($585) <= ($586); //@line 1981 "cPickle.c"
        if ($587) { __label__ = 158; break; } else { __label__ = 156; break; } //@line 1981 "cPickle.c"
      case 156: // $bb15_i106
        var $588=__Py_CheckRecursiveCall(__str17); //@line 1981 "cPickle.c"
        var $589=($588)==0; //@line 1981 "cPickle.c"
        if ($589) { __label__ = 158; break; } else { __label__ = 157; break; } //@line 1981 "cPickle.c"
      case 157: // $bb18_i109
        $iftmp_113_i=1; //@line 1981 "cPickle.c"
        __label__ = 192; break;
      case 158: // $bb19_i110
        $iftmp_113_i=0; //@line 1981 "cPickle.c"
        var $590=$self_addr_i80; //@line 1982 "cPickle.c"
        var $591=$args_addr_i81; //@line 1982 "cPickle.c"
        $self_addr_i1_i=$590;
        $obj_addr_i_i=$591;
        HEAP[$key_i_i]=0; //@line 1891 "cPickle.c"
        HEAP[$value_i_i]=0; //@line 1891 "cPickle.c"
        HEAP[$ppos_i_i]=0; //@line 1893 "cPickle.c"
        var $592=($591)==0; //@line 1898 "cPickle.c"
        if ($592) { __label__ = 159; break; } else { __label__ = 160; break; } //@line 1898 "cPickle.c"
      case 159: // $bb_i3_i
        ___assert_fail(__str19, __str15, 1898, ___PRETTY_FUNCTION___10501); //@line 1898 "cPickle.c"
        throw "Reached an unreachable!" //@line 1898 "cPickle.c"
      case 160: // $bb1_i4_i
        var $593=$self_addr_i1_i; //@line 1899 "cPickle.c"
        var $594=$593+36; //@line 1899 "cPickle.c"
        var $595=HEAP[$594]; //@line 1899 "cPickle.c"
        var $596=($595) <= 0; //@line 1899 "cPickle.c"
        if ($596) { __label__ = 161; break; } else { __label__ = 162; break; } //@line 1899 "cPickle.c"
      case 161: // $bb2_i5_i
        ___assert_fail(__str20, __str15, 1899, ___PRETTY_FUNCTION___10501); //@line 1899 "cPickle.c"
        throw "Reached an unreachable!" //@line 1899 "cPickle.c"
      case 162: // $bb3_i_i
        var $597=$obj_addr_i_i; //@line 1901 "cPickle.c"
        var $598=_PyDict_Size($597); //@line 1901 "cPickle.c"
        $dict_size_i_i=$598; //@line 1901 "cPickle.c"
        var $599=$dict_size_i_i; //@line 1904 "cPickle.c"
        var $600=($599)==1; //@line 1904 "cPickle.c"
        if ($600) { __label__ = 163; break; } else { __label__ = 170; break; } //@line 1904 "cPickle.c"
      case 163: // $bb4_i_i
        var $601=$obj_addr_i_i; //@line 1905 "cPickle.c"
        var $602=_PyDict_Next($601, $ppos_i_i, $key_i_i, $value_i_i); //@line 1905 "cPickle.c"
        var $603=HEAP[$key_i_i]; //@line 1906 "cPickle.c"
        var $604=$self_addr_i1_i; //@line 1906 "cPickle.c"
        var $605=_save($604, $603, 0); //@line 1906 "cPickle.c"
        var $606=($605) < 0; //@line 1906 "cPickle.c"
        if ($606) { __label__ = 164; break; } else { __label__ = 165; break; } //@line 1906 "cPickle.c"
      case 164: // $bb5_i_i
        $4=-1; //@line 1907 "cPickle.c"
        __label__ = 184; break; //@line 1907 "cPickle.c"
      case 165: // $bb6_i_i
        var $607=HEAP[$value_i_i]; //@line 1908 "cPickle.c"
        var $608=$self_addr_i1_i; //@line 1908 "cPickle.c"
        var $609=_save($608, $607, 0); //@line 1908 "cPickle.c"
        var $610=($609) < 0; //@line 1908 "cPickle.c"
        if ($610) { __label__ = 166; break; } else { __label__ = 167; break; } //@line 1908 "cPickle.c"
      case 166: // $bb7_i_i
        $4=-1; //@line 1909 "cPickle.c"
        __label__ = 184; break; //@line 1909 "cPickle.c"
      case 167: // $bb8_i_i
        var $611=$self_addr_i1_i; //@line 1910 "cPickle.c"
        var $612=$611+48; //@line 1910 "cPickle.c"
        var $613=HEAP[$612]; //@line 1910 "cPickle.c"
        var $614=$self_addr_i1_i; //@line 1910 "cPickle.c"
        var $615=FUNCTION_TABLE[$613]($614, _setitem_10499, 1); //@line 1910 "cPickle.c"
        var $616=($615) < 0; //@line 1910 "cPickle.c"
        if ($616) { __label__ = 168; break; } else { __label__ = 169; break; } //@line 1910 "cPickle.c"
      case 168: // $bb9_i_i
        $4=-1; //@line 1911 "cPickle.c"
        __label__ = 184; break; //@line 1911 "cPickle.c"
      case 169: // $bb10_i_i
        $4=0; //@line 1912 "cPickle.c"
        __label__ = 184; break; //@line 1912 "cPickle.c"
      case 170: // $bb11_i_i
        $i_i_i=0; //@line 1917 "cPickle.c"
        var $617=$self_addr_i1_i; //@line 1918 "cPickle.c"
        var $618=$617+48; //@line 1918 "cPickle.c"
        var $619=HEAP[$618]; //@line 1918 "cPickle.c"
        var $620=$self_addr_i1_i; //@line 1918 "cPickle.c"
        var $621=FUNCTION_TABLE[$619]($620, _MARKv, 1); //@line 1918 "cPickle.c"
        var $622=($621) < 0; //@line 1918 "cPickle.c"
        if ($622) { __label__ = 171; break; } else { __label__ = 177; break; } //@line 1918 "cPickle.c"
      case 171: // $bb12_i_i
        $4=-1; //@line 1919 "cPickle.c"
        __label__ = 184; break; //@line 1919 "cPickle.c"
      case 172: // $bb14_i_i
        var $623=HEAP[$key_i_i]; //@line 1921 "cPickle.c"
        var $624=$self_addr_i1_i; //@line 1921 "cPickle.c"
        var $625=_save($624, $623, 0); //@line 1921 "cPickle.c"
        var $626=($625) < 0; //@line 1921 "cPickle.c"
        if ($626) { __label__ = 173; break; } else { __label__ = 174; break; } //@line 1921 "cPickle.c"
      case 173: // $bb15_i_i
        $4=-1; //@line 1922 "cPickle.c"
        __label__ = 184; break; //@line 1922 "cPickle.c"
      case 174: // $bb16_i_i
        var $627=HEAP[$value_i_i]; //@line 1923 "cPickle.c"
        var $628=$self_addr_i1_i; //@line 1923 "cPickle.c"
        var $629=_save($628, $627, 0); //@line 1923 "cPickle.c"
        var $630=($629) < 0; //@line 1923 "cPickle.c"
        if ($630) { __label__ = 175; break; } else { __label__ = 176; break; } //@line 1923 "cPickle.c"
      case 175: // $bb17_i_i
        $4=-1; //@line 1924 "cPickle.c"
        __label__ = 184; break; //@line 1924 "cPickle.c"
      case 176: // $bb18_i_i
        var $631=$i_i_i; //@line 1925 "cPickle.c"
        var $632=($631) + 1; //@line 1925 "cPickle.c"
        $i_i_i=$632; //@line 1925 "cPickle.c"
        var $633=$i_i_i; //@line 1925 "cPickle.c"
        var $634=($633)==1000; //@line 1925 "cPickle.c"
        if ($634) { __label__ = 178; break; } else { __label__ = 177; break; } //@line 1925 "cPickle.c"
      case 177: // $bb19_i_i
        var $635=$obj_addr_i_i; //@line 1920 "cPickle.c"
        var $636=_PyDict_Next($635, $ppos_i_i, $key_i_i, $value_i_i); //@line 1920 "cPickle.c"
        var $637=($636)!=0; //@line 1920 "cPickle.c"
        if ($637) { __label__ = 172; break; } else { __label__ = 178; break; } //@line 1920 "cPickle.c"
      case 178: // $bb20_i_i
        var $638=$self_addr_i1_i; //@line 1928 "cPickle.c"
        var $639=$638+48; //@line 1928 "cPickle.c"
        var $640=HEAP[$639]; //@line 1928 "cPickle.c"
        var $641=$self_addr_i1_i; //@line 1928 "cPickle.c"
        var $642=FUNCTION_TABLE[$640]($641, _setitems_10500, 1); //@line 1928 "cPickle.c"
        var $643=($642) < 0; //@line 1928 "cPickle.c"
        if ($643) { __label__ = 179; break; } else { __label__ = 180; break; } //@line 1928 "cPickle.c"
      case 179: // $bb21_i_i
        $4=-1; //@line 1929 "cPickle.c"
        __label__ = 184; break; //@line 1929 "cPickle.c"
      case 180: // $bb22_i_i
        var $644=$obj_addr_i_i; //@line 1930 "cPickle.c"
        var $645=_PyDict_Size($644); //@line 1930 "cPickle.c"
        var $646=$dict_size_i_i; //@line 1930 "cPickle.c"
        var $647=($645)!=($646); //@line 1930 "cPickle.c"
        if ($647) { __label__ = 181; break; } else { __label__ = 182; break; } //@line 1930 "cPickle.c"
      case 181: // $bb23_i_i
        var $648=HEAP[_PyExc_RuntimeError]; //@line 1931 "cPickle.c"
        var $649=_PyErr_Format($648, __str21); //@line 1931 "cPickle.c"
        $4=-1; //@line 1934 "cPickle.c"
        __label__ = 184; break; //@line 1934 "cPickle.c"
      case 182: // $bb24_i_i
        var $650=$i_i_i; //@line 1937 "cPickle.c"
        var $651=($650)==1000; //@line 1937 "cPickle.c"
        if ($651) { __label__ = 170; break; } else { __label__ = 183; break; } //@line 1937 "cPickle.c"
      case 183: // $bb25_i_i
        $4=0; //@line 1938 "cPickle.c"
        __label__ = 184; break; //@line 1938 "cPickle.c"
      case 184: // $batch_dict_exact_exit_i
        var $652=$4; //@line 1907 "cPickle.c"
        $retval_i2_i=$652; //@line 1907 "cPickle.c"
        var $retval27_i_i=$retval_i2_i; //@line 1907 "cPickle.c"
        $res_i83=$retval27_i_i; //@line 1982 "cPickle.c"
        var $653=HEAP[__PyThreadState_Current]; //@line 1983 "cPickle.c"
        var $654=$653+12; //@line 1983 "cPickle.c"
        var $655=HEAP[$654]; //@line 1983 "cPickle.c"
        var $656=($655) - 1; //@line 1983 "cPickle.c"
        var $657=$653+12; //@line 1983 "cPickle.c"
        HEAP[$657]=$656; //@line 1983 "cPickle.c"
        __label__ = 192; break; //@line 1983 "cPickle.c"
      case 185: // $bb21_i111
        var $658=$args_addr_i81; //@line 1986 "cPickle.c"
        var $659=_PyObject_CallMethod($658, __str22, __str23); //@line 1986 "cPickle.c"
        $iter_i86=$659; //@line 1986 "cPickle.c"
        var $660=($659)==0; //@line 1987 "cPickle.c"
        if ($660) { __label__ = 192; break; } else { __label__ = 186; break; } //@line 1987 "cPickle.c"
      case 186: // $bb22_i112
        var $661=HEAP[__PyThreadState_Current]; //@line 1989 "cPickle.c"
        var $662=$661+12; //@line 1989 "cPickle.c"
        var $663=HEAP[$662]; //@line 1989 "cPickle.c"
        var $664=($663) + 1; //@line 1989 "cPickle.c"
        var $665=$661+12; //@line 1989 "cPickle.c"
        HEAP[$665]=$664; //@line 1989 "cPickle.c"
        var $666=$661+12; //@line 1989 "cPickle.c"
        var $667=HEAP[$666]; //@line 1989 "cPickle.c"
        var $668=HEAP[__Py_CheckRecursionLimit]; //@line 1989 "cPickle.c"
        var $669=($667) <= ($668); //@line 1989 "cPickle.c"
        if ($669) { __label__ = 189; break; } else { __label__ = 187; break; } //@line 1989 "cPickle.c"
      case 187: // $bb23_i113
        var $670=__Py_CheckRecursiveCall(__str17); //@line 1989 "cPickle.c"
        var $671=($670)==0; //@line 1989 "cPickle.c"
        if ($671) { __label__ = 189; break; } else { __label__ = 188; break; } //@line 1989 "cPickle.c"
      case 188: // $bb26_i116
        $iftmp_117_i=1; //@line 1989 "cPickle.c"
        __label__ = 190; break;
      case 189: // $bb27_i117
        $iftmp_117_i=0; //@line 1989 "cPickle.c"
        var $672=$self_addr_i80; //@line 1990 "cPickle.c"
        var $673=$iter_i86; //@line 1990 "cPickle.c"
        var $674=_batch_dict($672, $673); //@line 1990 "cPickle.c"
        $res_i83=$674; //@line 1990 "cPickle.c"
        var $675=HEAP[__PyThreadState_Current]; //@line 1991 "cPickle.c"
        var $676=$675+12; //@line 1991 "cPickle.c"
        var $677=HEAP[$676]; //@line 1991 "cPickle.c"
        var $678=($677) - 1; //@line 1991 "cPickle.c"
        var $679=$675+12; //@line 1991 "cPickle.c"
        HEAP[$679]=$678; //@line 1991 "cPickle.c"
        __label__ = 190; break; //@line 1991 "cPickle.c"
      case 190: // $bb28_i118
        var $680=$iter_i86; //@line 1993 "cPickle.c"
        var $681=$680; //@line 1993 "cPickle.c"
        var $682=HEAP[$681]; //@line 1993 "cPickle.c"
        var $683=($682) - 1; //@line 1993 "cPickle.c"
        var $684=$iter_i86; //@line 1993 "cPickle.c"
        var $685=$684; //@line 1993 "cPickle.c"
        HEAP[$685]=$683; //@line 1993 "cPickle.c"
        var $686=$iter_i86; //@line 1993 "cPickle.c"
        var $687=$686; //@line 1993 "cPickle.c"
        var $688=HEAP[$687]; //@line 1993 "cPickle.c"
        var $689=($688)==0; //@line 1993 "cPickle.c"
        if ($689) { __label__ = 191; break; } else { __label__ = 192; break; } //@line 1993 "cPickle.c"
      case 191: // $bb29_i119
        var $690=$iter_i86; //@line 1993 "cPickle.c"
        var $691=$690+4; //@line 1993 "cPickle.c"
        var $692=HEAP[$691]; //@line 1993 "cPickle.c"
        var $693=$692+24; //@line 1993 "cPickle.c"
        var $694=HEAP[$693]; //@line 1993 "cPickle.c"
        var $695=$iter_i86; //@line 1993 "cPickle.c"
        FUNCTION_TABLE[$694]($695); //@line 1993 "cPickle.c"
        __label__ = 192; break; //@line 1996 "cPickle.c"
      case 192: // $finally_i120
        var $696=$self_addr_i80; //@line 1997 "cPickle.c"
        var $697=$696+44; //@line 1997 "cPickle.c"
        var $698=HEAP[$697]; //@line 1997 "cPickle.c"
        var $699=($698)!=0; //@line 1997 "cPickle.c"
        if ($699) { __label__ = 193; break; } else { __label__ = 195; break; } //@line 1997 "cPickle.c"
      case 193: // $bb30_i121
        var $700=$self_addr_i80; //@line 1997 "cPickle.c"
        var $701=$args_addr_i81; //@line 1997 "cPickle.c"
        var $702=_fast_save_leave($700, $701); //@line 1997 "cPickle.c"
        var $703=($702)==0; //@line 1997 "cPickle.c"
        if ($703) { __label__ = 194; break; } else { __label__ = 195; break; } //@line 1997 "cPickle.c"
      case 194: // $bb31_i122
        $res_i83=-1; //@line 1998 "cPickle.c"
        __label__ = 195; break; //@line 1998 "cPickle.c"
      case 195: // $save_dict_exit
        var $704=$res_i83; //@line 2000 "cPickle.c"
        $6=$704; //@line 2000 "cPickle.c"
        var $705=$6; //@line 2000 "cPickle.c"
        $retval_i82=$705; //@line 2000 "cPickle.c"
        var $retval33_i=$retval_i82; //@line 2000 "cPickle.c"
        $res=$retval33_i; //@line 2655 "cPickle.c"
        __label__ = 404; break; //@line 2655 "cPickle.c"
      case 196: // $bb56
        var $706=$type; //@line 2661 "cPickle.c"
        var $707=($706)==(_PyInstance_Type); //@line 2661 "cPickle.c"
        if ($707) { __label__ = 197; break; } else { __label__ = 274; break; } //@line 2661 "cPickle.c"
      case 197: // $bb57
        var $708=$self_addr; //@line 2662 "cPickle.c"
        var $709=$args_addr; //@line 2662 "cPickle.c"
        $self_addr_i127=$708;
        $args_addr_i128=$709;
        $class_i=0; //@line 2007 "cPickle.c"
        $module_i=0; //@line 2007 "cPickle.c"
        $name_i=0; //@line 2007 "cPickle.c"
        $state_i=0; //@line 2007 "cPickle.c"
        $getinitargs_func_i=0; //@line 2008 "cPickle.c"
        $getstate_func_i=0; //@line 2008 "cPickle.c"
        $class_args_i=0; //@line 2008 "cPickle.c"
        $res_i130=-1; //@line 2010 "cPickle.c"
        var $710=$self_addr_i127; //@line 2014 "cPickle.c"
        var $711=$710+44; //@line 2014 "cPickle.c"
        var $712=HEAP[$711]; //@line 2014 "cPickle.c"
        var $713=($712)!=0; //@line 2014 "cPickle.c"
        if ($713) { __label__ = 198; break; } else { __label__ = 199; break; } //@line 2014 "cPickle.c"
      case 198: // $bb_i133
        var $714=$self_addr_i127; //@line 2014 "cPickle.c"
        var $715=$args_addr_i128; //@line 2014 "cPickle.c"
        var $716=_fast_save_enter($714, $715); //@line 2014 "cPickle.c"
        var $717=($716)==0; //@line 2014 "cPickle.c"
        if ($717) { __label__ = 244; break; } else { __label__ = 199; break; } //@line 2014 "cPickle.c"
      case 199: // $bb1_i134
        var $718=$self_addr_i127; //@line 2017 "cPickle.c"
        var $719=$718+48; //@line 2017 "cPickle.c"
        var $720=HEAP[$719]; //@line 2017 "cPickle.c"
        var $721=$self_addr_i127; //@line 2017 "cPickle.c"
        var $722=FUNCTION_TABLE[$720]($721, _MARKv, 1); //@line 2017 "cPickle.c"
        var $723=($722) < 0; //@line 2017 "cPickle.c"
        if ($723) { __label__ = 244; break; } else { __label__ = 200; break; } //@line 2017 "cPickle.c"
      case 200: // $bb2_i135
        var $724=HEAP[___class___str]; //@line 2020 "cPickle.c"
        var $725=$args_addr_i128; //@line 2020 "cPickle.c"
        var $726=_PyObject_GetAttr($725, $724); //@line 2020 "cPickle.c"
        $class_i=$726; //@line 2020 "cPickle.c"
        var $727=$class_i; //@line 2020 "cPickle.c"
        var $728=($727)==0; //@line 2020 "cPickle.c"
        if ($728) { __label__ = 244; break; } else { __label__ = 201; break; } //@line 2020 "cPickle.c"
      case 201: // $bb3_i136
        var $729=$self_addr_i127; //@line 2023 "cPickle.c"
        var $730=$729+40; //@line 2023 "cPickle.c"
        var $731=HEAP[$730]; //@line 2023 "cPickle.c"
        var $732=($731)!=0; //@line 2023 "cPickle.c"
        if ($732) { __label__ = 202; break; } else { __label__ = 203; break; } //@line 2023 "cPickle.c"
      case 202: // $bb4_i137
        var $733=$self_addr_i127; //@line 2024 "cPickle.c"
        var $734=$class_i; //@line 2024 "cPickle.c"
        var $735=_save($733, $734, 0); //@line 2024 "cPickle.c"
        var $736=($735) < 0; //@line 2024 "cPickle.c"
        if ($736) { __label__ = 244; break; } else { __label__ = 203; break; } //@line 2024 "cPickle.c"
      case 203: // $bb5_i138
        var $737=HEAP[___getinitargs___str]; //@line 2028 "cPickle.c"
        var $738=$args_addr_i128; //@line 2028 "cPickle.c"
        var $739=_PyObject_GetAttr($738, $737); //@line 2028 "cPickle.c"
        $getinitargs_func_i=$739; //@line 2028 "cPickle.c"
        var $740=($739)!=0; //@line 2028 "cPickle.c"
        if ($740) { __label__ = 204; break; } else { __label__ = 215; break; } //@line 2028 "cPickle.c"
      case 204: // $bb6_i139
        $element_i=0; //@line 2029 "cPickle.c"
        var $741=HEAP[_empty_tuple]; //@line 2032 "cPickle.c"
        var $742=$getinitargs_func_i; //@line 2032 "cPickle.c"
        var $743=_PyObject_Call($742, $741, 0); //@line 2032 "cPickle.c"
        $class_args_i=$743; //@line 2032 "cPickle.c"
        var $744=$class_args_i; //@line 2032 "cPickle.c"
        var $745=($744)==0; //@line 2032 "cPickle.c"
        if ($745) { __label__ = 244; break; } else { __label__ = 205; break; } //@line 2032 "cPickle.c"
      case 205: // $bb7_i140
        var $746=$class_args_i; //@line 2036 "cPickle.c"
        var $747=_PyObject_Size($746); //@line 2036 "cPickle.c"
        $len_i132=$747; //@line 2036 "cPickle.c"
        var $748=$len_i132; //@line 2036 "cPickle.c"
        var $749=($748) < 0; //@line 2036 "cPickle.c"
        if ($749) { __label__ = 244; break; } else { __label__ = 206; break; } //@line 2036 "cPickle.c"
      case 206: // $bb8_i141
        $i_i131=0; //@line 2039 "cPickle.c"
        __label__ = 214; break; //@line 2039 "cPickle.c"
      case 207: // $bb9_i142
        var $750=$class_args_i; //@line 2040 "cPickle.c"
        var $751=$i_i131; //@line 2040 "cPickle.c"
        var $752=_PySequence_GetItem($750, $751); //@line 2040 "cPickle.c"
        $element_i=$752; //@line 2040 "cPickle.c"
        var $753=$element_i; //@line 2040 "cPickle.c"
        var $754=($753)==0; //@line 2040 "cPickle.c"
        if ($754) { __label__ = 244; break; } else { __label__ = 208; break; } //@line 2040 "cPickle.c"
      case 208: // $bb10_i143
        var $755=$self_addr_i127; //@line 2043 "cPickle.c"
        var $756=$element_i; //@line 2043 "cPickle.c"
        var $757=_save($755, $756, 0); //@line 2043 "cPickle.c"
        var $758=($757) < 0; //@line 2043 "cPickle.c"
        var $759=$element_i; //@line 2044 "cPickle.c"
        var $760=$759; //@line 2044 "cPickle.c"
        var $761=HEAP[$760]; //@line 2044 "cPickle.c"
        var $762=($761) - 1; //@line 2044 "cPickle.c"
        var $763=$element_i; //@line 2044 "cPickle.c"
        var $764=$763; //@line 2044 "cPickle.c"
        HEAP[$764]=$762; //@line 2044 "cPickle.c"
        var $765=$element_i; //@line 2044 "cPickle.c"
        var $766=$765; //@line 2044 "cPickle.c"
        var $767=HEAP[$766]; //@line 2044 "cPickle.c"
        var $768=($767)==0; //@line 2044 "cPickle.c"
        if ($758) { __label__ = 209; break; } else { __label__ = 211; break; } //@line 2043 "cPickle.c"
      case 209: // $bb11_i144
        if ($768) { __label__ = 210; break; } else { __label__ = 244; break; } //@line 2044 "cPickle.c"
      case 210: // $bb12_i145
        var $769=$element_i; //@line 2044 "cPickle.c"
        var $770=$769+4; //@line 2044 "cPickle.c"
        var $771=HEAP[$770]; //@line 2044 "cPickle.c"
        var $772=$771+24; //@line 2044 "cPickle.c"
        var $773=HEAP[$772]; //@line 2044 "cPickle.c"
        var $774=$element_i; //@line 2044 "cPickle.c"
        FUNCTION_TABLE[$773]($774); //@line 2044 "cPickle.c"
        __label__ = 244; break; //@line 2044 "cPickle.c"
      case 211: // $bb14_i146
        if ($768) { __label__ = 212; break; } else { __label__ = 213; break; } //@line 2048 "cPickle.c"
      case 212: // $bb15_i147
        var $775=$element_i; //@line 2048 "cPickle.c"
        var $776=$775+4; //@line 2048 "cPickle.c"
        var $777=HEAP[$776]; //@line 2048 "cPickle.c"
        var $778=$777+24; //@line 2048 "cPickle.c"
        var $779=HEAP[$778]; //@line 2048 "cPickle.c"
        var $780=$element_i; //@line 2048 "cPickle.c"
        FUNCTION_TABLE[$779]($780); //@line 2048 "cPickle.c"
        __label__ = 213; break; //@line 2048 "cPickle.c"
      case 213: // $bb16_i148
        var $781=$i_i131; //@line 2039 "cPickle.c"
        var $782=($781) + 1; //@line 2039 "cPickle.c"
        $i_i131=$782; //@line 2039 "cPickle.c"
        __label__ = 214; break; //@line 2039 "cPickle.c"
      case 214: // $bb17_i149
        var $783=$i_i131; //@line 2039 "cPickle.c"
        var $784=$len_i132; //@line 2039 "cPickle.c"
        var $785=($783) < ($784); //@line 2039 "cPickle.c"
        if ($785) { __label__ = 207; break; } else { __label__ = 217; break; } //@line 2039 "cPickle.c"
      case 215: // $bb19_i150
        var $786=HEAP[_PyExc_AttributeError]; //@line 2052 "cPickle.c"
        var $787=_PyErr_ExceptionMatches($786); //@line 2052 "cPickle.c"
        var $788=($787)!=0; //@line 2052 "cPickle.c"
        if ($788) { __label__ = 216; break; } else { __label__ = 244; break; } //@line 2052 "cPickle.c"
      case 216: // $bb20_i151
        _PyErr_Clear(); //@line 2053 "cPickle.c"
        __label__ = 217; break; //@line 2053 "cPickle.c"
      case 217: // $bb21_i152
        var $789=$self_addr_i127; //@line 2058 "cPickle.c"
        var $790=$789+40; //@line 2058 "cPickle.c"
        var $791=HEAP[$790]; //@line 2058 "cPickle.c"
        var $792=($791)==0; //@line 2058 "cPickle.c"
        if ($792) { __label__ = 218; break; } else { __label__ = 228; break; } //@line 2058 "cPickle.c"
      case 218: // $bb22_i153
        var $793=$class_i; //@line 2059 "cPickle.c"
        var $794=$793; //@line 2059 "cPickle.c"
        var $795=$794+16; //@line 2059 "cPickle.c"
        var $796=HEAP[$795]; //@line 2059 "cPickle.c"
        $name_i=$796; //@line 2059 "cPickle.c"
        var $797=$name_i; //@line 2059 "cPickle.c"
        var $798=($797)==0; //@line 2059 "cPickle.c"
        if ($798) { __label__ = 219; break; } else { __label__ = 220; break; } //@line 2059 "cPickle.c"
      case 219: // $bb23_i154
        var $799=HEAP[_PicklingError]; //@line 2060 "cPickle.c"
        _PyErr_SetString($799, __str24); //@line 2060 "cPickle.c"
        __label__ = 244; break; //@line 2060 "cPickle.c"
      case 220: // $bb24_i155
        var $800=$class_i; //@line 2064 "cPickle.c"
        var $801=$name_i; //@line 2064 "cPickle.c"
        var $802=_whichmodule($800, $801); //@line 2064 "cPickle.c"
        $module_i=$802; //@line 2064 "cPickle.c"
        var $803=$module_i; //@line 2064 "cPickle.c"
        var $804=($803)==0; //@line 2064 "cPickle.c"
        if ($804) { __label__ = 244; break; } else { __label__ = 221; break; } //@line 2064 "cPickle.c"
      case 221: // $bb25_i156
        var $805=$module_i; //@line 2068 "cPickle.c"
        var $806=_PyString_Size($805); //@line 2068 "cPickle.c"
        $module_size_i=$806; //@line 2068 "cPickle.c"
        var $807=$module_size_i; //@line 2068 "cPickle.c"
        var $808=($807) < 0; //@line 2068 "cPickle.c"
        if ($808) { __label__ = 244; break; } else { __label__ = 222; break; } //@line 2068 "cPickle.c"
      case 222: // $bb26_i157
        var $809=$name_i; //@line 2068 "cPickle.c"
        var $810=_PyString_Size($809); //@line 2068 "cPickle.c"
        $name_size_i=$810; //@line 2068 "cPickle.c"
        var $811=$name_size_i; //@line 2068 "cPickle.c"
        var $812=($811) < 0; //@line 2068 "cPickle.c"
        if ($812) { __label__ = 244; break; } else { __label__ = 223; break; } //@line 2068 "cPickle.c"
      case 223: // $bb27_i158
        var $813=$module_i; //@line 2072 "cPickle.c"
        var $814=$813; //@line 2072 "cPickle.c"
        var $815=$814+20; //@line 2072 "cPickle.c"
        var $816=$815; //@line 2072 "cPickle.c"
        $module_str_i=$816; //@line 2072 "cPickle.c"
        var $817=$name_i; //@line 2073 "cPickle.c"
        var $818=$817; //@line 2073 "cPickle.c"
        var $819=$818+20; //@line 2073 "cPickle.c"
        var $820=$819; //@line 2073 "cPickle.c"
        $name_str_i=$820; //@line 2073 "cPickle.c"
        var $821=$self_addr_i127; //@line 2075 "cPickle.c"
        var $822=$821+48; //@line 2075 "cPickle.c"
        var $823=HEAP[$822]; //@line 2075 "cPickle.c"
        var $824=$self_addr_i127; //@line 2075 "cPickle.c"
        var $825=FUNCTION_TABLE[$823]($824, _inst_10654, 1); //@line 2075 "cPickle.c"
        var $826=($825) < 0; //@line 2075 "cPickle.c"
        if ($826) { __label__ = 244; break; } else { __label__ = 224; break; } //@line 2075 "cPickle.c"
      case 224: // $bb28_i159
        var $827=$self_addr_i127; //@line 2078 "cPickle.c"
        var $828=$827+48; //@line 2078 "cPickle.c"
        var $829=HEAP[$828]; //@line 2078 "cPickle.c"
        var $830=$self_addr_i127; //@line 2078 "cPickle.c"
        var $831=$module_str_i; //@line 2078 "cPickle.c"
        var $832=$module_size_i; //@line 2078 "cPickle.c"
        var $833=FUNCTION_TABLE[$829]($830, $831, $832); //@line 2078 "cPickle.c"
        var $834=($833) < 0; //@line 2078 "cPickle.c"
        if ($834) { __label__ = 244; break; } else { __label__ = 225; break; } //@line 2078 "cPickle.c"
      case 225: // $bb29_i160
        var $835=$self_addr_i127; //@line 2081 "cPickle.c"
        var $836=$835+48; //@line 2081 "cPickle.c"
        var $837=HEAP[$836]; //@line 2081 "cPickle.c"
        var $838=$self_addr_i127; //@line 2081 "cPickle.c"
        var $839=FUNCTION_TABLE[$837]($838, __str12, 1); //@line 2081 "cPickle.c"
        var $840=($839) < 0; //@line 2081 "cPickle.c"
        if ($840) { __label__ = 244; break; } else { __label__ = 226; break; } //@line 2081 "cPickle.c"
      case 226: // $bb30_i161
        var $841=$self_addr_i127; //@line 2084 "cPickle.c"
        var $842=$841+48; //@line 2084 "cPickle.c"
        var $843=HEAP[$842]; //@line 2084 "cPickle.c"
        var $844=$self_addr_i127; //@line 2084 "cPickle.c"
        var $845=$name_str_i; //@line 2084 "cPickle.c"
        var $846=$name_size_i; //@line 2084 "cPickle.c"
        var $847=FUNCTION_TABLE[$843]($844, $845, $846); //@line 2084 "cPickle.c"
        var $848=($847) < 0; //@line 2084 "cPickle.c"
        if ($848) { __label__ = 244; break; } else { __label__ = 227; break; } //@line 2084 "cPickle.c"
      case 227: // $bb31_i162
        var $849=$self_addr_i127; //@line 2087 "cPickle.c"
        var $850=$849+48; //@line 2087 "cPickle.c"
        var $851=HEAP[$850]; //@line 2087 "cPickle.c"
        var $852=$self_addr_i127; //@line 2087 "cPickle.c"
        var $853=FUNCTION_TABLE[$851]($852, __str12, 1); //@line 2087 "cPickle.c"
        var $854=($853) < 0; //@line 2087 "cPickle.c"
        if ($854) { __label__ = 244; break; } else { __label__ = 229; break; } //@line 2087 "cPickle.c"
      case 228: // $bb33_i
        var $855=$self_addr_i127; //@line 2090 "cPickle.c"
        var $856=$855+48; //@line 2090 "cPickle.c"
        var $857=HEAP[$856]; //@line 2090 "cPickle.c"
        var $858=$self_addr_i127; //@line 2090 "cPickle.c"
        var $859=FUNCTION_TABLE[$857]($858, _obj_10655, 1); //@line 2090 "cPickle.c"
        var $860=($859) < 0; //@line 2090 "cPickle.c"
        if ($860) { __label__ = 244; break; } else { __label__ = 229; break; } //@line 2090 "cPickle.c"
      case 229: // $bb34_i
        var $861=HEAP[___getstate___str]; //@line 2094 "cPickle.c"
        var $862=$args_addr_i128; //@line 2094 "cPickle.c"
        var $863=_PyObject_GetAttr($862, $861); //@line 2094 "cPickle.c"
        $getstate_func_i=$863; //@line 2094 "cPickle.c"
        var $864=($863)!=0; //@line 2094 "cPickle.c"
        if ($864) { __label__ = 230; break; } else { __label__ = 231; break; } //@line 2094 "cPickle.c"
      case 230: // $bb35_i
        var $865=HEAP[_empty_tuple]; //@line 2095 "cPickle.c"
        var $866=$getstate_func_i; //@line 2095 "cPickle.c"
        var $867=_PyObject_Call($866, $865, 0); //@line 2095 "cPickle.c"
        $state_i=$867; //@line 2095 "cPickle.c"
        var $868=$state_i; //@line 2096 "cPickle.c"
        var $869=($868)==0; //@line 2096 "cPickle.c"
        if ($869) { __label__ = 244; break; } else { __label__ = 235; break; } //@line 2096 "cPickle.c"
      case 231: // $bb37_i
        var $870=HEAP[_PyExc_AttributeError]; //@line 2100 "cPickle.c"
        var $871=_PyErr_ExceptionMatches($870); //@line 2100 "cPickle.c"
        var $872=($871)!=0; //@line 2100 "cPickle.c"
        if ($872) { __label__ = 232; break; } else { __label__ = 244; break; } //@line 2100 "cPickle.c"
      case 232: // $bb38_i
        _PyErr_Clear(); //@line 2101 "cPickle.c"
        var $873=HEAP[___dict___str]; //@line 2105 "cPickle.c"
        var $874=$args_addr_i128; //@line 2105 "cPickle.c"
        var $875=_PyObject_GetAttr($874, $873); //@line 2105 "cPickle.c"
        $state_i=$875; //@line 2105 "cPickle.c"
        var $876=$state_i; //@line 2105 "cPickle.c"
        var $877=($876)==0; //@line 2105 "cPickle.c"
        if ($877) { __label__ = 233; break; } else { __label__ = 235; break; } //@line 2105 "cPickle.c"
      case 233: // $bb39_i
        var $878=HEAP[_PyExc_AttributeError]; //@line 2106 "cPickle.c"
        var $879=_PyErr_ExceptionMatches($878); //@line 2106 "cPickle.c"
        var $880=($879)!=0; //@line 2106 "cPickle.c"
        if ($880) { __label__ = 234; break; } else { __label__ = 244; break; } //@line 2106 "cPickle.c"
      case 234: // $bb40_i
        _PyErr_Clear(); //@line 2107 "cPickle.c"
        $res_i130=0; //@line 2110 "cPickle.c"
        __label__ = 244; break; //@line 2110 "cPickle.c"
      case 235: // $bb41_i
        var $881=$state_i; //@line 2115 "cPickle.c"
        var $882=$881+4; //@line 2115 "cPickle.c"
        var $883=HEAP[$882]; //@line 2115 "cPickle.c"
        var $884=$883+84; //@line 2115 "cPickle.c"
        var $885=HEAP[$884]; //@line 2115 "cPickle.c"
        var $886=($885) & 536870912; //@line 2115 "cPickle.c"
        var $887=($886)==0; //@line 2115 "cPickle.c"
        var $888=$self_addr_i127; //@line 2116 "cPickle.c"
        var $889=$args_addr_i128; //@line 2116 "cPickle.c"
        if ($887) { __label__ = 236; break; } else { __label__ = 237; break; } //@line 2115 "cPickle.c"
      case 236: // $bb42_i
        var $890=_put2($888, $889); //@line 2116 "cPickle.c"
        var $891=($890) < 0; //@line 2116 "cPickle.c"
        if ($891) { __label__ = 244; break; } else { __label__ = 241; break; } //@line 2116 "cPickle.c"
      case 237: // $bb44_i
        $self_addr_i_i124=$888;
        $ob_addr_i_i125=$889;
        var $892=$ob_addr_i_i125; //@line 772 "cPickle.c"
        var $893=$892; //@line 772 "cPickle.c"
        var $894=HEAP[$893]; //@line 772 "cPickle.c"
        var $895=($894) <= 1; //@line 772 "cPickle.c"
        if ($895) { __label__ = 239; break; } else { __label__ = 238; break; } //@line 772 "cPickle.c"
      case 238: // $bb_i_i163
        var $896=$self_addr_i_i124; //@line 772 "cPickle.c"
        var $897=$896+44; //@line 772 "cPickle.c"
        var $898=HEAP[$897]; //@line 772 "cPickle.c"
        var $899=($898)!=0; //@line 772 "cPickle.c"
        if ($899) { __label__ = 239; break; } else { __label__ = 240; break; } //@line 772 "cPickle.c"
      case 239: // $put_exit_i167_thread
        $2=0; //@line 773 "cPickle.c"
        $retval_i_i126=0; //@line 773 "cPickle.c"
        __label__ = 241; break;
      case 240: // $put_exit_i167
        var $900=$self_addr_i_i124; //@line 775 "cPickle.c"
        var $901=$ob_addr_i_i125; //@line 775 "cPickle.c"
        var $902=_put2($900, $901); //@line 775 "cPickle.c"
        $2=$902; //@line 775 "cPickle.c"
        $retval_i_i126=$902; //@line 773 "cPickle.c"
        var $903=($902) < 0; //@line 2120 "cPickle.c"
        if ($903) { __label__ = 244; break; } else { __label__ = 241; break; } //@line 2120 "cPickle.c"
      case 241: // $bb45_i
        var $904=$self_addr_i127; //@line 2124 "cPickle.c"
        var $905=$state_i; //@line 2124 "cPickle.c"
        var $906=_save($904, $905, 0); //@line 2124 "cPickle.c"
        var $907=($906) < 0; //@line 2124 "cPickle.c"
        if ($907) { __label__ = 244; break; } else { __label__ = 242; break; } //@line 2124 "cPickle.c"
      case 242: // $bb46_i
        var $908=$self_addr_i127; //@line 2127 "cPickle.c"
        var $909=$908+48; //@line 2127 "cPickle.c"
        var $910=HEAP[$909]; //@line 2127 "cPickle.c"
        var $911=$self_addr_i127; //@line 2127 "cPickle.c"
        var $912=FUNCTION_TABLE[$910]($911, _build_10656, 1); //@line 2127 "cPickle.c"
        var $913=($912) < 0; //@line 2127 "cPickle.c"
        if ($913) { __label__ = 244; break; } else { __label__ = 243; break; } //@line 2127 "cPickle.c"
      case 243: // $bb47_i
        $res_i130=0; //@line 2130 "cPickle.c"
        __label__ = 244; break; //@line 2132 "cPickle.c"
      case 244: // $finally_i168
        var $914=$self_addr_i127; //@line 2133 "cPickle.c"
        var $915=$914+44; //@line 2133 "cPickle.c"
        var $916=HEAP[$915]; //@line 2133 "cPickle.c"
        var $917=($916)!=0; //@line 2133 "cPickle.c"
        if ($917) { __label__ = 245; break; } else { __label__ = 247; break; } //@line 2133 "cPickle.c"
      case 245: // $bb48_i
        var $918=$self_addr_i127; //@line 2133 "cPickle.c"
        var $919=$args_addr_i128; //@line 2133 "cPickle.c"
        var $920=_fast_save_leave($918, $919); //@line 2133 "cPickle.c"
        var $921=($920)==0; //@line 2133 "cPickle.c"
        if ($921) { __label__ = 246; break; } else { __label__ = 247; break; } //@line 2133 "cPickle.c"
      case 246: // $bb49_i
        $res_i130=-1; //@line 2134 "cPickle.c"
        __label__ = 247; break; //@line 2134 "cPickle.c"
      case 247: // $bb50_i
        var $922=$module_i; //@line 2136 "cPickle.c"
        var $923=($922)!=0; //@line 2136 "cPickle.c"
        if ($923) { __label__ = 248; break; } else { __label__ = 250; break; } //@line 2136 "cPickle.c"
      case 248: // $bb51_i
        var $924=$module_i; //@line 2136 "cPickle.c"
        var $925=$924; //@line 2136 "cPickle.c"
        var $926=HEAP[$925]; //@line 2136 "cPickle.c"
        var $927=($926) - 1; //@line 2136 "cPickle.c"
        var $928=$module_i; //@line 2136 "cPickle.c"
        var $929=$928; //@line 2136 "cPickle.c"
        HEAP[$929]=$927; //@line 2136 "cPickle.c"
        var $930=$module_i; //@line 2136 "cPickle.c"
        var $931=$930; //@line 2136 "cPickle.c"
        var $932=HEAP[$931]; //@line 2136 "cPickle.c"
        var $933=($932)==0; //@line 2136 "cPickle.c"
        if ($933) { __label__ = 249; break; } else { __label__ = 250; break; } //@line 2136 "cPickle.c"
      case 249: // $bb52_i
        var $934=$module_i; //@line 2136 "cPickle.c"
        var $935=$934+4; //@line 2136 "cPickle.c"
        var $936=HEAP[$935]; //@line 2136 "cPickle.c"
        var $937=$936+24; //@line 2136 "cPickle.c"
        var $938=HEAP[$937]; //@line 2136 "cPickle.c"
        var $939=$module_i; //@line 2136 "cPickle.c"
        FUNCTION_TABLE[$938]($939); //@line 2136 "cPickle.c"
        __label__ = 250; break; //@line 2136 "cPickle.c"
      case 250: // $bb53_i
        var $940=$class_i; //@line 2137 "cPickle.c"
        var $941=($940)!=0; //@line 2137 "cPickle.c"
        if ($941) { __label__ = 251; break; } else { __label__ = 253; break; } //@line 2137 "cPickle.c"
      case 251: // $bb54_i
        var $942=$class_i; //@line 2137 "cPickle.c"
        var $943=$942; //@line 2137 "cPickle.c"
        var $944=HEAP[$943]; //@line 2137 "cPickle.c"
        var $945=($944) - 1; //@line 2137 "cPickle.c"
        var $946=$class_i; //@line 2137 "cPickle.c"
        var $947=$946; //@line 2137 "cPickle.c"
        HEAP[$947]=$945; //@line 2137 "cPickle.c"
        var $948=$class_i; //@line 2137 "cPickle.c"
        var $949=$948; //@line 2137 "cPickle.c"
        var $950=HEAP[$949]; //@line 2137 "cPickle.c"
        var $951=($950)==0; //@line 2137 "cPickle.c"
        if ($951) { __label__ = 252; break; } else { __label__ = 253; break; } //@line 2137 "cPickle.c"
      case 252: // $bb55_i
        var $952=$class_i; //@line 2137 "cPickle.c"
        var $953=$952+4; //@line 2137 "cPickle.c"
        var $954=HEAP[$953]; //@line 2137 "cPickle.c"
        var $955=$954+24; //@line 2137 "cPickle.c"
        var $956=HEAP[$955]; //@line 2137 "cPickle.c"
        var $957=$class_i; //@line 2137 "cPickle.c"
        FUNCTION_TABLE[$956]($957); //@line 2137 "cPickle.c"
        __label__ = 253; break; //@line 2137 "cPickle.c"
      case 253: // $bb56_i
        var $958=$state_i; //@line 2138 "cPickle.c"
        var $959=($958)!=0; //@line 2138 "cPickle.c"
        if ($959) { __label__ = 254; break; } else { __label__ = 256; break; } //@line 2138 "cPickle.c"
      case 254: // $bb57_i
        var $960=$state_i; //@line 2138 "cPickle.c"
        var $961=$960; //@line 2138 "cPickle.c"
        var $962=HEAP[$961]; //@line 2138 "cPickle.c"
        var $963=($962) - 1; //@line 2138 "cPickle.c"
        var $964=$state_i; //@line 2138 "cPickle.c"
        var $965=$964; //@line 2138 "cPickle.c"
        HEAP[$965]=$963; //@line 2138 "cPickle.c"
        var $966=$state_i; //@line 2138 "cPickle.c"
        var $967=$966; //@line 2138 "cPickle.c"
        var $968=HEAP[$967]; //@line 2138 "cPickle.c"
        var $969=($968)==0; //@line 2138 "cPickle.c"
        if ($969) { __label__ = 255; break; } else { __label__ = 256; break; } //@line 2138 "cPickle.c"
      case 255: // $bb58_i
        var $970=$state_i; //@line 2138 "cPickle.c"
        var $971=$970+4; //@line 2138 "cPickle.c"
        var $972=HEAP[$971]; //@line 2138 "cPickle.c"
        var $973=$972+24; //@line 2138 "cPickle.c"
        var $974=HEAP[$973]; //@line 2138 "cPickle.c"
        var $975=$state_i; //@line 2138 "cPickle.c"
        FUNCTION_TABLE[$974]($975); //@line 2138 "cPickle.c"
        __label__ = 256; break; //@line 2138 "cPickle.c"
      case 256: // $bb59_i
        var $976=$getinitargs_func_i; //@line 2139 "cPickle.c"
        var $977=($976)!=0; //@line 2139 "cPickle.c"
        if ($977) { __label__ = 257; break; } else { __label__ = 259; break; } //@line 2139 "cPickle.c"
      case 257: // $bb60_i
        var $978=$getinitargs_func_i; //@line 2139 "cPickle.c"
        var $979=$978; //@line 2139 "cPickle.c"
        var $980=HEAP[$979]; //@line 2139 "cPickle.c"
        var $981=($980) - 1; //@line 2139 "cPickle.c"
        var $982=$getinitargs_func_i; //@line 2139 "cPickle.c"
        var $983=$982; //@line 2139 "cPickle.c"
        HEAP[$983]=$981; //@line 2139 "cPickle.c"
        var $984=$getinitargs_func_i; //@line 2139 "cPickle.c"
        var $985=$984; //@line 2139 "cPickle.c"
        var $986=HEAP[$985]; //@line 2139 "cPickle.c"
        var $987=($986)==0; //@line 2139 "cPickle.c"
        if ($987) { __label__ = 258; break; } else { __label__ = 259; break; } //@line 2139 "cPickle.c"
      case 258: // $bb61_i
        var $988=$getinitargs_func_i; //@line 2139 "cPickle.c"
        var $989=$988+4; //@line 2139 "cPickle.c"
        var $990=HEAP[$989]; //@line 2139 "cPickle.c"
        var $991=$990+24; //@line 2139 "cPickle.c"
        var $992=HEAP[$991]; //@line 2139 "cPickle.c"
        var $993=$getinitargs_func_i; //@line 2139 "cPickle.c"
        FUNCTION_TABLE[$992]($993); //@line 2139 "cPickle.c"
        __label__ = 259; break; //@line 2139 "cPickle.c"
      case 259: // $bb62_i
        var $994=$getstate_func_i; //@line 2140 "cPickle.c"
        var $995=($994)!=0; //@line 2140 "cPickle.c"
        if ($995) { __label__ = 260; break; } else { __label__ = 262; break; } //@line 2140 "cPickle.c"
      case 260: // $bb63_i
        var $996=$getstate_func_i; //@line 2140 "cPickle.c"
        var $997=$996; //@line 2140 "cPickle.c"
        var $998=HEAP[$997]; //@line 2140 "cPickle.c"
        var $999=($998) - 1; //@line 2140 "cPickle.c"
        var $1000=$getstate_func_i; //@line 2140 "cPickle.c"
        var $1001=$1000; //@line 2140 "cPickle.c"
        HEAP[$1001]=$999; //@line 2140 "cPickle.c"
        var $1002=$getstate_func_i; //@line 2140 "cPickle.c"
        var $1003=$1002; //@line 2140 "cPickle.c"
        var $1004=HEAP[$1003]; //@line 2140 "cPickle.c"
        var $1005=($1004)==0; //@line 2140 "cPickle.c"
        if ($1005) { __label__ = 261; break; } else { __label__ = 262; break; } //@line 2140 "cPickle.c"
      case 261: // $bb64_i
        var $1006=$getstate_func_i; //@line 2140 "cPickle.c"
        var $1007=$1006+4; //@line 2140 "cPickle.c"
        var $1008=HEAP[$1007]; //@line 2140 "cPickle.c"
        var $1009=$1008+24; //@line 2140 "cPickle.c"
        var $1010=HEAP[$1009]; //@line 2140 "cPickle.c"
        var $1011=$getstate_func_i; //@line 2140 "cPickle.c"
        FUNCTION_TABLE[$1010]($1011); //@line 2140 "cPickle.c"
        __label__ = 262; break; //@line 2140 "cPickle.c"
      case 262: // $bb65_i
        var $1012=$class_args_i; //@line 2141 "cPickle.c"
        var $1013=($1012)!=0; //@line 2141 "cPickle.c"
        if ($1013) { __label__ = 263; break; } else { __label__ = 265; break; } //@line 2141 "cPickle.c"
      case 263: // $bb66_i
        var $1014=$class_args_i; //@line 2141 "cPickle.c"
        var $1015=$1014; //@line 2141 "cPickle.c"
        var $1016=HEAP[$1015]; //@line 2141 "cPickle.c"
        var $1017=($1016) - 1; //@line 2141 "cPickle.c"
        var $1018=$class_args_i; //@line 2141 "cPickle.c"
        var $1019=$1018; //@line 2141 "cPickle.c"
        HEAP[$1019]=$1017; //@line 2141 "cPickle.c"
        var $1020=$class_args_i; //@line 2141 "cPickle.c"
        var $1021=$1020; //@line 2141 "cPickle.c"
        var $1022=HEAP[$1021]; //@line 2141 "cPickle.c"
        var $1023=($1022)==0; //@line 2141 "cPickle.c"
        if ($1023) { __label__ = 264; break; } else { __label__ = 265; break; } //@line 2141 "cPickle.c"
      case 264: // $bb67_i
        var $1024=$class_args_i; //@line 2141 "cPickle.c"
        var $1025=$1024+4; //@line 2141 "cPickle.c"
        var $1026=HEAP[$1025]; //@line 2141 "cPickle.c"
        var $1027=$1026+24; //@line 2141 "cPickle.c"
        var $1028=HEAP[$1027]; //@line 2141 "cPickle.c"
        var $1029=$class_args_i; //@line 2141 "cPickle.c"
        FUNCTION_TABLE[$1028]($1029); //@line 2141 "cPickle.c"
        __label__ = 265; break; //@line 2141 "cPickle.c"
      case 265: // $save_inst_exit
        var $1030=$res_i130; //@line 2143 "cPickle.c"
        $3=$1030; //@line 2143 "cPickle.c"
        var $1031=$3; //@line 2143 "cPickle.c"
        $retval_i129=$1031; //@line 2143 "cPickle.c"
        var $retval69_i=$retval_i129; //@line 2143 "cPickle.c"
        $res=$retval69_i; //@line 2662 "cPickle.c"
        __label__ = 404; break; //@line 2662 "cPickle.c"
      case 266: // $bb59
        var $1032=$type; //@line 2668 "cPickle.c"
        var $1033=($1032)==(_PyClass_Type); //@line 2668 "cPickle.c"
        if ($1033) { __label__ = 267; break; } else { __label__ = 274; break; } //@line 2668 "cPickle.c"
      case 267: // $bb60
        var $1034=$self_addr; //@line 2669 "cPickle.c"
        var $1035=$args_addr; //@line 2669 "cPickle.c"
        var $1036=_save_global($1034, $1035, 0); //@line 2669 "cPickle.c"
        $res=$1036; //@line 2669 "cPickle.c"
        __label__ = 404; break; //@line 2669 "cPickle.c"
      case 268: // $bb62
        var $1037=$type; //@line 2675 "cPickle.c"
        var $1038=($1037)==(_PyFunction_Type); //@line 2675 "cPickle.c"
        if ($1038) { __label__ = 269; break; } else { __label__ = 274; break; } //@line 2675 "cPickle.c"
      case 269: // $bb63
        var $1039=$self_addr; //@line 2676 "cPickle.c"
        var $1040=$args_addr; //@line 2676 "cPickle.c"
        var $1041=_save_global($1039, $1040, 0); //@line 2676 "cPickle.c"
        $res=$1041; //@line 2676 "cPickle.c"
        var $1042=$res; //@line 2677 "cPickle.c"
        var $1043=($1042)!=0; //@line 2677 "cPickle.c"
        if ($1043) { __label__ = 270; break; } else { __label__ = 404; break; } //@line 2677 "cPickle.c"
      case 270: // $bb64
        var $1044=HEAP[_PickleError]; //@line 2677 "cPickle.c"
        var $1045=_PyErr_ExceptionMatches($1044); //@line 2677 "cPickle.c"
        var $1046=($1045)!=0; //@line 2677 "cPickle.c"
        if ($1046) { __label__ = 271; break; } else { __label__ = 404; break; } //@line 2677 "cPickle.c"
      case 271: // $bb65
        _PyErr_Clear(); //@line 2679 "cPickle.c"
        __label__ = 274; break; //@line 2679 "cPickle.c"
      case 272: // $bb68
        var $1047=$type; //@line 2687 "cPickle.c"
        var $1048=($1047)==(_PyCFunction_Type); //@line 2687 "cPickle.c"
        if ($1048) { __label__ = 273; break; } else { __label__ = 274; break; } //@line 2687 "cPickle.c"
      case 273: // $bb69
        var $1049=$self_addr; //@line 2688 "cPickle.c"
        var $1050=$args_addr; //@line 2688 "cPickle.c"
        var $1051=_save_global($1049, $1050, 0); //@line 2688 "cPickle.c"
        $res=$1051; //@line 2688 "cPickle.c"
        __label__ = 404; break; //@line 2688 "cPickle.c"
      case 274: // $bb70
        var $1052=$pers_save_addr; //@line 2693 "cPickle.c"
        var $1053=($1052)==0; //@line 2693 "cPickle.c"
        if ($1053) { __label__ = 275; break; } else { __label__ = 278; break; } //@line 2693 "cPickle.c"
      case 275: // $bb71
        var $1054=$self_addr; //@line 2693 "cPickle.c"
        var $1055=$1054+32; //@line 2693 "cPickle.c"
        var $1056=HEAP[$1055]; //@line 2693 "cPickle.c"
        var $1057=($1056)!=0; //@line 2693 "cPickle.c"
        if ($1057) { __label__ = 276; break; } else { __label__ = 278; break; } //@line 2693 "cPickle.c"
      case 276: // $bb72
        var $1058=$self_addr; //@line 2694 "cPickle.c"
        var $1059=$1058+32; //@line 2694 "cPickle.c"
        var $1060=HEAP[$1059]; //@line 2694 "cPickle.c"
        var $1061=$self_addr; //@line 2694 "cPickle.c"
        var $1062=$args_addr; //@line 2694 "cPickle.c"
        var $1063=_save_pers($1061, $1062, $1060); //@line 2694 "cPickle.c"
        $tmp=$1063; //@line 2694 "cPickle.c"
        var $1064=$tmp; //@line 2694 "cPickle.c"
        var $1065=($1064)!=0; //@line 2694 "cPickle.c"
        if ($1065) { __label__ = 277; break; } else { __label__ = 278; break; } //@line 2694 "cPickle.c"
      case 277: // $bb73
        var $1066=$tmp; //@line 2695 "cPickle.c"
        $res=$1066; //@line 2695 "cPickle.c"
        __label__ = 404; break; //@line 2695 "cPickle.c"
      case 278: // $bb74
        var $1067=$type; //@line 2700 "cPickle.c"
        var $1068=_PyType_IsSubtype($1067, _PyType_Type); //@line 2700 "cPickle.c"
        var $1069=($1068)!=0; //@line 2700 "cPickle.c"
        if ($1069) { __label__ = 279; break; } else { __label__ = 280; break; } //@line 2700 "cPickle.c"
      case 279: // $bb75
        var $1070=$self_addr; //@line 2701 "cPickle.c"
        var $1071=$args_addr; //@line 2701 "cPickle.c"
        var $1072=_save_global($1070, $1071, 0); //@line 2701 "cPickle.c"
        $res=$1072; //@line 2701 "cPickle.c"
        __label__ = 404; break; //@line 2701 "cPickle.c"
      case 280: // $bb76
        var $1073=$type; //@line 2709 "cPickle.c"
        var $1074=$1073; //@line 2709 "cPickle.c"
        var $1075=HEAP[_dispatch_table]; //@line 2709 "cPickle.c"
        var $1076=_PyDict_GetItem($1075, $1074); //@line 2709 "cPickle.c"
        $__reduce__=$1076; //@line 2709 "cPickle.c"
        var $1077=$__reduce__; //@line 2710 "cPickle.c"
        var $1078=($1077)!=0; //@line 2710 "cPickle.c"
        if ($1078) { __label__ = 281; break; } else { __label__ = 294; break; } //@line 2710 "cPickle.c"
      case 281: // $bb77
        var $1079=$__reduce__; //@line 2711 "cPickle.c"
        var $1080=$1079; //@line 2711 "cPickle.c"
        var $1081=HEAP[$1080]; //@line 2711 "cPickle.c"
        var $1082=($1081) + 1; //@line 2711 "cPickle.c"
        var $1083=$__reduce__; //@line 2711 "cPickle.c"
        var $1084=$1083; //@line 2711 "cPickle.c"
        HEAP[$1084]=$1082; //@line 2711 "cPickle.c"
        var $1085=$args_addr; //@line 2712 "cPickle.c"
        var $1086=$1085; //@line 2712 "cPickle.c"
        var $1087=HEAP[$1086]; //@line 2712 "cPickle.c"
        var $1088=($1087) + 1; //@line 2712 "cPickle.c"
        var $1089=$args_addr; //@line 2712 "cPickle.c"
        var $1090=$1089; //@line 2712 "cPickle.c"
        HEAP[$1090]=$1088; //@line 2712 "cPickle.c"
        var $1091=$self_addr; //@line 2713 "cPickle.c"
        var $1092=$1091+24; //@line 2713 "cPickle.c"
        var $1093=HEAP[$1092]; //@line 2713 "cPickle.c"
        var $1094=($1093)!=0; //@line 2713 "cPickle.c"
        if ($1094) { __label__ = 283; break; } else { __label__ = 282; break; } //@line 2713 "cPickle.c"
      case 282: // $bb78
        var $1095=_PyTuple_New(1); //@line 2713 "cPickle.c"
        var $1096=$self_addr; //@line 2713 "cPickle.c"
        var $1097=$1096+24; //@line 2713 "cPickle.c"
        HEAP[$1097]=$1095; //@line 2713 "cPickle.c"
        var $1098=$self_addr; //@line 2713 "cPickle.c"
        var $1099=$1098+24; //@line 2713 "cPickle.c"
        var $1100=HEAP[$1099]; //@line 2713 "cPickle.c"
        var $1101=($1100)!=0; //@line 2713 "cPickle.c"
        if ($1101) { __label__ = 283; break; } else { __label__ = 287; break; } //@line 2713 "cPickle.c"
      case 283: // $bb79
        var $1102=$self_addr; //@line 2713 "cPickle.c"
        var $1103=$1102+24; //@line 2713 "cPickle.c"
        var $1104=HEAP[$1103]; //@line 2713 "cPickle.c"
        var $1105=$1104; //@line 2713 "cPickle.c"
        var $1106=$1105+12; //@line 2713 "cPickle.c"
        var $1107=$1106; //@line 2713 "cPickle.c"
        var $1108=HEAP[$1107]; //@line 2713 "cPickle.c"
        var $1109=($1108)!=0; //@line 2713 "cPickle.c"
        if ($1109) { __label__ = 284; break; } else { __label__ = 286; break; } //@line 2713 "cPickle.c"
      case 284: // $bb80
        var $1110=$self_addr; //@line 2713 "cPickle.c"
        var $1111=$1110+24; //@line 2713 "cPickle.c"
        var $1112=HEAP[$1111]; //@line 2713 "cPickle.c"
        var $1113=$1112; //@line 2713 "cPickle.c"
        var $1114=$1113+12; //@line 2713 "cPickle.c"
        var $1115=$1114; //@line 2713 "cPickle.c"
        var $1116=HEAP[$1115]; //@line 2713 "cPickle.c"
        var $1117=$1116; //@line 2713 "cPickle.c"
        var $1118=HEAP[$1117]; //@line 2713 "cPickle.c"
        var $1119=($1118) - 1; //@line 2713 "cPickle.c"
        var $1120=$1116; //@line 2713 "cPickle.c"
        HEAP[$1120]=$1119; //@line 2713 "cPickle.c"
        var $1121=$1116; //@line 2713 "cPickle.c"
        var $1122=HEAP[$1121]; //@line 2713 "cPickle.c"
        var $1123=($1122)==0; //@line 2713 "cPickle.c"
        if ($1123) { __label__ = 285; break; } else { __label__ = 286; break; } //@line 2713 "cPickle.c"
      case 285: // $bb81
        var $1124=$self_addr; //@line 2713 "cPickle.c"
        var $1125=$1124+24; //@line 2713 "cPickle.c"
        var $1126=HEAP[$1125]; //@line 2713 "cPickle.c"
        var $1127=$1126; //@line 2713 "cPickle.c"
        var $1128=$1127+12; //@line 2713 "cPickle.c"
        var $1129=$1128; //@line 2713 "cPickle.c"
        var $1130=HEAP[$1129]; //@line 2713 "cPickle.c"
        var $1131=$1130+4; //@line 2713 "cPickle.c"
        var $1132=HEAP[$1131]; //@line 2713 "cPickle.c"
        var $1133=$1132+24; //@line 2713 "cPickle.c"
        var $1134=HEAP[$1133]; //@line 2713 "cPickle.c"
        var $1135=$self_addr; //@line 2713 "cPickle.c"
        var $1136=$1135+24; //@line 2713 "cPickle.c"
        var $1137=HEAP[$1136]; //@line 2713 "cPickle.c"
        var $1138=$1137; //@line 2713 "cPickle.c"
        var $1139=$1138+12; //@line 2713 "cPickle.c"
        var $1140=$1139; //@line 2713 "cPickle.c"
        var $1141=HEAP[$1140]; //@line 2713 "cPickle.c"
        FUNCTION_TABLE[$1134]($1141); //@line 2713 "cPickle.c"
        __label__ = 286; break; //@line 2713 "cPickle.c"
      case 286: // $bb82
        var $1142=$self_addr; //@line 2713 "cPickle.c"
        var $1143=$1142+24; //@line 2713 "cPickle.c"
        var $1144=HEAP[$1143]; //@line 2713 "cPickle.c"
        var $1145=$1144; //@line 2713 "cPickle.c"
        var $1146=$1145+12; //@line 2713 "cPickle.c"
        var $1147=$1146; //@line 2713 "cPickle.c"
        var $1148=$args_addr; //@line 2713 "cPickle.c"
        HEAP[$1147]=$1148; //@line 2713 "cPickle.c"
        __label__ = 289; break; //@line 2713 "cPickle.c"
      case 287: // $bb83
        var $1149=$args_addr; //@line 2713 "cPickle.c"
        var $1150=$1149; //@line 2713 "cPickle.c"
        var $1151=HEAP[$1150]; //@line 2713 "cPickle.c"
        var $1152=($1151) - 1; //@line 2713 "cPickle.c"
        var $1153=$args_addr; //@line 2713 "cPickle.c"
        var $1154=$1153; //@line 2713 "cPickle.c"
        HEAP[$1154]=$1152; //@line 2713 "cPickle.c"
        var $1155=$args_addr; //@line 2713 "cPickle.c"
        var $1156=$1155; //@line 2713 "cPickle.c"
        var $1157=HEAP[$1156]; //@line 2713 "cPickle.c"
        var $1158=($1157)==0; //@line 2713 "cPickle.c"
        if ($1158) { __label__ = 288; break; } else { __label__ = 289; break; } //@line 2713 "cPickle.c"
      case 288: // $bb84
        var $1159=$args_addr; //@line 2713 "cPickle.c"
        var $1160=$1159+4; //@line 2713 "cPickle.c"
        var $1161=HEAP[$1160]; //@line 2713 "cPickle.c"
        var $1162=$1161+24; //@line 2713 "cPickle.c"
        var $1163=HEAP[$1162]; //@line 2713 "cPickle.c"
        var $1164=$args_addr; //@line 2713 "cPickle.c"
        FUNCTION_TABLE[$1163]($1164); //@line 2713 "cPickle.c"
        __label__ = 289; break; //@line 2713 "cPickle.c"
      case 289: // $bb85
        var $1165=$self_addr; //@line 2714 "cPickle.c"
        var $1166=$1165+24; //@line 2714 "cPickle.c"
        var $1167=HEAP[$1166]; //@line 2714 "cPickle.c"
        var $1168=($1167)!=0; //@line 2714 "cPickle.c"
        if ($1168) { __label__ = 290; break; } else { __label__ = 313; break; } //@line 2714 "cPickle.c"
      case 290: // $bb86
        var $1169=$self_addr; //@line 2715 "cPickle.c"
        var $1170=$1169+24; //@line 2715 "cPickle.c"
        var $1171=HEAP[$1170]; //@line 2715 "cPickle.c"
        var $1172=$__reduce__; //@line 2715 "cPickle.c"
        var $1173=_PyObject_Call($1172, $1171, 0); //@line 2715 "cPickle.c"
        $t=$1173; //@line 2715 "cPickle.c"
        var $1174=$self_addr; //@line 2716 "cPickle.c"
        var $1175=$1174+24; //@line 2716 "cPickle.c"
        var $1176=HEAP[$1175]; //@line 2716 "cPickle.c"
        var $1177=$1176; //@line 2716 "cPickle.c"
        var $1178=HEAP[$1177]; //@line 2716 "cPickle.c"
        var $1179=($1178) > 1; //@line 2716 "cPickle.c"
        if ($1179) { __label__ = 291; break; } else { __label__ = 313; break; } //@line 2716 "cPickle.c"
      case 291: // $bb87
        var $1180=$self_addr; //@line 2716 "cPickle.c"
        var $1181=$1180+24; //@line 2716 "cPickle.c"
        var $1182=HEAP[$1181]; //@line 2716 "cPickle.c"
        var $1183=$1182; //@line 2716 "cPickle.c"
        var $1184=HEAP[$1183]; //@line 2716 "cPickle.c"
        var $1185=($1184) - 1; //@line 2716 "cPickle.c"
        var $1186=$1182; //@line 2716 "cPickle.c"
        HEAP[$1186]=$1185; //@line 2716 "cPickle.c"
        var $1187=$1182; //@line 2716 "cPickle.c"
        var $1188=HEAP[$1187]; //@line 2716 "cPickle.c"
        var $1189=($1188)==0; //@line 2716 "cPickle.c"
        if ($1189) { __label__ = 292; break; } else { __label__ = 293; break; } //@line 2716 "cPickle.c"
      case 292: // $bb88
        var $1190=$self_addr; //@line 2716 "cPickle.c"
        var $1191=$1190+24; //@line 2716 "cPickle.c"
        var $1192=HEAP[$1191]; //@line 2716 "cPickle.c"
        var $1193=$1192+4; //@line 2716 "cPickle.c"
        var $1194=HEAP[$1193]; //@line 2716 "cPickle.c"
        var $1195=$1194+24; //@line 2716 "cPickle.c"
        var $1196=HEAP[$1195]; //@line 2716 "cPickle.c"
        var $1197=$self_addr; //@line 2716 "cPickle.c"
        var $1198=$1197+24; //@line 2716 "cPickle.c"
        var $1199=HEAP[$1198]; //@line 2716 "cPickle.c"
        FUNCTION_TABLE[$1196]($1199); //@line 2716 "cPickle.c"
        __label__ = 293; break; //@line 2716 "cPickle.c"
      case 293: // $bb89
        var $1200=$self_addr; //@line 2716 "cPickle.c"
        var $1201=$1200+24; //@line 2716 "cPickle.c"
        HEAP[$1201]=0; //@line 2716 "cPickle.c"
        __label__ = 313; break; //@line 2716 "cPickle.c"
      case 294: // $bb91
        var $1202=HEAP[___reduce_ex___str]; //@line 2721 "cPickle.c"
        var $1203=$args_addr; //@line 2721 "cPickle.c"
        var $1204=_PyObject_GetAttr($1203, $1202); //@line 2721 "cPickle.c"
        $__reduce__=$1204; //@line 2721 "cPickle.c"
        var $1205=$__reduce__; //@line 2722 "cPickle.c"
        var $1206=($1205)!=0; //@line 2722 "cPickle.c"
        if ($1206) { __label__ = 295; break; } else { __label__ = 309; break; } //@line 2722 "cPickle.c"
      case 295: // $bb92
        var $1207=$self_addr; //@line 2723 "cPickle.c"
        var $1208=$1207+36; //@line 2723 "cPickle.c"
        var $1209=HEAP[$1208]; //@line 2723 "cPickle.c"
        var $1210=_PyInt_FromLong($1209); //@line 2723 "cPickle.c"
        $t=$1210; //@line 2723 "cPickle.c"
        var $1211=$t; //@line 2724 "cPickle.c"
        var $1212=($1211)!=0; //@line 2724 "cPickle.c"
        if ($1212) { __label__ = 296; break; } else { __label__ = 404; break; } //@line 2724 "cPickle.c"
      case 296: // $bb93
        var $1213=$self_addr; //@line 2725 "cPickle.c"
        var $1214=$1213+24; //@line 2725 "cPickle.c"
        var $1215=HEAP[$1214]; //@line 2725 "cPickle.c"
        var $1216=($1215)!=0; //@line 2725 "cPickle.c"
        if ($1216) { __label__ = 298; break; } else { __label__ = 297; break; } //@line 2725 "cPickle.c"
      case 297: // $bb94
        var $1217=_PyTuple_New(1); //@line 2725 "cPickle.c"
        var $1218=$self_addr; //@line 2725 "cPickle.c"
        var $1219=$1218+24; //@line 2725 "cPickle.c"
        HEAP[$1219]=$1217; //@line 2725 "cPickle.c"
        var $1220=$self_addr; //@line 2725 "cPickle.c"
        var $1221=$1220+24; //@line 2725 "cPickle.c"
        var $1222=HEAP[$1221]; //@line 2725 "cPickle.c"
        var $1223=($1222)!=0; //@line 2725 "cPickle.c"
        if ($1223) { __label__ = 298; break; } else { __label__ = 302; break; } //@line 2725 "cPickle.c"
      case 298: // $bb95
        var $1224=$self_addr; //@line 2725 "cPickle.c"
        var $1225=$1224+24; //@line 2725 "cPickle.c"
        var $1226=HEAP[$1225]; //@line 2725 "cPickle.c"
        var $1227=$1226; //@line 2725 "cPickle.c"
        var $1228=$1227+12; //@line 2725 "cPickle.c"
        var $1229=$1228; //@line 2725 "cPickle.c"
        var $1230=HEAP[$1229]; //@line 2725 "cPickle.c"
        var $1231=($1230)!=0; //@line 2725 "cPickle.c"
        if ($1231) { __label__ = 299; break; } else { __label__ = 301; break; } //@line 2725 "cPickle.c"
      case 299: // $bb96
        var $1232=$self_addr; //@line 2725 "cPickle.c"
        var $1233=$1232+24; //@line 2725 "cPickle.c"
        var $1234=HEAP[$1233]; //@line 2725 "cPickle.c"
        var $1235=$1234; //@line 2725 "cPickle.c"
        var $1236=$1235+12; //@line 2725 "cPickle.c"
        var $1237=$1236; //@line 2725 "cPickle.c"
        var $1238=HEAP[$1237]; //@line 2725 "cPickle.c"
        var $1239=$1238; //@line 2725 "cPickle.c"
        var $1240=HEAP[$1239]; //@line 2725 "cPickle.c"
        var $1241=($1240) - 1; //@line 2725 "cPickle.c"
        var $1242=$1238; //@line 2725 "cPickle.c"
        HEAP[$1242]=$1241; //@line 2725 "cPickle.c"
        var $1243=$1238; //@line 2725 "cPickle.c"
        var $1244=HEAP[$1243]; //@line 2725 "cPickle.c"
        var $1245=($1244)==0; //@line 2725 "cPickle.c"
        if ($1245) { __label__ = 300; break; } else { __label__ = 301; break; } //@line 2725 "cPickle.c"
      case 300: // $bb97
        var $1246=$self_addr; //@line 2725 "cPickle.c"
        var $1247=$1246+24; //@line 2725 "cPickle.c"
        var $1248=HEAP[$1247]; //@line 2725 "cPickle.c"
        var $1249=$1248; //@line 2725 "cPickle.c"
        var $1250=$1249+12; //@line 2725 "cPickle.c"
        var $1251=$1250; //@line 2725 "cPickle.c"
        var $1252=HEAP[$1251]; //@line 2725 "cPickle.c"
        var $1253=$1252+4; //@line 2725 "cPickle.c"
        var $1254=HEAP[$1253]; //@line 2725 "cPickle.c"
        var $1255=$1254+24; //@line 2725 "cPickle.c"
        var $1256=HEAP[$1255]; //@line 2725 "cPickle.c"
        var $1257=$self_addr; //@line 2725 "cPickle.c"
        var $1258=$1257+24; //@line 2725 "cPickle.c"
        var $1259=HEAP[$1258]; //@line 2725 "cPickle.c"
        var $1260=$1259; //@line 2725 "cPickle.c"
        var $1261=$1260+12; //@line 2725 "cPickle.c"
        var $1262=$1261; //@line 2725 "cPickle.c"
        var $1263=HEAP[$1262]; //@line 2725 "cPickle.c"
        FUNCTION_TABLE[$1256]($1263); //@line 2725 "cPickle.c"
        __label__ = 301; break; //@line 2725 "cPickle.c"
      case 301: // $bb98
        var $1264=$self_addr; //@line 2725 "cPickle.c"
        var $1265=$1264+24; //@line 2725 "cPickle.c"
        var $1266=HEAP[$1265]; //@line 2725 "cPickle.c"
        var $1267=$1266; //@line 2725 "cPickle.c"
        var $1268=$1267+12; //@line 2725 "cPickle.c"
        var $1269=$1268; //@line 2725 "cPickle.c"
        var $1270=$t; //@line 2725 "cPickle.c"
        HEAP[$1269]=$1270; //@line 2725 "cPickle.c"
        __label__ = 304; break; //@line 2725 "cPickle.c"
      case 302: // $bb99
        var $1271=$t; //@line 2725 "cPickle.c"
        var $1272=$1271; //@line 2725 "cPickle.c"
        var $1273=HEAP[$1272]; //@line 2725 "cPickle.c"
        var $1274=($1273) - 1; //@line 2725 "cPickle.c"
        var $1275=$t; //@line 2725 "cPickle.c"
        var $1276=$1275; //@line 2725 "cPickle.c"
        HEAP[$1276]=$1274; //@line 2725 "cPickle.c"
        var $1277=$t; //@line 2725 "cPickle.c"
        var $1278=$1277; //@line 2725 "cPickle.c"
        var $1279=HEAP[$1278]; //@line 2725 "cPickle.c"
        var $1280=($1279)==0; //@line 2725 "cPickle.c"
        if ($1280) { __label__ = 303; break; } else { __label__ = 304; break; } //@line 2725 "cPickle.c"
      case 303: // $bb100
        var $1281=$t; //@line 2725 "cPickle.c"
        var $1282=$1281+4; //@line 2725 "cPickle.c"
        var $1283=HEAP[$1282]; //@line 2725 "cPickle.c"
        var $1284=$1283+24; //@line 2725 "cPickle.c"
        var $1285=HEAP[$1284]; //@line 2725 "cPickle.c"
        var $1286=$t; //@line 2725 "cPickle.c"
        FUNCTION_TABLE[$1285]($1286); //@line 2725 "cPickle.c"
        __label__ = 304; break; //@line 2725 "cPickle.c"
      case 304: // $bb101
        $t=0; //@line 2726 "cPickle.c"
        var $1287=$self_addr; //@line 2727 "cPickle.c"
        var $1288=$1287+24; //@line 2727 "cPickle.c"
        var $1289=HEAP[$1288]; //@line 2727 "cPickle.c"
        var $1290=($1289)!=0; //@line 2727 "cPickle.c"
        if ($1290) { __label__ = 305; break; } else { __label__ = 404; break; } //@line 2727 "cPickle.c"
      case 305: // $bb102
        var $1291=$self_addr; //@line 2728 "cPickle.c"
        var $1292=$1291+24; //@line 2728 "cPickle.c"
        var $1293=HEAP[$1292]; //@line 2728 "cPickle.c"
        var $1294=$__reduce__; //@line 2728 "cPickle.c"
        var $1295=_PyObject_Call($1294, $1293, 0); //@line 2728 "cPickle.c"
        $t=$1295; //@line 2728 "cPickle.c"
        var $1296=$self_addr; //@line 2730 "cPickle.c"
        var $1297=$1296+24; //@line 2730 "cPickle.c"
        var $1298=HEAP[$1297]; //@line 2730 "cPickle.c"
        var $1299=$1298; //@line 2730 "cPickle.c"
        var $1300=HEAP[$1299]; //@line 2730 "cPickle.c"
        var $1301=($1300) > 1; //@line 2730 "cPickle.c"
        if ($1301) { __label__ = 306; break; } else { __label__ = 313; break; } //@line 2730 "cPickle.c"
      case 306: // $bb103
        var $1302=$self_addr; //@line 2730 "cPickle.c"
        var $1303=$1302+24; //@line 2730 "cPickle.c"
        var $1304=HEAP[$1303]; //@line 2730 "cPickle.c"
        var $1305=$1304; //@line 2730 "cPickle.c"
        var $1306=HEAP[$1305]; //@line 2730 "cPickle.c"
        var $1307=($1306) - 1; //@line 2730 "cPickle.c"
        var $1308=$1304; //@line 2730 "cPickle.c"
        HEAP[$1308]=$1307; //@line 2730 "cPickle.c"
        var $1309=$1304; //@line 2730 "cPickle.c"
        var $1310=HEAP[$1309]; //@line 2730 "cPickle.c"
        var $1311=($1310)==0; //@line 2730 "cPickle.c"
        if ($1311) { __label__ = 307; break; } else { __label__ = 308; break; } //@line 2730 "cPickle.c"
      case 307: // $bb104
        var $1312=$self_addr; //@line 2730 "cPickle.c"
        var $1313=$1312+24; //@line 2730 "cPickle.c"
        var $1314=HEAP[$1313]; //@line 2730 "cPickle.c"
        var $1315=$1314+4; //@line 2730 "cPickle.c"
        var $1316=HEAP[$1315]; //@line 2730 "cPickle.c"
        var $1317=$1316+24; //@line 2730 "cPickle.c"
        var $1318=HEAP[$1317]; //@line 2730 "cPickle.c"
        var $1319=$self_addr; //@line 2730 "cPickle.c"
        var $1320=$1319+24; //@line 2730 "cPickle.c"
        var $1321=HEAP[$1320]; //@line 2730 "cPickle.c"
        FUNCTION_TABLE[$1318]($1321); //@line 2730 "cPickle.c"
        __label__ = 308; break; //@line 2730 "cPickle.c"
      case 308: // $bb105
        var $1322=$self_addr; //@line 2730 "cPickle.c"
        var $1323=$1322+24; //@line 2730 "cPickle.c"
        HEAP[$1323]=0; //@line 2730 "cPickle.c"
        __label__ = 313; break; //@line 2730 "cPickle.c"
      case 309: // $bb107
        var $1324=HEAP[_PyExc_AttributeError]; //@line 2735 "cPickle.c"
        var $1325=_PyErr_ExceptionMatches($1324); //@line 2735 "cPickle.c"
        var $1326=($1325)!=0; //@line 2735 "cPickle.c"
        if ($1326) { __label__ = 310; break; } else { __label__ = 404; break; } //@line 2735 "cPickle.c"
      case 310: // $bb108
        _PyErr_Clear(); //@line 2736 "cPickle.c"
        var $1327=HEAP[___reduce___str]; //@line 2740 "cPickle.c"
        var $1328=$args_addr; //@line 2740 "cPickle.c"
        var $1329=_PyObject_GetAttr($1328, $1327); //@line 2740 "cPickle.c"
        $__reduce__=$1329; //@line 2740 "cPickle.c"
        var $1330=$__reduce__; //@line 2741 "cPickle.c"
        var $1331=($1330)!=0; //@line 2741 "cPickle.c"
        if ($1331) { __label__ = 311; break; } else { __label__ = 312; break; } //@line 2741 "cPickle.c"
      case 311: // $bb109
        var $1332=HEAP[_empty_tuple]; //@line 2742 "cPickle.c"
        var $1333=$__reduce__; //@line 2742 "cPickle.c"
        var $1334=_PyObject_Call($1333, $1332, 0); //@line 2742 "cPickle.c"
        $t=$1334; //@line 2742 "cPickle.c"
        __lastLabel__ = 311; __label__ = 314; break; //@line 2742 "cPickle.c"
      case 312: // $bb110
        var $1335=HEAP[_UnpickleableError]; //@line 2746 "cPickle.c"
        var $1336=$args_addr; //@line 2746 "cPickle.c"
        _PyErr_SetObject($1335, $1336); //@line 2746 "cPickle.c"
        __label__ = 404; break; //@line 2746 "cPickle.c"
      case 313: // $bb111thread_pre_split
        var $_pr=$t;
        __lastLabel__ = 313; __label__ = 314; break;
      case 314: // $bb111
        var $1337=__lastLabel__ == 313 ? $_pr : ($1334);
        var $1338=($1337)==0; //@line 2752 "cPickle.c"
        if ($1338) { __label__ = 404; break; } else { __label__ = 315; break; } //@line 2752 "cPickle.c"
      case 315: // $bb112
        var $1339=$t; //@line 2755 "cPickle.c"
        var $1340=$1339+4; //@line 2755 "cPickle.c"
        var $1341=HEAP[$1340]; //@line 2755 "cPickle.c"
        var $1342=$1341+84; //@line 2755 "cPickle.c"
        var $1343=HEAP[$1342]; //@line 2755 "cPickle.c"
        var $1344=($1343) & 134217728; //@line 2755 "cPickle.c"
        var $1345=($1344)!=0; //@line 2755 "cPickle.c"
        if ($1345) { __label__ = 316; break; } else { __label__ = 317; break; } //@line 2755 "cPickle.c"
      case 316: // $bb113
        var $1346=$self_addr; //@line 2756 "cPickle.c"
        var $1347=$args_addr; //@line 2756 "cPickle.c"
        var $1348=$t; //@line 2756 "cPickle.c"
        var $1349=_save_global($1346, $1347, $1348); //@line 2756 "cPickle.c"
        $res=$1349; //@line 2756 "cPickle.c"
        __label__ = 404; break; //@line 2756 "cPickle.c"
      case 317: // $bb114
        var $1350=$t; //@line 2760 "cPickle.c"
        var $1351=$1350+4; //@line 2760 "cPickle.c"
        var $1352=HEAP[$1351]; //@line 2760 "cPickle.c"
        var $1353=$1352+84; //@line 2760 "cPickle.c"
        var $1354=HEAP[$1353]; //@line 2760 "cPickle.c"
        var $1355=($1354) & 67108864; //@line 2760 "cPickle.c"
        var $1356=($1355)==0; //@line 2760 "cPickle.c"
        if ($1356) { __label__ = 318; break; } else { __label__ = 319; break; } //@line 2760 "cPickle.c"
      case 318: // $bb115
        var $1357=HEAP[_PicklingError]; //@line 2761 "cPickle.c"
        var $1358=$__reduce__; //@line 2761 "cPickle.c"
        _cPickle_ErrFormat($1357, __str47, __str36, allocate([$1358,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2761 "cPickle.c"
        __label__ = 404; break; //@line 2761 "cPickle.c"
      case 319: // $bb116
        var $1359=$self_addr; //@line 2767 "cPickle.c"
        var $1360=$t; //@line 2767 "cPickle.c"
        var $1361=$__reduce__; //@line 2767 "cPickle.c"
        var $1362=$args_addr; //@line 2767 "cPickle.c"
        $self_addr_i172=$1359;
        $args_addr_i173=$1360;
        $fn_addr_i=$1361;
        $ob_addr_i=$1362;
        HEAP[$state_i175]=0; //@line 2356 "cPickle.c"
        HEAP[$listitems_i]=__Py_NoneStruct; //@line 2357 "cPickle.c"
        HEAP[$dictitems_i]=__Py_NoneStruct; //@line 2358 "cPickle.c"
        var $1363=$self_addr_i172; //@line 2361 "cPickle.c"
        var $1364=$1363+36; //@line 2361 "cPickle.c"
        var $1365=HEAP[$1364]; //@line 2361 "cPickle.c"
        var $1366=($1365) > 1; //@line 2361 "cPickle.c"
        var $1367=($1366); //@line 2361 "cPickle.c"
        $use_newobj_i=$1367; //@line 2361 "cPickle.c"
        var $1368=$args_addr_i173; //@line 2367 "cPickle.c"
        var $1369=_PyTuple_Size($1368); //@line 2367 "cPickle.c"
        $size_i176=$1369; //@line 2367 "cPickle.c"
        var $1370=$size_i176; //@line 2368 "cPickle.c"
        var $1371=($1370) <= 1; //@line 2368 "cPickle.c"
        var $1372=$size_i176; //@line 2368 "cPickle.c"
        var $1373=($1372) > 5; //@line 2368 "cPickle.c"
        var $or_cond_i=($1371) | ($1373);
        if ($or_cond_i) { __label__ = 320; break; } else { __label__ = 321; break; } //@line 2368 "cPickle.c"
      case 320: // $bb1_i178
        var $1374=HEAP[_PicklingError]; //@line 2369 "cPickle.c"
        var $1375=$fn_addr_i; //@line 2369 "cPickle.c"
        _cPickle_ErrFormat($1374, __str35, __str36, allocate([$1375,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2369 "cPickle.c"
        $1=-1; //@line 2372 "cPickle.c"
        __label__ = 403; break; //@line 2372 "cPickle.c"
      case 321: // $bb2_i179
        var $1376=$args_addr_i173; //@line 2375 "cPickle.c"
        var $1377=_PyArg_UnpackTuple($1376, __str37, 2, 5, $callable_i, $argtup_i, $state_i175, $listitems_i, $dictitems_i); //@line 2375 "cPickle.c"
        var $1378=($1377)==0; //@line 2375 "cPickle.c"
        if ($1378) { __label__ = 322; break; } else { __label__ = 323; break; } //@line 2375 "cPickle.c"
      case 322: // $bb3_i180
        $1=-1; //@line 2381 "cPickle.c"
        __label__ = 403; break; //@line 2381 "cPickle.c"
      case 323: // $bb4_i181
        var $1379=HEAP[$argtup_i]; //@line 2383 "cPickle.c"
        var $1380=$1379+4; //@line 2383 "cPickle.c"
        var $1381=HEAP[$1380]; //@line 2383 "cPickle.c"
        var $1382=$1381+84; //@line 2383 "cPickle.c"
        var $1383=HEAP[$1382]; //@line 2383 "cPickle.c"
        var $1384=($1383) & 67108864; //@line 2383 "cPickle.c"
        var $1385=($1384)==0; //@line 2383 "cPickle.c"
        if ($1385) { __label__ = 324; break; } else { __label__ = 325; break; } //@line 2383 "cPickle.c"
      case 324: // $bb5_i182
        var $1386=HEAP[_PicklingError]; //@line 2384 "cPickle.c"
        var $1387=$fn_addr_i; //@line 2384 "cPickle.c"
        _cPickle_ErrFormat($1386, __str38, __str36, allocate([$1387,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2384 "cPickle.c"
        $1=-1; //@line 2387 "cPickle.c"
        __label__ = 403; break; //@line 2387 "cPickle.c"
      case 325: // $bb6_i183
        var $1388=HEAP[$state_i175]; //@line 2390 "cPickle.c"
        var $1389=($1388)==(__Py_NoneStruct); //@line 2390 "cPickle.c"
        if ($1389) { __label__ = 326; break; } else { __label__ = 327; break; } //@line 2390 "cPickle.c"
      case 326: // $bb7_i184
        HEAP[$state_i175]=0; //@line 2391 "cPickle.c"
        __label__ = 327; break; //@line 2391 "cPickle.c"
      case 327: // $bb8_i185
        var $1390=HEAP[$listitems_i]; //@line 2393 "cPickle.c"
        var $1391=($1390)==(__Py_NoneStruct); //@line 2393 "cPickle.c"
        if ($1391) { __label__ = 328; break; } else { __label__ = 329; break; } //@line 2393 "cPickle.c"
      case 328: // $bb9_i186
        HEAP[$listitems_i]=0; //@line 2394 "cPickle.c"
        __label__ = 333; break; //@line 2394 "cPickle.c"
      case 329: // $bb10_i187
        var $1392=HEAP[$listitems_i]; //@line 2395 "cPickle.c"
        var $1393=$1392+4; //@line 2395 "cPickle.c"
        var $1394=HEAP[$1393]; //@line 2395 "cPickle.c"
        var $1395=$1394+84; //@line 2395 "cPickle.c"
        var $1396=HEAP[$1395]; //@line 2395 "cPickle.c"
        var $1397=($1396) & 128; //@line 2395 "cPickle.c"
        var $1398=($1397)==0; //@line 2395 "cPickle.c"
        if ($1398) { __label__ = 332; break; } else { __label__ = 330; break; } //@line 2395 "cPickle.c"
      case 330: // $bb11_i188
        var $1399=HEAP[$listitems_i]; //@line 2395 "cPickle.c"
        var $1400=$1399+4; //@line 2395 "cPickle.c"
        var $1401=HEAP[$1400]; //@line 2395 "cPickle.c"
        var $1402=$1401+112; //@line 2395 "cPickle.c"
        var $1403=HEAP[$1402]; //@line 2395 "cPickle.c"
        var $1404=($1403)==0; //@line 2395 "cPickle.c"
        if ($1404) { __label__ = 332; break; } else { __label__ = 331; break; } //@line 2395 "cPickle.c"
      case 331: // $bb12_i189
        var $1405=HEAP[$listitems_i]; //@line 2395 "cPickle.c"
        var $1406=$1405+4; //@line 2395 "cPickle.c"
        var $1407=HEAP[$1406]; //@line 2395 "cPickle.c"
        var $1408=$1407+112; //@line 2395 "cPickle.c"
        var $1409=HEAP[$1408]; //@line 2395 "cPickle.c"
        var $1410=($1409)==((FUNCTION_TABLE_OFFSET + 2)); //@line 2395 "cPickle.c"
        if ($1410) { __label__ = 332; break; } else { __label__ = 333; break; } //@line 2395 "cPickle.c"
      case 332: // $bb13_i190
        var $1411=HEAP[$listitems_i]; //@line 2396 "cPickle.c"
        var $1412=$1411+4; //@line 2396 "cPickle.c"
        var $1413=HEAP[$1412]; //@line 2396 "cPickle.c"
        var $1414=$1413+12; //@line 2396 "cPickle.c"
        var $1415=HEAP[$1414]; //@line 2396 "cPickle.c"
        var $1416=HEAP[_PicklingError]; //@line 2396 "cPickle.c"
        var $1417=$fn_addr_i; //@line 2396 "cPickle.c"
        _cPickle_ErrFormat($1416, __str39, __str40, allocate([$1417,0,0,0,$1415,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 2396 "cPickle.c"
        $1=-1; //@line 2399 "cPickle.c"
        __label__ = 403; break; //@line 2399 "cPickle.c"
      case 333: // $bb14_i191
        var $1418=HEAP[$dictitems_i]; //@line 2402 "cPickle.c"
        var $1419=($1418)==(__Py_NoneStruct); //@line 2402 "cPickle.c"
        if ($1419) { __label__ = 334; break; } else { __label__ = 335; break; } //@line 2402 "cPickle.c"
      case 334: // $bb15_i192
        HEAP[$dictitems_i]=0; //@line 2403 "cPickle.c"
        __label__ = 339; break; //@line 2403 "cPickle.c"
      case 335: // $bb16_i193
        var $1420=HEAP[$dictitems_i]; //@line 2404 "cPickle.c"
        var $1421=$1420+4; //@line 2404 "cPickle.c"
        var $1422=HEAP[$1421]; //@line 2404 "cPickle.c"
        var $1423=$1422+84; //@line 2404 "cPickle.c"
        var $1424=HEAP[$1423]; //@line 2404 "cPickle.c"
        var $1425=($1424) & 128; //@line 2404 "cPickle.c"
        var $1426=($1425)==0; //@line 2404 "cPickle.c"
        if ($1426) { __label__ = 338; break; } else { __label__ = 336; break; } //@line 2404 "cPickle.c"
      case 336: // $bb17_i194
        var $1427=HEAP[$dictitems_i]; //@line 2404 "cPickle.c"
        var $1428=$1427+4; //@line 2404 "cPickle.c"
        var $1429=HEAP[$1428]; //@line 2404 "cPickle.c"
        var $1430=$1429+112; //@line 2404 "cPickle.c"
        var $1431=HEAP[$1430]; //@line 2404 "cPickle.c"
        var $1432=($1431)==0; //@line 2404 "cPickle.c"
        if ($1432) { __label__ = 338; break; } else { __label__ = 337; break; } //@line 2404 "cPickle.c"
      case 337: // $bb18_i195
        var $1433=HEAP[$dictitems_i]; //@line 2404 "cPickle.c"
        var $1434=$1433+4; //@line 2404 "cPickle.c"
        var $1435=HEAP[$1434]; //@line 2404 "cPickle.c"
        var $1436=$1435+112; //@line 2404 "cPickle.c"
        var $1437=HEAP[$1436]; //@line 2404 "cPickle.c"
        var $1438=($1437)==((FUNCTION_TABLE_OFFSET + 2)); //@line 2404 "cPickle.c"
        if ($1438) { __label__ = 338; break; } else { __label__ = 339; break; } //@line 2404 "cPickle.c"
      case 338: // $bb19_i196
        var $1439=HEAP[$dictitems_i]; //@line 2405 "cPickle.c"
        var $1440=$1439+4; //@line 2405 "cPickle.c"
        var $1441=HEAP[$1440]; //@line 2405 "cPickle.c"
        var $1442=$1441+12; //@line 2405 "cPickle.c"
        var $1443=HEAP[$1442]; //@line 2405 "cPickle.c"
        var $1444=HEAP[_PicklingError]; //@line 2405 "cPickle.c"
        var $1445=$fn_addr_i; //@line 2405 "cPickle.c"
        _cPickle_ErrFormat($1444, __str41, __str40, allocate([$1445,0,0,0,$1443,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 2405 "cPickle.c"
        $1=-1; //@line 2408 "cPickle.c"
        __label__ = 403; break; //@line 2408 "cPickle.c"
      case 339: // $bb20_i197
        var $1446=$use_newobj_i; //@line 2414 "cPickle.c"
        var $1447=($1446)!=0; //@line 2414 "cPickle.c"
        if ($1447) { __label__ = 340; break; } else { __label__ = 378; break; } //@line 2414 "cPickle.c"
      case 340: // $bb21_i198
        var $1448=HEAP[___name___str]; //@line 2415 "cPickle.c"
        var $1449=HEAP[$callable_i]; //@line 2415 "cPickle.c"
        var $1450=_PyObject_GetAttr($1449, $1448); //@line 2415 "cPickle.c"
        $temp_i=$1450; //@line 2415 "cPickle.c"
        var $1451=$temp_i; //@line 2417 "cPickle.c"
        var $1452=($1451)==0; //@line 2417 "cPickle.c"
        if ($1452) { __label__ = 341; break; } else { __label__ = 344; break; } //@line 2417 "cPickle.c"
      case 341: // $bb22_i199
        var $1453=HEAP[_PyExc_AttributeError]; //@line 2418 "cPickle.c"
        var $1454=_PyErr_ExceptionMatches($1453); //@line 2418 "cPickle.c"
        var $1455=($1454)!=0; //@line 2418 "cPickle.c"
        if ($1455) { __label__ = 342; break; } else { __label__ = 343; break; } //@line 2418 "cPickle.c"
      case 342: // $bb23_i200
        _PyErr_Clear(); //@line 2419 "cPickle.c"
        $use_newobj_i=0; //@line 2422 "cPickle.c"
        __label__ = 378; break; //@line 2422 "cPickle.c"
      case 343: // $bb24_i201
        $1=-1; //@line 2421 "cPickle.c"
        __label__ = 403; break; //@line 2421 "cPickle.c"
      case 344: // $bb25_i202
        var $1456=$temp_i; //@line 2425 "cPickle.c"
        var $1457=$1456+4; //@line 2425 "cPickle.c"
        var $1458=HEAP[$1457]; //@line 2425 "cPickle.c"
        var $1459=$1458+84; //@line 2425 "cPickle.c"
        var $1460=HEAP[$1459]; //@line 2425 "cPickle.c"
        var $1461=($1460) & 134217728; //@line 2425 "cPickle.c"
        var $1462=($1461)==0; //@line 2425 "cPickle.c"
        if ($1462) { __label__ = 347; break; } else { __label__ = 345; break; } //@line 2425 "cPickle.c"
      case 345: // $bb26_i203
        var $1463=$temp_i; //@line 2425 "cPickle.c"
        var $1464=$1463; //@line 2425 "cPickle.c"
        var $1465=$1464+20; //@line 2425 "cPickle.c"
        var $1466=$1465; //@line 2425 "cPickle.c"
        var $1467=_strcmp($1466, __str42); //@line 2425 "cPickle.c"
        var $1468=($1467)!=0; //@line 2425 "cPickle.c"
        if ($1468) { __label__ = 347; break; } else { __label__ = 346; break; } //@line 2425 "cPickle.c"
      case 346: // $bb27_i204
        $iftmp_170_i=1; //@line 2425 "cPickle.c"
        __label__ = 348; break; //@line 2425 "cPickle.c"
      case 347: // $bb28_i205
        $iftmp_170_i=0; //@line 2425 "cPickle.c"
        __label__ = 348; break; //@line 2425 "cPickle.c"
      case 348: // $bb29_i206
        var $1469=$iftmp_170_i; //@line 2425 "cPickle.c"
        $use_newobj_i=$1469; //@line 2425 "cPickle.c"
        var $1470=$temp_i; //@line 2428 "cPickle.c"
        var $1471=$1470; //@line 2428 "cPickle.c"
        var $1472=HEAP[$1471]; //@line 2428 "cPickle.c"
        var $1473=($1472) - 1; //@line 2428 "cPickle.c"
        var $1474=$temp_i; //@line 2428 "cPickle.c"
        var $1475=$1474; //@line 2428 "cPickle.c"
        HEAP[$1475]=$1473; //@line 2428 "cPickle.c"
        var $1476=$temp_i; //@line 2428 "cPickle.c"
        var $1477=$1476; //@line 2428 "cPickle.c"
        var $1478=HEAP[$1477]; //@line 2428 "cPickle.c"
        var $1479=($1478)==0; //@line 2428 "cPickle.c"
        if ($1479) { __label__ = 349; break; } else { __label__ = 350; break; } //@line 2428 "cPickle.c"
      case 349: // $bb30_i207
        var $1480=$temp_i; //@line 2428 "cPickle.c"
        var $1481=$1480+4; //@line 2428 "cPickle.c"
        var $1482=HEAP[$1481]; //@line 2428 "cPickle.c"
        var $1483=$1482+24; //@line 2428 "cPickle.c"
        var $1484=HEAP[$1483]; //@line 2428 "cPickle.c"
        var $1485=$temp_i; //@line 2428 "cPickle.c"
        FUNCTION_TABLE[$1484]($1485); //@line 2428 "cPickle.c"
        __label__ = 350; break; //@line 2428 "cPickle.c"
      case 350: // $bb31_i208
        var $_pr246=$use_newobj_i;
        var $1486=($_pr246)!=0; //@line 2431 "cPickle.c"
        if ($1486) { __label__ = 351; break; } else { __label__ = 378; break; } //@line 2431 "cPickle.c"
      case 351: // $bb32_i209
        var $1487=HEAP[$argtup_i]; //@line 2437 "cPickle.c"
        var $1488=_PyTuple_Size($1487); //@line 2437 "cPickle.c"
        $n_i=$1488; //@line 2437 "cPickle.c"
        var $1489=$n_i; //@line 2438 "cPickle.c"
        var $1490=($1489) <= 0; //@line 2438 "cPickle.c"
        if ($1490) { __label__ = 352; break; } else { __label__ = 353; break; } //@line 2438 "cPickle.c"
      case 352: // $bb33_i210
        var $1491=HEAP[_PicklingError]; //@line 2439 "cPickle.c"
        _PyErr_SetString($1491, __str43); //@line 2439 "cPickle.c"
        $1=-1; //@line 2441 "cPickle.c"
        __label__ = 403; break; //@line 2441 "cPickle.c"
      case 353: // $bb34_i211
        var $1492=HEAP[$argtup_i]; //@line 2444 "cPickle.c"
        var $1493=$1492; //@line 2444 "cPickle.c"
        var $1494=$1493+12; //@line 2444 "cPickle.c"
        var $1495=$1494; //@line 2444 "cPickle.c"
        var $1496=HEAP[$1495]; //@line 2444 "cPickle.c"
        $cls_i=$1496; //@line 2444 "cPickle.c"
        var $1497=$cls_i; //@line 2445 "cPickle.c"
        var $1498=_PyObject_HasAttrString($1497, __str44); //@line 2445 "cPickle.c"
        var $1499=($1498)==0; //@line 2445 "cPickle.c"
        if ($1499) { __label__ = 354; break; } else { __label__ = 355; break; } //@line 2445 "cPickle.c"
      case 354: // $bb35_i212
        var $1500=HEAP[_PicklingError]; //@line 2446 "cPickle.c"
        _PyErr_SetString($1500, __str45); //@line 2446 "cPickle.c"
        $1=-1; //@line 2448 "cPickle.c"
        __label__ = 403; break; //@line 2448 "cPickle.c"
      case 355: // $bb36_i
        var $1501=$ob_addr_i; //@line 2452 "cPickle.c"
        var $1502=($1501)!=0; //@line 2452 "cPickle.c"
        if ($1502) { __label__ = 356; break; } else { __label__ = 366; break; } //@line 2452 "cPickle.c"
      case 356: // $bb37_i213
        var $1503=HEAP[___class___str]; //@line 2455 "cPickle.c"
        var $1504=$ob_addr_i; //@line 2455 "cPickle.c"
        var $1505=_PyObject_GetAttr($1504, $1503); //@line 2455 "cPickle.c"
        $ob_dot_class_i=$1505; //@line 2455 "cPickle.c"
        var $1506=$ob_dot_class_i; //@line 2456 "cPickle.c"
        var $1507=($1506)==0; //@line 2456 "cPickle.c"
        if ($1507) { __label__ = 358; break; } else { __label__ = 357; break; } //@line 2456 "cPickle.c"
      case 357: // $bb41_i217_thread
        var $1508=$cls_i; //@line 2463 "cPickle.c"
        var $1509=($1506)!=($1508); //@line 2463 "cPickle.c"
        var $1510=($1509); //@line 2463 "cPickle.c"
        $i_i177=$1510; //@line 2463 "cPickle.c"
        __label__ = 361; break;
      case 358: // $bb38_i214
        var $1511=HEAP[_PyExc_AttributeError]; //@line 2457 "cPickle.c"
        var $1512=_PyErr_ExceptionMatches($1511); //@line 2457 "cPickle.c"
        var $1513=($1512)!=0; //@line 2457 "cPickle.c"
        if ($1513) { __label__ = 360; break; } else { __label__ = 359; break; } //@line 2457 "cPickle.c"
      case 359: // $bb40_i216
        $1=-1; //@line 2461 "cPickle.c"
        __label__ = 403; break; //@line 2461 "cPickle.c"
      case 360: // $bb41_i217
        _PyErr_Clear(); //@line 2459 "cPickle.c"
        var $_pr247=$ob_dot_class_i;
        var $1514=$cls_i; //@line 2463 "cPickle.c"
        var $1515=($_pr247)!=($1514); //@line 2463 "cPickle.c"
        var $1516=($1515); //@line 2463 "cPickle.c"
        $i_i177=$1516; //@line 2463 "cPickle.c"
        var $1517=($_pr247)!=0; //@line 2464 "cPickle.c"
        if ($1517) { __lastLabel__ = 360; __label__ = 361; break; } else { __lastLabel__ = 360; __label__ = 364; break; } //@line 2464 "cPickle.c"
      case 361: // $bb42_i218
        var $1518=$ob_dot_class_i; //@line 2464 "cPickle.c"
        var $1519=$1518; //@line 2464 "cPickle.c"
        var $1520=HEAP[$1519]; //@line 2464 "cPickle.c"
        var $1521=($1520) - 1; //@line 2464 "cPickle.c"
        var $1522=$ob_dot_class_i; //@line 2464 "cPickle.c"
        var $1523=$1522; //@line 2464 "cPickle.c"
        HEAP[$1523]=$1521; //@line 2464 "cPickle.c"
        var $1524=$ob_dot_class_i; //@line 2464 "cPickle.c"
        var $1525=$1524; //@line 2464 "cPickle.c"
        var $1526=HEAP[$1525]; //@line 2464 "cPickle.c"
        var $1527=($1526)==0; //@line 2464 "cPickle.c"
        if ($1527) { __label__ = 362; break; } else { __label__ = 363; break; } //@line 2464 "cPickle.c"
      case 362: // $bb43_i
        var $1528=$ob_dot_class_i; //@line 2464 "cPickle.c"
        var $1529=$1528+4; //@line 2464 "cPickle.c"
        var $1530=HEAP[$1529]; //@line 2464 "cPickle.c"
        var $1531=$1530+24; //@line 2464 "cPickle.c"
        var $1532=HEAP[$1531]; //@line 2464 "cPickle.c"
        var $1533=$ob_dot_class_i; //@line 2464 "cPickle.c"
        FUNCTION_TABLE[$1532]($1533); //@line 2464 "cPickle.c"
        __label__ = 363; break; //@line 2464 "cPickle.c"
      case 363: // $bb44_i219thread_pre_split
        var $_pr248=$i_i177;
        __lastLabel__ = 363; __label__ = 364; break;
      case 364: // $bb44_i219
        var $1534=__lastLabel__ == 363 ? $_pr248 : ($1516);
        var $1535=($1534)!=0; //@line 2465 "cPickle.c"
        if ($1535) { __label__ = 365; break; } else { __label__ = 366; break; } //@line 2465 "cPickle.c"
      case 365: // $bb45_i220
        var $1536=HEAP[_PicklingError]; //@line 2466 "cPickle.c"
        _PyErr_SetString($1536, __str46); //@line 2466 "cPickle.c"
        $1=-1; //@line 2468 "cPickle.c"
        __label__ = 403; break; //@line 2468 "cPickle.c"
      case 366: // $bb46_i221
        var $1537=$self_addr_i172; //@line 2473 "cPickle.c"
        var $1538=$cls_i; //@line 2473 "cPickle.c"
        var $1539=_save($1537, $1538, 0); //@line 2473 "cPickle.c"
        var $1540=($1539) < 0; //@line 2473 "cPickle.c"
        if ($1540) { __label__ = 367; break; } else { __label__ = 368; break; } //@line 2473 "cPickle.c"
      case 367: // $bb47_i222
        $1=-1; //@line 2474 "cPickle.c"
        __label__ = 403; break; //@line 2474 "cPickle.c"
      case 368: // $bb48_i223
        var $1541=$n_i; //@line 2476 "cPickle.c"
        var $1542=($1541) - 1; //@line 2476 "cPickle.c"
        var $1543=_PyTuple_New($1542); //@line 2476 "cPickle.c"
        $newargtup_i=$1543; //@line 2476 "cPickle.c"
        var $1544=$newargtup_i; //@line 2477 "cPickle.c"
        var $1545=($1544)==0; //@line 2477 "cPickle.c"
        if ($1545) { __label__ = 369; break; } else { __label__ = 370; break; } //@line 2477 "cPickle.c"
      case 369: // $bb49_i224
        $1=-1; //@line 2478 "cPickle.c"
        __label__ = 403; break; //@line 2478 "cPickle.c"
      case 370: // $bb50_i225
        $i_i177=1; //@line 2479 "cPickle.c"
        var $1546=$i_i177; //@line 2479 "cPickle.c"
        var $1547=$n_i; //@line 2479 "cPickle.c"
        var $1548=($1546) < ($1547); //@line 2479 "cPickle.c"
        if ($1548) { __label__ = 371; break; } else { __label__ = 372; break; } //@line 2479 "cPickle.c"
      case 371: // $bb51_i226
        var $1549=HEAP[$argtup_i]; //@line 2480 "cPickle.c"
        var $1550=$1549; //@line 2480 "cPickle.c"
        var $1551=$i_i177; //@line 2480 "cPickle.c"
        var $1552=$1550+12; //@line 2480 "cPickle.c"
        var $1553=$1552+$1551*4; //@line 2480 "cPickle.c"
        var $1554=HEAP[$1553]; //@line 2480 "cPickle.c"
        $temp52_i=$1554; //@line 2480 "cPickle.c"
        var $1555=$temp52_i; //@line 2481 "cPickle.c"
        var $1556=$1555; //@line 2481 "cPickle.c"
        var $1557=HEAP[$1556]; //@line 2481 "cPickle.c"
        var $1558=($1557) + 1; //@line 2481 "cPickle.c"
        var $1559=$temp52_i; //@line 2481 "cPickle.c"
        var $1560=$1559; //@line 2481 "cPickle.c"
        HEAP[$1560]=$1558; //@line 2481 "cPickle.c"
        var $1561=$newargtup_i; //@line 2482 "cPickle.c"
        var $1562=$1561; //@line 2482 "cPickle.c"
        var $1563=$i_i177; //@line 2482 "cPickle.c"
        var $1564=($1563) - 1; //@line 2482 "cPickle.c"
        var $1565=$1562+12; //@line 2482 "cPickle.c"
        var $1566=$1565+$1564*4; //@line 2482 "cPickle.c"
        var $1567=$temp52_i; //@line 2482 "cPickle.c"
        HEAP[$1566]=$1567; //@line 2482 "cPickle.c"
        var $1568=$i_i177; //@line 2479 "cPickle.c"
        var $1569=($1568) + 1; //@line 2479 "cPickle.c"
        $i_i177=$1569; //@line 2479 "cPickle.c"
        var $1570=$i_i177; //@line 2479 "cPickle.c"
        var $1571=$n_i; //@line 2479 "cPickle.c"
        var $1572=($1570) < ($1571); //@line 2479 "cPickle.c"
        if ($1572) { __label__ = 371; break; } else { __label__ = 372; break; } //@line 2479 "cPickle.c"
      case 372: // $bb54_i228
        var $1573=$self_addr_i172; //@line 2484 "cPickle.c"
        var $1574=$newargtup_i; //@line 2484 "cPickle.c"
        var $1575=_save($1573, $1574, 0); //@line 2484 "cPickle.c"
        $i_i177=$1575; //@line 2484 "cPickle.c"
        var $1576=$newargtup_i; //@line 2485 "cPickle.c"
        var $1577=$1576; //@line 2485 "cPickle.c"
        var $1578=HEAP[$1577]; //@line 2485 "cPickle.c"
        var $1579=($1578) - 1; //@line 2485 "cPickle.c"
        var $1580=$newargtup_i; //@line 2485 "cPickle.c"
        var $1581=$1580; //@line 2485 "cPickle.c"
        HEAP[$1581]=$1579; //@line 2485 "cPickle.c"
        var $1582=$newargtup_i; //@line 2485 "cPickle.c"
        var $1583=$1582; //@line 2485 "cPickle.c"
        var $1584=HEAP[$1583]; //@line 2485 "cPickle.c"
        var $1585=($1584)==0; //@line 2485 "cPickle.c"
        if ($1585) { __label__ = 373; break; } else { __label__ = 374; break; } //@line 2485 "cPickle.c"
      case 373: // $bb55_i229
        var $1586=$newargtup_i; //@line 2485 "cPickle.c"
        var $1587=$1586+4; //@line 2485 "cPickle.c"
        var $1588=HEAP[$1587]; //@line 2485 "cPickle.c"
        var $1589=$1588+24; //@line 2485 "cPickle.c"
        var $1590=HEAP[$1589]; //@line 2485 "cPickle.c"
        var $1591=$newargtup_i; //@line 2485 "cPickle.c"
        FUNCTION_TABLE[$1590]($1591); //@line 2485 "cPickle.c"
        __label__ = 374; break; //@line 2485 "cPickle.c"
      case 374: // $bb56_i230
        var $1592=$i_i177; //@line 2486 "cPickle.c"
        var $1593=($1592) < 0; //@line 2486 "cPickle.c"
        if ($1593) { __label__ = 375; break; } else { __label__ = 376; break; } //@line 2486 "cPickle.c"
      case 375: // $bb57_i231
        $1=-1; //@line 2487 "cPickle.c"
        __label__ = 403; break; //@line 2487 "cPickle.c"
      case 376: // $bb58_i232
        var $1594=$self_addr_i172; //@line 2490 "cPickle.c"
        var $1595=$1594+48; //@line 2490 "cPickle.c"
        var $1596=HEAP[$1595]; //@line 2490 "cPickle.c"
        var $1597=$self_addr_i172; //@line 2490 "cPickle.c"
        var $1598=FUNCTION_TABLE[$1596]($1597, _newobj_11120, 1); //@line 2490 "cPickle.c"
        var $1599=($1598) < 0; //@line 2490 "cPickle.c"
        if ($1599) { __label__ = 377; break; } else { __label__ = 382; break; } //@line 2490 "cPickle.c"
      case 377: // $bb59_i233
        $1=-1; //@line 2491 "cPickle.c"
        __label__ = 403; break; //@line 2491 "cPickle.c"
      case 378: // $bb61_i234
        var $1600=HEAP[$callable_i]; //@line 2495 "cPickle.c"
        var $1601=$self_addr_i172; //@line 2495 "cPickle.c"
        var $1602=_save($1601, $1600, 0); //@line 2495 "cPickle.c"
        var $1603=($1602) < 0; //@line 2495 "cPickle.c"
        if ($1603) { __label__ = 381; break; } else { __label__ = 379; break; } //@line 2495 "cPickle.c"
      case 379: // $bb62_i235
        var $1604=HEAP[$argtup_i]; //@line 2495 "cPickle.c"
        var $1605=$self_addr_i172; //@line 2495 "cPickle.c"
        var $1606=_save($1605, $1604, 0); //@line 2495 "cPickle.c"
        var $1607=($1606) < 0; //@line 2495 "cPickle.c"
        if ($1607) { __label__ = 381; break; } else { __label__ = 380; break; } //@line 2495 "cPickle.c"
      case 380: // $bb63_i236
        var $1608=$self_addr_i172; //@line 2495 "cPickle.c"
        var $1609=$1608+48; //@line 2495 "cPickle.c"
        var $1610=HEAP[$1609]; //@line 2495 "cPickle.c"
        var $1611=$self_addr_i172; //@line 2495 "cPickle.c"
        var $1612=FUNCTION_TABLE[$1610]($1611, _reduce_11118, 1); //@line 2495 "cPickle.c"
        var $1613=($1612) < 0; //@line 2495 "cPickle.c"
        if ($1613) { __label__ = 381; break; } else { __label__ = 382; break; } //@line 2495 "cPickle.c"
      case 381: // $bb64_i237
        $1=-1; //@line 2498 "cPickle.c"
        __label__ = 403; break; //@line 2498 "cPickle.c"
      case 382: // $bb65_i238
        var $1614=$ob_addr_i; //@line 2503 "cPickle.c"
        var $1615=($1614)!=0; //@line 2503 "cPickle.c"
        if ($1615) { __label__ = 383; break; } else { __label__ = 392; break; } //@line 2503 "cPickle.c"
      case 383: // $bb66_i239
        var $1616=HEAP[$state_i175]; //@line 2504 "cPickle.c"
        var $1617=($1616)==0; //@line 2504 "cPickle.c"
        if ($1617) { __label__ = 387; break; } else { __label__ = 384; break; } //@line 2504 "cPickle.c"
      case 384: // $bb67_i240
        var $1618=HEAP[$state_i175]; //@line 2504 "cPickle.c"
        var $1619=$1618+4; //@line 2504 "cPickle.c"
        var $1620=HEAP[$1619]; //@line 2504 "cPickle.c"
        var $1621=$1620+84; //@line 2504 "cPickle.c"
        var $1622=HEAP[$1621]; //@line 2504 "cPickle.c"
        var $1623=($1622) & 536870912; //@line 2504 "cPickle.c"
        var $1624=($1623)!=0; //@line 2504 "cPickle.c"
        if ($1624) { __label__ = 387; break; } else { __label__ = 385; break; } //@line 2504 "cPickle.c"
      case 385: // $bb68_i
        var $1625=$self_addr_i172; //@line 2505 "cPickle.c"
        var $1626=$ob_addr_i; //@line 2505 "cPickle.c"
        var $1627=_put2($1625, $1626); //@line 2505 "cPickle.c"
        var $1628=($1627) < 0; //@line 2505 "cPickle.c"
        if ($1628) { __label__ = 386; break; } else { __label__ = 392; break; } //@line 2505 "cPickle.c"
      case 386: // $bb69_i
        $1=-1; //@line 2506 "cPickle.c"
        __label__ = 403; break; //@line 2506 "cPickle.c"
      case 387: // $bb71_i
        var $1629=$self_addr_i172; //@line 2508 "cPickle.c"
        var $1630=$ob_addr_i; //@line 2508 "cPickle.c"
        $self_addr_i_i169=$1629;
        $ob_addr_i_i170=$1630;
        var $1631=$ob_addr_i_i170; //@line 772 "cPickle.c"
        var $1632=$1631; //@line 772 "cPickle.c"
        var $1633=HEAP[$1632]; //@line 772 "cPickle.c"
        var $1634=($1633) <= 1; //@line 772 "cPickle.c"
        if ($1634) { __label__ = 389; break; } else { __label__ = 388; break; } //@line 772 "cPickle.c"
      case 388: // $bb_i_i241
        var $1635=$self_addr_i_i169; //@line 772 "cPickle.c"
        var $1636=$1635+44; //@line 772 "cPickle.c"
        var $1637=HEAP[$1636]; //@line 772 "cPickle.c"
        var $1638=($1637)!=0; //@line 772 "cPickle.c"
        if ($1638) { __label__ = 389; break; } else { __label__ = 390; break; } //@line 772 "cPickle.c"
      case 389: // $put_exit_i245_thread
        $0=0; //@line 773 "cPickle.c"
        $retval_i_i171=0; //@line 773 "cPickle.c"
        __label__ = 392; break;
      case 390: // $put_exit_i245
        var $1639=$self_addr_i_i169; //@line 775 "cPickle.c"
        var $1640=$ob_addr_i_i170; //@line 775 "cPickle.c"
        var $1641=_put2($1639, $1640); //@line 775 "cPickle.c"
        $0=$1641; //@line 775 "cPickle.c"
        $retval_i_i171=$1641; //@line 773 "cPickle.c"
        var $1642=($1641) < 0; //@line 2508 "cPickle.c"
        if ($1642) { __label__ = 391; break; } else { __label__ = 392; break; } //@line 2508 "cPickle.c"
      case 391: // $bb72_i
        $1=-1; //@line 2509 "cPickle.c"
        __label__ = 403; break; //@line 2509 "cPickle.c"
      case 392: // $bb73_i
        var $1643=HEAP[$listitems_i]; //@line 2513 "cPickle.c"
        var $1644=($1643)!=0; //@line 2513 "cPickle.c"
        if ($1644) { __label__ = 393; break; } else { __label__ = 395; break; } //@line 2513 "cPickle.c"
      case 393: // $bb74_i
        var $1645=HEAP[$listitems_i]; //@line 2513 "cPickle.c"
        var $1646=$self_addr_i172; //@line 2513 "cPickle.c"
        var $1647=_batch_list($1646, $1645); //@line 2513 "cPickle.c"
        var $1648=($1647) < 0; //@line 2513 "cPickle.c"
        if ($1648) { __label__ = 394; break; } else { __label__ = 395; break; } //@line 2513 "cPickle.c"
      case 394: // $bb75_i
        $1=-1; //@line 2514 "cPickle.c"
        __label__ = 403; break; //@line 2514 "cPickle.c"
      case 395: // $bb76_i
        var $1649=HEAP[$dictitems_i]; //@line 2516 "cPickle.c"
        var $1650=($1649)!=0; //@line 2516 "cPickle.c"
        if ($1650) { __label__ = 396; break; } else { __label__ = 398; break; } //@line 2516 "cPickle.c"
      case 396: // $bb77_i
        var $1651=HEAP[$dictitems_i]; //@line 2516 "cPickle.c"
        var $1652=$self_addr_i172; //@line 2516 "cPickle.c"
        var $1653=_batch_dict($1652, $1651); //@line 2516 "cPickle.c"
        var $1654=($1653) < 0; //@line 2516 "cPickle.c"
        if ($1654) { __label__ = 397; break; } else { __label__ = 398; break; } //@line 2516 "cPickle.c"
      case 397: // $bb78_i
        $1=-1; //@line 2517 "cPickle.c"
        __label__ = 403; break; //@line 2517 "cPickle.c"
      case 398: // $bb79_i
        var $1655=HEAP[$state_i175]; //@line 2519 "cPickle.c"
        var $1656=($1655)!=0; //@line 2519 "cPickle.c"
        if ($1656) { __label__ = 399; break; } else { __label__ = 402; break; } //@line 2519 "cPickle.c"
      case 399: // $bb80_i
        var $1657=HEAP[$state_i175]; //@line 2520 "cPickle.c"
        var $1658=$self_addr_i172; //@line 2520 "cPickle.c"
        var $1659=_save($1658, $1657, 0); //@line 2520 "cPickle.c"
        var $1660=($1659) < 0; //@line 2520 "cPickle.c"
        if ($1660) { __label__ = 401; break; } else { __label__ = 400; break; } //@line 2520 "cPickle.c"
      case 400: // $bb81_i
        var $1661=$self_addr_i172; //@line 2520 "cPickle.c"
        var $1662=$1661+48; //@line 2520 "cPickle.c"
        var $1663=HEAP[$1662]; //@line 2520 "cPickle.c"
        var $1664=$self_addr_i172; //@line 2520 "cPickle.c"
        var $1665=FUNCTION_TABLE[$1663]($1664, _build_11119, 1); //@line 2520 "cPickle.c"
        var $1666=($1665) < 0; //@line 2520 "cPickle.c"
        if ($1666) { __label__ = 401; break; } else { __label__ = 402; break; } //@line 2520 "cPickle.c"
      case 401: // $bb82_i
        $1=-1; //@line 2522 "cPickle.c"
        __label__ = 403; break; //@line 2522 "cPickle.c"
      case 402: // $bb83_i
        $1=0; //@line 2525 "cPickle.c"
        __label__ = 403; break; //@line 2525 "cPickle.c"
      case 403: // $save_reduce_exit
        var $1667=$1; //@line 2372 "cPickle.c"
        $retval_i174=$1667; //@line 2372 "cPickle.c"
        var $retval85_i=$retval_i174; //@line 2372 "cPickle.c"
        $res=$retval85_i; //@line 2767 "cPickle.c"
        __label__ = 404; break; //@line 2769 "cPickle.c"
      case 404: // $finally
        var $1668=HEAP[__PyThreadState_Current]; //@line 2770 "cPickle.c"
        var $1669=$1668+12; //@line 2770 "cPickle.c"
        var $1670=HEAP[$1669]; //@line 2770 "cPickle.c"
        var $1671=($1670) - 1; //@line 2770 "cPickle.c"
        var $1672=$1668+12; //@line 2770 "cPickle.c"
        HEAP[$1672]=$1671; //@line 2770 "cPickle.c"
        var $1673=$py_ob_id; //@line 2771 "cPickle.c"
        var $1674=($1673)!=0; //@line 2771 "cPickle.c"
        if ($1674) { __label__ = 405; break; } else { __label__ = 407; break; } //@line 2771 "cPickle.c"
      case 405: // $bb117
        var $1675=$py_ob_id; //@line 2771 "cPickle.c"
        var $1676=$1675; //@line 2771 "cPickle.c"
        var $1677=HEAP[$1676]; //@line 2771 "cPickle.c"
        var $1678=($1677) - 1; //@line 2771 "cPickle.c"
        var $1679=$py_ob_id; //@line 2771 "cPickle.c"
        var $1680=$1679; //@line 2771 "cPickle.c"
        HEAP[$1680]=$1678; //@line 2771 "cPickle.c"
        var $1681=$py_ob_id; //@line 2771 "cPickle.c"
        var $1682=$1681; //@line 2771 "cPickle.c"
        var $1683=HEAP[$1682]; //@line 2771 "cPickle.c"
        var $1684=($1683)==0; //@line 2771 "cPickle.c"
        if ($1684) { __label__ = 406; break; } else { __label__ = 407; break; } //@line 2771 "cPickle.c"
      case 406: // $bb118
        var $1685=$py_ob_id; //@line 2771 "cPickle.c"
        var $1686=$1685+4; //@line 2771 "cPickle.c"
        var $1687=HEAP[$1686]; //@line 2771 "cPickle.c"
        var $1688=$1687+24; //@line 2771 "cPickle.c"
        var $1689=HEAP[$1688]; //@line 2771 "cPickle.c"
        var $1690=$py_ob_id; //@line 2771 "cPickle.c"
        FUNCTION_TABLE[$1689]($1690); //@line 2771 "cPickle.c"
        __label__ = 407; break; //@line 2771 "cPickle.c"
      case 407: // $bb119
        var $1691=$__reduce__; //@line 2772 "cPickle.c"
        var $1692=($1691)!=0; //@line 2772 "cPickle.c"
        if ($1692) { __label__ = 408; break; } else { __label__ = 410; break; } //@line 2772 "cPickle.c"
      case 408: // $bb120
        var $1693=$__reduce__; //@line 2772 "cPickle.c"
        var $1694=$1693; //@line 2772 "cPickle.c"
        var $1695=HEAP[$1694]; //@line 2772 "cPickle.c"
        var $1696=($1695) - 1; //@line 2772 "cPickle.c"
        var $1697=$__reduce__; //@line 2772 "cPickle.c"
        var $1698=$1697; //@line 2772 "cPickle.c"
        HEAP[$1698]=$1696; //@line 2772 "cPickle.c"
        var $1699=$__reduce__; //@line 2772 "cPickle.c"
        var $1700=$1699; //@line 2772 "cPickle.c"
        var $1701=HEAP[$1700]; //@line 2772 "cPickle.c"
        var $1702=($1701)==0; //@line 2772 "cPickle.c"
        if ($1702) { __label__ = 409; break; } else { __label__ = 410; break; } //@line 2772 "cPickle.c"
      case 409: // $bb121
        var $1703=$__reduce__; //@line 2772 "cPickle.c"
        var $1704=$1703+4; //@line 2772 "cPickle.c"
        var $1705=HEAP[$1704]; //@line 2772 "cPickle.c"
        var $1706=$1705+24; //@line 2772 "cPickle.c"
        var $1707=HEAP[$1706]; //@line 2772 "cPickle.c"
        var $1708=$__reduce__; //@line 2772 "cPickle.c"
        FUNCTION_TABLE[$1707]($1708); //@line 2772 "cPickle.c"
        __label__ = 410; break; //@line 2772 "cPickle.c"
      case 410: // $bb122
        var $1709=$t; //@line 2773 "cPickle.c"
        var $1710=($1709)!=0; //@line 2773 "cPickle.c"
        if ($1710) { __label__ = 411; break; } else { __label__ = 413; break; } //@line 2773 "cPickle.c"
      case 411: // $bb123
        var $1711=$t; //@line 2773 "cPickle.c"
        var $1712=$1711; //@line 2773 "cPickle.c"
        var $1713=HEAP[$1712]; //@line 2773 "cPickle.c"
        var $1714=($1713) - 1; //@line 2773 "cPickle.c"
        var $1715=$t; //@line 2773 "cPickle.c"
        var $1716=$1715; //@line 2773 "cPickle.c"
        HEAP[$1716]=$1714; //@line 2773 "cPickle.c"
        var $1717=$t; //@line 2773 "cPickle.c"
        var $1718=$1717; //@line 2773 "cPickle.c"
        var $1719=HEAP[$1718]; //@line 2773 "cPickle.c"
        var $1720=($1719)==0; //@line 2773 "cPickle.c"
        if ($1720) { __label__ = 412; break; } else { __label__ = 413; break; } //@line 2773 "cPickle.c"
      case 412: // $bb124
        var $1721=$t; //@line 2773 "cPickle.c"
        var $1722=$1721+4; //@line 2773 "cPickle.c"
        var $1723=HEAP[$1722]; //@line 2773 "cPickle.c"
        var $1724=$1723+24; //@line 2773 "cPickle.c"
        var $1725=HEAP[$1724]; //@line 2773 "cPickle.c"
        var $1726=$t; //@line 2773 "cPickle.c"
        FUNCTION_TABLE[$1725]($1726); //@line 2773 "cPickle.c"
        __label__ = 413; break; //@line 2773 "cPickle.c"
      case 413: // $bb125
        var $1727=$res; //@line 2775 "cPickle.c"
        $14=$1727; //@line 2775 "cPickle.c"
        __label__ = 414; break; //@line 2775 "cPickle.c"
      case 414: // $bb126
        var $1728=$14; //@line 2537 "cPickle.c"
        $retval=$1728; //@line 2537 "cPickle.c"
        var $retval127=$retval; //@line 2537 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval127; //@line 2537 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dump($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 2; _memset(__stackBase__, 0, 2);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $bytes=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2784 "cPickle.c"
        var $2=$1+36; //@line 2784 "cPickle.c"
        var $3=HEAP[$2]; //@line 2784 "cPickle.c"
        var $4=($3) > 1; //@line 2784 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 2784 "cPickle.c"
      case 1: // $bb
        var $5=$bytes; //@line 2787 "cPickle.c"
        HEAP[$5]=-128; //@line 2787 "cPickle.c"
        var $6=$self_addr; //@line 2788 "cPickle.c"
        var $7=$6+36; //@line 2788 "cPickle.c"
        var $8=HEAP[$7]; //@line 2788 "cPickle.c"
        var $9=($8) < 0; //@line 2788 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 2788 "cPickle.c"
      case 2: // $bb1
        var $10=$self_addr; //@line 2788 "cPickle.c"
        var $11=$10+36; //@line 2788 "cPickle.c"
        var $12=HEAP[$11]; //@line 2788 "cPickle.c"
        var $13=($12) > 255; //@line 2788 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2788 "cPickle.c"
      case 3: // $bb2
        ___assert_fail(__str48, __str15, 2788, __str54); //@line 2788 "cPickle.c"
        throw "Reached an unreachable!" //@line 2788 "cPickle.c"
      case 4: // $bb3
        var $14=$self_addr; //@line 2789 "cPickle.c"
        var $15=$14+36; //@line 2789 "cPickle.c"
        var $16=HEAP[$15]; //@line 2789 "cPickle.c"
        var $17=((($16)) & 255); //@line 2789 "cPickle.c"
        var $18=$bytes+1; //@line 2789 "cPickle.c"
        HEAP[$18]=$17; //@line 2789 "cPickle.c"
        var $19=$self_addr; //@line 2790 "cPickle.c"
        var $20=$19+48; //@line 2790 "cPickle.c"
        var $21=HEAP[$20]; //@line 2790 "cPickle.c"
        var $22=$self_addr; //@line 2790 "cPickle.c"
        var $bytes4=$bytes; //@line 2790 "cPickle.c"
        var $23=FUNCTION_TABLE[$21]($22, $bytes4, 2); //@line 2790 "cPickle.c"
        var $24=($23) < 0; //@line 2790 "cPickle.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2790 "cPickle.c"
      case 5: // $bb5
        $0=-1; //@line 2791 "cPickle.c"
        __label__ = 13; break; //@line 2791 "cPickle.c"
      case 6: // $bb6
        var $25=$self_addr; //@line 2794 "cPickle.c"
        var $26=$args_addr; //@line 2794 "cPickle.c"
        var $27=_save($25, $26, 0); //@line 2794 "cPickle.c"
        var $28=($27) < 0; //@line 2794 "cPickle.c"
        if ($28) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2794 "cPickle.c"
      case 7: // $bb7
        $0=-1; //@line 2795 "cPickle.c"
        __label__ = 13; break; //@line 2795 "cPickle.c"
      case 8: // $bb8
        var $29=$self_addr; //@line 2797 "cPickle.c"
        var $30=$29+48; //@line 2797 "cPickle.c"
        var $31=HEAP[$30]; //@line 2797 "cPickle.c"
        var $32=$self_addr; //@line 2797 "cPickle.c"
        var $33=FUNCTION_TABLE[$31]($32, _stop_11690, 1); //@line 2797 "cPickle.c"
        var $34=($33) < 0; //@line 2797 "cPickle.c"
        if ($34) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2797 "cPickle.c"
      case 9: // $bb9
        $0=-1; //@line 2798 "cPickle.c"
        __label__ = 13; break; //@line 2798 "cPickle.c"
      case 10: // $bb10
        var $35=$self_addr; //@line 2800 "cPickle.c"
        var $36=$35+48; //@line 2800 "cPickle.c"
        var $37=HEAP[$36]; //@line 2800 "cPickle.c"
        var $38=$self_addr; //@line 2800 "cPickle.c"
        var $39=FUNCTION_TABLE[$37]($38, 0, 0); //@line 2800 "cPickle.c"
        var $40=($39) < 0; //@line 2800 "cPickle.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 2800 "cPickle.c"
      case 11: // $bb11
        $0=-1; //@line 2801 "cPickle.c"
        __label__ = 13; break; //@line 2801 "cPickle.c"
      case 12: // $bb12
        $0=0; //@line 2803 "cPickle.c"
        __label__ = 13; break; //@line 2803 "cPickle.c"
      case 13: // $bb13
        var $41=$0; //@line 2791 "cPickle.c"
        $retval=$41; //@line 2791 "cPickle.c"
        var $retval14=$retval; //@line 2791 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 2791 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickle_clear_memo($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2809 "cPickle.c"
        var $2=$1+20; //@line 2809 "cPickle.c"
        var $3=HEAP[$2]; //@line 2809 "cPickle.c"
        var $4=($3)!=0; //@line 2809 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2809 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 2810 "cPickle.c"
        var $6=$5+20; //@line 2810 "cPickle.c"
        var $7=HEAP[$6]; //@line 2810 "cPickle.c"
        _PyDict_Clear($7); //@line 2810 "cPickle.c"
        __label__ = 2; break; //@line 2810 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[__Py_NoneStruct]; //@line 2811 "cPickle.c"
        var $9=($8) + 1; //@line 2811 "cPickle.c"
        HEAP[__Py_NoneStruct]=$9; //@line 2811 "cPickle.c"
        $0=__Py_NoneStruct; //@line 2812 "cPickle.c"
        var $10=$0; //@line 2812 "cPickle.c"
        $retval=$10; //@line 2812 "cPickle.c"
        var $retval2=$retval; //@line 2812 "cPickle.c"
        ;
        return $retval2; //@line 2812 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickle_getvalue($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $iftmp_222;
        var $iftmp_216;
        var $0;
        var $l;
        var $i;
        var $rsize;
        var $ssize;
        var $clear=__stackBase__;
        var $lm;
        var $ik;
        var $k;
        var $r;
        var $s;
        var $p;
        var $have_get;
        var $data;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$clear]=1; //@line 2818 "cPickle.c"
        var $1=$args_addr; //@line 2825 "cPickle.c"
        var $2=($1)!=0; //@line 2825 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2825 "cPickle.c"
      case 1: // $bb
        var $3=$args_addr; //@line 2825 "cPickle.c"
        var $4=_PyArg_ParseTuple($3, __str49, $clear); //@line 2825 "cPickle.c"
        var $5=($4)==0; //@line 2825 "cPickle.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2825 "cPickle.c"
      case 2: // $bb1
        $0=0; //@line 2826 "cPickle.c"
        __label__ = 52; break; //@line 2826 "cPickle.c"
      case 3: // $bb2
        var $6=$self_addr; //@line 2829 "cPickle.c"
        var $7=$6+16; //@line 2829 "cPickle.c"
        var $8=HEAP[$7]; //@line 2829 "cPickle.c"
        var $9=$8+4; //@line 2829 "cPickle.c"
        var $10=HEAP[$9]; //@line 2829 "cPickle.c"
        var $11=($10)!=(_PdataType); //@line 2829 "cPickle.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2829 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[_PicklingError]; //@line 2830 "cPickle.c"
        _PyErr_SetString($12, __str50); //@line 2830 "cPickle.c"
        $0=0; //@line 2832 "cPickle.c"
        __label__ = 52; break; //@line 2832 "cPickle.c"
      case 5: // $bb4
        var $13=$self_addr; //@line 2836 "cPickle.c"
        var $14=_write_other($13, 0, 0); //@line 2836 "cPickle.c"
        var $15=($14) < 0; //@line 2836 "cPickle.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2836 "cPickle.c"
      case 6: // $bb5
        $0=0; //@line 2836 "cPickle.c"
        __label__ = 52; break; //@line 2836 "cPickle.c"
      case 7: // $bb6
        var $16=$self_addr; //@line 2838 "cPickle.c"
        var $17=$16+16; //@line 2838 "cPickle.c"
        var $18=HEAP[$17]; //@line 2838 "cPickle.c"
        var $19=$18; //@line 2838 "cPickle.c"
        $data=$19; //@line 2838 "cPickle.c"
        var $20=$data; //@line 2839 "cPickle.c"
        var $21=$20+8; //@line 2839 "cPickle.c"
        var $22=HEAP[$21]; //@line 2839 "cPickle.c"
        $l=$22; //@line 2839 "cPickle.c"
        var $23=$self_addr; //@line 2842 "cPickle.c"
        var $24=$23+20; //@line 2842 "cPickle.c"
        var $25=HEAP[$24]; //@line 2842 "cPickle.c"
        var $26=_PyDict_Size($25); //@line 2842 "cPickle.c"
        $lm=$26; //@line 2842 "cPickle.c"
        var $27=$lm; //@line 2843 "cPickle.c"
        var $28=($27) < 0; //@line 2843 "cPickle.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2843 "cPickle.c"
      case 8: // $bb7
        $0=0; //@line 2843 "cPickle.c"
        __label__ = 52; break; //@line 2843 "cPickle.c"
      case 9: // $bb8
        var $29=$lm; //@line 2844 "cPickle.c"
        var $30=($29) + 1; //@line 2844 "cPickle.c"
        $lm=$30; //@line 2844 "cPickle.c"
        var $31=$lm; //@line 2845 "cPickle.c"
        var $32=_malloc($31); //@line 2845 "cPickle.c"
        $have_get=$32; //@line 2845 "cPickle.c"
        var $33=$have_get; //@line 2846 "cPickle.c"
        var $34=($33)==0; //@line 2846 "cPickle.c"
        if ($34) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2846 "cPickle.c"
      case 10: // $bb9
        var $35=_PyErr_NoMemory(); //@line 2846 "cPickle.c"
        $0=$35; //@line 2846 "cPickle.c"
        __label__ = 52; break; //@line 2846 "cPickle.c"
      case 11: // $bb10
        var $36=$lm; //@line 2847 "cPickle.c"
        var $37=$have_get; //@line 2847 "cPickle.c"
        _llvm_memset_p0i8_i32($37, 0, $36, 1, 0); //@line 2847 "cPickle.c"
        $rsize=0; //@line 2850 "cPickle.c"
        var $38=$l; //@line 2850 "cPickle.c"
        $i=$38; //@line 2850 "cPickle.c"
        __label__ = 32; break; //@line 2850 "cPickle.c"
      case 12: // $bb11
        var $39=$data; //@line 2851 "cPickle.c"
        var $40=$39+16; //@line 2851 "cPickle.c"
        var $41=HEAP[$40]; //@line 2851 "cPickle.c"
        var $42=$i; //@line 2851 "cPickle.c"
        var $43=$41+4*$42; //@line 2851 "cPickle.c"
        var $44=HEAP[$43]; //@line 2851 "cPickle.c"
        $k=$44; //@line 2851 "cPickle.c"
        var $45=$k; //@line 2853 "cPickle.c"
        var $46=$45+4; //@line 2853 "cPickle.c"
        var $47=HEAP[$46]; //@line 2853 "cPickle.c"
        var $48=$47+84; //@line 2853 "cPickle.c"
        var $49=HEAP[$48]; //@line 2853 "cPickle.c"
        var $50=($49) & 134217728; //@line 2853 "cPickle.c"
        var $51=($50)!=0; //@line 2853 "cPickle.c"
        var $52=$k; //@line 2854 "cPickle.c"
        if ($51) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2853 "cPickle.c"
      case 13: // $bb12
        var $53=$52; //@line 2854 "cPickle.c"
        var $54=$53+8; //@line 2854 "cPickle.c"
        var $55=HEAP[$54]; //@line 2854 "cPickle.c"
        var $56=$rsize; //@line 2854 "cPickle.c"
        var $57=($56) + ($55); //@line 2854 "cPickle.c"
        $rsize=$57; //@line 2854 "cPickle.c"
        __label__ = 32; break; //@line 2854 "cPickle.c"
      case 14: // $bb13
        var $58=$52+4; //@line 2856 "cPickle.c"
        var $59=HEAP[$58]; //@line 2856 "cPickle.c"
        var $60=$59+84; //@line 2856 "cPickle.c"
        var $61=HEAP[$60]; //@line 2856 "cPickle.c"
        var $62=($61) & 8388608; //@line 2856 "cPickle.c"
        var $63=($62)!=0; //@line 2856 "cPickle.c"
        var $64=$k; //@line 2857 "cPickle.c"
        if ($63) { __label__ = 15; break; } else { __label__ = 22; break; } //@line 2856 "cPickle.c"
      case 15: // $bb14
        var $65=$64; //@line 2857 "cPickle.c"
        var $66=$65+8; //@line 2857 "cPickle.c"
        var $67=HEAP[$66]; //@line 2857 "cPickle.c"
        $ik=$67; //@line 2857 "cPickle.c"
        var $68=$ik; //@line 2858 "cPickle.c"
        var $69=$lm; //@line 2858 "cPickle.c"
        var $70=($68) >= ($69); //@line 2858 "cPickle.c"
        var $71=$ik; //@line 2858 "cPickle.c"
        var $72=($71)==0; //@line 2858 "cPickle.c"
        var $or_cond=($70) | ($72);
        if ($or_cond) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 2858 "cPickle.c"
      case 16: // $bb16
        var $73=HEAP[_PicklingError]; //@line 2859 "cPickle.c"
        _PyErr_SetString($73, __str51); //@line 2859 "cPickle.c"
        __label__ = 51; break; //@line 2859 "cPickle.c"
      case 17: // $bb17
        var $74=$have_get; //@line 2863 "cPickle.c"
        var $75=$ik; //@line 2863 "cPickle.c"
        var $76=$74+$75; //@line 2863 "cPickle.c"
        var $77=HEAP[$76]; //@line 2863 "cPickle.c"
        var $78=($77)!=0; //@line 2863 "cPickle.c"
        if ($78) { __label__ = 18; break; } else { __label__ = 32; break; } //@line 2863 "cPickle.c"
      case 18: // $bb18
        var $79=$ik; //@line 2864 "cPickle.c"
        var $80=($79) <= 255; //@line 2864 "cPickle.c"
        if ($80) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2864 "cPickle.c"
      case 19: // $bb19
        $iftmp_216=2; //@line 2864 "cPickle.c"
        __label__ = 21; break; //@line 2864 "cPickle.c"
      case 20: // $bb20
        $iftmp_216=5; //@line 2864 "cPickle.c"
        __label__ = 21; break; //@line 2864 "cPickle.c"
      case 21: // $bb21
        var $81=$iftmp_216; //@line 2864 "cPickle.c"
        var $82=$rsize; //@line 2864 "cPickle.c"
        var $83=($82) + ($81); //@line 2864 "cPickle.c"
        $rsize=$83; //@line 2864 "cPickle.c"
        __label__ = 32; break; //@line 2864 "cPickle.c"
      case 22: // $bb23
        var $84=$64+4; //@line 2867 "cPickle.c"
        var $85=HEAP[$84]; //@line 2867 "cPickle.c"
        var $86=$85+84; //@line 2867 "cPickle.c"
        var $87=HEAP[$86]; //@line 2867 "cPickle.c"
        var $88=($87) & 67108864; //@line 2867 "cPickle.c"
        var $89=($88)==0; //@line 2867 "cPickle.c"
        if ($89) { __label__ = 25; break; } else { __label__ = 23; break; } //@line 2867 "cPickle.c"
      case 23: // $bb24
        var $90=$k; //@line 2867 "cPickle.c"
        var $91=$90; //@line 2867 "cPickle.c"
        var $92=$91+8; //@line 2867 "cPickle.c"
        var $93=HEAP[$92]; //@line 2867 "cPickle.c"
        var $94=($93)!=2; //@line 2867 "cPickle.c"
        if ($94) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 2867 "cPickle.c"
      case 24: // $bb25
        var $95=$k; //@line 2867 "cPickle.c"
        var $96=$95; //@line 2867 "cPickle.c"
        var $97=$96+12; //@line 2867 "cPickle.c"
        var $98=$97; //@line 2867 "cPickle.c"
        var $99=HEAP[$98]; //@line 2867 "cPickle.c"
        $k=$99; //@line 2867 "cPickle.c"
        var $100=$k; //@line 2867 "cPickle.c"
        var $101=$100+4; //@line 2867 "cPickle.c"
        var $102=HEAP[$101]; //@line 2867 "cPickle.c"
        var $103=$102+84; //@line 2867 "cPickle.c"
        var $104=HEAP[$103]; //@line 2867 "cPickle.c"
        var $105=($104) & 8388608; //@line 2867 "cPickle.c"
        var $106=($105)==0; //@line 2867 "cPickle.c"
        if ($106) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 2867 "cPickle.c"
      case 25: // $bb26
        var $107=HEAP[_PicklingError]; //@line 2871 "cPickle.c"
        _PyErr_SetString($107, __str52); //@line 2871 "cPickle.c"
        __label__ = 51; break; //@line 2871 "cPickle.c"
      case 26: // $bb27
        var $108=$k; //@line 2877 "cPickle.c"
        var $109=$108; //@line 2877 "cPickle.c"
        var $110=$109+8; //@line 2877 "cPickle.c"
        var $111=HEAP[$110]; //@line 2877 "cPickle.c"
        $ik=$111; //@line 2877 "cPickle.c"
        var $112=$ik; //@line 2878 "cPickle.c"
        var $113=$lm; //@line 2878 "cPickle.c"
        var $114=($112) >= ($113); //@line 2878 "cPickle.c"
        var $115=$ik; //@line 2878 "cPickle.c"
        var $116=($115)==0; //@line 2878 "cPickle.c"
        var $or_cond3=($114) | ($116);
        if ($or_cond3) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 2878 "cPickle.c"
      case 27: // $bb29
        var $117=HEAP[_PicklingError]; //@line 2879 "cPickle.c"
        _PyErr_SetString($117, __str51); //@line 2879 "cPickle.c"
        $0=0; //@line 2881 "cPickle.c"
        __label__ = 52; break; //@line 2881 "cPickle.c"
      case 28: // $bb30
        var $118=$have_get; //@line 2883 "cPickle.c"
        var $119=$ik; //@line 2883 "cPickle.c"
        var $120=$118+$119; //@line 2883 "cPickle.c"
        HEAP[$120]=1; //@line 2883 "cPickle.c"
        var $121=$ik; //@line 2884 "cPickle.c"
        var $122=($121) <= 255; //@line 2884 "cPickle.c"
        if ($122) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 2884 "cPickle.c"
      case 29: // $bb31
        $iftmp_222=2; //@line 2884 "cPickle.c"
        __label__ = 31; break; //@line 2884 "cPickle.c"
      case 30: // $bb32
        $iftmp_222=5; //@line 2884 "cPickle.c"
        __label__ = 31; break; //@line 2884 "cPickle.c"
      case 31: // $bb33
        var $123=$iftmp_222; //@line 2884 "cPickle.c"
        var $124=$rsize; //@line 2884 "cPickle.c"
        var $125=($124) + ($123); //@line 2884 "cPickle.c"
        $rsize=$125; //@line 2884 "cPickle.c"
        __label__ = 32; break; //@line 2884 "cPickle.c"
      case 32: // $bb34
        var $126=$i; //@line 2850 "cPickle.c"
        var $127=($126) - 1; //@line 2850 "cPickle.c"
        $i=$127; //@line 2850 "cPickle.c"
        var $128=($127) >= 0; //@line 2850 "cPickle.c"
        if ($128) { __label__ = 12; break; } else { __label__ = 33; break; } //@line 2850 "cPickle.c"
      case 33: // $bb35
        var $129=$rsize; //@line 2889 "cPickle.c"
        var $130=_PyString_FromStringAndSize(0, $129); //@line 2889 "cPickle.c"
        $r=$130; //@line 2889 "cPickle.c"
        var $131=$r; //@line 2890 "cPickle.c"
        var $132=($131)==0; //@line 2890 "cPickle.c"
        if ($132) { __label__ = 51; break; } else { __label__ = 34; break; } //@line 2890 "cPickle.c"
      case 34: // $bb36
        var $133=$r; //@line 2891 "cPickle.c"
        var $134=$133; //@line 2891 "cPickle.c"
        var $135=$134+20; //@line 2891 "cPickle.c"
        var $136=$135; //@line 2891 "cPickle.c"
        $s=$136; //@line 2891 "cPickle.c"
        $i=0; //@line 2893 "cPickle.c"
        var $137=$i; //@line 2893 "cPickle.c"
        var $138=$l; //@line 2893 "cPickle.c"
        var $139=($137) < ($138); //@line 2893 "cPickle.c"
        if ($139) { __label__ = 35; break; } else { __label__ = 48; break; } //@line 2893 "cPickle.c"
      case 35: // $bb37
        var $140=$data; //@line 2894 "cPickle.c"
        var $141=$140+16; //@line 2894 "cPickle.c"
        var $142=HEAP[$141]; //@line 2894 "cPickle.c"
        var $143=$i; //@line 2894 "cPickle.c"
        var $144=$142+4*$143; //@line 2894 "cPickle.c"
        var $145=HEAP[$144]; //@line 2894 "cPickle.c"
        $k=$145; //@line 2894 "cPickle.c"
        var $146=$k; //@line 2896 "cPickle.c"
        var $147=$146+4; //@line 2896 "cPickle.c"
        var $148=HEAP[$147]; //@line 2896 "cPickle.c"
        var $149=$148+84; //@line 2896 "cPickle.c"
        var $150=HEAP[$149]; //@line 2896 "cPickle.c"
        var $151=($150) & 134217728; //@line 2896 "cPickle.c"
        var $152=($151)!=0; //@line 2896 "cPickle.c"
        var $153=$k; //@line 2897 "cPickle.c"
        if ($152) { __label__ = 36; break; } else { __label__ = 39; break; } //@line 2896 "cPickle.c"
      case 36: // $bb38
        var $154=$153; //@line 2897 "cPickle.c"
        var $155=$154+8; //@line 2897 "cPickle.c"
        var $156=HEAP[$155]; //@line 2897 "cPickle.c"
        $ssize=$156; //@line 2897 "cPickle.c"
        var $157=$ssize; //@line 2898 "cPickle.c"
        var $158=($157)!=0; //@line 2898 "cPickle.c"
        if ($158) { __label__ = 37; break; } else { __label__ = 47; break; } //@line 2898 "cPickle.c"
      case 37: // $bb39
        var $159=$k; //@line 2899 "cPickle.c"
        var $160=$159; //@line 2899 "cPickle.c"
        var $161=$160+20; //@line 2899 "cPickle.c"
        var $162=$161; //@line 2899 "cPickle.c"
        $p=$162; //@line 2899 "cPickle.c"
        var $163=$ssize; //@line 2900 "cPickle.c"
        var $164=($163) - 1; //@line 2900 "cPickle.c"
        $ssize=$164; //@line 2900 "cPickle.c"
        var $165=($164) >= 0; //@line 2900 "cPickle.c"
        if ($165) { __label__ = 38; break; } else { __label__ = 47; break; } //@line 2900 "cPickle.c"
      case 38: // $bb40
        var $166=$p; //@line 2901 "cPickle.c"
        var $167=HEAP[$166]; //@line 2901 "cPickle.c"
        var $168=$s; //@line 2901 "cPickle.c"
        HEAP[$168]=$167; //@line 2901 "cPickle.c"
        var $169=$s; //@line 2901 "cPickle.c"
        var $170=$169+1; //@line 2901 "cPickle.c"
        $s=$170; //@line 2901 "cPickle.c"
        var $171=$p; //@line 2901 "cPickle.c"
        var $172=$171+1; //@line 2901 "cPickle.c"
        $p=$172; //@line 2901 "cPickle.c"
        var $173=$ssize; //@line 2900 "cPickle.c"
        var $174=($173) - 1; //@line 2900 "cPickle.c"
        $ssize=$174; //@line 2900 "cPickle.c"
        var $175=($174) >= 0; //@line 2900 "cPickle.c"
        if ($175) { __label__ = 38; break; } else { __label__ = 47; break; } //@line 2900 "cPickle.c"
      case 39: // $bb43
        var $176=$153+4; //@line 2905 "cPickle.c"
        var $177=HEAP[$176]; //@line 2905 "cPickle.c"
        var $178=$177+84; //@line 2905 "cPickle.c"
        var $179=HEAP[$178]; //@line 2905 "cPickle.c"
        var $180=($179) & 67108864; //@line 2905 "cPickle.c"
        var $181=($180)!=0; //@line 2905 "cPickle.c"
        var $182=$k; //@line 2906 "cPickle.c"
        if ($181) { __label__ = 40; break; } else { __label__ = 43; break; } //@line 2905 "cPickle.c"
      case 40: // $bb44
        var $183=$182; //@line 2906 "cPickle.c"
        var $184=$183+12; //@line 2906 "cPickle.c"
        var $185=$184; //@line 2906 "cPickle.c"
        var $186=HEAP[$185]; //@line 2906 "cPickle.c"
        var $187=$186; //@line 2906 "cPickle.c"
        var $188=$187+8; //@line 2906 "cPickle.c"
        var $189=HEAP[$188]; //@line 2906 "cPickle.c"
        $ik=$189; //@line 2906 "cPickle.c"
        var $190=$ik; //@line 2908 "cPickle.c"
        var $191=($190) <= 255; //@line 2908 "cPickle.c"
        var $192=$s; //@line 2909 "cPickle.c"
        if ($191) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 2908 "cPickle.c"
      case 41: // $bb45
        HEAP[$192]=104; //@line 2909 "cPickle.c"
        var $193=$s; //@line 2909 "cPickle.c"
        var $194=$193+1; //@line 2909 "cPickle.c"
        $s=$194; //@line 2909 "cPickle.c"
        var $195=$ik; //@line 2910 "cPickle.c"
        var $196=((($195)) & 255); //@line 2910 "cPickle.c"
        var $197=$s; //@line 2910 "cPickle.c"
        HEAP[$197]=$196; //@line 2910 "cPickle.c"
        var $198=$s; //@line 2910 "cPickle.c"
        var $199=$198+1; //@line 2910 "cPickle.c"
        $s=$199; //@line 2910 "cPickle.c"
        __label__ = 47; break; //@line 2910 "cPickle.c"
      case 42: // $bb46
        HEAP[$192]=106; //@line 2913 "cPickle.c"
        var $200=$s; //@line 2913 "cPickle.c"
        var $201=$200+1; //@line 2913 "cPickle.c"
        $s=$201; //@line 2913 "cPickle.c"
        var $202=$ik; //@line 2914 "cPickle.c"
        var $203=((($202)) & 255); //@line 2914 "cPickle.c"
        var $204=$s; //@line 2914 "cPickle.c"
        HEAP[$204]=$203; //@line 2914 "cPickle.c"
        var $205=$s; //@line 2914 "cPickle.c"
        var $206=$205+1; //@line 2914 "cPickle.c"
        $s=$206; //@line 2914 "cPickle.c"
        var $207=$ik; //@line 2915 "cPickle.c"
        var $208=($207) >> 8; //@line 2915 "cPickle.c"
        var $209=((($208)) & 255); //@line 2915 "cPickle.c"
        var $210=$s; //@line 2915 "cPickle.c"
        HEAP[$210]=$209; //@line 2915 "cPickle.c"
        var $211=$s; //@line 2915 "cPickle.c"
        var $212=$211+1; //@line 2915 "cPickle.c"
        $s=$212; //@line 2915 "cPickle.c"
        var $213=$ik; //@line 2916 "cPickle.c"
        var $214=($213) >> 16; //@line 2916 "cPickle.c"
        var $215=((($214)) & 255); //@line 2916 "cPickle.c"
        var $216=$s; //@line 2916 "cPickle.c"
        HEAP[$216]=$215; //@line 2916 "cPickle.c"
        var $217=$s; //@line 2916 "cPickle.c"
        var $218=$217+1; //@line 2916 "cPickle.c"
        $s=$218; //@line 2916 "cPickle.c"
        var $219=$ik; //@line 2917 "cPickle.c"
        var $220=($219) >> 24; //@line 2917 "cPickle.c"
        var $221=((($220)) & 255); //@line 2917 "cPickle.c"
        var $222=$s; //@line 2917 "cPickle.c"
        HEAP[$222]=$221; //@line 2917 "cPickle.c"
        var $223=$s; //@line 2917 "cPickle.c"
        var $224=$223+1; //@line 2917 "cPickle.c"
        $s=$224; //@line 2917 "cPickle.c"
        __label__ = 47; break; //@line 2917 "cPickle.c"
      case 43: // $bb48
        var $225=$182; //@line 2922 "cPickle.c"
        var $226=$225+8; //@line 2922 "cPickle.c"
        var $227=HEAP[$226]; //@line 2922 "cPickle.c"
        $ik=$227; //@line 2922 "cPickle.c"
        var $228=$have_get; //@line 2924 "cPickle.c"
        var $229=$ik; //@line 2924 "cPickle.c"
        var $230=$228+$229; //@line 2924 "cPickle.c"
        var $231=HEAP[$230]; //@line 2924 "cPickle.c"
        var $232=($231)!=0; //@line 2924 "cPickle.c"
        if ($232) { __label__ = 44; break; } else { __label__ = 47; break; } //@line 2924 "cPickle.c"
      case 44: // $bb49
        var $233=$ik; //@line 2925 "cPickle.c"
        var $234=($233) <= 255; //@line 2925 "cPickle.c"
        var $235=$s; //@line 2926 "cPickle.c"
        if ($234) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 2925 "cPickle.c"
      case 45: // $bb50
        HEAP[$235]=113; //@line 2926 "cPickle.c"
        var $236=$s; //@line 2926 "cPickle.c"
        var $237=$236+1; //@line 2926 "cPickle.c"
        $s=$237; //@line 2926 "cPickle.c"
        var $238=$ik; //@line 2927 "cPickle.c"
        var $239=((($238)) & 255); //@line 2927 "cPickle.c"
        var $240=$s; //@line 2927 "cPickle.c"
        HEAP[$240]=$239; //@line 2927 "cPickle.c"
        var $241=$s; //@line 2927 "cPickle.c"
        var $242=$241+1; //@line 2927 "cPickle.c"
        $s=$242; //@line 2927 "cPickle.c"
        __label__ = 47; break; //@line 2927 "cPickle.c"
      case 46: // $bb51
        HEAP[$235]=114; //@line 2930 "cPickle.c"
        var $243=$s; //@line 2930 "cPickle.c"
        var $244=$243+1; //@line 2930 "cPickle.c"
        $s=$244; //@line 2930 "cPickle.c"
        var $245=$ik; //@line 2931 "cPickle.c"
        var $246=((($245)) & 255); //@line 2931 "cPickle.c"
        var $247=$s; //@line 2931 "cPickle.c"
        HEAP[$247]=$246; //@line 2931 "cPickle.c"
        var $248=$s; //@line 2931 "cPickle.c"
        var $249=$248+1; //@line 2931 "cPickle.c"
        $s=$249; //@line 2931 "cPickle.c"
        var $250=$ik; //@line 2932 "cPickle.c"
        var $251=($250) >> 8; //@line 2932 "cPickle.c"
        var $252=((($251)) & 255); //@line 2932 "cPickle.c"
        var $253=$s; //@line 2932 "cPickle.c"
        HEAP[$253]=$252; //@line 2932 "cPickle.c"
        var $254=$s; //@line 2932 "cPickle.c"
        var $255=$254+1; //@line 2932 "cPickle.c"
        $s=$255; //@line 2932 "cPickle.c"
        var $256=$ik; //@line 2933 "cPickle.c"
        var $257=($256) >> 16; //@line 2933 "cPickle.c"
        var $258=((($257)) & 255); //@line 2933 "cPickle.c"
        var $259=$s; //@line 2933 "cPickle.c"
        HEAP[$259]=$258; //@line 2933 "cPickle.c"
        var $260=$s; //@line 2933 "cPickle.c"
        var $261=$260+1; //@line 2933 "cPickle.c"
        $s=$261; //@line 2933 "cPickle.c"
        var $262=$ik; //@line 2934 "cPickle.c"
        var $263=($262) >> 24; //@line 2934 "cPickle.c"
        var $264=((($263)) & 255); //@line 2934 "cPickle.c"
        var $265=$s; //@line 2934 "cPickle.c"
        HEAP[$265]=$264; //@line 2934 "cPickle.c"
        var $266=$s; //@line 2934 "cPickle.c"
        var $267=$266+1; //@line 2934 "cPickle.c"
        $s=$267; //@line 2934 "cPickle.c"
        __label__ = 47; break; //@line 2934 "cPickle.c"
      case 47: // $bb52
        var $268=$i; //@line 2893 "cPickle.c"
        var $269=($268) + 1; //@line 2893 "cPickle.c"
        $i=$269; //@line 2893 "cPickle.c"
        var $270=$i; //@line 2893 "cPickle.c"
        var $271=$l; //@line 2893 "cPickle.c"
        var $272=($270) < ($271); //@line 2893 "cPickle.c"
        if ($272) { __label__ = 35; break; } else { __label__ = 48; break; } //@line 2893 "cPickle.c"
      case 48: // $bb54
        var $273=HEAP[$clear]; //@line 2940 "cPickle.c"
        var $274=($273)!=0; //@line 2940 "cPickle.c"
        if ($274) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 2940 "cPickle.c"
      case 49: // $bb55
        var $275=$self_addr; //@line 2941 "cPickle.c"
        var $276=$275+20; //@line 2941 "cPickle.c"
        var $277=HEAP[$276]; //@line 2941 "cPickle.c"
        _PyDict_Clear($277); //@line 2941 "cPickle.c"
        var $278=$data; //@line 2942 "cPickle.c"
        var $279=_Pdata_clear($278, 0); //@line 2942 "cPickle.c"
        __label__ = 50; break; //@line 2942 "cPickle.c"
      case 50: // $bb56
        var $280=$have_get; //@line 2945 "cPickle.c"
        _free($280); //@line 2945 "cPickle.c"
        var $281=$r; //@line 2946 "cPickle.c"
        $0=$281; //@line 2946 "cPickle.c"
        __label__ = 52; break; //@line 2946 "cPickle.c"
      case 51: // $err
        var $282=$have_get; //@line 2948 "cPickle.c"
        _free($282); //@line 2948 "cPickle.c"
        $0=0; //@line 2949 "cPickle.c"
        __label__ = 52; break; //@line 2949 "cPickle.c"
      case 52: // $bb57
        var $283=$0; //@line 2826 "cPickle.c"
        $retval=$283; //@line 2826 "cPickle.c"
        var $retval58=$retval; //@line 2826 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval58; //@line 2826 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_dump($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $ob=__stackBase__;
        var $get=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$get]=0; //@line 2956 "cPickle.c"
        var $1=$args_addr; //@line 2958 "cPickle.c"
        var $2=_PyArg_ParseTuple($1, __str53, $ob, $get); //@line 2958 "cPickle.c"
        var $3=($2)==0; //@line 2958 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2958 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 2959 "cPickle.c"
        __label__ = 7; break; //@line 2959 "cPickle.c"
      case 2: // $bb1
        var $4=HEAP[$ob]; //@line 2961 "cPickle.c"
        var $5=$self_addr; //@line 2961 "cPickle.c"
        var $6=_dump($5, $4); //@line 2961 "cPickle.c"
        var $7=($6) < 0; //@line 2961 "cPickle.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2961 "cPickle.c"
      case 3: // $bb2
        $0=0; //@line 2962 "cPickle.c"
        __label__ = 7; break; //@line 2962 "cPickle.c"
      case 4: // $bb3
        var $8=HEAP[$get]; //@line 2964 "cPickle.c"
        var $9=($8)!=0; //@line 2964 "cPickle.c"
        var $10=$self_addr; //@line 2964 "cPickle.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2964 "cPickle.c"
      case 5: // $bb4
        var $11=_Pickle_getvalue($10, 0); //@line 2964 "cPickle.c"
        $0=$11; //@line 2964 "cPickle.c"
        __label__ = 7; break; //@line 2964 "cPickle.c"
      case 6: // $bb5
        var $12=$10; //@line 2967 "cPickle.c"
        var $13=$12; //@line 2967 "cPickle.c"
        var $14=HEAP[$13]; //@line 2967 "cPickle.c"
        var $15=($14) + 1; //@line 2967 "cPickle.c"
        var $16=$12; //@line 2967 "cPickle.c"
        HEAP[$16]=$15; //@line 2967 "cPickle.c"
        var $17=$self_addr; //@line 2968 "cPickle.c"
        var $18=$17; //@line 2968 "cPickle.c"
        $0=$18; //@line 2968 "cPickle.c"
        __label__ = 7; break; //@line 2968 "cPickle.c"
      case 7: // $bb6
        var $19=$0; //@line 2959 "cPickle.c"
        $retval=$19; //@line 2959 "cPickle.c"
        var $retval7=$retval; //@line 2959 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 2959 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newPicklerobject($file, $proto) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $file_addr;
        var $proto_addr;
        var $retval;
        var $0;
        var $self;
        var $m;
        $file_addr=$file;
        $proto_addr=$proto;
        var $1=$proto_addr; //@line 2990 "cPickle.c"
        var $2=($1) < 0; //@line 2990 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2990 "cPickle.c"
      case 1: // $bb1_thread
        $proto_addr=2; //@line 2991 "cPickle.c"
        __label__ = 4; break;
      case 2: // $bb1
        var $3=($1) > 2; //@line 2992 "cPickle.c"
        if ($3) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2992 "cPickle.c"
      case 3: // $bb2
        var $4=HEAP[_PyExc_ValueError]; //@line 2993 "cPickle.c"
        var $5=$proto_addr; //@line 2993 "cPickle.c"
        var $6=_PyErr_Format($4, __str60, $5, 2); //@line 2993 "cPickle.c"
        $0=0; //@line 2996 "cPickle.c"
        __label__ = 34; break; //@line 2996 "cPickle.c"
      case 4: // $bb3
        var $7=__PyObject_GC_New(_Picklertype); //@line 2999 "cPickle.c"
        var $8=$7; //@line 2999 "cPickle.c"
        $self=$8; //@line 2999 "cPickle.c"
        var $9=($8)==0; //@line 3000 "cPickle.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3000 "cPickle.c"
      case 5: // $bb4
        $0=0; //@line 3001 "cPickle.c"
        __label__ = 34; break; //@line 3001 "cPickle.c"
      case 6: // $bb5
        var $10=$self; //@line 3002 "cPickle.c"
        var $11=$10+36; //@line 3002 "cPickle.c"
        var $12=$proto_addr; //@line 3002 "cPickle.c"
        HEAP[$11]=$12; //@line 3002 "cPickle.c"
        var $13=$proto_addr; //@line 3003 "cPickle.c"
        var $14=($13) > 0; //@line 3003 "cPickle.c"
        var $15=($14); //@line 3003 "cPickle.c"
        var $16=$self; //@line 3003 "cPickle.c"
        var $17=$16+40; //@line 3003 "cPickle.c"
        HEAP[$17]=$15; //@line 3003 "cPickle.c"
        var $18=$self; //@line 3004 "cPickle.c"
        var $19=$18+8; //@line 3004 "cPickle.c"
        HEAP[$19]=0; //@line 3004 "cPickle.c"
        var $20=$self; //@line 3005 "cPickle.c"
        var $21=$20+12; //@line 3005 "cPickle.c"
        HEAP[$21]=0; //@line 3005 "cPickle.c"
        var $22=$self; //@line 3006 "cPickle.c"
        var $23=$22+20; //@line 3006 "cPickle.c"
        HEAP[$23]=0; //@line 3006 "cPickle.c"
        var $24=$self; //@line 3007 "cPickle.c"
        var $25=$24+24; //@line 3007 "cPickle.c"
        HEAP[$25]=0; //@line 3007 "cPickle.c"
        var $26=$self; //@line 3008 "cPickle.c"
        var $27=$26+28; //@line 3008 "cPickle.c"
        HEAP[$27]=0; //@line 3008 "cPickle.c"
        var $28=$self; //@line 3009 "cPickle.c"
        var $29=$28+32; //@line 3009 "cPickle.c"
        HEAP[$29]=0; //@line 3009 "cPickle.c"
        var $30=$self; //@line 3010 "cPickle.c"
        var $31=$30+52; //@line 3010 "cPickle.c"
        HEAP[$31]=0; //@line 3010 "cPickle.c"
        var $32=$self; //@line 3011 "cPickle.c"
        var $33=$32+44; //@line 3011 "cPickle.c"
        HEAP[$33]=0; //@line 3011 "cPickle.c"
        var $34=$self; //@line 3012 "cPickle.c"
        var $35=$34+64; //@line 3012 "cPickle.c"
        HEAP[$35]=0; //@line 3012 "cPickle.c"
        var $36=$self; //@line 3013 "cPickle.c"
        var $37=$36+68; //@line 3013 "cPickle.c"
        HEAP[$37]=0; //@line 3013 "cPickle.c"
        var $38=$self; //@line 3014 "cPickle.c"
        var $39=$38+56; //@line 3014 "cPickle.c"
        HEAP[$39]=0; //@line 3014 "cPickle.c"
        var $40=$self; //@line 3015 "cPickle.c"
        var $41=$40+60; //@line 3015 "cPickle.c"
        HEAP[$41]=0; //@line 3015 "cPickle.c"
        var $42=$self; //@line 3017 "cPickle.c"
        var $43=$42+16; //@line 3017 "cPickle.c"
        HEAP[$43]=0; //@line 3017 "cPickle.c"
        var $44=$file_addr; //@line 3018 "cPickle.c"
        var $45=($44)!=0; //@line 3018 "cPickle.c"
        if ($45) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3018 "cPickle.c"
      case 7: // $bb6
        var $46=$file_addr; //@line 3019 "cPickle.c"
        var $47=$46; //@line 3019 "cPickle.c"
        var $48=HEAP[$47]; //@line 3019 "cPickle.c"
        var $49=($48) + 1; //@line 3019 "cPickle.c"
        var $50=$file_addr; //@line 3019 "cPickle.c"
        var $51=$50; //@line 3019 "cPickle.c"
        HEAP[$51]=$49; //@line 3019 "cPickle.c"
        __label__ = 9; break; //@line 3019 "cPickle.c"
      case 8: // $bb7
        var $52=_Pdata_New(); //@line 3021 "cPickle.c"
        $file_addr=$52; //@line 3021 "cPickle.c"
        var $53=$file_addr; //@line 3022 "cPickle.c"
        var $54=($53)==0; //@line 3022 "cPickle.c"
        if ($54) { __label__ = 31; break; } else { __label__ = 9; break; } //@line 3022 "cPickle.c"
      case 9: // $bb8
        var $55=$self; //@line 3025 "cPickle.c"
        var $56=$55+16; //@line 3025 "cPickle.c"
        var $57=$file_addr; //@line 3025 "cPickle.c"
        HEAP[$56]=$57; //@line 3025 "cPickle.c"
        var $58=_PyDict_New(); //@line 3027 "cPickle.c"
        var $59=$self; //@line 3027 "cPickle.c"
        var $60=$59+20; //@line 3027 "cPickle.c"
        HEAP[$60]=$58; //@line 3027 "cPickle.c"
        var $61=$self; //@line 3027 "cPickle.c"
        var $62=$61+20; //@line 3027 "cPickle.c"
        var $63=HEAP[$62]; //@line 3027 "cPickle.c"
        var $64=($63)==0; //@line 3027 "cPickle.c"
        if ($64) { __label__ = 31; break; } else { __label__ = 10; break; } //@line 3027 "cPickle.c"
      case 10: // $bb9
        var $65=$file_addr; //@line 3030 "cPickle.c"
        var $66=$65+4; //@line 3030 "cPickle.c"
        var $67=HEAP[$66]; //@line 3030 "cPickle.c"
        var $68=($67)==(_PyFile_Type); //@line 3030 "cPickle.c"
        if ($68) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 3030 "cPickle.c"
      case 11: // $bb10
        var $69=$file_addr; //@line 3030 "cPickle.c"
        var $70=$69+4; //@line 3030 "cPickle.c"
        var $71=HEAP[$70]; //@line 3030 "cPickle.c"
        var $72=_PyType_IsSubtype($71, _PyFile_Type); //@line 3030 "cPickle.c"
        var $73=($72)!=0; //@line 3030 "cPickle.c"
        if ($73) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 3030 "cPickle.c"
      case 12: // $bb11
        var $74=$file_addr; //@line 3031 "cPickle.c"
        var $75=_PyFile_AsFile($74); //@line 3031 "cPickle.c"
        var $76=$self; //@line 3031 "cPickle.c"
        var $77=$76+8; //@line 3031 "cPickle.c"
        HEAP[$77]=$75; //@line 3031 "cPickle.c"
        var $78=$self; //@line 3032 "cPickle.c"
        var $79=$78+8; //@line 3032 "cPickle.c"
        var $80=HEAP[$79]; //@line 3032 "cPickle.c"
        var $81=($80)==0; //@line 3032 "cPickle.c"
        if ($81) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3032 "cPickle.c"
      case 13: // $bb12
        var $82=HEAP[_PyExc_ValueError]; //@line 3033 "cPickle.c"
        _PyErr_SetString($82, __str61); //@line 3033 "cPickle.c"
        __label__ = 31; break; //@line 3033 "cPickle.c"
      case 14: // $bb13
        var $83=$self; //@line 3037 "cPickle.c"
        var $84=$83+48; //@line 3037 "cPickle.c"
        HEAP[$84]=(FUNCTION_TABLE_OFFSET + 4); //@line 3037 "cPickle.c"
        __label__ = 24; break; //@line 3037 "cPickle.c"
      case 15: // $bb14
        var $85=$file_addr; //@line 3039 "cPickle.c"
        var $86=$85+4; //@line 3039 "cPickle.c"
        var $87=HEAP[$86]; //@line 3039 "cPickle.c"
        var $88=HEAP[_PycStringIO]; //@line 3039 "cPickle.c"
        var $89=$88+28; //@line 3039 "cPickle.c"
        var $90=HEAP[$89]; //@line 3039 "cPickle.c"
        var $91=($87)==($90); //@line 3039 "cPickle.c"
        if ($91) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3039 "cPickle.c"
      case 16: // $bb15
        var $92=$self; //@line 3040 "cPickle.c"
        var $93=$92+48; //@line 3040 "cPickle.c"
        HEAP[$93]=(FUNCTION_TABLE_OFFSET + 6); //@line 3040 "cPickle.c"
        __label__ = 24; break; //@line 3040 "cPickle.c"
      case 17: // $bb16
        var $94=$file_addr; //@line 3042 "cPickle.c"
        var $95=($94)==(__Py_NoneStruct); //@line 3042 "cPickle.c"
        var $96=$self; //@line 3043 "cPickle.c"
        var $97=$96+48; //@line 3043 "cPickle.c"
        if ($95) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3042 "cPickle.c"
      case 18: // $bb17
        HEAP[$97]=(FUNCTION_TABLE_OFFSET + 8); //@line 3043 "cPickle.c"
        __label__ = 24; break; //@line 3043 "cPickle.c"
      case 19: // $bb18
        HEAP[$97]=(FUNCTION_TABLE_OFFSET + 10); //@line 3046 "cPickle.c"
        var $98=$file_addr; //@line 3048 "cPickle.c"
        var $99=$98+4; //@line 3048 "cPickle.c"
        var $100=HEAP[$99]; //@line 3048 "cPickle.c"
        var $101=($100)!=(_PdataType); //@line 3048 "cPickle.c"
        if ($101) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 3048 "cPickle.c"
      case 20: // $bb19
        var $102=HEAP[_write_str]; //@line 3049 "cPickle.c"
        var $103=$file_addr; //@line 3049 "cPickle.c"
        var $104=_PyObject_GetAttr($103, $102); //@line 3049 "cPickle.c"
        var $105=$self; //@line 3049 "cPickle.c"
        var $106=$105+12; //@line 3049 "cPickle.c"
        HEAP[$106]=$104; //@line 3049 "cPickle.c"
        var $107=$self; //@line 3050 "cPickle.c"
        var $108=$107+12; //@line 3050 "cPickle.c"
        var $109=HEAP[$108]; //@line 3050 "cPickle.c"
        var $110=($109)==0; //@line 3050 "cPickle.c"
        if ($110) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 3050 "cPickle.c"
      case 21: // $bb20
        _PyErr_Clear(); //@line 3051 "cPickle.c"
        var $111=HEAP[_PyExc_TypeError]; //@line 3052 "cPickle.c"
        _PyErr_SetString($111, __str62); //@line 3052 "cPickle.c"
        __label__ = 31; break; //@line 3052 "cPickle.c"
      case 22: // $bb21
        var $112=_PyMem_Malloc(256); //@line 3059 "cPickle.c"
        var $113=$self; //@line 3059 "cPickle.c"
        var $114=$113+52; //@line 3059 "cPickle.c"
        HEAP[$114]=$112; //@line 3059 "cPickle.c"
        var $115=$self; //@line 3060 "cPickle.c"
        var $116=$115+52; //@line 3060 "cPickle.c"
        var $117=HEAP[$116]; //@line 3060 "cPickle.c"
        var $118=($117)==0; //@line 3060 "cPickle.c"
        if ($118) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3060 "cPickle.c"
      case 23: // $bb22
        var $119=_PyErr_NoMemory(); //@line 3061 "cPickle.c"
        __label__ = 31; break; //@line 3061 "cPickle.c"
      case 24: // $bb23
        var $120=_PyEval_GetRestricted(); //@line 3066 "cPickle.c"
        var $121=($120)!=0; //@line 3066 "cPickle.c"
        if ($121) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 3066 "cPickle.c"
      case 25: // $bb24
        var $122=_PyImport_ImportModule(__str63); //@line 3068 "cPickle.c"
        $m=$122; //@line 3068 "cPickle.c"
        var $123=$m; //@line 3070 "cPickle.c"
        var $124=($123)==0; //@line 3070 "cPickle.c"
        if ($124) { __label__ = 31; break; } else { __label__ = 26; break; } //@line 3070 "cPickle.c"
      case 26: // $bb25
        var $125=HEAP[_dispatch_table_str]; //@line 3072 "cPickle.c"
        var $126=$m; //@line 3072 "cPickle.c"
        var $127=_PyObject_GetAttr($126, $125); //@line 3072 "cPickle.c"
        var $128=$self; //@line 3072 "cPickle.c"
        var $129=$128+60; //@line 3072 "cPickle.c"
        HEAP[$129]=$127; //@line 3072 "cPickle.c"
        var $130=$m; //@line 3073 "cPickle.c"
        var $131=$130; //@line 3073 "cPickle.c"
        var $132=HEAP[$131]; //@line 3073 "cPickle.c"
        var $133=($132) - 1; //@line 3073 "cPickle.c"
        var $134=$m; //@line 3073 "cPickle.c"
        var $135=$134; //@line 3073 "cPickle.c"
        HEAP[$135]=$133; //@line 3073 "cPickle.c"
        var $136=$m; //@line 3073 "cPickle.c"
        var $137=$136; //@line 3073 "cPickle.c"
        var $138=HEAP[$137]; //@line 3073 "cPickle.c"
        var $139=($138)==0; //@line 3073 "cPickle.c"
        if ($139) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 3073 "cPickle.c"
      case 27: // $bb26
        var $140=$m; //@line 3073 "cPickle.c"
        var $141=$140+4; //@line 3073 "cPickle.c"
        var $142=HEAP[$141]; //@line 3073 "cPickle.c"
        var $143=$142+24; //@line 3073 "cPickle.c"
        var $144=HEAP[$143]; //@line 3073 "cPickle.c"
        var $145=$m; //@line 3073 "cPickle.c"
        FUNCTION_TABLE[$144]($145); //@line 3073 "cPickle.c"
        __label__ = 28; break; //@line 3073 "cPickle.c"
      case 28: // $bb27
        var $146=$self; //@line 3074 "cPickle.c"
        var $147=$146+60; //@line 3074 "cPickle.c"
        var $148=HEAP[$147]; //@line 3074 "cPickle.c"
        var $149=($148)==0; //@line 3074 "cPickle.c"
        if ($149) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 3074 "cPickle.c"
      case 29: // $bb29
        var $150=HEAP[_dispatch_table]; //@line 3078 "cPickle.c"
        var $151=$self; //@line 3078 "cPickle.c"
        var $152=$151+60; //@line 3078 "cPickle.c"
        HEAP[$152]=$150; //@line 3078 "cPickle.c"
        var $153=HEAP[_dispatch_table]; //@line 3079 "cPickle.c"
        var $154=$153; //@line 3079 "cPickle.c"
        var $155=HEAP[$154]; //@line 3079 "cPickle.c"
        var $156=($155) + 1; //@line 3079 "cPickle.c"
        var $157=$153; //@line 3079 "cPickle.c"
        HEAP[$157]=$156; //@line 3079 "cPickle.c"
        __label__ = 30; break; //@line 3079 "cPickle.c"
      case 30: // $bb30
        var $158=$self; //@line 3081 "cPickle.c"
        var $159=$158; //@line 3081 "cPickle.c"
        _PyObject_GC_Track($159); //@line 3081 "cPickle.c"
        var $160=$self; //@line 3083 "cPickle.c"
        $0=$160; //@line 3083 "cPickle.c"
        __label__ = 34; break; //@line 3083 "cPickle.c"
      case 31: // $err
        var $161=$self; //@line 3086 "cPickle.c"
        var $162=$161; //@line 3086 "cPickle.c"
        var $163=$162; //@line 3086 "cPickle.c"
        var $164=HEAP[$163]; //@line 3086 "cPickle.c"
        var $165=($164) - 1; //@line 3086 "cPickle.c"
        var $166=$162; //@line 3086 "cPickle.c"
        HEAP[$166]=$165; //@line 3086 "cPickle.c"
        var $167=$162; //@line 3086 "cPickle.c"
        var $168=HEAP[$167]; //@line 3086 "cPickle.c"
        var $169=($168)==0; //@line 3086 "cPickle.c"
        if ($169) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 3086 "cPickle.c"
      case 32: // $bb31
        var $170=$self; //@line 3086 "cPickle.c"
        var $171=$170; //@line 3086 "cPickle.c"
        var $172=$171+4; //@line 3086 "cPickle.c"
        var $173=HEAP[$172]; //@line 3086 "cPickle.c"
        var $174=$173+24; //@line 3086 "cPickle.c"
        var $175=HEAP[$174]; //@line 3086 "cPickle.c"
        var $176=$self; //@line 3086 "cPickle.c"
        var $177=$176; //@line 3086 "cPickle.c"
        FUNCTION_TABLE[$175]($177); //@line 3086 "cPickle.c"
        __label__ = 33; break; //@line 3086 "cPickle.c"
      case 33: // $bb32
        $0=0; //@line 3087 "cPickle.c"
        __label__ = 34; break; //@line 3087 "cPickle.c"
      case 34: // $bb33
        var $178=$0; //@line 2996 "cPickle.c"
        $retval=$178; //@line 2996 "cPickle.c"
        var $retval34=$retval; //@line 2996 "cPickle.c"
        ;
        return $retval34; //@line 2996 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_Pickler($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $file=__stackBase__;
        var $proto=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        HEAP[$file]=0; //@line 3095 "cPickle.c"
        HEAP[$proto]=0; //@line 3096 "cPickle.c"
        var $1=$args_addr; //@line 3105 "cPickle.c"
        var $2=_PyArg_ParseTuple($1, __str64, $proto); //@line 3105 "cPickle.c"
        var $3=($2)==0; //@line 3105 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3105 "cPickle.c"
      case 1: // $bb
        _PyErr_Clear(); //@line 3106 "cPickle.c"
        HEAP[$proto]=0; //@line 3107 "cPickle.c"
        var $4=$args_addr; //@line 3108 "cPickle.c"
        var $5=$kwds_addr; //@line 3108 "cPickle.c"
        var $6=_PyArg_ParseTupleAndKeywords($4, $5, __str65, _kwlist_12011, $file, $proto); //@line 3108 "cPickle.c"
        var $7=($6)==0; //@line 3108 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3108 "cPickle.c"
      case 2: // $bb1
        $0=0; //@line 3110 "cPickle.c"
        __label__ = 4; break; //@line 3110 "cPickle.c"
      case 3: // $bb2
        var $8=HEAP[$proto]; //@line 3112 "cPickle.c"
        var $9=HEAP[$file]; //@line 3112 "cPickle.c"
        var $10=_newPicklerobject($9, $8); //@line 3112 "cPickle.c"
        var $11=$10; //@line 3112 "cPickle.c"
        $0=$11; //@line 3112 "cPickle.c"
        __label__ = 4; break; //@line 3112 "cPickle.c"
      case 4: // $bb3
        var $12=$0; //@line 3110 "cPickle.c"
        $retval=$12; //@line 3110 "cPickle.c"
        var $retval4=$retval; //@line 3110 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 3110 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        $self_addr=$self;
        var $0=$self_addr; //@line 3119 "cPickle.c"
        var $1=$0; //@line 3119 "cPickle.c"
        _PyObject_GC_UnTrack($1); //@line 3119 "cPickle.c"
        var $2=$self_addr; //@line 3120 "cPickle.c"
        var $3=$2+12; //@line 3120 "cPickle.c"
        var $4=HEAP[$3]; //@line 3120 "cPickle.c"
        var $5=($4)!=0; //@line 3120 "cPickle.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3120 "cPickle.c"
      case 1: // $bb
        var $6=$self_addr; //@line 3120 "cPickle.c"
        var $7=$6+12; //@line 3120 "cPickle.c"
        var $8=HEAP[$7]; //@line 3120 "cPickle.c"
        var $9=$8; //@line 3120 "cPickle.c"
        var $10=HEAP[$9]; //@line 3120 "cPickle.c"
        var $11=($10) - 1; //@line 3120 "cPickle.c"
        var $12=$8; //@line 3120 "cPickle.c"
        HEAP[$12]=$11; //@line 3120 "cPickle.c"
        var $13=$8; //@line 3120 "cPickle.c"
        var $14=HEAP[$13]; //@line 3120 "cPickle.c"
        var $15=($14)==0; //@line 3120 "cPickle.c"
        if ($15) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3120 "cPickle.c"
      case 2: // $bb1
        var $16=$self_addr; //@line 3120 "cPickle.c"
        var $17=$16+12; //@line 3120 "cPickle.c"
        var $18=HEAP[$17]; //@line 3120 "cPickle.c"
        var $19=$18+4; //@line 3120 "cPickle.c"
        var $20=HEAP[$19]; //@line 3120 "cPickle.c"
        var $21=$20+24; //@line 3120 "cPickle.c"
        var $22=HEAP[$21]; //@line 3120 "cPickle.c"
        var $23=$self_addr; //@line 3120 "cPickle.c"
        var $24=$23+12; //@line 3120 "cPickle.c"
        var $25=HEAP[$24]; //@line 3120 "cPickle.c"
        FUNCTION_TABLE[$22]($25); //@line 3120 "cPickle.c"
        __label__ = 3; break; //@line 3120 "cPickle.c"
      case 3: // $bb2
        var $26=$self_addr; //@line 3121 "cPickle.c"
        var $27=$26+20; //@line 3121 "cPickle.c"
        var $28=HEAP[$27]; //@line 3121 "cPickle.c"
        var $29=($28)!=0; //@line 3121 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3121 "cPickle.c"
      case 4: // $bb3
        var $30=$self_addr; //@line 3121 "cPickle.c"
        var $31=$30+20; //@line 3121 "cPickle.c"
        var $32=HEAP[$31]; //@line 3121 "cPickle.c"
        var $33=$32; //@line 3121 "cPickle.c"
        var $34=HEAP[$33]; //@line 3121 "cPickle.c"
        var $35=($34) - 1; //@line 3121 "cPickle.c"
        var $36=$32; //@line 3121 "cPickle.c"
        HEAP[$36]=$35; //@line 3121 "cPickle.c"
        var $37=$32; //@line 3121 "cPickle.c"
        var $38=HEAP[$37]; //@line 3121 "cPickle.c"
        var $39=($38)==0; //@line 3121 "cPickle.c"
        if ($39) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3121 "cPickle.c"
      case 5: // $bb4
        var $40=$self_addr; //@line 3121 "cPickle.c"
        var $41=$40+20; //@line 3121 "cPickle.c"
        var $42=HEAP[$41]; //@line 3121 "cPickle.c"
        var $43=$42+4; //@line 3121 "cPickle.c"
        var $44=HEAP[$43]; //@line 3121 "cPickle.c"
        var $45=$44+24; //@line 3121 "cPickle.c"
        var $46=HEAP[$45]; //@line 3121 "cPickle.c"
        var $47=$self_addr; //@line 3121 "cPickle.c"
        var $48=$47+20; //@line 3121 "cPickle.c"
        var $49=HEAP[$48]; //@line 3121 "cPickle.c"
        FUNCTION_TABLE[$46]($49); //@line 3121 "cPickle.c"
        __label__ = 6; break; //@line 3121 "cPickle.c"
      case 6: // $bb5
        var $50=$self_addr; //@line 3122 "cPickle.c"
        var $51=$50+68; //@line 3122 "cPickle.c"
        var $52=HEAP[$51]; //@line 3122 "cPickle.c"
        var $53=($52)!=0; //@line 3122 "cPickle.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 3122 "cPickle.c"
      case 7: // $bb6
        var $54=$self_addr; //@line 3122 "cPickle.c"
        var $55=$54+68; //@line 3122 "cPickle.c"
        var $56=HEAP[$55]; //@line 3122 "cPickle.c"
        var $57=$56; //@line 3122 "cPickle.c"
        var $58=HEAP[$57]; //@line 3122 "cPickle.c"
        var $59=($58) - 1; //@line 3122 "cPickle.c"
        var $60=$56; //@line 3122 "cPickle.c"
        HEAP[$60]=$59; //@line 3122 "cPickle.c"
        var $61=$56; //@line 3122 "cPickle.c"
        var $62=HEAP[$61]; //@line 3122 "cPickle.c"
        var $63=($62)==0; //@line 3122 "cPickle.c"
        if ($63) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3122 "cPickle.c"
      case 8: // $bb7
        var $64=$self_addr; //@line 3122 "cPickle.c"
        var $65=$64+68; //@line 3122 "cPickle.c"
        var $66=HEAP[$65]; //@line 3122 "cPickle.c"
        var $67=$66+4; //@line 3122 "cPickle.c"
        var $68=HEAP[$67]; //@line 3122 "cPickle.c"
        var $69=$68+24; //@line 3122 "cPickle.c"
        var $70=HEAP[$69]; //@line 3122 "cPickle.c"
        var $71=$self_addr; //@line 3122 "cPickle.c"
        var $72=$71+68; //@line 3122 "cPickle.c"
        var $73=HEAP[$72]; //@line 3122 "cPickle.c"
        FUNCTION_TABLE[$70]($73); //@line 3122 "cPickle.c"
        __label__ = 9; break; //@line 3122 "cPickle.c"
      case 9: // $bb8
        var $74=$self_addr; //@line 3123 "cPickle.c"
        var $75=$74+24; //@line 3123 "cPickle.c"
        var $76=HEAP[$75]; //@line 3123 "cPickle.c"
        var $77=($76)!=0; //@line 3123 "cPickle.c"
        if ($77) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3123 "cPickle.c"
      case 10: // $bb9
        var $78=$self_addr; //@line 3123 "cPickle.c"
        var $79=$78+24; //@line 3123 "cPickle.c"
        var $80=HEAP[$79]; //@line 3123 "cPickle.c"
        var $81=$80; //@line 3123 "cPickle.c"
        var $82=HEAP[$81]; //@line 3123 "cPickle.c"
        var $83=($82) - 1; //@line 3123 "cPickle.c"
        var $84=$80; //@line 3123 "cPickle.c"
        HEAP[$84]=$83; //@line 3123 "cPickle.c"
        var $85=$80; //@line 3123 "cPickle.c"
        var $86=HEAP[$85]; //@line 3123 "cPickle.c"
        var $87=($86)==0; //@line 3123 "cPickle.c"
        if ($87) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3123 "cPickle.c"
      case 11: // $bb10
        var $88=$self_addr; //@line 3123 "cPickle.c"
        var $89=$88+24; //@line 3123 "cPickle.c"
        var $90=HEAP[$89]; //@line 3123 "cPickle.c"
        var $91=$90+4; //@line 3123 "cPickle.c"
        var $92=HEAP[$91]; //@line 3123 "cPickle.c"
        var $93=$92+24; //@line 3123 "cPickle.c"
        var $94=HEAP[$93]; //@line 3123 "cPickle.c"
        var $95=$self_addr; //@line 3123 "cPickle.c"
        var $96=$95+24; //@line 3123 "cPickle.c"
        var $97=HEAP[$96]; //@line 3123 "cPickle.c"
        FUNCTION_TABLE[$94]($97); //@line 3123 "cPickle.c"
        __label__ = 12; break; //@line 3123 "cPickle.c"
      case 12: // $bb11
        var $98=$self_addr; //@line 3124 "cPickle.c"
        var $99=$98+16; //@line 3124 "cPickle.c"
        var $100=HEAP[$99]; //@line 3124 "cPickle.c"
        var $101=($100)!=0; //@line 3124 "cPickle.c"
        if ($101) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 3124 "cPickle.c"
      case 13: // $bb12
        var $102=$self_addr; //@line 3124 "cPickle.c"
        var $103=$102+16; //@line 3124 "cPickle.c"
        var $104=HEAP[$103]; //@line 3124 "cPickle.c"
        var $105=$104; //@line 3124 "cPickle.c"
        var $106=HEAP[$105]; //@line 3124 "cPickle.c"
        var $107=($106) - 1; //@line 3124 "cPickle.c"
        var $108=$104; //@line 3124 "cPickle.c"
        HEAP[$108]=$107; //@line 3124 "cPickle.c"
        var $109=$104; //@line 3124 "cPickle.c"
        var $110=HEAP[$109]; //@line 3124 "cPickle.c"
        var $111=($110)==0; //@line 3124 "cPickle.c"
        if ($111) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3124 "cPickle.c"
      case 14: // $bb13
        var $112=$self_addr; //@line 3124 "cPickle.c"
        var $113=$112+16; //@line 3124 "cPickle.c"
        var $114=HEAP[$113]; //@line 3124 "cPickle.c"
        var $115=$114+4; //@line 3124 "cPickle.c"
        var $116=HEAP[$115]; //@line 3124 "cPickle.c"
        var $117=$116+24; //@line 3124 "cPickle.c"
        var $118=HEAP[$117]; //@line 3124 "cPickle.c"
        var $119=$self_addr; //@line 3124 "cPickle.c"
        var $120=$119+16; //@line 3124 "cPickle.c"
        var $121=HEAP[$120]; //@line 3124 "cPickle.c"
        FUNCTION_TABLE[$118]($121); //@line 3124 "cPickle.c"
        __label__ = 15; break; //@line 3124 "cPickle.c"
      case 15: // $bb14
        var $122=$self_addr; //@line 3125 "cPickle.c"
        var $123=$122+28; //@line 3125 "cPickle.c"
        var $124=HEAP[$123]; //@line 3125 "cPickle.c"
        var $125=($124)!=0; //@line 3125 "cPickle.c"
        if ($125) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3125 "cPickle.c"
      case 16: // $bb15
        var $126=$self_addr; //@line 3125 "cPickle.c"
        var $127=$126+28; //@line 3125 "cPickle.c"
        var $128=HEAP[$127]; //@line 3125 "cPickle.c"
        var $129=$128; //@line 3125 "cPickle.c"
        var $130=HEAP[$129]; //@line 3125 "cPickle.c"
        var $131=($130) - 1; //@line 3125 "cPickle.c"
        var $132=$128; //@line 3125 "cPickle.c"
        HEAP[$132]=$131; //@line 3125 "cPickle.c"
        var $133=$128; //@line 3125 "cPickle.c"
        var $134=HEAP[$133]; //@line 3125 "cPickle.c"
        var $135=($134)==0; //@line 3125 "cPickle.c"
        if ($135) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3125 "cPickle.c"
      case 17: // $bb16
        var $136=$self_addr; //@line 3125 "cPickle.c"
        var $137=$136+28; //@line 3125 "cPickle.c"
        var $138=HEAP[$137]; //@line 3125 "cPickle.c"
        var $139=$138+4; //@line 3125 "cPickle.c"
        var $140=HEAP[$139]; //@line 3125 "cPickle.c"
        var $141=$140+24; //@line 3125 "cPickle.c"
        var $142=HEAP[$141]; //@line 3125 "cPickle.c"
        var $143=$self_addr; //@line 3125 "cPickle.c"
        var $144=$143+28; //@line 3125 "cPickle.c"
        var $145=HEAP[$144]; //@line 3125 "cPickle.c"
        FUNCTION_TABLE[$142]($145); //@line 3125 "cPickle.c"
        __label__ = 18; break; //@line 3125 "cPickle.c"
      case 18: // $bb17
        var $146=$self_addr; //@line 3126 "cPickle.c"
        var $147=$146+32; //@line 3126 "cPickle.c"
        var $148=HEAP[$147]; //@line 3126 "cPickle.c"
        var $149=($148)!=0; //@line 3126 "cPickle.c"
        if ($149) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3126 "cPickle.c"
      case 19: // $bb18
        var $150=$self_addr; //@line 3126 "cPickle.c"
        var $151=$150+32; //@line 3126 "cPickle.c"
        var $152=HEAP[$151]; //@line 3126 "cPickle.c"
        var $153=$152; //@line 3126 "cPickle.c"
        var $154=HEAP[$153]; //@line 3126 "cPickle.c"
        var $155=($154) - 1; //@line 3126 "cPickle.c"
        var $156=$152; //@line 3126 "cPickle.c"
        HEAP[$156]=$155; //@line 3126 "cPickle.c"
        var $157=$152; //@line 3126 "cPickle.c"
        var $158=HEAP[$157]; //@line 3126 "cPickle.c"
        var $159=($158)==0; //@line 3126 "cPickle.c"
        if ($159) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3126 "cPickle.c"
      case 20: // $bb19
        var $160=$self_addr; //@line 3126 "cPickle.c"
        var $161=$160+32; //@line 3126 "cPickle.c"
        var $162=HEAP[$161]; //@line 3126 "cPickle.c"
        var $163=$162+4; //@line 3126 "cPickle.c"
        var $164=HEAP[$163]; //@line 3126 "cPickle.c"
        var $165=$164+24; //@line 3126 "cPickle.c"
        var $166=HEAP[$165]; //@line 3126 "cPickle.c"
        var $167=$self_addr; //@line 3126 "cPickle.c"
        var $168=$167+32; //@line 3126 "cPickle.c"
        var $169=HEAP[$168]; //@line 3126 "cPickle.c"
        FUNCTION_TABLE[$166]($169); //@line 3126 "cPickle.c"
        __label__ = 21; break; //@line 3126 "cPickle.c"
      case 21: // $bb20
        var $170=$self_addr; //@line 3127 "cPickle.c"
        var $171=$170+60; //@line 3127 "cPickle.c"
        var $172=HEAP[$171]; //@line 3127 "cPickle.c"
        var $173=($172)!=0; //@line 3127 "cPickle.c"
        if ($173) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 3127 "cPickle.c"
      case 22: // $bb21
        var $174=$self_addr; //@line 3127 "cPickle.c"
        var $175=$174+60; //@line 3127 "cPickle.c"
        var $176=HEAP[$175]; //@line 3127 "cPickle.c"
        var $177=$176; //@line 3127 "cPickle.c"
        var $178=HEAP[$177]; //@line 3127 "cPickle.c"
        var $179=($178) - 1; //@line 3127 "cPickle.c"
        var $180=$176; //@line 3127 "cPickle.c"
        HEAP[$180]=$179; //@line 3127 "cPickle.c"
        var $181=$176; //@line 3127 "cPickle.c"
        var $182=HEAP[$181]; //@line 3127 "cPickle.c"
        var $183=($182)==0; //@line 3127 "cPickle.c"
        if ($183) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3127 "cPickle.c"
      case 23: // $bb22
        var $184=$self_addr; //@line 3127 "cPickle.c"
        var $185=$184+60; //@line 3127 "cPickle.c"
        var $186=HEAP[$185]; //@line 3127 "cPickle.c"
        var $187=$186+4; //@line 3127 "cPickle.c"
        var $188=HEAP[$187]; //@line 3127 "cPickle.c"
        var $189=$188+24; //@line 3127 "cPickle.c"
        var $190=HEAP[$189]; //@line 3127 "cPickle.c"
        var $191=$self_addr; //@line 3127 "cPickle.c"
        var $192=$191+60; //@line 3127 "cPickle.c"
        var $193=HEAP[$192]; //@line 3127 "cPickle.c"
        FUNCTION_TABLE[$190]($193); //@line 3127 "cPickle.c"
        __label__ = 24; break; //@line 3127 "cPickle.c"
      case 24: // $bb23
        var $194=$self_addr; //@line 3128 "cPickle.c"
        var $195=$194+52; //@line 3128 "cPickle.c"
        var $196=HEAP[$195]; //@line 3128 "cPickle.c"
        _PyMem_Free($196); //@line 3128 "cPickle.c"
        var $197=$self_addr; //@line 3129 "cPickle.c"
        var $198=$197; //@line 3129 "cPickle.c"
        var $199=$198+4; //@line 3129 "cPickle.c"
        var $200=HEAP[$199]; //@line 3129 "cPickle.c"
        var $201=$200+160; //@line 3129 "cPickle.c"
        var $202=HEAP[$201]; //@line 3129 "cPickle.c"
        var $203=$self_addr; //@line 3129 "cPickle.c"
        var $204=$203; //@line 3129 "cPickle.c"
        FUNCTION_TABLE[$202]($204); //@line 3129 "cPickle.c"
        ;
        return; //@line 3130 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_traverse($self, $visit, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $visit_addr;
        var $arg_addr;
        var $retval;
        var $0;
        var $vret;
        var $vret4;
        var $vret8;
        var $vret12;
        var $vret16;
        var $vret20;
        var $vret24;
        var $vret28;
        $self_addr=$self;
        $visit_addr=$visit;
        $arg_addr=$arg;
        var $1=$self_addr; //@line 3135 "cPickle.c"
        var $2=$1+12; //@line 3135 "cPickle.c"
        var $3=HEAP[$2]; //@line 3135 "cPickle.c"
        var $4=($3)!=0; //@line 3135 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3135 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 3135 "cPickle.c"
        var $6=$5+12; //@line 3135 "cPickle.c"
        var $7=HEAP[$6]; //@line 3135 "cPickle.c"
        var $8=$visit_addr; //@line 3135 "cPickle.c"
        var $9=$arg_addr; //@line 3135 "cPickle.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 3135 "cPickle.c"
        $vret=$10; //@line 3135 "cPickle.c"
        var $11=$vret; //@line 3135 "cPickle.c"
        var $12=($11)!=0; //@line 3135 "cPickle.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3135 "cPickle.c"
      case 2: // $bb1
        var $13=$vret; //@line 3135 "cPickle.c"
        $0=$13; //@line 3135 "cPickle.c"
        __label__ = 25; break; //@line 3135 "cPickle.c"
      case 3: // $bb2
        var $14=$self_addr; //@line 3136 "cPickle.c"
        var $15=$14+20; //@line 3136 "cPickle.c"
        var $16=HEAP[$15]; //@line 3136 "cPickle.c"
        var $17=($16)!=0; //@line 3136 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3136 "cPickle.c"
      case 4: // $bb3
        var $18=$self_addr; //@line 3136 "cPickle.c"
        var $19=$18+20; //@line 3136 "cPickle.c"
        var $20=HEAP[$19]; //@line 3136 "cPickle.c"
        var $21=$visit_addr; //@line 3136 "cPickle.c"
        var $22=$arg_addr; //@line 3136 "cPickle.c"
        var $23=FUNCTION_TABLE[$21]($20, $22); //@line 3136 "cPickle.c"
        $vret4=$23; //@line 3136 "cPickle.c"
        var $24=$vret4; //@line 3136 "cPickle.c"
        var $25=($24)!=0; //@line 3136 "cPickle.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3136 "cPickle.c"
      case 5: // $bb5
        var $26=$vret4; //@line 3136 "cPickle.c"
        $0=$26; //@line 3136 "cPickle.c"
        __label__ = 25; break; //@line 3136 "cPickle.c"
      case 6: // $bb6
        var $27=$self_addr; //@line 3137 "cPickle.c"
        var $28=$27+68; //@line 3137 "cPickle.c"
        var $29=HEAP[$28]; //@line 3137 "cPickle.c"
        var $30=($29)!=0; //@line 3137 "cPickle.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 3137 "cPickle.c"
      case 7: // $bb7
        var $31=$self_addr; //@line 3137 "cPickle.c"
        var $32=$31+68; //@line 3137 "cPickle.c"
        var $33=HEAP[$32]; //@line 3137 "cPickle.c"
        var $34=$visit_addr; //@line 3137 "cPickle.c"
        var $35=$arg_addr; //@line 3137 "cPickle.c"
        var $36=FUNCTION_TABLE[$34]($33, $35); //@line 3137 "cPickle.c"
        $vret8=$36; //@line 3137 "cPickle.c"
        var $37=$vret8; //@line 3137 "cPickle.c"
        var $38=($37)!=0; //@line 3137 "cPickle.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3137 "cPickle.c"
      case 8: // $bb9
        var $39=$vret8; //@line 3137 "cPickle.c"
        $0=$39; //@line 3137 "cPickle.c"
        __label__ = 25; break; //@line 3137 "cPickle.c"
      case 9: // $bb10
        var $40=$self_addr; //@line 3138 "cPickle.c"
        var $41=$40+24; //@line 3138 "cPickle.c"
        var $42=HEAP[$41]; //@line 3138 "cPickle.c"
        var $43=($42)!=0; //@line 3138 "cPickle.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3138 "cPickle.c"
      case 10: // $bb11
        var $44=$self_addr; //@line 3138 "cPickle.c"
        var $45=$44+24; //@line 3138 "cPickle.c"
        var $46=HEAP[$45]; //@line 3138 "cPickle.c"
        var $47=$visit_addr; //@line 3138 "cPickle.c"
        var $48=$arg_addr; //@line 3138 "cPickle.c"
        var $49=FUNCTION_TABLE[$47]($46, $48); //@line 3138 "cPickle.c"
        $vret12=$49; //@line 3138 "cPickle.c"
        var $50=$vret12; //@line 3138 "cPickle.c"
        var $51=($50)!=0; //@line 3138 "cPickle.c"
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3138 "cPickle.c"
      case 11: // $bb13
        var $52=$vret12; //@line 3138 "cPickle.c"
        $0=$52; //@line 3138 "cPickle.c"
        __label__ = 25; break; //@line 3138 "cPickle.c"
      case 12: // $bb14
        var $53=$self_addr; //@line 3139 "cPickle.c"
        var $54=$53+16; //@line 3139 "cPickle.c"
        var $55=HEAP[$54]; //@line 3139 "cPickle.c"
        var $56=($55)!=0; //@line 3139 "cPickle.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 3139 "cPickle.c"
      case 13: // $bb15
        var $57=$self_addr; //@line 3139 "cPickle.c"
        var $58=$57+16; //@line 3139 "cPickle.c"
        var $59=HEAP[$58]; //@line 3139 "cPickle.c"
        var $60=$visit_addr; //@line 3139 "cPickle.c"
        var $61=$arg_addr; //@line 3139 "cPickle.c"
        var $62=FUNCTION_TABLE[$60]($59, $61); //@line 3139 "cPickle.c"
        $vret16=$62; //@line 3139 "cPickle.c"
        var $63=$vret16; //@line 3139 "cPickle.c"
        var $64=($63)!=0; //@line 3139 "cPickle.c"
        if ($64) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3139 "cPickle.c"
      case 14: // $bb17
        var $65=$vret16; //@line 3139 "cPickle.c"
        $0=$65; //@line 3139 "cPickle.c"
        __label__ = 25; break; //@line 3139 "cPickle.c"
      case 15: // $bb18
        var $66=$self_addr; //@line 3140 "cPickle.c"
        var $67=$66+28; //@line 3140 "cPickle.c"
        var $68=HEAP[$67]; //@line 3140 "cPickle.c"
        var $69=($68)!=0; //@line 3140 "cPickle.c"
        if ($69) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3140 "cPickle.c"
      case 16: // $bb19
        var $70=$self_addr; //@line 3140 "cPickle.c"
        var $71=$70+28; //@line 3140 "cPickle.c"
        var $72=HEAP[$71]; //@line 3140 "cPickle.c"
        var $73=$visit_addr; //@line 3140 "cPickle.c"
        var $74=$arg_addr; //@line 3140 "cPickle.c"
        var $75=FUNCTION_TABLE[$73]($72, $74); //@line 3140 "cPickle.c"
        $vret20=$75; //@line 3140 "cPickle.c"
        var $76=$vret20; //@line 3140 "cPickle.c"
        var $77=($76)!=0; //@line 3140 "cPickle.c"
        if ($77) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3140 "cPickle.c"
      case 17: // $bb21
        var $78=$vret20; //@line 3140 "cPickle.c"
        $0=$78; //@line 3140 "cPickle.c"
        __label__ = 25; break; //@line 3140 "cPickle.c"
      case 18: // $bb22
        var $79=$self_addr; //@line 3141 "cPickle.c"
        var $80=$79+32; //@line 3141 "cPickle.c"
        var $81=HEAP[$80]; //@line 3141 "cPickle.c"
        var $82=($81)!=0; //@line 3141 "cPickle.c"
        if ($82) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3141 "cPickle.c"
      case 19: // $bb23
        var $83=$self_addr; //@line 3141 "cPickle.c"
        var $84=$83+32; //@line 3141 "cPickle.c"
        var $85=HEAP[$84]; //@line 3141 "cPickle.c"
        var $86=$visit_addr; //@line 3141 "cPickle.c"
        var $87=$arg_addr; //@line 3141 "cPickle.c"
        var $88=FUNCTION_TABLE[$86]($85, $87); //@line 3141 "cPickle.c"
        $vret24=$88; //@line 3141 "cPickle.c"
        var $89=$vret24; //@line 3141 "cPickle.c"
        var $90=($89)!=0; //@line 3141 "cPickle.c"
        if ($90) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3141 "cPickle.c"
      case 20: // $bb25
        var $91=$vret24; //@line 3141 "cPickle.c"
        $0=$91; //@line 3141 "cPickle.c"
        __label__ = 25; break; //@line 3141 "cPickle.c"
      case 21: // $bb26
        var $92=$self_addr; //@line 3142 "cPickle.c"
        var $93=$92+60; //@line 3142 "cPickle.c"
        var $94=HEAP[$93]; //@line 3142 "cPickle.c"
        var $95=($94)!=0; //@line 3142 "cPickle.c"
        if ($95) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 3142 "cPickle.c"
      case 22: // $bb27
        var $96=$self_addr; //@line 3142 "cPickle.c"
        var $97=$96+60; //@line 3142 "cPickle.c"
        var $98=HEAP[$97]; //@line 3142 "cPickle.c"
        var $99=$visit_addr; //@line 3142 "cPickle.c"
        var $100=$arg_addr; //@line 3142 "cPickle.c"
        var $101=FUNCTION_TABLE[$99]($98, $100); //@line 3142 "cPickle.c"
        $vret28=$101; //@line 3142 "cPickle.c"
        var $102=$vret28; //@line 3142 "cPickle.c"
        var $103=($102)!=0; //@line 3142 "cPickle.c"
        if ($103) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3142 "cPickle.c"
      case 23: // $bb29
        var $104=$vret28; //@line 3142 "cPickle.c"
        $0=$104; //@line 3142 "cPickle.c"
        __label__ = 25; break; //@line 3142 "cPickle.c"
      case 24: // $bb30
        $0=0; //@line 3143 "cPickle.c"
        __label__ = 25; break; //@line 3143 "cPickle.c"
      case 25: // $bb31
        var $105=$0; //@line 3135 "cPickle.c"
        $retval=$105; //@line 3135 "cPickle.c"
        var $retval32=$retval; //@line 3135 "cPickle.c"
        ;
        return $retval32; //@line 3135 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_clear($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        var $_py_tmp4;
        var $_py_tmp8;
        var $_py_tmp12;
        var $_py_tmp16;
        var $_py_tmp20;
        var $_py_tmp24;
        var $_py_tmp28;
        $self_addr=$self;
        var $1=$self_addr; //@line 3149 "cPickle.c"
        var $2=$1+12; //@line 3149 "cPickle.c"
        var $3=HEAP[$2]; //@line 3149 "cPickle.c"
        var $4=($3)!=0; //@line 3149 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3149 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 3149 "cPickle.c"
        var $6=$5+12; //@line 3149 "cPickle.c"
        var $7=HEAP[$6]; //@line 3149 "cPickle.c"
        $_py_tmp=$7; //@line 3149 "cPickle.c"
        var $8=$self_addr; //@line 3149 "cPickle.c"
        var $9=$8+12; //@line 3149 "cPickle.c"
        HEAP[$9]=0; //@line 3149 "cPickle.c"
        var $10=$_py_tmp; //@line 3149 "cPickle.c"
        var $11=$10; //@line 3149 "cPickle.c"
        var $12=HEAP[$11]; //@line 3149 "cPickle.c"
        var $13=($12) - 1; //@line 3149 "cPickle.c"
        var $14=$_py_tmp; //@line 3149 "cPickle.c"
        var $15=$14; //@line 3149 "cPickle.c"
        HEAP[$15]=$13; //@line 3149 "cPickle.c"
        var $16=$_py_tmp; //@line 3149 "cPickle.c"
        var $17=$16; //@line 3149 "cPickle.c"
        var $18=HEAP[$17]; //@line 3149 "cPickle.c"
        var $19=($18)==0; //@line 3149 "cPickle.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3149 "cPickle.c"
      case 2: // $bb1
        var $20=$_py_tmp; //@line 3149 "cPickle.c"
        var $21=$20+4; //@line 3149 "cPickle.c"
        var $22=HEAP[$21]; //@line 3149 "cPickle.c"
        var $23=$22+24; //@line 3149 "cPickle.c"
        var $24=HEAP[$23]; //@line 3149 "cPickle.c"
        var $25=$_py_tmp; //@line 3149 "cPickle.c"
        FUNCTION_TABLE[$24]($25); //@line 3149 "cPickle.c"
        __label__ = 3; break; //@line 3149 "cPickle.c"
      case 3: // $bb2
        var $26=$self_addr; //@line 3150 "cPickle.c"
        var $27=$26+20; //@line 3150 "cPickle.c"
        var $28=HEAP[$27]; //@line 3150 "cPickle.c"
        var $29=($28)!=0; //@line 3150 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3150 "cPickle.c"
      case 4: // $bb3
        var $30=$self_addr; //@line 3150 "cPickle.c"
        var $31=$30+20; //@line 3150 "cPickle.c"
        var $32=HEAP[$31]; //@line 3150 "cPickle.c"
        $_py_tmp4=$32; //@line 3150 "cPickle.c"
        var $33=$self_addr; //@line 3150 "cPickle.c"
        var $34=$33+20; //@line 3150 "cPickle.c"
        HEAP[$34]=0; //@line 3150 "cPickle.c"
        var $35=$_py_tmp4; //@line 3150 "cPickle.c"
        var $36=$35; //@line 3150 "cPickle.c"
        var $37=HEAP[$36]; //@line 3150 "cPickle.c"
        var $38=($37) - 1; //@line 3150 "cPickle.c"
        var $39=$_py_tmp4; //@line 3150 "cPickle.c"
        var $40=$39; //@line 3150 "cPickle.c"
        HEAP[$40]=$38; //@line 3150 "cPickle.c"
        var $41=$_py_tmp4; //@line 3150 "cPickle.c"
        var $42=$41; //@line 3150 "cPickle.c"
        var $43=HEAP[$42]; //@line 3150 "cPickle.c"
        var $44=($43)==0; //@line 3150 "cPickle.c"
        if ($44) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3150 "cPickle.c"
      case 5: // $bb5
        var $45=$_py_tmp4; //@line 3150 "cPickle.c"
        var $46=$45+4; //@line 3150 "cPickle.c"
        var $47=HEAP[$46]; //@line 3150 "cPickle.c"
        var $48=$47+24; //@line 3150 "cPickle.c"
        var $49=HEAP[$48]; //@line 3150 "cPickle.c"
        var $50=$_py_tmp4; //@line 3150 "cPickle.c"
        FUNCTION_TABLE[$49]($50); //@line 3150 "cPickle.c"
        __label__ = 6; break; //@line 3150 "cPickle.c"
      case 6: // $bb6
        var $51=$self_addr; //@line 3151 "cPickle.c"
        var $52=$51+68; //@line 3151 "cPickle.c"
        var $53=HEAP[$52]; //@line 3151 "cPickle.c"
        var $54=($53)!=0; //@line 3151 "cPickle.c"
        if ($54) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 3151 "cPickle.c"
      case 7: // $bb7
        var $55=$self_addr; //@line 3151 "cPickle.c"
        var $56=$55+68; //@line 3151 "cPickle.c"
        var $57=HEAP[$56]; //@line 3151 "cPickle.c"
        $_py_tmp8=$57; //@line 3151 "cPickle.c"
        var $58=$self_addr; //@line 3151 "cPickle.c"
        var $59=$58+68; //@line 3151 "cPickle.c"
        HEAP[$59]=0; //@line 3151 "cPickle.c"
        var $60=$_py_tmp8; //@line 3151 "cPickle.c"
        var $61=$60; //@line 3151 "cPickle.c"
        var $62=HEAP[$61]; //@line 3151 "cPickle.c"
        var $63=($62) - 1; //@line 3151 "cPickle.c"
        var $64=$_py_tmp8; //@line 3151 "cPickle.c"
        var $65=$64; //@line 3151 "cPickle.c"
        HEAP[$65]=$63; //@line 3151 "cPickle.c"
        var $66=$_py_tmp8; //@line 3151 "cPickle.c"
        var $67=$66; //@line 3151 "cPickle.c"
        var $68=HEAP[$67]; //@line 3151 "cPickle.c"
        var $69=($68)==0; //@line 3151 "cPickle.c"
        if ($69) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3151 "cPickle.c"
      case 8: // $bb9
        var $70=$_py_tmp8; //@line 3151 "cPickle.c"
        var $71=$70+4; //@line 3151 "cPickle.c"
        var $72=HEAP[$71]; //@line 3151 "cPickle.c"
        var $73=$72+24; //@line 3151 "cPickle.c"
        var $74=HEAP[$73]; //@line 3151 "cPickle.c"
        var $75=$_py_tmp8; //@line 3151 "cPickle.c"
        FUNCTION_TABLE[$74]($75); //@line 3151 "cPickle.c"
        __label__ = 9; break; //@line 3151 "cPickle.c"
      case 9: // $bb10
        var $76=$self_addr; //@line 3152 "cPickle.c"
        var $77=$76+24; //@line 3152 "cPickle.c"
        var $78=HEAP[$77]; //@line 3152 "cPickle.c"
        var $79=($78)!=0; //@line 3152 "cPickle.c"
        if ($79) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3152 "cPickle.c"
      case 10: // $bb11
        var $80=$self_addr; //@line 3152 "cPickle.c"
        var $81=$80+24; //@line 3152 "cPickle.c"
        var $82=HEAP[$81]; //@line 3152 "cPickle.c"
        $_py_tmp12=$82; //@line 3152 "cPickle.c"
        var $83=$self_addr; //@line 3152 "cPickle.c"
        var $84=$83+24; //@line 3152 "cPickle.c"
        HEAP[$84]=0; //@line 3152 "cPickle.c"
        var $85=$_py_tmp12; //@line 3152 "cPickle.c"
        var $86=$85; //@line 3152 "cPickle.c"
        var $87=HEAP[$86]; //@line 3152 "cPickle.c"
        var $88=($87) - 1; //@line 3152 "cPickle.c"
        var $89=$_py_tmp12; //@line 3152 "cPickle.c"
        var $90=$89; //@line 3152 "cPickle.c"
        HEAP[$90]=$88; //@line 3152 "cPickle.c"
        var $91=$_py_tmp12; //@line 3152 "cPickle.c"
        var $92=$91; //@line 3152 "cPickle.c"
        var $93=HEAP[$92]; //@line 3152 "cPickle.c"
        var $94=($93)==0; //@line 3152 "cPickle.c"
        if ($94) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3152 "cPickle.c"
      case 11: // $bb13
        var $95=$_py_tmp12; //@line 3152 "cPickle.c"
        var $96=$95+4; //@line 3152 "cPickle.c"
        var $97=HEAP[$96]; //@line 3152 "cPickle.c"
        var $98=$97+24; //@line 3152 "cPickle.c"
        var $99=HEAP[$98]; //@line 3152 "cPickle.c"
        var $100=$_py_tmp12; //@line 3152 "cPickle.c"
        FUNCTION_TABLE[$99]($100); //@line 3152 "cPickle.c"
        __label__ = 12; break; //@line 3152 "cPickle.c"
      case 12: // $bb14
        var $101=$self_addr; //@line 3153 "cPickle.c"
        var $102=$101+16; //@line 3153 "cPickle.c"
        var $103=HEAP[$102]; //@line 3153 "cPickle.c"
        var $104=($103)!=0; //@line 3153 "cPickle.c"
        if ($104) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 3153 "cPickle.c"
      case 13: // $bb15
        var $105=$self_addr; //@line 3153 "cPickle.c"
        var $106=$105+16; //@line 3153 "cPickle.c"
        var $107=HEAP[$106]; //@line 3153 "cPickle.c"
        $_py_tmp16=$107; //@line 3153 "cPickle.c"
        var $108=$self_addr; //@line 3153 "cPickle.c"
        var $109=$108+16; //@line 3153 "cPickle.c"
        HEAP[$109]=0; //@line 3153 "cPickle.c"
        var $110=$_py_tmp16; //@line 3153 "cPickle.c"
        var $111=$110; //@line 3153 "cPickle.c"
        var $112=HEAP[$111]; //@line 3153 "cPickle.c"
        var $113=($112) - 1; //@line 3153 "cPickle.c"
        var $114=$_py_tmp16; //@line 3153 "cPickle.c"
        var $115=$114; //@line 3153 "cPickle.c"
        HEAP[$115]=$113; //@line 3153 "cPickle.c"
        var $116=$_py_tmp16; //@line 3153 "cPickle.c"
        var $117=$116; //@line 3153 "cPickle.c"
        var $118=HEAP[$117]; //@line 3153 "cPickle.c"
        var $119=($118)==0; //@line 3153 "cPickle.c"
        if ($119) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3153 "cPickle.c"
      case 14: // $bb17
        var $120=$_py_tmp16; //@line 3153 "cPickle.c"
        var $121=$120+4; //@line 3153 "cPickle.c"
        var $122=HEAP[$121]; //@line 3153 "cPickle.c"
        var $123=$122+24; //@line 3153 "cPickle.c"
        var $124=HEAP[$123]; //@line 3153 "cPickle.c"
        var $125=$_py_tmp16; //@line 3153 "cPickle.c"
        FUNCTION_TABLE[$124]($125); //@line 3153 "cPickle.c"
        __label__ = 15; break; //@line 3153 "cPickle.c"
      case 15: // $bb18
        var $126=$self_addr; //@line 3154 "cPickle.c"
        var $127=$126+28; //@line 3154 "cPickle.c"
        var $128=HEAP[$127]; //@line 3154 "cPickle.c"
        var $129=($128)!=0; //@line 3154 "cPickle.c"
        if ($129) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3154 "cPickle.c"
      case 16: // $bb19
        var $130=$self_addr; //@line 3154 "cPickle.c"
        var $131=$130+28; //@line 3154 "cPickle.c"
        var $132=HEAP[$131]; //@line 3154 "cPickle.c"
        $_py_tmp20=$132; //@line 3154 "cPickle.c"
        var $133=$self_addr; //@line 3154 "cPickle.c"
        var $134=$133+28; //@line 3154 "cPickle.c"
        HEAP[$134]=0; //@line 3154 "cPickle.c"
        var $135=$_py_tmp20; //@line 3154 "cPickle.c"
        var $136=$135; //@line 3154 "cPickle.c"
        var $137=HEAP[$136]; //@line 3154 "cPickle.c"
        var $138=($137) - 1; //@line 3154 "cPickle.c"
        var $139=$_py_tmp20; //@line 3154 "cPickle.c"
        var $140=$139; //@line 3154 "cPickle.c"
        HEAP[$140]=$138; //@line 3154 "cPickle.c"
        var $141=$_py_tmp20; //@line 3154 "cPickle.c"
        var $142=$141; //@line 3154 "cPickle.c"
        var $143=HEAP[$142]; //@line 3154 "cPickle.c"
        var $144=($143)==0; //@line 3154 "cPickle.c"
        if ($144) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3154 "cPickle.c"
      case 17: // $bb21
        var $145=$_py_tmp20; //@line 3154 "cPickle.c"
        var $146=$145+4; //@line 3154 "cPickle.c"
        var $147=HEAP[$146]; //@line 3154 "cPickle.c"
        var $148=$147+24; //@line 3154 "cPickle.c"
        var $149=HEAP[$148]; //@line 3154 "cPickle.c"
        var $150=$_py_tmp20; //@line 3154 "cPickle.c"
        FUNCTION_TABLE[$149]($150); //@line 3154 "cPickle.c"
        __label__ = 18; break; //@line 3154 "cPickle.c"
      case 18: // $bb22
        var $151=$self_addr; //@line 3155 "cPickle.c"
        var $152=$151+32; //@line 3155 "cPickle.c"
        var $153=HEAP[$152]; //@line 3155 "cPickle.c"
        var $154=($153)!=0; //@line 3155 "cPickle.c"
        if ($154) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3155 "cPickle.c"
      case 19: // $bb23
        var $155=$self_addr; //@line 3155 "cPickle.c"
        var $156=$155+32; //@line 3155 "cPickle.c"
        var $157=HEAP[$156]; //@line 3155 "cPickle.c"
        $_py_tmp24=$157; //@line 3155 "cPickle.c"
        var $158=$self_addr; //@line 3155 "cPickle.c"
        var $159=$158+32; //@line 3155 "cPickle.c"
        HEAP[$159]=0; //@line 3155 "cPickle.c"
        var $160=$_py_tmp24; //@line 3155 "cPickle.c"
        var $161=$160; //@line 3155 "cPickle.c"
        var $162=HEAP[$161]; //@line 3155 "cPickle.c"
        var $163=($162) - 1; //@line 3155 "cPickle.c"
        var $164=$_py_tmp24; //@line 3155 "cPickle.c"
        var $165=$164; //@line 3155 "cPickle.c"
        HEAP[$165]=$163; //@line 3155 "cPickle.c"
        var $166=$_py_tmp24; //@line 3155 "cPickle.c"
        var $167=$166; //@line 3155 "cPickle.c"
        var $168=HEAP[$167]; //@line 3155 "cPickle.c"
        var $169=($168)==0; //@line 3155 "cPickle.c"
        if ($169) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3155 "cPickle.c"
      case 20: // $bb25
        var $170=$_py_tmp24; //@line 3155 "cPickle.c"
        var $171=$170+4; //@line 3155 "cPickle.c"
        var $172=HEAP[$171]; //@line 3155 "cPickle.c"
        var $173=$172+24; //@line 3155 "cPickle.c"
        var $174=HEAP[$173]; //@line 3155 "cPickle.c"
        var $175=$_py_tmp24; //@line 3155 "cPickle.c"
        FUNCTION_TABLE[$174]($175); //@line 3155 "cPickle.c"
        __label__ = 21; break; //@line 3155 "cPickle.c"
      case 21: // $bb26
        var $176=$self_addr; //@line 3156 "cPickle.c"
        var $177=$176+60; //@line 3156 "cPickle.c"
        var $178=HEAP[$177]; //@line 3156 "cPickle.c"
        var $179=($178)!=0; //@line 3156 "cPickle.c"
        if ($179) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 3156 "cPickle.c"
      case 22: // $bb27
        var $180=$self_addr; //@line 3156 "cPickle.c"
        var $181=$180+60; //@line 3156 "cPickle.c"
        var $182=HEAP[$181]; //@line 3156 "cPickle.c"
        $_py_tmp28=$182; //@line 3156 "cPickle.c"
        var $183=$self_addr; //@line 3156 "cPickle.c"
        var $184=$183+60; //@line 3156 "cPickle.c"
        HEAP[$184]=0; //@line 3156 "cPickle.c"
        var $185=$_py_tmp28; //@line 3156 "cPickle.c"
        var $186=$185; //@line 3156 "cPickle.c"
        var $187=HEAP[$186]; //@line 3156 "cPickle.c"
        var $188=($187) - 1; //@line 3156 "cPickle.c"
        var $189=$_py_tmp28; //@line 3156 "cPickle.c"
        var $190=$189; //@line 3156 "cPickle.c"
        HEAP[$190]=$188; //@line 3156 "cPickle.c"
        var $191=$_py_tmp28; //@line 3156 "cPickle.c"
        var $192=$191; //@line 3156 "cPickle.c"
        var $193=HEAP[$192]; //@line 3156 "cPickle.c"
        var $194=($193)==0; //@line 3156 "cPickle.c"
        if ($194) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3156 "cPickle.c"
      case 23: // $bb29
        var $195=$_py_tmp28; //@line 3156 "cPickle.c"
        var $196=$195+4; //@line 3156 "cPickle.c"
        var $197=HEAP[$196]; //@line 3156 "cPickle.c"
        var $198=$197+24; //@line 3156 "cPickle.c"
        var $199=HEAP[$198]; //@line 3156 "cPickle.c"
        var $200=$_py_tmp28; //@line 3156 "cPickle.c"
        FUNCTION_TABLE[$199]($200); //@line 3156 "cPickle.c"
        __label__ = 24; break; //@line 3156 "cPickle.c"
      case 24: // $bb30
        $0=0; //@line 3157 "cPickle.c"
        var $201=$0; //@line 3157 "cPickle.c"
        $retval=$201; //@line 3157 "cPickle.c"
        var $retval31=$retval; //@line 3157 "cPickle.c"
        ;
        return $retval31; //@line 3157 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_get_pers_func($p) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $retval;
        var $0;
        $p_addr=$p;
        var $1=$p_addr; //@line 3163 "cPickle.c"
        var $2=$1+28; //@line 3163 "cPickle.c"
        var $3=HEAP[$2]; //@line 3163 "cPickle.c"
        var $4=($3)==0; //@line 3163 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3163 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_AttributeError]; //@line 3164 "cPickle.c"
        _PyErr_SetString($5, __str68); //@line 3164 "cPickle.c"
        __label__ = 3; break; //@line 3164 "cPickle.c"
      case 2: // $bb1
        var $6=$p_addr; //@line 3166 "cPickle.c"
        var $7=$6+28; //@line 3166 "cPickle.c"
        var $8=HEAP[$7]; //@line 3166 "cPickle.c"
        var $9=$8; //@line 3166 "cPickle.c"
        var $10=HEAP[$9]; //@line 3166 "cPickle.c"
        var $11=($10) + 1; //@line 3166 "cPickle.c"
        var $12=$8; //@line 3166 "cPickle.c"
        HEAP[$12]=$11; //@line 3166 "cPickle.c"
        __label__ = 3; break; //@line 3166 "cPickle.c"
      case 3: // $bb2
        var $13=$p_addr; //@line 3167 "cPickle.c"
        var $14=$13+28; //@line 3167 "cPickle.c"
        var $15=HEAP[$14]; //@line 3167 "cPickle.c"
        $0=$15; //@line 3167 "cPickle.c"
        var $16=$0; //@line 3167 "cPickle.c"
        $retval=$16; //@line 3167 "cPickle.c"
        var $retval3=$retval; //@line 3167 "cPickle.c"
        ;
        return $retval3; //@line 3167 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_set_pers_func($p, $v) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $v_addr;
        var $retval;
        var $0;
        $p_addr=$p;
        $v_addr=$v;
        var $1=$v_addr; //@line 3173 "cPickle.c"
        var $2=($1)==0; //@line 3173 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3173 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_TypeError]; //@line 3174 "cPickle.c"
        _PyErr_SetString($3, __str69); //@line 3174 "cPickle.c"
        $0=-1; //@line 3176 "cPickle.c"
        __label__ = 6; break; //@line 3176 "cPickle.c"
      case 2: // $bb1
        var $4=$p_addr; //@line 3178 "cPickle.c"
        var $5=$4+28; //@line 3178 "cPickle.c"
        var $6=HEAP[$5]; //@line 3178 "cPickle.c"
        var $7=($6)!=0; //@line 3178 "cPickle.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3178 "cPickle.c"
      case 3: // $bb2
        var $8=$p_addr; //@line 3178 "cPickle.c"
        var $9=$8+28; //@line 3178 "cPickle.c"
        var $10=HEAP[$9]; //@line 3178 "cPickle.c"
        var $11=$10; //@line 3178 "cPickle.c"
        var $12=HEAP[$11]; //@line 3178 "cPickle.c"
        var $13=($12) - 1; //@line 3178 "cPickle.c"
        var $14=$10; //@line 3178 "cPickle.c"
        HEAP[$14]=$13; //@line 3178 "cPickle.c"
        var $15=$10; //@line 3178 "cPickle.c"
        var $16=HEAP[$15]; //@line 3178 "cPickle.c"
        var $17=($16)==0; //@line 3178 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3178 "cPickle.c"
      case 4: // $bb3
        var $18=$p_addr; //@line 3178 "cPickle.c"
        var $19=$18+28; //@line 3178 "cPickle.c"
        var $20=HEAP[$19]; //@line 3178 "cPickle.c"
        var $21=$20+4; //@line 3178 "cPickle.c"
        var $22=HEAP[$21]; //@line 3178 "cPickle.c"
        var $23=$22+24; //@line 3178 "cPickle.c"
        var $24=HEAP[$23]; //@line 3178 "cPickle.c"
        var $25=$p_addr; //@line 3178 "cPickle.c"
        var $26=$25+28; //@line 3178 "cPickle.c"
        var $27=HEAP[$26]; //@line 3178 "cPickle.c"
        FUNCTION_TABLE[$24]($27); //@line 3178 "cPickle.c"
        __label__ = 5; break; //@line 3178 "cPickle.c"
      case 5: // $bb4
        var $28=$v_addr; //@line 3179 "cPickle.c"
        var $29=$28; //@line 3179 "cPickle.c"
        var $30=HEAP[$29]; //@line 3179 "cPickle.c"
        var $31=($30) + 1; //@line 3179 "cPickle.c"
        var $32=$v_addr; //@line 3179 "cPickle.c"
        var $33=$32; //@line 3179 "cPickle.c"
        HEAP[$33]=$31; //@line 3179 "cPickle.c"
        var $34=$p_addr; //@line 3180 "cPickle.c"
        var $35=$34+28; //@line 3180 "cPickle.c"
        var $36=$v_addr; //@line 3180 "cPickle.c"
        HEAP[$35]=$36; //@line 3180 "cPickle.c"
        $0=0; //@line 3181 "cPickle.c"
        __label__ = 6; break; //@line 3181 "cPickle.c"
      case 6: // $bb5
        var $37=$0; //@line 3176 "cPickle.c"
        $retval=$37; //@line 3176 "cPickle.c"
        var $retval6=$retval; //@line 3176 "cPickle.c"
        ;
        return $retval6; //@line 3176 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_set_inst_pers_func($p, $v) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $v_addr;
        var $retval;
        var $0;
        $p_addr=$p;
        $v_addr=$v;
        var $1=$v_addr; //@line 3187 "cPickle.c"
        var $2=($1)==0; //@line 3187 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3187 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_TypeError]; //@line 3188 "cPickle.c"
        _PyErr_SetString($3, __str69); //@line 3188 "cPickle.c"
        $0=-1; //@line 3190 "cPickle.c"
        __label__ = 6; break; //@line 3190 "cPickle.c"
      case 2: // $bb1
        var $4=$p_addr; //@line 3192 "cPickle.c"
        var $5=$4+32; //@line 3192 "cPickle.c"
        var $6=HEAP[$5]; //@line 3192 "cPickle.c"
        var $7=($6)!=0; //@line 3192 "cPickle.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3192 "cPickle.c"
      case 3: // $bb2
        var $8=$p_addr; //@line 3192 "cPickle.c"
        var $9=$8+32; //@line 3192 "cPickle.c"
        var $10=HEAP[$9]; //@line 3192 "cPickle.c"
        var $11=$10; //@line 3192 "cPickle.c"
        var $12=HEAP[$11]; //@line 3192 "cPickle.c"
        var $13=($12) - 1; //@line 3192 "cPickle.c"
        var $14=$10; //@line 3192 "cPickle.c"
        HEAP[$14]=$13; //@line 3192 "cPickle.c"
        var $15=$10; //@line 3192 "cPickle.c"
        var $16=HEAP[$15]; //@line 3192 "cPickle.c"
        var $17=($16)==0; //@line 3192 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3192 "cPickle.c"
      case 4: // $bb3
        var $18=$p_addr; //@line 3192 "cPickle.c"
        var $19=$18+32; //@line 3192 "cPickle.c"
        var $20=HEAP[$19]; //@line 3192 "cPickle.c"
        var $21=$20+4; //@line 3192 "cPickle.c"
        var $22=HEAP[$21]; //@line 3192 "cPickle.c"
        var $23=$22+24; //@line 3192 "cPickle.c"
        var $24=HEAP[$23]; //@line 3192 "cPickle.c"
        var $25=$p_addr; //@line 3192 "cPickle.c"
        var $26=$25+32; //@line 3192 "cPickle.c"
        var $27=HEAP[$26]; //@line 3192 "cPickle.c"
        FUNCTION_TABLE[$24]($27); //@line 3192 "cPickle.c"
        __label__ = 5; break; //@line 3192 "cPickle.c"
      case 5: // $bb4
        var $28=$v_addr; //@line 3193 "cPickle.c"
        var $29=$28; //@line 3193 "cPickle.c"
        var $30=HEAP[$29]; //@line 3193 "cPickle.c"
        var $31=($30) + 1; //@line 3193 "cPickle.c"
        var $32=$v_addr; //@line 3193 "cPickle.c"
        var $33=$32; //@line 3193 "cPickle.c"
        HEAP[$33]=$31; //@line 3193 "cPickle.c"
        var $34=$p_addr; //@line 3194 "cPickle.c"
        var $35=$34+32; //@line 3194 "cPickle.c"
        var $36=$v_addr; //@line 3194 "cPickle.c"
        HEAP[$35]=$36; //@line 3194 "cPickle.c"
        $0=0; //@line 3195 "cPickle.c"
        __label__ = 6; break; //@line 3195 "cPickle.c"
      case 6: // $bb5
        var $37=$0; //@line 3190 "cPickle.c"
        $retval=$37; //@line 3190 "cPickle.c"
        var $retval6=$retval; //@line 3190 "cPickle.c"
        ;
        return $retval6; //@line 3190 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_get_memo($p) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $retval;
        var $0;
        $p_addr=$p;
        var $1=$p_addr; //@line 3201 "cPickle.c"
        var $2=$1+20; //@line 3201 "cPickle.c"
        var $3=HEAP[$2]; //@line 3201 "cPickle.c"
        var $4=($3)==0; //@line 3201 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3201 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_AttributeError]; //@line 3202 "cPickle.c"
        _PyErr_SetString($5, __str70); //@line 3202 "cPickle.c"
        __label__ = 3; break; //@line 3202 "cPickle.c"
      case 2: // $bb1
        var $6=$p_addr; //@line 3204 "cPickle.c"
        var $7=$6+20; //@line 3204 "cPickle.c"
        var $8=HEAP[$7]; //@line 3204 "cPickle.c"
        var $9=$8; //@line 3204 "cPickle.c"
        var $10=HEAP[$9]; //@line 3204 "cPickle.c"
        var $11=($10) + 1; //@line 3204 "cPickle.c"
        var $12=$8; //@line 3204 "cPickle.c"
        HEAP[$12]=$11; //@line 3204 "cPickle.c"
        __label__ = 3; break; //@line 3204 "cPickle.c"
      case 3: // $bb2
        var $13=$p_addr; //@line 3205 "cPickle.c"
        var $14=$13+20; //@line 3205 "cPickle.c"
        var $15=HEAP[$14]; //@line 3205 "cPickle.c"
        $0=$15; //@line 3205 "cPickle.c"
        var $16=$0; //@line 3205 "cPickle.c"
        $retval=$16; //@line 3205 "cPickle.c"
        var $retval3=$retval; //@line 3205 "cPickle.c"
        ;
        return $retval3; //@line 3205 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_set_memo($p, $v) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr;
        var $v_addr;
        var $retval;
        var $0;
        $p_addr=$p;
        $v_addr=$v;
        var $1=$v_addr; //@line 3211 "cPickle.c"
        var $2=($1)==0; //@line 3211 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3211 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_TypeError]; //@line 3212 "cPickle.c"
        _PyErr_SetString($3, __str69); //@line 3212 "cPickle.c"
        $0=-1; //@line 3214 "cPickle.c"
        __label__ = 8; break; //@line 3214 "cPickle.c"
      case 2: // $bb1
        var $4=$v_addr; //@line 3216 "cPickle.c"
        var $5=$4+4; //@line 3216 "cPickle.c"
        var $6=HEAP[$5]; //@line 3216 "cPickle.c"
        var $7=$6+84; //@line 3216 "cPickle.c"
        var $8=HEAP[$7]; //@line 3216 "cPickle.c"
        var $9=($8) & 536870912; //@line 3216 "cPickle.c"
        var $10=($9)==0; //@line 3216 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3216 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[_PyExc_TypeError]; //@line 3217 "cPickle.c"
        _PyErr_SetString($11, __str71); //@line 3217 "cPickle.c"
        $0=-1; //@line 3218 "cPickle.c"
        __label__ = 8; break; //@line 3218 "cPickle.c"
      case 4: // $bb3
        var $12=$p_addr; //@line 3220 "cPickle.c"
        var $13=$12+20; //@line 3220 "cPickle.c"
        var $14=HEAP[$13]; //@line 3220 "cPickle.c"
        var $15=($14)!=0; //@line 3220 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 3220 "cPickle.c"
      case 5: // $bb4
        var $16=$p_addr; //@line 3220 "cPickle.c"
        var $17=$16+20; //@line 3220 "cPickle.c"
        var $18=HEAP[$17]; //@line 3220 "cPickle.c"
        var $19=$18; //@line 3220 "cPickle.c"
        var $20=HEAP[$19]; //@line 3220 "cPickle.c"
        var $21=($20) - 1; //@line 3220 "cPickle.c"
        var $22=$18; //@line 3220 "cPickle.c"
        HEAP[$22]=$21; //@line 3220 "cPickle.c"
        var $23=$18; //@line 3220 "cPickle.c"
        var $24=HEAP[$23]; //@line 3220 "cPickle.c"
        var $25=($24)==0; //@line 3220 "cPickle.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3220 "cPickle.c"
      case 6: // $bb5
        var $26=$p_addr; //@line 3220 "cPickle.c"
        var $27=$26+20; //@line 3220 "cPickle.c"
        var $28=HEAP[$27]; //@line 3220 "cPickle.c"
        var $29=$28+4; //@line 3220 "cPickle.c"
        var $30=HEAP[$29]; //@line 3220 "cPickle.c"
        var $31=$30+24; //@line 3220 "cPickle.c"
        var $32=HEAP[$31]; //@line 3220 "cPickle.c"
        var $33=$p_addr; //@line 3220 "cPickle.c"
        var $34=$33+20; //@line 3220 "cPickle.c"
        var $35=HEAP[$34]; //@line 3220 "cPickle.c"
        FUNCTION_TABLE[$32]($35); //@line 3220 "cPickle.c"
        __label__ = 7; break; //@line 3220 "cPickle.c"
      case 7: // $bb6
        var $36=$v_addr; //@line 3221 "cPickle.c"
        var $37=$36; //@line 3221 "cPickle.c"
        var $38=HEAP[$37]; //@line 3221 "cPickle.c"
        var $39=($38) + 1; //@line 3221 "cPickle.c"
        var $40=$v_addr; //@line 3221 "cPickle.c"
        var $41=$40; //@line 3221 "cPickle.c"
        HEAP[$41]=$39; //@line 3221 "cPickle.c"
        var $42=$p_addr; //@line 3222 "cPickle.c"
        var $43=$42+20; //@line 3222 "cPickle.c"
        var $44=$v_addr; //@line 3222 "cPickle.c"
        HEAP[$43]=$44; //@line 3222 "cPickle.c"
        $0=0; //@line 3223 "cPickle.c"
        __label__ = 8; break; //@line 3223 "cPickle.c"
      case 8: // $bb7
        var $45=$0; //@line 3214 "cPickle.c"
        $retval=$45; //@line 3214 "cPickle.c"
        var $retval8=$retval; //@line 3214 "cPickle.c"
        ;
        return $retval8; //@line 3214 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_get_error($p) {
    ;
    var __label__;
  
    var $p_addr;
    var $retval;
    var $0;
    $p_addr=$p;
    var $1=HEAP[_PicklingError]; //@line 3230 "cPickle.c"
    var $2=$1; //@line 3230 "cPickle.c"
    var $3=HEAP[$2]; //@line 3230 "cPickle.c"
    var $4=($3) + 1; //@line 3230 "cPickle.c"
    var $5=$1; //@line 3230 "cPickle.c"
    HEAP[$5]=$4; //@line 3230 "cPickle.c"
    var $6=HEAP[_PicklingError]; //@line 3231 "cPickle.c"
    $0=$6; //@line 3231 "cPickle.c"
    var $7=$0; //@line 3231 "cPickle.c"
    $retval=$7; //@line 3231 "cPickle.c"
    var $retval1=$retval; //@line 3231 "cPickle.c"
    ;
    return $retval1; //@line 3231 "cPickle.c"
  }
  

  function _find_class($py_module_name, $py_global_name, $fc) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $py_module_name_addr;
        var $py_global_name_addr;
        var $fc_addr;
        var $retval;
        var $0;
        var $global;
        var $module;
        $py_module_name_addr=$py_module_name;
        $py_global_name_addr=$py_global_name;
        $fc_addr=$fc;
        $global=0; //@line 3288 "cPickle.c"
        var $1=$fc_addr; //@line 3290 "cPickle.c"
        var $2=($1)!=0; //@line 3290 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 3290 "cPickle.c"
      case 1: // $bb
        var $3=$fc_addr; //@line 3291 "cPickle.c"
        var $4=($3)==(__Py_NoneStruct); //@line 3291 "cPickle.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3291 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[_UnpicklingError]; //@line 3292 "cPickle.c"
        _PyErr_SetString($5, __str77); //@line 3292 "cPickle.c"
        $0=0; //@line 3294 "cPickle.c"
        __label__ = 13; break; //@line 3294 "cPickle.c"
      case 3: // $bb2
        var $6=$fc_addr; //@line 3296 "cPickle.c"
        var $7=$py_module_name_addr; //@line 3296 "cPickle.c"
        var $8=$py_global_name_addr; //@line 3296 "cPickle.c"
        var $9=_PyObject_CallFunctionObjArgs($6, $7, $8, 0); //@line 3296 "cPickle.c"
        $0=$9; //@line 3296 "cPickle.c"
        __label__ = 13; break; //@line 3296 "cPickle.c"
      case 4: // $bb3
        var $10=_PySys_GetObject(__str7); //@line 3300 "cPickle.c"
        $module=$10; //@line 3300 "cPickle.c"
        var $11=$module; //@line 3301 "cPickle.c"
        var $12=($11)==0; //@line 3301 "cPickle.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3301 "cPickle.c"
      case 5: // $bb4
        $0=0; //@line 3302 "cPickle.c"
        __label__ = 13; break; //@line 3302 "cPickle.c"
      case 6: // $bb5
        var $13=$module; //@line 3304 "cPickle.c"
        var $14=$py_module_name_addr; //@line 3304 "cPickle.c"
        var $15=_PyDict_GetItem($13, $14); //@line 3304 "cPickle.c"
        $module=$15; //@line 3304 "cPickle.c"
        var $16=$module; //@line 3305 "cPickle.c"
        var $17=($16)==0; //@line 3305 "cPickle.c"
        if ($17) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 3305 "cPickle.c"
      case 7: // $bb6
        var $18=$py_module_name_addr; //@line 3306 "cPickle.c"
        var $19=_PyImport_Import($18); //@line 3306 "cPickle.c"
        $module=$19; //@line 3306 "cPickle.c"
        var $20=$module; //@line 3307 "cPickle.c"
        var $21=($20)==0; //@line 3307 "cPickle.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3307 "cPickle.c"
      case 8: // $bb7
        $0=0; //@line 3308 "cPickle.c"
        __label__ = 13; break; //@line 3308 "cPickle.c"
      case 9: // $bb8
        var $22=$module; //@line 3309 "cPickle.c"
        var $23=$py_global_name_addr; //@line 3309 "cPickle.c"
        var $24=_PyObject_GetAttr($22, $23); //@line 3309 "cPickle.c"
        $global=$24; //@line 3309 "cPickle.c"
        var $25=$module; //@line 3310 "cPickle.c"
        var $26=$25; //@line 3310 "cPickle.c"
        var $27=HEAP[$26]; //@line 3310 "cPickle.c"
        var $28=($27) - 1; //@line 3310 "cPickle.c"
        var $29=$module; //@line 3310 "cPickle.c"
        var $30=$29; //@line 3310 "cPickle.c"
        HEAP[$30]=$28; //@line 3310 "cPickle.c"
        var $31=$module; //@line 3310 "cPickle.c"
        var $32=$31; //@line 3310 "cPickle.c"
        var $33=HEAP[$32]; //@line 3310 "cPickle.c"
        var $34=($33)==0; //@line 3310 "cPickle.c"
        if ($34) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3310 "cPickle.c"
      case 10: // $bb9
        var $35=$module; //@line 3310 "cPickle.c"
        var $36=$35+4; //@line 3310 "cPickle.c"
        var $37=HEAP[$36]; //@line 3310 "cPickle.c"
        var $38=$37+24; //@line 3310 "cPickle.c"
        var $39=HEAP[$38]; //@line 3310 "cPickle.c"
        var $40=$module; //@line 3310 "cPickle.c"
        FUNCTION_TABLE[$39]($40); //@line 3310 "cPickle.c"
        __label__ = 12; break; //@line 3310 "cPickle.c"
      case 11: // $bb11
        var $41=$module; //@line 3313 "cPickle.c"
        var $42=$py_global_name_addr; //@line 3313 "cPickle.c"
        var $43=_PyObject_GetAttr($41, $42); //@line 3313 "cPickle.c"
        $global=$43; //@line 3313 "cPickle.c"
        __label__ = 12; break; //@line 3313 "cPickle.c"
      case 12: // $bb12
        var $44=$global; //@line 3314 "cPickle.c"
        $0=$44; //@line 3314 "cPickle.c"
        __label__ = 13; break; //@line 3314 "cPickle.c"
      case 13: // $bb13
        var $45=$0; //@line 3294 "cPickle.c"
        $retval=$45; //@line 3294 "cPickle.c"
        var $retval14=$retval; //@line 3294 "cPickle.c"
        ;
        return $retval14; //@line 3294 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_int($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr_i;
        var $n_addr_i;
        var $retval_i2;
        var $0;
        var $r_i;
        var $retval_i;
        var $1;
        var $self_addr;
        var $retval;
        var $2;
        var $py_int;
        var $endptr=__stackBase__;
        var $s=__stackBase__+4;
        var $len;
        var $res;
        var $l;
        $self_addr=$self;
        $py_int=0; //@line 3346 "cPickle.c"
        $res=-1; //@line 3348 "cPickle.c"
        var $3=$self_addr; //@line 3351 "cPickle.c"
        var $4=$3+64; //@line 3351 "cPickle.c"
        var $5=HEAP[$4]; //@line 3351 "cPickle.c"
        var $6=$self_addr; //@line 3351 "cPickle.c"
        var $7=FUNCTION_TABLE[$5]($6, $s); //@line 3351 "cPickle.c"
        $len=$7; //@line 3351 "cPickle.c"
        var $8=$len; //@line 3351 "cPickle.c"
        var $9=($8) < 0; //@line 3351 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3351 "cPickle.c"
      case 1: // $bb
        $2=-1; //@line 3351 "cPickle.c"
        __label__ = 25; break; //@line 3351 "cPickle.c"
      case 2: // $bb1
        var $10=$len; //@line 3352 "cPickle.c"
        var $11=($10) <= 1; //@line 3352 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3352 "cPickle.c"
      case 3: // $bb2
        var $12=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($12, __str79); //@line 3339 "cPickle.c"
        $1=-1; //@line 3340 "cPickle.c"
        var $13=$1; //@line 3340 "cPickle.c"
        $retval_i=$13; //@line 3340 "cPickle.c"
        var $retval1_i=$retval_i; //@line 3340 "cPickle.c"
        $2=$retval1_i; //@line 3352 "cPickle.c"
        __label__ = 25; break; //@line 3352 "cPickle.c"
      case 4: // $bb3
        var $14=HEAP[$s]; //@line 3353 "cPickle.c"
        var $15=$len; //@line 3353 "cPickle.c"
        $s_addr_i=$14;
        $n_addr_i=$15;
        var $16=$n_addr_i; //@line 705 "cPickle.c"
        var $17=($16) + 1; //@line 705 "cPickle.c"
        var $18=_malloc($17); //@line 705 "cPickle.c"
        $r_i=$18; //@line 705 "cPickle.c"
        var $19=$r_i; //@line 706 "cPickle.c"
        var $20=($19)==0; //@line 706 "cPickle.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 706 "cPickle.c"
      case 5: // $bb_i
        var $21=_PyErr_NoMemory(); //@line 707 "cPickle.c"
        var $22=$21; //@line 707 "cPickle.c"
        $0=$22; //@line 707 "cPickle.c"
        __lastLabel__ = 5; __label__ = 7; break; //@line 707 "cPickle.c"
      case 6: // $bb1_i
        var $23=$n_addr_i; //@line 708 "cPickle.c"
        var $24=$r_i; //@line 708 "cPickle.c"
        var $25=$s_addr_i; //@line 708 "cPickle.c"
        _llvm_memcpy_p0i8_p0i8_i32($24, $25, $23, 1, 0); //@line 708 "cPickle.c"
        var $26=$r_i; //@line 709 "cPickle.c"
        var $27=$n_addr_i; //@line 709 "cPickle.c"
        var $28=$26+$27; //@line 709 "cPickle.c"
        HEAP[$28]=0; //@line 709 "cPickle.c"
        var $29=$r_i; //@line 710 "cPickle.c"
        $0=$29; //@line 710 "cPickle.c"
        __lastLabel__ = 6; __label__ = 7; break; //@line 710 "cPickle.c"
      case 7: // $pystrndup_exit
        var $30=__lastLabel__ == 5 ? $22 : ($29);
        $retval_i2=$30; //@line 707 "cPickle.c"
        HEAP[$s]=$30; //@line 3353 "cPickle.c"
        var $31=($30)==0; //@line 3353 "cPickle.c"
        if ($31) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3353 "cPickle.c"
      case 8: // $bb4
        $2=-1; //@line 3353 "cPickle.c"
        __label__ = 25; break; //@line 3353 "cPickle.c"
      case 9: // $bb5
        var $32=___errno_location(); //@line 3355 "cPickle.c"
        HEAP[$32]=0; //@line 3355 "cPickle.c"
        var $33=HEAP[$s]; //@line 3356 "cPickle.c"
        var $34=_strtol($33, $endptr, 0); //@line 3356 "cPickle.c"
        $l=$34; //@line 3356 "cPickle.c"
        var $35=___errno_location(); //@line 3358 "cPickle.c"
        var $36=HEAP[$35]; //@line 3358 "cPickle.c"
        var $37=($36)!=0; //@line 3358 "cPickle.c"
        if ($37) { __label__ = 12; break; } else { __label__ = 10; break; } //@line 3358 "cPickle.c"
      case 10: // $bb6
        var $38=HEAP[$endptr]; //@line 3358 "cPickle.c"
        var $39=HEAP[$38]; //@line 3358 "cPickle.c"
        var $40=($39)!=10; //@line 3358 "cPickle.c"
        if ($40) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 3358 "cPickle.c"
      case 11: // $bb7
        var $41=HEAP[$endptr]; //@line 3358 "cPickle.c"
        var $42=$41+1; //@line 3358 "cPickle.c"
        var $43=HEAP[$42]; //@line 3358 "cPickle.c"
        var $44=($43)!=0; //@line 3358 "cPickle.c"
        if ($44) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 3358 "cPickle.c"
      case 12: // $bb8
        var $45=___errno_location(); //@line 3361 "cPickle.c"
        HEAP[$45]=0; //@line 3361 "cPickle.c"
        var $46=HEAP[$s]; //@line 3362 "cPickle.c"
        var $47=_PyLong_FromString($46, 0, 0); //@line 3362 "cPickle.c"
        $py_int=$47; //@line 3362 "cPickle.c"
        var $48=($47)==0; //@line 3363 "cPickle.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 18; break; } //@line 3363 "cPickle.c"
      case 13: // $bb9
        var $49=HEAP[_PyExc_ValueError]; //@line 3364 "cPickle.c"
        _PyErr_SetString($49, __str80); //@line 3364 "cPickle.c"
        __label__ = 24; break; //@line 3364 "cPickle.c"
      case 14: // $bb11
        var $50=$len; //@line 3370 "cPickle.c"
        var $51=($50)!=3; //@line 3370 "cPickle.c"
        if ($51) { __label__ = 17; break; } else { __label__ = 15; break; } //@line 3370 "cPickle.c"
      case 15: // $bb12
        var $52=$l; //@line 3370 "cPickle.c"
        var $53=($52)==0; //@line 3370 "cPickle.c"
        var $54=$l; //@line 3370 "cPickle.c"
        var $55=($54)==1; //@line 3370 "cPickle.c"
        var $or_cond=($53) | ($55);
        if ($or_cond) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3370 "cPickle.c"
      case 16: // $bb14
        var $56=$l; //@line 3371 "cPickle.c"
        var $57=_PyBool_FromLong($56); //@line 3371 "cPickle.c"
        $py_int=$57; //@line 3371 "cPickle.c"
        var $58=$py_int; //@line 3371 "cPickle.c"
        var $59=($58)==0; //@line 3371 "cPickle.c"
        if ($59) { __label__ = 24; break; } else { __label__ = 18; break; } //@line 3371 "cPickle.c"
      case 17: // $bb16
        var $60=$l; //@line 3374 "cPickle.c"
        var $61=_PyInt_FromLong($60); //@line 3374 "cPickle.c"
        $py_int=$61; //@line 3374 "cPickle.c"
        var $62=($61)==0; //@line 3374 "cPickle.c"
        if ($62) { __label__ = 24; break; } else { __label__ = 18; break; } //@line 3374 "cPickle.c"
      case 18: // $bb17
        var $63=HEAP[$s]; //@line 3378 "cPickle.c"
        _free($63); //@line 3378 "cPickle.c"
        var $64=$self_addr; //@line 3379 "cPickle.c"
        var $65=$64+32; //@line 3379 "cPickle.c"
        var $66=HEAP[$65]; //@line 3379 "cPickle.c"
        var $67=$66+8; //@line 3379 "cPickle.c"
        var $68=HEAP[$67]; //@line 3379 "cPickle.c"
        var $69=$self_addr; //@line 3379 "cPickle.c"
        var $70=$69+32; //@line 3379 "cPickle.c"
        var $71=HEAP[$70]; //@line 3379 "cPickle.c"
        var $72=$71+12; //@line 3379 "cPickle.c"
        var $73=HEAP[$72]; //@line 3379 "cPickle.c"
        var $74=($68)==($73); //@line 3379 "cPickle.c"
        if ($74) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 3379 "cPickle.c"
      case 19: // $bb18
        var $75=$self_addr; //@line 3379 "cPickle.c"
        var $76=$75+32; //@line 3379 "cPickle.c"
        var $77=HEAP[$76]; //@line 3379 "cPickle.c"
        var $78=_Pdata_grow($77); //@line 3379 "cPickle.c"
        var $79=($78) < 0; //@line 3379 "cPickle.c"
        if ($79) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 3379 "cPickle.c"
      case 20: // $bb19
        var $80=$py_int; //@line 3379 "cPickle.c"
        var $81=$80; //@line 3379 "cPickle.c"
        var $82=HEAP[$81]; //@line 3379 "cPickle.c"
        var $83=($82) - 1; //@line 3379 "cPickle.c"
        var $84=$py_int; //@line 3379 "cPickle.c"
        var $85=$84; //@line 3379 "cPickle.c"
        HEAP[$85]=$83; //@line 3379 "cPickle.c"
        var $86=$py_int; //@line 3379 "cPickle.c"
        var $87=$86; //@line 3379 "cPickle.c"
        var $88=HEAP[$87]; //@line 3379 "cPickle.c"
        var $89=($88)==0; //@line 3379 "cPickle.c"
        if ($89) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 3379 "cPickle.c"
      case 21: // $bb20
        var $90=$py_int; //@line 3379 "cPickle.c"
        var $91=$90+4; //@line 3379 "cPickle.c"
        var $92=HEAP[$91]; //@line 3379 "cPickle.c"
        var $93=$92+24; //@line 3379 "cPickle.c"
        var $94=HEAP[$93]; //@line 3379 "cPickle.c"
        var $95=$py_int; //@line 3379 "cPickle.c"
        FUNCTION_TABLE[$94]($95); //@line 3379 "cPickle.c"
        __label__ = 22; break; //@line 3379 "cPickle.c"
      case 22: // $bb21
        $2=-1; //@line 3379 "cPickle.c"
        __label__ = 25; break; //@line 3379 "cPickle.c"
      case 23: // $bb22
        var $96=$self_addr; //@line 3379 "cPickle.c"
        var $97=$96+32; //@line 3379 "cPickle.c"
        var $98=HEAP[$97]; //@line 3379 "cPickle.c"
        var $99=$98+16; //@line 3379 "cPickle.c"
        var $100=HEAP[$99]; //@line 3379 "cPickle.c"
        var $101=$self_addr; //@line 3379 "cPickle.c"
        var $102=$101+32; //@line 3379 "cPickle.c"
        var $103=HEAP[$102]; //@line 3379 "cPickle.c"
        var $104=$103+8; //@line 3379 "cPickle.c"
        var $105=HEAP[$104]; //@line 3379 "cPickle.c"
        var $106=$100+4*$105; //@line 3379 "cPickle.c"
        var $107=$py_int; //@line 3379 "cPickle.c"
        HEAP[$106]=$107; //@line 3379 "cPickle.c"
        var $108=($105) + 1; //@line 3379 "cPickle.c"
        var $109=$103+8; //@line 3379 "cPickle.c"
        HEAP[$109]=$108; //@line 3379 "cPickle.c"
        $2=0; //@line 3380 "cPickle.c"
        __label__ = 25; break; //@line 3380 "cPickle.c"
      case 24: // $finally
        var $110=HEAP[$s]; //@line 3383 "cPickle.c"
        _free($110); //@line 3383 "cPickle.c"
        var $111=$res; //@line 3385 "cPickle.c"
        $2=$111; //@line 3385 "cPickle.c"
        __label__ = 25; break; //@line 3385 "cPickle.c"
      case 25: // $bb23
        var $112=$2; //@line 3351 "cPickle.c"
        $retval=$112; //@line 3351 "cPickle.c"
        var $retval24=$retval; //@line 3351 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 3351 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_bool($self, $boolean) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $boolean_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $boolean_addr=$boolean;
        var $1=$boolean_addr; //@line 3391 "cPickle.c"
        var $2=($1)!=(__Py_TrueStruct); //@line 3391 "cPickle.c"
        var $3=$boolean_addr; //@line 3391 "cPickle.c"
        var $4=($3)!=(__Py_ZeroStruct); //@line 3391 "cPickle.c"
        var $or_cond=($2) & ($4);
        if ($or_cond) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3391 "cPickle.c"
      case 1: // $bb1
        ___assert_fail(__str81, __str15, 3391, ___PRETTY_FUNCTION___12572); //@line 3391 "cPickle.c"
        throw "Reached an unreachable!" //@line 3391 "cPickle.c"
      case 2: // $bb2
        var $5=$self_addr; //@line 3392 "cPickle.c"
        var $6=$5+32; //@line 3392 "cPickle.c"
        var $7=HEAP[$6]; //@line 3392 "cPickle.c"
        var $8=$7+8; //@line 3392 "cPickle.c"
        var $9=HEAP[$8]; //@line 3392 "cPickle.c"
        var $10=$self_addr; //@line 3392 "cPickle.c"
        var $11=$10+32; //@line 3392 "cPickle.c"
        var $12=HEAP[$11]; //@line 3392 "cPickle.c"
        var $13=$12+12; //@line 3392 "cPickle.c"
        var $14=HEAP[$13]; //@line 3392 "cPickle.c"
        var $15=($9)==($14); //@line 3392 "cPickle.c"
        if ($15) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3392 "cPickle.c"
      case 3: // $bb3
        var $16=$self_addr; //@line 3392 "cPickle.c"
        var $17=$16+32; //@line 3392 "cPickle.c"
        var $18=HEAP[$17]; //@line 3392 "cPickle.c"
        var $19=_Pdata_grow($18); //@line 3392 "cPickle.c"
        var $20=($19) < 0; //@line 3392 "cPickle.c"
        if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3392 "cPickle.c"
      case 4: // $bb4
        $0=-1; //@line 3392 "cPickle.c"
        __label__ = 6; break; //@line 3392 "cPickle.c"
      case 5: // $bb5
        var $21=$boolean_addr; //@line 3392 "cPickle.c"
        var $22=$21; //@line 3392 "cPickle.c"
        var $23=HEAP[$22]; //@line 3392 "cPickle.c"
        var $24=($23) + 1; //@line 3392 "cPickle.c"
        var $25=$boolean_addr; //@line 3392 "cPickle.c"
        var $26=$25; //@line 3392 "cPickle.c"
        HEAP[$26]=$24; //@line 3392 "cPickle.c"
        var $27=$self_addr; //@line 3392 "cPickle.c"
        var $28=$27+32; //@line 3392 "cPickle.c"
        var $29=HEAP[$28]; //@line 3392 "cPickle.c"
        var $30=$29+16; //@line 3392 "cPickle.c"
        var $31=HEAP[$30]; //@line 3392 "cPickle.c"
        var $32=$self_addr; //@line 3392 "cPickle.c"
        var $33=$32+32; //@line 3392 "cPickle.c"
        var $34=HEAP[$33]; //@line 3392 "cPickle.c"
        var $35=$34+8; //@line 3392 "cPickle.c"
        var $36=HEAP[$35]; //@line 3392 "cPickle.c"
        var $37=$31+4*$36; //@line 3392 "cPickle.c"
        var $38=$boolean_addr; //@line 3392 "cPickle.c"
        HEAP[$37]=$38; //@line 3392 "cPickle.c"
        var $39=($36) + 1; //@line 3392 "cPickle.c"
        var $40=$34+8; //@line 3392 "cPickle.c"
        HEAP[$40]=$39; //@line 3392 "cPickle.c"
        $0=0; //@line 3393 "cPickle.c"
        __label__ = 6; break; //@line 3393 "cPickle.c"
      case 6: // $bb6
        var $41=$0; //@line 3392 "cPickle.c"
        $retval=$41; //@line 3392 "cPickle.c"
        var $retval7=$retval; //@line 3392 "cPickle.c"
        ;
        return $retval7; //@line 3392 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binintx($self, $s, $x) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr_i;
        var $x_addr_i;
        var $retval_i;
        var $0;
        var $c_i;
        var $i_i;
        var $l_i;
        var $self_addr;
        var $s_addr;
        var $x_addr;
        var $retval;
        var $1;
        var $py_int;
        var $l;
        $self_addr=$self;
        $s_addr=$s;
        $x_addr=$x;
        $py_int=0; //@line 3427 "cPickle.c"
        var $2=$s_addr; //@line 3430 "cPickle.c"
        var $3=$x_addr; //@line 3430 "cPickle.c"
        $s_addr_i=$2;
        $x_addr_i=$3;
        $i_i=0; //@line 3408 "cPickle.c"
        $l_i=0; //@line 3408 "cPickle.c"
        var $4=$i_i; //@line 3408 "cPickle.c"
        var $5=$x_addr_i; //@line 3408 "cPickle.c"
        var $6=($4) < ($5); //@line 3408 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3408 "cPickle.c"
      case 1: // $bb_i
        var $7=$s_addr_i; //@line 3409 "cPickle.c"
        var $8=$i_i; //@line 3409 "cPickle.c"
        var $9=$7+$8; //@line 3409 "cPickle.c"
        var $10=HEAP[$9]; //@line 3409 "cPickle.c"
        $c_i=$10; //@line 3409 "cPickle.c"
        var $11=$c_i; //@line 3410 "cPickle.c"
        var $12=($11); //@line 3410 "cPickle.c"
        var $13=$i_i; //@line 3410 "cPickle.c"
        var $14=($13) * 8; //@line 3410 "cPickle.c"
        var $15=($12) << ($14); //@line 3410 "cPickle.c"
        var $16=$l_i; //@line 3410 "cPickle.c"
        var $17=($15) | ($16); //@line 3410 "cPickle.c"
        $l_i=$17; //@line 3410 "cPickle.c"
        var $18=$i_i; //@line 3408 "cPickle.c"
        var $19=($18) + 1; //@line 3408 "cPickle.c"
        $i_i=$19; //@line 3408 "cPickle.c"
        var $20=$i_i; //@line 3408 "cPickle.c"
        var $21=$x_addr_i; //@line 3408 "cPickle.c"
        var $22=($20) < ($21); //@line 3408 "cPickle.c"
        if ($22) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3408 "cPickle.c"
      case 2: // $calc_binint_exit
        var $23=$l_i; //@line 3420 "cPickle.c"
        $0=$23; //@line 3420 "cPickle.c"
        var $24=$0; //@line 3420 "cPickle.c"
        $retval_i=$24; //@line 3420 "cPickle.c"
        var $retval3_i=$retval_i; //@line 3420 "cPickle.c"
        $l=$retval3_i; //@line 3430 "cPickle.c"
        var $25=$l; //@line 3432 "cPickle.c"
        var $26=_PyInt_FromLong($25); //@line 3432 "cPickle.c"
        $py_int=$26; //@line 3432 "cPickle.c"
        var $27=($26)==0; //@line 3432 "cPickle.c"
        if ($27) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3432 "cPickle.c"
      case 3: // $bb
        $1=-1; //@line 3433 "cPickle.c"
        __label__ = 10; break; //@line 3433 "cPickle.c"
      case 4: // $bb1
        var $28=$self_addr; //@line 3435 "cPickle.c"
        var $29=$28+32; //@line 3435 "cPickle.c"
        var $30=HEAP[$29]; //@line 3435 "cPickle.c"
        var $31=$30+8; //@line 3435 "cPickle.c"
        var $32=HEAP[$31]; //@line 3435 "cPickle.c"
        var $33=$self_addr; //@line 3435 "cPickle.c"
        var $34=$33+32; //@line 3435 "cPickle.c"
        var $35=HEAP[$34]; //@line 3435 "cPickle.c"
        var $36=$35+12; //@line 3435 "cPickle.c"
        var $37=HEAP[$36]; //@line 3435 "cPickle.c"
        var $38=($32)==($37); //@line 3435 "cPickle.c"
        if ($38) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 3435 "cPickle.c"
      case 5: // $bb2
        var $39=$self_addr; //@line 3435 "cPickle.c"
        var $40=$39+32; //@line 3435 "cPickle.c"
        var $41=HEAP[$40]; //@line 3435 "cPickle.c"
        var $42=_Pdata_grow($41); //@line 3435 "cPickle.c"
        var $43=($42) < 0; //@line 3435 "cPickle.c"
        if ($43) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 3435 "cPickle.c"
      case 6: // $bb3
        var $44=$py_int; //@line 3435 "cPickle.c"
        var $45=$44; //@line 3435 "cPickle.c"
        var $46=HEAP[$45]; //@line 3435 "cPickle.c"
        var $47=($46) - 1; //@line 3435 "cPickle.c"
        var $48=$py_int; //@line 3435 "cPickle.c"
        var $49=$48; //@line 3435 "cPickle.c"
        HEAP[$49]=$47; //@line 3435 "cPickle.c"
        var $50=$py_int; //@line 3435 "cPickle.c"
        var $51=$50; //@line 3435 "cPickle.c"
        var $52=HEAP[$51]; //@line 3435 "cPickle.c"
        var $53=($52)==0; //@line 3435 "cPickle.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3435 "cPickle.c"
      case 7: // $bb4
        var $54=$py_int; //@line 3435 "cPickle.c"
        var $55=$54+4; //@line 3435 "cPickle.c"
        var $56=HEAP[$55]; //@line 3435 "cPickle.c"
        var $57=$56+24; //@line 3435 "cPickle.c"
        var $58=HEAP[$57]; //@line 3435 "cPickle.c"
        var $59=$py_int; //@line 3435 "cPickle.c"
        FUNCTION_TABLE[$58]($59); //@line 3435 "cPickle.c"
        __label__ = 8; break; //@line 3435 "cPickle.c"
      case 8: // $bb5
        $1=-1; //@line 3435 "cPickle.c"
        __label__ = 10; break; //@line 3435 "cPickle.c"
      case 9: // $bb6
        var $60=$self_addr; //@line 3435 "cPickle.c"
        var $61=$60+32; //@line 3435 "cPickle.c"
        var $62=HEAP[$61]; //@line 3435 "cPickle.c"
        var $63=$62+16; //@line 3435 "cPickle.c"
        var $64=HEAP[$63]; //@line 3435 "cPickle.c"
        var $65=$self_addr; //@line 3435 "cPickle.c"
        var $66=$65+32; //@line 3435 "cPickle.c"
        var $67=HEAP[$66]; //@line 3435 "cPickle.c"
        var $68=$67+8; //@line 3435 "cPickle.c"
        var $69=HEAP[$68]; //@line 3435 "cPickle.c"
        var $70=$64+4*$69; //@line 3435 "cPickle.c"
        var $71=$py_int; //@line 3435 "cPickle.c"
        HEAP[$70]=$71; //@line 3435 "cPickle.c"
        var $72=($69) + 1; //@line 3435 "cPickle.c"
        var $73=$67+8; //@line 3435 "cPickle.c"
        HEAP[$73]=$72; //@line 3435 "cPickle.c"
        $1=0; //@line 3436 "cPickle.c"
        __label__ = 10; break; //@line 3436 "cPickle.c"
      case 10: // $bb7
        var $74=$1; //@line 3433 "cPickle.c"
        $retval=$74; //@line 3433 "cPickle.c"
        var $retval8=$retval; //@line 3433 "cPickle.c"
        ;
        return $retval8; //@line 3433 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_long($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr_i;
        var $n_addr_i;
        var $retval_i1;
        var $0;
        var $r_i;
        var $retval_i;
        var $1;
        var $self_addr;
        var $retval;
        var $2;
        var $l;
        var $end=__stackBase__;
        var $s=__stackBase__+4;
        var $len;
        var $res;
        $self_addr=$self;
        $l=0; //@line 3478 "cPickle.c"
        $res=-1; //@line 3480 "cPickle.c"
        var $3=$self_addr; //@line 3482 "cPickle.c"
        var $4=$3+64; //@line 3482 "cPickle.c"
        var $5=HEAP[$4]; //@line 3482 "cPickle.c"
        var $6=$self_addr; //@line 3482 "cPickle.c"
        var $7=FUNCTION_TABLE[$5]($6, $s); //@line 3482 "cPickle.c"
        $len=$7; //@line 3482 "cPickle.c"
        var $8=$len; //@line 3482 "cPickle.c"
        var $9=($8) < 0; //@line 3482 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3482 "cPickle.c"
      case 1: // $bb
        $2=-1; //@line 3482 "cPickle.c"
        __label__ = 17; break; //@line 3482 "cPickle.c"
      case 2: // $bb1
        var $10=$len; //@line 3483 "cPickle.c"
        var $11=($10) <= 1; //@line 3483 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3483 "cPickle.c"
      case 3: // $bb2
        var $12=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($12, __str79); //@line 3339 "cPickle.c"
        $1=-1; //@line 3340 "cPickle.c"
        var $13=$1; //@line 3340 "cPickle.c"
        $retval_i=$13; //@line 3340 "cPickle.c"
        var $retval1_i=$retval_i; //@line 3340 "cPickle.c"
        $2=$retval1_i; //@line 3483 "cPickle.c"
        __label__ = 17; break; //@line 3483 "cPickle.c"
      case 4: // $bb3
        var $14=HEAP[$s]; //@line 3484 "cPickle.c"
        var $15=$len; //@line 3484 "cPickle.c"
        $s_addr_i=$14;
        $n_addr_i=$15;
        var $16=$n_addr_i; //@line 705 "cPickle.c"
        var $17=($16) + 1; //@line 705 "cPickle.c"
        var $18=_malloc($17); //@line 705 "cPickle.c"
        $r_i=$18; //@line 705 "cPickle.c"
        var $19=$r_i; //@line 706 "cPickle.c"
        var $20=($19)==0; //@line 706 "cPickle.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 706 "cPickle.c"
      case 5: // $bb_i
        var $21=_PyErr_NoMemory(); //@line 707 "cPickle.c"
        var $22=$21; //@line 707 "cPickle.c"
        $0=$22; //@line 707 "cPickle.c"
        __lastLabel__ = 5; __label__ = 7; break; //@line 707 "cPickle.c"
      case 6: // $bb1_i
        var $23=$n_addr_i; //@line 708 "cPickle.c"
        var $24=$r_i; //@line 708 "cPickle.c"
        var $25=$s_addr_i; //@line 708 "cPickle.c"
        _llvm_memcpy_p0i8_p0i8_i32($24, $25, $23, 1, 0); //@line 708 "cPickle.c"
        var $26=$r_i; //@line 709 "cPickle.c"
        var $27=$n_addr_i; //@line 709 "cPickle.c"
        var $28=$26+$27; //@line 709 "cPickle.c"
        HEAP[$28]=0; //@line 709 "cPickle.c"
        var $29=$r_i; //@line 710 "cPickle.c"
        $0=$29; //@line 710 "cPickle.c"
        __lastLabel__ = 6; __label__ = 7; break; //@line 710 "cPickle.c"
      case 7: // $pystrndup_exit
        var $30=__lastLabel__ == 5 ? $22 : ($29);
        $retval_i1=$30; //@line 707 "cPickle.c"
        HEAP[$s]=$30; //@line 3484 "cPickle.c"
        var $31=($30)==0; //@line 3484 "cPickle.c"
        if ($31) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3484 "cPickle.c"
      case 8: // $bb4
        $2=-1; //@line 3484 "cPickle.c"
        __label__ = 17; break; //@line 3484 "cPickle.c"
      case 9: // $bb5
        var $32=HEAP[$s]; //@line 3486 "cPickle.c"
        var $33=_PyLong_FromString($32, $end, 0); //@line 3486 "cPickle.c"
        $l=$33; //@line 3486 "cPickle.c"
        var $34=$l; //@line 3486 "cPickle.c"
        var $35=($34)==0; //@line 3486 "cPickle.c"
        var $36=HEAP[$s]; //@line 3494 "cPickle.c"
        _free($36); //@line 3494 "cPickle.c"
        if ($35) { __label__ = 16; break; } else { __label__ = 10; break; } //@line 3486 "cPickle.c"
      case 10: // $bb6
        var $37=$self_addr; //@line 3490 "cPickle.c"
        var $38=$37+32; //@line 3490 "cPickle.c"
        var $39=HEAP[$38]; //@line 3490 "cPickle.c"
        var $40=$39+8; //@line 3490 "cPickle.c"
        var $41=HEAP[$40]; //@line 3490 "cPickle.c"
        var $42=$self_addr; //@line 3490 "cPickle.c"
        var $43=$42+32; //@line 3490 "cPickle.c"
        var $44=HEAP[$43]; //@line 3490 "cPickle.c"
        var $45=$44+12; //@line 3490 "cPickle.c"
        var $46=HEAP[$45]; //@line 3490 "cPickle.c"
        var $47=($41)==($46); //@line 3490 "cPickle.c"
        if ($47) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 3490 "cPickle.c"
      case 11: // $bb7
        var $48=$self_addr; //@line 3490 "cPickle.c"
        var $49=$48+32; //@line 3490 "cPickle.c"
        var $50=HEAP[$49]; //@line 3490 "cPickle.c"
        var $51=_Pdata_grow($50); //@line 3490 "cPickle.c"
        var $52=($51) < 0; //@line 3490 "cPickle.c"
        if ($52) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 3490 "cPickle.c"
      case 12: // $bb8
        var $53=$l; //@line 3490 "cPickle.c"
        var $54=$53; //@line 3490 "cPickle.c"
        var $55=HEAP[$54]; //@line 3490 "cPickle.c"
        var $56=($55) - 1; //@line 3490 "cPickle.c"
        var $57=$l; //@line 3490 "cPickle.c"
        var $58=$57; //@line 3490 "cPickle.c"
        HEAP[$58]=$56; //@line 3490 "cPickle.c"
        var $59=$l; //@line 3490 "cPickle.c"
        var $60=$59; //@line 3490 "cPickle.c"
        var $61=HEAP[$60]; //@line 3490 "cPickle.c"
        var $62=($61)==0; //@line 3490 "cPickle.c"
        if ($62) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3490 "cPickle.c"
      case 13: // $bb9
        var $63=$l; //@line 3490 "cPickle.c"
        var $64=$63+4; //@line 3490 "cPickle.c"
        var $65=HEAP[$64]; //@line 3490 "cPickle.c"
        var $66=$65+24; //@line 3490 "cPickle.c"
        var $67=HEAP[$66]; //@line 3490 "cPickle.c"
        var $68=$l; //@line 3490 "cPickle.c"
        FUNCTION_TABLE[$67]($68); //@line 3490 "cPickle.c"
        __label__ = 14; break; //@line 3490 "cPickle.c"
      case 14: // $bb10
        $2=-1; //@line 3490 "cPickle.c"
        __label__ = 17; break; //@line 3490 "cPickle.c"
      case 15: // $bb11
        var $69=$self_addr; //@line 3490 "cPickle.c"
        var $70=$69+32; //@line 3490 "cPickle.c"
        var $71=HEAP[$70]; //@line 3490 "cPickle.c"
        var $72=$71+16; //@line 3490 "cPickle.c"
        var $73=HEAP[$72]; //@line 3490 "cPickle.c"
        var $74=$self_addr; //@line 3490 "cPickle.c"
        var $75=$74+32; //@line 3490 "cPickle.c"
        var $76=HEAP[$75]; //@line 3490 "cPickle.c"
        var $77=$76+8; //@line 3490 "cPickle.c"
        var $78=HEAP[$77]; //@line 3490 "cPickle.c"
        var $79=$73+4*$78; //@line 3490 "cPickle.c"
        var $80=$l; //@line 3490 "cPickle.c"
        HEAP[$79]=$80; //@line 3490 "cPickle.c"
        var $81=($78) + 1; //@line 3490 "cPickle.c"
        var $82=$76+8; //@line 3490 "cPickle.c"
        HEAP[$82]=$81; //@line 3490 "cPickle.c"
        $2=0; //@line 3491 "cPickle.c"
        __label__ = 17; break; //@line 3491 "cPickle.c"
      case 16: // $finally
        var $83=$res; //@line 3496 "cPickle.c"
        $2=$83; //@line 3496 "cPickle.c"
        __label__ = 17; break; //@line 3496 "cPickle.c"
      case 17: // $bb12
        var $84=$2; //@line 3482 "cPickle.c"
        $retval=$84; //@line 3482 "cPickle.c"
        var $retval13=$retval; //@line 3482 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 3482 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_counted_long($self, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr_i;
        var $x_addr_i;
        var $retval_i;
        var $0;
        var $c_i;
        var $i_i;
        var $l_i;
        var $self_addr;
        var $size_addr;
        var $retval;
        var $1;
        var $i;
        var $nbytes=__stackBase__;
        var $pdata=__stackBase__+4;
        var $along;
        $self_addr=$self;
        $size_addr=$size;
        var $2=$size_addr; //@line 3510 "cPickle.c"
        var $3=($2)!=1; //@line 3510 "cPickle.c"
        var $4=$size_addr; //@line 3510 "cPickle.c"
        var $5=($4)!=4; //@line 3510 "cPickle.c"
        var $or_cond=($3) & ($5);
        if ($or_cond) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3510 "cPickle.c"
      case 1: // $bb1
        ___assert_fail(__str82, __str15, 3510, ___PRETTY_FUNCTION___12743); //@line 3510 "cPickle.c"
        throw "Reached an unreachable!" //@line 3510 "cPickle.c"
      case 2: // $bb2
        var $6=$self_addr; //@line 3511 "cPickle.c"
        var $7=$6+60; //@line 3511 "cPickle.c"
        var $8=HEAP[$7]; //@line 3511 "cPickle.c"
        var $9=$self_addr; //@line 3511 "cPickle.c"
        var $10=$size_addr; //@line 3511 "cPickle.c"
        var $11=FUNCTION_TABLE[$8]($9, $nbytes, $10); //@line 3511 "cPickle.c"
        $i=$11; //@line 3511 "cPickle.c"
        var $12=$i; //@line 3512 "cPickle.c"
        var $13=($12) < 0; //@line 3512 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3512 "cPickle.c"
      case 3: // $bb3
        $1=-1; //@line 3512 "cPickle.c"
        __label__ = 22; break; //@line 3512 "cPickle.c"
      case 4: // $bb4
        var $14=HEAP[$nbytes]; //@line 3514 "cPickle.c"
        var $15=$size_addr; //@line 3514 "cPickle.c"
        $s_addr_i=$14;
        $x_addr_i=$15;
        $i_i=0; //@line 3408 "cPickle.c"
        $l_i=0; //@line 3408 "cPickle.c"
        var $16=$i_i; //@line 3408 "cPickle.c"
        var $17=$x_addr_i; //@line 3408 "cPickle.c"
        var $18=($16) < ($17); //@line 3408 "cPickle.c"
        if ($18) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 3408 "cPickle.c"
      case 5: // $bb6_thread
        $0=0; //@line 3420 "cPickle.c"
        $retval_i=0; //@line 3420 "cPickle.c"
        $size_addr=0; //@line 3514 "cPickle.c"
        __label__ = 10; break;
      case 6: // $bb_i
        var $19=$s_addr_i; //@line 3409 "cPickle.c"
        var $20=$i_i; //@line 3409 "cPickle.c"
        var $21=$19+$20; //@line 3409 "cPickle.c"
        var $22=HEAP[$21]; //@line 3409 "cPickle.c"
        $c_i=$22; //@line 3409 "cPickle.c"
        var $23=$c_i; //@line 3410 "cPickle.c"
        var $24=($23); //@line 3410 "cPickle.c"
        var $25=$i_i; //@line 3410 "cPickle.c"
        var $26=($25) * 8; //@line 3410 "cPickle.c"
        var $27=($24) << ($26); //@line 3410 "cPickle.c"
        var $28=$l_i; //@line 3410 "cPickle.c"
        var $29=($27) | ($28); //@line 3410 "cPickle.c"
        $l_i=$29; //@line 3410 "cPickle.c"
        var $30=$i_i; //@line 3408 "cPickle.c"
        var $31=($30) + 1; //@line 3408 "cPickle.c"
        $i_i=$31; //@line 3408 "cPickle.c"
        var $32=$i_i; //@line 3408 "cPickle.c"
        var $33=$x_addr_i; //@line 3408 "cPickle.c"
        var $34=($32) < ($33); //@line 3408 "cPickle.c"
        if ($34) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3408 "cPickle.c"
      case 7: // $calc_binint_exit
        var $_pr=$l_i;
        $0=$_pr; //@line 3420 "cPickle.c"
        $retval_i=$_pr; //@line 3420 "cPickle.c"
        $size_addr=$_pr; //@line 3514 "cPickle.c"
        var $35=($_pr) < 0; //@line 3515 "cPickle.c"
        if ($35) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3515 "cPickle.c"
      case 8: // $bb5
        var $36=HEAP[_UnpicklingError]; //@line 3519 "cPickle.c"
        _PyErr_SetString($36, __str83); //@line 3519 "cPickle.c"
        $1=-1; //@line 3521 "cPickle.c"
        __label__ = 22; break; //@line 3521 "cPickle.c"
      case 9: // $bb6
        var $37=($_pr)==0; //@line 3524 "cPickle.c"
        if ($37) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3524 "cPickle.c"
      case 10: // $bb7
        var $38=_PyLong_FromLong(0); //@line 3525 "cPickle.c"
        $along=$38; //@line 3525 "cPickle.c"
        __lastLabel__ = 10; __label__ = 14; break; //@line 3525 "cPickle.c"
      case 11: // $bb8
        var $39=$self_addr; //@line 3528 "cPickle.c"
        var $40=$39+60; //@line 3528 "cPickle.c"
        var $41=HEAP[$40]; //@line 3528 "cPickle.c"
        var $42=$self_addr; //@line 3528 "cPickle.c"
        var $43=$size_addr; //@line 3528 "cPickle.c"
        var $44=FUNCTION_TABLE[$41]($42, $pdata, $43); //@line 3528 "cPickle.c"
        $i=$44; //@line 3528 "cPickle.c"
        var $45=$i; //@line 3529 "cPickle.c"
        var $46=($45) < 0; //@line 3529 "cPickle.c"
        if ($46) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 3529 "cPickle.c"
      case 12: // $bb10
        $1=-1; //@line 3529 "cPickle.c"
        __label__ = 22; break; //@line 3529 "cPickle.c"
      case 13: // $bb11
        var $47=$size_addr; //@line 3530 "cPickle.c"
        var $48=HEAP[$pdata]; //@line 3530 "cPickle.c"
        var $49=__PyLong_FromByteArray($48, $47, 1, 1); //@line 3530 "cPickle.c"
        $along=$49; //@line 3530 "cPickle.c"
        __lastLabel__ = 13; __label__ = 14; break; //@line 3530 "cPickle.c"
      case 14: // $bb12
        var $50=__lastLabel__ == 13 ? $49 : ($38);
        var $51=($50)==0; //@line 3533 "cPickle.c"
        if ($51) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 3533 "cPickle.c"
      case 15: // $bb13
        $1=-1; //@line 3534 "cPickle.c"
        __label__ = 22; break; //@line 3534 "cPickle.c"
      case 16: // $bb14
        var $52=$self_addr; //@line 3535 "cPickle.c"
        var $53=$52+32; //@line 3535 "cPickle.c"
        var $54=HEAP[$53]; //@line 3535 "cPickle.c"
        var $55=$54+8; //@line 3535 "cPickle.c"
        var $56=HEAP[$55]; //@line 3535 "cPickle.c"
        var $57=$self_addr; //@line 3535 "cPickle.c"
        var $58=$57+32; //@line 3535 "cPickle.c"
        var $59=HEAP[$58]; //@line 3535 "cPickle.c"
        var $60=$59+12; //@line 3535 "cPickle.c"
        var $61=HEAP[$60]; //@line 3535 "cPickle.c"
        var $62=($56)==($61); //@line 3535 "cPickle.c"
        if ($62) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 3535 "cPickle.c"
      case 17: // $bb15
        var $63=$self_addr; //@line 3535 "cPickle.c"
        var $64=$63+32; //@line 3535 "cPickle.c"
        var $65=HEAP[$64]; //@line 3535 "cPickle.c"
        var $66=_Pdata_grow($65); //@line 3535 "cPickle.c"
        var $67=($66) < 0; //@line 3535 "cPickle.c"
        if ($67) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 3535 "cPickle.c"
      case 18: // $bb16
        var $68=$along; //@line 3535 "cPickle.c"
        var $69=$68; //@line 3535 "cPickle.c"
        var $70=HEAP[$69]; //@line 3535 "cPickle.c"
        var $71=($70) - 1; //@line 3535 "cPickle.c"
        var $72=$along; //@line 3535 "cPickle.c"
        var $73=$72; //@line 3535 "cPickle.c"
        HEAP[$73]=$71; //@line 3535 "cPickle.c"
        var $74=$along; //@line 3535 "cPickle.c"
        var $75=$74; //@line 3535 "cPickle.c"
        var $76=HEAP[$75]; //@line 3535 "cPickle.c"
        var $77=($76)==0; //@line 3535 "cPickle.c"
        if ($77) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 3535 "cPickle.c"
      case 19: // $bb17
        var $78=$along; //@line 3535 "cPickle.c"
        var $79=$78+4; //@line 3535 "cPickle.c"
        var $80=HEAP[$79]; //@line 3535 "cPickle.c"
        var $81=$80+24; //@line 3535 "cPickle.c"
        var $82=HEAP[$81]; //@line 3535 "cPickle.c"
        var $83=$along; //@line 3535 "cPickle.c"
        FUNCTION_TABLE[$82]($83); //@line 3535 "cPickle.c"
        __label__ = 20; break; //@line 3535 "cPickle.c"
      case 20: // $bb18
        $1=-1; //@line 3535 "cPickle.c"
        __label__ = 22; break; //@line 3535 "cPickle.c"
      case 21: // $bb19
        var $84=$self_addr; //@line 3535 "cPickle.c"
        var $85=$84+32; //@line 3535 "cPickle.c"
        var $86=HEAP[$85]; //@line 3535 "cPickle.c"
        var $87=$86+16; //@line 3535 "cPickle.c"
        var $88=HEAP[$87]; //@line 3535 "cPickle.c"
        var $89=$self_addr; //@line 3535 "cPickle.c"
        var $90=$89+32; //@line 3535 "cPickle.c"
        var $91=HEAP[$90]; //@line 3535 "cPickle.c"
        var $92=$91+8; //@line 3535 "cPickle.c"
        var $93=HEAP[$92]; //@line 3535 "cPickle.c"
        var $94=$88+4*$93; //@line 3535 "cPickle.c"
        var $95=$along; //@line 3535 "cPickle.c"
        HEAP[$94]=$95; //@line 3535 "cPickle.c"
        var $96=($93) + 1; //@line 3535 "cPickle.c"
        var $97=$91+8; //@line 3535 "cPickle.c"
        HEAP[$97]=$96; //@line 3535 "cPickle.c"
        $1=0; //@line 3536 "cPickle.c"
        __label__ = 22; break; //@line 3536 "cPickle.c"
      case 22: // $bb20
        var $98=$1; //@line 3512 "cPickle.c"
        $retval=$98; //@line 3512 "cPickle.c"
        var $retval21=$retval; //@line 3512 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 3512 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_float($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr_i;
        var $n_addr_i;
        var $retval_i1;
        var $0;
        var $r_i;
        var $retval_i;
        var $1;
        var $self_addr;
        var $retval;
        var $2;
        var $py_float;
        var $endptr=__stackBase__;
        var $s=__stackBase__+4;
        var $len;
        var $res;
        var $d;
        $self_addr=$self;
        $py_float=0; //@line 3542 "cPickle.c"
        $res=-1; //@line 3544 "cPickle.c"
        var $3=$self_addr; //@line 3547 "cPickle.c"
        var $4=$3+64; //@line 3547 "cPickle.c"
        var $5=HEAP[$4]; //@line 3547 "cPickle.c"
        var $6=$self_addr; //@line 3547 "cPickle.c"
        var $7=FUNCTION_TABLE[$5]($6, $s); //@line 3547 "cPickle.c"
        $len=$7; //@line 3547 "cPickle.c"
        var $8=$len; //@line 3547 "cPickle.c"
        var $9=($8) < 0; //@line 3547 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3547 "cPickle.c"
      case 1: // $bb
        $2=-1; //@line 3547 "cPickle.c"
        __label__ = 22; break; //@line 3547 "cPickle.c"
      case 2: // $bb1
        var $10=$len; //@line 3548 "cPickle.c"
        var $11=($10) <= 1; //@line 3548 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3548 "cPickle.c"
      case 3: // $bb2
        var $12=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($12, __str79); //@line 3339 "cPickle.c"
        $1=-1; //@line 3340 "cPickle.c"
        var $13=$1; //@line 3340 "cPickle.c"
        $retval_i=$13; //@line 3340 "cPickle.c"
        var $retval1_i=$retval_i; //@line 3340 "cPickle.c"
        $2=$retval1_i; //@line 3548 "cPickle.c"
        __label__ = 22; break; //@line 3548 "cPickle.c"
      case 4: // $bb3
        var $14=HEAP[$s]; //@line 3549 "cPickle.c"
        var $15=$len; //@line 3549 "cPickle.c"
        $s_addr_i=$14;
        $n_addr_i=$15;
        var $16=$n_addr_i; //@line 705 "cPickle.c"
        var $17=($16) + 1; //@line 705 "cPickle.c"
        var $18=_malloc($17); //@line 705 "cPickle.c"
        $r_i=$18; //@line 705 "cPickle.c"
        var $19=$r_i; //@line 706 "cPickle.c"
        var $20=($19)==0; //@line 706 "cPickle.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 706 "cPickle.c"
      case 5: // $bb_i
        var $21=_PyErr_NoMemory(); //@line 707 "cPickle.c"
        var $22=$21; //@line 707 "cPickle.c"
        $0=$22; //@line 707 "cPickle.c"
        __lastLabel__ = 5; __label__ = 7; break; //@line 707 "cPickle.c"
      case 6: // $bb1_i
        var $23=$n_addr_i; //@line 708 "cPickle.c"
        var $24=$r_i; //@line 708 "cPickle.c"
        var $25=$s_addr_i; //@line 708 "cPickle.c"
        _llvm_memcpy_p0i8_p0i8_i32($24, $25, $23, 1, 0); //@line 708 "cPickle.c"
        var $26=$r_i; //@line 709 "cPickle.c"
        var $27=$n_addr_i; //@line 709 "cPickle.c"
        var $28=$26+$27; //@line 709 "cPickle.c"
        HEAP[$28]=0; //@line 709 "cPickle.c"
        var $29=$r_i; //@line 710 "cPickle.c"
        $0=$29; //@line 710 "cPickle.c"
        __lastLabel__ = 6; __label__ = 7; break; //@line 710 "cPickle.c"
      case 7: // $pystrndup_exit
        var $30=__lastLabel__ == 5 ? $22 : ($29);
        $retval_i1=$30; //@line 707 "cPickle.c"
        HEAP[$s]=$30; //@line 3549 "cPickle.c"
        var $31=($30)==0; //@line 3549 "cPickle.c"
        if ($31) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3549 "cPickle.c"
      case 8: // $bb4
        $2=-1; //@line 3549 "cPickle.c"
        __label__ = 22; break; //@line 3549 "cPickle.c"
      case 9: // $bb5
        var $32=HEAP[_PyExc_OverflowError]; //@line 3551 "cPickle.c"
        var $33=HEAP[$s]; //@line 3551 "cPickle.c"
        var $34=_PyOS_string_to_double($33, $endptr, $32); //@line 3551 "cPickle.c"
        $d=$34; //@line 3551 "cPickle.c"
        var $35=$d; //@line 3553 "cPickle.c"
        var $36=($35) != -1; //@line 3553 "cPickle.c"
        if ($36) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 3553 "cPickle.c"
      case 10: // $bb6
        var $37=_PyErr_Occurred(); //@line 3553 "cPickle.c"
        var $38=($37)!=0; //@line 3553 "cPickle.c"
        if ($38) { __label__ = 21; break; } else { __label__ = 11; break; } //@line 3553 "cPickle.c"
      case 11: // $bb7
        var $39=HEAP[$endptr]; //@line 3555 "cPickle.c"
        var $40=$39; //@line 3555 "cPickle.c"
        var $41=HEAP[$40]; //@line 3555 "cPickle.c"
        var $42=($41)!=10; //@line 3555 "cPickle.c"
        if ($42) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 3555 "cPickle.c"
      case 12: // $bb8
        var $43=HEAP[$endptr]; //@line 3555 "cPickle.c"
        var $44=$43+1; //@line 3555 "cPickle.c"
        var $45=HEAP[$44]; //@line 3555 "cPickle.c"
        var $46=($45)!=0; //@line 3555 "cPickle.c"
        if ($46) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3555 "cPickle.c"
      case 13: // $bb9
        var $47=HEAP[_PyExc_ValueError]; //@line 3556 "cPickle.c"
        _PyErr_SetString($47, __str84); //@line 3556 "cPickle.c"
        __label__ = 21; break; //@line 3556 "cPickle.c"
      case 14: // $bb10
        var $48=$d; //@line 3561 "cPickle.c"
        var $49=_PyFloat_FromDouble($48); //@line 3561 "cPickle.c"
        $py_float=$49; //@line 3561 "cPickle.c"
        var $50=$py_float; //@line 3561 "cPickle.c"
        var $51=($50)==0; //@line 3561 "cPickle.c"
        if ($51) { __label__ = 21; break; } else { __label__ = 15; break; } //@line 3561 "cPickle.c"
      case 15: // $bb11
        var $52=HEAP[$s]; //@line 3564 "cPickle.c"
        _free($52); //@line 3564 "cPickle.c"
        var $53=$self_addr; //@line 3565 "cPickle.c"
        var $54=$53+32; //@line 3565 "cPickle.c"
        var $55=HEAP[$54]; //@line 3565 "cPickle.c"
        var $56=$55+8; //@line 3565 "cPickle.c"
        var $57=HEAP[$56]; //@line 3565 "cPickle.c"
        var $58=$self_addr; //@line 3565 "cPickle.c"
        var $59=$58+32; //@line 3565 "cPickle.c"
        var $60=HEAP[$59]; //@line 3565 "cPickle.c"
        var $61=$60+12; //@line 3565 "cPickle.c"
        var $62=HEAP[$61]; //@line 3565 "cPickle.c"
        var $63=($57)==($62); //@line 3565 "cPickle.c"
        if ($63) { __label__ = 16; break; } else { __label__ = 20; break; } //@line 3565 "cPickle.c"
      case 16: // $bb12
        var $64=$self_addr; //@line 3565 "cPickle.c"
        var $65=$64+32; //@line 3565 "cPickle.c"
        var $66=HEAP[$65]; //@line 3565 "cPickle.c"
        var $67=_Pdata_grow($66); //@line 3565 "cPickle.c"
        var $68=($67) < 0; //@line 3565 "cPickle.c"
        if ($68) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 3565 "cPickle.c"
      case 17: // $bb13
        var $69=$py_float; //@line 3565 "cPickle.c"
        var $70=$69; //@line 3565 "cPickle.c"
        var $71=HEAP[$70]; //@line 3565 "cPickle.c"
        var $72=($71) - 1; //@line 3565 "cPickle.c"
        var $73=$py_float; //@line 3565 "cPickle.c"
        var $74=$73; //@line 3565 "cPickle.c"
        HEAP[$74]=$72; //@line 3565 "cPickle.c"
        var $75=$py_float; //@line 3565 "cPickle.c"
        var $76=$75; //@line 3565 "cPickle.c"
        var $77=HEAP[$76]; //@line 3565 "cPickle.c"
        var $78=($77)==0; //@line 3565 "cPickle.c"
        if ($78) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3565 "cPickle.c"
      case 18: // $bb14
        var $79=$py_float; //@line 3565 "cPickle.c"
        var $80=$79+4; //@line 3565 "cPickle.c"
        var $81=HEAP[$80]; //@line 3565 "cPickle.c"
        var $82=$81+24; //@line 3565 "cPickle.c"
        var $83=HEAP[$82]; //@line 3565 "cPickle.c"
        var $84=$py_float; //@line 3565 "cPickle.c"
        FUNCTION_TABLE[$83]($84); //@line 3565 "cPickle.c"
        __label__ = 19; break; //@line 3565 "cPickle.c"
      case 19: // $bb15
        $2=-1; //@line 3565 "cPickle.c"
        __label__ = 22; break; //@line 3565 "cPickle.c"
      case 20: // $bb16
        var $85=$self_addr; //@line 3565 "cPickle.c"
        var $86=$85+32; //@line 3565 "cPickle.c"
        var $87=HEAP[$86]; //@line 3565 "cPickle.c"
        var $88=$87+16; //@line 3565 "cPickle.c"
        var $89=HEAP[$88]; //@line 3565 "cPickle.c"
        var $90=$self_addr; //@line 3565 "cPickle.c"
        var $91=$90+32; //@line 3565 "cPickle.c"
        var $92=HEAP[$91]; //@line 3565 "cPickle.c"
        var $93=$92+8; //@line 3565 "cPickle.c"
        var $94=HEAP[$93]; //@line 3565 "cPickle.c"
        var $95=$89+4*$94; //@line 3565 "cPickle.c"
        var $96=$py_float; //@line 3565 "cPickle.c"
        HEAP[$95]=$96; //@line 3565 "cPickle.c"
        var $97=($94) + 1; //@line 3565 "cPickle.c"
        var $98=$92+8; //@line 3565 "cPickle.c"
        HEAP[$98]=$97; //@line 3565 "cPickle.c"
        $2=0; //@line 3566 "cPickle.c"
        __label__ = 22; break; //@line 3566 "cPickle.c"
      case 21: // $finally
        var $99=HEAP[$s]; //@line 3569 "cPickle.c"
        _free($99); //@line 3569 "cPickle.c"
        var $100=$res; //@line 3571 "cPickle.c"
        $2=$100; //@line 3571 "cPickle.c"
        __label__ = 22; break; //@line 3571 "cPickle.c"
      case 22: // $bb17
        var $101=$2; //@line 3547 "cPickle.c"
        $retval=$101; //@line 3547 "cPickle.c"
        var $retval18=$retval; //@line 3547 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 3547 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binfloat($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_float;
        var $x;
        var $p=__stackBase__;
        $self_addr=$self;
        var $1=$self_addr; //@line 3581 "cPickle.c"
        var $2=$1+60; //@line 3581 "cPickle.c"
        var $3=HEAP[$2]; //@line 3581 "cPickle.c"
        var $4=$self_addr; //@line 3581 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $p, 8); //@line 3581 "cPickle.c"
        var $6=($5) < 0; //@line 3581 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3581 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3582 "cPickle.c"
        __label__ = 13; break; //@line 3582 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$p]; //@line 3584 "cPickle.c"
        var $8=__PyFloat_Unpack8($7, 0); //@line 3584 "cPickle.c"
        $x=$8; //@line 3584 "cPickle.c"
        var $9=$x; //@line 3585 "cPickle.c"
        var $10=($9) == -1; //@line 3585 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3585 "cPickle.c"
      case 3: // $bb2
        var $11=_PyErr_Occurred(); //@line 3585 "cPickle.c"
        var $12=($11)!=0; //@line 3585 "cPickle.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3585 "cPickle.c"
      case 4: // $bb3
        $0=-1; //@line 3586 "cPickle.c"
        __label__ = 13; break; //@line 3586 "cPickle.c"
      case 5: // $bb4
        var $13=$x; //@line 3588 "cPickle.c"
        var $14=_PyFloat_FromDouble($13); //@line 3588 "cPickle.c"
        $py_float=$14; //@line 3588 "cPickle.c"
        var $15=($14)==0; //@line 3589 "cPickle.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3589 "cPickle.c"
      case 6: // $bb5
        $0=-1; //@line 3590 "cPickle.c"
        __label__ = 13; break; //@line 3590 "cPickle.c"
      case 7: // $bb6
        var $16=$self_addr; //@line 3592 "cPickle.c"
        var $17=$16+32; //@line 3592 "cPickle.c"
        var $18=HEAP[$17]; //@line 3592 "cPickle.c"
        var $19=$18+8; //@line 3592 "cPickle.c"
        var $20=HEAP[$19]; //@line 3592 "cPickle.c"
        var $21=$self_addr; //@line 3592 "cPickle.c"
        var $22=$21+32; //@line 3592 "cPickle.c"
        var $23=HEAP[$22]; //@line 3592 "cPickle.c"
        var $24=$23+12; //@line 3592 "cPickle.c"
        var $25=HEAP[$24]; //@line 3592 "cPickle.c"
        var $26=($20)==($25); //@line 3592 "cPickle.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 3592 "cPickle.c"
      case 8: // $bb7
        var $27=$self_addr; //@line 3592 "cPickle.c"
        var $28=$27+32; //@line 3592 "cPickle.c"
        var $29=HEAP[$28]; //@line 3592 "cPickle.c"
        var $30=_Pdata_grow($29); //@line 3592 "cPickle.c"
        var $31=($30) < 0; //@line 3592 "cPickle.c"
        if ($31) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 3592 "cPickle.c"
      case 9: // $bb8
        var $32=$py_float; //@line 3592 "cPickle.c"
        var $33=$32; //@line 3592 "cPickle.c"
        var $34=HEAP[$33]; //@line 3592 "cPickle.c"
        var $35=($34) - 1; //@line 3592 "cPickle.c"
        var $36=$py_float; //@line 3592 "cPickle.c"
        var $37=$36; //@line 3592 "cPickle.c"
        HEAP[$37]=$35; //@line 3592 "cPickle.c"
        var $38=$py_float; //@line 3592 "cPickle.c"
        var $39=$38; //@line 3592 "cPickle.c"
        var $40=HEAP[$39]; //@line 3592 "cPickle.c"
        var $41=($40)==0; //@line 3592 "cPickle.c"
        if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3592 "cPickle.c"
      case 10: // $bb9
        var $42=$py_float; //@line 3592 "cPickle.c"
        var $43=$42+4; //@line 3592 "cPickle.c"
        var $44=HEAP[$43]; //@line 3592 "cPickle.c"
        var $45=$44+24; //@line 3592 "cPickle.c"
        var $46=HEAP[$45]; //@line 3592 "cPickle.c"
        var $47=$py_float; //@line 3592 "cPickle.c"
        FUNCTION_TABLE[$46]($47); //@line 3592 "cPickle.c"
        __label__ = 11; break; //@line 3592 "cPickle.c"
      case 11: // $bb10
        $0=-1; //@line 3592 "cPickle.c"
        __label__ = 13; break; //@line 3592 "cPickle.c"
      case 12: // $bb11
        var $48=$self_addr; //@line 3592 "cPickle.c"
        var $49=$48+32; //@line 3592 "cPickle.c"
        var $50=HEAP[$49]; //@line 3592 "cPickle.c"
        var $51=$50+16; //@line 3592 "cPickle.c"
        var $52=HEAP[$51]; //@line 3592 "cPickle.c"
        var $53=$self_addr; //@line 3592 "cPickle.c"
        var $54=$53+32; //@line 3592 "cPickle.c"
        var $55=HEAP[$54]; //@line 3592 "cPickle.c"
        var $56=$55+8; //@line 3592 "cPickle.c"
        var $57=HEAP[$56]; //@line 3592 "cPickle.c"
        var $58=$52+4*$57; //@line 3592 "cPickle.c"
        var $59=$py_float; //@line 3592 "cPickle.c"
        HEAP[$58]=$59; //@line 3592 "cPickle.c"
        var $60=($57) + 1; //@line 3592 "cPickle.c"
        var $61=$55+8; //@line 3592 "cPickle.c"
        HEAP[$61]=$60; //@line 3592 "cPickle.c"
        $0=0; //@line 3593 "cPickle.c"
        __label__ = 13; break; //@line 3593 "cPickle.c"
      case 13: // $bb12
        var $62=$0; //@line 3582 "cPickle.c"
        $retval=$62; //@line 3582 "cPickle.c"
        var $retval13=$retval; //@line 3582 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 3582 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_string($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr_i;
        var $n_addr_i;
        var $retval_i1;
        var $0;
        var $r_i;
        var $retval_i;
        var $1;
        var $self_addr;
        var $retval;
        var $2;
        var $str;
        var $len;
        var $res;
        var $s=__stackBase__;
        var $p;
        $self_addr=$self;
        $str=0; //@line 3599 "cPickle.c"
        $res=-1; //@line 3600 "cPickle.c"
        var $3=$self_addr; //@line 3603 "cPickle.c"
        var $4=$3+64; //@line 3603 "cPickle.c"
        var $5=HEAP[$4]; //@line 3603 "cPickle.c"
        var $6=$self_addr; //@line 3603 "cPickle.c"
        var $7=FUNCTION_TABLE[$5]($6, $s); //@line 3603 "cPickle.c"
        $len=$7; //@line 3603 "cPickle.c"
        var $8=$len; //@line 3603 "cPickle.c"
        var $9=($8) < 0; //@line 3603 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3603 "cPickle.c"
      case 1: // $bb
        $2=-1; //@line 3603 "cPickle.c"
        __label__ = 26; break; //@line 3603 "cPickle.c"
      case 2: // $bb1
        var $10=$len; //@line 3604 "cPickle.c"
        var $11=($10) <= 1; //@line 3604 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3604 "cPickle.c"
      case 3: // $bb2
        var $12=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($12, __str79); //@line 3339 "cPickle.c"
        $1=-1; //@line 3340 "cPickle.c"
        var $13=$1; //@line 3340 "cPickle.c"
        $retval_i=$13; //@line 3340 "cPickle.c"
        var $retval1_i=$retval_i; //@line 3340 "cPickle.c"
        $2=$retval1_i; //@line 3604 "cPickle.c"
        __label__ = 26; break; //@line 3604 "cPickle.c"
      case 4: // $bb3
        var $14=HEAP[$s]; //@line 3605 "cPickle.c"
        var $15=$len; //@line 3605 "cPickle.c"
        $s_addr_i=$14;
        $n_addr_i=$15;
        var $16=$n_addr_i; //@line 705 "cPickle.c"
        var $17=($16) + 1; //@line 705 "cPickle.c"
        var $18=_malloc($17); //@line 705 "cPickle.c"
        $r_i=$18; //@line 705 "cPickle.c"
        var $19=$r_i; //@line 706 "cPickle.c"
        var $20=($19)==0; //@line 706 "cPickle.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 706 "cPickle.c"
      case 5: // $bb_i
        var $21=_PyErr_NoMemory(); //@line 707 "cPickle.c"
        var $22=$21; //@line 707 "cPickle.c"
        $0=$22; //@line 707 "cPickle.c"
        __lastLabel__ = 5; __label__ = 7; break; //@line 707 "cPickle.c"
      case 6: // $bb1_i
        var $23=$n_addr_i; //@line 708 "cPickle.c"
        var $24=$r_i; //@line 708 "cPickle.c"
        var $25=$s_addr_i; //@line 708 "cPickle.c"
        _llvm_memcpy_p0i8_p0i8_i32($24, $25, $23, 1, 0); //@line 708 "cPickle.c"
        var $26=$r_i; //@line 709 "cPickle.c"
        var $27=$n_addr_i; //@line 709 "cPickle.c"
        var $28=$26+$27; //@line 709 "cPickle.c"
        HEAP[$28]=0; //@line 709 "cPickle.c"
        var $29=$r_i; //@line 710 "cPickle.c"
        $0=$29; //@line 710 "cPickle.c"
        __lastLabel__ = 6; __label__ = 7; break; //@line 710 "cPickle.c"
      case 7: // $pystrndup_exit
        var $30=__lastLabel__ == 5 ? $22 : ($29);
        $retval_i1=$30; //@line 707 "cPickle.c"
        HEAP[$s]=$30; //@line 3605 "cPickle.c"
        var $31=($30)==0; //@line 3605 "cPickle.c"
        if ($31) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 3605 "cPickle.c"
      case 8: // $bb7_preheader
        var $32=HEAP[$s]; //@line 3609 "cPickle.c"
        var $33=$len; //@line 3609 "cPickle.c"
        var $34=($33) - 1; //@line 3609 "cPickle.c"
        var $35=$32+$34; //@line 3609 "cPickle.c"
        var $36=HEAP[$35]; //@line 3609 "cPickle.c"
        var $37=($36) <= 32; //@line 3609 "cPickle.c"
        if ($37) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3609 "cPickle.c"
      case 9: // $bb4
        $2=-1; //@line 3605 "cPickle.c"
        __label__ = 26; break; //@line 3605 "cPickle.c"
      case 10: // $bb6
        var $38=$len; //@line 3610 "cPickle.c"
        var $39=($38) - 1; //@line 3610 "cPickle.c"
        $len=$39; //@line 3610 "cPickle.c"
        var $40=HEAP[$s]; //@line 3609 "cPickle.c"
        var $41=$len; //@line 3609 "cPickle.c"
        var $42=($41) - 1; //@line 3609 "cPickle.c"
        var $43=$40+$42; //@line 3609 "cPickle.c"
        var $44=HEAP[$43]; //@line 3609 "cPickle.c"
        var $45=($44) <= 32; //@line 3609 "cPickle.c"
        if ($45) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3609 "cPickle.c"
      case 11: // $bb8
        var $46=HEAP[$s]; //@line 3611 "cPickle.c"
        var $47=$46; //@line 3611 "cPickle.c"
        var $48=HEAP[$47]; //@line 3611 "cPickle.c"
        var $49=($48)!=34; //@line 3611 "cPickle.c"
        if ($49) { __label__ = 14; break; } else { __label__ = 12; break; } //@line 3611 "cPickle.c"
      case 12: // $bb9
        var $50=HEAP[$s]; //@line 3611 "cPickle.c"
        var $51=$len; //@line 3611 "cPickle.c"
        var $52=($51) - 1; //@line 3611 "cPickle.c"
        var $53=$50+$52; //@line 3611 "cPickle.c"
        var $54=HEAP[$53]; //@line 3611 "cPickle.c"
        var $55=($54)!=34; //@line 3611 "cPickle.c"
        if ($55) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 3611 "cPickle.c"
      case 13: // $bb10
        var $56=HEAP[$s]; //@line 3612 "cPickle.c"
        var $57=$len; //@line 3612 "cPickle.c"
        var $58=($57) - 1; //@line 3612 "cPickle.c"
        var $59=$56+$58; //@line 3612 "cPickle.c"
        HEAP[$59]=0; //@line 3612 "cPickle.c"
        var $60=HEAP[$s]; //@line 3613 "cPickle.c"
        var $61=$60+1; //@line 3613 "cPickle.c"
        $p=$61; //@line 3613 "cPickle.c"
        var $62=$len; //@line 3614 "cPickle.c"
        var $63=($62) - 2; //@line 3614 "cPickle.c"
        $len=$63; //@line 3614 "cPickle.c"
        __label__ = 17; break; //@line 3614 "cPickle.c"
      case 14: // $bb11
        var $64=HEAP[$s]; //@line 3615 "cPickle.c"
        var $65=$64; //@line 3615 "cPickle.c"
        var $66=HEAP[$65]; //@line 3615 "cPickle.c"
        var $67=($66)!=39; //@line 3615 "cPickle.c"
        if ($67) { __label__ = 25; break; } else { __label__ = 15; break; } //@line 3615 "cPickle.c"
      case 15: // $bb12
        var $68=HEAP[$s]; //@line 3615 "cPickle.c"
        var $69=$len; //@line 3615 "cPickle.c"
        var $70=($69) - 1; //@line 3615 "cPickle.c"
        var $71=$68+$70; //@line 3615 "cPickle.c"
        var $72=HEAP[$71]; //@line 3615 "cPickle.c"
        var $73=($72)!=39; //@line 3615 "cPickle.c"
        if ($73) { __label__ = 25; break; } else { __label__ = 16; break; } //@line 3615 "cPickle.c"
      case 16: // $bb13
        var $74=HEAP[$s]; //@line 3616 "cPickle.c"
        var $75=$len; //@line 3616 "cPickle.c"
        var $76=($75) - 1; //@line 3616 "cPickle.c"
        var $77=$74+$76; //@line 3616 "cPickle.c"
        HEAP[$77]=0; //@line 3616 "cPickle.c"
        var $78=HEAP[$s]; //@line 3617 "cPickle.c"
        var $79=$78+1; //@line 3617 "cPickle.c"
        $p=$79; //@line 3617 "cPickle.c"
        var $80=$len; //@line 3618 "cPickle.c"
        var $81=($80) - 2; //@line 3618 "cPickle.c"
        $len=$81; //@line 3618 "cPickle.c"
        __label__ = 17; break; //@line 3618 "cPickle.c"
      case 17: // $bb14
        var $82=$p; //@line 3623 "cPickle.c"
        var $83=$len; //@line 3623 "cPickle.c"
        var $84=_PyString_DecodeEscape($82, $83, 0, 0, 0); //@line 3623 "cPickle.c"
        $str=$84; //@line 3623 "cPickle.c"
        var $85=HEAP[$s]; //@line 3624 "cPickle.c"
        _free($85); //@line 3624 "cPickle.c"
        var $86=$str; //@line 3625 "cPickle.c"
        var $87=($86)!=0; //@line 3625 "cPickle.c"
        if ($87) { __label__ = 18; break; } else { __label__ = 24; break; } //@line 3625 "cPickle.c"
      case 18: // $bb15
        var $88=$self_addr; //@line 3626 "cPickle.c"
        var $89=$88+32; //@line 3626 "cPickle.c"
        var $90=HEAP[$89]; //@line 3626 "cPickle.c"
        var $91=$90+8; //@line 3626 "cPickle.c"
        var $92=HEAP[$91]; //@line 3626 "cPickle.c"
        var $93=$self_addr; //@line 3626 "cPickle.c"
        var $94=$93+32; //@line 3626 "cPickle.c"
        var $95=HEAP[$94]; //@line 3626 "cPickle.c"
        var $96=$95+12; //@line 3626 "cPickle.c"
        var $97=HEAP[$96]; //@line 3626 "cPickle.c"
        var $98=($92)==($97); //@line 3626 "cPickle.c"
        if ($98) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 3626 "cPickle.c"
      case 19: // $bb16
        var $99=$self_addr; //@line 3626 "cPickle.c"
        var $100=$99+32; //@line 3626 "cPickle.c"
        var $101=HEAP[$100]; //@line 3626 "cPickle.c"
        var $102=_Pdata_grow($101); //@line 3626 "cPickle.c"
        var $103=($102) < 0; //@line 3626 "cPickle.c"
        if ($103) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 3626 "cPickle.c"
      case 20: // $bb17
        var $104=$str; //@line 3626 "cPickle.c"
        var $105=$104; //@line 3626 "cPickle.c"
        var $106=HEAP[$105]; //@line 3626 "cPickle.c"
        var $107=($106) - 1; //@line 3626 "cPickle.c"
        var $108=$str; //@line 3626 "cPickle.c"
        var $109=$108; //@line 3626 "cPickle.c"
        HEAP[$109]=$107; //@line 3626 "cPickle.c"
        var $110=$str; //@line 3626 "cPickle.c"
        var $111=$110; //@line 3626 "cPickle.c"
        var $112=HEAP[$111]; //@line 3626 "cPickle.c"
        var $113=($112)==0; //@line 3626 "cPickle.c"
        if ($113) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 3626 "cPickle.c"
      case 21: // $bb18
        var $114=$str; //@line 3626 "cPickle.c"
        var $115=$114+4; //@line 3626 "cPickle.c"
        var $116=HEAP[$115]; //@line 3626 "cPickle.c"
        var $117=$116+24; //@line 3626 "cPickle.c"
        var $118=HEAP[$117]; //@line 3626 "cPickle.c"
        var $119=$str; //@line 3626 "cPickle.c"
        FUNCTION_TABLE[$118]($119); //@line 3626 "cPickle.c"
        __label__ = 22; break; //@line 3626 "cPickle.c"
      case 22: // $bb19
        $2=-1; //@line 3626 "cPickle.c"
        __label__ = 26; break; //@line 3626 "cPickle.c"
      case 23: // $bb20
        var $120=$self_addr; //@line 3626 "cPickle.c"
        var $121=$120+32; //@line 3626 "cPickle.c"
        var $122=HEAP[$121]; //@line 3626 "cPickle.c"
        var $123=$122+16; //@line 3626 "cPickle.c"
        var $124=HEAP[$123]; //@line 3626 "cPickle.c"
        var $125=$self_addr; //@line 3626 "cPickle.c"
        var $126=$125+32; //@line 3626 "cPickle.c"
        var $127=HEAP[$126]; //@line 3626 "cPickle.c"
        var $128=$127+8; //@line 3626 "cPickle.c"
        var $129=HEAP[$128]; //@line 3626 "cPickle.c"
        var $130=$124+4*$129; //@line 3626 "cPickle.c"
        var $131=$str; //@line 3626 "cPickle.c"
        HEAP[$130]=$131; //@line 3626 "cPickle.c"
        var $132=($129) + 1; //@line 3626 "cPickle.c"
        var $133=$127+8; //@line 3626 "cPickle.c"
        HEAP[$133]=$132; //@line 3626 "cPickle.c"
        $res=0; //@line 3627 "cPickle.c"
        __label__ = 24; break; //@line 3627 "cPickle.c"
      case 24: // $bb21
        var $134=$res; //@line 3629 "cPickle.c"
        $2=$134; //@line 3629 "cPickle.c"
        __label__ = 26; break; //@line 3629 "cPickle.c"
      case 25: // $insecure
        var $135=HEAP[$s]; //@line 3632 "cPickle.c"
        _free($135); //@line 3632 "cPickle.c"
        var $136=HEAP[_PyExc_ValueError]; //@line 3633 "cPickle.c"
        _PyErr_SetString($136, __str85); //@line 3633 "cPickle.c"
        $2=-1; //@line 3634 "cPickle.c"
        __label__ = 26; break; //@line 3634 "cPickle.c"
      case 26: // $bb22
        var $137=$2; //@line 3603 "cPickle.c"
        $retval=$137; //@line 3603 "cPickle.c"
        var $retval23=$retval; //@line 3603 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 3603 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binstring($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr_i;
        var $x_addr_i;
        var $retval_i;
        var $0;
        var $c_i;
        var $i_i;
        var $l_i;
        var $self_addr;
        var $retval;
        var $1;
        var $py_string;
        var $l;
        var $s=__stackBase__;
        $self_addr=$self;
        $py_string=0; //@line 3641 "cPickle.c"
        var $2=$self_addr; //@line 3645 "cPickle.c"
        var $3=$2+60; //@line 3645 "cPickle.c"
        var $4=HEAP[$3]; //@line 3645 "cPickle.c"
        var $5=$self_addr; //@line 3645 "cPickle.c"
        var $6=FUNCTION_TABLE[$4]($5, $s, 4); //@line 3645 "cPickle.c"
        var $7=($6) < 0; //@line 3645 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3645 "cPickle.c"
      case 1: // $bb
        $1=-1; //@line 3645 "cPickle.c"
        __label__ = 17; break; //@line 3645 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$s]; //@line 3647 "cPickle.c"
        $s_addr_i=$8;
        $x_addr_i=4;
        $i_i=0; //@line 3408 "cPickle.c"
        $l_i=0; //@line 3408 "cPickle.c"
        var $9=$i_i; //@line 3408 "cPickle.c"
        var $10=$x_addr_i; //@line 3408 "cPickle.c"
        var $11=($9) < ($10); //@line 3408 "cPickle.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 3408 "cPickle.c"
      case 3: // $calc_binint_exit_thread
        $0=0; //@line 3420 "cPickle.c"
        $retval_i=0; //@line 3420 "cPickle.c"
        $l=0; //@line 3647 "cPickle.c"
        __label__ = 7; break;
      case 4: // $bb_i
        var $12=$s_addr_i; //@line 3409 "cPickle.c"
        var $13=$i_i; //@line 3409 "cPickle.c"
        var $14=$12+$13; //@line 3409 "cPickle.c"
        var $15=HEAP[$14]; //@line 3409 "cPickle.c"
        $c_i=$15; //@line 3409 "cPickle.c"
        var $16=$c_i; //@line 3410 "cPickle.c"
        var $17=($16); //@line 3410 "cPickle.c"
        var $18=$i_i; //@line 3410 "cPickle.c"
        var $19=($18) * 8; //@line 3410 "cPickle.c"
        var $20=($17) << ($19); //@line 3410 "cPickle.c"
        var $21=$l_i; //@line 3410 "cPickle.c"
        var $22=($20) | ($21); //@line 3410 "cPickle.c"
        $l_i=$22; //@line 3410 "cPickle.c"
        var $23=$i_i; //@line 3408 "cPickle.c"
        var $24=($23) + 1; //@line 3408 "cPickle.c"
        $i_i=$24; //@line 3408 "cPickle.c"
        var $25=$i_i; //@line 3408 "cPickle.c"
        var $26=$x_addr_i; //@line 3408 "cPickle.c"
        var $27=($25) < ($26); //@line 3408 "cPickle.c"
        if ($27) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3408 "cPickle.c"
      case 5: // $calc_binint_exit
        var $_pr=$l_i;
        $0=$_pr; //@line 3420 "cPickle.c"
        $retval_i=$_pr; //@line 3420 "cPickle.c"
        $l=$_pr; //@line 3647 "cPickle.c"
        var $28=($_pr) < 0; //@line 3648 "cPickle.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3648 "cPickle.c"
      case 6: // $bb2
        var $29=HEAP[_UnpicklingError]; //@line 3652 "cPickle.c"
        _PyErr_SetString($29, __str86); //@line 3652 "cPickle.c"
        $1=-1; //@line 3654 "cPickle.c"
        __label__ = 17; break; //@line 3654 "cPickle.c"
      case 7: // $bb3
        var $30=$self_addr; //@line 3657 "cPickle.c"
        var $31=$30+60; //@line 3657 "cPickle.c"
        var $32=HEAP[$31]; //@line 3657 "cPickle.c"
        var $33=$self_addr; //@line 3657 "cPickle.c"
        var $34=$l; //@line 3657 "cPickle.c"
        var $35=FUNCTION_TABLE[$32]($33, $s, $34); //@line 3657 "cPickle.c"
        var $36=($35) < 0; //@line 3657 "cPickle.c"
        if ($36) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3657 "cPickle.c"
      case 8: // $bb4
        $1=-1; //@line 3658 "cPickle.c"
        __label__ = 17; break; //@line 3658 "cPickle.c"
      case 9: // $bb5
        var $37=HEAP[$s]; //@line 3660 "cPickle.c"
        var $38=$l; //@line 3660 "cPickle.c"
        var $39=_PyString_FromStringAndSize($37, $38); //@line 3660 "cPickle.c"
        $py_string=$39; //@line 3660 "cPickle.c"
        var $40=$py_string; //@line 3660 "cPickle.c"
        var $41=($40)==0; //@line 3660 "cPickle.c"
        if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3660 "cPickle.c"
      case 10: // $bb6
        $1=-1; //@line 3661 "cPickle.c"
        __label__ = 17; break; //@line 3661 "cPickle.c"
      case 11: // $bb7
        var $42=$self_addr; //@line 3663 "cPickle.c"
        var $43=$42+32; //@line 3663 "cPickle.c"
        var $44=HEAP[$43]; //@line 3663 "cPickle.c"
        var $45=$44+8; //@line 3663 "cPickle.c"
        var $46=HEAP[$45]; //@line 3663 "cPickle.c"
        var $47=$self_addr; //@line 3663 "cPickle.c"
        var $48=$47+32; //@line 3663 "cPickle.c"
        var $49=HEAP[$48]; //@line 3663 "cPickle.c"
        var $50=$49+12; //@line 3663 "cPickle.c"
        var $51=HEAP[$50]; //@line 3663 "cPickle.c"
        var $52=($46)==($51); //@line 3663 "cPickle.c"
        if ($52) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 3663 "cPickle.c"
      case 12: // $bb8
        var $53=$self_addr; //@line 3663 "cPickle.c"
        var $54=$53+32; //@line 3663 "cPickle.c"
        var $55=HEAP[$54]; //@line 3663 "cPickle.c"
        var $56=_Pdata_grow($55); //@line 3663 "cPickle.c"
        var $57=($56) < 0; //@line 3663 "cPickle.c"
        if ($57) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 3663 "cPickle.c"
      case 13: // $bb9
        var $58=$py_string; //@line 3663 "cPickle.c"
        var $59=$58; //@line 3663 "cPickle.c"
        var $60=HEAP[$59]; //@line 3663 "cPickle.c"
        var $61=($60) - 1; //@line 3663 "cPickle.c"
        var $62=$py_string; //@line 3663 "cPickle.c"
        var $63=$62; //@line 3663 "cPickle.c"
        HEAP[$63]=$61; //@line 3663 "cPickle.c"
        var $64=$py_string; //@line 3663 "cPickle.c"
        var $65=$64; //@line 3663 "cPickle.c"
        var $66=HEAP[$65]; //@line 3663 "cPickle.c"
        var $67=($66)==0; //@line 3663 "cPickle.c"
        if ($67) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3663 "cPickle.c"
      case 14: // $bb10
        var $68=$py_string; //@line 3663 "cPickle.c"
        var $69=$68+4; //@line 3663 "cPickle.c"
        var $70=HEAP[$69]; //@line 3663 "cPickle.c"
        var $71=$70+24; //@line 3663 "cPickle.c"
        var $72=HEAP[$71]; //@line 3663 "cPickle.c"
        var $73=$py_string; //@line 3663 "cPickle.c"
        FUNCTION_TABLE[$72]($73); //@line 3663 "cPickle.c"
        __label__ = 15; break; //@line 3663 "cPickle.c"
      case 15: // $bb11
        $1=-1; //@line 3663 "cPickle.c"
        __label__ = 17; break; //@line 3663 "cPickle.c"
      case 16: // $bb12
        var $74=$self_addr; //@line 3663 "cPickle.c"
        var $75=$74+32; //@line 3663 "cPickle.c"
        var $76=HEAP[$75]; //@line 3663 "cPickle.c"
        var $77=$76+16; //@line 3663 "cPickle.c"
        var $78=HEAP[$77]; //@line 3663 "cPickle.c"
        var $79=$self_addr; //@line 3663 "cPickle.c"
        var $80=$79+32; //@line 3663 "cPickle.c"
        var $81=HEAP[$80]; //@line 3663 "cPickle.c"
        var $82=$81+8; //@line 3663 "cPickle.c"
        var $83=HEAP[$82]; //@line 3663 "cPickle.c"
        var $84=$78+4*$83; //@line 3663 "cPickle.c"
        var $85=$py_string; //@line 3663 "cPickle.c"
        HEAP[$84]=$85; //@line 3663 "cPickle.c"
        var $86=($83) + 1; //@line 3663 "cPickle.c"
        var $87=$81+8; //@line 3663 "cPickle.c"
        HEAP[$87]=$86; //@line 3663 "cPickle.c"
        $1=0; //@line 3664 "cPickle.c"
        __label__ = 17; break; //@line 3664 "cPickle.c"
      case 17: // $bb13
        var $88=$1; //@line 3645 "cPickle.c"
        $retval=$88; //@line 3645 "cPickle.c"
        var $retval14=$retval; //@line 3645 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 3645 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_short_binstring($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_string;
        var $l;
        var $s=__stackBase__;
        $self_addr=$self;
        $py_string=0; //@line 3671 "cPickle.c"
        var $1=$self_addr; //@line 3675 "cPickle.c"
        var $2=$1+60; //@line 3675 "cPickle.c"
        var $3=HEAP[$2]; //@line 3675 "cPickle.c"
        var $4=$self_addr; //@line 3675 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 1); //@line 3675 "cPickle.c"
        var $6=($5) < 0; //@line 3675 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3675 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3676 "cPickle.c"
        __label__ = 12; break; //@line 3676 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3678 "cPickle.c"
        var $8=$7; //@line 3678 "cPickle.c"
        var $9=HEAP[$8]; //@line 3678 "cPickle.c"
        $l=$9; //@line 3678 "cPickle.c"
        var $10=$self_addr; //@line 3680 "cPickle.c"
        var $11=$10+60; //@line 3680 "cPickle.c"
        var $12=HEAP[$11]; //@line 3680 "cPickle.c"
        var $13=$l; //@line 3680 "cPickle.c"
        var $14=($13); //@line 3680 "cPickle.c"
        var $15=$self_addr; //@line 3680 "cPickle.c"
        var $16=FUNCTION_TABLE[$12]($15, $s, $14); //@line 3680 "cPickle.c"
        var $17=($16) < 0; //@line 3680 "cPickle.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3680 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 3680 "cPickle.c"
        __label__ = 12; break; //@line 3680 "cPickle.c"
      case 4: // $bb3
        var $18=$l; //@line 3682 "cPickle.c"
        var $19=($18); //@line 3682 "cPickle.c"
        var $20=HEAP[$s]; //@line 3682 "cPickle.c"
        var $21=_PyString_FromStringAndSize($20, $19); //@line 3682 "cPickle.c"
        $py_string=$21; //@line 3682 "cPickle.c"
        var $22=$py_string; //@line 3682 "cPickle.c"
        var $23=($22)==0; //@line 3682 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3682 "cPickle.c"
      case 5: // $bb4
        $0=-1; //@line 3682 "cPickle.c"
        __label__ = 12; break; //@line 3682 "cPickle.c"
      case 6: // $bb5
        var $24=$self_addr; //@line 3684 "cPickle.c"
        var $25=$24+32; //@line 3684 "cPickle.c"
        var $26=HEAP[$25]; //@line 3684 "cPickle.c"
        var $27=$26+8; //@line 3684 "cPickle.c"
        var $28=HEAP[$27]; //@line 3684 "cPickle.c"
        var $29=$self_addr; //@line 3684 "cPickle.c"
        var $30=$29+32; //@line 3684 "cPickle.c"
        var $31=HEAP[$30]; //@line 3684 "cPickle.c"
        var $32=$31+12; //@line 3684 "cPickle.c"
        var $33=HEAP[$32]; //@line 3684 "cPickle.c"
        var $34=($28)==($33); //@line 3684 "cPickle.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 3684 "cPickle.c"
      case 7: // $bb6
        var $35=$self_addr; //@line 3684 "cPickle.c"
        var $36=$35+32; //@line 3684 "cPickle.c"
        var $37=HEAP[$36]; //@line 3684 "cPickle.c"
        var $38=_Pdata_grow($37); //@line 3684 "cPickle.c"
        var $39=($38) < 0; //@line 3684 "cPickle.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 3684 "cPickle.c"
      case 8: // $bb7
        var $40=$py_string; //@line 3684 "cPickle.c"
        var $41=$40; //@line 3684 "cPickle.c"
        var $42=HEAP[$41]; //@line 3684 "cPickle.c"
        var $43=($42) - 1; //@line 3684 "cPickle.c"
        var $44=$py_string; //@line 3684 "cPickle.c"
        var $45=$44; //@line 3684 "cPickle.c"
        HEAP[$45]=$43; //@line 3684 "cPickle.c"
        var $46=$py_string; //@line 3684 "cPickle.c"
        var $47=$46; //@line 3684 "cPickle.c"
        var $48=HEAP[$47]; //@line 3684 "cPickle.c"
        var $49=($48)==0; //@line 3684 "cPickle.c"
        if ($49) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3684 "cPickle.c"
      case 9: // $bb8
        var $50=$py_string; //@line 3684 "cPickle.c"
        var $51=$50+4; //@line 3684 "cPickle.c"
        var $52=HEAP[$51]; //@line 3684 "cPickle.c"
        var $53=$52+24; //@line 3684 "cPickle.c"
        var $54=HEAP[$53]; //@line 3684 "cPickle.c"
        var $55=$py_string; //@line 3684 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 3684 "cPickle.c"
        __label__ = 10; break; //@line 3684 "cPickle.c"
      case 10: // $bb9
        $0=-1; //@line 3684 "cPickle.c"
        __label__ = 12; break; //@line 3684 "cPickle.c"
      case 11: // $bb10
        var $56=$self_addr; //@line 3684 "cPickle.c"
        var $57=$56+32; //@line 3684 "cPickle.c"
        var $58=HEAP[$57]; //@line 3684 "cPickle.c"
        var $59=$58+16; //@line 3684 "cPickle.c"
        var $60=HEAP[$59]; //@line 3684 "cPickle.c"
        var $61=$self_addr; //@line 3684 "cPickle.c"
        var $62=$61+32; //@line 3684 "cPickle.c"
        var $63=HEAP[$62]; //@line 3684 "cPickle.c"
        var $64=$63+8; //@line 3684 "cPickle.c"
        var $65=HEAP[$64]; //@line 3684 "cPickle.c"
        var $66=$60+4*$65; //@line 3684 "cPickle.c"
        var $67=$py_string; //@line 3684 "cPickle.c"
        HEAP[$66]=$67; //@line 3684 "cPickle.c"
        var $68=($65) + 1; //@line 3684 "cPickle.c"
        var $69=$63+8; //@line 3684 "cPickle.c"
        HEAP[$69]=$68; //@line 3684 "cPickle.c"
        $0=0; //@line 3685 "cPickle.c"
        __label__ = 12; break; //@line 3685 "cPickle.c"
      case 12: // $bb11
        var $70=$0; //@line 3676 "cPickle.c"
        $retval=$70; //@line 3676 "cPickle.c"
        var $retval12=$retval; //@line 3676 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 3676 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_unicode($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval_i;
        var $0;
        var $self_addr;
        var $retval;
        var $1;
        var $str;
        var $len;
        var $res;
        var $s=__stackBase__;
        $self_addr=$self;
        $str=0; //@line 3693 "cPickle.c"
        $res=-1; //@line 3694 "cPickle.c"
        var $2=$self_addr; //@line 3697 "cPickle.c"
        var $3=$2+64; //@line 3697 "cPickle.c"
        var $4=HEAP[$3]; //@line 3697 "cPickle.c"
        var $5=$self_addr; //@line 3697 "cPickle.c"
        var $6=FUNCTION_TABLE[$4]($5, $s); //@line 3697 "cPickle.c"
        $len=$6; //@line 3697 "cPickle.c"
        var $7=$len; //@line 3697 "cPickle.c"
        var $8=($7) < 0; //@line 3697 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3697 "cPickle.c"
      case 1: // $bb
        $1=-1; //@line 3697 "cPickle.c"
        __label__ = 12; break; //@line 3697 "cPickle.c"
      case 2: // $bb1
        var $9=$len; //@line 3698 "cPickle.c"
        var $10=($9) <= 0; //@line 3698 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3698 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($11, __str79); //@line 3339 "cPickle.c"
        $0=-1; //@line 3340 "cPickle.c"
        var $12=$0; //@line 3340 "cPickle.c"
        $retval_i=$12; //@line 3340 "cPickle.c"
        var $retval1_i=$retval_i; //@line 3340 "cPickle.c"
        $1=$retval1_i; //@line 3698 "cPickle.c"
        __label__ = 12; break; //@line 3698 "cPickle.c"
      case 4: // $bb3
        var $13=$len; //@line 3700 "cPickle.c"
        var $14=($13) - 1; //@line 3700 "cPickle.c"
        var $15=HEAP[$s]; //@line 3700 "cPickle.c"
        var $16=_PyUnicodeUCS2_DecodeRawUnicodeEscape($15, $14, 0); //@line 3700 "cPickle.c"
        $str=$16; //@line 3700 "cPickle.c"
        var $17=$str; //@line 3700 "cPickle.c"
        var $18=($17)==0; //@line 3700 "cPickle.c"
        if ($18) { __label__ = 11; break; } else { __label__ = 5; break; } //@line 3700 "cPickle.c"
      case 5: // $bb4
        var $19=$self_addr; //@line 3703 "cPickle.c"
        var $20=$19+32; //@line 3703 "cPickle.c"
        var $21=HEAP[$20]; //@line 3703 "cPickle.c"
        var $22=$21+8; //@line 3703 "cPickle.c"
        var $23=HEAP[$22]; //@line 3703 "cPickle.c"
        var $24=$self_addr; //@line 3703 "cPickle.c"
        var $25=$24+32; //@line 3703 "cPickle.c"
        var $26=HEAP[$25]; //@line 3703 "cPickle.c"
        var $27=$26+12; //@line 3703 "cPickle.c"
        var $28=HEAP[$27]; //@line 3703 "cPickle.c"
        var $29=($23)==($28); //@line 3703 "cPickle.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 3703 "cPickle.c"
      case 6: // $bb5
        var $30=$self_addr; //@line 3703 "cPickle.c"
        var $31=$30+32; //@line 3703 "cPickle.c"
        var $32=HEAP[$31]; //@line 3703 "cPickle.c"
        var $33=_Pdata_grow($32); //@line 3703 "cPickle.c"
        var $34=($33) < 0; //@line 3703 "cPickle.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 3703 "cPickle.c"
      case 7: // $bb6
        var $35=$str; //@line 3703 "cPickle.c"
        var $36=$35; //@line 3703 "cPickle.c"
        var $37=HEAP[$36]; //@line 3703 "cPickle.c"
        var $38=($37) - 1; //@line 3703 "cPickle.c"
        var $39=$str; //@line 3703 "cPickle.c"
        var $40=$39; //@line 3703 "cPickle.c"
        HEAP[$40]=$38; //@line 3703 "cPickle.c"
        var $41=$str; //@line 3703 "cPickle.c"
        var $42=$41; //@line 3703 "cPickle.c"
        var $43=HEAP[$42]; //@line 3703 "cPickle.c"
        var $44=($43)==0; //@line 3703 "cPickle.c"
        if ($44) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3703 "cPickle.c"
      case 8: // $bb7
        var $45=$str; //@line 3703 "cPickle.c"
        var $46=$45+4; //@line 3703 "cPickle.c"
        var $47=HEAP[$46]; //@line 3703 "cPickle.c"
        var $48=$47+24; //@line 3703 "cPickle.c"
        var $49=HEAP[$48]; //@line 3703 "cPickle.c"
        var $50=$str; //@line 3703 "cPickle.c"
        FUNCTION_TABLE[$49]($50); //@line 3703 "cPickle.c"
        __label__ = 9; break; //@line 3703 "cPickle.c"
      case 9: // $bb8
        $1=-1; //@line 3703 "cPickle.c"
        __label__ = 12; break; //@line 3703 "cPickle.c"
      case 10: // $bb9
        var $51=$self_addr; //@line 3703 "cPickle.c"
        var $52=$51+32; //@line 3703 "cPickle.c"
        var $53=HEAP[$52]; //@line 3703 "cPickle.c"
        var $54=$53+16; //@line 3703 "cPickle.c"
        var $55=HEAP[$54]; //@line 3703 "cPickle.c"
        var $56=$self_addr; //@line 3703 "cPickle.c"
        var $57=$56+32; //@line 3703 "cPickle.c"
        var $58=HEAP[$57]; //@line 3703 "cPickle.c"
        var $59=$58+8; //@line 3703 "cPickle.c"
        var $60=HEAP[$59]; //@line 3703 "cPickle.c"
        var $61=$55+4*$60; //@line 3703 "cPickle.c"
        var $62=$str; //@line 3703 "cPickle.c"
        HEAP[$61]=$62; //@line 3703 "cPickle.c"
        var $63=($60) + 1; //@line 3703 "cPickle.c"
        var $64=$58+8; //@line 3703 "cPickle.c"
        HEAP[$64]=$63; //@line 3703 "cPickle.c"
        $1=0; //@line 3704 "cPickle.c"
        __label__ = 12; break; //@line 3704 "cPickle.c"
      case 11: // $finally
        var $65=$res; //@line 3707 "cPickle.c"
        $1=$65; //@line 3707 "cPickle.c"
        __label__ = 12; break; //@line 3707 "cPickle.c"
      case 12: // $bb10
        var $66=$1; //@line 3697 "cPickle.c"
        $retval=$66; //@line 3697 "cPickle.c"
        var $retval11=$retval; //@line 3697 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 3697 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binunicode($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr_i;
        var $x_addr_i;
        var $retval_i;
        var $0;
        var $c_i;
        var $i_i;
        var $l_i;
        var $self_addr;
        var $retval;
        var $1;
        var $unicode;
        var $l;
        var $s=__stackBase__;
        $self_addr=$self;
        var $2=$self_addr; //@line 3720 "cPickle.c"
        var $3=$2+60; //@line 3720 "cPickle.c"
        var $4=HEAP[$3]; //@line 3720 "cPickle.c"
        var $5=$self_addr; //@line 3720 "cPickle.c"
        var $6=FUNCTION_TABLE[$4]($5, $s, 4); //@line 3720 "cPickle.c"
        var $7=($6) < 0; //@line 3720 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3720 "cPickle.c"
      case 1: // $bb
        $1=-1; //@line 3720 "cPickle.c"
        __label__ = 17; break; //@line 3720 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$s]; //@line 3722 "cPickle.c"
        $s_addr_i=$8;
        $x_addr_i=4;
        $i_i=0; //@line 3408 "cPickle.c"
        $l_i=0; //@line 3408 "cPickle.c"
        var $9=$i_i; //@line 3408 "cPickle.c"
        var $10=$x_addr_i; //@line 3408 "cPickle.c"
        var $11=($9) < ($10); //@line 3408 "cPickle.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 3408 "cPickle.c"
      case 3: // $calc_binint_exit_thread
        $0=0; //@line 3420 "cPickle.c"
        $retval_i=0; //@line 3420 "cPickle.c"
        $l=0; //@line 3722 "cPickle.c"
        __label__ = 7; break;
      case 4: // $bb_i
        var $12=$s_addr_i; //@line 3409 "cPickle.c"
        var $13=$i_i; //@line 3409 "cPickle.c"
        var $14=$12+$13; //@line 3409 "cPickle.c"
        var $15=HEAP[$14]; //@line 3409 "cPickle.c"
        $c_i=$15; //@line 3409 "cPickle.c"
        var $16=$c_i; //@line 3410 "cPickle.c"
        var $17=($16); //@line 3410 "cPickle.c"
        var $18=$i_i; //@line 3410 "cPickle.c"
        var $19=($18) * 8; //@line 3410 "cPickle.c"
        var $20=($17) << ($19); //@line 3410 "cPickle.c"
        var $21=$l_i; //@line 3410 "cPickle.c"
        var $22=($20) | ($21); //@line 3410 "cPickle.c"
        $l_i=$22; //@line 3410 "cPickle.c"
        var $23=$i_i; //@line 3408 "cPickle.c"
        var $24=($23) + 1; //@line 3408 "cPickle.c"
        $i_i=$24; //@line 3408 "cPickle.c"
        var $25=$i_i; //@line 3408 "cPickle.c"
        var $26=$x_addr_i; //@line 3408 "cPickle.c"
        var $27=($25) < ($26); //@line 3408 "cPickle.c"
        if ($27) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3408 "cPickle.c"
      case 5: // $calc_binint_exit
        var $_pr=$l_i;
        $0=$_pr; //@line 3420 "cPickle.c"
        $retval_i=$_pr; //@line 3420 "cPickle.c"
        $l=$_pr; //@line 3722 "cPickle.c"
        var $28=($_pr) < 0; //@line 3723 "cPickle.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3723 "cPickle.c"
      case 6: // $bb2
        var $29=HEAP[_UnpicklingError]; //@line 3727 "cPickle.c"
        _PyErr_SetString($29, __str87); //@line 3727 "cPickle.c"
        $1=-1; //@line 3729 "cPickle.c"
        __label__ = 17; break; //@line 3729 "cPickle.c"
      case 7: // $bb3
        var $30=$self_addr; //@line 3732 "cPickle.c"
        var $31=$30+60; //@line 3732 "cPickle.c"
        var $32=HEAP[$31]; //@line 3732 "cPickle.c"
        var $33=$self_addr; //@line 3732 "cPickle.c"
        var $34=$l; //@line 3732 "cPickle.c"
        var $35=FUNCTION_TABLE[$32]($33, $s, $34); //@line 3732 "cPickle.c"
        var $36=($35) < 0; //@line 3732 "cPickle.c"
        if ($36) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3732 "cPickle.c"
      case 8: // $bb4
        $1=-1; //@line 3733 "cPickle.c"
        __label__ = 17; break; //@line 3733 "cPickle.c"
      case 9: // $bb5
        var $37=HEAP[$s]; //@line 3735 "cPickle.c"
        var $38=$l; //@line 3735 "cPickle.c"
        var $39=_PyUnicodeUCS2_DecodeUTF8($37, $38, 0); //@line 3735 "cPickle.c"
        $unicode=$39; //@line 3735 "cPickle.c"
        var $40=$unicode; //@line 3735 "cPickle.c"
        var $41=($40)==0; //@line 3735 "cPickle.c"
        if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3735 "cPickle.c"
      case 10: // $bb6
        $1=-1; //@line 3736 "cPickle.c"
        __label__ = 17; break; //@line 3736 "cPickle.c"
      case 11: // $bb7
        var $42=$self_addr; //@line 3738 "cPickle.c"
        var $43=$42+32; //@line 3738 "cPickle.c"
        var $44=HEAP[$43]; //@line 3738 "cPickle.c"
        var $45=$44+8; //@line 3738 "cPickle.c"
        var $46=HEAP[$45]; //@line 3738 "cPickle.c"
        var $47=$self_addr; //@line 3738 "cPickle.c"
        var $48=$47+32; //@line 3738 "cPickle.c"
        var $49=HEAP[$48]; //@line 3738 "cPickle.c"
        var $50=$49+12; //@line 3738 "cPickle.c"
        var $51=HEAP[$50]; //@line 3738 "cPickle.c"
        var $52=($46)==($51); //@line 3738 "cPickle.c"
        if ($52) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 3738 "cPickle.c"
      case 12: // $bb8
        var $53=$self_addr; //@line 3738 "cPickle.c"
        var $54=$53+32; //@line 3738 "cPickle.c"
        var $55=HEAP[$54]; //@line 3738 "cPickle.c"
        var $56=_Pdata_grow($55); //@line 3738 "cPickle.c"
        var $57=($56) < 0; //@line 3738 "cPickle.c"
        if ($57) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 3738 "cPickle.c"
      case 13: // $bb9
        var $58=$unicode; //@line 3738 "cPickle.c"
        var $59=$58; //@line 3738 "cPickle.c"
        var $60=HEAP[$59]; //@line 3738 "cPickle.c"
        var $61=($60) - 1; //@line 3738 "cPickle.c"
        var $62=$unicode; //@line 3738 "cPickle.c"
        var $63=$62; //@line 3738 "cPickle.c"
        HEAP[$63]=$61; //@line 3738 "cPickle.c"
        var $64=$unicode; //@line 3738 "cPickle.c"
        var $65=$64; //@line 3738 "cPickle.c"
        var $66=HEAP[$65]; //@line 3738 "cPickle.c"
        var $67=($66)==0; //@line 3738 "cPickle.c"
        if ($67) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3738 "cPickle.c"
      case 14: // $bb10
        var $68=$unicode; //@line 3738 "cPickle.c"
        var $69=$68+4; //@line 3738 "cPickle.c"
        var $70=HEAP[$69]; //@line 3738 "cPickle.c"
        var $71=$70+24; //@line 3738 "cPickle.c"
        var $72=HEAP[$71]; //@line 3738 "cPickle.c"
        var $73=$unicode; //@line 3738 "cPickle.c"
        FUNCTION_TABLE[$72]($73); //@line 3738 "cPickle.c"
        __label__ = 15; break; //@line 3738 "cPickle.c"
      case 15: // $bb11
        $1=-1; //@line 3738 "cPickle.c"
        __label__ = 17; break; //@line 3738 "cPickle.c"
      case 16: // $bb12
        var $74=$self_addr; //@line 3738 "cPickle.c"
        var $75=$74+32; //@line 3738 "cPickle.c"
        var $76=HEAP[$75]; //@line 3738 "cPickle.c"
        var $77=$76+16; //@line 3738 "cPickle.c"
        var $78=HEAP[$77]; //@line 3738 "cPickle.c"
        var $79=$self_addr; //@line 3738 "cPickle.c"
        var $80=$79+32; //@line 3738 "cPickle.c"
        var $81=HEAP[$80]; //@line 3738 "cPickle.c"
        var $82=$81+8; //@line 3738 "cPickle.c"
        var $83=HEAP[$82]; //@line 3738 "cPickle.c"
        var $84=$78+4*$83; //@line 3738 "cPickle.c"
        var $85=$unicode; //@line 3738 "cPickle.c"
        HEAP[$84]=$85; //@line 3738 "cPickle.c"
        var $86=($83) + 1; //@line 3738 "cPickle.c"
        var $87=$81+8; //@line 3738 "cPickle.c"
        HEAP[$87]=$86; //@line 3738 "cPickle.c"
        $1=0; //@line 3739 "cPickle.c"
        __label__ = 17; break; //@line 3739 "cPickle.c"
      case 17: // $bb13
        var $88=$1; //@line 3720 "cPickle.c"
        $retval=$88; //@line 3720 "cPickle.c"
        var $retval14=$retval; //@line 3720 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 3720 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_tuple($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr_i;
        var $retval_i;
        var $0;
        var $self_addr;
        var $retval;
        var $1;
        var $tup;
        var $i;
        $self_addr=$self;
        var $2=$self_addr; //@line 3750 "cPickle.c"
        $self_addr_i=$2;
        var $3=$self_addr_i; //@line 3320 "cPickle.c"
        var $4=$3+52; //@line 3320 "cPickle.c"
        var $5=HEAP[$4]; //@line 3320 "cPickle.c"
        var $6=($5) <= 0; //@line 3320 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3320 "cPickle.c"
      case 1: // $marker_exit_thread
        var $7=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($7, __str78); //@line 3321 "cPickle.c"
        $0=-1; //@line 3322 "cPickle.c"
        $retval_i=-1; //@line 3322 "cPickle.c"
        $i=-1; //@line 3750 "cPickle.c"
        __label__ = 3; break;
      case 2: // $marker_exit
        var $8=$self_addr_i; //@line 3325 "cPickle.c"
        var $9=$8+48; //@line 3325 "cPickle.c"
        var $10=HEAP[$9]; //@line 3325 "cPickle.c"
        var $11=$self_addr_i; //@line 3325 "cPickle.c"
        var $12=$11+52; //@line 3325 "cPickle.c"
        var $13=HEAP[$12]; //@line 3325 "cPickle.c"
        var $14=($13) - 1; //@line 3325 "cPickle.c"
        var $15=$self_addr_i; //@line 3325 "cPickle.c"
        var $16=$15+52; //@line 3325 "cPickle.c"
        HEAP[$16]=$14; //@line 3325 "cPickle.c"
        var $17=$self_addr_i; //@line 3325 "cPickle.c"
        var $18=$17+52; //@line 3325 "cPickle.c"
        var $19=HEAP[$18]; //@line 3325 "cPickle.c"
        var $20=$10+4*$19; //@line 3325 "cPickle.c"
        var $21=HEAP[$20]; //@line 3325 "cPickle.c"
        $0=$21; //@line 3325 "cPickle.c"
        $retval_i=$21; //@line 3322 "cPickle.c"
        $i=$21; //@line 3750 "cPickle.c"
        var $22=($21) < 0; //@line 3750 "cPickle.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3750 "cPickle.c"
      case 3: // $bb
        $1=-1; //@line 3750 "cPickle.c"
        __label__ = 12; break; //@line 3750 "cPickle.c"
      case 4: // $bb1
        var $23=$self_addr; //@line 3751 "cPickle.c"
        var $24=$23+32; //@line 3751 "cPickle.c"
        var $25=HEAP[$24]; //@line 3751 "cPickle.c"
        var $26=$i; //@line 3751 "cPickle.c"
        var $27=_Pdata_popTuple($25, $26); //@line 3751 "cPickle.c"
        $tup=$27; //@line 3751 "cPickle.c"
        var $28=$tup; //@line 3751 "cPickle.c"
        var $29=($28)==0; //@line 3751 "cPickle.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3751 "cPickle.c"
      case 5: // $bb2
        $1=-1; //@line 3751 "cPickle.c"
        __label__ = 12; break; //@line 3751 "cPickle.c"
      case 6: // $bb3
        var $30=$self_addr; //@line 3752 "cPickle.c"
        var $31=$30+32; //@line 3752 "cPickle.c"
        var $32=HEAP[$31]; //@line 3752 "cPickle.c"
        var $33=$32+8; //@line 3752 "cPickle.c"
        var $34=HEAP[$33]; //@line 3752 "cPickle.c"
        var $35=$self_addr; //@line 3752 "cPickle.c"
        var $36=$35+32; //@line 3752 "cPickle.c"
        var $37=HEAP[$36]; //@line 3752 "cPickle.c"
        var $38=$37+12; //@line 3752 "cPickle.c"
        var $39=HEAP[$38]; //@line 3752 "cPickle.c"
        var $40=($34)==($39); //@line 3752 "cPickle.c"
        if ($40) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 3752 "cPickle.c"
      case 7: // $bb4
        var $41=$self_addr; //@line 3752 "cPickle.c"
        var $42=$41+32; //@line 3752 "cPickle.c"
        var $43=HEAP[$42]; //@line 3752 "cPickle.c"
        var $44=_Pdata_grow($43); //@line 3752 "cPickle.c"
        var $45=($44) < 0; //@line 3752 "cPickle.c"
        if ($45) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 3752 "cPickle.c"
      case 8: // $bb5
        var $46=$tup; //@line 3752 "cPickle.c"
        var $47=$46; //@line 3752 "cPickle.c"
        var $48=HEAP[$47]; //@line 3752 "cPickle.c"
        var $49=($48) - 1; //@line 3752 "cPickle.c"
        var $50=$tup; //@line 3752 "cPickle.c"
        var $51=$50; //@line 3752 "cPickle.c"
        HEAP[$51]=$49; //@line 3752 "cPickle.c"
        var $52=$tup; //@line 3752 "cPickle.c"
        var $53=$52; //@line 3752 "cPickle.c"
        var $54=HEAP[$53]; //@line 3752 "cPickle.c"
        var $55=($54)==0; //@line 3752 "cPickle.c"
        if ($55) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3752 "cPickle.c"
      case 9: // $bb6
        var $56=$tup; //@line 3752 "cPickle.c"
        var $57=$56+4; //@line 3752 "cPickle.c"
        var $58=HEAP[$57]; //@line 3752 "cPickle.c"
        var $59=$58+24; //@line 3752 "cPickle.c"
        var $60=HEAP[$59]; //@line 3752 "cPickle.c"
        var $61=$tup; //@line 3752 "cPickle.c"
        FUNCTION_TABLE[$60]($61); //@line 3752 "cPickle.c"
        __label__ = 10; break; //@line 3752 "cPickle.c"
      case 10: // $bb7
        $1=-1; //@line 3752 "cPickle.c"
        __label__ = 12; break; //@line 3752 "cPickle.c"
      case 11: // $bb8
        var $62=$self_addr; //@line 3752 "cPickle.c"
        var $63=$62+32; //@line 3752 "cPickle.c"
        var $64=HEAP[$63]; //@line 3752 "cPickle.c"
        var $65=$64+16; //@line 3752 "cPickle.c"
        var $66=HEAP[$65]; //@line 3752 "cPickle.c"
        var $67=$self_addr; //@line 3752 "cPickle.c"
        var $68=$67+32; //@line 3752 "cPickle.c"
        var $69=HEAP[$68]; //@line 3752 "cPickle.c"
        var $70=$69+8; //@line 3752 "cPickle.c"
        var $71=HEAP[$70]; //@line 3752 "cPickle.c"
        var $72=$66+4*$71; //@line 3752 "cPickle.c"
        var $73=$tup; //@line 3752 "cPickle.c"
        HEAP[$72]=$73; //@line 3752 "cPickle.c"
        var $74=($71) + 1; //@line 3752 "cPickle.c"
        var $75=$69+8; //@line 3752 "cPickle.c"
        HEAP[$75]=$74; //@line 3752 "cPickle.c"
        $1=0; //@line 3753 "cPickle.c"
        __label__ = 12; break; //@line 3753 "cPickle.c"
      case 12: // $bb9
        var $76=$1; //@line 3750 "cPickle.c"
        $retval=$76; //@line 3750 "cPickle.c"
        var $retval10=$retval; //@line 3750 "cPickle.c"
        ;
        return $retval10; //@line 3750 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_counted_tuple($self, $len) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $len_addr;
        var $retval;
        var $0;
        var $tup;
        var $element;
        $self_addr=$self;
        $len_addr=$len;
        var $1=$len_addr; //@line 3759 "cPickle.c"
        var $2=_PyTuple_New($1); //@line 3759 "cPickle.c"
        $tup=$2; //@line 3759 "cPickle.c"
        var $3=$tup; //@line 3761 "cPickle.c"
        var $4=($3)==0; //@line 3761 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 3761 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3762 "cPickle.c"
        __label__ = 14; break; //@line 3762 "cPickle.c"
      case 2: // $bb2
        var $5=($37)!=0; //@line 3767 "cPickle.c"
        if ($5) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 3767 "cPickle.c"
      case 3: // $bb5_thread
        var $6=HEAP[_UnpicklingError]; //@line 3767 "cPickle.c"
        _PyErr_SetString($6, __str88); //@line 3767 "cPickle.c"
        $element=0; //@line 3767 "cPickle.c"
        __label__ = 5; break;
      case 4: // $bb5
        var $7=$self_addr; //@line 3767 "cPickle.c"
        var $8=$7+32; //@line 3767 "cPickle.c"
        var $9=HEAP[$8]; //@line 3767 "cPickle.c"
        var $10=$9+16; //@line 3767 "cPickle.c"
        var $11=HEAP[$10]; //@line 3767 "cPickle.c"
        var $12=$self_addr; //@line 3767 "cPickle.c"
        var $13=$12+32; //@line 3767 "cPickle.c"
        var $14=HEAP[$13]; //@line 3767 "cPickle.c"
        var $15=$14+8; //@line 3767 "cPickle.c"
        var $16=HEAP[$15]; //@line 3767 "cPickle.c"
        var $17=($16) - 1; //@line 3767 "cPickle.c"
        var $18=$14+8; //@line 3767 "cPickle.c"
        HEAP[$18]=$17; //@line 3767 "cPickle.c"
        var $19=$14+8; //@line 3767 "cPickle.c"
        var $20=HEAP[$19]; //@line 3767 "cPickle.c"
        var $21=$11+4*$20; //@line 3767 "cPickle.c"
        var $22=HEAP[$21]; //@line 3767 "cPickle.c"
        $element=$22; //@line 3767 "cPickle.c"
        var $23=($22)==0; //@line 3768 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3768 "cPickle.c"
      case 5: // $bb6
        $0=-1; //@line 3769 "cPickle.c"
        __label__ = 14; break; //@line 3769 "cPickle.c"
      case 6: // $bb7
        var $24=$tup; //@line 3770 "cPickle.c"
        var $25=$24; //@line 3770 "cPickle.c"
        var $26=$len_addr; //@line 3770 "cPickle.c"
        var $27=$25+12; //@line 3770 "cPickle.c"
        var $28=$27+$26*4; //@line 3770 "cPickle.c"
        var $29=$element; //@line 3770 "cPickle.c"
        HEAP[$28]=$29; //@line 3770 "cPickle.c"
        __label__ = 7; break; //@line 3770 "cPickle.c"
      case 7: // $bb8
        var $30=$len_addr; //@line 3764 "cPickle.c"
        var $31=($30) - 1; //@line 3764 "cPickle.c"
        $len_addr=$31; //@line 3764 "cPickle.c"
        var $32=($31) >= 0; //@line 3764 "cPickle.c"
        var $33=$self_addr; //@line 3767 "cPickle.c"
        var $34=$33+32; //@line 3767 "cPickle.c"
        var $35=HEAP[$34]; //@line 3767 "cPickle.c"
        var $36=$35+8; //@line 3767 "cPickle.c"
        var $37=HEAP[$36]; //@line 3767 "cPickle.c"
        if ($32) { __label__ = 2; break; } else { __label__ = 8; break; } //@line 3764 "cPickle.c"
      case 8: // $bb9
        var $38=$self_addr; //@line 3772 "cPickle.c"
        var $39=$38+32; //@line 3772 "cPickle.c"
        var $40=HEAP[$39]; //@line 3772 "cPickle.c"
        var $41=$40+12; //@line 3772 "cPickle.c"
        var $42=HEAP[$41]; //@line 3772 "cPickle.c"
        var $43=($37)==($42); //@line 3772 "cPickle.c"
        if ($43) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 3772 "cPickle.c"
      case 9: // $bb10
        var $44=$self_addr; //@line 3772 "cPickle.c"
        var $45=$44+32; //@line 3772 "cPickle.c"
        var $46=HEAP[$45]; //@line 3772 "cPickle.c"
        var $47=_Pdata_grow($46); //@line 3772 "cPickle.c"
        var $48=($47) < 0; //@line 3772 "cPickle.c"
        if ($48) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 3772 "cPickle.c"
      case 10: // $bb11
        var $49=$tup; //@line 3772 "cPickle.c"
        var $50=$49; //@line 3772 "cPickle.c"
        var $51=HEAP[$50]; //@line 3772 "cPickle.c"
        var $52=($51) - 1; //@line 3772 "cPickle.c"
        var $53=$tup; //@line 3772 "cPickle.c"
        var $54=$53; //@line 3772 "cPickle.c"
        HEAP[$54]=$52; //@line 3772 "cPickle.c"
        var $55=$tup; //@line 3772 "cPickle.c"
        var $56=$55; //@line 3772 "cPickle.c"
        var $57=HEAP[$56]; //@line 3772 "cPickle.c"
        var $58=($57)==0; //@line 3772 "cPickle.c"
        if ($58) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3772 "cPickle.c"
      case 11: // $bb12
        var $59=$tup; //@line 3772 "cPickle.c"
        var $60=$59+4; //@line 3772 "cPickle.c"
        var $61=HEAP[$60]; //@line 3772 "cPickle.c"
        var $62=$61+24; //@line 3772 "cPickle.c"
        var $63=HEAP[$62]; //@line 3772 "cPickle.c"
        var $64=$tup; //@line 3772 "cPickle.c"
        FUNCTION_TABLE[$63]($64); //@line 3772 "cPickle.c"
        __label__ = 12; break; //@line 3772 "cPickle.c"
      case 12: // $bb13
        $0=-1; //@line 3772 "cPickle.c"
        __label__ = 14; break; //@line 3772 "cPickle.c"
      case 13: // $bb14
        var $65=$self_addr; //@line 3772 "cPickle.c"
        var $66=$65+32; //@line 3772 "cPickle.c"
        var $67=HEAP[$66]; //@line 3772 "cPickle.c"
        var $68=$67+16; //@line 3772 "cPickle.c"
        var $69=HEAP[$68]; //@line 3772 "cPickle.c"
        var $70=$self_addr; //@line 3772 "cPickle.c"
        var $71=$70+32; //@line 3772 "cPickle.c"
        var $72=HEAP[$71]; //@line 3772 "cPickle.c"
        var $73=$72+8; //@line 3772 "cPickle.c"
        var $74=HEAP[$73]; //@line 3772 "cPickle.c"
        var $75=$69+4*$74; //@line 3772 "cPickle.c"
        var $76=$tup; //@line 3772 "cPickle.c"
        HEAP[$75]=$76; //@line 3772 "cPickle.c"
        var $77=($74) + 1; //@line 3772 "cPickle.c"
        var $78=$72+8; //@line 3772 "cPickle.c"
        HEAP[$78]=$77; //@line 3772 "cPickle.c"
        $0=0; //@line 3773 "cPickle.c"
        __label__ = 14; break; //@line 3773 "cPickle.c"
      case 14: // $bb15
        var $79=$0; //@line 3762 "cPickle.c"
        $retval=$79; //@line 3762 "cPickle.c"
        var $retval16=$retval; //@line 3762 "cPickle.c"
        ;
        return $retval16; //@line 3762 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_empty_list($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $list;
        $self_addr=$self;
        var $1=_PyList_New(0); //@line 3781 "cPickle.c"
        $list=$1; //@line 3781 "cPickle.c"
        var $2=$list; //@line 3781 "cPickle.c"
        var $3=($2)==0; //@line 3781 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3781 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3781 "cPickle.c"
        __label__ = 8; break; //@line 3781 "cPickle.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 3782 "cPickle.c"
        var $5=$4+32; //@line 3782 "cPickle.c"
        var $6=HEAP[$5]; //@line 3782 "cPickle.c"
        var $7=$6+8; //@line 3782 "cPickle.c"
        var $8=HEAP[$7]; //@line 3782 "cPickle.c"
        var $9=$self_addr; //@line 3782 "cPickle.c"
        var $10=$9+32; //@line 3782 "cPickle.c"
        var $11=HEAP[$10]; //@line 3782 "cPickle.c"
        var $12=$11+12; //@line 3782 "cPickle.c"
        var $13=HEAP[$12]; //@line 3782 "cPickle.c"
        var $14=($8)==($13); //@line 3782 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 3782 "cPickle.c"
      case 3: // $bb2
        var $15=$self_addr; //@line 3782 "cPickle.c"
        var $16=$15+32; //@line 3782 "cPickle.c"
        var $17=HEAP[$16]; //@line 3782 "cPickle.c"
        var $18=_Pdata_grow($17); //@line 3782 "cPickle.c"
        var $19=($18) < 0; //@line 3782 "cPickle.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 3782 "cPickle.c"
      case 4: // $bb3
        var $20=$list; //@line 3782 "cPickle.c"
        var $21=$20; //@line 3782 "cPickle.c"
        var $22=HEAP[$21]; //@line 3782 "cPickle.c"
        var $23=($22) - 1; //@line 3782 "cPickle.c"
        var $24=$list; //@line 3782 "cPickle.c"
        var $25=$24; //@line 3782 "cPickle.c"
        HEAP[$25]=$23; //@line 3782 "cPickle.c"
        var $26=$list; //@line 3782 "cPickle.c"
        var $27=$26; //@line 3782 "cPickle.c"
        var $28=HEAP[$27]; //@line 3782 "cPickle.c"
        var $29=($28)==0; //@line 3782 "cPickle.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3782 "cPickle.c"
      case 5: // $bb4
        var $30=$list; //@line 3782 "cPickle.c"
        var $31=$30+4; //@line 3782 "cPickle.c"
        var $32=HEAP[$31]; //@line 3782 "cPickle.c"
        var $33=$32+24; //@line 3782 "cPickle.c"
        var $34=HEAP[$33]; //@line 3782 "cPickle.c"
        var $35=$list; //@line 3782 "cPickle.c"
        FUNCTION_TABLE[$34]($35); //@line 3782 "cPickle.c"
        __label__ = 6; break; //@line 3782 "cPickle.c"
      case 6: // $bb5
        $0=-1; //@line 3782 "cPickle.c"
        __label__ = 8; break; //@line 3782 "cPickle.c"
      case 7: // $bb6
        var $36=$self_addr; //@line 3782 "cPickle.c"
        var $37=$36+32; //@line 3782 "cPickle.c"
        var $38=HEAP[$37]; //@line 3782 "cPickle.c"
        var $39=$38+16; //@line 3782 "cPickle.c"
        var $40=HEAP[$39]; //@line 3782 "cPickle.c"
        var $41=$self_addr; //@line 3782 "cPickle.c"
        var $42=$41+32; //@line 3782 "cPickle.c"
        var $43=HEAP[$42]; //@line 3782 "cPickle.c"
        var $44=$43+8; //@line 3782 "cPickle.c"
        var $45=HEAP[$44]; //@line 3782 "cPickle.c"
        var $46=$40+4*$45; //@line 3782 "cPickle.c"
        var $47=$list; //@line 3782 "cPickle.c"
        HEAP[$46]=$47; //@line 3782 "cPickle.c"
        var $48=($45) + 1; //@line 3782 "cPickle.c"
        var $49=$43+8; //@line 3782 "cPickle.c"
        HEAP[$49]=$48; //@line 3782 "cPickle.c"
        $0=0; //@line 3783 "cPickle.c"
        __label__ = 8; break; //@line 3783 "cPickle.c"
      case 8: // $bb7
        var $50=$0; //@line 3781 "cPickle.c"
        $retval=$50; //@line 3781 "cPickle.c"
        var $retval8=$retval; //@line 3781 "cPickle.c"
        ;
        return $retval8; //@line 3781 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_empty_dict($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $dict;
        $self_addr=$self;
        var $1=_PyDict_New(); //@line 3791 "cPickle.c"
        $dict=$1; //@line 3791 "cPickle.c"
        var $2=$dict; //@line 3791 "cPickle.c"
        var $3=($2)==0; //@line 3791 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3791 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 3791 "cPickle.c"
        __label__ = 8; break; //@line 3791 "cPickle.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 3792 "cPickle.c"
        var $5=$4+32; //@line 3792 "cPickle.c"
        var $6=HEAP[$5]; //@line 3792 "cPickle.c"
        var $7=$6+8; //@line 3792 "cPickle.c"
        var $8=HEAP[$7]; //@line 3792 "cPickle.c"
        var $9=$self_addr; //@line 3792 "cPickle.c"
        var $10=$9+32; //@line 3792 "cPickle.c"
        var $11=HEAP[$10]; //@line 3792 "cPickle.c"
        var $12=$11+12; //@line 3792 "cPickle.c"
        var $13=HEAP[$12]; //@line 3792 "cPickle.c"
        var $14=($8)==($13); //@line 3792 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 3792 "cPickle.c"
      case 3: // $bb2
        var $15=$self_addr; //@line 3792 "cPickle.c"
        var $16=$15+32; //@line 3792 "cPickle.c"
        var $17=HEAP[$16]; //@line 3792 "cPickle.c"
        var $18=_Pdata_grow($17); //@line 3792 "cPickle.c"
        var $19=($18) < 0; //@line 3792 "cPickle.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 3792 "cPickle.c"
      case 4: // $bb3
        var $20=$dict; //@line 3792 "cPickle.c"
        var $21=$20; //@line 3792 "cPickle.c"
        var $22=HEAP[$21]; //@line 3792 "cPickle.c"
        var $23=($22) - 1; //@line 3792 "cPickle.c"
        var $24=$dict; //@line 3792 "cPickle.c"
        var $25=$24; //@line 3792 "cPickle.c"
        HEAP[$25]=$23; //@line 3792 "cPickle.c"
        var $26=$dict; //@line 3792 "cPickle.c"
        var $27=$26; //@line 3792 "cPickle.c"
        var $28=HEAP[$27]; //@line 3792 "cPickle.c"
        var $29=($28)==0; //@line 3792 "cPickle.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3792 "cPickle.c"
      case 5: // $bb4
        var $30=$dict; //@line 3792 "cPickle.c"
        var $31=$30+4; //@line 3792 "cPickle.c"
        var $32=HEAP[$31]; //@line 3792 "cPickle.c"
        var $33=$32+24; //@line 3792 "cPickle.c"
        var $34=HEAP[$33]; //@line 3792 "cPickle.c"
        var $35=$dict; //@line 3792 "cPickle.c"
        FUNCTION_TABLE[$34]($35); //@line 3792 "cPickle.c"
        __label__ = 6; break; //@line 3792 "cPickle.c"
      case 6: // $bb5
        $0=-1; //@line 3792 "cPickle.c"
        __label__ = 8; break; //@line 3792 "cPickle.c"
      case 7: // $bb6
        var $36=$self_addr; //@line 3792 "cPickle.c"
        var $37=$36+32; //@line 3792 "cPickle.c"
        var $38=HEAP[$37]; //@line 3792 "cPickle.c"
        var $39=$38+16; //@line 3792 "cPickle.c"
        var $40=HEAP[$39]; //@line 3792 "cPickle.c"
        var $41=$self_addr; //@line 3792 "cPickle.c"
        var $42=$41+32; //@line 3792 "cPickle.c"
        var $43=HEAP[$42]; //@line 3792 "cPickle.c"
        var $44=$43+8; //@line 3792 "cPickle.c"
        var $45=HEAP[$44]; //@line 3792 "cPickle.c"
        var $46=$40+4*$45; //@line 3792 "cPickle.c"
        var $47=$dict; //@line 3792 "cPickle.c"
        HEAP[$46]=$47; //@line 3792 "cPickle.c"
        var $48=($45) + 1; //@line 3792 "cPickle.c"
        var $49=$43+8; //@line 3792 "cPickle.c"
        HEAP[$49]=$48; //@line 3792 "cPickle.c"
        $0=0; //@line 3793 "cPickle.c"
        __label__ = 8; break; //@line 3793 "cPickle.c"
      case 8: // $bb7
        var $50=$0; //@line 3791 "cPickle.c"
        $retval=$50; //@line 3791 "cPickle.c"
        var $retval8=$retval; //@line 3791 "cPickle.c"
        ;
        return $retval8; //@line 3791 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_list($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr_i;
        var $retval_i;
        var $0;
        var $self_addr;
        var $retval;
        var $1;
        var $list;
        var $i;
        $self_addr=$self;
        $list=0; //@line 3800 "cPickle.c"
        var $2=$self_addr; //@line 3803 "cPickle.c"
        $self_addr_i=$2;
        var $3=$self_addr_i; //@line 3320 "cPickle.c"
        var $4=$3+52; //@line 3320 "cPickle.c"
        var $5=HEAP[$4]; //@line 3320 "cPickle.c"
        var $6=($5) <= 0; //@line 3320 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3320 "cPickle.c"
      case 1: // $marker_exit_thread
        var $7=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($7, __str78); //@line 3321 "cPickle.c"
        $0=-1; //@line 3322 "cPickle.c"
        $retval_i=-1; //@line 3322 "cPickle.c"
        $i=-1; //@line 3803 "cPickle.c"
        __label__ = 3; break;
      case 2: // $marker_exit
        var $8=$self_addr_i; //@line 3325 "cPickle.c"
        var $9=$8+48; //@line 3325 "cPickle.c"
        var $10=HEAP[$9]; //@line 3325 "cPickle.c"
        var $11=$self_addr_i; //@line 3325 "cPickle.c"
        var $12=$11+52; //@line 3325 "cPickle.c"
        var $13=HEAP[$12]; //@line 3325 "cPickle.c"
        var $14=($13) - 1; //@line 3325 "cPickle.c"
        var $15=$self_addr_i; //@line 3325 "cPickle.c"
        var $16=$15+52; //@line 3325 "cPickle.c"
        HEAP[$16]=$14; //@line 3325 "cPickle.c"
        var $17=$self_addr_i; //@line 3325 "cPickle.c"
        var $18=$17+52; //@line 3325 "cPickle.c"
        var $19=HEAP[$18]; //@line 3325 "cPickle.c"
        var $20=$10+4*$19; //@line 3325 "cPickle.c"
        var $21=HEAP[$20]; //@line 3325 "cPickle.c"
        $0=$21; //@line 3325 "cPickle.c"
        $retval_i=$21; //@line 3322 "cPickle.c"
        $i=$21; //@line 3803 "cPickle.c"
        var $22=($21) < 0; //@line 3803 "cPickle.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3803 "cPickle.c"
      case 3: // $bb
        $1=-1; //@line 3803 "cPickle.c"
        __label__ = 12; break; //@line 3803 "cPickle.c"
      case 4: // $bb1
        var $23=$self_addr; //@line 3804 "cPickle.c"
        var $24=$23+32; //@line 3804 "cPickle.c"
        var $25=HEAP[$24]; //@line 3804 "cPickle.c"
        var $26=$i; //@line 3804 "cPickle.c"
        var $27=_Pdata_popList($25, $26); //@line 3804 "cPickle.c"
        $list=$27; //@line 3804 "cPickle.c"
        var $28=$list; //@line 3804 "cPickle.c"
        var $29=($28)==0; //@line 3804 "cPickle.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3804 "cPickle.c"
      case 5: // $bb2
        $1=-1; //@line 3804 "cPickle.c"
        __label__ = 12; break; //@line 3804 "cPickle.c"
      case 6: // $bb3
        var $30=$self_addr; //@line 3805 "cPickle.c"
        var $31=$30+32; //@line 3805 "cPickle.c"
        var $32=HEAP[$31]; //@line 3805 "cPickle.c"
        var $33=$32+8; //@line 3805 "cPickle.c"
        var $34=HEAP[$33]; //@line 3805 "cPickle.c"
        var $35=$self_addr; //@line 3805 "cPickle.c"
        var $36=$35+32; //@line 3805 "cPickle.c"
        var $37=HEAP[$36]; //@line 3805 "cPickle.c"
        var $38=$37+12; //@line 3805 "cPickle.c"
        var $39=HEAP[$38]; //@line 3805 "cPickle.c"
        var $40=($34)==($39); //@line 3805 "cPickle.c"
        if ($40) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 3805 "cPickle.c"
      case 7: // $bb4
        var $41=$self_addr; //@line 3805 "cPickle.c"
        var $42=$41+32; //@line 3805 "cPickle.c"
        var $43=HEAP[$42]; //@line 3805 "cPickle.c"
        var $44=_Pdata_grow($43); //@line 3805 "cPickle.c"
        var $45=($44) < 0; //@line 3805 "cPickle.c"
        if ($45) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 3805 "cPickle.c"
      case 8: // $bb5
        var $46=$list; //@line 3805 "cPickle.c"
        var $47=$46; //@line 3805 "cPickle.c"
        var $48=HEAP[$47]; //@line 3805 "cPickle.c"
        var $49=($48) - 1; //@line 3805 "cPickle.c"
        var $50=$list; //@line 3805 "cPickle.c"
        var $51=$50; //@line 3805 "cPickle.c"
        HEAP[$51]=$49; //@line 3805 "cPickle.c"
        var $52=$list; //@line 3805 "cPickle.c"
        var $53=$52; //@line 3805 "cPickle.c"
        var $54=HEAP[$53]; //@line 3805 "cPickle.c"
        var $55=($54)==0; //@line 3805 "cPickle.c"
        if ($55) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3805 "cPickle.c"
      case 9: // $bb6
        var $56=$list; //@line 3805 "cPickle.c"
        var $57=$56+4; //@line 3805 "cPickle.c"
        var $58=HEAP[$57]; //@line 3805 "cPickle.c"
        var $59=$58+24; //@line 3805 "cPickle.c"
        var $60=HEAP[$59]; //@line 3805 "cPickle.c"
        var $61=$list; //@line 3805 "cPickle.c"
        FUNCTION_TABLE[$60]($61); //@line 3805 "cPickle.c"
        __label__ = 10; break; //@line 3805 "cPickle.c"
      case 10: // $bb7
        $1=-1; //@line 3805 "cPickle.c"
        __label__ = 12; break; //@line 3805 "cPickle.c"
      case 11: // $bb8
        var $62=$self_addr; //@line 3805 "cPickle.c"
        var $63=$62+32; //@line 3805 "cPickle.c"
        var $64=HEAP[$63]; //@line 3805 "cPickle.c"
        var $65=$64+16; //@line 3805 "cPickle.c"
        var $66=HEAP[$65]; //@line 3805 "cPickle.c"
        var $67=$self_addr; //@line 3805 "cPickle.c"
        var $68=$67+32; //@line 3805 "cPickle.c"
        var $69=HEAP[$68]; //@line 3805 "cPickle.c"
        var $70=$69+8; //@line 3805 "cPickle.c"
        var $71=HEAP[$70]; //@line 3805 "cPickle.c"
        var $72=$66+4*$71; //@line 3805 "cPickle.c"
        var $73=$list; //@line 3805 "cPickle.c"
        HEAP[$72]=$73; //@line 3805 "cPickle.c"
        var $74=($71) + 1; //@line 3805 "cPickle.c"
        var $75=$69+8; //@line 3805 "cPickle.c"
        HEAP[$75]=$74; //@line 3805 "cPickle.c"
        $1=0; //@line 3806 "cPickle.c"
        __label__ = 12; break; //@line 3806 "cPickle.c"
      case 12: // $bb9
        var $76=$1; //@line 3803 "cPickle.c"
        $retval=$76; //@line 3803 "cPickle.c"
        var $retval10=$retval; //@line 3803 "cPickle.c"
        ;
        return $retval10; //@line 3803 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_dict($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr_i;
        var $retval_i;
        var $0;
        var $self_addr;
        var $retval;
        var $1;
        var $dict;
        var $key;
        var $value;
        var $i;
        var $j;
        var $k;
        $self_addr=$self;
        var $2=$self_addr; //@line 3815 "cPickle.c"
        $self_addr_i=$2;
        var $3=$self_addr_i; //@line 3320 "cPickle.c"
        var $4=$3+52; //@line 3320 "cPickle.c"
        var $5=HEAP[$4]; //@line 3320 "cPickle.c"
        var $6=($5) <= 0; //@line 3320 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3320 "cPickle.c"
      case 1: // $marker_exit_thread
        var $7=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($7, __str78); //@line 3321 "cPickle.c"
        $0=-1; //@line 3322 "cPickle.c"
        $retval_i=-1; //@line 3322 "cPickle.c"
        $i=-1; //@line 3815 "cPickle.c"
        __label__ = 3; break;
      case 2: // $marker_exit
        var $8=$self_addr_i; //@line 3325 "cPickle.c"
        var $9=$8+48; //@line 3325 "cPickle.c"
        var $10=HEAP[$9]; //@line 3325 "cPickle.c"
        var $11=$self_addr_i; //@line 3325 "cPickle.c"
        var $12=$11+52; //@line 3325 "cPickle.c"
        var $13=HEAP[$12]; //@line 3325 "cPickle.c"
        var $14=($13) - 1; //@line 3325 "cPickle.c"
        var $15=$self_addr_i; //@line 3325 "cPickle.c"
        var $16=$15+52; //@line 3325 "cPickle.c"
        HEAP[$16]=$14; //@line 3325 "cPickle.c"
        var $17=$self_addr_i; //@line 3325 "cPickle.c"
        var $18=$17+52; //@line 3325 "cPickle.c"
        var $19=HEAP[$18]; //@line 3325 "cPickle.c"
        var $20=$10+4*$19; //@line 3325 "cPickle.c"
        var $21=HEAP[$20]; //@line 3325 "cPickle.c"
        $0=$21; //@line 3325 "cPickle.c"
        $retval_i=$21; //@line 3322 "cPickle.c"
        $i=$21; //@line 3815 "cPickle.c"
        var $22=($21) < 0; //@line 3815 "cPickle.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3815 "cPickle.c"
      case 3: // $bb
        $1=-1; //@line 3815 "cPickle.c"
        __label__ = 19; break; //@line 3815 "cPickle.c"
      case 4: // $bb1
        var $23=$self_addr; //@line 3816 "cPickle.c"
        var $24=$23+32; //@line 3816 "cPickle.c"
        var $25=HEAP[$24]; //@line 3816 "cPickle.c"
        var $26=$25+8; //@line 3816 "cPickle.c"
        var $27=HEAP[$26]; //@line 3816 "cPickle.c"
        $j=$27; //@line 3816 "cPickle.c"
        var $28=_PyDict_New(); //@line 3818 "cPickle.c"
        $dict=$28; //@line 3818 "cPickle.c"
        var $29=$dict; //@line 3818 "cPickle.c"
        var $30=($29)==0; //@line 3818 "cPickle.c"
        if ($30) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3818 "cPickle.c"
      case 5: // $bb2
        $1=-1; //@line 3818 "cPickle.c"
        __label__ = 19; break; //@line 3818 "cPickle.c"
      case 6: // $bb3
        var $31=$i; //@line 3820 "cPickle.c"
        var $32=($31) + 1; //@line 3820 "cPickle.c"
        $k=$32; //@line 3820 "cPickle.c"
        __label__ = 12; break; //@line 3820 "cPickle.c"
      case 7: // $bb4
        var $33=$75+16; //@line 3821 "cPickle.c"
        var $34=HEAP[$33]; //@line 3821 "cPickle.c"
        var $35=$k; //@line 3821 "cPickle.c"
        var $36=($35) - 1; //@line 3821 "cPickle.c"
        var $37=$34+4*$36; //@line 3821 "cPickle.c"
        var $38=HEAP[$37]; //@line 3821 "cPickle.c"
        $key=$38; //@line 3821 "cPickle.c"
        var $39=$self_addr; //@line 3822 "cPickle.c"
        var $40=$39+32; //@line 3822 "cPickle.c"
        var $41=HEAP[$40]; //@line 3822 "cPickle.c"
        var $42=$41+16; //@line 3822 "cPickle.c"
        var $43=HEAP[$42]; //@line 3822 "cPickle.c"
        var $44=$k; //@line 3822 "cPickle.c"
        var $45=$43+4*$44; //@line 3822 "cPickle.c"
        var $46=HEAP[$45]; //@line 3822 "cPickle.c"
        $value=$46; //@line 3822 "cPickle.c"
        var $47=$dict; //@line 3823 "cPickle.c"
        var $48=$key; //@line 3823 "cPickle.c"
        var $49=$value; //@line 3823 "cPickle.c"
        var $50=_PyDict_SetItem($47, $48, $49); //@line 3823 "cPickle.c"
        var $51=($50) < 0; //@line 3823 "cPickle.c"
        if ($51) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 3823 "cPickle.c"
      case 8: // $bb5
        var $52=$dict; //@line 3824 "cPickle.c"
        var $53=$52; //@line 3824 "cPickle.c"
        var $54=HEAP[$53]; //@line 3824 "cPickle.c"
        var $55=($54) - 1; //@line 3824 "cPickle.c"
        var $56=$dict; //@line 3824 "cPickle.c"
        var $57=$56; //@line 3824 "cPickle.c"
        HEAP[$57]=$55; //@line 3824 "cPickle.c"
        var $58=$dict; //@line 3824 "cPickle.c"
        var $59=$58; //@line 3824 "cPickle.c"
        var $60=HEAP[$59]; //@line 3824 "cPickle.c"
        var $61=($60)==0; //@line 3824 "cPickle.c"
        if ($61) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3824 "cPickle.c"
      case 9: // $bb6
        var $62=$dict; //@line 3824 "cPickle.c"
        var $63=$62+4; //@line 3824 "cPickle.c"
        var $64=HEAP[$63]; //@line 3824 "cPickle.c"
        var $65=$64+24; //@line 3824 "cPickle.c"
        var $66=HEAP[$65]; //@line 3824 "cPickle.c"
        var $67=$dict; //@line 3824 "cPickle.c"
        FUNCTION_TABLE[$66]($67); //@line 3824 "cPickle.c"
        __label__ = 10; break; //@line 3824 "cPickle.c"
      case 10: // $bb7
        $1=-1; //@line 3825 "cPickle.c"
        __label__ = 19; break; //@line 3825 "cPickle.c"
      case 11: // $bb8
        var $68=$k; //@line 3820 "cPickle.c"
        var $69=($68) + 2; //@line 3820 "cPickle.c"
        $k=$69; //@line 3820 "cPickle.c"
        __label__ = 12; break; //@line 3820 "cPickle.c"
      case 12: // $bb9
        var $70=$k; //@line 3820 "cPickle.c"
        var $71=$j; //@line 3820 "cPickle.c"
        var $72=($70) < ($71); //@line 3820 "cPickle.c"
        var $73=$self_addr; //@line 3821 "cPickle.c"
        var $74=$73+32; //@line 3821 "cPickle.c"
        var $75=HEAP[$74]; //@line 3821 "cPickle.c"
        if ($72) { __label__ = 7; break; } else { __label__ = 13; break; } //@line 3820 "cPickle.c"
      case 13: // $bb10
        var $76=$i; //@line 3828 "cPickle.c"
        var $77=_Pdata_clear($75, $76); //@line 3828 "cPickle.c"
        var $78=$self_addr; //@line 3829 "cPickle.c"
        var $79=$78+32; //@line 3829 "cPickle.c"
        var $80=HEAP[$79]; //@line 3829 "cPickle.c"
        var $81=$80+8; //@line 3829 "cPickle.c"
        var $82=HEAP[$81]; //@line 3829 "cPickle.c"
        var $83=$self_addr; //@line 3829 "cPickle.c"
        var $84=$83+32; //@line 3829 "cPickle.c"
        var $85=HEAP[$84]; //@line 3829 "cPickle.c"
        var $86=$85+12; //@line 3829 "cPickle.c"
        var $87=HEAP[$86]; //@line 3829 "cPickle.c"
        var $88=($82)==($87); //@line 3829 "cPickle.c"
        if ($88) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 3829 "cPickle.c"
      case 14: // $bb11
        var $89=$self_addr; //@line 3829 "cPickle.c"
        var $90=$89+32; //@line 3829 "cPickle.c"
        var $91=HEAP[$90]; //@line 3829 "cPickle.c"
        var $92=_Pdata_grow($91); //@line 3829 "cPickle.c"
        var $93=($92) < 0; //@line 3829 "cPickle.c"
        if ($93) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 3829 "cPickle.c"
      case 15: // $bb12
        var $94=$dict; //@line 3829 "cPickle.c"
        var $95=$94; //@line 3829 "cPickle.c"
        var $96=HEAP[$95]; //@line 3829 "cPickle.c"
        var $97=($96) - 1; //@line 3829 "cPickle.c"
        var $98=$dict; //@line 3829 "cPickle.c"
        var $99=$98; //@line 3829 "cPickle.c"
        HEAP[$99]=$97; //@line 3829 "cPickle.c"
        var $100=$dict; //@line 3829 "cPickle.c"
        var $101=$100; //@line 3829 "cPickle.c"
        var $102=HEAP[$101]; //@line 3829 "cPickle.c"
        var $103=($102)==0; //@line 3829 "cPickle.c"
        if ($103) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3829 "cPickle.c"
      case 16: // $bb13
        var $104=$dict; //@line 3829 "cPickle.c"
        var $105=$104+4; //@line 3829 "cPickle.c"
        var $106=HEAP[$105]; //@line 3829 "cPickle.c"
        var $107=$106+24; //@line 3829 "cPickle.c"
        var $108=HEAP[$107]; //@line 3829 "cPickle.c"
        var $109=$dict; //@line 3829 "cPickle.c"
        FUNCTION_TABLE[$108]($109); //@line 3829 "cPickle.c"
        __label__ = 17; break; //@line 3829 "cPickle.c"
      case 17: // $bb14
        $1=-1; //@line 3829 "cPickle.c"
        __label__ = 19; break; //@line 3829 "cPickle.c"
      case 18: // $bb15
        var $110=$self_addr; //@line 3829 "cPickle.c"
        var $111=$110+32; //@line 3829 "cPickle.c"
        var $112=HEAP[$111]; //@line 3829 "cPickle.c"
        var $113=$112+16; //@line 3829 "cPickle.c"
        var $114=HEAP[$113]; //@line 3829 "cPickle.c"
        var $115=$self_addr; //@line 3829 "cPickle.c"
        var $116=$115+32; //@line 3829 "cPickle.c"
        var $117=HEAP[$116]; //@line 3829 "cPickle.c"
        var $118=$117+8; //@line 3829 "cPickle.c"
        var $119=HEAP[$118]; //@line 3829 "cPickle.c"
        var $120=$114+4*$119; //@line 3829 "cPickle.c"
        var $121=$dict; //@line 3829 "cPickle.c"
        HEAP[$120]=$121; //@line 3829 "cPickle.c"
        var $122=($119) + 1; //@line 3829 "cPickle.c"
        var $123=$117+8; //@line 3829 "cPickle.c"
        HEAP[$123]=$122; //@line 3829 "cPickle.c"
        $1=0; //@line 3830 "cPickle.c"
        __label__ = 19; break; //@line 3830 "cPickle.c"
      case 19: // $bb16
        var $124=$1; //@line 3815 "cPickle.c"
        $retval=$124; //@line 3815 "cPickle.c"
        var $retval17=$retval; //@line 3815 "cPickle.c"
        ;
        return $retval17; //@line 3815 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Instance_New($cls, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $r;
        var $l;
        var $__getinitargs__;
        var $inst;
        var $tp=__stackBase__;
        var $v=__stackBase__+4;
        var $tb=__stackBase__+8;
        var $tmp_value;
        $cls_addr=$cls;
        $args_addr=$args;
        $r=0; //@line 3836 "cPickle.c"
        var $1=$cls_addr; //@line 3838 "cPickle.c"
        var $2=$1+4; //@line 3838 "cPickle.c"
        var $3=HEAP[$2]; //@line 3838 "cPickle.c"
        var $4=($3)==(_PyClass_Type); //@line 3838 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 3838 "cPickle.c"
      case 1: // $bb
        var $5=$args_addr; //@line 3841 "cPickle.c"
        var $6=_PyObject_Size($5); //@line 3841 "cPickle.c"
        $l=$6; //@line 3841 "cPickle.c"
        var $7=$l; //@line 3841 "cPickle.c"
        var $8=($7) < 0; //@line 3841 "cPickle.c"
        if ($8) { __label__ = 12; break; } else { __label__ = 2; break; } //@line 3841 "cPickle.c"
      case 2: // $bb1
        var $9=$l; //@line 3842 "cPickle.c"
        var $10=($9)==0; //@line 3842 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 3842 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[___getinitargs___str]; //@line 3845 "cPickle.c"
        var $12=$cls_addr; //@line 3845 "cPickle.c"
        var $13=_PyObject_GetAttr($12, $11); //@line 3845 "cPickle.c"
        $__getinitargs__=$13; //@line 3845 "cPickle.c"
        var $14=$__getinitargs__; //@line 3847 "cPickle.c"
        var $15=($14)==0; //@line 3847 "cPickle.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3847 "cPickle.c"
      case 4: // $bb3
        _PyErr_Clear(); //@line 3852 "cPickle.c"
        var $16=$cls_addr; //@line 3853 "cPickle.c"
        var $17=_PyInstance_NewRaw($16, 0); //@line 3853 "cPickle.c"
        $inst=$17; //@line 3853 "cPickle.c"
        var $18=$inst; //@line 3853 "cPickle.c"
        var $19=($18)==0; //@line 3853 "cPickle.c"
        if ($19) { __label__ = 12; break; } else { __label__ = 5; break; } //@line 3853 "cPickle.c"
      case 5: // $bb4
        var $20=$inst; //@line 3855 "cPickle.c"
        $0=$20; //@line 3855 "cPickle.c"
        __label__ = 20; break; //@line 3855 "cPickle.c"
      case 6: // $bb5
        var $21=$__getinitargs__; //@line 3857 "cPickle.c"
        var $22=$21; //@line 3857 "cPickle.c"
        var $23=HEAP[$22]; //@line 3857 "cPickle.c"
        var $24=($23) - 1; //@line 3857 "cPickle.c"
        var $25=$__getinitargs__; //@line 3857 "cPickle.c"
        var $26=$25; //@line 3857 "cPickle.c"
        HEAP[$26]=$24; //@line 3857 "cPickle.c"
        var $27=$__getinitargs__; //@line 3857 "cPickle.c"
        var $28=$27; //@line 3857 "cPickle.c"
        var $29=HEAP[$28]; //@line 3857 "cPickle.c"
        var $30=($29)==0; //@line 3857 "cPickle.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3857 "cPickle.c"
      case 7: // $bb6
        var $31=$__getinitargs__; //@line 3857 "cPickle.c"
        var $32=$31+4; //@line 3857 "cPickle.c"
        var $33=HEAP[$32]; //@line 3857 "cPickle.c"
        var $34=$33+24; //@line 3857 "cPickle.c"
        var $35=HEAP[$34]; //@line 3857 "cPickle.c"
        var $36=$__getinitargs__; //@line 3857 "cPickle.c"
        FUNCTION_TABLE[$35]($36); //@line 3857 "cPickle.c"
        __label__ = 8; break; //@line 3857 "cPickle.c"
      case 8: // $bb7
        var $37=$cls_addr; //@line 3860 "cPickle.c"
        var $38=$args_addr; //@line 3860 "cPickle.c"
        var $39=_PyInstance_New($37, $38, 0); //@line 3860 "cPickle.c"
        $r=$39; //@line 3860 "cPickle.c"
        var $40=($39)!=0; //@line 3860 "cPickle.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 3860 "cPickle.c"
      case 9: // $bb8
        var $41=$r; //@line 3860 "cPickle.c"
        $0=$41; //@line 3860 "cPickle.c"
        __label__ = 20; break; //@line 3860 "cPickle.c"
      case 10: // $bb9
        var $42=$cls_addr; //@line 3864 "cPickle.c"
        var $43=$args_addr; //@line 3864 "cPickle.c"
        var $44=_PyObject_CallObject($42, $43); //@line 3864 "cPickle.c"
        $r=$44; //@line 3864 "cPickle.c"
        var $45=$r; //@line 3864 "cPickle.c"
        var $46=($45)!=0; //@line 3864 "cPickle.c"
        if ($46) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3864 "cPickle.c"
      case 11: // $bb10
        var $47=$r; //@line 3864 "cPickle.c"
        $0=$47; //@line 3864 "cPickle.c"
        __label__ = 20; break; //@line 3864 "cPickle.c"
      case 12: // $err
        _PyErr_Fetch($tp, $v, $tb); //@line 3870 "cPickle.c"
        var $48=HEAP[$v]; //@line 3871 "cPickle.c"
        $tmp_value=$48; //@line 3871 "cPickle.c"
        var $49=($48)==0; //@line 3873 "cPickle.c"
        if ($49) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3873 "cPickle.c"
      case 13: // $bb11
        $tmp_value=__Py_NoneStruct; //@line 3874 "cPickle.c"
        __label__ = 14; break; //@line 3874 "cPickle.c"
      case 14: // $bb12
        var $50=$tmp_value; //@line 3875 "cPickle.c"
        var $51=$cls_addr; //@line 3875 "cPickle.c"
        var $52=$args_addr; //@line 3875 "cPickle.c"
        var $53=_PyTuple_Pack(3, $50, $51, $52); //@line 3875 "cPickle.c"
        $r=$53; //@line 3875 "cPickle.c"
        var $54=($53)!=0; //@line 3875 "cPickle.c"
        if ($54) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 3875 "cPickle.c"
      case 15: // $bb13
        var $55=HEAP[$v]; //@line 3876 "cPickle.c"
        var $56=($55)!=0; //@line 3876 "cPickle.c"
        if ($56) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3876 "cPickle.c"
      case 16: // $bb14
        var $57=HEAP[$v]; //@line 3876 "cPickle.c"
        var $58=$57; //@line 3876 "cPickle.c"
        var $59=HEAP[$58]; //@line 3876 "cPickle.c"
        var $60=($59) - 1; //@line 3876 "cPickle.c"
        var $61=$57; //@line 3876 "cPickle.c"
        HEAP[$61]=$60; //@line 3876 "cPickle.c"
        var $62=$57; //@line 3876 "cPickle.c"
        var $63=HEAP[$62]; //@line 3876 "cPickle.c"
        var $64=($63)==0; //@line 3876 "cPickle.c"
        if ($64) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3876 "cPickle.c"
      case 17: // $bb15
        var $65=HEAP[$v]; //@line 3876 "cPickle.c"
        var $66=$65+4; //@line 3876 "cPickle.c"
        var $67=HEAP[$66]; //@line 3876 "cPickle.c"
        var $68=$67+24; //@line 3876 "cPickle.c"
        var $69=HEAP[$68]; //@line 3876 "cPickle.c"
        var $70=HEAP[$v]; //@line 3876 "cPickle.c"
        FUNCTION_TABLE[$69]($70); //@line 3876 "cPickle.c"
        __label__ = 18; break; //@line 3876 "cPickle.c"
      case 18: // $bb16
        var $71=$r; //@line 3877 "cPickle.c"
        HEAP[$v]=$71; //@line 3877 "cPickle.c"
        __label__ = 19; break; //@line 3877 "cPickle.c"
      case 19: // $bb17
        var $72=HEAP[$tb]; //@line 3879 "cPickle.c"
        var $73=HEAP[$v]; //@line 3879 "cPickle.c"
        var $74=HEAP[$tp]; //@line 3879 "cPickle.c"
        _PyErr_Restore($74, $73, $72); //@line 3879 "cPickle.c"
        $0=0; //@line 3881 "cPickle.c"
        __label__ = 20; break; //@line 3881 "cPickle.c"
      case 20: // $bb18
        var $75=$0; //@line 3855 "cPickle.c"
        $retval=$75; //@line 3855 "cPickle.c"
        var $retval19=$retval; //@line 3855 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 3855 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_persid($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval_i;
        var $0;
        var $self_addr;
        var $retval;
        var $1;
        var $pid;
        var $len;
        var $s=__stackBase__;
        $self_addr=$self;
        $pid=0; //@line 4026 "cPickle.c"
        var $2=$self_addr; //@line 4030 "cPickle.c"
        var $3=$2+40; //@line 4030 "cPickle.c"
        var $4=HEAP[$3]; //@line 4030 "cPickle.c"
        var $5=($4)!=0; //@line 4030 "cPickle.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 33; break; } //@line 4030 "cPickle.c"
      case 1: // $bb
        var $6=$self_addr; //@line 4031 "cPickle.c"
        var $7=$6+64; //@line 4031 "cPickle.c"
        var $8=HEAP[$7]; //@line 4031 "cPickle.c"
        var $9=$self_addr; //@line 4031 "cPickle.c"
        var $10=FUNCTION_TABLE[$8]($9, $s); //@line 4031 "cPickle.c"
        $len=$10; //@line 4031 "cPickle.c"
        var $11=$len; //@line 4031 "cPickle.c"
        var $12=($11) < 0; //@line 4031 "cPickle.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4031 "cPickle.c"
      case 2: // $bb1
        $1=-1; //@line 4031 "cPickle.c"
        __label__ = 34; break; //@line 4031 "cPickle.c"
      case 3: // $bb2
        var $13=$len; //@line 4032 "cPickle.c"
        var $14=($13) <= 1; //@line 4032 "cPickle.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4032 "cPickle.c"
      case 4: // $bb3
        var $15=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($15, __str79); //@line 3339 "cPickle.c"
        $0=-1; //@line 3340 "cPickle.c"
        var $16=$0; //@line 3340 "cPickle.c"
        $retval_i=$16; //@line 3340 "cPickle.c"
        var $retval1_i=$retval_i; //@line 3340 "cPickle.c"
        $1=$retval1_i; //@line 4032 "cPickle.c"
        __label__ = 34; break; //@line 4032 "cPickle.c"
      case 5: // $bb4
        var $17=$len; //@line 4034 "cPickle.c"
        var $18=($17) - 1; //@line 4034 "cPickle.c"
        var $19=HEAP[$s]; //@line 4034 "cPickle.c"
        var $20=_PyString_FromStringAndSize($19, $18); //@line 4034 "cPickle.c"
        $pid=$20; //@line 4034 "cPickle.c"
        var $21=$pid; //@line 4035 "cPickle.c"
        var $22=($21)==0; //@line 4035 "cPickle.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4035 "cPickle.c"
      case 6: // $bb5
        $1=-1; //@line 4035 "cPickle.c"
        __label__ = 34; break; //@line 4035 "cPickle.c"
      case 7: // $bb6
        var $23=$self_addr; //@line 4037 "cPickle.c"
        var $24=$23+40; //@line 4037 "cPickle.c"
        var $25=HEAP[$24]; //@line 4037 "cPickle.c"
        var $26=$25+4; //@line 4037 "cPickle.c"
        var $27=HEAP[$26]; //@line 4037 "cPickle.c"
        var $28=$27+84; //@line 4037 "cPickle.c"
        var $29=HEAP[$28]; //@line 4037 "cPickle.c"
        var $30=($29) & 33554432; //@line 4037 "cPickle.c"
        var $31=($30)!=0; //@line 4037 "cPickle.c"
        var $32=$self_addr; //@line 4038 "cPickle.c"
        if ($31) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 4037 "cPickle.c"
      case 8: // $bb7
        var $33=$32+40; //@line 4038 "cPickle.c"
        var $34=HEAP[$33]; //@line 4038 "cPickle.c"
        var $35=$pid; //@line 4038 "cPickle.c"
        var $36=_PyList_Append($34, $35); //@line 4038 "cPickle.c"
        var $37=($36) < 0; //@line 4038 "cPickle.c"
        if ($37) { __label__ = 9; break; } else { __label__ = 25; break; } //@line 4038 "cPickle.c"
      case 9: // $bb8
        var $38=$pid; //@line 4039 "cPickle.c"
        var $39=$38; //@line 4039 "cPickle.c"
        var $40=HEAP[$39]; //@line 4039 "cPickle.c"
        var $41=($40) - 1; //@line 4039 "cPickle.c"
        var $42=$pid; //@line 4039 "cPickle.c"
        var $43=$42; //@line 4039 "cPickle.c"
        HEAP[$43]=$41; //@line 4039 "cPickle.c"
        var $44=$pid; //@line 4039 "cPickle.c"
        var $45=$44; //@line 4039 "cPickle.c"
        var $46=HEAP[$45]; //@line 4039 "cPickle.c"
        var $47=($46)==0; //@line 4039 "cPickle.c"
        if ($47) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4039 "cPickle.c"
      case 10: // $bb9
        var $48=$pid; //@line 4039 "cPickle.c"
        var $49=$48+4; //@line 4039 "cPickle.c"
        var $50=HEAP[$49]; //@line 4039 "cPickle.c"
        var $51=$50+24; //@line 4039 "cPickle.c"
        var $52=HEAP[$51]; //@line 4039 "cPickle.c"
        var $53=$pid; //@line 4039 "cPickle.c"
        FUNCTION_TABLE[$52]($53); //@line 4039 "cPickle.c"
        __label__ = 11; break; //@line 4039 "cPickle.c"
      case 11: // $bb10
        $1=-1; //@line 4040 "cPickle.c"
        __label__ = 34; break; //@line 4040 "cPickle.c"
      case 12: // $bb12
        var $54=$32+28; //@line 4044 "cPickle.c"
        var $55=HEAP[$54]; //@line 4044 "cPickle.c"
        var $56=($55)!=0; //@line 4044 "cPickle.c"
        if ($56) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 4044 "cPickle.c"
      case 13: // $bb13
        var $57=_PyTuple_New(1); //@line 4044 "cPickle.c"
        var $58=$self_addr; //@line 4044 "cPickle.c"
        var $59=$58+28; //@line 4044 "cPickle.c"
        HEAP[$59]=$57; //@line 4044 "cPickle.c"
        var $60=$self_addr; //@line 4044 "cPickle.c"
        var $61=$60+28; //@line 4044 "cPickle.c"
        var $62=HEAP[$61]; //@line 4044 "cPickle.c"
        var $63=($62)!=0; //@line 4044 "cPickle.c"
        if ($63) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 4044 "cPickle.c"
      case 14: // $bb14
        var $64=$self_addr; //@line 4044 "cPickle.c"
        var $65=$64+28; //@line 4044 "cPickle.c"
        var $66=HEAP[$65]; //@line 4044 "cPickle.c"
        var $67=$66; //@line 4044 "cPickle.c"
        var $68=$67+12; //@line 4044 "cPickle.c"
        var $69=$68; //@line 4044 "cPickle.c"
        var $70=HEAP[$69]; //@line 4044 "cPickle.c"
        var $71=($70)!=0; //@line 4044 "cPickle.c"
        if ($71) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 4044 "cPickle.c"
      case 15: // $bb15
        var $72=$self_addr; //@line 4044 "cPickle.c"
        var $73=$72+28; //@line 4044 "cPickle.c"
        var $74=HEAP[$73]; //@line 4044 "cPickle.c"
        var $75=$74; //@line 4044 "cPickle.c"
        var $76=$75+12; //@line 4044 "cPickle.c"
        var $77=$76; //@line 4044 "cPickle.c"
        var $78=HEAP[$77]; //@line 4044 "cPickle.c"
        var $79=$78; //@line 4044 "cPickle.c"
        var $80=HEAP[$79]; //@line 4044 "cPickle.c"
        var $81=($80) - 1; //@line 4044 "cPickle.c"
        var $82=$78; //@line 4044 "cPickle.c"
        HEAP[$82]=$81; //@line 4044 "cPickle.c"
        var $83=$78; //@line 4044 "cPickle.c"
        var $84=HEAP[$83]; //@line 4044 "cPickle.c"
        var $85=($84)==0; //@line 4044 "cPickle.c"
        if ($85) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4044 "cPickle.c"
      case 16: // $bb16
        var $86=$self_addr; //@line 4044 "cPickle.c"
        var $87=$86+28; //@line 4044 "cPickle.c"
        var $88=HEAP[$87]; //@line 4044 "cPickle.c"
        var $89=$88; //@line 4044 "cPickle.c"
        var $90=$89+12; //@line 4044 "cPickle.c"
        var $91=$90; //@line 4044 "cPickle.c"
        var $92=HEAP[$91]; //@line 4044 "cPickle.c"
        var $93=$92+4; //@line 4044 "cPickle.c"
        var $94=HEAP[$93]; //@line 4044 "cPickle.c"
        var $95=$94+24; //@line 4044 "cPickle.c"
        var $96=HEAP[$95]; //@line 4044 "cPickle.c"
        var $97=$self_addr; //@line 4044 "cPickle.c"
        var $98=$97+28; //@line 4044 "cPickle.c"
        var $99=HEAP[$98]; //@line 4044 "cPickle.c"
        var $100=$99; //@line 4044 "cPickle.c"
        var $101=$100+12; //@line 4044 "cPickle.c"
        var $102=$101; //@line 4044 "cPickle.c"
        var $103=HEAP[$102]; //@line 4044 "cPickle.c"
        FUNCTION_TABLE[$96]($103); //@line 4044 "cPickle.c"
        __label__ = 17; break; //@line 4044 "cPickle.c"
      case 17: // $bb17
        var $104=$self_addr; //@line 4044 "cPickle.c"
        var $105=$104+28; //@line 4044 "cPickle.c"
        var $106=HEAP[$105]; //@line 4044 "cPickle.c"
        var $107=$106; //@line 4044 "cPickle.c"
        var $108=$107+12; //@line 4044 "cPickle.c"
        var $109=$108; //@line 4044 "cPickle.c"
        var $110=$pid; //@line 4044 "cPickle.c"
        HEAP[$109]=$110; //@line 4044 "cPickle.c"
        __label__ = 20; break; //@line 4044 "cPickle.c"
      case 18: // $bb18
        var $111=$pid; //@line 4044 "cPickle.c"
        var $112=$111; //@line 4044 "cPickle.c"
        var $113=HEAP[$112]; //@line 4044 "cPickle.c"
        var $114=($113) - 1; //@line 4044 "cPickle.c"
        var $115=$pid; //@line 4044 "cPickle.c"
        var $116=$115; //@line 4044 "cPickle.c"
        HEAP[$116]=$114; //@line 4044 "cPickle.c"
        var $117=$pid; //@line 4044 "cPickle.c"
        var $118=$117; //@line 4044 "cPickle.c"
        var $119=HEAP[$118]; //@line 4044 "cPickle.c"
        var $120=($119)==0; //@line 4044 "cPickle.c"
        if ($120) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4044 "cPickle.c"
      case 19: // $bb19
        var $121=$pid; //@line 4044 "cPickle.c"
        var $122=$121+4; //@line 4044 "cPickle.c"
        var $123=HEAP[$122]; //@line 4044 "cPickle.c"
        var $124=$123+24; //@line 4044 "cPickle.c"
        var $125=HEAP[$124]; //@line 4044 "cPickle.c"
        var $126=$pid; //@line 4044 "cPickle.c"
        FUNCTION_TABLE[$125]($126); //@line 4044 "cPickle.c"
        __label__ = 20; break; //@line 4044 "cPickle.c"
      case 20: // $bb20
        var $127=$self_addr; //@line 4045 "cPickle.c"
        var $128=$127+28; //@line 4045 "cPickle.c"
        var $129=HEAP[$128]; //@line 4045 "cPickle.c"
        var $130=($129)!=0; //@line 4045 "cPickle.c"
        if ($130) { __label__ = 21; break; } else { __label__ = 25; break; } //@line 4045 "cPickle.c"
      case 21: // $bb21
        var $131=$self_addr; //@line 4046 "cPickle.c"
        var $132=$131+28; //@line 4046 "cPickle.c"
        var $133=HEAP[$132]; //@line 4046 "cPickle.c"
        var $134=$self_addr; //@line 4046 "cPickle.c"
        var $135=$134+40; //@line 4046 "cPickle.c"
        var $136=HEAP[$135]; //@line 4046 "cPickle.c"
        var $137=_PyObject_Call($136, $133, 0); //@line 4046 "cPickle.c"
        $pid=$137; //@line 4046 "cPickle.c"
        var $138=$self_addr; //@line 4048 "cPickle.c"
        var $139=$138+28; //@line 4048 "cPickle.c"
        var $140=HEAP[$139]; //@line 4048 "cPickle.c"
        var $141=$140; //@line 4048 "cPickle.c"
        var $142=HEAP[$141]; //@line 4048 "cPickle.c"
        var $143=($142) > 1; //@line 4048 "cPickle.c"
        if ($143) { __label__ = 22; break; } else { __label__ = 25; break; } //@line 4048 "cPickle.c"
      case 22: // $bb22
        var $144=$self_addr; //@line 4048 "cPickle.c"
        var $145=$144+28; //@line 4048 "cPickle.c"
        var $146=HEAP[$145]; //@line 4048 "cPickle.c"
        var $147=$146; //@line 4048 "cPickle.c"
        var $148=HEAP[$147]; //@line 4048 "cPickle.c"
        var $149=($148) - 1; //@line 4048 "cPickle.c"
        var $150=$146; //@line 4048 "cPickle.c"
        HEAP[$150]=$149; //@line 4048 "cPickle.c"
        var $151=$146; //@line 4048 "cPickle.c"
        var $152=HEAP[$151]; //@line 4048 "cPickle.c"
        var $153=($152)==0; //@line 4048 "cPickle.c"
        if ($153) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4048 "cPickle.c"
      case 23: // $bb23
        var $154=$self_addr; //@line 4048 "cPickle.c"
        var $155=$154+28; //@line 4048 "cPickle.c"
        var $156=HEAP[$155]; //@line 4048 "cPickle.c"
        var $157=$156+4; //@line 4048 "cPickle.c"
        var $158=HEAP[$157]; //@line 4048 "cPickle.c"
        var $159=$158+24; //@line 4048 "cPickle.c"
        var $160=HEAP[$159]; //@line 4048 "cPickle.c"
        var $161=$self_addr; //@line 4048 "cPickle.c"
        var $162=$161+28; //@line 4048 "cPickle.c"
        var $163=HEAP[$162]; //@line 4048 "cPickle.c"
        FUNCTION_TABLE[$160]($163); //@line 4048 "cPickle.c"
        __label__ = 24; break; //@line 4048 "cPickle.c"
      case 24: // $bb24
        var $164=$self_addr; //@line 4048 "cPickle.c"
        var $165=$164+28; //@line 4048 "cPickle.c"
        HEAP[$165]=0; //@line 4048 "cPickle.c"
        __label__ = 25; break; //@line 4048 "cPickle.c"
      case 25: // $bb25
        var $166=$pid; //@line 4052 "cPickle.c"
        var $167=($166)==0; //@line 4052 "cPickle.c"
        if ($167) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4052 "cPickle.c"
      case 26: // $bb26
        $1=-1; //@line 4052 "cPickle.c"
        __label__ = 34; break; //@line 4052 "cPickle.c"
      case 27: // $bb27
        var $168=$self_addr; //@line 4054 "cPickle.c"
        var $169=$168+32; //@line 4054 "cPickle.c"
        var $170=HEAP[$169]; //@line 4054 "cPickle.c"
        var $171=$170+8; //@line 4054 "cPickle.c"
        var $172=HEAP[$171]; //@line 4054 "cPickle.c"
        var $173=$self_addr; //@line 4054 "cPickle.c"
        var $174=$173+32; //@line 4054 "cPickle.c"
        var $175=HEAP[$174]; //@line 4054 "cPickle.c"
        var $176=$175+12; //@line 4054 "cPickle.c"
        var $177=HEAP[$176]; //@line 4054 "cPickle.c"
        var $178=($172)==($177); //@line 4054 "cPickle.c"
        if ($178) { __label__ = 28; break; } else { __label__ = 32; break; } //@line 4054 "cPickle.c"
      case 28: // $bb28
        var $179=$self_addr; //@line 4054 "cPickle.c"
        var $180=$179+32; //@line 4054 "cPickle.c"
        var $181=HEAP[$180]; //@line 4054 "cPickle.c"
        var $182=_Pdata_grow($181); //@line 4054 "cPickle.c"
        var $183=($182) < 0; //@line 4054 "cPickle.c"
        if ($183) { __label__ = 29; break; } else { __label__ = 32; break; } //@line 4054 "cPickle.c"
      case 29: // $bb29
        var $184=$pid; //@line 4054 "cPickle.c"
        var $185=$184; //@line 4054 "cPickle.c"
        var $186=HEAP[$185]; //@line 4054 "cPickle.c"
        var $187=($186) - 1; //@line 4054 "cPickle.c"
        var $188=$pid; //@line 4054 "cPickle.c"
        var $189=$188; //@line 4054 "cPickle.c"
        HEAP[$189]=$187; //@line 4054 "cPickle.c"
        var $190=$pid; //@line 4054 "cPickle.c"
        var $191=$190; //@line 4054 "cPickle.c"
        var $192=HEAP[$191]; //@line 4054 "cPickle.c"
        var $193=($192)==0; //@line 4054 "cPickle.c"
        if ($193) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4054 "cPickle.c"
      case 30: // $bb30
        var $194=$pid; //@line 4054 "cPickle.c"
        var $195=$194+4; //@line 4054 "cPickle.c"
        var $196=HEAP[$195]; //@line 4054 "cPickle.c"
        var $197=$196+24; //@line 4054 "cPickle.c"
        var $198=HEAP[$197]; //@line 4054 "cPickle.c"
        var $199=$pid; //@line 4054 "cPickle.c"
        FUNCTION_TABLE[$198]($199); //@line 4054 "cPickle.c"
        __label__ = 31; break; //@line 4054 "cPickle.c"
      case 31: // $bb31
        $1=-1; //@line 4054 "cPickle.c"
        __label__ = 34; break; //@line 4054 "cPickle.c"
      case 32: // $bb32
        var $200=$self_addr; //@line 4054 "cPickle.c"
        var $201=$200+32; //@line 4054 "cPickle.c"
        var $202=HEAP[$201]; //@line 4054 "cPickle.c"
        var $203=$202+16; //@line 4054 "cPickle.c"
        var $204=HEAP[$203]; //@line 4054 "cPickle.c"
        var $205=$self_addr; //@line 4054 "cPickle.c"
        var $206=$205+32; //@line 4054 "cPickle.c"
        var $207=HEAP[$206]; //@line 4054 "cPickle.c"
        var $208=$207+8; //@line 4054 "cPickle.c"
        var $209=HEAP[$208]; //@line 4054 "cPickle.c"
        var $210=$204+4*$209; //@line 4054 "cPickle.c"
        var $211=$pid; //@line 4054 "cPickle.c"
        HEAP[$210]=$211; //@line 4054 "cPickle.c"
        var $212=($209) + 1; //@line 4054 "cPickle.c"
        var $213=$207+8; //@line 4054 "cPickle.c"
        HEAP[$213]=$212; //@line 4054 "cPickle.c"
        $1=0; //@line 4055 "cPickle.c"
        __label__ = 34; break; //@line 4055 "cPickle.c"
      case 33: // $bb33
        var $214=HEAP[_UnpicklingError]; //@line 4058 "cPickle.c"
        _PyErr_SetString($214, __str92); //@line 4058 "cPickle.c"
        $1=-1; //@line 4061 "cPickle.c"
        __label__ = 34; break; //@line 4061 "cPickle.c"
      case 34: // $bb34
        var $215=$1; //@line 4031 "cPickle.c"
        $retval=$215; //@line 4031 "cPickle.c"
        var $retval35=$retval; //@line 4031 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval35; //@line 4031 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binpersid($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $pid;
        $self_addr=$self;
        $pid=0; //@line 4068 "cPickle.c"
        var $1=$self_addr; //@line 4070 "cPickle.c"
        var $2=$1+40; //@line 4070 "cPickle.c"
        var $3=HEAP[$2]; //@line 4070 "cPickle.c"
        var $4=($3)!=0; //@line 4070 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 31; break; } //@line 4070 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 4071 "cPickle.c"
        var $6=$5+32; //@line 4071 "cPickle.c"
        var $7=HEAP[$6]; //@line 4071 "cPickle.c"
        var $8=$7+8; //@line 4071 "cPickle.c"
        var $9=HEAP[$8]; //@line 4071 "cPickle.c"
        var $10=($9)!=0; //@line 4071 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 4071 "cPickle.c"
      case 2: // $bb3_thread
        var $11=HEAP[_UnpicklingError]; //@line 4071 "cPickle.c"
        _PyErr_SetString($11, __str88); //@line 4071 "cPickle.c"
        $pid=0; //@line 4071 "cPickle.c"
        __label__ = 4; break;
      case 3: // $bb3
        var $12=$self_addr; //@line 4071 "cPickle.c"
        var $13=$12+32; //@line 4071 "cPickle.c"
        var $14=HEAP[$13]; //@line 4071 "cPickle.c"
        var $15=$14+16; //@line 4071 "cPickle.c"
        var $16=HEAP[$15]; //@line 4071 "cPickle.c"
        var $17=$self_addr; //@line 4071 "cPickle.c"
        var $18=$17+32; //@line 4071 "cPickle.c"
        var $19=HEAP[$18]; //@line 4071 "cPickle.c"
        var $20=$19+8; //@line 4071 "cPickle.c"
        var $21=HEAP[$20]; //@line 4071 "cPickle.c"
        var $22=($21) - 1; //@line 4071 "cPickle.c"
        var $23=$19+8; //@line 4071 "cPickle.c"
        HEAP[$23]=$22; //@line 4071 "cPickle.c"
        var $24=$19+8; //@line 4071 "cPickle.c"
        var $25=HEAP[$24]; //@line 4071 "cPickle.c"
        var $26=$16+4*$25; //@line 4071 "cPickle.c"
        var $27=HEAP[$26]; //@line 4071 "cPickle.c"
        $pid=$27; //@line 4071 "cPickle.c"
        var $28=($27)==0; //@line 4072 "cPickle.c"
        if ($28) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4072 "cPickle.c"
      case 4: // $bb4
        $0=-1; //@line 4072 "cPickle.c"
        __label__ = 32; break; //@line 4072 "cPickle.c"
      case 5: // $bb5
        var $29=$self_addr; //@line 4074 "cPickle.c"
        var $30=$29+40; //@line 4074 "cPickle.c"
        var $31=HEAP[$30]; //@line 4074 "cPickle.c"
        var $32=$31+4; //@line 4074 "cPickle.c"
        var $33=HEAP[$32]; //@line 4074 "cPickle.c"
        var $34=$33+84; //@line 4074 "cPickle.c"
        var $35=HEAP[$34]; //@line 4074 "cPickle.c"
        var $36=($35) & 33554432; //@line 4074 "cPickle.c"
        var $37=($36)!=0; //@line 4074 "cPickle.c"
        var $38=$self_addr; //@line 4075 "cPickle.c"
        if ($37) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 4074 "cPickle.c"
      case 6: // $bb6
        var $39=$38+40; //@line 4075 "cPickle.c"
        var $40=HEAP[$39]; //@line 4075 "cPickle.c"
        var $41=$pid; //@line 4075 "cPickle.c"
        var $42=_PyList_Append($40, $41); //@line 4075 "cPickle.c"
        var $43=($42) < 0; //@line 4075 "cPickle.c"
        if ($43) { __label__ = 7; break; } else { __label__ = 25; break; } //@line 4075 "cPickle.c"
      case 7: // $bb7
        var $44=$pid; //@line 4076 "cPickle.c"
        var $45=$44; //@line 4076 "cPickle.c"
        var $46=HEAP[$45]; //@line 4076 "cPickle.c"
        var $47=($46) - 1; //@line 4076 "cPickle.c"
        var $48=$pid; //@line 4076 "cPickle.c"
        var $49=$48; //@line 4076 "cPickle.c"
        HEAP[$49]=$47; //@line 4076 "cPickle.c"
        var $50=$pid; //@line 4076 "cPickle.c"
        var $51=$50; //@line 4076 "cPickle.c"
        var $52=HEAP[$51]; //@line 4076 "cPickle.c"
        var $53=($52)==0; //@line 4076 "cPickle.c"
        if ($53) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4076 "cPickle.c"
      case 8: // $bb8
        var $54=$pid; //@line 4076 "cPickle.c"
        var $55=$54+4; //@line 4076 "cPickle.c"
        var $56=HEAP[$55]; //@line 4076 "cPickle.c"
        var $57=$56+24; //@line 4076 "cPickle.c"
        var $58=HEAP[$57]; //@line 4076 "cPickle.c"
        var $59=$pid; //@line 4076 "cPickle.c"
        FUNCTION_TABLE[$58]($59); //@line 4076 "cPickle.c"
        __label__ = 9; break; //@line 4076 "cPickle.c"
      case 9: // $bb9
        $0=-1; //@line 4077 "cPickle.c"
        __label__ = 32; break; //@line 4077 "cPickle.c"
      case 10: // $bb11
        var $60=$38+28; //@line 4081 "cPickle.c"
        var $61=HEAP[$60]; //@line 4081 "cPickle.c"
        var $62=($61)!=0; //@line 4081 "cPickle.c"
        if ($62) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 4081 "cPickle.c"
      case 11: // $bb12
        var $63=_PyTuple_New(1); //@line 4081 "cPickle.c"
        var $64=$self_addr; //@line 4081 "cPickle.c"
        var $65=$64+28; //@line 4081 "cPickle.c"
        HEAP[$65]=$63; //@line 4081 "cPickle.c"
        var $66=$self_addr; //@line 4081 "cPickle.c"
        var $67=$66+28; //@line 4081 "cPickle.c"
        var $68=HEAP[$67]; //@line 4081 "cPickle.c"
        var $69=($68)!=0; //@line 4081 "cPickle.c"
        if ($69) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 4081 "cPickle.c"
      case 12: // $bb13
        var $70=$self_addr; //@line 4081 "cPickle.c"
        var $71=$70+28; //@line 4081 "cPickle.c"
        var $72=HEAP[$71]; //@line 4081 "cPickle.c"
        var $73=$72; //@line 4081 "cPickle.c"
        var $74=$73+12; //@line 4081 "cPickle.c"
        var $75=$74; //@line 4081 "cPickle.c"
        var $76=HEAP[$75]; //@line 4081 "cPickle.c"
        var $77=($76)!=0; //@line 4081 "cPickle.c"
        if ($77) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 4081 "cPickle.c"
      case 13: // $bb14
        var $78=$self_addr; //@line 4081 "cPickle.c"
        var $79=$78+28; //@line 4081 "cPickle.c"
        var $80=HEAP[$79]; //@line 4081 "cPickle.c"
        var $81=$80; //@line 4081 "cPickle.c"
        var $82=$81+12; //@line 4081 "cPickle.c"
        var $83=$82; //@line 4081 "cPickle.c"
        var $84=HEAP[$83]; //@line 4081 "cPickle.c"
        var $85=$84; //@line 4081 "cPickle.c"
        var $86=HEAP[$85]; //@line 4081 "cPickle.c"
        var $87=($86) - 1; //@line 4081 "cPickle.c"
        var $88=$84; //@line 4081 "cPickle.c"
        HEAP[$88]=$87; //@line 4081 "cPickle.c"
        var $89=$84; //@line 4081 "cPickle.c"
        var $90=HEAP[$89]; //@line 4081 "cPickle.c"
        var $91=($90)==0; //@line 4081 "cPickle.c"
        if ($91) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4081 "cPickle.c"
      case 14: // $bb15
        var $92=$self_addr; //@line 4081 "cPickle.c"
        var $93=$92+28; //@line 4081 "cPickle.c"
        var $94=HEAP[$93]; //@line 4081 "cPickle.c"
        var $95=$94; //@line 4081 "cPickle.c"
        var $96=$95+12; //@line 4081 "cPickle.c"
        var $97=$96; //@line 4081 "cPickle.c"
        var $98=HEAP[$97]; //@line 4081 "cPickle.c"
        var $99=$98+4; //@line 4081 "cPickle.c"
        var $100=HEAP[$99]; //@line 4081 "cPickle.c"
        var $101=$100+24; //@line 4081 "cPickle.c"
        var $102=HEAP[$101]; //@line 4081 "cPickle.c"
        var $103=$self_addr; //@line 4081 "cPickle.c"
        var $104=$103+28; //@line 4081 "cPickle.c"
        var $105=HEAP[$104]; //@line 4081 "cPickle.c"
        var $106=$105; //@line 4081 "cPickle.c"
        var $107=$106+12; //@line 4081 "cPickle.c"
        var $108=$107; //@line 4081 "cPickle.c"
        var $109=HEAP[$108]; //@line 4081 "cPickle.c"
        FUNCTION_TABLE[$102]($109); //@line 4081 "cPickle.c"
        __label__ = 15; break; //@line 4081 "cPickle.c"
      case 15: // $bb16
        var $110=$self_addr; //@line 4081 "cPickle.c"
        var $111=$110+28; //@line 4081 "cPickle.c"
        var $112=HEAP[$111]; //@line 4081 "cPickle.c"
        var $113=$112; //@line 4081 "cPickle.c"
        var $114=$113+12; //@line 4081 "cPickle.c"
        var $115=$114; //@line 4081 "cPickle.c"
        var $116=$pid; //@line 4081 "cPickle.c"
        HEAP[$115]=$116; //@line 4081 "cPickle.c"
        __label__ = 18; break; //@line 4081 "cPickle.c"
      case 16: // $bb17
        var $117=$pid; //@line 4081 "cPickle.c"
        var $118=$117; //@line 4081 "cPickle.c"
        var $119=HEAP[$118]; //@line 4081 "cPickle.c"
        var $120=($119) - 1; //@line 4081 "cPickle.c"
        var $121=$pid; //@line 4081 "cPickle.c"
        var $122=$121; //@line 4081 "cPickle.c"
        HEAP[$122]=$120; //@line 4081 "cPickle.c"
        var $123=$pid; //@line 4081 "cPickle.c"
        var $124=$123; //@line 4081 "cPickle.c"
        var $125=HEAP[$124]; //@line 4081 "cPickle.c"
        var $126=($125)==0; //@line 4081 "cPickle.c"
        if ($126) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4081 "cPickle.c"
      case 17: // $bb18
        var $127=$pid; //@line 4081 "cPickle.c"
        var $128=$127+4; //@line 4081 "cPickle.c"
        var $129=HEAP[$128]; //@line 4081 "cPickle.c"
        var $130=$129+24; //@line 4081 "cPickle.c"
        var $131=HEAP[$130]; //@line 4081 "cPickle.c"
        var $132=$pid; //@line 4081 "cPickle.c"
        FUNCTION_TABLE[$131]($132); //@line 4081 "cPickle.c"
        __label__ = 18; break; //@line 4081 "cPickle.c"
      case 18: // $bb19
        var $133=$self_addr; //@line 4082 "cPickle.c"
        var $134=$133+28; //@line 4082 "cPickle.c"
        var $135=HEAP[$134]; //@line 4082 "cPickle.c"
        var $136=($135)!=0; //@line 4082 "cPickle.c"
        if ($136) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 4082 "cPickle.c"
      case 19: // $bb20
        var $137=$self_addr; //@line 4083 "cPickle.c"
        var $138=$137+28; //@line 4083 "cPickle.c"
        var $139=HEAP[$138]; //@line 4083 "cPickle.c"
        var $140=$self_addr; //@line 4083 "cPickle.c"
        var $141=$140+40; //@line 4083 "cPickle.c"
        var $142=HEAP[$141]; //@line 4083 "cPickle.c"
        var $143=_PyObject_Call($142, $139, 0); //@line 4083 "cPickle.c"
        $pid=$143; //@line 4083 "cPickle.c"
        var $144=$self_addr; //@line 4085 "cPickle.c"
        var $145=$144+28; //@line 4085 "cPickle.c"
        var $146=HEAP[$145]; //@line 4085 "cPickle.c"
        var $147=$146; //@line 4085 "cPickle.c"
        var $148=HEAP[$147]; //@line 4085 "cPickle.c"
        var $149=($148) > 1; //@line 4085 "cPickle.c"
        if ($149) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 4085 "cPickle.c"
      case 20: // $bb21
        var $150=$self_addr; //@line 4085 "cPickle.c"
        var $151=$150+28; //@line 4085 "cPickle.c"
        var $152=HEAP[$151]; //@line 4085 "cPickle.c"
        var $153=$152; //@line 4085 "cPickle.c"
        var $154=HEAP[$153]; //@line 4085 "cPickle.c"
        var $155=($154) - 1; //@line 4085 "cPickle.c"
        var $156=$152; //@line 4085 "cPickle.c"
        HEAP[$156]=$155; //@line 4085 "cPickle.c"
        var $157=$152; //@line 4085 "cPickle.c"
        var $158=HEAP[$157]; //@line 4085 "cPickle.c"
        var $159=($158)==0; //@line 4085 "cPickle.c"
        if ($159) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4085 "cPickle.c"
      case 21: // $bb22
        var $160=$self_addr; //@line 4085 "cPickle.c"
        var $161=$160+28; //@line 4085 "cPickle.c"
        var $162=HEAP[$161]; //@line 4085 "cPickle.c"
        var $163=$162+4; //@line 4085 "cPickle.c"
        var $164=HEAP[$163]; //@line 4085 "cPickle.c"
        var $165=$164+24; //@line 4085 "cPickle.c"
        var $166=HEAP[$165]; //@line 4085 "cPickle.c"
        var $167=$self_addr; //@line 4085 "cPickle.c"
        var $168=$167+28; //@line 4085 "cPickle.c"
        var $169=HEAP[$168]; //@line 4085 "cPickle.c"
        FUNCTION_TABLE[$166]($169); //@line 4085 "cPickle.c"
        __label__ = 22; break; //@line 4085 "cPickle.c"
      case 22: // $bb23
        var $170=$self_addr; //@line 4085 "cPickle.c"
        var $171=$170+28; //@line 4085 "cPickle.c"
        HEAP[$171]=0; //@line 4085 "cPickle.c"
        __label__ = 23; break; //@line 4085 "cPickle.c"
      case 23: // $bb24
        var $172=$pid; //@line 4087 "cPickle.c"
        var $173=($172)==0; //@line 4087 "cPickle.c"
        if ($173) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4087 "cPickle.c"
      case 24: // $bb25
        $0=-1; //@line 4087 "cPickle.c"
        __label__ = 32; break; //@line 4087 "cPickle.c"
      case 25: // $bb26
        var $174=$self_addr; //@line 4090 "cPickle.c"
        var $175=$174+32; //@line 4090 "cPickle.c"
        var $176=HEAP[$175]; //@line 4090 "cPickle.c"
        var $177=$176+8; //@line 4090 "cPickle.c"
        var $178=HEAP[$177]; //@line 4090 "cPickle.c"
        var $179=$self_addr; //@line 4090 "cPickle.c"
        var $180=$179+32; //@line 4090 "cPickle.c"
        var $181=HEAP[$180]; //@line 4090 "cPickle.c"
        var $182=$181+12; //@line 4090 "cPickle.c"
        var $183=HEAP[$182]; //@line 4090 "cPickle.c"
        var $184=($178)==($183); //@line 4090 "cPickle.c"
        if ($184) { __label__ = 26; break; } else { __label__ = 30; break; } //@line 4090 "cPickle.c"
      case 26: // $bb27
        var $185=$self_addr; //@line 4090 "cPickle.c"
        var $186=$185+32; //@line 4090 "cPickle.c"
        var $187=HEAP[$186]; //@line 4090 "cPickle.c"
        var $188=_Pdata_grow($187); //@line 4090 "cPickle.c"
        var $189=($188) < 0; //@line 4090 "cPickle.c"
        if ($189) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 4090 "cPickle.c"
      case 27: // $bb28
        var $190=$pid; //@line 4090 "cPickle.c"
        var $191=$190; //@line 4090 "cPickle.c"
        var $192=HEAP[$191]; //@line 4090 "cPickle.c"
        var $193=($192) - 1; //@line 4090 "cPickle.c"
        var $194=$pid; //@line 4090 "cPickle.c"
        var $195=$194; //@line 4090 "cPickle.c"
        HEAP[$195]=$193; //@line 4090 "cPickle.c"
        var $196=$pid; //@line 4090 "cPickle.c"
        var $197=$196; //@line 4090 "cPickle.c"
        var $198=HEAP[$197]; //@line 4090 "cPickle.c"
        var $199=($198)==0; //@line 4090 "cPickle.c"
        if ($199) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 4090 "cPickle.c"
      case 28: // $bb29
        var $200=$pid; //@line 4090 "cPickle.c"
        var $201=$200+4; //@line 4090 "cPickle.c"
        var $202=HEAP[$201]; //@line 4090 "cPickle.c"
        var $203=$202+24; //@line 4090 "cPickle.c"
        var $204=HEAP[$203]; //@line 4090 "cPickle.c"
        var $205=$pid; //@line 4090 "cPickle.c"
        FUNCTION_TABLE[$204]($205); //@line 4090 "cPickle.c"
        __label__ = 29; break; //@line 4090 "cPickle.c"
      case 29: // $bb30
        $0=-1; //@line 4090 "cPickle.c"
        __label__ = 32; break; //@line 4090 "cPickle.c"
      case 30: // $bb31
        var $206=$self_addr; //@line 4090 "cPickle.c"
        var $207=$206+32; //@line 4090 "cPickle.c"
        var $208=HEAP[$207]; //@line 4090 "cPickle.c"
        var $209=$208+16; //@line 4090 "cPickle.c"
        var $210=HEAP[$209]; //@line 4090 "cPickle.c"
        var $211=$self_addr; //@line 4090 "cPickle.c"
        var $212=$211+32; //@line 4090 "cPickle.c"
        var $213=HEAP[$212]; //@line 4090 "cPickle.c"
        var $214=$213+8; //@line 4090 "cPickle.c"
        var $215=HEAP[$214]; //@line 4090 "cPickle.c"
        var $216=$210+4*$215; //@line 4090 "cPickle.c"
        var $217=$pid; //@line 4090 "cPickle.c"
        HEAP[$216]=$217; //@line 4090 "cPickle.c"
        var $218=($215) + 1; //@line 4090 "cPickle.c"
        var $219=$213+8; //@line 4090 "cPickle.c"
        HEAP[$219]=$218; //@line 4090 "cPickle.c"
        $0=0; //@line 4091 "cPickle.c"
        __label__ = 32; break; //@line 4091 "cPickle.c"
      case 31: // $bb32
        var $220=HEAP[_UnpicklingError]; //@line 4094 "cPickle.c"
        _PyErr_SetString($220, __str92); //@line 4094 "cPickle.c"
        $0=-1; //@line 4097 "cPickle.c"
        __label__ = 32; break; //@line 4097 "cPickle.c"
      case 32: // $bb33
        var $221=$0; //@line 4072 "cPickle.c"
        $retval=$221; //@line 4072 "cPickle.c"
        var $retval34=$retval; //@line 4072 "cPickle.c"
        ;
        return $retval34; //@line 4072 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_pop($self) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval_i;
        var $0;
        var $self_addr;
        var $retval;
        var $1;
        var $len;
        $self_addr=$self;
        var $2=$self_addr; //@line 4105 "cPickle.c"
        var $3=$2+32; //@line 4105 "cPickle.c"
        var $4=HEAP[$3]; //@line 4105 "cPickle.c"
        var $5=$4+8; //@line 4105 "cPickle.c"
        var $6=HEAP[$5]; //@line 4105 "cPickle.c"
        $len=$6; //@line 4105 "cPickle.c"
        var $7=$self_addr; //@line 4114 "cPickle.c"
        var $8=$7+52; //@line 4114 "cPickle.c"
        var $9=HEAP[$8]; //@line 4114 "cPickle.c"
        var $10=($9) <= 0; //@line 4114 "cPickle.c"
        if ($10) { __lastLabel__ = -1; __label__ = 3; break; } else { __lastLabel__ = -1; __label__ = 1; break; } //@line 4114 "cPickle.c"
      case 1: // $bb
        var $11=$self_addr; //@line 4114 "cPickle.c"
        var $12=$11+48; //@line 4114 "cPickle.c"
        var $13=HEAP[$12]; //@line 4114 "cPickle.c"
        var $14=$self_addr; //@line 4114 "cPickle.c"
        var $15=$14+52; //@line 4114 "cPickle.c"
        var $16=HEAP[$15]; //@line 4114 "cPickle.c"
        var $17=($16) - 1; //@line 4114 "cPickle.c"
        var $18=$13+4*$17; //@line 4114 "cPickle.c"
        var $19=HEAP[$18]; //@line 4114 "cPickle.c"
        var $20=$len; //@line 4114 "cPickle.c"
        var $21=($19)!=($20); //@line 4114 "cPickle.c"
        if ($21) { __lastLabel__ = 1; __label__ = 3; break; } else { __lastLabel__ = 1; __label__ = 2; break; } //@line 4114 "cPickle.c"
      case 2: // $bb1
        var $22=$self_addr; //@line 4115 "cPickle.c"
        var $23=$22+52; //@line 4115 "cPickle.c"
        var $24=HEAP[$23]; //@line 4115 "cPickle.c"
        var $25=($24) - 1; //@line 4115 "cPickle.c"
        var $26=$self_addr; //@line 4115 "cPickle.c"
        var $27=$26+52; //@line 4115 "cPickle.c"
        HEAP[$27]=$25; //@line 4115 "cPickle.c"
        __label__ = 8; break; //@line 4115 "cPickle.c"
      case 3: // $bb2
        var $28=__lastLabel__ == 1 ? $20 : ($6);
        var $29=($28) > 0; //@line 4116 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 4116 "cPickle.c"
      case 4: // $bb3
        var $30=$len; //@line 4117 "cPickle.c"
        var $31=($30) - 1; //@line 4117 "cPickle.c"
        $len=$31; //@line 4117 "cPickle.c"
        var $32=$self_addr; //@line 4118 "cPickle.c"
        var $33=$32+32; //@line 4118 "cPickle.c"
        var $34=HEAP[$33]; //@line 4118 "cPickle.c"
        var $35=$34+16; //@line 4118 "cPickle.c"
        var $36=HEAP[$35]; //@line 4118 "cPickle.c"
        var $37=$len; //@line 4118 "cPickle.c"
        var $38=$36+4*$37; //@line 4118 "cPickle.c"
        var $39=HEAP[$38]; //@line 4118 "cPickle.c"
        var $40=$39; //@line 4118 "cPickle.c"
        var $41=HEAP[$40]; //@line 4118 "cPickle.c"
        var $42=($41) - 1; //@line 4118 "cPickle.c"
        var $43=$39; //@line 4118 "cPickle.c"
        HEAP[$43]=$42; //@line 4118 "cPickle.c"
        var $44=$39; //@line 4118 "cPickle.c"
        var $45=HEAP[$44]; //@line 4118 "cPickle.c"
        var $46=($45)==0; //@line 4118 "cPickle.c"
        if ($46) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4118 "cPickle.c"
      case 5: // $bb4
        var $47=$self_addr; //@line 4118 "cPickle.c"
        var $48=$47+32; //@line 4118 "cPickle.c"
        var $49=HEAP[$48]; //@line 4118 "cPickle.c"
        var $50=$49+16; //@line 4118 "cPickle.c"
        var $51=HEAP[$50]; //@line 4118 "cPickle.c"
        var $52=$len; //@line 4118 "cPickle.c"
        var $53=$51+4*$52; //@line 4118 "cPickle.c"
        var $54=HEAP[$53]; //@line 4118 "cPickle.c"
        var $55=$54+4; //@line 4118 "cPickle.c"
        var $56=HEAP[$55]; //@line 4118 "cPickle.c"
        var $57=$56+24; //@line 4118 "cPickle.c"
        var $58=HEAP[$57]; //@line 4118 "cPickle.c"
        var $59=$self_addr; //@line 4118 "cPickle.c"
        var $60=$59+32; //@line 4118 "cPickle.c"
        var $61=HEAP[$60]; //@line 4118 "cPickle.c"
        var $62=$61+16; //@line 4118 "cPickle.c"
        var $63=HEAP[$62]; //@line 4118 "cPickle.c"
        var $64=$len; //@line 4118 "cPickle.c"
        var $65=$63+4*$64; //@line 4118 "cPickle.c"
        var $66=HEAP[$65]; //@line 4118 "cPickle.c"
        FUNCTION_TABLE[$58]($66); //@line 4118 "cPickle.c"
        __label__ = 6; break; //@line 4118 "cPickle.c"
      case 6: // $bb5
        var $67=$self_addr; //@line 4119 "cPickle.c"
        var $68=$67+32; //@line 4119 "cPickle.c"
        var $69=HEAP[$68]; //@line 4119 "cPickle.c"
        var $70=$69+8; //@line 4119 "cPickle.c"
        var $71=$len; //@line 4119 "cPickle.c"
        HEAP[$70]=$71; //@line 4119 "cPickle.c"
        __label__ = 8; break; //@line 4119 "cPickle.c"
      case 7: // $bb6
        var $72=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
        _PyErr_SetString($72, __str2); //@line 188 "cPickle.c"
        $0=-1; //@line 189 "cPickle.c"
        var $73=$0; //@line 189 "cPickle.c"
        $retval_i=$73; //@line 189 "cPickle.c"
        var $retval1_i=$retval_i; //@line 189 "cPickle.c"
        $1=$retval1_i; //@line 4121 "cPickle.c"
        __label__ = 9; break; //@line 4121 "cPickle.c"
      case 8: // $bb7
        $1=0; //@line 4123 "cPickle.c"
        __label__ = 9; break; //@line 4123 "cPickle.c"
      case 9: // $bb8
        var $74=$1; //@line 4121 "cPickle.c"
        $retval=$74; //@line 4121 "cPickle.c"
        var $retval9=$retval; //@line 4121 "cPickle.c"
        ;
        return $retval9; //@line 4121 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_dup($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval_i;
        var $0;
        var $self_addr;
        var $retval;
        var $1;
        var $last;
        var $len;
        $self_addr=$self;
        var $2=$self_addr; //@line 4147 "cPickle.c"
        var $3=$2+32; //@line 4147 "cPickle.c"
        var $4=HEAP[$3]; //@line 4147 "cPickle.c"
        var $5=$4+8; //@line 4147 "cPickle.c"
        var $6=HEAP[$5]; //@line 4147 "cPickle.c"
        $len=$6; //@line 4147 "cPickle.c"
        var $7=$len; //@line 4147 "cPickle.c"
        var $8=($7) <= 0; //@line 4147 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4147 "cPickle.c"
      case 1: // $bb
        var $9=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
        _PyErr_SetString($9, __str2); //@line 188 "cPickle.c"
        $0=-1; //@line 189 "cPickle.c"
        var $10=$0; //@line 189 "cPickle.c"
        $retval_i=$10; //@line 189 "cPickle.c"
        var $retval1_i=$retval_i; //@line 189 "cPickle.c"
        $1=$retval1_i; //@line 4147 "cPickle.c"
        __label__ = 8; break; //@line 4147 "cPickle.c"
      case 2: // $bb1
        var $11=$self_addr; //@line 4148 "cPickle.c"
        var $12=$11+32; //@line 4148 "cPickle.c"
        var $13=HEAP[$12]; //@line 4148 "cPickle.c"
        var $14=$13+16; //@line 4148 "cPickle.c"
        var $15=HEAP[$14]; //@line 4148 "cPickle.c"
        var $16=$len; //@line 4148 "cPickle.c"
        var $17=($16) - 1; //@line 4148 "cPickle.c"
        var $18=$15+4*$17; //@line 4148 "cPickle.c"
        var $19=HEAP[$18]; //@line 4148 "cPickle.c"
        $last=$19; //@line 4148 "cPickle.c"
        var $20=$last; //@line 4149 "cPickle.c"
        var $21=$20; //@line 4149 "cPickle.c"
        var $22=HEAP[$21]; //@line 4149 "cPickle.c"
        var $23=($22) + 1; //@line 4149 "cPickle.c"
        var $24=$last; //@line 4149 "cPickle.c"
        var $25=$24; //@line 4149 "cPickle.c"
        HEAP[$25]=$23; //@line 4149 "cPickle.c"
        var $26=$self_addr; //@line 4150 "cPickle.c"
        var $27=$26+32; //@line 4150 "cPickle.c"
        var $28=HEAP[$27]; //@line 4150 "cPickle.c"
        var $29=$28+8; //@line 4150 "cPickle.c"
        var $30=HEAP[$29]; //@line 4150 "cPickle.c"
        var $31=$self_addr; //@line 4150 "cPickle.c"
        var $32=$31+32; //@line 4150 "cPickle.c"
        var $33=HEAP[$32]; //@line 4150 "cPickle.c"
        var $34=$33+12; //@line 4150 "cPickle.c"
        var $35=HEAP[$34]; //@line 4150 "cPickle.c"
        var $36=($30)==($35); //@line 4150 "cPickle.c"
        if ($36) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 4150 "cPickle.c"
      case 3: // $bb2
        var $37=$self_addr; //@line 4150 "cPickle.c"
        var $38=$37+32; //@line 4150 "cPickle.c"
        var $39=HEAP[$38]; //@line 4150 "cPickle.c"
        var $40=_Pdata_grow($39); //@line 4150 "cPickle.c"
        var $41=($40) < 0; //@line 4150 "cPickle.c"
        if ($41) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 4150 "cPickle.c"
      case 4: // $bb3
        var $42=$last; //@line 4150 "cPickle.c"
        var $43=$42; //@line 4150 "cPickle.c"
        var $44=HEAP[$43]; //@line 4150 "cPickle.c"
        var $45=($44) - 1; //@line 4150 "cPickle.c"
        var $46=$last; //@line 4150 "cPickle.c"
        var $47=$46; //@line 4150 "cPickle.c"
        HEAP[$47]=$45; //@line 4150 "cPickle.c"
        var $48=$last; //@line 4150 "cPickle.c"
        var $49=$48; //@line 4150 "cPickle.c"
        var $50=HEAP[$49]; //@line 4150 "cPickle.c"
        var $51=($50)==0; //@line 4150 "cPickle.c"
        if ($51) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4150 "cPickle.c"
      case 5: // $bb4
        var $52=$last; //@line 4150 "cPickle.c"
        var $53=$52+4; //@line 4150 "cPickle.c"
        var $54=HEAP[$53]; //@line 4150 "cPickle.c"
        var $55=$54+24; //@line 4150 "cPickle.c"
        var $56=HEAP[$55]; //@line 4150 "cPickle.c"
        var $57=$last; //@line 4150 "cPickle.c"
        FUNCTION_TABLE[$56]($57); //@line 4150 "cPickle.c"
        __label__ = 6; break; //@line 4150 "cPickle.c"
      case 6: // $bb5
        $1=-1; //@line 4150 "cPickle.c"
        __label__ = 8; break; //@line 4150 "cPickle.c"
      case 7: // $bb6
        var $58=$self_addr; //@line 4150 "cPickle.c"
        var $59=$58+32; //@line 4150 "cPickle.c"
        var $60=HEAP[$59]; //@line 4150 "cPickle.c"
        var $61=$60+16; //@line 4150 "cPickle.c"
        var $62=HEAP[$61]; //@line 4150 "cPickle.c"
        var $63=$self_addr; //@line 4150 "cPickle.c"
        var $64=$63+32; //@line 4150 "cPickle.c"
        var $65=HEAP[$64]; //@line 4150 "cPickle.c"
        var $66=$65+8; //@line 4150 "cPickle.c"
        var $67=HEAP[$66]; //@line 4150 "cPickle.c"
        var $68=$62+4*$67; //@line 4150 "cPickle.c"
        var $69=$last; //@line 4150 "cPickle.c"
        HEAP[$68]=$69; //@line 4150 "cPickle.c"
        var $70=($67) + 1; //@line 4150 "cPickle.c"
        var $71=$65+8; //@line 4150 "cPickle.c"
        HEAP[$71]=$70; //@line 4150 "cPickle.c"
        $1=0; //@line 4151 "cPickle.c"
        __label__ = 8; break; //@line 4151 "cPickle.c"
      case 8: // $bb7
        var $72=$1; //@line 4147 "cPickle.c"
        $retval=$72; //@line 4147 "cPickle.c"
        var $retval8=$retval; //@line 4147 "cPickle.c"
        ;
        return $retval8; //@line 4147 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_get($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval_i;
        var $0;
        var $self_addr;
        var $retval;
        var $1;
        var $py_str;
        var $value;
        var $len;
        var $s=__stackBase__;
        var $rc;
        $self_addr=$self;
        $py_str=0; //@line 4158 "cPickle.c"
        $value=0; //@line 4158 "cPickle.c"
        var $2=$self_addr; //@line 4163 "cPickle.c"
        var $3=$2+64; //@line 4163 "cPickle.c"
        var $4=HEAP[$3]; //@line 4163 "cPickle.c"
        var $5=$self_addr; //@line 4163 "cPickle.c"
        var $6=FUNCTION_TABLE[$4]($5, $s); //@line 4163 "cPickle.c"
        $len=$6; //@line 4163 "cPickle.c"
        var $7=$len; //@line 4163 "cPickle.c"
        var $8=($7) < 0; //@line 4163 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4163 "cPickle.c"
      case 1: // $bb
        $1=-1; //@line 4163 "cPickle.c"
        __label__ = 15; break; //@line 4163 "cPickle.c"
      case 2: // $bb1
        var $9=$len; //@line 4164 "cPickle.c"
        var $10=($9) <= 1; //@line 4164 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4164 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($11, __str79); //@line 3339 "cPickle.c"
        $0=-1; //@line 3340 "cPickle.c"
        var $12=$0; //@line 3340 "cPickle.c"
        $retval_i=$12; //@line 3340 "cPickle.c"
        var $retval1_i=$retval_i; //@line 3340 "cPickle.c"
        $1=$retval1_i; //@line 4164 "cPickle.c"
        __label__ = 15; break; //@line 4164 "cPickle.c"
      case 4: // $bb3
        var $13=$len; //@line 4166 "cPickle.c"
        var $14=($13) - 1; //@line 4166 "cPickle.c"
        var $15=HEAP[$s]; //@line 4166 "cPickle.c"
        var $16=_PyString_FromStringAndSize($15, $14); //@line 4166 "cPickle.c"
        $py_str=$16; //@line 4166 "cPickle.c"
        var $17=$py_str; //@line 4166 "cPickle.c"
        var $18=($17)==0; //@line 4166 "cPickle.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4166 "cPickle.c"
      case 5: // $bb4
        $1=-1; //@line 4166 "cPickle.c"
        __label__ = 15; break; //@line 4166 "cPickle.c"
      case 6: // $bb5
        var $19=$self_addr; //@line 4168 "cPickle.c"
        var $20=$19+24; //@line 4168 "cPickle.c"
        var $21=HEAP[$20]; //@line 4168 "cPickle.c"
        var $22=$py_str; //@line 4168 "cPickle.c"
        var $23=_PyDict_GetItem($21, $22); //@line 4168 "cPickle.c"
        $value=$23; //@line 4168 "cPickle.c"
        var $24=$value; //@line 4169 "cPickle.c"
        var $25=($24)==0; //@line 4169 "cPickle.c"
        if ($25) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4169 "cPickle.c"
      case 7: // $bb6
        var $26=HEAP[_BadPickleGet]; //@line 4170 "cPickle.c"
        var $27=$py_str; //@line 4170 "cPickle.c"
        _PyErr_SetObject($26, $27); //@line 4170 "cPickle.c"
        $rc=-1; //@line 4171 "cPickle.c"
        __label__ = 12; break; //@line 4171 "cPickle.c"
      case 8: // $bb7
        var $28=$self_addr; //@line 4174 "cPickle.c"
        var $29=$28+32; //@line 4174 "cPickle.c"
        var $30=HEAP[$29]; //@line 4174 "cPickle.c"
        var $31=$30+8; //@line 4174 "cPickle.c"
        var $32=HEAP[$31]; //@line 4174 "cPickle.c"
        var $33=$self_addr; //@line 4174 "cPickle.c"
        var $34=$33+32; //@line 4174 "cPickle.c"
        var $35=HEAP[$34]; //@line 4174 "cPickle.c"
        var $36=$35+12; //@line 4174 "cPickle.c"
        var $37=HEAP[$36]; //@line 4174 "cPickle.c"
        var $38=($32)==($37); //@line 4174 "cPickle.c"
        if ($38) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 4174 "cPickle.c"
      case 9: // $bb8
        var $39=$self_addr; //@line 4174 "cPickle.c"
        var $40=$39+32; //@line 4174 "cPickle.c"
        var $41=HEAP[$40]; //@line 4174 "cPickle.c"
        var $42=_Pdata_grow($41); //@line 4174 "cPickle.c"
        var $43=($42) < 0; //@line 4174 "cPickle.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4174 "cPickle.c"
      case 10: // $bb9
        $1=-1; //@line 4174 "cPickle.c"
        __label__ = 15; break; //@line 4174 "cPickle.c"
      case 11: // $bb10
        var $44=$value; //@line 4174 "cPickle.c"
        var $45=$44; //@line 4174 "cPickle.c"
        var $46=HEAP[$45]; //@line 4174 "cPickle.c"
        var $47=($46) + 1; //@line 4174 "cPickle.c"
        var $48=$value; //@line 4174 "cPickle.c"
        var $49=$48; //@line 4174 "cPickle.c"
        HEAP[$49]=$47; //@line 4174 "cPickle.c"
        var $50=$self_addr; //@line 4174 "cPickle.c"
        var $51=$50+32; //@line 4174 "cPickle.c"
        var $52=HEAP[$51]; //@line 4174 "cPickle.c"
        var $53=$52+16; //@line 4174 "cPickle.c"
        var $54=HEAP[$53]; //@line 4174 "cPickle.c"
        var $55=$self_addr; //@line 4174 "cPickle.c"
        var $56=$55+32; //@line 4174 "cPickle.c"
        var $57=HEAP[$56]; //@line 4174 "cPickle.c"
        var $58=$57+8; //@line 4174 "cPickle.c"
        var $59=HEAP[$58]; //@line 4174 "cPickle.c"
        var $60=$54+4*$59; //@line 4174 "cPickle.c"
        var $61=$value; //@line 4174 "cPickle.c"
        HEAP[$60]=$61; //@line 4174 "cPickle.c"
        var $62=($59) + 1; //@line 4174 "cPickle.c"
        var $63=$57+8; //@line 4174 "cPickle.c"
        HEAP[$63]=$62; //@line 4174 "cPickle.c"
        $rc=0; //@line 4175 "cPickle.c"
        __label__ = 12; break; //@line 4175 "cPickle.c"
      case 12: // $bb11
        var $64=$py_str; //@line 4178 "cPickle.c"
        var $65=$64; //@line 4178 "cPickle.c"
        var $66=HEAP[$65]; //@line 4178 "cPickle.c"
        var $67=($66) - 1; //@line 4178 "cPickle.c"
        var $68=$py_str; //@line 4178 "cPickle.c"
        var $69=$68; //@line 4178 "cPickle.c"
        HEAP[$69]=$67; //@line 4178 "cPickle.c"
        var $70=$py_str; //@line 4178 "cPickle.c"
        var $71=$70; //@line 4178 "cPickle.c"
        var $72=HEAP[$71]; //@line 4178 "cPickle.c"
        var $73=($72)==0; //@line 4178 "cPickle.c"
        if ($73) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4178 "cPickle.c"
      case 13: // $bb12
        var $74=$py_str; //@line 4178 "cPickle.c"
        var $75=$74+4; //@line 4178 "cPickle.c"
        var $76=HEAP[$75]; //@line 4178 "cPickle.c"
        var $77=$76+24; //@line 4178 "cPickle.c"
        var $78=HEAP[$77]; //@line 4178 "cPickle.c"
        var $79=$py_str; //@line 4178 "cPickle.c"
        FUNCTION_TABLE[$78]($79); //@line 4178 "cPickle.c"
        __label__ = 14; break; //@line 4178 "cPickle.c"
      case 14: // $bb13
        var $80=$rc; //@line 4179 "cPickle.c"
        $1=$80; //@line 4179 "cPickle.c"
        __label__ = 15; break; //@line 4179 "cPickle.c"
      case 15: // $bb14
        var $81=$1; //@line 4163 "cPickle.c"
        $retval=$81; //@line 4163 "cPickle.c"
        var $retval15=$retval; //@line 4163 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 4163 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binget($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_key;
        var $value;
        var $key;
        var $s=__stackBase__;
        var $rc;
        $self_addr=$self;
        $py_key=0; //@line 4186 "cPickle.c"
        $value=0; //@line 4186 "cPickle.c"
        var $1=$self_addr; //@line 4191 "cPickle.c"
        var $2=$1+60; //@line 4191 "cPickle.c"
        var $3=HEAP[$2]; //@line 4191 "cPickle.c"
        var $4=$self_addr; //@line 4191 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 1); //@line 4191 "cPickle.c"
        var $6=($5) < 0; //@line 4191 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4191 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 4191 "cPickle.c"
        __label__ = 13; break; //@line 4191 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 4193 "cPickle.c"
        var $8=$7; //@line 4193 "cPickle.c"
        var $9=HEAP[$8]; //@line 4193 "cPickle.c"
        $key=$9; //@line 4193 "cPickle.c"
        var $10=$key; //@line 4194 "cPickle.c"
        var $11=($10); //@line 4194 "cPickle.c"
        var $12=_PyInt_FromLong($11); //@line 4194 "cPickle.c"
        $py_key=$12; //@line 4194 "cPickle.c"
        var $13=$py_key; //@line 4194 "cPickle.c"
        var $14=($13)==0; //@line 4194 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4194 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 4194 "cPickle.c"
        __label__ = 13; break; //@line 4194 "cPickle.c"
      case 4: // $bb3
        var $15=$self_addr; //@line 4196 "cPickle.c"
        var $16=$15+24; //@line 4196 "cPickle.c"
        var $17=HEAP[$16]; //@line 4196 "cPickle.c"
        var $18=$py_key; //@line 4196 "cPickle.c"
        var $19=_PyDict_GetItem($17, $18); //@line 4196 "cPickle.c"
        $value=$19; //@line 4196 "cPickle.c"
        var $20=$value; //@line 4197 "cPickle.c"
        var $21=($20)==0; //@line 4197 "cPickle.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4197 "cPickle.c"
      case 5: // $bb4
        var $22=HEAP[_BadPickleGet]; //@line 4198 "cPickle.c"
        var $23=$py_key; //@line 4198 "cPickle.c"
        _PyErr_SetObject($22, $23); //@line 4198 "cPickle.c"
        $rc=-1; //@line 4199 "cPickle.c"
        __label__ = 10; break; //@line 4199 "cPickle.c"
      case 6: // $bb5
        var $24=$self_addr; //@line 4202 "cPickle.c"
        var $25=$24+32; //@line 4202 "cPickle.c"
        var $26=HEAP[$25]; //@line 4202 "cPickle.c"
        var $27=$26+8; //@line 4202 "cPickle.c"
        var $28=HEAP[$27]; //@line 4202 "cPickle.c"
        var $29=$self_addr; //@line 4202 "cPickle.c"
        var $30=$29+32; //@line 4202 "cPickle.c"
        var $31=HEAP[$30]; //@line 4202 "cPickle.c"
        var $32=$31+12; //@line 4202 "cPickle.c"
        var $33=HEAP[$32]; //@line 4202 "cPickle.c"
        var $34=($28)==($33); //@line 4202 "cPickle.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 4202 "cPickle.c"
      case 7: // $bb6
        var $35=$self_addr; //@line 4202 "cPickle.c"
        var $36=$35+32; //@line 4202 "cPickle.c"
        var $37=HEAP[$36]; //@line 4202 "cPickle.c"
        var $38=_Pdata_grow($37); //@line 4202 "cPickle.c"
        var $39=($38) < 0; //@line 4202 "cPickle.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4202 "cPickle.c"
      case 8: // $bb7
        $0=-1; //@line 4202 "cPickle.c"
        __label__ = 13; break; //@line 4202 "cPickle.c"
      case 9: // $bb8
        var $40=$value; //@line 4202 "cPickle.c"
        var $41=$40; //@line 4202 "cPickle.c"
        var $42=HEAP[$41]; //@line 4202 "cPickle.c"
        var $43=($42) + 1; //@line 4202 "cPickle.c"
        var $44=$value; //@line 4202 "cPickle.c"
        var $45=$44; //@line 4202 "cPickle.c"
        HEAP[$45]=$43; //@line 4202 "cPickle.c"
        var $46=$self_addr; //@line 4202 "cPickle.c"
        var $47=$46+32; //@line 4202 "cPickle.c"
        var $48=HEAP[$47]; //@line 4202 "cPickle.c"
        var $49=$48+16; //@line 4202 "cPickle.c"
        var $50=HEAP[$49]; //@line 4202 "cPickle.c"
        var $51=$self_addr; //@line 4202 "cPickle.c"
        var $52=$51+32; //@line 4202 "cPickle.c"
        var $53=HEAP[$52]; //@line 4202 "cPickle.c"
        var $54=$53+8; //@line 4202 "cPickle.c"
        var $55=HEAP[$54]; //@line 4202 "cPickle.c"
        var $56=$50+4*$55; //@line 4202 "cPickle.c"
        var $57=$value; //@line 4202 "cPickle.c"
        HEAP[$56]=$57; //@line 4202 "cPickle.c"
        var $58=($55) + 1; //@line 4202 "cPickle.c"
        var $59=$53+8; //@line 4202 "cPickle.c"
        HEAP[$59]=$58; //@line 4202 "cPickle.c"
        $rc=0; //@line 4203 "cPickle.c"
        __label__ = 10; break; //@line 4203 "cPickle.c"
      case 10: // $bb9
        var $60=$py_key; //@line 4206 "cPickle.c"
        var $61=$60; //@line 4206 "cPickle.c"
        var $62=HEAP[$61]; //@line 4206 "cPickle.c"
        var $63=($62) - 1; //@line 4206 "cPickle.c"
        var $64=$py_key; //@line 4206 "cPickle.c"
        var $65=$64; //@line 4206 "cPickle.c"
        HEAP[$65]=$63; //@line 4206 "cPickle.c"
        var $66=$py_key; //@line 4206 "cPickle.c"
        var $67=$66; //@line 4206 "cPickle.c"
        var $68=HEAP[$67]; //@line 4206 "cPickle.c"
        var $69=($68)==0; //@line 4206 "cPickle.c"
        if ($69) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4206 "cPickle.c"
      case 11: // $bb10
        var $70=$py_key; //@line 4206 "cPickle.c"
        var $71=$70+4; //@line 4206 "cPickle.c"
        var $72=HEAP[$71]; //@line 4206 "cPickle.c"
        var $73=$72+24; //@line 4206 "cPickle.c"
        var $74=HEAP[$73]; //@line 4206 "cPickle.c"
        var $75=$py_key; //@line 4206 "cPickle.c"
        FUNCTION_TABLE[$74]($75); //@line 4206 "cPickle.c"
        __label__ = 12; break; //@line 4206 "cPickle.c"
      case 12: // $bb11
        var $76=$rc; //@line 4207 "cPickle.c"
        $0=$76; //@line 4207 "cPickle.c"
        __label__ = 13; break; //@line 4207 "cPickle.c"
      case 13: // $bb12
        var $77=$0; //@line 4191 "cPickle.c"
        $retval=$77; //@line 4191 "cPickle.c"
        var $retval13=$retval; //@line 4191 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 4191 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_long_binget($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $py_key;
        var $value;
        var $c;
        var $s=__stackBase__;
        var $key;
        var $rc;
        $self_addr=$self;
        $py_key=0; //@line 4214 "cPickle.c"
        $value=0; //@line 4214 "cPickle.c"
        var $1=$self_addr; //@line 4220 "cPickle.c"
        var $2=$1+60; //@line 4220 "cPickle.c"
        var $3=HEAP[$2]; //@line 4220 "cPickle.c"
        var $4=$self_addr; //@line 4220 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 4); //@line 4220 "cPickle.c"
        var $6=($5) < 0; //@line 4220 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4220 "cPickle.c"
      case 1: // $bb
        $0=-1; //@line 4220 "cPickle.c"
        __label__ = 13; break; //@line 4220 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 4222 "cPickle.c"
        var $8=$7; //@line 4222 "cPickle.c"
        var $9=HEAP[$8]; //@line 4222 "cPickle.c"
        $c=$9; //@line 4222 "cPickle.c"
        var $10=$c; //@line 4223 "cPickle.c"
        var $11=($10); //@line 4223 "cPickle.c"
        $key=$11; //@line 4223 "cPickle.c"
        var $12=HEAP[$s]; //@line 4224 "cPickle.c"
        var $13=$12+1; //@line 4224 "cPickle.c"
        var $14=HEAP[$13]; //@line 4224 "cPickle.c"
        $c=$14; //@line 4224 "cPickle.c"
        var $15=$c; //@line 4225 "cPickle.c"
        var $16=($15); //@line 4225 "cPickle.c"
        var $17=($16) << 8; //@line 4225 "cPickle.c"
        var $18=$key; //@line 4225 "cPickle.c"
        var $19=($17) | ($18); //@line 4225 "cPickle.c"
        $key=$19; //@line 4225 "cPickle.c"
        var $20=HEAP[$s]; //@line 4226 "cPickle.c"
        var $21=$20+2; //@line 4226 "cPickle.c"
        var $22=HEAP[$21]; //@line 4226 "cPickle.c"
        $c=$22; //@line 4226 "cPickle.c"
        var $23=$c; //@line 4227 "cPickle.c"
        var $24=($23); //@line 4227 "cPickle.c"
        var $25=($24) << 16; //@line 4227 "cPickle.c"
        var $26=$key; //@line 4227 "cPickle.c"
        var $27=($25) | ($26); //@line 4227 "cPickle.c"
        $key=$27; //@line 4227 "cPickle.c"
        var $28=HEAP[$s]; //@line 4228 "cPickle.c"
        var $29=$28+3; //@line 4228 "cPickle.c"
        var $30=HEAP[$29]; //@line 4228 "cPickle.c"
        $c=$30; //@line 4228 "cPickle.c"
        var $31=$c; //@line 4229 "cPickle.c"
        var $32=($31); //@line 4229 "cPickle.c"
        var $33=($32) << 24; //@line 4229 "cPickle.c"
        var $34=$key; //@line 4229 "cPickle.c"
        var $35=($33) | ($34); //@line 4229 "cPickle.c"
        $key=$35; //@line 4229 "cPickle.c"
        var $36=$key; //@line 4231 "cPickle.c"
        var $37=_PyInt_FromLong($36); //@line 4231 "cPickle.c"
        $py_key=$37; //@line 4231 "cPickle.c"
        var $38=$py_key; //@line 4231 "cPickle.c"
        var $39=($38)==0; //@line 4231 "cPickle.c"
        if ($39) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4231 "cPickle.c"
      case 3: // $bb2
        $0=-1; //@line 4231 "cPickle.c"
        __label__ = 13; break; //@line 4231 "cPickle.c"
      case 4: // $bb3
        var $40=$self_addr; //@line 4233 "cPickle.c"
        var $41=$40+24; //@line 4233 "cPickle.c"
        var $42=HEAP[$41]; //@line 4233 "cPickle.c"
        var $43=$py_key; //@line 4233 "cPickle.c"
        var $44=_PyDict_GetItem($42, $43); //@line 4233 "cPickle.c"
        $value=$44; //@line 4233 "cPickle.c"
        var $45=$value; //@line 4234 "cPickle.c"
        var $46=($45)==0; //@line 4234 "cPickle.c"
        if ($46) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4234 "cPickle.c"
      case 5: // $bb4
        var $47=HEAP[_BadPickleGet]; //@line 4235 "cPickle.c"
        var $48=$py_key; //@line 4235 "cPickle.c"
        _PyErr_SetObject($47, $48); //@line 4235 "cPickle.c"
        $rc=-1; //@line 4236 "cPickle.c"
        __label__ = 10; break; //@line 4236 "cPickle.c"
      case 6: // $bb5
        var $49=$self_addr; //@line 4239 "cPickle.c"
        var $50=$49+32; //@line 4239 "cPickle.c"
        var $51=HEAP[$50]; //@line 4239 "cPickle.c"
        var $52=$51+8; //@line 4239 "cPickle.c"
        var $53=HEAP[$52]; //@line 4239 "cPickle.c"
        var $54=$self_addr; //@line 4239 "cPickle.c"
        var $55=$54+32; //@line 4239 "cPickle.c"
        var $56=HEAP[$55]; //@line 4239 "cPickle.c"
        var $57=$56+12; //@line 4239 "cPickle.c"
        var $58=HEAP[$57]; //@line 4239 "cPickle.c"
        var $59=($53)==($58); //@line 4239 "cPickle.c"
        if ($59) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 4239 "cPickle.c"
      case 7: // $bb6
        var $60=$self_addr; //@line 4239 "cPickle.c"
        var $61=$60+32; //@line 4239 "cPickle.c"
        var $62=HEAP[$61]; //@line 4239 "cPickle.c"
        var $63=_Pdata_grow($62); //@line 4239 "cPickle.c"
        var $64=($63) < 0; //@line 4239 "cPickle.c"
        if ($64) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4239 "cPickle.c"
      case 8: // $bb7
        $0=-1; //@line 4239 "cPickle.c"
        __label__ = 13; break; //@line 4239 "cPickle.c"
      case 9: // $bb8
        var $65=$value; //@line 4239 "cPickle.c"
        var $66=$65; //@line 4239 "cPickle.c"
        var $67=HEAP[$66]; //@line 4239 "cPickle.c"
        var $68=($67) + 1; //@line 4239 "cPickle.c"
        var $69=$value; //@line 4239 "cPickle.c"
        var $70=$69; //@line 4239 "cPickle.c"
        HEAP[$70]=$68; //@line 4239 "cPickle.c"
        var $71=$self_addr; //@line 4239 "cPickle.c"
        var $72=$71+32; //@line 4239 "cPickle.c"
        var $73=HEAP[$72]; //@line 4239 "cPickle.c"
        var $74=$73+16; //@line 4239 "cPickle.c"
        var $75=HEAP[$74]; //@line 4239 "cPickle.c"
        var $76=$self_addr; //@line 4239 "cPickle.c"
        var $77=$76+32; //@line 4239 "cPickle.c"
        var $78=HEAP[$77]; //@line 4239 "cPickle.c"
        var $79=$78+8; //@line 4239 "cPickle.c"
        var $80=HEAP[$79]; //@line 4239 "cPickle.c"
        var $81=$75+4*$80; //@line 4239 "cPickle.c"
        var $82=$value; //@line 4239 "cPickle.c"
        HEAP[$81]=$82; //@line 4239 "cPickle.c"
        var $83=($80) + 1; //@line 4239 "cPickle.c"
        var $84=$78+8; //@line 4239 "cPickle.c"
        HEAP[$84]=$83; //@line 4239 "cPickle.c"
        $rc=0; //@line 4240 "cPickle.c"
        __label__ = 10; break; //@line 4240 "cPickle.c"
      case 10: // $bb9
        var $85=$py_key; //@line 4243 "cPickle.c"
        var $86=$85; //@line 4243 "cPickle.c"
        var $87=HEAP[$86]; //@line 4243 "cPickle.c"
        var $88=($87) - 1; //@line 4243 "cPickle.c"
        var $89=$py_key; //@line 4243 "cPickle.c"
        var $90=$89; //@line 4243 "cPickle.c"
        HEAP[$90]=$88; //@line 4243 "cPickle.c"
        var $91=$py_key; //@line 4243 "cPickle.c"
        var $92=$91; //@line 4243 "cPickle.c"
        var $93=HEAP[$92]; //@line 4243 "cPickle.c"
        var $94=($93)==0; //@line 4243 "cPickle.c"
        if ($94) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4243 "cPickle.c"
      case 11: // $bb10
        var $95=$py_key; //@line 4243 "cPickle.c"
        var $96=$95+4; //@line 4243 "cPickle.c"
        var $97=HEAP[$96]; //@line 4243 "cPickle.c"
        var $98=$97+24; //@line 4243 "cPickle.c"
        var $99=HEAP[$98]; //@line 4243 "cPickle.c"
        var $100=$py_key; //@line 4243 "cPickle.c"
        FUNCTION_TABLE[$99]($100); //@line 4243 "cPickle.c"
        __label__ = 12; break; //@line 4243 "cPickle.c"
      case 12: // $bb11
        var $101=$rc; //@line 4244 "cPickle.c"
        $0=$101; //@line 4244 "cPickle.c"
        __label__ = 13; break; //@line 4244 "cPickle.c"
      case 13: // $bb12
        var $102=$0; //@line 4220 "cPickle.c"
        $retval=$102; //@line 4220 "cPickle.c"
        var $retval13=$retval; //@line 4220 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 4220 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_extension($self, $nbytes) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr_i;
        var $x_addr_i;
        var $retval_i;
        var $0;
        var $c_i;
        var $i_i;
        var $l_i;
        var $self_addr;
        var $nbytes_addr;
        var $retval;
        var $1;
        var $codebytes=__stackBase__;
        var $code;
        var $py_code;
        var $obj;
        var $pair;
        var $module_name;
        var $class_name;
        $self_addr=$self;
        $nbytes_addr=$nbytes;
        var $2=$nbytes_addr; //@line 4260 "cPickle.c"
        var $3=($2)!=1; //@line 4260 "cPickle.c"
        var $4=$nbytes_addr; //@line 4260 "cPickle.c"
        var $5=($4)!=2; //@line 4260 "cPickle.c"
        var $or_cond=($3) & ($5);
        var $6=$nbytes_addr; //@line 4260 "cPickle.c"
        var $7=($6)!=4; //@line 4260 "cPickle.c"
        var $or_cond3=($or_cond) & ($7);
        if ($or_cond3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4260 "cPickle.c"
      case 1: // $bb2
        ___assert_fail(__str93, __str15, 4260, ___PRETTY_FUNCTION___14342); //@line 4260 "cPickle.c"
        throw "Reached an unreachable!" //@line 4260 "cPickle.c"
      case 2: // $bb3
        var $8=$self_addr; //@line 4261 "cPickle.c"
        var $9=$8+60; //@line 4261 "cPickle.c"
        var $10=HEAP[$9]; //@line 4261 "cPickle.c"
        var $11=$self_addr; //@line 4261 "cPickle.c"
        var $12=$nbytes_addr; //@line 4261 "cPickle.c"
        var $13=FUNCTION_TABLE[$10]($11, $codebytes, $12); //@line 4261 "cPickle.c"
        var $14=($13) < 0; //@line 4261 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4261 "cPickle.c"
      case 3: // $bb4
        $1=-1; //@line 4261 "cPickle.c"
        __label__ = 45; break; //@line 4261 "cPickle.c"
      case 4: // $bb5
        var $15=HEAP[$codebytes]; //@line 4262 "cPickle.c"
        var $16=$nbytes_addr; //@line 4262 "cPickle.c"
        $s_addr_i=$15;
        $x_addr_i=$16;
        $i_i=0; //@line 3408 "cPickle.c"
        $l_i=0; //@line 3408 "cPickle.c"
        var $17=$i_i; //@line 3408 "cPickle.c"
        var $18=$x_addr_i; //@line 3408 "cPickle.c"
        var $19=($17) < ($18); //@line 3408 "cPickle.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 3408 "cPickle.c"
      case 5: // $calc_binint_exit_thread
        $0=0; //@line 3420 "cPickle.c"
        $retval_i=0; //@line 3420 "cPickle.c"
        $code=0; //@line 4262 "cPickle.c"
        __label__ = 8; break;
      case 6: // $bb_i
        var $20=$s_addr_i; //@line 3409 "cPickle.c"
        var $21=$i_i; //@line 3409 "cPickle.c"
        var $22=$20+$21; //@line 3409 "cPickle.c"
        var $23=HEAP[$22]; //@line 3409 "cPickle.c"
        $c_i=$23; //@line 3409 "cPickle.c"
        var $24=$c_i; //@line 3410 "cPickle.c"
        var $25=($24); //@line 3410 "cPickle.c"
        var $26=$i_i; //@line 3410 "cPickle.c"
        var $27=($26) * 8; //@line 3410 "cPickle.c"
        var $28=($25) << ($27); //@line 3410 "cPickle.c"
        var $29=$l_i; //@line 3410 "cPickle.c"
        var $30=($28) | ($29); //@line 3410 "cPickle.c"
        $l_i=$30; //@line 3410 "cPickle.c"
        var $31=$i_i; //@line 3408 "cPickle.c"
        var $32=($31) + 1; //@line 3408 "cPickle.c"
        $i_i=$32; //@line 3408 "cPickle.c"
        var $33=$i_i; //@line 3408 "cPickle.c"
        var $34=$x_addr_i; //@line 3408 "cPickle.c"
        var $35=($33) < ($34); //@line 3408 "cPickle.c"
        if ($35) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3408 "cPickle.c"
      case 7: // $calc_binint_exit
        var $_pr=$l_i;
        $0=$_pr; //@line 3420 "cPickle.c"
        $retval_i=$_pr; //@line 3420 "cPickle.c"
        $code=$_pr; //@line 4262 "cPickle.c"
        var $36=($_pr) <= 0; //@line 4263 "cPickle.c"
        if ($36) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4263 "cPickle.c"
      case 8: // $bb6
        var $37=HEAP[_UnpicklingError]; //@line 4265 "cPickle.c"
        _PyErr_SetString($37, __str94); //@line 4265 "cPickle.c"
        $1=-1; //@line 4266 "cPickle.c"
        __label__ = 45; break; //@line 4266 "cPickle.c"
      case 9: // $bb7
        var $38=$code; //@line 4270 "cPickle.c"
        var $39=_PyInt_FromLong($38); //@line 4270 "cPickle.c"
        $py_code=$39; //@line 4270 "cPickle.c"
        var $40=$py_code; //@line 4271 "cPickle.c"
        var $41=($40)==0; //@line 4271 "cPickle.c"
        if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4271 "cPickle.c"
      case 10: // $bb8
        $1=-1; //@line 4271 "cPickle.c"
        __label__ = 45; break; //@line 4271 "cPickle.c"
      case 11: // $bb9
        var $42=HEAP[_extension_cache]; //@line 4272 "cPickle.c"
        var $43=$py_code; //@line 4272 "cPickle.c"
        var $44=_PyDict_GetItem($42, $43); //@line 4272 "cPickle.c"
        $obj=$44; //@line 4272 "cPickle.c"
        var $45=$obj; //@line 4273 "cPickle.c"
        var $46=($45)!=0; //@line 4273 "cPickle.c"
        if ($46) { __label__ = 12; break; } else { __label__ = 18; break; } //@line 4273 "cPickle.c"
      case 12: // $bb10
        var $47=$py_code; //@line 4275 "cPickle.c"
        var $48=$47; //@line 4275 "cPickle.c"
        var $49=HEAP[$48]; //@line 4275 "cPickle.c"
        var $50=($49) - 1; //@line 4275 "cPickle.c"
        var $51=$py_code; //@line 4275 "cPickle.c"
        var $52=$51; //@line 4275 "cPickle.c"
        HEAP[$52]=$50; //@line 4275 "cPickle.c"
        var $53=$py_code; //@line 4275 "cPickle.c"
        var $54=$53; //@line 4275 "cPickle.c"
        var $55=HEAP[$54]; //@line 4275 "cPickle.c"
        var $56=($55)==0; //@line 4275 "cPickle.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4275 "cPickle.c"
      case 13: // $bb11
        var $57=$py_code; //@line 4275 "cPickle.c"
        var $58=$57+4; //@line 4275 "cPickle.c"
        var $59=HEAP[$58]; //@line 4275 "cPickle.c"
        var $60=$59+24; //@line 4275 "cPickle.c"
        var $61=HEAP[$60]; //@line 4275 "cPickle.c"
        var $62=$py_code; //@line 4275 "cPickle.c"
        FUNCTION_TABLE[$61]($62); //@line 4275 "cPickle.c"
        __label__ = 14; break; //@line 4275 "cPickle.c"
      case 14: // $bb12
        var $63=$self_addr; //@line 4276 "cPickle.c"
        var $64=$63+32; //@line 4276 "cPickle.c"
        var $65=HEAP[$64]; //@line 4276 "cPickle.c"
        var $66=$65+8; //@line 4276 "cPickle.c"
        var $67=HEAP[$66]; //@line 4276 "cPickle.c"
        var $68=$self_addr; //@line 4276 "cPickle.c"
        var $69=$68+32; //@line 4276 "cPickle.c"
        var $70=HEAP[$69]; //@line 4276 "cPickle.c"
        var $71=$70+12; //@line 4276 "cPickle.c"
        var $72=HEAP[$71]; //@line 4276 "cPickle.c"
        var $73=($67)==($72); //@line 4276 "cPickle.c"
        if ($73) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 4276 "cPickle.c"
      case 15: // $bb13
        var $74=$self_addr; //@line 4276 "cPickle.c"
        var $75=$74+32; //@line 4276 "cPickle.c"
        var $76=HEAP[$75]; //@line 4276 "cPickle.c"
        var $77=_Pdata_grow($76); //@line 4276 "cPickle.c"
        var $78=($77) < 0; //@line 4276 "cPickle.c"
        if ($78) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4276 "cPickle.c"
      case 16: // $bb14
        $1=-1; //@line 4276 "cPickle.c"
        __label__ = 45; break; //@line 4276 "cPickle.c"
      case 17: // $bb15
        var $79=$obj; //@line 4276 "cPickle.c"
        var $80=$79; //@line 4276 "cPickle.c"
        var $81=HEAP[$80]; //@line 4276 "cPickle.c"
        var $82=($81) + 1; //@line 4276 "cPickle.c"
        var $83=$obj; //@line 4276 "cPickle.c"
        var $84=$83; //@line 4276 "cPickle.c"
        HEAP[$84]=$82; //@line 4276 "cPickle.c"
        var $85=$self_addr; //@line 4276 "cPickle.c"
        var $86=$85+32; //@line 4276 "cPickle.c"
        var $87=HEAP[$86]; //@line 4276 "cPickle.c"
        var $88=$87+16; //@line 4276 "cPickle.c"
        var $89=HEAP[$88]; //@line 4276 "cPickle.c"
        var $90=$self_addr; //@line 4276 "cPickle.c"
        var $91=$90+32; //@line 4276 "cPickle.c"
        var $92=HEAP[$91]; //@line 4276 "cPickle.c"
        var $93=$92+8; //@line 4276 "cPickle.c"
        var $94=HEAP[$93]; //@line 4276 "cPickle.c"
        var $95=$89+4*$94; //@line 4276 "cPickle.c"
        var $96=$obj; //@line 4276 "cPickle.c"
        HEAP[$95]=$96; //@line 4276 "cPickle.c"
        var $97=($94) + 1; //@line 4276 "cPickle.c"
        var $98=$92+8; //@line 4276 "cPickle.c"
        HEAP[$98]=$97; //@line 4276 "cPickle.c"
        $1=0; //@line 4277 "cPickle.c"
        __label__ = 45; break; //@line 4277 "cPickle.c"
      case 18: // $bb16
        var $99=HEAP[_inverted_registry]; //@line 4281 "cPickle.c"
        var $100=$py_code; //@line 4281 "cPickle.c"
        var $101=_PyDict_GetItem($99, $100); //@line 4281 "cPickle.c"
        $pair=$101; //@line 4281 "cPickle.c"
        var $102=$pair; //@line 4282 "cPickle.c"
        var $103=($102)==0; //@line 4282 "cPickle.c"
        if ($103) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 4282 "cPickle.c"
      case 19: // $bb17
        var $104=$py_code; //@line 4283 "cPickle.c"
        var $105=$104; //@line 4283 "cPickle.c"
        var $106=HEAP[$105]; //@line 4283 "cPickle.c"
        var $107=($106) - 1; //@line 4283 "cPickle.c"
        var $108=$py_code; //@line 4283 "cPickle.c"
        var $109=$108; //@line 4283 "cPickle.c"
        HEAP[$109]=$107; //@line 4283 "cPickle.c"
        var $110=$py_code; //@line 4283 "cPickle.c"
        var $111=$110; //@line 4283 "cPickle.c"
        var $112=HEAP[$111]; //@line 4283 "cPickle.c"
        var $113=($112)==0; //@line 4283 "cPickle.c"
        if ($113) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4283 "cPickle.c"
      case 20: // $bb18
        var $114=$py_code; //@line 4283 "cPickle.c"
        var $115=$114+4; //@line 4283 "cPickle.c"
        var $116=HEAP[$115]; //@line 4283 "cPickle.c"
        var $117=$116+24; //@line 4283 "cPickle.c"
        var $118=HEAP[$117]; //@line 4283 "cPickle.c"
        var $119=$py_code; //@line 4283 "cPickle.c"
        FUNCTION_TABLE[$118]($119); //@line 4283 "cPickle.c"
        __label__ = 21; break; //@line 4283 "cPickle.c"
      case 21: // $bb19
        var $120=HEAP[_PyExc_ValueError]; //@line 4284 "cPickle.c"
        var $121=$code; //@line 4284 "cPickle.c"
        var $122=_PyErr_Format($120, __str95, $121); //@line 4284 "cPickle.c"
        $1=-1; //@line 4286 "cPickle.c"
        __label__ = 45; break; //@line 4286 "cPickle.c"
      case 22: // $bb20
        var $123=$pair; //@line 4291 "cPickle.c"
        var $124=$123+4; //@line 4291 "cPickle.c"
        var $125=HEAP[$124]; //@line 4291 "cPickle.c"
        var $126=$125+84; //@line 4291 "cPickle.c"
        var $127=HEAP[$126]; //@line 4291 "cPickle.c"
        var $128=($127) & 67108864; //@line 4291 "cPickle.c"
        var $129=($128)==0; //@line 4291 "cPickle.c"
        if ($129) { __label__ = 26; break; } else { __label__ = 23; break; } //@line 4291 "cPickle.c"
      case 23: // $bb21
        var $130=$pair; //@line 4291 "cPickle.c"
        var $131=_PyTuple_Size($130); //@line 4291 "cPickle.c"
        var $132=($131)!=2; //@line 4291 "cPickle.c"
        if ($132) { __label__ = 26; break; } else { __label__ = 24; break; } //@line 4291 "cPickle.c"
      case 24: // $bb22
        var $133=$pair; //@line 4291 "cPickle.c"
        var $134=$133; //@line 4291 "cPickle.c"
        var $135=$134+12; //@line 4291 "cPickle.c"
        var $136=$135; //@line 4291 "cPickle.c"
        var $137=HEAP[$136]; //@line 4291 "cPickle.c"
        $module_name=$137; //@line 4291 "cPickle.c"
        var $138=$module_name; //@line 4291 "cPickle.c"
        var $139=$138+4; //@line 4291 "cPickle.c"
        var $140=HEAP[$139]; //@line 4291 "cPickle.c"
        var $141=$140+84; //@line 4291 "cPickle.c"
        var $142=HEAP[$141]; //@line 4291 "cPickle.c"
        var $143=($142) & 134217728; //@line 4291 "cPickle.c"
        var $144=($143)==0; //@line 4291 "cPickle.c"
        if ($144) { __label__ = 26; break; } else { __label__ = 25; break; } //@line 4291 "cPickle.c"
      case 25: // $bb23
        var $145=$pair; //@line 4291 "cPickle.c"
        var $146=$145; //@line 4291 "cPickle.c"
        var $147=$146+12; //@line 4291 "cPickle.c"
        var $148=$147+4; //@line 4291 "cPickle.c"
        var $149=HEAP[$148]; //@line 4291 "cPickle.c"
        $class_name=$149; //@line 4291 "cPickle.c"
        var $150=$class_name; //@line 4291 "cPickle.c"
        var $151=$150+4; //@line 4291 "cPickle.c"
        var $152=HEAP[$151]; //@line 4291 "cPickle.c"
        var $153=$152+84; //@line 4291 "cPickle.c"
        var $154=HEAP[$153]; //@line 4291 "cPickle.c"
        var $155=($154) & 134217728; //@line 4291 "cPickle.c"
        var $156=($155)==0; //@line 4291 "cPickle.c"
        if ($156) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 4291 "cPickle.c"
      case 26: // $bb24
        var $157=$py_code; //@line 4294 "cPickle.c"
        var $158=$157; //@line 4294 "cPickle.c"
        var $159=HEAP[$158]; //@line 4294 "cPickle.c"
        var $160=($159) - 1; //@line 4294 "cPickle.c"
        var $161=$py_code; //@line 4294 "cPickle.c"
        var $162=$161; //@line 4294 "cPickle.c"
        HEAP[$162]=$160; //@line 4294 "cPickle.c"
        var $163=$py_code; //@line 4294 "cPickle.c"
        var $164=$163; //@line 4294 "cPickle.c"
        var $165=HEAP[$164]; //@line 4294 "cPickle.c"
        var $166=($165)==0; //@line 4294 "cPickle.c"
        if ($166) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4294 "cPickle.c"
      case 27: // $bb25
        var $167=$py_code; //@line 4294 "cPickle.c"
        var $168=$167+4; //@line 4294 "cPickle.c"
        var $169=HEAP[$168]; //@line 4294 "cPickle.c"
        var $170=$169+24; //@line 4294 "cPickle.c"
        var $171=HEAP[$170]; //@line 4294 "cPickle.c"
        var $172=$py_code; //@line 4294 "cPickle.c"
        FUNCTION_TABLE[$171]($172); //@line 4294 "cPickle.c"
        __label__ = 28; break; //@line 4294 "cPickle.c"
      case 28: // $bb26
        var $173=HEAP[_PyExc_ValueError]; //@line 4295 "cPickle.c"
        var $174=$code; //@line 4295 "cPickle.c"
        var $175=_PyErr_Format($173, __str96, $174); //@line 4295 "cPickle.c"
        $1=-1; //@line 4297 "cPickle.c"
        __label__ = 45; break; //@line 4297 "cPickle.c"
      case 29: // $bb27
        var $176=$self_addr; //@line 4300 "cPickle.c"
        var $177=$176+76; //@line 4300 "cPickle.c"
        var $178=HEAP[$177]; //@line 4300 "cPickle.c"
        var $179=$module_name; //@line 4300 "cPickle.c"
        var $180=$class_name; //@line 4300 "cPickle.c"
        var $181=_find_class($179, $180, $178); //@line 4300 "cPickle.c"
        $obj=$181; //@line 4300 "cPickle.c"
        var $182=$obj; //@line 4301 "cPickle.c"
        var $183=($182)==0; //@line 4301 "cPickle.c"
        if ($183) { __label__ = 30; break; } else { __label__ = 33; break; } //@line 4301 "cPickle.c"
      case 30: // $bb28
        var $184=$py_code; //@line 4302 "cPickle.c"
        var $185=$184; //@line 4302 "cPickle.c"
        var $186=HEAP[$185]; //@line 4302 "cPickle.c"
        var $187=($186) - 1; //@line 4302 "cPickle.c"
        var $188=$py_code; //@line 4302 "cPickle.c"
        var $189=$188; //@line 4302 "cPickle.c"
        HEAP[$189]=$187; //@line 4302 "cPickle.c"
        var $190=$py_code; //@line 4302 "cPickle.c"
        var $191=$190; //@line 4302 "cPickle.c"
        var $192=HEAP[$191]; //@line 4302 "cPickle.c"
        var $193=($192)==0; //@line 4302 "cPickle.c"
        if ($193) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4302 "cPickle.c"
      case 31: // $bb29
        var $194=$py_code; //@line 4302 "cPickle.c"
        var $195=$194+4; //@line 4302 "cPickle.c"
        var $196=HEAP[$195]; //@line 4302 "cPickle.c"
        var $197=$196+24; //@line 4302 "cPickle.c"
        var $198=HEAP[$197]; //@line 4302 "cPickle.c"
        var $199=$py_code; //@line 4302 "cPickle.c"
        FUNCTION_TABLE[$198]($199); //@line 4302 "cPickle.c"
        __label__ = 32; break; //@line 4302 "cPickle.c"
      case 32: // $bb30
        $1=-1; //@line 4303 "cPickle.c"
        __label__ = 45; break; //@line 4303 "cPickle.c"
      case 33: // $bb31
        var $200=HEAP[_extension_cache]; //@line 4306 "cPickle.c"
        var $201=$py_code; //@line 4306 "cPickle.c"
        var $202=$obj; //@line 4306 "cPickle.c"
        var $203=_PyDict_SetItem($200, $201, $202); //@line 4306 "cPickle.c"
        $code=$203; //@line 4306 "cPickle.c"
        var $204=$py_code; //@line 4307 "cPickle.c"
        var $205=$204; //@line 4307 "cPickle.c"
        var $206=HEAP[$205]; //@line 4307 "cPickle.c"
        var $207=($206) - 1; //@line 4307 "cPickle.c"
        var $208=$py_code; //@line 4307 "cPickle.c"
        var $209=$208; //@line 4307 "cPickle.c"
        HEAP[$209]=$207; //@line 4307 "cPickle.c"
        var $210=$py_code; //@line 4307 "cPickle.c"
        var $211=$210; //@line 4307 "cPickle.c"
        var $212=HEAP[$211]; //@line 4307 "cPickle.c"
        var $213=($212)==0; //@line 4307 "cPickle.c"
        if ($213) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4307 "cPickle.c"
      case 34: // $bb32
        var $214=$py_code; //@line 4307 "cPickle.c"
        var $215=$214+4; //@line 4307 "cPickle.c"
        var $216=HEAP[$215]; //@line 4307 "cPickle.c"
        var $217=$216+24; //@line 4307 "cPickle.c"
        var $218=HEAP[$217]; //@line 4307 "cPickle.c"
        var $219=$py_code; //@line 4307 "cPickle.c"
        FUNCTION_TABLE[$218]($219); //@line 4307 "cPickle.c"
        __label__ = 35; break; //@line 4307 "cPickle.c"
      case 35: // $bb33
        var $220=$code; //@line 4308 "cPickle.c"
        var $221=($220) < 0; //@line 4308 "cPickle.c"
        if ($221) { __label__ = 36; break; } else { __label__ = 39; break; } //@line 4308 "cPickle.c"
      case 36: // $bb34
        var $222=$obj; //@line 4309 "cPickle.c"
        var $223=$222; //@line 4309 "cPickle.c"
        var $224=HEAP[$223]; //@line 4309 "cPickle.c"
        var $225=($224) - 1; //@line 4309 "cPickle.c"
        var $226=$obj; //@line 4309 "cPickle.c"
        var $227=$226; //@line 4309 "cPickle.c"
        HEAP[$227]=$225; //@line 4309 "cPickle.c"
        var $228=$obj; //@line 4309 "cPickle.c"
        var $229=$228; //@line 4309 "cPickle.c"
        var $230=HEAP[$229]; //@line 4309 "cPickle.c"
        var $231=($230)==0; //@line 4309 "cPickle.c"
        if ($231) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 4309 "cPickle.c"
      case 37: // $bb35
        var $232=$obj; //@line 4309 "cPickle.c"
        var $233=$232+4; //@line 4309 "cPickle.c"
        var $234=HEAP[$233]; //@line 4309 "cPickle.c"
        var $235=$234+24; //@line 4309 "cPickle.c"
        var $236=HEAP[$235]; //@line 4309 "cPickle.c"
        var $237=$obj; //@line 4309 "cPickle.c"
        FUNCTION_TABLE[$236]($237); //@line 4309 "cPickle.c"
        __label__ = 38; break; //@line 4309 "cPickle.c"
      case 38: // $bb36
        $1=-1; //@line 4310 "cPickle.c"
        __label__ = 45; break; //@line 4310 "cPickle.c"
      case 39: // $bb37
        var $238=$self_addr; //@line 4312 "cPickle.c"
        var $239=$238+32; //@line 4312 "cPickle.c"
        var $240=HEAP[$239]; //@line 4312 "cPickle.c"
        var $241=$240+8; //@line 4312 "cPickle.c"
        var $242=HEAP[$241]; //@line 4312 "cPickle.c"
        var $243=$self_addr; //@line 4312 "cPickle.c"
        var $244=$243+32; //@line 4312 "cPickle.c"
        var $245=HEAP[$244]; //@line 4312 "cPickle.c"
        var $246=$245+12; //@line 4312 "cPickle.c"
        var $247=HEAP[$246]; //@line 4312 "cPickle.c"
        var $248=($242)==($247); //@line 4312 "cPickle.c"
        if ($248) { __label__ = 40; break; } else { __label__ = 44; break; } //@line 4312 "cPickle.c"
      case 40: // $bb38
        var $249=$self_addr; //@line 4312 "cPickle.c"
        var $250=$249+32; //@line 4312 "cPickle.c"
        var $251=HEAP[$250]; //@line 4312 "cPickle.c"
        var $252=_Pdata_grow($251); //@line 4312 "cPickle.c"
        var $253=($252) < 0; //@line 4312 "cPickle.c"
        if ($253) { __label__ = 41; break; } else { __label__ = 44; break; } //@line 4312 "cPickle.c"
      case 41: // $bb39
        var $254=$obj; //@line 4312 "cPickle.c"
        var $255=$254; //@line 4312 "cPickle.c"
        var $256=HEAP[$255]; //@line 4312 "cPickle.c"
        var $257=($256) - 1; //@line 4312 "cPickle.c"
        var $258=$obj; //@line 4312 "cPickle.c"
        var $259=$258; //@line 4312 "cPickle.c"
        HEAP[$259]=$257; //@line 4312 "cPickle.c"
        var $260=$obj; //@line 4312 "cPickle.c"
        var $261=$260; //@line 4312 "cPickle.c"
        var $262=HEAP[$261]; //@line 4312 "cPickle.c"
        var $263=($262)==0; //@line 4312 "cPickle.c"
        if ($263) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 4312 "cPickle.c"
      case 42: // $bb40
        var $264=$obj; //@line 4312 "cPickle.c"
        var $265=$264+4; //@line 4312 "cPickle.c"
        var $266=HEAP[$265]; //@line 4312 "cPickle.c"
        var $267=$266+24; //@line 4312 "cPickle.c"
        var $268=HEAP[$267]; //@line 4312 "cPickle.c"
        var $269=$obj; //@line 4312 "cPickle.c"
        FUNCTION_TABLE[$268]($269); //@line 4312 "cPickle.c"
        __label__ = 43; break; //@line 4312 "cPickle.c"
      case 43: // $bb41
        $1=-1; //@line 4312 "cPickle.c"
        __label__ = 45; break; //@line 4312 "cPickle.c"
      case 44: // $bb42
        var $270=$self_addr; //@line 4312 "cPickle.c"
        var $271=$270+32; //@line 4312 "cPickle.c"
        var $272=HEAP[$271]; //@line 4312 "cPickle.c"
        var $273=$272+16; //@line 4312 "cPickle.c"
        var $274=HEAP[$273]; //@line 4312 "cPickle.c"
        var $275=$self_addr; //@line 4312 "cPickle.c"
        var $276=$275+32; //@line 4312 "cPickle.c"
        var $277=HEAP[$276]; //@line 4312 "cPickle.c"
        var $278=$277+8; //@line 4312 "cPickle.c"
        var $279=HEAP[$278]; //@line 4312 "cPickle.c"
        var $280=$274+4*$279; //@line 4312 "cPickle.c"
        var $281=$obj; //@line 4312 "cPickle.c"
        HEAP[$280]=$281; //@line 4312 "cPickle.c"
        var $282=($279) + 1; //@line 4312 "cPickle.c"
        var $283=$277+8; //@line 4312 "cPickle.c"
        HEAP[$283]=$282; //@line 4312 "cPickle.c"
        $1=0; //@line 4313 "cPickle.c"
        __label__ = 45; break; //@line 4313 "cPickle.c"
      case 45: // $bb43
        var $284=$1; //@line 4261 "cPickle.c"
        $retval=$284; //@line 4261 "cPickle.c"
        var $retval44=$retval; //@line 4261 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval44; //@line 4261 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_put($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval_i1;
        var $0;
        var $retval_i;
        var $1;
        var $self_addr;
        var $retval;
        var $2;
        var $py_str;
        var $value;
        var $len;
        var $l;
        var $s=__stackBase__;
        $self_addr=$self;
        $py_str=0; //@line 4319 "cPickle.c"
        $value=0; //@line 4319 "cPickle.c"
        var $3=$self_addr; //@line 4323 "cPickle.c"
        var $4=$3+64; //@line 4323 "cPickle.c"
        var $5=HEAP[$4]; //@line 4323 "cPickle.c"
        var $6=$self_addr; //@line 4323 "cPickle.c"
        var $7=FUNCTION_TABLE[$5]($6, $s); //@line 4323 "cPickle.c"
        $l=$7; //@line 4323 "cPickle.c"
        var $8=$l; //@line 4323 "cPickle.c"
        var $9=($8) < 0; //@line 4323 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4323 "cPickle.c"
      case 1: // $bb
        $2=-1; //@line 4323 "cPickle.c"
        __label__ = 11; break; //@line 4323 "cPickle.c"
      case 2: // $bb1
        var $10=$l; //@line 4324 "cPickle.c"
        var $11=($10) <= 1; //@line 4324 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4324 "cPickle.c"
      case 3: // $bb2
        var $12=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($12, __str79); //@line 3339 "cPickle.c"
        $1=-1; //@line 3340 "cPickle.c"
        var $13=$1; //@line 3340 "cPickle.c"
        $retval_i=$13; //@line 3340 "cPickle.c"
        var $retval1_i=$retval_i; //@line 3340 "cPickle.c"
        $2=$retval1_i; //@line 4324 "cPickle.c"
        __label__ = 11; break; //@line 4324 "cPickle.c"
      case 4: // $bb3
        var $14=$self_addr; //@line 4325 "cPickle.c"
        var $15=$14+32; //@line 4325 "cPickle.c"
        var $16=HEAP[$15]; //@line 4325 "cPickle.c"
        var $17=$16+8; //@line 4325 "cPickle.c"
        var $18=HEAP[$17]; //@line 4325 "cPickle.c"
        $len=$18; //@line 4325 "cPickle.c"
        var $19=$len; //@line 4325 "cPickle.c"
        var $20=($19)==0; //@line 4325 "cPickle.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4325 "cPickle.c"
      case 5: // $bb4
        var $21=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
        _PyErr_SetString($21, __str2); //@line 188 "cPickle.c"
        $0=-1; //@line 189 "cPickle.c"
        var $22=$0; //@line 189 "cPickle.c"
        $retval_i1=$22; //@line 189 "cPickle.c"
        var $retval1_i2=$retval_i1; //@line 189 "cPickle.c"
        $2=$retval1_i2; //@line 4325 "cPickle.c"
        __label__ = 11; break; //@line 4325 "cPickle.c"
      case 6: // $bb5
        var $23=$l; //@line 4326 "cPickle.c"
        var $24=($23) - 1; //@line 4326 "cPickle.c"
        var $25=HEAP[$s]; //@line 4326 "cPickle.c"
        var $26=_PyString_FromStringAndSize($25, $24); //@line 4326 "cPickle.c"
        $py_str=$26; //@line 4326 "cPickle.c"
        var $27=$py_str; //@line 4326 "cPickle.c"
        var $28=($27)==0; //@line 4326 "cPickle.c"
        if ($28) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4326 "cPickle.c"
      case 7: // $bb6
        $2=-1; //@line 4326 "cPickle.c"
        __label__ = 11; break; //@line 4326 "cPickle.c"
      case 8: // $bb7
        var $29=$self_addr; //@line 4327 "cPickle.c"
        var $30=$29+32; //@line 4327 "cPickle.c"
        var $31=HEAP[$30]; //@line 4327 "cPickle.c"
        var $32=$31+16; //@line 4327 "cPickle.c"
        var $33=HEAP[$32]; //@line 4327 "cPickle.c"
        var $34=$len; //@line 4327 "cPickle.c"
        var $35=($34) - 1; //@line 4327 "cPickle.c"
        var $36=$33+4*$35; //@line 4327 "cPickle.c"
        var $37=HEAP[$36]; //@line 4327 "cPickle.c"
        $value=$37; //@line 4327 "cPickle.c"
        var $38=$self_addr; //@line 4328 "cPickle.c"
        var $39=$38+24; //@line 4328 "cPickle.c"
        var $40=HEAP[$39]; //@line 4328 "cPickle.c"
        var $41=$py_str; //@line 4328 "cPickle.c"
        var $42=$value; //@line 4328 "cPickle.c"
        var $43=_PyDict_SetItem($40, $41, $42); //@line 4328 "cPickle.c"
        $l=$43; //@line 4328 "cPickle.c"
        var $44=$py_str; //@line 4329 "cPickle.c"
        var $45=$44; //@line 4329 "cPickle.c"
        var $46=HEAP[$45]; //@line 4329 "cPickle.c"
        var $47=($46) - 1; //@line 4329 "cPickle.c"
        var $48=$py_str; //@line 4329 "cPickle.c"
        var $49=$48; //@line 4329 "cPickle.c"
        HEAP[$49]=$47; //@line 4329 "cPickle.c"
        var $50=$py_str; //@line 4329 "cPickle.c"
        var $51=$50; //@line 4329 "cPickle.c"
        var $52=HEAP[$51]; //@line 4329 "cPickle.c"
        var $53=($52)==0; //@line 4329 "cPickle.c"
        if ($53) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4329 "cPickle.c"
      case 9: // $bb8
        var $54=$py_str; //@line 4329 "cPickle.c"
        var $55=$54+4; //@line 4329 "cPickle.c"
        var $56=HEAP[$55]; //@line 4329 "cPickle.c"
        var $57=$56+24; //@line 4329 "cPickle.c"
        var $58=HEAP[$57]; //@line 4329 "cPickle.c"
        var $59=$py_str; //@line 4329 "cPickle.c"
        FUNCTION_TABLE[$58]($59); //@line 4329 "cPickle.c"
        __label__ = 10; break; //@line 4329 "cPickle.c"
      case 10: // $bb9
        var $60=$l; //@line 4330 "cPickle.c"
        $2=$60; //@line 4330 "cPickle.c"
        __label__ = 11; break; //@line 4330 "cPickle.c"
      case 11: // $bb10
        var $61=$2; //@line 4323 "cPickle.c"
        $retval=$61; //@line 4323 "cPickle.c"
        var $retval11=$retval; //@line 4323 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 4323 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binput($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval_i;
        var $0;
        var $self_addr;
        var $retval;
        var $1;
        var $py_key;
        var $value;
        var $key;
        var $s=__stackBase__;
        var $len;
        $self_addr=$self;
        $py_key=0; //@line 4337 "cPickle.c"
        $value=0; //@line 4337 "cPickle.c"
        var $2=$self_addr; //@line 4342 "cPickle.c"
        var $3=$2+60; //@line 4342 "cPickle.c"
        var $4=HEAP[$3]; //@line 4342 "cPickle.c"
        var $5=$self_addr; //@line 4342 "cPickle.c"
        var $6=FUNCTION_TABLE[$4]($5, $s, 1); //@line 4342 "cPickle.c"
        var $7=($6) < 0; //@line 4342 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4342 "cPickle.c"
      case 1: // $bb
        $1=-1; //@line 4342 "cPickle.c"
        __label__ = 9; break; //@line 4342 "cPickle.c"
      case 2: // $bb1
        var $8=$self_addr; //@line 4343 "cPickle.c"
        var $9=$8+32; //@line 4343 "cPickle.c"
        var $10=HEAP[$9]; //@line 4343 "cPickle.c"
        var $11=$10+8; //@line 4343 "cPickle.c"
        var $12=HEAP[$11]; //@line 4343 "cPickle.c"
        $len=$12; //@line 4343 "cPickle.c"
        var $13=$len; //@line 4343 "cPickle.c"
        var $14=($13) <= 0; //@line 4343 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4343 "cPickle.c"
      case 3: // $bb2
        var $15=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
        _PyErr_SetString($15, __str2); //@line 188 "cPickle.c"
        $0=-1; //@line 189 "cPickle.c"
        var $16=$0; //@line 189 "cPickle.c"
        $retval_i=$16; //@line 189 "cPickle.c"
        var $retval1_i=$retval_i; //@line 189 "cPickle.c"
        $1=$retval1_i; //@line 4343 "cPickle.c"
        __label__ = 9; break; //@line 4343 "cPickle.c"
      case 4: // $bb3
        var $17=HEAP[$s]; //@line 4345 "cPickle.c"
        var $18=$17; //@line 4345 "cPickle.c"
        var $19=HEAP[$18]; //@line 4345 "cPickle.c"
        $key=$19; //@line 4345 "cPickle.c"
        var $20=$key; //@line 4347 "cPickle.c"
        var $21=($20); //@line 4347 "cPickle.c"
        var $22=_PyInt_FromLong($21); //@line 4347 "cPickle.c"
        $py_key=$22; //@line 4347 "cPickle.c"
        var $23=$py_key; //@line 4347 "cPickle.c"
        var $24=($23)==0; //@line 4347 "cPickle.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4347 "cPickle.c"
      case 5: // $bb4
        $1=-1; //@line 4347 "cPickle.c"
        __label__ = 9; break; //@line 4347 "cPickle.c"
      case 6: // $bb5
        var $25=$self_addr; //@line 4348 "cPickle.c"
        var $26=$25+32; //@line 4348 "cPickle.c"
        var $27=HEAP[$26]; //@line 4348 "cPickle.c"
        var $28=$27+16; //@line 4348 "cPickle.c"
        var $29=HEAP[$28]; //@line 4348 "cPickle.c"
        var $30=$len; //@line 4348 "cPickle.c"
        var $31=($30) - 1; //@line 4348 "cPickle.c"
        var $32=$29+4*$31; //@line 4348 "cPickle.c"
        var $33=HEAP[$32]; //@line 4348 "cPickle.c"
        $value=$33; //@line 4348 "cPickle.c"
        var $34=$self_addr; //@line 4349 "cPickle.c"
        var $35=$34+24; //@line 4349 "cPickle.c"
        var $36=HEAP[$35]; //@line 4349 "cPickle.c"
        var $37=$py_key; //@line 4349 "cPickle.c"
        var $38=$value; //@line 4349 "cPickle.c"
        var $39=_PyDict_SetItem($36, $37, $38); //@line 4349 "cPickle.c"
        $len=$39; //@line 4349 "cPickle.c"
        var $40=$py_key; //@line 4350 "cPickle.c"
        var $41=$40; //@line 4350 "cPickle.c"
        var $42=HEAP[$41]; //@line 4350 "cPickle.c"
        var $43=($42) - 1; //@line 4350 "cPickle.c"
        var $44=$py_key; //@line 4350 "cPickle.c"
        var $45=$44; //@line 4350 "cPickle.c"
        HEAP[$45]=$43; //@line 4350 "cPickle.c"
        var $46=$py_key; //@line 4350 "cPickle.c"
        var $47=$46; //@line 4350 "cPickle.c"
        var $48=HEAP[$47]; //@line 4350 "cPickle.c"
        var $49=($48)==0; //@line 4350 "cPickle.c"
        if ($49) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4350 "cPickle.c"
      case 7: // $bb6
        var $50=$py_key; //@line 4350 "cPickle.c"
        var $51=$50+4; //@line 4350 "cPickle.c"
        var $52=HEAP[$51]; //@line 4350 "cPickle.c"
        var $53=$52+24; //@line 4350 "cPickle.c"
        var $54=HEAP[$53]; //@line 4350 "cPickle.c"
        var $55=$py_key; //@line 4350 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 4350 "cPickle.c"
        __label__ = 8; break; //@line 4350 "cPickle.c"
      case 8: // $bb7
        var $56=$len; //@line 4351 "cPickle.c"
        $1=$56; //@line 4351 "cPickle.c"
        __label__ = 9; break; //@line 4351 "cPickle.c"
      case 9: // $bb8
        var $57=$1; //@line 4342 "cPickle.c"
        $retval=$57; //@line 4342 "cPickle.c"
        var $retval9=$retval; //@line 4342 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 4342 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_long_binput($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval_i;
        var $0;
        var $self_addr;
        var $retval;
        var $1;
        var $py_key;
        var $value;
        var $key;
        var $c;
        var $s=__stackBase__;
        var $len;
        $self_addr=$self;
        $py_key=0; //@line 4358 "cPickle.c"
        $value=0; //@line 4358 "cPickle.c"
        var $2=$self_addr; //@line 4364 "cPickle.c"
        var $3=$2+60; //@line 4364 "cPickle.c"
        var $4=HEAP[$3]; //@line 4364 "cPickle.c"
        var $5=$self_addr; //@line 4364 "cPickle.c"
        var $6=FUNCTION_TABLE[$4]($5, $s, 4); //@line 4364 "cPickle.c"
        var $7=($6) < 0; //@line 4364 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4364 "cPickle.c"
      case 1: // $bb
        $1=-1; //@line 4364 "cPickle.c"
        __label__ = 9; break; //@line 4364 "cPickle.c"
      case 2: // $bb1
        var $8=$self_addr; //@line 4365 "cPickle.c"
        var $9=$8+32; //@line 4365 "cPickle.c"
        var $10=HEAP[$9]; //@line 4365 "cPickle.c"
        var $11=$10+8; //@line 4365 "cPickle.c"
        var $12=HEAP[$11]; //@line 4365 "cPickle.c"
        $len=$12; //@line 4365 "cPickle.c"
        var $13=$len; //@line 4365 "cPickle.c"
        var $14=($13)==0; //@line 4365 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4365 "cPickle.c"
      case 3: // $bb2
        var $15=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
        _PyErr_SetString($15, __str2); //@line 188 "cPickle.c"
        $0=-1; //@line 189 "cPickle.c"
        var $16=$0; //@line 189 "cPickle.c"
        $retval_i=$16; //@line 189 "cPickle.c"
        var $retval1_i=$retval_i; //@line 189 "cPickle.c"
        $1=$retval1_i; //@line 4365 "cPickle.c"
        __label__ = 9; break; //@line 4365 "cPickle.c"
      case 4: // $bb3
        var $17=HEAP[$s]; //@line 4367 "cPickle.c"
        var $18=$17; //@line 4367 "cPickle.c"
        var $19=HEAP[$18]; //@line 4367 "cPickle.c"
        $c=$19; //@line 4367 "cPickle.c"
        var $20=$c; //@line 4368 "cPickle.c"
        var $21=($20); //@line 4368 "cPickle.c"
        $key=$21; //@line 4368 "cPickle.c"
        var $22=HEAP[$s]; //@line 4369 "cPickle.c"
        var $23=$22+1; //@line 4369 "cPickle.c"
        var $24=HEAP[$23]; //@line 4369 "cPickle.c"
        $c=$24; //@line 4369 "cPickle.c"
        var $25=$c; //@line 4370 "cPickle.c"
        var $26=($25); //@line 4370 "cPickle.c"
        var $27=($26) << 8; //@line 4370 "cPickle.c"
        var $28=$key; //@line 4370 "cPickle.c"
        var $29=($27) | ($28); //@line 4370 "cPickle.c"
        $key=$29; //@line 4370 "cPickle.c"
        var $30=HEAP[$s]; //@line 4371 "cPickle.c"
        var $31=$30+2; //@line 4371 "cPickle.c"
        var $32=HEAP[$31]; //@line 4371 "cPickle.c"
        $c=$32; //@line 4371 "cPickle.c"
        var $33=$c; //@line 4372 "cPickle.c"
        var $34=($33); //@line 4372 "cPickle.c"
        var $35=($34) << 16; //@line 4372 "cPickle.c"
        var $36=$key; //@line 4372 "cPickle.c"
        var $37=($35) | ($36); //@line 4372 "cPickle.c"
        $key=$37; //@line 4372 "cPickle.c"
        var $38=HEAP[$s]; //@line 4373 "cPickle.c"
        var $39=$38+3; //@line 4373 "cPickle.c"
        var $40=HEAP[$39]; //@line 4373 "cPickle.c"
        $c=$40; //@line 4373 "cPickle.c"
        var $41=$c; //@line 4374 "cPickle.c"
        var $42=($41); //@line 4374 "cPickle.c"
        var $43=($42) << 24; //@line 4374 "cPickle.c"
        var $44=$key; //@line 4374 "cPickle.c"
        var $45=($43) | ($44); //@line 4374 "cPickle.c"
        $key=$45; //@line 4374 "cPickle.c"
        var $46=$key; //@line 4376 "cPickle.c"
        var $47=_PyInt_FromLong($46); //@line 4376 "cPickle.c"
        $py_key=$47; //@line 4376 "cPickle.c"
        var $48=$py_key; //@line 4376 "cPickle.c"
        var $49=($48)==0; //@line 4376 "cPickle.c"
        if ($49) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4376 "cPickle.c"
      case 5: // $bb4
        $1=-1; //@line 4376 "cPickle.c"
        __label__ = 9; break; //@line 4376 "cPickle.c"
      case 6: // $bb5
        var $50=$self_addr; //@line 4377 "cPickle.c"
        var $51=$50+32; //@line 4377 "cPickle.c"
        var $52=HEAP[$51]; //@line 4377 "cPickle.c"
        var $53=$52+16; //@line 4377 "cPickle.c"
        var $54=HEAP[$53]; //@line 4377 "cPickle.c"
        var $55=$len; //@line 4377 "cPickle.c"
        var $56=($55) - 1; //@line 4377 "cPickle.c"
        var $57=$54+4*$56; //@line 4377 "cPickle.c"
        var $58=HEAP[$57]; //@line 4377 "cPickle.c"
        $value=$58; //@line 4377 "cPickle.c"
        var $59=$self_addr; //@line 4378 "cPickle.c"
        var $60=$59+24; //@line 4378 "cPickle.c"
        var $61=HEAP[$60]; //@line 4378 "cPickle.c"
        var $62=$py_key; //@line 4378 "cPickle.c"
        var $63=$value; //@line 4378 "cPickle.c"
        var $64=_PyDict_SetItem($61, $62, $63); //@line 4378 "cPickle.c"
        $len=$64; //@line 4378 "cPickle.c"
        var $65=$py_key; //@line 4379 "cPickle.c"
        var $66=$65; //@line 4379 "cPickle.c"
        var $67=HEAP[$66]; //@line 4379 "cPickle.c"
        var $68=($67) - 1; //@line 4379 "cPickle.c"
        var $69=$py_key; //@line 4379 "cPickle.c"
        var $70=$69; //@line 4379 "cPickle.c"
        HEAP[$70]=$68; //@line 4379 "cPickle.c"
        var $71=$py_key; //@line 4379 "cPickle.c"
        var $72=$71; //@line 4379 "cPickle.c"
        var $73=HEAP[$72]; //@line 4379 "cPickle.c"
        var $74=($73)==0; //@line 4379 "cPickle.c"
        if ($74) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4379 "cPickle.c"
      case 7: // $bb6
        var $75=$py_key; //@line 4379 "cPickle.c"
        var $76=$75+4; //@line 4379 "cPickle.c"
        var $77=HEAP[$76]; //@line 4379 "cPickle.c"
        var $78=$77+24; //@line 4379 "cPickle.c"
        var $79=HEAP[$78]; //@line 4379 "cPickle.c"
        var $80=$py_key; //@line 4379 "cPickle.c"
        FUNCTION_TABLE[$79]($80); //@line 4379 "cPickle.c"
        __label__ = 8; break; //@line 4379 "cPickle.c"
      case 8: // $bb7
        var $81=$len; //@line 4380 "cPickle.c"
        $1=$81; //@line 4380 "cPickle.c"
        __label__ = 9; break; //@line 4380 "cPickle.c"
      case 9: // $bb8
        var $82=$1; //@line 4364 "cPickle.c"
        $retval=$82; //@line 4364 "cPickle.c"
        var $retval9=$retval; //@line 4364 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 4364 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _do_append($self, $x) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval_i;
        var $0;
        var $self_addr;
        var $x_addr;
        var $retval;
        var $1;
        var $value;
        var $list;
        var $append_method;
        var $len;
        var $i;
        var $slice;
        var $list_len;
        var $junk;
        $self_addr=$self;
        $x_addr=$x;
        $value=0; //@line 4387 "cPickle.c"
        $list=0; //@line 4387 "cPickle.c"
        $append_method=0; //@line 4387 "cPickle.c"
        var $2=$self_addr; //@line 4390 "cPickle.c"
        var $3=$2+32; //@line 4390 "cPickle.c"
        var $4=HEAP[$3]; //@line 4390 "cPickle.c"
        var $5=$4+8; //@line 4390 "cPickle.c"
        var $6=HEAP[$5]; //@line 4390 "cPickle.c"
        $len=$6; //@line 4390 "cPickle.c"
        var $7=$len; //@line 4391 "cPickle.c"
        var $8=$x_addr; //@line 4391 "cPickle.c"
        var $9=($7) < ($8); //@line 4391 "cPickle.c"
        var $10=$x_addr; //@line 4391 "cPickle.c"
        var $11=($10) <= 0; //@line 4391 "cPickle.c"
        var $or_cond=($9) | ($11);
        if ($or_cond) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4391 "cPickle.c"
      case 1: // $bb1
        var $12=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
        _PyErr_SetString($12, __str2); //@line 188 "cPickle.c"
        $0=-1; //@line 189 "cPickle.c"
        var $13=$0; //@line 189 "cPickle.c"
        $retval_i=$13; //@line 189 "cPickle.c"
        var $retval1_i=$retval_i; //@line 189 "cPickle.c"
        $1=$retval1_i; //@line 4391 "cPickle.c"
        __label__ = 37; break; //@line 4391 "cPickle.c"
      case 2: // $bb2
        var $14=$len; //@line 4393 "cPickle.c"
        var $15=$x_addr; //@line 4393 "cPickle.c"
        var $16=($14)==($15); //@line 4393 "cPickle.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4393 "cPickle.c"
      case 3: // $bb3
        $1=0; //@line 4393 "cPickle.c"
        __label__ = 37; break; //@line 4393 "cPickle.c"
      case 4: // $bb4
        var $17=$self_addr; //@line 4395 "cPickle.c"
        var $18=$17+32; //@line 4395 "cPickle.c"
        var $19=HEAP[$18]; //@line 4395 "cPickle.c"
        var $20=$19+16; //@line 4395 "cPickle.c"
        var $21=HEAP[$20]; //@line 4395 "cPickle.c"
        var $22=$x_addr; //@line 4395 "cPickle.c"
        var $23=($22) - 1; //@line 4395 "cPickle.c"
        var $24=$21+4*$23; //@line 4395 "cPickle.c"
        var $25=HEAP[$24]; //@line 4395 "cPickle.c"
        $list=$25; //@line 4395 "cPickle.c"
        var $26=$list; //@line 4397 "cPickle.c"
        var $27=$26+4; //@line 4397 "cPickle.c"
        var $28=HEAP[$27]; //@line 4397 "cPickle.c"
        var $29=$28+84; //@line 4397 "cPickle.c"
        var $30=HEAP[$29]; //@line 4397 "cPickle.c"
        var $31=($30) & 33554432; //@line 4397 "cPickle.c"
        var $32=($31)!=0; //@line 4397 "cPickle.c"
        if ($32) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 4397 "cPickle.c"
      case 5: // $bb5
        var $33=$self_addr; //@line 4401 "cPickle.c"
        var $34=$33+32; //@line 4401 "cPickle.c"
        var $35=HEAP[$34]; //@line 4401 "cPickle.c"
        var $36=$x_addr; //@line 4401 "cPickle.c"
        var $37=_Pdata_popList($35, $36); //@line 4401 "cPickle.c"
        $slice=$37; //@line 4401 "cPickle.c"
        var $38=$slice; //@line 4402 "cPickle.c"
        var $39=($38)==0; //@line 4402 "cPickle.c"
        if ($39) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4402 "cPickle.c"
      case 6: // $bb6
        $1=-1; //@line 4402 "cPickle.c"
        __label__ = 37; break; //@line 4402 "cPickle.c"
      case 7: // $bb7
        var $40=$list; //@line 4403 "cPickle.c"
        var $41=$40; //@line 4403 "cPickle.c"
        var $42=$41+8; //@line 4403 "cPickle.c"
        var $43=HEAP[$42]; //@line 4403 "cPickle.c"
        $list_len=$43; //@line 4403 "cPickle.c"
        var $44=$list; //@line 4404 "cPickle.c"
        var $45=$list_len; //@line 4404 "cPickle.c"
        var $46=$list_len; //@line 4404 "cPickle.c"
        var $47=$slice; //@line 4404 "cPickle.c"
        var $48=_PyList_SetSlice($44, $45, $46, $47); //@line 4404 "cPickle.c"
        $i=$48; //@line 4404 "cPickle.c"
        var $49=$slice; //@line 4405 "cPickle.c"
        var $50=$49; //@line 4405 "cPickle.c"
        var $51=HEAP[$50]; //@line 4405 "cPickle.c"
        var $52=($51) - 1; //@line 4405 "cPickle.c"
        var $53=$slice; //@line 4405 "cPickle.c"
        var $54=$53; //@line 4405 "cPickle.c"
        HEAP[$54]=$52; //@line 4405 "cPickle.c"
        var $55=$slice; //@line 4405 "cPickle.c"
        var $56=$55; //@line 4405 "cPickle.c"
        var $57=HEAP[$56]; //@line 4405 "cPickle.c"
        var $58=($57)==0; //@line 4405 "cPickle.c"
        if ($58) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4405 "cPickle.c"
      case 8: // $bb8
        var $59=$slice; //@line 4405 "cPickle.c"
        var $60=$59+4; //@line 4405 "cPickle.c"
        var $61=HEAP[$60]; //@line 4405 "cPickle.c"
        var $62=$61+24; //@line 4405 "cPickle.c"
        var $63=HEAP[$62]; //@line 4405 "cPickle.c"
        var $64=$slice; //@line 4405 "cPickle.c"
        FUNCTION_TABLE[$63]($64); //@line 4405 "cPickle.c"
        __label__ = 9; break; //@line 4405 "cPickle.c"
      case 9: // $bb9
        var $65=$i; //@line 4406 "cPickle.c"
        $1=$65; //@line 4406 "cPickle.c"
        __label__ = 37; break; //@line 4406 "cPickle.c"
      case 10: // $bb10
        var $66=HEAP[_append_str]; //@line 4410 "cPickle.c"
        var $67=$list; //@line 4410 "cPickle.c"
        var $68=_PyObject_GetAttr($67, $66); //@line 4410 "cPickle.c"
        $append_method=$68; //@line 4410 "cPickle.c"
        var $69=$append_method; //@line 4410 "cPickle.c"
        var $70=($69)==0; //@line 4410 "cPickle.c"
        if ($70) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4410 "cPickle.c"
      case 11: // $bb11
        $1=-1; //@line 4411 "cPickle.c"
        __label__ = 37; break; //@line 4411 "cPickle.c"
      case 12: // $bb12
        var $71=$x_addr; //@line 4413 "cPickle.c"
        $i=$71; //@line 4413 "cPickle.c"
        __label__ = 33; break; //@line 4413 "cPickle.c"
      case 13: // $bb13
        var $72=$240+16; //@line 4416 "cPickle.c"
        var $73=HEAP[$72]; //@line 4416 "cPickle.c"
        var $74=$i; //@line 4416 "cPickle.c"
        var $75=$73+4*$74; //@line 4416 "cPickle.c"
        var $76=HEAP[$75]; //@line 4416 "cPickle.c"
        $value=$76; //@line 4416 "cPickle.c"
        $junk=0; //@line 4417 "cPickle.c"
        var $77=$self_addr; //@line 4418 "cPickle.c"
        var $78=$77+28; //@line 4418 "cPickle.c"
        var $79=HEAP[$78]; //@line 4418 "cPickle.c"
        var $80=($79)!=0; //@line 4418 "cPickle.c"
        if ($80) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 4418 "cPickle.c"
      case 14: // $bb14
        var $81=_PyTuple_New(1); //@line 4418 "cPickle.c"
        var $82=$self_addr; //@line 4418 "cPickle.c"
        var $83=$82+28; //@line 4418 "cPickle.c"
        HEAP[$83]=$81; //@line 4418 "cPickle.c"
        var $84=$self_addr; //@line 4418 "cPickle.c"
        var $85=$84+28; //@line 4418 "cPickle.c"
        var $86=HEAP[$85]; //@line 4418 "cPickle.c"
        var $87=($86)!=0; //@line 4418 "cPickle.c"
        if ($87) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 4418 "cPickle.c"
      case 15: // $bb15
        var $88=$self_addr; //@line 4418 "cPickle.c"
        var $89=$88+28; //@line 4418 "cPickle.c"
        var $90=HEAP[$89]; //@line 4418 "cPickle.c"
        var $91=$90; //@line 4418 "cPickle.c"
        var $92=$91+12; //@line 4418 "cPickle.c"
        var $93=$92; //@line 4418 "cPickle.c"
        var $94=HEAP[$93]; //@line 4418 "cPickle.c"
        var $95=($94)!=0; //@line 4418 "cPickle.c"
        if ($95) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 4418 "cPickle.c"
      case 16: // $bb16
        var $96=$self_addr; //@line 4418 "cPickle.c"
        var $97=$96+28; //@line 4418 "cPickle.c"
        var $98=HEAP[$97]; //@line 4418 "cPickle.c"
        var $99=$98; //@line 4418 "cPickle.c"
        var $100=$99+12; //@line 4418 "cPickle.c"
        var $101=$100; //@line 4418 "cPickle.c"
        var $102=HEAP[$101]; //@line 4418 "cPickle.c"
        var $103=$102; //@line 4418 "cPickle.c"
        var $104=HEAP[$103]; //@line 4418 "cPickle.c"
        var $105=($104) - 1; //@line 4418 "cPickle.c"
        var $106=$102; //@line 4418 "cPickle.c"
        HEAP[$106]=$105; //@line 4418 "cPickle.c"
        var $107=$102; //@line 4418 "cPickle.c"
        var $108=HEAP[$107]; //@line 4418 "cPickle.c"
        var $109=($108)==0; //@line 4418 "cPickle.c"
        if ($109) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4418 "cPickle.c"
      case 17: // $bb17
        var $110=$self_addr; //@line 4418 "cPickle.c"
        var $111=$110+28; //@line 4418 "cPickle.c"
        var $112=HEAP[$111]; //@line 4418 "cPickle.c"
        var $113=$112; //@line 4418 "cPickle.c"
        var $114=$113+12; //@line 4418 "cPickle.c"
        var $115=$114; //@line 4418 "cPickle.c"
        var $116=HEAP[$115]; //@line 4418 "cPickle.c"
        var $117=$116+4; //@line 4418 "cPickle.c"
        var $118=HEAP[$117]; //@line 4418 "cPickle.c"
        var $119=$118+24; //@line 4418 "cPickle.c"
        var $120=HEAP[$119]; //@line 4418 "cPickle.c"
        var $121=$self_addr; //@line 4418 "cPickle.c"
        var $122=$121+28; //@line 4418 "cPickle.c"
        var $123=HEAP[$122]; //@line 4418 "cPickle.c"
        var $124=$123; //@line 4418 "cPickle.c"
        var $125=$124+12; //@line 4418 "cPickle.c"
        var $126=$125; //@line 4418 "cPickle.c"
        var $127=HEAP[$126]; //@line 4418 "cPickle.c"
        FUNCTION_TABLE[$120]($127); //@line 4418 "cPickle.c"
        __label__ = 18; break; //@line 4418 "cPickle.c"
      case 18: // $bb18
        var $128=$self_addr; //@line 4418 "cPickle.c"
        var $129=$128+28; //@line 4418 "cPickle.c"
        var $130=HEAP[$129]; //@line 4418 "cPickle.c"
        var $131=$130; //@line 4418 "cPickle.c"
        var $132=$131+12; //@line 4418 "cPickle.c"
        var $133=$132; //@line 4418 "cPickle.c"
        var $134=$value; //@line 4418 "cPickle.c"
        HEAP[$133]=$134; //@line 4418 "cPickle.c"
        __label__ = 21; break; //@line 4418 "cPickle.c"
      case 19: // $bb19
        var $135=$value; //@line 4418 "cPickle.c"
        var $136=$135; //@line 4418 "cPickle.c"
        var $137=HEAP[$136]; //@line 4418 "cPickle.c"
        var $138=($137) - 1; //@line 4418 "cPickle.c"
        var $139=$value; //@line 4418 "cPickle.c"
        var $140=$139; //@line 4418 "cPickle.c"
        HEAP[$140]=$138; //@line 4418 "cPickle.c"
        var $141=$value; //@line 4418 "cPickle.c"
        var $142=$141; //@line 4418 "cPickle.c"
        var $143=HEAP[$142]; //@line 4418 "cPickle.c"
        var $144=($143)==0; //@line 4418 "cPickle.c"
        if ($144) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4418 "cPickle.c"
      case 20: // $bb20
        var $145=$value; //@line 4418 "cPickle.c"
        var $146=$145+4; //@line 4418 "cPickle.c"
        var $147=HEAP[$146]; //@line 4418 "cPickle.c"
        var $148=$147+24; //@line 4418 "cPickle.c"
        var $149=HEAP[$148]; //@line 4418 "cPickle.c"
        var $150=$value; //@line 4418 "cPickle.c"
        FUNCTION_TABLE[$149]($150); //@line 4418 "cPickle.c"
        __label__ = 21; break; //@line 4418 "cPickle.c"
      case 21: // $bb21
        var $151=$self_addr; //@line 4419 "cPickle.c"
        var $152=$151+28; //@line 4419 "cPickle.c"
        var $153=HEAP[$152]; //@line 4419 "cPickle.c"
        var $154=($153)!=0; //@line 4419 "cPickle.c"
        if ($154) { __label__ = 22; break; } else { __label__ = 26; break; } //@line 4419 "cPickle.c"
      case 22: // $bb22
        var $155=$self_addr; //@line 4420 "cPickle.c"
        var $156=$155+28; //@line 4420 "cPickle.c"
        var $157=HEAP[$156]; //@line 4420 "cPickle.c"
        var $158=$append_method; //@line 4420 "cPickle.c"
        var $159=_PyObject_Call($158, $157, 0); //@line 4420 "cPickle.c"
        $junk=$159; //@line 4420 "cPickle.c"
        var $160=$self_addr; //@line 4422 "cPickle.c"
        var $161=$160+28; //@line 4422 "cPickle.c"
        var $162=HEAP[$161]; //@line 4422 "cPickle.c"
        var $163=$162; //@line 4422 "cPickle.c"
        var $164=HEAP[$163]; //@line 4422 "cPickle.c"
        var $165=($164) > 1; //@line 4422 "cPickle.c"
        if ($165) { __label__ = 23; break; } else { __label__ = 26; break; } //@line 4422 "cPickle.c"
      case 23: // $bb23
        var $166=$self_addr; //@line 4422 "cPickle.c"
        var $167=$166+28; //@line 4422 "cPickle.c"
        var $168=HEAP[$167]; //@line 4422 "cPickle.c"
        var $169=$168; //@line 4422 "cPickle.c"
        var $170=HEAP[$169]; //@line 4422 "cPickle.c"
        var $171=($170) - 1; //@line 4422 "cPickle.c"
        var $172=$168; //@line 4422 "cPickle.c"
        HEAP[$172]=$171; //@line 4422 "cPickle.c"
        var $173=$168; //@line 4422 "cPickle.c"
        var $174=HEAP[$173]; //@line 4422 "cPickle.c"
        var $175=($174)==0; //@line 4422 "cPickle.c"
        if ($175) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4422 "cPickle.c"
      case 24: // $bb24
        var $176=$self_addr; //@line 4422 "cPickle.c"
        var $177=$176+28; //@line 4422 "cPickle.c"
        var $178=HEAP[$177]; //@line 4422 "cPickle.c"
        var $179=$178+4; //@line 4422 "cPickle.c"
        var $180=HEAP[$179]; //@line 4422 "cPickle.c"
        var $181=$180+24; //@line 4422 "cPickle.c"
        var $182=HEAP[$181]; //@line 4422 "cPickle.c"
        var $183=$self_addr; //@line 4422 "cPickle.c"
        var $184=$183+28; //@line 4422 "cPickle.c"
        var $185=HEAP[$184]; //@line 4422 "cPickle.c"
        FUNCTION_TABLE[$182]($185); //@line 4422 "cPickle.c"
        __label__ = 25; break; //@line 4422 "cPickle.c"
      case 25: // $bb25
        var $186=$self_addr; //@line 4422 "cPickle.c"
        var $187=$186+28; //@line 4422 "cPickle.c"
        HEAP[$187]=0; //@line 4422 "cPickle.c"
        __label__ = 26; break; //@line 4422 "cPickle.c"
      case 26: // $bb26
        var $188=$junk; //@line 4424 "cPickle.c"
        var $189=($188)==0; //@line 4424 "cPickle.c"
        if ($189) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 4424 "cPickle.c"
      case 27: // $bb27
        var $190=$i; //@line 4425 "cPickle.c"
        var $191=($190) + 1; //@line 4425 "cPickle.c"
        var $192=$self_addr; //@line 4425 "cPickle.c"
        var $193=$192+32; //@line 4425 "cPickle.c"
        var $194=HEAP[$193]; //@line 4425 "cPickle.c"
        var $195=_Pdata_clear($194, $191); //@line 4425 "cPickle.c"
        var $196=$self_addr; //@line 4426 "cPickle.c"
        var $197=$196+32; //@line 4426 "cPickle.c"
        var $198=HEAP[$197]; //@line 4426 "cPickle.c"
        var $199=$198+8; //@line 4426 "cPickle.c"
        var $200=$x_addr; //@line 4426 "cPickle.c"
        HEAP[$199]=$200; //@line 4426 "cPickle.c"
        var $201=$append_method; //@line 4427 "cPickle.c"
        var $202=$201; //@line 4427 "cPickle.c"
        var $203=HEAP[$202]; //@line 4427 "cPickle.c"
        var $204=($203) - 1; //@line 4427 "cPickle.c"
        var $205=$append_method; //@line 4427 "cPickle.c"
        var $206=$205; //@line 4427 "cPickle.c"
        HEAP[$206]=$204; //@line 4427 "cPickle.c"
        var $207=$append_method; //@line 4427 "cPickle.c"
        var $208=$207; //@line 4427 "cPickle.c"
        var $209=HEAP[$208]; //@line 4427 "cPickle.c"
        var $210=($209)==0; //@line 4427 "cPickle.c"
        if ($210) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 4427 "cPickle.c"
      case 28: // $bb28
        var $211=$append_method; //@line 4427 "cPickle.c"
        var $212=$211+4; //@line 4427 "cPickle.c"
        var $213=HEAP[$212]; //@line 4427 "cPickle.c"
        var $214=$213+24; //@line 4427 "cPickle.c"
        var $215=HEAP[$214]; //@line 4427 "cPickle.c"
        var $216=$append_method; //@line 4427 "cPickle.c"
        FUNCTION_TABLE[$215]($216); //@line 4427 "cPickle.c"
        __label__ = 29; break; //@line 4427 "cPickle.c"
      case 29: // $bb29
        $1=-1; //@line 4428 "cPickle.c"
        __label__ = 37; break; //@line 4428 "cPickle.c"
      case 30: // $bb30
        var $217=$junk; //@line 4430 "cPickle.c"
        var $218=$217; //@line 4430 "cPickle.c"
        var $219=HEAP[$218]; //@line 4430 "cPickle.c"
        var $220=($219) - 1; //@line 4430 "cPickle.c"
        var $221=$junk; //@line 4430 "cPickle.c"
        var $222=$221; //@line 4430 "cPickle.c"
        HEAP[$222]=$220; //@line 4430 "cPickle.c"
        var $223=$junk; //@line 4430 "cPickle.c"
        var $224=$223; //@line 4430 "cPickle.c"
        var $225=HEAP[$224]; //@line 4430 "cPickle.c"
        var $226=($225)==0; //@line 4430 "cPickle.c"
        if ($226) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4430 "cPickle.c"
      case 31: // $bb31
        var $227=$junk; //@line 4430 "cPickle.c"
        var $228=$227+4; //@line 4430 "cPickle.c"
        var $229=HEAP[$228]; //@line 4430 "cPickle.c"
        var $230=$229+24; //@line 4430 "cPickle.c"
        var $231=HEAP[$230]; //@line 4430 "cPickle.c"
        var $232=$junk; //@line 4430 "cPickle.c"
        FUNCTION_TABLE[$231]($232); //@line 4430 "cPickle.c"
        __label__ = 32; break; //@line 4430 "cPickle.c"
      case 32: // $bb32
        var $233=$i; //@line 4413 "cPickle.c"
        var $234=($233) + 1; //@line 4413 "cPickle.c"
        $i=$234; //@line 4413 "cPickle.c"
        __label__ = 33; break; //@line 4413 "cPickle.c"
      case 33: // $bb33
        var $235=$i; //@line 4413 "cPickle.c"
        var $236=$len; //@line 4413 "cPickle.c"
        var $237=($235) < ($236); //@line 4413 "cPickle.c"
        var $238=$self_addr; //@line 4416 "cPickle.c"
        var $239=$238+32; //@line 4416 "cPickle.c"
        var $240=HEAP[$239]; //@line 4416 "cPickle.c"
        if ($237) { __label__ = 13; break; } else { __label__ = 34; break; } //@line 4413 "cPickle.c"
      case 34: // $bb34
        var $241=$240+8; //@line 4432 "cPickle.c"
        var $242=$x_addr; //@line 4432 "cPickle.c"
        HEAP[$241]=$242; //@line 4432 "cPickle.c"
        var $243=$append_method; //@line 4433 "cPickle.c"
        var $244=$243; //@line 4433 "cPickle.c"
        var $245=HEAP[$244]; //@line 4433 "cPickle.c"
        var $246=($245) - 1; //@line 4433 "cPickle.c"
        var $247=$append_method; //@line 4433 "cPickle.c"
        var $248=$247; //@line 4433 "cPickle.c"
        HEAP[$248]=$246; //@line 4433 "cPickle.c"
        var $249=$append_method; //@line 4433 "cPickle.c"
        var $250=$249; //@line 4433 "cPickle.c"
        var $251=HEAP[$250]; //@line 4433 "cPickle.c"
        var $252=($251)==0; //@line 4433 "cPickle.c"
        if ($252) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 4433 "cPickle.c"
      case 35: // $bb35
        var $253=$append_method; //@line 4433 "cPickle.c"
        var $254=$253+4; //@line 4433 "cPickle.c"
        var $255=HEAP[$254]; //@line 4433 "cPickle.c"
        var $256=$255+24; //@line 4433 "cPickle.c"
        var $257=HEAP[$256]; //@line 4433 "cPickle.c"
        var $258=$append_method; //@line 4433 "cPickle.c"
        FUNCTION_TABLE[$257]($258); //@line 4433 "cPickle.c"
        __label__ = 36; break; //@line 4433 "cPickle.c"
      case 36: // $bb36
        $1=0; //@line 4436 "cPickle.c"
        __label__ = 37; break; //@line 4436 "cPickle.c"
      case 37: // $bb37
        var $259=$1; //@line 4391 "cPickle.c"
        $retval=$259; //@line 4391 "cPickle.c"
        var $retval38=$retval; //@line 4391 "cPickle.c"
        ;
        return $retval38; //@line 4391 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _do_setitems($self, $x) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval_i;
        var $0;
        var $self_addr;
        var $x_addr;
        var $retval;
        var $1;
        var $value;
        var $key;
        var $dict;
        var $len;
        var $i;
        var $r;
        $self_addr=$self;
        $x_addr=$x;
        $value=0; //@line 4457 "cPickle.c"
        $key=0; //@line 4457 "cPickle.c"
        $dict=0; //@line 4457 "cPickle.c"
        $r=0; //@line 4458 "cPickle.c"
        var $2=$self_addr; //@line 4460 "cPickle.c"
        var $3=$2+32; //@line 4460 "cPickle.c"
        var $4=HEAP[$3]; //@line 4460 "cPickle.c"
        var $5=$4+8; //@line 4460 "cPickle.c"
        var $6=HEAP[$5]; //@line 4460 "cPickle.c"
        $len=$6; //@line 4460 "cPickle.c"
        var $7=$len; //@line 4460 "cPickle.c"
        var $8=$x_addr; //@line 4460 "cPickle.c"
        var $9=($7) < ($8); //@line 4460 "cPickle.c"
        var $10=$x_addr; //@line 4460 "cPickle.c"
        var $11=($10) <= 0; //@line 4460 "cPickle.c"
        var $or_cond=($9) | ($11);
        if ($or_cond) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4460 "cPickle.c"
      case 1: // $bb1
        var $12=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
        _PyErr_SetString($12, __str2); //@line 188 "cPickle.c"
        $0=-1; //@line 189 "cPickle.c"
        var $13=$0; //@line 189 "cPickle.c"
        $retval_i=$13; //@line 189 "cPickle.c"
        var $retval1_i=$retval_i; //@line 189 "cPickle.c"
        $1=$retval1_i; //@line 4461 "cPickle.c"
        __label__ = 8; break; //@line 4461 "cPickle.c"
      case 2: // $bb2
        var $14=$self_addr; //@line 4463 "cPickle.c"
        var $15=$14+32; //@line 4463 "cPickle.c"
        var $16=HEAP[$15]; //@line 4463 "cPickle.c"
        var $17=$16+16; //@line 4463 "cPickle.c"
        var $18=HEAP[$17]; //@line 4463 "cPickle.c"
        var $19=$x_addr; //@line 4463 "cPickle.c"
        var $20=($19) - 1; //@line 4463 "cPickle.c"
        var $21=$18+4*$20; //@line 4463 "cPickle.c"
        var $22=HEAP[$21]; //@line 4463 "cPickle.c"
        $dict=$22; //@line 4463 "cPickle.c"
        var $23=$x_addr; //@line 4465 "cPickle.c"
        var $24=($23) + 1; //@line 4465 "cPickle.c"
        $i=$24; //@line 4465 "cPickle.c"
        __label__ = 6; break; //@line 4465 "cPickle.c"
      case 3: // $bb3
        var $25=$self_addr; //@line 4466 "cPickle.c"
        var $26=$25+32; //@line 4466 "cPickle.c"
        var $27=HEAP[$26]; //@line 4466 "cPickle.c"
        var $28=$27+16; //@line 4466 "cPickle.c"
        var $29=HEAP[$28]; //@line 4466 "cPickle.c"
        var $30=$i; //@line 4466 "cPickle.c"
        var $31=($30) - 1; //@line 4466 "cPickle.c"
        var $32=$29+4*$31; //@line 4466 "cPickle.c"
        var $33=HEAP[$32]; //@line 4466 "cPickle.c"
        $key=$33; //@line 4466 "cPickle.c"
        var $34=$self_addr; //@line 4467 "cPickle.c"
        var $35=$34+32; //@line 4467 "cPickle.c"
        var $36=HEAP[$35]; //@line 4467 "cPickle.c"
        var $37=$36+16; //@line 4467 "cPickle.c"
        var $38=HEAP[$37]; //@line 4467 "cPickle.c"
        var $39=$i; //@line 4467 "cPickle.c"
        var $40=$38+4*$39; //@line 4467 "cPickle.c"
        var $41=HEAP[$40]; //@line 4467 "cPickle.c"
        $value=$41; //@line 4467 "cPickle.c"
        var $42=$dict; //@line 4468 "cPickle.c"
        var $43=$key; //@line 4468 "cPickle.c"
        var $44=$value; //@line 4468 "cPickle.c"
        var $45=_PyObject_SetItem($42, $43, $44); //@line 4468 "cPickle.c"
        var $46=($45) < 0; //@line 4468 "cPickle.c"
        if ($46) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4468 "cPickle.c"
      case 4: // $bb4
        $r=-1; //@line 4469 "cPickle.c"
        __label__ = 7; break; //@line 4469 "cPickle.c"
      case 5: // $bb5
        var $47=$i; //@line 4465 "cPickle.c"
        var $48=($47) + 2; //@line 4465 "cPickle.c"
        $i=$48; //@line 4465 "cPickle.c"
        __label__ = 6; break; //@line 4465 "cPickle.c"
      case 6: // $bb6
        var $49=$i; //@line 4465 "cPickle.c"
        var $50=$len; //@line 4465 "cPickle.c"
        var $51=($49) < ($50); //@line 4465 "cPickle.c"
        if ($51) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 4465 "cPickle.c"
      case 7: // $bb7
        var $52=$self_addr; //@line 4474 "cPickle.c"
        var $53=$52+32; //@line 4474 "cPickle.c"
        var $54=HEAP[$53]; //@line 4474 "cPickle.c"
        var $55=$x_addr; //@line 4474 "cPickle.c"
        var $56=_Pdata_clear($54, $55); //@line 4474 "cPickle.c"
        var $57=$r; //@line 4476 "cPickle.c"
        $1=$57; //@line 4476 "cPickle.c"
        __label__ = 8; break; //@line 4476 "cPickle.c"
      case 8: // $bb8
        var $58=$1; //@line 4461 "cPickle.c"
        $retval=$58; //@line 4461 "cPickle.c"
        var $retval9=$retval; //@line 4461 "cPickle.c"
        ;
        return $retval9; //@line 4461 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_mark($self) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $s;
        var $marks;
        $self_addr=$self;
        var $1=$self_addr; //@line 4606 "cPickle.c"
        var $2=$1+52; //@line 4606 "cPickle.c"
        var $3=HEAP[$2]; //@line 4606 "cPickle.c"
        var $4=($3) + 1; //@line 4606 "cPickle.c"
        var $5=$self_addr; //@line 4606 "cPickle.c"
        var $6=$5+56; //@line 4606 "cPickle.c"
        var $7=HEAP[$6]; //@line 4606 "cPickle.c"
        var $8=($4) >= ($7); //@line 4606 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 4606 "cPickle.c"
      case 1: // $bb
        var $9=$self_addr; //@line 4608 "cPickle.c"
        var $10=$9+56; //@line 4608 "cPickle.c"
        var $11=HEAP[$10]; //@line 4608 "cPickle.c"
        var $12=($11) + 20; //@line 4608 "cPickle.c"
        $s=$12; //@line 4608 "cPickle.c"
        var $13=$self_addr; //@line 4609 "cPickle.c"
        var $14=$13+52; //@line 4609 "cPickle.c"
        var $15=HEAP[$14]; //@line 4609 "cPickle.c"
        var $16=$s; //@line 4609 "cPickle.c"
        var $17=($15) >= ($16); //@line 4609 "cPickle.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4609 "cPickle.c"
      case 2: // $bb1
        var $18=$self_addr; //@line 4609 "cPickle.c"
        var $19=$18+52; //@line 4609 "cPickle.c"
        var $20=HEAP[$19]; //@line 4609 "cPickle.c"
        var $21=($20) + 1; //@line 4609 "cPickle.c"
        $s=$21; //@line 4609 "cPickle.c"
        __label__ = 3; break; //@line 4609 "cPickle.c"
      case 3: // $bb2
        var $22=$self_addr; //@line 4610 "cPickle.c"
        var $23=$22+48; //@line 4610 "cPickle.c"
        var $24=HEAP[$23]; //@line 4610 "cPickle.c"
        var $25=($24)==0; //@line 4610 "cPickle.c"
        var $26=$s; //@line 4611 "cPickle.c"
        var $27=($26) * 4; //@line 4611 "cPickle.c"
        if ($25) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4610 "cPickle.c"
      case 4: // $bb3
        var $28=_malloc($27); //@line 4611 "cPickle.c"
        var $29=$28; //@line 4611 "cPickle.c"
        $marks=$29; //@line 4611 "cPickle.c"
        __lastLabel__ = 4; __label__ = 6; break; //@line 4611 "cPickle.c"
      case 5: // $bb4
        var $30=$self_addr; //@line 4613 "cPickle.c"
        var $31=$30+48; //@line 4613 "cPickle.c"
        var $32=HEAP[$31]; //@line 4613 "cPickle.c"
        var $33=$32; //@line 4613 "cPickle.c"
        var $34=_realloc($33, $27); //@line 4613 "cPickle.c"
        var $35=$34; //@line 4613 "cPickle.c"
        $marks=$35; //@line 4613 "cPickle.c"
        __lastLabel__ = 5; __label__ = 6; break; //@line 4613 "cPickle.c"
      case 6: // $bb5
        var $36=__lastLabel__ == 5 ? $35 : ($29);
        var $37=($36)==0; //@line 4615 "cPickle.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4615 "cPickle.c"
      case 7: // $bb6
        var $38=_PyErr_NoMemory(); //@line 4616 "cPickle.c"
        $0=-1; //@line 4617 "cPickle.c"
        __label__ = 10; break; //@line 4617 "cPickle.c"
      case 8: // $bb7
        var $39=$self_addr; //@line 4619 "cPickle.c"
        var $40=$39+48; //@line 4619 "cPickle.c"
        var $41=$marks; //@line 4619 "cPickle.c"
        HEAP[$40]=$41; //@line 4619 "cPickle.c"
        var $42=$self_addr; //@line 4620 "cPickle.c"
        var $43=$42+56; //@line 4620 "cPickle.c"
        var $44=$s; //@line 4620 "cPickle.c"
        HEAP[$43]=$44; //@line 4620 "cPickle.c"
        __label__ = 9; break; //@line 4620 "cPickle.c"
      case 9: // $bb8
        var $45=$self_addr; //@line 4623 "cPickle.c"
        var $46=$45+48; //@line 4623 "cPickle.c"
        var $47=HEAP[$46]; //@line 4623 "cPickle.c"
        var $48=$self_addr; //@line 4623 "cPickle.c"
        var $49=$48+52; //@line 4623 "cPickle.c"
        var $50=HEAP[$49]; //@line 4623 "cPickle.c"
        var $51=$self_addr; //@line 4623 "cPickle.c"
        var $52=$51+32; //@line 4623 "cPickle.c"
        var $53=HEAP[$52]; //@line 4623 "cPickle.c"
        var $54=$53+8; //@line 4623 "cPickle.c"
        var $55=HEAP[$54]; //@line 4623 "cPickle.c"
        var $56=$47+4*$50; //@line 4623 "cPickle.c"
        HEAP[$56]=$55; //@line 4623 "cPickle.c"
        var $57=($50) + 1; //@line 4623 "cPickle.c"
        var $58=$self_addr; //@line 4623 "cPickle.c"
        var $59=$58+52; //@line 4623 "cPickle.c"
        HEAP[$59]=$57; //@line 4623 "cPickle.c"
        $0=0; //@line 4625 "cPickle.c"
        __label__ = 10; break; //@line 4625 "cPickle.c"
      case 10: // $bb9
        var $60=$0; //@line 4617 "cPickle.c"
        $retval=$60; //@line 4617 "cPickle.c"
        var $retval10=$retval; //@line 4617 "cPickle.c"
        ;
        return $retval10; //@line 4617 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_proto($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr_i;
        var $x_addr_i;
        var $retval_i;
        var $0;
        var $c_i;
        var $i_i;
        var $l_i;
        var $self_addr;
        var $retval;
        var $1;
        var $i;
        var $protobyte=__stackBase__;
        $self_addr=$self;
        var $2=$self_addr; //@line 4657 "cPickle.c"
        var $3=$2+60; //@line 4657 "cPickle.c"
        var $4=HEAP[$3]; //@line 4657 "cPickle.c"
        var $5=$self_addr; //@line 4657 "cPickle.c"
        var $6=FUNCTION_TABLE[$4]($5, $protobyte, 1); //@line 4657 "cPickle.c"
        $i=$6; //@line 4657 "cPickle.c"
        var $7=$i; //@line 4658 "cPickle.c"
        var $8=($7) < 0; //@line 4658 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4658 "cPickle.c"
      case 1: // $bb
        $1=-1; //@line 4659 "cPickle.c"
        __label__ = 10; break; //@line 4659 "cPickle.c"
      case 2: // $bb1
        var $9=HEAP[$protobyte]; //@line 4661 "cPickle.c"
        $s_addr_i=$9;
        $x_addr_i=1;
        $i_i=0; //@line 3408 "cPickle.c"
        $l_i=0; //@line 3408 "cPickle.c"
        var $10=$i_i; //@line 3408 "cPickle.c"
        var $11=$x_addr_i; //@line 3408 "cPickle.c"
        var $12=($10) < ($11); //@line 3408 "cPickle.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 3408 "cPickle.c"
      case 3: // $bb3_thread
        $0=0; //@line 3420 "cPickle.c"
        $retval_i=0; //@line 3420 "cPickle.c"
        $i=0; //@line 4661 "cPickle.c"
        __label__ = 8; break;
      case 4: // $bb_i
        var $13=$s_addr_i; //@line 3409 "cPickle.c"
        var $14=$i_i; //@line 3409 "cPickle.c"
        var $15=$13+$14; //@line 3409 "cPickle.c"
        var $16=HEAP[$15]; //@line 3409 "cPickle.c"
        $c_i=$16; //@line 3409 "cPickle.c"
        var $17=$c_i; //@line 3410 "cPickle.c"
        var $18=($17); //@line 3410 "cPickle.c"
        var $19=$i_i; //@line 3410 "cPickle.c"
        var $20=($19) * 8; //@line 3410 "cPickle.c"
        var $21=($18) << ($20); //@line 3410 "cPickle.c"
        var $22=$l_i; //@line 3410 "cPickle.c"
        var $23=($21) | ($22); //@line 3410 "cPickle.c"
        $l_i=$23; //@line 3410 "cPickle.c"
        var $24=$i_i; //@line 3408 "cPickle.c"
        var $25=($24) + 1; //@line 3408 "cPickle.c"
        $i_i=$25; //@line 3408 "cPickle.c"
        var $26=$i_i; //@line 3408 "cPickle.c"
        var $27=$x_addr_i; //@line 3408 "cPickle.c"
        var $28=($26) < ($27); //@line 3408 "cPickle.c"
        if ($28) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3408 "cPickle.c"
      case 5: // $calc_binint_exit
        var $_pr=$l_i;
        $0=$_pr; //@line 3420 "cPickle.c"
        $retval_i=$_pr; //@line 3420 "cPickle.c"
        $i=$_pr; //@line 4661 "cPickle.c"
        var $29=($_pr) < 0; //@line 4665 "cPickle.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4665 "cPickle.c"
      case 6: // $bb2
        ___assert_fail(__str99, __str15, 4665, ___PRETTY_FUNCTION___15142); //@line 4665 "cPickle.c"
        throw "Reached an unreachable!" //@line 4665 "cPickle.c"
      case 7: // $bb3
        var $30=($_pr) <= 2; //@line 4666 "cPickle.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4666 "cPickle.c"
      case 8: // $bb4
        $1=0; //@line 4667 "cPickle.c"
        __label__ = 10; break; //@line 4667 "cPickle.c"
      case 9: // $bb5
        var $31=HEAP[_PyExc_ValueError]; //@line 4669 "cPickle.c"
        var $32=$i; //@line 4669 "cPickle.c"
        var $33=_PyErr_Format($31, __str100, $32); //@line 4669 "cPickle.c"
        $1=-1; //@line 4670 "cPickle.c"
        __label__ = 10; break; //@line 4670 "cPickle.c"
      case 10: // $bb6
        var $34=$1; //@line 4659 "cPickle.c"
        $retval=$34; //@line 4659 "cPickle.c"
        var $retval7=$retval; //@line 4659 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 4659 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; _memset(__stackBase__, 0, 36);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr_i198;
        var $retval_i199;
        var $0;
        var $self_addr_i179;
        var $retval_i180;
        var $1;
        var $callable_i;
        var $arg_tup_i;
        var $ob_i;
        var $self_addr_i_i170;
        var $retval_i_i171;
        var $2;
        var $self_addr_i172;
        var $retval_i173;
        var $3;
        var $self_addr_i167;
        var $retval_i168;
        var $4;
        var $self_addr_i160;
        var $retval_i161;
        var $5;
        var $i_i162;
        var $retval_i_i127;
        var $6;
        var $self_addr_i128;
        var $retval_i129;
        var $7;
        var $state_i;
        var $inst_i;
        var $slotstate_i;
        var $__setstate___i;
        var $d_key_i=__stackBase__;
        var $d_value_i=__stackBase__+4;
        var $i_i130=__stackBase__+8;
        var $res_i;
        var $junk_i;
        var $temp_i;
        var $dict_i;
        var $self_addr_i_i121;
        var $retval_i_i122;
        var $8;
        var $self_addr_i123;
        var $retval_i124;
        var $9;
        var $self_addr_i119;
        var $retval_i120;
        var $10;
        var $retval_i1_i85;
        var $11;
        var $retval_i_i86;
        var $12;
        var $self_addr_i87;
        var $retval_i88;
        var $13;
        var $class_i89;
        var $module_name_i90;
        var $class_name_i91;
        var $len_i92;
        var $s_i93=__stackBase__+12;
        var $self_addr_i53;
        var $retval_i54;
        var $14;
        var $args_i;
        var $clsraw_i;
        var $cls_i;
        var $obj_i55;
        var $retval_i2_i;
        var $15;
        var $retval_i1_i;
        var $16;
        var $self_addr_i_i25;
        var $retval_i_i26;
        var $17;
        var $self_addr_i27;
        var $retval_i28;
        var $18;
        var $tup_i29;
        var $class_i30;
        var $obj_i31;
        var $module_name_i;
        var $class_name_i;
        var $i_i32;
        var $len_i;
        var $s_i33=__stackBase__+16;
        var $self_addr_i_i;
        var $retval_i_i;
        var $19;
        var $self_addr_i20;
        var $retval_i21;
        var $20;
        var $class_i;
        var $tup_i;
        var $obj_i;
        var $i_i;
        var $self_addr_i13;
        var $retval_i14;
        var $21;
        var $s_i15=__stackBase__+20;
        var $self_addr_i6;
        var $retval_i7;
        var $22;
        var $s_i8=__stackBase__+24;
        var $self_addr_i1;
        var $retval_i2;
        var $23;
        var $s_i=__stackBase__+28;
        var $self_addr_i;
        var $retval_i;
        var $24;
        var $self_addr;
        var $retval;
        var $25;
        var $err;
        var $val;
        var $s=__stackBase__+32;
        $self_addr=$self;
        $err=0; //@line 4676 "cPickle.c"
        $val=0; //@line 4676 "cPickle.c"
        var $26=$self_addr; //@line 4679 "cPickle.c"
        var $27=$26+52; //@line 4679 "cPickle.c"
        HEAP[$27]=0; //@line 4679 "cPickle.c"
        var $28=$self_addr; //@line 4680 "cPickle.c"
        var $29=$28+32; //@line 4680 "cPickle.c"
        var $30=HEAP[$29]; //@line 4680 "cPickle.c"
        var $31=$30+8; //@line 4680 "cPickle.c"
        var $32=HEAP[$31]; //@line 4680 "cPickle.c"
        var $33=($32)!=0; //@line 4680 "cPickle.c"
        if ($33) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4680 "cPickle.c"
      case 1: // $bb
        var $34=$self_addr; //@line 4680 "cPickle.c"
        var $35=$34+32; //@line 4680 "cPickle.c"
        var $36=HEAP[$35]; //@line 4680 "cPickle.c"
        var $37=_Pdata_clear($36, 0); //@line 4680 "cPickle.c"
        __label__ = 2; break; //@line 4680 "cPickle.c"
      case 2: // $bb1
        var $38=$self_addr; //@line 4683 "cPickle.c"
        var $39=$38+60; //@line 4683 "cPickle.c"
        var $40=HEAP[$39]; //@line 4683 "cPickle.c"
        var $41=$self_addr; //@line 4683 "cPickle.c"
        var $42=FUNCTION_TABLE[$40]($41, $s, 1); //@line 4683 "cPickle.c"
        var $43=($42) < 0; //@line 4683 "cPickle.c"
        if ($43) { __label__ = 270; break; } else { __label__ = 3; break; } //@line 4683 "cPickle.c"
      case 3: // $bb2
        var $44=HEAP[$s]; //@line 4686 "cPickle.c"
        var $45=$44; //@line 4686 "cPickle.c"
        var $46=HEAP[$45]; //@line 4686 "cPickle.c"
        var $47=($46); //@line 4686 "cPickle.c"
        if ($47 == -128) {
          __label__ = 265; break;
        }
        else if ($47 == -127) {
          __label__ = 94; break;
        }
        else if ($47 == -126) {
          __label__ = 225; break;
        }
        else if ($47 == -125) {
          __label__ = 226; break;
        }
        else if ($47 == -124) {
          __label__ = 227; break;
        }
        else if ($47 == -123) {
          __label__ = 29; break;
        }
        else if ($47 == -122) {
          __label__ = 30; break;
        }
        else if ($47 == -121) {
          __label__ = 31; break;
        }
        else if ($47 == -120) {
          __label__ = 266; break;
        }
        else if ($47 == -119) {
          __label__ = 267; break;
        }
        else if ($47 == -118) {
          __label__ = 19; break;
        }
        else if ($47 == -117) {
          __label__ = 20; break;
        }
        else if ($47 == 0) {
          __label__ = 268; break;
        }
        else if ($47 == 40) {
          __label__ = 228; break;
        }
        else if ($47 == 41) {
          __label__ = 28; break;
        }
        else if ($47 == 46) {
          __label__ = 270; break;
        }
        else if ($47 == 48) {
          __label__ = 232; break;
        }
        else if ($47 == 49) {
          __label__ = 233; break;
        }
        else if ($47 == 50) {
          __label__ = 221; break;
        }
        else if ($47 == 70) {
          __label__ = 21; break;
        }
        else if ($47 == 71) {
          __label__ = 22; break;
        }
        else if ($47 == 73) {
          __label__ = 17; break;
        }
        else if ($47 == 74) {
          __label__ = 8; break;
        }
        else if ($47 == 75) {
          __label__ = 11; break;
        }
        else if ($47 == 76) {
          __label__ = 18; break;
        }
        else if ($47 == 77) {
          __label__ = 14; break;
        }
        else if ($47 == 78) {
          __label__ = 4; break;
        }
        else if ($47 == 80) {
          __label__ = 243; break;
        }
        else if ($47 == 81) {
          __label__ = 244; break;
        }
        else if ($47 == 82) {
          __label__ = 245; break;
        }
        else if ($47 == 83) {
          __label__ = 25; break;
        }
        else if ($47 == 84) {
          __label__ = 23; break;
        }
        else if ($47 == 85) {
          __label__ = 24; break;
        }
        else if ($47 == 86) {
          __label__ = 26; break;
        }
        else if ($47 == 88) {
          __label__ = 27; break;
        }
        else if ($47 == 93) {
          __label__ = 33; break;
        }
        else if ($47 == 97) {
          __label__ = 152; break;
        }
        else if ($47 == 98) {
          __label__ = 157; break;
        }
        else if ($47 == 99) {
          __label__ = 126; break;
        }
        else if ($47 == 100) {
          __label__ = 36; break;
        }
        else if ($47 == 101) {
          __label__ = 153; break;
        }
        else if ($47 == 103) {
          __label__ = 224; break;
        }
        else if ($47 == 104) {
          __label__ = 222; break;
        }
        else if ($47 == 105) {
          __label__ = 59; break;
        }
        else if ($47 == 106) {
          __label__ = 223; break;
        }
        else if ($47 == 108) {
          __label__ = 34; break;
        }
        else if ($47 == 111) {
          __label__ = 37; break;
        }
        else if ($47 == 112) {
          __label__ = 231; break;
        }
        else if ($47 == 113) {
          __label__ = 229; break;
        }
        else if ($47 == 114) {
          __label__ = 230; break;
        }
        else if ($47 == 115) {
          __label__ = 238; break;
        }
        else if ($47 == 116) {
          __label__ = 32; break;
        }
        else if ($47 == 117) {
          __label__ = 239; break;
        }
        else if ($47 == 125) {
          __label__ = 35; break;
        }
        else {
        __label__ = 269; break;
        }
        
      case 4: // $bb3
        var $48=$self_addr; //@line 4688 "cPickle.c"
        $self_addr_i=$48;
        var $49=$self_addr_i; //@line 3332 "cPickle.c"
        var $50=$49+32; //@line 3332 "cPickle.c"
        var $51=HEAP[$50]; //@line 3332 "cPickle.c"
        var $52=$51+8; //@line 3332 "cPickle.c"
        var $53=HEAP[$52]; //@line 3332 "cPickle.c"
        var $54=$self_addr_i; //@line 3332 "cPickle.c"
        var $55=$54+32; //@line 3332 "cPickle.c"
        var $56=HEAP[$55]; //@line 3332 "cPickle.c"
        var $57=$56+12; //@line 3332 "cPickle.c"
        var $58=HEAP[$57]; //@line 3332 "cPickle.c"
        var $59=($53)==($58); //@line 3332 "cPickle.c"
        if ($59) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 3332 "cPickle.c"
      case 5: // $bb_i
        var $60=$self_addr_i; //@line 3332 "cPickle.c"
        var $61=$60+32; //@line 3332 "cPickle.c"
        var $62=HEAP[$61]; //@line 3332 "cPickle.c"
        var $63=_Pdata_grow($62); //@line 3332 "cPickle.c"
        var $64=($63) < 0; //@line 3332 "cPickle.c"
        if ($64) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3332 "cPickle.c"
      case 6: // $load_none_exit_thread
        $24=-1; //@line 3332 "cPickle.c"
        $retval_i=-1; //@line 3332 "cPickle.c"
        __label__ = 270; break;
      case 7: // $load_none_exit
        var $65=HEAP[__Py_NoneStruct]; //@line 3332 "cPickle.c"
        var $66=($65) + 1; //@line 3332 "cPickle.c"
        HEAP[__Py_NoneStruct]=$66; //@line 3332 "cPickle.c"
        var $67=$self_addr_i; //@line 3332 "cPickle.c"
        var $68=$67+32; //@line 3332 "cPickle.c"
        var $69=HEAP[$68]; //@line 3332 "cPickle.c"
        var $70=$69+16; //@line 3332 "cPickle.c"
        var $71=HEAP[$70]; //@line 3332 "cPickle.c"
        var $72=$self_addr_i; //@line 3332 "cPickle.c"
        var $73=$72+32; //@line 3332 "cPickle.c"
        var $74=HEAP[$73]; //@line 3332 "cPickle.c"
        var $75=$74+8; //@line 3332 "cPickle.c"
        var $76=HEAP[$75]; //@line 3332 "cPickle.c"
        var $77=$71+4*$76; //@line 3332 "cPickle.c"
        HEAP[$77]=__Py_NoneStruct; //@line 3332 "cPickle.c"
        var $78=($76) + 1; //@line 3332 "cPickle.c"
        var $79=$74+8; //@line 3332 "cPickle.c"
        HEAP[$79]=$78; //@line 3332 "cPickle.c"
        $24=0; //@line 3333 "cPickle.c"
        $retval_i=0; //@line 3332 "cPickle.c"
        __label__ = 2; break;
      case 8: // $bb5
        var $80=$self_addr; //@line 4693 "cPickle.c"
        $self_addr_i1=$80;
        var $81=$self_addr_i1; //@line 3445 "cPickle.c"
        var $82=$81+60; //@line 3445 "cPickle.c"
        var $83=HEAP[$82]; //@line 3445 "cPickle.c"
        var $84=$self_addr_i1; //@line 3445 "cPickle.c"
        var $85=FUNCTION_TABLE[$83]($84, $s_i, 4); //@line 3445 "cPickle.c"
        var $86=($85) < 0; //@line 3445 "cPickle.c"
        if ($86) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3445 "cPickle.c"
      case 9: // $load_binint_exit_thread
        $23=-1; //@line 3446 "cPickle.c"
        $retval_i2=-1; //@line 3446 "cPickle.c"
        __label__ = 270; break;
      case 10: // $load_binint_exit
        var $87=HEAP[$s_i]; //@line 3448 "cPickle.c"
        var $88=$self_addr_i1; //@line 3448 "cPickle.c"
        var $89=_load_binintx($88, $87, 4); //@line 3448 "cPickle.c"
        $23=$89; //@line 3448 "cPickle.c"
        $retval_i2=$89; //@line 3446 "cPickle.c"
        var $90=($89) < 0; //@line 4693 "cPickle.c"
        if ($90) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4693 "cPickle.c"
      case 11: // $bb7
        var $91=$self_addr; //@line 4698 "cPickle.c"
        $self_addr_i6=$91;
        var $92=$self_addr_i6; //@line 3457 "cPickle.c"
        var $93=$92+60; //@line 3457 "cPickle.c"
        var $94=HEAP[$93]; //@line 3457 "cPickle.c"
        var $95=$self_addr_i6; //@line 3457 "cPickle.c"
        var $96=FUNCTION_TABLE[$94]($95, $s_i8, 1); //@line 3457 "cPickle.c"
        var $97=($96) < 0; //@line 3457 "cPickle.c"
        if ($97) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 3457 "cPickle.c"
      case 12: // $load_binint1_exit_thread
        $22=-1; //@line 3458 "cPickle.c"
        $retval_i7=-1; //@line 3458 "cPickle.c"
        __label__ = 270; break;
      case 13: // $load_binint1_exit
        var $98=HEAP[$s_i8]; //@line 3460 "cPickle.c"
        var $99=$self_addr_i6; //@line 3460 "cPickle.c"
        var $100=_load_binintx($99, $98, 1); //@line 3460 "cPickle.c"
        $22=$100; //@line 3460 "cPickle.c"
        $retval_i7=$100; //@line 3458 "cPickle.c"
        var $101=($100) < 0; //@line 4698 "cPickle.c"
        if ($101) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4698 "cPickle.c"
      case 14: // $bb9
        var $102=$self_addr; //@line 4703 "cPickle.c"
        $self_addr_i13=$102;
        var $103=$self_addr_i13; //@line 3469 "cPickle.c"
        var $104=$103+60; //@line 3469 "cPickle.c"
        var $105=HEAP[$104]; //@line 3469 "cPickle.c"
        var $106=$self_addr_i13; //@line 3469 "cPickle.c"
        var $107=FUNCTION_TABLE[$105]($106, $s_i15, 2); //@line 3469 "cPickle.c"
        var $108=($107) < 0; //@line 3469 "cPickle.c"
        if ($108) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 3469 "cPickle.c"
      case 15: // $load_binint2_exit_thread
        $21=-1; //@line 3470 "cPickle.c"
        $retval_i14=-1; //@line 3470 "cPickle.c"
        __label__ = 270; break;
      case 16: // $load_binint2_exit
        var $109=HEAP[$s_i15]; //@line 3472 "cPickle.c"
        var $110=$self_addr_i13; //@line 3472 "cPickle.c"
        var $111=_load_binintx($110, $109, 2); //@line 3472 "cPickle.c"
        $21=$111; //@line 3472 "cPickle.c"
        $retval_i14=$111; //@line 3470 "cPickle.c"
        var $112=($111) < 0; //@line 4703 "cPickle.c"
        if ($112) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4703 "cPickle.c"
      case 17: // $bb11
        var $113=$self_addr; //@line 4708 "cPickle.c"
        var $114=_load_int($113); //@line 4708 "cPickle.c"
        var $115=($114) < 0; //@line 4708 "cPickle.c"
        if ($115) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4708 "cPickle.c"
      case 18: // $bb13
        var $116=$self_addr; //@line 4713 "cPickle.c"
        var $117=_load_long($116); //@line 4713 "cPickle.c"
        var $118=($117) < 0; //@line 4713 "cPickle.c"
        if ($118) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4713 "cPickle.c"
      case 19: // $bb15
        var $119=$self_addr; //@line 4718 "cPickle.c"
        var $120=_load_counted_long($119, 1); //@line 4718 "cPickle.c"
        var $121=($120) < 0; //@line 4718 "cPickle.c"
        if ($121) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4718 "cPickle.c"
      case 20: // $bb17
        var $122=$self_addr; //@line 4723 "cPickle.c"
        var $123=_load_counted_long($122, 4); //@line 4723 "cPickle.c"
        var $124=($123) < 0; //@line 4723 "cPickle.c"
        if ($124) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4723 "cPickle.c"
      case 21: // $bb19
        var $125=$self_addr; //@line 4728 "cPickle.c"
        var $126=_load_float($125); //@line 4728 "cPickle.c"
        var $127=($126) < 0; //@line 4728 "cPickle.c"
        if ($127) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4728 "cPickle.c"
      case 22: // $bb21
        var $128=$self_addr; //@line 4733 "cPickle.c"
        var $129=_load_binfloat($128); //@line 4733 "cPickle.c"
        var $130=($129) < 0; //@line 4733 "cPickle.c"
        if ($130) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4733 "cPickle.c"
      case 23: // $bb23
        var $131=$self_addr; //@line 4738 "cPickle.c"
        var $132=_load_binstring($131); //@line 4738 "cPickle.c"
        var $133=($132) < 0; //@line 4738 "cPickle.c"
        if ($133) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4738 "cPickle.c"
      case 24: // $bb25
        var $134=$self_addr; //@line 4743 "cPickle.c"
        var $135=_load_short_binstring($134); //@line 4743 "cPickle.c"
        var $136=($135) < 0; //@line 4743 "cPickle.c"
        if ($136) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4743 "cPickle.c"
      case 25: // $bb27
        var $137=$self_addr; //@line 4748 "cPickle.c"
        var $138=_load_string($137); //@line 4748 "cPickle.c"
        var $139=($138) < 0; //@line 4748 "cPickle.c"
        if ($139) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4748 "cPickle.c"
      case 26: // $bb29
        var $140=$self_addr; //@line 4754 "cPickle.c"
        var $141=_load_unicode($140); //@line 4754 "cPickle.c"
        var $142=($141) < 0; //@line 4754 "cPickle.c"
        if ($142) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4754 "cPickle.c"
      case 27: // $bb31
        var $143=$self_addr; //@line 4759 "cPickle.c"
        var $144=_load_binunicode($143); //@line 4759 "cPickle.c"
        var $145=($144) < 0; //@line 4759 "cPickle.c"
        if ($145) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4759 "cPickle.c"
      case 28: // $bb33
        var $146=$self_addr; //@line 4765 "cPickle.c"
        var $147=_load_counted_tuple($146, 0); //@line 4765 "cPickle.c"
        var $148=($147) < 0; //@line 4765 "cPickle.c"
        if ($148) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4765 "cPickle.c"
      case 29: // $bb35
        var $149=$self_addr; //@line 4770 "cPickle.c"
        var $150=_load_counted_tuple($149, 1); //@line 4770 "cPickle.c"
        var $151=($150) < 0; //@line 4770 "cPickle.c"
        if ($151) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4770 "cPickle.c"
      case 30: // $bb37
        var $152=$self_addr; //@line 4775 "cPickle.c"
        var $153=_load_counted_tuple($152, 2); //@line 4775 "cPickle.c"
        var $154=($153) < 0; //@line 4775 "cPickle.c"
        if ($154) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4775 "cPickle.c"
      case 31: // $bb39
        var $155=$self_addr; //@line 4780 "cPickle.c"
        var $156=_load_counted_tuple($155, 3); //@line 4780 "cPickle.c"
        var $157=($156) < 0; //@line 4780 "cPickle.c"
        if ($157) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4780 "cPickle.c"
      case 32: // $bb41
        var $158=$self_addr; //@line 4785 "cPickle.c"
        var $159=_load_tuple($158); //@line 4785 "cPickle.c"
        var $160=($159) < 0; //@line 4785 "cPickle.c"
        if ($160) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4785 "cPickle.c"
      case 33: // $bb43
        var $161=$self_addr; //@line 4790 "cPickle.c"
        var $162=_load_empty_list($161); //@line 4790 "cPickle.c"
        var $163=($162) < 0; //@line 4790 "cPickle.c"
        if ($163) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4790 "cPickle.c"
      case 34: // $bb45
        var $164=$self_addr; //@line 4795 "cPickle.c"
        var $165=_load_list($164); //@line 4795 "cPickle.c"
        var $166=($165) < 0; //@line 4795 "cPickle.c"
        if ($166) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4795 "cPickle.c"
      case 35: // $bb47
        var $167=$self_addr; //@line 4800 "cPickle.c"
        var $168=_load_empty_dict($167); //@line 4800 "cPickle.c"
        var $169=($168) < 0; //@line 4800 "cPickle.c"
        if ($169) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4800 "cPickle.c"
      case 36: // $bb49
        var $170=$self_addr; //@line 4805 "cPickle.c"
        var $171=_load_dict($170); //@line 4805 "cPickle.c"
        var $172=($171) < 0; //@line 4805 "cPickle.c"
        if ($172) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4805 "cPickle.c"
      case 37: // $bb51
        var $173=$self_addr; //@line 4810 "cPickle.c"
        $self_addr_i20=$173;
        $obj_i=0; //@line 3888 "cPickle.c"
        var $174=$self_addr_i20; //@line 3891 "cPickle.c"
        $self_addr_i_i=$174;
        var $175=$self_addr_i_i; //@line 3320 "cPickle.c"
        var $176=$175+52; //@line 3320 "cPickle.c"
        var $177=HEAP[$176]; //@line 3320 "cPickle.c"
        var $178=($177) <= 0; //@line 3320 "cPickle.c"
        if ($178) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 3320 "cPickle.c"
      case 38: // $marker_exit_thread_i
        var $179=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($179, __str78); //@line 3321 "cPickle.c"
        $19=-1; //@line 3322 "cPickle.c"
        $retval_i_i=-1; //@line 3322 "cPickle.c"
        $i_i=-1; //@line 3891 "cPickle.c"
        __label__ = 40; break;
      case 39: // $marker_exit_i
        var $180=$self_addr_i_i; //@line 3325 "cPickle.c"
        var $181=$180+48; //@line 3325 "cPickle.c"
        var $182=HEAP[$181]; //@line 3325 "cPickle.c"
        var $183=$self_addr_i_i; //@line 3325 "cPickle.c"
        var $184=$183+52; //@line 3325 "cPickle.c"
        var $185=HEAP[$184]; //@line 3325 "cPickle.c"
        var $186=($185) - 1; //@line 3325 "cPickle.c"
        var $187=$self_addr_i_i; //@line 3325 "cPickle.c"
        var $188=$187+52; //@line 3325 "cPickle.c"
        HEAP[$188]=$186; //@line 3325 "cPickle.c"
        var $189=$self_addr_i_i; //@line 3325 "cPickle.c"
        var $190=$189+52; //@line 3325 "cPickle.c"
        var $191=HEAP[$190]; //@line 3325 "cPickle.c"
        var $192=$182+4*$191; //@line 3325 "cPickle.c"
        var $193=HEAP[$192]; //@line 3325 "cPickle.c"
        $19=$193; //@line 3325 "cPickle.c"
        $retval_i_i=$193; //@line 3322 "cPickle.c"
        $i_i=$193; //@line 3891 "cPickle.c"
        var $194=($193) < 0; //@line 3891 "cPickle.c"
        if ($194) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 3891 "cPickle.c"
      case 40: // $bb_i22
        $20=-1; //@line 3891 "cPickle.c"
        __label__ = 57; break; //@line 3891 "cPickle.c"
      case 41: // $bb1_i23
        var $195=$i_i; //@line 3892 "cPickle.c"
        var $196=($195) + 1; //@line 3892 "cPickle.c"
        var $197=$self_addr_i20; //@line 3892 "cPickle.c"
        var $198=$197+32; //@line 3892 "cPickle.c"
        var $199=HEAP[$198]; //@line 3892 "cPickle.c"
        var $200=_Pdata_popTuple($199, $196); //@line 3892 "cPickle.c"
        $tup_i=$200; //@line 3892 "cPickle.c"
        var $201=$tup_i; //@line 3892 "cPickle.c"
        var $202=($201)==0; //@line 3892 "cPickle.c"
        if ($202) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 3892 "cPickle.c"
      case 42: // $bb2_i24
        $20=-1; //@line 3892 "cPickle.c"
        __label__ = 57; break; //@line 3892 "cPickle.c"
      case 43: // $bb3_i
        var $203=$self_addr_i20; //@line 3893 "cPickle.c"
        var $204=$203+32; //@line 3893 "cPickle.c"
        var $205=HEAP[$204]; //@line 3893 "cPickle.c"
        var $206=$205+8; //@line 3893 "cPickle.c"
        var $207=HEAP[$206]; //@line 3893 "cPickle.c"
        var $208=($207)!=0; //@line 3893 "cPickle.c"
        if ($208) { __label__ = 45; break; } else { __label__ = 44; break; } //@line 3893 "cPickle.c"
      case 44: // $bb6_thread_i
        var $209=HEAP[_UnpicklingError]; //@line 3893 "cPickle.c"
        _PyErr_SetString($209, __str88); //@line 3893 "cPickle.c"
        $class_i=0; //@line 3893 "cPickle.c"
        __label__ = 48; break;
      case 45: // $bb6_i
        var $210=$self_addr_i20; //@line 3893 "cPickle.c"
        var $211=$210+32; //@line 3893 "cPickle.c"
        var $212=HEAP[$211]; //@line 3893 "cPickle.c"
        var $213=$212+16; //@line 3893 "cPickle.c"
        var $214=HEAP[$213]; //@line 3893 "cPickle.c"
        var $215=$self_addr_i20; //@line 3893 "cPickle.c"
        var $216=$215+32; //@line 3893 "cPickle.c"
        var $217=HEAP[$216]; //@line 3893 "cPickle.c"
        var $218=$217+8; //@line 3893 "cPickle.c"
        var $219=HEAP[$218]; //@line 3893 "cPickle.c"
        var $220=($219) - 1; //@line 3893 "cPickle.c"
        var $221=$217+8; //@line 3893 "cPickle.c"
        HEAP[$221]=$220; //@line 3893 "cPickle.c"
        var $222=$217+8; //@line 3893 "cPickle.c"
        var $223=HEAP[$222]; //@line 3893 "cPickle.c"
        var $224=$214+4*$223; //@line 3893 "cPickle.c"
        var $225=HEAP[$224]; //@line 3893 "cPickle.c"
        $class_i=$225; //@line 3893 "cPickle.c"
        var $226=($225)!=0; //@line 3894 "cPickle.c"
        if ($226) { __label__ = 46; break; } else { __label__ = 48; break; } //@line 3894 "cPickle.c"
      case 46: // $bb7_i
        var $227=$class_i; //@line 3895 "cPickle.c"
        var $228=$tup_i; //@line 3895 "cPickle.c"
        var $229=_Instance_New($227, $228); //@line 3895 "cPickle.c"
        $obj_i=$229; //@line 3895 "cPickle.c"
        var $230=$class_i; //@line 3896 "cPickle.c"
        var $231=$230; //@line 3896 "cPickle.c"
        var $232=HEAP[$231]; //@line 3896 "cPickle.c"
        var $233=($232) - 1; //@line 3896 "cPickle.c"
        var $234=$class_i; //@line 3896 "cPickle.c"
        var $235=$234; //@line 3896 "cPickle.c"
        HEAP[$235]=$233; //@line 3896 "cPickle.c"
        var $236=$class_i; //@line 3896 "cPickle.c"
        var $237=$236; //@line 3896 "cPickle.c"
        var $238=HEAP[$237]; //@line 3896 "cPickle.c"
        var $239=($238)==0; //@line 3896 "cPickle.c"
        if ($239) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 3896 "cPickle.c"
      case 47: // $bb8_i
        var $240=$class_i; //@line 3896 "cPickle.c"
        var $241=$240+4; //@line 3896 "cPickle.c"
        var $242=HEAP[$241]; //@line 3896 "cPickle.c"
        var $243=$242+24; //@line 3896 "cPickle.c"
        var $244=HEAP[$243]; //@line 3896 "cPickle.c"
        var $245=$class_i; //@line 3896 "cPickle.c"
        FUNCTION_TABLE[$244]($245); //@line 3896 "cPickle.c"
        __label__ = 48; break; //@line 3896 "cPickle.c"
      case 48: // $bb9_i
        var $246=$tup_i; //@line 3898 "cPickle.c"
        var $247=$246; //@line 3898 "cPickle.c"
        var $248=HEAP[$247]; //@line 3898 "cPickle.c"
        var $249=($248) - 1; //@line 3898 "cPickle.c"
        var $250=$tup_i; //@line 3898 "cPickle.c"
        var $251=$250; //@line 3898 "cPickle.c"
        HEAP[$251]=$249; //@line 3898 "cPickle.c"
        var $252=$tup_i; //@line 3898 "cPickle.c"
        var $253=$252; //@line 3898 "cPickle.c"
        var $254=HEAP[$253]; //@line 3898 "cPickle.c"
        var $255=($254)==0; //@line 3898 "cPickle.c"
        if ($255) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 3898 "cPickle.c"
      case 49: // $bb10_i
        var $256=$tup_i; //@line 3898 "cPickle.c"
        var $257=$256+4; //@line 3898 "cPickle.c"
        var $258=HEAP[$257]; //@line 3898 "cPickle.c"
        var $259=$258+24; //@line 3898 "cPickle.c"
        var $260=HEAP[$259]; //@line 3898 "cPickle.c"
        var $261=$tup_i; //@line 3898 "cPickle.c"
        FUNCTION_TABLE[$260]($261); //@line 3898 "cPickle.c"
        __label__ = 50; break; //@line 3898 "cPickle.c"
      case 50: // $bb11_i
        var $262=$obj_i; //@line 3900 "cPickle.c"
        var $263=($262)==0; //@line 3900 "cPickle.c"
        if ($263) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 3900 "cPickle.c"
      case 51: // $bb12_i
        $20=-1; //@line 3900 "cPickle.c"
        __label__ = 57; break; //@line 3900 "cPickle.c"
      case 52: // $bb13_i
        var $264=$self_addr_i20; //@line 3901 "cPickle.c"
        var $265=$264+32; //@line 3901 "cPickle.c"
        var $266=HEAP[$265]; //@line 3901 "cPickle.c"
        var $267=$266+8; //@line 3901 "cPickle.c"
        var $268=HEAP[$267]; //@line 3901 "cPickle.c"
        var $269=$self_addr_i20; //@line 3901 "cPickle.c"
        var $270=$269+32; //@line 3901 "cPickle.c"
        var $271=HEAP[$270]; //@line 3901 "cPickle.c"
        var $272=$271+12; //@line 3901 "cPickle.c"
        var $273=HEAP[$272]; //@line 3901 "cPickle.c"
        var $274=($268)==($273); //@line 3901 "cPickle.c"
        if ($274) { __label__ = 53; break; } else { __label__ = 58; break; } //@line 3901 "cPickle.c"
      case 53: // $bb14_i
        var $275=$self_addr_i20; //@line 3901 "cPickle.c"
        var $276=$275+32; //@line 3901 "cPickle.c"
        var $277=HEAP[$276]; //@line 3901 "cPickle.c"
        var $278=_Pdata_grow($277); //@line 3901 "cPickle.c"
        var $279=($278) < 0; //@line 3901 "cPickle.c"
        if ($279) { __label__ = 54; break; } else { __label__ = 58; break; } //@line 3901 "cPickle.c"
      case 54: // $bb15_i
        var $280=$obj_i; //@line 3901 "cPickle.c"
        var $281=$280; //@line 3901 "cPickle.c"
        var $282=HEAP[$281]; //@line 3901 "cPickle.c"
        var $283=($282) - 1; //@line 3901 "cPickle.c"
        var $284=$obj_i; //@line 3901 "cPickle.c"
        var $285=$284; //@line 3901 "cPickle.c"
        HEAP[$285]=$283; //@line 3901 "cPickle.c"
        var $286=$obj_i; //@line 3901 "cPickle.c"
        var $287=$286; //@line 3901 "cPickle.c"
        var $288=HEAP[$287]; //@line 3901 "cPickle.c"
        var $289=($288)==0; //@line 3901 "cPickle.c"
        if ($289) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 3901 "cPickle.c"
      case 55: // $bb16_i
        var $290=$obj_i; //@line 3901 "cPickle.c"
        var $291=$290+4; //@line 3901 "cPickle.c"
        var $292=HEAP[$291]; //@line 3901 "cPickle.c"
        var $293=$292+24; //@line 3901 "cPickle.c"
        var $294=HEAP[$293]; //@line 3901 "cPickle.c"
        var $295=$obj_i; //@line 3901 "cPickle.c"
        FUNCTION_TABLE[$294]($295); //@line 3901 "cPickle.c"
        __label__ = 56; break; //@line 3901 "cPickle.c"
      case 56: // $bb17_i
        $20=-1; //@line 3901 "cPickle.c"
        __label__ = 57; break; //@line 3901 "cPickle.c"
      case 57: // $load_obj_exit_thread
        $retval_i21=-1; //@line 3891 "cPickle.c"
        __label__ = 270; break;
      case 58: // $load_obj_exit
        var $296=$self_addr_i20; //@line 3901 "cPickle.c"
        var $297=$296+32; //@line 3901 "cPickle.c"
        var $298=HEAP[$297]; //@line 3901 "cPickle.c"
        var $299=$298+16; //@line 3901 "cPickle.c"
        var $300=HEAP[$299]; //@line 3901 "cPickle.c"
        var $301=$self_addr_i20; //@line 3901 "cPickle.c"
        var $302=$301+32; //@line 3901 "cPickle.c"
        var $303=HEAP[$302]; //@line 3901 "cPickle.c"
        var $304=$303+8; //@line 3901 "cPickle.c"
        var $305=HEAP[$304]; //@line 3901 "cPickle.c"
        var $306=$300+4*$305; //@line 3901 "cPickle.c"
        var $307=$obj_i; //@line 3901 "cPickle.c"
        HEAP[$306]=$307; //@line 3901 "cPickle.c"
        var $308=($305) + 1; //@line 3901 "cPickle.c"
        var $309=$303+8; //@line 3901 "cPickle.c"
        HEAP[$309]=$308; //@line 3901 "cPickle.c"
        $20=0; //@line 3902 "cPickle.c"
        $retval_i21=0; //@line 3891 "cPickle.c"
        __label__ = 2; break;
      case 59: // $bb53
        var $310=$self_addr; //@line 4815 "cPickle.c"
        $self_addr_i27=$310;
        $class_i30=0; //@line 3909 "cPickle.c"
        $obj_i31=0; //@line 3909 "cPickle.c"
        var $311=$self_addr_i27; //@line 3913 "cPickle.c"
        $self_addr_i_i25=$311;
        var $312=$self_addr_i_i25; //@line 3320 "cPickle.c"
        var $313=$312+52; //@line 3320 "cPickle.c"
        var $314=HEAP[$313]; //@line 3320 "cPickle.c"
        var $315=($314) <= 0; //@line 3320 "cPickle.c"
        if ($315) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 3320 "cPickle.c"
      case 60: // $marker_exit_thread_i34
        var $316=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($316, __str78); //@line 3321 "cPickle.c"
        $17=-1; //@line 3322 "cPickle.c"
        $retval_i_i26=-1; //@line 3322 "cPickle.c"
        $i_i32=-1; //@line 3913 "cPickle.c"
        __label__ = 62; break;
      case 61: // $marker_exit_i35
        var $317=$self_addr_i_i25; //@line 3325 "cPickle.c"
        var $318=$317+48; //@line 3325 "cPickle.c"
        var $319=HEAP[$318]; //@line 3325 "cPickle.c"
        var $320=$self_addr_i_i25; //@line 3325 "cPickle.c"
        var $321=$320+52; //@line 3325 "cPickle.c"
        var $322=HEAP[$321]; //@line 3325 "cPickle.c"
        var $323=($322) - 1; //@line 3325 "cPickle.c"
        var $324=$self_addr_i_i25; //@line 3325 "cPickle.c"
        var $325=$324+52; //@line 3325 "cPickle.c"
        HEAP[$325]=$323; //@line 3325 "cPickle.c"
        var $326=$self_addr_i_i25; //@line 3325 "cPickle.c"
        var $327=$326+52; //@line 3325 "cPickle.c"
        var $328=HEAP[$327]; //@line 3325 "cPickle.c"
        var $329=$319+4*$328; //@line 3325 "cPickle.c"
        var $330=HEAP[$329]; //@line 3325 "cPickle.c"
        $17=$330; //@line 3325 "cPickle.c"
        $retval_i_i26=$330; //@line 3322 "cPickle.c"
        $i_i32=$330; //@line 3913 "cPickle.c"
        var $331=($330) < 0; //@line 3913 "cPickle.c"
        if ($331) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 3913 "cPickle.c"
      case 62: // $bb_i36
        $18=-1; //@line 3913 "cPickle.c"
        __label__ = 92; break; //@line 3913 "cPickle.c"
      case 63: // $bb1_i37
        var $332=$self_addr_i27; //@line 3915 "cPickle.c"
        var $333=$332+64; //@line 3915 "cPickle.c"
        var $334=HEAP[$333]; //@line 3915 "cPickle.c"
        var $335=$self_addr_i27; //@line 3915 "cPickle.c"
        var $336=FUNCTION_TABLE[$334]($335, $s_i33); //@line 3915 "cPickle.c"
        $len_i=$336; //@line 3915 "cPickle.c"
        var $337=$len_i; //@line 3915 "cPickle.c"
        var $338=($337) < 0; //@line 3915 "cPickle.c"
        if ($338) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 3915 "cPickle.c"
      case 64: // $bb2_i38
        $18=-1; //@line 3915 "cPickle.c"
        __label__ = 92; break; //@line 3915 "cPickle.c"
      case 65: // $bb3_i39
        var $339=$len_i; //@line 3916 "cPickle.c"
        var $340=($339) <= 1; //@line 3916 "cPickle.c"
        if ($340) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 3916 "cPickle.c"
      case 66: // $bb4_i
        var $341=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($341, __str79); //@line 3339 "cPickle.c"
        $16=-1; //@line 3340 "cPickle.c"
        var $342=$16; //@line 3340 "cPickle.c"
        $retval_i1_i=$342; //@line 3340 "cPickle.c"
        var $retval1_i_i=$retval_i1_i; //@line 3340 "cPickle.c"
        $18=$retval1_i_i; //@line 3916 "cPickle.c"
        __lastLabel__ = 66; __label__ = 93; break; //@line 3916 "cPickle.c"
      case 67: // $bb5_i
        var $343=$len_i; //@line 3917 "cPickle.c"
        var $344=($343) - 1; //@line 3917 "cPickle.c"
        var $345=HEAP[$s_i33]; //@line 3917 "cPickle.c"
        var $346=_PyString_FromStringAndSize($345, $344); //@line 3917 "cPickle.c"
        $module_name_i=$346; //@line 3917 "cPickle.c"
        var $347=$module_name_i; //@line 3918 "cPickle.c"
        var $348=($347)==0; //@line 3918 "cPickle.c"
        if ($348) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 3918 "cPickle.c"
      case 68: // $bb6_i40
        $18=-1; //@line 3918 "cPickle.c"
        __label__ = 92; break; //@line 3918 "cPickle.c"
      case 69: // $bb7_i41
        var $349=$self_addr_i27; //@line 3920 "cPickle.c"
        var $350=$349+64; //@line 3920 "cPickle.c"
        var $351=HEAP[$350]; //@line 3920 "cPickle.c"
        var $352=$self_addr_i27; //@line 3920 "cPickle.c"
        var $353=FUNCTION_TABLE[$351]($352, $s_i33); //@line 3920 "cPickle.c"
        $len_i=$353; //@line 3920 "cPickle.c"
        var $354=$len_i; //@line 3920 "cPickle.c"
        var $355=($354) >= 0; //@line 3920 "cPickle.c"
        if ($355) { __label__ = 70; break; } else { __label__ = 75; break; } //@line 3920 "cPickle.c"
      case 70: // $bb8_i42
        var $356=$len_i; //@line 3921 "cPickle.c"
        var $357=($356) <= 1; //@line 3921 "cPickle.c"
        if ($357) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 3921 "cPickle.c"
      case 71: // $bb9_i43
        var $358=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($358, __str79); //@line 3339 "cPickle.c"
        $15=-1; //@line 3340 "cPickle.c"
        var $359=$15; //@line 3340 "cPickle.c"
        $retval_i2_i=$359; //@line 3340 "cPickle.c"
        var $retval1_i3_i=$retval_i2_i; //@line 3340 "cPickle.c"
        $18=$retval1_i3_i; //@line 3921 "cPickle.c"
        __lastLabel__ = 71; __label__ = 93; break; //@line 3921 "cPickle.c"
      case 72: // $bb10_i44
        var $360=$len_i; //@line 3922 "cPickle.c"
        var $361=($360) - 1; //@line 3922 "cPickle.c"
        var $362=HEAP[$s_i33]; //@line 3922 "cPickle.c"
        var $363=_PyString_FromStringAndSize($362, $361); //@line 3922 "cPickle.c"
        $class_name_i=$363; //@line 3922 "cPickle.c"
        var $364=$class_name_i; //@line 3922 "cPickle.c"
        var $365=($364)!=0; //@line 3922 "cPickle.c"
        if ($365) { __label__ = 73; break; } else { __label__ = 75; break; } //@line 3922 "cPickle.c"
      case 73: // $bb11_i45
        var $366=$self_addr_i27; //@line 3923 "cPickle.c"
        var $367=$366+76; //@line 3923 "cPickle.c"
        var $368=HEAP[$367]; //@line 3923 "cPickle.c"
        var $369=$module_name_i; //@line 3923 "cPickle.c"
        var $370=$class_name_i; //@line 3923 "cPickle.c"
        var $371=_find_class($369, $370, $368); //@line 3923 "cPickle.c"
        $class_i30=$371; //@line 3923 "cPickle.c"
        var $372=$class_name_i; //@line 3925 "cPickle.c"
        var $373=$372; //@line 3925 "cPickle.c"
        var $374=HEAP[$373]; //@line 3925 "cPickle.c"
        var $375=($374) - 1; //@line 3925 "cPickle.c"
        var $376=$class_name_i; //@line 3925 "cPickle.c"
        var $377=$376; //@line 3925 "cPickle.c"
        HEAP[$377]=$375; //@line 3925 "cPickle.c"
        var $378=$class_name_i; //@line 3925 "cPickle.c"
        var $379=$378; //@line 3925 "cPickle.c"
        var $380=HEAP[$379]; //@line 3925 "cPickle.c"
        var $381=($380)==0; //@line 3925 "cPickle.c"
        if ($381) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 3925 "cPickle.c"
      case 74: // $bb12_i46
        var $382=$class_name_i; //@line 3925 "cPickle.c"
        var $383=$382+4; //@line 3925 "cPickle.c"
        var $384=HEAP[$383]; //@line 3925 "cPickle.c"
        var $385=$384+24; //@line 3925 "cPickle.c"
        var $386=HEAP[$385]; //@line 3925 "cPickle.c"
        var $387=$class_name_i; //@line 3925 "cPickle.c"
        FUNCTION_TABLE[$386]($387); //@line 3925 "cPickle.c"
        __label__ = 75; break; //@line 3925 "cPickle.c"
      case 75: // $bb13_i47
        var $388=$module_name_i; //@line 3928 "cPickle.c"
        var $389=$388; //@line 3928 "cPickle.c"
        var $390=HEAP[$389]; //@line 3928 "cPickle.c"
        var $391=($390) - 1; //@line 3928 "cPickle.c"
        var $392=$module_name_i; //@line 3928 "cPickle.c"
        var $393=$392; //@line 3928 "cPickle.c"
        HEAP[$393]=$391; //@line 3928 "cPickle.c"
        var $394=$module_name_i; //@line 3928 "cPickle.c"
        var $395=$394; //@line 3928 "cPickle.c"
        var $396=HEAP[$395]; //@line 3928 "cPickle.c"
        var $397=($396)==0; //@line 3928 "cPickle.c"
        if ($397) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 3928 "cPickle.c"
      case 76: // $bb14_i48
        var $398=$module_name_i; //@line 3928 "cPickle.c"
        var $399=$398+4; //@line 3928 "cPickle.c"
        var $400=HEAP[$399]; //@line 3928 "cPickle.c"
        var $401=$400+24; //@line 3928 "cPickle.c"
        var $402=HEAP[$401]; //@line 3928 "cPickle.c"
        var $403=$module_name_i; //@line 3928 "cPickle.c"
        FUNCTION_TABLE[$402]($403); //@line 3928 "cPickle.c"
        __label__ = 77; break; //@line 3928 "cPickle.c"
      case 77: // $bb15_i49
        var $404=$class_i30; //@line 3930 "cPickle.c"
        var $405=($404)==0; //@line 3930 "cPickle.c"
        if ($405) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 3930 "cPickle.c"
      case 78: // $bb16_i50
        $18=-1; //@line 3930 "cPickle.c"
        __label__ = 92; break; //@line 3930 "cPickle.c"
      case 79: // $bb17_i51
        var $406=$self_addr_i27; //@line 3932 "cPickle.c"
        var $407=$406+32; //@line 3932 "cPickle.c"
        var $408=HEAP[$407]; //@line 3932 "cPickle.c"
        var $409=$i_i32; //@line 3932 "cPickle.c"
        var $410=_Pdata_popTuple($408, $409); //@line 3932 "cPickle.c"
        $tup_i29=$410; //@line 3932 "cPickle.c"
        var $411=$tup_i29; //@line 3932 "cPickle.c"
        var $412=($411)!=0; //@line 3932 "cPickle.c"
        if ($412) { __label__ = 80; break; } else { __label__ = 82; break; } //@line 3932 "cPickle.c"
      case 80: // $bb18_i52
        var $413=$class_i30; //@line 3933 "cPickle.c"
        var $414=$tup_i29; //@line 3933 "cPickle.c"
        var $415=_Instance_New($413, $414); //@line 3933 "cPickle.c"
        $obj_i31=$415; //@line 3933 "cPickle.c"
        var $416=$tup_i29; //@line 3934 "cPickle.c"
        var $417=$416; //@line 3934 "cPickle.c"
        var $418=HEAP[$417]; //@line 3934 "cPickle.c"
        var $419=($418) - 1; //@line 3934 "cPickle.c"
        var $420=$tup_i29; //@line 3934 "cPickle.c"
        var $421=$420; //@line 3934 "cPickle.c"
        HEAP[$421]=$419; //@line 3934 "cPickle.c"
        var $422=$tup_i29; //@line 3934 "cPickle.c"
        var $423=$422; //@line 3934 "cPickle.c"
        var $424=HEAP[$423]; //@line 3934 "cPickle.c"
        var $425=($424)==0; //@line 3934 "cPickle.c"
        if ($425) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 3934 "cPickle.c"
      case 81: // $bb19_i
        var $426=$tup_i29; //@line 3934 "cPickle.c"
        var $427=$426+4; //@line 3934 "cPickle.c"
        var $428=HEAP[$427]; //@line 3934 "cPickle.c"
        var $429=$428+24; //@line 3934 "cPickle.c"
        var $430=HEAP[$429]; //@line 3934 "cPickle.c"
        var $431=$tup_i29; //@line 3934 "cPickle.c"
        FUNCTION_TABLE[$430]($431); //@line 3934 "cPickle.c"
        __label__ = 82; break; //@line 3934 "cPickle.c"
      case 82: // $bb20_i
        var $432=$class_i30; //@line 3936 "cPickle.c"
        var $433=$432; //@line 3936 "cPickle.c"
        var $434=HEAP[$433]; //@line 3936 "cPickle.c"
        var $435=($434) - 1; //@line 3936 "cPickle.c"
        var $436=$class_i30; //@line 3936 "cPickle.c"
        var $437=$436; //@line 3936 "cPickle.c"
        HEAP[$437]=$435; //@line 3936 "cPickle.c"
        var $438=$class_i30; //@line 3936 "cPickle.c"
        var $439=$438; //@line 3936 "cPickle.c"
        var $440=HEAP[$439]; //@line 3936 "cPickle.c"
        var $441=($440)==0; //@line 3936 "cPickle.c"
        if ($441) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 3936 "cPickle.c"
      case 83: // $bb21_i
        var $442=$class_i30; //@line 3936 "cPickle.c"
        var $443=$442+4; //@line 3936 "cPickle.c"
        var $444=HEAP[$443]; //@line 3936 "cPickle.c"
        var $445=$444+24; //@line 3936 "cPickle.c"
        var $446=HEAP[$445]; //@line 3936 "cPickle.c"
        var $447=$class_i30; //@line 3936 "cPickle.c"
        FUNCTION_TABLE[$446]($447); //@line 3936 "cPickle.c"
        __label__ = 84; break; //@line 3936 "cPickle.c"
      case 84: // $bb22_i
        var $448=$obj_i31; //@line 3938 "cPickle.c"
        var $449=($448)==0; //@line 3938 "cPickle.c"
        if ($449) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 3938 "cPickle.c"
      case 85: // $bb23_i
        $18=-1; //@line 3938 "cPickle.c"
        __label__ = 92; break; //@line 3938 "cPickle.c"
      case 86: // $bb24_i
        var $450=$self_addr_i27; //@line 3940 "cPickle.c"
        var $451=$450+32; //@line 3940 "cPickle.c"
        var $452=HEAP[$451]; //@line 3940 "cPickle.c"
        var $453=$452+8; //@line 3940 "cPickle.c"
        var $454=HEAP[$453]; //@line 3940 "cPickle.c"
        var $455=$self_addr_i27; //@line 3940 "cPickle.c"
        var $456=$455+32; //@line 3940 "cPickle.c"
        var $457=HEAP[$456]; //@line 3940 "cPickle.c"
        var $458=$457+12; //@line 3940 "cPickle.c"
        var $459=HEAP[$458]; //@line 3940 "cPickle.c"
        var $460=($454)==($459); //@line 3940 "cPickle.c"
        if ($460) { __label__ = 87; break; } else { __label__ = 91; break; } //@line 3940 "cPickle.c"
      case 87: // $bb25_i
        var $461=$self_addr_i27; //@line 3940 "cPickle.c"
        var $462=$461+32; //@line 3940 "cPickle.c"
        var $463=HEAP[$462]; //@line 3940 "cPickle.c"
        var $464=_Pdata_grow($463); //@line 3940 "cPickle.c"
        var $465=($464) < 0; //@line 3940 "cPickle.c"
        if ($465) { __label__ = 88; break; } else { __label__ = 91; break; } //@line 3940 "cPickle.c"
      case 88: // $bb26_i
        var $466=$obj_i31; //@line 3940 "cPickle.c"
        var $467=$466; //@line 3940 "cPickle.c"
        var $468=HEAP[$467]; //@line 3940 "cPickle.c"
        var $469=($468) - 1; //@line 3940 "cPickle.c"
        var $470=$obj_i31; //@line 3940 "cPickle.c"
        var $471=$470; //@line 3940 "cPickle.c"
        HEAP[$471]=$469; //@line 3940 "cPickle.c"
        var $472=$obj_i31; //@line 3940 "cPickle.c"
        var $473=$472; //@line 3940 "cPickle.c"
        var $474=HEAP[$473]; //@line 3940 "cPickle.c"
        var $475=($474)==0; //@line 3940 "cPickle.c"
        if ($475) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 3940 "cPickle.c"
      case 89: // $bb27_i
        var $476=$obj_i31; //@line 3940 "cPickle.c"
        var $477=$476+4; //@line 3940 "cPickle.c"
        var $478=HEAP[$477]; //@line 3940 "cPickle.c"
        var $479=$478+24; //@line 3940 "cPickle.c"
        var $480=HEAP[$479]; //@line 3940 "cPickle.c"
        var $481=$obj_i31; //@line 3940 "cPickle.c"
        FUNCTION_TABLE[$480]($481); //@line 3940 "cPickle.c"
        __label__ = 90; break; //@line 3940 "cPickle.c"
      case 90: // $bb28_i
        $18=-1; //@line 3940 "cPickle.c"
        __label__ = 92; break; //@line 3940 "cPickle.c"
      case 91: // $load_inst_exit_thread204
        var $482=$self_addr_i27; //@line 3940 "cPickle.c"
        var $483=$482+32; //@line 3940 "cPickle.c"
        var $484=HEAP[$483]; //@line 3940 "cPickle.c"
        var $485=$484+16; //@line 3940 "cPickle.c"
        var $486=HEAP[$485]; //@line 3940 "cPickle.c"
        var $487=$self_addr_i27; //@line 3940 "cPickle.c"
        var $488=$487+32; //@line 3940 "cPickle.c"
        var $489=HEAP[$488]; //@line 3940 "cPickle.c"
        var $490=$489+8; //@line 3940 "cPickle.c"
        var $491=HEAP[$490]; //@line 3940 "cPickle.c"
        var $492=$486+4*$491; //@line 3940 "cPickle.c"
        var $493=$obj_i31; //@line 3940 "cPickle.c"
        HEAP[$492]=$493; //@line 3940 "cPickle.c"
        var $494=($491) + 1; //@line 3940 "cPickle.c"
        var $495=$489+8; //@line 3940 "cPickle.c"
        HEAP[$495]=$494; //@line 3940 "cPickle.c"
        $18=0; //@line 3941 "cPickle.c"
        $retval_i28=0; //@line 3913 "cPickle.c"
        __label__ = 2; break;
      case 92: // $load_inst_exit_thread
        $retval_i28=-1; //@line 3913 "cPickle.c"
        __label__ = 270; break;
      case 93: // $load_inst_exit
        var $496=__lastLabel__ == 66 ? $retval1_i_i : ($retval1_i3_i);
        $retval_i28=$496; //@line 3913 "cPickle.c"
        var $497=($496) < 0; //@line 4815 "cPickle.c"
        if ($497) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4815 "cPickle.c"
      case 94: // $bb55
        var $498=$self_addr; //@line 4820 "cPickle.c"
        $self_addr_i53=$498;
        $args_i=0; //@line 3947 "cPickle.c"
        $clsraw_i=0; //@line 3948 "cPickle.c"
        var $499=$self_addr_i53; //@line 3955 "cPickle.c"
        var $500=$499+32; //@line 3955 "cPickle.c"
        var $501=HEAP[$500]; //@line 3955 "cPickle.c"
        var $502=$501+8; //@line 3955 "cPickle.c"
        var $503=HEAP[$502]; //@line 3955 "cPickle.c"
        var $504=($503)!=0; //@line 3955 "cPickle.c"
        if ($504) { __label__ = 96; break; } else { __label__ = 95; break; } //@line 3955 "cPickle.c"
      case 95: // $Fail_thread_i
        var $505=HEAP[_UnpicklingError]; //@line 3955 "cPickle.c"
        _PyErr_SetString($505, __str88); //@line 3955 "cPickle.c"
        $args_i=0; //@line 3955 "cPickle.c"
        __label__ = 120; break;
      case 96: // $bb2_i56
        var $506=$self_addr_i53; //@line 3955 "cPickle.c"
        var $507=$506+32; //@line 3955 "cPickle.c"
        var $508=HEAP[$507]; //@line 3955 "cPickle.c"
        var $509=$508+16; //@line 3955 "cPickle.c"
        var $510=HEAP[$509]; //@line 3955 "cPickle.c"
        var $511=$self_addr_i53; //@line 3955 "cPickle.c"
        var $512=$511+32; //@line 3955 "cPickle.c"
        var $513=HEAP[$512]; //@line 3955 "cPickle.c"
        var $514=$513+8; //@line 3955 "cPickle.c"
        var $515=HEAP[$514]; //@line 3955 "cPickle.c"
        var $516=($515) - 1; //@line 3955 "cPickle.c"
        var $517=$513+8; //@line 3955 "cPickle.c"
        HEAP[$517]=$516; //@line 3955 "cPickle.c"
        var $518=$513+8; //@line 3955 "cPickle.c"
        var $519=HEAP[$518]; //@line 3955 "cPickle.c"
        var $520=$510+4*$519; //@line 3955 "cPickle.c"
        var $521=HEAP[$520]; //@line 3955 "cPickle.c"
        $args_i=$521; //@line 3955 "cPickle.c"
        var $522=($521)==0; //@line 3956 "cPickle.c"
        if ($522) { __label__ = 120; break; } else { __label__ = 97; break; } //@line 3956 "cPickle.c"
      case 97: // $bb3_i57
        var $523=$args_i; //@line 3957 "cPickle.c"
        var $524=$523+4; //@line 3957 "cPickle.c"
        var $525=HEAP[$524]; //@line 3957 "cPickle.c"
        var $526=$525+84; //@line 3957 "cPickle.c"
        var $527=HEAP[$526]; //@line 3957 "cPickle.c"
        var $528=($527) & 67108864; //@line 3957 "cPickle.c"
        var $529=($528)==0; //@line 3957 "cPickle.c"
        if ($529) { __label__ = 98; break; } else { __label__ = 99; break; } //@line 3957 "cPickle.c"
      case 98: // $bb4_i58
        var $530=HEAP[_UnpicklingError]; //@line 3958 "cPickle.c"
        _PyErr_SetString($530, __str89); //@line 3958 "cPickle.c"
        __label__ = 117; break; //@line 3958 "cPickle.c"
      case 99: // $bb5_i59
        var $531=$self_addr_i53; //@line 3963 "cPickle.c"
        var $532=$531+32; //@line 3963 "cPickle.c"
        var $533=HEAP[$532]; //@line 3963 "cPickle.c"
        var $534=$533+8; //@line 3963 "cPickle.c"
        var $535=HEAP[$534]; //@line 3963 "cPickle.c"
        var $536=($535)!=0; //@line 3963 "cPickle.c"
        if ($536) { __label__ = 100; break; } else { __label__ = 101; break; } //@line 3963 "cPickle.c"
      case 100: // $bb6_i60
        var $537=$self_addr_i53; //@line 3963 "cPickle.c"
        var $538=$537+32; //@line 3963 "cPickle.c"
        var $539=HEAP[$538]; //@line 3963 "cPickle.c"
        var $540=$539+16; //@line 3963 "cPickle.c"
        var $541=HEAP[$540]; //@line 3963 "cPickle.c"
        var $542=$self_addr_i53; //@line 3963 "cPickle.c"
        var $543=$542+32; //@line 3963 "cPickle.c"
        var $544=HEAP[$543]; //@line 3963 "cPickle.c"
        var $545=$544+8; //@line 3963 "cPickle.c"
        var $546=HEAP[$545]; //@line 3963 "cPickle.c"
        var $547=($546) - 1; //@line 3963 "cPickle.c"
        var $548=$544+8; //@line 3963 "cPickle.c"
        HEAP[$548]=$547; //@line 3963 "cPickle.c"
        var $549=$544+8; //@line 3963 "cPickle.c"
        var $550=HEAP[$549]; //@line 3963 "cPickle.c"
        var $551=$541+4*$550; //@line 3963 "cPickle.c"
        var $552=HEAP[$551]; //@line 3963 "cPickle.c"
        $clsraw_i=$552; //@line 3963 "cPickle.c"
        __label__ = 102; break; //@line 3963 "cPickle.c"
      case 101: // $bb7_i61
        var $553=HEAP[_UnpicklingError]; //@line 3963 "cPickle.c"
        _PyErr_SetString($553, __str88); //@line 3963 "cPickle.c"
        $clsraw_i=0; //@line 3963 "cPickle.c"
        __label__ = 102; break; //@line 3963 "cPickle.c"
      case 102: // $bb8_i62
        var $554=$clsraw_i; //@line 3964 "cPickle.c"
        var $555=$554; //@line 3964 "cPickle.c"
        $cls_i=$555; //@line 3964 "cPickle.c"
        var $556=($555)==0; //@line 3965 "cPickle.c"
        if ($556) { __label__ = 117; break; } else { __label__ = 103; break; } //@line 3965 "cPickle.c"
      case 103: // $bb9_i63
        var $557=$cls_i; //@line 3966 "cPickle.c"
        var $558=$557; //@line 3966 "cPickle.c"
        var $559=$558+4; //@line 3966 "cPickle.c"
        var $560=HEAP[$559]; //@line 3966 "cPickle.c"
        var $561=$560+84; //@line 3966 "cPickle.c"
        var $562=HEAP[$561]; //@line 3966 "cPickle.c"
        var $563=($562) >= 0; //@line 3966 "cPickle.c"
        if ($563) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 3966 "cPickle.c"
      case 104: // $bb10_i64
        var $564=HEAP[_UnpicklingError]; //@line 3967 "cPickle.c"
        _PyErr_SetString($564, __str90); //@line 3967 "cPickle.c"
        __label__ = 117; break; //@line 3967 "cPickle.c"
      case 105: // $bb11_i65
        var $565=$cls_i; //@line 3971 "cPickle.c"
        var $566=$565+156; //@line 3971 "cPickle.c"
        var $567=HEAP[$566]; //@line 3971 "cPickle.c"
        var $568=($567)==0; //@line 3971 "cPickle.c"
        if ($568) { __label__ = 106; break; } else { __label__ = 107; break; } //@line 3971 "cPickle.c"
      case 106: // $bb12_i66
        var $569=HEAP[_UnpicklingError]; //@line 3972 "cPickle.c"
        _PyErr_SetString($569, __str91); //@line 3972 "cPickle.c"
        __label__ = 117; break; //@line 3972 "cPickle.c"
      case 107: // $bb13_i67
        var $570=$cls_i; //@line 3978 "cPickle.c"
        var $571=$570+156; //@line 3978 "cPickle.c"
        var $572=HEAP[$571]; //@line 3978 "cPickle.c"
        var $573=$cls_i; //@line 3978 "cPickle.c"
        var $574=$args_i; //@line 3978 "cPickle.c"
        var $575=FUNCTION_TABLE[$572]($573, $574, 0); //@line 3978 "cPickle.c"
        $obj_i55=$575; //@line 3978 "cPickle.c"
        var $576=$obj_i55; //@line 3979 "cPickle.c"
        var $577=($576)==0; //@line 3979 "cPickle.c"
        if ($577) { __label__ = 117; break; } else { __label__ = 108; break; } //@line 3979 "cPickle.c"
      case 108: // $bb14_i68
        var $578=$args_i; //@line 3981 "cPickle.c"
        var $579=$578; //@line 3981 "cPickle.c"
        var $580=HEAP[$579]; //@line 3981 "cPickle.c"
        var $581=($580) - 1; //@line 3981 "cPickle.c"
        var $582=$args_i; //@line 3981 "cPickle.c"
        var $583=$582; //@line 3981 "cPickle.c"
        HEAP[$583]=$581; //@line 3981 "cPickle.c"
        var $584=$args_i; //@line 3981 "cPickle.c"
        var $585=$584; //@line 3981 "cPickle.c"
        var $586=HEAP[$585]; //@line 3981 "cPickle.c"
        var $587=($586)==0; //@line 3981 "cPickle.c"
        if ($587) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 3981 "cPickle.c"
      case 109: // $bb15_i69
        var $588=$args_i; //@line 3981 "cPickle.c"
        var $589=$588+4; //@line 3981 "cPickle.c"
        var $590=HEAP[$589]; //@line 3981 "cPickle.c"
        var $591=$590+24; //@line 3981 "cPickle.c"
        var $592=HEAP[$591]; //@line 3981 "cPickle.c"
        var $593=$args_i; //@line 3981 "cPickle.c"
        FUNCTION_TABLE[$592]($593); //@line 3981 "cPickle.c"
        __label__ = 110; break; //@line 3981 "cPickle.c"
      case 110: // $bb16_i70
        var $594=$clsraw_i; //@line 3982 "cPickle.c"
        var $595=$594; //@line 3982 "cPickle.c"
        var $596=HEAP[$595]; //@line 3982 "cPickle.c"
        var $597=($596) - 1; //@line 3982 "cPickle.c"
        var $598=$clsraw_i; //@line 3982 "cPickle.c"
        var $599=$598; //@line 3982 "cPickle.c"
        HEAP[$599]=$597; //@line 3982 "cPickle.c"
        var $600=$clsraw_i; //@line 3982 "cPickle.c"
        var $601=$600; //@line 3982 "cPickle.c"
        var $602=HEAP[$601]; //@line 3982 "cPickle.c"
        var $603=($602)==0; //@line 3982 "cPickle.c"
        if ($603) { __label__ = 111; break; } else { __label__ = 112; break; } //@line 3982 "cPickle.c"
      case 111: // $bb17_i71
        var $604=$clsraw_i; //@line 3982 "cPickle.c"
        var $605=$604+4; //@line 3982 "cPickle.c"
        var $606=HEAP[$605]; //@line 3982 "cPickle.c"
        var $607=$606+24; //@line 3982 "cPickle.c"
        var $608=HEAP[$607]; //@line 3982 "cPickle.c"
        var $609=$clsraw_i; //@line 3982 "cPickle.c"
        FUNCTION_TABLE[$608]($609); //@line 3982 "cPickle.c"
        __label__ = 112; break; //@line 3982 "cPickle.c"
      case 112: // $bb18_i72
        var $610=$self_addr_i53; //@line 3983 "cPickle.c"
        var $611=$610+32; //@line 3983 "cPickle.c"
        var $612=HEAP[$611]; //@line 3983 "cPickle.c"
        var $613=$612+8; //@line 3983 "cPickle.c"
        var $614=HEAP[$613]; //@line 3983 "cPickle.c"
        var $615=$self_addr_i53; //@line 3983 "cPickle.c"
        var $616=$615+32; //@line 3983 "cPickle.c"
        var $617=HEAP[$616]; //@line 3983 "cPickle.c"
        var $618=$617+12; //@line 3983 "cPickle.c"
        var $619=HEAP[$618]; //@line 3983 "cPickle.c"
        var $620=($614)==($619); //@line 3983 "cPickle.c"
        if ($620) { __label__ = 113; break; } else { __label__ = 125; break; } //@line 3983 "cPickle.c"
      case 113: // $bb19_i73
        var $621=$self_addr_i53; //@line 3983 "cPickle.c"
        var $622=$621+32; //@line 3983 "cPickle.c"
        var $623=HEAP[$622]; //@line 3983 "cPickle.c"
        var $624=_Pdata_grow($623); //@line 3983 "cPickle.c"
        var $625=($624) < 0; //@line 3983 "cPickle.c"
        if ($625) { __label__ = 114; break; } else { __label__ = 125; break; } //@line 3983 "cPickle.c"
      case 114: // $bb20_i74
        var $626=$obj_i55; //@line 3983 "cPickle.c"
        var $627=$626; //@line 3983 "cPickle.c"
        var $628=HEAP[$627]; //@line 3983 "cPickle.c"
        var $629=($628) - 1; //@line 3983 "cPickle.c"
        var $630=$obj_i55; //@line 3983 "cPickle.c"
        var $631=$630; //@line 3983 "cPickle.c"
        HEAP[$631]=$629; //@line 3983 "cPickle.c"
        var $632=$obj_i55; //@line 3983 "cPickle.c"
        var $633=$632; //@line 3983 "cPickle.c"
        var $634=HEAP[$633]; //@line 3983 "cPickle.c"
        var $635=($634)==0; //@line 3983 "cPickle.c"
        if ($635) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 3983 "cPickle.c"
      case 115: // $bb21_i75
        var $636=$obj_i55; //@line 3983 "cPickle.c"
        var $637=$636+4; //@line 3983 "cPickle.c"
        var $638=HEAP[$637]; //@line 3983 "cPickle.c"
        var $639=$638+24; //@line 3983 "cPickle.c"
        var $640=HEAP[$639]; //@line 3983 "cPickle.c"
        var $641=$obj_i55; //@line 3983 "cPickle.c"
        FUNCTION_TABLE[$640]($641); //@line 3983 "cPickle.c"
        __label__ = 116; break; //@line 3983 "cPickle.c"
      case 116: // $bb22_i76
        $14=-1; //@line 3983 "cPickle.c"
        __label__ = 124; break; //@line 3983 "cPickle.c"
      case 117: // $Fail_i
        var $_pr_pr_i=$args_i;
        var $642=($_pr_pr_i)!=0; //@line 3987 "cPickle.c"
        if ($642) { __label__ = 118; break; } else { __label__ = 120; break; } //@line 3987 "cPickle.c"
      case 118: // $bb24_i78
        var $643=$args_i; //@line 3987 "cPickle.c"
        var $644=$643; //@line 3987 "cPickle.c"
        var $645=HEAP[$644]; //@line 3987 "cPickle.c"
        var $646=($645) - 1; //@line 3987 "cPickle.c"
        var $647=$args_i; //@line 3987 "cPickle.c"
        var $648=$647; //@line 3987 "cPickle.c"
        HEAP[$648]=$646; //@line 3987 "cPickle.c"
        var $649=$args_i; //@line 3987 "cPickle.c"
        var $650=$649; //@line 3987 "cPickle.c"
        var $651=HEAP[$650]; //@line 3987 "cPickle.c"
        var $652=($651)==0; //@line 3987 "cPickle.c"
        if ($652) { __label__ = 119; break; } else { __label__ = 120; break; } //@line 3987 "cPickle.c"
      case 119: // $bb25_i79
        var $653=$args_i; //@line 3987 "cPickle.c"
        var $654=$653+4; //@line 3987 "cPickle.c"
        var $655=HEAP[$654]; //@line 3987 "cPickle.c"
        var $656=$655+24; //@line 3987 "cPickle.c"
        var $657=HEAP[$656]; //@line 3987 "cPickle.c"
        var $658=$args_i; //@line 3987 "cPickle.c"
        FUNCTION_TABLE[$657]($658); //@line 3987 "cPickle.c"
        __label__ = 120; break; //@line 3987 "cPickle.c"
      case 120: // $bb26_i80
        var $659=$clsraw_i; //@line 3988 "cPickle.c"
        var $660=($659)!=0; //@line 3988 "cPickle.c"
        if ($660) { __label__ = 121; break; } else { __label__ = 123; break; } //@line 3988 "cPickle.c"
      case 121: // $bb27_i81
        var $661=$clsraw_i; //@line 3988 "cPickle.c"
        var $662=$661; //@line 3988 "cPickle.c"
        var $663=HEAP[$662]; //@line 3988 "cPickle.c"
        var $664=($663) - 1; //@line 3988 "cPickle.c"
        var $665=$clsraw_i; //@line 3988 "cPickle.c"
        var $666=$665; //@line 3988 "cPickle.c"
        HEAP[$666]=$664; //@line 3988 "cPickle.c"
        var $667=$clsraw_i; //@line 3988 "cPickle.c"
        var $668=$667; //@line 3988 "cPickle.c"
        var $669=HEAP[$668]; //@line 3988 "cPickle.c"
        var $670=($669)==0; //@line 3988 "cPickle.c"
        if ($670) { __label__ = 122; break; } else { __label__ = 123; break; } //@line 3988 "cPickle.c"
      case 122: // $bb28_i82
        var $671=$clsraw_i; //@line 3988 "cPickle.c"
        var $672=$671+4; //@line 3988 "cPickle.c"
        var $673=HEAP[$672]; //@line 3988 "cPickle.c"
        var $674=$673+24; //@line 3988 "cPickle.c"
        var $675=HEAP[$674]; //@line 3988 "cPickle.c"
        var $676=$clsraw_i; //@line 3988 "cPickle.c"
        FUNCTION_TABLE[$675]($676); //@line 3988 "cPickle.c"
        __label__ = 123; break; //@line 3988 "cPickle.c"
      case 123: // $bb29_i83
        $14=-1; //@line 3989 "cPickle.c"
        __label__ = 124; break; //@line 3989 "cPickle.c"
      case 124: // $load_newobj_exit_thread
        $retval_i54=-1; //@line 3983 "cPickle.c"
        __label__ = 270; break;
      case 125: // $load_newobj_exit
        var $677=$self_addr_i53; //@line 3983 "cPickle.c"
        var $678=$677+32; //@line 3983 "cPickle.c"
        var $679=HEAP[$678]; //@line 3983 "cPickle.c"
        var $680=$679+16; //@line 3983 "cPickle.c"
        var $681=HEAP[$680]; //@line 3983 "cPickle.c"
        var $682=$self_addr_i53; //@line 3983 "cPickle.c"
        var $683=$682+32; //@line 3983 "cPickle.c"
        var $684=HEAP[$683]; //@line 3983 "cPickle.c"
        var $685=$684+8; //@line 3983 "cPickle.c"
        var $686=HEAP[$685]; //@line 3983 "cPickle.c"
        var $687=$681+4*$686; //@line 3983 "cPickle.c"
        var $688=$obj_i55; //@line 3983 "cPickle.c"
        HEAP[$687]=$688; //@line 3983 "cPickle.c"
        var $689=($686) + 1; //@line 3983 "cPickle.c"
        var $690=$684+8; //@line 3983 "cPickle.c"
        HEAP[$690]=$689; //@line 3983 "cPickle.c"
        $14=0; //@line 3984 "cPickle.c"
        $retval_i54=0; //@line 3983 "cPickle.c"
        __label__ = 2; break;
      case 126: // $bb57
        var $691=$self_addr; //@line 4825 "cPickle.c"
        $self_addr_i87=$691;
        $class_i89=0; //@line 3995 "cPickle.c"
        $module_name_i90=0; //@line 3995 "cPickle.c"
        $class_name_i91=0; //@line 3995 "cPickle.c"
        var $692=$self_addr_i87; //@line 3999 "cPickle.c"
        var $693=$692+64; //@line 3999 "cPickle.c"
        var $694=HEAP[$693]; //@line 3999 "cPickle.c"
        var $695=$self_addr_i87; //@line 3999 "cPickle.c"
        var $696=FUNCTION_TABLE[$694]($695, $s_i93); //@line 3999 "cPickle.c"
        $len_i92=$696; //@line 3999 "cPickle.c"
        var $697=$len_i92; //@line 3999 "cPickle.c"
        var $698=($697) < 0; //@line 3999 "cPickle.c"
        if ($698) { __label__ = 127; break; } else { __label__ = 128; break; } //@line 3999 "cPickle.c"
      case 127: // $bb_i94
        $13=-1; //@line 3999 "cPickle.c"
        __label__ = 150; break; //@line 3999 "cPickle.c"
      case 128: // $bb1_i95
        var $699=$len_i92; //@line 4000 "cPickle.c"
        var $700=($699) <= 1; //@line 4000 "cPickle.c"
        if ($700) { __label__ = 129; break; } else { __label__ = 130; break; } //@line 4000 "cPickle.c"
      case 129: // $bb2_i97
        var $701=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($701, __str79); //@line 3339 "cPickle.c"
        $12=-1; //@line 3340 "cPickle.c"
        var $702=$12; //@line 3340 "cPickle.c"
        $retval_i_i86=$702; //@line 3340 "cPickle.c"
        var $retval1_i_i96=$retval_i_i86; //@line 3340 "cPickle.c"
        $13=$retval1_i_i96; //@line 4000 "cPickle.c"
        __lastLabel__ = 129; __label__ = 151; break; //@line 4000 "cPickle.c"
      case 130: // $bb3_i98
        var $703=$len_i92; //@line 4001 "cPickle.c"
        var $704=($703) - 1; //@line 4001 "cPickle.c"
        var $705=HEAP[$s_i93]; //@line 4001 "cPickle.c"
        var $706=_PyString_FromStringAndSize($705, $704); //@line 4001 "cPickle.c"
        $module_name_i90=$706; //@line 4001 "cPickle.c"
        var $707=$module_name_i90; //@line 4002 "cPickle.c"
        var $708=($707)==0; //@line 4002 "cPickle.c"
        if ($708) { __label__ = 131; break; } else { __label__ = 132; break; } //@line 4002 "cPickle.c"
      case 131: // $bb4_i99
        $13=-1; //@line 4002 "cPickle.c"
        __label__ = 150; break; //@line 4002 "cPickle.c"
      case 132: // $bb5_i100
        var $709=$self_addr_i87; //@line 4004 "cPickle.c"
        var $710=$709+64; //@line 4004 "cPickle.c"
        var $711=HEAP[$710]; //@line 4004 "cPickle.c"
        var $712=$self_addr_i87; //@line 4004 "cPickle.c"
        var $713=FUNCTION_TABLE[$711]($712, $s_i93); //@line 4004 "cPickle.c"
        $len_i92=$713; //@line 4004 "cPickle.c"
        var $714=$len_i92; //@line 4004 "cPickle.c"
        var $715=($714) >= 0; //@line 4004 "cPickle.c"
        if ($715) { __label__ = 133; break; } else { __label__ = 140; break; } //@line 4004 "cPickle.c"
      case 133: // $bb6_i101
        var $716=$len_i92; //@line 4005 "cPickle.c"
        var $717=($716) <= 1; //@line 4005 "cPickle.c"
        if ($717) { __label__ = 134; break; } else { __label__ = 137; break; } //@line 4005 "cPickle.c"
      case 134: // $bb7_i102
        var $718=$module_name_i90; //@line 4006 "cPickle.c"
        var $719=$718; //@line 4006 "cPickle.c"
        var $720=HEAP[$719]; //@line 4006 "cPickle.c"
        var $721=($720) - 1; //@line 4006 "cPickle.c"
        var $722=$module_name_i90; //@line 4006 "cPickle.c"
        var $723=$722; //@line 4006 "cPickle.c"
        HEAP[$723]=$721; //@line 4006 "cPickle.c"
        var $724=$module_name_i90; //@line 4006 "cPickle.c"
        var $725=$724; //@line 4006 "cPickle.c"
        var $726=HEAP[$725]; //@line 4006 "cPickle.c"
        var $727=($726)==0; //@line 4006 "cPickle.c"
        if ($727) { __label__ = 135; break; } else { __label__ = 136; break; } //@line 4006 "cPickle.c"
      case 135: // $bb8_i103
        var $728=$module_name_i90; //@line 4006 "cPickle.c"
        var $729=$728+4; //@line 4006 "cPickle.c"
        var $730=HEAP[$729]; //@line 4006 "cPickle.c"
        var $731=$730+24; //@line 4006 "cPickle.c"
        var $732=HEAP[$731]; //@line 4006 "cPickle.c"
        var $733=$module_name_i90; //@line 4006 "cPickle.c"
        FUNCTION_TABLE[$732]($733); //@line 4006 "cPickle.c"
        __label__ = 136; break; //@line 4006 "cPickle.c"
      case 136: // $bb9_i104
        var $734=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($734, __str79); //@line 3339 "cPickle.c"
        $11=-1; //@line 3340 "cPickle.c"
        var $735=$11; //@line 3340 "cPickle.c"
        $retval_i1_i85=$735; //@line 3340 "cPickle.c"
        var $retval1_i2_i=$retval_i1_i85; //@line 3340 "cPickle.c"
        $13=$retval1_i2_i; //@line 4007 "cPickle.c"
        __lastLabel__ = 136; __label__ = 151; break; //@line 4007 "cPickle.c"
      case 137: // $bb10_i105
        var $736=$len_i92; //@line 4009 "cPickle.c"
        var $737=($736) - 1; //@line 4009 "cPickle.c"
        var $738=HEAP[$s_i93]; //@line 4009 "cPickle.c"
        var $739=_PyString_FromStringAndSize($738, $737); //@line 4009 "cPickle.c"
        $class_name_i91=$739; //@line 4009 "cPickle.c"
        var $740=$class_name_i91; //@line 4009 "cPickle.c"
        var $741=($740)!=0; //@line 4009 "cPickle.c"
        if ($741) { __label__ = 138; break; } else { __label__ = 140; break; } //@line 4009 "cPickle.c"
      case 138: // $bb11_i106
        var $742=$self_addr_i87; //@line 4010 "cPickle.c"
        var $743=$742+76; //@line 4010 "cPickle.c"
        var $744=HEAP[$743]; //@line 4010 "cPickle.c"
        var $745=$module_name_i90; //@line 4010 "cPickle.c"
        var $746=$class_name_i91; //@line 4010 "cPickle.c"
        var $747=_find_class($745, $746, $744); //@line 4010 "cPickle.c"
        $class_i89=$747; //@line 4010 "cPickle.c"
        var $748=$class_name_i91; //@line 4012 "cPickle.c"
        var $749=$748; //@line 4012 "cPickle.c"
        var $750=HEAP[$749]; //@line 4012 "cPickle.c"
        var $751=($750) - 1; //@line 4012 "cPickle.c"
        var $752=$class_name_i91; //@line 4012 "cPickle.c"
        var $753=$752; //@line 4012 "cPickle.c"
        HEAP[$753]=$751; //@line 4012 "cPickle.c"
        var $754=$class_name_i91; //@line 4012 "cPickle.c"
        var $755=$754; //@line 4012 "cPickle.c"
        var $756=HEAP[$755]; //@line 4012 "cPickle.c"
        var $757=($756)==0; //@line 4012 "cPickle.c"
        if ($757) { __label__ = 139; break; } else { __label__ = 140; break; } //@line 4012 "cPickle.c"
      case 139: // $bb12_i107
        var $758=$class_name_i91; //@line 4012 "cPickle.c"
        var $759=$758+4; //@line 4012 "cPickle.c"
        var $760=HEAP[$759]; //@line 4012 "cPickle.c"
        var $761=$760+24; //@line 4012 "cPickle.c"
        var $762=HEAP[$761]; //@line 4012 "cPickle.c"
        var $763=$class_name_i91; //@line 4012 "cPickle.c"
        FUNCTION_TABLE[$762]($763); //@line 4012 "cPickle.c"
        __label__ = 140; break; //@line 4012 "cPickle.c"
      case 140: // $bb13_i108
        var $764=$module_name_i90; //@line 4015 "cPickle.c"
        var $765=$764; //@line 4015 "cPickle.c"
        var $766=HEAP[$765]; //@line 4015 "cPickle.c"
        var $767=($766) - 1; //@line 4015 "cPickle.c"
        var $768=$module_name_i90; //@line 4015 "cPickle.c"
        var $769=$768; //@line 4015 "cPickle.c"
        HEAP[$769]=$767; //@line 4015 "cPickle.c"
        var $770=$module_name_i90; //@line 4015 "cPickle.c"
        var $771=$770; //@line 4015 "cPickle.c"
        var $772=HEAP[$771]; //@line 4015 "cPickle.c"
        var $773=($772)==0; //@line 4015 "cPickle.c"
        if ($773) { __label__ = 141; break; } else { __label__ = 142; break; } //@line 4015 "cPickle.c"
      case 141: // $bb14_i109
        var $774=$module_name_i90; //@line 4015 "cPickle.c"
        var $775=$774+4; //@line 4015 "cPickle.c"
        var $776=HEAP[$775]; //@line 4015 "cPickle.c"
        var $777=$776+24; //@line 4015 "cPickle.c"
        var $778=HEAP[$777]; //@line 4015 "cPickle.c"
        var $779=$module_name_i90; //@line 4015 "cPickle.c"
        FUNCTION_TABLE[$778]($779); //@line 4015 "cPickle.c"
        __label__ = 142; break; //@line 4015 "cPickle.c"
      case 142: // $bb15_i110
        var $780=$class_i89; //@line 4017 "cPickle.c"
        var $781=($780)==0; //@line 4017 "cPickle.c"
        if ($781) { __label__ = 143; break; } else { __label__ = 144; break; } //@line 4017 "cPickle.c"
      case 143: // $bb16_i111
        $13=-1; //@line 4017 "cPickle.c"
        __label__ = 150; break; //@line 4017 "cPickle.c"
      case 144: // $bb17_i112
        var $782=$self_addr_i87; //@line 4018 "cPickle.c"
        var $783=$782+32; //@line 4018 "cPickle.c"
        var $784=HEAP[$783]; //@line 4018 "cPickle.c"
        var $785=$784+8; //@line 4018 "cPickle.c"
        var $786=HEAP[$785]; //@line 4018 "cPickle.c"
        var $787=$self_addr_i87; //@line 4018 "cPickle.c"
        var $788=$787+32; //@line 4018 "cPickle.c"
        var $789=HEAP[$788]; //@line 4018 "cPickle.c"
        var $790=$789+12; //@line 4018 "cPickle.c"
        var $791=HEAP[$790]; //@line 4018 "cPickle.c"
        var $792=($786)==($791); //@line 4018 "cPickle.c"
        if ($792) { __label__ = 145; break; } else { __label__ = 149; break; } //@line 4018 "cPickle.c"
      case 145: // $bb18_i113
        var $793=$self_addr_i87; //@line 4018 "cPickle.c"
        var $794=$793+32; //@line 4018 "cPickle.c"
        var $795=HEAP[$794]; //@line 4018 "cPickle.c"
        var $796=_Pdata_grow($795); //@line 4018 "cPickle.c"
        var $797=($796) < 0; //@line 4018 "cPickle.c"
        if ($797) { __label__ = 146; break; } else { __label__ = 149; break; } //@line 4018 "cPickle.c"
      case 146: // $bb19_i114
        var $798=$class_i89; //@line 4018 "cPickle.c"
        var $799=$798; //@line 4018 "cPickle.c"
        var $800=HEAP[$799]; //@line 4018 "cPickle.c"
        var $801=($800) - 1; //@line 4018 "cPickle.c"
        var $802=$class_i89; //@line 4018 "cPickle.c"
        var $803=$802; //@line 4018 "cPickle.c"
        HEAP[$803]=$801; //@line 4018 "cPickle.c"
        var $804=$class_i89; //@line 4018 "cPickle.c"
        var $805=$804; //@line 4018 "cPickle.c"
        var $806=HEAP[$805]; //@line 4018 "cPickle.c"
        var $807=($806)==0; //@line 4018 "cPickle.c"
        if ($807) { __label__ = 147; break; } else { __label__ = 148; break; } //@line 4018 "cPickle.c"
      case 147: // $bb20_i115
        var $808=$class_i89; //@line 4018 "cPickle.c"
        var $809=$808+4; //@line 4018 "cPickle.c"
        var $810=HEAP[$809]; //@line 4018 "cPickle.c"
        var $811=$810+24; //@line 4018 "cPickle.c"
        var $812=HEAP[$811]; //@line 4018 "cPickle.c"
        var $813=$class_i89; //@line 4018 "cPickle.c"
        FUNCTION_TABLE[$812]($813); //@line 4018 "cPickle.c"
        __label__ = 148; break; //@line 4018 "cPickle.c"
      case 148: // $bb21_i116
        $13=-1; //@line 4018 "cPickle.c"
        __label__ = 150; break; //@line 4018 "cPickle.c"
      case 149: // $load_global_exit_thread205
        var $814=$self_addr_i87; //@line 4018 "cPickle.c"
        var $815=$814+32; //@line 4018 "cPickle.c"
        var $816=HEAP[$815]; //@line 4018 "cPickle.c"
        var $817=$816+16; //@line 4018 "cPickle.c"
        var $818=HEAP[$817]; //@line 4018 "cPickle.c"
        var $819=$self_addr_i87; //@line 4018 "cPickle.c"
        var $820=$819+32; //@line 4018 "cPickle.c"
        var $821=HEAP[$820]; //@line 4018 "cPickle.c"
        var $822=$821+8; //@line 4018 "cPickle.c"
        var $823=HEAP[$822]; //@line 4018 "cPickle.c"
        var $824=$818+4*$823; //@line 4018 "cPickle.c"
        var $825=$class_i89; //@line 4018 "cPickle.c"
        HEAP[$824]=$825; //@line 4018 "cPickle.c"
        var $826=($823) + 1; //@line 4018 "cPickle.c"
        var $827=$821+8; //@line 4018 "cPickle.c"
        HEAP[$827]=$826; //@line 4018 "cPickle.c"
        $13=0; //@line 4019 "cPickle.c"
        $retval_i88=0; //@line 3999 "cPickle.c"
        __label__ = 2; break;
      case 150: // $load_global_exit_thread
        $retval_i88=-1; //@line 3999 "cPickle.c"
        __label__ = 270; break;
      case 151: // $load_global_exit
        var $828=__lastLabel__ == 129 ? $retval1_i_i96 : ($retval1_i2_i);
        $retval_i88=$828; //@line 3999 "cPickle.c"
        var $829=($828) < 0; //@line 4825 "cPickle.c"
        if ($829) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4825 "cPickle.c"
      case 152: // $bb59
        var $830=$self_addr; //@line 4830 "cPickle.c"
        $self_addr_i119=$830;
        var $831=$self_addr_i119; //@line 4443 "cPickle.c"
        var $832=$831+32; //@line 4443 "cPickle.c"
        var $833=HEAP[$832]; //@line 4443 "cPickle.c"
        var $834=$833+8; //@line 4443 "cPickle.c"
        var $835=HEAP[$834]; //@line 4443 "cPickle.c"
        var $836=($835) - 1; //@line 4443 "cPickle.c"
        var $837=$self_addr_i119; //@line 4443 "cPickle.c"
        var $838=_do_append($837, $836); //@line 4443 "cPickle.c"
        $10=$838; //@line 4443 "cPickle.c"
        var $839=$10; //@line 4443 "cPickle.c"
        $retval_i120=$839; //@line 4443 "cPickle.c"
        var $retval1_i=$retval_i120; //@line 4443 "cPickle.c"
        var $840=($retval1_i) < 0; //@line 4830 "cPickle.c"
        if ($840) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4830 "cPickle.c"
      case 153: // $bb61
        var $841=$self_addr; //@line 4835 "cPickle.c"
        $self_addr_i123=$841;
        var $842=$self_addr_i123; //@line 4450 "cPickle.c"
        $self_addr_i_i121=$842;
        var $843=$self_addr_i_i121; //@line 3320 "cPickle.c"
        var $844=$843+52; //@line 3320 "cPickle.c"
        var $845=HEAP[$844]; //@line 3320 "cPickle.c"
        var $846=($845) <= 0; //@line 3320 "cPickle.c"
        if ($846) { __label__ = 154; break; } else { __label__ = 155; break; } //@line 3320 "cPickle.c"
      case 154: // $bb_i_i
        var $847=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($847, __str78); //@line 3321 "cPickle.c"
        $8=-1; //@line 3322 "cPickle.c"
        __label__ = 156; break; //@line 3322 "cPickle.c"
      case 155: // $bb1_i_i
        var $848=$self_addr_i_i121; //@line 3325 "cPickle.c"
        var $849=$848+48; //@line 3325 "cPickle.c"
        var $850=HEAP[$849]; //@line 3325 "cPickle.c"
        var $851=$self_addr_i_i121; //@line 3325 "cPickle.c"
        var $852=$851+52; //@line 3325 "cPickle.c"
        var $853=HEAP[$852]; //@line 3325 "cPickle.c"
        var $854=($853) - 1; //@line 3325 "cPickle.c"
        var $855=$self_addr_i_i121; //@line 3325 "cPickle.c"
        var $856=$855+52; //@line 3325 "cPickle.c"
        HEAP[$856]=$854; //@line 3325 "cPickle.c"
        var $857=$self_addr_i_i121; //@line 3325 "cPickle.c"
        var $858=$857+52; //@line 3325 "cPickle.c"
        var $859=HEAP[$858]; //@line 3325 "cPickle.c"
        var $860=$850+4*$859; //@line 3325 "cPickle.c"
        var $861=HEAP[$860]; //@line 3325 "cPickle.c"
        $8=$861; //@line 3325 "cPickle.c"
        __label__ = 156; break; //@line 3325 "cPickle.c"
      case 156: // $load_appends_exit
        var $862=$8; //@line 3322 "cPickle.c"
        $retval_i_i122=$862; //@line 3322 "cPickle.c"
        var $retval3_i_i=$retval_i_i122; //@line 3322 "cPickle.c"
        var $863=$self_addr_i123; //@line 4450 "cPickle.c"
        var $864=_do_append($863, $retval3_i_i); //@line 4450 "cPickle.c"
        $9=$864; //@line 4450 "cPickle.c"
        $retval_i124=$864; //@line 4450 "cPickle.c"
        var $865=($864) < 0; //@line 4835 "cPickle.c"
        if ($865) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4835 "cPickle.c"
      case 157: // $bb63
        var $866=$self_addr; //@line 4840 "cPickle.c"
        $self_addr_i128=$866;
        $res_i=-1; //@line 4500 "cPickle.c"
        var $867=$self_addr_i128; //@line 4505 "cPickle.c"
        var $868=$867+32; //@line 4505 "cPickle.c"
        var $869=HEAP[$868]; //@line 4505 "cPickle.c"
        var $870=$869+8; //@line 4505 "cPickle.c"
        var $871=HEAP[$870]; //@line 4505 "cPickle.c"
        var $872=($871) <= 1; //@line 4505 "cPickle.c"
        if ($872) { __label__ = 158; break; } else { __label__ = 159; break; } //@line 4505 "cPickle.c"
      case 158: // $bb_i132
        var $873=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
        _PyErr_SetString($873, __str2); //@line 188 "cPickle.c"
        $6=-1; //@line 189 "cPickle.c"
        var $874=$6; //@line 189 "cPickle.c"
        $retval_i_i127=$874; //@line 189 "cPickle.c"
        var $retval1_i_i131=$retval_i_i127; //@line 189 "cPickle.c"
        $7=$retval1_i_i131; //@line 4506 "cPickle.c"
        __lastLabel__ = 158; __label__ = 220; break; //@line 4506 "cPickle.c"
      case 159: // $bb1_i133
        var $875=$self_addr_i128; //@line 4507 "cPickle.c"
        var $876=$875+32; //@line 4507 "cPickle.c"
        var $877=HEAP[$876]; //@line 4507 "cPickle.c"
        var $878=$877+8; //@line 4507 "cPickle.c"
        var $879=HEAP[$878]; //@line 4507 "cPickle.c"
        var $880=($879)!=0; //@line 4507 "cPickle.c"
        if ($880) { __label__ = 161; break; } else { __label__ = 160; break; } //@line 4507 "cPickle.c"
      case 160: // $bb4_thread_i
        var $881=HEAP[_UnpicklingError]; //@line 4507 "cPickle.c"
        _PyErr_SetString($881, __str88); //@line 4507 "cPickle.c"
        $state_i=0; //@line 4507 "cPickle.c"
        __label__ = 162; break;
      case 161: // $bb4_i134
        var $882=$self_addr_i128; //@line 4507 "cPickle.c"
        var $883=$882+32; //@line 4507 "cPickle.c"
        var $884=HEAP[$883]; //@line 4507 "cPickle.c"
        var $885=$884+16; //@line 4507 "cPickle.c"
        var $886=HEAP[$885]; //@line 4507 "cPickle.c"
        var $887=$self_addr_i128; //@line 4507 "cPickle.c"
        var $888=$887+32; //@line 4507 "cPickle.c"
        var $889=HEAP[$888]; //@line 4507 "cPickle.c"
        var $890=$889+8; //@line 4507 "cPickle.c"
        var $891=HEAP[$890]; //@line 4507 "cPickle.c"
        var $892=($891) - 1; //@line 4507 "cPickle.c"
        var $893=$889+8; //@line 4507 "cPickle.c"
        HEAP[$893]=$892; //@line 4507 "cPickle.c"
        var $894=$889+8; //@line 4507 "cPickle.c"
        var $895=HEAP[$894]; //@line 4507 "cPickle.c"
        var $896=$886+4*$895; //@line 4507 "cPickle.c"
        var $897=HEAP[$896]; //@line 4507 "cPickle.c"
        $state_i=$897; //@line 4507 "cPickle.c"
        var $898=($897)==0; //@line 4508 "cPickle.c"
        if ($898) { __label__ = 162; break; } else { __label__ = 163; break; } //@line 4508 "cPickle.c"
      case 162: // $bb5_i135
        $7=-1; //@line 4509 "cPickle.c"
        __label__ = 219; break; //@line 4509 "cPickle.c"
      case 163: // $bb6_i136
        var $899=$self_addr_i128; //@line 4510 "cPickle.c"
        var $900=$899+32; //@line 4510 "cPickle.c"
        var $901=HEAP[$900]; //@line 4510 "cPickle.c"
        var $902=$901+16; //@line 4510 "cPickle.c"
        var $903=HEAP[$902]; //@line 4510 "cPickle.c"
        var $904=$self_addr_i128; //@line 4510 "cPickle.c"
        var $905=$904+32; //@line 4510 "cPickle.c"
        var $906=HEAP[$905]; //@line 4510 "cPickle.c"
        var $907=$906+8; //@line 4510 "cPickle.c"
        var $908=HEAP[$907]; //@line 4510 "cPickle.c"
        var $909=($908) - 1; //@line 4510 "cPickle.c"
        var $910=$903+4*$909; //@line 4510 "cPickle.c"
        var $911=HEAP[$910]; //@line 4510 "cPickle.c"
        $inst_i=$911; //@line 4510 "cPickle.c"
        var $912=HEAP[___setstate___str]; //@line 4512 "cPickle.c"
        var $913=$inst_i; //@line 4512 "cPickle.c"
        var $914=_PyObject_GetAttr($913, $912); //@line 4512 "cPickle.c"
        $__setstate___i=$914; //@line 4512 "cPickle.c"
        var $915=$__setstate___i; //@line 4513 "cPickle.c"
        var $916=($915)!=0; //@line 4513 "cPickle.c"
        if ($916) { __label__ = 164; break; } else { __label__ = 184; break; } //@line 4513 "cPickle.c"
      case 164: // $bb7_i137
        $junk_i=0; //@line 4514 "cPickle.c"
        var $917=$self_addr_i128; //@line 4517 "cPickle.c"
        var $918=$917+28; //@line 4517 "cPickle.c"
        var $919=HEAP[$918]; //@line 4517 "cPickle.c"
        var $920=($919)!=0; //@line 4517 "cPickle.c"
        if ($920) { __label__ = 166; break; } else { __label__ = 165; break; } //@line 4517 "cPickle.c"
      case 165: // $bb8_i138
        var $921=_PyTuple_New(1); //@line 4517 "cPickle.c"
        var $922=$self_addr_i128; //@line 4517 "cPickle.c"
        var $923=$922+28; //@line 4517 "cPickle.c"
        HEAP[$923]=$921; //@line 4517 "cPickle.c"
        var $924=$self_addr_i128; //@line 4517 "cPickle.c"
        var $925=$924+28; //@line 4517 "cPickle.c"
        var $926=HEAP[$925]; //@line 4517 "cPickle.c"
        var $927=($926)!=0; //@line 4517 "cPickle.c"
        if ($927) { __label__ = 166; break; } else { __label__ = 170; break; } //@line 4517 "cPickle.c"
      case 166: // $bb9_i139
        var $928=$self_addr_i128; //@line 4517 "cPickle.c"
        var $929=$928+28; //@line 4517 "cPickle.c"
        var $930=HEAP[$929]; //@line 4517 "cPickle.c"
        var $931=$930; //@line 4517 "cPickle.c"
        var $932=$931+12; //@line 4517 "cPickle.c"
        var $933=$932; //@line 4517 "cPickle.c"
        var $934=HEAP[$933]; //@line 4517 "cPickle.c"
        var $935=($934)!=0; //@line 4517 "cPickle.c"
        if ($935) { __label__ = 167; break; } else { __label__ = 169; break; } //@line 4517 "cPickle.c"
      case 167: // $bb10_i140
        var $936=$self_addr_i128; //@line 4517 "cPickle.c"
        var $937=$936+28; //@line 4517 "cPickle.c"
        var $938=HEAP[$937]; //@line 4517 "cPickle.c"
        var $939=$938; //@line 4517 "cPickle.c"
        var $940=$939+12; //@line 4517 "cPickle.c"
        var $941=$940; //@line 4517 "cPickle.c"
        var $942=HEAP[$941]; //@line 4517 "cPickle.c"
        var $943=$942; //@line 4517 "cPickle.c"
        var $944=HEAP[$943]; //@line 4517 "cPickle.c"
        var $945=($944) - 1; //@line 4517 "cPickle.c"
        var $946=$942; //@line 4517 "cPickle.c"
        HEAP[$946]=$945; //@line 4517 "cPickle.c"
        var $947=$942; //@line 4517 "cPickle.c"
        var $948=HEAP[$947]; //@line 4517 "cPickle.c"
        var $949=($948)==0; //@line 4517 "cPickle.c"
        if ($949) { __label__ = 168; break; } else { __label__ = 169; break; } //@line 4517 "cPickle.c"
      case 168: // $bb11_i141
        var $950=$self_addr_i128; //@line 4517 "cPickle.c"
        var $951=$950+28; //@line 4517 "cPickle.c"
        var $952=HEAP[$951]; //@line 4517 "cPickle.c"
        var $953=$952; //@line 4517 "cPickle.c"
        var $954=$953+12; //@line 4517 "cPickle.c"
        var $955=$954; //@line 4517 "cPickle.c"
        var $956=HEAP[$955]; //@line 4517 "cPickle.c"
        var $957=$956+4; //@line 4517 "cPickle.c"
        var $958=HEAP[$957]; //@line 4517 "cPickle.c"
        var $959=$958+24; //@line 4517 "cPickle.c"
        var $960=HEAP[$959]; //@line 4517 "cPickle.c"
        var $961=$self_addr_i128; //@line 4517 "cPickle.c"
        var $962=$961+28; //@line 4517 "cPickle.c"
        var $963=HEAP[$962]; //@line 4517 "cPickle.c"
        var $964=$963; //@line 4517 "cPickle.c"
        var $965=$964+12; //@line 4517 "cPickle.c"
        var $966=$965; //@line 4517 "cPickle.c"
        var $967=HEAP[$966]; //@line 4517 "cPickle.c"
        FUNCTION_TABLE[$960]($967); //@line 4517 "cPickle.c"
        __label__ = 169; break; //@line 4517 "cPickle.c"
      case 169: // $bb12_i142
        var $968=$self_addr_i128; //@line 4517 "cPickle.c"
        var $969=$968+28; //@line 4517 "cPickle.c"
        var $970=HEAP[$969]; //@line 4517 "cPickle.c"
        var $971=$970; //@line 4517 "cPickle.c"
        var $972=$971+12; //@line 4517 "cPickle.c"
        var $973=$972; //@line 4517 "cPickle.c"
        var $974=$state_i; //@line 4517 "cPickle.c"
        HEAP[$973]=$974; //@line 4517 "cPickle.c"
        __label__ = 172; break; //@line 4517 "cPickle.c"
      case 170: // $bb13_i143
        var $975=$state_i; //@line 4517 "cPickle.c"
        var $976=$975; //@line 4517 "cPickle.c"
        var $977=HEAP[$976]; //@line 4517 "cPickle.c"
        var $978=($977) - 1; //@line 4517 "cPickle.c"
        var $979=$state_i; //@line 4517 "cPickle.c"
        var $980=$979; //@line 4517 "cPickle.c"
        HEAP[$980]=$978; //@line 4517 "cPickle.c"
        var $981=$state_i; //@line 4517 "cPickle.c"
        var $982=$981; //@line 4517 "cPickle.c"
        var $983=HEAP[$982]; //@line 4517 "cPickle.c"
        var $984=($983)==0; //@line 4517 "cPickle.c"
        if ($984) { __label__ = 171; break; } else { __label__ = 172; break; } //@line 4517 "cPickle.c"
      case 171: // $bb14_i144
        var $985=$state_i; //@line 4517 "cPickle.c"
        var $986=$985+4; //@line 4517 "cPickle.c"
        var $987=HEAP[$986]; //@line 4517 "cPickle.c"
        var $988=$987+24; //@line 4517 "cPickle.c"
        var $989=HEAP[$988]; //@line 4517 "cPickle.c"
        var $990=$state_i; //@line 4517 "cPickle.c"
        FUNCTION_TABLE[$989]($990); //@line 4517 "cPickle.c"
        __label__ = 172; break; //@line 4517 "cPickle.c"
      case 172: // $bb15_i145
        var $991=$self_addr_i128; //@line 4518 "cPickle.c"
        var $992=$991+28; //@line 4518 "cPickle.c"
        var $993=HEAP[$992]; //@line 4518 "cPickle.c"
        var $994=($993)!=0; //@line 4518 "cPickle.c"
        if ($994) { __label__ = 173; break; } else { __label__ = 177; break; } //@line 4518 "cPickle.c"
      case 173: // $bb16_i146
        var $995=$self_addr_i128; //@line 4519 "cPickle.c"
        var $996=$995+28; //@line 4519 "cPickle.c"
        var $997=HEAP[$996]; //@line 4519 "cPickle.c"
        var $998=$__setstate___i; //@line 4519 "cPickle.c"
        var $999=_PyObject_Call($998, $997, 0); //@line 4519 "cPickle.c"
        $junk_i=$999; //@line 4519 "cPickle.c"
        var $1000=$self_addr_i128; //@line 4520 "cPickle.c"
        var $1001=$1000+28; //@line 4520 "cPickle.c"
        var $1002=HEAP[$1001]; //@line 4520 "cPickle.c"
        var $1003=$1002; //@line 4520 "cPickle.c"
        var $1004=HEAP[$1003]; //@line 4520 "cPickle.c"
        var $1005=($1004) > 1; //@line 4520 "cPickle.c"
        if ($1005) { __label__ = 174; break; } else { __label__ = 177; break; } //@line 4520 "cPickle.c"
      case 174: // $bb17_i147
        var $1006=$self_addr_i128; //@line 4520 "cPickle.c"
        var $1007=$1006+28; //@line 4520 "cPickle.c"
        var $1008=HEAP[$1007]; //@line 4520 "cPickle.c"
        var $1009=$1008; //@line 4520 "cPickle.c"
        var $1010=HEAP[$1009]; //@line 4520 "cPickle.c"
        var $1011=($1010) - 1; //@line 4520 "cPickle.c"
        var $1012=$1008; //@line 4520 "cPickle.c"
        HEAP[$1012]=$1011; //@line 4520 "cPickle.c"
        var $1013=$1008; //@line 4520 "cPickle.c"
        var $1014=HEAP[$1013]; //@line 4520 "cPickle.c"
        var $1015=($1014)==0; //@line 4520 "cPickle.c"
        if ($1015) { __label__ = 175; break; } else { __label__ = 176; break; } //@line 4520 "cPickle.c"
      case 175: // $bb18_i148
        var $1016=$self_addr_i128; //@line 4520 "cPickle.c"
        var $1017=$1016+28; //@line 4520 "cPickle.c"
        var $1018=HEAP[$1017]; //@line 4520 "cPickle.c"
        var $1019=$1018+4; //@line 4520 "cPickle.c"
        var $1020=HEAP[$1019]; //@line 4520 "cPickle.c"
        var $1021=$1020+24; //@line 4520 "cPickle.c"
        var $1022=HEAP[$1021]; //@line 4520 "cPickle.c"
        var $1023=$self_addr_i128; //@line 4520 "cPickle.c"
        var $1024=$1023+28; //@line 4520 "cPickle.c"
        var $1025=HEAP[$1024]; //@line 4520 "cPickle.c"
        FUNCTION_TABLE[$1022]($1025); //@line 4520 "cPickle.c"
        __label__ = 176; break; //@line 4520 "cPickle.c"
      case 176: // $bb19_i149
        var $1026=$self_addr_i128; //@line 4520 "cPickle.c"
        var $1027=$1026+28; //@line 4520 "cPickle.c"
        HEAP[$1027]=0; //@line 4520 "cPickle.c"
        __label__ = 177; break; //@line 4520 "cPickle.c"
      case 177: // $bb20_i150
        var $1028=$__setstate___i; //@line 4522 "cPickle.c"
        var $1029=$1028; //@line 4522 "cPickle.c"
        var $1030=HEAP[$1029]; //@line 4522 "cPickle.c"
        var $1031=($1030) - 1; //@line 4522 "cPickle.c"
        var $1032=$__setstate___i; //@line 4522 "cPickle.c"
        var $1033=$1032; //@line 4522 "cPickle.c"
        HEAP[$1033]=$1031; //@line 4522 "cPickle.c"
        var $1034=$__setstate___i; //@line 4522 "cPickle.c"
        var $1035=$1034; //@line 4522 "cPickle.c"
        var $1036=HEAP[$1035]; //@line 4522 "cPickle.c"
        var $1037=($1036)==0; //@line 4522 "cPickle.c"
        if ($1037) { __label__ = 178; break; } else { __label__ = 179; break; } //@line 4522 "cPickle.c"
      case 178: // $bb21_i151
        var $1038=$__setstate___i; //@line 4522 "cPickle.c"
        var $1039=$1038+4; //@line 4522 "cPickle.c"
        var $1040=HEAP[$1039]; //@line 4522 "cPickle.c"
        var $1041=$1040+24; //@line 4522 "cPickle.c"
        var $1042=HEAP[$1041]; //@line 4522 "cPickle.c"
        var $1043=$__setstate___i; //@line 4522 "cPickle.c"
        FUNCTION_TABLE[$1042]($1043); //@line 4522 "cPickle.c"
        __label__ = 179; break; //@line 4522 "cPickle.c"
      case 179: // $bb22_i152
        var $1044=$junk_i; //@line 4523 "cPickle.c"
        var $1045=($1044)==0; //@line 4523 "cPickle.c"
        if ($1045) { __label__ = 180; break; } else { __label__ = 181; break; } //@line 4523 "cPickle.c"
      case 180: // $bb23_i153
        $7=-1; //@line 4524 "cPickle.c"
        __label__ = 219; break; //@line 4524 "cPickle.c"
      case 181: // $bb24_i154
        var $1046=$junk_i; //@line 4525 "cPickle.c"
        var $1047=$1046; //@line 4525 "cPickle.c"
        var $1048=HEAP[$1047]; //@line 4525 "cPickle.c"
        var $1049=($1048) - 1; //@line 4525 "cPickle.c"
        var $1050=$junk_i; //@line 4525 "cPickle.c"
        var $1051=$1050; //@line 4525 "cPickle.c"
        HEAP[$1051]=$1049; //@line 4525 "cPickle.c"
        var $1052=$junk_i; //@line 4525 "cPickle.c"
        var $1053=$1052; //@line 4525 "cPickle.c"
        var $1054=HEAP[$1053]; //@line 4525 "cPickle.c"
        var $1055=($1054)==0; //@line 4525 "cPickle.c"
        if ($1055) { __label__ = 182; break; } else { __label__ = 183; break; } //@line 4525 "cPickle.c"
      case 182: // $bb25_i155
        var $1056=$junk_i; //@line 4525 "cPickle.c"
        var $1057=$1056+4; //@line 4525 "cPickle.c"
        var $1058=HEAP[$1057]; //@line 4525 "cPickle.c"
        var $1059=$1058+24; //@line 4525 "cPickle.c"
        var $1060=HEAP[$1059]; //@line 4525 "cPickle.c"
        var $1061=$junk_i; //@line 4525 "cPickle.c"
        FUNCTION_TABLE[$1060]($1061); //@line 4525 "cPickle.c"
        __label__ = 183; break; //@line 4525 "cPickle.c"
      case 183: // $load_build_exit_thread206
        $7=0; //@line 4526 "cPickle.c"
        $retval_i129=0; //@line 4506 "cPickle.c"
        __label__ = 2; break;
      case 184: // $bb27_i157
        var $1062=HEAP[_PyExc_AttributeError]; //@line 4528 "cPickle.c"
        var $1063=_PyErr_ExceptionMatches($1062); //@line 4528 "cPickle.c"
        var $1064=($1063)==0; //@line 4528 "cPickle.c"
        if ($1064) { __label__ = 185; break; } else { __label__ = 186; break; } //@line 4528 "cPickle.c"
      case 185: // $bb28_i158
        $7=-1; //@line 4529 "cPickle.c"
        __label__ = 219; break; //@line 4529 "cPickle.c"
      case 186: // $bb29_i159
        _PyErr_Clear(); //@line 4530 "cPickle.c"
        var $1065=$state_i; //@line 4535 "cPickle.c"
        var $1066=$1065+4; //@line 4535 "cPickle.c"
        var $1067=HEAP[$1066]; //@line 4535 "cPickle.c"
        var $1068=$1067+84; //@line 4535 "cPickle.c"
        var $1069=HEAP[$1068]; //@line 4535 "cPickle.c"
        var $1070=($1069) & 67108864; //@line 4535 "cPickle.c"
        var $1071=($1070)==0; //@line 4535 "cPickle.c"
        if ($1071) { __label__ = 190; break; } else { __label__ = 187; break; } //@line 4535 "cPickle.c"
      case 187: // $bb30_i
        var $1072=$state_i; //@line 4535 "cPickle.c"
        var $1073=_PyTuple_Size($1072); //@line 4535 "cPickle.c"
        var $1074=($1073)!=2; //@line 4535 "cPickle.c"
        if ($1074) { __label__ = 190; break; } else { __label__ = 188; break; } //@line 4535 "cPickle.c"
      case 188: // $bb31_i
        var $1075=$state_i; //@line 4536 "cPickle.c"
        $temp_i=$1075; //@line 4536 "cPickle.c"
        var $1076=$temp_i; //@line 4537 "cPickle.c"
        var $1077=$1076; //@line 4537 "cPickle.c"
        var $1078=$1077+12; //@line 4537 "cPickle.c"
        var $1079=$1078; //@line 4537 "cPickle.c"
        var $1080=HEAP[$1079]; //@line 4537 "cPickle.c"
        $state_i=$1080; //@line 4537 "cPickle.c"
        var $1081=$temp_i; //@line 4538 "cPickle.c"
        var $1082=$1081; //@line 4538 "cPickle.c"
        var $1083=$1082+12; //@line 4538 "cPickle.c"
        var $1084=$1083+4; //@line 4538 "cPickle.c"
        var $1085=HEAP[$1084]; //@line 4538 "cPickle.c"
        $slotstate_i=$1085; //@line 4538 "cPickle.c"
        var $1086=$state_i; //@line 4539 "cPickle.c"
        var $1087=$1086; //@line 4539 "cPickle.c"
        var $1088=HEAP[$1087]; //@line 4539 "cPickle.c"
        var $1089=($1088) + 1; //@line 4539 "cPickle.c"
        var $1090=$state_i; //@line 4539 "cPickle.c"
        var $1091=$1090; //@line 4539 "cPickle.c"
        HEAP[$1091]=$1089; //@line 4539 "cPickle.c"
        var $1092=$slotstate_i; //@line 4540 "cPickle.c"
        var $1093=$1092; //@line 4540 "cPickle.c"
        var $1094=HEAP[$1093]; //@line 4540 "cPickle.c"
        var $1095=($1094) + 1; //@line 4540 "cPickle.c"
        var $1096=$slotstate_i; //@line 4540 "cPickle.c"
        var $1097=$1096; //@line 4540 "cPickle.c"
        HEAP[$1097]=$1095; //@line 4540 "cPickle.c"
        var $1098=$temp_i; //@line 4541 "cPickle.c"
        var $1099=$1098; //@line 4541 "cPickle.c"
        var $1100=HEAP[$1099]; //@line 4541 "cPickle.c"
        var $1101=($1100) - 1; //@line 4541 "cPickle.c"
        var $1102=$temp_i; //@line 4541 "cPickle.c"
        var $1103=$1102; //@line 4541 "cPickle.c"
        HEAP[$1103]=$1101; //@line 4541 "cPickle.c"
        var $1104=$temp_i; //@line 4541 "cPickle.c"
        var $1105=$1104; //@line 4541 "cPickle.c"
        var $1106=HEAP[$1105]; //@line 4541 "cPickle.c"
        var $1107=($1106)==0; //@line 4541 "cPickle.c"
        if ($1107) { __label__ = 189; break; } else { __label__ = 191; break; } //@line 4541 "cPickle.c"
      case 189: // $bb32_i
        var $1108=$temp_i; //@line 4541 "cPickle.c"
        var $1109=$1108+4; //@line 4541 "cPickle.c"
        var $1110=HEAP[$1109]; //@line 4541 "cPickle.c"
        var $1111=$1110+24; //@line 4541 "cPickle.c"
        var $1112=HEAP[$1111]; //@line 4541 "cPickle.c"
        var $1113=$temp_i; //@line 4541 "cPickle.c"
        FUNCTION_TABLE[$1112]($1113); //@line 4541 "cPickle.c"
        __label__ = 191; break; //@line 4541 "cPickle.c"
      case 190: // $bb34_i
        $slotstate_i=0; //@line 4544 "cPickle.c"
        __label__ = 191; break; //@line 4544 "cPickle.c"
      case 191: // $bb35_i
        var $1114=$state_i; //@line 4547 "cPickle.c"
        var $1115=($1114)!=(__Py_NoneStruct); //@line 4547 "cPickle.c"
        if ($1115) { __label__ = 192; break; } else { __label__ = 206; break; } //@line 4547 "cPickle.c"
      case 192: // $bb36_i
        var $1116=$state_i; //@line 4549 "cPickle.c"
        var $1117=$1116+4; //@line 4549 "cPickle.c"
        var $1118=HEAP[$1117]; //@line 4549 "cPickle.c"
        var $1119=$1118+84; //@line 4549 "cPickle.c"
        var $1120=HEAP[$1119]; //@line 4549 "cPickle.c"
        var $1121=($1120) & 536870912; //@line 4549 "cPickle.c"
        var $1122=($1121)==0; //@line 4549 "cPickle.c"
        if ($1122) { __label__ = 193; break; } else { __label__ = 194; break; } //@line 4549 "cPickle.c"
      case 193: // $bb37_i
        var $1123=HEAP[_UnpicklingError]; //@line 4550 "cPickle.c"
        _PyErr_SetString($1123, __str97); //@line 4550 "cPickle.c"
        __label__ = 213; break; //@line 4550 "cPickle.c"
      case 194: // $bb38_i
        var $1124=HEAP[___dict___str]; //@line 4554 "cPickle.c"
        var $1125=$inst_i; //@line 4554 "cPickle.c"
        var $1126=_PyObject_GetAttr($1125, $1124); //@line 4554 "cPickle.c"
        $dict_i=$1126; //@line 4554 "cPickle.c"
        var $1127=$dict_i; //@line 4555 "cPickle.c"
        var $1128=($1127)==0; //@line 4555 "cPickle.c"
        if ($1128) { __label__ = 213; break; } else { __label__ = 195; break; } //@line 4555 "cPickle.c"
      case 195: // $bb39_i
        HEAP[$i_i130]=0; //@line 4558 "cPickle.c"
        __label__ = 203; break; //@line 4558 "cPickle.c"
      case 196: // $bb40_i
        var $1129=HEAP[$d_key_i]; //@line 4562 "cPickle.c"
        var $1130=$1129; //@line 4562 "cPickle.c"
        var $1131=HEAP[$1130]; //@line 4562 "cPickle.c"
        var $1132=($1131) + 1; //@line 4562 "cPickle.c"
        var $1133=$1129; //@line 4562 "cPickle.c"
        HEAP[$1133]=$1132; //@line 4562 "cPickle.c"
        var $1134=HEAP[$d_key_i]; //@line 4563 "cPickle.c"
        var $1135=$1134+4; //@line 4563 "cPickle.c"
        var $1136=HEAP[$1135]; //@line 4563 "cPickle.c"
        var $1137=($1136)==(_PyString_Type); //@line 4563 "cPickle.c"
        if ($1137) { __label__ = 197; break; } else { __label__ = 198; break; } //@line 4563 "cPickle.c"
      case 197: // $bb41_i
        _PyString_InternInPlace($d_key_i); //@line 4564 "cPickle.c"
        __label__ = 198; break; //@line 4564 "cPickle.c"
      case 198: // $bb42_i
        var $1138=HEAP[$d_value_i]; //@line 4565 "cPickle.c"
        var $1139=HEAP[$d_key_i]; //@line 4565 "cPickle.c"
        var $1140=$dict_i; //@line 4565 "cPickle.c"
        var $1141=_PyObject_SetItem($1140, $1139, $1138); //@line 4565 "cPickle.c"
        var $1142=($1141) < 0; //@line 4565 "cPickle.c"
        var $1143=HEAP[$d_key_i]; //@line 4566 "cPickle.c"
        var $1144=$1143; //@line 4566 "cPickle.c"
        var $1145=HEAP[$1144]; //@line 4566 "cPickle.c"
        var $1146=($1145) - 1; //@line 4566 "cPickle.c"
        var $1147=$1143; //@line 4566 "cPickle.c"
        HEAP[$1147]=$1146; //@line 4566 "cPickle.c"
        var $1148=$1143; //@line 4566 "cPickle.c"
        var $1149=HEAP[$1148]; //@line 4566 "cPickle.c"
        var $1150=($1149)==0; //@line 4566 "cPickle.c"
        if ($1142) { __label__ = 199; break; } else { __label__ = 201; break; } //@line 4565 "cPickle.c"
      case 199: // $bb43_i
        if ($1150) { __label__ = 200; break; } else { __label__ = 213; break; } //@line 4566 "cPickle.c"
      case 200: // $bb44_i
        var $1151=HEAP[$d_key_i]; //@line 4566 "cPickle.c"
        var $1152=$1151+4; //@line 4566 "cPickle.c"
        var $1153=HEAP[$1152]; //@line 4566 "cPickle.c"
        var $1154=$1153+24; //@line 4566 "cPickle.c"
        var $1155=HEAP[$1154]; //@line 4566 "cPickle.c"
        var $1156=HEAP[$d_key_i]; //@line 4566 "cPickle.c"
        FUNCTION_TABLE[$1155]($1156); //@line 4566 "cPickle.c"
        __label__ = 213; break; //@line 4566 "cPickle.c"
      case 201: // $bb46_i
        if ($1150) { __label__ = 202; break; } else { __label__ = 203; break; } //@line 4569 "cPickle.c"
      case 202: // $bb47_i
        var $1157=HEAP[$d_key_i]; //@line 4569 "cPickle.c"
        var $1158=$1157+4; //@line 4569 "cPickle.c"
        var $1159=HEAP[$1158]; //@line 4569 "cPickle.c"
        var $1160=$1159+24; //@line 4569 "cPickle.c"
        var $1161=HEAP[$1160]; //@line 4569 "cPickle.c"
        var $1162=HEAP[$d_key_i]; //@line 4569 "cPickle.c"
        FUNCTION_TABLE[$1161]($1162); //@line 4569 "cPickle.c"
        __label__ = 203; break; //@line 4569 "cPickle.c"
      case 203: // $bb48_i
        var $1163=$state_i; //@line 4559 "cPickle.c"
        var $1164=_PyDict_Next($1163, $i_i130, $d_key_i, $d_value_i); //@line 4559 "cPickle.c"
        var $1165=($1164)!=0; //@line 4559 "cPickle.c"
        if ($1165) { __label__ = 196; break; } else { __label__ = 204; break; } //@line 4559 "cPickle.c"
      case 204: // $bb49_i
        var $1166=$dict_i; //@line 4571 "cPickle.c"
        var $1167=$1166; //@line 4571 "cPickle.c"
        var $1168=HEAP[$1167]; //@line 4571 "cPickle.c"
        var $1169=($1168) - 1; //@line 4571 "cPickle.c"
        var $1170=$dict_i; //@line 4571 "cPickle.c"
        var $1171=$1170; //@line 4571 "cPickle.c"
        HEAP[$1171]=$1169; //@line 4571 "cPickle.c"
        var $1172=$dict_i; //@line 4571 "cPickle.c"
        var $1173=$1172; //@line 4571 "cPickle.c"
        var $1174=HEAP[$1173]; //@line 4571 "cPickle.c"
        var $1175=($1174)==0; //@line 4571 "cPickle.c"
        if ($1175) { __label__ = 205; break; } else { __label__ = 206; break; } //@line 4571 "cPickle.c"
      case 205: // $bb50_i
        var $1176=$dict_i; //@line 4571 "cPickle.c"
        var $1177=$1176+4; //@line 4571 "cPickle.c"
        var $1178=HEAP[$1177]; //@line 4571 "cPickle.c"
        var $1179=$1178+24; //@line 4571 "cPickle.c"
        var $1180=HEAP[$1179]; //@line 4571 "cPickle.c"
        var $1181=$dict_i; //@line 4571 "cPickle.c"
        FUNCTION_TABLE[$1180]($1181); //@line 4571 "cPickle.c"
        __label__ = 206; break; //@line 4571 "cPickle.c"
      case 206: // $bb51_i
        var $1182=$slotstate_i; //@line 4575 "cPickle.c"
        var $1183=($1182)!=0; //@line 4575 "cPickle.c"
        if ($1183) { __label__ = 207; break; } else { __label__ = 212; break; } //@line 4575 "cPickle.c"
      case 207: // $bb52_i
        var $1184=$slotstate_i; //@line 4576 "cPickle.c"
        var $1185=$1184+4; //@line 4576 "cPickle.c"
        var $1186=HEAP[$1185]; //@line 4576 "cPickle.c"
        var $1187=$1186+84; //@line 4576 "cPickle.c"
        var $1188=HEAP[$1187]; //@line 4576 "cPickle.c"
        var $1189=($1188) & 536870912; //@line 4576 "cPickle.c"
        var $1190=($1189)==0; //@line 4576 "cPickle.c"
        if ($1190) { __label__ = 208; break; } else { __label__ = 209; break; } //@line 4576 "cPickle.c"
      case 208: // $bb53_i
        var $1191=HEAP[_UnpicklingError]; //@line 4577 "cPickle.c"
        _PyErr_SetString($1191, __str98); //@line 4577 "cPickle.c"
        __label__ = 213; break; //@line 4577 "cPickle.c"
      case 209: // $bb54_i
        HEAP[$i_i130]=0; //@line 4581 "cPickle.c"
        __label__ = 211; break; //@line 4581 "cPickle.c"
      case 210: // $bb55_i
        var $1192=HEAP[$d_value_i]; //@line 4583 "cPickle.c"
        var $1193=HEAP[$d_key_i]; //@line 4583 "cPickle.c"
        var $1194=$inst_i; //@line 4583 "cPickle.c"
        var $1195=_PyObject_SetAttr($1194, $1193, $1192); //@line 4583 "cPickle.c"
        var $1196=($1195) < 0; //@line 4583 "cPickle.c"
        if ($1196) { __label__ = 213; break; } else { __label__ = 211; break; } //@line 4583 "cPickle.c"
      case 211: // $bb56_i
        var $1197=$slotstate_i; //@line 4582 "cPickle.c"
        var $1198=_PyDict_Next($1197, $i_i130, $d_key_i, $d_value_i); //@line 4582 "cPickle.c"
        var $1199=($1198)!=0; //@line 4582 "cPickle.c"
        if ($1199) { __label__ = 210; break; } else { __label__ = 212; break; } //@line 4582 "cPickle.c"
      case 212: // $bb57_i
        $res_i=0; //@line 4587 "cPickle.c"
        __label__ = 213; break; //@line 4589 "cPickle.c"
      case 213: // $finally_i
        var $1200=$state_i; //@line 4590 "cPickle.c"
        var $1201=$1200; //@line 4590 "cPickle.c"
        var $1202=HEAP[$1201]; //@line 4590 "cPickle.c"
        var $1203=($1202) - 1; //@line 4590 "cPickle.c"
        var $1204=$state_i; //@line 4590 "cPickle.c"
        var $1205=$1204; //@line 4590 "cPickle.c"
        HEAP[$1205]=$1203; //@line 4590 "cPickle.c"
        var $1206=$state_i; //@line 4590 "cPickle.c"
        var $1207=$1206; //@line 4590 "cPickle.c"
        var $1208=HEAP[$1207]; //@line 4590 "cPickle.c"
        var $1209=($1208)==0; //@line 4590 "cPickle.c"
        if ($1209) { __label__ = 214; break; } else { __label__ = 215; break; } //@line 4590 "cPickle.c"
      case 214: // $bb58_i
        var $1210=$state_i; //@line 4590 "cPickle.c"
        var $1211=$1210+4; //@line 4590 "cPickle.c"
        var $1212=HEAP[$1211]; //@line 4590 "cPickle.c"
        var $1213=$1212+24; //@line 4590 "cPickle.c"
        var $1214=HEAP[$1213]; //@line 4590 "cPickle.c"
        var $1215=$state_i; //@line 4590 "cPickle.c"
        FUNCTION_TABLE[$1214]($1215); //@line 4590 "cPickle.c"
        __label__ = 215; break; //@line 4590 "cPickle.c"
      case 215: // $bb59_i
        var $1216=$slotstate_i; //@line 4591 "cPickle.c"
        var $1217=($1216)!=0; //@line 4591 "cPickle.c"
        if ($1217) { __label__ = 216; break; } else { __label__ = 218; break; } //@line 4591 "cPickle.c"
      case 216: // $bb60_i
        var $1218=$slotstate_i; //@line 4591 "cPickle.c"
        var $1219=$1218; //@line 4591 "cPickle.c"
        var $1220=HEAP[$1219]; //@line 4591 "cPickle.c"
        var $1221=($1220) - 1; //@line 4591 "cPickle.c"
        var $1222=$slotstate_i; //@line 4591 "cPickle.c"
        var $1223=$1222; //@line 4591 "cPickle.c"
        HEAP[$1223]=$1221; //@line 4591 "cPickle.c"
        var $1224=$slotstate_i; //@line 4591 "cPickle.c"
        var $1225=$1224; //@line 4591 "cPickle.c"
        var $1226=HEAP[$1225]; //@line 4591 "cPickle.c"
        var $1227=($1226)==0; //@line 4591 "cPickle.c"
        if ($1227) { __label__ = 217; break; } else { __label__ = 218; break; } //@line 4591 "cPickle.c"
      case 217: // $bb61_i
        var $1228=$slotstate_i; //@line 4591 "cPickle.c"
        var $1229=$1228+4; //@line 4591 "cPickle.c"
        var $1230=HEAP[$1229]; //@line 4591 "cPickle.c"
        var $1231=$1230+24; //@line 4591 "cPickle.c"
        var $1232=HEAP[$1231]; //@line 4591 "cPickle.c"
        var $1233=$slotstate_i; //@line 4591 "cPickle.c"
        FUNCTION_TABLE[$1232]($1233); //@line 4591 "cPickle.c"
        __label__ = 218; break; //@line 4591 "cPickle.c"
      case 218: // $bb62_i
        var $1234=$res_i; //@line 4592 "cPickle.c"
        $7=$1234; //@line 4592 "cPickle.c"
        __lastLabel__ = 218; __label__ = 220; break; //@line 4592 "cPickle.c"
      case 219: // $load_build_exit_thread
        $retval_i129=-1; //@line 4506 "cPickle.c"
        __label__ = 270; break;
      case 220: // $load_build_exit
        var $1235=__lastLabel__ == 158 ? $retval1_i_i131 : ($1234);
        $retval_i129=$1235; //@line 4506 "cPickle.c"
        var $1236=($1235) < 0; //@line 4840 "cPickle.c"
        if ($1236) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4840 "cPickle.c"
      case 221: // $bb65
        var $1237=$self_addr; //@line 4845 "cPickle.c"
        var $1238=_load_dup($1237); //@line 4845 "cPickle.c"
        var $1239=($1238) < 0; //@line 4845 "cPickle.c"
        if ($1239) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4845 "cPickle.c"
      case 222: // $bb67
        var $1240=$self_addr; //@line 4850 "cPickle.c"
        var $1241=_load_binget($1240); //@line 4850 "cPickle.c"
        var $1242=($1241) < 0; //@line 4850 "cPickle.c"
        if ($1242) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4850 "cPickle.c"
      case 223: // $bb69
        var $1243=$self_addr; //@line 4855 "cPickle.c"
        var $1244=_load_long_binget($1243); //@line 4855 "cPickle.c"
        var $1245=($1244) < 0; //@line 4855 "cPickle.c"
        if ($1245) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4855 "cPickle.c"
      case 224: // $bb71
        var $1246=$self_addr; //@line 4860 "cPickle.c"
        var $1247=_load_get($1246); //@line 4860 "cPickle.c"
        var $1248=($1247) < 0; //@line 4860 "cPickle.c"
        if ($1248) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4860 "cPickle.c"
      case 225: // $bb73
        var $1249=$self_addr; //@line 4865 "cPickle.c"
        var $1250=_load_extension($1249, 1); //@line 4865 "cPickle.c"
        var $1251=($1250) < 0; //@line 4865 "cPickle.c"
        if ($1251) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4865 "cPickle.c"
      case 226: // $bb75
        var $1252=$self_addr; //@line 4870 "cPickle.c"
        var $1253=_load_extension($1252, 2); //@line 4870 "cPickle.c"
        var $1254=($1253) < 0; //@line 4870 "cPickle.c"
        if ($1254) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4870 "cPickle.c"
      case 227: // $bb77
        var $1255=$self_addr; //@line 4875 "cPickle.c"
        var $1256=_load_extension($1255, 4); //@line 4875 "cPickle.c"
        var $1257=($1256) < 0; //@line 4875 "cPickle.c"
        if ($1257) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4875 "cPickle.c"
      case 228: // $bb79
        var $1258=$self_addr; //@line 4879 "cPickle.c"
        var $1259=_load_mark($1258); //@line 4879 "cPickle.c"
        var $1260=($1259) < 0; //@line 4879 "cPickle.c"
        if ($1260) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4879 "cPickle.c"
      case 229: // $bb81
        var $1261=$self_addr; //@line 4884 "cPickle.c"
        var $1262=_load_binput($1261); //@line 4884 "cPickle.c"
        var $1263=($1262) < 0; //@line 4884 "cPickle.c"
        if ($1263) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4884 "cPickle.c"
      case 230: // $bb83
        var $1264=$self_addr; //@line 4889 "cPickle.c"
        var $1265=_load_long_binput($1264); //@line 4889 "cPickle.c"
        var $1266=($1265) < 0; //@line 4889 "cPickle.c"
        if ($1266) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4889 "cPickle.c"
      case 231: // $bb85
        var $1267=$self_addr; //@line 4894 "cPickle.c"
        var $1268=_load_put($1267); //@line 4894 "cPickle.c"
        var $1269=($1268) < 0; //@line 4894 "cPickle.c"
        if ($1269) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4894 "cPickle.c"
      case 232: // $bb87
        var $1270=$self_addr; //@line 4899 "cPickle.c"
        var $1271=_load_pop($1270); //@line 4899 "cPickle.c"
        var $1272=($1271) < 0; //@line 4899 "cPickle.c"
        if ($1272) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4899 "cPickle.c"
      case 233: // $bb89
        var $1273=$self_addr; //@line 4904 "cPickle.c"
        $self_addr_i160=$1273;
        var $1274=$self_addr_i160; //@line 4132 "cPickle.c"
        $self_addr_i198=$1274;
        var $1275=$self_addr_i198; //@line 3320 "cPickle.c"
        var $1276=$1275+52; //@line 3320 "cPickle.c"
        var $1277=HEAP[$1276]; //@line 3320 "cPickle.c"
        var $1278=($1277) <= 0; //@line 3320 "cPickle.c"
        if ($1278) { __label__ = 234; break; } else { __label__ = 235; break; } //@line 3320 "cPickle.c"
      case 234: // $marker_exit_thread
        var $1279=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($1279, __str78); //@line 3321 "cPickle.c"
        $0=-1; //@line 3322 "cPickle.c"
        $retval_i199=-1; //@line 3322 "cPickle.c"
        $i_i162=-1; //@line 4132 "cPickle.c"
        __label__ = 236; break;
      case 235: // $marker_exit
        var $1280=$self_addr_i198; //@line 3325 "cPickle.c"
        var $1281=$1280+48; //@line 3325 "cPickle.c"
        var $1282=HEAP[$1281]; //@line 3325 "cPickle.c"
        var $1283=$self_addr_i198; //@line 3325 "cPickle.c"
        var $1284=$1283+52; //@line 3325 "cPickle.c"
        var $1285=HEAP[$1284]; //@line 3325 "cPickle.c"
        var $1286=($1285) - 1; //@line 3325 "cPickle.c"
        var $1287=$self_addr_i198; //@line 3325 "cPickle.c"
        var $1288=$1287+52; //@line 3325 "cPickle.c"
        HEAP[$1288]=$1286; //@line 3325 "cPickle.c"
        var $1289=$self_addr_i198; //@line 3325 "cPickle.c"
        var $1290=$1289+52; //@line 3325 "cPickle.c"
        var $1291=HEAP[$1290]; //@line 3325 "cPickle.c"
        var $1292=$1282+4*$1291; //@line 3325 "cPickle.c"
        var $1293=HEAP[$1292]; //@line 3325 "cPickle.c"
        $0=$1293; //@line 3325 "cPickle.c"
        $retval_i199=$1293; //@line 3322 "cPickle.c"
        $i_i162=$1293; //@line 4132 "cPickle.c"
        var $1294=($1293) < 0; //@line 4132 "cPickle.c"
        if ($1294) { __label__ = 236; break; } else { __label__ = 237; break; } //@line 4132 "cPickle.c"
      case 236: // $load_pop_mark_exit_thread
        $5=-1; //@line 4133 "cPickle.c"
        $retval_i161=-1; //@line 4133 "cPickle.c"
        __label__ = 270; break;
      case 237: // $load_pop_mark_exit
        var $1295=$self_addr_i160; //@line 4135 "cPickle.c"
        var $1296=$1295+32; //@line 4135 "cPickle.c"
        var $1297=HEAP[$1296]; //@line 4135 "cPickle.c"
        var $1298=$i_i162; //@line 4135 "cPickle.c"
        var $1299=_Pdata_clear($1297, $1298); //@line 4135 "cPickle.c"
        $5=0; //@line 4137 "cPickle.c"
        $retval_i161=0; //@line 4133 "cPickle.c"
        __label__ = 2; break;
      case 238: // $bb91
        var $1300=$self_addr; //@line 4909 "cPickle.c"
        $self_addr_i167=$1300;
        var $1301=$self_addr_i167; //@line 4483 "cPickle.c"
        var $1302=$1301+32; //@line 4483 "cPickle.c"
        var $1303=HEAP[$1302]; //@line 4483 "cPickle.c"
        var $1304=$1303+8; //@line 4483 "cPickle.c"
        var $1305=HEAP[$1304]; //@line 4483 "cPickle.c"
        var $1306=($1305) - 2; //@line 4483 "cPickle.c"
        var $1307=$self_addr_i167; //@line 4483 "cPickle.c"
        var $1308=_do_setitems($1307, $1306); //@line 4483 "cPickle.c"
        $4=$1308; //@line 4483 "cPickle.c"
        var $1309=$4; //@line 4483 "cPickle.c"
        $retval_i168=$1309; //@line 4483 "cPickle.c"
        var $retval1_i169=$retval_i168; //@line 4483 "cPickle.c"
        var $1310=($retval1_i169) < 0; //@line 4909 "cPickle.c"
        if ($1310) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4909 "cPickle.c"
      case 239: // $bb93
        var $1311=$self_addr; //@line 4914 "cPickle.c"
        $self_addr_i172=$1311;
        var $1312=$self_addr_i172; //@line 4489 "cPickle.c"
        $self_addr_i_i170=$1312;
        var $1313=$self_addr_i_i170; //@line 3320 "cPickle.c"
        var $1314=$1313+52; //@line 3320 "cPickle.c"
        var $1315=HEAP[$1314]; //@line 3320 "cPickle.c"
        var $1316=($1315) <= 0; //@line 3320 "cPickle.c"
        if ($1316) { __label__ = 240; break; } else { __label__ = 241; break; } //@line 3320 "cPickle.c"
      case 240: // $bb_i_i174
        var $1317=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($1317, __str78); //@line 3321 "cPickle.c"
        $2=-1; //@line 3322 "cPickle.c"
        __label__ = 242; break; //@line 3322 "cPickle.c"
      case 241: // $bb1_i_i175
        var $1318=$self_addr_i_i170; //@line 3325 "cPickle.c"
        var $1319=$1318+48; //@line 3325 "cPickle.c"
        var $1320=HEAP[$1319]; //@line 3325 "cPickle.c"
        var $1321=$self_addr_i_i170; //@line 3325 "cPickle.c"
        var $1322=$1321+52; //@line 3325 "cPickle.c"
        var $1323=HEAP[$1322]; //@line 3325 "cPickle.c"
        var $1324=($1323) - 1; //@line 3325 "cPickle.c"
        var $1325=$self_addr_i_i170; //@line 3325 "cPickle.c"
        var $1326=$1325+52; //@line 3325 "cPickle.c"
        HEAP[$1326]=$1324; //@line 3325 "cPickle.c"
        var $1327=$self_addr_i_i170; //@line 3325 "cPickle.c"
        var $1328=$1327+52; //@line 3325 "cPickle.c"
        var $1329=HEAP[$1328]; //@line 3325 "cPickle.c"
        var $1330=$1320+4*$1329; //@line 3325 "cPickle.c"
        var $1331=HEAP[$1330]; //@line 3325 "cPickle.c"
        $2=$1331; //@line 3325 "cPickle.c"
        __label__ = 242; break; //@line 3325 "cPickle.c"
      case 242: // $load_setitems_exit
        var $1332=$2; //@line 3322 "cPickle.c"
        $retval_i_i171=$1332; //@line 3322 "cPickle.c"
        var $retval3_i_i176=$retval_i_i171; //@line 3322 "cPickle.c"
        var $1333=$self_addr_i172; //@line 4489 "cPickle.c"
        var $1334=_do_setitems($1333, $retval3_i_i176); //@line 4489 "cPickle.c"
        $3=$1334; //@line 4489 "cPickle.c"
        $retval_i173=$1334; //@line 4489 "cPickle.c"
        var $1335=($1334) < 0; //@line 4914 "cPickle.c"
        if ($1335) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4914 "cPickle.c"
      case 243: // $bb96
        var $1336=$self_addr; //@line 4922 "cPickle.c"
        var $1337=_load_persid($1336); //@line 4922 "cPickle.c"
        var $1338=($1337) < 0; //@line 4922 "cPickle.c"
        if ($1338) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4922 "cPickle.c"
      case 244: // $bb98
        var $1339=$self_addr; //@line 4927 "cPickle.c"
        var $1340=_load_binpersid($1339); //@line 4927 "cPickle.c"
        var $1341=($1340) < 0; //@line 4927 "cPickle.c"
        if ($1341) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4927 "cPickle.c"
      case 245: // $bb100
        var $1342=$self_addr; //@line 4932 "cPickle.c"
        $self_addr_i179=$1342;
        $callable_i=0; //@line 4631 "cPickle.c"
        $arg_tup_i=0; //@line 4631 "cPickle.c"
        $ob_i=0; //@line 4631 "cPickle.c"
        var $1343=$self_addr_i179; //@line 4633 "cPickle.c"
        var $1344=$1343+32; //@line 4633 "cPickle.c"
        var $1345=HEAP[$1344]; //@line 4633 "cPickle.c"
        var $1346=$1345+8; //@line 4633 "cPickle.c"
        var $1347=HEAP[$1346]; //@line 4633 "cPickle.c"
        var $1348=($1347)!=0; //@line 4633 "cPickle.c"
        if ($1348) { __label__ = 247; break; } else { __label__ = 246; break; } //@line 4633 "cPickle.c"
      case 246: // $bb2_thread_i
        var $1349=HEAP[_UnpicklingError]; //@line 4633 "cPickle.c"
        _PyErr_SetString($1349, __str88); //@line 4633 "cPickle.c"
        $arg_tup_i=0; //@line 4633 "cPickle.c"
        __label__ = 248; break;
      case 247: // $bb2_i181
        var $1350=$self_addr_i179; //@line 4633 "cPickle.c"
        var $1351=$1350+32; //@line 4633 "cPickle.c"
        var $1352=HEAP[$1351]; //@line 4633 "cPickle.c"
        var $1353=$1352+16; //@line 4633 "cPickle.c"
        var $1354=HEAP[$1353]; //@line 4633 "cPickle.c"
        var $1355=$self_addr_i179; //@line 4633 "cPickle.c"
        var $1356=$1355+32; //@line 4633 "cPickle.c"
        var $1357=HEAP[$1356]; //@line 4633 "cPickle.c"
        var $1358=$1357+8; //@line 4633 "cPickle.c"
        var $1359=HEAP[$1358]; //@line 4633 "cPickle.c"
        var $1360=($1359) - 1; //@line 4633 "cPickle.c"
        var $1361=$1357+8; //@line 4633 "cPickle.c"
        HEAP[$1361]=$1360; //@line 4633 "cPickle.c"
        var $1362=$1357+8; //@line 4633 "cPickle.c"
        var $1363=HEAP[$1362]; //@line 4633 "cPickle.c"
        var $1364=$1354+4*$1363; //@line 4633 "cPickle.c"
        var $1365=HEAP[$1364]; //@line 4633 "cPickle.c"
        $arg_tup_i=$1365; //@line 4633 "cPickle.c"
        var $1366=($1365)==0; //@line 4634 "cPickle.c"
        if ($1366) { __label__ = 248; break; } else { __label__ = 249; break; } //@line 4634 "cPickle.c"
      case 248: // $bb3_i182
        $1=-1; //@line 4634 "cPickle.c"
        __label__ = 263; break; //@line 4634 "cPickle.c"
      case 249: // $bb4_i183
        var $1367=$self_addr_i179; //@line 4635 "cPickle.c"
        var $1368=$1367+32; //@line 4635 "cPickle.c"
        var $1369=HEAP[$1368]; //@line 4635 "cPickle.c"
        var $1370=$1369+8; //@line 4635 "cPickle.c"
        var $1371=HEAP[$1370]; //@line 4635 "cPickle.c"
        var $1372=($1371)!=0; //@line 4635 "cPickle.c"
        if ($1372) { __label__ = 251; break; } else { __label__ = 250; break; } //@line 4635 "cPickle.c"
      case 250: // $bb7_thread_i
        var $1373=HEAP[_UnpicklingError]; //@line 4635 "cPickle.c"
        _PyErr_SetString($1373, __str88); //@line 4635 "cPickle.c"
        $callable_i=0; //@line 4635 "cPickle.c"
        __label__ = 254; break;
      case 251: // $bb7_i184
        var $1374=$self_addr_i179; //@line 4635 "cPickle.c"
        var $1375=$1374+32; //@line 4635 "cPickle.c"
        var $1376=HEAP[$1375]; //@line 4635 "cPickle.c"
        var $1377=$1376+16; //@line 4635 "cPickle.c"
        var $1378=HEAP[$1377]; //@line 4635 "cPickle.c"
        var $1379=$self_addr_i179; //@line 4635 "cPickle.c"
        var $1380=$1379+32; //@line 4635 "cPickle.c"
        var $1381=HEAP[$1380]; //@line 4635 "cPickle.c"
        var $1382=$1381+8; //@line 4635 "cPickle.c"
        var $1383=HEAP[$1382]; //@line 4635 "cPickle.c"
        var $1384=($1383) - 1; //@line 4635 "cPickle.c"
        var $1385=$1381+8; //@line 4635 "cPickle.c"
        HEAP[$1385]=$1384; //@line 4635 "cPickle.c"
        var $1386=$1381+8; //@line 4635 "cPickle.c"
        var $1387=HEAP[$1386]; //@line 4635 "cPickle.c"
        var $1388=$1378+4*$1387; //@line 4635 "cPickle.c"
        var $1389=HEAP[$1388]; //@line 4635 "cPickle.c"
        $callable_i=$1389; //@line 4635 "cPickle.c"
        var $1390=($1389)!=0; //@line 4636 "cPickle.c"
        if ($1390) { __label__ = 252; break; } else { __label__ = 254; break; } //@line 4636 "cPickle.c"
      case 252: // $bb8_i185
        var $1391=$callable_i; //@line 4637 "cPickle.c"
        var $1392=$arg_tup_i; //@line 4637 "cPickle.c"
        var $1393=_Instance_New($1391, $1392); //@line 4637 "cPickle.c"
        $ob_i=$1393; //@line 4637 "cPickle.c"
        var $1394=$callable_i; //@line 4638 "cPickle.c"
        var $1395=$1394; //@line 4638 "cPickle.c"
        var $1396=HEAP[$1395]; //@line 4638 "cPickle.c"
        var $1397=($1396) - 1; //@line 4638 "cPickle.c"
        var $1398=$callable_i; //@line 4638 "cPickle.c"
        var $1399=$1398; //@line 4638 "cPickle.c"
        HEAP[$1399]=$1397; //@line 4638 "cPickle.c"
        var $1400=$callable_i; //@line 4638 "cPickle.c"
        var $1401=$1400; //@line 4638 "cPickle.c"
        var $1402=HEAP[$1401]; //@line 4638 "cPickle.c"
        var $1403=($1402)==0; //@line 4638 "cPickle.c"
        if ($1403) { __label__ = 253; break; } else { __label__ = 254; break; } //@line 4638 "cPickle.c"
      case 253: // $bb9_i186
        var $1404=$callable_i; //@line 4638 "cPickle.c"
        var $1405=$1404+4; //@line 4638 "cPickle.c"
        var $1406=HEAP[$1405]; //@line 4638 "cPickle.c"
        var $1407=$1406+24; //@line 4638 "cPickle.c"
        var $1408=HEAP[$1407]; //@line 4638 "cPickle.c"
        var $1409=$callable_i; //@line 4638 "cPickle.c"
        FUNCTION_TABLE[$1408]($1409); //@line 4638 "cPickle.c"
        __label__ = 254; break; //@line 4638 "cPickle.c"
      case 254: // $bb10_i187
        var $1410=$arg_tup_i; //@line 4640 "cPickle.c"
        var $1411=$1410; //@line 4640 "cPickle.c"
        var $1412=HEAP[$1411]; //@line 4640 "cPickle.c"
        var $1413=($1412) - 1; //@line 4640 "cPickle.c"
        var $1414=$arg_tup_i; //@line 4640 "cPickle.c"
        var $1415=$1414; //@line 4640 "cPickle.c"
        HEAP[$1415]=$1413; //@line 4640 "cPickle.c"
        var $1416=$arg_tup_i; //@line 4640 "cPickle.c"
        var $1417=$1416; //@line 4640 "cPickle.c"
        var $1418=HEAP[$1417]; //@line 4640 "cPickle.c"
        var $1419=($1418)==0; //@line 4640 "cPickle.c"
        if ($1419) { __label__ = 255; break; } else { __label__ = 256; break; } //@line 4640 "cPickle.c"
      case 255: // $bb11_i188
        var $1420=$arg_tup_i; //@line 4640 "cPickle.c"
        var $1421=$1420+4; //@line 4640 "cPickle.c"
        var $1422=HEAP[$1421]; //@line 4640 "cPickle.c"
        var $1423=$1422+24; //@line 4640 "cPickle.c"
        var $1424=HEAP[$1423]; //@line 4640 "cPickle.c"
        var $1425=$arg_tup_i; //@line 4640 "cPickle.c"
        FUNCTION_TABLE[$1424]($1425); //@line 4640 "cPickle.c"
        __label__ = 256; break; //@line 4640 "cPickle.c"
      case 256: // $bb12_i189
        var $1426=$ob_i; //@line 4642 "cPickle.c"
        var $1427=($1426)==0; //@line 4642 "cPickle.c"
        if ($1427) { __label__ = 257; break; } else { __label__ = 258; break; } //@line 4642 "cPickle.c"
      case 257: // $bb13_i190
        $1=-1; //@line 4642 "cPickle.c"
        __label__ = 263; break; //@line 4642 "cPickle.c"
      case 258: // $bb14_i191
        var $1428=$self_addr_i179; //@line 4644 "cPickle.c"
        var $1429=$1428+32; //@line 4644 "cPickle.c"
        var $1430=HEAP[$1429]; //@line 4644 "cPickle.c"
        var $1431=$1430+8; //@line 4644 "cPickle.c"
        var $1432=HEAP[$1431]; //@line 4644 "cPickle.c"
        var $1433=$self_addr_i179; //@line 4644 "cPickle.c"
        var $1434=$1433+32; //@line 4644 "cPickle.c"
        var $1435=HEAP[$1434]; //@line 4644 "cPickle.c"
        var $1436=$1435+12; //@line 4644 "cPickle.c"
        var $1437=HEAP[$1436]; //@line 4644 "cPickle.c"
        var $1438=($1432)==($1437); //@line 4644 "cPickle.c"
        if ($1438) { __label__ = 259; break; } else { __label__ = 264; break; } //@line 4644 "cPickle.c"
      case 259: // $bb15_i192
        var $1439=$self_addr_i179; //@line 4644 "cPickle.c"
        var $1440=$1439+32; //@line 4644 "cPickle.c"
        var $1441=HEAP[$1440]; //@line 4644 "cPickle.c"
        var $1442=_Pdata_grow($1441); //@line 4644 "cPickle.c"
        var $1443=($1442) < 0; //@line 4644 "cPickle.c"
        if ($1443) { __label__ = 260; break; } else { __label__ = 264; break; } //@line 4644 "cPickle.c"
      case 260: // $bb16_i193
        var $1444=$ob_i; //@line 4644 "cPickle.c"
        var $1445=$1444; //@line 4644 "cPickle.c"
        var $1446=HEAP[$1445]; //@line 4644 "cPickle.c"
        var $1447=($1446) - 1; //@line 4644 "cPickle.c"
        var $1448=$ob_i; //@line 4644 "cPickle.c"
        var $1449=$1448; //@line 4644 "cPickle.c"
        HEAP[$1449]=$1447; //@line 4644 "cPickle.c"
        var $1450=$ob_i; //@line 4644 "cPickle.c"
        var $1451=$1450; //@line 4644 "cPickle.c"
        var $1452=HEAP[$1451]; //@line 4644 "cPickle.c"
        var $1453=($1452)==0; //@line 4644 "cPickle.c"
        if ($1453) { __label__ = 261; break; } else { __label__ = 262; break; } //@line 4644 "cPickle.c"
      case 261: // $bb17_i194
        var $1454=$ob_i; //@line 4644 "cPickle.c"
        var $1455=$1454+4; //@line 4644 "cPickle.c"
        var $1456=HEAP[$1455]; //@line 4644 "cPickle.c"
        var $1457=$1456+24; //@line 4644 "cPickle.c"
        var $1458=HEAP[$1457]; //@line 4644 "cPickle.c"
        var $1459=$ob_i; //@line 4644 "cPickle.c"
        FUNCTION_TABLE[$1458]($1459); //@line 4644 "cPickle.c"
        __label__ = 262; break; //@line 4644 "cPickle.c"
      case 262: // $bb18_i195
        $1=-1; //@line 4644 "cPickle.c"
        __label__ = 263; break; //@line 4644 "cPickle.c"
      case 263: // $load_reduce_exit_thread
        $retval_i180=-1; //@line 4634 "cPickle.c"
        __label__ = 270; break;
      case 264: // $load_reduce_exit
        var $1460=$self_addr_i179; //@line 4644 "cPickle.c"
        var $1461=$1460+32; //@line 4644 "cPickle.c"
        var $1462=HEAP[$1461]; //@line 4644 "cPickle.c"
        var $1463=$1462+16; //@line 4644 "cPickle.c"
        var $1464=HEAP[$1463]; //@line 4644 "cPickle.c"
        var $1465=$self_addr_i179; //@line 4644 "cPickle.c"
        var $1466=$1465+32; //@line 4644 "cPickle.c"
        var $1467=HEAP[$1466]; //@line 4644 "cPickle.c"
        var $1468=$1467+8; //@line 4644 "cPickle.c"
        var $1469=HEAP[$1468]; //@line 4644 "cPickle.c"
        var $1470=$1464+4*$1469; //@line 4644 "cPickle.c"
        var $1471=$ob_i; //@line 4644 "cPickle.c"
        HEAP[$1470]=$1471; //@line 4644 "cPickle.c"
        var $1472=($1469) + 1; //@line 4644 "cPickle.c"
        var $1473=$1467+8; //@line 4644 "cPickle.c"
        HEAP[$1473]=$1472; //@line 4644 "cPickle.c"
        $1=0; //@line 4645 "cPickle.c"
        $retval_i180=0; //@line 4634 "cPickle.c"
        __label__ = 2; break;
      case 265: // $bb102
        var $1474=$self_addr; //@line 4937 "cPickle.c"
        var $1475=_load_proto($1474); //@line 4937 "cPickle.c"
        var $1476=($1475) < 0; //@line 4937 "cPickle.c"
        if ($1476) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4937 "cPickle.c"
      case 266: // $bb104
        var $1477=$self_addr; //@line 4942 "cPickle.c"
        var $1478=_load_bool($1477, __Py_TrueStruct); //@line 4942 "cPickle.c"
        var $1479=($1478) < 0; //@line 4942 "cPickle.c"
        if ($1479) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4942 "cPickle.c"
      case 267: // $bb106
        var $1480=$self_addr; //@line 4947 "cPickle.c"
        var $1481=_load_bool($1480, __Py_ZeroStruct); //@line 4947 "cPickle.c"
        var $1482=($1481) < 0; //@line 4947 "cPickle.c"
        if ($1482) { __label__ = 270; break; } else { __label__ = 2; break; } //@line 4947 "cPickle.c"
      case 268: // $bb108
        var $1483=HEAP[_PyExc_EOFError]; //@line 4953 "cPickle.c"
        _PyErr_SetNone($1483); //@line 4953 "cPickle.c"
        __label__ = 270; break; //@line 4953 "cPickle.c"
      case 269: // $bb109
        var $1484=HEAP[$s]; //@line 4957 "cPickle.c"
        var $1485=$1484; //@line 4957 "cPickle.c"
        var $1486=HEAP[$1485]; //@line 4957 "cPickle.c"
        var $1487=($1486); //@line 4957 "cPickle.c"
        var $1488=HEAP[_UnpicklingError]; //@line 4957 "cPickle.c"
        _cPickle_ErrFormat($1488, __str101, __str102, allocate([$1487,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 4957 "cPickle.c"
        $25=0; //@line 4960 "cPickle.c"
        __label__ = 278; break; //@line 4960 "cPickle.c"
      case 270: // $bb112
        var $1489=_PyErr_Occurred(); //@line 4966 "cPickle.c"
        $err=$1489; //@line 4966 "cPickle.c"
        var $1490=($1489)!=0; //@line 4966 "cPickle.c"
        if ($1490) { __label__ = 271; break; } else { __label__ = 274; break; } //@line 4966 "cPickle.c"
      case 271: // $bb113
        var $1491=HEAP[_PyExc_EOFError]; //@line 4967 "cPickle.c"
        var $1492=$err; //@line 4967 "cPickle.c"
        var $1493=($1492)==($1491); //@line 4967 "cPickle.c"
        if ($1493) { __label__ = 272; break; } else { __label__ = 273; break; } //@line 4967 "cPickle.c"
      case 272: // $bb114
        var $1494=HEAP[_PyExc_EOFError]; //@line 4968 "cPickle.c"
        _PyErr_SetNone($1494); //@line 4968 "cPickle.c"
        __label__ = 273; break; //@line 4968 "cPickle.c"
      case 273: // $bb115
        $25=0; //@line 4970 "cPickle.c"
        __label__ = 278; break; //@line 4970 "cPickle.c"
      case 274: // $bb116
        var $1495=$self_addr; //@line 4973 "cPickle.c"
        var $1496=$1495+32; //@line 4973 "cPickle.c"
        var $1497=HEAP[$1496]; //@line 4973 "cPickle.c"
        var $1498=$1497+8; //@line 4973 "cPickle.c"
        var $1499=HEAP[$1498]; //@line 4973 "cPickle.c"
        var $1500=($1499)!=0; //@line 4973 "cPickle.c"
        if ($1500) { __label__ = 275; break; } else { __label__ = 276; break; } //@line 4973 "cPickle.c"
      case 275: // $bb117
        var $1501=$self_addr; //@line 4973 "cPickle.c"
        var $1502=$1501+32; //@line 4973 "cPickle.c"
        var $1503=HEAP[$1502]; //@line 4973 "cPickle.c"
        var $1504=$1503+16; //@line 4973 "cPickle.c"
        var $1505=HEAP[$1504]; //@line 4973 "cPickle.c"
        var $1506=$self_addr; //@line 4973 "cPickle.c"
        var $1507=$1506+32; //@line 4973 "cPickle.c"
        var $1508=HEAP[$1507]; //@line 4973 "cPickle.c"
        var $1509=$1508+8; //@line 4973 "cPickle.c"
        var $1510=HEAP[$1509]; //@line 4973 "cPickle.c"
        var $1511=($1510) - 1; //@line 4973 "cPickle.c"
        var $1512=$1508+8; //@line 4973 "cPickle.c"
        HEAP[$1512]=$1511; //@line 4973 "cPickle.c"
        var $1513=$1508+8; //@line 4973 "cPickle.c"
        var $1514=HEAP[$1513]; //@line 4973 "cPickle.c"
        var $1515=$1505+4*$1514; //@line 4973 "cPickle.c"
        var $1516=HEAP[$1515]; //@line 4973 "cPickle.c"
        $val=$1516; //@line 4973 "cPickle.c"
        __label__ = 277; break; //@line 4973 "cPickle.c"
      case 276: // $bb118
        var $1517=HEAP[_UnpicklingError]; //@line 4973 "cPickle.c"
        _PyErr_SetString($1517, __str88); //@line 4973 "cPickle.c"
        $val=0; //@line 4973 "cPickle.c"
        __label__ = 277; break; //@line 4973 "cPickle.c"
      case 277: // $bb119
        var $1518=$val; //@line 4974 "cPickle.c"
        $25=$1518; //@line 4974 "cPickle.c"
        __label__ = 278; break; //@line 4974 "cPickle.c"
      case 278: // $bb120
        var $1519=$25; //@line 4960 "cPickle.c"
        $retval=$1519; //@line 4960 "cPickle.c"
        var $retval121=$retval; //@line 4960 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval121; //@line 4960 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_extension($self, $nbytes) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $nbytes_addr;
        var $retval;
        var $0;
        var $codebytes=__stackBase__;
        $self_addr=$self;
        $nbytes_addr=$nbytes;
        var $1=$nbytes_addr; //@line 5056 "cPickle.c"
        var $2=($1)!=1; //@line 5056 "cPickle.c"
        var $3=$nbytes_addr; //@line 5056 "cPickle.c"
        var $4=($3)!=2; //@line 5056 "cPickle.c"
        var $or_cond=($2) & ($4);
        var $5=$nbytes_addr; //@line 5056 "cPickle.c"
        var $6=($5)!=4; //@line 5056 "cPickle.c"
        var $or_cond3=($or_cond) & ($6);
        if ($or_cond3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5056 "cPickle.c"
      case 1: // $bb2
        ___assert_fail(__str93, __str15, 5056, ___PRETTY_FUNCTION___15558); //@line 5056 "cPickle.c"
        throw "Reached an unreachable!" //@line 5056 "cPickle.c"
      case 2: // $bb3
        var $7=$self_addr; //@line 5057 "cPickle.c"
        var $8=$7+60; //@line 5057 "cPickle.c"
        var $9=HEAP[$8]; //@line 5057 "cPickle.c"
        var $10=$self_addr; //@line 5057 "cPickle.c"
        var $11=$nbytes_addr; //@line 5057 "cPickle.c"
        var $12=FUNCTION_TABLE[$9]($10, $codebytes, $11); //@line 5057 "cPickle.c"
        var $13=($12) < 0; //@line 5057 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5057 "cPickle.c"
      case 3: // $bb4
        $0=-1; //@line 5057 "cPickle.c"
        __label__ = 8; break; //@line 5057 "cPickle.c"
      case 4: // $bb5
        var $14=$self_addr; //@line 5058 "cPickle.c"
        var $15=$14+32; //@line 5058 "cPickle.c"
        var $16=HEAP[$15]; //@line 5058 "cPickle.c"
        var $17=$16+8; //@line 5058 "cPickle.c"
        var $18=HEAP[$17]; //@line 5058 "cPickle.c"
        var $19=$self_addr; //@line 5058 "cPickle.c"
        var $20=$19+32; //@line 5058 "cPickle.c"
        var $21=HEAP[$20]; //@line 5058 "cPickle.c"
        var $22=$21+12; //@line 5058 "cPickle.c"
        var $23=HEAP[$22]; //@line 5058 "cPickle.c"
        var $24=($18)==($23); //@line 5058 "cPickle.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 5058 "cPickle.c"
      case 5: // $bb6
        var $25=$self_addr; //@line 5058 "cPickle.c"
        var $26=$25+32; //@line 5058 "cPickle.c"
        var $27=HEAP[$26]; //@line 5058 "cPickle.c"
        var $28=_Pdata_grow($27); //@line 5058 "cPickle.c"
        var $29=($28) < 0; //@line 5058 "cPickle.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5058 "cPickle.c"
      case 6: // $bb7
        $0=-1; //@line 5058 "cPickle.c"
        __label__ = 8; break; //@line 5058 "cPickle.c"
      case 7: // $bb8
        var $30=HEAP[__Py_NoneStruct]; //@line 5058 "cPickle.c"
        var $31=($30) + 1; //@line 5058 "cPickle.c"
        HEAP[__Py_NoneStruct]=$31; //@line 5058 "cPickle.c"
        var $32=$self_addr; //@line 5058 "cPickle.c"
        var $33=$32+32; //@line 5058 "cPickle.c"
        var $34=HEAP[$33]; //@line 5058 "cPickle.c"
        var $35=$34+16; //@line 5058 "cPickle.c"
        var $36=HEAP[$35]; //@line 5058 "cPickle.c"
        var $37=$self_addr; //@line 5058 "cPickle.c"
        var $38=$37+32; //@line 5058 "cPickle.c"
        var $39=HEAP[$38]; //@line 5058 "cPickle.c"
        var $40=$39+8; //@line 5058 "cPickle.c"
        var $41=HEAP[$40]; //@line 5058 "cPickle.c"
        var $42=$36+4*$41; //@line 5058 "cPickle.c"
        HEAP[$42]=__Py_NoneStruct; //@line 5058 "cPickle.c"
        var $43=($41) + 1; //@line 5058 "cPickle.c"
        var $44=$39+8; //@line 5058 "cPickle.c"
        HEAP[$44]=$43; //@line 5058 "cPickle.c"
        $0=0; //@line 5059 "cPickle.c"
        __label__ = 8; break; //@line 5059 "cPickle.c"
      case 8: // $bb9
        var $45=$0; //@line 5057 "cPickle.c"
        $retval=$45; //@line 5057 "cPickle.c"
        var $retval10=$retval; //@line 5057 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 5057 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_load($self, $unused) {
    ;
    var __label__;
  
    var $self_addr;
    var $unused_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $unused_addr=$unused;
    var $1=$self_addr; //@line 5393 "cPickle.c"
    var $2=_load($1); //@line 5393 "cPickle.c"
    $0=$2; //@line 5393 "cPickle.c"
    var $3=$0; //@line 5393 "cPickle.c"
    $retval=$3; //@line 5393 "cPickle.c"
    var $retval1=$retval; //@line 5393 "cPickle.c"
    ;
    return $retval1; //@line 5393 "cPickle.c"
  }
  

  function _Unpickler_noload($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr_i106_i;
        var $retval_i107_i;
        var $0;
        var $retval_i_i96_i;
        var $1;
        var $self_addr_i97_i;
        var $retval_i98_i;
        var $2;
        var $self_addr_i_i85_i;
        var $retval_i_i86_i;
        var $3;
        var $self_addr_i87_i;
        var $retval_i88_i;
        var $4;
        var $i_i89_i;
        var $self_addr_i82_i;
        var $retval_i83_i;
        var $5;
        var $self_addr_i75_i;
        var $retval_i76_i;
        var $6;
        var $i_i77_i;
        var $retval_i_i68_i;
        var $7;
        var $self_addr_i69_i;
        var $retval_i70_i;
        var $8;
        var $self_addr_i_i57_i;
        var $retval_i_i58_i;
        var $9;
        var $self_addr_i59_i;
        var $retval_i60_i;
        var $10;
        var $i_i61_i;
        var $self_addr_i55_i;
        var $retval_i56_i;
        var $11;
        var $self_addr_i44_i;
        var $retval_i45_i;
        var $12;
        var $s_i46_i=__stackBase__;
        var $self_addr_i37_i;
        var $retval_i38_i;
        var $13;
        var $obj_i_i;
        var $self_addr_i_i26_i;
        var $retval_i_i27_i;
        var $14;
        var $self_addr_i28_i;
        var $retval_i29_i;
        var $15;
        var $i_i30_i;
        var $s_i31_i=__stackBase__+4;
        var $self_addr_i_i_i;
        var $retval_i_i_i;
        var $16;
        var $self_addr_i20_i;
        var $retval_i21_i;
        var $17;
        var $i_i_i;
        var $self_addr_i13_i;
        var $retval_i14_i;
        var $18;
        var $s_i15_i=__stackBase__+8;
        var $self_addr_i6_i;
        var $retval_i7_i;
        var $19;
        var $s_i8_i=__stackBase__+12;
        var $self_addr_i1_i;
        var $retval_i2_i;
        var $20;
        var $s_i_i=__stackBase__+16;
        var $self_addr_i_i;
        var $retval_i_i;
        var $21;
        var $self_addr_i;
        var $retval_i;
        var $22;
        var $err_i;
        var $val_i;
        var $s_i=__stackBase__+20;
        var $self_addr;
        var $unused_addr;
        var $retval;
        var $23;
        $self_addr=$self;
        $unused_addr=$unused;
        var $24=$self_addr; //@line 5399 "cPickle.c"
        $self_addr_i=$24;
        $err_i=0; //@line 5093 "cPickle.c"
        $val_i=0; //@line 5093 "cPickle.c"
        var $25=$self_addr_i; //@line 5096 "cPickle.c"
        var $26=$25+52; //@line 5096 "cPickle.c"
        HEAP[$26]=0; //@line 5096 "cPickle.c"
        var $27=$self_addr_i; //@line 5097 "cPickle.c"
        var $28=$27+32; //@line 5097 "cPickle.c"
        var $29=HEAP[$28]; //@line 5097 "cPickle.c"
        var $30=_Pdata_clear($29, 0); //@line 5097 "cPickle.c"
        __label__ = 1; break; //@line 5097 "cPickle.c"
      case 1: // $bb_i
        var $31=$self_addr_i; //@line 5100 "cPickle.c"
        var $32=$31+60; //@line 5100 "cPickle.c"
        var $33=HEAP[$32]; //@line 5100 "cPickle.c"
        var $34=$self_addr_i; //@line 5100 "cPickle.c"
        var $35=FUNCTION_TABLE[$33]($34, $s_i, 1); //@line 5100 "cPickle.c"
        var $36=($35) < 0; //@line 5100 "cPickle.c"
        if ($36) { __label__ = 124; break; } else { __label__ = 2; break; } //@line 5100 "cPickle.c"
      case 2: // $bb1_i
        var $37=HEAP[$s_i]; //@line 5103 "cPickle.c"
        var $38=$37; //@line 5103 "cPickle.c"
        var $39=HEAP[$38]; //@line 5103 "cPickle.c"
        var $40=($39); //@line 5103 "cPickle.c"
        if ($40 == -128) {
          __label__ = 120; break;
        }
        else if ($40 == -127) {
          __label__ = 54; break;
        }
        else if ($40 == -126) {
          __label__ = 93; break;
        }
        else if ($40 == -125) {
          __label__ = 94; break;
        }
        else if ($40 == -124) {
          __label__ = 95; break;
        }
        else if ($40 == -123) {
          __label__ = 28; break;
        }
        else if ($40 == -122) {
          __label__ = 29; break;
        }
        else if ($40 == -121) {
          __label__ = 30; break;
        }
        else if ($40 == -120) {
          __label__ = 121; break;
        }
        else if ($40 == -119) {
          __label__ = 122; break;
        }
        else if ($40 == -118) {
          __label__ = 18; break;
        }
        else if ($40 == -117) {
          __label__ = 19; break;
        }
        else if ($40 == 40) {
          __label__ = 96; break;
        }
        else if ($40 == 41) {
          __label__ = 27; break;
        }
        else if ($40 == 46) {
          __label__ = 124; break;
        }
        else if ($40 == 48) {
          __label__ = 100; break;
        }
        else if ($40 == 49) {
          __label__ = 101; break;
        }
        else if ($40 == 50) {
          __label__ = 89; break;
        }
        else if ($40 == 70) {
          __label__ = 20; break;
        }
        else if ($40 == 71) {
          __label__ = 21; break;
        }
        else if ($40 == 73) {
          __label__ = 16; break;
        }
        else if ($40 == 74) {
          __label__ = 7; break;
        }
        else if ($40 == 75) {
          __label__ = 10; break;
        }
        else if ($40 == 76) {
          __label__ = 17; break;
        }
        else if ($40 == 77) {
          __label__ = 13; break;
        }
        else if ($40 == 78) {
          __label__ = 3; break;
        }
        else if ($40 == 80) {
          __label__ = 112; break;
        }
        else if ($40 == 81) {
          __label__ = 113; break;
        }
        else if ($40 == 82) {
          __label__ = 114; break;
        }
        else if ($40 == 83) {
          __label__ = 24; break;
        }
        else if ($40 == 84) {
          __label__ = 22; break;
        }
        else if ($40 == 85) {
          __label__ = 23; break;
        }
        else if ($40 == 86) {
          __label__ = 25; break;
        }
        else if ($40 == 88) {
          __label__ = 26; break;
        }
        else if ($40 == 93) {
          __label__ = 32; break;
        }
        else if ($40 == 97) {
          __label__ = 80; break;
        }
        else if ($40 == 98) {
          __label__ = 86; break;
        }
        else if ($40 == 99) {
          __label__ = 71; break;
        }
        else if ($40 == 100) {
          __label__ = 35; break;
        }
        else if ($40 == 101) {
          __label__ = 81; break;
        }
        else if ($40 == 103) {
          __label__ = 92; break;
        }
        else if ($40 == 104) {
          __label__ = 90; break;
        }
        else if ($40 == 105) {
          __label__ = 41; break;
        }
        else if ($40 == 106) {
          __label__ = 91; break;
        }
        else if ($40 == 108) {
          __label__ = 33; break;
        }
        else if ($40 == 111) {
          __label__ = 36; break;
        }
        else if ($40 == 112) {
          __label__ = 99; break;
        }
        else if ($40 == 113) {
          __label__ = 97; break;
        }
        else if ($40 == 114) {
          __label__ = 98; break;
        }
        else if ($40 == 115) {
          __label__ = 106; break;
        }
        else if ($40 == 116) {
          __label__ = 31; break;
        }
        else if ($40 == 117) {
          __label__ = 107; break;
        }
        else if ($40 == 125) {
          __label__ = 34; break;
        }
        else {
        __label__ = 123; break;
        }
        
      case 3: // $bb2_i
        var $41=$self_addr_i; //@line 5105 "cPickle.c"
        $self_addr_i_i=$41;
        var $42=$self_addr_i_i; //@line 3332 "cPickle.c"
        var $43=$42+32; //@line 3332 "cPickle.c"
        var $44=HEAP[$43]; //@line 3332 "cPickle.c"
        var $45=$44+8; //@line 3332 "cPickle.c"
        var $46=HEAP[$45]; //@line 3332 "cPickle.c"
        var $47=$self_addr_i_i; //@line 3332 "cPickle.c"
        var $48=$47+32; //@line 3332 "cPickle.c"
        var $49=HEAP[$48]; //@line 3332 "cPickle.c"
        var $50=$49+12; //@line 3332 "cPickle.c"
        var $51=HEAP[$50]; //@line 3332 "cPickle.c"
        var $52=($46)==($51); //@line 3332 "cPickle.c"
        if ($52) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3332 "cPickle.c"
      case 4: // $bb_i_i
        var $53=$self_addr_i_i; //@line 3332 "cPickle.c"
        var $54=$53+32; //@line 3332 "cPickle.c"
        var $55=HEAP[$54]; //@line 3332 "cPickle.c"
        var $56=_Pdata_grow($55); //@line 3332 "cPickle.c"
        var $57=($56) < 0; //@line 3332 "cPickle.c"
        if ($57) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3332 "cPickle.c"
      case 5: // $load_none_exit_thread_i
        $21=-1; //@line 3332 "cPickle.c"
        $retval_i_i=-1; //@line 3332 "cPickle.c"
        __label__ = 124; break;
      case 6: // $load_none_exit_i
        var $58=HEAP[__Py_NoneStruct]; //@line 3332 "cPickle.c"
        var $59=($58) + 1; //@line 3332 "cPickle.c"
        HEAP[__Py_NoneStruct]=$59; //@line 3332 "cPickle.c"
        var $60=$self_addr_i_i; //@line 3332 "cPickle.c"
        var $61=$60+32; //@line 3332 "cPickle.c"
        var $62=HEAP[$61]; //@line 3332 "cPickle.c"
        var $63=$62+16; //@line 3332 "cPickle.c"
        var $64=HEAP[$63]; //@line 3332 "cPickle.c"
        var $65=$self_addr_i_i; //@line 3332 "cPickle.c"
        var $66=$65+32; //@line 3332 "cPickle.c"
        var $67=HEAP[$66]; //@line 3332 "cPickle.c"
        var $68=$67+8; //@line 3332 "cPickle.c"
        var $69=HEAP[$68]; //@line 3332 "cPickle.c"
        var $70=$64+4*$69; //@line 3332 "cPickle.c"
        HEAP[$70]=__Py_NoneStruct; //@line 3332 "cPickle.c"
        var $71=($69) + 1; //@line 3332 "cPickle.c"
        var $72=$67+8; //@line 3332 "cPickle.c"
        HEAP[$72]=$71; //@line 3332 "cPickle.c"
        $21=0; //@line 3333 "cPickle.c"
        $retval_i_i=0; //@line 3332 "cPickle.c"
        __label__ = 1; break;
      case 7: // $bb4_i
        var $73=$self_addr_i; //@line 5110 "cPickle.c"
        $self_addr_i1_i=$73;
        var $74=$self_addr_i1_i; //@line 3445 "cPickle.c"
        var $75=$74+60; //@line 3445 "cPickle.c"
        var $76=HEAP[$75]; //@line 3445 "cPickle.c"
        var $77=$self_addr_i1_i; //@line 3445 "cPickle.c"
        var $78=FUNCTION_TABLE[$76]($77, $s_i_i, 4); //@line 3445 "cPickle.c"
        var $79=($78) < 0; //@line 3445 "cPickle.c"
        if ($79) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3445 "cPickle.c"
      case 8: // $load_binint_exit_thread_i
        $20=-1; //@line 3446 "cPickle.c"
        $retval_i2_i=-1; //@line 3446 "cPickle.c"
        __label__ = 124; break;
      case 9: // $load_binint_exit_i
        var $80=HEAP[$s_i_i]; //@line 3448 "cPickle.c"
        var $81=$self_addr_i1_i; //@line 3448 "cPickle.c"
        var $82=_load_binintx($81, $80, 4); //@line 3448 "cPickle.c"
        $20=$82; //@line 3448 "cPickle.c"
        $retval_i2_i=$82; //@line 3446 "cPickle.c"
        var $83=($82) < 0; //@line 5110 "cPickle.c"
        if ($83) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5110 "cPickle.c"
      case 10: // $bb6_i
        var $84=$self_addr_i; //@line 5115 "cPickle.c"
        $self_addr_i6_i=$84;
        var $85=$self_addr_i6_i; //@line 3457 "cPickle.c"
        var $86=$85+60; //@line 3457 "cPickle.c"
        var $87=HEAP[$86]; //@line 3457 "cPickle.c"
        var $88=$self_addr_i6_i; //@line 3457 "cPickle.c"
        var $89=FUNCTION_TABLE[$87]($88, $s_i8_i, 1); //@line 3457 "cPickle.c"
        var $90=($89) < 0; //@line 3457 "cPickle.c"
        if ($90) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3457 "cPickle.c"
      case 11: // $load_binint1_exit_thread_i
        $19=-1; //@line 3458 "cPickle.c"
        $retval_i7_i=-1; //@line 3458 "cPickle.c"
        __label__ = 124; break;
      case 12: // $load_binint1_exit_i
        var $91=HEAP[$s_i8_i]; //@line 3460 "cPickle.c"
        var $92=$self_addr_i6_i; //@line 3460 "cPickle.c"
        var $93=_load_binintx($92, $91, 1); //@line 3460 "cPickle.c"
        $19=$93; //@line 3460 "cPickle.c"
        $retval_i7_i=$93; //@line 3458 "cPickle.c"
        var $94=($93) < 0; //@line 5115 "cPickle.c"
        if ($94) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5115 "cPickle.c"
      case 13: // $bb8_i
        var $95=$self_addr_i; //@line 5120 "cPickle.c"
        $self_addr_i13_i=$95;
        var $96=$self_addr_i13_i; //@line 3469 "cPickle.c"
        var $97=$96+60; //@line 3469 "cPickle.c"
        var $98=HEAP[$97]; //@line 3469 "cPickle.c"
        var $99=$self_addr_i13_i; //@line 3469 "cPickle.c"
        var $100=FUNCTION_TABLE[$98]($99, $s_i15_i, 2); //@line 3469 "cPickle.c"
        var $101=($100) < 0; //@line 3469 "cPickle.c"
        if ($101) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3469 "cPickle.c"
      case 14: // $load_binint2_exit_thread_i
        $18=-1; //@line 3470 "cPickle.c"
        $retval_i14_i=-1; //@line 3470 "cPickle.c"
        __label__ = 124; break;
      case 15: // $load_binint2_exit_i
        var $102=HEAP[$s_i15_i]; //@line 3472 "cPickle.c"
        var $103=$self_addr_i13_i; //@line 3472 "cPickle.c"
        var $104=_load_binintx($103, $102, 2); //@line 3472 "cPickle.c"
        $18=$104; //@line 3472 "cPickle.c"
        $retval_i14_i=$104; //@line 3470 "cPickle.c"
        var $105=($104) < 0; //@line 5120 "cPickle.c"
        if ($105) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5120 "cPickle.c"
      case 16: // $bb10_i
        var $106=$self_addr_i; //@line 5125 "cPickle.c"
        var $107=_load_int($106); //@line 5125 "cPickle.c"
        var $108=($107) < 0; //@line 5125 "cPickle.c"
        if ($108) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5125 "cPickle.c"
      case 17: // $bb12_i
        var $109=$self_addr_i; //@line 5130 "cPickle.c"
        var $110=_load_long($109); //@line 5130 "cPickle.c"
        var $111=($110) < 0; //@line 5130 "cPickle.c"
        if ($111) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5130 "cPickle.c"
      case 18: // $bb14_i
        var $112=$self_addr_i; //@line 5135 "cPickle.c"
        var $113=_load_counted_long($112, 1); //@line 5135 "cPickle.c"
        var $114=($113) < 0; //@line 5135 "cPickle.c"
        if ($114) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5135 "cPickle.c"
      case 19: // $bb16_i
        var $115=$self_addr_i; //@line 5140 "cPickle.c"
        var $116=_load_counted_long($115, 4); //@line 5140 "cPickle.c"
        var $117=($116) < 0; //@line 5140 "cPickle.c"
        if ($117) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5140 "cPickle.c"
      case 20: // $bb18_i
        var $118=$self_addr_i; //@line 5145 "cPickle.c"
        var $119=_load_float($118); //@line 5145 "cPickle.c"
        var $120=($119) < 0; //@line 5145 "cPickle.c"
        if ($120) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5145 "cPickle.c"
      case 21: // $bb20_i
        var $121=$self_addr_i; //@line 5150 "cPickle.c"
        var $122=_load_binfloat($121); //@line 5150 "cPickle.c"
        var $123=($122) < 0; //@line 5150 "cPickle.c"
        if ($123) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5150 "cPickle.c"
      case 22: // $bb22_i
        var $124=$self_addr_i; //@line 5155 "cPickle.c"
        var $125=_load_binstring($124); //@line 5155 "cPickle.c"
        var $126=($125) < 0; //@line 5155 "cPickle.c"
        if ($126) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5155 "cPickle.c"
      case 23: // $bb24_i
        var $127=$self_addr_i; //@line 5160 "cPickle.c"
        var $128=_load_short_binstring($127); //@line 5160 "cPickle.c"
        var $129=($128) < 0; //@line 5160 "cPickle.c"
        if ($129) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5160 "cPickle.c"
      case 24: // $bb26_i
        var $130=$self_addr_i; //@line 5165 "cPickle.c"
        var $131=_load_string($130); //@line 5165 "cPickle.c"
        var $132=($131) < 0; //@line 5165 "cPickle.c"
        if ($132) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5165 "cPickle.c"
      case 25: // $bb28_i
        var $133=$self_addr_i; //@line 5171 "cPickle.c"
        var $134=_load_unicode($133); //@line 5171 "cPickle.c"
        var $135=($134) < 0; //@line 5171 "cPickle.c"
        if ($135) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5171 "cPickle.c"
      case 26: // $bb30_i
        var $136=$self_addr_i; //@line 5176 "cPickle.c"
        var $137=_load_binunicode($136); //@line 5176 "cPickle.c"
        var $138=($137) < 0; //@line 5176 "cPickle.c"
        if ($138) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5176 "cPickle.c"
      case 27: // $bb32_i
        var $139=$self_addr_i; //@line 5182 "cPickle.c"
        var $140=_load_counted_tuple($139, 0); //@line 5182 "cPickle.c"
        var $141=($140) < 0; //@line 5182 "cPickle.c"
        if ($141) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5182 "cPickle.c"
      case 28: // $bb34_i
        var $142=$self_addr_i; //@line 5187 "cPickle.c"
        var $143=_load_counted_tuple($142, 1); //@line 5187 "cPickle.c"
        var $144=($143) < 0; //@line 5187 "cPickle.c"
        if ($144) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5187 "cPickle.c"
      case 29: // $bb36_i
        var $145=$self_addr_i; //@line 5192 "cPickle.c"
        var $146=_load_counted_tuple($145, 2); //@line 5192 "cPickle.c"
        var $147=($146) < 0; //@line 5192 "cPickle.c"
        if ($147) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5192 "cPickle.c"
      case 30: // $bb38_i
        var $148=$self_addr_i; //@line 5197 "cPickle.c"
        var $149=_load_counted_tuple($148, 3); //@line 5197 "cPickle.c"
        var $150=($149) < 0; //@line 5197 "cPickle.c"
        if ($150) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5197 "cPickle.c"
      case 31: // $bb40_i
        var $151=$self_addr_i; //@line 5202 "cPickle.c"
        var $152=_load_tuple($151); //@line 5202 "cPickle.c"
        var $153=($152) < 0; //@line 5202 "cPickle.c"
        if ($153) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5202 "cPickle.c"
      case 32: // $bb42_i
        var $154=$self_addr_i; //@line 5207 "cPickle.c"
        var $155=_load_empty_list($154); //@line 5207 "cPickle.c"
        var $156=($155) < 0; //@line 5207 "cPickle.c"
        if ($156) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5207 "cPickle.c"
      case 33: // $bb44_i
        var $157=$self_addr_i; //@line 5212 "cPickle.c"
        var $158=_load_list($157); //@line 5212 "cPickle.c"
        var $159=($158) < 0; //@line 5212 "cPickle.c"
        if ($159) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5212 "cPickle.c"
      case 34: // $bb46_i
        var $160=$self_addr_i; //@line 5217 "cPickle.c"
        var $161=_load_empty_dict($160); //@line 5217 "cPickle.c"
        var $162=($161) < 0; //@line 5217 "cPickle.c"
        if ($162) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5217 "cPickle.c"
      case 35: // $bb48_i
        var $163=$self_addr_i; //@line 5222 "cPickle.c"
        var $164=_load_dict($163); //@line 5222 "cPickle.c"
        var $165=($164) < 0; //@line 5222 "cPickle.c"
        if ($165) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5222 "cPickle.c"
      case 36: // $bb50_i
        var $166=$self_addr_i; //@line 5227 "cPickle.c"
        $self_addr_i20_i=$166;
        var $167=$self_addr_i20_i; //@line 4986 "cPickle.c"
        $self_addr_i_i_i=$167;
        var $168=$self_addr_i_i_i; //@line 3320 "cPickle.c"
        var $169=$168+52; //@line 3320 "cPickle.c"
        var $170=HEAP[$169]; //@line 3320 "cPickle.c"
        var $171=($170) <= 0; //@line 3320 "cPickle.c"
        if ($171) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 3320 "cPickle.c"
      case 37: // $marker_exit_thread_i_i
        var $172=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($172, __str78); //@line 3321 "cPickle.c"
        $16=-1; //@line 3322 "cPickle.c"
        $retval_i_i_i=-1; //@line 3322 "cPickle.c"
        $i_i_i=-1; //@line 4986 "cPickle.c"
        __label__ = 39; break;
      case 38: // $marker_exit_i_i
        var $173=$self_addr_i_i_i; //@line 3325 "cPickle.c"
        var $174=$173+48; //@line 3325 "cPickle.c"
        var $175=HEAP[$174]; //@line 3325 "cPickle.c"
        var $176=$self_addr_i_i_i; //@line 3325 "cPickle.c"
        var $177=$176+52; //@line 3325 "cPickle.c"
        var $178=HEAP[$177]; //@line 3325 "cPickle.c"
        var $179=($178) - 1; //@line 3325 "cPickle.c"
        var $180=$self_addr_i_i_i; //@line 3325 "cPickle.c"
        var $181=$180+52; //@line 3325 "cPickle.c"
        HEAP[$181]=$179; //@line 3325 "cPickle.c"
        var $182=$self_addr_i_i_i; //@line 3325 "cPickle.c"
        var $183=$182+52; //@line 3325 "cPickle.c"
        var $184=HEAP[$183]; //@line 3325 "cPickle.c"
        var $185=$175+4*$184; //@line 3325 "cPickle.c"
        var $186=HEAP[$185]; //@line 3325 "cPickle.c"
        $16=$186; //@line 3325 "cPickle.c"
        $retval_i_i_i=$186; //@line 3322 "cPickle.c"
        $i_i_i=$186; //@line 4986 "cPickle.c"
        var $187=($186) < 0; //@line 4986 "cPickle.c"
        if ($187) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 4986 "cPickle.c"
      case 39: // $noload_obj_exit_thread_i
        $17=-1; //@line 4986 "cPickle.c"
        $retval_i21_i=-1; //@line 4986 "cPickle.c"
        __label__ = 124; break;
      case 40: // $noload_obj_exit_i
        var $188=$i_i_i; //@line 4987 "cPickle.c"
        var $189=($188) + 1; //@line 4987 "cPickle.c"
        var $190=$self_addr_i20_i; //@line 4987 "cPickle.c"
        var $191=$190+32; //@line 4987 "cPickle.c"
        var $192=HEAP[$191]; //@line 4987 "cPickle.c"
        var $193=_Pdata_clear($192, $189); //@line 4987 "cPickle.c"
        $17=$193; //@line 4987 "cPickle.c"
        $retval_i21_i=$193; //@line 4986 "cPickle.c"
        var $194=($193) < 0; //@line 5227 "cPickle.c"
        if ($194) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5227 "cPickle.c"
      case 41: // $bb52_i
        var $195=$self_addr_i; //@line 5232 "cPickle.c"
        $self_addr_i28_i=$195;
        var $196=$self_addr_i28_i; //@line 4997 "cPickle.c"
        $self_addr_i_i26_i=$196;
        var $197=$self_addr_i_i26_i; //@line 3320 "cPickle.c"
        var $198=$197+52; //@line 3320 "cPickle.c"
        var $199=HEAP[$198]; //@line 3320 "cPickle.c"
        var $200=($199) <= 0; //@line 3320 "cPickle.c"
        if ($200) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 3320 "cPickle.c"
      case 42: // $marker_exit_thread_i32_i
        var $201=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($201, __str78); //@line 3321 "cPickle.c"
        $14=-1; //@line 3322 "cPickle.c"
        $retval_i_i27_i=-1; //@line 3322 "cPickle.c"
        $i_i30_i=-1; //@line 4997 "cPickle.c"
        __label__ = 44; break;
      case 43: // $marker_exit_i33_i
        var $202=$self_addr_i_i26_i; //@line 3325 "cPickle.c"
        var $203=$202+48; //@line 3325 "cPickle.c"
        var $204=HEAP[$203]; //@line 3325 "cPickle.c"
        var $205=$self_addr_i_i26_i; //@line 3325 "cPickle.c"
        var $206=$205+52; //@line 3325 "cPickle.c"
        var $207=HEAP[$206]; //@line 3325 "cPickle.c"
        var $208=($207) - 1; //@line 3325 "cPickle.c"
        var $209=$self_addr_i_i26_i; //@line 3325 "cPickle.c"
        var $210=$209+52; //@line 3325 "cPickle.c"
        HEAP[$210]=$208; //@line 3325 "cPickle.c"
        var $211=$self_addr_i_i26_i; //@line 3325 "cPickle.c"
        var $212=$211+52; //@line 3325 "cPickle.c"
        var $213=HEAP[$212]; //@line 3325 "cPickle.c"
        var $214=$204+4*$213; //@line 3325 "cPickle.c"
        var $215=HEAP[$214]; //@line 3325 "cPickle.c"
        $14=$215; //@line 3325 "cPickle.c"
        $retval_i_i27_i=$215; //@line 3322 "cPickle.c"
        $i_i30_i=$215; //@line 4997 "cPickle.c"
        var $216=($215) < 0; //@line 4997 "cPickle.c"
        if ($216) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 4997 "cPickle.c"
      case 44: // $bb_i34_i
        $15=-1; //@line 4997 "cPickle.c"
        __label__ = 52; break; //@line 4997 "cPickle.c"
      case 45: // $bb1_i35_i
        var $217=$self_addr_i28_i; //@line 4998 "cPickle.c"
        var $218=$217+32; //@line 4998 "cPickle.c"
        var $219=HEAP[$218]; //@line 4998 "cPickle.c"
        var $220=$i_i30_i; //@line 4998 "cPickle.c"
        var $221=_Pdata_clear($219, $220); //@line 4998 "cPickle.c"
        var $222=$self_addr_i28_i; //@line 4999 "cPickle.c"
        var $223=$222+64; //@line 4999 "cPickle.c"
        var $224=HEAP[$223]; //@line 4999 "cPickle.c"
        var $225=$self_addr_i28_i; //@line 4999 "cPickle.c"
        var $226=FUNCTION_TABLE[$224]($225, $s_i31_i); //@line 4999 "cPickle.c"
        var $227=($226) < 0; //@line 4999 "cPickle.c"
        if ($227) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 4999 "cPickle.c"
      case 46: // $bb2_i36_i
        $15=-1; //@line 4999 "cPickle.c"
        __label__ = 52; break; //@line 4999 "cPickle.c"
      case 47: // $bb3_i_i
        var $228=$self_addr_i28_i; //@line 5000 "cPickle.c"
        var $229=$228+64; //@line 5000 "cPickle.c"
        var $230=HEAP[$229]; //@line 5000 "cPickle.c"
        var $231=$self_addr_i28_i; //@line 5000 "cPickle.c"
        var $232=FUNCTION_TABLE[$230]($231, $s_i31_i); //@line 5000 "cPickle.c"
        var $233=($232) < 0; //@line 5000 "cPickle.c"
        if ($233) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 5000 "cPickle.c"
      case 48: // $bb4_i_i
        $15=-1; //@line 5000 "cPickle.c"
        __label__ = 52; break; //@line 5000 "cPickle.c"
      case 49: // $bb5_i_i
        var $234=$self_addr_i28_i; //@line 5001 "cPickle.c"
        var $235=$234+32; //@line 5001 "cPickle.c"
        var $236=HEAP[$235]; //@line 5001 "cPickle.c"
        var $237=$236+8; //@line 5001 "cPickle.c"
        var $238=HEAP[$237]; //@line 5001 "cPickle.c"
        var $239=$self_addr_i28_i; //@line 5001 "cPickle.c"
        var $240=$239+32; //@line 5001 "cPickle.c"
        var $241=HEAP[$240]; //@line 5001 "cPickle.c"
        var $242=$241+12; //@line 5001 "cPickle.c"
        var $243=HEAP[$242]; //@line 5001 "cPickle.c"
        var $244=($238)==($243); //@line 5001 "cPickle.c"
        if ($244) { __label__ = 50; break; } else { __label__ = 53; break; } //@line 5001 "cPickle.c"
      case 50: // $bb6_i_i
        var $245=$self_addr_i28_i; //@line 5001 "cPickle.c"
        var $246=$245+32; //@line 5001 "cPickle.c"
        var $247=HEAP[$246]; //@line 5001 "cPickle.c"
        var $248=_Pdata_grow($247); //@line 5001 "cPickle.c"
        var $249=($248) < 0; //@line 5001 "cPickle.c"
        if ($249) { __label__ = 51; break; } else { __label__ = 53; break; } //@line 5001 "cPickle.c"
      case 51: // $bb7_i_i
        $15=-1; //@line 5001 "cPickle.c"
        __label__ = 52; break; //@line 5001 "cPickle.c"
      case 52: // $noload_inst_exit_thread_i
        $retval_i29_i=-1; //@line 4997 "cPickle.c"
        __label__ = 124; break;
      case 53: // $noload_inst_exit_i
        var $250=HEAP[__Py_NoneStruct]; //@line 5001 "cPickle.c"
        var $251=($250) + 1; //@line 5001 "cPickle.c"
        HEAP[__Py_NoneStruct]=$251; //@line 5001 "cPickle.c"
        var $252=$self_addr_i28_i; //@line 5001 "cPickle.c"
        var $253=$252+32; //@line 5001 "cPickle.c"
        var $254=HEAP[$253]; //@line 5001 "cPickle.c"
        var $255=$254+16; //@line 5001 "cPickle.c"
        var $256=HEAP[$255]; //@line 5001 "cPickle.c"
        var $257=$self_addr_i28_i; //@line 5001 "cPickle.c"
        var $258=$257+32; //@line 5001 "cPickle.c"
        var $259=HEAP[$258]; //@line 5001 "cPickle.c"
        var $260=$259+8; //@line 5001 "cPickle.c"
        var $261=HEAP[$260]; //@line 5001 "cPickle.c"
        var $262=$256+4*$261; //@line 5001 "cPickle.c"
        HEAP[$262]=__Py_NoneStruct; //@line 5001 "cPickle.c"
        var $263=($261) + 1; //@line 5001 "cPickle.c"
        var $264=$259+8; //@line 5001 "cPickle.c"
        HEAP[$264]=$263; //@line 5001 "cPickle.c"
        $15=0; //@line 5002 "cPickle.c"
        $retval_i29_i=0; //@line 4997 "cPickle.c"
        __label__ = 1; break;
      case 54: // $bb54_i
        var $265=$self_addr_i; //@line 5237 "cPickle.c"
        $self_addr_i37_i=$265;
        var $266=$self_addr_i37_i; //@line 5010 "cPickle.c"
        var $267=$266+32; //@line 5010 "cPickle.c"
        var $268=HEAP[$267]; //@line 5010 "cPickle.c"
        var $269=$268+8; //@line 5010 "cPickle.c"
        var $270=HEAP[$269]; //@line 5010 "cPickle.c"
        var $271=($270)!=0; //@line 5010 "cPickle.c"
        if ($271) { __label__ = 56; break; } else { __label__ = 55; break; } //@line 5010 "cPickle.c"
      case 55: // $bb2_thread_i_i
        var $272=HEAP[_UnpicklingError]; //@line 5010 "cPickle.c"
        _PyErr_SetString($272, __str88); //@line 5010 "cPickle.c"
        $obj_i_i=0; //@line 5010 "cPickle.c"
        __label__ = 57; break;
      case 56: // $bb2_i39_i
        var $273=$self_addr_i37_i; //@line 5010 "cPickle.c"
        var $274=$273+32; //@line 5010 "cPickle.c"
        var $275=HEAP[$274]; //@line 5010 "cPickle.c"
        var $276=$275+16; //@line 5010 "cPickle.c"
        var $277=HEAP[$276]; //@line 5010 "cPickle.c"
        var $278=$self_addr_i37_i; //@line 5010 "cPickle.c"
        var $279=$278+32; //@line 5010 "cPickle.c"
        var $280=HEAP[$279]; //@line 5010 "cPickle.c"
        var $281=$280+8; //@line 5010 "cPickle.c"
        var $282=HEAP[$281]; //@line 5010 "cPickle.c"
        var $283=($282) - 1; //@line 5010 "cPickle.c"
        var $284=$280+8; //@line 5010 "cPickle.c"
        HEAP[$284]=$283; //@line 5010 "cPickle.c"
        var $285=$280+8; //@line 5010 "cPickle.c"
        var $286=HEAP[$285]; //@line 5010 "cPickle.c"
        var $287=$277+4*$286; //@line 5010 "cPickle.c"
        var $288=HEAP[$287]; //@line 5010 "cPickle.c"
        $obj_i_i=$288; //@line 5010 "cPickle.c"
        var $289=($288)==0; //@line 5011 "cPickle.c"
        if ($289) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 5011 "cPickle.c"
      case 57: // $bb3_i40_i
        $13=-1; //@line 5011 "cPickle.c"
        __label__ = 69; break; //@line 5011 "cPickle.c"
      case 58: // $bb4_i41_i
        var $290=$obj_i_i; //@line 5012 "cPickle.c"
        var $291=$290; //@line 5012 "cPickle.c"
        var $292=HEAP[$291]; //@line 5012 "cPickle.c"
        var $293=($292) - 1; //@line 5012 "cPickle.c"
        var $294=$obj_i_i; //@line 5012 "cPickle.c"
        var $295=$294; //@line 5012 "cPickle.c"
        HEAP[$295]=$293; //@line 5012 "cPickle.c"
        var $296=$obj_i_i; //@line 5012 "cPickle.c"
        var $297=$296; //@line 5012 "cPickle.c"
        var $298=HEAP[$297]; //@line 5012 "cPickle.c"
        var $299=($298)==0; //@line 5012 "cPickle.c"
        if ($299) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 5012 "cPickle.c"
      case 59: // $bb5_i42_i
        var $300=$obj_i_i; //@line 5012 "cPickle.c"
        var $301=$300+4; //@line 5012 "cPickle.c"
        var $302=HEAP[$301]; //@line 5012 "cPickle.c"
        var $303=$302+24; //@line 5012 "cPickle.c"
        var $304=HEAP[$303]; //@line 5012 "cPickle.c"
        var $305=$obj_i_i; //@line 5012 "cPickle.c"
        FUNCTION_TABLE[$304]($305); //@line 5012 "cPickle.c"
        __label__ = 60; break; //@line 5012 "cPickle.c"
      case 60: // $bb6_i43_i
        var $306=$self_addr_i37_i; //@line 5014 "cPickle.c"
        var $307=$306+32; //@line 5014 "cPickle.c"
        var $308=HEAP[$307]; //@line 5014 "cPickle.c"
        var $309=$308+8; //@line 5014 "cPickle.c"
        var $310=HEAP[$309]; //@line 5014 "cPickle.c"
        var $311=($310)!=0; //@line 5014 "cPickle.c"
        if ($311) { __label__ = 62; break; } else { __label__ = 61; break; } //@line 5014 "cPickle.c"
      case 61: // $bb9_thread_i_i
        var $312=HEAP[_UnpicklingError]; //@line 5014 "cPickle.c"
        _PyErr_SetString($312, __str88); //@line 5014 "cPickle.c"
        $obj_i_i=0; //@line 5014 "cPickle.c"
        __label__ = 63; break;
      case 62: // $bb9_i_i
        var $313=$self_addr_i37_i; //@line 5014 "cPickle.c"
        var $314=$313+32; //@line 5014 "cPickle.c"
        var $315=HEAP[$314]; //@line 5014 "cPickle.c"
        var $316=$315+16; //@line 5014 "cPickle.c"
        var $317=HEAP[$316]; //@line 5014 "cPickle.c"
        var $318=$self_addr_i37_i; //@line 5014 "cPickle.c"
        var $319=$318+32; //@line 5014 "cPickle.c"
        var $320=HEAP[$319]; //@line 5014 "cPickle.c"
        var $321=$320+8; //@line 5014 "cPickle.c"
        var $322=HEAP[$321]; //@line 5014 "cPickle.c"
        var $323=($322) - 1; //@line 5014 "cPickle.c"
        var $324=$320+8; //@line 5014 "cPickle.c"
        HEAP[$324]=$323; //@line 5014 "cPickle.c"
        var $325=$320+8; //@line 5014 "cPickle.c"
        var $326=HEAP[$325]; //@line 5014 "cPickle.c"
        var $327=$317+4*$326; //@line 5014 "cPickle.c"
        var $328=HEAP[$327]; //@line 5014 "cPickle.c"
        $obj_i_i=$328; //@line 5014 "cPickle.c"
        var $329=($328)==0; //@line 5015 "cPickle.c"
        if ($329) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 5015 "cPickle.c"
      case 63: // $bb10_i_i
        $13=-1; //@line 5015 "cPickle.c"
        __label__ = 69; break; //@line 5015 "cPickle.c"
      case 64: // $bb11_i_i
        var $330=$obj_i_i; //@line 5016 "cPickle.c"
        var $331=$330; //@line 5016 "cPickle.c"
        var $332=HEAP[$331]; //@line 5016 "cPickle.c"
        var $333=($332) - 1; //@line 5016 "cPickle.c"
        var $334=$obj_i_i; //@line 5016 "cPickle.c"
        var $335=$334; //@line 5016 "cPickle.c"
        HEAP[$335]=$333; //@line 5016 "cPickle.c"
        var $336=$obj_i_i; //@line 5016 "cPickle.c"
        var $337=$336; //@line 5016 "cPickle.c"
        var $338=HEAP[$337]; //@line 5016 "cPickle.c"
        var $339=($338)==0; //@line 5016 "cPickle.c"
        if ($339) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 5016 "cPickle.c"
      case 65: // $bb12_i_i
        var $340=$obj_i_i; //@line 5016 "cPickle.c"
        var $341=$340+4; //@line 5016 "cPickle.c"
        var $342=HEAP[$341]; //@line 5016 "cPickle.c"
        var $343=$342+24; //@line 5016 "cPickle.c"
        var $344=HEAP[$343]; //@line 5016 "cPickle.c"
        var $345=$obj_i_i; //@line 5016 "cPickle.c"
        FUNCTION_TABLE[$344]($345); //@line 5016 "cPickle.c"
        __label__ = 66; break; //@line 5016 "cPickle.c"
      case 66: // $bb13_i_i
        var $346=$self_addr_i37_i; //@line 5018 "cPickle.c"
        var $347=$346+32; //@line 5018 "cPickle.c"
        var $348=HEAP[$347]; //@line 5018 "cPickle.c"
        var $349=$348+8; //@line 5018 "cPickle.c"
        var $350=HEAP[$349]; //@line 5018 "cPickle.c"
        var $351=$self_addr_i37_i; //@line 5018 "cPickle.c"
        var $352=$351+32; //@line 5018 "cPickle.c"
        var $353=HEAP[$352]; //@line 5018 "cPickle.c"
        var $354=$353+12; //@line 5018 "cPickle.c"
        var $355=HEAP[$354]; //@line 5018 "cPickle.c"
        var $356=($350)==($355); //@line 5018 "cPickle.c"
        if ($356) { __label__ = 67; break; } else { __label__ = 70; break; } //@line 5018 "cPickle.c"
      case 67: // $bb14_i_i
        var $357=$self_addr_i37_i; //@line 5018 "cPickle.c"
        var $358=$357+32; //@line 5018 "cPickle.c"
        var $359=HEAP[$358]; //@line 5018 "cPickle.c"
        var $360=_Pdata_grow($359); //@line 5018 "cPickle.c"
        var $361=($360) < 0; //@line 5018 "cPickle.c"
        if ($361) { __label__ = 68; break; } else { __label__ = 70; break; } //@line 5018 "cPickle.c"
      case 68: // $bb15_i_i
        $13=-1; //@line 5018 "cPickle.c"
        __label__ = 69; break; //@line 5018 "cPickle.c"
      case 69: // $noload_newobj_exit_thread_i
        $retval_i38_i=-1; //@line 5011 "cPickle.c"
        __label__ = 124; break;
      case 70: // $noload_newobj_exit_i
        var $362=HEAP[__Py_NoneStruct]; //@line 5018 "cPickle.c"
        var $363=($362) + 1; //@line 5018 "cPickle.c"
        HEAP[__Py_NoneStruct]=$363; //@line 5018 "cPickle.c"
        var $364=$self_addr_i37_i; //@line 5018 "cPickle.c"
        var $365=$364+32; //@line 5018 "cPickle.c"
        var $366=HEAP[$365]; //@line 5018 "cPickle.c"
        var $367=$366+16; //@line 5018 "cPickle.c"
        var $368=HEAP[$367]; //@line 5018 "cPickle.c"
        var $369=$self_addr_i37_i; //@line 5018 "cPickle.c"
        var $370=$369+32; //@line 5018 "cPickle.c"
        var $371=HEAP[$370]; //@line 5018 "cPickle.c"
        var $372=$371+8; //@line 5018 "cPickle.c"
        var $373=HEAP[$372]; //@line 5018 "cPickle.c"
        var $374=$368+4*$373; //@line 5018 "cPickle.c"
        HEAP[$374]=__Py_NoneStruct; //@line 5018 "cPickle.c"
        var $375=($373) + 1; //@line 5018 "cPickle.c"
        var $376=$371+8; //@line 5018 "cPickle.c"
        HEAP[$376]=$375; //@line 5018 "cPickle.c"
        $13=0; //@line 5019 "cPickle.c"
        $retval_i38_i=0; //@line 5011 "cPickle.c"
        __label__ = 1; break;
      case 71: // $bb56_i
        var $377=$self_addr_i; //@line 5242 "cPickle.c"
        $self_addr_i44_i=$377;
        var $378=$self_addr_i44_i; //@line 5027 "cPickle.c"
        var $379=$378+64; //@line 5027 "cPickle.c"
        var $380=HEAP[$379]; //@line 5027 "cPickle.c"
        var $381=$self_addr_i44_i; //@line 5027 "cPickle.c"
        var $382=FUNCTION_TABLE[$380]($381, $s_i46_i); //@line 5027 "cPickle.c"
        var $383=($382) < 0; //@line 5027 "cPickle.c"
        if ($383) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 5027 "cPickle.c"
      case 72: // $bb_i47_i
        $12=-1; //@line 5027 "cPickle.c"
        __label__ = 78; break; //@line 5027 "cPickle.c"
      case 73: // $bb1_i48_i
        var $384=$self_addr_i44_i; //@line 5028 "cPickle.c"
        var $385=$384+64; //@line 5028 "cPickle.c"
        var $386=HEAP[$385]; //@line 5028 "cPickle.c"
        var $387=$self_addr_i44_i; //@line 5028 "cPickle.c"
        var $388=FUNCTION_TABLE[$386]($387, $s_i46_i); //@line 5028 "cPickle.c"
        var $389=($388) < 0; //@line 5028 "cPickle.c"
        if ($389) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 5028 "cPickle.c"
      case 74: // $bb2_i49_i
        $12=-1; //@line 5028 "cPickle.c"
        __label__ = 78; break; //@line 5028 "cPickle.c"
      case 75: // $bb3_i50_i
        var $390=$self_addr_i44_i; //@line 5029 "cPickle.c"
        var $391=$390+32; //@line 5029 "cPickle.c"
        var $392=HEAP[$391]; //@line 5029 "cPickle.c"
        var $393=$392+8; //@line 5029 "cPickle.c"
        var $394=HEAP[$393]; //@line 5029 "cPickle.c"
        var $395=$self_addr_i44_i; //@line 5029 "cPickle.c"
        var $396=$395+32; //@line 5029 "cPickle.c"
        var $397=HEAP[$396]; //@line 5029 "cPickle.c"
        var $398=$397+12; //@line 5029 "cPickle.c"
        var $399=HEAP[$398]; //@line 5029 "cPickle.c"
        var $400=($394)==($399); //@line 5029 "cPickle.c"
        if ($400) { __label__ = 76; break; } else { __label__ = 79; break; } //@line 5029 "cPickle.c"
      case 76: // $bb4_i51_i
        var $401=$self_addr_i44_i; //@line 5029 "cPickle.c"
        var $402=$401+32; //@line 5029 "cPickle.c"
        var $403=HEAP[$402]; //@line 5029 "cPickle.c"
        var $404=_Pdata_grow($403); //@line 5029 "cPickle.c"
        var $405=($404) < 0; //@line 5029 "cPickle.c"
        if ($405) { __label__ = 77; break; } else { __label__ = 79; break; } //@line 5029 "cPickle.c"
      case 77: // $bb5_i52_i
        $12=-1; //@line 5029 "cPickle.c"
        __label__ = 78; break; //@line 5029 "cPickle.c"
      case 78: // $noload_global_exit_thread_i
        $retval_i45_i=-1; //@line 5027 "cPickle.c"
        __label__ = 124; break;
      case 79: // $noload_global_exit_i
        var $406=HEAP[__Py_NoneStruct]; //@line 5029 "cPickle.c"
        var $407=($406) + 1; //@line 5029 "cPickle.c"
        HEAP[__Py_NoneStruct]=$407; //@line 5029 "cPickle.c"
        var $408=$self_addr_i44_i; //@line 5029 "cPickle.c"
        var $409=$408+32; //@line 5029 "cPickle.c"
        var $410=HEAP[$409]; //@line 5029 "cPickle.c"
        var $411=$410+16; //@line 5029 "cPickle.c"
        var $412=HEAP[$411]; //@line 5029 "cPickle.c"
        var $413=$self_addr_i44_i; //@line 5029 "cPickle.c"
        var $414=$413+32; //@line 5029 "cPickle.c"
        var $415=HEAP[$414]; //@line 5029 "cPickle.c"
        var $416=$415+8; //@line 5029 "cPickle.c"
        var $417=HEAP[$416]; //@line 5029 "cPickle.c"
        var $418=$412+4*$417; //@line 5029 "cPickle.c"
        HEAP[$418]=__Py_NoneStruct; //@line 5029 "cPickle.c"
        var $419=($417) + 1; //@line 5029 "cPickle.c"
        var $420=$415+8; //@line 5029 "cPickle.c"
        HEAP[$420]=$419; //@line 5029 "cPickle.c"
        $12=0; //@line 5030 "cPickle.c"
        $retval_i45_i=0; //@line 5027 "cPickle.c"
        __label__ = 1; break;
      case 80: // $bb58_i
        var $421=$self_addr_i; //@line 5247 "cPickle.c"
        $self_addr_i55_i=$421;
        var $422=$self_addr_i55_i; //@line 5065 "cPickle.c"
        var $423=$422+32; //@line 5065 "cPickle.c"
        var $424=HEAP[$423]; //@line 5065 "cPickle.c"
        var $425=$424+8; //@line 5065 "cPickle.c"
        var $426=HEAP[$425]; //@line 5065 "cPickle.c"
        var $427=($426) - 1; //@line 5065 "cPickle.c"
        var $428=$self_addr_i55_i; //@line 5065 "cPickle.c"
        var $429=$428+32; //@line 5065 "cPickle.c"
        var $430=HEAP[$429]; //@line 5065 "cPickle.c"
        var $431=_Pdata_clear($430, $427); //@line 5065 "cPickle.c"
        $11=$431; //@line 5065 "cPickle.c"
        var $432=$11; //@line 5065 "cPickle.c"
        $retval_i56_i=$432; //@line 5065 "cPickle.c"
        var $retval1_i_i=$retval_i56_i; //@line 5065 "cPickle.c"
        var $433=($retval1_i_i) < 0; //@line 5247 "cPickle.c"
        if ($433) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5247 "cPickle.c"
      case 81: // $bb60_i
        var $434=$self_addr_i; //@line 5252 "cPickle.c"
        $self_addr_i59_i=$434;
        var $435=$self_addr_i59_i; //@line 5072 "cPickle.c"
        $self_addr_i_i57_i=$435;
        var $436=$self_addr_i_i57_i; //@line 3320 "cPickle.c"
        var $437=$436+52; //@line 3320 "cPickle.c"
        var $438=HEAP[$437]; //@line 3320 "cPickle.c"
        var $439=($438) <= 0; //@line 3320 "cPickle.c"
        if ($439) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 3320 "cPickle.c"
      case 82: // $marker_exit_thread_i62_i
        var $440=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($440, __str78); //@line 3321 "cPickle.c"
        $9=-1; //@line 3322 "cPickle.c"
        $retval_i_i58_i=-1; //@line 3322 "cPickle.c"
        $i_i61_i=-1; //@line 5072 "cPickle.c"
        __label__ = 84; break;
      case 83: // $marker_exit_i63_i
        var $441=$self_addr_i_i57_i; //@line 3325 "cPickle.c"
        var $442=$441+48; //@line 3325 "cPickle.c"
        var $443=HEAP[$442]; //@line 3325 "cPickle.c"
        var $444=$self_addr_i_i57_i; //@line 3325 "cPickle.c"
        var $445=$444+52; //@line 3325 "cPickle.c"
        var $446=HEAP[$445]; //@line 3325 "cPickle.c"
        var $447=($446) - 1; //@line 3325 "cPickle.c"
        var $448=$self_addr_i_i57_i; //@line 3325 "cPickle.c"
        var $449=$448+52; //@line 3325 "cPickle.c"
        HEAP[$449]=$447; //@line 3325 "cPickle.c"
        var $450=$self_addr_i_i57_i; //@line 3325 "cPickle.c"
        var $451=$450+52; //@line 3325 "cPickle.c"
        var $452=HEAP[$451]; //@line 3325 "cPickle.c"
        var $453=$443+4*$452; //@line 3325 "cPickle.c"
        var $454=HEAP[$453]; //@line 3325 "cPickle.c"
        $9=$454; //@line 3325 "cPickle.c"
        $retval_i_i58_i=$454; //@line 3322 "cPickle.c"
        $i_i61_i=$454; //@line 5072 "cPickle.c"
        var $455=($454) < 0; //@line 5072 "cPickle.c"
        if ($455) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 5072 "cPickle.c"
      case 84: // $noload_appends_exit_thread_i
        $10=-1; //@line 5072 "cPickle.c"
        $retval_i60_i=-1; //@line 5072 "cPickle.c"
        __label__ = 124; break;
      case 85: // $noload_appends_exit_i
        var $456=$self_addr_i59_i; //@line 5073 "cPickle.c"
        var $457=$456+32; //@line 5073 "cPickle.c"
        var $458=HEAP[$457]; //@line 5073 "cPickle.c"
        var $459=$i_i61_i; //@line 5073 "cPickle.c"
        var $460=_Pdata_clear($458, $459); //@line 5073 "cPickle.c"
        $10=$460; //@line 5073 "cPickle.c"
        $retval_i60_i=$460; //@line 5072 "cPickle.c"
        var $461=($460) < 0; //@line 5252 "cPickle.c"
        if ($461) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5252 "cPickle.c"
      case 86: // $bb62_i
        var $462=$self_addr_i; //@line 5257 "cPickle.c"
        $self_addr_i69_i=$462;
        var $463=$self_addr_i69_i; //@line 5046 "cPickle.c"
        var $464=$463+32; //@line 5046 "cPickle.c"
        var $465=HEAP[$464]; //@line 5046 "cPickle.c"
        var $466=$465+8; //@line 5046 "cPickle.c"
        var $467=HEAP[$466]; //@line 5046 "cPickle.c"
        var $468=($467) <= 0; //@line 5046 "cPickle.c"
        if ($468) { __label__ = 88; break; } else { __label__ = 87; break; } //@line 5046 "cPickle.c"
      case 87: // $noload_build_exit_thread_i
        var $469=$self_addr_i69_i; //@line 5047 "cPickle.c"
        var $470=$469+32; //@line 5047 "cPickle.c"
        var $471=HEAP[$470]; //@line 5047 "cPickle.c"
        var $472=$471+8; //@line 5047 "cPickle.c"
        var $473=HEAP[$472]; //@line 5047 "cPickle.c"
        var $474=($473) - 1; //@line 5047 "cPickle.c"
        var $475=$self_addr_i69_i; //@line 5047 "cPickle.c"
        var $476=$475+32; //@line 5047 "cPickle.c"
        var $477=HEAP[$476]; //@line 5047 "cPickle.c"
        var $478=_Pdata_clear($477, $474); //@line 5047 "cPickle.c"
        $8=0; //@line 5048 "cPickle.c"
        $retval_i70_i=0; //@line 5046 "cPickle.c"
        __label__ = 1; break;
      case 88: // $noload_build_exit_i
        var $479=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
        _PyErr_SetString($479, __str2); //@line 188 "cPickle.c"
        $7=-1; //@line 189 "cPickle.c"
        var $480=$7; //@line 189 "cPickle.c"
        $retval_i_i68_i=$480; //@line 189 "cPickle.c"
        var $retval1_i_i_i=$retval_i_i68_i; //@line 189 "cPickle.c"
        $8=$retval1_i_i_i; //@line 5046 "cPickle.c"
        $retval_i70_i=$retval1_i_i_i; //@line 5046 "cPickle.c"
        var $481=($retval1_i_i_i) < 0; //@line 5257 "cPickle.c"
        if ($481) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5257 "cPickle.c"
      case 89: // $bb64_i
        var $482=$self_addr_i; //@line 5262 "cPickle.c"
        var $483=_load_dup($482); //@line 5262 "cPickle.c"
        var $484=($483) < 0; //@line 5262 "cPickle.c"
        if ($484) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5262 "cPickle.c"
      case 90: // $bb66_i
        var $485=$self_addr_i; //@line 5267 "cPickle.c"
        var $486=_load_binget($485); //@line 5267 "cPickle.c"
        var $487=($486) < 0; //@line 5267 "cPickle.c"
        if ($487) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5267 "cPickle.c"
      case 91: // $bb68_i
        var $488=$self_addr_i; //@line 5272 "cPickle.c"
        var $489=_load_long_binget($488); //@line 5272 "cPickle.c"
        var $490=($489) < 0; //@line 5272 "cPickle.c"
        if ($490) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5272 "cPickle.c"
      case 92: // $bb70_i
        var $491=$self_addr_i; //@line 5277 "cPickle.c"
        var $492=_load_get($491); //@line 5277 "cPickle.c"
        var $493=($492) < 0; //@line 5277 "cPickle.c"
        if ($493) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5277 "cPickle.c"
      case 93: // $bb72_i
        var $494=$self_addr_i; //@line 5282 "cPickle.c"
        var $495=_noload_extension($494, 1); //@line 5282 "cPickle.c"
        var $496=($495) < 0; //@line 5282 "cPickle.c"
        if ($496) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5282 "cPickle.c"
      case 94: // $bb74_i
        var $497=$self_addr_i; //@line 5287 "cPickle.c"
        var $498=_noload_extension($497, 2); //@line 5287 "cPickle.c"
        var $499=($498) < 0; //@line 5287 "cPickle.c"
        if ($499) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5287 "cPickle.c"
      case 95: // $bb76_i
        var $500=$self_addr_i; //@line 5292 "cPickle.c"
        var $501=_noload_extension($500, 4); //@line 5292 "cPickle.c"
        var $502=($501) < 0; //@line 5292 "cPickle.c"
        if ($502) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5292 "cPickle.c"
      case 96: // $bb78_i
        var $503=$self_addr_i; //@line 5297 "cPickle.c"
        var $504=_load_mark($503); //@line 5297 "cPickle.c"
        var $505=($504) < 0; //@line 5297 "cPickle.c"
        if ($505) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5297 "cPickle.c"
      case 97: // $bb80_i
        var $506=$self_addr_i; //@line 5302 "cPickle.c"
        var $507=_load_binput($506); //@line 5302 "cPickle.c"
        var $508=($507) < 0; //@line 5302 "cPickle.c"
        if ($508) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5302 "cPickle.c"
      case 98: // $bb82_i
        var $509=$self_addr_i; //@line 5307 "cPickle.c"
        var $510=_load_long_binput($509); //@line 5307 "cPickle.c"
        var $511=($510) < 0; //@line 5307 "cPickle.c"
        if ($511) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5307 "cPickle.c"
      case 99: // $bb84_i
        var $512=$self_addr_i; //@line 5312 "cPickle.c"
        var $513=_load_put($512); //@line 5312 "cPickle.c"
        var $514=($513) < 0; //@line 5312 "cPickle.c"
        if ($514) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5312 "cPickle.c"
      case 100: // $bb86_i
        var $515=$self_addr_i; //@line 5317 "cPickle.c"
        var $516=_load_pop($515); //@line 5317 "cPickle.c"
        var $517=($516) < 0; //@line 5317 "cPickle.c"
        if ($517) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5317 "cPickle.c"
      case 101: // $bb88_i
        var $518=$self_addr_i; //@line 5322 "cPickle.c"
        $self_addr_i75_i=$518;
        var $519=$self_addr_i75_i; //@line 4132 "cPickle.c"
        $self_addr_i106_i=$519;
        var $520=$self_addr_i106_i; //@line 3320 "cPickle.c"
        var $521=$520+52; //@line 3320 "cPickle.c"
        var $522=HEAP[$521]; //@line 3320 "cPickle.c"
        var $523=($522) <= 0; //@line 3320 "cPickle.c"
        if ($523) { __label__ = 102; break; } else { __label__ = 103; break; } //@line 3320 "cPickle.c"
      case 102: // $marker_exit_thread_i
        var $524=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($524, __str78); //@line 3321 "cPickle.c"
        $0=-1; //@line 3322 "cPickle.c"
        $retval_i107_i=-1; //@line 3322 "cPickle.c"
        $i_i77_i=-1; //@line 4132 "cPickle.c"
        __label__ = 104; break;
      case 103: // $marker_exit_i
        var $525=$self_addr_i106_i; //@line 3325 "cPickle.c"
        var $526=$525+48; //@line 3325 "cPickle.c"
        var $527=HEAP[$526]; //@line 3325 "cPickle.c"
        var $528=$self_addr_i106_i; //@line 3325 "cPickle.c"
        var $529=$528+52; //@line 3325 "cPickle.c"
        var $530=HEAP[$529]; //@line 3325 "cPickle.c"
        var $531=($530) - 1; //@line 3325 "cPickle.c"
        var $532=$self_addr_i106_i; //@line 3325 "cPickle.c"
        var $533=$532+52; //@line 3325 "cPickle.c"
        HEAP[$533]=$531; //@line 3325 "cPickle.c"
        var $534=$self_addr_i106_i; //@line 3325 "cPickle.c"
        var $535=$534+52; //@line 3325 "cPickle.c"
        var $536=HEAP[$535]; //@line 3325 "cPickle.c"
        var $537=$527+4*$536; //@line 3325 "cPickle.c"
        var $538=HEAP[$537]; //@line 3325 "cPickle.c"
        $0=$538; //@line 3325 "cPickle.c"
        $retval_i107_i=$538; //@line 3322 "cPickle.c"
        $i_i77_i=$538; //@line 4132 "cPickle.c"
        var $539=($538) < 0; //@line 4132 "cPickle.c"
        if ($539) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 4132 "cPickle.c"
      case 104: // $load_pop_mark_exit_thread_i
        $6=-1; //@line 4133 "cPickle.c"
        $retval_i76_i=-1; //@line 4133 "cPickle.c"
        __label__ = 124; break;
      case 105: // $load_pop_mark_exit_i
        var $540=$self_addr_i75_i; //@line 4135 "cPickle.c"
        var $541=$540+32; //@line 4135 "cPickle.c"
        var $542=HEAP[$541]; //@line 4135 "cPickle.c"
        var $543=$i_i77_i; //@line 4135 "cPickle.c"
        var $544=_Pdata_clear($542, $543); //@line 4135 "cPickle.c"
        $6=0; //@line 4137 "cPickle.c"
        $retval_i76_i=0; //@line 4133 "cPickle.c"
        __label__ = 1; break;
      case 106: // $bb90_i
        var $545=$self_addr_i; //@line 5327 "cPickle.c"
        $self_addr_i82_i=$545;
        var $546=$self_addr_i82_i; //@line 5079 "cPickle.c"
        var $547=$546+32; //@line 5079 "cPickle.c"
        var $548=HEAP[$547]; //@line 5079 "cPickle.c"
        var $549=$548+8; //@line 5079 "cPickle.c"
        var $550=HEAP[$549]; //@line 5079 "cPickle.c"
        var $551=($550) - 2; //@line 5079 "cPickle.c"
        var $552=$self_addr_i82_i; //@line 5079 "cPickle.c"
        var $553=$552+32; //@line 5079 "cPickle.c"
        var $554=HEAP[$553]; //@line 5079 "cPickle.c"
        var $555=_Pdata_clear($554, $551); //@line 5079 "cPickle.c"
        $5=$555; //@line 5079 "cPickle.c"
        var $556=$5; //@line 5079 "cPickle.c"
        $retval_i83_i=$556; //@line 5079 "cPickle.c"
        var $retval1_i84_i=$retval_i83_i; //@line 5079 "cPickle.c"
        var $557=($retval1_i84_i) < 0; //@line 5327 "cPickle.c"
        if ($557) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5327 "cPickle.c"
      case 107: // $bb92_i
        var $558=$self_addr_i; //@line 5332 "cPickle.c"
        $self_addr_i87_i=$558;
        var $559=$self_addr_i87_i; //@line 5086 "cPickle.c"
        $self_addr_i_i85_i=$559;
        var $560=$self_addr_i_i85_i; //@line 3320 "cPickle.c"
        var $561=$560+52; //@line 3320 "cPickle.c"
        var $562=HEAP[$561]; //@line 3320 "cPickle.c"
        var $563=($562) <= 0; //@line 3320 "cPickle.c"
        if ($563) { __label__ = 108; break; } else { __label__ = 109; break; } //@line 3320 "cPickle.c"
      case 108: // $marker_exit_thread_i90_i
        var $564=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($564, __str78); //@line 3321 "cPickle.c"
        $3=-1; //@line 3322 "cPickle.c"
        $retval_i_i86_i=-1; //@line 3322 "cPickle.c"
        $i_i89_i=-1; //@line 5086 "cPickle.c"
        __label__ = 110; break;
      case 109: // $marker_exit_i91_i
        var $565=$self_addr_i_i85_i; //@line 3325 "cPickle.c"
        var $566=$565+48; //@line 3325 "cPickle.c"
        var $567=HEAP[$566]; //@line 3325 "cPickle.c"
        var $568=$self_addr_i_i85_i; //@line 3325 "cPickle.c"
        var $569=$568+52; //@line 3325 "cPickle.c"
        var $570=HEAP[$569]; //@line 3325 "cPickle.c"
        var $571=($570) - 1; //@line 3325 "cPickle.c"
        var $572=$self_addr_i_i85_i; //@line 3325 "cPickle.c"
        var $573=$572+52; //@line 3325 "cPickle.c"
        HEAP[$573]=$571; //@line 3325 "cPickle.c"
        var $574=$self_addr_i_i85_i; //@line 3325 "cPickle.c"
        var $575=$574+52; //@line 3325 "cPickle.c"
        var $576=HEAP[$575]; //@line 3325 "cPickle.c"
        var $577=$567+4*$576; //@line 3325 "cPickle.c"
        var $578=HEAP[$577]; //@line 3325 "cPickle.c"
        $3=$578; //@line 3325 "cPickle.c"
        $retval_i_i86_i=$578; //@line 3322 "cPickle.c"
        $i_i89_i=$578; //@line 5086 "cPickle.c"
        var $579=($578) < 0; //@line 5086 "cPickle.c"
        if ($579) { __label__ = 110; break; } else { __label__ = 111; break; } //@line 5086 "cPickle.c"
      case 110: // $noload_setitems_exit_thread_i
        $4=-1; //@line 5086 "cPickle.c"
        $retval_i88_i=-1; //@line 5086 "cPickle.c"
        __label__ = 124; break;
      case 111: // $noload_setitems_exit_i
        var $580=$self_addr_i87_i; //@line 5087 "cPickle.c"
        var $581=$580+32; //@line 5087 "cPickle.c"
        var $582=HEAP[$581]; //@line 5087 "cPickle.c"
        var $583=$i_i89_i; //@line 5087 "cPickle.c"
        var $584=_Pdata_clear($582, $583); //@line 5087 "cPickle.c"
        $4=$584; //@line 5087 "cPickle.c"
        $retval_i88_i=$584; //@line 5086 "cPickle.c"
        var $585=($584) < 0; //@line 5332 "cPickle.c"
        if ($585) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5332 "cPickle.c"
      case 112: // $bb95_i
        var $586=$self_addr_i; //@line 5340 "cPickle.c"
        var $587=_load_persid($586); //@line 5340 "cPickle.c"
        var $588=($587) < 0; //@line 5340 "cPickle.c"
        if ($588) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5340 "cPickle.c"
      case 113: // $bb97_i
        var $589=$self_addr_i; //@line 5345 "cPickle.c"
        var $590=_load_binpersid($589); //@line 5345 "cPickle.c"
        var $591=($590) < 0; //@line 5345 "cPickle.c"
        if ($591) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5345 "cPickle.c"
      case 114: // $bb99_i
        var $592=$self_addr_i; //@line 5350 "cPickle.c"
        $self_addr_i97_i=$592;
        var $593=$self_addr_i97_i; //@line 5037 "cPickle.c"
        var $594=$593+32; //@line 5037 "cPickle.c"
        var $595=HEAP[$594]; //@line 5037 "cPickle.c"
        var $596=$595+8; //@line 5037 "cPickle.c"
        var $597=HEAP[$596]; //@line 5037 "cPickle.c"
        var $598=($597) <= 1; //@line 5037 "cPickle.c"
        if ($598) { __label__ = 119; break; } else { __label__ = 115; break; } //@line 5037 "cPickle.c"
      case 115: // $bb1_i101_i
        var $599=$self_addr_i97_i; //@line 5038 "cPickle.c"
        var $600=$599+32; //@line 5038 "cPickle.c"
        var $601=HEAP[$600]; //@line 5038 "cPickle.c"
        var $602=$601+8; //@line 5038 "cPickle.c"
        var $603=HEAP[$602]; //@line 5038 "cPickle.c"
        var $604=($603) - 2; //@line 5038 "cPickle.c"
        var $605=$self_addr_i97_i; //@line 5038 "cPickle.c"
        var $606=$605+32; //@line 5038 "cPickle.c"
        var $607=HEAP[$606]; //@line 5038 "cPickle.c"
        var $608=_Pdata_clear($607, $604); //@line 5038 "cPickle.c"
        var $609=$self_addr_i97_i; //@line 5039 "cPickle.c"
        var $610=$609+32; //@line 5039 "cPickle.c"
        var $611=HEAP[$610]; //@line 5039 "cPickle.c"
        var $612=$611+8; //@line 5039 "cPickle.c"
        var $613=HEAP[$612]; //@line 5039 "cPickle.c"
        var $614=$self_addr_i97_i; //@line 5039 "cPickle.c"
        var $615=$614+32; //@line 5039 "cPickle.c"
        var $616=HEAP[$615]; //@line 5039 "cPickle.c"
        var $617=$616+12; //@line 5039 "cPickle.c"
        var $618=HEAP[$617]; //@line 5039 "cPickle.c"
        var $619=($613)==($618); //@line 5039 "cPickle.c"
        if ($619) { __label__ = 116; break; } else { __label__ = 118; break; } //@line 5039 "cPickle.c"
      case 116: // $bb2_i102_i
        var $620=$self_addr_i97_i; //@line 5039 "cPickle.c"
        var $621=$620+32; //@line 5039 "cPickle.c"
        var $622=HEAP[$621]; //@line 5039 "cPickle.c"
        var $623=_Pdata_grow($622); //@line 5039 "cPickle.c"
        var $624=($623) < 0; //@line 5039 "cPickle.c"
        if ($624) { __label__ = 117; break; } else { __label__ = 118; break; } //@line 5039 "cPickle.c"
      case 117: // $noload_reduce_exit_thread_i
        $2=-1; //@line 5039 "cPickle.c"
        $retval_i98_i=-1; //@line 5037 "cPickle.c"
        __label__ = 124; break;
      case 118: // $noload_reduce_exit_thread112_i
        var $625=HEAP[__Py_NoneStruct]; //@line 5039 "cPickle.c"
        var $626=($625) + 1; //@line 5039 "cPickle.c"
        HEAP[__Py_NoneStruct]=$626; //@line 5039 "cPickle.c"
        var $627=$self_addr_i97_i; //@line 5039 "cPickle.c"
        var $628=$627+32; //@line 5039 "cPickle.c"
        var $629=HEAP[$628]; //@line 5039 "cPickle.c"
        var $630=$629+16; //@line 5039 "cPickle.c"
        var $631=HEAP[$630]; //@line 5039 "cPickle.c"
        var $632=$self_addr_i97_i; //@line 5039 "cPickle.c"
        var $633=$632+32; //@line 5039 "cPickle.c"
        var $634=HEAP[$633]; //@line 5039 "cPickle.c"
        var $635=$634+8; //@line 5039 "cPickle.c"
        var $636=HEAP[$635]; //@line 5039 "cPickle.c"
        var $637=$631+4*$636; //@line 5039 "cPickle.c"
        HEAP[$637]=__Py_NoneStruct; //@line 5039 "cPickle.c"
        var $638=($636) + 1; //@line 5039 "cPickle.c"
        var $639=$634+8; //@line 5039 "cPickle.c"
        HEAP[$639]=$638; //@line 5039 "cPickle.c"
        $2=0; //@line 5040 "cPickle.c"
        $retval_i98_i=0; //@line 5037 "cPickle.c"
        __label__ = 1; break;
      case 119: // $noload_reduce_exit_i
        var $640=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
        _PyErr_SetString($640, __str2); //@line 188 "cPickle.c"
        $1=-1; //@line 189 "cPickle.c"
        var $641=$1; //@line 189 "cPickle.c"
        $retval_i_i96_i=$641; //@line 189 "cPickle.c"
        var $retval1_i_i99_i=$retval_i_i96_i; //@line 189 "cPickle.c"
        $2=$retval1_i_i99_i; //@line 5037 "cPickle.c"
        $retval_i98_i=$retval1_i_i99_i; //@line 5037 "cPickle.c"
        var $642=($retval1_i_i99_i) < 0; //@line 5350 "cPickle.c"
        if ($642) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5350 "cPickle.c"
      case 120: // $bb101_i
        var $643=$self_addr_i; //@line 5355 "cPickle.c"
        var $644=_load_proto($643); //@line 5355 "cPickle.c"
        var $645=($644) < 0; //@line 5355 "cPickle.c"
        if ($645) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5355 "cPickle.c"
      case 121: // $bb103_i
        var $646=$self_addr_i; //@line 5360 "cPickle.c"
        var $647=_load_bool($646, __Py_TrueStruct); //@line 5360 "cPickle.c"
        var $648=($647) < 0; //@line 5360 "cPickle.c"
        if ($648) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5360 "cPickle.c"
      case 122: // $bb105_i
        var $649=$self_addr_i; //@line 5365 "cPickle.c"
        var $650=_load_bool($649, __Py_ZeroStruct); //@line 5365 "cPickle.c"
        var $651=($650) < 0; //@line 5365 "cPickle.c"
        if ($651) { __label__ = 124; break; } else { __label__ = 1; break; } //@line 5365 "cPickle.c"
      case 123: // $bb107_i
        var $652=HEAP[$s_i]; //@line 5369 "cPickle.c"
        var $653=$652; //@line 5369 "cPickle.c"
        var $654=HEAP[$653]; //@line 5369 "cPickle.c"
        var $655=($654); //@line 5369 "cPickle.c"
        var $656=HEAP[_UnpicklingError]; //@line 5369 "cPickle.c"
        _cPickle_ErrFormat($656, __str101, __str102, allocate([$655,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 5369 "cPickle.c"
        $22=0; //@line 5372 "cPickle.c"
        __label__ = 132; break; //@line 5372 "cPickle.c"
      case 124: // $bb110_i
        var $657=_PyErr_Occurred(); //@line 5378 "cPickle.c"
        $err_i=$657; //@line 5378 "cPickle.c"
        var $658=($657)!=0; //@line 5378 "cPickle.c"
        if ($658) { __label__ = 125; break; } else { __label__ = 128; break; } //@line 5378 "cPickle.c"
      case 125: // $bb111_i
        var $659=HEAP[_PyExc_EOFError]; //@line 5379 "cPickle.c"
        var $660=$err_i; //@line 5379 "cPickle.c"
        var $661=($660)==($659); //@line 5379 "cPickle.c"
        if ($661) { __label__ = 126; break; } else { __label__ = 127; break; } //@line 5379 "cPickle.c"
      case 126: // $bb112_i
        var $662=HEAP[_PyExc_EOFError]; //@line 5380 "cPickle.c"
        _PyErr_SetNone($662); //@line 5380 "cPickle.c"
        __label__ = 127; break; //@line 5380 "cPickle.c"
      case 127: // $bb113_i
        $22=0; //@line 5382 "cPickle.c"
        __label__ = 132; break; //@line 5382 "cPickle.c"
      case 128: // $bb114_i
        var $663=$self_addr_i; //@line 5385 "cPickle.c"
        var $664=$663+32; //@line 5385 "cPickle.c"
        var $665=HEAP[$664]; //@line 5385 "cPickle.c"
        var $666=$665+8; //@line 5385 "cPickle.c"
        var $667=HEAP[$666]; //@line 5385 "cPickle.c"
        var $668=($667)!=0; //@line 5385 "cPickle.c"
        if ($668) { __label__ = 129; break; } else { __label__ = 130; break; } //@line 5385 "cPickle.c"
      case 129: // $bb115_i
        var $669=$self_addr_i; //@line 5385 "cPickle.c"
        var $670=$669+32; //@line 5385 "cPickle.c"
        var $671=HEAP[$670]; //@line 5385 "cPickle.c"
        var $672=$671+16; //@line 5385 "cPickle.c"
        var $673=HEAP[$672]; //@line 5385 "cPickle.c"
        var $674=$self_addr_i; //@line 5385 "cPickle.c"
        var $675=$674+32; //@line 5385 "cPickle.c"
        var $676=HEAP[$675]; //@line 5385 "cPickle.c"
        var $677=$676+8; //@line 5385 "cPickle.c"
        var $678=HEAP[$677]; //@line 5385 "cPickle.c"
        var $679=($678) - 1; //@line 5385 "cPickle.c"
        var $680=$676+8; //@line 5385 "cPickle.c"
        HEAP[$680]=$679; //@line 5385 "cPickle.c"
        var $681=$676+8; //@line 5385 "cPickle.c"
        var $682=HEAP[$681]; //@line 5385 "cPickle.c"
        var $683=$673+4*$682; //@line 5385 "cPickle.c"
        var $684=HEAP[$683]; //@line 5385 "cPickle.c"
        $val_i=$684; //@line 5385 "cPickle.c"
        __label__ = 131; break; //@line 5385 "cPickle.c"
      case 130: // $bb116_i
        var $685=HEAP[_UnpicklingError]; //@line 5385 "cPickle.c"
        _PyErr_SetString($685, __str88); //@line 5385 "cPickle.c"
        $val_i=0; //@line 5385 "cPickle.c"
        __label__ = 131; break; //@line 5385 "cPickle.c"
      case 131: // $bb117_i
        var $686=$val_i; //@line 5386 "cPickle.c"
        $22=$686; //@line 5386 "cPickle.c"
        __label__ = 132; break; //@line 5386 "cPickle.c"
      case 132: // $noload_exit
        var $687=$22; //@line 5372 "cPickle.c"
        $retval_i=$687; //@line 5372 "cPickle.c"
        var $retval119_i=$retval_i; //@line 5372 "cPickle.c"
        $23=$retval119_i; //@line 5399 "cPickle.c"
        var $688=$23; //@line 5399 "cPickle.c"
        $retval=$688; //@line 5399 "cPickle.c"
        var $retval1=$retval; //@line 5399 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 5399 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newUnpicklerobject($f) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $f_addr;
        var $retval;
        var $0;
        var $self;
        $f_addr=$f;
        var $1=__PyObject_GC_New(_Unpicklertype); //@line 5425 "cPickle.c"
        var $2=$1; //@line 5425 "cPickle.c"
        $self=$2; //@line 5425 "cPickle.c"
        var $3=$self; //@line 5425 "cPickle.c"
        var $4=($3)==0; //@line 5425 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5425 "cPickle.c"
      case 1: // $bb
        $0=0; //@line 5426 "cPickle.c"
        __label__ = 18; break; //@line 5426 "cPickle.c"
      case 2: // $bb1
        var $5=$self; //@line 5428 "cPickle.c"
        var $6=$5+12; //@line 5428 "cPickle.c"
        HEAP[$6]=0; //@line 5428 "cPickle.c"
        var $7=$self; //@line 5429 "cPickle.c"
        var $8=$7+28; //@line 5429 "cPickle.c"
        HEAP[$8]=0; //@line 5429 "cPickle.c"
        var $9=_Pdata_New(); //@line 5430 "cPickle.c"
        var $10=$9; //@line 5430 "cPickle.c"
        var $11=$self; //@line 5430 "cPickle.c"
        var $12=$11+32; //@line 5430 "cPickle.c"
        HEAP[$12]=$10; //@line 5430 "cPickle.c"
        var $13=$self; //@line 5431 "cPickle.c"
        var $14=$13+40; //@line 5431 "cPickle.c"
        HEAP[$14]=0; //@line 5431 "cPickle.c"
        var $15=$self; //@line 5432 "cPickle.c"
        var $16=$15+44; //@line 5432 "cPickle.c"
        HEAP[$16]=0; //@line 5432 "cPickle.c"
        var $17=$self; //@line 5433 "cPickle.c"
        var $18=$17+48; //@line 5433 "cPickle.c"
        HEAP[$18]=0; //@line 5433 "cPickle.c"
        var $19=$self; //@line 5434 "cPickle.c"
        var $20=$19+52; //@line 5434 "cPickle.c"
        HEAP[$20]=0; //@line 5434 "cPickle.c"
        var $21=$self; //@line 5435 "cPickle.c"
        var $22=$21+56; //@line 5435 "cPickle.c"
        HEAP[$22]=0; //@line 5435 "cPickle.c"
        var $23=$self; //@line 5436 "cPickle.c"
        var $24=$23+68; //@line 5436 "cPickle.c"
        HEAP[$24]=0; //@line 5436 "cPickle.c"
        var $25=$self; //@line 5437 "cPickle.c"
        var $26=$25+20; //@line 5437 "cPickle.c"
        HEAP[$26]=0; //@line 5437 "cPickle.c"
        var $27=$self; //@line 5438 "cPickle.c"
        var $28=$27+16; //@line 5438 "cPickle.c"
        HEAP[$28]=0; //@line 5438 "cPickle.c"
        var $29=$self; //@line 5439 "cPickle.c"
        var $30=$29+76; //@line 5439 "cPickle.c"
        HEAP[$30]=0; //@line 5439 "cPickle.c"
        var $31=_PyDict_New(); //@line 5441 "cPickle.c"
        var $32=$self; //@line 5441 "cPickle.c"
        var $33=$32+24; //@line 5441 "cPickle.c"
        HEAP[$33]=$31; //@line 5441 "cPickle.c"
        var $34=$self; //@line 5441 "cPickle.c"
        var $35=$34+24; //@line 5441 "cPickle.c"
        var $36=HEAP[$35]; //@line 5441 "cPickle.c"
        var $37=($36)==0; //@line 5441 "cPickle.c"
        if ($37) { __label__ = 15; break; } else { __label__ = 3; break; } //@line 5441 "cPickle.c"
      case 3: // $bb2
        var $38=$self; //@line 5444 "cPickle.c"
        var $39=$38+32; //@line 5444 "cPickle.c"
        var $40=HEAP[$39]; //@line 5444 "cPickle.c"
        var $41=($40)==0; //@line 5444 "cPickle.c"
        if ($41) { __label__ = 15; break; } else { __label__ = 4; break; } //@line 5444 "cPickle.c"
      case 4: // $bb3
        var $42=$f_addr; //@line 5447 "cPickle.c"
        var $43=$42; //@line 5447 "cPickle.c"
        var $44=HEAP[$43]; //@line 5447 "cPickle.c"
        var $45=($44) + 1; //@line 5447 "cPickle.c"
        var $46=$f_addr; //@line 5447 "cPickle.c"
        var $47=$46; //@line 5447 "cPickle.c"
        HEAP[$47]=$45; //@line 5447 "cPickle.c"
        var $48=$self; //@line 5448 "cPickle.c"
        var $49=$48+12; //@line 5448 "cPickle.c"
        var $50=$f_addr; //@line 5448 "cPickle.c"
        HEAP[$49]=$50; //@line 5448 "cPickle.c"
        var $51=$f_addr; //@line 5451 "cPickle.c"
        var $52=$51+4; //@line 5451 "cPickle.c"
        var $53=HEAP[$52]; //@line 5451 "cPickle.c"
        var $54=($53)==(_PyFile_Type); //@line 5451 "cPickle.c"
        if ($54) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 5451 "cPickle.c"
      case 5: // $bb4
        var $55=$f_addr; //@line 5451 "cPickle.c"
        var $56=$55+4; //@line 5451 "cPickle.c"
        var $57=HEAP[$56]; //@line 5451 "cPickle.c"
        var $58=_PyType_IsSubtype($57, _PyFile_Type); //@line 5451 "cPickle.c"
        var $59=($58)!=0; //@line 5451 "cPickle.c"
        if ($59) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 5451 "cPickle.c"
      case 6: // $bb5
        var $60=$f_addr; //@line 5452 "cPickle.c"
        var $61=_PyFile_AsFile($60); //@line 5452 "cPickle.c"
        var $62=$self; //@line 5452 "cPickle.c"
        var $63=$62+8; //@line 5452 "cPickle.c"
        HEAP[$63]=$61; //@line 5452 "cPickle.c"
        var $64=$self; //@line 5453 "cPickle.c"
        var $65=$64+8; //@line 5453 "cPickle.c"
        var $66=HEAP[$65]; //@line 5453 "cPickle.c"
        var $67=($66)==0; //@line 5453 "cPickle.c"
        if ($67) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5453 "cPickle.c"
      case 7: // $bb6
        var $68=HEAP[_PyExc_ValueError]; //@line 5454 "cPickle.c"
        _PyErr_SetString($68, __str61); //@line 5454 "cPickle.c"
        __label__ = 15; break; //@line 5454 "cPickle.c"
      case 8: // $bb7
        var $69=$self; //@line 5458 "cPickle.c"
        var $70=$69+60; //@line 5458 "cPickle.c"
        HEAP[$70]=(FUNCTION_TABLE_OFFSET + 12); //@line 5458 "cPickle.c"
        var $71=$self; //@line 5459 "cPickle.c"
        var $72=$71+64; //@line 5459 "cPickle.c"
        HEAP[$72]=(FUNCTION_TABLE_OFFSET + 14); //@line 5459 "cPickle.c"
        __label__ = 14; break; //@line 5459 "cPickle.c"
      case 9: // $bb8
        var $73=$f_addr; //@line 5461 "cPickle.c"
        var $74=$73+4; //@line 5461 "cPickle.c"
        var $75=HEAP[$74]; //@line 5461 "cPickle.c"
        var $76=HEAP[_PycStringIO]; //@line 5461 "cPickle.c"
        var $77=$76+24; //@line 5461 "cPickle.c"
        var $78=HEAP[$77]; //@line 5461 "cPickle.c"
        var $79=($75)==($78); //@line 5461 "cPickle.c"
        var $80=$self; //@line 5462 "cPickle.c"
        var $81=$80+8; //@line 5462 "cPickle.c"
        HEAP[$81]=0; //@line 5462 "cPickle.c"
        var $82=$self; //@line 5463 "cPickle.c"
        var $83=$82+60; //@line 5463 "cPickle.c"
        if ($79) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5461 "cPickle.c"
      case 10: // $bb9
        HEAP[$83]=(FUNCTION_TABLE_OFFSET + 16); //@line 5463 "cPickle.c"
        var $84=$self; //@line 5464 "cPickle.c"
        var $85=$84+64; //@line 5464 "cPickle.c"
        HEAP[$85]=(FUNCTION_TABLE_OFFSET + 18); //@line 5464 "cPickle.c"
        __label__ = 14; break; //@line 5464 "cPickle.c"
      case 11: // $bb10
        HEAP[$83]=(FUNCTION_TABLE_OFFSET + 20); //@line 5469 "cPickle.c"
        var $86=$self; //@line 5470 "cPickle.c"
        var $87=$86+64; //@line 5470 "cPickle.c"
        HEAP[$87]=(FUNCTION_TABLE_OFFSET + 22); //@line 5470 "cPickle.c"
        var $88=HEAP[_readline_str]; //@line 5472 "cPickle.c"
        var $89=$f_addr; //@line 5472 "cPickle.c"
        var $90=_PyObject_GetAttr($89, $88); //@line 5472 "cPickle.c"
        var $91=$self; //@line 5472 "cPickle.c"
        var $92=$91+16; //@line 5472 "cPickle.c"
        HEAP[$92]=$90; //@line 5472 "cPickle.c"
        var $93=$self; //@line 5472 "cPickle.c"
        var $94=$93+16; //@line 5472 "cPickle.c"
        var $95=HEAP[$94]; //@line 5472 "cPickle.c"
        var $96=($95)==0; //@line 5472 "cPickle.c"
        if ($96) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 5472 "cPickle.c"
      case 12: // $bb11
        var $97=HEAP[_read_str]; //@line 5472 "cPickle.c"
        var $98=$f_addr; //@line 5472 "cPickle.c"
        var $99=_PyObject_GetAttr($98, $97); //@line 5472 "cPickle.c"
        var $100=$self; //@line 5472 "cPickle.c"
        var $101=$100+20; //@line 5472 "cPickle.c"
        HEAP[$101]=$99; //@line 5472 "cPickle.c"
        var $102=$self; //@line 5472 "cPickle.c"
        var $103=$102+20; //@line 5472 "cPickle.c"
        var $104=HEAP[$103]; //@line 5472 "cPickle.c"
        var $105=($104)==0; //@line 5472 "cPickle.c"
        if ($105) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5472 "cPickle.c"
      case 13: // $bb12
        _PyErr_Clear(); //@line 5474 "cPickle.c"
        var $106=HEAP[_PyExc_TypeError]; //@line 5475 "cPickle.c"
        _PyErr_SetString($106, __str107); //@line 5475 "cPickle.c"
        __label__ = 15; break; //@line 5475 "cPickle.c"
      case 14: // $bb13
        var $107=$self; //@line 5481 "cPickle.c"
        var $108=$107; //@line 5481 "cPickle.c"
        _PyObject_GC_Track($108); //@line 5481 "cPickle.c"
        var $109=$self; //@line 5483 "cPickle.c"
        $0=$109; //@line 5483 "cPickle.c"
        __label__ = 18; break; //@line 5483 "cPickle.c"
      case 15: // $err
        var $110=$self; //@line 5486 "cPickle.c"
        var $111=$110; //@line 5486 "cPickle.c"
        var $112=$111; //@line 5486 "cPickle.c"
        var $113=HEAP[$112]; //@line 5486 "cPickle.c"
        var $114=($113) - 1; //@line 5486 "cPickle.c"
        var $115=$111; //@line 5486 "cPickle.c"
        HEAP[$115]=$114; //@line 5486 "cPickle.c"
        var $116=$111; //@line 5486 "cPickle.c"
        var $117=HEAP[$116]; //@line 5486 "cPickle.c"
        var $118=($117)==0; //@line 5486 "cPickle.c"
        if ($118) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 5486 "cPickle.c"
      case 16: // $bb14
        var $119=$self; //@line 5486 "cPickle.c"
        var $120=$119; //@line 5486 "cPickle.c"
        var $121=$120+4; //@line 5486 "cPickle.c"
        var $122=HEAP[$121]; //@line 5486 "cPickle.c"
        var $123=$122+24; //@line 5486 "cPickle.c"
        var $124=HEAP[$123]; //@line 5486 "cPickle.c"
        var $125=$self; //@line 5486 "cPickle.c"
        var $126=$125; //@line 5486 "cPickle.c"
        FUNCTION_TABLE[$124]($126); //@line 5486 "cPickle.c"
        __label__ = 17; break; //@line 5486 "cPickle.c"
      case 17: // $bb15
        $0=0; //@line 5487 "cPickle.c"
        __label__ = 18; break; //@line 5487 "cPickle.c"
      case 18: // $bb16
        var $127=$0; //@line 5426 "cPickle.c"
        $retval=$127; //@line 5426 "cPickle.c"
        var $retval17=$retval; //@line 5426 "cPickle.c"
        ;
        return $retval17; //@line 5426 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_Unpickler($self, $file) {
    ;
    var __label__;
  
    var $self_addr;
    var $file_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $file_addr=$file;
    var $1=$file_addr; //@line 5494 "cPickle.c"
    var $2=_newUnpicklerobject($1); //@line 5494 "cPickle.c"
    var $3=$2; //@line 5494 "cPickle.c"
    $0=$3; //@line 5494 "cPickle.c"
    var $4=$0; //@line 5494 "cPickle.c"
    $retval=$4; //@line 5494 "cPickle.c"
    var $retval1=$retval; //@line 5494 "cPickle.c"
    ;
    return $retval1; //@line 5494 "cPickle.c"
  }
  

  function _Unpickler_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        $self_addr=$self;
        var $0=$self_addr; //@line 5501 "cPickle.c"
        var $1=$0; //@line 5501 "cPickle.c"
        _PyObject_GC_UnTrack($1); //@line 5501 "cPickle.c"
        var $2=$self_addr; //@line 5502 "cPickle.c"
        var $3=$2+16; //@line 5502 "cPickle.c"
        var $4=HEAP[$3]; //@line 5502 "cPickle.c"
        var $5=($4)!=0; //@line 5502 "cPickle.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 5502 "cPickle.c"
      case 1: // $bb
        var $6=$self_addr; //@line 5502 "cPickle.c"
        var $7=$6+16; //@line 5502 "cPickle.c"
        var $8=HEAP[$7]; //@line 5502 "cPickle.c"
        var $9=$8; //@line 5502 "cPickle.c"
        var $10=HEAP[$9]; //@line 5502 "cPickle.c"
        var $11=($10) - 1; //@line 5502 "cPickle.c"
        var $12=$8; //@line 5502 "cPickle.c"
        HEAP[$12]=$11; //@line 5502 "cPickle.c"
        var $13=$8; //@line 5502 "cPickle.c"
        var $14=HEAP[$13]; //@line 5502 "cPickle.c"
        var $15=($14)==0; //@line 5502 "cPickle.c"
        if ($15) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5502 "cPickle.c"
      case 2: // $bb1
        var $16=$self_addr; //@line 5502 "cPickle.c"
        var $17=$16+16; //@line 5502 "cPickle.c"
        var $18=HEAP[$17]; //@line 5502 "cPickle.c"
        var $19=$18+4; //@line 5502 "cPickle.c"
        var $20=HEAP[$19]; //@line 5502 "cPickle.c"
        var $21=$20+24; //@line 5502 "cPickle.c"
        var $22=HEAP[$21]; //@line 5502 "cPickle.c"
        var $23=$self_addr; //@line 5502 "cPickle.c"
        var $24=$23+16; //@line 5502 "cPickle.c"
        var $25=HEAP[$24]; //@line 5502 "cPickle.c"
        FUNCTION_TABLE[$22]($25); //@line 5502 "cPickle.c"
        __label__ = 3; break; //@line 5502 "cPickle.c"
      case 3: // $bb2
        var $26=$self_addr; //@line 5503 "cPickle.c"
        var $27=$26+20; //@line 5503 "cPickle.c"
        var $28=HEAP[$27]; //@line 5503 "cPickle.c"
        var $29=($28)!=0; //@line 5503 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5503 "cPickle.c"
      case 4: // $bb3
        var $30=$self_addr; //@line 5503 "cPickle.c"
        var $31=$30+20; //@line 5503 "cPickle.c"
        var $32=HEAP[$31]; //@line 5503 "cPickle.c"
        var $33=$32; //@line 5503 "cPickle.c"
        var $34=HEAP[$33]; //@line 5503 "cPickle.c"
        var $35=($34) - 1; //@line 5503 "cPickle.c"
        var $36=$32; //@line 5503 "cPickle.c"
        HEAP[$36]=$35; //@line 5503 "cPickle.c"
        var $37=$32; //@line 5503 "cPickle.c"
        var $38=HEAP[$37]; //@line 5503 "cPickle.c"
        var $39=($38)==0; //@line 5503 "cPickle.c"
        if ($39) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5503 "cPickle.c"
      case 5: // $bb4
        var $40=$self_addr; //@line 5503 "cPickle.c"
        var $41=$40+20; //@line 5503 "cPickle.c"
        var $42=HEAP[$41]; //@line 5503 "cPickle.c"
        var $43=$42+4; //@line 5503 "cPickle.c"
        var $44=HEAP[$43]; //@line 5503 "cPickle.c"
        var $45=$44+24; //@line 5503 "cPickle.c"
        var $46=HEAP[$45]; //@line 5503 "cPickle.c"
        var $47=$self_addr; //@line 5503 "cPickle.c"
        var $48=$47+20; //@line 5503 "cPickle.c"
        var $49=HEAP[$48]; //@line 5503 "cPickle.c"
        FUNCTION_TABLE[$46]($49); //@line 5503 "cPickle.c"
        __label__ = 6; break; //@line 5503 "cPickle.c"
      case 6: // $bb5
        var $50=$self_addr; //@line 5504 "cPickle.c"
        var $51=$50+12; //@line 5504 "cPickle.c"
        var $52=HEAP[$51]; //@line 5504 "cPickle.c"
        var $53=($52)!=0; //@line 5504 "cPickle.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5504 "cPickle.c"
      case 7: // $bb6
        var $54=$self_addr; //@line 5504 "cPickle.c"
        var $55=$54+12; //@line 5504 "cPickle.c"
        var $56=HEAP[$55]; //@line 5504 "cPickle.c"
        var $57=$56; //@line 5504 "cPickle.c"
        var $58=HEAP[$57]; //@line 5504 "cPickle.c"
        var $59=($58) - 1; //@line 5504 "cPickle.c"
        var $60=$56; //@line 5504 "cPickle.c"
        HEAP[$60]=$59; //@line 5504 "cPickle.c"
        var $61=$56; //@line 5504 "cPickle.c"
        var $62=HEAP[$61]; //@line 5504 "cPickle.c"
        var $63=($62)==0; //@line 5504 "cPickle.c"
        if ($63) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5504 "cPickle.c"
      case 8: // $bb7
        var $64=$self_addr; //@line 5504 "cPickle.c"
        var $65=$64+12; //@line 5504 "cPickle.c"
        var $66=HEAP[$65]; //@line 5504 "cPickle.c"
        var $67=$66+4; //@line 5504 "cPickle.c"
        var $68=HEAP[$67]; //@line 5504 "cPickle.c"
        var $69=$68+24; //@line 5504 "cPickle.c"
        var $70=HEAP[$69]; //@line 5504 "cPickle.c"
        var $71=$self_addr; //@line 5504 "cPickle.c"
        var $72=$71+12; //@line 5504 "cPickle.c"
        var $73=HEAP[$72]; //@line 5504 "cPickle.c"
        FUNCTION_TABLE[$70]($73); //@line 5504 "cPickle.c"
        __label__ = 9; break; //@line 5504 "cPickle.c"
      case 9: // $bb8
        var $74=$self_addr; //@line 5505 "cPickle.c"
        var $75=$74+24; //@line 5505 "cPickle.c"
        var $76=HEAP[$75]; //@line 5505 "cPickle.c"
        var $77=($76)!=0; //@line 5505 "cPickle.c"
        if ($77) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 5505 "cPickle.c"
      case 10: // $bb9
        var $78=$self_addr; //@line 5505 "cPickle.c"
        var $79=$78+24; //@line 5505 "cPickle.c"
        var $80=HEAP[$79]; //@line 5505 "cPickle.c"
        var $81=$80; //@line 5505 "cPickle.c"
        var $82=HEAP[$81]; //@line 5505 "cPickle.c"
        var $83=($82) - 1; //@line 5505 "cPickle.c"
        var $84=$80; //@line 5505 "cPickle.c"
        HEAP[$84]=$83; //@line 5505 "cPickle.c"
        var $85=$80; //@line 5505 "cPickle.c"
        var $86=HEAP[$85]; //@line 5505 "cPickle.c"
        var $87=($86)==0; //@line 5505 "cPickle.c"
        if ($87) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5505 "cPickle.c"
      case 11: // $bb10
        var $88=$self_addr; //@line 5505 "cPickle.c"
        var $89=$88+24; //@line 5505 "cPickle.c"
        var $90=HEAP[$89]; //@line 5505 "cPickle.c"
        var $91=$90+4; //@line 5505 "cPickle.c"
        var $92=HEAP[$91]; //@line 5505 "cPickle.c"
        var $93=$92+24; //@line 5505 "cPickle.c"
        var $94=HEAP[$93]; //@line 5505 "cPickle.c"
        var $95=$self_addr; //@line 5505 "cPickle.c"
        var $96=$95+24; //@line 5505 "cPickle.c"
        var $97=HEAP[$96]; //@line 5505 "cPickle.c"
        FUNCTION_TABLE[$94]($97); //@line 5505 "cPickle.c"
        __label__ = 12; break; //@line 5505 "cPickle.c"
      case 12: // $bb11
        var $98=$self_addr; //@line 5506 "cPickle.c"
        var $99=$98+32; //@line 5506 "cPickle.c"
        var $100=HEAP[$99]; //@line 5506 "cPickle.c"
        var $101=($100)!=0; //@line 5506 "cPickle.c"
        if ($101) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 5506 "cPickle.c"
      case 13: // $bb12
        var $102=$self_addr; //@line 5506 "cPickle.c"
        var $103=$102+32; //@line 5506 "cPickle.c"
        var $104=HEAP[$103]; //@line 5506 "cPickle.c"
        var $105=$104; //@line 5506 "cPickle.c"
        var $106=$105; //@line 5506 "cPickle.c"
        var $107=HEAP[$106]; //@line 5506 "cPickle.c"
        var $108=($107) - 1; //@line 5506 "cPickle.c"
        var $109=$105; //@line 5506 "cPickle.c"
        HEAP[$109]=$108; //@line 5506 "cPickle.c"
        var $110=$105; //@line 5506 "cPickle.c"
        var $111=HEAP[$110]; //@line 5506 "cPickle.c"
        var $112=($111)==0; //@line 5506 "cPickle.c"
        if ($112) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5506 "cPickle.c"
      case 14: // $bb13
        var $113=$self_addr; //@line 5506 "cPickle.c"
        var $114=$113+32; //@line 5506 "cPickle.c"
        var $115=HEAP[$114]; //@line 5506 "cPickle.c"
        var $116=$115; //@line 5506 "cPickle.c"
        var $117=$116+4; //@line 5506 "cPickle.c"
        var $118=HEAP[$117]; //@line 5506 "cPickle.c"
        var $119=$118+24; //@line 5506 "cPickle.c"
        var $120=HEAP[$119]; //@line 5506 "cPickle.c"
        var $121=$self_addr; //@line 5506 "cPickle.c"
        var $122=$121+32; //@line 5506 "cPickle.c"
        var $123=HEAP[$122]; //@line 5506 "cPickle.c"
        var $124=$123; //@line 5506 "cPickle.c"
        FUNCTION_TABLE[$120]($124); //@line 5506 "cPickle.c"
        __label__ = 15; break; //@line 5506 "cPickle.c"
      case 15: // $bb14
        var $125=$self_addr; //@line 5507 "cPickle.c"
        var $126=$125+40; //@line 5507 "cPickle.c"
        var $127=HEAP[$126]; //@line 5507 "cPickle.c"
        var $128=($127)!=0; //@line 5507 "cPickle.c"
        if ($128) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 5507 "cPickle.c"
      case 16: // $bb15
        var $129=$self_addr; //@line 5507 "cPickle.c"
        var $130=$129+40; //@line 5507 "cPickle.c"
        var $131=HEAP[$130]; //@line 5507 "cPickle.c"
        var $132=$131; //@line 5507 "cPickle.c"
        var $133=HEAP[$132]; //@line 5507 "cPickle.c"
        var $134=($133) - 1; //@line 5507 "cPickle.c"
        var $135=$131; //@line 5507 "cPickle.c"
        HEAP[$135]=$134; //@line 5507 "cPickle.c"
        var $136=$131; //@line 5507 "cPickle.c"
        var $137=HEAP[$136]; //@line 5507 "cPickle.c"
        var $138=($137)==0; //@line 5507 "cPickle.c"
        if ($138) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5507 "cPickle.c"
      case 17: // $bb16
        var $139=$self_addr; //@line 5507 "cPickle.c"
        var $140=$139+40; //@line 5507 "cPickle.c"
        var $141=HEAP[$140]; //@line 5507 "cPickle.c"
        var $142=$141+4; //@line 5507 "cPickle.c"
        var $143=HEAP[$142]; //@line 5507 "cPickle.c"
        var $144=$143+24; //@line 5507 "cPickle.c"
        var $145=HEAP[$144]; //@line 5507 "cPickle.c"
        var $146=$self_addr; //@line 5507 "cPickle.c"
        var $147=$146+40; //@line 5507 "cPickle.c"
        var $148=HEAP[$147]; //@line 5507 "cPickle.c"
        FUNCTION_TABLE[$145]($148); //@line 5507 "cPickle.c"
        __label__ = 18; break; //@line 5507 "cPickle.c"
      case 18: // $bb17
        var $149=$self_addr; //@line 5508 "cPickle.c"
        var $150=$149+28; //@line 5508 "cPickle.c"
        var $151=HEAP[$150]; //@line 5508 "cPickle.c"
        var $152=($151)!=0; //@line 5508 "cPickle.c"
        if ($152) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 5508 "cPickle.c"
      case 19: // $bb18
        var $153=$self_addr; //@line 5508 "cPickle.c"
        var $154=$153+28; //@line 5508 "cPickle.c"
        var $155=HEAP[$154]; //@line 5508 "cPickle.c"
        var $156=$155; //@line 5508 "cPickle.c"
        var $157=HEAP[$156]; //@line 5508 "cPickle.c"
        var $158=($157) - 1; //@line 5508 "cPickle.c"
        var $159=$155; //@line 5508 "cPickle.c"
        HEAP[$159]=$158; //@line 5508 "cPickle.c"
        var $160=$155; //@line 5508 "cPickle.c"
        var $161=HEAP[$160]; //@line 5508 "cPickle.c"
        var $162=($161)==0; //@line 5508 "cPickle.c"
        if ($162) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5508 "cPickle.c"
      case 20: // $bb19
        var $163=$self_addr; //@line 5508 "cPickle.c"
        var $164=$163+28; //@line 5508 "cPickle.c"
        var $165=HEAP[$164]; //@line 5508 "cPickle.c"
        var $166=$165+4; //@line 5508 "cPickle.c"
        var $167=HEAP[$166]; //@line 5508 "cPickle.c"
        var $168=$167+24; //@line 5508 "cPickle.c"
        var $169=HEAP[$168]; //@line 5508 "cPickle.c"
        var $170=$self_addr; //@line 5508 "cPickle.c"
        var $171=$170+28; //@line 5508 "cPickle.c"
        var $172=HEAP[$171]; //@line 5508 "cPickle.c"
        FUNCTION_TABLE[$169]($172); //@line 5508 "cPickle.c"
        __label__ = 21; break; //@line 5508 "cPickle.c"
      case 21: // $bb20
        var $173=$self_addr; //@line 5509 "cPickle.c"
        var $174=$173+44; //@line 5509 "cPickle.c"
        var $175=HEAP[$174]; //@line 5509 "cPickle.c"
        var $176=($175)!=0; //@line 5509 "cPickle.c"
        if ($176) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 5509 "cPickle.c"
      case 22: // $bb21
        var $177=$self_addr; //@line 5509 "cPickle.c"
        var $178=$177+44; //@line 5509 "cPickle.c"
        var $179=HEAP[$178]; //@line 5509 "cPickle.c"
        var $180=$179; //@line 5509 "cPickle.c"
        var $181=HEAP[$180]; //@line 5509 "cPickle.c"
        var $182=($181) - 1; //@line 5509 "cPickle.c"
        var $183=$179; //@line 5509 "cPickle.c"
        HEAP[$183]=$182; //@line 5509 "cPickle.c"
        var $184=$179; //@line 5509 "cPickle.c"
        var $185=HEAP[$184]; //@line 5509 "cPickle.c"
        var $186=($185)==0; //@line 5509 "cPickle.c"
        if ($186) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 5509 "cPickle.c"
      case 23: // $bb22
        var $187=$self_addr; //@line 5509 "cPickle.c"
        var $188=$187+44; //@line 5509 "cPickle.c"
        var $189=HEAP[$188]; //@line 5509 "cPickle.c"
        var $190=$189+4; //@line 5509 "cPickle.c"
        var $191=HEAP[$190]; //@line 5509 "cPickle.c"
        var $192=$191+24; //@line 5509 "cPickle.c"
        var $193=HEAP[$192]; //@line 5509 "cPickle.c"
        var $194=$self_addr; //@line 5509 "cPickle.c"
        var $195=$194+44; //@line 5509 "cPickle.c"
        var $196=HEAP[$195]; //@line 5509 "cPickle.c"
        FUNCTION_TABLE[$193]($196); //@line 5509 "cPickle.c"
        __label__ = 24; break; //@line 5509 "cPickle.c"
      case 24: // $bb23
        var $197=$self_addr; //@line 5510 "cPickle.c"
        var $198=$197+76; //@line 5510 "cPickle.c"
        var $199=HEAP[$198]; //@line 5510 "cPickle.c"
        var $200=($199)!=0; //@line 5510 "cPickle.c"
        if ($200) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 5510 "cPickle.c"
      case 25: // $bb24
        var $201=$self_addr; //@line 5510 "cPickle.c"
        var $202=$201+76; //@line 5510 "cPickle.c"
        var $203=HEAP[$202]; //@line 5510 "cPickle.c"
        var $204=$203; //@line 5510 "cPickle.c"
        var $205=HEAP[$204]; //@line 5510 "cPickle.c"
        var $206=($205) - 1; //@line 5510 "cPickle.c"
        var $207=$203; //@line 5510 "cPickle.c"
        HEAP[$207]=$206; //@line 5510 "cPickle.c"
        var $208=$203; //@line 5510 "cPickle.c"
        var $209=HEAP[$208]; //@line 5510 "cPickle.c"
        var $210=($209)==0; //@line 5510 "cPickle.c"
        if ($210) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 5510 "cPickle.c"
      case 26: // $bb25
        var $211=$self_addr; //@line 5510 "cPickle.c"
        var $212=$211+76; //@line 5510 "cPickle.c"
        var $213=HEAP[$212]; //@line 5510 "cPickle.c"
        var $214=$213+4; //@line 5510 "cPickle.c"
        var $215=HEAP[$214]; //@line 5510 "cPickle.c"
        var $216=$215+24; //@line 5510 "cPickle.c"
        var $217=HEAP[$216]; //@line 5510 "cPickle.c"
        var $218=$self_addr; //@line 5510 "cPickle.c"
        var $219=$218+76; //@line 5510 "cPickle.c"
        var $220=HEAP[$219]; //@line 5510 "cPickle.c"
        FUNCTION_TABLE[$217]($220); //@line 5510 "cPickle.c"
        __label__ = 27; break; //@line 5510 "cPickle.c"
      case 27: // $bb26
        var $221=$self_addr; //@line 5512 "cPickle.c"
        var $222=$221+48; //@line 5512 "cPickle.c"
        var $223=HEAP[$222]; //@line 5512 "cPickle.c"
        var $224=($223)!=0; //@line 5512 "cPickle.c"
        if ($224) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 5512 "cPickle.c"
      case 28: // $bb27
        var $225=$self_addr; //@line 5513 "cPickle.c"
        var $226=$225+48; //@line 5513 "cPickle.c"
        var $227=HEAP[$226]; //@line 5513 "cPickle.c"
        var $228=$227; //@line 5513 "cPickle.c"
        _free($228); //@line 5513 "cPickle.c"
        __label__ = 29; break; //@line 5513 "cPickle.c"
      case 29: // $bb28
        var $229=$self_addr; //@line 5516 "cPickle.c"
        var $230=$229+68; //@line 5516 "cPickle.c"
        var $231=HEAP[$230]; //@line 5516 "cPickle.c"
        var $232=($231)!=0; //@line 5516 "cPickle.c"
        if ($232) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 5516 "cPickle.c"
      case 30: // $bb29
        var $233=$self_addr; //@line 5517 "cPickle.c"
        var $234=$233+72; //@line 5517 "cPickle.c"
        var $235=HEAP[$234]; //@line 5517 "cPickle.c"
        _free($235); //@line 5517 "cPickle.c"
        __label__ = 31; break; //@line 5517 "cPickle.c"
      case 31: // $bb30
        var $236=$self_addr; //@line 5520 "cPickle.c"
        var $237=$236; //@line 5520 "cPickle.c"
        var $238=$237+4; //@line 5520 "cPickle.c"
        var $239=HEAP[$238]; //@line 5520 "cPickle.c"
        var $240=$239+160; //@line 5520 "cPickle.c"
        var $241=HEAP[$240]; //@line 5520 "cPickle.c"
        var $242=$self_addr; //@line 5520 "cPickle.c"
        var $243=$242; //@line 5520 "cPickle.c"
        FUNCTION_TABLE[$241]($243); //@line 5520 "cPickle.c"
        ;
        return; //@line 5521 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_traverse($self, $visit, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $visit_addr;
        var $arg_addr;
        var $retval;
        var $0;
        var $vret;
        var $vret4;
        var $vret8;
        var $vret12;
        var $vret16;
        var $vret20;
        var $vret24;
        var $vret28;
        var $vret32;
        $self_addr=$self;
        $visit_addr=$visit;
        $arg_addr=$arg;
        var $1=$self_addr; //@line 5526 "cPickle.c"
        var $2=$1+16; //@line 5526 "cPickle.c"
        var $3=HEAP[$2]; //@line 5526 "cPickle.c"
        var $4=($3)!=0; //@line 5526 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 5526 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 5526 "cPickle.c"
        var $6=$5+16; //@line 5526 "cPickle.c"
        var $7=HEAP[$6]; //@line 5526 "cPickle.c"
        var $8=$visit_addr; //@line 5526 "cPickle.c"
        var $9=$arg_addr; //@line 5526 "cPickle.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 5526 "cPickle.c"
        $vret=$10; //@line 5526 "cPickle.c"
        var $11=$vret; //@line 5526 "cPickle.c"
        var $12=($11)!=0; //@line 5526 "cPickle.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5526 "cPickle.c"
      case 2: // $bb1
        var $13=$vret; //@line 5526 "cPickle.c"
        $0=$13; //@line 5526 "cPickle.c"
        __label__ = 28; break; //@line 5526 "cPickle.c"
      case 3: // $bb2
        var $14=$self_addr; //@line 5527 "cPickle.c"
        var $15=$14+20; //@line 5527 "cPickle.c"
        var $16=HEAP[$15]; //@line 5527 "cPickle.c"
        var $17=($16)!=0; //@line 5527 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5527 "cPickle.c"
      case 4: // $bb3
        var $18=$self_addr; //@line 5527 "cPickle.c"
        var $19=$18+20; //@line 5527 "cPickle.c"
        var $20=HEAP[$19]; //@line 5527 "cPickle.c"
        var $21=$visit_addr; //@line 5527 "cPickle.c"
        var $22=$arg_addr; //@line 5527 "cPickle.c"
        var $23=FUNCTION_TABLE[$21]($20, $22); //@line 5527 "cPickle.c"
        $vret4=$23; //@line 5527 "cPickle.c"
        var $24=$vret4; //@line 5527 "cPickle.c"
        var $25=($24)!=0; //@line 5527 "cPickle.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5527 "cPickle.c"
      case 5: // $bb5
        var $26=$vret4; //@line 5527 "cPickle.c"
        $0=$26; //@line 5527 "cPickle.c"
        __label__ = 28; break; //@line 5527 "cPickle.c"
      case 6: // $bb6
        var $27=$self_addr; //@line 5528 "cPickle.c"
        var $28=$27+12; //@line 5528 "cPickle.c"
        var $29=HEAP[$28]; //@line 5528 "cPickle.c"
        var $30=($29)!=0; //@line 5528 "cPickle.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5528 "cPickle.c"
      case 7: // $bb7
        var $31=$self_addr; //@line 5528 "cPickle.c"
        var $32=$31+12; //@line 5528 "cPickle.c"
        var $33=HEAP[$32]; //@line 5528 "cPickle.c"
        var $34=$visit_addr; //@line 5528 "cPickle.c"
        var $35=$arg_addr; //@line 5528 "cPickle.c"
        var $36=FUNCTION_TABLE[$34]($33, $35); //@line 5528 "cPickle.c"
        $vret8=$36; //@line 5528 "cPickle.c"
        var $37=$vret8; //@line 5528 "cPickle.c"
        var $38=($37)!=0; //@line 5528 "cPickle.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5528 "cPickle.c"
      case 8: // $bb9
        var $39=$vret8; //@line 5528 "cPickle.c"
        $0=$39; //@line 5528 "cPickle.c"
        __label__ = 28; break; //@line 5528 "cPickle.c"
      case 9: // $bb10
        var $40=$self_addr; //@line 5529 "cPickle.c"
        var $41=$40+24; //@line 5529 "cPickle.c"
        var $42=HEAP[$41]; //@line 5529 "cPickle.c"
        var $43=($42)!=0; //@line 5529 "cPickle.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 5529 "cPickle.c"
      case 10: // $bb11
        var $44=$self_addr; //@line 5529 "cPickle.c"
        var $45=$44+24; //@line 5529 "cPickle.c"
        var $46=HEAP[$45]; //@line 5529 "cPickle.c"
        var $47=$visit_addr; //@line 5529 "cPickle.c"
        var $48=$arg_addr; //@line 5529 "cPickle.c"
        var $49=FUNCTION_TABLE[$47]($46, $48); //@line 5529 "cPickle.c"
        $vret12=$49; //@line 5529 "cPickle.c"
        var $50=$vret12; //@line 5529 "cPickle.c"
        var $51=($50)!=0; //@line 5529 "cPickle.c"
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5529 "cPickle.c"
      case 11: // $bb13
        var $52=$vret12; //@line 5529 "cPickle.c"
        $0=$52; //@line 5529 "cPickle.c"
        __label__ = 28; break; //@line 5529 "cPickle.c"
      case 12: // $bb14
        var $53=$self_addr; //@line 5530 "cPickle.c"
        var $54=$53+32; //@line 5530 "cPickle.c"
        var $55=HEAP[$54]; //@line 5530 "cPickle.c"
        var $56=($55)!=0; //@line 5530 "cPickle.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 5530 "cPickle.c"
      case 13: // $bb15
        var $57=$self_addr; //@line 5530 "cPickle.c"
        var $58=$57+32; //@line 5530 "cPickle.c"
        var $59=HEAP[$58]; //@line 5530 "cPickle.c"
        var $60=$59; //@line 5530 "cPickle.c"
        var $61=$visit_addr; //@line 5530 "cPickle.c"
        var $62=$arg_addr; //@line 5530 "cPickle.c"
        var $63=FUNCTION_TABLE[$61]($60, $62); //@line 5530 "cPickle.c"
        $vret16=$63; //@line 5530 "cPickle.c"
        var $64=$vret16; //@line 5530 "cPickle.c"
        var $65=($64)!=0; //@line 5530 "cPickle.c"
        if ($65) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5530 "cPickle.c"
      case 14: // $bb17
        var $66=$vret16; //@line 5530 "cPickle.c"
        $0=$66; //@line 5530 "cPickle.c"
        __label__ = 28; break; //@line 5530 "cPickle.c"
      case 15: // $bb18
        var $67=$self_addr; //@line 5531 "cPickle.c"
        var $68=$67+40; //@line 5531 "cPickle.c"
        var $69=HEAP[$68]; //@line 5531 "cPickle.c"
        var $70=($69)!=0; //@line 5531 "cPickle.c"
        if ($70) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 5531 "cPickle.c"
      case 16: // $bb19
        var $71=$self_addr; //@line 5531 "cPickle.c"
        var $72=$71+40; //@line 5531 "cPickle.c"
        var $73=HEAP[$72]; //@line 5531 "cPickle.c"
        var $74=$visit_addr; //@line 5531 "cPickle.c"
        var $75=$arg_addr; //@line 5531 "cPickle.c"
        var $76=FUNCTION_TABLE[$74]($73, $75); //@line 5531 "cPickle.c"
        $vret20=$76; //@line 5531 "cPickle.c"
        var $77=$vret20; //@line 5531 "cPickle.c"
        var $78=($77)!=0; //@line 5531 "cPickle.c"
        if ($78) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5531 "cPickle.c"
      case 17: // $bb21
        var $79=$vret20; //@line 5531 "cPickle.c"
        $0=$79; //@line 5531 "cPickle.c"
        __label__ = 28; break; //@line 5531 "cPickle.c"
      case 18: // $bb22
        var $80=$self_addr; //@line 5532 "cPickle.c"
        var $81=$80+28; //@line 5532 "cPickle.c"
        var $82=HEAP[$81]; //@line 5532 "cPickle.c"
        var $83=($82)!=0; //@line 5532 "cPickle.c"
        if ($83) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 5532 "cPickle.c"
      case 19: // $bb23
        var $84=$self_addr; //@line 5532 "cPickle.c"
        var $85=$84+28; //@line 5532 "cPickle.c"
        var $86=HEAP[$85]; //@line 5532 "cPickle.c"
        var $87=$visit_addr; //@line 5532 "cPickle.c"
        var $88=$arg_addr; //@line 5532 "cPickle.c"
        var $89=FUNCTION_TABLE[$87]($86, $88); //@line 5532 "cPickle.c"
        $vret24=$89; //@line 5532 "cPickle.c"
        var $90=$vret24; //@line 5532 "cPickle.c"
        var $91=($90)!=0; //@line 5532 "cPickle.c"
        if ($91) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5532 "cPickle.c"
      case 20: // $bb25
        var $92=$vret24; //@line 5532 "cPickle.c"
        $0=$92; //@line 5532 "cPickle.c"
        __label__ = 28; break; //@line 5532 "cPickle.c"
      case 21: // $bb26
        var $93=$self_addr; //@line 5533 "cPickle.c"
        var $94=$93+44; //@line 5533 "cPickle.c"
        var $95=HEAP[$94]; //@line 5533 "cPickle.c"
        var $96=($95)!=0; //@line 5533 "cPickle.c"
        if ($96) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 5533 "cPickle.c"
      case 22: // $bb27
        var $97=$self_addr; //@line 5533 "cPickle.c"
        var $98=$97+44; //@line 5533 "cPickle.c"
        var $99=HEAP[$98]; //@line 5533 "cPickle.c"
        var $100=$visit_addr; //@line 5533 "cPickle.c"
        var $101=$arg_addr; //@line 5533 "cPickle.c"
        var $102=FUNCTION_TABLE[$100]($99, $101); //@line 5533 "cPickle.c"
        $vret28=$102; //@line 5533 "cPickle.c"
        var $103=$vret28; //@line 5533 "cPickle.c"
        var $104=($103)!=0; //@line 5533 "cPickle.c"
        if ($104) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 5533 "cPickle.c"
      case 23: // $bb29
        var $105=$vret28; //@line 5533 "cPickle.c"
        $0=$105; //@line 5533 "cPickle.c"
        __label__ = 28; break; //@line 5533 "cPickle.c"
      case 24: // $bb30
        var $106=$self_addr; //@line 5534 "cPickle.c"
        var $107=$106+76; //@line 5534 "cPickle.c"
        var $108=HEAP[$107]; //@line 5534 "cPickle.c"
        var $109=($108)!=0; //@line 5534 "cPickle.c"
        if ($109) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 5534 "cPickle.c"
      case 25: // $bb31
        var $110=$self_addr; //@line 5534 "cPickle.c"
        var $111=$110+76; //@line 5534 "cPickle.c"
        var $112=HEAP[$111]; //@line 5534 "cPickle.c"
        var $113=$visit_addr; //@line 5534 "cPickle.c"
        var $114=$arg_addr; //@line 5534 "cPickle.c"
        var $115=FUNCTION_TABLE[$113]($112, $114); //@line 5534 "cPickle.c"
        $vret32=$115; //@line 5534 "cPickle.c"
        var $116=$vret32; //@line 5534 "cPickle.c"
        var $117=($116)!=0; //@line 5534 "cPickle.c"
        if ($117) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 5534 "cPickle.c"
      case 26: // $bb33
        var $118=$vret32; //@line 5534 "cPickle.c"
        $0=$118; //@line 5534 "cPickle.c"
        __label__ = 28; break; //@line 5534 "cPickle.c"
      case 27: // $bb34
        $0=0; //@line 5535 "cPickle.c"
        __label__ = 28; break; //@line 5535 "cPickle.c"
      case 28: // $bb35
        var $119=$0; //@line 5526 "cPickle.c"
        $retval=$119; //@line 5526 "cPickle.c"
        var $retval36=$retval; //@line 5526 "cPickle.c"
        ;
        return $retval36; //@line 5526 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_clear($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        var $_py_tmp4;
        var $_py_tmp8;
        var $_py_tmp12;
        var $_py_tmp16;
        var $_py_tmp20;
        var $_py_tmp24;
        var $_py_tmp28;
        var $_py_tmp32;
        $self_addr=$self;
        var $1=$self_addr; //@line 5541 "cPickle.c"
        var $2=$1+16; //@line 5541 "cPickle.c"
        var $3=HEAP[$2]; //@line 5541 "cPickle.c"
        var $4=($3)!=0; //@line 5541 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 5541 "cPickle.c"
      case 1: // $bb
        var $5=$self_addr; //@line 5541 "cPickle.c"
        var $6=$5+16; //@line 5541 "cPickle.c"
        var $7=HEAP[$6]; //@line 5541 "cPickle.c"
        $_py_tmp=$7; //@line 5541 "cPickle.c"
        var $8=$self_addr; //@line 5541 "cPickle.c"
        var $9=$8+16; //@line 5541 "cPickle.c"
        HEAP[$9]=0; //@line 5541 "cPickle.c"
        var $10=$_py_tmp; //@line 5541 "cPickle.c"
        var $11=$10; //@line 5541 "cPickle.c"
        var $12=HEAP[$11]; //@line 5541 "cPickle.c"
        var $13=($12) - 1; //@line 5541 "cPickle.c"
        var $14=$_py_tmp; //@line 5541 "cPickle.c"
        var $15=$14; //@line 5541 "cPickle.c"
        HEAP[$15]=$13; //@line 5541 "cPickle.c"
        var $16=$_py_tmp; //@line 5541 "cPickle.c"
        var $17=$16; //@line 5541 "cPickle.c"
        var $18=HEAP[$17]; //@line 5541 "cPickle.c"
        var $19=($18)==0; //@line 5541 "cPickle.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5541 "cPickle.c"
      case 2: // $bb1
        var $20=$_py_tmp; //@line 5541 "cPickle.c"
        var $21=$20+4; //@line 5541 "cPickle.c"
        var $22=HEAP[$21]; //@line 5541 "cPickle.c"
        var $23=$22+24; //@line 5541 "cPickle.c"
        var $24=HEAP[$23]; //@line 5541 "cPickle.c"
        var $25=$_py_tmp; //@line 5541 "cPickle.c"
        FUNCTION_TABLE[$24]($25); //@line 5541 "cPickle.c"
        __label__ = 3; break; //@line 5541 "cPickle.c"
      case 3: // $bb2
        var $26=$self_addr; //@line 5542 "cPickle.c"
        var $27=$26+20; //@line 5542 "cPickle.c"
        var $28=HEAP[$27]; //@line 5542 "cPickle.c"
        var $29=($28)!=0; //@line 5542 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5542 "cPickle.c"
      case 4: // $bb3
        var $30=$self_addr; //@line 5542 "cPickle.c"
        var $31=$30+20; //@line 5542 "cPickle.c"
        var $32=HEAP[$31]; //@line 5542 "cPickle.c"
        $_py_tmp4=$32; //@line 5542 "cPickle.c"
        var $33=$self_addr; //@line 5542 "cPickle.c"
        var $34=$33+20; //@line 5542 "cPickle.c"
        HEAP[$34]=0; //@line 5542 "cPickle.c"
        var $35=$_py_tmp4; //@line 5542 "cPickle.c"
        var $36=$35; //@line 5542 "cPickle.c"
        var $37=HEAP[$36]; //@line 5542 "cPickle.c"
        var $38=($37) - 1; //@line 5542 "cPickle.c"
        var $39=$_py_tmp4; //@line 5542 "cPickle.c"
        var $40=$39; //@line 5542 "cPickle.c"
        HEAP[$40]=$38; //@line 5542 "cPickle.c"
        var $41=$_py_tmp4; //@line 5542 "cPickle.c"
        var $42=$41; //@line 5542 "cPickle.c"
        var $43=HEAP[$42]; //@line 5542 "cPickle.c"
        var $44=($43)==0; //@line 5542 "cPickle.c"
        if ($44) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5542 "cPickle.c"
      case 5: // $bb5
        var $45=$_py_tmp4; //@line 5542 "cPickle.c"
        var $46=$45+4; //@line 5542 "cPickle.c"
        var $47=HEAP[$46]; //@line 5542 "cPickle.c"
        var $48=$47+24; //@line 5542 "cPickle.c"
        var $49=HEAP[$48]; //@line 5542 "cPickle.c"
        var $50=$_py_tmp4; //@line 5542 "cPickle.c"
        FUNCTION_TABLE[$49]($50); //@line 5542 "cPickle.c"
        __label__ = 6; break; //@line 5542 "cPickle.c"
      case 6: // $bb6
        var $51=$self_addr; //@line 5543 "cPickle.c"
        var $52=$51+12; //@line 5543 "cPickle.c"
        var $53=HEAP[$52]; //@line 5543 "cPickle.c"
        var $54=($53)!=0; //@line 5543 "cPickle.c"
        if ($54) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5543 "cPickle.c"
      case 7: // $bb7
        var $55=$self_addr; //@line 5543 "cPickle.c"
        var $56=$55+12; //@line 5543 "cPickle.c"
        var $57=HEAP[$56]; //@line 5543 "cPickle.c"
        $_py_tmp8=$57; //@line 5543 "cPickle.c"
        var $58=$self_addr; //@line 5543 "cPickle.c"
        var $59=$58+12; //@line 5543 "cPickle.c"
        HEAP[$59]=0; //@line 5543 "cPickle.c"
        var $60=$_py_tmp8; //@line 5543 "cPickle.c"
        var $61=$60; //@line 5543 "cPickle.c"
        var $62=HEAP[$61]; //@line 5543 "cPickle.c"
        var $63=($62) - 1; //@line 5543 "cPickle.c"
        var $64=$_py_tmp8; //@line 5543 "cPickle.c"
        var $65=$64; //@line 5543 "cPickle.c"
        HEAP[$65]=$63; //@line 5543 "cPickle.c"
        var $66=$_py_tmp8; //@line 5543 "cPickle.c"
        var $67=$66; //@line 5543 "cPickle.c"
        var $68=HEAP[$67]; //@line 5543 "cPickle.c"
        var $69=($68)==0; //@line 5543 "cPickle.c"
        if ($69) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5543 "cPickle.c"
      case 8: // $bb9
        var $70=$_py_tmp8; //@line 5543 "cPickle.c"
        var $71=$70+4; //@line 5543 "cPickle.c"
        var $72=HEAP[$71]; //@line 5543 "cPickle.c"
        var $73=$72+24; //@line 5543 "cPickle.c"
        var $74=HEAP[$73]; //@line 5543 "cPickle.c"
        var $75=$_py_tmp8; //@line 5543 "cPickle.c"
        FUNCTION_TABLE[$74]($75); //@line 5543 "cPickle.c"
        __label__ = 9; break; //@line 5543 "cPickle.c"
      case 9: // $bb10
        var $76=$self_addr; //@line 5544 "cPickle.c"
        var $77=$76+24; //@line 5544 "cPickle.c"
        var $78=HEAP[$77]; //@line 5544 "cPickle.c"
        var $79=($78)!=0; //@line 5544 "cPickle.c"
        if ($79) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 5544 "cPickle.c"
      case 10: // $bb11
        var $80=$self_addr; //@line 5544 "cPickle.c"
        var $81=$80+24; //@line 5544 "cPickle.c"
        var $82=HEAP[$81]; //@line 5544 "cPickle.c"
        $_py_tmp12=$82; //@line 5544 "cPickle.c"
        var $83=$self_addr; //@line 5544 "cPickle.c"
        var $84=$83+24; //@line 5544 "cPickle.c"
        HEAP[$84]=0; //@line 5544 "cPickle.c"
        var $85=$_py_tmp12; //@line 5544 "cPickle.c"
        var $86=$85; //@line 5544 "cPickle.c"
        var $87=HEAP[$86]; //@line 5544 "cPickle.c"
        var $88=($87) - 1; //@line 5544 "cPickle.c"
        var $89=$_py_tmp12; //@line 5544 "cPickle.c"
        var $90=$89; //@line 5544 "cPickle.c"
        HEAP[$90]=$88; //@line 5544 "cPickle.c"
        var $91=$_py_tmp12; //@line 5544 "cPickle.c"
        var $92=$91; //@line 5544 "cPickle.c"
        var $93=HEAP[$92]; //@line 5544 "cPickle.c"
        var $94=($93)==0; //@line 5544 "cPickle.c"
        if ($94) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5544 "cPickle.c"
      case 11: // $bb13
        var $95=$_py_tmp12; //@line 5544 "cPickle.c"
        var $96=$95+4; //@line 5544 "cPickle.c"
        var $97=HEAP[$96]; //@line 5544 "cPickle.c"
        var $98=$97+24; //@line 5544 "cPickle.c"
        var $99=HEAP[$98]; //@line 5544 "cPickle.c"
        var $100=$_py_tmp12; //@line 5544 "cPickle.c"
        FUNCTION_TABLE[$99]($100); //@line 5544 "cPickle.c"
        __label__ = 12; break; //@line 5544 "cPickle.c"
      case 12: // $bb14
        var $101=$self_addr; //@line 5545 "cPickle.c"
        var $102=$101+32; //@line 5545 "cPickle.c"
        var $103=HEAP[$102]; //@line 5545 "cPickle.c"
        var $104=($103)!=0; //@line 5545 "cPickle.c"
        if ($104) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 5545 "cPickle.c"
      case 13: // $bb15
        var $105=$self_addr; //@line 5545 "cPickle.c"
        var $106=$105+32; //@line 5545 "cPickle.c"
        var $107=HEAP[$106]; //@line 5545 "cPickle.c"
        var $108=$107; //@line 5545 "cPickle.c"
        $_py_tmp16=$108; //@line 5545 "cPickle.c"
        var $109=$self_addr; //@line 5545 "cPickle.c"
        var $110=$109+32; //@line 5545 "cPickle.c"
        HEAP[$110]=0; //@line 5545 "cPickle.c"
        var $111=$_py_tmp16; //@line 5545 "cPickle.c"
        var $112=$111; //@line 5545 "cPickle.c"
        var $113=HEAP[$112]; //@line 5545 "cPickle.c"
        var $114=($113) - 1; //@line 5545 "cPickle.c"
        var $115=$_py_tmp16; //@line 5545 "cPickle.c"
        var $116=$115; //@line 5545 "cPickle.c"
        HEAP[$116]=$114; //@line 5545 "cPickle.c"
        var $117=$_py_tmp16; //@line 5545 "cPickle.c"
        var $118=$117; //@line 5545 "cPickle.c"
        var $119=HEAP[$118]; //@line 5545 "cPickle.c"
        var $120=($119)==0; //@line 5545 "cPickle.c"
        if ($120) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5545 "cPickle.c"
      case 14: // $bb17
        var $121=$_py_tmp16; //@line 5545 "cPickle.c"
        var $122=$121+4; //@line 5545 "cPickle.c"
        var $123=HEAP[$122]; //@line 5545 "cPickle.c"
        var $124=$123+24; //@line 5545 "cPickle.c"
        var $125=HEAP[$124]; //@line 5545 "cPickle.c"
        var $126=$_py_tmp16; //@line 5545 "cPickle.c"
        FUNCTION_TABLE[$125]($126); //@line 5545 "cPickle.c"
        __label__ = 15; break; //@line 5545 "cPickle.c"
      case 15: // $bb18
        var $127=$self_addr; //@line 5546 "cPickle.c"
        var $128=$127+40; //@line 5546 "cPickle.c"
        var $129=HEAP[$128]; //@line 5546 "cPickle.c"
        var $130=($129)!=0; //@line 5546 "cPickle.c"
        if ($130) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 5546 "cPickle.c"
      case 16: // $bb19
        var $131=$self_addr; //@line 5546 "cPickle.c"
        var $132=$131+40; //@line 5546 "cPickle.c"
        var $133=HEAP[$132]; //@line 5546 "cPickle.c"
        $_py_tmp20=$133; //@line 5546 "cPickle.c"
        var $134=$self_addr; //@line 5546 "cPickle.c"
        var $135=$134+40; //@line 5546 "cPickle.c"
        HEAP[$135]=0; //@line 5546 "cPickle.c"
        var $136=$_py_tmp20; //@line 5546 "cPickle.c"
        var $137=$136; //@line 5546 "cPickle.c"
        var $138=HEAP[$137]; //@line 5546 "cPickle.c"
        var $139=($138) - 1; //@line 5546 "cPickle.c"
        var $140=$_py_tmp20; //@line 5546 "cPickle.c"
        var $141=$140; //@line 5546 "cPickle.c"
        HEAP[$141]=$139; //@line 5546 "cPickle.c"
        var $142=$_py_tmp20; //@line 5546 "cPickle.c"
        var $143=$142; //@line 5546 "cPickle.c"
        var $144=HEAP[$143]; //@line 5546 "cPickle.c"
        var $145=($144)==0; //@line 5546 "cPickle.c"
        if ($145) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5546 "cPickle.c"
      case 17: // $bb21
        var $146=$_py_tmp20; //@line 5546 "cPickle.c"
        var $147=$146+4; //@line 5546 "cPickle.c"
        var $148=HEAP[$147]; //@line 5546 "cPickle.c"
        var $149=$148+24; //@line 5546 "cPickle.c"
        var $150=HEAP[$149]; //@line 5546 "cPickle.c"
        var $151=$_py_tmp20; //@line 5546 "cPickle.c"
        FUNCTION_TABLE[$150]($151); //@line 5546 "cPickle.c"
        __label__ = 18; break; //@line 5546 "cPickle.c"
      case 18: // $bb22
        var $152=$self_addr; //@line 5547 "cPickle.c"
        var $153=$152+28; //@line 5547 "cPickle.c"
        var $154=HEAP[$153]; //@line 5547 "cPickle.c"
        var $155=($154)!=0; //@line 5547 "cPickle.c"
        if ($155) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 5547 "cPickle.c"
      case 19: // $bb23
        var $156=$self_addr; //@line 5547 "cPickle.c"
        var $157=$156+28; //@line 5547 "cPickle.c"
        var $158=HEAP[$157]; //@line 5547 "cPickle.c"
        $_py_tmp24=$158; //@line 5547 "cPickle.c"
        var $159=$self_addr; //@line 5547 "cPickle.c"
        var $160=$159+28; //@line 5547 "cPickle.c"
        HEAP[$160]=0; //@line 5547 "cPickle.c"
        var $161=$_py_tmp24; //@line 5547 "cPickle.c"
        var $162=$161; //@line 5547 "cPickle.c"
        var $163=HEAP[$162]; //@line 5547 "cPickle.c"
        var $164=($163) - 1; //@line 5547 "cPickle.c"
        var $165=$_py_tmp24; //@line 5547 "cPickle.c"
        var $166=$165; //@line 5547 "cPickle.c"
        HEAP[$166]=$164; //@line 5547 "cPickle.c"
        var $167=$_py_tmp24; //@line 5547 "cPickle.c"
        var $168=$167; //@line 5547 "cPickle.c"
        var $169=HEAP[$168]; //@line 5547 "cPickle.c"
        var $170=($169)==0; //@line 5547 "cPickle.c"
        if ($170) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5547 "cPickle.c"
      case 20: // $bb25
        var $171=$_py_tmp24; //@line 5547 "cPickle.c"
        var $172=$171+4; //@line 5547 "cPickle.c"
        var $173=HEAP[$172]; //@line 5547 "cPickle.c"
        var $174=$173+24; //@line 5547 "cPickle.c"
        var $175=HEAP[$174]; //@line 5547 "cPickle.c"
        var $176=$_py_tmp24; //@line 5547 "cPickle.c"
        FUNCTION_TABLE[$175]($176); //@line 5547 "cPickle.c"
        __label__ = 21; break; //@line 5547 "cPickle.c"
      case 21: // $bb26
        var $177=$self_addr; //@line 5548 "cPickle.c"
        var $178=$177+44; //@line 5548 "cPickle.c"
        var $179=HEAP[$178]; //@line 5548 "cPickle.c"
        var $180=($179)!=0; //@line 5548 "cPickle.c"
        if ($180) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 5548 "cPickle.c"
      case 22: // $bb27
        var $181=$self_addr; //@line 5548 "cPickle.c"
        var $182=$181+44; //@line 5548 "cPickle.c"
        var $183=HEAP[$182]; //@line 5548 "cPickle.c"
        $_py_tmp28=$183; //@line 5548 "cPickle.c"
        var $184=$self_addr; //@line 5548 "cPickle.c"
        var $185=$184+44; //@line 5548 "cPickle.c"
        HEAP[$185]=0; //@line 5548 "cPickle.c"
        var $186=$_py_tmp28; //@line 5548 "cPickle.c"
        var $187=$186; //@line 5548 "cPickle.c"
        var $188=HEAP[$187]; //@line 5548 "cPickle.c"
        var $189=($188) - 1; //@line 5548 "cPickle.c"
        var $190=$_py_tmp28; //@line 5548 "cPickle.c"
        var $191=$190; //@line 5548 "cPickle.c"
        HEAP[$191]=$189; //@line 5548 "cPickle.c"
        var $192=$_py_tmp28; //@line 5548 "cPickle.c"
        var $193=$192; //@line 5548 "cPickle.c"
        var $194=HEAP[$193]; //@line 5548 "cPickle.c"
        var $195=($194)==0; //@line 5548 "cPickle.c"
        if ($195) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 5548 "cPickle.c"
      case 23: // $bb29
        var $196=$_py_tmp28; //@line 5548 "cPickle.c"
        var $197=$196+4; //@line 5548 "cPickle.c"
        var $198=HEAP[$197]; //@line 5548 "cPickle.c"
        var $199=$198+24; //@line 5548 "cPickle.c"
        var $200=HEAP[$199]; //@line 5548 "cPickle.c"
        var $201=$_py_tmp28; //@line 5548 "cPickle.c"
        FUNCTION_TABLE[$200]($201); //@line 5548 "cPickle.c"
        __label__ = 24; break; //@line 5548 "cPickle.c"
      case 24: // $bb30
        var $202=$self_addr; //@line 5549 "cPickle.c"
        var $203=$202+76; //@line 5549 "cPickle.c"
        var $204=HEAP[$203]; //@line 5549 "cPickle.c"
        var $205=($204)!=0; //@line 5549 "cPickle.c"
        if ($205) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 5549 "cPickle.c"
      case 25: // $bb31
        var $206=$self_addr; //@line 5549 "cPickle.c"
        var $207=$206+76; //@line 5549 "cPickle.c"
        var $208=HEAP[$207]; //@line 5549 "cPickle.c"
        $_py_tmp32=$208; //@line 5549 "cPickle.c"
        var $209=$self_addr; //@line 5549 "cPickle.c"
        var $210=$209+76; //@line 5549 "cPickle.c"
        HEAP[$210]=0; //@line 5549 "cPickle.c"
        var $211=$_py_tmp32; //@line 5549 "cPickle.c"
        var $212=$211; //@line 5549 "cPickle.c"
        var $213=HEAP[$212]; //@line 5549 "cPickle.c"
        var $214=($213) - 1; //@line 5549 "cPickle.c"
        var $215=$_py_tmp32; //@line 5549 "cPickle.c"
        var $216=$215; //@line 5549 "cPickle.c"
        HEAP[$216]=$214; //@line 5549 "cPickle.c"
        var $217=$_py_tmp32; //@line 5549 "cPickle.c"
        var $218=$217; //@line 5549 "cPickle.c"
        var $219=HEAP[$218]; //@line 5549 "cPickle.c"
        var $220=($219)==0; //@line 5549 "cPickle.c"
        if ($220) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 5549 "cPickle.c"
      case 26: // $bb33
        var $221=$_py_tmp32; //@line 5549 "cPickle.c"
        var $222=$221+4; //@line 5549 "cPickle.c"
        var $223=HEAP[$222]; //@line 5549 "cPickle.c"
        var $224=$223+24; //@line 5549 "cPickle.c"
        var $225=HEAP[$224]; //@line 5549 "cPickle.c"
        var $226=$_py_tmp32; //@line 5549 "cPickle.c"
        FUNCTION_TABLE[$225]($226); //@line 5549 "cPickle.c"
        __label__ = 27; break; //@line 5549 "cPickle.c"
      case 27: // $bb34
        $0=0; //@line 5550 "cPickle.c"
        var $227=$0; //@line 5550 "cPickle.c"
        $retval=$227; //@line 5550 "cPickle.c"
        var $retval35=$retval; //@line 5550 "cPickle.c"
        ;
        return $retval35; //@line 5550 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_getattr($self, $name) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $name_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $name_addr=$name;
        var $1=$name_addr; //@line 5556 "cPickle.c"
        var $2=_strcmp($1, __str108); //@line 5556 "cPickle.c"
        var $3=($2)==0; //@line 5556 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 5556 "cPickle.c"
      case 1: // $bb
        var $4=$self_addr; //@line 5557 "cPickle.c"
        var $5=$4+40; //@line 5557 "cPickle.c"
        var $6=HEAP[$5]; //@line 5557 "cPickle.c"
        var $7=($6)==0; //@line 5557 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5557 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[_PyExc_AttributeError]; //@line 5558 "cPickle.c"
        var $9=$name_addr; //@line 5558 "cPickle.c"
        _PyErr_SetString($8, $9); //@line 5558 "cPickle.c"
        $0=0; //@line 5559 "cPickle.c"
        __label__ = 15; break; //@line 5559 "cPickle.c"
      case 3: // $bb2
        var $10=$self_addr; //@line 5562 "cPickle.c"
        var $11=$10+40; //@line 5562 "cPickle.c"
        var $12=HEAP[$11]; //@line 5562 "cPickle.c"
        var $13=$12; //@line 5562 "cPickle.c"
        var $14=HEAP[$13]; //@line 5562 "cPickle.c"
        var $15=($14) + 1; //@line 5562 "cPickle.c"
        var $16=$12; //@line 5562 "cPickle.c"
        HEAP[$16]=$15; //@line 5562 "cPickle.c"
        var $17=$self_addr; //@line 5563 "cPickle.c"
        var $18=$17+40; //@line 5563 "cPickle.c"
        var $19=HEAP[$18]; //@line 5563 "cPickle.c"
        $0=$19; //@line 5563 "cPickle.c"
        __label__ = 15; break; //@line 5563 "cPickle.c"
      case 4: // $bb3
        var $20=$name_addr; //@line 5566 "cPickle.c"
        var $21=_strcmp($20, __str109); //@line 5566 "cPickle.c"
        var $22=($21)==0; //@line 5566 "cPickle.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 5566 "cPickle.c"
      case 5: // $bb4
        var $23=$self_addr; //@line 5567 "cPickle.c"
        var $24=$23+76; //@line 5567 "cPickle.c"
        var $25=HEAP[$24]; //@line 5567 "cPickle.c"
        var $26=($25)==0; //@line 5567 "cPickle.c"
        if ($26) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5567 "cPickle.c"
      case 6: // $bb5
        var $27=HEAP[_PyExc_AttributeError]; //@line 5568 "cPickle.c"
        var $28=$name_addr; //@line 5568 "cPickle.c"
        _PyErr_SetString($27, $28); //@line 5568 "cPickle.c"
        $0=0; //@line 5569 "cPickle.c"
        __label__ = 15; break; //@line 5569 "cPickle.c"
      case 7: // $bb6
        var $29=$self_addr; //@line 5572 "cPickle.c"
        var $30=$29+76; //@line 5572 "cPickle.c"
        var $31=HEAP[$30]; //@line 5572 "cPickle.c"
        var $32=$31; //@line 5572 "cPickle.c"
        var $33=HEAP[$32]; //@line 5572 "cPickle.c"
        var $34=($33) + 1; //@line 5572 "cPickle.c"
        var $35=$31; //@line 5572 "cPickle.c"
        HEAP[$35]=$34; //@line 5572 "cPickle.c"
        var $36=$self_addr; //@line 5573 "cPickle.c"
        var $37=$36+76; //@line 5573 "cPickle.c"
        var $38=HEAP[$37]; //@line 5573 "cPickle.c"
        $0=$38; //@line 5573 "cPickle.c"
        __label__ = 15; break; //@line 5573 "cPickle.c"
      case 8: // $bb7
        var $39=$name_addr; //@line 5576 "cPickle.c"
        var $40=_strcmp($39, __str70); //@line 5576 "cPickle.c"
        var $41=($40)==0; //@line 5576 "cPickle.c"
        if ($41) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 5576 "cPickle.c"
      case 9: // $bb8
        var $42=$self_addr; //@line 5577 "cPickle.c"
        var $43=$42+24; //@line 5577 "cPickle.c"
        var $44=HEAP[$43]; //@line 5577 "cPickle.c"
        var $45=($44)==0; //@line 5577 "cPickle.c"
        if ($45) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5577 "cPickle.c"
      case 10: // $bb9
        var $46=HEAP[_PyExc_AttributeError]; //@line 5578 "cPickle.c"
        var $47=$name_addr; //@line 5578 "cPickle.c"
        _PyErr_SetString($46, $47); //@line 5578 "cPickle.c"
        $0=0; //@line 5579 "cPickle.c"
        __label__ = 15; break; //@line 5579 "cPickle.c"
      case 11: // $bb10
        var $48=$self_addr; //@line 5582 "cPickle.c"
        var $49=$48+24; //@line 5582 "cPickle.c"
        var $50=HEAP[$49]; //@line 5582 "cPickle.c"
        var $51=$50; //@line 5582 "cPickle.c"
        var $52=HEAP[$51]; //@line 5582 "cPickle.c"
        var $53=($52) + 1; //@line 5582 "cPickle.c"
        var $54=$50; //@line 5582 "cPickle.c"
        HEAP[$54]=$53; //@line 5582 "cPickle.c"
        var $55=$self_addr; //@line 5583 "cPickle.c"
        var $56=$55+24; //@line 5583 "cPickle.c"
        var $57=HEAP[$56]; //@line 5583 "cPickle.c"
        $0=$57; //@line 5583 "cPickle.c"
        __label__ = 15; break; //@line 5583 "cPickle.c"
      case 12: // $bb11
        var $58=$name_addr; //@line 5586 "cPickle.c"
        var $59=_strcmp($58, __str110); //@line 5586 "cPickle.c"
        var $60=($59)==0; //@line 5586 "cPickle.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5586 "cPickle.c"
      case 13: // $bb12
        var $61=HEAP[_UnpicklingError]; //@line 5587 "cPickle.c"
        var $62=$61; //@line 5587 "cPickle.c"
        var $63=HEAP[$62]; //@line 5587 "cPickle.c"
        var $64=($63) + 1; //@line 5587 "cPickle.c"
        var $65=$61; //@line 5587 "cPickle.c"
        HEAP[$65]=$64; //@line 5587 "cPickle.c"
        var $66=HEAP[_UnpicklingError]; //@line 5588 "cPickle.c"
        $0=$66; //@line 5588 "cPickle.c"
        __label__ = 15; break; //@line 5588 "cPickle.c"
      case 14: // $bb13
        var $67=$self_addr; //@line 5591 "cPickle.c"
        var $68=$67; //@line 5591 "cPickle.c"
        var $69=$name_addr; //@line 5591 "cPickle.c"
        var $70=_Py_FindMethod(_Unpickler_methods, $68, $69); //@line 5591 "cPickle.c"
        $0=$70; //@line 5591 "cPickle.c"
        __label__ = 15; break; //@line 5591 "cPickle.c"
      case 15: // $bb14
        var $71=$0; //@line 5559 "cPickle.c"
        $retval=$71; //@line 5559 "cPickle.c"
        var $retval15=$retval; //@line 5559 "cPickle.c"
        ;
        return $retval15; //@line 5559 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_setattr($self, $name, $value) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $name_addr;
        var $value_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $name_addr=$name;
        $value_addr=$value;
        var $1=$name_addr; //@line 5599 "cPickle.c"
        var $2=_strcmp($1, __str108); //@line 5599 "cPickle.c"
        var $3=($2)==0; //@line 5599 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 5599 "cPickle.c"
      case 1: // $bb
        var $4=$self_addr; //@line 5600 "cPickle.c"
        var $5=$4+40; //@line 5600 "cPickle.c"
        var $6=HEAP[$5]; //@line 5600 "cPickle.c"
        var $7=($6)!=0; //@line 5600 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 5600 "cPickle.c"
      case 2: // $bb1
        var $8=$self_addr; //@line 5600 "cPickle.c"
        var $9=$8+40; //@line 5600 "cPickle.c"
        var $10=HEAP[$9]; //@line 5600 "cPickle.c"
        var $11=$10; //@line 5600 "cPickle.c"
        var $12=HEAP[$11]; //@line 5600 "cPickle.c"
        var $13=($12) - 1; //@line 5600 "cPickle.c"
        var $14=$10; //@line 5600 "cPickle.c"
        HEAP[$14]=$13; //@line 5600 "cPickle.c"
        var $15=$10; //@line 5600 "cPickle.c"
        var $16=HEAP[$15]; //@line 5600 "cPickle.c"
        var $17=($16)==0; //@line 5600 "cPickle.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5600 "cPickle.c"
      case 3: // $bb2
        var $18=$self_addr; //@line 5600 "cPickle.c"
        var $19=$18+40; //@line 5600 "cPickle.c"
        var $20=HEAP[$19]; //@line 5600 "cPickle.c"
        var $21=$20+4; //@line 5600 "cPickle.c"
        var $22=HEAP[$21]; //@line 5600 "cPickle.c"
        var $23=$22+24; //@line 5600 "cPickle.c"
        var $24=HEAP[$23]; //@line 5600 "cPickle.c"
        var $25=$self_addr; //@line 5600 "cPickle.c"
        var $26=$25+40; //@line 5600 "cPickle.c"
        var $27=HEAP[$26]; //@line 5600 "cPickle.c"
        FUNCTION_TABLE[$24]($27); //@line 5600 "cPickle.c"
        __label__ = 4; break; //@line 5600 "cPickle.c"
      case 4: // $bb3
        var $28=$self_addr; //@line 5601 "cPickle.c"
        var $29=$28+40; //@line 5601 "cPickle.c"
        var $30=$value_addr; //@line 5601 "cPickle.c"
        HEAP[$29]=$30; //@line 5601 "cPickle.c"
        var $31=$value_addr; //@line 5602 "cPickle.c"
        var $32=($31)!=0; //@line 5602 "cPickle.c"
        if ($32) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5602 "cPickle.c"
      case 5: // $bb4
        var $33=$value_addr; //@line 5602 "cPickle.c"
        var $34=$33; //@line 5602 "cPickle.c"
        var $35=HEAP[$34]; //@line 5602 "cPickle.c"
        var $36=($35) + 1; //@line 5602 "cPickle.c"
        var $37=$value_addr; //@line 5602 "cPickle.c"
        var $38=$37; //@line 5602 "cPickle.c"
        HEAP[$38]=$36; //@line 5602 "cPickle.c"
        __label__ = 6; break; //@line 5602 "cPickle.c"
      case 6: // $bb5
        $0=0; //@line 5603 "cPickle.c"
        __label__ = 24; break; //@line 5603 "cPickle.c"
      case 7: // $bb6
        var $39=$name_addr; //@line 5606 "cPickle.c"
        var $40=_strcmp($39, __str109); //@line 5606 "cPickle.c"
        var $41=($40)==0; //@line 5606 "cPickle.c"
        if ($41) { __label__ = 8; break; } else { __label__ = 14; break; } //@line 5606 "cPickle.c"
      case 8: // $bb7
        var $42=$self_addr; //@line 5607 "cPickle.c"
        var $43=$42+76; //@line 5607 "cPickle.c"
        var $44=HEAP[$43]; //@line 5607 "cPickle.c"
        var $45=($44)!=0; //@line 5607 "cPickle.c"
        if ($45) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 5607 "cPickle.c"
      case 9: // $bb8
        var $46=$self_addr; //@line 5607 "cPickle.c"
        var $47=$46+76; //@line 5607 "cPickle.c"
        var $48=HEAP[$47]; //@line 5607 "cPickle.c"
        var $49=$48; //@line 5607 "cPickle.c"
        var $50=HEAP[$49]; //@line 5607 "cPickle.c"
        var $51=($50) - 1; //@line 5607 "cPickle.c"
        var $52=$48; //@line 5607 "cPickle.c"
        HEAP[$52]=$51; //@line 5607 "cPickle.c"
        var $53=$48; //@line 5607 "cPickle.c"
        var $54=HEAP[$53]; //@line 5607 "cPickle.c"
        var $55=($54)==0; //@line 5607 "cPickle.c"
        if ($55) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5607 "cPickle.c"
      case 10: // $bb9
        var $56=$self_addr; //@line 5607 "cPickle.c"
        var $57=$56+76; //@line 5607 "cPickle.c"
        var $58=HEAP[$57]; //@line 5607 "cPickle.c"
        var $59=$58+4; //@line 5607 "cPickle.c"
        var $60=HEAP[$59]; //@line 5607 "cPickle.c"
        var $61=$60+24; //@line 5607 "cPickle.c"
        var $62=HEAP[$61]; //@line 5607 "cPickle.c"
        var $63=$self_addr; //@line 5607 "cPickle.c"
        var $64=$63+76; //@line 5607 "cPickle.c"
        var $65=HEAP[$64]; //@line 5607 "cPickle.c"
        FUNCTION_TABLE[$62]($65); //@line 5607 "cPickle.c"
        __label__ = 11; break; //@line 5607 "cPickle.c"
      case 11: // $bb10
        var $66=$self_addr; //@line 5608 "cPickle.c"
        var $67=$66+76; //@line 5608 "cPickle.c"
        var $68=$value_addr; //@line 5608 "cPickle.c"
        HEAP[$67]=$68; //@line 5608 "cPickle.c"
        var $69=$value_addr; //@line 5609 "cPickle.c"
        var $70=($69)!=0; //@line 5609 "cPickle.c"
        if ($70) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 5609 "cPickle.c"
      case 12: // $bb11
        var $71=$value_addr; //@line 5609 "cPickle.c"
        var $72=$71; //@line 5609 "cPickle.c"
        var $73=HEAP[$72]; //@line 5609 "cPickle.c"
        var $74=($73) + 1; //@line 5609 "cPickle.c"
        var $75=$value_addr; //@line 5609 "cPickle.c"
        var $76=$75; //@line 5609 "cPickle.c"
        HEAP[$76]=$74; //@line 5609 "cPickle.c"
        __label__ = 13; break; //@line 5609 "cPickle.c"
      case 13: // $bb12
        $0=0; //@line 5610 "cPickle.c"
        __label__ = 24; break; //@line 5610 "cPickle.c"
      case 14: // $bb13
        var $77=$value_addr; //@line 5613 "cPickle.c"
        var $78=($77)==0; //@line 5613 "cPickle.c"
        if ($78) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 5613 "cPickle.c"
      case 15: // $bb14
        var $79=HEAP[_PyExc_TypeError]; //@line 5614 "cPickle.c"
        _PyErr_SetString($79, __str69); //@line 5614 "cPickle.c"
        $0=-1; //@line 5616 "cPickle.c"
        __label__ = 24; break; //@line 5616 "cPickle.c"
      case 16: // $bb15
        var $80=$name_addr; //@line 5619 "cPickle.c"
        var $81=_strcmp($80, __str70); //@line 5619 "cPickle.c"
        var $82=($81)==0; //@line 5619 "cPickle.c"
        if ($82) { __label__ = 17; break; } else { __label__ = 23; break; } //@line 5619 "cPickle.c"
      case 17: // $bb16
        var $83=$value_addr; //@line 5620 "cPickle.c"
        var $84=$83+4; //@line 5620 "cPickle.c"
        var $85=HEAP[$84]; //@line 5620 "cPickle.c"
        var $86=$85+84; //@line 5620 "cPickle.c"
        var $87=HEAP[$86]; //@line 5620 "cPickle.c"
        var $88=($87) & 536870912; //@line 5620 "cPickle.c"
        var $89=($88)==0; //@line 5620 "cPickle.c"
        if ($89) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 5620 "cPickle.c"
      case 18: // $bb17
        var $90=HEAP[_PyExc_TypeError]; //@line 5621 "cPickle.c"
        _PyErr_SetString($90, __str71); //@line 5621 "cPickle.c"
        $0=-1; //@line 5623 "cPickle.c"
        __label__ = 24; break; //@line 5623 "cPickle.c"
      case 19: // $bb18
        var $91=$self_addr; //@line 5625 "cPickle.c"
        var $92=$91+24; //@line 5625 "cPickle.c"
        var $93=HEAP[$92]; //@line 5625 "cPickle.c"
        var $94=($93)!=0; //@line 5625 "cPickle.c"
        if ($94) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 5625 "cPickle.c"
      case 20: // $bb19
        var $95=$self_addr; //@line 5625 "cPickle.c"
        var $96=$95+24; //@line 5625 "cPickle.c"
        var $97=HEAP[$96]; //@line 5625 "cPickle.c"
        var $98=$97; //@line 5625 "cPickle.c"
        var $99=HEAP[$98]; //@line 5625 "cPickle.c"
        var $100=($99) - 1; //@line 5625 "cPickle.c"
        var $101=$97; //@line 5625 "cPickle.c"
        HEAP[$101]=$100; //@line 5625 "cPickle.c"
        var $102=$97; //@line 5625 "cPickle.c"
        var $103=HEAP[$102]; //@line 5625 "cPickle.c"
        var $104=($103)==0; //@line 5625 "cPickle.c"
        if ($104) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 5625 "cPickle.c"
      case 21: // $bb20
        var $105=$self_addr; //@line 5625 "cPickle.c"
        var $106=$105+24; //@line 5625 "cPickle.c"
        var $107=HEAP[$106]; //@line 5625 "cPickle.c"
        var $108=$107+4; //@line 5625 "cPickle.c"
        var $109=HEAP[$108]; //@line 5625 "cPickle.c"
        var $110=$109+24; //@line 5625 "cPickle.c"
        var $111=HEAP[$110]; //@line 5625 "cPickle.c"
        var $112=$self_addr; //@line 5625 "cPickle.c"
        var $113=$112+24; //@line 5625 "cPickle.c"
        var $114=HEAP[$113]; //@line 5625 "cPickle.c"
        FUNCTION_TABLE[$111]($114); //@line 5625 "cPickle.c"
        __label__ = 22; break; //@line 5625 "cPickle.c"
      case 22: // $bb21
        var $115=$self_addr; //@line 5626 "cPickle.c"
        var $116=$115+24; //@line 5626 "cPickle.c"
        var $117=$value_addr; //@line 5626 "cPickle.c"
        HEAP[$116]=$117; //@line 5626 "cPickle.c"
        var $118=$value_addr; //@line 5627 "cPickle.c"
        var $119=$118; //@line 5627 "cPickle.c"
        var $120=HEAP[$119]; //@line 5627 "cPickle.c"
        var $121=($120) + 1; //@line 5627 "cPickle.c"
        var $122=$value_addr; //@line 5627 "cPickle.c"
        var $123=$122; //@line 5627 "cPickle.c"
        HEAP[$123]=$121; //@line 5627 "cPickle.c"
        $0=0; //@line 5628 "cPickle.c"
        __label__ = 24; break; //@line 5628 "cPickle.c"
      case 23: // $bb22
        var $124=HEAP[_PyExc_AttributeError]; //@line 5631 "cPickle.c"
        var $125=$name_addr; //@line 5631 "cPickle.c"
        _PyErr_SetString($124, $125); //@line 5631 "cPickle.c"
        $0=-1; //@line 5632 "cPickle.c"
        __label__ = 24; break; //@line 5632 "cPickle.c"
      case 24: // $bb23
        var $126=$0; //@line 5603 "cPickle.c"
        $retval=$126; //@line 5603 "cPickle.c"
        var $retval24=$retval; //@line 5603 "cPickle.c"
        ;
        return $retval24; //@line 5603 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cpm_dump($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $ob=__stackBase__;
        var $file=__stackBase__+4;
        var $res;
        var $pickler;
        var $proto=__stackBase__+8;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        $res=0; //@line 5644 "cPickle.c"
        $pickler=0; //@line 5645 "cPickle.c"
        HEAP[$proto]=0; //@line 5646 "cPickle.c"
        var $1=$args_addr; //@line 5648 "cPickle.c"
        var $2=$kwds_addr; //@line 5648 "cPickle.c"
        var $3=_PyArg_ParseTupleAndKeywords($1, $2, __str111, _kwlist_16354, $ob, $file, $proto); //@line 5648 "cPickle.c"
        var $4=($3)==0; //@line 5648 "cPickle.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 5648 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$proto]; //@line 5652 "cPickle.c"
        var $6=HEAP[$file]; //@line 5652 "cPickle.c"
        var $7=_newPicklerobject($6, $5); //@line 5652 "cPickle.c"
        $pickler=$7; //@line 5652 "cPickle.c"
        var $8=$pickler; //@line 5652 "cPickle.c"
        var $9=($8)==0; //@line 5652 "cPickle.c"
        if ($9) { __label__ = 7; break; } else { __label__ = 2; break; } //@line 5652 "cPickle.c"
      case 2: // $bb1
        var $10=HEAP[$ob]; //@line 5655 "cPickle.c"
        var $11=$pickler; //@line 5655 "cPickle.c"
        var $12=_dump($11, $10); //@line 5655 "cPickle.c"
        var $13=($12) < 0; //@line 5655 "cPickle.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 5655 "cPickle.c"
      case 3: // $bb2
        var $14=HEAP[__Py_NoneStruct]; //@line 5658 "cPickle.c"
        var $15=($14) + 1; //@line 5658 "cPickle.c"
        HEAP[__Py_NoneStruct]=$15; //@line 5658 "cPickle.c"
        $res=__Py_NoneStruct; //@line 5659 "cPickle.c"
        __label__ = 4; break; //@line 5661 "cPickle.c"
      case 4: // $finally
        var $_pr=$pickler;
        var $16=($_pr)!=0; //@line 5662 "cPickle.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 5662 "cPickle.c"
      case 5: // $bb3
        var $17=$pickler; //@line 5662 "cPickle.c"
        var $18=$17; //@line 5662 "cPickle.c"
        var $19=$18; //@line 5662 "cPickle.c"
        var $20=HEAP[$19]; //@line 5662 "cPickle.c"
        var $21=($20) - 1; //@line 5662 "cPickle.c"
        var $22=$18; //@line 5662 "cPickle.c"
        HEAP[$22]=$21; //@line 5662 "cPickle.c"
        var $23=$18; //@line 5662 "cPickle.c"
        var $24=HEAP[$23]; //@line 5662 "cPickle.c"
        var $25=($24)==0; //@line 5662 "cPickle.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5662 "cPickle.c"
      case 6: // $bb4
        var $26=$pickler; //@line 5662 "cPickle.c"
        var $27=$26; //@line 5662 "cPickle.c"
        var $28=$27+4; //@line 5662 "cPickle.c"
        var $29=HEAP[$28]; //@line 5662 "cPickle.c"
        var $30=$29+24; //@line 5662 "cPickle.c"
        var $31=HEAP[$30]; //@line 5662 "cPickle.c"
        var $32=$pickler; //@line 5662 "cPickle.c"
        var $33=$32; //@line 5662 "cPickle.c"
        FUNCTION_TABLE[$31]($33); //@line 5662 "cPickle.c"
        __label__ = 7; break; //@line 5662 "cPickle.c"
      case 7: // $bb5
        var $34=$res; //@line 5664 "cPickle.c"
        $0=$34; //@line 5664 "cPickle.c"
        var $35=$0; //@line 5664 "cPickle.c"
        $retval=$35; //@line 5664 "cPickle.c"
        var $retval6=$retval; //@line 5664 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 5664 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cpm_dumps($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $ob=__stackBase__;
        var $file;
        var $res;
        var $pickler;
        var $proto=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        $file=0; //@line 5673 "cPickle.c"
        $res=0; //@line 5673 "cPickle.c"
        $pickler=0; //@line 5674 "cPickle.c"
        HEAP[$proto]=0; //@line 5675 "cPickle.c"
        var $1=$args_addr; //@line 5677 "cPickle.c"
        var $2=$kwds_addr; //@line 5677 "cPickle.c"
        var $3=_PyArg_ParseTupleAndKeywords($1, $2, __str113, _kwlist_16391, $ob, $proto); //@line 5677 "cPickle.c"
        var $4=($3)==0; //@line 5677 "cPickle.c"
        if ($4) { __label__ = 5; break; } else { __label__ = 1; break; } //@line 5677 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[_PycStringIO]; //@line 5681 "cPickle.c"
        var $6=$5+16; //@line 5681 "cPickle.c"
        var $7=HEAP[$6]; //@line 5681 "cPickle.c"
        var $8=FUNCTION_TABLE[$7](128); //@line 5681 "cPickle.c"
        $file=$8; //@line 5681 "cPickle.c"
        var $9=$file; //@line 5681 "cPickle.c"
        var $10=($9)==0; //@line 5681 "cPickle.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 2; break; } //@line 5681 "cPickle.c"
      case 2: // $bb1
        var $11=HEAP[$proto]; //@line 5684 "cPickle.c"
        var $12=$file; //@line 5684 "cPickle.c"
        var $13=_newPicklerobject($12, $11); //@line 5684 "cPickle.c"
        $pickler=$13; //@line 5684 "cPickle.c"
        var $14=$pickler; //@line 5684 "cPickle.c"
        var $15=($14)==0; //@line 5684 "cPickle.c"
        if ($15) { __label__ = 8; break; } else { __label__ = 3; break; } //@line 5684 "cPickle.c"
      case 3: // $bb2
        var $16=HEAP[$ob]; //@line 5687 "cPickle.c"
        var $17=$pickler; //@line 5687 "cPickle.c"
        var $18=_dump($17, $16); //@line 5687 "cPickle.c"
        var $19=($18) < 0; //@line 5687 "cPickle.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 5687 "cPickle.c"
      case 4: // $bb3
        var $20=HEAP[_PycStringIO]; //@line 5690 "cPickle.c"
        var $21=$20+12; //@line 5690 "cPickle.c"
        var $22=HEAP[$21]; //@line 5690 "cPickle.c"
        var $23=$file; //@line 5690 "cPickle.c"
        var $24=FUNCTION_TABLE[$22]($23); //@line 5690 "cPickle.c"
        $res=$24; //@line 5690 "cPickle.c"
        __label__ = 5; break; //@line 5692 "cPickle.c"
      case 5: // $finally
        var $_pr=$pickler;
        var $25=($_pr)!=0; //@line 5693 "cPickle.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 5693 "cPickle.c"
      case 6: // $bb4
        var $26=$pickler; //@line 5693 "cPickle.c"
        var $27=$26; //@line 5693 "cPickle.c"
        var $28=$27; //@line 5693 "cPickle.c"
        var $29=HEAP[$28]; //@line 5693 "cPickle.c"
        var $30=($29) - 1; //@line 5693 "cPickle.c"
        var $31=$27; //@line 5693 "cPickle.c"
        HEAP[$31]=$30; //@line 5693 "cPickle.c"
        var $32=$27; //@line 5693 "cPickle.c"
        var $33=HEAP[$32]; //@line 5693 "cPickle.c"
        var $34=($33)==0; //@line 5693 "cPickle.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5693 "cPickle.c"
      case 7: // $bb5
        var $35=$pickler; //@line 5693 "cPickle.c"
        var $36=$35; //@line 5693 "cPickle.c"
        var $37=$36+4; //@line 5693 "cPickle.c"
        var $38=HEAP[$37]; //@line 5693 "cPickle.c"
        var $39=$38+24; //@line 5693 "cPickle.c"
        var $40=HEAP[$39]; //@line 5693 "cPickle.c"
        var $41=$pickler; //@line 5693 "cPickle.c"
        var $42=$41; //@line 5693 "cPickle.c"
        FUNCTION_TABLE[$40]($42); //@line 5693 "cPickle.c"
        __label__ = 8; break; //@line 5693 "cPickle.c"
      case 8: // $bb6
        var $43=$file; //@line 5694 "cPickle.c"
        var $44=($43)!=0; //@line 5694 "cPickle.c"
        if ($44) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 5694 "cPickle.c"
      case 9: // $bb7
        var $45=$file; //@line 5694 "cPickle.c"
        var $46=$45; //@line 5694 "cPickle.c"
        var $47=HEAP[$46]; //@line 5694 "cPickle.c"
        var $48=($47) - 1; //@line 5694 "cPickle.c"
        var $49=$file; //@line 5694 "cPickle.c"
        var $50=$49; //@line 5694 "cPickle.c"
        HEAP[$50]=$48; //@line 5694 "cPickle.c"
        var $51=$file; //@line 5694 "cPickle.c"
        var $52=$51; //@line 5694 "cPickle.c"
        var $53=HEAP[$52]; //@line 5694 "cPickle.c"
        var $54=($53)==0; //@line 5694 "cPickle.c"
        if ($54) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5694 "cPickle.c"
      case 10: // $bb8
        var $55=$file; //@line 5694 "cPickle.c"
        var $56=$55+4; //@line 5694 "cPickle.c"
        var $57=HEAP[$56]; //@line 5694 "cPickle.c"
        var $58=$57+24; //@line 5694 "cPickle.c"
        var $59=HEAP[$58]; //@line 5694 "cPickle.c"
        var $60=$file; //@line 5694 "cPickle.c"
        FUNCTION_TABLE[$59]($60); //@line 5694 "cPickle.c"
        __label__ = 11; break; //@line 5694 "cPickle.c"
      case 11: // $bb9
        var $61=$res; //@line 5696 "cPickle.c"
        $0=$61; //@line 5696 "cPickle.c"
        var $62=$0; //@line 5696 "cPickle.c"
        $retval=$62; //@line 5696 "cPickle.c"
        var $retval10=$retval; //@line 5696 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 5696 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cpm_load($self, $ob) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $ob_addr;
        var $retval;
        var $0;
        var $unpickler;
        var $res;
        $self_addr=$self;
        $ob_addr=$ob;
        $unpickler=0; //@line 5704 "cPickle.c"
        $res=0; //@line 5705 "cPickle.c"
        var $1=$ob_addr; //@line 5707 "cPickle.c"
        var $2=_newUnpicklerobject($1); //@line 5707 "cPickle.c"
        $unpickler=$2; //@line 5707 "cPickle.c"
        var $3=$unpickler; //@line 5707 "cPickle.c"
        var $4=($3)==0; //@line 5707 "cPickle.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 5707 "cPickle.c"
      case 1: // $finally
        var $5=$unpickler; //@line 5710 "cPickle.c"
        var $6=_load($5); //@line 5710 "cPickle.c"
        $res=$6; //@line 5710 "cPickle.c"
        var $_pr=$unpickler;
        var $7=($_pr)!=0; //@line 5713 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 5713 "cPickle.c"
      case 2: // $bb1
        var $8=$unpickler; //@line 5713 "cPickle.c"
        var $9=$8; //@line 5713 "cPickle.c"
        var $10=$9; //@line 5713 "cPickle.c"
        var $11=HEAP[$10]; //@line 5713 "cPickle.c"
        var $12=($11) - 1; //@line 5713 "cPickle.c"
        var $13=$9; //@line 5713 "cPickle.c"
        HEAP[$13]=$12; //@line 5713 "cPickle.c"
        var $14=$9; //@line 5713 "cPickle.c"
        var $15=HEAP[$14]; //@line 5713 "cPickle.c"
        var $16=($15)==0; //@line 5713 "cPickle.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5713 "cPickle.c"
      case 3: // $bb2
        var $17=$unpickler; //@line 5713 "cPickle.c"
        var $18=$17; //@line 5713 "cPickle.c"
        var $19=$18+4; //@line 5713 "cPickle.c"
        var $20=HEAP[$19]; //@line 5713 "cPickle.c"
        var $21=$20+24; //@line 5713 "cPickle.c"
        var $22=HEAP[$21]; //@line 5713 "cPickle.c"
        var $23=$unpickler; //@line 5713 "cPickle.c"
        var $24=$23; //@line 5713 "cPickle.c"
        FUNCTION_TABLE[$22]($24); //@line 5713 "cPickle.c"
        __label__ = 4; break; //@line 5713 "cPickle.c"
      case 4: // $bb3
        var $25=$res; //@line 5715 "cPickle.c"
        $0=$25; //@line 5715 "cPickle.c"
        var $26=$0; //@line 5715 "cPickle.c"
        $retval=$26; //@line 5715 "cPickle.c"
        var $retval4=$retval; //@line 5715 "cPickle.c"
        ;
        return $retval4; //@line 5715 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cpm_loads($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $ob=__stackBase__;
        var $file;
        var $res;
        var $unpickler;
        $self_addr=$self;
        $args_addr=$args;
        $file=0; //@line 5723 "cPickle.c"
        $res=0; //@line 5723 "cPickle.c"
        $unpickler=0; //@line 5724 "cPickle.c"
        var $1=$args_addr; //@line 5726 "cPickle.c"
        var $2=_PyArg_ParseTuple($1, __str114, $ob); //@line 5726 "cPickle.c"
        var $3=($2)==0; //@line 5726 "cPickle.c"
        if ($3) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 5726 "cPickle.c"
      case 1: // $bb
        var $4=HEAP[_PycStringIO]; //@line 5729 "cPickle.c"
        var $5=$4+20; //@line 5729 "cPickle.c"
        var $6=HEAP[$5]; //@line 5729 "cPickle.c"
        var $7=HEAP[$ob]; //@line 5729 "cPickle.c"
        var $8=FUNCTION_TABLE[$6]($7); //@line 5729 "cPickle.c"
        $file=$8; //@line 5729 "cPickle.c"
        var $9=$file; //@line 5729 "cPickle.c"
        var $10=($9)==0; //@line 5729 "cPickle.c"
        if ($10) { __label__ = 7; break; } else { __label__ = 2; break; } //@line 5729 "cPickle.c"
      case 2: // $bb1
        var $11=$file; //@line 5732 "cPickle.c"
        var $12=_newUnpicklerobject($11); //@line 5732 "cPickle.c"
        $unpickler=$12; //@line 5732 "cPickle.c"
        var $13=$unpickler; //@line 5732 "cPickle.c"
        var $14=($13)==0; //@line 5732 "cPickle.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 5732 "cPickle.c"
      case 3: // $bb2
        var $15=$unpickler; //@line 5735 "cPickle.c"
        var $16=_load($15); //@line 5735 "cPickle.c"
        $res=$16; //@line 5735 "cPickle.c"
        __label__ = 4; break; //@line 5737 "cPickle.c"
      case 4: // $finally
        var $_pr=$file;
        var $17=($_pr)!=0; //@line 5738 "cPickle.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 5738 "cPickle.c"
      case 5: // $bb3
        var $18=$file; //@line 5738 "cPickle.c"
        var $19=$18; //@line 5738 "cPickle.c"
        var $20=HEAP[$19]; //@line 5738 "cPickle.c"
        var $21=($20) - 1; //@line 5738 "cPickle.c"
        var $22=$file; //@line 5738 "cPickle.c"
        var $23=$22; //@line 5738 "cPickle.c"
        HEAP[$23]=$21; //@line 5738 "cPickle.c"
        var $24=$file; //@line 5738 "cPickle.c"
        var $25=$24; //@line 5738 "cPickle.c"
        var $26=HEAP[$25]; //@line 5738 "cPickle.c"
        var $27=($26)==0; //@line 5738 "cPickle.c"
        if ($27) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5738 "cPickle.c"
      case 6: // $bb4
        var $28=$file; //@line 5738 "cPickle.c"
        var $29=$28+4; //@line 5738 "cPickle.c"
        var $30=HEAP[$29]; //@line 5738 "cPickle.c"
        var $31=$30+24; //@line 5738 "cPickle.c"
        var $32=HEAP[$31]; //@line 5738 "cPickle.c"
        var $33=$file; //@line 5738 "cPickle.c"
        FUNCTION_TABLE[$32]($33); //@line 5738 "cPickle.c"
        __label__ = 7; break; //@line 5738 "cPickle.c"
      case 7: // $bb5
        var $34=$unpickler; //@line 5739 "cPickle.c"
        var $35=($34)!=0; //@line 5739 "cPickle.c"
        if ($35) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 5739 "cPickle.c"
      case 8: // $bb6
        var $36=$unpickler; //@line 5739 "cPickle.c"
        var $37=$36; //@line 5739 "cPickle.c"
        var $38=$37; //@line 5739 "cPickle.c"
        var $39=HEAP[$38]; //@line 5739 "cPickle.c"
        var $40=($39) - 1; //@line 5739 "cPickle.c"
        var $41=$37; //@line 5739 "cPickle.c"
        HEAP[$41]=$40; //@line 5739 "cPickle.c"
        var $42=$37; //@line 5739 "cPickle.c"
        var $43=HEAP[$42]; //@line 5739 "cPickle.c"
        var $44=($43)==0; //@line 5739 "cPickle.c"
        if ($44) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 5739 "cPickle.c"
      case 9: // $bb7
        var $45=$unpickler; //@line 5739 "cPickle.c"
        var $46=$45; //@line 5739 "cPickle.c"
        var $47=$46+4; //@line 5739 "cPickle.c"
        var $48=HEAP[$47]; //@line 5739 "cPickle.c"
        var $49=$48+24; //@line 5739 "cPickle.c"
        var $50=HEAP[$49]; //@line 5739 "cPickle.c"
        var $51=$unpickler; //@line 5739 "cPickle.c"
        var $52=$51; //@line 5739 "cPickle.c"
        FUNCTION_TABLE[$50]($52); //@line 5739 "cPickle.c"
        __label__ = 10; break; //@line 5739 "cPickle.c"
      case 10: // $bb8
        var $53=$res; //@line 5741 "cPickle.c"
        $0=$53; //@line 5741 "cPickle.c"
        var $54=$0; //@line 5741 "cPickle.c"
        $retval=$54; //@line 5741 "cPickle.c"
        var $retval9=$retval; //@line 5741 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 5741 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initcPickle() {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $module_dict_addr_i;
        var $retval_i;
        var $0;
        var $copyreg_i;
        var $t_i;
        var $r_i;
        var $m;
        var $d;
        var $di;
        var $v=__stackBase__;
        var $k=__stackBase__+4;
        var $i=__stackBase__+8;
        var $rev;
        var $format_version;
        var $compatible_formats;
        $rev=__str156; //@line 5968 "cPickle.c"
        HEAP[_Picklertype+4]=_PyType_Type; //@line 5972 "cPickle.c"
        HEAP[_Unpicklertype+4]=_PyType_Type; //@line 5973 "cPickle.c"
        HEAP[_PdataType+4]=_PyType_Type; //@line 5974 "cPickle.c"
        var $1=_PyDict_New(); //@line 5979 "cPickle.c"
        $di=$1; //@line 5979 "cPickle.c"
        var $2=$di; //@line 5980 "cPickle.c"
        var $3=($2)==0; //@line 5980 "cPickle.c"
        if ($3) { __label__ = 108; break; } else { __label__ = 1; break; } //@line 5980 "cPickle.c"
      case 1: // $bb
        var $4=$di; //@line 5981 "cPickle.c"
        $module_dict_addr_i=$4;
        var $5=_PyType_Ready(_Unpicklertype); //@line 5833 "cPickle.c"
        var $6=($5) < 0; //@line 5833 "cPickle.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5833 "cPickle.c"
      case 2: // $bb_i
        $0=-1; //@line 5834 "cPickle.c"
        __label__ = 89; break; //@line 5834 "cPickle.c"
      case 3: // $bb1_i
        var $7=_PyType_Ready(_Picklertype); //@line 5835 "cPickle.c"
        var $8=($7) < 0; //@line 5835 "cPickle.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 5835 "cPickle.c"
      case 4: // $bb2_i
        $0=-1; //@line 5836 "cPickle.c"
        __label__ = 89; break; //@line 5836 "cPickle.c"
      case 5: // $bb3_i
        var $9=_PyString_InternFromString(__str126); //@line 5838 "cPickle.c"
        HEAP[___class___str]=$9; //@line 5838 "cPickle.c"
        var $10=HEAP[___class___str]; //@line 5838 "cPickle.c"
        var $11=($10)==0; //@line 5838 "cPickle.c"
        if ($11) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5838 "cPickle.c"
      case 6: // $bb4_i
        $0=-1; //@line 5838 "cPickle.c"
        __label__ = 89; break; //@line 5838 "cPickle.c"
      case 7: // $bb5_i
        var $12=_PyString_InternFromString(__str127); //@line 5839 "cPickle.c"
        HEAP[___getinitargs___str]=$12; //@line 5839 "cPickle.c"
        var $13=HEAP[___getinitargs___str]; //@line 5839 "cPickle.c"
        var $14=($13)==0; //@line 5839 "cPickle.c"
        if ($14) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5839 "cPickle.c"
      case 8: // $bb6_i
        $0=-1; //@line 5839 "cPickle.c"
        __label__ = 89; break; //@line 5839 "cPickle.c"
      case 9: // $bb7_i
        var $15=_PyString_InternFromString(__str128); //@line 5840 "cPickle.c"
        HEAP[___dict___str]=$15; //@line 5840 "cPickle.c"
        var $16=HEAP[___dict___str]; //@line 5840 "cPickle.c"
        var $17=($16)==0; //@line 5840 "cPickle.c"
        if ($17) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5840 "cPickle.c"
      case 10: // $bb8_i
        $0=-1; //@line 5840 "cPickle.c"
        __label__ = 89; break; //@line 5840 "cPickle.c"
      case 11: // $bb9_i
        var $18=_PyString_InternFromString(__str129); //@line 5841 "cPickle.c"
        HEAP[___getstate___str]=$18; //@line 5841 "cPickle.c"
        var $19=HEAP[___getstate___str]; //@line 5841 "cPickle.c"
        var $20=($19)==0; //@line 5841 "cPickle.c"
        if ($20) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 5841 "cPickle.c"
      case 12: // $bb10_i
        $0=-1; //@line 5841 "cPickle.c"
        __label__ = 89; break; //@line 5841 "cPickle.c"
      case 13: // $bb11_i
        var $21=_PyString_InternFromString(__str130); //@line 5842 "cPickle.c"
        HEAP[___setstate___str]=$21; //@line 5842 "cPickle.c"
        var $22=HEAP[___setstate___str]; //@line 5842 "cPickle.c"
        var $23=($22)==0; //@line 5842 "cPickle.c"
        if ($23) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5842 "cPickle.c"
      case 14: // $bb12_i
        $0=-1; //@line 5842 "cPickle.c"
        __label__ = 89; break; //@line 5842 "cPickle.c"
      case 15: // $bb13_i
        var $24=_PyString_InternFromString(__str131); //@line 5843 "cPickle.c"
        HEAP[___name___str]=$24; //@line 5843 "cPickle.c"
        var $25=HEAP[___name___str]; //@line 5843 "cPickle.c"
        var $26=($25)==0; //@line 5843 "cPickle.c"
        if ($26) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 5843 "cPickle.c"
      case 16: // $bb14_i
        $0=-1; //@line 5843 "cPickle.c"
        __label__ = 89; break; //@line 5843 "cPickle.c"
      case 17: // $bb15_i
        var $27=_PyString_InternFromString(__str132); //@line 5844 "cPickle.c"
        HEAP[___main___str]=$27; //@line 5844 "cPickle.c"
        var $28=HEAP[___main___str]; //@line 5844 "cPickle.c"
        var $29=($28)==0; //@line 5844 "cPickle.c"
        if ($29) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 5844 "cPickle.c"
      case 18: // $bb16_i
        $0=-1; //@line 5844 "cPickle.c"
        __label__ = 89; break; //@line 5844 "cPickle.c"
      case 19: // $bb17_i
        var $30=_PyString_InternFromString(__str133); //@line 5845 "cPickle.c"
        HEAP[___reduce___str]=$30; //@line 5845 "cPickle.c"
        var $31=HEAP[___reduce___str]; //@line 5845 "cPickle.c"
        var $32=($31)==0; //@line 5845 "cPickle.c"
        if ($32) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5845 "cPickle.c"
      case 20: // $bb18_i
        $0=-1; //@line 5845 "cPickle.c"
        __label__ = 89; break; //@line 5845 "cPickle.c"
      case 21: // $bb19_i
        var $33=_PyString_InternFromString(__str134); //@line 5846 "cPickle.c"
        HEAP[___reduce_ex___str]=$33; //@line 5846 "cPickle.c"
        var $34=HEAP[___reduce_ex___str]; //@line 5846 "cPickle.c"
        var $35=($34)==0; //@line 5846 "cPickle.c"
        if ($35) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 5846 "cPickle.c"
      case 22: // $bb20_i
        $0=-1; //@line 5846 "cPickle.c"
        __label__ = 89; break; //@line 5846 "cPickle.c"
      case 23: // $bb21_i
        var $36=_PyString_InternFromString(__str135); //@line 5847 "cPickle.c"
        HEAP[_write_str]=$36; //@line 5847 "cPickle.c"
        var $37=HEAP[_write_str]; //@line 5847 "cPickle.c"
        var $38=($37)==0; //@line 5847 "cPickle.c"
        if ($38) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 5847 "cPickle.c"
      case 24: // $bb22_i
        $0=-1; //@line 5847 "cPickle.c"
        __label__ = 89; break; //@line 5847 "cPickle.c"
      case 25: // $bb23_i
        var $39=_PyString_InternFromString(__str136); //@line 5848 "cPickle.c"
        HEAP[_append_str]=$39; //@line 5848 "cPickle.c"
        var $40=HEAP[_append_str]; //@line 5848 "cPickle.c"
        var $41=($40)==0; //@line 5848 "cPickle.c"
        if ($41) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 5848 "cPickle.c"
      case 26: // $bb24_i
        $0=-1; //@line 5848 "cPickle.c"
        __label__ = 89; break; //@line 5848 "cPickle.c"
      case 27: // $bb25_i
        var $42=_PyString_InternFromString(__str137); //@line 5849 "cPickle.c"
        HEAP[_read_str]=$42; //@line 5849 "cPickle.c"
        var $43=HEAP[_read_str]; //@line 5849 "cPickle.c"
        var $44=($43)==0; //@line 5849 "cPickle.c"
        if ($44) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 5849 "cPickle.c"
      case 28: // $bb26_i
        $0=-1; //@line 5849 "cPickle.c"
        __label__ = 89; break; //@line 5849 "cPickle.c"
      case 29: // $bb27_i
        var $45=_PyString_InternFromString(__str138); //@line 5850 "cPickle.c"
        HEAP[_readline_str]=$45; //@line 5850 "cPickle.c"
        var $46=HEAP[_readline_str]; //@line 5850 "cPickle.c"
        var $47=($46)==0; //@line 5850 "cPickle.c"
        if ($47) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 5850 "cPickle.c"
      case 30: // $bb28_i
        $0=-1; //@line 5850 "cPickle.c"
        __label__ = 89; break; //@line 5850 "cPickle.c"
      case 31: // $bb29_i
        var $48=_PyString_InternFromString(__str139); //@line 5851 "cPickle.c"
        HEAP[_dispatch_table_str]=$48; //@line 5851 "cPickle.c"
        var $49=HEAP[_dispatch_table_str]; //@line 5851 "cPickle.c"
        var $50=($49)==0; //@line 5851 "cPickle.c"
        if ($50) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 5851 "cPickle.c"
      case 32: // $bb30_i
        $0=-1; //@line 5851 "cPickle.c"
        __label__ = 89; break; //@line 5851 "cPickle.c"
      case 33: // $bb31_i
        var $51=_PyImport_ImportModule(__str63); //@line 5853 "cPickle.c"
        $copyreg_i=$51; //@line 5853 "cPickle.c"
        var $52=$copyreg_i; //@line 5853 "cPickle.c"
        var $53=($52)==0; //@line 5853 "cPickle.c"
        if ($53) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 5853 "cPickle.c"
      case 34: // $bb32_i
        $0=-1; //@line 5854 "cPickle.c"
        __label__ = 89; break; //@line 5854 "cPickle.c"
      case 35: // $bb33_i
        var $54=HEAP[_dispatch_table_str]; //@line 5858 "cPickle.c"
        var $55=$copyreg_i; //@line 5858 "cPickle.c"
        var $56=_PyObject_GetAttr($55, $54); //@line 5858 "cPickle.c"
        HEAP[_dispatch_table]=$56; //@line 5858 "cPickle.c"
        var $57=HEAP[_dispatch_table]; //@line 5859 "cPickle.c"
        var $58=($57)==0; //@line 5859 "cPickle.c"
        if ($58) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 5859 "cPickle.c"
      case 36: // $bb34_i
        $0=-1; //@line 5859 "cPickle.c"
        __label__ = 89; break; //@line 5859 "cPickle.c"
      case 37: // $bb35_i
        var $59=$copyreg_i; //@line 5861 "cPickle.c"
        var $60=_PyObject_GetAttrString($59, __str140); //@line 5861 "cPickle.c"
        HEAP[_extension_registry]=$60; //@line 5861 "cPickle.c"
        var $61=HEAP[_extension_registry]; //@line 5863 "cPickle.c"
        var $62=($61)==0; //@line 5863 "cPickle.c"
        if ($62) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 5863 "cPickle.c"
      case 38: // $bb36_i
        $0=-1; //@line 5863 "cPickle.c"
        __label__ = 89; break; //@line 5863 "cPickle.c"
      case 39: // $bb37_i
        var $63=$copyreg_i; //@line 5865 "cPickle.c"
        var $64=_PyObject_GetAttrString($63, __str141); //@line 5865 "cPickle.c"
        HEAP[_inverted_registry]=$64; //@line 5865 "cPickle.c"
        var $65=HEAP[_inverted_registry]; //@line 5867 "cPickle.c"
        var $66=($65)==0; //@line 5867 "cPickle.c"
        if ($66) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 5867 "cPickle.c"
      case 40: // $bb38_i
        $0=-1; //@line 5867 "cPickle.c"
        __label__ = 89; break; //@line 5867 "cPickle.c"
      case 41: // $bb39_i
        var $67=$copyreg_i; //@line 5869 "cPickle.c"
        var $68=_PyObject_GetAttrString($67, __str142); //@line 5869 "cPickle.c"
        HEAP[_extension_cache]=$68; //@line 5869 "cPickle.c"
        var $69=HEAP[_extension_cache]; //@line 5871 "cPickle.c"
        var $70=($69)==0; //@line 5871 "cPickle.c"
        if ($70) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 5871 "cPickle.c"
      case 42: // $bb40_i
        $0=-1; //@line 5871 "cPickle.c"
        __label__ = 89; break; //@line 5871 "cPickle.c"
      case 43: // $bb41_i
        var $71=$copyreg_i; //@line 5873 "cPickle.c"
        var $72=$71; //@line 5873 "cPickle.c"
        var $73=HEAP[$72]; //@line 5873 "cPickle.c"
        var $74=($73) - 1; //@line 5873 "cPickle.c"
        var $75=$copyreg_i; //@line 5873 "cPickle.c"
        var $76=$75; //@line 5873 "cPickle.c"
        HEAP[$76]=$74; //@line 5873 "cPickle.c"
        var $77=$copyreg_i; //@line 5873 "cPickle.c"
        var $78=$77; //@line 5873 "cPickle.c"
        var $79=HEAP[$78]; //@line 5873 "cPickle.c"
        var $80=($79)==0; //@line 5873 "cPickle.c"
        if ($80) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 5873 "cPickle.c"
      case 44: // $bb42_i
        var $81=$copyreg_i; //@line 5873 "cPickle.c"
        var $82=$81+4; //@line 5873 "cPickle.c"
        var $83=HEAP[$82]; //@line 5873 "cPickle.c"
        var $84=$83+24; //@line 5873 "cPickle.c"
        var $85=HEAP[$84]; //@line 5873 "cPickle.c"
        var $86=$copyreg_i; //@line 5873 "cPickle.c"
        FUNCTION_TABLE[$85]($86); //@line 5873 "cPickle.c"
        __label__ = 45; break; //@line 5873 "cPickle.c"
      case 45: // $bb43_i
        var $87=_PyTuple_New(0); //@line 5875 "cPickle.c"
        HEAP[_empty_tuple]=$87; //@line 5875 "cPickle.c"
        var $88=($87)==0; //@line 5875 "cPickle.c"
        if ($88) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 5875 "cPickle.c"
      case 46: // $bb44_i
        $0=-1; //@line 5876 "cPickle.c"
        __label__ = 89; break; //@line 5876 "cPickle.c"
      case 47: // $bb45_i
        var $89=_PyTuple_New(2); //@line 5878 "cPickle.c"
        HEAP[_two_tuple]=$89; //@line 5878 "cPickle.c"
        var $90=HEAP[_two_tuple]; //@line 5879 "cPickle.c"
        var $91=($90)==0; //@line 5879 "cPickle.c"
        if ($91) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 5879 "cPickle.c"
      case 48: // $bb46_i
        $0=-1; //@line 5880 "cPickle.c"
        __label__ = 89; break; //@line 5880 "cPickle.c"
      case 49: // $bb47_i
        var $92=HEAP[_two_tuple]; //@line 5885 "cPickle.c"
        var $93=$92; //@line 5885 "cPickle.c"
        _PyObject_GC_UnTrack($93); //@line 5885 "cPickle.c"
        var $94=_PyImport_ImportModule(__str143); //@line 5888 "cPickle.c"
        $t_i=$94; //@line 5888 "cPickle.c"
        var $95=$t_i; //@line 5888 "cPickle.c"
        var $96=($95)==0; //@line 5888 "cPickle.c"
        if ($96) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 5888 "cPickle.c"
      case 50: // $bb48_i
        $0=-1; //@line 5888 "cPickle.c"
        __label__ = 89; break; //@line 5888 "cPickle.c"
      case 51: // $bb49_i
        var $97=$module_dict_addr_i; //@line 5889 "cPickle.c"
        var $98=$t_i; //@line 5889 "cPickle.c"
        var $99=_PyDict_SetItemString($97, __str144, $98); //@line 5889 "cPickle.c"
        var $100=($99) < 0; //@line 5889 "cPickle.c"
        if ($100) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 5889 "cPickle.c"
      case 52: // $bb50_i
        $0=-1; //@line 5890 "cPickle.c"
        __label__ = 89; break; //@line 5890 "cPickle.c"
      case 53: // $bb51_i
        var $101=_PyDict_New(); //@line 5892 "cPickle.c"
        $t_i=$101; //@line 5892 "cPickle.c"
        var $102=$t_i; //@line 5892 "cPickle.c"
        var $103=($102)==0; //@line 5892 "cPickle.c"
        if ($103) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 5892 "cPickle.c"
      case 54: // $bb52_i
        $0=-1; //@line 5892 "cPickle.c"
        __label__ = 89; break; //@line 5892 "cPickle.c"
      case 55: // $bb53_i
        var $104=$module_dict_addr_i; //@line 5893 "cPickle.c"
        var $105=$t_i; //@line 5893 "cPickle.c"
        var $106=_PyRun_StringFlags(__str145, 257, $104, $105, 0); //@line 5893 "cPickle.c"
        $r_i=$106; //@line 5893 "cPickle.c"
        var $107=$r_i; //@line 5893 "cPickle.c"
        var $108=($107)==0; //@line 5893 "cPickle.c"
        if ($108) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 5893 "cPickle.c"
      case 56: // $bb54_i
        $0=-1; //@line 5893 "cPickle.c"
        __label__ = 89; break; //@line 5893 "cPickle.c"
      case 57: // $bb55_i
        var $109=$r_i; //@line 5898 "cPickle.c"
        var $110=$109; //@line 5898 "cPickle.c"
        var $111=HEAP[$110]; //@line 5898 "cPickle.c"
        var $112=($111) - 1; //@line 5898 "cPickle.c"
        var $113=$r_i; //@line 5898 "cPickle.c"
        var $114=$113; //@line 5898 "cPickle.c"
        HEAP[$114]=$112; //@line 5898 "cPickle.c"
        var $115=$r_i; //@line 5898 "cPickle.c"
        var $116=$115; //@line 5898 "cPickle.c"
        var $117=HEAP[$116]; //@line 5898 "cPickle.c"
        var $118=($117)==0; //@line 5898 "cPickle.c"
        if ($118) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 5898 "cPickle.c"
      case 58: // $bb56_i
        var $119=$r_i; //@line 5898 "cPickle.c"
        var $120=$119+4; //@line 5898 "cPickle.c"
        var $121=HEAP[$120]; //@line 5898 "cPickle.c"
        var $122=$121+24; //@line 5898 "cPickle.c"
        var $123=HEAP[$122]; //@line 5898 "cPickle.c"
        var $124=$r_i; //@line 5898 "cPickle.c"
        FUNCTION_TABLE[$123]($124); //@line 5898 "cPickle.c"
        __label__ = 59; break; //@line 5898 "cPickle.c"
      case 59: // $bb57_i
        var $125=$t_i; //@line 5900 "cPickle.c"
        var $126=_PyErr_NewException(__str146, 0, $125); //@line 5900 "cPickle.c"
        HEAP[_PickleError]=$126; //@line 5900 "cPickle.c"
        var $127=($126)==0; //@line 5901 "cPickle.c"
        if ($127) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 5901 "cPickle.c"
      case 60: // $bb58_i
        $0=-1; //@line 5902 "cPickle.c"
        __label__ = 89; break; //@line 5902 "cPickle.c"
      case 61: // $bb59_i
        var $128=$t_i; //@line 5904 "cPickle.c"
        var $129=$128; //@line 5904 "cPickle.c"
        var $130=HEAP[$129]; //@line 5904 "cPickle.c"
        var $131=($130) - 1; //@line 5904 "cPickle.c"
        var $132=$t_i; //@line 5904 "cPickle.c"
        var $133=$132; //@line 5904 "cPickle.c"
        HEAP[$133]=$131; //@line 5904 "cPickle.c"
        var $134=$t_i; //@line 5904 "cPickle.c"
        var $135=$134; //@line 5904 "cPickle.c"
        var $136=HEAP[$135]; //@line 5904 "cPickle.c"
        var $137=($136)==0; //@line 5904 "cPickle.c"
        if ($137) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 5904 "cPickle.c"
      case 62: // $bb60_i
        var $138=$t_i; //@line 5904 "cPickle.c"
        var $139=$138+4; //@line 5904 "cPickle.c"
        var $140=HEAP[$139]; //@line 5904 "cPickle.c"
        var $141=$140+24; //@line 5904 "cPickle.c"
        var $142=HEAP[$141]; //@line 5904 "cPickle.c"
        var $143=$t_i; //@line 5904 "cPickle.c"
        FUNCTION_TABLE[$142]($143); //@line 5904 "cPickle.c"
        __label__ = 63; break; //@line 5904 "cPickle.c"
      case 63: // $bb61_i
        var $144=HEAP[_PickleError]; //@line 5906 "cPickle.c"
        var $145=_PyErr_NewException(__str147, $144, 0); //@line 5906 "cPickle.c"
        HEAP[_PicklingError]=$145; //@line 5906 "cPickle.c"
        var $146=($145)==0; //@line 5908 "cPickle.c"
        if ($146) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 5908 "cPickle.c"
      case 64: // $bb62_i
        $0=-1; //@line 5909 "cPickle.c"
        __label__ = 89; break; //@line 5909 "cPickle.c"
      case 65: // $bb63_i
        var $147=_PyDict_New(); //@line 5911 "cPickle.c"
        $t_i=$147; //@line 5911 "cPickle.c"
        var $148=$t_i; //@line 5911 "cPickle.c"
        var $149=($148)==0; //@line 5911 "cPickle.c"
        if ($149) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 5911 "cPickle.c"
      case 66: // $bb64_i
        $0=-1; //@line 5911 "cPickle.c"
        __label__ = 89; break; //@line 5911 "cPickle.c"
      case 67: // $bb65_i
        var $150=$module_dict_addr_i; //@line 5912 "cPickle.c"
        var $151=$t_i; //@line 5912 "cPickle.c"
        var $152=_PyRun_StringFlags(__str148, 257, $150, $151, 0); //@line 5912 "cPickle.c"
        $r_i=$152; //@line 5912 "cPickle.c"
        var $153=$r_i; //@line 5912 "cPickle.c"
        var $154=($153)==0; //@line 5912 "cPickle.c"
        if ($154) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 5912 "cPickle.c"
      case 68: // $bb66_i
        $0=-1; //@line 5912 "cPickle.c"
        __label__ = 89; break; //@line 5912 "cPickle.c"
      case 69: // $bb67_i
        var $155=$r_i; //@line 5919 "cPickle.c"
        var $156=$155; //@line 5919 "cPickle.c"
        var $157=HEAP[$156]; //@line 5919 "cPickle.c"
        var $158=($157) - 1; //@line 5919 "cPickle.c"
        var $159=$r_i; //@line 5919 "cPickle.c"
        var $160=$159; //@line 5919 "cPickle.c"
        HEAP[$160]=$158; //@line 5919 "cPickle.c"
        var $161=$r_i; //@line 5919 "cPickle.c"
        var $162=$161; //@line 5919 "cPickle.c"
        var $163=HEAP[$162]; //@line 5919 "cPickle.c"
        var $164=($163)==0; //@line 5919 "cPickle.c"
        if ($164) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 5919 "cPickle.c"
      case 70: // $bb68_i
        var $165=$r_i; //@line 5919 "cPickle.c"
        var $166=$165+4; //@line 5919 "cPickle.c"
        var $167=HEAP[$166]; //@line 5919 "cPickle.c"
        var $168=$167+24; //@line 5919 "cPickle.c"
        var $169=HEAP[$168]; //@line 5919 "cPickle.c"
        var $170=$r_i; //@line 5919 "cPickle.c"
        FUNCTION_TABLE[$169]($170); //@line 5919 "cPickle.c"
        __label__ = 71; break; //@line 5919 "cPickle.c"
      case 71: // $bb69_i
        var $171=HEAP[_PicklingError]; //@line 5921 "cPickle.c"
        var $172=$t_i; //@line 5921 "cPickle.c"
        var $173=_PyErr_NewException(__str149, $171, $172); //@line 5921 "cPickle.c"
        HEAP[_UnpickleableError]=$173; //@line 5921 "cPickle.c"
        var $174=($173)==0; //@line 5921 "cPickle.c"
        if ($174) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 5921 "cPickle.c"
      case 72: // $bb70_i
        $0=-1; //@line 5923 "cPickle.c"
        __label__ = 89; break; //@line 5923 "cPickle.c"
      case 73: // $bb71_i
        var $175=$t_i; //@line 5925 "cPickle.c"
        var $176=$175; //@line 5925 "cPickle.c"
        var $177=HEAP[$176]; //@line 5925 "cPickle.c"
        var $178=($177) - 1; //@line 5925 "cPickle.c"
        var $179=$t_i; //@line 5925 "cPickle.c"
        var $180=$179; //@line 5925 "cPickle.c"
        HEAP[$180]=$178; //@line 5925 "cPickle.c"
        var $181=$t_i; //@line 5925 "cPickle.c"
        var $182=$181; //@line 5925 "cPickle.c"
        var $183=HEAP[$182]; //@line 5925 "cPickle.c"
        var $184=($183)==0; //@line 5925 "cPickle.c"
        if ($184) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 5925 "cPickle.c"
      case 74: // $bb72_i
        var $185=$t_i; //@line 5925 "cPickle.c"
        var $186=$185+4; //@line 5925 "cPickle.c"
        var $187=HEAP[$186]; //@line 5925 "cPickle.c"
        var $188=$187+24; //@line 5925 "cPickle.c"
        var $189=HEAP[$188]; //@line 5925 "cPickle.c"
        var $190=$t_i; //@line 5925 "cPickle.c"
        FUNCTION_TABLE[$189]($190); //@line 5925 "cPickle.c"
        __label__ = 75; break; //@line 5925 "cPickle.c"
      case 75: // $bb73_i
        var $191=HEAP[_PickleError]; //@line 5927 "cPickle.c"
        var $192=_PyErr_NewException(__str150, $191, 0); //@line 5927 "cPickle.c"
        HEAP[_UnpicklingError]=$192; //@line 5927 "cPickle.c"
        var $193=($192)==0; //@line 5927 "cPickle.c"
        if ($193) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 5927 "cPickle.c"
      case 76: // $bb74_i
        $0=-1; //@line 5929 "cPickle.c"
        __label__ = 89; break; //@line 5929 "cPickle.c"
      case 77: // $bb75_i
        var $194=HEAP[_UnpicklingError]; //@line 5931 "cPickle.c"
        var $195=_PyErr_NewException(__str151, $194, 0); //@line 5931 "cPickle.c"
        HEAP[_BadPickleGet]=$195; //@line 5931 "cPickle.c"
        var $196=HEAP[_BadPickleGet]; //@line 5931 "cPickle.c"
        var $197=($196)==0; //@line 5931 "cPickle.c"
        if ($197) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 5931 "cPickle.c"
      case 78: // $bb76_i
        $0=-1; //@line 5933 "cPickle.c"
        __label__ = 89; break; //@line 5933 "cPickle.c"
      case 79: // $bb77_i
        var $198=HEAP[_PickleError]; //@line 5935 "cPickle.c"
        var $199=$module_dict_addr_i; //@line 5935 "cPickle.c"
        var $200=_PyDict_SetItemString($199, __str152, $198); //@line 5935 "cPickle.c"
        var $201=($200) < 0; //@line 5935 "cPickle.c"
        if ($201) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 5935 "cPickle.c"
      case 80: // $bb78_i
        $0=-1; //@line 5937 "cPickle.c"
        __label__ = 89; break; //@line 5937 "cPickle.c"
      case 81: // $bb79_i
        var $202=HEAP[_PicklingError]; //@line 5939 "cPickle.c"
        var $203=$module_dict_addr_i; //@line 5939 "cPickle.c"
        var $204=_PyDict_SetItemString($203, __str75, $202); //@line 5939 "cPickle.c"
        var $205=($204) < 0; //@line 5939 "cPickle.c"
        if ($205) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 5939 "cPickle.c"
      case 82: // $bb80_i
        $0=-1; //@line 5941 "cPickle.c"
        __label__ = 89; break; //@line 5941 "cPickle.c"
      case 83: // $bb81_i
        var $206=HEAP[_UnpicklingError]; //@line 5943 "cPickle.c"
        var $207=$module_dict_addr_i; //@line 5943 "cPickle.c"
        var $208=_PyDict_SetItemString($207, __str110, $206); //@line 5943 "cPickle.c"
        var $209=($208) < 0; //@line 5943 "cPickle.c"
        if ($209) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 5943 "cPickle.c"
      case 84: // $bb82_i
        $0=-1; //@line 5945 "cPickle.c"
        __label__ = 89; break; //@line 5945 "cPickle.c"
      case 85: // $bb83_i
        var $210=HEAP[_UnpickleableError]; //@line 5947 "cPickle.c"
        var $211=$module_dict_addr_i; //@line 5947 "cPickle.c"
        var $212=_PyDict_SetItemString($211, __str153, $210); //@line 5947 "cPickle.c"
        var $213=($212) < 0; //@line 5947 "cPickle.c"
        if ($213) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 5947 "cPickle.c"
      case 86: // $bb84_i
        $0=-1; //@line 5949 "cPickle.c"
        __label__ = 89; break; //@line 5949 "cPickle.c"
      case 87: // $bb85_i
        var $214=HEAP[_BadPickleGet]; //@line 5951 "cPickle.c"
        var $215=$module_dict_addr_i; //@line 5951 "cPickle.c"
        var $216=_PyDict_SetItemString($215, __str154, $214); //@line 5951 "cPickle.c"
        var $217=($216) < 0; //@line 5951 "cPickle.c"
        if ($217) { __label__ = 88; break; } else { __label__ = 90; break; } //@line 5951 "cPickle.c"
      case 88: // $bb86_i
        $0=-1; //@line 5953 "cPickle.c"
        __label__ = 89; break; //@line 5953 "cPickle.c"
      case 89: // $init_stuff_exit_thread
        $retval_i=-1; //@line 5834 "cPickle.c"
        __label__ = 108; break;
      case 90: // $bb1
        var $218=_PyCapsule_Import(__str155, 0); //@line 5955 "cPickle.c"
        var $219=$218; //@line 5955 "cPickle.c"
        HEAP[_PycStringIO]=$219; //@line 5955 "cPickle.c"
        $0=0; //@line 5957 "cPickle.c"
        $retval_i=0; //@line 5834 "cPickle.c"
        var $220=_Py_InitModule4(__str157, _cPickle_methods, _cPickle_module_documentation, 0, 1013); //@line 5984 "cPickle.c"
        $m=$220; //@line 5984 "cPickle.c"
        var $221=$m; //@line 5987 "cPickle.c"
        var $222=($221)==0; //@line 5987 "cPickle.c"
        if ($222) { __label__ = 108; break; } else { __label__ = 91; break; } //@line 5987 "cPickle.c"
      case 91: // $bb2
        var $223=$m; //@line 5991 "cPickle.c"
        var $224=_PyModule_GetDict($223); //@line 5991 "cPickle.c"
        $d=$224; //@line 5991 "cPickle.c"
        var $225=$rev; //@line 5992 "cPickle.c"
        var $226=_PyString_FromString($225); //@line 5992 "cPickle.c"
        HEAP[$v]=$226; //@line 5992 "cPickle.c"
        var $227=HEAP[$v]; //@line 5993 "cPickle.c"
        var $228=$d; //@line 5993 "cPickle.c"
        var $229=_PyDict_SetItemString($228, __str158, $227); //@line 5993 "cPickle.c"
        var $230=HEAP[$v]; //@line 5994 "cPickle.c"
        var $231=($230)!=0; //@line 5994 "cPickle.c"
        if ($231) { __label__ = 92; break; } else { __label__ = 94; break; } //@line 5994 "cPickle.c"
      case 92: // $bb3
        var $232=HEAP[$v]; //@line 5994 "cPickle.c"
        var $233=$232; //@line 5994 "cPickle.c"
        var $234=HEAP[$233]; //@line 5994 "cPickle.c"
        var $235=($234) - 1; //@line 5994 "cPickle.c"
        var $236=$232; //@line 5994 "cPickle.c"
        HEAP[$236]=$235; //@line 5994 "cPickle.c"
        var $237=$232; //@line 5994 "cPickle.c"
        var $238=HEAP[$237]; //@line 5994 "cPickle.c"
        var $239=($238)==0; //@line 5994 "cPickle.c"
        if ($239) { __label__ = 93; break; } else { __label__ = 94; break; } //@line 5994 "cPickle.c"
      case 93: // $bb4
        var $240=HEAP[$v]; //@line 5994 "cPickle.c"
        var $241=$240+4; //@line 5994 "cPickle.c"
        var $242=HEAP[$241]; //@line 5994 "cPickle.c"
        var $243=$242+24; //@line 5994 "cPickle.c"
        var $244=HEAP[$243]; //@line 5994 "cPickle.c"
        var $245=HEAP[$v]; //@line 5994 "cPickle.c"
        FUNCTION_TABLE[$244]($245); //@line 5994 "cPickle.c"
        __label__ = 94; break; //@line 5994 "cPickle.c"
      case 94: // $bb5
        HEAP[$i]=0; //@line 5997 "cPickle.c"
        __label__ = 98; break; //@line 5997 "cPickle.c"
      case 95: // $bb6
        var $246=HEAP[$v]; //@line 5998 "cPickle.c"
        var $247=HEAP[$k]; //@line 5998 "cPickle.c"
        var $248=$d; //@line 5998 "cPickle.c"
        var $249=_PyObject_SetItem($248, $247, $246); //@line 5998 "cPickle.c"
        var $250=($249) < 0; //@line 5998 "cPickle.c"
        if ($250) { __label__ = 96; break; } else { __label__ = 98; break; } //@line 5998 "cPickle.c"
      case 96: // $bb7
        var $251=$di; //@line 5999 "cPickle.c"
        var $252=$251; //@line 5999 "cPickle.c"
        var $253=HEAP[$252]; //@line 5999 "cPickle.c"
        var $254=($253) - 1; //@line 5999 "cPickle.c"
        var $255=$di; //@line 5999 "cPickle.c"
        var $256=$255; //@line 5999 "cPickle.c"
        HEAP[$256]=$254; //@line 5999 "cPickle.c"
        var $257=$di; //@line 5999 "cPickle.c"
        var $258=$257; //@line 5999 "cPickle.c"
        var $259=HEAP[$258]; //@line 5999 "cPickle.c"
        var $260=($259)==0; //@line 5999 "cPickle.c"
        if ($260) { __label__ = 97; break; } else { __label__ = 108; break; } //@line 5999 "cPickle.c"
      case 97: // $bb8
        var $261=$di; //@line 5999 "cPickle.c"
        var $262=$261+4; //@line 5999 "cPickle.c"
        var $263=HEAP[$262]; //@line 5999 "cPickle.c"
        var $264=$263+24; //@line 5999 "cPickle.c"
        var $265=HEAP[$264]; //@line 5999 "cPickle.c"
        var $266=$di; //@line 5999 "cPickle.c"
        FUNCTION_TABLE[$265]($266); //@line 5999 "cPickle.c"
        __label__ = 108; break; //@line 5999 "cPickle.c"
      case 98: // $bb10
        var $267=$di; //@line 5997 "cPickle.c"
        var $268=_PyDict_Next($267, $i, $k, $v); //@line 5997 "cPickle.c"
        var $269=($268)!=0; //@line 5997 "cPickle.c"
        if ($269) { __label__ = 95; break; } else { __label__ = 99; break; } //@line 5997 "cPickle.c"
      case 99: // $bb11
        var $270=$di; //@line 6003 "cPickle.c"
        var $271=$270; //@line 6003 "cPickle.c"
        var $272=HEAP[$271]; //@line 6003 "cPickle.c"
        var $273=($272) - 1; //@line 6003 "cPickle.c"
        var $274=$di; //@line 6003 "cPickle.c"
        var $275=$274; //@line 6003 "cPickle.c"
        HEAP[$275]=$273; //@line 6003 "cPickle.c"
        var $276=$di; //@line 6003 "cPickle.c"
        var $277=$276; //@line 6003 "cPickle.c"
        var $278=HEAP[$277]; //@line 6003 "cPickle.c"
        var $279=($278)==0; //@line 6003 "cPickle.c"
        if ($279) { __label__ = 100; break; } else { __label__ = 101; break; } //@line 6003 "cPickle.c"
      case 100: // $bb12
        var $280=$di; //@line 6003 "cPickle.c"
        var $281=$280+4; //@line 6003 "cPickle.c"
        var $282=HEAP[$281]; //@line 6003 "cPickle.c"
        var $283=$282+24; //@line 6003 "cPickle.c"
        var $284=HEAP[$283]; //@line 6003 "cPickle.c"
        var $285=$di; //@line 6003 "cPickle.c"
        FUNCTION_TABLE[$284]($285); //@line 6003 "cPickle.c"
        __label__ = 101; break; //@line 6003 "cPickle.c"
      case 101: // $bb13
        var $286=$m; //@line 6005 "cPickle.c"
        var $287=_PyModule_AddIntConstant($286, __str159, 2); //@line 6005 "cPickle.c"
        HEAP[$i]=$287; //@line 6005 "cPickle.c"
        var $288=($287) < 0; //@line 6006 "cPickle.c"
        if ($288) { __label__ = 108; break; } else { __label__ = 102; break; } //@line 6006 "cPickle.c"
      case 102: // $bb14
        var $289=_PyString_FromString(__str160); //@line 6011 "cPickle.c"
        $format_version=$289; //@line 6011 "cPickle.c"
        var $290=_Py_BuildValue(__str161, __str162, __str163, __str164, __str165, __str160); //@line 6013 "cPickle.c"
        $compatible_formats=$290; //@line 6013 "cPickle.c"
        var $291=$d; //@line 6019 "cPickle.c"
        var $292=$format_version; //@line 6019 "cPickle.c"
        var $293=_PyDict_SetItemString($291, __str166, $292); //@line 6019 "cPickle.c"
        var $294=$d; //@line 6020 "cPickle.c"
        var $295=$compatible_formats; //@line 6020 "cPickle.c"
        var $296=_PyDict_SetItemString($294, __str167, $295); //@line 6020 "cPickle.c"
        var $297=$format_version; //@line 6021 "cPickle.c"
        var $298=($297)!=0; //@line 6021 "cPickle.c"
        if ($298) { __label__ = 103; break; } else { __label__ = 105; break; } //@line 6021 "cPickle.c"
      case 103: // $bb15
        var $299=$format_version; //@line 6021 "cPickle.c"
        var $300=$299; //@line 6021 "cPickle.c"
        var $301=HEAP[$300]; //@line 6021 "cPickle.c"
        var $302=($301) - 1; //@line 6021 "cPickle.c"
        var $303=$format_version; //@line 6021 "cPickle.c"
        var $304=$303; //@line 6021 "cPickle.c"
        HEAP[$304]=$302; //@line 6021 "cPickle.c"
        var $305=$format_version; //@line 6021 "cPickle.c"
        var $306=$305; //@line 6021 "cPickle.c"
        var $307=HEAP[$306]; //@line 6021 "cPickle.c"
        var $308=($307)==0; //@line 6021 "cPickle.c"
        if ($308) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 6021 "cPickle.c"
      case 104: // $bb16
        var $309=$format_version; //@line 6021 "cPickle.c"
        var $310=$309+4; //@line 6021 "cPickle.c"
        var $311=HEAP[$310]; //@line 6021 "cPickle.c"
        var $312=$311+24; //@line 6021 "cPickle.c"
        var $313=HEAP[$312]; //@line 6021 "cPickle.c"
        var $314=$format_version; //@line 6021 "cPickle.c"
        FUNCTION_TABLE[$313]($314); //@line 6021 "cPickle.c"
        __label__ = 105; break; //@line 6021 "cPickle.c"
      case 105: // $bb17
        var $315=$compatible_formats; //@line 6022 "cPickle.c"
        var $316=($315)!=0; //@line 6022 "cPickle.c"
        if ($316) { __label__ = 106; break; } else { __label__ = 108; break; } //@line 6022 "cPickle.c"
      case 106: // $bb18
        var $317=$compatible_formats; //@line 6022 "cPickle.c"
        var $318=$317; //@line 6022 "cPickle.c"
        var $319=HEAP[$318]; //@line 6022 "cPickle.c"
        var $320=($319) - 1; //@line 6022 "cPickle.c"
        var $321=$compatible_formats; //@line 6022 "cPickle.c"
        var $322=$321; //@line 6022 "cPickle.c"
        HEAP[$322]=$320; //@line 6022 "cPickle.c"
        var $323=$compatible_formats; //@line 6022 "cPickle.c"
        var $324=$323; //@line 6022 "cPickle.c"
        var $325=HEAP[$324]; //@line 6022 "cPickle.c"
        var $326=($325)==0; //@line 6022 "cPickle.c"
        if ($326) { __label__ = 107; break; } else { __label__ = 108; break; } //@line 6022 "cPickle.c"
      case 107: // $bb19
        var $327=$compatible_formats; //@line 6022 "cPickle.c"
        var $328=$327+4; //@line 6022 "cPickle.c"
        var $329=HEAP[$328]; //@line 6022 "cPickle.c"
        var $330=$329+24; //@line 6022 "cPickle.c"
        var $331=HEAP[$330]; //@line 6022 "cPickle.c"
        var $332=$compatible_formats; //@line 6022 "cPickle.c"
        FUNCTION_TABLE[$331]($332); //@line 6022 "cPickle.c"
        __label__ = 108; break; //@line 6022 "cPickle.c"
      case 108: // $return
        STACKTOP = __stackBase__;
        return; //@line 5980 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  Module["_initcPickle"] = _initcPickle;
FUNCTION_TABLE = FUNCTION_TABLE.concat([0,0,__PyObject_NextNotImplemented,0,_write_file,0,_write_cStringIO,0,_write_none,0,_write_other,0,_read_file,0,_readline_file,0,_read_cStringIO,0,_readline_cStringIO,0,_read_other,0,_readline_other,0,_Pdata_dealloc,0,_Pickler_dump,0,_Pickle_clear_memo,0,_Pickle_getvalue,0,_Pickler_get_pers_func,0,_Pickler_set_pers_func,0,_Pickler_set_inst_pers_func,0,_Pickler_get_memo,0,_Pickler_set_memo,0,_Pickler_get_error,0,_Pickler_dealloc,0,_PyObject_GenericGetAttr,0,_PyObject_GenericSetAttr,0,_Pickler_traverse,0,_Pickler_clear,0,_Unpickler_load,0,_Unpickler_noload,0,_Unpickler_dealloc,0,_Unpickler_getattr,0,_Unpickler_setattr,0,_Unpickler_traverse,0,_Unpickler_clear,0,_cpm_dump,0,_cpm_dumps,0,_cpm_load,0,_cpm_loads,0,_get_Pickler,0,_get_Unpickler,0]);

// === Auto-generated postamble setup entry stuff ===

function run(args) {
  
_cPickle_module_documentation=allocate([67,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,97,110,100,32,111,112,116,105,109,105,122,97,116,105,111,110,32,111,102,32,116,104,101,32,80,121,116,104,111,110,32,112,105,99,107,108,101,32,109,111,100,117,108,101,46,0] /* C implementation and */, "i8", ALLOC_NORMAL);
_MARKv=allocate([40], "i8", ALLOC_NORMAL);
__str=allocate([99,80,105,99,107,108,101,46,80,100,97,116,97,0] /* cPickle.Pdata\00 */, "i8", ALLOC_NORMAL);
__str1=allocate(1, "i8", ALLOC_NORMAL);
_PdataType=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_UnpicklingError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str2=allocate([117,110,112,105,99,107,108,105,110,103,32,115,116,97,99,107,32,117,110,100,101,114,102,108,111,119,0] /* unpickling stack und */, "i8", ALLOC_NORMAL);
_PycStringIO=allocate(1, "%struct.PycStringIO_CAPI*", ALLOC_NORMAL);
_empty_tuple=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_PicklingError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str3=allocate([110,111,32,105,110,116,32,119,104,101,114,101,32,105,110,116,32,101,120,112,101,99,116,101,100,32,105,110,32,109,101,109,111,0] /* no int where int exp */, "i8", ALLOC_NORMAL);
__str4=allocate([37,108,100,10,0] /* %ld\0A\00 */, "i8", ALLOC_NORMAL);
__str5=allocate([37,100,10,0] /* %d\0A\00 */, "i8", ALLOC_NORMAL);
__str6=allocate([95,95,109,111,100,117,108,101,95,95,0] /* __module__\00 */, "i8", ALLOC_NORMAL);
__str7=allocate([109,111,100,117,108,101,115,0] /* modules\00 */, "i8", ALLOC_NORMAL);
___main___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str8=allocate([102,97,115,116,32,109,111,100,101,58,32,99,97,110,39,116,32,112,105,99,107,108,101,32,99,121,99,108,105,99,32,111,98,106,101,99,116,115,32,105,110,99,108,117,100,105,110,103,32,111,98,106,101,99,116,32,116,121,112,101,32,37,115,32,97,116,32,37,112,0] /* fast mode: can't pic */, "i8", ALLOC_NORMAL);
_none_9451=allocate([78], "i8", ALLOC_NORMAL);
_len_9463=allocate([4,4] /* \04\04 */, "i8", ALLOC_NORMAL);
_buf_9462=allocate(8, "i8*", ALLOC_NORMAL);
__str9=allocate([73,48,48,10,0] /* I00\0A\00 */, "i8", ALLOC_NORMAL);
__str10=allocate([73,48,49,10,0] /* I01\0A\00 */, "i8", ALLOC_NORMAL);
__str11=allocate([108,111,110,103,32,116,111,111,32,108,97,114,103,101,32,116,111,32,112,105,99,107,108,101,0] /* long too large to pi */, "i8", ALLOC_NORMAL);
_l_9538=allocate([76], "i8", ALLOC_NORMAL);
__str12=allocate([10,0] /* \0A\00 */, "i8", ALLOC_NORMAL);
_string_9677=allocate([83], "i8", ALLOC_NORMAL);
__str13=allocate([48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0] /* 0123456789abcdef\00 */, "i8", ALLOC_NORMAL);
_string_9895=allocate([86], "i8", ALLOC_NORMAL);
__str14=allocate([80,121,84,117,112,108,101,95,83,105,122,101,40,116,41,32,61,61,32,108,101,110,0] /* PyTuple_Size(t) == l */, "i8", ALLOC_NORMAL);
__str15=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,99,80,105,99,107,108,101,46,99,0] /* ../cpython/Modules/c */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10017=allocate([115,116,111,114,101,95,116,117,112,108,101,95,101,108,101,109,101,110,116,115,0] /* store_tuple_elements */, "i8", ALLOC_NORMAL);
_pop_10042=allocate([48], "i8", ALLOC_NORMAL);
_len2opcode_10044=allocate([41,133,134,135] /* )\85\86\87 */, "i8", ALLOC_NORMAL);
_pop_mark_10043=allocate([49], "i8", ALLOC_NORMAL);
_tuple_10041=allocate([116], "i8", ALLOC_NORMAL);
__str16=allocate([105,116,101,114,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* iter != ((void _)0)\ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10137=allocate([98,97,116,99,104,95,108,105,115,116,0] /* batch_list\00 */, "i8", ALLOC_NORMAL);
_append_10135=allocate([97], "i8", ALLOC_NORMAL);
_appends_10136=allocate([101], "i8", ALLOC_NORMAL);
__str17=allocate([32,119,104,105,108,101,32,112,105,99,107,108,105,110,103,32,97,110,32,111,98,106,101,99,116,0] /*  while pickling an o */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10326=allocate([98,97,116,99,104,95,100,105,99,116,0] /* batch_dict\00 */, "i8", ALLOC_NORMAL);
__str18=allocate([100,105,99,116,32,105,116,101,109,115,32,105,116,101,114,97,116,111,114,32,109,117,115,116,32,114,101,116,117,114,110,32,50,45,116,117,112,108,101,115,0] /* dict items iterator  */, "i8", ALLOC_NORMAL);
_setitem_10324=allocate([115], "i8", ALLOC_NORMAL);
_setitems_10325=allocate([117], "i8", ALLOC_NORMAL);
__str19=allocate([111,98,106,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* obj != ((void _)0)\0 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10501=allocate([98,97,116,99,104,95,100,105,99,116,95,101,120,97,99,116,0] /* batch_dict_exact\00 */, "i8", ALLOC_NORMAL);
__str20=allocate([115,101,108,102,45,62,112,114,111,116,111,32,62,32,48,0] /* self->proto > 0\00 */, "i8", ALLOC_NORMAL);
_setitem_10499=allocate([115], "i8", ALLOC_NORMAL);
_setitems_10500=allocate([117], "i8", ALLOC_NORMAL);
__str21=allocate([100,105,99,116,105,111,110,97,114,121,32,99,104,97,110,103,101,100,32,115,105,122,101,32,100,117,114,105,110,103,32,105,116,101,114,97,116,105,111,110,0] /* dictionary changed s */, "i8", ALLOC_NORMAL);
__str22=allocate([105,116,101,114,105,116,101,109,115,0] /* iteritems\00 */, "i8", ALLOC_NORMAL);
__str23=allocate([40,41,0] /* ()\00 */, "i8", ALLOC_NORMAL);
___class___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___getinitargs___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str24=allocate([99,108,97,115,115,32,104,97,115,32,110,111,32,110,97,109,101,0] /* class has no name\00 */, "i8", ALLOC_NORMAL);
_inst_10654=allocate([105], "i8", ALLOC_NORMAL);
_obj_10655=allocate([111], "i8", ALLOC_NORMAL);
___getstate___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___dict___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_build_10656=allocate([98], "i8", ALLOC_NORMAL);
___name___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str25=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,105,109,112,111,114,116,32,111,102,32,109,111,100,117,108,101,32,37,115,32,102,97,105,108,101,100,0] /* Can't pickle %s: imp */, "i8", ALLOC_NORMAL);
__str26=allocate([79,83,0] /* OS\00 */, "i8", ALLOC_NORMAL);
__str27=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,97,116,116,114,105,98,117,116,101,32,108,111,111,107,117,112,32,37,115,46,37,115,32,102,97,105,108,101,100,0] /* Can't pickle %s: att */, "i8", ALLOC_NORMAL);
__str28=allocate([79,83,83,0] /* OSS\00 */, "i8", ALLOC_NORMAL);
__str29=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,105,116,39,115,32,110,111,116,32,116,104,101,32,115,97,109,101,32,111,98,106,101,99,116,32,97,115,32,37,115,46,37,115,0] /* Can't pickle %s: it' */, "i8", ALLOC_NORMAL);
_two_tuple=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_extension_registry=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str30=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,101,120,116,101,110,115,105,111,110,32,99,111,100,101,32,37,115,32,105,115,110,39,116,32,97,110,32,105,110,116,101,103,101,114,0] /* Can't pickle %s: ext */, "i8", ALLOC_NORMAL);
__str31=allocate([79,79,0] /* OO\00 */, "i8", ALLOC_NORMAL);
__str32=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,101,120,116,101,110,115,105,111,110,32,99,111,100,101,32,37,108,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* Can't pickle %s: ext */, "i8", ALLOC_NORMAL);
__str33=allocate([79,108,0] /* Ol\00 */, "i8", ALLOC_NORMAL);
_global_10855=allocate([99], "i8", ALLOC_NORMAL);
__str34=allocate([112,101,114,115,105,115,116,101,110,116,32,105,100,32,109,117,115,116,32,98,101,32,115,116,114,105,110,103,0] /* persistent id must b */, "i8", ALLOC_NORMAL);
_persid_10999=allocate([80], "i8", ALLOC_NORMAL);
_binpersid_11000=allocate([81], "i8", ALLOC_NORMAL);
__str35=allocate([116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,99,111,110,116,97,105,110,32,50,32,116,104,114,111,117,103,104,32,53,32,101,108,101,109,101,110,116,115,0] /* tuple returned by %s */, "i8", ALLOC_NORMAL);
__str36=allocate([79,0] /* O\00 */, "i8", ALLOC_NORMAL);
__str37=allocate([115,97,118,101,95,114,101,100,117,99,101,0] /* save_reduce\00 */, "i8", ALLOC_NORMAL);
__str38=allocate([83,101,99,111,110,100,32,101,108,101,109,101,110,116,32,111,102,32,116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,97,32,116,117,112,108,101,0] /* Second element of tu */, "i8", ALLOC_NORMAL);
__str39=allocate([70,111,117,114,116,104,32,101,108,101,109,101,110,116,32,111,102,32,116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,97,110,32,105,116,101,114,97,116,111,114,44,32,110,111,116,32,37,115,0] /* Fourth element of tu */, "i8", ALLOC_NORMAL);
__str40=allocate([79,115,0] /* Os\00 */, "i8", ALLOC_NORMAL);
__str41=allocate([70,105,102,116,104,32,101,108,101,109,101,110,116,32,111,102,32,116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,97,110,32,105,116,101,114,97,116,111,114,44,32,110,111,116,32,37,115,0] /* Fifth element of tup */, "i8", ALLOC_NORMAL);
__str42=allocate([95,95,110,101,119,111,98,106,95,95,0] /* __newobj__\00 */, "i8", ALLOC_NORMAL);
__str43=allocate([95,95,110,101,119,111,98,106,95,95,32,97,114,103,108,105,115,116,32,105,115,32,101,109,112,116,121,0] /* __newobj__ arglist i */, "i8", ALLOC_NORMAL);
__str44=allocate([95,95,110,101,119,95,95,0] /* __new__\00 */, "i8", ALLOC_NORMAL);
__str45=allocate([97,114,103,115,91,48,93,32,102,114,111,109,32,95,95,110,101,119,111,98,106,95,95,32,97,114,103,115,32,104,97,115,32,110,111,32,95,95,110,101,119,95,95,0] /* args[0] from __newob */, "i8", ALLOC_NORMAL);
__str46=allocate([97,114,103,115,91,48,93,32,102,114,111,109,32,95,95,110,101,119,111,98,106,95,95,32,97,114,103,115,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,99,108,97,115,115,0] /* args[0] from __newob */, "i8", ALLOC_NORMAL);
_newobj_11120=allocate([-127], "i8", ALLOC_NORMAL);
_reduce_11118=allocate([82], "i8", ALLOC_NORMAL);
_build_11119=allocate([98], "i8", ALLOC_NORMAL);
_PickleError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_dispatch_table=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___reduce_ex___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___reduce___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_UnpickleableError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str47=allocate([86,97,108,117,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,115,116,114,105,110,103,32,111,114,32,116,117,112,108,101,0] /* Value returned by %s */, "i8", ALLOC_NORMAL);
__str48=allocate([115,101,108,102,45,62,112,114,111,116,111,32,62,61,32,48,32,38,38,32,115,101,108,102,45,62,112,114,111,116,111,32,60,32,50,53,54,0] /* self->proto >= 0 &&  */, "i8", ALLOC_NORMAL);
_stop_11690=allocate([46], "i8", ALLOC_NORMAL);
__str49=allocate([124,105,58,103,101,116,118,97,108,117,101,0] /* |i:getvalue\00 */, "i8", ALLOC_NORMAL);
__str50=allocate([65,116,116,101,109,112,116,32,116,111,32,103,101,116,118,97,108,117,101,40,41,32,97,32,110,111,110,45,108,105,115,116,45,98,97,115,101,100,32,112,105,99,107,108,101,114,0] /* Attempt to getvalue( */, "i8", ALLOC_NORMAL);
__str51=allocate([73,110,118,97,108,105,100,32,103,101,116,32,100,97,116,97,0] /* Invalid get data\00 */, "i8", ALLOC_NORMAL);
__str52=allocate([85,110,101,120,112,101,99,116,101,100,32,100,97,116,97,32,105,110,32,105,110,116,101,114,110,97,108,32,108,105,115,116,0] /* Unexpected data in i */, "i8", ALLOC_NORMAL);
__str53=allocate([79,124,105,58,100,117,109,112,0] /* O|i:dump\00 */, "i8", ALLOC_NORMAL);
__str54=allocate([100,117,109,112,0] /* dump\00 */, "i8", ALLOC_NORMAL);
__str55=allocate([100,117,109,112,40,111,98,106,101,99,116,41,32,45,45,32,87,114,105,116,101,32,97,110,32,111,98,106,101,99,116,32,105,110,32,112,105,99,107,108,101,32,102,111,114,109,97,116,32,116,111,32,116,104,101,32,111,98,106,101,99,116,39,115,32,112,105,99,107,108,101,32,115,116,114,101,97,109,0] /* dump(object) -- Writ */, "i8", ALLOC_NORMAL);
__str56=allocate([99,108,101,97,114,95,109,101,109,111,0] /* clear_memo\00 */, "i8", ALLOC_NORMAL);
__str57=allocate([99,108,101,97,114,95,109,101,109,111,40,41,32,45,45,32,67,108,101,97,114,32,116,104,101,32,112,105,99,107,108,101,114,115,32,109,101,109,111,0] /* clear_memo() -- Clea */, "i8", ALLOC_NORMAL);
__str58=allocate([103,101,116,118,97,108,117,101,0] /* getvalue\00 */, "i8", ALLOC_NORMAL);
__str59=allocate([103,101,116,118,97,108,117,101,40,41,32,45,45,32,70,105,110,105,115,104,32,112,105,99,107,105,110,103,32,97,32,108,105,115,116,45,98,97,115,101,100,32,112,105,99,107,108,101,0] /* getvalue() -- Finish */, "i8", ALLOC_NORMAL);
_Pickler_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str60=allocate([112,105,99,107,108,101,32,112,114,111,116,111,99,111,108,32,37,100,32,97,115,107,101,100,32,102,111,114,59,32,116,104,101,32,104,105,103,104,101,115,116,32,97,118,97,105,108,97,98,108,101,32,112,114,111,116,111,99,111,108,32,105,115,32,37,100,0] /* pickle protocol %d a */, "i8", ALLOC_NORMAL);
__str61=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
_write_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str62=allocate([97,114,103,117,109,101,110,116,32,109,117,115,116,32,104,97,118,101,32,39,119,114,105,116,101,39,32,97,116,116,114,105,98,117,116,101,0] /* argument must have ' */, "i8", ALLOC_NORMAL);
__str63=allocate([99,111,112,121,95,114,101,103,0] /* copy_reg\00 */, "i8", ALLOC_NORMAL);
_dispatch_table_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str64=allocate([124,105,58,80,105,99,107,108,101,114,0] /* |i:Pickler\00 */, "i8", ALLOC_NORMAL);
__str65=allocate([79,124,105,58,80,105,99,107,108,101,114,0] /* O|i:Pickler\00 */, "i8", ALLOC_NORMAL);
_kwlist_12011=allocate(12, "i8*", ALLOC_NORMAL);
__str66=allocate([102,105,108,101,0] /* file\00 */, "i8", ALLOC_NORMAL);
__str67=allocate([112,114,111,116,111,99,111,108,0] /* protocol\00 */, "i8", ALLOC_NORMAL);
__str68=allocate([112,101,114,115,105,115,116,101,110,116,95,105,100,0] /* persistent_id\00 */, "i8", ALLOC_NORMAL);
__str69=allocate([97,116,116,114,105,98,117,116,101,32,100,101,108,101,116,105,111,110,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* attribute deletion i */, "i8", ALLOC_NORMAL);
__str70=allocate([109,101,109,111,0] /* memo\00 */, "i8", ALLOC_NORMAL);
__str71=allocate([109,101,109,111,32,109,117,115,116,32,98,101,32,97,32,100,105,99,116,105,111,110,97,114,121,0] /* memo must be a dicti */, "i8", ALLOC_NORMAL);
__str72=allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_NORMAL);
__str73=allocate([102,97,115,116,0] /* fast\00 */, "i8", ALLOC_NORMAL);
_Pickler_members=allocate([0, 0, 0, 0, 1, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str74=allocate([105,110,115,116,95,112,101,114,115,105,115,116,101,110,116,95,105,100,0] /* inst_persistent_id\0 */, "i8", ALLOC_NORMAL);
__str75=allocate([80,105,99,107,108,105,110,103,69,114,114,111,114,0] /* PicklingError\00 */, "i8", ALLOC_NORMAL);
_Pickler_getsets=allocate(100, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_Picklertype__doc__=allocate([79,98,106,101,99,116,115,32,116,104,97,116,32,107,110,111,119,32,104,111,119,32,116,111,32,112,105,99,107,108,101,32,111,98,106,101,99,116,115,10,0] /* Objects that know ho */, "i8", ALLOC_NORMAL);
__str76=allocate([99,80,105,99,107,108,101,46,80,105,99,107,108,101,114,0] /* cPickle.Pickler\00 */, "i8", ALLOC_NORMAL);
_Picklertype=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str77=allocate([71,108,111,98,97,108,32,97,110,100,32,105,110,115,116,97,110,99,101,32,112,105,99,107,108,101,115,32,97,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0] /* Global and instance  */, "i8", ALLOC_NORMAL);
__str78=allocate([99,111,117,108,100,32,110,111,116,32,102,105,110,100,32,77,65,82,75,0] /* could not find MARK\ */, "i8", ALLOC_NORMAL);
__str79=allocate([112,105,99,107,108,101,32,100,97,116,97,32,119,97,115,32,116,114,117,110,99,97,116,101,100,0] /* pickle data was trun */, "i8", ALLOC_NORMAL);
__str80=allocate([99,111,117,108,100,32,110,111,116,32,99,111,110,118,101,114,116,32,115,116,114,105,110,103,32,116,111,32,105,110,116,0] /* could not convert st */, "i8", ALLOC_NORMAL);
__str81=allocate([98,111,111,108,101,97,110,32,61,61,32,40,40,80,121,79,98,106,101,99,116,32,42,41,32,38,95,80,121,95,84,114,117,101,83,116,114,117,99,116,41,32,124,124,32,98,111,111,108,101,97,110,32,61,61,32,40,40,80,121,79,98,106,101,99,116,32,42,41,32,38,95,80,121,95,90,101,114,111,83,116,114,117,99,116,41,0] /* boolean == ((PyObjec */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___12572=allocate([108,111,97,100,95,98,111,111,108,0] /* load_bool\00 */, "i8", ALLOC_NORMAL);
__str82=allocate([115,105,122,101,32,61,61,32,49,32,124,124,32,115,105,122,101,32,61,61,32,52,0] /* size == 1 || size == */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___12743=allocate([108,111,97,100,95,99,111,117,110,116,101,100,95,108,111,110,103,0] /* load_counted_long\00 */, "i8", ALLOC_NORMAL);
__str83=allocate([76,79,78,71,32,112,105,99,107,108,101,32,104,97,115,32,110,101,103,97,116,105,118,101,32,98,121,116,101,32,99,111,117,110,116,0] /* LONG pickle has nega */, "i8", ALLOC_NORMAL);
__str84=allocate([99,111,117,108,100,32,110,111,116,32,99,111,110,118,101,114,116,32,115,116,114,105,110,103,32,116,111,32,102,108,111,97,116,0] /* could not convert st */, "i8", ALLOC_NORMAL);
__str85=allocate([105,110,115,101,99,117,114,101,32,115,116,114,105,110,103,32,112,105,99,107,108,101,0] /* insecure string pick */, "i8", ALLOC_NORMAL);
__str86=allocate([66,73,78,83,84,82,73,78,71,32,112,105,99,107,108,101,32,104,97,115,32,110,101,103,97,116,105,118,101,32,98,121,116,101,32,99,111,117,110,116,0] /* BINSTRING pickle has */, "i8", ALLOC_NORMAL);
__str87=allocate([66,73,78,85,78,73,67,79,68,69,32,112,105,99,107,108,101,32,104,97,115,32,110,101,103,97,116,105,118,101,32,98,121,116,101,32,99,111,117,110,116,0] /* BINUNICODE pickle ha */, "i8", ALLOC_NORMAL);
__str88=allocate([98,97,100,32,112,105,99,107,108,101,32,100,97,116,97,0] /* bad pickle data\00 */, "i8", ALLOC_NORMAL);
__str89=allocate([78,69,87,79,66,74,32,101,120,112,101,99,116,101,100,32,97,110,32,97,114,103,32,116,117,112,108,101,46,0] /* NEWOBJ expected an a */, "i8", ALLOC_NORMAL);
__str90=allocate([78,69,87,79,66,74,32,99,108,97,115,115,32,97,114,103,117,109,101,110,116,32,105,115,110,39,116,32,97,32,116,121,112,101,32,111,98,106,101,99,116,0] /* NEWOBJ class argumen */, "i8", ALLOC_NORMAL);
__str91=allocate([78,69,87,79,66,74,32,99,108,97,115,115,32,97,114,103,117,109,101,110,116,32,104,97,115,32,78,85,76,76,32,116,112,95,110,101,119,0] /* NEWOBJ class argumen */, "i8", ALLOC_NORMAL);
__str92=allocate([65,32,108,111,97,100,32,112,101,114,115,105,115,116,101,110,116,32,105,100,32,105,110,115,116,114,117,99,116,105,111,110,32,119,97,115,32,101,110,99,111,117,110,116,101,114,101,100,44,10,98,117,116,32,110,111,32,112,101,114,115,105,115,116,101,110,116,95,108,111,97,100,32,102,117,110,99,116,105,111,110,32,119,97,115,32,115,112,101,99,105,102,105,101,100,46,0] /* A load persistent id */, "i8", ALLOC_NORMAL);
_BadPickleGet=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str93=allocate([110,98,121,116,101,115,32,61,61,32,49,32,124,124,32,110,98,121,116,101,115,32,61,61,32,50,32,124,124,32,110,98,121,116,101,115,32,61,61,32,52,0] /* nbytes == 1 || nbyte */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___14342=allocate([108,111,97,100,95,101,120,116,101,110,115,105,111,110,0] /* load_extension\00 */, "i8", ALLOC_NORMAL);
__str94=allocate([69,88,84,32,115,112,101,99,105,102,105,101,115,32,99,111,100,101,32,60,61,32,48,0] /* EXT specifies code < */, "i8", ALLOC_NORMAL);
_extension_cache=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_inverted_registry=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str95=allocate([117,110,114,101,103,105,115,116,101,114,101,100,32,101,120,116,101,110,115,105,111,110,32,99,111,100,101,32,37,108,100,0] /* unregistered extensi */, "i8", ALLOC_NORMAL);
__str96=allocate([95,105,110,118,101,114,116,101,100,95,114,101,103,105,115,116,114,121,91,37,108,100,93,32,105,115,110,39,116,32,97,32,50,45,116,117,112,108,101,32,111,102,32,115,116,114,105,110,103,115,0] /* _inverted_registry[% */, "i8", ALLOC_NORMAL);
_append_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___setstate___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str97=allocate([115,116,97,116,101,32,105,115,32,110,111,116,32,97,32,100,105,99,116,105,111,110,97,114,121,0] /* state is not a dicti */, "i8", ALLOC_NORMAL);
__str98=allocate([115,108,111,116,32,115,116,97,116,101,32,105,115,32,110,111,116,32,97,32,100,105,99,116,105,111,110,97,114,121,0] /* slot state is not a  */, "i8", ALLOC_NORMAL);
__str99=allocate([105,32,62,61,32,48,0] /* i >= 0\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___15142=allocate([108,111,97,100,95,112,114,111,116,111,0] /* load_proto\00 */, "i8", ALLOC_NORMAL);
__str100=allocate([117,110,115,117,112,112,111,114,116,101,100,32,112,105,99,107,108,101,32,112,114,111,116,111,99,111,108,58,32,37,100,0] /* unsupported pickle p */, "i8", ALLOC_NORMAL);
__str101=allocate([105,110,118,97,108,105,100,32,108,111,97,100,32,107,101,121,44,32,39,37,115,39,46,0] /* invalid load key, '% */, "i8", ALLOC_NORMAL);
__str102=allocate([99,0] /* c\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___15558=allocate([110,111,108,111,97,100,95,101,120,116,101,110,115,105,111,110,0] /* noload_extension\00 */, "i8", ALLOC_NORMAL);
__str103=allocate([108,111,97,100,0] /* load\00 */, "i8", ALLOC_NORMAL);
__str104=allocate([108,111,97,100,40,41,32,45,45,32,76,111,97,100,32,97,32,112,105,99,107,108,101,0] /* load() -- Load a pic */, "i8", ALLOC_NORMAL);
__str105=allocate([110,111,108,111,97,100,0] /* noload\00 */, "i8", ALLOC_NORMAL);
__str106=allocate([110,111,108,111,97,100,40,41,32,45,45,32,110,111,116,32,108,111,97,100,32,97,32,112,105,99,107,108,101,44,32,98,117,116,32,103,111,32,116,104,114,111,117,103,104,32,109,111,115,116,32,111,102,32,116,104,101,32,109,111,116,105,111,110,115,10,10,84,104,105,115,32,102,117,110,99,116,105,111,110,32,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,114,101,97,100,32,112,97,115,116,32,97,32,112,105,99,107,108,101,32,119,105,116,104,111,117,116,32,105,110,115,116,97,110,116,105,97,116,105,110,103,10,97,110,121,32,111,98,106,101,99,116,115,32,111,114,32,105,109,112,111,114,116,105,110,103,32,97,110,121,32,109,111,100,117,108,101,115,46,32,32,73,116,32,99,97,110,32,97,108,115,111,32,98,101,32,117,115,101,100,32,116,111,32,102,105,110,100,32,97,108,108,10,112,101,114,115,105,115,116,101,110,116,32,114,101,102,101,114,101,110,99,101,115,32,119,105,116,104,111,117,116,32,105,110,115,116,97,110,116,105,97,116,105,110,103,32,97,110,121,32,111,98,106,101,99,116,115,32,111,114,32,105,109,112,111,114,116,105,110,103,10,97,110,121,32,109,111,100,117,108,101,115,46,10,0] /* noload() -- not load */, "i8", ALLOC_NORMAL);
_Unpickler_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_readline_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_read_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str107=allocate([97,114,103,117,109,101,110,116,32,109,117,115,116,32,104,97,118,101,32,39,114,101,97,100,39,32,97,110,100,32,39,114,101,97,100,108,105,110,101,39,32,97,116,116,114,105,98,117,116,101,115,0] /* argument must have ' */, "i8", ALLOC_NORMAL);
__str108=allocate([112,101,114,115,105,115,116,101,110,116,95,108,111,97,100,0] /* persistent_load\00 */, "i8", ALLOC_NORMAL);
__str109=allocate([102,105,110,100,95,103,108,111,98,97,108,0] /* find_global\00 */, "i8", ALLOC_NORMAL);
__str110=allocate([85,110,112,105,99,107,108,105,110,103,69,114,114,111,114,0] /* UnpicklingError\00 */, "i8", ALLOC_NORMAL);
__str111=allocate([79,79,124,105,0] /* OO|i\00 */, "i8", ALLOC_NORMAL);
_kwlist_16354=allocate(16, "i8*", ALLOC_NORMAL);
__str112=allocate([111,98,106,0] /* obj\00 */, "i8", ALLOC_NORMAL);
__str113=allocate([79,124,105,58,100,117,109,112,115,0] /* O|i:dumps\00 */, "i8", ALLOC_NORMAL);
_kwlist_16391=allocate(12, "i8*", ALLOC_NORMAL);
__str114=allocate([83,58,108,111,97,100,115,0] /* S:loads\00 */, "i8", ALLOC_NORMAL);
_Unpicklertype__doc__=allocate([79,98,106,101,99,116,115,32,116,104,97,116,32,107,110,111,119,32,104,111,119,32,116,111,32,117,110,112,105,99,107,108,101,0] /* Objects that know ho */, "i8", ALLOC_NORMAL);
__str115=allocate([99,80,105,99,107,108,101,46,85,110,112,105,99,107,108,101,114,0] /* cPickle.Unpickler\00 */, "i8", ALLOC_NORMAL);
_Unpicklertype=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str116=allocate([100,117,109,112,40,111,98,106,44,32,102,105,108,101,44,32,112,114,111,116,111,99,111,108,61,48,41,32,45,45,32,87,114,105,116,101,32,97,110,32,111,98,106,101,99,116,32,105,110,32,112,105,99,107,108,101,32,102,111,114,109,97,116,32,116,111,32,116,104,101,32,103,105,118,101,110,32,102,105,108,101,46,10,10,83,101,101,32,116,104,101,32,80,105,99,107,108,101,114,32,100,111,99,115,116,114,105,110,103,32,102,111,114,32,116,104,101,32,109,101,97,110,105,110,103,32,111,102,32,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,112,114,111,116,111,46,0] /* dump(obj, file, prot */, "i8", ALLOC_NORMAL);
__str117=allocate([100,117,109,112,115,0] /* dumps\00 */, "i8", ALLOC_NORMAL);
__str118=allocate([100,117,109,112,115,40,111,98,106,44,32,112,114,111,116,111,99,111,108,61,48,41,32,45,45,32,82,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,99,111,110,116,97,105,110,105,110,103,32,97,110,32,111,98,106,101,99,116,32,105,110,32,112,105,99,107,108,101,32,102,111,114,109,97,116,46,10,10,83,101,101,32,116,104,101,32,80,105,99,107,108,101,114,32,100,111,99,115,116,114,105,110,103,32,102,111,114,32,116,104,101,32,109,101,97,110,105,110,103,32,111,102,32,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,112,114,111,116,111,46,0] /* dumps(obj, protocol= */, "i8", ALLOC_NORMAL);
__str119=allocate([108,111,97,100,40,102,105,108,101,41,32,45,45,32,76,111,97,100,32,97,32,112,105,99,107,108,101,32,102,114,111,109,32,116,104,101,32,103,105,118,101,110,32,102,105,108,101,0] /* load(file) -- Load a */, "i8", ALLOC_NORMAL);
__str120=allocate([108,111,97,100,115,0] /* loads\00 */, "i8", ALLOC_NORMAL);
__str121=allocate([108,111,97,100,115,40,115,116,114,105,110,103,41,32,45,45,32,76,111,97,100,32,97,32,112,105,99,107,108,101,32,102,114,111,109,32,116,104,101,32,103,105,118,101,110,32,115,116,114,105,110,103,0] /* loads(string) -- Loa */, "i8", ALLOC_NORMAL);
__str122=allocate([80,105,99,107,108,101,114,0] /* Pickler\00 */, "i8", ALLOC_NORMAL);
__str123=allocate([80,105,99,107,108,101,114,40,102,105,108,101,44,32,112,114,111,116,111,99,111,108,61,48,41,32,45,45,32,67,114,101,97,116,101,32,97,32,112,105,99,107,108,101,114,46,10,10,84,104,105,115,32,116,97,107,101,115,32,97,32,102,105,108,101,45,108,105,107,101,32,111,98,106,101,99,116,32,102,111,114,32,119,114,105,116,105,110,103,32,97,32,112,105,99,107,108,101,32,100,97,116,97,32,115,116,114,101,97,109,46,10,84,104,101,32,111,112,116,105,111,110,97,108,32,112,114,111,116,111,32,97,114,103,117,109,101,110,116,32,116,101,108,108,115,32,116,104,101,32,112,105,99,107,108,101,114,32,116,111,32,117,115,101,32,116,104,101,32,103,105,118,101,110,10,112,114,111,116,111,99,111,108,59,32,115,117,112,112,111,114,116,101,100,32,112,114,111,116,111,99,111,108,115,32,97,114,101,32,48,44,32,49,44,32,50,46,32,32,84,104,101,32,100,101,102,97,117,108,116,10,112,114,111,116,111,99,111,108,32,105,115,32,48,44,32,116,111,32,98,101,32,98,97,99,107,119,97,114,100,115,32,99,111,109,112,97,116,105,98,108,101,46,32,32,40,80,114,111,116,111,99,111,108,32,48,32,105,115,32,116,104,101,10,111,110,108,121,32,112,114,111,116,111,99,111,108,32,116,104,97,116,32,99,97,110,32,98,101,32,119,114,105,116,116,101,110,32,116,111,32,97,32,102,105,108,101,32,111,112,101,110,101,100,32,105,110,32,116,101,120,116,10,109,111,100,101,32,97,110,100,32,114,101,97,100,32,98,97,99,107,32,115,117,99,99,101,115,115,102,117,108,108,121,46,32,32,87,104,101,110,32,117,115,105,110,103,32,97,32,112,114,111,116,111,99,111,108,32,104,105,103,104,101,114,10,116,104,97,110,32,48,44,32,109,97,107,101,32,115,117,114,101,32,116,104,101,32,102,105,108,101,32,105,115,32,111,112,101,110,101,100,32,105,110,32,98,105,110,97,114,121,32,109,111,100,101,44,32,98,111,116,104,32,119,104,101,110,10,112,105,99,107,108,105,110,103,32,97,110,100,32,117,110,112,105,99,107,108,105,110,103,46,41,10,10,80,114,111,116,111,99,111,108,32,49,32,105,115,32,109,111,114,101,32,101,102,102,105,99,105,101,110,116,32,116,104,97,110,32,112,114,111,116,111,99,111,108,32,48,59,32,112,114,111,116,111,99,111,108,32,50,32,105,115,10,109,111,114,101,32,101,102,102,105,99,105,101,110,116,32,116,104,97,110,32,112,114,111,116,111,99,111,108,32,49,46,10,10,83,112,101,99,105,102,121,105,110,103,32,97,32,110,101,103,97,116,105,118,101,32,112,114,111,116,111,99,111,108,32,118,101,114,115,105,111,110,32,115,101,108,101,99,116,115,32,116,104,101,32,104,105,103,104,101,115,116,10,112,114,111,116,111,99,111,108,32,118,101,114,115,105,111,110,32,115,117,112,112,111,114,116,101,100,46,32,32,84,104,101,32,104,105,103,104,101,114,32,116,104,101,32,112,114,111,116,111,99,111,108,32,117,115,101,100,44,32,116,104,101,10,109,111,114,101,32,114,101,99,101,110,116,32,116,104,101,32,118,101,114,115,105,111,110,32,111,102,32,80,121,116,104,111,110,32,110,101,101,100,101,100,32,116,111,32,114,101,97,100,32,116,104,101,32,112,105,99,107,108,101,10,112,114,111,100,117,99,101,100,46,10,10,84,104,101,32,102,105,108,101,32,112,97,114,97,109,101,116,101,114,32,109,117,115,116,32,104,97,118,101,32,97,32,119,114,105,116,101,40,41,32,109,101,116,104,111,100,32,116,104,97,116,32,97,99,99,101,112,116,115,32,97,32,115,105,110,103,108,101,10,115,116,114,105,110,103,32,97,114,103,117,109,101,110,116,46,32,32,73,116,32,99,97,110,32,116,104,117,115,32,98,101,32,97,110,32,111,112,101,110,32,102,105,108,101,32,111,98,106,101,99,116,44,32,97,32,83,116,114,105,110,103,73,79,10,111,98,106,101,99,116,44,32,111,114,32,97,110,121,32,111,116,104,101,114,32,99,117,115,116,111,109,32,111,98,106,101,99,116,32,116,104,97,116,32,109,101,101,116,115,32,116,104,105,115,32,105,110,116,101,114,102,97,99,101,46,10,0] /* Pickler(file, protoc */, "i8", ALLOC_NORMAL);
__str124=allocate([85,110,112,105,99,107,108,101,114,0] /* Unpickler\00 */, "i8", ALLOC_NORMAL);
__str125=allocate([85,110,112,105,99,107,108,101,114,40,102,105,108,101,41,32,45,45,32,67,114,101,97,116,101,32,97,110,32,117,110,112,105,99,107,108,101,114,46,0] /* Unpickler(file) -- C */, "i8", ALLOC_NORMAL);
_cPickle_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str126=allocate([95,95,99,108,97,115,115,95,95,0] /* __class__\00 */, "i8", ALLOC_NORMAL);
__str127=allocate([95,95,103,101,116,105,110,105,116,97,114,103,115,95,95,0] /* __getinitargs__\00 */, "i8", ALLOC_NORMAL);
__str128=allocate([95,95,100,105,99,116,95,95,0] /* __dict__\00 */, "i8", ALLOC_NORMAL);
__str129=allocate([95,95,103,101,116,115,116,97,116,101,95,95,0] /* __getstate__\00 */, "i8", ALLOC_NORMAL);
__str130=allocate([95,95,115,101,116,115,116,97,116,101,95,95,0] /* __setstate__\00 */, "i8", ALLOC_NORMAL);
__str131=allocate([95,95,110,97,109,101,95,95,0] /* __name__\00 */, "i8", ALLOC_NORMAL);
__str132=allocate([95,95,109,97,105,110,95,95,0] /* __main__\00 */, "i8", ALLOC_NORMAL);
__str133=allocate([95,95,114,101,100,117,99,101,95,95,0] /* __reduce__\00 */, "i8", ALLOC_NORMAL);
__str134=allocate([95,95,114,101,100,117,99,101,95,101,120,95,95,0] /* __reduce_ex__\00 */, "i8", ALLOC_NORMAL);
__str135=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
__str136=allocate([97,112,112,101,110,100,0] /* append\00 */, "i8", ALLOC_NORMAL);
__str137=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str138=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
__str139=allocate([100,105,115,112,97,116,99,104,95,116,97,98,108,101,0] /* dispatch_table\00 */, "i8", ALLOC_NORMAL);
__str140=allocate([95,101,120,116,101,110,115,105,111,110,95,114,101,103,105,115,116,114,121,0] /* _extension_registry\ */, "i8", ALLOC_NORMAL);
__str141=allocate([95,105,110,118,101,114,116,101,100,95,114,101,103,105,115,116,114,121,0] /* _inverted_registry\0 */, "i8", ALLOC_NORMAL);
__str142=allocate([95,101,120,116,101,110,115,105,111,110,95,99,97,99,104,101,0] /* _extension_cache\00 */, "i8", ALLOC_NORMAL);
__str143=allocate([95,95,98,117,105,108,116,105,110,95,95,0] /* __builtin__\00 */, "i8", ALLOC_NORMAL);
__str144=allocate([95,95,98,117,105,108,116,105,110,115,95,95,0] /* __builtins__\00 */, "i8", ALLOC_NORMAL);
__str145=allocate([100,101,102,32,95,95,115,116,114,95,95,40,115,101,108,102,41,58,10,32,32,114,101,116,117,114,110,32,115,101,108,102,46,97,114,103,115,32,97,110,100,32,40,39,37,115,39,32,37,32,115,101,108,102,46,97,114,103,115,91,48,93,41,32,111,114,32,39,40,119,104,97,116,41,39,10,0] /* def __str__(self):\0 */, "i8", ALLOC_NORMAL);
__str146=allocate([99,80,105,99,107,108,101,46,80,105,99,107,108,101,69,114,114,111,114,0] /* cPickle.PickleError\ */, "i8", ALLOC_NORMAL);
__str147=allocate([99,80,105,99,107,108,101,46,80,105,99,107,108,105,110,103,69,114,114,111,114,0] /* cPickle.PicklingErro */, "i8", ALLOC_NORMAL);
__str148=allocate([100,101,102,32,95,95,115,116,114,95,95,40,115,101,108,102,41,58,10,32,32,97,61,115,101,108,102,46,97,114,103,115,10,32,32,97,61,97,32,97,110,100,32,116,121,112,101,40,97,91,48,93,41,32,111,114,32,39,40,119,104,97,116,41,39,10,32,32,114,101,116,117,114,110,32,39,67,97,110,110,111,116,32,112,105,99,107,108,101,32,37,115,32,111,98,106,101,99,116,115,39,32,37,32,97,10,0] /* def __str__(self):\0 */, "i8", ALLOC_NORMAL);
__str149=allocate([99,80,105,99,107,108,101,46,85,110,112,105,99,107,108,101,97,98,108,101,69,114,114,111,114,0] /* cPickle.Unpickleable */, "i8", ALLOC_NORMAL);
__str150=allocate([99,80,105,99,107,108,101,46,85,110,112,105,99,107,108,105,110,103,69,114,114,111,114,0] /* cPickle.UnpicklingEr */, "i8", ALLOC_NORMAL);
__str151=allocate([99,80,105,99,107,108,101,46,66,97,100,80,105,99,107,108,101,71,101,116,0] /* cPickle.BadPickleGet */, "i8", ALLOC_NORMAL);
__str152=allocate([80,105,99,107,108,101,69,114,114,111,114,0] /* PickleError\00 */, "i8", ALLOC_NORMAL);
__str153=allocate([85,110,112,105,99,107,108,101,97,98,108,101,69,114,114,111,114,0] /* UnpickleableError\00 */, "i8", ALLOC_NORMAL);
__str154=allocate([66,97,100,80,105,99,107,108,101,71,101,116,0] /* BadPickleGet\00 */, "i8", ALLOC_NORMAL);
__str155=allocate([99,83,116,114,105,110,103,73,79,46,99,83,116,114,105,110,103,73,79,95,67,65,80,73,0] /* cStringIO.cStringIO_ */, "i8", ALLOC_NORMAL);
__str156=allocate([49,46,55,49,0] /* 1.71\00 */, "i8", ALLOC_NORMAL);
__str157=allocate([99,80,105,99,107,108,101,0] /* cPickle\00 */, "i8", ALLOC_NORMAL);
__str158=allocate([95,95,118,101,114,115,105,111,110,95,95,0] /* __version__\00 */, "i8", ALLOC_NORMAL);
__str159=allocate([72,73,71,72,69,83,84,95,80,82,79,84,79,67,79,76,0] /* HIGHEST_PROTOCOL\00 */, "i8", ALLOC_NORMAL);
__str160=allocate([50,46,48,0] /* 2.0\00 */, "i8", ALLOC_NORMAL);
__str161=allocate([91,115,115,115,115,115,93,0] /* [sssss]\00 */, "i8", ALLOC_NORMAL);
__str162=allocate([49,46,48,0] /* 1.0\00 */, "i8", ALLOC_NORMAL);
__str163=allocate([49,46,49,0] /* 1.1\00 */, "i8", ALLOC_NORMAL);
__str164=allocate([49,46,50,0] /* 1.2\00 */, "i8", ALLOC_NORMAL);
__str165=allocate([49,46,51,0] /* 1.3\00 */, "i8", ALLOC_NORMAL);
__str166=allocate([102,111,114,109,97,116,95,118,101,114,115,105,111,110,0] /* format_version\00 */, "i8", ALLOC_NORMAL);
__str167=allocate([99,111,109,112,97,116,105,98,108,101,95,102,111,114,109,97,116,115,0] /* compatible_formats\0 */, "i8", ALLOC_NORMAL);
HEAP[_PdataType+12]=__str;
HEAP[_PdataType+24]=(FUNCTION_TABLE_OFFSET + 24);
HEAP[_PdataType+88]=__str1;
HEAP[_buf_9462]=__str9;
HEAP[_buf_9462+4]=__str10;
HEAP[_Pickler_methods]=__str54;
HEAP[_Pickler_methods+4]=(FUNCTION_TABLE_OFFSET + 26);
HEAP[_Pickler_methods+12]=__str55;
HEAP[_Pickler_methods+16]=__str56;
HEAP[_Pickler_methods+20]=(FUNCTION_TABLE_OFFSET + 28);
HEAP[_Pickler_methods+28]=__str57;
HEAP[_Pickler_methods+32]=__str58;
HEAP[_Pickler_methods+36]=(FUNCTION_TABLE_OFFSET + 30);
HEAP[_Pickler_methods+44]=__str59;
HEAP[_kwlist_12011]=__str66;
HEAP[_kwlist_12011+4]=__str67;
HEAP[_Pickler_members]=__str72;
HEAP[_Pickler_members+20]=__str73;
HEAP[_Pickler_getsets]=__str68;
HEAP[_Pickler_getsets+4]=(FUNCTION_TABLE_OFFSET + 32);
HEAP[_Pickler_getsets+8]=(FUNCTION_TABLE_OFFSET + 34);
HEAP[_Pickler_getsets+20]=__str74;
HEAP[_Pickler_getsets+28]=(FUNCTION_TABLE_OFFSET + 36);
HEAP[_Pickler_getsets+40]=__str70;
HEAP[_Pickler_getsets+44]=(FUNCTION_TABLE_OFFSET + 38);
HEAP[_Pickler_getsets+48]=(FUNCTION_TABLE_OFFSET + 40);
HEAP[_Pickler_getsets+60]=__str75;
HEAP[_Pickler_getsets+64]=(FUNCTION_TABLE_OFFSET + 42);
HEAP[_Picklertype+12]=__str76;
HEAP[_Picklertype+24]=(FUNCTION_TABLE_OFFSET + 44);
HEAP[_Picklertype+72]=(FUNCTION_TABLE_OFFSET + 46);
HEAP[_Picklertype+76]=(FUNCTION_TABLE_OFFSET + 48);
HEAP[_Picklertype+88]=_Picklertype__doc__;
HEAP[_Picklertype+92]=(FUNCTION_TABLE_OFFSET + 50);
HEAP[_Picklertype+96]=(FUNCTION_TABLE_OFFSET + 52);
HEAP[_Picklertype+116]=_Pickler_methods;
HEAP[_Picklertype+120]=_Pickler_members;
HEAP[_Picklertype+124]=_Pickler_getsets;
HEAP[_Unpickler_methods]=__str103;
HEAP[_Unpickler_methods+4]=(FUNCTION_TABLE_OFFSET + 54);
HEAP[_Unpickler_methods+12]=__str104;
HEAP[_Unpickler_methods+16]=__str105;
HEAP[_Unpickler_methods+20]=(FUNCTION_TABLE_OFFSET + 56);
HEAP[_Unpickler_methods+28]=__str106;
HEAP[_kwlist_16354]=__str112;
HEAP[_kwlist_16354+4]=__str66;
HEAP[_kwlist_16354+8]=__str67;
HEAP[_kwlist_16391]=__str112;
HEAP[_kwlist_16391+4]=__str67;
HEAP[_Unpicklertype+12]=__str115;
HEAP[_Unpicklertype+24]=(FUNCTION_TABLE_OFFSET + 58);
HEAP[_Unpicklertype+32]=(FUNCTION_TABLE_OFFSET + 60);
HEAP[_Unpicklertype+36]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_Unpicklertype+88]=_Unpicklertype__doc__;
HEAP[_Unpicklertype+92]=(FUNCTION_TABLE_OFFSET + 64);
HEAP[_Unpicklertype+96]=(FUNCTION_TABLE_OFFSET + 66);
HEAP[_cPickle_methods]=__str54;
HEAP[_cPickle_methods+4]=(FUNCTION_TABLE_OFFSET + 68);
HEAP[_cPickle_methods+12]=__str116;
HEAP[_cPickle_methods+16]=__str117;
HEAP[_cPickle_methods+20]=(FUNCTION_TABLE_OFFSET + 70);
HEAP[_cPickle_methods+28]=__str118;
HEAP[_cPickle_methods+32]=__str103;
HEAP[_cPickle_methods+36]=(FUNCTION_TABLE_OFFSET + 72);
HEAP[_cPickle_methods+44]=__str119;
HEAP[_cPickle_methods+48]=__str120;
HEAP[_cPickle_methods+52]=(FUNCTION_TABLE_OFFSET + 74);
HEAP[_cPickle_methods+60]=__str121;
HEAP[_cPickle_methods+64]=__str122;
HEAP[_cPickle_methods+68]=(FUNCTION_TABLE_OFFSET + 76);
HEAP[_cPickle_methods+76]=__str123;
HEAP[_cPickle_methods+80]=__str124;
HEAP[_cPickle_methods+84]=(FUNCTION_TABLE_OFFSET + 78);
HEAP[_cPickle_methods+92]=__str125;

  __globalConstructor__();
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

run();

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}

  return Module;
});

