<<<<<<< HEAD
(function(g){function e(a,b){HEAP[b+100]=HEAP[a+100];HEAP[b+104]=HEAP[a+104];HEAP[b+28]=HEAP[a+28];HEAP[b+32]=HEAP[a+32];_llvm_memcpy_p0i8_p0i8_i32(b+8,a+8,20,1,0);_llvm_memcpy_p0i8_p0i8_i32(b+36,a+36,64,1,0)}function b(a){var b=STACKTOP;STACKTOP+=320;_memset(b,0,320);var c;for(c=-1;;)switch(c){case -1:var d,e,f,g,h;f=b;var j;d=a;_llvm_memcpy_p0i8_p0i8_i32(f,d+36,64,1,0);a:{e=f;c=HEAP[d+100];j=void 0;for(j=-1;;)switch(j){case -1:g=e;h=64;j=
c==0?3:1;break;case 1:h=Math.floor(h/4);h=j=h-1;j=j!=-1?2:3;break;case 2:j=HEAP[g];j=(j&16711935)<<8|(j&-16711936)>>>0>>>8;HEAP[g]=j>>>0>>>16|j<<16;g+=4;h=j=h-1;j=j!=-1?2:3;break;case 3:break a;default:assert(0,"bad label: "+j)}}e=16;c=1;break;case 1:HEAP[f+e*4]=HEAP[f+(e-8)*4]^HEAP[f+(e-3)*4]^HEAP[f+(e-14)*4]^HEAP[f+(e-16)*4];HEAP[f+e*4]=HEAP[f+e*4]>>>0>>>31|HEAP[f+e*4]<<1;e=c=e+1;c=c<=79?1:2;break;case 2:a=HEAP[d+8];g=HEAP[d+8+4];h=HEAP[d+8+8];e=HEAP[d+8+12];c=HEAP[d+8+16];j=f;f=(a>>>0>>>27|a<<
5)+1518500249+c+((e^h)&g^e)+HEAP[j];j+=4;g=g>>>0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+1518500249+e+((h^g)&a^h)+HEAP[j];j+=4;a=a>>>0>>>2|a<<30;e=(c>>>0>>>27|c<<5)+1518500249+h+((g^a)&f^g)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;h=(e>>>0>>>27|e<<5)+1518500249+g+((a^f)&c^a)+HEAP[j];j+=4;c=c>>>0>>>2|c<<30;g=(h>>>0>>>27|h<<5)+1518500249+a+((f^c)&e^f)+HEAP[j];j+=4;e=e>>>0>>>2|e<<30;a=(g>>>0>>>27|g<<5)+1518500249+f+((c^e)&h^c)+HEAP[j];j+=4;h=h>>>0>>>2|h<<30;f=(a>>>0>>>27|a<<5)+1518500249+c+((e^h)&g^e)+HEAP[j];j+=4;g=g>>>
0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+1518500249+e+((h^g)&a^h)+HEAP[j];j+=4;a=a>>>0>>>2|a<<30;e=(c>>>0>>>27|c<<5)+1518500249+h+((g^a)&f^g)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;h=(e>>>0>>>27|e<<5)+1518500249+g+((a^f)&c^a)+HEAP[j];j+=4;c=c>>>0>>>2|c<<30;g=(h>>>0>>>27|h<<5)+1518500249+a+((f^c)&e^f)+HEAP[j];j+=4;e=e>>>0>>>2|e<<30;a=(g>>>0>>>27|g<<5)+1518500249+f+((c^e)&h^c)+HEAP[j];j+=4;h=h>>>0>>>2|h<<30;f=(a>>>0>>>27|a<<5)+1518500249+c+((e^h)&g^e)+HEAP[j];j+=4;g=g>>>0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+1518500249+e+
((h^g)&a^h)+HEAP[j];j+=4;a=a>>>0>>>2|a<<30;e=(c>>>0>>>27|c<<5)+1518500249+h+((g^a)&f^g)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;h=(e>>>0>>>27|e<<5)+1518500249+g+((a^f)&c^a)+HEAP[j];j+=4;c=c>>>0>>>2|c<<30;g=(h>>>0>>>27|h<<5)+1518500249+a+((f^c)&e^f)+HEAP[j];j+=4;e=e>>>0>>>2|e<<30;a=(g>>>0>>>27|g<<5)+1518500249+f+((c^e)&h^c)+HEAP[j];j+=4;h=h>>>0>>>2|h<<30;f=(a>>>0>>>27|a<<5)+1518500249+c+((e^h)&g^e)+HEAP[j];j+=4;g=g>>>0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+1518500249+e+((h^g)&a^h)+HEAP[j];j+=4;a=a>>>0>>>2|a<<30;e=
(c>>>0>>>27|c<<5)+1859775393+h+(a^f^g)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;h=(e>>>0>>>27|e<<5)+1859775393+g+(f^c^a)+HEAP[j];j+=4;c=c>>>0>>>2|c<<30;g=(h>>>0>>>27|h<<5)+1859775393+a+(c^e^f)+HEAP[j];j+=4;e=e>>>0>>>2|e<<30;a=(g>>>0>>>27|g<<5)+1859775393+f+(e^h^c)+HEAP[j];j+=4;h=h>>>0>>>2|h<<30;f=(a>>>0>>>27|a<<5)+1859775393+c+(h^g^e)+HEAP[j];j+=4;g=g>>>0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+1859775393+e+(g^a^h)+HEAP[j];j+=4;a=a>>>0>>>2|a<<30;e=(c>>>0>>>27|c<<5)+1859775393+h+(a^f^g)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;
h=(e>>>0>>>27|e<<5)+1859775393+g+(f^c^a)+HEAP[j];j+=4;c=c>>>0>>>2|c<<30;g=(h>>>0>>>27|h<<5)+1859775393+a+(c^e^f)+HEAP[j];j+=4;e=e>>>0>>>2|e<<30;a=(g>>>0>>>27|g<<5)+1859775393+f+(e^h^c)+HEAP[j];j+=4;h=h>>>0>>>2|h<<30;f=(a>>>0>>>27|a<<5)+1859775393+c+(h^g^e)+HEAP[j];j+=4;g=g>>>0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+1859775393+e+(g^a^h)+HEAP[j];j+=4;a=a>>>0>>>2|a<<30;e=(c>>>0>>>27|c<<5)+1859775393+h+(a^f^g)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;h=(e>>>0>>>27|e<<5)+1859775393+g+(f^c^a)+HEAP[j];j+=4;c=c>>>0>>>2|c<<
30;g=(h>>>0>>>27|h<<5)+1859775393+a+(c^e^f)+HEAP[j];j+=4;e=e>>>0>>>2|e<<30;a=(g>>>0>>>27|g<<5)+1859775393+f+(e^h^c)+HEAP[j];j+=4;h=h>>>0>>>2|h<<30;f=(a>>>0>>>27|a<<5)+1859775393+c+(h^g^e)+HEAP[j];j+=4;g=g>>>0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+1859775393+e+(g^a^h)+HEAP[j];j+=4;a=a>>>0>>>2|a<<30;e=(c>>>0>>>27|c<<5)+1859775393+h+(a^f^g)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;h=(e>>>0>>>27|e<<5)+1859775393+g+(f^c^a)+HEAP[j];j+=4;c=c>>>0>>>2|c<<30;g=(h>>>0>>>27|h<<5)+-1894007588+a+((c|e)&f|c&e)+HEAP[j];j+=4;e=e>>>
0>>>2|e<<30;a=(g>>>0>>>27|g<<5)+-1894007588+f+((e|h)&c|e&h)+HEAP[j];j+=4;h=h>>>0>>>2|h<<30;f=(a>>>0>>>27|a<<5)+-1894007588+c+((h|g)&e|h&g)+HEAP[j];j+=4;g=g>>>0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+-1894007588+e+((g|a)&h|g&a)+HEAP[j];j+=4;a=a>>>0>>>2|a<<30;e=(c>>>0>>>27|c<<5)+-1894007588+h+((a|f)&g|a&f)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;h=(e>>>0>>>27|e<<5)+-1894007588+g+((f|c)&a|f&c)+HEAP[j];j+=4;c=c>>>0>>>2|c<<30;g=(h>>>0>>>27|h<<5)+-1894007588+a+((c|e)&f|c&e)+HEAP[j];j+=4;e=e>>>0>>>2|e<<30;a=(g>>>0>>>27|g<<
5)+-1894007588+f+((e|h)&c|e&h)+HEAP[j];j+=4;h=h>>>0>>>2|h<<30;f=(a>>>0>>>27|a<<5)+-1894007588+c+((h|g)&e|h&g)+HEAP[j];j+=4;g=g>>>0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+-1894007588+e+((g|a)&h|g&a)+HEAP[j];j+=4;a=a>>>0>>>2|a<<30;e=(c>>>0>>>27|c<<5)+-1894007588+h+((a|f)&g|a&f)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;h=(e>>>0>>>27|e<<5)+-1894007588+g+((f|c)&a|f&c)+HEAP[j];j+=4;c=c>>>0>>>2|c<<30;g=(h>>>0>>>27|h<<5)+-1894007588+a+((c|e)&f|c&e)+HEAP[j];j+=4;e=e>>>0>>>2|e<<30;a=(g>>>0>>>27|g<<5)+-1894007588+f+((e|h)&c|e&
h)+HEAP[j];j+=4;h=h>>>0>>>2|h<<30;f=(a>>>0>>>27|a<<5)+-1894007588+c+((h|g)&e|h&g)+HEAP[j];j+=4;g=g>>>0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+-1894007588+e+((g|a)&h|g&a)+HEAP[j];j+=4;a=a>>>0>>>2|a<<30;e=(c>>>0>>>27|c<<5)+-1894007588+h+((a|f)&g|a&f)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;h=(e>>>0>>>27|e<<5)+-1894007588+g+((f|c)&a|f&c)+HEAP[j];j+=4;c=c>>>0>>>2|c<<30;g=(h>>>0>>>27|h<<5)+-1894007588+a+((c|e)&f|c&e)+HEAP[j];j+=4;e=e>>>0>>>2|e<<30;a=(g>>>0>>>27|g<<5)+-1894007588+f+((e|h)&c|e&h)+HEAP[j];j+=4;h=h>>>0>>>2|
h<<30;f=(a>>>0>>>27|a<<5)+-899497514+c+(h^g^e)+HEAP[j];j+=4;g=g>>>0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+-899497514+e+(g^a^h)+HEAP[j];j+=4;a=a>>>0>>>2|a<<30;e=(c>>>0>>>27|c<<5)+-899497514+h+(a^f^g)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;h=(e>>>0>>>27|e<<5)+-899497514+g+(f^c^a)+HEAP[j];j+=4;c=c>>>0>>>2|c<<30;g=(h>>>0>>>27|h<<5)+-899497514+a+(c^e^f)+HEAP[j];j+=4;e=e>>>0>>>2|e<<30;a=(g>>>0>>>27|g<<5)+-899497514+f+(e^h^c)+HEAP[j];j+=4;h=h>>>0>>>2|h<<30;f=(a>>>0>>>27|a<<5)+-899497514+c+(h^g^e)+HEAP[j];j+=4;g=g>>>0>>>
2|g<<30;c=(f>>>0>>>27|f<<5)+-899497514+e+(g^a^h)+HEAP[j];j+=4;a=a>>>0>>>2|a<<30;e=(c>>>0>>>27|c<<5)+-899497514+h+(a^f^g)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;h=(e>>>0>>>27|e<<5)+-899497514+g+(f^c^a)+HEAP[j];j+=4;c=c>>>0>>>2|c<<30;g=(h>>>0>>>27|h<<5)+-899497514+a+(c^e^f)+HEAP[j];j+=4;e=e>>>0>>>2|e<<30;a=(g>>>0>>>27|g<<5)+-899497514+f+(e^h^c)+HEAP[j];j+=4;h=h>>>0>>>2|h<<30;f=(a>>>0>>>27|a<<5)+-899497514+c+(h^g^e)+HEAP[j];j+=4;g=g>>>0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+-899497514+e+(g^a^h)+HEAP[j];j+=4;a=a>>>0>>>
2|a<<30;e=(c>>>0>>>27|c<<5)+-899497514+h+(a^f^g)+HEAP[j];j+=4;f=f>>>0>>>2|f<<30;h=(e>>>0>>>27|e<<5)+-899497514+g+(f^c^a)+HEAP[j];j+=4;c=c>>>0>>>2|c<<30;g=(h>>>0>>>27|h<<5)+-899497514+a+(c^e^f)+HEAP[j];j+=4;e=e>>>0>>>2|e<<30;a=(g>>>0>>>27|g<<5)+-899497514+f+(e^h^c)+HEAP[j];j+=4;h=h>>>0>>>2|h<<30;f=(a>>>0>>>27|a<<5)+-899497514+c+(h^g^e)+HEAP[j];j+=4;g=g>>>0>>>2|g<<30;c=(f>>>0>>>27|f<<5)+-899497514+e+(g^a^h)+HEAP[j];a=a>>>0>>>2|a<<30;HEAP[d+8]=c+HEAP[d+8];HEAP[d+8+4]=f+HEAP[d+8+4];HEAP[d+8+8]=a+HEAP[d+
8+8];HEAP[d+8+12]=g+HEAP[d+8+12];HEAP[d+8+16]=h+HEAP[d+8+16];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}function a(a,c,d){var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j,k,l;g=a;h=c;j=d;l=j*8+HEAP[g+28];e=HEAP[g+28]>l?1:2;break;case 1:HEAP[g+32]+=1;e=2;break;case 2:HEAP[g+28]=l;HEAP[g+32]=(j>>>29)+HEAP[g+32];e=HEAP[g+104]!=0?3:7;break;case 3:k=64-HEAP[g+104];e=k>j?4:5;break;case 4:k=j;e=5;break;case 5:_llvm_memcpy_p0i8_p0i8_i32(g+36+HEAP[g+104],h,k,1,0);j-=k;h+=k;HEAP[g+104]=k+HEAP[g+
104];e=HEAP[g+104]==64?6:10;break;case 6:b(g);e=7;break;case 7:var m=g+36,n=h;j>63?(f=7,e=8):(f=7,e=9);break;case 8:_llvm_memcpy_p0i8_p0i8_i32(f==8?o:m,f==8?p:n,64,1,0);h+=64;j-=64;b(g);var o=g+36,p=h;j>63?e=f=8:(f=8,e=9);break;case 9:_llvm_memcpy_p0i8_p0i8_i32(f==7?m:o,f==7?n:p,j,1,0);HEAP[g+104]=j;e=10;break;case 10:return;default:assert(0,"bad label: "+e)}}function c(a,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j;e=a;f=c;h=HEAP[f+28];j=HEAP[f+32];g=h>>>3&63;HEAP[f+36+g]=-128;g+=1;var k=
g;d=g>56?1:2;break;case 1:_llvm_memset_p0i8_i32(f+36+g,0,64-k,1,0);b(f);_llvm_memset_p0i8_i32(f+36,0,56,1,0);d=3;break;case 2:_llvm_memset_p0i8_i32(f+36+g,0,56-k,1,0);d=3;break;case 3:HEAP[f+36+56]=j>>>24&255;HEAP[f+36+57]=j>>>16&255;HEAP[f+36+58]=j>>>8&255;HEAP[f+36+59]=j&255;HEAP[f+36+60]=h>>>24&255;HEAP[f+36+61]=h>>>16&255;HEAP[f+36+62]=h>>>8&255;HEAP[f+36+63]=h&255;b(f);HEAP[e]=HEAP[f+8]>>>0>>>24&255;HEAP[e+1]=HEAP[f+8]>>>0>>>16&255;HEAP[e+2]=HEAP[f+8]>>>0>>>8&255;HEAP[e+3]=HEAP[f+8]&255;HEAP[e+
4]=HEAP[f+8+4]>>>0>>>24&255;HEAP[e+5]=HEAP[f+8+4]>>>0>>>16&255;HEAP[e+6]=HEAP[f+8+4]>>>0>>>8&255;HEAP[e+7]=HEAP[f+8+4]&255;HEAP[e+8]=HEAP[f+8+8]>>>0>>>24&255;HEAP[e+9]=HEAP[f+8+8]>>>0>>>16&255;HEAP[e+10]=HEAP[f+8+8]>>>0>>>8&255;HEAP[e+11]=HEAP[f+8+8]&255;HEAP[e+12]=HEAP[f+8+12]>>>0>>>24&255;HEAP[e+13]=HEAP[f+8+12]>>>0>>>16&255;HEAP[e+14]=HEAP[f+8+12]>>>0>>>8&255;HEAP[e+15]=HEAP[f+8+12]&255;HEAP[e+16]=HEAP[f+8+16]>>>0>>>24&255;HEAP[e+17]=HEAP[f+8+16]>>>0>>>16&255;HEAP[e+18]=HEAP[f+8+16]>>>0>>>8&255;
HEAP[e+19]=HEAP[f+8+16]&255;return;default:assert(0,"bad label: "+d)}}function d(){h=allocate([82,101,116,117,114,110,32,97,32,99,111,112,121,32,111,102,32,116,104,101,32,104,97,115,104,105,110,103,32,111,98,106,101,99,116,46,0],"i8",ALLOC_NORMAL);j=allocate([82,101,116,117,114,110,32,116,104,101,32,100,105,103,101,115,116,32,118,97,108,117,101,32,97,115,32,97,32,115,116,114,105,110,103,32,111,102,32,98,105,110,97,114,121,32,100,97,116,97,46,0],"i8",ALLOC_NORMAL);k=allocate([82,101,116,117,114,110,
32,116,104,101,32,100,105,103,101,115,116,32,118,97,108,117,101,32,97,115,32,97,32,115,116,114,105,110,103,32,111,102,32,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,115,46,0],"i8",ALLOC_NORMAL);l=allocate([85,112,100,97,116,101,32,116,104,105,115,32,104,97,115,104,105,110,103,32,111,98,106,101,99,116,39,115,32,115,116,97,116,101,32,119,105,116,104,32,116,104,101,32,112,114,111,118,105,100,101,100,32,115,116,114,105,110,103,46,0],"i8",ALLOC_NORMAL);m=allocate([115,42,58,117,112,
100,97,116,101,0],"i8",ALLOC_NORMAL);n=allocate([99,111,112,121,0],"i8",ALLOC_NORMAL);o=allocate([100,105,103,101,115,116,0],"i8",ALLOC_NORMAL);p=allocate([104,101,120,100,105,103,101,115,116,0],"i8",ALLOC_NORMAL);q=allocate([117,112,100,97,116,101,0],"i8",ALLOC_NORMAL);r=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",
0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);u=allocate([83,72,65,49,0],"i8",
ALLOC_NORMAL);s=allocate([100,105,103,101,115,116,95,115,105,122,101,0],"i8",ALLOC_NORMAL);t=allocate([98,108,111,99,107,95,115,105,122,101,0],"i8",ALLOC_NORMAL);v=allocate([110,97,109,101,0],"i8",ALLOC_NORMAL);w=allocate([100,105,103,101,115,116,115,105,122,101,0],"i8",ALLOC_NORMAL);x=allocate(100,["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",
0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);y=allocate([95,115,
104,97,46,115,104,97,0],"i8",ALLOC_NORMAL);z=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131563,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",
0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",
0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",
0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);C=allocate([82,101,116,117,114,110,32,97,32,110,101,119,
32,83,72,65,32,104,97,115,104,105,110,103,32,111,98,106,101,99,116,46,32,32,65,110,32,111,112,116,105,111,110,97,108,32,115,116,114,105,110,103,32,97,114,103,117,109,101,110,116,10,109,97,121,32,98,101,32,112,114,111,118,105,100,101,100,59,32,105,102,32,112,114,101,115,101,110,116,44,32,116,104,105,115,32,115,116,114,105,110,103,32,119,105,108,108,32,98,101,32,97,117,116,111,109,97,116,105,99,97,108,108,121,10,104,97,115,104,101,100,46,0],"i8",ALLOC_NORMAL);A=allocate([124,115,42,58,110,101,119,0],
"i8",ALLOC_NORMAL);G=allocate(8,"i8*",ALLOC_NORMAL);E=allocate([115,116,114,105,110,103,0],"i8",ALLOC_NORMAL);D=allocate([110,101,119,0],"i8",ALLOC_NORMAL);R=allocate([0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);M=allocate([95,115,104,97,0],"i8",
ALLOC_NORMAL);L=allocate([98,108,111,99,107,115,105,122,101,0],"i8",ALLOC_NORMAL);HEAP[r]=n;HEAP[r+4]=g+2;HEAP[r+12]=h;HEAP[r+16]=o;HEAP[r+20]=g+4;HEAP[r+28]=j;HEAP[r+32]=p;HEAP[r+36]=g+6;HEAP[r+44]=k;HEAP[r+48]=q;HEAP[r+52]=g+8;HEAP[r+60]=l;HEAP[x]=s;HEAP[x+4]=g+10;HEAP[x+20]=t;HEAP[x+24]=g+12;HEAP[x+40]=v;HEAP[x+44]=g+14;HEAP[x+60]=w;HEAP[x+64]=g+10;HEAP[z+12]=y;HEAP[z+24]=g+16;HEAP[z+116]=r;HEAP[z+124]=x;HEAP[G]=E;HEAP[R]=D;HEAP[R+4]=g+18;HEAP[R+12]=C}var f={arguments:[]},h,j,k,l,m,n,o,p,q,r,u,
s,t,v,w,x,y,z,C,A,G,E,D,R,M,L;f._init_sha=function(){var a;for(a=-1;;)switch(a){case -1:var b;HEAP[z+4]=_PyType_Type;a=_PyType_Ready(z)<0?3:1;break;case 1:b=_Py_InitModule4(M,R,0,0,1013);a=b==0?3:2;break;case 2:_PyModule_AddIntConstant(b,L,1);_PyModule_AddIntConstant(b,w,20);_PyModule_AddIntConstant(b,s,20);a=3;break;case 3:return;default:assert(0,"bad label: "+a)}};FUNCTION_TABLE=FUNCTION_TABLE.concat([0,0,function(a){var b;for(b=-1;;)switch(b){case -1:var c,d,f;c=a;f=__PyObject_New(z);b=f==0?1:
2;break;case 1:d=0;b=3;break;case 2:e(c,f);d=f;b=3;break;case 3:return a=d;default:assert(0,"bad label: "+b)}},0,function(a){var b=STACKTOP;STACKTOP+=128;_memset(b,0,128);var d=b+20;e(a,d);c(b,d);a=_PyString_FromStringAndSize(b,20);STACKTOP=b;return a},0,function(a){var b=STACKTOP;STACKTOP+=128;_memset(b,0,128);var d;for(d=-1;;)switch(d){case -1:var f,g,h,j=b,k=b+20,l,m,n;e(a,k);c(j,k);k=_PyString_FromStringAndSize(0,40);d=k==0?1:2;break;case 1:h=0;d=15;break;case 2:l=_PyString_AsString(k);d=l==0?
3:6;break;case 3:HEAP[k]-=1;d=HEAP[k]==0?4:5;break;case 4:FUNCTION_TABLE[HEAP[HEAP[k+4]+24]](k);d=5;break;case 5:h=0;d=15;break;case 6:m=n=0;d=n<=19?7:14;break;case 7:var o=d=HEAP[j+m]>>>4&15;d=(HEAP[j+m]>>>4&15)>9?8:9;break;case 8:g=o+87;d=10;break;case 9:g=o+48;d=10;break;case 10:d=g;HEAP[l+n]=d;n+=1;var p=d=HEAP[j+m]&15;d=(HEAP[j+m]&15)>9?11:12;break;case 11:f=p+87;d=13;break;case 12:f=p+48;d=13;break;case 13:d=f;HEAP[l+n]=d;n+=1;m=d=m+1;d=d<=19?7:14;break;case 14:h=k;d=15;break;case 15:return a=
h,STACKTOP=b,a;default:assert(0,"bad label: "+d)}},0,function(b,c){var d=STACKTOP;STACKTOP+=52;_memset(d,0,52);var e;for(e=-1;;)switch(e){case -1:var f,g,h=d;f=b;e=_PyArg_ParseTuple(c,m,allocate([h,0,0,0],["%struct.Py_buffer*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=3;break;case 2:a(f,HEAP[h],HEAP[h+8]);_PyBuffer_Release(h);HEAP[__Py_NoneStruct]+=1;g=__Py_NoneStruct;e=3;break;case 3:return e=g,STACKTOP=d,e;default:assert(0,"bad label: "+e)}},0,function(){return _PyInt_FromLong(20)},0,function(){return _PyInt_FromLong(64)},
0,function(){return _PyString_FromStringAndSize(u,4)},0,function(a){_PyObject_Free(a)},0,function(b,c,d){b=STACKTOP;STACKTOP+=52;_memset(b,0,52);var e;for(e=-1;;)switch(e){case -1:var f,g,h,j=b;e=c;f=d;_llvm_memset_p0i8_i32(j,0,52,4,0);e=_PyArg_ParseTupleAndKeywords(e,f,A,G,allocate([j,0,0,0],["%struct.Py_buffer*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=11;break;case 2:h=__PyObject_New(z);e=h==0?3:4;break;case 3:_PyBuffer_Release(j);g=0;e=11;break;case 4:a:{e=h;f=STACKTOP;STACKTOP+=4;_memset(f,
0,4);for(var k=void 0,k=-1;;)switch(k){case -1:var l,k=f;l=e;HEAP[k]=1;HEAP[l+100]=0;k=HEAP[k]==1?1:2;break;case 1:HEAP[l+100]=1;k=2;break;case 2:HEAP[l+8]=1732584193;HEAP[l+8+4]=-271733879;HEAP[l+8+8]=-1732584194;HEAP[l+8+12]=271733878;HEAP[l+8+16]=-1009589776;HEAP[l+28]=0;HEAP[l+32]=0;HEAP[l+104]=0;STACKTOP=f;break a;default:assert(0,"bad label: "+k)}}e=_PyErr_Occurred()!=0?5:8;break;case 5:HEAP[h]-=1;e=HEAP[h]==0?6:7;break;case 6:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);e=7;break;case 7:_PyBuffer_Release(j);
g=0;e=11;break;case 8:e=HEAP[j+8]>0?9:10;break;case 9:a(h,HEAP[j],HEAP[j+8]);e=10;break;case 10:_PyBuffer_Release(j);g=h;e=11;break;case 11:return c=g,STACKTOP=b,c;default:assert(0,"bad label: "+e)}},0]);f.run=d;d();return f});
=======
"use strict";

// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET) {
  var Module = {};
  var args = [];
  Module.arguments = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime essentials
//========================================

var __globalConstructor__ = function globalConstructor() {
}

// === Body ===



var $0___SIZE = 80; // %0
  
var $1___SIZE = 16; // %1
  
var $2___SIZE = 100; // %2
  
var $3___SIZE = 20; // %3
  
var $4___SIZE = 196; // %4
  
var $5___SIZE = 32; // %5
  
var $struct_FILE___SIZE = 148; // %struct.FILE
  var $struct_FILE___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,70,71,72,76,84,88,92,96,100,104,108];
var $struct_PyBufferProcs___SIZE = 24; // %struct.PyBufferProcs
  
var $struct_PyGetSetDef___SIZE = 20; // %struct.PyGetSetDef
  
var $struct_PyMappingMethods___SIZE = 12; // %struct.PyMappingMethods
  
var $struct_PyMemberDef___SIZE = 20; // %struct.PyMemberDef
  
var $struct_PyMethodDef___SIZE = 16; // %struct.PyMethodDef
  
var $struct_PyNumberMethods___SIZE = 156; // %struct.PyNumberMethods
  
var $struct_PyObject___SIZE = 8; // %struct.PyObject
  
var $struct_PySequenceMethods___SIZE = 40; // %struct.PySequenceMethods
  
var $struct_Py_buffer___SIZE = 52; // %struct.Py_buffer
  var $struct_Py_buffer___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,48];
var $struct_SHAobject___SIZE = 108; // %struct.SHAobject
  var $struct_SHAobject___FLATTENER = [0,4,8,28,32,36,100,104];
var $struct__IO_marker___SIZE = 12; // %struct._IO_marker
  
var $struct__typeobject___SIZE = 196; // %struct._typeobject
  
var _SHA_copy__doc__;
var _SHA_digest__doc__;
var _SHA_hexdigest__doc__;
var _SHA_update__doc__;
var __str;

var __str1;
var __str2;
var __str3;
var __str4;
var _SHA_methods;
var __str5;
var __str6;
var __str7;
var __str8;
var __str9;
var _SHA_getseters;
var __str10;
var _SHAtype;
var _SHA_new__doc__;
var __str11;
var _kwlist_9310;
var __str12;
var __str13;
var _SHA_functions;

var __str14;
var __str15;



















  function _longReverse($buffer, $Endianness) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $buffer_addr;
        var $byteCount_addr;
        var $Endianness_addr;
        var $value;
        $buffer_addr=$buffer;
        $byteCount_addr=64;
        $Endianness_addr=$Endianness;
        var $0=$Endianness_addr; //@line 62 "shamodule.c"
        var $1=($0)==0; //@line 62 "shamodule.c"
        if ($1) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 62 "shamodule.c"
      case 1: // $bb
        var $2=$byteCount_addr; //@line 65 "shamodule.c"
        var $3=Math.floor(($2)/4); //@line 65 "shamodule.c"
        $byteCount_addr=$3; //@line 65 "shamodule.c"
        var $4=$byteCount_addr; //@line 66 "shamodule.c"
        var $5=($4) - 1; //@line 66 "shamodule.c"
        $byteCount_addr=$5; //@line 66 "shamodule.c"
        var $6=($5)!=-1; //@line 66 "shamodule.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 66 "shamodule.c"
      case 2: // $bb1
        var $7=$buffer_addr; //@line 67 "shamodule.c"
        var $8=HEAP[$7]; //@line 67 "shamodule.c"
        $value=$8; //@line 67 "shamodule.c"
        var $9=$value; //@line 68 "shamodule.c"
        var $10=($9) & -16711936; //@line 68 "shamodule.c"
        var $11=($10) >>> 8; //@line 68 "shamodule.c"
        var $12=$value; //@line 68 "shamodule.c"
        var $13=($12) & 16711935; //@line 68 "shamodule.c"
        var $14=($13) << 8; //@line 68 "shamodule.c"
        var $15=($14) | ($11); //@line 68 "shamodule.c"
        $value=$15; //@line 68 "shamodule.c"
        var $16=$value; //@line 70 "shamodule.c"
        var $17=($16) >>> 16; //@line 70 "shamodule.c"
        var $18=($16) << 16; //@line 70 "shamodule.c"
        var $19=($17) | ($18); //@line 70 "shamodule.c"
        var $20=$buffer_addr; //@line 70 "shamodule.c"
        HEAP[$20]=$19; //@line 70 "shamodule.c"
        var $21=$buffer_addr; //@line 70 "shamodule.c"
        var $22=$21+4; //@line 70 "shamodule.c"
        $buffer_addr=$22; //@line 70 "shamodule.c"
        var $23=$byteCount_addr; //@line 66 "shamodule.c"
        var $24=($23) - 1; //@line 66 "shamodule.c"
        $byteCount_addr=$24; //@line 66 "shamodule.c"
        var $25=($24)!=-1; //@line 66 "shamodule.c"
        if ($25) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 66 "shamodule.c"
      case 3: // $return
        ;
        return; //@line 63 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHAcopy($src, $dest) {
    ;
    var __label__;
  
    var $src_addr;
    var $dest_addr;
    $src_addr=$src;
    $dest_addr=$dest;
    var $0=$src_addr; //@line 76 "shamodule.c"
    var $1=$0+100; //@line 76 "shamodule.c"
    var $2=HEAP[$1]; //@line 76 "shamodule.c"
    var $3=$dest_addr; //@line 76 "shamodule.c"
    var $4=$3+100; //@line 76 "shamodule.c"
    HEAP[$4]=$2; //@line 76 "shamodule.c"
    var $5=$src_addr; //@line 77 "shamodule.c"
    var $6=$5+104; //@line 77 "shamodule.c"
    var $7=HEAP[$6]; //@line 77 "shamodule.c"
    var $8=$dest_addr; //@line 77 "shamodule.c"
    var $9=$8+104; //@line 77 "shamodule.c"
    HEAP[$9]=$7; //@line 77 "shamodule.c"
    var $10=$src_addr; //@line 78 "shamodule.c"
    var $11=$10+28; //@line 78 "shamodule.c"
    var $12=HEAP[$11]; //@line 78 "shamodule.c"
    var $13=$dest_addr; //@line 78 "shamodule.c"
    var $14=$13+28; //@line 78 "shamodule.c"
    HEAP[$14]=$12; //@line 78 "shamodule.c"
    var $15=$src_addr; //@line 79 "shamodule.c"
    var $16=$15+32; //@line 79 "shamodule.c"
    var $17=HEAP[$16]; //@line 79 "shamodule.c"
    var $18=$dest_addr; //@line 79 "shamodule.c"
    var $19=$18+32; //@line 79 "shamodule.c"
    HEAP[$19]=$17; //@line 79 "shamodule.c"
    var $20=$src_addr; //@line 80 "shamodule.c"
    var $21=$20+8; //@line 80 "shamodule.c"
    var $22=$21; //@line 80 "shamodule.c"
    var $23=$dest_addr; //@line 80 "shamodule.c"
    var $24=$23+8; //@line 80 "shamodule.c"
    var $25=$24; //@line 80 "shamodule.c"
    var $26=$25; //@line 80 "shamodule.c"
    var $27=$22; //@line 80 "shamodule.c"
    _llvm_memcpy_p0i8_p0i8_i32($26, $27, 20, 1, 0); //@line 80 "shamodule.c"
    var $28=$src_addr; //@line 81 "shamodule.c"
    var $29=$28+36; //@line 81 "shamodule.c"
    var $30=$29; //@line 81 "shamodule.c"
    var $31=$dest_addr; //@line 81 "shamodule.c"
    var $32=$31+36; //@line 81 "shamodule.c"
    var $33=$32; //@line 81 "shamodule.c"
    _llvm_memcpy_p0i8_p0i8_i32($33, $30, 64, 1, 0); //@line 81 "shamodule.c"
    ;
    return; //@line 82 "shamodule.c"
  }
  

  function _sha_transform($sha_info) {
    var __stackBase__  = STACKTOP; STACKTOP += 320; _memset(__stackBase__, 0, 320);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $sha_info_addr;
        var $i;
        var $T;
        var $A;
        var $B;
        var $C;
        var $D;
        var $E;
        var $W=__stackBase__;
        var $WP;
        $sha_info_addr=$sha_info;
        var $0=$sha_info_addr; //@line 166 "shamodule.c"
        var $1=$0+36; //@line 166 "shamodule.c"
        var $2=$1; //@line 166 "shamodule.c"
        var $W1=$W; //@line 166 "shamodule.c"
        var $W12=$W1; //@line 166 "shamodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($W12, $2, 64, 1, 0); //@line 166 "shamodule.c"
        var $3=$sha_info_addr; //@line 167 "shamodule.c"
        var $4=$3+100; //@line 167 "shamodule.c"
        var $5=HEAP[$4]; //@line 167 "shamodule.c"
        var $W3=$W; //@line 167 "shamodule.c"
        _longReverse($W3, $5); //@line 167 "shamodule.c"
        $i=16; //@line 169 "shamodule.c"
        __label__ = 1; break;
      case 1: // $bb
        var $6=$i; //@line 170 "shamodule.c"
        var $7=$i; //@line 170 "shamodule.c"
        var $8=($7) - 3; //@line 170 "shamodule.c"
        var $9=$W+$8*4; //@line 170 "shamodule.c"
        var $10=HEAP[$9]; //@line 170 "shamodule.c"
        var $11=$i; //@line 170 "shamodule.c"
        var $12=($11) - 8; //@line 170 "shamodule.c"
        var $13=$W+$12*4; //@line 170 "shamodule.c"
        var $14=HEAP[$13]; //@line 170 "shamodule.c"
        var $15=$i; //@line 170 "shamodule.c"
        var $16=($15) - 14; //@line 170 "shamodule.c"
        var $17=$W+$16*4; //@line 170 "shamodule.c"
        var $18=HEAP[$17]; //@line 170 "shamodule.c"
        var $19=$i; //@line 170 "shamodule.c"
        var $20=($19) - 16; //@line 170 "shamodule.c"
        var $21=$W+$20*4; //@line 170 "shamodule.c"
        var $22=HEAP[$21]; //@line 170 "shamodule.c"
        var $23=($14) ^ ($10); //@line 170 "shamodule.c"
        var $24=($23) ^ ($18); //@line 170 "shamodule.c"
        var $25=($24) ^ ($22); //@line 170 "shamodule.c"
        var $26=$W+$6*4; //@line 170 "shamodule.c"
        HEAP[$26]=$25; //@line 170 "shamodule.c"
        var $27=$i; //@line 173 "shamodule.c"
        var $28=$i; //@line 173 "shamodule.c"
        var $29=$W+$28*4; //@line 173 "shamodule.c"
        var $30=HEAP[$29]; //@line 173 "shamodule.c"
        var $31=($30) >>> 31; //@line 173 "shamodule.c"
        var $32=($30) << 1; //@line 173 "shamodule.c"
        var $33=($31) | ($32); //@line 173 "shamodule.c"
        var $34=$W+$27*4; //@line 173 "shamodule.c"
        HEAP[$34]=$33; //@line 173 "shamodule.c"
        var $35=$i; //@line 169 "shamodule.c"
        var $36=($35) + 1; //@line 169 "shamodule.c"
        $i=$36; //@line 169 "shamodule.c"
        var $37=($36) <= 79; //@line 169 "shamodule.c"
        if ($37) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 169 "shamodule.c"
      case 2: // $bb5
        var $38=$sha_info_addr; //@line 175 "shamodule.c"
        var $39=$38+8; //@line 175 "shamodule.c"
        var $40=$39; //@line 175 "shamodule.c"
        var $41=HEAP[$40]; //@line 175 "shamodule.c"
        $A=$41; //@line 175 "shamodule.c"
        var $42=$sha_info_addr; //@line 176 "shamodule.c"
        var $43=$42+8; //@line 176 "shamodule.c"
        var $44=$43+4; //@line 176 "shamodule.c"
        var $45=HEAP[$44]; //@line 176 "shamodule.c"
        $B=$45; //@line 176 "shamodule.c"
        var $46=$sha_info_addr; //@line 177 "shamodule.c"
        var $47=$46+8; //@line 177 "shamodule.c"
        var $48=$47+8; //@line 177 "shamodule.c"
        var $49=HEAP[$48]; //@line 177 "shamodule.c"
        $C=$49; //@line 177 "shamodule.c"
        var $50=$sha_info_addr; //@line 178 "shamodule.c"
        var $51=$50+8; //@line 178 "shamodule.c"
        var $52=$51+12; //@line 178 "shamodule.c"
        var $53=HEAP[$52]; //@line 178 "shamodule.c"
        $D=$53; //@line 178 "shamodule.c"
        var $54=$sha_info_addr; //@line 179 "shamodule.c"
        var $55=$54+8; //@line 179 "shamodule.c"
        var $56=$55+16; //@line 179 "shamodule.c"
        var $57=HEAP[$56]; //@line 179 "shamodule.c"
        $E=$57; //@line 179 "shamodule.c"
        var $W6=$W; //@line 180 "shamodule.c"
        $WP=$W6; //@line 180 "shamodule.c"
        var $58=$A; //@line 182 "shamodule.c"
        var $59=($58) >>> 27; //@line 182 "shamodule.c"
        var $60=($58) << 5; //@line 182 "shamodule.c"
        var $61=($59) | ($60); //@line 182 "shamodule.c"
        var $62=$C; //@line 182 "shamodule.c"
        var $63=$D; //@line 182 "shamodule.c"
        var $64=($63) ^ ($62); //@line 182 "shamodule.c"
        var $65=$B; //@line 182 "shamodule.c"
        var $66=($64) & ($65); //@line 182 "shamodule.c"
        var $67=$D; //@line 182 "shamodule.c"
        var $68=($66) ^ ($67); //@line 182 "shamodule.c"
        var $69=$E; //@line 182 "shamodule.c"
        var $70=$WP; //@line 182 "shamodule.c"
        var $71=HEAP[$70]; //@line 182 "shamodule.c"
        var $72=($61) + 1518500249; //@line 182 "shamodule.c"
        var $73=($72) + ($69); //@line 182 "shamodule.c"
        var $74=($73) + ($68); //@line 182 "shamodule.c"
        var $75=($74) + ($71); //@line 182 "shamodule.c"
        $T=$75; //@line 182 "shamodule.c"
        var $76=$WP; //@line 182 "shamodule.c"
        var $77=$76+4; //@line 182 "shamodule.c"
        $WP=$77; //@line 182 "shamodule.c"
        var $78=$B; //@line 182 "shamodule.c"
        var $79=($78) >>> 2; //@line 182 "shamodule.c"
        var $80=($78) << 30; //@line 182 "shamodule.c"
        var $81=($79) | ($80); //@line 182 "shamodule.c"
        $B=$81; //@line 182 "shamodule.c"
        var $82=$T; //@line 182 "shamodule.c"
        var $83=($82) >>> 27; //@line 182 "shamodule.c"
        var $84=($82) << 5; //@line 182 "shamodule.c"
        var $85=($83) | ($84); //@line 182 "shamodule.c"
        var $86=$B; //@line 182 "shamodule.c"
        var $87=$C; //@line 182 "shamodule.c"
        var $88=($87) ^ ($86); //@line 182 "shamodule.c"
        var $89=$A; //@line 182 "shamodule.c"
        var $90=($88) & ($89); //@line 182 "shamodule.c"
        var $91=$C; //@line 182 "shamodule.c"
        var $92=($90) ^ ($91); //@line 182 "shamodule.c"
        var $93=$D; //@line 182 "shamodule.c"
        var $94=$WP; //@line 182 "shamodule.c"
        var $95=HEAP[$94]; //@line 182 "shamodule.c"
        var $96=($85) + 1518500249; //@line 182 "shamodule.c"
        var $97=($96) + ($93); //@line 182 "shamodule.c"
        var $98=($97) + ($92); //@line 182 "shamodule.c"
        var $99=($98) + ($95); //@line 182 "shamodule.c"
        $E=$99; //@line 182 "shamodule.c"
        var $100=$WP; //@line 182 "shamodule.c"
        var $101=$100+4; //@line 182 "shamodule.c"
        $WP=$101; //@line 182 "shamodule.c"
        var $102=$A; //@line 182 "shamodule.c"
        var $103=($102) >>> 2; //@line 182 "shamodule.c"
        var $104=($102) << 30; //@line 182 "shamodule.c"
        var $105=($103) | ($104); //@line 182 "shamodule.c"
        $A=$105; //@line 182 "shamodule.c"
        var $106=$E; //@line 182 "shamodule.c"
        var $107=($106) >>> 27; //@line 182 "shamodule.c"
        var $108=($106) << 5; //@line 182 "shamodule.c"
        var $109=($107) | ($108); //@line 182 "shamodule.c"
        var $110=$A; //@line 182 "shamodule.c"
        var $111=$B; //@line 182 "shamodule.c"
        var $112=($111) ^ ($110); //@line 182 "shamodule.c"
        var $113=$T; //@line 182 "shamodule.c"
        var $114=($112) & ($113); //@line 182 "shamodule.c"
        var $115=$B; //@line 182 "shamodule.c"
        var $116=($114) ^ ($115); //@line 182 "shamodule.c"
        var $117=$C; //@line 182 "shamodule.c"
        var $118=$WP; //@line 182 "shamodule.c"
        var $119=HEAP[$118]; //@line 182 "shamodule.c"
        var $120=($109) + 1518500249; //@line 182 "shamodule.c"
        var $121=($120) + ($117); //@line 182 "shamodule.c"
        var $122=($121) + ($116); //@line 182 "shamodule.c"
        var $123=($122) + ($119); //@line 182 "shamodule.c"
        $D=$123; //@line 182 "shamodule.c"
        var $124=$WP; //@line 182 "shamodule.c"
        var $125=$124+4; //@line 182 "shamodule.c"
        $WP=$125; //@line 182 "shamodule.c"
        var $126=$T; //@line 182 "shamodule.c"
        var $127=($126) >>> 2; //@line 182 "shamodule.c"
        var $128=($126) << 30; //@line 182 "shamodule.c"
        var $129=($127) | ($128); //@line 182 "shamodule.c"
        $T=$129; //@line 182 "shamodule.c"
        var $130=$D; //@line 182 "shamodule.c"
        var $131=($130) >>> 27; //@line 182 "shamodule.c"
        var $132=($130) << 5; //@line 182 "shamodule.c"
        var $133=($131) | ($132); //@line 182 "shamodule.c"
        var $134=$T; //@line 182 "shamodule.c"
        var $135=$A; //@line 182 "shamodule.c"
        var $136=($135) ^ ($134); //@line 182 "shamodule.c"
        var $137=$E; //@line 182 "shamodule.c"
        var $138=($136) & ($137); //@line 182 "shamodule.c"
        var $139=$A; //@line 182 "shamodule.c"
        var $140=($138) ^ ($139); //@line 182 "shamodule.c"
        var $141=$B; //@line 182 "shamodule.c"
        var $142=$WP; //@line 182 "shamodule.c"
        var $143=HEAP[$142]; //@line 182 "shamodule.c"
        var $144=($133) + 1518500249; //@line 182 "shamodule.c"
        var $145=($144) + ($141); //@line 182 "shamodule.c"
        var $146=($145) + ($140); //@line 182 "shamodule.c"
        var $147=($146) + ($143); //@line 182 "shamodule.c"
        $C=$147; //@line 182 "shamodule.c"
        var $148=$WP; //@line 182 "shamodule.c"
        var $149=$148+4; //@line 182 "shamodule.c"
        $WP=$149; //@line 182 "shamodule.c"
        var $150=$E; //@line 182 "shamodule.c"
        var $151=($150) >>> 2; //@line 182 "shamodule.c"
        var $152=($150) << 30; //@line 182 "shamodule.c"
        var $153=($151) | ($152); //@line 182 "shamodule.c"
        $E=$153; //@line 182 "shamodule.c"
        var $154=$C; //@line 182 "shamodule.c"
        var $155=($154) >>> 27; //@line 182 "shamodule.c"
        var $156=($154) << 5; //@line 182 "shamodule.c"
        var $157=($155) | ($156); //@line 182 "shamodule.c"
        var $158=$E; //@line 182 "shamodule.c"
        var $159=$T; //@line 182 "shamodule.c"
        var $160=($159) ^ ($158); //@line 182 "shamodule.c"
        var $161=$D; //@line 182 "shamodule.c"
        var $162=($160) & ($161); //@line 182 "shamodule.c"
        var $163=$T; //@line 182 "shamodule.c"
        var $164=($162) ^ ($163); //@line 182 "shamodule.c"
        var $165=$A; //@line 182 "shamodule.c"
        var $166=$WP; //@line 182 "shamodule.c"
        var $167=HEAP[$166]; //@line 182 "shamodule.c"
        var $168=($157) + 1518500249; //@line 182 "shamodule.c"
        var $169=($168) + ($165); //@line 182 "shamodule.c"
        var $170=($169) + ($164); //@line 182 "shamodule.c"
        var $171=($170) + ($167); //@line 182 "shamodule.c"
        $B=$171; //@line 182 "shamodule.c"
        var $172=$WP; //@line 182 "shamodule.c"
        var $173=$172+4; //@line 182 "shamodule.c"
        $WP=$173; //@line 182 "shamodule.c"
        var $174=$D; //@line 182 "shamodule.c"
        var $175=($174) >>> 2; //@line 182 "shamodule.c"
        var $176=($174) << 30; //@line 182 "shamodule.c"
        var $177=($175) | ($176); //@line 182 "shamodule.c"
        $D=$177; //@line 182 "shamodule.c"
        var $178=$B; //@line 182 "shamodule.c"
        var $179=($178) >>> 27; //@line 182 "shamodule.c"
        var $180=($178) << 5; //@line 182 "shamodule.c"
        var $181=($179) | ($180); //@line 182 "shamodule.c"
        var $182=$D; //@line 182 "shamodule.c"
        var $183=$E; //@line 182 "shamodule.c"
        var $184=($183) ^ ($182); //@line 182 "shamodule.c"
        var $185=$C; //@line 182 "shamodule.c"
        var $186=($184) & ($185); //@line 182 "shamodule.c"
        var $187=$E; //@line 182 "shamodule.c"
        var $188=($186) ^ ($187); //@line 182 "shamodule.c"
        var $189=$T; //@line 182 "shamodule.c"
        var $190=$WP; //@line 182 "shamodule.c"
        var $191=HEAP[$190]; //@line 182 "shamodule.c"
        var $192=($181) + 1518500249; //@line 182 "shamodule.c"
        var $193=($192) + ($189); //@line 182 "shamodule.c"
        var $194=($193) + ($188); //@line 182 "shamodule.c"
        var $195=($194) + ($191); //@line 182 "shamodule.c"
        $A=$195; //@line 182 "shamodule.c"
        var $196=$WP; //@line 182 "shamodule.c"
        var $197=$196+4; //@line 182 "shamodule.c"
        $WP=$197; //@line 182 "shamodule.c"
        var $198=$C; //@line 182 "shamodule.c"
        var $199=($198) >>> 2; //@line 182 "shamodule.c"
        var $200=($198) << 30; //@line 182 "shamodule.c"
        var $201=($199) | ($200); //@line 182 "shamodule.c"
        $C=$201; //@line 182 "shamodule.c"
        var $202=$A; //@line 182 "shamodule.c"
        var $203=($202) >>> 27; //@line 182 "shamodule.c"
        var $204=($202) << 5; //@line 182 "shamodule.c"
        var $205=($203) | ($204); //@line 182 "shamodule.c"
        var $206=$C; //@line 182 "shamodule.c"
        var $207=$D; //@line 182 "shamodule.c"
        var $208=($207) ^ ($206); //@line 182 "shamodule.c"
        var $209=$B; //@line 182 "shamodule.c"
        var $210=($208) & ($209); //@line 182 "shamodule.c"
        var $211=$D; //@line 182 "shamodule.c"
        var $212=($210) ^ ($211); //@line 182 "shamodule.c"
        var $213=$E; //@line 182 "shamodule.c"
        var $214=$WP; //@line 182 "shamodule.c"
        var $215=HEAP[$214]; //@line 182 "shamodule.c"
        var $216=($205) + 1518500249; //@line 182 "shamodule.c"
        var $217=($216) + ($213); //@line 182 "shamodule.c"
        var $218=($217) + ($212); //@line 182 "shamodule.c"
        var $219=($218) + ($215); //@line 182 "shamodule.c"
        $T=$219; //@line 182 "shamodule.c"
        var $220=$WP; //@line 182 "shamodule.c"
        var $221=$220+4; //@line 182 "shamodule.c"
        $WP=$221; //@line 182 "shamodule.c"
        var $222=$B; //@line 182 "shamodule.c"
        var $223=($222) >>> 2; //@line 182 "shamodule.c"
        var $224=($222) << 30; //@line 182 "shamodule.c"
        var $225=($223) | ($224); //@line 182 "shamodule.c"
        $B=$225; //@line 182 "shamodule.c"
        var $226=$T; //@line 182 "shamodule.c"
        var $227=($226) >>> 27; //@line 182 "shamodule.c"
        var $228=($226) << 5; //@line 182 "shamodule.c"
        var $229=($227) | ($228); //@line 182 "shamodule.c"
        var $230=$B; //@line 182 "shamodule.c"
        var $231=$C; //@line 182 "shamodule.c"
        var $232=($231) ^ ($230); //@line 182 "shamodule.c"
        var $233=$A; //@line 182 "shamodule.c"
        var $234=($232) & ($233); //@line 182 "shamodule.c"
        var $235=$C; //@line 182 "shamodule.c"
        var $236=($234) ^ ($235); //@line 182 "shamodule.c"
        var $237=$D; //@line 182 "shamodule.c"
        var $238=$WP; //@line 182 "shamodule.c"
        var $239=HEAP[$238]; //@line 182 "shamodule.c"
        var $240=($229) + 1518500249; //@line 182 "shamodule.c"
        var $241=($240) + ($237); //@line 182 "shamodule.c"
        var $242=($241) + ($236); //@line 182 "shamodule.c"
        var $243=($242) + ($239); //@line 182 "shamodule.c"
        $E=$243; //@line 182 "shamodule.c"
        var $244=$WP; //@line 182 "shamodule.c"
        var $245=$244+4; //@line 182 "shamodule.c"
        $WP=$245; //@line 182 "shamodule.c"
        var $246=$A; //@line 182 "shamodule.c"
        var $247=($246) >>> 2; //@line 182 "shamodule.c"
        var $248=($246) << 30; //@line 182 "shamodule.c"
        var $249=($247) | ($248); //@line 182 "shamodule.c"
        $A=$249; //@line 182 "shamodule.c"
        var $250=$E; //@line 182 "shamodule.c"
        var $251=($250) >>> 27; //@line 182 "shamodule.c"
        var $252=($250) << 5; //@line 182 "shamodule.c"
        var $253=($251) | ($252); //@line 182 "shamodule.c"
        var $254=$A; //@line 182 "shamodule.c"
        var $255=$B; //@line 182 "shamodule.c"
        var $256=($255) ^ ($254); //@line 182 "shamodule.c"
        var $257=$T; //@line 182 "shamodule.c"
        var $258=($256) & ($257); //@line 182 "shamodule.c"
        var $259=$B; //@line 182 "shamodule.c"
        var $260=($258) ^ ($259); //@line 182 "shamodule.c"
        var $261=$C; //@line 182 "shamodule.c"
        var $262=$WP; //@line 182 "shamodule.c"
        var $263=HEAP[$262]; //@line 182 "shamodule.c"
        var $264=($253) + 1518500249; //@line 182 "shamodule.c"
        var $265=($264) + ($261); //@line 182 "shamodule.c"
        var $266=($265) + ($260); //@line 182 "shamodule.c"
        var $267=($266) + ($263); //@line 182 "shamodule.c"
        $D=$267; //@line 182 "shamodule.c"
        var $268=$WP; //@line 182 "shamodule.c"
        var $269=$268+4; //@line 182 "shamodule.c"
        $WP=$269; //@line 182 "shamodule.c"
        var $270=$T; //@line 182 "shamodule.c"
        var $271=($270) >>> 2; //@line 182 "shamodule.c"
        var $272=($270) << 30; //@line 182 "shamodule.c"
        var $273=($271) | ($272); //@line 182 "shamodule.c"
        $T=$273; //@line 182 "shamodule.c"
        var $274=$D; //@line 182 "shamodule.c"
        var $275=($274) >>> 27; //@line 182 "shamodule.c"
        var $276=($274) << 5; //@line 182 "shamodule.c"
        var $277=($275) | ($276); //@line 182 "shamodule.c"
        var $278=$T; //@line 182 "shamodule.c"
        var $279=$A; //@line 182 "shamodule.c"
        var $280=($279) ^ ($278); //@line 182 "shamodule.c"
        var $281=$E; //@line 182 "shamodule.c"
        var $282=($280) & ($281); //@line 182 "shamodule.c"
        var $283=$A; //@line 182 "shamodule.c"
        var $284=($282) ^ ($283); //@line 182 "shamodule.c"
        var $285=$B; //@line 182 "shamodule.c"
        var $286=$WP; //@line 182 "shamodule.c"
        var $287=HEAP[$286]; //@line 182 "shamodule.c"
        var $288=($277) + 1518500249; //@line 182 "shamodule.c"
        var $289=($288) + ($285); //@line 182 "shamodule.c"
        var $290=($289) + ($284); //@line 182 "shamodule.c"
        var $291=($290) + ($287); //@line 182 "shamodule.c"
        $C=$291; //@line 182 "shamodule.c"
        var $292=$WP; //@line 182 "shamodule.c"
        var $293=$292+4; //@line 182 "shamodule.c"
        $WP=$293; //@line 182 "shamodule.c"
        var $294=$E; //@line 182 "shamodule.c"
        var $295=($294) >>> 2; //@line 182 "shamodule.c"
        var $296=($294) << 30; //@line 182 "shamodule.c"
        var $297=($295) | ($296); //@line 182 "shamodule.c"
        $E=$297; //@line 182 "shamodule.c"
        var $298=$C; //@line 183 "shamodule.c"
        var $299=($298) >>> 27; //@line 183 "shamodule.c"
        var $300=($298) << 5; //@line 183 "shamodule.c"
        var $301=($299) | ($300); //@line 183 "shamodule.c"
        var $302=$E; //@line 183 "shamodule.c"
        var $303=$T; //@line 183 "shamodule.c"
        var $304=($303) ^ ($302); //@line 183 "shamodule.c"
        var $305=$D; //@line 183 "shamodule.c"
        var $306=($304) & ($305); //@line 183 "shamodule.c"
        var $307=$T; //@line 183 "shamodule.c"
        var $308=($306) ^ ($307); //@line 183 "shamodule.c"
        var $309=$A; //@line 183 "shamodule.c"
        var $310=$WP; //@line 183 "shamodule.c"
        var $311=HEAP[$310]; //@line 183 "shamodule.c"
        var $312=($301) + 1518500249; //@line 183 "shamodule.c"
        var $313=($312) + ($309); //@line 183 "shamodule.c"
        var $314=($313) + ($308); //@line 183 "shamodule.c"
        var $315=($314) + ($311); //@line 183 "shamodule.c"
        $B=$315; //@line 183 "shamodule.c"
        var $316=$WP; //@line 183 "shamodule.c"
        var $317=$316+4; //@line 183 "shamodule.c"
        $WP=$317; //@line 183 "shamodule.c"
        var $318=$D; //@line 183 "shamodule.c"
        var $319=($318) >>> 2; //@line 183 "shamodule.c"
        var $320=($318) << 30; //@line 183 "shamodule.c"
        var $321=($319) | ($320); //@line 183 "shamodule.c"
        $D=$321; //@line 183 "shamodule.c"
        var $322=$B; //@line 183 "shamodule.c"
        var $323=($322) >>> 27; //@line 183 "shamodule.c"
        var $324=($322) << 5; //@line 183 "shamodule.c"
        var $325=($323) | ($324); //@line 183 "shamodule.c"
        var $326=$D; //@line 183 "shamodule.c"
        var $327=$E; //@line 183 "shamodule.c"
        var $328=($327) ^ ($326); //@line 183 "shamodule.c"
        var $329=$C; //@line 183 "shamodule.c"
        var $330=($328) & ($329); //@line 183 "shamodule.c"
        var $331=$E; //@line 183 "shamodule.c"
        var $332=($330) ^ ($331); //@line 183 "shamodule.c"
        var $333=$T; //@line 183 "shamodule.c"
        var $334=$WP; //@line 183 "shamodule.c"
        var $335=HEAP[$334]; //@line 183 "shamodule.c"
        var $336=($325) + 1518500249; //@line 183 "shamodule.c"
        var $337=($336) + ($333); //@line 183 "shamodule.c"
        var $338=($337) + ($332); //@line 183 "shamodule.c"
        var $339=($338) + ($335); //@line 183 "shamodule.c"
        $A=$339; //@line 183 "shamodule.c"
        var $340=$WP; //@line 183 "shamodule.c"
        var $341=$340+4; //@line 183 "shamodule.c"
        $WP=$341; //@line 183 "shamodule.c"
        var $342=$C; //@line 183 "shamodule.c"
        var $343=($342) >>> 2; //@line 183 "shamodule.c"
        var $344=($342) << 30; //@line 183 "shamodule.c"
        var $345=($343) | ($344); //@line 183 "shamodule.c"
        $C=$345; //@line 183 "shamodule.c"
        var $346=$A; //@line 183 "shamodule.c"
        var $347=($346) >>> 27; //@line 183 "shamodule.c"
        var $348=($346) << 5; //@line 183 "shamodule.c"
        var $349=($347) | ($348); //@line 183 "shamodule.c"
        var $350=$C; //@line 183 "shamodule.c"
        var $351=$D; //@line 183 "shamodule.c"
        var $352=($351) ^ ($350); //@line 183 "shamodule.c"
        var $353=$B; //@line 183 "shamodule.c"
        var $354=($352) & ($353); //@line 183 "shamodule.c"
        var $355=$D; //@line 183 "shamodule.c"
        var $356=($354) ^ ($355); //@line 183 "shamodule.c"
        var $357=$E; //@line 183 "shamodule.c"
        var $358=$WP; //@line 183 "shamodule.c"
        var $359=HEAP[$358]; //@line 183 "shamodule.c"
        var $360=($349) + 1518500249; //@line 183 "shamodule.c"
        var $361=($360) + ($357); //@line 183 "shamodule.c"
        var $362=($361) + ($356); //@line 183 "shamodule.c"
        var $363=($362) + ($359); //@line 183 "shamodule.c"
        $T=$363; //@line 183 "shamodule.c"
        var $364=$WP; //@line 183 "shamodule.c"
        var $365=$364+4; //@line 183 "shamodule.c"
        $WP=$365; //@line 183 "shamodule.c"
        var $366=$B; //@line 183 "shamodule.c"
        var $367=($366) >>> 2; //@line 183 "shamodule.c"
        var $368=($366) << 30; //@line 183 "shamodule.c"
        var $369=($367) | ($368); //@line 183 "shamodule.c"
        $B=$369; //@line 183 "shamodule.c"
        var $370=$T; //@line 183 "shamodule.c"
        var $371=($370) >>> 27; //@line 183 "shamodule.c"
        var $372=($370) << 5; //@line 183 "shamodule.c"
        var $373=($371) | ($372); //@line 183 "shamodule.c"
        var $374=$B; //@line 183 "shamodule.c"
        var $375=$C; //@line 183 "shamodule.c"
        var $376=($375) ^ ($374); //@line 183 "shamodule.c"
        var $377=$A; //@line 183 "shamodule.c"
        var $378=($376) & ($377); //@line 183 "shamodule.c"
        var $379=$C; //@line 183 "shamodule.c"
        var $380=($378) ^ ($379); //@line 183 "shamodule.c"
        var $381=$D; //@line 183 "shamodule.c"
        var $382=$WP; //@line 183 "shamodule.c"
        var $383=HEAP[$382]; //@line 183 "shamodule.c"
        var $384=($373) + 1518500249; //@line 183 "shamodule.c"
        var $385=($384) + ($381); //@line 183 "shamodule.c"
        var $386=($385) + ($380); //@line 183 "shamodule.c"
        var $387=($386) + ($383); //@line 183 "shamodule.c"
        $E=$387; //@line 183 "shamodule.c"
        var $388=$WP; //@line 183 "shamodule.c"
        var $389=$388+4; //@line 183 "shamodule.c"
        $WP=$389; //@line 183 "shamodule.c"
        var $390=$A; //@line 183 "shamodule.c"
        var $391=($390) >>> 2; //@line 183 "shamodule.c"
        var $392=($390) << 30; //@line 183 "shamodule.c"
        var $393=($391) | ($392); //@line 183 "shamodule.c"
        $A=$393; //@line 183 "shamodule.c"
        var $394=$E; //@line 183 "shamodule.c"
        var $395=($394) >>> 27; //@line 183 "shamodule.c"
        var $396=($394) << 5; //@line 183 "shamodule.c"
        var $397=($395) | ($396); //@line 183 "shamodule.c"
        var $398=$A; //@line 183 "shamodule.c"
        var $399=$B; //@line 183 "shamodule.c"
        var $400=($399) ^ ($398); //@line 183 "shamodule.c"
        var $401=$T; //@line 183 "shamodule.c"
        var $402=($400) & ($401); //@line 183 "shamodule.c"
        var $403=$B; //@line 183 "shamodule.c"
        var $404=($402) ^ ($403); //@line 183 "shamodule.c"
        var $405=$C; //@line 183 "shamodule.c"
        var $406=$WP; //@line 183 "shamodule.c"
        var $407=HEAP[$406]; //@line 183 "shamodule.c"
        var $408=($397) + 1518500249; //@line 183 "shamodule.c"
        var $409=($408) + ($405); //@line 183 "shamodule.c"
        var $410=($409) + ($404); //@line 183 "shamodule.c"
        var $411=($410) + ($407); //@line 183 "shamodule.c"
        $D=$411; //@line 183 "shamodule.c"
        var $412=$WP; //@line 183 "shamodule.c"
        var $413=$412+4; //@line 183 "shamodule.c"
        $WP=$413; //@line 183 "shamodule.c"
        var $414=$T; //@line 183 "shamodule.c"
        var $415=($414) >>> 2; //@line 183 "shamodule.c"
        var $416=($414) << 30; //@line 183 "shamodule.c"
        var $417=($415) | ($416); //@line 183 "shamodule.c"
        $T=$417; //@line 183 "shamodule.c"
        var $418=$D; //@line 183 "shamodule.c"
        var $419=($418) >>> 27; //@line 183 "shamodule.c"
        var $420=($418) << 5; //@line 183 "shamodule.c"
        var $421=($419) | ($420); //@line 183 "shamodule.c"
        var $422=$T; //@line 183 "shamodule.c"
        var $423=$A; //@line 183 "shamodule.c"
        var $424=($423) ^ ($422); //@line 183 "shamodule.c"
        var $425=$E; //@line 183 "shamodule.c"
        var $426=($424) & ($425); //@line 183 "shamodule.c"
        var $427=$A; //@line 183 "shamodule.c"
        var $428=($426) ^ ($427); //@line 183 "shamodule.c"
        var $429=$B; //@line 183 "shamodule.c"
        var $430=$WP; //@line 183 "shamodule.c"
        var $431=HEAP[$430]; //@line 183 "shamodule.c"
        var $432=($421) + 1518500249; //@line 183 "shamodule.c"
        var $433=($432) + ($429); //@line 183 "shamodule.c"
        var $434=($433) + ($428); //@line 183 "shamodule.c"
        var $435=($434) + ($431); //@line 183 "shamodule.c"
        $C=$435; //@line 183 "shamodule.c"
        var $436=$WP; //@line 183 "shamodule.c"
        var $437=$436+4; //@line 183 "shamodule.c"
        $WP=$437; //@line 183 "shamodule.c"
        var $438=$E; //@line 183 "shamodule.c"
        var $439=($438) >>> 2; //@line 183 "shamodule.c"
        var $440=($438) << 30; //@line 183 "shamodule.c"
        var $441=($439) | ($440); //@line 183 "shamodule.c"
        $E=$441; //@line 183 "shamodule.c"
        var $442=$C; //@line 183 "shamodule.c"
        var $443=($442) >>> 27; //@line 183 "shamodule.c"
        var $444=($442) << 5; //@line 183 "shamodule.c"
        var $445=($443) | ($444); //@line 183 "shamodule.c"
        var $446=$E; //@line 183 "shamodule.c"
        var $447=$T; //@line 183 "shamodule.c"
        var $448=($447) ^ ($446); //@line 183 "shamodule.c"
        var $449=$D; //@line 183 "shamodule.c"
        var $450=($448) & ($449); //@line 183 "shamodule.c"
        var $451=$T; //@line 183 "shamodule.c"
        var $452=($450) ^ ($451); //@line 183 "shamodule.c"
        var $453=$A; //@line 183 "shamodule.c"
        var $454=$WP; //@line 183 "shamodule.c"
        var $455=HEAP[$454]; //@line 183 "shamodule.c"
        var $456=($445) + 1518500249; //@line 183 "shamodule.c"
        var $457=($456) + ($453); //@line 183 "shamodule.c"
        var $458=($457) + ($452); //@line 183 "shamodule.c"
        var $459=($458) + ($455); //@line 183 "shamodule.c"
        $B=$459; //@line 183 "shamodule.c"
        var $460=$WP; //@line 183 "shamodule.c"
        var $461=$460+4; //@line 183 "shamodule.c"
        $WP=$461; //@line 183 "shamodule.c"
        var $462=$D; //@line 183 "shamodule.c"
        var $463=($462) >>> 2; //@line 183 "shamodule.c"
        var $464=($462) << 30; //@line 183 "shamodule.c"
        var $465=($463) | ($464); //@line 183 "shamodule.c"
        $D=$465; //@line 183 "shamodule.c"
        var $466=$B; //@line 183 "shamodule.c"
        var $467=($466) >>> 27; //@line 183 "shamodule.c"
        var $468=($466) << 5; //@line 183 "shamodule.c"
        var $469=($467) | ($468); //@line 183 "shamodule.c"
        var $470=$D; //@line 183 "shamodule.c"
        var $471=$E; //@line 183 "shamodule.c"
        var $472=($471) ^ ($470); //@line 183 "shamodule.c"
        var $473=$C; //@line 183 "shamodule.c"
        var $474=($472) & ($473); //@line 183 "shamodule.c"
        var $475=$E; //@line 183 "shamodule.c"
        var $476=($474) ^ ($475); //@line 183 "shamodule.c"
        var $477=$T; //@line 183 "shamodule.c"
        var $478=$WP; //@line 183 "shamodule.c"
        var $479=HEAP[$478]; //@line 183 "shamodule.c"
        var $480=($469) + 1518500249; //@line 183 "shamodule.c"
        var $481=($480) + ($477); //@line 183 "shamodule.c"
        var $482=($481) + ($476); //@line 183 "shamodule.c"
        var $483=($482) + ($479); //@line 183 "shamodule.c"
        $A=$483; //@line 183 "shamodule.c"
        var $484=$WP; //@line 183 "shamodule.c"
        var $485=$484+4; //@line 183 "shamodule.c"
        $WP=$485; //@line 183 "shamodule.c"
        var $486=$C; //@line 183 "shamodule.c"
        var $487=($486) >>> 2; //@line 183 "shamodule.c"
        var $488=($486) << 30; //@line 183 "shamodule.c"
        var $489=($487) | ($488); //@line 183 "shamodule.c"
        $C=$489; //@line 183 "shamodule.c"
        var $490=$A; //@line 183 "shamodule.c"
        var $491=($490) >>> 27; //@line 183 "shamodule.c"
        var $492=($490) << 5; //@line 183 "shamodule.c"
        var $493=($491) | ($492); //@line 183 "shamodule.c"
        var $494=$C; //@line 183 "shamodule.c"
        var $495=$D; //@line 183 "shamodule.c"
        var $496=($495) ^ ($494); //@line 183 "shamodule.c"
        var $497=$B; //@line 183 "shamodule.c"
        var $498=($496) & ($497); //@line 183 "shamodule.c"
        var $499=$D; //@line 183 "shamodule.c"
        var $500=($498) ^ ($499); //@line 183 "shamodule.c"
        var $501=$E; //@line 183 "shamodule.c"
        var $502=$WP; //@line 183 "shamodule.c"
        var $503=HEAP[$502]; //@line 183 "shamodule.c"
        var $504=($493) + 1518500249; //@line 183 "shamodule.c"
        var $505=($504) + ($501); //@line 183 "shamodule.c"
        var $506=($505) + ($500); //@line 183 "shamodule.c"
        var $507=($506) + ($503); //@line 183 "shamodule.c"
        $T=$507; //@line 183 "shamodule.c"
        var $508=$WP; //@line 183 "shamodule.c"
        var $509=$508+4; //@line 183 "shamodule.c"
        $WP=$509; //@line 183 "shamodule.c"
        var $510=$B; //@line 183 "shamodule.c"
        var $511=($510) >>> 2; //@line 183 "shamodule.c"
        var $512=($510) << 30; //@line 183 "shamodule.c"
        var $513=($511) | ($512); //@line 183 "shamodule.c"
        $B=$513; //@line 183 "shamodule.c"
        var $514=$T; //@line 183 "shamodule.c"
        var $515=($514) >>> 27; //@line 183 "shamodule.c"
        var $516=($514) << 5; //@line 183 "shamodule.c"
        var $517=($515) | ($516); //@line 183 "shamodule.c"
        var $518=$B; //@line 183 "shamodule.c"
        var $519=$C; //@line 183 "shamodule.c"
        var $520=($519) ^ ($518); //@line 183 "shamodule.c"
        var $521=$A; //@line 183 "shamodule.c"
        var $522=($520) & ($521); //@line 183 "shamodule.c"
        var $523=$C; //@line 183 "shamodule.c"
        var $524=($522) ^ ($523); //@line 183 "shamodule.c"
        var $525=$D; //@line 183 "shamodule.c"
        var $526=$WP; //@line 183 "shamodule.c"
        var $527=HEAP[$526]; //@line 183 "shamodule.c"
        var $528=($517) + 1518500249; //@line 183 "shamodule.c"
        var $529=($528) + ($525); //@line 183 "shamodule.c"
        var $530=($529) + ($524); //@line 183 "shamodule.c"
        var $531=($530) + ($527); //@line 183 "shamodule.c"
        $E=$531; //@line 183 "shamodule.c"
        var $532=$WP; //@line 183 "shamodule.c"
        var $533=$532+4; //@line 183 "shamodule.c"
        $WP=$533; //@line 183 "shamodule.c"
        var $534=$A; //@line 183 "shamodule.c"
        var $535=($534) >>> 2; //@line 183 "shamodule.c"
        var $536=($534) << 30; //@line 183 "shamodule.c"
        var $537=($535) | ($536); //@line 183 "shamodule.c"
        $A=$537; //@line 183 "shamodule.c"
        var $538=$E; //@line 184 "shamodule.c"
        var $539=($538) >>> 27; //@line 184 "shamodule.c"
        var $540=($538) << 5; //@line 184 "shamodule.c"
        var $541=($539) | ($540); //@line 184 "shamodule.c"
        var $542=$T; //@line 184 "shamodule.c"
        var $543=$A; //@line 184 "shamodule.c"
        var $544=$B; //@line 184 "shamodule.c"
        var $545=($543) ^ ($542); //@line 184 "shamodule.c"
        var $546=($545) ^ ($544); //@line 184 "shamodule.c"
        var $547=$C; //@line 184 "shamodule.c"
        var $548=$WP; //@line 184 "shamodule.c"
        var $549=HEAP[$548]; //@line 184 "shamodule.c"
        var $550=($541) + 1859775393; //@line 184 "shamodule.c"
        var $551=($550) + ($547); //@line 184 "shamodule.c"
        var $552=($551) + ($546); //@line 184 "shamodule.c"
        var $553=($552) + ($549); //@line 184 "shamodule.c"
        $D=$553; //@line 184 "shamodule.c"
        var $554=$WP; //@line 184 "shamodule.c"
        var $555=$554+4; //@line 184 "shamodule.c"
        $WP=$555; //@line 184 "shamodule.c"
        var $556=$T; //@line 184 "shamodule.c"
        var $557=($556) >>> 2; //@line 184 "shamodule.c"
        var $558=($556) << 30; //@line 184 "shamodule.c"
        var $559=($557) | ($558); //@line 184 "shamodule.c"
        $T=$559; //@line 184 "shamodule.c"
        var $560=$D; //@line 184 "shamodule.c"
        var $561=($560) >>> 27; //@line 184 "shamodule.c"
        var $562=($560) << 5; //@line 184 "shamodule.c"
        var $563=($561) | ($562); //@line 184 "shamodule.c"
        var $564=$E; //@line 184 "shamodule.c"
        var $565=$T; //@line 184 "shamodule.c"
        var $566=$A; //@line 184 "shamodule.c"
        var $567=($565) ^ ($564); //@line 184 "shamodule.c"
        var $568=($567) ^ ($566); //@line 184 "shamodule.c"
        var $569=$B; //@line 184 "shamodule.c"
        var $570=$WP; //@line 184 "shamodule.c"
        var $571=HEAP[$570]; //@line 184 "shamodule.c"
        var $572=($563) + 1859775393; //@line 184 "shamodule.c"
        var $573=($572) + ($569); //@line 184 "shamodule.c"
        var $574=($573) + ($568); //@line 184 "shamodule.c"
        var $575=($574) + ($571); //@line 184 "shamodule.c"
        $C=$575; //@line 184 "shamodule.c"
        var $576=$WP; //@line 184 "shamodule.c"
        var $577=$576+4; //@line 184 "shamodule.c"
        $WP=$577; //@line 184 "shamodule.c"
        var $578=$E; //@line 184 "shamodule.c"
        var $579=($578) >>> 2; //@line 184 "shamodule.c"
        var $580=($578) << 30; //@line 184 "shamodule.c"
        var $581=($579) | ($580); //@line 184 "shamodule.c"
        $E=$581; //@line 184 "shamodule.c"
        var $582=$C; //@line 184 "shamodule.c"
        var $583=($582) >>> 27; //@line 184 "shamodule.c"
        var $584=($582) << 5; //@line 184 "shamodule.c"
        var $585=($583) | ($584); //@line 184 "shamodule.c"
        var $586=$D; //@line 184 "shamodule.c"
        var $587=$E; //@line 184 "shamodule.c"
        var $588=$T; //@line 184 "shamodule.c"
        var $589=($587) ^ ($586); //@line 184 "shamodule.c"
        var $590=($589) ^ ($588); //@line 184 "shamodule.c"
        var $591=$A; //@line 184 "shamodule.c"
        var $592=$WP; //@line 184 "shamodule.c"
        var $593=HEAP[$592]; //@line 184 "shamodule.c"
        var $594=($585) + 1859775393; //@line 184 "shamodule.c"
        var $595=($594) + ($591); //@line 184 "shamodule.c"
        var $596=($595) + ($590); //@line 184 "shamodule.c"
        var $597=($596) + ($593); //@line 184 "shamodule.c"
        $B=$597; //@line 184 "shamodule.c"
        var $598=$WP; //@line 184 "shamodule.c"
        var $599=$598+4; //@line 184 "shamodule.c"
        $WP=$599; //@line 184 "shamodule.c"
        var $600=$D; //@line 184 "shamodule.c"
        var $601=($600) >>> 2; //@line 184 "shamodule.c"
        var $602=($600) << 30; //@line 184 "shamodule.c"
        var $603=($601) | ($602); //@line 184 "shamodule.c"
        $D=$603; //@line 184 "shamodule.c"
        var $604=$B; //@line 184 "shamodule.c"
        var $605=($604) >>> 27; //@line 184 "shamodule.c"
        var $606=($604) << 5; //@line 184 "shamodule.c"
        var $607=($605) | ($606); //@line 184 "shamodule.c"
        var $608=$C; //@line 184 "shamodule.c"
        var $609=$D; //@line 184 "shamodule.c"
        var $610=$E; //@line 184 "shamodule.c"
        var $611=($609) ^ ($608); //@line 184 "shamodule.c"
        var $612=($611) ^ ($610); //@line 184 "shamodule.c"
        var $613=$T; //@line 184 "shamodule.c"
        var $614=$WP; //@line 184 "shamodule.c"
        var $615=HEAP[$614]; //@line 184 "shamodule.c"
        var $616=($607) + 1859775393; //@line 184 "shamodule.c"
        var $617=($616) + ($613); //@line 184 "shamodule.c"
        var $618=($617) + ($612); //@line 184 "shamodule.c"
        var $619=($618) + ($615); //@line 184 "shamodule.c"
        $A=$619; //@line 184 "shamodule.c"
        var $620=$WP; //@line 184 "shamodule.c"
        var $621=$620+4; //@line 184 "shamodule.c"
        $WP=$621; //@line 184 "shamodule.c"
        var $622=$C; //@line 184 "shamodule.c"
        var $623=($622) >>> 2; //@line 184 "shamodule.c"
        var $624=($622) << 30; //@line 184 "shamodule.c"
        var $625=($623) | ($624); //@line 184 "shamodule.c"
        $C=$625; //@line 184 "shamodule.c"
        var $626=$A; //@line 184 "shamodule.c"
        var $627=($626) >>> 27; //@line 184 "shamodule.c"
        var $628=($626) << 5; //@line 184 "shamodule.c"
        var $629=($627) | ($628); //@line 184 "shamodule.c"
        var $630=$B; //@line 184 "shamodule.c"
        var $631=$C; //@line 184 "shamodule.c"
        var $632=$D; //@line 184 "shamodule.c"
        var $633=($631) ^ ($630); //@line 184 "shamodule.c"
        var $634=($633) ^ ($632); //@line 184 "shamodule.c"
        var $635=$E; //@line 184 "shamodule.c"
        var $636=$WP; //@line 184 "shamodule.c"
        var $637=HEAP[$636]; //@line 184 "shamodule.c"
        var $638=($629) + 1859775393; //@line 184 "shamodule.c"
        var $639=($638) + ($635); //@line 184 "shamodule.c"
        var $640=($639) + ($634); //@line 184 "shamodule.c"
        var $641=($640) + ($637); //@line 184 "shamodule.c"
        $T=$641; //@line 184 "shamodule.c"
        var $642=$WP; //@line 184 "shamodule.c"
        var $643=$642+4; //@line 184 "shamodule.c"
        $WP=$643; //@line 184 "shamodule.c"
        var $644=$B; //@line 184 "shamodule.c"
        var $645=($644) >>> 2; //@line 184 "shamodule.c"
        var $646=($644) << 30; //@line 184 "shamodule.c"
        var $647=($645) | ($646); //@line 184 "shamodule.c"
        $B=$647; //@line 184 "shamodule.c"
        var $648=$T; //@line 184 "shamodule.c"
        var $649=($648) >>> 27; //@line 184 "shamodule.c"
        var $650=($648) << 5; //@line 184 "shamodule.c"
        var $651=($649) | ($650); //@line 184 "shamodule.c"
        var $652=$A; //@line 184 "shamodule.c"
        var $653=$B; //@line 184 "shamodule.c"
        var $654=$C; //@line 184 "shamodule.c"
        var $655=($653) ^ ($652); //@line 184 "shamodule.c"
        var $656=($655) ^ ($654); //@line 184 "shamodule.c"
        var $657=$D; //@line 184 "shamodule.c"
        var $658=$WP; //@line 184 "shamodule.c"
        var $659=HEAP[$658]; //@line 184 "shamodule.c"
        var $660=($651) + 1859775393; //@line 184 "shamodule.c"
        var $661=($660) + ($657); //@line 184 "shamodule.c"
        var $662=($661) + ($656); //@line 184 "shamodule.c"
        var $663=($662) + ($659); //@line 184 "shamodule.c"
        $E=$663; //@line 184 "shamodule.c"
        var $664=$WP; //@line 184 "shamodule.c"
        var $665=$664+4; //@line 184 "shamodule.c"
        $WP=$665; //@line 184 "shamodule.c"
        var $666=$A; //@line 184 "shamodule.c"
        var $667=($666) >>> 2; //@line 184 "shamodule.c"
        var $668=($666) << 30; //@line 184 "shamodule.c"
        var $669=($667) | ($668); //@line 184 "shamodule.c"
        $A=$669; //@line 184 "shamodule.c"
        var $670=$E; //@line 184 "shamodule.c"
        var $671=($670) >>> 27; //@line 184 "shamodule.c"
        var $672=($670) << 5; //@line 184 "shamodule.c"
        var $673=($671) | ($672); //@line 184 "shamodule.c"
        var $674=$T; //@line 184 "shamodule.c"
        var $675=$A; //@line 184 "shamodule.c"
        var $676=$B; //@line 184 "shamodule.c"
        var $677=($675) ^ ($674); //@line 184 "shamodule.c"
        var $678=($677) ^ ($676); //@line 184 "shamodule.c"
        var $679=$C; //@line 184 "shamodule.c"
        var $680=$WP; //@line 184 "shamodule.c"
        var $681=HEAP[$680]; //@line 184 "shamodule.c"
        var $682=($673) + 1859775393; //@line 184 "shamodule.c"
        var $683=($682) + ($679); //@line 184 "shamodule.c"
        var $684=($683) + ($678); //@line 184 "shamodule.c"
        var $685=($684) + ($681); //@line 184 "shamodule.c"
        $D=$685; //@line 184 "shamodule.c"
        var $686=$WP; //@line 184 "shamodule.c"
        var $687=$686+4; //@line 184 "shamodule.c"
        $WP=$687; //@line 184 "shamodule.c"
        var $688=$T; //@line 184 "shamodule.c"
        var $689=($688) >>> 2; //@line 184 "shamodule.c"
        var $690=($688) << 30; //@line 184 "shamodule.c"
        var $691=($689) | ($690); //@line 184 "shamodule.c"
        $T=$691; //@line 184 "shamodule.c"
        var $692=$D; //@line 184 "shamodule.c"
        var $693=($692) >>> 27; //@line 184 "shamodule.c"
        var $694=($692) << 5; //@line 184 "shamodule.c"
        var $695=($693) | ($694); //@line 184 "shamodule.c"
        var $696=$E; //@line 184 "shamodule.c"
        var $697=$T; //@line 184 "shamodule.c"
        var $698=$A; //@line 184 "shamodule.c"
        var $699=($697) ^ ($696); //@line 184 "shamodule.c"
        var $700=($699) ^ ($698); //@line 184 "shamodule.c"
        var $701=$B; //@line 184 "shamodule.c"
        var $702=$WP; //@line 184 "shamodule.c"
        var $703=HEAP[$702]; //@line 184 "shamodule.c"
        var $704=($695) + 1859775393; //@line 184 "shamodule.c"
        var $705=($704) + ($701); //@line 184 "shamodule.c"
        var $706=($705) + ($700); //@line 184 "shamodule.c"
        var $707=($706) + ($703); //@line 184 "shamodule.c"
        $C=$707; //@line 184 "shamodule.c"
        var $708=$WP; //@line 184 "shamodule.c"
        var $709=$708+4; //@line 184 "shamodule.c"
        $WP=$709; //@line 184 "shamodule.c"
        var $710=$E; //@line 184 "shamodule.c"
        var $711=($710) >>> 2; //@line 184 "shamodule.c"
        var $712=($710) << 30; //@line 184 "shamodule.c"
        var $713=($711) | ($712); //@line 184 "shamodule.c"
        $E=$713; //@line 184 "shamodule.c"
        var $714=$C; //@line 184 "shamodule.c"
        var $715=($714) >>> 27; //@line 184 "shamodule.c"
        var $716=($714) << 5; //@line 184 "shamodule.c"
        var $717=($715) | ($716); //@line 184 "shamodule.c"
        var $718=$D; //@line 184 "shamodule.c"
        var $719=$E; //@line 184 "shamodule.c"
        var $720=$T; //@line 184 "shamodule.c"
        var $721=($719) ^ ($718); //@line 184 "shamodule.c"
        var $722=($721) ^ ($720); //@line 184 "shamodule.c"
        var $723=$A; //@line 184 "shamodule.c"
        var $724=$WP; //@line 184 "shamodule.c"
        var $725=HEAP[$724]; //@line 184 "shamodule.c"
        var $726=($717) + 1859775393; //@line 184 "shamodule.c"
        var $727=($726) + ($723); //@line 184 "shamodule.c"
        var $728=($727) + ($722); //@line 184 "shamodule.c"
        var $729=($728) + ($725); //@line 184 "shamodule.c"
        $B=$729; //@line 184 "shamodule.c"
        var $730=$WP; //@line 184 "shamodule.c"
        var $731=$730+4; //@line 184 "shamodule.c"
        $WP=$731; //@line 184 "shamodule.c"
        var $732=$D; //@line 184 "shamodule.c"
        var $733=($732) >>> 2; //@line 184 "shamodule.c"
        var $734=($732) << 30; //@line 184 "shamodule.c"
        var $735=($733) | ($734); //@line 184 "shamodule.c"
        $D=$735; //@line 184 "shamodule.c"
        var $736=$B; //@line 184 "shamodule.c"
        var $737=($736) >>> 27; //@line 184 "shamodule.c"
        var $738=($736) << 5; //@line 184 "shamodule.c"
        var $739=($737) | ($738); //@line 184 "shamodule.c"
        var $740=$C; //@line 184 "shamodule.c"
        var $741=$D; //@line 184 "shamodule.c"
        var $742=$E; //@line 184 "shamodule.c"
        var $743=($741) ^ ($740); //@line 184 "shamodule.c"
        var $744=($743) ^ ($742); //@line 184 "shamodule.c"
        var $745=$T; //@line 184 "shamodule.c"
        var $746=$WP; //@line 184 "shamodule.c"
        var $747=HEAP[$746]; //@line 184 "shamodule.c"
        var $748=($739) + 1859775393; //@line 184 "shamodule.c"
        var $749=($748) + ($745); //@line 184 "shamodule.c"
        var $750=($749) + ($744); //@line 184 "shamodule.c"
        var $751=($750) + ($747); //@line 184 "shamodule.c"
        $A=$751; //@line 184 "shamodule.c"
        var $752=$WP; //@line 184 "shamodule.c"
        var $753=$752+4; //@line 184 "shamodule.c"
        $WP=$753; //@line 184 "shamodule.c"
        var $754=$C; //@line 184 "shamodule.c"
        var $755=($754) >>> 2; //@line 184 "shamodule.c"
        var $756=($754) << 30; //@line 184 "shamodule.c"
        var $757=($755) | ($756); //@line 184 "shamodule.c"
        $C=$757; //@line 184 "shamodule.c"
        var $758=$A; //@line 185 "shamodule.c"
        var $759=($758) >>> 27; //@line 185 "shamodule.c"
        var $760=($758) << 5; //@line 185 "shamodule.c"
        var $761=($759) | ($760); //@line 185 "shamodule.c"
        var $762=$B; //@line 185 "shamodule.c"
        var $763=$C; //@line 185 "shamodule.c"
        var $764=$D; //@line 185 "shamodule.c"
        var $765=($763) ^ ($762); //@line 185 "shamodule.c"
        var $766=($765) ^ ($764); //@line 185 "shamodule.c"
        var $767=$E; //@line 185 "shamodule.c"
        var $768=$WP; //@line 185 "shamodule.c"
        var $769=HEAP[$768]; //@line 185 "shamodule.c"
        var $770=($761) + 1859775393; //@line 185 "shamodule.c"
        var $771=($770) + ($767); //@line 185 "shamodule.c"
        var $772=($771) + ($766); //@line 185 "shamodule.c"
        var $773=($772) + ($769); //@line 185 "shamodule.c"
        $T=$773; //@line 185 "shamodule.c"
        var $774=$WP; //@line 185 "shamodule.c"
        var $775=$774+4; //@line 185 "shamodule.c"
        $WP=$775; //@line 185 "shamodule.c"
        var $776=$B; //@line 185 "shamodule.c"
        var $777=($776) >>> 2; //@line 185 "shamodule.c"
        var $778=($776) << 30; //@line 185 "shamodule.c"
        var $779=($777) | ($778); //@line 185 "shamodule.c"
        $B=$779; //@line 185 "shamodule.c"
        var $780=$T; //@line 185 "shamodule.c"
        var $781=($780) >>> 27; //@line 185 "shamodule.c"
        var $782=($780) << 5; //@line 185 "shamodule.c"
        var $783=($781) | ($782); //@line 185 "shamodule.c"
        var $784=$A; //@line 185 "shamodule.c"
        var $785=$B; //@line 185 "shamodule.c"
        var $786=$C; //@line 185 "shamodule.c"
        var $787=($785) ^ ($784); //@line 185 "shamodule.c"
        var $788=($787) ^ ($786); //@line 185 "shamodule.c"
        var $789=$D; //@line 185 "shamodule.c"
        var $790=$WP; //@line 185 "shamodule.c"
        var $791=HEAP[$790]; //@line 185 "shamodule.c"
        var $792=($783) + 1859775393; //@line 185 "shamodule.c"
        var $793=($792) + ($789); //@line 185 "shamodule.c"
        var $794=($793) + ($788); //@line 185 "shamodule.c"
        var $795=($794) + ($791); //@line 185 "shamodule.c"
        $E=$795; //@line 185 "shamodule.c"
        var $796=$WP; //@line 185 "shamodule.c"
        var $797=$796+4; //@line 185 "shamodule.c"
        $WP=$797; //@line 185 "shamodule.c"
        var $798=$A; //@line 185 "shamodule.c"
        var $799=($798) >>> 2; //@line 185 "shamodule.c"
        var $800=($798) << 30; //@line 185 "shamodule.c"
        var $801=($799) | ($800); //@line 185 "shamodule.c"
        $A=$801; //@line 185 "shamodule.c"
        var $802=$E; //@line 185 "shamodule.c"
        var $803=($802) >>> 27; //@line 185 "shamodule.c"
        var $804=($802) << 5; //@line 185 "shamodule.c"
        var $805=($803) | ($804); //@line 185 "shamodule.c"
        var $806=$T; //@line 185 "shamodule.c"
        var $807=$A; //@line 185 "shamodule.c"
        var $808=$B; //@line 185 "shamodule.c"
        var $809=($807) ^ ($806); //@line 185 "shamodule.c"
        var $810=($809) ^ ($808); //@line 185 "shamodule.c"
        var $811=$C; //@line 185 "shamodule.c"
        var $812=$WP; //@line 185 "shamodule.c"
        var $813=HEAP[$812]; //@line 185 "shamodule.c"
        var $814=($805) + 1859775393; //@line 185 "shamodule.c"
        var $815=($814) + ($811); //@line 185 "shamodule.c"
        var $816=($815) + ($810); //@line 185 "shamodule.c"
        var $817=($816) + ($813); //@line 185 "shamodule.c"
        $D=$817; //@line 185 "shamodule.c"
        var $818=$WP; //@line 185 "shamodule.c"
        var $819=$818+4; //@line 185 "shamodule.c"
        $WP=$819; //@line 185 "shamodule.c"
        var $820=$T; //@line 185 "shamodule.c"
        var $821=($820) >>> 2; //@line 185 "shamodule.c"
        var $822=($820) << 30; //@line 185 "shamodule.c"
        var $823=($821) | ($822); //@line 185 "shamodule.c"
        $T=$823; //@line 185 "shamodule.c"
        var $824=$D; //@line 185 "shamodule.c"
        var $825=($824) >>> 27; //@line 185 "shamodule.c"
        var $826=($824) << 5; //@line 185 "shamodule.c"
        var $827=($825) | ($826); //@line 185 "shamodule.c"
        var $828=$E; //@line 185 "shamodule.c"
        var $829=$T; //@line 185 "shamodule.c"
        var $830=$A; //@line 185 "shamodule.c"
        var $831=($829) ^ ($828); //@line 185 "shamodule.c"
        var $832=($831) ^ ($830); //@line 185 "shamodule.c"
        var $833=$B; //@line 185 "shamodule.c"
        var $834=$WP; //@line 185 "shamodule.c"
        var $835=HEAP[$834]; //@line 185 "shamodule.c"
        var $836=($827) + 1859775393; //@line 185 "shamodule.c"
        var $837=($836) + ($833); //@line 185 "shamodule.c"
        var $838=($837) + ($832); //@line 185 "shamodule.c"
        var $839=($838) + ($835); //@line 185 "shamodule.c"
        $C=$839; //@line 185 "shamodule.c"
        var $840=$WP; //@line 185 "shamodule.c"
        var $841=$840+4; //@line 185 "shamodule.c"
        $WP=$841; //@line 185 "shamodule.c"
        var $842=$E; //@line 185 "shamodule.c"
        var $843=($842) >>> 2; //@line 185 "shamodule.c"
        var $844=($842) << 30; //@line 185 "shamodule.c"
        var $845=($843) | ($844); //@line 185 "shamodule.c"
        $E=$845; //@line 185 "shamodule.c"
        var $846=$C; //@line 185 "shamodule.c"
        var $847=($846) >>> 27; //@line 185 "shamodule.c"
        var $848=($846) << 5; //@line 185 "shamodule.c"
        var $849=($847) | ($848); //@line 185 "shamodule.c"
        var $850=$D; //@line 185 "shamodule.c"
        var $851=$E; //@line 185 "shamodule.c"
        var $852=$T; //@line 185 "shamodule.c"
        var $853=($851) ^ ($850); //@line 185 "shamodule.c"
        var $854=($853) ^ ($852); //@line 185 "shamodule.c"
        var $855=$A; //@line 185 "shamodule.c"
        var $856=$WP; //@line 185 "shamodule.c"
        var $857=HEAP[$856]; //@line 185 "shamodule.c"
        var $858=($849) + 1859775393; //@line 185 "shamodule.c"
        var $859=($858) + ($855); //@line 185 "shamodule.c"
        var $860=($859) + ($854); //@line 185 "shamodule.c"
        var $861=($860) + ($857); //@line 185 "shamodule.c"
        $B=$861; //@line 185 "shamodule.c"
        var $862=$WP; //@line 185 "shamodule.c"
        var $863=$862+4; //@line 185 "shamodule.c"
        $WP=$863; //@line 185 "shamodule.c"
        var $864=$D; //@line 185 "shamodule.c"
        var $865=($864) >>> 2; //@line 185 "shamodule.c"
        var $866=($864) << 30; //@line 185 "shamodule.c"
        var $867=($865) | ($866); //@line 185 "shamodule.c"
        $D=$867; //@line 185 "shamodule.c"
        var $868=$B; //@line 185 "shamodule.c"
        var $869=($868) >>> 27; //@line 185 "shamodule.c"
        var $870=($868) << 5; //@line 185 "shamodule.c"
        var $871=($869) | ($870); //@line 185 "shamodule.c"
        var $872=$C; //@line 185 "shamodule.c"
        var $873=$D; //@line 185 "shamodule.c"
        var $874=$E; //@line 185 "shamodule.c"
        var $875=($873) ^ ($872); //@line 185 "shamodule.c"
        var $876=($875) ^ ($874); //@line 185 "shamodule.c"
        var $877=$T; //@line 185 "shamodule.c"
        var $878=$WP; //@line 185 "shamodule.c"
        var $879=HEAP[$878]; //@line 185 "shamodule.c"
        var $880=($871) + 1859775393; //@line 185 "shamodule.c"
        var $881=($880) + ($877); //@line 185 "shamodule.c"
        var $882=($881) + ($876); //@line 185 "shamodule.c"
        var $883=($882) + ($879); //@line 185 "shamodule.c"
        $A=$883; //@line 185 "shamodule.c"
        var $884=$WP; //@line 185 "shamodule.c"
        var $885=$884+4; //@line 185 "shamodule.c"
        $WP=$885; //@line 185 "shamodule.c"
        var $886=$C; //@line 185 "shamodule.c"
        var $887=($886) >>> 2; //@line 185 "shamodule.c"
        var $888=($886) << 30; //@line 185 "shamodule.c"
        var $889=($887) | ($888); //@line 185 "shamodule.c"
        $C=$889; //@line 185 "shamodule.c"
        var $890=$A; //@line 185 "shamodule.c"
        var $891=($890) >>> 27; //@line 185 "shamodule.c"
        var $892=($890) << 5; //@line 185 "shamodule.c"
        var $893=($891) | ($892); //@line 185 "shamodule.c"
        var $894=$B; //@line 185 "shamodule.c"
        var $895=$C; //@line 185 "shamodule.c"
        var $896=$D; //@line 185 "shamodule.c"
        var $897=($895) ^ ($894); //@line 185 "shamodule.c"
        var $898=($897) ^ ($896); //@line 185 "shamodule.c"
        var $899=$E; //@line 185 "shamodule.c"
        var $900=$WP; //@line 185 "shamodule.c"
        var $901=HEAP[$900]; //@line 185 "shamodule.c"
        var $902=($893) + 1859775393; //@line 185 "shamodule.c"
        var $903=($902) + ($899); //@line 185 "shamodule.c"
        var $904=($903) + ($898); //@line 185 "shamodule.c"
        var $905=($904) + ($901); //@line 185 "shamodule.c"
        $T=$905; //@line 185 "shamodule.c"
        var $906=$WP; //@line 185 "shamodule.c"
        var $907=$906+4; //@line 185 "shamodule.c"
        $WP=$907; //@line 185 "shamodule.c"
        var $908=$B; //@line 185 "shamodule.c"
        var $909=($908) >>> 2; //@line 185 "shamodule.c"
        var $910=($908) << 30; //@line 185 "shamodule.c"
        var $911=($909) | ($910); //@line 185 "shamodule.c"
        $B=$911; //@line 185 "shamodule.c"
        var $912=$T; //@line 185 "shamodule.c"
        var $913=($912) >>> 27; //@line 185 "shamodule.c"
        var $914=($912) << 5; //@line 185 "shamodule.c"
        var $915=($913) | ($914); //@line 185 "shamodule.c"
        var $916=$A; //@line 185 "shamodule.c"
        var $917=$B; //@line 185 "shamodule.c"
        var $918=$C; //@line 185 "shamodule.c"
        var $919=($917) ^ ($916); //@line 185 "shamodule.c"
        var $920=($919) ^ ($918); //@line 185 "shamodule.c"
        var $921=$D; //@line 185 "shamodule.c"
        var $922=$WP; //@line 185 "shamodule.c"
        var $923=HEAP[$922]; //@line 185 "shamodule.c"
        var $924=($915) + 1859775393; //@line 185 "shamodule.c"
        var $925=($924) + ($921); //@line 185 "shamodule.c"
        var $926=($925) + ($920); //@line 185 "shamodule.c"
        var $927=($926) + ($923); //@line 185 "shamodule.c"
        $E=$927; //@line 185 "shamodule.c"
        var $928=$WP; //@line 185 "shamodule.c"
        var $929=$928+4; //@line 185 "shamodule.c"
        $WP=$929; //@line 185 "shamodule.c"
        var $930=$A; //@line 185 "shamodule.c"
        var $931=($930) >>> 2; //@line 185 "shamodule.c"
        var $932=($930) << 30; //@line 185 "shamodule.c"
        var $933=($931) | ($932); //@line 185 "shamodule.c"
        $A=$933; //@line 185 "shamodule.c"
        var $934=$E; //@line 185 "shamodule.c"
        var $935=($934) >>> 27; //@line 185 "shamodule.c"
        var $936=($934) << 5; //@line 185 "shamodule.c"
        var $937=($935) | ($936); //@line 185 "shamodule.c"
        var $938=$T; //@line 185 "shamodule.c"
        var $939=$A; //@line 185 "shamodule.c"
        var $940=$B; //@line 185 "shamodule.c"
        var $941=($939) ^ ($938); //@line 185 "shamodule.c"
        var $942=($941) ^ ($940); //@line 185 "shamodule.c"
        var $943=$C; //@line 185 "shamodule.c"
        var $944=$WP; //@line 185 "shamodule.c"
        var $945=HEAP[$944]; //@line 185 "shamodule.c"
        var $946=($937) + 1859775393; //@line 185 "shamodule.c"
        var $947=($946) + ($943); //@line 185 "shamodule.c"
        var $948=($947) + ($942); //@line 185 "shamodule.c"
        var $949=($948) + ($945); //@line 185 "shamodule.c"
        $D=$949; //@line 185 "shamodule.c"
        var $950=$WP; //@line 185 "shamodule.c"
        var $951=$950+4; //@line 185 "shamodule.c"
        $WP=$951; //@line 185 "shamodule.c"
        var $952=$T; //@line 185 "shamodule.c"
        var $953=($952) >>> 2; //@line 185 "shamodule.c"
        var $954=($952) << 30; //@line 185 "shamodule.c"
        var $955=($953) | ($954); //@line 185 "shamodule.c"
        $T=$955; //@line 185 "shamodule.c"
        var $956=$D; //@line 185 "shamodule.c"
        var $957=($956) >>> 27; //@line 185 "shamodule.c"
        var $958=($956) << 5; //@line 185 "shamodule.c"
        var $959=($957) | ($958); //@line 185 "shamodule.c"
        var $960=$E; //@line 185 "shamodule.c"
        var $961=$T; //@line 185 "shamodule.c"
        var $962=$A; //@line 185 "shamodule.c"
        var $963=($961) ^ ($960); //@line 185 "shamodule.c"
        var $964=($963) ^ ($962); //@line 185 "shamodule.c"
        var $965=$B; //@line 185 "shamodule.c"
        var $966=$WP; //@line 185 "shamodule.c"
        var $967=HEAP[$966]; //@line 185 "shamodule.c"
        var $968=($959) + 1859775393; //@line 185 "shamodule.c"
        var $969=($968) + ($965); //@line 185 "shamodule.c"
        var $970=($969) + ($964); //@line 185 "shamodule.c"
        var $971=($970) + ($967); //@line 185 "shamodule.c"
        $C=$971; //@line 185 "shamodule.c"
        var $972=$WP; //@line 185 "shamodule.c"
        var $973=$972+4; //@line 185 "shamodule.c"
        $WP=$973; //@line 185 "shamodule.c"
        var $974=$E; //@line 185 "shamodule.c"
        var $975=($974) >>> 2; //@line 185 "shamodule.c"
        var $976=($974) << 30; //@line 185 "shamodule.c"
        var $977=($975) | ($976); //@line 185 "shamodule.c"
        $E=$977; //@line 185 "shamodule.c"
        var $978=$C; //@line 186 "shamodule.c"
        var $979=($978) >>> 27; //@line 186 "shamodule.c"
        var $980=($978) << 5; //@line 186 "shamodule.c"
        var $981=($979) | ($980); //@line 186 "shamodule.c"
        var $982=$D; //@line 186 "shamodule.c"
        var $983=$E; //@line 186 "shamodule.c"
        var $984=($983) & ($982); //@line 186 "shamodule.c"
        var $985=$D; //@line 186 "shamodule.c"
        var $986=$E; //@line 186 "shamodule.c"
        var $987=($986) | ($985); //@line 186 "shamodule.c"
        var $988=$T; //@line 186 "shamodule.c"
        var $989=($987) & ($988); //@line 186 "shamodule.c"
        var $990=($989) | ($984); //@line 186 "shamodule.c"
        var $991=$A; //@line 186 "shamodule.c"
        var $992=$WP; //@line 186 "shamodule.c"
        var $993=HEAP[$992]; //@line 186 "shamodule.c"
        var $994=($981) + -1894007588; //@line 186 "shamodule.c"
        var $995=($994) + ($991); //@line 186 "shamodule.c"
        var $996=($995) + ($990); //@line 186 "shamodule.c"
        var $997=($996) + ($993); //@line 186 "shamodule.c"
        $B=$997; //@line 186 "shamodule.c"
        var $998=$WP; //@line 186 "shamodule.c"
        var $999=$998+4; //@line 186 "shamodule.c"
        $WP=$999; //@line 186 "shamodule.c"
        var $1000=$D; //@line 186 "shamodule.c"
        var $1001=($1000) >>> 2; //@line 186 "shamodule.c"
        var $1002=($1000) << 30; //@line 186 "shamodule.c"
        var $1003=($1001) | ($1002); //@line 186 "shamodule.c"
        $D=$1003; //@line 186 "shamodule.c"
        var $1004=$B; //@line 186 "shamodule.c"
        var $1005=($1004) >>> 27; //@line 186 "shamodule.c"
        var $1006=($1004) << 5; //@line 186 "shamodule.c"
        var $1007=($1005) | ($1006); //@line 186 "shamodule.c"
        var $1008=$C; //@line 186 "shamodule.c"
        var $1009=$D; //@line 186 "shamodule.c"
        var $1010=($1009) & ($1008); //@line 186 "shamodule.c"
        var $1011=$C; //@line 186 "shamodule.c"
        var $1012=$D; //@line 186 "shamodule.c"
        var $1013=($1012) | ($1011); //@line 186 "shamodule.c"
        var $1014=$E; //@line 186 "shamodule.c"
        var $1015=($1013) & ($1014); //@line 186 "shamodule.c"
        var $1016=($1015) | ($1010); //@line 186 "shamodule.c"
        var $1017=$T; //@line 186 "shamodule.c"
        var $1018=$WP; //@line 186 "shamodule.c"
        var $1019=HEAP[$1018]; //@line 186 "shamodule.c"
        var $1020=($1007) + -1894007588; //@line 186 "shamodule.c"
        var $1021=($1020) + ($1017); //@line 186 "shamodule.c"
        var $1022=($1021) + ($1016); //@line 186 "shamodule.c"
        var $1023=($1022) + ($1019); //@line 186 "shamodule.c"
        $A=$1023; //@line 186 "shamodule.c"
        var $1024=$WP; //@line 186 "shamodule.c"
        var $1025=$1024+4; //@line 186 "shamodule.c"
        $WP=$1025; //@line 186 "shamodule.c"
        var $1026=$C; //@line 186 "shamodule.c"
        var $1027=($1026) >>> 2; //@line 186 "shamodule.c"
        var $1028=($1026) << 30; //@line 186 "shamodule.c"
        var $1029=($1027) | ($1028); //@line 186 "shamodule.c"
        $C=$1029; //@line 186 "shamodule.c"
        var $1030=$A; //@line 186 "shamodule.c"
        var $1031=($1030) >>> 27; //@line 186 "shamodule.c"
        var $1032=($1030) << 5; //@line 186 "shamodule.c"
        var $1033=($1031) | ($1032); //@line 186 "shamodule.c"
        var $1034=$B; //@line 186 "shamodule.c"
        var $1035=$C; //@line 186 "shamodule.c"
        var $1036=($1035) & ($1034); //@line 186 "shamodule.c"
        var $1037=$B; //@line 186 "shamodule.c"
        var $1038=$C; //@line 186 "shamodule.c"
        var $1039=($1038) | ($1037); //@line 186 "shamodule.c"
        var $1040=$D; //@line 186 "shamodule.c"
        var $1041=($1039) & ($1040); //@line 186 "shamodule.c"
        var $1042=($1041) | ($1036); //@line 186 "shamodule.c"
        var $1043=$E; //@line 186 "shamodule.c"
        var $1044=$WP; //@line 186 "shamodule.c"
        var $1045=HEAP[$1044]; //@line 186 "shamodule.c"
        var $1046=($1033) + -1894007588; //@line 186 "shamodule.c"
        var $1047=($1046) + ($1043); //@line 186 "shamodule.c"
        var $1048=($1047) + ($1042); //@line 186 "shamodule.c"
        var $1049=($1048) + ($1045); //@line 186 "shamodule.c"
        $T=$1049; //@line 186 "shamodule.c"
        var $1050=$WP; //@line 186 "shamodule.c"
        var $1051=$1050+4; //@line 186 "shamodule.c"
        $WP=$1051; //@line 186 "shamodule.c"
        var $1052=$B; //@line 186 "shamodule.c"
        var $1053=($1052) >>> 2; //@line 186 "shamodule.c"
        var $1054=($1052) << 30; //@line 186 "shamodule.c"
        var $1055=($1053) | ($1054); //@line 186 "shamodule.c"
        $B=$1055; //@line 186 "shamodule.c"
        var $1056=$T; //@line 186 "shamodule.c"
        var $1057=($1056) >>> 27; //@line 186 "shamodule.c"
        var $1058=($1056) << 5; //@line 186 "shamodule.c"
        var $1059=($1057) | ($1058); //@line 186 "shamodule.c"
        var $1060=$A; //@line 186 "shamodule.c"
        var $1061=$B; //@line 186 "shamodule.c"
        var $1062=($1061) & ($1060); //@line 186 "shamodule.c"
        var $1063=$A; //@line 186 "shamodule.c"
        var $1064=$B; //@line 186 "shamodule.c"
        var $1065=($1064) | ($1063); //@line 186 "shamodule.c"
        var $1066=$C; //@line 186 "shamodule.c"
        var $1067=($1065) & ($1066); //@line 186 "shamodule.c"
        var $1068=($1067) | ($1062); //@line 186 "shamodule.c"
        var $1069=$D; //@line 186 "shamodule.c"
        var $1070=$WP; //@line 186 "shamodule.c"
        var $1071=HEAP[$1070]; //@line 186 "shamodule.c"
        var $1072=($1059) + -1894007588; //@line 186 "shamodule.c"
        var $1073=($1072) + ($1069); //@line 186 "shamodule.c"
        var $1074=($1073) + ($1068); //@line 186 "shamodule.c"
        var $1075=($1074) + ($1071); //@line 186 "shamodule.c"
        $E=$1075; //@line 186 "shamodule.c"
        var $1076=$WP; //@line 186 "shamodule.c"
        var $1077=$1076+4; //@line 186 "shamodule.c"
        $WP=$1077; //@line 186 "shamodule.c"
        var $1078=$A; //@line 186 "shamodule.c"
        var $1079=($1078) >>> 2; //@line 186 "shamodule.c"
        var $1080=($1078) << 30; //@line 186 "shamodule.c"
        var $1081=($1079) | ($1080); //@line 186 "shamodule.c"
        $A=$1081; //@line 186 "shamodule.c"
        var $1082=$E; //@line 186 "shamodule.c"
        var $1083=($1082) >>> 27; //@line 186 "shamodule.c"
        var $1084=($1082) << 5; //@line 186 "shamodule.c"
        var $1085=($1083) | ($1084); //@line 186 "shamodule.c"
        var $1086=$T; //@line 186 "shamodule.c"
        var $1087=$A; //@line 186 "shamodule.c"
        var $1088=($1087) & ($1086); //@line 186 "shamodule.c"
        var $1089=$T; //@line 186 "shamodule.c"
        var $1090=$A; //@line 186 "shamodule.c"
        var $1091=($1090) | ($1089); //@line 186 "shamodule.c"
        var $1092=$B; //@line 186 "shamodule.c"
        var $1093=($1091) & ($1092); //@line 186 "shamodule.c"
        var $1094=($1093) | ($1088); //@line 186 "shamodule.c"
        var $1095=$C; //@line 186 "shamodule.c"
        var $1096=$WP; //@line 186 "shamodule.c"
        var $1097=HEAP[$1096]; //@line 186 "shamodule.c"
        var $1098=($1085) + -1894007588; //@line 186 "shamodule.c"
        var $1099=($1098) + ($1095); //@line 186 "shamodule.c"
        var $1100=($1099) + ($1094); //@line 186 "shamodule.c"
        var $1101=($1100) + ($1097); //@line 186 "shamodule.c"
        $D=$1101; //@line 186 "shamodule.c"
        var $1102=$WP; //@line 186 "shamodule.c"
        var $1103=$1102+4; //@line 186 "shamodule.c"
        $WP=$1103; //@line 186 "shamodule.c"
        var $1104=$T; //@line 186 "shamodule.c"
        var $1105=($1104) >>> 2; //@line 186 "shamodule.c"
        var $1106=($1104) << 30; //@line 186 "shamodule.c"
        var $1107=($1105) | ($1106); //@line 186 "shamodule.c"
        $T=$1107; //@line 186 "shamodule.c"
        var $1108=$D; //@line 186 "shamodule.c"
        var $1109=($1108) >>> 27; //@line 186 "shamodule.c"
        var $1110=($1108) << 5; //@line 186 "shamodule.c"
        var $1111=($1109) | ($1110); //@line 186 "shamodule.c"
        var $1112=$E; //@line 186 "shamodule.c"
        var $1113=$T; //@line 186 "shamodule.c"
        var $1114=($1113) & ($1112); //@line 186 "shamodule.c"
        var $1115=$E; //@line 186 "shamodule.c"
        var $1116=$T; //@line 186 "shamodule.c"
        var $1117=($1116) | ($1115); //@line 186 "shamodule.c"
        var $1118=$A; //@line 186 "shamodule.c"
        var $1119=($1117) & ($1118); //@line 186 "shamodule.c"
        var $1120=($1119) | ($1114); //@line 186 "shamodule.c"
        var $1121=$B; //@line 186 "shamodule.c"
        var $1122=$WP; //@line 186 "shamodule.c"
        var $1123=HEAP[$1122]; //@line 186 "shamodule.c"
        var $1124=($1111) + -1894007588; //@line 186 "shamodule.c"
        var $1125=($1124) + ($1121); //@line 186 "shamodule.c"
        var $1126=($1125) + ($1120); //@line 186 "shamodule.c"
        var $1127=($1126) + ($1123); //@line 186 "shamodule.c"
        $C=$1127; //@line 186 "shamodule.c"
        var $1128=$WP; //@line 186 "shamodule.c"
        var $1129=$1128+4; //@line 186 "shamodule.c"
        $WP=$1129; //@line 186 "shamodule.c"
        var $1130=$E; //@line 186 "shamodule.c"
        var $1131=($1130) >>> 2; //@line 186 "shamodule.c"
        var $1132=($1130) << 30; //@line 186 "shamodule.c"
        var $1133=($1131) | ($1132); //@line 186 "shamodule.c"
        $E=$1133; //@line 186 "shamodule.c"
        var $1134=$C; //@line 186 "shamodule.c"
        var $1135=($1134) >>> 27; //@line 186 "shamodule.c"
        var $1136=($1134) << 5; //@line 186 "shamodule.c"
        var $1137=($1135) | ($1136); //@line 186 "shamodule.c"
        var $1138=$D; //@line 186 "shamodule.c"
        var $1139=$E; //@line 186 "shamodule.c"
        var $1140=($1139) & ($1138); //@line 186 "shamodule.c"
        var $1141=$D; //@line 186 "shamodule.c"
        var $1142=$E; //@line 186 "shamodule.c"
        var $1143=($1142) | ($1141); //@line 186 "shamodule.c"
        var $1144=$T; //@line 186 "shamodule.c"
        var $1145=($1143) & ($1144); //@line 186 "shamodule.c"
        var $1146=($1145) | ($1140); //@line 186 "shamodule.c"
        var $1147=$A; //@line 186 "shamodule.c"
        var $1148=$WP; //@line 186 "shamodule.c"
        var $1149=HEAP[$1148]; //@line 186 "shamodule.c"
        var $1150=($1137) + -1894007588; //@line 186 "shamodule.c"
        var $1151=($1150) + ($1147); //@line 186 "shamodule.c"
        var $1152=($1151) + ($1146); //@line 186 "shamodule.c"
        var $1153=($1152) + ($1149); //@line 186 "shamodule.c"
        $B=$1153; //@line 186 "shamodule.c"
        var $1154=$WP; //@line 186 "shamodule.c"
        var $1155=$1154+4; //@line 186 "shamodule.c"
        $WP=$1155; //@line 186 "shamodule.c"
        var $1156=$D; //@line 186 "shamodule.c"
        var $1157=($1156) >>> 2; //@line 186 "shamodule.c"
        var $1158=($1156) << 30; //@line 186 "shamodule.c"
        var $1159=($1157) | ($1158); //@line 186 "shamodule.c"
        $D=$1159; //@line 186 "shamodule.c"
        var $1160=$B; //@line 186 "shamodule.c"
        var $1161=($1160) >>> 27; //@line 186 "shamodule.c"
        var $1162=($1160) << 5; //@line 186 "shamodule.c"
        var $1163=($1161) | ($1162); //@line 186 "shamodule.c"
        var $1164=$C; //@line 186 "shamodule.c"
        var $1165=$D; //@line 186 "shamodule.c"
        var $1166=($1165) & ($1164); //@line 186 "shamodule.c"
        var $1167=$C; //@line 186 "shamodule.c"
        var $1168=$D; //@line 186 "shamodule.c"
        var $1169=($1168) | ($1167); //@line 186 "shamodule.c"
        var $1170=$E; //@line 186 "shamodule.c"
        var $1171=($1169) & ($1170); //@line 186 "shamodule.c"
        var $1172=($1171) | ($1166); //@line 186 "shamodule.c"
        var $1173=$T; //@line 186 "shamodule.c"
        var $1174=$WP; //@line 186 "shamodule.c"
        var $1175=HEAP[$1174]; //@line 186 "shamodule.c"
        var $1176=($1163) + -1894007588; //@line 186 "shamodule.c"
        var $1177=($1176) + ($1173); //@line 186 "shamodule.c"
        var $1178=($1177) + ($1172); //@line 186 "shamodule.c"
        var $1179=($1178) + ($1175); //@line 186 "shamodule.c"
        $A=$1179; //@line 186 "shamodule.c"
        var $1180=$WP; //@line 186 "shamodule.c"
        var $1181=$1180+4; //@line 186 "shamodule.c"
        $WP=$1181; //@line 186 "shamodule.c"
        var $1182=$C; //@line 186 "shamodule.c"
        var $1183=($1182) >>> 2; //@line 186 "shamodule.c"
        var $1184=($1182) << 30; //@line 186 "shamodule.c"
        var $1185=($1183) | ($1184); //@line 186 "shamodule.c"
        $C=$1185; //@line 186 "shamodule.c"
        var $1186=$A; //@line 186 "shamodule.c"
        var $1187=($1186) >>> 27; //@line 186 "shamodule.c"
        var $1188=($1186) << 5; //@line 186 "shamodule.c"
        var $1189=($1187) | ($1188); //@line 186 "shamodule.c"
        var $1190=$B; //@line 186 "shamodule.c"
        var $1191=$C; //@line 186 "shamodule.c"
        var $1192=($1191) & ($1190); //@line 186 "shamodule.c"
        var $1193=$B; //@line 186 "shamodule.c"
        var $1194=$C; //@line 186 "shamodule.c"
        var $1195=($1194) | ($1193); //@line 186 "shamodule.c"
        var $1196=$D; //@line 186 "shamodule.c"
        var $1197=($1195) & ($1196); //@line 186 "shamodule.c"
        var $1198=($1197) | ($1192); //@line 186 "shamodule.c"
        var $1199=$E; //@line 186 "shamodule.c"
        var $1200=$WP; //@line 186 "shamodule.c"
        var $1201=HEAP[$1200]; //@line 186 "shamodule.c"
        var $1202=($1189) + -1894007588; //@line 186 "shamodule.c"
        var $1203=($1202) + ($1199); //@line 186 "shamodule.c"
        var $1204=($1203) + ($1198); //@line 186 "shamodule.c"
        var $1205=($1204) + ($1201); //@line 186 "shamodule.c"
        $T=$1205; //@line 186 "shamodule.c"
        var $1206=$WP; //@line 186 "shamodule.c"
        var $1207=$1206+4; //@line 186 "shamodule.c"
        $WP=$1207; //@line 186 "shamodule.c"
        var $1208=$B; //@line 186 "shamodule.c"
        var $1209=($1208) >>> 2; //@line 186 "shamodule.c"
        var $1210=($1208) << 30; //@line 186 "shamodule.c"
        var $1211=($1209) | ($1210); //@line 186 "shamodule.c"
        $B=$1211; //@line 186 "shamodule.c"
        var $1212=$T; //@line 186 "shamodule.c"
        var $1213=($1212) >>> 27; //@line 186 "shamodule.c"
        var $1214=($1212) << 5; //@line 186 "shamodule.c"
        var $1215=($1213) | ($1214); //@line 186 "shamodule.c"
        var $1216=$A; //@line 186 "shamodule.c"
        var $1217=$B; //@line 186 "shamodule.c"
        var $1218=($1217) & ($1216); //@line 186 "shamodule.c"
        var $1219=$A; //@line 186 "shamodule.c"
        var $1220=$B; //@line 186 "shamodule.c"
        var $1221=($1220) | ($1219); //@line 186 "shamodule.c"
        var $1222=$C; //@line 186 "shamodule.c"
        var $1223=($1221) & ($1222); //@line 186 "shamodule.c"
        var $1224=($1223) | ($1218); //@line 186 "shamodule.c"
        var $1225=$D; //@line 186 "shamodule.c"
        var $1226=$WP; //@line 186 "shamodule.c"
        var $1227=HEAP[$1226]; //@line 186 "shamodule.c"
        var $1228=($1215) + -1894007588; //@line 186 "shamodule.c"
        var $1229=($1228) + ($1225); //@line 186 "shamodule.c"
        var $1230=($1229) + ($1224); //@line 186 "shamodule.c"
        var $1231=($1230) + ($1227); //@line 186 "shamodule.c"
        $E=$1231; //@line 186 "shamodule.c"
        var $1232=$WP; //@line 186 "shamodule.c"
        var $1233=$1232+4; //@line 186 "shamodule.c"
        $WP=$1233; //@line 186 "shamodule.c"
        var $1234=$A; //@line 186 "shamodule.c"
        var $1235=($1234) >>> 2; //@line 186 "shamodule.c"
        var $1236=($1234) << 30; //@line 186 "shamodule.c"
        var $1237=($1235) | ($1236); //@line 186 "shamodule.c"
        $A=$1237; //@line 186 "shamodule.c"
        var $1238=$E; //@line 187 "shamodule.c"
        var $1239=($1238) >>> 27; //@line 187 "shamodule.c"
        var $1240=($1238) << 5; //@line 187 "shamodule.c"
        var $1241=($1239) | ($1240); //@line 187 "shamodule.c"
        var $1242=$T; //@line 187 "shamodule.c"
        var $1243=$A; //@line 187 "shamodule.c"
        var $1244=($1243) & ($1242); //@line 187 "shamodule.c"
        var $1245=$T; //@line 187 "shamodule.c"
        var $1246=$A; //@line 187 "shamodule.c"
        var $1247=($1246) | ($1245); //@line 187 "shamodule.c"
        var $1248=$B; //@line 187 "shamodule.c"
        var $1249=($1247) & ($1248); //@line 187 "shamodule.c"
        var $1250=($1249) | ($1244); //@line 187 "shamodule.c"
        var $1251=$C; //@line 187 "shamodule.c"
        var $1252=$WP; //@line 187 "shamodule.c"
        var $1253=HEAP[$1252]; //@line 187 "shamodule.c"
        var $1254=($1241) + -1894007588; //@line 187 "shamodule.c"
        var $1255=($1254) + ($1251); //@line 187 "shamodule.c"
        var $1256=($1255) + ($1250); //@line 187 "shamodule.c"
        var $1257=($1256) + ($1253); //@line 187 "shamodule.c"
        $D=$1257; //@line 187 "shamodule.c"
        var $1258=$WP; //@line 187 "shamodule.c"
        var $1259=$1258+4; //@line 187 "shamodule.c"
        $WP=$1259; //@line 187 "shamodule.c"
        var $1260=$T; //@line 187 "shamodule.c"
        var $1261=($1260) >>> 2; //@line 187 "shamodule.c"
        var $1262=($1260) << 30; //@line 187 "shamodule.c"
        var $1263=($1261) | ($1262); //@line 187 "shamodule.c"
        $T=$1263; //@line 187 "shamodule.c"
        var $1264=$D; //@line 187 "shamodule.c"
        var $1265=($1264) >>> 27; //@line 187 "shamodule.c"
        var $1266=($1264) << 5; //@line 187 "shamodule.c"
        var $1267=($1265) | ($1266); //@line 187 "shamodule.c"
        var $1268=$E; //@line 187 "shamodule.c"
        var $1269=$T; //@line 187 "shamodule.c"
        var $1270=($1269) & ($1268); //@line 187 "shamodule.c"
        var $1271=$E; //@line 187 "shamodule.c"
        var $1272=$T; //@line 187 "shamodule.c"
        var $1273=($1272) | ($1271); //@line 187 "shamodule.c"
        var $1274=$A; //@line 187 "shamodule.c"
        var $1275=($1273) & ($1274); //@line 187 "shamodule.c"
        var $1276=($1275) | ($1270); //@line 187 "shamodule.c"
        var $1277=$B; //@line 187 "shamodule.c"
        var $1278=$WP; //@line 187 "shamodule.c"
        var $1279=HEAP[$1278]; //@line 187 "shamodule.c"
        var $1280=($1267) + -1894007588; //@line 187 "shamodule.c"
        var $1281=($1280) + ($1277); //@line 187 "shamodule.c"
        var $1282=($1281) + ($1276); //@line 187 "shamodule.c"
        var $1283=($1282) + ($1279); //@line 187 "shamodule.c"
        $C=$1283; //@line 187 "shamodule.c"
        var $1284=$WP; //@line 187 "shamodule.c"
        var $1285=$1284+4; //@line 187 "shamodule.c"
        $WP=$1285; //@line 187 "shamodule.c"
        var $1286=$E; //@line 187 "shamodule.c"
        var $1287=($1286) >>> 2; //@line 187 "shamodule.c"
        var $1288=($1286) << 30; //@line 187 "shamodule.c"
        var $1289=($1287) | ($1288); //@line 187 "shamodule.c"
        $E=$1289; //@line 187 "shamodule.c"
        var $1290=$C; //@line 187 "shamodule.c"
        var $1291=($1290) >>> 27; //@line 187 "shamodule.c"
        var $1292=($1290) << 5; //@line 187 "shamodule.c"
        var $1293=($1291) | ($1292); //@line 187 "shamodule.c"
        var $1294=$D; //@line 187 "shamodule.c"
        var $1295=$E; //@line 187 "shamodule.c"
        var $1296=($1295) & ($1294); //@line 187 "shamodule.c"
        var $1297=$D; //@line 187 "shamodule.c"
        var $1298=$E; //@line 187 "shamodule.c"
        var $1299=($1298) | ($1297); //@line 187 "shamodule.c"
        var $1300=$T; //@line 187 "shamodule.c"
        var $1301=($1299) & ($1300); //@line 187 "shamodule.c"
        var $1302=($1301) | ($1296); //@line 187 "shamodule.c"
        var $1303=$A; //@line 187 "shamodule.c"
        var $1304=$WP; //@line 187 "shamodule.c"
        var $1305=HEAP[$1304]; //@line 187 "shamodule.c"
        var $1306=($1293) + -1894007588; //@line 187 "shamodule.c"
        var $1307=($1306) + ($1303); //@line 187 "shamodule.c"
        var $1308=($1307) + ($1302); //@line 187 "shamodule.c"
        var $1309=($1308) + ($1305); //@line 187 "shamodule.c"
        $B=$1309; //@line 187 "shamodule.c"
        var $1310=$WP; //@line 187 "shamodule.c"
        var $1311=$1310+4; //@line 187 "shamodule.c"
        $WP=$1311; //@line 187 "shamodule.c"
        var $1312=$D; //@line 187 "shamodule.c"
        var $1313=($1312) >>> 2; //@line 187 "shamodule.c"
        var $1314=($1312) << 30; //@line 187 "shamodule.c"
        var $1315=($1313) | ($1314); //@line 187 "shamodule.c"
        $D=$1315; //@line 187 "shamodule.c"
        var $1316=$B; //@line 187 "shamodule.c"
        var $1317=($1316) >>> 27; //@line 187 "shamodule.c"
        var $1318=($1316) << 5; //@line 187 "shamodule.c"
        var $1319=($1317) | ($1318); //@line 187 "shamodule.c"
        var $1320=$C; //@line 187 "shamodule.c"
        var $1321=$D; //@line 187 "shamodule.c"
        var $1322=($1321) & ($1320); //@line 187 "shamodule.c"
        var $1323=$C; //@line 187 "shamodule.c"
        var $1324=$D; //@line 187 "shamodule.c"
        var $1325=($1324) | ($1323); //@line 187 "shamodule.c"
        var $1326=$E; //@line 187 "shamodule.c"
        var $1327=($1325) & ($1326); //@line 187 "shamodule.c"
        var $1328=($1327) | ($1322); //@line 187 "shamodule.c"
        var $1329=$T; //@line 187 "shamodule.c"
        var $1330=$WP; //@line 187 "shamodule.c"
        var $1331=HEAP[$1330]; //@line 187 "shamodule.c"
        var $1332=($1319) + -1894007588; //@line 187 "shamodule.c"
        var $1333=($1332) + ($1329); //@line 187 "shamodule.c"
        var $1334=($1333) + ($1328); //@line 187 "shamodule.c"
        var $1335=($1334) + ($1331); //@line 187 "shamodule.c"
        $A=$1335; //@line 187 "shamodule.c"
        var $1336=$WP; //@line 187 "shamodule.c"
        var $1337=$1336+4; //@line 187 "shamodule.c"
        $WP=$1337; //@line 187 "shamodule.c"
        var $1338=$C; //@line 187 "shamodule.c"
        var $1339=($1338) >>> 2; //@line 187 "shamodule.c"
        var $1340=($1338) << 30; //@line 187 "shamodule.c"
        var $1341=($1339) | ($1340); //@line 187 "shamodule.c"
        $C=$1341; //@line 187 "shamodule.c"
        var $1342=$A; //@line 187 "shamodule.c"
        var $1343=($1342) >>> 27; //@line 187 "shamodule.c"
        var $1344=($1342) << 5; //@line 187 "shamodule.c"
        var $1345=($1343) | ($1344); //@line 187 "shamodule.c"
        var $1346=$B; //@line 187 "shamodule.c"
        var $1347=$C; //@line 187 "shamodule.c"
        var $1348=($1347) & ($1346); //@line 187 "shamodule.c"
        var $1349=$B; //@line 187 "shamodule.c"
        var $1350=$C; //@line 187 "shamodule.c"
        var $1351=($1350) | ($1349); //@line 187 "shamodule.c"
        var $1352=$D; //@line 187 "shamodule.c"
        var $1353=($1351) & ($1352); //@line 187 "shamodule.c"
        var $1354=($1353) | ($1348); //@line 187 "shamodule.c"
        var $1355=$E; //@line 187 "shamodule.c"
        var $1356=$WP; //@line 187 "shamodule.c"
        var $1357=HEAP[$1356]; //@line 187 "shamodule.c"
        var $1358=($1345) + -1894007588; //@line 187 "shamodule.c"
        var $1359=($1358) + ($1355); //@line 187 "shamodule.c"
        var $1360=($1359) + ($1354); //@line 187 "shamodule.c"
        var $1361=($1360) + ($1357); //@line 187 "shamodule.c"
        $T=$1361; //@line 187 "shamodule.c"
        var $1362=$WP; //@line 187 "shamodule.c"
        var $1363=$1362+4; //@line 187 "shamodule.c"
        $WP=$1363; //@line 187 "shamodule.c"
        var $1364=$B; //@line 187 "shamodule.c"
        var $1365=($1364) >>> 2; //@line 187 "shamodule.c"
        var $1366=($1364) << 30; //@line 187 "shamodule.c"
        var $1367=($1365) | ($1366); //@line 187 "shamodule.c"
        $B=$1367; //@line 187 "shamodule.c"
        var $1368=$T; //@line 187 "shamodule.c"
        var $1369=($1368) >>> 27; //@line 187 "shamodule.c"
        var $1370=($1368) << 5; //@line 187 "shamodule.c"
        var $1371=($1369) | ($1370); //@line 187 "shamodule.c"
        var $1372=$A; //@line 187 "shamodule.c"
        var $1373=$B; //@line 187 "shamodule.c"
        var $1374=($1373) & ($1372); //@line 187 "shamodule.c"
        var $1375=$A; //@line 187 "shamodule.c"
        var $1376=$B; //@line 187 "shamodule.c"
        var $1377=($1376) | ($1375); //@line 187 "shamodule.c"
        var $1378=$C; //@line 187 "shamodule.c"
        var $1379=($1377) & ($1378); //@line 187 "shamodule.c"
        var $1380=($1379) | ($1374); //@line 187 "shamodule.c"
        var $1381=$D; //@line 187 "shamodule.c"
        var $1382=$WP; //@line 187 "shamodule.c"
        var $1383=HEAP[$1382]; //@line 187 "shamodule.c"
        var $1384=($1371) + -1894007588; //@line 187 "shamodule.c"
        var $1385=($1384) + ($1381); //@line 187 "shamodule.c"
        var $1386=($1385) + ($1380); //@line 187 "shamodule.c"
        var $1387=($1386) + ($1383); //@line 187 "shamodule.c"
        $E=$1387; //@line 187 "shamodule.c"
        var $1388=$WP; //@line 187 "shamodule.c"
        var $1389=$1388+4; //@line 187 "shamodule.c"
        $WP=$1389; //@line 187 "shamodule.c"
        var $1390=$A; //@line 187 "shamodule.c"
        var $1391=($1390) >>> 2; //@line 187 "shamodule.c"
        var $1392=($1390) << 30; //@line 187 "shamodule.c"
        var $1393=($1391) | ($1392); //@line 187 "shamodule.c"
        $A=$1393; //@line 187 "shamodule.c"
        var $1394=$E; //@line 187 "shamodule.c"
        var $1395=($1394) >>> 27; //@line 187 "shamodule.c"
        var $1396=($1394) << 5; //@line 187 "shamodule.c"
        var $1397=($1395) | ($1396); //@line 187 "shamodule.c"
        var $1398=$T; //@line 187 "shamodule.c"
        var $1399=$A; //@line 187 "shamodule.c"
        var $1400=($1399) & ($1398); //@line 187 "shamodule.c"
        var $1401=$T; //@line 187 "shamodule.c"
        var $1402=$A; //@line 187 "shamodule.c"
        var $1403=($1402) | ($1401); //@line 187 "shamodule.c"
        var $1404=$B; //@line 187 "shamodule.c"
        var $1405=($1403) & ($1404); //@line 187 "shamodule.c"
        var $1406=($1405) | ($1400); //@line 187 "shamodule.c"
        var $1407=$C; //@line 187 "shamodule.c"
        var $1408=$WP; //@line 187 "shamodule.c"
        var $1409=HEAP[$1408]; //@line 187 "shamodule.c"
        var $1410=($1397) + -1894007588; //@line 187 "shamodule.c"
        var $1411=($1410) + ($1407); //@line 187 "shamodule.c"
        var $1412=($1411) + ($1406); //@line 187 "shamodule.c"
        var $1413=($1412) + ($1409); //@line 187 "shamodule.c"
        $D=$1413; //@line 187 "shamodule.c"
        var $1414=$WP; //@line 187 "shamodule.c"
        var $1415=$1414+4; //@line 187 "shamodule.c"
        $WP=$1415; //@line 187 "shamodule.c"
        var $1416=$T; //@line 187 "shamodule.c"
        var $1417=($1416) >>> 2; //@line 187 "shamodule.c"
        var $1418=($1416) << 30; //@line 187 "shamodule.c"
        var $1419=($1417) | ($1418); //@line 187 "shamodule.c"
        $T=$1419; //@line 187 "shamodule.c"
        var $1420=$D; //@line 187 "shamodule.c"
        var $1421=($1420) >>> 27; //@line 187 "shamodule.c"
        var $1422=($1420) << 5; //@line 187 "shamodule.c"
        var $1423=($1421) | ($1422); //@line 187 "shamodule.c"
        var $1424=$E; //@line 187 "shamodule.c"
        var $1425=$T; //@line 187 "shamodule.c"
        var $1426=($1425) & ($1424); //@line 187 "shamodule.c"
        var $1427=$E; //@line 187 "shamodule.c"
        var $1428=$T; //@line 187 "shamodule.c"
        var $1429=($1428) | ($1427); //@line 187 "shamodule.c"
        var $1430=$A; //@line 187 "shamodule.c"
        var $1431=($1429) & ($1430); //@line 187 "shamodule.c"
        var $1432=($1431) | ($1426); //@line 187 "shamodule.c"
        var $1433=$B; //@line 187 "shamodule.c"
        var $1434=$WP; //@line 187 "shamodule.c"
        var $1435=HEAP[$1434]; //@line 187 "shamodule.c"
        var $1436=($1423) + -1894007588; //@line 187 "shamodule.c"
        var $1437=($1436) + ($1433); //@line 187 "shamodule.c"
        var $1438=($1437) + ($1432); //@line 187 "shamodule.c"
        var $1439=($1438) + ($1435); //@line 187 "shamodule.c"
        $C=$1439; //@line 187 "shamodule.c"
        var $1440=$WP; //@line 187 "shamodule.c"
        var $1441=$1440+4; //@line 187 "shamodule.c"
        $WP=$1441; //@line 187 "shamodule.c"
        var $1442=$E; //@line 187 "shamodule.c"
        var $1443=($1442) >>> 2; //@line 187 "shamodule.c"
        var $1444=($1442) << 30; //@line 187 "shamodule.c"
        var $1445=($1443) | ($1444); //@line 187 "shamodule.c"
        $E=$1445; //@line 187 "shamodule.c"
        var $1446=$C; //@line 187 "shamodule.c"
        var $1447=($1446) >>> 27; //@line 187 "shamodule.c"
        var $1448=($1446) << 5; //@line 187 "shamodule.c"
        var $1449=($1447) | ($1448); //@line 187 "shamodule.c"
        var $1450=$D; //@line 187 "shamodule.c"
        var $1451=$E; //@line 187 "shamodule.c"
        var $1452=($1451) & ($1450); //@line 187 "shamodule.c"
        var $1453=$D; //@line 187 "shamodule.c"
        var $1454=$E; //@line 187 "shamodule.c"
        var $1455=($1454) | ($1453); //@line 187 "shamodule.c"
        var $1456=$T; //@line 187 "shamodule.c"
        var $1457=($1455) & ($1456); //@line 187 "shamodule.c"
        var $1458=($1457) | ($1452); //@line 187 "shamodule.c"
        var $1459=$A; //@line 187 "shamodule.c"
        var $1460=$WP; //@line 187 "shamodule.c"
        var $1461=HEAP[$1460]; //@line 187 "shamodule.c"
        var $1462=($1449) + -1894007588; //@line 187 "shamodule.c"
        var $1463=($1462) + ($1459); //@line 187 "shamodule.c"
        var $1464=($1463) + ($1458); //@line 187 "shamodule.c"
        var $1465=($1464) + ($1461); //@line 187 "shamodule.c"
        $B=$1465; //@line 187 "shamodule.c"
        var $1466=$WP; //@line 187 "shamodule.c"
        var $1467=$1466+4; //@line 187 "shamodule.c"
        $WP=$1467; //@line 187 "shamodule.c"
        var $1468=$D; //@line 187 "shamodule.c"
        var $1469=($1468) >>> 2; //@line 187 "shamodule.c"
        var $1470=($1468) << 30; //@line 187 "shamodule.c"
        var $1471=($1469) | ($1470); //@line 187 "shamodule.c"
        $D=$1471; //@line 187 "shamodule.c"
        var $1472=$B; //@line 187 "shamodule.c"
        var $1473=($1472) >>> 27; //@line 187 "shamodule.c"
        var $1474=($1472) << 5; //@line 187 "shamodule.c"
        var $1475=($1473) | ($1474); //@line 187 "shamodule.c"
        var $1476=$C; //@line 187 "shamodule.c"
        var $1477=$D; //@line 187 "shamodule.c"
        var $1478=($1477) & ($1476); //@line 187 "shamodule.c"
        var $1479=$C; //@line 187 "shamodule.c"
        var $1480=$D; //@line 187 "shamodule.c"
        var $1481=($1480) | ($1479); //@line 187 "shamodule.c"
        var $1482=$E; //@line 187 "shamodule.c"
        var $1483=($1481) & ($1482); //@line 187 "shamodule.c"
        var $1484=($1483) | ($1478); //@line 187 "shamodule.c"
        var $1485=$T; //@line 187 "shamodule.c"
        var $1486=$WP; //@line 187 "shamodule.c"
        var $1487=HEAP[$1486]; //@line 187 "shamodule.c"
        var $1488=($1475) + -1894007588; //@line 187 "shamodule.c"
        var $1489=($1488) + ($1485); //@line 187 "shamodule.c"
        var $1490=($1489) + ($1484); //@line 187 "shamodule.c"
        var $1491=($1490) + ($1487); //@line 187 "shamodule.c"
        $A=$1491; //@line 187 "shamodule.c"
        var $1492=$WP; //@line 187 "shamodule.c"
        var $1493=$1492+4; //@line 187 "shamodule.c"
        $WP=$1493; //@line 187 "shamodule.c"
        var $1494=$C; //@line 187 "shamodule.c"
        var $1495=($1494) >>> 2; //@line 187 "shamodule.c"
        var $1496=($1494) << 30; //@line 187 "shamodule.c"
        var $1497=($1495) | ($1496); //@line 187 "shamodule.c"
        $C=$1497; //@line 187 "shamodule.c"
        var $1498=$A; //@line 188 "shamodule.c"
        var $1499=($1498) >>> 27; //@line 188 "shamodule.c"
        var $1500=($1498) << 5; //@line 188 "shamodule.c"
        var $1501=($1499) | ($1500); //@line 188 "shamodule.c"
        var $1502=$B; //@line 188 "shamodule.c"
        var $1503=$C; //@line 188 "shamodule.c"
        var $1504=$D; //@line 188 "shamodule.c"
        var $1505=($1503) ^ ($1502); //@line 188 "shamodule.c"
        var $1506=($1505) ^ ($1504); //@line 188 "shamodule.c"
        var $1507=$E; //@line 188 "shamodule.c"
        var $1508=$WP; //@line 188 "shamodule.c"
        var $1509=HEAP[$1508]; //@line 188 "shamodule.c"
        var $1510=($1501) + -899497514; //@line 188 "shamodule.c"
        var $1511=($1510) + ($1507); //@line 188 "shamodule.c"
        var $1512=($1511) + ($1506); //@line 188 "shamodule.c"
        var $1513=($1512) + ($1509); //@line 188 "shamodule.c"
        $T=$1513; //@line 188 "shamodule.c"
        var $1514=$WP; //@line 188 "shamodule.c"
        var $1515=$1514+4; //@line 188 "shamodule.c"
        $WP=$1515; //@line 188 "shamodule.c"
        var $1516=$B; //@line 188 "shamodule.c"
        var $1517=($1516) >>> 2; //@line 188 "shamodule.c"
        var $1518=($1516) << 30; //@line 188 "shamodule.c"
        var $1519=($1517) | ($1518); //@line 188 "shamodule.c"
        $B=$1519; //@line 188 "shamodule.c"
        var $1520=$T; //@line 188 "shamodule.c"
        var $1521=($1520) >>> 27; //@line 188 "shamodule.c"
        var $1522=($1520) << 5; //@line 188 "shamodule.c"
        var $1523=($1521) | ($1522); //@line 188 "shamodule.c"
        var $1524=$A; //@line 188 "shamodule.c"
        var $1525=$B; //@line 188 "shamodule.c"
        var $1526=$C; //@line 188 "shamodule.c"
        var $1527=($1525) ^ ($1524); //@line 188 "shamodule.c"
        var $1528=($1527) ^ ($1526); //@line 188 "shamodule.c"
        var $1529=$D; //@line 188 "shamodule.c"
        var $1530=$WP; //@line 188 "shamodule.c"
        var $1531=HEAP[$1530]; //@line 188 "shamodule.c"
        var $1532=($1523) + -899497514; //@line 188 "shamodule.c"
        var $1533=($1532) + ($1529); //@line 188 "shamodule.c"
        var $1534=($1533) + ($1528); //@line 188 "shamodule.c"
        var $1535=($1534) + ($1531); //@line 188 "shamodule.c"
        $E=$1535; //@line 188 "shamodule.c"
        var $1536=$WP; //@line 188 "shamodule.c"
        var $1537=$1536+4; //@line 188 "shamodule.c"
        $WP=$1537; //@line 188 "shamodule.c"
        var $1538=$A; //@line 188 "shamodule.c"
        var $1539=($1538) >>> 2; //@line 188 "shamodule.c"
        var $1540=($1538) << 30; //@line 188 "shamodule.c"
        var $1541=($1539) | ($1540); //@line 188 "shamodule.c"
        $A=$1541; //@line 188 "shamodule.c"
        var $1542=$E; //@line 188 "shamodule.c"
        var $1543=($1542) >>> 27; //@line 188 "shamodule.c"
        var $1544=($1542) << 5; //@line 188 "shamodule.c"
        var $1545=($1543) | ($1544); //@line 188 "shamodule.c"
        var $1546=$T; //@line 188 "shamodule.c"
        var $1547=$A; //@line 188 "shamodule.c"
        var $1548=$B; //@line 188 "shamodule.c"
        var $1549=($1547) ^ ($1546); //@line 188 "shamodule.c"
        var $1550=($1549) ^ ($1548); //@line 188 "shamodule.c"
        var $1551=$C; //@line 188 "shamodule.c"
        var $1552=$WP; //@line 188 "shamodule.c"
        var $1553=HEAP[$1552]; //@line 188 "shamodule.c"
        var $1554=($1545) + -899497514; //@line 188 "shamodule.c"
        var $1555=($1554) + ($1551); //@line 188 "shamodule.c"
        var $1556=($1555) + ($1550); //@line 188 "shamodule.c"
        var $1557=($1556) + ($1553); //@line 188 "shamodule.c"
        $D=$1557; //@line 188 "shamodule.c"
        var $1558=$WP; //@line 188 "shamodule.c"
        var $1559=$1558+4; //@line 188 "shamodule.c"
        $WP=$1559; //@line 188 "shamodule.c"
        var $1560=$T; //@line 188 "shamodule.c"
        var $1561=($1560) >>> 2; //@line 188 "shamodule.c"
        var $1562=($1560) << 30; //@line 188 "shamodule.c"
        var $1563=($1561) | ($1562); //@line 188 "shamodule.c"
        $T=$1563; //@line 188 "shamodule.c"
        var $1564=$D; //@line 188 "shamodule.c"
        var $1565=($1564) >>> 27; //@line 188 "shamodule.c"
        var $1566=($1564) << 5; //@line 188 "shamodule.c"
        var $1567=($1565) | ($1566); //@line 188 "shamodule.c"
        var $1568=$E; //@line 188 "shamodule.c"
        var $1569=$T; //@line 188 "shamodule.c"
        var $1570=$A; //@line 188 "shamodule.c"
        var $1571=($1569) ^ ($1568); //@line 188 "shamodule.c"
        var $1572=($1571) ^ ($1570); //@line 188 "shamodule.c"
        var $1573=$B; //@line 188 "shamodule.c"
        var $1574=$WP; //@line 188 "shamodule.c"
        var $1575=HEAP[$1574]; //@line 188 "shamodule.c"
        var $1576=($1567) + -899497514; //@line 188 "shamodule.c"
        var $1577=($1576) + ($1573); //@line 188 "shamodule.c"
        var $1578=($1577) + ($1572); //@line 188 "shamodule.c"
        var $1579=($1578) + ($1575); //@line 188 "shamodule.c"
        $C=$1579; //@line 188 "shamodule.c"
        var $1580=$WP; //@line 188 "shamodule.c"
        var $1581=$1580+4; //@line 188 "shamodule.c"
        $WP=$1581; //@line 188 "shamodule.c"
        var $1582=$E; //@line 188 "shamodule.c"
        var $1583=($1582) >>> 2; //@line 188 "shamodule.c"
        var $1584=($1582) << 30; //@line 188 "shamodule.c"
        var $1585=($1583) | ($1584); //@line 188 "shamodule.c"
        $E=$1585; //@line 188 "shamodule.c"
        var $1586=$C; //@line 188 "shamodule.c"
        var $1587=($1586) >>> 27; //@line 188 "shamodule.c"
        var $1588=($1586) << 5; //@line 188 "shamodule.c"
        var $1589=($1587) | ($1588); //@line 188 "shamodule.c"
        var $1590=$D; //@line 188 "shamodule.c"
        var $1591=$E; //@line 188 "shamodule.c"
        var $1592=$T; //@line 188 "shamodule.c"
        var $1593=($1591) ^ ($1590); //@line 188 "shamodule.c"
        var $1594=($1593) ^ ($1592); //@line 188 "shamodule.c"
        var $1595=$A; //@line 188 "shamodule.c"
        var $1596=$WP; //@line 188 "shamodule.c"
        var $1597=HEAP[$1596]; //@line 188 "shamodule.c"
        var $1598=($1589) + -899497514; //@line 188 "shamodule.c"
        var $1599=($1598) + ($1595); //@line 188 "shamodule.c"
        var $1600=($1599) + ($1594); //@line 188 "shamodule.c"
        var $1601=($1600) + ($1597); //@line 188 "shamodule.c"
        $B=$1601; //@line 188 "shamodule.c"
        var $1602=$WP; //@line 188 "shamodule.c"
        var $1603=$1602+4; //@line 188 "shamodule.c"
        $WP=$1603; //@line 188 "shamodule.c"
        var $1604=$D; //@line 188 "shamodule.c"
        var $1605=($1604) >>> 2; //@line 188 "shamodule.c"
        var $1606=($1604) << 30; //@line 188 "shamodule.c"
        var $1607=($1605) | ($1606); //@line 188 "shamodule.c"
        $D=$1607; //@line 188 "shamodule.c"
        var $1608=$B; //@line 188 "shamodule.c"
        var $1609=($1608) >>> 27; //@line 188 "shamodule.c"
        var $1610=($1608) << 5; //@line 188 "shamodule.c"
        var $1611=($1609) | ($1610); //@line 188 "shamodule.c"
        var $1612=$C; //@line 188 "shamodule.c"
        var $1613=$D; //@line 188 "shamodule.c"
        var $1614=$E; //@line 188 "shamodule.c"
        var $1615=($1613) ^ ($1612); //@line 188 "shamodule.c"
        var $1616=($1615) ^ ($1614); //@line 188 "shamodule.c"
        var $1617=$T; //@line 188 "shamodule.c"
        var $1618=$WP; //@line 188 "shamodule.c"
        var $1619=HEAP[$1618]; //@line 188 "shamodule.c"
        var $1620=($1611) + -899497514; //@line 188 "shamodule.c"
        var $1621=($1620) + ($1617); //@line 188 "shamodule.c"
        var $1622=($1621) + ($1616); //@line 188 "shamodule.c"
        var $1623=($1622) + ($1619); //@line 188 "shamodule.c"
        $A=$1623; //@line 188 "shamodule.c"
        var $1624=$WP; //@line 188 "shamodule.c"
        var $1625=$1624+4; //@line 188 "shamodule.c"
        $WP=$1625; //@line 188 "shamodule.c"
        var $1626=$C; //@line 188 "shamodule.c"
        var $1627=($1626) >>> 2; //@line 188 "shamodule.c"
        var $1628=($1626) << 30; //@line 188 "shamodule.c"
        var $1629=($1627) | ($1628); //@line 188 "shamodule.c"
        $C=$1629; //@line 188 "shamodule.c"
        var $1630=$A; //@line 188 "shamodule.c"
        var $1631=($1630) >>> 27; //@line 188 "shamodule.c"
        var $1632=($1630) << 5; //@line 188 "shamodule.c"
        var $1633=($1631) | ($1632); //@line 188 "shamodule.c"
        var $1634=$B; //@line 188 "shamodule.c"
        var $1635=$C; //@line 188 "shamodule.c"
        var $1636=$D; //@line 188 "shamodule.c"
        var $1637=($1635) ^ ($1634); //@line 188 "shamodule.c"
        var $1638=($1637) ^ ($1636); //@line 188 "shamodule.c"
        var $1639=$E; //@line 188 "shamodule.c"
        var $1640=$WP; //@line 188 "shamodule.c"
        var $1641=HEAP[$1640]; //@line 188 "shamodule.c"
        var $1642=($1633) + -899497514; //@line 188 "shamodule.c"
        var $1643=($1642) + ($1639); //@line 188 "shamodule.c"
        var $1644=($1643) + ($1638); //@line 188 "shamodule.c"
        var $1645=($1644) + ($1641); //@line 188 "shamodule.c"
        $T=$1645; //@line 188 "shamodule.c"
        var $1646=$WP; //@line 188 "shamodule.c"
        var $1647=$1646+4; //@line 188 "shamodule.c"
        $WP=$1647; //@line 188 "shamodule.c"
        var $1648=$B; //@line 188 "shamodule.c"
        var $1649=($1648) >>> 2; //@line 188 "shamodule.c"
        var $1650=($1648) << 30; //@line 188 "shamodule.c"
        var $1651=($1649) | ($1650); //@line 188 "shamodule.c"
        $B=$1651; //@line 188 "shamodule.c"
        var $1652=$T; //@line 188 "shamodule.c"
        var $1653=($1652) >>> 27; //@line 188 "shamodule.c"
        var $1654=($1652) << 5; //@line 188 "shamodule.c"
        var $1655=($1653) | ($1654); //@line 188 "shamodule.c"
        var $1656=$A; //@line 188 "shamodule.c"
        var $1657=$B; //@line 188 "shamodule.c"
        var $1658=$C; //@line 188 "shamodule.c"
        var $1659=($1657) ^ ($1656); //@line 188 "shamodule.c"
        var $1660=($1659) ^ ($1658); //@line 188 "shamodule.c"
        var $1661=$D; //@line 188 "shamodule.c"
        var $1662=$WP; //@line 188 "shamodule.c"
        var $1663=HEAP[$1662]; //@line 188 "shamodule.c"
        var $1664=($1655) + -899497514; //@line 188 "shamodule.c"
        var $1665=($1664) + ($1661); //@line 188 "shamodule.c"
        var $1666=($1665) + ($1660); //@line 188 "shamodule.c"
        var $1667=($1666) + ($1663); //@line 188 "shamodule.c"
        $E=$1667; //@line 188 "shamodule.c"
        var $1668=$WP; //@line 188 "shamodule.c"
        var $1669=$1668+4; //@line 188 "shamodule.c"
        $WP=$1669; //@line 188 "shamodule.c"
        var $1670=$A; //@line 188 "shamodule.c"
        var $1671=($1670) >>> 2; //@line 188 "shamodule.c"
        var $1672=($1670) << 30; //@line 188 "shamodule.c"
        var $1673=($1671) | ($1672); //@line 188 "shamodule.c"
        $A=$1673; //@line 188 "shamodule.c"
        var $1674=$E; //@line 188 "shamodule.c"
        var $1675=($1674) >>> 27; //@line 188 "shamodule.c"
        var $1676=($1674) << 5; //@line 188 "shamodule.c"
        var $1677=($1675) | ($1676); //@line 188 "shamodule.c"
        var $1678=$T; //@line 188 "shamodule.c"
        var $1679=$A; //@line 188 "shamodule.c"
        var $1680=$B; //@line 188 "shamodule.c"
        var $1681=($1679) ^ ($1678); //@line 188 "shamodule.c"
        var $1682=($1681) ^ ($1680); //@line 188 "shamodule.c"
        var $1683=$C; //@line 188 "shamodule.c"
        var $1684=$WP; //@line 188 "shamodule.c"
        var $1685=HEAP[$1684]; //@line 188 "shamodule.c"
        var $1686=($1677) + -899497514; //@line 188 "shamodule.c"
        var $1687=($1686) + ($1683); //@line 188 "shamodule.c"
        var $1688=($1687) + ($1682); //@line 188 "shamodule.c"
        var $1689=($1688) + ($1685); //@line 188 "shamodule.c"
        $D=$1689; //@line 188 "shamodule.c"
        var $1690=$WP; //@line 188 "shamodule.c"
        var $1691=$1690+4; //@line 188 "shamodule.c"
        $WP=$1691; //@line 188 "shamodule.c"
        var $1692=$T; //@line 188 "shamodule.c"
        var $1693=($1692) >>> 2; //@line 188 "shamodule.c"
        var $1694=($1692) << 30; //@line 188 "shamodule.c"
        var $1695=($1693) | ($1694); //@line 188 "shamodule.c"
        $T=$1695; //@line 188 "shamodule.c"
        var $1696=$D; //@line 188 "shamodule.c"
        var $1697=($1696) >>> 27; //@line 188 "shamodule.c"
        var $1698=($1696) << 5; //@line 188 "shamodule.c"
        var $1699=($1697) | ($1698); //@line 188 "shamodule.c"
        var $1700=$E; //@line 188 "shamodule.c"
        var $1701=$T; //@line 188 "shamodule.c"
        var $1702=$A; //@line 188 "shamodule.c"
        var $1703=($1701) ^ ($1700); //@line 188 "shamodule.c"
        var $1704=($1703) ^ ($1702); //@line 188 "shamodule.c"
        var $1705=$B; //@line 188 "shamodule.c"
        var $1706=$WP; //@line 188 "shamodule.c"
        var $1707=HEAP[$1706]; //@line 188 "shamodule.c"
        var $1708=($1699) + -899497514; //@line 188 "shamodule.c"
        var $1709=($1708) + ($1705); //@line 188 "shamodule.c"
        var $1710=($1709) + ($1704); //@line 188 "shamodule.c"
        var $1711=($1710) + ($1707); //@line 188 "shamodule.c"
        $C=$1711; //@line 188 "shamodule.c"
        var $1712=$WP; //@line 188 "shamodule.c"
        var $1713=$1712+4; //@line 188 "shamodule.c"
        $WP=$1713; //@line 188 "shamodule.c"
        var $1714=$E; //@line 188 "shamodule.c"
        var $1715=($1714) >>> 2; //@line 188 "shamodule.c"
        var $1716=($1714) << 30; //@line 188 "shamodule.c"
        var $1717=($1715) | ($1716); //@line 188 "shamodule.c"
        $E=$1717; //@line 188 "shamodule.c"
        var $1718=$C; //@line 189 "shamodule.c"
        var $1719=($1718) >>> 27; //@line 189 "shamodule.c"
        var $1720=($1718) << 5; //@line 189 "shamodule.c"
        var $1721=($1719) | ($1720); //@line 189 "shamodule.c"
        var $1722=$D; //@line 189 "shamodule.c"
        var $1723=$E; //@line 189 "shamodule.c"
        var $1724=$T; //@line 189 "shamodule.c"
        var $1725=($1723) ^ ($1722); //@line 189 "shamodule.c"
        var $1726=($1725) ^ ($1724); //@line 189 "shamodule.c"
        var $1727=$A; //@line 189 "shamodule.c"
        var $1728=$WP; //@line 189 "shamodule.c"
        var $1729=HEAP[$1728]; //@line 189 "shamodule.c"
        var $1730=($1721) + -899497514; //@line 189 "shamodule.c"
        var $1731=($1730) + ($1727); //@line 189 "shamodule.c"
        var $1732=($1731) + ($1726); //@line 189 "shamodule.c"
        var $1733=($1732) + ($1729); //@line 189 "shamodule.c"
        $B=$1733; //@line 189 "shamodule.c"
        var $1734=$WP; //@line 189 "shamodule.c"
        var $1735=$1734+4; //@line 189 "shamodule.c"
        $WP=$1735; //@line 189 "shamodule.c"
        var $1736=$D; //@line 189 "shamodule.c"
        var $1737=($1736) >>> 2; //@line 189 "shamodule.c"
        var $1738=($1736) << 30; //@line 189 "shamodule.c"
        var $1739=($1737) | ($1738); //@line 189 "shamodule.c"
        $D=$1739; //@line 189 "shamodule.c"
        var $1740=$B; //@line 189 "shamodule.c"
        var $1741=($1740) >>> 27; //@line 189 "shamodule.c"
        var $1742=($1740) << 5; //@line 189 "shamodule.c"
        var $1743=($1741) | ($1742); //@line 189 "shamodule.c"
        var $1744=$C; //@line 189 "shamodule.c"
        var $1745=$D; //@line 189 "shamodule.c"
        var $1746=$E; //@line 189 "shamodule.c"
        var $1747=($1745) ^ ($1744); //@line 189 "shamodule.c"
        var $1748=($1747) ^ ($1746); //@line 189 "shamodule.c"
        var $1749=$T; //@line 189 "shamodule.c"
        var $1750=$WP; //@line 189 "shamodule.c"
        var $1751=HEAP[$1750]; //@line 189 "shamodule.c"
        var $1752=($1743) + -899497514; //@line 189 "shamodule.c"
        var $1753=($1752) + ($1749); //@line 189 "shamodule.c"
        var $1754=($1753) + ($1748); //@line 189 "shamodule.c"
        var $1755=($1754) + ($1751); //@line 189 "shamodule.c"
        $A=$1755; //@line 189 "shamodule.c"
        var $1756=$WP; //@line 189 "shamodule.c"
        var $1757=$1756+4; //@line 189 "shamodule.c"
        $WP=$1757; //@line 189 "shamodule.c"
        var $1758=$C; //@line 189 "shamodule.c"
        var $1759=($1758) >>> 2; //@line 189 "shamodule.c"
        var $1760=($1758) << 30; //@line 189 "shamodule.c"
        var $1761=($1759) | ($1760); //@line 189 "shamodule.c"
        $C=$1761; //@line 189 "shamodule.c"
        var $1762=$A; //@line 189 "shamodule.c"
        var $1763=($1762) >>> 27; //@line 189 "shamodule.c"
        var $1764=($1762) << 5; //@line 189 "shamodule.c"
        var $1765=($1763) | ($1764); //@line 189 "shamodule.c"
        var $1766=$B; //@line 189 "shamodule.c"
        var $1767=$C; //@line 189 "shamodule.c"
        var $1768=$D; //@line 189 "shamodule.c"
        var $1769=($1767) ^ ($1766); //@line 189 "shamodule.c"
        var $1770=($1769) ^ ($1768); //@line 189 "shamodule.c"
        var $1771=$E; //@line 189 "shamodule.c"
        var $1772=$WP; //@line 189 "shamodule.c"
        var $1773=HEAP[$1772]; //@line 189 "shamodule.c"
        var $1774=($1765) + -899497514; //@line 189 "shamodule.c"
        var $1775=($1774) + ($1771); //@line 189 "shamodule.c"
        var $1776=($1775) + ($1770); //@line 189 "shamodule.c"
        var $1777=($1776) + ($1773); //@line 189 "shamodule.c"
        $T=$1777; //@line 189 "shamodule.c"
        var $1778=$WP; //@line 189 "shamodule.c"
        var $1779=$1778+4; //@line 189 "shamodule.c"
        $WP=$1779; //@line 189 "shamodule.c"
        var $1780=$B; //@line 189 "shamodule.c"
        var $1781=($1780) >>> 2; //@line 189 "shamodule.c"
        var $1782=($1780) << 30; //@line 189 "shamodule.c"
        var $1783=($1781) | ($1782); //@line 189 "shamodule.c"
        $B=$1783; //@line 189 "shamodule.c"
        var $1784=$T; //@line 189 "shamodule.c"
        var $1785=($1784) >>> 27; //@line 189 "shamodule.c"
        var $1786=($1784) << 5; //@line 189 "shamodule.c"
        var $1787=($1785) | ($1786); //@line 189 "shamodule.c"
        var $1788=$A; //@line 189 "shamodule.c"
        var $1789=$B; //@line 189 "shamodule.c"
        var $1790=$C; //@line 189 "shamodule.c"
        var $1791=($1789) ^ ($1788); //@line 189 "shamodule.c"
        var $1792=($1791) ^ ($1790); //@line 189 "shamodule.c"
        var $1793=$D; //@line 189 "shamodule.c"
        var $1794=$WP; //@line 189 "shamodule.c"
        var $1795=HEAP[$1794]; //@line 189 "shamodule.c"
        var $1796=($1787) + -899497514; //@line 189 "shamodule.c"
        var $1797=($1796) + ($1793); //@line 189 "shamodule.c"
        var $1798=($1797) + ($1792); //@line 189 "shamodule.c"
        var $1799=($1798) + ($1795); //@line 189 "shamodule.c"
        $E=$1799; //@line 189 "shamodule.c"
        var $1800=$WP; //@line 189 "shamodule.c"
        var $1801=$1800+4; //@line 189 "shamodule.c"
        $WP=$1801; //@line 189 "shamodule.c"
        var $1802=$A; //@line 189 "shamodule.c"
        var $1803=($1802) >>> 2; //@line 189 "shamodule.c"
        var $1804=($1802) << 30; //@line 189 "shamodule.c"
        var $1805=($1803) | ($1804); //@line 189 "shamodule.c"
        $A=$1805; //@line 189 "shamodule.c"
        var $1806=$E; //@line 189 "shamodule.c"
        var $1807=($1806) >>> 27; //@line 189 "shamodule.c"
        var $1808=($1806) << 5; //@line 189 "shamodule.c"
        var $1809=($1807) | ($1808); //@line 189 "shamodule.c"
        var $1810=$T; //@line 189 "shamodule.c"
        var $1811=$A; //@line 189 "shamodule.c"
        var $1812=$B; //@line 189 "shamodule.c"
        var $1813=($1811) ^ ($1810); //@line 189 "shamodule.c"
        var $1814=($1813) ^ ($1812); //@line 189 "shamodule.c"
        var $1815=$C; //@line 189 "shamodule.c"
        var $1816=$WP; //@line 189 "shamodule.c"
        var $1817=HEAP[$1816]; //@line 189 "shamodule.c"
        var $1818=($1809) + -899497514; //@line 189 "shamodule.c"
        var $1819=($1818) + ($1815); //@line 189 "shamodule.c"
        var $1820=($1819) + ($1814); //@line 189 "shamodule.c"
        var $1821=($1820) + ($1817); //@line 189 "shamodule.c"
        $D=$1821; //@line 189 "shamodule.c"
        var $1822=$WP; //@line 189 "shamodule.c"
        var $1823=$1822+4; //@line 189 "shamodule.c"
        $WP=$1823; //@line 189 "shamodule.c"
        var $1824=$T; //@line 189 "shamodule.c"
        var $1825=($1824) >>> 2; //@line 189 "shamodule.c"
        var $1826=($1824) << 30; //@line 189 "shamodule.c"
        var $1827=($1825) | ($1826); //@line 189 "shamodule.c"
        $T=$1827; //@line 189 "shamodule.c"
        var $1828=$D; //@line 189 "shamodule.c"
        var $1829=($1828) >>> 27; //@line 189 "shamodule.c"
        var $1830=($1828) << 5; //@line 189 "shamodule.c"
        var $1831=($1829) | ($1830); //@line 189 "shamodule.c"
        var $1832=$E; //@line 189 "shamodule.c"
        var $1833=$T; //@line 189 "shamodule.c"
        var $1834=$A; //@line 189 "shamodule.c"
        var $1835=($1833) ^ ($1832); //@line 189 "shamodule.c"
        var $1836=($1835) ^ ($1834); //@line 189 "shamodule.c"
        var $1837=$B; //@line 189 "shamodule.c"
        var $1838=$WP; //@line 189 "shamodule.c"
        var $1839=HEAP[$1838]; //@line 189 "shamodule.c"
        var $1840=($1831) + -899497514; //@line 189 "shamodule.c"
        var $1841=($1840) + ($1837); //@line 189 "shamodule.c"
        var $1842=($1841) + ($1836); //@line 189 "shamodule.c"
        var $1843=($1842) + ($1839); //@line 189 "shamodule.c"
        $C=$1843; //@line 189 "shamodule.c"
        var $1844=$WP; //@line 189 "shamodule.c"
        var $1845=$1844+4; //@line 189 "shamodule.c"
        $WP=$1845; //@line 189 "shamodule.c"
        var $1846=$E; //@line 189 "shamodule.c"
        var $1847=($1846) >>> 2; //@line 189 "shamodule.c"
        var $1848=($1846) << 30; //@line 189 "shamodule.c"
        var $1849=($1847) | ($1848); //@line 189 "shamodule.c"
        $E=$1849; //@line 189 "shamodule.c"
        var $1850=$C; //@line 189 "shamodule.c"
        var $1851=($1850) >>> 27; //@line 189 "shamodule.c"
        var $1852=($1850) << 5; //@line 189 "shamodule.c"
        var $1853=($1851) | ($1852); //@line 189 "shamodule.c"
        var $1854=$D; //@line 189 "shamodule.c"
        var $1855=$E; //@line 189 "shamodule.c"
        var $1856=$T; //@line 189 "shamodule.c"
        var $1857=($1855) ^ ($1854); //@line 189 "shamodule.c"
        var $1858=($1857) ^ ($1856); //@line 189 "shamodule.c"
        var $1859=$A; //@line 189 "shamodule.c"
        var $1860=$WP; //@line 189 "shamodule.c"
        var $1861=HEAP[$1860]; //@line 189 "shamodule.c"
        var $1862=($1853) + -899497514; //@line 189 "shamodule.c"
        var $1863=($1862) + ($1859); //@line 189 "shamodule.c"
        var $1864=($1863) + ($1858); //@line 189 "shamodule.c"
        var $1865=($1864) + ($1861); //@line 189 "shamodule.c"
        $B=$1865; //@line 189 "shamodule.c"
        var $1866=$WP; //@line 189 "shamodule.c"
        var $1867=$1866+4; //@line 189 "shamodule.c"
        $WP=$1867; //@line 189 "shamodule.c"
        var $1868=$D; //@line 189 "shamodule.c"
        var $1869=($1868) >>> 2; //@line 189 "shamodule.c"
        var $1870=($1868) << 30; //@line 189 "shamodule.c"
        var $1871=($1869) | ($1870); //@line 189 "shamodule.c"
        $D=$1871; //@line 189 "shamodule.c"
        var $1872=$B; //@line 189 "shamodule.c"
        var $1873=($1872) >>> 27; //@line 189 "shamodule.c"
        var $1874=($1872) << 5; //@line 189 "shamodule.c"
        var $1875=($1873) | ($1874); //@line 189 "shamodule.c"
        var $1876=$C; //@line 189 "shamodule.c"
        var $1877=$D; //@line 189 "shamodule.c"
        var $1878=$E; //@line 189 "shamodule.c"
        var $1879=($1877) ^ ($1876); //@line 189 "shamodule.c"
        var $1880=($1879) ^ ($1878); //@line 189 "shamodule.c"
        var $1881=$T; //@line 189 "shamodule.c"
        var $1882=$WP; //@line 189 "shamodule.c"
        var $1883=HEAP[$1882]; //@line 189 "shamodule.c"
        var $1884=($1875) + -899497514; //@line 189 "shamodule.c"
        var $1885=($1884) + ($1881); //@line 189 "shamodule.c"
        var $1886=($1885) + ($1880); //@line 189 "shamodule.c"
        var $1887=($1886) + ($1883); //@line 189 "shamodule.c"
        $A=$1887; //@line 189 "shamodule.c"
        var $1888=$WP; //@line 189 "shamodule.c"
        var $1889=$1888+4; //@line 189 "shamodule.c"
        $WP=$1889; //@line 189 "shamodule.c"
        var $1890=$C; //@line 189 "shamodule.c"
        var $1891=($1890) >>> 2; //@line 189 "shamodule.c"
        var $1892=($1890) << 30; //@line 189 "shamodule.c"
        var $1893=($1891) | ($1892); //@line 189 "shamodule.c"
        $C=$1893; //@line 189 "shamodule.c"
        var $1894=$A; //@line 189 "shamodule.c"
        var $1895=($1894) >>> 27; //@line 189 "shamodule.c"
        var $1896=($1894) << 5; //@line 189 "shamodule.c"
        var $1897=($1895) | ($1896); //@line 189 "shamodule.c"
        var $1898=$B; //@line 189 "shamodule.c"
        var $1899=$C; //@line 189 "shamodule.c"
        var $1900=$D; //@line 189 "shamodule.c"
        var $1901=($1899) ^ ($1898); //@line 189 "shamodule.c"
        var $1902=($1901) ^ ($1900); //@line 189 "shamodule.c"
        var $1903=$E; //@line 189 "shamodule.c"
        var $1904=$WP; //@line 189 "shamodule.c"
        var $1905=HEAP[$1904]; //@line 189 "shamodule.c"
        var $1906=($1897) + -899497514; //@line 189 "shamodule.c"
        var $1907=($1906) + ($1903); //@line 189 "shamodule.c"
        var $1908=($1907) + ($1902); //@line 189 "shamodule.c"
        var $1909=($1908) + ($1905); //@line 189 "shamodule.c"
        $T=$1909; //@line 189 "shamodule.c"
        var $1910=$WP; //@line 189 "shamodule.c"
        var $1911=$1910+4; //@line 189 "shamodule.c"
        $WP=$1911; //@line 189 "shamodule.c"
        var $1912=$B; //@line 189 "shamodule.c"
        var $1913=($1912) >>> 2; //@line 189 "shamodule.c"
        var $1914=($1912) << 30; //@line 189 "shamodule.c"
        var $1915=($1913) | ($1914); //@line 189 "shamodule.c"
        $B=$1915; //@line 189 "shamodule.c"
        var $1916=$T; //@line 189 "shamodule.c"
        var $1917=($1916) >>> 27; //@line 189 "shamodule.c"
        var $1918=($1916) << 5; //@line 189 "shamodule.c"
        var $1919=($1917) | ($1918); //@line 189 "shamodule.c"
        var $1920=$A; //@line 189 "shamodule.c"
        var $1921=$B; //@line 189 "shamodule.c"
        var $1922=$C; //@line 189 "shamodule.c"
        var $1923=($1921) ^ ($1920); //@line 189 "shamodule.c"
        var $1924=($1923) ^ ($1922); //@line 189 "shamodule.c"
        var $1925=$D; //@line 189 "shamodule.c"
        var $1926=$WP; //@line 189 "shamodule.c"
        var $1927=HEAP[$1926]; //@line 189 "shamodule.c"
        var $1928=($1919) + -899497514; //@line 189 "shamodule.c"
        var $1929=($1928) + ($1925); //@line 189 "shamodule.c"
        var $1930=($1929) + ($1924); //@line 189 "shamodule.c"
        var $1931=($1930) + ($1927); //@line 189 "shamodule.c"
        $E=$1931; //@line 189 "shamodule.c"
        var $1932=$WP; //@line 189 "shamodule.c"
        var $1933=$1932+4; //@line 189 "shamodule.c"
        $WP=$1933; //@line 189 "shamodule.c"
        var $1934=$A; //@line 189 "shamodule.c"
        var $1935=($1934) >>> 2; //@line 189 "shamodule.c"
        var $1936=($1934) << 30; //@line 189 "shamodule.c"
        var $1937=($1935) | ($1936); //@line 189 "shamodule.c"
        $A=$1937; //@line 189 "shamodule.c"
        var $1938=$sha_info_addr; //@line 190 "shamodule.c"
        var $1939=$1938+8; //@line 190 "shamodule.c"
        var $1940=$1939; //@line 190 "shamodule.c"
        var $1941=HEAP[$1940]; //@line 190 "shamodule.c"
        var $1942=$E; //@line 190 "shamodule.c"
        var $1943=($1942) + ($1941); //@line 190 "shamodule.c"
        var $1944=$sha_info_addr; //@line 190 "shamodule.c"
        var $1945=$1944+8; //@line 190 "shamodule.c"
        var $1946=$1945; //@line 190 "shamodule.c"
        HEAP[$1946]=$1943; //@line 190 "shamodule.c"
        var $1947=$sha_info_addr; //@line 191 "shamodule.c"
        var $1948=$1947+8; //@line 191 "shamodule.c"
        var $1949=$1948+4; //@line 191 "shamodule.c"
        var $1950=HEAP[$1949]; //@line 191 "shamodule.c"
        var $1951=$T; //@line 191 "shamodule.c"
        var $1952=($1951) + ($1950); //@line 191 "shamodule.c"
        var $1953=$sha_info_addr; //@line 191 "shamodule.c"
        var $1954=$1953+8; //@line 191 "shamodule.c"
        var $1955=$1954+4; //@line 191 "shamodule.c"
        HEAP[$1955]=$1952; //@line 191 "shamodule.c"
        var $1956=$sha_info_addr; //@line 192 "shamodule.c"
        var $1957=$1956+8; //@line 192 "shamodule.c"
        var $1958=$1957+8; //@line 192 "shamodule.c"
        var $1959=HEAP[$1958]; //@line 192 "shamodule.c"
        var $1960=$A; //@line 192 "shamodule.c"
        var $1961=($1960) + ($1959); //@line 192 "shamodule.c"
        var $1962=$sha_info_addr; //@line 192 "shamodule.c"
        var $1963=$1962+8; //@line 192 "shamodule.c"
        var $1964=$1963+8; //@line 192 "shamodule.c"
        HEAP[$1964]=$1961; //@line 192 "shamodule.c"
        var $1965=$sha_info_addr; //@line 193 "shamodule.c"
        var $1966=$1965+8; //@line 193 "shamodule.c"
        var $1967=$1966+12; //@line 193 "shamodule.c"
        var $1968=HEAP[$1967]; //@line 193 "shamodule.c"
        var $1969=$B; //@line 193 "shamodule.c"
        var $1970=($1969) + ($1968); //@line 193 "shamodule.c"
        var $1971=$sha_info_addr; //@line 193 "shamodule.c"
        var $1972=$1971+8; //@line 193 "shamodule.c"
        var $1973=$1972+12; //@line 193 "shamodule.c"
        HEAP[$1973]=$1970; //@line 193 "shamodule.c"
        var $1974=$sha_info_addr; //@line 194 "shamodule.c"
        var $1975=$1974+8; //@line 194 "shamodule.c"
        var $1976=$1975+16; //@line 194 "shamodule.c"
        var $1977=HEAP[$1976]; //@line 194 "shamodule.c"
        var $1978=$C; //@line 194 "shamodule.c"
        var $1979=($1978) + ($1977); //@line 194 "shamodule.c"
        var $1980=$sha_info_addr; //@line 194 "shamodule.c"
        var $1981=$1980+8; //@line 194 "shamodule.c"
        var $1982=$1981+16; //@line 194 "shamodule.c"
        HEAP[$1982]=$1979; //@line 194 "shamodule.c"
        STACKTOP = __stackBase__;
        return; //@line 217 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _sha_init($sha_info) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $sha_info_addr;
        var $i=__stackBase__;
        $sha_info_addr=$sha_info;
        HEAP[$i]=1; //@line 224 "shamodule.c"
        var $0=$sha_info_addr; //@line 224 "shamodule.c"
        var $1=$0+100; //@line 224 "shamodule.c"
        HEAP[$1]=0; //@line 224 "shamodule.c"
        var $i1=$i; //@line 224 "shamodule.c"
        var $2=HEAP[$i1]; //@line 224 "shamodule.c"
        var $3=($2)==1; //@line 224 "shamodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 224 "shamodule.c"
      case 1: // $bb
        var $4=$sha_info_addr; //@line 224 "shamodule.c"
        var $5=$4+100; //@line 224 "shamodule.c"
        HEAP[$5]=1; //@line 224 "shamodule.c"
        __label__ = 2; break; //@line 224 "shamodule.c"
      case 2: // $bb3
        var $6=$sha_info_addr; //@line 226 "shamodule.c"
        var $7=$6+8; //@line 226 "shamodule.c"
        var $8=$7; //@line 226 "shamodule.c"
        HEAP[$8]=1732584193; //@line 226 "shamodule.c"
        var $9=$sha_info_addr; //@line 227 "shamodule.c"
        var $10=$9+8; //@line 227 "shamodule.c"
        var $11=$10+4; //@line 227 "shamodule.c"
        HEAP[$11]=-271733879; //@line 227 "shamodule.c"
        var $12=$sha_info_addr; //@line 228 "shamodule.c"
        var $13=$12+8; //@line 228 "shamodule.c"
        var $14=$13+8; //@line 228 "shamodule.c"
        HEAP[$14]=-1732584194; //@line 228 "shamodule.c"
        var $15=$sha_info_addr; //@line 229 "shamodule.c"
        var $16=$15+8; //@line 229 "shamodule.c"
        var $17=$16+12; //@line 229 "shamodule.c"
        HEAP[$17]=271733878; //@line 229 "shamodule.c"
        var $18=$sha_info_addr; //@line 230 "shamodule.c"
        var $19=$18+8; //@line 230 "shamodule.c"
        var $20=$19+16; //@line 230 "shamodule.c"
        HEAP[$20]=-1009589776; //@line 230 "shamodule.c"
        var $21=$sha_info_addr; //@line 231 "shamodule.c"
        var $22=$21+28; //@line 231 "shamodule.c"
        HEAP[$22]=0; //@line 231 "shamodule.c"
        var $23=$sha_info_addr; //@line 232 "shamodule.c"
        var $24=$23+32; //@line 232 "shamodule.c"
        HEAP[$24]=0; //@line 232 "shamodule.c"
        var $25=$sha_info_addr; //@line 233 "shamodule.c"
        var $26=$25+104; //@line 233 "shamodule.c"
        HEAP[$26]=0; //@line 233 "shamodule.c"
        STACKTOP = __stackBase__;
        return; //@line 234 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _sha_update($sha_info, $buffer, $count) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $sha_info_addr;
        var $buffer_addr;
        var $count_addr;
        var $i;
        var $clo;
        $sha_info_addr=$sha_info;
        $buffer_addr=$buffer;
        $count_addr=$count;
        var $0=$sha_info_addr; //@line 244 "shamodule.c"
        var $1=$0+28; //@line 244 "shamodule.c"
        var $2=HEAP[$1]; //@line 244 "shamodule.c"
        var $3=$count_addr; //@line 244 "shamodule.c"
        var $4=($3) * 8;
        var $5=($4) + ($2); //@line 244 "shamodule.c"
        $clo=$5; //@line 244 "shamodule.c"
        var $6=$sha_info_addr; //@line 245 "shamodule.c"
        var $7=$6+28; //@line 245 "shamodule.c"
        var $8=HEAP[$7]; //@line 245 "shamodule.c"
        var $9=$clo; //@line 245 "shamodule.c"
        var $10=($8) > ($9); //@line 245 "shamodule.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 245 "shamodule.c"
      case 1: // $bb
        var $11=$sha_info_addr; //@line 246 "shamodule.c"
        var $12=$11+32; //@line 246 "shamodule.c"
        var $13=HEAP[$12]; //@line 246 "shamodule.c"
        var $14=($13) + 1; //@line 246 "shamodule.c"
        var $15=$sha_info_addr; //@line 246 "shamodule.c"
        var $16=$15+32; //@line 246 "shamodule.c"
        HEAP[$16]=$14; //@line 246 "shamodule.c"
        __label__ = 2; break; //@line 246 "shamodule.c"
      case 2: // $bb1
        var $17=$sha_info_addr; //@line 248 "shamodule.c"
        var $18=$17+28; //@line 248 "shamodule.c"
        var $19=$clo; //@line 248 "shamodule.c"
        HEAP[$18]=$19; //@line 248 "shamodule.c"
        var $20=$sha_info_addr; //@line 249 "shamodule.c"
        var $21=$20+32; //@line 249 "shamodule.c"
        var $22=HEAP[$21]; //@line 249 "shamodule.c"
        var $23=$count_addr; //@line 249 "shamodule.c"
        var $24=($23) >>> 29; //@line 249 "shamodule.c"
        var $25=($24) + ($22); //@line 249 "shamodule.c"
        var $26=$sha_info_addr; //@line 249 "shamodule.c"
        var $27=$26+32; //@line 249 "shamodule.c"
        HEAP[$27]=$25; //@line 249 "shamodule.c"
        var $28=$sha_info_addr; //@line 250 "shamodule.c"
        var $29=$28+104; //@line 250 "shamodule.c"
        var $30=HEAP[$29]; //@line 250 "shamodule.c"
        var $31=($30)!=0; //@line 250 "shamodule.c"
        if ($31) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 250 "shamodule.c"
      case 3: // $bb2
        var $32=$sha_info_addr; //@line 251 "shamodule.c"
        var $33=$32+104; //@line 251 "shamodule.c"
        var $34=HEAP[$33]; //@line 251 "shamodule.c"
        var $35=64 - ($34); //@line 251 "shamodule.c"
        $i=$35; //@line 251 "shamodule.c"
        var $36=$i; //@line 252 "shamodule.c"
        var $37=$count_addr; //@line 252 "shamodule.c"
        var $38=($36) > ($37); //@line 252 "shamodule.c"
        if ($38) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 252 "shamodule.c"
      case 4: // $bb3
        var $39=$count_addr; //@line 253 "shamodule.c"
        $i=$39; //@line 253 "shamodule.c"
        __label__ = 5; break; //@line 253 "shamodule.c"
      case 5: // $bb4
        var $40=$sha_info_addr; //@line 255 "shamodule.c"
        var $41=$40+36; //@line 255 "shamodule.c"
        var $42=$41; //@line 255 "shamodule.c"
        var $43=$sha_info_addr; //@line 255 "shamodule.c"
        var $44=$43+104; //@line 255 "shamodule.c"
        var $45=HEAP[$44]; //@line 255 "shamodule.c"
        var $46=$42+$45; //@line 255 "shamodule.c"
        var $47=$buffer_addr; //@line 255 "shamodule.c"
        var $48=$i; //@line 255 "shamodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($46, $47, $48, 1, 0); //@line 255 "shamodule.c"
        var $49=$count_addr; //@line 256 "shamodule.c"
        var $50=$i; //@line 256 "shamodule.c"
        var $51=($49) - ($50); //@line 256 "shamodule.c"
        $count_addr=$51; //@line 256 "shamodule.c"
        var $52=$buffer_addr; //@line 257 "shamodule.c"
        var $53=$i; //@line 257 "shamodule.c"
        var $54=$52+$53; //@line 257 "shamodule.c"
        $buffer_addr=$54; //@line 257 "shamodule.c"
        var $55=$sha_info_addr; //@line 258 "shamodule.c"
        var $56=$55+104; //@line 258 "shamodule.c"
        var $57=HEAP[$56]; //@line 258 "shamodule.c"
        var $58=$i; //@line 258 "shamodule.c"
        var $59=($58) + ($57); //@line 258 "shamodule.c"
        var $60=$sha_info_addr; //@line 258 "shamodule.c"
        var $61=$60+104; //@line 258 "shamodule.c"
        HEAP[$61]=$59; //@line 258 "shamodule.c"
        var $62=$sha_info_addr; //@line 259 "shamodule.c"
        var $63=$62+104; //@line 259 "shamodule.c"
        var $64=HEAP[$63]; //@line 259 "shamodule.c"
        var $65=($64)==64; //@line 259 "shamodule.c"
        if ($65) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 259 "shamodule.c"
      case 6: // $bb5
        var $66=$sha_info_addr; //@line 260 "shamodule.c"
        _sha_transform($66); //@line 260 "shamodule.c"
        __label__ = 7; break; //@line 260 "shamodule.c"
      case 7: // $bb8_preheader
        var $67=$count_addr; //@line 266 "shamodule.c"
        var $68=($67) > 63; //@line 266 "shamodule.c"
        var $69=$sha_info_addr; //@line 267 "shamodule.c"
        var $70=$69+36; //@line 267 "shamodule.c"
        var $71=$70; //@line 267 "shamodule.c"
        var $72=$buffer_addr; //@line 267 "shamodule.c"
        if ($68) { __lastLabel__ = 7; __label__ = 8; break; } else { __lastLabel__ = 7; __label__ = 9; break; } //@line 266 "shamodule.c"
      case 8: // $bb7
        var $73=__lastLabel__ == 8 ? $85 : ($72);
        var $74=__lastLabel__ == 8 ? $84 : ($71);
        _llvm_memcpy_p0i8_p0i8_i32($74, $73, 64, 1, 0); //@line 267 "shamodule.c"
        var $75=$buffer_addr; //@line 268 "shamodule.c"
        var $76=$75+64; //@line 268 "shamodule.c"
        $buffer_addr=$76; //@line 268 "shamodule.c"
        var $77=$count_addr; //@line 269 "shamodule.c"
        var $78=($77) - 64; //@line 269 "shamodule.c"
        $count_addr=$78; //@line 269 "shamodule.c"
        var $79=$sha_info_addr; //@line 270 "shamodule.c"
        _sha_transform($79); //@line 270 "shamodule.c"
        var $80=$count_addr; //@line 266 "shamodule.c"
        var $81=($80) > 63; //@line 266 "shamodule.c"
        var $82=$sha_info_addr; //@line 267 "shamodule.c"
        var $83=$82+36; //@line 267 "shamodule.c"
        var $84=$83; //@line 267 "shamodule.c"
        var $85=$buffer_addr; //@line 267 "shamodule.c"
        if ($81) { __lastLabel__ = 8; __label__ = 8; break; } else { __lastLabel__ = 8; __label__ = 9; break; } //@line 266 "shamodule.c"
      case 9: // $bb9
        var $_lcssa1=__lastLabel__ == 7 ? $72 : ($85);
        var $_lcssa=__lastLabel__ == 7 ? $71 : ($84);
        var $86=$count_addr; //@line 272 "shamodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($_lcssa, $_lcssa1, $86, 1, 0); //@line 272 "shamodule.c"
        var $87=$count_addr; //@line 273 "shamodule.c"
        var $88=$sha_info_addr; //@line 273 "shamodule.c"
        var $89=$88+104; //@line 273 "shamodule.c"
        HEAP[$89]=$87; //@line 273 "shamodule.c"
        __label__ = 10; break; //@line 273 "shamodule.c"
      case 10: // $return
        ;
        return; //@line 263 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _sha_final($digest, $sha_info) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $digest_addr;
        var $sha_info_addr;
        var $count;
        var $lo_bit_count;
        var $hi_bit_count;
        $digest_addr=$digest;
        $sha_info_addr=$sha_info;
        var $0=$sha_info_addr; //@line 284 "shamodule.c"
        var $1=$0+28; //@line 284 "shamodule.c"
        var $2=HEAP[$1]; //@line 284 "shamodule.c"
        $lo_bit_count=$2; //@line 284 "shamodule.c"
        var $3=$sha_info_addr; //@line 285 "shamodule.c"
        var $4=$3+32; //@line 285 "shamodule.c"
        var $5=HEAP[$4]; //@line 285 "shamodule.c"
        $hi_bit_count=$5; //@line 285 "shamodule.c"
        var $6=$lo_bit_count; //@line 286 "shamodule.c"
        var $7=($6) >>> 3; //@line 286 "shamodule.c"
        var $8=($7) & 63; //@line 286 "shamodule.c"
        $count=$8; //@line 286 "shamodule.c"
        var $9=$sha_info_addr; //@line 287 "shamodule.c"
        var $10=$9+36; //@line 287 "shamodule.c"
        var $11=$10; //@line 287 "shamodule.c"
        var $12=$count; //@line 287 "shamodule.c"
        var $13=$11+$12; //@line 287 "shamodule.c"
        HEAP[$13]=-128; //@line 287 "shamodule.c"
        var $14=$count; //@line 287 "shamodule.c"
        var $15=($14) + 1; //@line 287 "shamodule.c"
        $count=$15; //@line 287 "shamodule.c"
        var $16=$count; //@line 288 "shamodule.c"
        var $17=($16) > 56; //@line 288 "shamodule.c"
        var $18=$count; //@line 289 "shamodule.c"
        if ($17) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 288 "shamodule.c"
      case 1: // $bb
        var $19=64 - ($18); //@line 289 "shamodule.c"
        var $20=$sha_info_addr; //@line 289 "shamodule.c"
        var $21=$20+36; //@line 289 "shamodule.c"
        var $22=$21; //@line 289 "shamodule.c"
        var $23=$count; //@line 289 "shamodule.c"
        var $24=$22+$23; //@line 289 "shamodule.c"
        _llvm_memset_p0i8_i32($24, 0, $19, 1, 0); //@line 289 "shamodule.c"
        var $25=$sha_info_addr; //@line 291 "shamodule.c"
        _sha_transform($25); //@line 291 "shamodule.c"
        var $26=$sha_info_addr; //@line 292 "shamodule.c"
        var $27=$26+36; //@line 292 "shamodule.c"
        var $28=$27; //@line 292 "shamodule.c"
        _llvm_memset_p0i8_i32($28, 0, 56, 1, 0); //@line 292 "shamodule.c"
        __label__ = 3; break; //@line 292 "shamodule.c"
      case 2: // $bb1
        var $29=56 - ($18); //@line 295 "shamodule.c"
        var $30=$sha_info_addr; //@line 295 "shamodule.c"
        var $31=$30+36; //@line 295 "shamodule.c"
        var $32=$31; //@line 295 "shamodule.c"
        var $33=$count; //@line 295 "shamodule.c"
        var $34=$32+$33; //@line 295 "shamodule.c"
        _llvm_memset_p0i8_i32($34, 0, $29, 1, 0); //@line 295 "shamodule.c"
        __label__ = 3; break; //@line 295 "shamodule.c"
      case 3: // $bb2
        var $35=$hi_bit_count; //@line 301 "shamodule.c"
        var $36=($35) >>> 24; //@line 301 "shamodule.c"
        var $37=((($36)) & 255); //@line 301 "shamodule.c"
        var $38=$sha_info_addr; //@line 301 "shamodule.c"
        var $39=$38+36; //@line 301 "shamodule.c"
        var $40=$39+56; //@line 301 "shamodule.c"
        HEAP[$40]=$37; //@line 301 "shamodule.c"
        var $41=$hi_bit_count; //@line 302 "shamodule.c"
        var $42=($41) >>> 16; //@line 302 "shamodule.c"
        var $43=((($42)) & 255); //@line 302 "shamodule.c"
        var $44=$sha_info_addr; //@line 302 "shamodule.c"
        var $45=$44+36; //@line 302 "shamodule.c"
        var $46=$45+57; //@line 302 "shamodule.c"
        HEAP[$46]=$43; //@line 302 "shamodule.c"
        var $47=$hi_bit_count; //@line 303 "shamodule.c"
        var $48=($47) >>> 8; //@line 303 "shamodule.c"
        var $49=((($48)) & 255); //@line 303 "shamodule.c"
        var $50=$sha_info_addr; //@line 303 "shamodule.c"
        var $51=$50+36; //@line 303 "shamodule.c"
        var $52=$51+58; //@line 303 "shamodule.c"
        HEAP[$52]=$49; //@line 303 "shamodule.c"
        var $53=$hi_bit_count; //@line 304 "shamodule.c"
        var $54=((($53)) & 255); //@line 304 "shamodule.c"
        var $55=$sha_info_addr; //@line 304 "shamodule.c"
        var $56=$55+36; //@line 304 "shamodule.c"
        var $57=$56+59; //@line 304 "shamodule.c"
        HEAP[$57]=$54; //@line 304 "shamodule.c"
        var $58=$lo_bit_count; //@line 305 "shamodule.c"
        var $59=($58) >>> 24; //@line 305 "shamodule.c"
        var $60=((($59)) & 255); //@line 305 "shamodule.c"
        var $61=$sha_info_addr; //@line 305 "shamodule.c"
        var $62=$61+36; //@line 305 "shamodule.c"
        var $63=$62+60; //@line 305 "shamodule.c"
        HEAP[$63]=$60; //@line 305 "shamodule.c"
        var $64=$lo_bit_count; //@line 306 "shamodule.c"
        var $65=($64) >>> 16; //@line 306 "shamodule.c"
        var $66=((($65)) & 255); //@line 306 "shamodule.c"
        var $67=$sha_info_addr; //@line 306 "shamodule.c"
        var $68=$67+36; //@line 306 "shamodule.c"
        var $69=$68+61; //@line 306 "shamodule.c"
        HEAP[$69]=$66; //@line 306 "shamodule.c"
        var $70=$lo_bit_count; //@line 307 "shamodule.c"
        var $71=($70) >>> 8; //@line 307 "shamodule.c"
        var $72=((($71)) & 255); //@line 307 "shamodule.c"
        var $73=$sha_info_addr; //@line 307 "shamodule.c"
        var $74=$73+36; //@line 307 "shamodule.c"
        var $75=$74+62; //@line 307 "shamodule.c"
        HEAP[$75]=$72; //@line 307 "shamodule.c"
        var $76=$lo_bit_count; //@line 308 "shamodule.c"
        var $77=((($76)) & 255); //@line 308 "shamodule.c"
        var $78=$sha_info_addr; //@line 308 "shamodule.c"
        var $79=$78+36; //@line 308 "shamodule.c"
        var $80=$79+63; //@line 308 "shamodule.c"
        HEAP[$80]=$77; //@line 308 "shamodule.c"
        var $81=$sha_info_addr; //@line 309 "shamodule.c"
        _sha_transform($81); //@line 309 "shamodule.c"
        var $82=$sha_info_addr; //@line 310 "shamodule.c"
        var $83=$82+8; //@line 310 "shamodule.c"
        var $84=$83; //@line 310 "shamodule.c"
        var $85=HEAP[$84]; //@line 310 "shamodule.c"
        var $86=($85) >>> 24; //@line 310 "shamodule.c"
        var $87=((($86)) & 255); //@line 310 "shamodule.c"
        var $88=$digest_addr; //@line 310 "shamodule.c"
        var $89=$88; //@line 310 "shamodule.c"
        HEAP[$89]=$87; //@line 310 "shamodule.c"
        var $90=$sha_info_addr; //@line 311 "shamodule.c"
        var $91=$90+8; //@line 311 "shamodule.c"
        var $92=$91; //@line 311 "shamodule.c"
        var $93=HEAP[$92]; //@line 311 "shamodule.c"
        var $94=($93) >>> 16; //@line 311 "shamodule.c"
        var $95=((($94)) & 255); //@line 311 "shamodule.c"
        var $96=$digest_addr; //@line 311 "shamodule.c"
        var $97=$96+1; //@line 311 "shamodule.c"
        HEAP[$97]=$95; //@line 311 "shamodule.c"
        var $98=$sha_info_addr; //@line 312 "shamodule.c"
        var $99=$98+8; //@line 312 "shamodule.c"
        var $100=$99; //@line 312 "shamodule.c"
        var $101=HEAP[$100]; //@line 312 "shamodule.c"
        var $102=($101) >>> 8; //@line 312 "shamodule.c"
        var $103=((($102)) & 255); //@line 312 "shamodule.c"
        var $104=$digest_addr; //@line 312 "shamodule.c"
        var $105=$104+2; //@line 312 "shamodule.c"
        HEAP[$105]=$103; //@line 312 "shamodule.c"
        var $106=$sha_info_addr; //@line 313 "shamodule.c"
        var $107=$106+8; //@line 313 "shamodule.c"
        var $108=$107; //@line 313 "shamodule.c"
        var $109=HEAP[$108]; //@line 313 "shamodule.c"
        var $110=((($109)) & 255); //@line 313 "shamodule.c"
        var $111=$digest_addr; //@line 313 "shamodule.c"
        var $112=$111+3; //@line 313 "shamodule.c"
        HEAP[$112]=$110; //@line 313 "shamodule.c"
        var $113=$sha_info_addr; //@line 314 "shamodule.c"
        var $114=$113+8; //@line 314 "shamodule.c"
        var $115=$114+4; //@line 314 "shamodule.c"
        var $116=HEAP[$115]; //@line 314 "shamodule.c"
        var $117=($116) >>> 24; //@line 314 "shamodule.c"
        var $118=((($117)) & 255); //@line 314 "shamodule.c"
        var $119=$digest_addr; //@line 314 "shamodule.c"
        var $120=$119+4; //@line 314 "shamodule.c"
        HEAP[$120]=$118; //@line 314 "shamodule.c"
        var $121=$sha_info_addr; //@line 315 "shamodule.c"
        var $122=$121+8; //@line 315 "shamodule.c"
        var $123=$122+4; //@line 315 "shamodule.c"
        var $124=HEAP[$123]; //@line 315 "shamodule.c"
        var $125=($124) >>> 16; //@line 315 "shamodule.c"
        var $126=((($125)) & 255); //@line 315 "shamodule.c"
        var $127=$digest_addr; //@line 315 "shamodule.c"
        var $128=$127+5; //@line 315 "shamodule.c"
        HEAP[$128]=$126; //@line 315 "shamodule.c"
        var $129=$sha_info_addr; //@line 316 "shamodule.c"
        var $130=$129+8; //@line 316 "shamodule.c"
        var $131=$130+4; //@line 316 "shamodule.c"
        var $132=HEAP[$131]; //@line 316 "shamodule.c"
        var $133=($132) >>> 8; //@line 316 "shamodule.c"
        var $134=((($133)) & 255); //@line 316 "shamodule.c"
        var $135=$digest_addr; //@line 316 "shamodule.c"
        var $136=$135+6; //@line 316 "shamodule.c"
        HEAP[$136]=$134; //@line 316 "shamodule.c"
        var $137=$sha_info_addr; //@line 317 "shamodule.c"
        var $138=$137+8; //@line 317 "shamodule.c"
        var $139=$138+4; //@line 317 "shamodule.c"
        var $140=HEAP[$139]; //@line 317 "shamodule.c"
        var $141=((($140)) & 255); //@line 317 "shamodule.c"
        var $142=$digest_addr; //@line 317 "shamodule.c"
        var $143=$142+7; //@line 317 "shamodule.c"
        HEAP[$143]=$141; //@line 317 "shamodule.c"
        var $144=$sha_info_addr; //@line 318 "shamodule.c"
        var $145=$144+8; //@line 318 "shamodule.c"
        var $146=$145+8; //@line 318 "shamodule.c"
        var $147=HEAP[$146]; //@line 318 "shamodule.c"
        var $148=($147) >>> 24; //@line 318 "shamodule.c"
        var $149=((($148)) & 255); //@line 318 "shamodule.c"
        var $150=$digest_addr; //@line 318 "shamodule.c"
        var $151=$150+8; //@line 318 "shamodule.c"
        HEAP[$151]=$149; //@line 318 "shamodule.c"
        var $152=$sha_info_addr; //@line 319 "shamodule.c"
        var $153=$152+8; //@line 319 "shamodule.c"
        var $154=$153+8; //@line 319 "shamodule.c"
        var $155=HEAP[$154]; //@line 319 "shamodule.c"
        var $156=($155) >>> 16; //@line 319 "shamodule.c"
        var $157=((($156)) & 255); //@line 319 "shamodule.c"
        var $158=$digest_addr; //@line 319 "shamodule.c"
        var $159=$158+9; //@line 319 "shamodule.c"
        HEAP[$159]=$157; //@line 319 "shamodule.c"
        var $160=$sha_info_addr; //@line 320 "shamodule.c"
        var $161=$160+8; //@line 320 "shamodule.c"
        var $162=$161+8; //@line 320 "shamodule.c"
        var $163=HEAP[$162]; //@line 320 "shamodule.c"
        var $164=($163) >>> 8; //@line 320 "shamodule.c"
        var $165=((($164)) & 255); //@line 320 "shamodule.c"
        var $166=$digest_addr; //@line 320 "shamodule.c"
        var $167=$166+10; //@line 320 "shamodule.c"
        HEAP[$167]=$165; //@line 320 "shamodule.c"
        var $168=$sha_info_addr; //@line 321 "shamodule.c"
        var $169=$168+8; //@line 321 "shamodule.c"
        var $170=$169+8; //@line 321 "shamodule.c"
        var $171=HEAP[$170]; //@line 321 "shamodule.c"
        var $172=((($171)) & 255); //@line 321 "shamodule.c"
        var $173=$digest_addr; //@line 321 "shamodule.c"
        var $174=$173+11; //@line 321 "shamodule.c"
        HEAP[$174]=$172; //@line 321 "shamodule.c"
        var $175=$sha_info_addr; //@line 322 "shamodule.c"
        var $176=$175+8; //@line 322 "shamodule.c"
        var $177=$176+12; //@line 322 "shamodule.c"
        var $178=HEAP[$177]; //@line 322 "shamodule.c"
        var $179=($178) >>> 24; //@line 322 "shamodule.c"
        var $180=((($179)) & 255); //@line 322 "shamodule.c"
        var $181=$digest_addr; //@line 322 "shamodule.c"
        var $182=$181+12; //@line 322 "shamodule.c"
        HEAP[$182]=$180; //@line 322 "shamodule.c"
        var $183=$sha_info_addr; //@line 323 "shamodule.c"
        var $184=$183+8; //@line 323 "shamodule.c"
        var $185=$184+12; //@line 323 "shamodule.c"
        var $186=HEAP[$185]; //@line 323 "shamodule.c"
        var $187=($186) >>> 16; //@line 323 "shamodule.c"
        var $188=((($187)) & 255); //@line 323 "shamodule.c"
        var $189=$digest_addr; //@line 323 "shamodule.c"
        var $190=$189+13; //@line 323 "shamodule.c"
        HEAP[$190]=$188; //@line 323 "shamodule.c"
        var $191=$sha_info_addr; //@line 324 "shamodule.c"
        var $192=$191+8; //@line 324 "shamodule.c"
        var $193=$192+12; //@line 324 "shamodule.c"
        var $194=HEAP[$193]; //@line 324 "shamodule.c"
        var $195=($194) >>> 8; //@line 324 "shamodule.c"
        var $196=((($195)) & 255); //@line 324 "shamodule.c"
        var $197=$digest_addr; //@line 324 "shamodule.c"
        var $198=$197+14; //@line 324 "shamodule.c"
        HEAP[$198]=$196; //@line 324 "shamodule.c"
        var $199=$sha_info_addr; //@line 325 "shamodule.c"
        var $200=$199+8; //@line 325 "shamodule.c"
        var $201=$200+12; //@line 325 "shamodule.c"
        var $202=HEAP[$201]; //@line 325 "shamodule.c"
        var $203=((($202)) & 255); //@line 325 "shamodule.c"
        var $204=$digest_addr; //@line 325 "shamodule.c"
        var $205=$204+15; //@line 325 "shamodule.c"
        HEAP[$205]=$203; //@line 325 "shamodule.c"
        var $206=$sha_info_addr; //@line 326 "shamodule.c"
        var $207=$206+8; //@line 326 "shamodule.c"
        var $208=$207+16; //@line 326 "shamodule.c"
        var $209=HEAP[$208]; //@line 326 "shamodule.c"
        var $210=($209) >>> 24; //@line 326 "shamodule.c"
        var $211=((($210)) & 255); //@line 326 "shamodule.c"
        var $212=$digest_addr; //@line 326 "shamodule.c"
        var $213=$212+16; //@line 326 "shamodule.c"
        HEAP[$213]=$211; //@line 326 "shamodule.c"
        var $214=$sha_info_addr; //@line 327 "shamodule.c"
        var $215=$214+8; //@line 327 "shamodule.c"
        var $216=$215+16; //@line 327 "shamodule.c"
        var $217=HEAP[$216]; //@line 327 "shamodule.c"
        var $218=($217) >>> 16; //@line 327 "shamodule.c"
        var $219=((($218)) & 255); //@line 327 "shamodule.c"
        var $220=$digest_addr; //@line 327 "shamodule.c"
        var $221=$220+17; //@line 327 "shamodule.c"
        HEAP[$221]=$219; //@line 327 "shamodule.c"
        var $222=$sha_info_addr; //@line 328 "shamodule.c"
        var $223=$222+8; //@line 328 "shamodule.c"
        var $224=$223+16; //@line 328 "shamodule.c"
        var $225=HEAP[$224]; //@line 328 "shamodule.c"
        var $226=($225) >>> 8; //@line 328 "shamodule.c"
        var $227=((($226)) & 255); //@line 328 "shamodule.c"
        var $228=$digest_addr; //@line 328 "shamodule.c"
        var $229=$228+18; //@line 328 "shamodule.c"
        HEAP[$229]=$227; //@line 328 "shamodule.c"
        var $230=$sha_info_addr; //@line 329 "shamodule.c"
        var $231=$230+8; //@line 329 "shamodule.c"
        var $232=$231+16; //@line 329 "shamodule.c"
        var $233=HEAP[$232]; //@line 329 "shamodule.c"
        var $234=((($233)) & 255); //@line 329 "shamodule.c"
        var $235=$digest_addr; //@line 329 "shamodule.c"
        var $236=$235+19; //@line 329 "shamodule.c"
        HEAP[$236]=$234; //@line 329 "shamodule.c"
        ;
        return; //@line 330 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newSHAobject() {
    ;
    var __label__;
  
    var $retval;
    var $0;
    var $1=__PyObject_New(_SHAtype); //@line 344 "shamodule.c"
    var $2=$1; //@line 344 "shamodule.c"
    $0=$2; //@line 344 "shamodule.c"
    var $3=$0; //@line 344 "shamodule.c"
    $retval=$3; //@line 344 "shamodule.c"
    var $retval1=$retval; //@line 344 "shamodule.c"
    ;
    return $retval1; //@line 344 "shamodule.c"
  }
  

  function _SHA_dealloc($ptr) {
    ;
    var __label__;
  
    var $ptr_addr;
    $ptr_addr=$ptr;
    var $0=$ptr_addr; //@line 352 "shamodule.c"
    var $1=$0; //@line 352 "shamodule.c"
    _PyObject_Free($1); //@line 352 "shamodule.c"
    ;
    return; //@line 353 "shamodule.c"
  }
  

  function _SHA_copy($self, $unused) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $unused_addr;
        var $retval;
        var $0;
        var $newobj;
        $self_addr=$self;
        $unused_addr=$unused;
        var $1=_newSHAobject(); //@line 365 "shamodule.c"
        $newobj=$1; //@line 365 "shamodule.c"
        var $2=$newobj; //@line 365 "shamodule.c"
        var $3=($2)==0; //@line 365 "shamodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 365 "shamodule.c"
      case 1: // $bb
        $0=0; //@line 366 "shamodule.c"
        __label__ = 3; break; //@line 366 "shamodule.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 368 "shamodule.c"
        var $5=$newobj; //@line 368 "shamodule.c"
        _SHAcopy($4, $5); //@line 368 "shamodule.c"
        var $6=$newobj; //@line 369 "shamodule.c"
        var $7=$6; //@line 369 "shamodule.c"
        $0=$7; //@line 369 "shamodule.c"
        __label__ = 3; break; //@line 369 "shamodule.c"
      case 3: // $bb2
        var $8=$0; //@line 366 "shamodule.c"
        $retval=$8; //@line 366 "shamodule.c"
        var $retval3=$retval; //@line 366 "shamodule.c"
        ;
        return $retval3; //@line 366 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHA_digest($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 128; _memset(__stackBase__, 0, 128);
    var __label__;
  
    var $self_addr;
    var $unused_addr;
    var $retval;
    var $0;
    var $digest=__stackBase__;
    var $temp=__stackBase__+20;
    $self_addr=$self;
    $unused_addr=$unused;
    var $1=$self_addr; //@line 381 "shamodule.c"
    _SHAcopy($1, $temp); //@line 381 "shamodule.c"
    var $digest1=$digest; //@line 382 "shamodule.c"
    _sha_final($digest1, $temp); //@line 382 "shamodule.c"
    var $digest2=$digest; //@line 383 "shamodule.c"
    var $2=_PyString_FromStringAndSize($digest2, 20); //@line 383 "shamodule.c"
    $0=$2; //@line 383 "shamodule.c"
    var $3=$0; //@line 383 "shamodule.c"
    $retval=$3; //@line 383 "shamodule.c"
    var $retval4=$retval; //@line 383 "shamodule.c"
    STACKTOP = __stackBase__;
    return $retval4; //@line 383 "shamodule.c"
  }
  

  function _SHA_hexdigest($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 128; _memset(__stackBase__, 0, 128);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $unused_addr;
        var $retval;
        var $iftmp_12;
        var $iftmp_8;
        var $0;
        var $digest=__stackBase__;
        var $temp=__stackBase__+20;
        var $retval1;
        var $hex_digest;
        var $i;
        var $j;
        var $c;
        $self_addr=$self;
        $unused_addr=$unused;
        var $1=$self_addr; //@line 399 "shamodule.c"
        _SHAcopy($1, $temp); //@line 399 "shamodule.c"
        var $digest2=$digest; //@line 400 "shamodule.c"
        _sha_final($digest2, $temp); //@line 400 "shamodule.c"
        var $2=_PyString_FromStringAndSize(0, 40); //@line 403 "shamodule.c"
        $retval1=$2; //@line 403 "shamodule.c"
        var $3=$retval1; //@line 404 "shamodule.c"
        var $4=($3)==0; //@line 404 "shamodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 404 "shamodule.c"
      case 1: // $bb
        $0=0; //@line 405 "shamodule.c"
        __label__ = 15; break; //@line 405 "shamodule.c"
      case 2: // $bb3
        var $5=$retval1; //@line 406 "shamodule.c"
        var $6=_PyString_AsString($5); //@line 406 "shamodule.c"
        $hex_digest=$6; //@line 406 "shamodule.c"
        var $7=$hex_digest; //@line 407 "shamodule.c"
        var $8=($7)==0; //@line 407 "shamodule.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 407 "shamodule.c"
      case 3: // $bb4
        var $9=$retval1; //@line 408 "shamodule.c"
        var $10=$9; //@line 408 "shamodule.c"
        var $11=HEAP[$10]; //@line 408 "shamodule.c"
        var $12=($11) - 1; //@line 408 "shamodule.c"
        var $13=$retval1; //@line 408 "shamodule.c"
        var $14=$13; //@line 408 "shamodule.c"
        HEAP[$14]=$12; //@line 408 "shamodule.c"
        var $15=$retval1; //@line 408 "shamodule.c"
        var $16=$15; //@line 408 "shamodule.c"
        var $17=HEAP[$16]; //@line 408 "shamodule.c"
        var $18=($17)==0; //@line 408 "shamodule.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 408 "shamodule.c"
      case 4: // $bb5
        var $19=$retval1; //@line 408 "shamodule.c"
        var $20=$19+4; //@line 408 "shamodule.c"
        var $21=HEAP[$20]; //@line 408 "shamodule.c"
        var $22=$21+24; //@line 408 "shamodule.c"
        var $23=HEAP[$22]; //@line 408 "shamodule.c"
        var $24=$retval1; //@line 408 "shamodule.c"
        FUNCTION_TABLE[$23]($24); //@line 408 "shamodule.c"
        __label__ = 5; break; //@line 408 "shamodule.c"
      case 5: // $bb6
        $0=0; //@line 409 "shamodule.c"
        __label__ = 15; break; //@line 409 "shamodule.c"
      case 6: // $bb7
        $j=0; //@line 413 "shamodule.c"
        var $25=$j; //@line 413 "shamodule.c"
        $i=$25; //@line 413 "shamodule.c"
        var $26=($25) <= 19; //@line 413 "shamodule.c"
        if ($26) { __label__ = 7; break; } else { __label__ = 14; break; } //@line 413 "shamodule.c"
      case 7: // $bb8
        var $27=$i; //@line 415 "shamodule.c"
        var $28=$digest+$27; //@line 415 "shamodule.c"
        var $29=HEAP[$28]; //@line 415 "shamodule.c"
        var $30=($29) >>> 4; //@line 415 "shamodule.c"
        var $31=($30) & 15; //@line 415 "shamodule.c"
        $c=$31; //@line 415 "shamodule.c"
        var $32=($31) > 9; //@line 416 "shamodule.c"
        var $33=$c; //@line 416 "shamodule.c"
        if ($32) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 416 "shamodule.c"
      case 8: // $bb9
        var $34=($33) + 87; //@line 416 "shamodule.c"
        $iftmp_8=$34; //@line 416 "shamodule.c"
        __label__ = 10; break; //@line 416 "shamodule.c"
      case 9: // $bb10
        var $35=($33) + 48; //@line 416 "shamodule.c"
        $iftmp_8=$35; //@line 416 "shamodule.c"
        __label__ = 10; break; //@line 416 "shamodule.c"
      case 10: // $bb11
        var $36=$iftmp_8; //@line 416 "shamodule.c"
        $c=$36; //@line 416 "shamodule.c"
        var $37=$hex_digest; //@line 417 "shamodule.c"
        var $38=$j; //@line 417 "shamodule.c"
        var $39=$37+$38; //@line 417 "shamodule.c"
        var $40=$c; //@line 417 "shamodule.c"
        HEAP[$39]=$40; //@line 417 "shamodule.c"
        var $41=$j; //@line 417 "shamodule.c"
        var $42=($41) + 1; //@line 417 "shamodule.c"
        $j=$42; //@line 417 "shamodule.c"
        var $43=$i; //@line 418 "shamodule.c"
        var $44=$digest+$43; //@line 418 "shamodule.c"
        var $45=HEAP[$44]; //@line 418 "shamodule.c"
        var $46=($45) & 15; //@line 418 "shamodule.c"
        $c=$46; //@line 418 "shamodule.c"
        var $47=($46) > 9; //@line 419 "shamodule.c"
        var $48=$c; //@line 419 "shamodule.c"
        if ($47) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 419 "shamodule.c"
      case 11: // $bb12
        var $49=($48) + 87; //@line 419 "shamodule.c"
        $iftmp_12=$49; //@line 419 "shamodule.c"
        __label__ = 13; break; //@line 419 "shamodule.c"
      case 12: // $bb13
        var $50=($48) + 48; //@line 419 "shamodule.c"
        $iftmp_12=$50; //@line 419 "shamodule.c"
        __label__ = 13; break; //@line 419 "shamodule.c"
      case 13: // $bb14
        var $51=$iftmp_12; //@line 419 "shamodule.c"
        $c=$51; //@line 419 "shamodule.c"
        var $52=$hex_digest; //@line 420 "shamodule.c"
        var $53=$j; //@line 420 "shamodule.c"
        var $54=$52+$53; //@line 420 "shamodule.c"
        var $55=$c; //@line 420 "shamodule.c"
        HEAP[$54]=$55; //@line 420 "shamodule.c"
        var $56=$j; //@line 420 "shamodule.c"
        var $57=($56) + 1; //@line 420 "shamodule.c"
        $j=$57; //@line 420 "shamodule.c"
        var $58=$i; //@line 413 "shamodule.c"
        var $59=($58) + 1; //@line 413 "shamodule.c"
        $i=$59; //@line 413 "shamodule.c"
        var $60=($59) <= 19; //@line 413 "shamodule.c"
        if ($60) { __label__ = 7; break; } else { __label__ = 14; break; } //@line 413 "shamodule.c"
      case 14: // $bb16
        var $61=$retval1; //@line 422 "shamodule.c"
        $0=$61; //@line 422 "shamodule.c"
        __label__ = 15; break; //@line 422 "shamodule.c"
      case 15: // $bb17
        var $62=$0; //@line 405 "shamodule.c"
        $retval=$62; //@line 405 "shamodule.c"
        var $retval18=$retval; //@line 405 "shamodule.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 405 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHA_update($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $view=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$args_addr; //@line 433 "shamodule.c"
        var $2=_PyArg_ParseTuple($1, __str, allocate([$view,0,0,0], ["%struct.Py_buffer*",0,0,0], ALLOC_STACK)); //@line 433 "shamodule.c"
        var $3=($2)==0; //@line 433 "shamodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 433 "shamodule.c"
      case 1: // $bb
        $0=0; //@line 434 "shamodule.c"
        __label__ = 3; break; //@line 434 "shamodule.c"
      case 2: // $bb1
        var $4=$view+8; //@line 436 "shamodule.c"
        var $5=HEAP[$4]; //@line 436 "shamodule.c"
        var $6=$view; //@line 436 "shamodule.c"
        var $7=HEAP[$6]; //@line 436 "shamodule.c"
        var $8=$self_addr; //@line 436 "shamodule.c"
        _sha_update($8, $7, $5); //@line 436 "shamodule.c"
        _PyBuffer_Release($view); //@line 439 "shamodule.c"
        var $9=HEAP[__Py_NoneStruct]; //@line 440 "shamodule.c"
        var $10=($9) + 1; //@line 440 "shamodule.c"
        HEAP[__Py_NoneStruct]=$10; //@line 440 "shamodule.c"
        $0=__Py_NoneStruct; //@line 440 "shamodule.c"
        __label__ = 3; break; //@line 440 "shamodule.c"
      case 3: // $bb2
        var $11=$0; //@line 434 "shamodule.c"
        $retval=$11; //@line 434 "shamodule.c"
        var $retval3=$retval; //@line 434 "shamodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 434 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHA_get_block_size($self, $closure) {
    ;
    var __label__;
  
    var $self_addr;
    var $closure_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $closure_addr=$closure;
    var $1=_PyInt_FromLong(64); //@line 454 "shamodule.c"
    $0=$1; //@line 454 "shamodule.c"
    var $2=$0; //@line 454 "shamodule.c"
    $retval=$2; //@line 454 "shamodule.c"
    var $retval1=$retval; //@line 454 "shamodule.c"
    ;
    return $retval1; //@line 454 "shamodule.c"
  }
  

  function _SHA_get_digest_size($self, $closure) {
    ;
    var __label__;
  
    var $self_addr;
    var $closure_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $closure_addr=$closure;
    var $1=_PyInt_FromLong(20); //@line 460 "shamodule.c"
    $0=$1; //@line 460 "shamodule.c"
    var $2=$0; //@line 460 "shamodule.c"
    $retval=$2; //@line 460 "shamodule.c"
    var $retval1=$retval; //@line 460 "shamodule.c"
    ;
    return $retval1; //@line 460 "shamodule.c"
  }
  

  function _SHA_get_name($self, $closure) {
    ;
    var __label__;
  
    var $self_addr;
    var $closure_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $closure_addr=$closure;
    var $1=_PyString_FromStringAndSize(__str5, 4); //@line 466 "shamodule.c"
    $0=$1; //@line 466 "shamodule.c"
    var $2=$0; //@line 466 "shamodule.c"
    $retval=$2; //@line 466 "shamodule.c"
    var $retval1=$retval; //@line 466 "shamodule.c"
    ;
    return $retval1; //@line 466 "shamodule.c"
  }
  

  function _SHA_new($self, $args, $kwdict) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwdict_addr;
        var $retval;
        var $0;
        var $new;
        var $view=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        $kwdict_addr=$kwdict;
        var $view1=$view; //@line 538 "shamodule.c"
        _llvm_memset_p0i8_i32($view1, 0, 52, 4, 0); //@line 538 "shamodule.c"
        var $1=$args_addr; //@line 540 "shamodule.c"
        var $2=$kwdict_addr; //@line 540 "shamodule.c"
        var $3=_PyArg_ParseTupleAndKeywords($1, $2, __str11, _kwlist_9310, allocate([$view,0,0,0], ["%struct.Py_buffer*",0,0,0], ALLOC_STACK)); //@line 540 "shamodule.c"
        var $4=($3)==0; //@line 540 "shamodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 540 "shamodule.c"
      case 1: // $bb
        $0=0; //@line 542 "shamodule.c"
        __label__ = 11; break; //@line 542 "shamodule.c"
      case 2: // $bb2
        var $5=_newSHAobject(); //@line 545 "shamodule.c"
        $new=$5; //@line 545 "shamodule.c"
        var $6=$new; //@line 545 "shamodule.c"
        var $7=($6)==0; //@line 545 "shamodule.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 545 "shamodule.c"
      case 3: // $bb3
        _PyBuffer_Release($view); //@line 546 "shamodule.c"
        $0=0; //@line 547 "shamodule.c"
        __label__ = 11; break; //@line 547 "shamodule.c"
      case 4: // $bb4
        var $8=$new; //@line 550 "shamodule.c"
        _sha_init($8); //@line 550 "shamodule.c"
        var $9=_PyErr_Occurred(); //@line 552 "shamodule.c"
        var $10=($9)!=0; //@line 552 "shamodule.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 552 "shamodule.c"
      case 5: // $bb5
        var $11=$new; //@line 553 "shamodule.c"
        var $12=$11; //@line 553 "shamodule.c"
        var $13=$12; //@line 553 "shamodule.c"
        var $14=HEAP[$13]; //@line 553 "shamodule.c"
        var $15=($14) - 1; //@line 553 "shamodule.c"
        var $16=$12; //@line 553 "shamodule.c"
        HEAP[$16]=$15; //@line 553 "shamodule.c"
        var $17=$12; //@line 553 "shamodule.c"
        var $18=HEAP[$17]; //@line 553 "shamodule.c"
        var $19=($18)==0; //@line 553 "shamodule.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 553 "shamodule.c"
      case 6: // $bb6
        var $20=$new; //@line 553 "shamodule.c"
        var $21=$20; //@line 553 "shamodule.c"
        var $22=$21+4; //@line 553 "shamodule.c"
        var $23=HEAP[$22]; //@line 553 "shamodule.c"
        var $24=$23+24; //@line 553 "shamodule.c"
        var $25=HEAP[$24]; //@line 553 "shamodule.c"
        var $26=$new; //@line 553 "shamodule.c"
        var $27=$26; //@line 553 "shamodule.c"
        FUNCTION_TABLE[$25]($27); //@line 553 "shamodule.c"
        __label__ = 7; break; //@line 553 "shamodule.c"
      case 7: // $bb7
        _PyBuffer_Release($view); //@line 554 "shamodule.c"
        $0=0; //@line 555 "shamodule.c"
        __label__ = 11; break; //@line 555 "shamodule.c"
      case 8: // $bb8
        var $28=$view+8; //@line 557 "shamodule.c"
        var $29=HEAP[$28]; //@line 557 "shamodule.c"
        var $30=($29) > 0; //@line 557 "shamodule.c"
        if ($30) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 557 "shamodule.c"
      case 9: // $bb9
        var $31=$view+8; //@line 558 "shamodule.c"
        var $32=HEAP[$31]; //@line 558 "shamodule.c"
        var $33=$view; //@line 558 "shamodule.c"
        var $34=HEAP[$33]; //@line 558 "shamodule.c"
        var $35=$new; //@line 558 "shamodule.c"
        _sha_update($35, $34, $32); //@line 558 "shamodule.c"
        __label__ = 10; break; //@line 558 "shamodule.c"
      case 10: // $bb10
        _PyBuffer_Release($view); //@line 561 "shamodule.c"
        var $36=$new; //@line 563 "shamodule.c"
        var $37=$36; //@line 563 "shamodule.c"
        $0=$37; //@line 563 "shamodule.c"
        __label__ = 11; break; //@line 563 "shamodule.c"
      case 11: // $bb11
        var $38=$0; //@line 542 "shamodule.c"
        $retval=$38; //@line 542 "shamodule.c"
        var $retval12=$retval; //@line 542 "shamodule.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 542 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _init_sha() {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $m;
        HEAP[_SHAtype+4]=_PyType_Type; //@line 584 "shamodule.c"
        var $0=_PyType_Ready(_SHAtype); //@line 585 "shamodule.c"
        var $1=($0) < 0; //@line 585 "shamodule.c"
        if ($1) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 585 "shamodule.c"
      case 1: // $bb
        var $2=_Py_InitModule4(__str14, _SHA_functions, 0, 0, 1013); //@line 587 "shamodule.c"
        $m=$2; //@line 587 "shamodule.c"
        var $3=$m; //@line 588 "shamodule.c"
        var $4=($3)==0; //@line 588 "shamodule.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 588 "shamodule.c"
      case 2: // $bb1
        var $5=$m; //@line 592 "shamodule.c"
        var $6=_PyModule_AddIntConstant($5, __str15, 1); //@line 592 "shamodule.c"
        var $7=$m; //@line 595 "shamodule.c"
        var $8=_PyModule_AddIntConstant($7, __str9, 20); //@line 595 "shamodule.c"
        var $9=$m; //@line 596 "shamodule.c"
        var $10=_PyModule_AddIntConstant($9, __str6, 20); //@line 596 "shamodule.c"
        __label__ = 3; break; //@line 596 "shamodule.c"
      case 3: // $return
        ;
        return; //@line 586 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  Module["_init_sha"] = _init_sha;
FUNCTION_TABLE = FUNCTION_TABLE.concat([0,0,_SHA_copy,0,_SHA_digest,0,_SHA_hexdigest,0,_SHA_update,0,_SHA_get_digest_size,0,_SHA_get_block_size,0,_SHA_get_name,0,_SHA_dealloc,0,_SHA_new,0]);

// === Auto-generated postamble setup entry stuff ===

function run(args) {
  
_SHA_copy__doc__=allocate([82,101,116,117,114,110,32,97,32,99,111,112,121,32,111,102,32,116,104,101,32,104,97,115,104,105,110,103,32,111,98,106,101,99,116,46,0] /* Return a copy of the */, "i8", ALLOC_NORMAL);
_SHA_digest__doc__=allocate([82,101,116,117,114,110,32,116,104,101,32,100,105,103,101,115,116,32,118,97,108,117,101,32,97,115,32,97,32,115,116,114,105,110,103,32,111,102,32,98,105,110,97,114,121,32,100,97,116,97,46,0] /* Return the digest va */, "i8", ALLOC_NORMAL);
_SHA_hexdigest__doc__=allocate([82,101,116,117,114,110,32,116,104,101,32,100,105,103,101,115,116,32,118,97,108,117,101,32,97,115,32,97,32,115,116,114,105,110,103,32,111,102,32,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,115,46,0] /* Return the digest va */, "i8", ALLOC_NORMAL);
_SHA_update__doc__=allocate([85,112,100,97,116,101,32,116,104,105,115,32,104,97,115,104,105,110,103,32,111,98,106,101,99,116,39,115,32,115,116,97,116,101,32,119,105,116,104,32,116,104,101,32,112,114,111,118,105,100,101,100,32,115,116,114,105,110,103,46,0] /* Update this hashing  */, "i8", ALLOC_NORMAL);
__str=allocate([115,42,58,117,112,100,97,116,101,0] /* s_:update\00 */, "i8", ALLOC_NORMAL);
__str1=allocate([99,111,112,121,0] /* copy\00 */, "i8", ALLOC_NORMAL);
__str2=allocate([100,105,103,101,115,116,0] /* digest\00 */, "i8", ALLOC_NORMAL);
__str3=allocate([104,101,120,100,105,103,101,115,116,0] /* hexdigest\00 */, "i8", ALLOC_NORMAL);
__str4=allocate([117,112,100,97,116,101,0] /* update\00 */, "i8", ALLOC_NORMAL);
_SHA_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str5=allocate([83,72,65,49,0] /* SHA1\00 */, "i8", ALLOC_NORMAL);
__str6=allocate([100,105,103,101,115,116,95,115,105,122,101,0] /* digest_size\00 */, "i8", ALLOC_NORMAL);
__str7=allocate([98,108,111,99,107,95,115,105,122,101,0] /* block_size\00 */, "i8", ALLOC_NORMAL);
__str8=allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NORMAL);
__str9=allocate([100,105,103,101,115,116,115,105,122,101,0] /* digestsize\00 */, "i8", ALLOC_NORMAL);
_SHA_getseters=allocate(100, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str10=allocate([95,115,104,97,46,115,104,97,0] /* _sha.sha\00 */, "i8", ALLOC_NORMAL);
_SHAtype=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_SHA_new__doc__=allocate([82,101,116,117,114,110,32,97,32,110,101,119,32,83,72,65,32,104,97,115,104,105,110,103,32,111,98,106,101,99,116,46,32,32,65,110,32,111,112,116,105,111,110,97,108,32,115,116,114,105,110,103,32,97,114,103,117,109,101,110,116,10,109,97,121,32,98,101,32,112,114,111,118,105,100,101,100,59,32,105,102,32,112,114,101,115,101,110,116,44,32,116,104,105,115,32,115,116,114,105,110,103,32,119,105,108,108,32,98,101,32,97,117,116,111,109,97,116,105,99,97,108,108,121,10,104,97,115,104,101,100,46,0] /* Return a new SHA has */, "i8", ALLOC_NORMAL);
__str11=allocate([124,115,42,58,110,101,119,0] /* |s_:new\00 */, "i8", ALLOC_NORMAL);
_kwlist_9310=allocate(8, "i8*", ALLOC_NORMAL);
__str12=allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_NORMAL);
__str13=allocate([110,101,119,0] /* new\00 */, "i8", ALLOC_NORMAL);
_SHA_functions=allocate([0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str14=allocate([95,115,104,97,0] /* _sha\00 */, "i8", ALLOC_NORMAL);
__str15=allocate([98,108,111,99,107,115,105,122,101,0] /* blocksize\00 */, "i8", ALLOC_NORMAL);
HEAP[_SHA_methods]=__str1;
HEAP[_SHA_methods+4]=(FUNCTION_TABLE_OFFSET + 2);
HEAP[_SHA_methods+12]=_SHA_copy__doc__;
HEAP[_SHA_methods+16]=__str2;
HEAP[_SHA_methods+20]=(FUNCTION_TABLE_OFFSET + 4);
HEAP[_SHA_methods+28]=_SHA_digest__doc__;
HEAP[_SHA_methods+32]=__str3;
HEAP[_SHA_methods+36]=(FUNCTION_TABLE_OFFSET + 6);
HEAP[_SHA_methods+44]=_SHA_hexdigest__doc__;
HEAP[_SHA_methods+48]=__str4;
HEAP[_SHA_methods+52]=(FUNCTION_TABLE_OFFSET + 8);
HEAP[_SHA_methods+60]=_SHA_update__doc__;
HEAP[_SHA_getseters]=__str6;
HEAP[_SHA_getseters+4]=(FUNCTION_TABLE_OFFSET + 10);
HEAP[_SHA_getseters+20]=__str7;
HEAP[_SHA_getseters+24]=(FUNCTION_TABLE_OFFSET + 12);
HEAP[_SHA_getseters+40]=__str8;
HEAP[_SHA_getseters+44]=(FUNCTION_TABLE_OFFSET + 14);
HEAP[_SHA_getseters+60]=__str9;
HEAP[_SHA_getseters+64]=(FUNCTION_TABLE_OFFSET + 10);
HEAP[_SHAtype+12]=__str10;
HEAP[_SHAtype+24]=(FUNCTION_TABLE_OFFSET + 16);
HEAP[_SHAtype+116]=_SHA_methods;
HEAP[_SHAtype+124]=_SHA_getseters;
HEAP[_kwlist_9310]=__str12;
HEAP[_SHA_functions]=__str13;
HEAP[_SHA_functions+4]=(FUNCTION_TABLE_OFFSET + 18);
HEAP[_SHA_functions+12]=_SHA_new__doc__;

  __globalConstructor__();
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

run();

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}

  return Module;
});

>>>>>>> f1726142f40cb660652d789a0d51be1d72d90630
